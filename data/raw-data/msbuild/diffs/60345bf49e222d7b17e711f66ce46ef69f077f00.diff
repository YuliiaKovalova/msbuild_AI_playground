diff --git a/.editorconfig b/.editorconfig
index fa30dae9c78..fc8b2d155df 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -157,6 +157,9 @@ csharp_space_between_square_brackets = false
 dotnet_code_quality.ca1802.api_surface = private, internal
 dotnet_code_quality.ca2208.api_surface = public
 
+# CA1852: Seal internal types
+dotnet_diagnostic.ca1852.severity = warning
+
 # RS0037: Enable tracking of nullability of reference types in the declared API
 # Our API is not annotated but new classes get nullable enabled so disable this.
 # We'd be happy if everything was annotated and this could be removed.
diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.md b/.github/ISSUE_TEMPLATE/01_bugreport.md
deleted file mode 100644
index 213ab15269b..00000000000
--- a/.github/ISSUE_TEMPLATE/01_bugreport.md
+++ /dev/null
@@ -1,54 +0,0 @@
----
-name: üêû Bug Report
-about: Report a bug to help us improve MSBuild.
-title: ''
-labels: bug, needs-triage
----
-
-<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->
-
-### Issue Description
-<!--
-* Please include a clear and concise description of the problem.
--->
-
-### Steps to Reproduce
-<!--
-* Include as much of the following as possible:
-
-* A minimal sample project that reproduces the issue.
-* Your zipped project.
-* IDE / CLI steps to create the project and reproduce the behaviour.
-* Your command line invocation
-
-If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
-[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
-[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
-NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
-If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--->
-
-### Expected Behavior
-<!--
-* The expected output or behavior.
--->
-
-### Actual Behavior
-<!--
-* The actual output or behavior.
--->
-
-### Analysis
-<!--
-* If you have an idea where the problem might lie, let us know that here.
-* Please include any pointers to code, relevant changes, or related issues you know of.
--->
-
-### Versions & Configurations
-<!--
-* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
-* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):
-
-* Post any other relevant configuration settings here.
-*   OS, architecture, etc.
--->
diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.yml b/.github/ISSUE_TEMPLATE/01_bugreport.yml
new file mode 100644
index 00000000000..ac84e2563ad
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/01_bugreport.yml
@@ -0,0 +1,52 @@
+name: üêû Bug Report
+description: Report a bug to help us improve MSBuild.
+title: "[Bug]: "
+labels: ["bug", "needs-triage"]
+body:
+  - type: textarea
+    attributes:
+      label: Issue Description
+      description: Please include a clear and concise description of the problem.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Steps to Reproduce
+      description:  | 
+        Include as much of the following as possible: 
+          * a minimal sample project that reproduces the issue, 
+          * your zipped project, 
+          * IDE / CLI steps to create the project and reproduce the behaviour, 
+          * your command line invocation.
+          
+          If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+          * [Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+          * [More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+          
+          NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+          If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Expected Behavior
+      description: The expected output or behavior.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Actual Behavior
+      description: The actual output or behavior.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Analysis
+      description: If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.
+  - type: textarea
+    attributes:
+      label: Versions & Configurations
+      description: |
+        In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
+        If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc).
+        Post any other relevant configuration settings here: OS, architecture, etc.
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.md b/.github/ISSUE_TEMPLATE/02_performanceissue.md
deleted file mode 100644
index d1e93dc9ea5..00000000000
--- a/.github/ISSUE_TEMPLATE/02_performanceissue.md
+++ /dev/null
@@ -1,65 +0,0 @@
----
-name: üìâ Performance Issue
-about: Report a performance issue or regression.
-title: ''
-labels: performance, needs-triage
----
-
-<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->
-
-### Issue Description
-<!--
-* Please include a clear and concise description of the problem.
--->
-
-### Steps to Reproduce
-<!--
-Include as much of the following if possible:
-
-* A minimal sample project that reproduces the issue.
-* Your zipped project.
-* IDE / CLI steps to create the project and reproduce the behaviour.
-* Your command line invocation
-
-If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
-[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
-[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
-NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
-If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--->
-
-### Data
-<!--
-* Please include all information you've gathered about this performance issue. This includes:
-    - Timing
-    - Measurements
-    - ETW Traces
-    - Call stacks
-    - Dumps
-    - etc.
-* If possible please include text as text rather than images (so it shows up in searches).
-* If applicable please include before and after measurements.
--->
-
-### Analysis
-<!--
-* If you have an idea where the problem might lie, let us know that here.
-* Please include any pointers to code, relevant changes, or related issues you know of.
--->
-
-### Versions & Configurations
-<!--
-* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
-* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):
-
-Post any other relevant configuration settings here.
-* OS, architecture, etc.
--->
-
-### Regression?
-<!--
-* Is this a regression from a previous build/release?
-* Please provide details on:
-*   What version of MSBuild or VS were you using before the regression?
-*   What version of MSBuild or VS are you on now that you discovered the regression?
--->
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.yml b/.github/ISSUE_TEMPLATE/02_performanceissue.yml
new file mode 100644
index 00000000000..846a9747b55
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/02_performanceissue.yml
@@ -0,0 +1,67 @@
+name: üìâ Performance Issue
+description: Report a performance issue or regression.
+title: "[Performance]: "
+labels: ["performance", "needs-triage"]
+body:
+  - type: textarea
+    attributes:
+      label: Issue Description
+      description: Please include a clear and concise description of the problem.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Steps to Reproduce
+      description:  | 
+        Include as much of the following as possible: 
+        * a minimal sample project that reproduces the issue, 
+        * your zipped project, 
+        * IDE / CLI steps to create the project and reproduce the behaviour, 
+        * your command line invocation.
+        
+        If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+        * [Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+        * [More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+        
+        NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+        If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Data
+      description: |
+        Please include all information you've gathered about this performance issue. This includes:
+          - Timing
+          - Measurements
+          - ETW Traces
+          - Call stacks
+          - Dumps
+          - etc.
+        If possible please include text as text rather than images (so it shows up in searches).
+        If applicable please include before and after measurements.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Analysis
+      description: If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.
+  - type: textarea
+    attributes:
+      label: Versions & Configurations
+      description: |
+        In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
+        If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc).
+        Post any other relevant configuration settings here: OS, architecture, etc.
+  - type: checkboxes
+    attributes:
+      label: Regression
+      description: Is this a regression from a previous build/release?
+      options:
+        - label: "yes"
+        - label: "no"
+  - type: textarea
+    attributes:
+      label: Regression Details
+      description: |
+        Please provide details on regression: what version of MSBuild or VS were you using before the regression?
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
deleted file mode 100644
index b6980de5753..00000000000
--- a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
+++ /dev/null
@@ -1,53 +0,0 @@
----
-name: üòµ My Build is Broken
-about: Use this template for helping figure out what's wrong with your build.
-title: ''
-labels: needs-triage
----
-
-<!-- NOTE: The MSBuild team receives a lot of issues and we need to prioritize them accordingly. Please understand that we may not get to your issue for some time. -->
-<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->
-
-<!--
-* Here are some useful links to help you figure out what's wrong.
-* Our wiki: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Home.md
-* General Help: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Something's-wrong-in-my-build.md
-* Tips & Tricks: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/MSBuild-Tips-%26-Tricks.md
--->
-
-### Issue Description
-<!--
-* Please include a clear and concise description of the problem.
--->
-
-### Steps to Reproduce
-<!--
-* Include as much of the following if possible:
-
-* A minimal sample project that reproduces the issue.
-* Your zipped project.
-* IDE / CLI steps to create the project and reproduce the behaviour.
-* Your command line invocation
-
-If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
-[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
-[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
-NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
-If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--->
-
-### Expected Behavior
-<!--
-* Include what you are trying to do, and the expected output or behavior.
--->
-
-### Actual Behavior
-<!--
-* Include the actual output or behavior.
--->
-
-### Ask us questions
-<!--
-* We ask that you first browse the above links, as your question may already have been answered.
-* Be as detailed as you can with these questions.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml
new file mode 100644
index 00000000000..a7e104afbe0
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.yml
@@ -0,0 +1,53 @@
+name: üòµ My Build is Broken
+description: Use this template for helping figure out what's wrong with your build.
+title: "[Broken Build]: "
+labels: ["needs-triage"]
+body:
+  - type: markdown
+    attributes:
+      value: |
+        NOTE: The MSBuild team receives a lot of issues and we need to prioritize them accordingly. Please understand that we may not get to your issue for some time.
+        Here are some useful links to help you figure out what's wrong.
+        * [Our documentation](https://github.com/dotnet/msbuild/blob/main/documentation)
+        * [General Help](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Something's-wrong-in-my-build.md)
+        * [Tips & Tricks](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/MSBuild-Tips-%26-Tricks.md)
+  - type: textarea
+    attributes:
+      label: Issue Description
+      description: Please include a clear and concise description of the problem.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Steps to Reproduce
+      description:  | 
+        Include as much of the following as possible: 
+        * a minimal sample project that reproduces the issue, 
+        * your zipped project, 
+        * IDE / CLI steps to create the project and reproduce the behaviour, 
+        * your command line invocation.
+        
+        If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+        * [Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+        * [More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+        
+        NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+        If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Expected Behavior
+      description: The expected output or behavior.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Actual Behavior
+      description: The actual output or behavior.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Ask us questions
+      description: We ask that you first browse the above links, as your question may already have been answered. Be as detailed as you can with these questions.
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/04_blankissue.md b/.github/ISSUE_TEMPLATE/04_blankissue.md
deleted file mode 100644
index d3ae09b4431..00000000000
--- a/.github/ISSUE_TEMPLATE/04_blankissue.md
+++ /dev/null
@@ -1,6 +0,0 @@
----
-name: üìÑ Blank Issue
-about: Doesn't fit the other categories? File a blank ticket here.
-title: ''
-labels: needs-triage
----
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/05_unhandledexception.md b/.github/ISSUE_TEMPLATE/05_unhandledexception.md
deleted file mode 100644
index 5d488251fb1..00000000000
--- a/.github/ISSUE_TEMPLATE/05_unhandledexception.md
+++ /dev/null
@@ -1,34 +0,0 @@
----
-name: üò± Unhandled Exception
-about: Reporting holes in our bug reporting system
-title: ''
-labels: bug
----
-
-<!-- This is a template that helps us provide quicker feedback.
-Use any relevant sections and delete what you don't need. -->
-
-### Issue Description
-<!--
-Include a stack trace if possible.
-If you do not see one, try looking in your temp folder for the most recently created file named
-MSBuild_pid-{pid}_{guid}.failure.txt
--->
-
-### Steps to Reproduce
-<!--
-* Include as many of these as possible:
-* A minimal sample project that reproduces the issue
-* IDE or CLI steps that create the project and reproduce the issue
-* Your command line invocation
--->
-
-### Analysis
-<!-- If you think you know what the problem is, please include that here. -->
-
-### System Configuration
-<!--
-What version of MSBuild are you using? (`msbuild --version` from a developer command prompt)
-What version of the tool invoking MSBuild are you using? (`dotnet --version`, accessing it from the Visual Studio Installer, etc.)
-OS version (or at least Windows/Mac/Linux), architecture, etc.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/05_unhandledexception.yml b/.github/ISSUE_TEMPLATE/05_unhandledexception.yml
new file mode 100644
index 00000000000..34ff39f44b0
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/05_unhandledexception.yml
@@ -0,0 +1,47 @@
+name: üò± Unhandled Exception
+description: Reporting holes in our bug reporting system
+title: "[Unhandled Exception]: "
+labels: ["bug", "needs-triage"]
+body:
+  - type: textarea
+    attributes:
+      label: Issue Description
+      description: Please include a clear and concise description of the problem.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Steps to Reproduce
+      description:  | 
+        Include as much of the following as possible: 
+        * a minimal sample project that reproduces the issue, 
+        * your zipped project, 
+        * IDE / CLI steps to create the project and reproduce the behaviour, 
+        * your command line invocation.
+        
+        If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+        * [Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+        * [More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+        
+        NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+        If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Actual Behavior
+      description: |
+        The actual output or behavior. Include a stack trace if possible. If you do not see one, try looking in your temp folder for the most recently created file named `MSBuild_pid-{pid}_{guid}.failure.txt`
+    validations:
+      required: true
+  - type: textarea
+    attributes:
+      label: Analysis
+      description: If you have an idea where the problem might lie, let us know that here. Please include any pointers to code, relevant changes, or related issues you know of.
+  - type: textarea
+    attributes:
+      label: Versions & Configurations
+      description: |
+        In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
+        If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc).
+        Post any other relevant configuration settings here: OS, architecture, etc.
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/config.yml b/.github/ISSUE_TEMPLATE/config.yml
index 0b4875ecad3..63f52d67500 100644
--- a/.github/ISSUE_TEMPLATE/config.yml
+++ b/.github/ISSUE_TEMPLATE/config.yml
@@ -1,4 +1,4 @@
-blank_issues_enabled: false
+blank_issues_enabled: true
 contact_links:
   - name: Issue with .NET (Core) SDK
     url:  https://github.com/dotnet/sdk/issues/new/choose
diff --git a/.github/workflows/backport.yml b/.github/workflows/backport.yml
new file mode 100644
index 00000000000..11d78d91139
--- /dev/null
+++ b/.github/workflows/backport.yml
@@ -0,0 +1,19 @@
+name: Backport PR to branch
+on:
+  issue_comment:
+    types: [created]
+
+permissions:
+  contents: write
+  issues: write
+  pull-requests: write
+  actions: write
+
+jobs:
+  backport:
+    uses: dotnet/arcade/.github/workflows/backport-base.yml@main
+    with:
+        pr_description_template: |
+          Backport of #%source_pr_number% to %target_branch%
+
+          /cc %cc_users%
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index bdbfe5b0367..854f738d435 100644
--- a/.gitignore
+++ b/.gitignore
@@ -215,3 +215,6 @@ stage1/
 
 # ETL traces
 *.etl.zip
+
+# .DS_Store for macOS
+**/.DS_Store
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index fe3485b6f5c..c32ce098b34 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -23,9 +23,12 @@ variables:
   - name: SourceBranch
     value: $(IbcSourceBranchName)
   # If we're not on a vs* branch, use main as our optprof collection branch
+  # NOTE: the code is temporarily fixed. For the branches that should use opt-prof from the main branch we should use the latest working Opt-Prof collected from main 20230217.4.
   - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:
+    - name: OptProfDrop
+      value: 'OptimizationData/DotNet-msbuild-Trusted/main/20230217.4/7352286/1'   
     - name: SourceBranch
-      value: main
+      value: ''
   # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch
   - ${{ if ne(parameters.OptProfDropName, 'default') }}:
     - name: OptProfDrop
diff --git a/Directory.Build.props b/Directory.Build.props
index 21b6d6694f2..43bebf10428 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -14,8 +14,8 @@
 
   <PropertyGroup>
     <FullFrameworkTFM>net472</FullFrameworkTFM>
-    
-    <!-- 
+
+    <!--
         When updating the version of .NET Core for MSBuild, this property is the 'source of truth'.
         Other locations to update the version number:
           global.json
@@ -43,8 +43,10 @@
   <PropertyGroup>
     <GenerateNeutralResourcesLanguageAttribute>false</GenerateNeutralResourcesLanguageAttribute>
 
-    <!-- NU1603: Microsoft.xunit.netcore.extensions package has dependencies to versions which aren't published, so ignore those warnings
-         NU5105: we're explicitly opting in to semver2, as is most of .NET Core
+    <!--
+        NU1507: ManagePackageVersionsCentrally implies source mapping, which we should consider turning on but it's nontrivial
+        NU1603: Microsoft.xunit.netcore.extensions package has dependencies to versions which aren't published, so ignore those warnings
+        NU5105: we're explicitly opting in to semver2, as is most of .NET Core
         CS1701 and CS1702 are by default ignored by Microsoft.NET.Sdk, but if you define the NoWarn property in Directory.Build.props,
         you don't get those defaults.
         SYSLIB0011: Removing binary formatter will happen as part of a larger .NET-wide effort.
@@ -52,7 +54,7 @@
         RS0016 & RS0017: Roslyn analyzers seem to be bugged, claiming that API's that exist don't and vise-versa: https://github.com/dotnet/msbuild/issues/7903
     -->
 
-    <NoWarn>$(NoWarn);NU1603;NU5105;1701;1702;SYSLIB0011;SYSLIB0037;SYSLIB0044;RS0016;RS0017;</NoWarn>
+    <NoWarn>$(NoWarn);NU1507;NU1603;NU5105;1701;1702;SYSLIB0011;SYSLIB0037;SYSLIB0044;RS0016;RS0017;</NoWarn>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(Configuration)' == 'Debug-MONO'">
@@ -84,11 +86,17 @@
     <DefaultItemExcludes>$(DefaultItemExcludes);*.binlog</DefaultItemExcludes>
 
     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
+
+    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
+    <CentralPackageTransitivePinningEnabled>true</CentralPackageTransitivePinningEnabled>
+    <DirectoryPackagesPropsPath>$([MSBuild]::NormalizePath('$(MSBuildThisFileDirectory)', 'eng', 'Packages.props'))</DirectoryPackagesPropsPath>
+
+    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>
   </PropertyGroup>
 
   <!-- Enable SDK supplied netanalyzers for all target frameworks -->
   <PropertyGroup>
     <EnableNETAnalyzers>true</EnableNETAnalyzers>
   </PropertyGroup>
-  
+
 </Project>
diff --git a/Directory.Build.targets b/Directory.Build.targets
index 3a0e383282a..b57a232300f 100644
--- a/Directory.Build.targets
+++ b/Directory.Build.targets
@@ -24,10 +24,6 @@
     <EditorConfigFiles Include="$(MSBuildThisFileDirectory)eng/Common.Test.globalconfig" />
   </ItemGroup>
 
-  <PropertyGroup>
-    <CentralPackagesFile>$(MSBuildThisFileDirectory)eng/Packages.props</CentralPackagesFile>
-  </PropertyGroup>
-  <Import Project="Sdk.targets" Sdk="Microsoft.Build.CentralPackageVersions" />
   <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
 
   <Target Name="DeleteDevPackage" AfterTargets="GenerateNuspec">
diff --git a/documentation/Home.md b/documentation/Home.md
deleted file mode 100644
index b7cf33e3e8b..00000000000
--- a/documentation/Home.md
+++ /dev/null
@@ -1,24 +0,0 @@
-# Getting Started
-
- * [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
- * Building Testing and Debugging
-   * [Full Framework MSBuild](wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
-   * [.Net Core MSBuild](wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
-   * [Mono MSBuild](wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
-
-# Resources
- * [MSBuild Resources](wiki/MSBuild-Resources.md)
- * [Contributed documentation](Contributions/README.md)
- * [MSBuild Tips & Tricks](wiki/MSBuild-Tips-&-Tricks.md)
- * [Binary log](wiki/Binary-Log.md)
- * [Providing Binary Logs for investigation](wiki/Providing-Binary-Logs.md)
- * [Contributing Code](wiki/Contributing-Code.md)
- * [Target Maps](wiki/Target-Maps.md)
- * Tasks
-   * [ResolveAssemblyReference](wiki/ResolveAssemblyReference.md)
- * Problems?
-   * [Rebuilding when nothing changed](wiki/Rebuilding-when-nothing-changed.md)
-   * [Something's wrong in my build](wiki/Something's-wrong-in-my-build.md)
-   * [Microsoft.Build.Framework](wiki/Microsoft.Build.Framework.md)
-     *  Some gotchas around the Microsoft.Build.Framework project/assembly.
-
diff --git a/documentation/README.md b/documentation/README.md
new file mode 100644
index 00000000000..082fab41bb3
--- /dev/null
+++ b/documentation/README.md
@@ -0,0 +1,87 @@
+Welcome to MSBuild docs!
+
+The folder contains collection of docs and references for MSBuild, detailed information on how to work with this repo, and covers in-depth technical topics related to implementation.
+
+## Getting Started
+
+* [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
+* Building Testing and Debugging
+  * [Full Framework MSBuild](wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
+  * [.Net Core MSBuild](wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
+  * [macOS](wiki/Mac-Debugging.md)
+
+* [MSBuild resources](wiki/MSBuild-Resources.md)
+* [MSBuild tips & tricks](wiki/MSBuild-Tips-&-Tricks.md)
+
+## NuGet packages
+
+* [General information](consuming-nuget-package.md)
+
+## Release information
+
+* [Changelog](Changelog.md)
+* [Release process](release.md)
+* [Change waves](wiki/ChangeWaves.md)
+* [Interactions with the internal repository](wiki/Interactions-with-the-internal-repository.md)
+
+## Development and contributing
+
+* [Providing binary logs for investigation](wiki/Providing-Binary-Logs.md)
+* [Contributing code](wiki/Contributing-Code.md)
+   * [Contributing tasks](wiki/Contributing-Tasks.md)
+* [Error codes](assigning-msb-error-code.md)
+* [Deploying built MSBuild](Deploy-MSBuild.md)
+* [Events emitted by MSBuild](specs/event-source.md)
+* [Change waves (for developers)](wiki/ChangeWaves-Dev.md)
+* [GitHub labels](wiki/Labels.md)
+* [Localization](wiki/Localization.md)
+
+### Problems?
+
+* [Rebuilding when nothing changed](wiki/Rebuilding-when-nothing-changed.md)
+* [Something's wrong in my build](wiki/Something's-wrong-in-my-build.md)
+* [Some gotchas around the Microsoft.Build.Framework project/assembly](wiki/Microsoft.Build.Framework.md)
+* [GAC and MSBuild](wiki/UnGAC.md)
+* [When globbing returns original filespec](WhenGlobbingReturnsOriginalFilespec.md)
+
+## In-depth tech topics
+
+* [Reserved and built-in properties](Built-in-Propeties.md)
+* [`ProjectReference`](ProjectReference-Protocol.md)
+* [MSBuild Server](MSBuild-Server.md)
+* [Low priority nodes](specs/low-priority-switch.md)
+* [Project cache plugin](specs/project-cache.md)
+* [Support for remote host objects](specs/remote-host-object.md)
+* [Static graph](specs/static-graph.md)
+* [Single project isolated builds: implementation details](specs/single-project-isolated-builds.md)
+* [Task isolation](specs/task-isolation-and-dependencies.md)
+* [Threading in MSBuild worker nodes](specs/threading.md)
+* [Target maps](wiki/Target-Maps.md)
+* [Managing parallelism in MSBuild](specs/resource-management.md)
+* [SDK resolution](specs/sdk-resolvers-algorithm.md)
+* [Nodes orchestration](wiki/Nodes-Orchestration.md)
+
+### Tasks
+
+* [`ResolveAssemblyReference`](wiki/ResolveAssemblyReference.md)
+
+### Evaluation
+
+* [Evaluation profiling](evaluation-profiling.md)
+
+### Logging
+
+* [Binary log](wiki/Binary-Log.md)
+* [Live logger: how to opt in](livelogger/Opt-In-Mechanism.md)
+
+## Designs
+
+* [Resolve Assembly Reference as a service](design/rar-as-service.md)
+   * Prototype: https://github.com/dotnet/msbuild/issues/6193
+
+## Community contributions
+
+* [MSBuild overview](Contributions/MSBuild-overview.md)
+* [Solution parser](Contributions/solution-parser.md)
+
+Note: community contributions has documentation that was contributed by developers or users, but it might not been fully vetted for accuracy and correctness. Explanations in this folder may not be fully accurate, but can still be very informative for developing an understanding of MSBuild or a specific problem.
\ No newline at end of file
diff --git a/documentation/WhenGlobbingReturnsOriginalFilespec.md b/documentation/WhenGlobbingReturnsOriginalFilespec.md
index ac9a74c887f..d824eeeddcc 100644
--- a/documentation/WhenGlobbingReturnsOriginalFilespec.md
+++ b/documentation/WhenGlobbingReturnsOriginalFilespec.md
@@ -1,3 +1,5 @@
+# When globbing returns original filespec
+
 Original itemspec is returned when:
 - illegal filespec contains
 	- both wildcards and escaped wildcards (`%2a`, `%3f`)
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md b/documentation/deprecated/Building-Testing-and-Debugging-on-Mono-MSBuild.md
similarity index 100%
rename from documentation/wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md
rename to documentation/deprecated/Building-Testing-and-Debugging-on-Mono-MSBuild.md
diff --git a/documentation/specs/rar-as-service.md b/documentation/design/rar-as-service.md
similarity index 100%
rename from documentation/specs/rar-as-service.md
rename to documentation/design/rar-as-service.md
diff --git a/documentation/fancylogger/Opt-In-Mechanism.md b/documentation/fancylogger/Opt-In-Mechanism.md
deleted file mode 100644
index d0df44b69dd..00000000000
--- a/documentation/fancylogger/Opt-In-Mechanism.md
+++ /dev/null
@@ -1,21 +0,0 @@
-# When should we use FancyLogger
-
-The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.
-
-# Proposal
-Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:
-- The terminal does not support ANSI codes or color
-    - [ ] Detect if terminal does not support ANSI codes or color
- - Output is redirected to a file or pipe
-    - [x] Detect if terminal output is redirected
-
-For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. 
-
-In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.
-
-# Considerations
-## Should FancyLogger be used with other loggers (eg, BinaryLogger, FileLogger, custom loggers)?
-FancyLogger should only replace the current ConsoleLogger for the aforementioned cases. Additionally, other loggers can be used in conjunction. 
-
-## Should output be ignored with the `/noconsolelogger` flag enabled?
-FancyLogger serves as a replacement for ConsoleLogger, so it should behave similarly. When attaching the `/noconsolelogger` flag, it should not output anything.
\ No newline at end of file
diff --git a/documentation/livelogger/Opt-In-Mechanism.md b/documentation/livelogger/Opt-In-Mechanism.md
new file mode 100644
index 00000000000..ca9c558fde8
--- /dev/null
+++ b/documentation/livelogger/Opt-In-Mechanism.md
@@ -0,0 +1,19 @@
+# When should we use LiveLogger
+
+The LiveLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.
+
+# Proposal
+Using the `/livelogger` or `/ll` command line switches, users are able to opt-in and use the LiveLogger, EXCEPT when:
+- The terminal does not support ANSI codes or color
+ - Output is redirected to a file or pipe
+
+For early development stages, an environment variable `$MSBUILDLIVELOGGER` should be enabled to prevent accidental access to an unfinished feature. 
+
+In cases where the LiveLogger should not be enabled, the default ConsoleLogger should be used instead.
+
+# Considerations
+## Should LiveLogger be used with other loggers (eg, BinaryLogger, FileLogger, custom loggers)?
+LiveLogger should only replace the current ConsoleLogger for the aforementioned cases. Additionally, other loggers can be used in conjunction. 
+
+## Should output be ignored with the `/noconsolelogger` flag enabled?
+LiveLogger serves as a replacement for ConsoleLogger, so it should behave similarly. When attaching the `/noconsolelogger` flag, it should not output anything.
diff --git a/documentation/specs/project-cache.md b/documentation/specs/project-cache.md
index 6a0095354ca..7c3a2fad63a 100644
--- a/documentation/specs/project-cache.md
+++ b/documentation/specs/project-cache.md
@@ -1,10 +1,10 @@
 # Summary
 
-Project cache is a new assembly-based plugin extension point in MSBuild which determines whether a build request (a project) can be skipped during build. The main expected benefit is reduced build times via [caching and/or distribution](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#weakness-of-the-old-model-caching-and-distributability).
+Project cache is a new assembly-based plugin extension point in MSBuild which determines whether a build request (a project) can be skipped during build. The main expected benefit is reduced build times via [caching and/or distribution](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#weakness-of-the-old-model-caching-and-distributability).
 
 # Motivation
 
-As the introduction to [static graph](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#what-is-static-graph-for) suggests, large and complex repos expose the weaknesses in MSBuild's scheduling and incrementality models as build times elongate. This project cache plugin lets MSBuild natively communicate with existing tools that enable build caching and/or distribution, enabling true scalability.
+As the introduction to [static graph](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#what-is-static-graph-for) suggests, large and complex repos expose the weaknesses in MSBuild's scheduling and incrementality models as build times elongate. This project cache plugin lets MSBuild natively communicate with existing tools that enable build caching and/or distribution, enabling true scalability.
 
 Visual Studio is one beneficiary. This plugin inverts dependencies among build systems: instead of higher level build engines ([Cloudbuild](https://www.microsoft.com/research/publication/cloudbuild-microsofts-distributed-and-caching-build-service/), [Anybuild](https://github.com/AnyBuild/AnyBuild), [BuildXL](https://github.com/microsoft/BuildXL), etc) calling into MSBuild, MSBuild calls into them, keeping MSBuild's external APIs and command line arguments largely unchanged and thus reusable by Visual Studio.
 
@@ -78,7 +78,7 @@ This change also simplifies and unifies user experiences. MSBuild works the same
   - On cache hits, MSBuild skips the project, but needs a BuildResult with target results to send back to the [Scheduler](https://github.com/dotnet/msbuild/blob/d39f2e4f5f3d461bc456f9abed9adec4a2f0f542/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L25).
   - Plugins have three options:
     - Worst: plugins fake the build results for each target. We consider this brittle since the plugins will have to be updated whenever the build logic changes.
-    - Better: plugins tell MSBuild to run a proxy target as a replacement for the expensive target (e.g. it tells MSBuild to run `GetTargetPath` and use those results for the Build target). See the [ProjectReference protocol](https://github.com/dotnet/msbuild/blob/master/documentation/ProjectReference-Protocol.md) for more details.
+    - Better: plugins tell MSBuild to run a proxy target as a replacement for the expensive target (e.g. it tells MSBuild to run `GetTargetPath` and use those results for the Build target). See the [ProjectReference protocol](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md) for more details.
       - Proxy target assumptions:
         - They are very fast and only retrieve items and properties from the evaluated state (like `GetTargetPath`).
         - They do not mutate state (file system, environment variables, etc).
@@ -105,7 +105,7 @@ This change also simplifies and unifies user experiences. MSBuild works the same
   - Absolute paths will likely break the build, since they'd be captured on the machine that writes to the cache.
 - Slow connections. In a coffee shop it might be faster to build everything instead of downloading from the cache. Consider racing plugin checks and building: if the bottom up build traversal reaches a node that's still querying the cache, cancel the cache query and build the node instead.
 - Inferring what targets to run on each node when using /graph
-  - Msbuild /graph requires that the [target inference protocol](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#inferring-which-targets-to-run-for-a-project-within-the-graph) is good enough.
+  - Msbuild /graph requires that the [target inference protocol](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md#inferring-which-targets-to-run-for-a-project-within-the-graph) is good enough.
 - Small repos will probably be slower with plugin implementations that access the network. Remote distribution and caching will only be worth it for repos that are large enough.
 
 # Future work
diff --git a/documentation/specs/sdk-resolvers-algorithm.md b/documentation/specs/sdk-resolvers-algorithm.md
index eb962ad2644..e5cd05a0dd3 100644
--- a/documentation/specs/sdk-resolvers-algorithm.md
+++ b/documentation/specs/sdk-resolvers-algorithm.md
@@ -25,4 +25,35 @@ Note, that the manifest file, if exists, from ChangeWave 17.4 would have prefere
 The sdk discovery works according to the following algorithm:
 - First try locate the manifest file and use it. 
 - If it is not found, we try to locate the dll in the resolver's folder. 
-Both xml and dll name should match the following name pattern `...\SdkResolvers\(ResolverName)\(ResolverName).(xml/dll)`.
\ No newline at end of file
+Both xml and dll name should match the following name pattern `...\SdkResolvers\(ResolverName)\(ResolverName).(xml/dll)`.
+
+### Failed SDK Resolution
+
+> üöß Note
+>
+> This page is a work in progress.
+
+SDK resolvers previously attempted to continue when one critically fails (throws an unhandled exception). This lead to misleading error messages such as:
+
+```
+warning MSB4242: The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed to run. 's' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8.
+error MSB4236: The SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found. [C:\foo\bar.csproj]
+```
+
+`MSB4236` is a red herring while `MSB4242` is the real error despite being logged as a warning. Because of this, SDK resolvers now fail the build _immediately_ upon unhandled exceptions. These exceptions are propogated as `SdkResolverException`s, and `MSB4242` has been promoted to an error code. The new error message appears like so:
+
+```
+C:\src\temp\8-18>"C:\foo\dotnet-sdk-6.0.100-preview.7.21379.14-win-x64\dotnet.exe" build    
+Microsoft (R) Build Engine version 17.0.0-dev-21420-01+5df152759 for .NET
+Copyright (C) Microsoft Corporation. All rights reserved.
+
+C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
+
+Build FAILED.
+
+C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
+    0 Warning(s)
+    1 Error(s)
+
+Time Elapsed 00:00:00.15
+```
\ No newline at end of file
diff --git a/documentation/specs/sdk-resolvers.md b/documentation/specs/sdk-resolvers.md
deleted file mode 100644
index ddb73668e2b..00000000000
--- a/documentation/specs/sdk-resolvers.md
+++ /dev/null
@@ -1,29 +0,0 @@
-> üöß Note
->
-> This page is a work in progress.
-
-### Failed SDK Resolution
-SDK resolvers previously attempted to continue when one critically fails (throws an unhandled exception). This lead to misleading error messages such as:
-
-```
-warning MSB4242: The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed to run. 's' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8.
-error MSB4236: The SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found. [C:\foo\bar.csproj]
-```
-
-`MSB4236` is a red herring while `MSB4242` is the real error despite being logged as a warning. Because of this, SDK resolvers now fail the build _immediately_ upon unhandled exceptions. These exceptions are propogated as `SdkResolverException`s, and `MSB4242` has been promoted to an error code. The new error message appears like so:
-
-```
-C:\src\temp\8-18>"C:\foo\dotnet-sdk-6.0.100-preview.7.21379.14-win-x64\dotnet.exe" build    
-Microsoft (R) Build Engine version 17.0.0-dev-21420-01+5df152759 for .NET
-Copyright (C) Microsoft Corporation. All rights reserved.
-
-C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
-
-Build FAILED.
-
-C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
-    0 Warning(s)
-    1 Error(s)
-
-Time Elapsed 00:00:00.15
-```
\ No newline at end of file
diff --git a/documentation/specs/static-graph-implementation-details.md b/documentation/specs/single-project-isolated-builds.md
similarity index 83%
rename from documentation/specs/static-graph-implementation-details.md
rename to documentation/specs/single-project-isolated-builds.md
index c2a70c47c03..e3f8b94670d 100644
--- a/documentation/specs/static-graph-implementation-details.md
+++ b/documentation/specs/single-project-isolated-builds.md
@@ -12,7 +12,7 @@ The presence of either input or output caches turns on [isolated build constrain
 
 ## Input / Output cache implementation
 <!-- cache structure -->
-The cache files contain the serialized state of MSBuild's [ConfigCache](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCache.cs) and [ResultsCache](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/Caching/ResultsCache.cs). These two caches have been traditionally used by the engine to cache build results. For example, it is these caches which ensure that a target is only built once per build submission. The `ConfigCache` entries are instances of [BuildRequestConfiguration](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L25). The `ResultsCache` entries are instances of [BuildResult](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildResult.cs#L34), which contain or more instances of [TargetResult](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/TargetResult.cs#L22).
+The cache files contain the serialized state of MSBuild's [ConfigCache](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCache.cs) and [ResultsCache](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ResultsCache.cs). These two caches have been traditionally used by the engine to cache build results. For example, it is these caches which ensure that a target is only built once per build submission. The `ConfigCache` entries are instances of [BuildRequestConfiguration](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L25). The `ResultsCache` entries are instances of [BuildResult](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildResult.cs#L34), which contain or more instances of [TargetResult](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/TargetResult.cs#L22).
 
 One can view the two caches as the following mapping: `(project path, global properties) -> results`. `(project path, global properties)` is represented by a `BuildRequestConfiguration`, and the results are represented by `BuildResult` and `TargetResult`.
 
@@ -30,7 +30,7 @@ The following constraints are enforced during cache aggregation:
 The output cache file **only contains results for additional work performed in the current BeginBuild / EndBuild session**. Entries from input caches are not transferred to the output cache.
 
 <!-- How input / output cache entries are separated with the override caches -->
-Entries that make it into the output cache file are separated from entries serialized from input cache files via the use of [ConfigCacheWithOverride](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs) and [ResultsCacheWithOverride](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs). These are composite caches. Each contains two underlying caches: a cache where input caches files are loaded into (called the override cache), and a cache where new results are written into (called the current cache). Cache reads are satisified from both underlying caches (override cache is queried first, current cache is queried second). Writes are only written to the current cache, never into the override cache. The output cache file only contains the serialized current cache, and not the override cache, thus ensuring that only newly built results are serialized in the output cache file. It is illegal for both the current cache and override cache to contain entries for the same project configuration, a constraint that is checked by the two override caches on each cache read.
+Entries that make it into the output cache file are separated from entries serialized from input cache files via the use of [ConfigCacheWithOverride](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs) and [ResultsCacheWithOverride](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs). These are composite caches. Each contains two underlying caches: a cache where input caches files are loaded into (called the override cache), and a cache where new results are written into (called the current cache). Cache reads are satisified from both underlying caches (override cache is queried first, current cache is queried second). Writes are only written to the current cache, never into the override cache. The output cache file only contains the serialized current cache, and not the override cache, thus ensuring that only newly built results are serialized in the output cache file. It is illegal for both the current cache and override cache to contain entries for the same project configuration, a constraint that is checked by the two override caches on each cache read.
 
 ## Isolation implementation
 
diff --git a/documentation/specs/task-isolation-and-dependencies.md b/documentation/specs/task-isolation-and-dependencies.md
index f130c37e8a4..2ec96c8eb18 100644
--- a/documentation/specs/task-isolation-and-dependencies.md
+++ b/documentation/specs/task-isolation-and-dependencies.md
@@ -23,7 +23,7 @@ We also want to load groups of tasks which belong together into the same ALC (fo
 
 # Task dependency resolution
 ## Problem definition
-Tasks with complex and specifically platform specific dependencies don't work out of the box. For example if a task uses [`LibGit2Sharp`](https://www.nuget.org/packages/LibGit2Sharp) package it will not work as is. `LibGit2Sharp` has native dependencies which are platform specific. While the package carries all of them, there's no built in support for the task to load the right ones. For example [source link](https://github.com/dotnet/sourcelink/blob/master/src/Microsoft.Build.Tasks.Git/GitLoaderContext.cs) runs into this problem.
+Tasks with complex and specifically platform specific dependencies don't work out of the box. For example if a task uses [`LibGit2Sharp`](https://www.nuget.org/packages/LibGit2Sharp) package it will not work as is. `LibGit2Sharp` has native dependencies which are platform specific. While the package carries all of them, there's no built in support for the task to load the right ones. For example [source link](https://github.com/dotnet/sourcelink/blob/29b3197e824c05d03427c05d56700e4c704233e4/src/Microsoft.Build.Tasks.Git/GitLoaderContext.cs) runs into this problem.
 
 ## Solution
 .NET Core uses `.deps.json` files to describe dependencies of components. It would be natural to treat task assemblies as components and use associated .deps.json file to determine their dependencies. This would make the system work nicely end to end with the .NET Core CLI/SDK and VS integration.
diff --git a/documentation/wiki/Binary-Log.md b/documentation/wiki/Binary-Log.md
index 550ec068398..548a05da664 100644
--- a/documentation/wiki/Binary-Log.md
+++ b/documentation/wiki/Binary-Log.md
@@ -66,12 +66,7 @@ https://msbuildlog.com/
 
 # Collecting binary logs from Visual Studio builds
 
-If you need to capture a binary log in Visual Studio, instead of the command line, you'll need a Visual Studio plugin:
-
-- https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools for VS 2017 & 2019
-- https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools2022 for VS 2022
-
-After installing that, enable logging and run your build ([more details](https://github.com/dotnet/project-system-tools)).
+[see more details](Providing-Binary-Logs.md#capturing-binary-logs-through-visual-studio)
 
 # Binary log file format
 
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
index a71155be41e..43134c57c3b 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
@@ -1,6 +1,6 @@
 # Building MSBuild for the .NET Framework
 
-These instructions refer to working with the `master` branch.
+These instructions refer to working with the `main` branch.
 
 ## Required Software
 
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 5d3feeccf3a..4ef85d8de35 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -27,6 +27,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Parse invalid property under target](https://github.com/dotnet/msbuild/pull/8190)
 - [Eliminate project string cache](https://github.com/dotnet/msbuild/pull/7965)
 - [Log an error when no provided search path for an import exists](https://github.com/dotnet/msbuild/pull/8095)
+- [Log assembly loads](https://github.com/dotnet/msbuild/pull/8316)
 
 ### 17.4
 - [Respect deps.json when loading assemblies](https://github.com/dotnet/msbuild/pull/7520)
diff --git a/documentation/wiki/Contributing-Code.md b/documentation/wiki/Contributing-Code.md
index 690cf797972..c71172b8305 100644
--- a/documentation/wiki/Contributing-Code.md
+++ b/documentation/wiki/Contributing-Code.md
@@ -5,7 +5,7 @@ Because our focus right now is on maintaining backwards compatibility, the team
 
 - Contributions must be discussed with the team first, or they will likely be declined. As our process matures and our experience grows, the team expects to take larger contributions.
 - Only contributions referencing an approved Issue will be accepted.
-- Pull requests that do not merge easily with the tip of the master branch will be declined. The author will be asked to merge with tip and submit a new pull request.
+- Pull requests that do not merge easily with the tip of the main branch will be declined. The author will be asked to merge with tip and submit a new pull request.
 - Submissions must meet functional and performance expectations, including scenarios for which the team doesn't yet have open source tests. This means you may be asked to fix and resubmit your pull request against a new open test case if it fails one of these tests.
 - Submissions must follow the [.NET Runtime Coding Guidelines](https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/coding-style.md)
 
diff --git a/documentation/wiki/Interactions-with-the-internal-repository.md b/documentation/wiki/Interactions-with-the-internal-repository.md
index a6b0b414114..916ac2bd78d 100644
--- a/documentation/wiki/Interactions-with-the-internal-repository.md
+++ b/documentation/wiki/Interactions-with-the-internal-repository.md
@@ -1,3 +1,5 @@
+# Interactions with the internal repository
+
 MSbuild got forked from an internal Microsoft repository. Although the Github repository is the official one, where development takes place, there are still some left-over connections to the internal one. This page attempts to document these.
 
 Changes to these files need to be migrated back into the internal repo because that's where they are localized:
diff --git a/documentation/wiki/Localization.md b/documentation/wiki/Localization.md
index 919d9f4a883..5ea4d4cf835 100644
--- a/documentation/wiki/Localization.md
+++ b/documentation/wiki/Localization.md
@@ -21,8 +21,8 @@
 
 ## Process for interacting with the localization team
 
-- 3 weeks cadence for master, initiated by loc team
-- on demand for master / release branches, initiated by msbuild team
+- 3 weeks cadence for main, initiated by loc team
+- on demand for main / release branches, initiated by msbuild team
 
 ## Contributing a better translation
 
diff --git a/documentation/wiki/Mac-Debugging.md b/documentation/wiki/Mac-Debugging.md
index e6458e6f978..fedab4908d6 100644
--- a/documentation/wiki/Mac-Debugging.md
+++ b/documentation/wiki/Mac-Debugging.md
@@ -1,6 +1,6 @@
-#Debugging with MacOS
+# Debugging with MacOS
 * Open terminal 
-  * Hit command-space, type terminal, hit enter. Alternatively, hit magnifying glass (spotlight) in upper-right corner and search for terminal.)
+  * Hit command-space, type terminal, hit enter. Alternatively, hit magnifying glass (spotlight) in upper-right corner and search for terminal.
 * Build and run tests
   * Navigation in terminal is similar to command prompt (cd), although you type `ls` in place of `dir`.
   * **Use `./build.sh -test` instead of `.\build.cmd -test`.**
diff --git a/documentation/wiki/Nodes-Orchestration.md b/documentation/wiki/Nodes-Orchestration.md
new file mode 100644
index 00000000000..e4038dbcd40
--- /dev/null
+++ b/documentation/wiki/Nodes-Orchestration.md
@@ -0,0 +1,72 @@
+Transcript of a talk with Rainer - [internal link] [recording](https://msit.microsoftstream.com/video/fde00840-98dc-ba75-0ebd-f1ed9ca0e097)
+
+## Need for multiple processes
+MSBuild is multiprocess system today.
+Multiple processes are used in few scenarios:
+
+1) **TaskHost** - allowing to run back compatible tasks and MSBuild plugins requiring different runtime.
+Task declares (in [UsingTask](https://learn.microsoft.com/en-us/visualstudio/msbuild/usingtask-element-msbuild)) what environment it expects, and if it's not compatible with current configuration (today for VS that's x64 net4) - it'll be isolated.
+
+    [GenerateResource](https://learn.microsoft.com/en-us/visualstudio/msbuild/generateresource-task) task uses this (used to use this).
+
+   `TaskHost` is supported so far, but performance is not closely watched.
+
+   Currently, [MSBuild running on .NET Core cannot run tasks compiled against the full desktop .NET environment](https://github.com/dotnet/msbuild/issues/711). Analogously, [.NET core tasks cannot be run from Visual Studio](https://github.com/dotnet/msbuild/issues/4834).
+
+2) **Parallel builds** - needed since tasks can access process wide state - namely current working dir, environment vars. Those can change between projects (especially [`Compile Include`](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items) often contains relative path, without specifying `$MSBuildProjectDirectory` - so it relies on current directory being the location of the project file). For this reason node in parallel build can run only one task at a time.
+
+
+## Communication
+In a presence of multiple processes we need interprocess communication.
+
+### Messages (de)serialization
+
+Communication messages should deriver from [`ITranslatable`](https://github.com/dotnet/msbuild/blob/main/src/Shared/ITranslatable.cs) - it dictates the both direction of serialization via single method - [`void Translate(ITranslator translate)`](https://github.com/dotnet/msbuild/blob/main/src/Shared/ITranslatable.cs#L16)
+
+Majority of translations use custom binary serialization, there is though backfall to [`TranslateDoteNet`](https://github.com/dotnet/msbuild/blob/main/src/Shared/ITranslator.cs#L257) method that uses `BinaryFormatter`.
+
+Event args use different type of serialization - a `CreateFromStream` and `WriteToStream` methods are discovered via reflection and used to serialize type (with few exceptions explicitly translated within [`LogMessagePacketBase`](https://github.com/dotnet/msbuild/blob/main/src/Shared/LogMessagePacketBase.cs)).
+
+### Transport
+
+Endpoints (nodes) communicate via named pipes (Windows or named pipes API implementation on other plaforms). Communication is facilitated via [`NodeProviderOutOfProcBase`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs)
+
+The validation of transport is done via [proprietary handshake](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L501-L508).
+
+
+## Orchestration
+
+MSBuild consist of nodes. First spun is so called **entrypoint node**. It runs a **scheduler**. Then there are **worker nodes** - those can only execute projects. Nodes are spun by [`NodeLauncher`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Communications/NodeLauncher.cs) - this is being called from [`NodeProviderOutOfProcBase.GetNodes`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L186) (which can decide to reuse existing node or start a new process), that is ultimately called by [`NodeManger`](https://github.com/dotnet/msbuild/blob/main/src/Deprecated/Engine/Engine/NodeManager.cs).
+
+`NodeManager` is a build component (`IBuildComponent`) - so it can be retrieved from build engine (via `IBuildComponentHost.GetComponent`).
+
+Node is described by [`NodeInfo`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Communications/NodeInfo.cs).
+
+MSBuild can be started from existing process via API, or via MSBuild.exe - in both cases this process becomes a `scheduler node` and may or may not run other work in-process. By default the main process has as well a `worker node` (project build node). This can be tweaked by API and/or [environment variables](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-environment-variables#configure-msbuild-in-the-net-cli).
+
+When MSBuild start building a project it can eventually start processing MSBuild task that has [`BuildInParallel`](https://learn.microsoft.com/en-us/visualstudio/msbuild/building-multiple-projects-in-parallel-with-msbuild?view=vs-2022) set to `true` (which is a default) and multiple projects to build (e.g. a project with multiple `ProjectReference` elements) at that point `scheduler` orchestrates multiple `worker nodes` via `NodeManager` (upper limited via maximum parallelization - configurable via API or CLI (`-maxcpucount|-m`)) .
+
+Bugs in node communication layer can manifest as a slow build - otherwise fully functional. As `NodeManager` is trying to setup new nodes (and failing) and `scheduler` is working with only a single (in-proc) node that it has.
+
+Work unit for nodes is a `project instance` - a project together with set of glabal properties that make the project unique.
+
+----
+**Example:** 
+
+Multitargeted project (`TargetFrameworks=x;Y`) - this will generate 'outer-build' - a project with no global properties set; and 'inner build' for each `TargetFramework` (so one instance with `TargetFramework=X`, `TargetFramework=Y`). All those are distinct - so can be scheduled on separate nodes (in practice the outer build is scheduled on a node, hits the `ResolveProjectReferences` that will produce the two projects for particular `TargetFramework` - one is scheduled on the same node, other one waits for a different node to be available/spun).
+
+----
+
+MSBuild scheduler maintains a list of projects that are eligible to run (not blocked) and list of free worker nodes (plus knows a mapping of projects already mapped to particular nodes) and maps the work. [It performs some heuristics](https://github.com/dotnet/msbuild/blob/7cfb36cb90d1c9cc34bc4e0910d0c9ef42ee47b6/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L776-L783) prioritizing work that is likely to request more work (e.g. dir.proj files).
+
+## Scheduler assumptions
+
+Node in parallel build can run only one task at a time (task can explicitly temporarily vacate the node via `IBuildEngine.Yield`, or this can implicitly happen when MSBuild discovers dependencies on tasks that have not run yet)
+
+Once a `project instance` is assigned to a worker node - it is locked to that node (and cannot be run on another one). Above 2 facts can lead to scheduling issues (priorities inversions, blocking).
+
+Scheduler can (opt-in) dump a graph of dependencies from last build into a text file and then use it in the next build (with option of [various scheduling algorithms](https://github.com/dotnet/msbuild/blob/7cfb36cb90d1c9cc34bc4e0910d0c9ef42ee47b6/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L833))
+
+Another mode of building is `graph build` - where project is build only once all its dependencies are resolved (so the build graph needs to be known and unchanged upfront).
+
+
diff --git a/documentation/wiki/Providing-Binary-Logs.md b/documentation/wiki/Providing-Binary-Logs.md
index dd7838e4c66..b9be0b3f59b 100644
--- a/documentation/wiki/Providing-Binary-Logs.md
+++ b/documentation/wiki/Providing-Binary-Logs.md
@@ -6,9 +6,35 @@ However, you should be aware what type of information is captured in the binary
 
 ‚ö† NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.
 
-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.
+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.
 
 [More details about binary logs](Binary-Log.md)
 
 ## Capturing Binary Logs Through Visual Studio
-See [this guide](https://github.com/dotnet/project-system-tools) in the Project System Tools repo for capturing binlogs through Visual Studio.
\ No newline at end of file
+### (Preferred way) Capturing logs for all MSBuild invocations
+Set `MSBUILDDEBUGENGINE` environment variable to `'1'` and (optionally) set `MSBUILDDEBUGPATH` to an existing destination folder to store the captured logs. Then start Visual Studio from the same shell to inherit the environment:
+
+`cmd:`
+```
+> SET MSBUILDDEBUGENGINE=1
+> SET MSBUILDDEBUGPATH=C:\MSBuildReproLogs
+> devenv.exe MySolution.sln
+```
+
+`PowerShell:`
+```
+> $env:MSBUILDDEBUGENGINE = 1
+> $env:MSBUILDDEBUGPATH= C:\MSBuildReproLogs
+> & "devenv.exe" MySolution.sln
+```
+
+MSBuild binary logs are then captured to a location specified via `MSBUILDDEBUGPATH` environment variable (or defaults to `MSBuild_Logs` subfolder of a current folder or `%temp%`, based on access rights).
+
+‚ö† NOTE: logs are being recorded for each MSBuild invocation (including design time builds) and kept in the folder without removing older ones - so the number of log files can grow quickly. It is recommended to set the opt-in environment variable only for the short duration of reproducing the issue to be investigated (though it is understandable that some nondeterministic issues might need multiple reproduction attempts)
+
+Further reading:
+* [More technical info](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#logs)
+* [Design time builds logs](https://github.com/dotnet/project-system/blob/main/docs/repo/debugging/design-time-builds.md#gathering-full-fidelity-binlogs)
+
+### Capturing specific logs for chosen build invocations
+See [this guide](https://github.com/dotnet/project-system-tools) in the Project System Tools repo for capturing binlogs through Visual Studio.
diff --git a/eng/Build.props b/eng/Build.props
index f2afe806410..92315cd00ab 100644
--- a/eng/Build.props
+++ b/eng/Build.props
@@ -2,9 +2,13 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
 
+<!-- Commented out as a temporary fix for the msbuild CI.
+Waiting for https://github.com/NuGet/NuGet.Client/pull/5010 fix to flow to CI machines. -->
+<!--
   <PropertyGroup>
     <RestoreUseStaticGraphEvaluation Condition="'$(DotNetBuildFromSource)' != 'true'">true</RestoreUseStaticGraphEvaluation>
   </PropertyGroup>
+-->
 
   <ItemGroup>
 	<!-- Remove all sln files globbed by arcade so far and add only MSBuild.sln to the build.
diff --git a/eng/Packages.props b/eng/Packages.props
index bce1a6ee70a..5623df27263 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -8,29 +8,28 @@
     the list of assemblies redistributed by MSBuild (non-MSBuild assemblies in the .vsix package).
      -->
   <ItemGroup>
-    <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
-    <PackageReference Update="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="$(MicrosoftCodeAnalysisCollectionsVersion)" />
-    <PackageReference Update="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
-    <PackageReference Update="Microsoft.IO.Redist" Version="$(MicrosoftIORedistVersion)" />
-    <PackageReference Update="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
-    <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
-    <PackageReference Update="System.Collections.Immutable" Version="$(SystemCollectionsImmutableVersion)" />
-    <PackageReference Update="System.Configuration.ConfigurationManager" Version="$(SystemConfigurationConfigurationManagerVersion)" />
-    <PackageReference Update="System.Memory" Version="$(SystemMemoryVersion)" />
-    <PackageReference Update="System.Net.Http" Version="$(SystemNetHttpVersion)" />
-    <PackageReference Update="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" />
-    <PackageReference Update="System.Reflection.MetadataLoadContext" Version="$(SystemReflectionMetadataLoadContextVersion)" />
-    <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
-    <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="$(SystemRuntimeCompilerServicesUnsafeVersion)" />
-    <PackageReference Update="System.Security.Permissions" Version="$(SystemSecurityPermissionsVersion)" />
-    <PackageReference Update="System.Security.Principal.Windows" Version="$(SystemSecurityPrincipalWindowsVersion)" />
-    <PackageReference Update="System.Text.Encoding.CodePages" Version="$(SystemTextEncodingCodePagesVersion)" />
-    <PackageReference Update="System.Text.Json" Version="$(SystemTextJsonVersion)" />
-    <PackageReference Update="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
-    <PackageReference Update="xunit.assert" Version="$(XUnitVersion)" />
-    <PackageReference Update="xunit.console" Version="$(XUnitVersion)" />
-    <PackageReference Update="xunit.core" Version="$(XUnitVersion)" />
+    <PackageVersion Include="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
+    <PackageVersion Include="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
+    <PackageVersion Include="Microsoft.CodeAnalysis.Collections" Version="$(MicrosoftCodeAnalysisCollectionsVersion)" />
+    <PackageVersion Include="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
+    <PackageVersion Include="Microsoft.IO.Redist" Version="$(MicrosoftIORedistVersion)" />
+    <PackageVersion Include="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
+    <PackageVersion Include="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
+    <PackageVersion Include="System.Collections.Immutable" Version="$(SystemCollectionsImmutableVersion)" />
+    <PackageVersion Include="System.Configuration.ConfigurationManager" Version="$(SystemConfigurationConfigurationManagerVersion)" />
+    <PackageVersion Include="System.Memory" Version="$(SystemMemoryVersion)" />
+    <PackageVersion Include="System.Net.Http" Version="$(SystemNetHttpVersion)" />
+    <PackageVersion Include="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" />
+    <PackageVersion Include="System.Reflection.MetadataLoadContext" Version="$(SystemReflectionMetadataLoadContextVersion)" />
+    <PackageVersion Include="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
+    <PackageVersion Include="System.Runtime.CompilerServices.Unsafe" Version="$(SystemRuntimeCompilerServicesUnsafeVersion)" />
+    <PackageVersion Include="System.Security.Permissions" Version="$(SystemSecurityPermissionsVersion)" />
+    <PackageVersion Include="System.Security.Principal.Windows" Version="$(SystemSecurityPrincipalWindowsVersion)" />
+    <PackageVersion Include="System.Text.Encoding.CodePages" Version="$(SystemTextEncodingCodePagesVersion)" />
+    <PackageVersion Include="System.Text.Json" Version="$(SystemTextJsonVersion)" />
+    <PackageVersion Include="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
+    <PackageVersion Include="xunit.assert" Version="$(XUnitVersion)" />
+    <PackageVersion Include="xunit.console" Version="$(XUnitVersion)" />
+    <PackageVersion Include="xunit.core" Version="$(XUnitVersion)" />
   </ItemGroup>
 </Project>
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 7310d68883a..009a31bbea5 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,22 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.23060.6">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.23114.5">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>74b7648c106865057c78ca1e4b2ffcb5e9bce071</Sha>
+      <Sha>0c93c1cb1ef9c9d5c1a59f4ab98c2f7e37f12197</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.5.0-preview.3.136">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.5.0-rc.149">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>743503cb3c7e9ced2602ee2e29c38d63cc339451</Sha>
+      <Sha>ca5029046d7b6e55f322c45abb7b342054543710</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.5.0-3.23062.15">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.6.0-1.23109.10">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>7061c64ddbd931d55b9a97f95243fcf91d04d7b1</Sha>
+      <Sha>73338d92270b9f26982eca2e8872037a0214b912</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.23060.6">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.23114.5">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>74b7648c106865057c78ca1e4b2ffcb5e9bce071</Sha>
+      <Sha>0c93c1cb1ef9c9d5c1a59f4ab98c2f7e37f12197</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index 84ab06e6da4..1b66f02385a 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -48,11 +48,11 @@
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
     <MicrosoftCodeAnalysisCollectionsVersion>4.2.0-1.22102.8</MicrosoftCodeAnalysisCollectionsVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.23060.6</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.23114.5</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>7.0.0</MicrosoftExtensionsDependencyModelVersion>
     <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.5.0-3.23062.15</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.5.0-preview.3.136</NuGetBuildTasksVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.6.0-1.23109.10</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.5.0-rc.149</NuGetBuildTasksVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
     <SystemTextJsonVersion>7.0.0</SystemTextJsonVersion>
     <SystemThreadingTasksDataflowVersion>7.0.0</SystemThreadingTasksDataflowVersion>
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index cdd69e6ed40..a68e0949b2c 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -10,51 +10,48 @@
   these properties to override package versions if necessary. -->
 
   <ItemGroup>
-    <PackageReference Update="BenchmarkDotNet" Version="0.13.1" />
-    <PackageReference Update="BenchmarkDotNet" Condition="'$(BenchmarkDotNetVersion)' != ''" Version="$(BenchmarkDotNetVersion)" />
+    <PackageVersion Include="BenchmarkDotNet" Version="0.13.1" />
+    <PackageVersion Update="BenchmarkDotNet" Condition="'$(BenchmarkDotNetVersion)' != ''" Version="$(BenchmarkDotNetVersion)" />
 
-    <PackageReference Update="LargeAddressAware" Version="1.0.5" />
-    <PackageReference Update="LargeAddressAware" Condition="'$(LargeAddressAwareVersion)' != ''" Version="$(LargeAddressAwareVersion)" />
+    <PackageVersion Include="LargeAddressAware" Version="1.0.5" />
+    <PackageVersion Update="LargeAddressAware" Condition="'$(LargeAddressAwareVersion)' != ''" Version="$(LargeAddressAwareVersion)" />
 
-    <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" />
-    <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Condition="'$(MicrosoftVisualStudioSDKEmbedInteropTypesVersion)' != ''" Version="$(MicrosoftVisualStudioSDKEmbedInteropTypesVersion)" />
+    <PackageVersion Include="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.2.2146" PrivateAssets="All" />
+    <PackageVersion Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Condition="'$(MicrosoftVisualStudioSetupConfigurationInteropVersion)' != ''" Version="$(MicrosoftVisualStudioSetupConfigurationInteropVersion)" PrivateAssets="All" />
 
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.2.2146" PrivateAssets="All" />
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Condition="'$(MicrosoftVisualStudioSetupConfigurationInteropVersion)' != ''" Version="$(MicrosoftVisualStudioSetupConfigurationInteropVersion)" PrivateAssets="All" />
+    <PackageVersion Include="Microsoft.Win32.Registry" Version="5.0.0" />
+    <PackageVersion Update="Microsoft.Win32.Registry" Condition="'$(MicrosoftWin32RegistryVersion)' != ''" Version="$(MicrosoftWin32RegistryVersion)" />
 
-    <PackageReference Update="Microsoft.Win32.Registry" Version="5.0.0" />
-    <PackageReference Update="Microsoft.Win32.Registry" Condition="'$(MicrosoftWin32RegistryVersion)' != ''" Version="$(MicrosoftWin32RegistryVersion)" />
+    <PackageVersion Include="Newtonsoft.Json" Version="13.0.2" />
+    <PackageVersion Update="Newtonsoft.Json" Condition="'$(NewtonsoftJsonVersion)' != ''" Version="$(NewtonsoftJsonVersion)" />
 
-    <PackageReference Update="Newtonsoft.Json" Version="13.0.2" />
-    <PackageReference Update="Newtonsoft.Json" Condition="'$(NewtonsoftJsonVersion)' != ''" Version="$(NewtonsoftJsonVersion)" />
+    <PackageVersion Include="PdbGit" Version="3.0.41" />
+    <PackageVersion Update="PdbGit" Condition="'$(PdbGitVersion)' != ''" Version="$(PdbGitVersion)" />
 
-    <PackageReference Update="PdbGit" Version="3.0.41" />
-    <PackageReference Update="PdbGit" Condition="'$(PdbGitVersion)' != ''" Version="$(PdbGitVersion)" />
+    <PackageVersion Include="Shouldly" Version="3.0.0" />
+    <PackageVersion Update="Shouldly" Condition="'$(ShouldlyVersion)' != ''" Version="$(ShouldlyVersion)" />
 
-    <PackageReference Update="Shouldly" Version="3.0.0" />
-    <PackageReference Update="Shouldly" Condition="'$(ShouldlyVersion)' != ''" Version="$(ShouldlyVersion)" />
+    <PackageVersion Include="System.CodeDom" Version="7.0.0" />
+    <PackageVersion Update="System.CodeDom" Condition="'$(SystemCodeDomVersion)' != ''" Version="$(SystemCodeDomVersion)" />
 
-    <PackageReference Update="System.CodeDom" Version="7.0.0" />
-    <PackageReference Update="System.CodeDom" Condition="'$(SystemCodeDomVersion)' != ''" Version="$(SystemCodeDomVersion)" />
+    <PackageVersion Include="System.Private.Uri" Version="4.3.2" />
+    <PackageVersion Update="System.Private.Uri" Condition="'$(SystemPrivateUriVersion)' != ''" Version="$(SystemPrivateUriVersion)" />
 
-    <PackageReference Update="System.Private.Uri" Version="4.3.2" />
-    <PackageReference Update="System.Private.Uri" Condition="'$(SystemPrivateUriVersion)' != ''" Version="$(SystemPrivateUriVersion)" />
+    <PackageVersion Include="System.Runtime" Version="4.3.1" />
+    <PackageVersion Update="System.Runtime" Condition="'$(SystemRuntimeVersion)' != ''" Version="$(SystemRuntimeVersion)" />
 
-    <PackageReference Update="System.Runtime" Version="4.3.1" />
-    <PackageReference Update="System.Runtime" Condition="'$(SystemRuntimeVersion)' != ''" Version="$(SystemRuntimeVersion)" />
+    <PackageVersion Include="System.Security.Cryptography.Pkcs" Version="7.0.0" />
+    <PackageVersion Update="System.Security.Cryptography.Pkcs" Condition="'$(SystemSecurityCryptographyPkcsVersion)' != ''" Version="$(SystemSecurityCryptographyPkcsVersion)" />
 
-    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="7.0.0" />
-    <PackageReference Update="System.Security.Cryptography.Pkcs" Condition="'$(SystemSecurityCryptographyPkcsVersion)' != ''" Version="$(SystemSecurityCryptographyPkcsVersion)" />
+    <PackageVersion Include="System.Security.Cryptography.Xml" Version="7.0.1" />
+    <PackageVersion Update="System.Security.Cryptography.Xml" Condition="'$(SystemSecurityCryptographyXmlVersion)' != ''" Version="$(SystemSecurityCryptographyXmlVersion)" />
 
-    <PackageReference Update="System.Security.Cryptography.Xml" Version="7.0.1" />
-    <PackageReference Update="System.Security.Cryptography.Xml" Condition="'$(SystemSecurityCryptographyXmlVersion)' != ''" Version="$(SystemSecurityCryptographyXmlVersion)" />
-
-    <PackageReference Update="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
-    <PackageReference Update="System.Security.Cryptography.X509Certificates" Condition="'$(SystemSecurityCryptographyX509CertificatesVersion)' != ''" Version="$(SystemSecurityCryptographyX509CertificatesVersion)" />
+    <PackageVersion Include="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
+    <PackageVersion Update="System.Security.Cryptography.X509Certificates" Condition="'$(SystemSecurityCryptographyX509CertificatesVersion)' != ''" Version="$(SystemSecurityCryptographyX509CertificatesVersion)" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'">
-    <GlobalPackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.3" />
+    <GlobalPackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.4" />
     <GlobalPackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435" PrivateAssets="all"/>
     <GlobalPackageReference Include="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" PrivateAssets="All" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
   </ItemGroup>
diff --git a/global.json b/global.json
index 39c8c57a412..6db16c7387f 100644
--- a/global.json
+++ b/global.json
@@ -3,14 +3,13 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "7.0.101",
+    "dotnet": "7.0.200",
     "vs": {
       "version": "17.4.1"
     },
     "xcopy-msbuild": "17.4.1"
   },
   "msbuild-sdks": {
-    "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.23060.6"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.23114.5"
   }
 }
diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index 8d3690d5d5c..2faf7294143 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -7,13 +7,11 @@
 using System.Linq;
 using System.Text;
 using System.Xml;
-
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
index fabff8c5bcc..29361bbf569 100644
--- a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
@@ -1,12 +1,12 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Collections.Generic;
 using System;
-using Microsoft.Build.Construction;
+using System.Collections.Generic;
 using System.Reflection;
-using Xunit;
+using Microsoft.Build.Construction;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
index f8bcc00dc81..1be0eae1c2e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
@@ -6,12 +6,10 @@
 using System.IO;
 using System.Text;
 using System.Xml;
-
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using Microsoft.Build.Evaluation;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index 75630c2f041..922608cecd5 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
index 48ade2120bc..57441a1ae20 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
@@ -1,16 +1,16 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Construction;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.UnitTests;
 using System;
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
 using System.Text;
 using System.Xml;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
 using Xunit;
 using Xunit.Abstractions;
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index 790558091f5..5950b6a4ec2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -5,13 +5,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Xml;
-
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index d5566731c72..289fe98f4cc 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -6,9 +6,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index 2112fa2d2c2..0ffa9b60cc2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -3,11 +3,9 @@
 
 using System.IO;
 using System.Xml;
-
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index b6ec9024a6e..ac62b8e21d7 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -5,12 +5,10 @@
 using System.IO;
 using System.Linq;
 using System.Xml;
-
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using Microsoft.Build.Evaluation;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index cd8d9167026..a57c3694e45 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -3,14 +3,13 @@
 
 using System;
 using System.IO;
+using System.Linq;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using Xunit;
-using System.Linq;
 using Microsoft.Build.Evaluation;
+using Xunit;
 using Xunit.Abstractions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index 216a583cbe6..0bad6797fbe 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -4,11 +4,9 @@
 using System;
 using System.IO;
 using System.Xml;
-
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index f64361abb46..2193bf0ca8e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index ed38f1828e0..148b5f409ef 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index f1311c25d5c..a9edfebe54b 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -22,6 +22,7 @@
 using Shouldly;
 using Xunit;
 using Microsoft.Build.Framework;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -883,11 +884,9 @@ public void ItemsEnumerator()
 
 #if FEATURE_SECURITY_PRINCIPAL_WINDOWS
         /// <summary>
-        /// Build a solution file that can't be accessed
+        /// Build a solution file that can't be accessed.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]  // Security classes are not supported on Unix
-
+        [WindowsOnlyFact(additionalMessage: "Security classes are not supported on Unix.")]
         public void SolutionCanNotBeOpened()
         {
             Assert.Throws<InvalidProjectFileException>(() =>
@@ -930,11 +929,9 @@ public void SolutionCanNotBeOpened()
         }
 
         /// <summary>
-        /// Build a project file that can't be accessed
+        /// Build a project file that can't be accessed.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        // FileSecurity class is not supported on Unix
+        [WindowsOnlyFact(additionalMessage: "FileSecurity class is not supported on Unix.")]
         public void ProjectCanNotBeOpened()
         {
             Assert.Throws<InvalidProjectFileException>(() =>
@@ -1005,8 +1002,7 @@ public void SolutionCorrupt()
         /// <summary>
         /// Open lots of projects concurrently to try to trigger problems
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]  // This test is platform specific for Windows
+        [WindowsOnlyFact]
         public void ConcurrentProjectOpenAndCloseThroughProject()
         {
             int iterations = 500;
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index bffc428efb8..86d90da04cf 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index e905ecdf342..cbb90d0ff94 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -4,11 +4,9 @@
 using System;
 using System.IO;
 using System.Xml;
-
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index fb060ae1026..a67068c7fe8 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -4,12 +4,12 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Text;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
-using System.Text;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index b941411298c..12424a672a4 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index a6dd098573f..955f6a1fe89 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index 82b99505a26..9a4b587a16a 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -5,9 +5,8 @@
 using System.IO;
 using System.Xml;
 using Microsoft.Build.Construction;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
index 5985ad2754e..0411b347ea2 100644
--- a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
@@ -3,13 +3,12 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Construction;
-
-using Xunit;
 using System.Linq;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
+using Xunit;
 
 
 #nullable disable
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index 1005cc140f2..71aef5e0df8 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -4,17 +4,17 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Reflection;
 using System.Xml;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Shouldly;
-using System.Reflection;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -1096,7 +1096,6 @@ public void DefaultToolsVersion()
 #else
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/276")]
 #endif
-        [Trait("Category", "mono-osx-failing")]
         public void DefaultToolsVersion2()
         {
             if (ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20) != null)
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
index caeacc2c859..a3e8c701e6f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
@@ -8,11 +8,11 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 293cdb4ff05..da4e8adc444 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -13,9 +13,11 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests.Shared;
 using Shouldly;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using Xunit.NetCore.Extensions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -54,7 +56,8 @@ public class ProjectItem_Tests : IDisposable
                     </Project>
                 ";
 
-        protected TestEnvironment _env;
+        protected readonly TestEnvironment _env;
+        private DummyMappedDrive _mappedDrive = null;
 
         public ProjectItem_Tests()
         {
@@ -64,6 +67,7 @@ public ProjectItem_Tests()
         public void Dispose()
         {
             _env.Dispose();
+            _mappedDrive?.Dispose();
         }
 
         /// <summary>
@@ -703,8 +707,7 @@ public void ExcludeAndIncludeConsideredAsLiteralsWhenFilespecIsIllegal(string pr
             TestIncludeExclude(projectContents, inputFiles, expectedInclude, includeString, excludeString, normalizeSlashes: true);
         }
 
-        [Theory]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyTheory]
         [InlineData(ItemWithIncludeAndExclude,
             @"src/**/*.cs",
             new[]
@@ -792,23 +795,22 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn
         /// <summary>
         /// Project getter that renames an item to a drive enumerating wildcard that results in a logged warning.
         /// </summary>
-        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
-        [InlineData(@"z:\**\*.log")]
-        [InlineData(@"z:$(empty)\**\*.log")]
-        [InlineData(@"z:\**")]
-        [InlineData(@"z:\\**")]
-        [InlineData(@"z:\\\\\\\\**")]
-        [InlineData(@"z:\**\*.cs")]
+        [WindowsOnlyTheory]
+        [InlineData(@"%DRIVE%:\**\*.log")]
+        [InlineData(@"%DRIVE%:$(empty)\**\*.log")]
+        [InlineData(@"%DRIVE%:\**")]
+        [InlineData(@"%DRIVE%:\\**")]
+        [InlineData(@"%DRIVE%:\\\\\\\\**")]
+        [InlineData(@"%DRIVE%:\**\*.cs")]
         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)
         {
+            var mappedDrive = GetDummyMappedDrive();
+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, mappedDrive.MappedDriveLetter);
             ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
         }
 
-        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/8373")]
         [InlineData(@"/**/*.log")]
         [InlineData(@"$(empty)/**/*.log")]
         [InlineData(@"/$(empty)**/*.log")]
@@ -877,34 +879,56 @@ public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent
         /// <summary>
         /// Project instance created from a file that contains a drive enumerating wildcard results in a logged warning on the Windows platform.
         /// </summary>
-        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(
             ImportProjectElement,
-            @"z:\**\*.targets",
+            @"%DRIVE%:\**\*.targets",
             null)]
 
         // LazyItem.IncludeOperation
         [InlineData(
             ItemWithIncludeAndExclude,
-            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"%DRIVE%:$(Microsoft_WindowsAzure_EngSys)\**\*",
             @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
 
         // LazyItem.IncludeOperation for Exclude
         [InlineData(
             ItemWithIncludeAndExclude,
             @"$(EmptyProperty)\*.cs",
-            @"z:\$(Microsoft_WindowsAzure_EngSys)**")]
+            @"%DRIVE%:\$(Microsoft_WindowsAzure_EngSys)**")]
         public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
         {
+            var mappedDrive = GetDummyMappedDrive();
+            placeHolder = UpdatePathToMappedDrive(placeHolder, mappedDrive.MappedDriveLetter);
+            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, mappedDrive.MappedDriveLetter);
             content = string.Format(content, placeHolder, excludePlaceHolder);
             CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
         }
 
-        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        private DummyMappedDrive GetDummyMappedDrive()
+        {
+            if (NativeMethods.IsWindows)
+            {
+                // let's create the mapped drive only once it's needed by any test, then let's reuse;
+                _mappedDrive ??= new DummyMappedDrive();
+            }
+
+            return _mappedDrive;
+        }
+
+        private static string UpdatePathToMappedDrive(string path, char driveLetter)
+        {
+            const string drivePlaceholder = "%DRIVE%";
+            // if this seems to be rooted path - replace with the dummy mount
+            if (!string.IsNullOrEmpty(path) && path.StartsWith(drivePlaceholder))
+            {
+                path = driveLetter + path.Substring(drivePlaceholder.Length);
+            }
+            return path;
+        }
+
+        [UnixOnlyTheory]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/8373")]
         [InlineData(
             ImportProjectElement,
             @"\**\*.targets",
@@ -2148,7 +2172,7 @@ public void SetDirectMetadataShouldEvaluateMetadataValue()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents);
 
                 var metadata = project.GetItems("I").FirstOrDefault().SetMetadataValue("M", "$(P);@(Foo)", true);
 
@@ -2174,7 +2198,7 @@ public void SetDirectMetadataWhenSameMetadataComesFromDefinitionGroupShouldAddDi
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, projectContents);
 
                 var item = project.GetItems("I").FirstOrDefault();
                 var metadata = item.SetMetadataValue("M", "V", true);
@@ -2547,7 +2571,7 @@ public void RemoveWithPropertyReferenceInMatchOnMetadata()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content);
 
                 var items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I2"));
 
@@ -2584,7 +2608,7 @@ public void RemoveWithItemReferenceInMatchOnMetadata()
 
             using (var env = TestEnvironment.Create())
             {
-                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content, null, null);
+                var project = ObjectModelHelpers.CreateInMemoryProject(env.CreateProjectCollection().Collection, content);
 
                 var items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I2"));
 
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index d8ed8d18514..3313fd7bf81 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -8,7 +8,6 @@
 using System.Linq;
 using System.Text;
 using System.Xml;
-
 using Microsoft.Build.Construction;
 using Microsoft.Build.Engine.UnitTests.Globbing;
 using Microsoft.Build.Evaluation;
@@ -16,17 +15,16 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Shared;
-
-using Task = System.Threading.Tasks.Task;
-// can't use an actual ProvenanceResult because it points to a ProjectItemElement which is hard to mock.
-using ProvenanceResultTupleList = System.Collections.Generic.List<(string, Microsoft.Build.Evaluation.Operation, Microsoft.Build.Evaluation.Provenance, int)>;
-using GlobResultList = System.Collections.Generic.List<(string, string[], System.Collections.Immutable.ImmutableHashSet<string>, System.Collections.Immutable.ImmutableHashSet<string>)>;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using ToolLocationHelper = Microsoft.Build.Utilities.ToolLocationHelper;
-using TargetDotNetFrameworkVersion = Microsoft.Build.Utilities.TargetDotNetFrameworkVersion;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using GlobResultList = System.Collections.Generic.List<(string, string[], System.Collections.Immutable.ImmutableHashSet<string>, System.Collections.Immutable.ImmutableHashSet<string>)>;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+// can't use an actual ProvenanceResult because it points to a ProjectItemElement which is hard to mock.
+using ProvenanceResultTupleList = System.Collections.Generic.List<(string, Microsoft.Build.Evaluation.Operation, Microsoft.Build.Evaluation.Provenance, int)>;
+using TargetDotNetFrameworkVersion = Microsoft.Build.Utilities.TargetDotNetFrameworkVersion;
+using Task = System.Threading.Tasks.Task;
+using ToolLocationHelper = Microsoft.Build.Utilities.ToolLocationHelper;
 
 #nullable disable
 
@@ -975,7 +973,6 @@ public void ChangeGlobalPropertiesPreexisting()
 #else
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/276")]
 #endif
-        [Trait("Category", "mono-osx-failing")]
         public void ChangeGlobalPropertiesInitiallyFromProjectCollection()
         {
             Dictionary<string, string> initial = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
@@ -1243,7 +1240,6 @@ public void GetSubToolsetVersion()
         /// environment
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetSubToolsetVersion_FromEnvironment()
         {
             string originalVisualStudioVersion = Environment.GetEnvironmentVariable("VisualStudioVersion");
@@ -3855,8 +3851,6 @@ public void ProjectInstanceShouldInitiallyHaveSameEvaluationIdAsTheProjectItCame
         [Fact]
         [Trait("Category", "netcore-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
         [Trait("Category", "netcore-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
         public void ProjectImportedEventFalseCondition()
         {
             using (var env = TestEnvironment.Create(_output))
@@ -3900,8 +3894,6 @@ public void ProjectImportedEventFalseCondition()
         [Fact]
         [Trait("Category", "netcore-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
         [Trait("Category", "netcore-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
         public void ProjectImportedEventNoMatchingFiles()
         {
             using (var env = TestEnvironment.Create(_output))
@@ -4161,8 +4153,6 @@ public void ProjectImportedEventMissingFileNoGlobMatch()
         [Fact]
         [Trait("Category", "netcore-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
         [Trait("Category", "netcore-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-osx-failing")] // https://github.com/dotnet/msbuild/issues/2226
-        [Trait("Category", "mono-linux-failing")] // https://github.com/dotnet/msbuild/issues/2226
         public void ProjectImportEvent()
         {
             using (var env = TestEnvironment.Create(_output))
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index 7fd5bf6425f..7379237e594 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -9,12 +9,11 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
-
 using Microsoft.Build.Framework;
-using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using Microsoft.Build.Shared;
 using Xunit;
 using Xunit.Abstractions;
+using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 
 #nullable disable
 
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 3e8f8a63a0e..c4c4e0b9c59 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -4,19 +4,18 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Xml;
-
 using Microsoft.Build.Construction;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using Xunit;
 using Shouldly;
-using System.Linq;
+using Xunit;
+using Xunit.NetCore.Extensions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -908,8 +907,7 @@ public void ThrowExceptionUponBuildingProjectWithDriveEnumeration(string content
         /// Log warning for drive enumerating wildcards that exist in projects on Windows platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(
             TargetItemWithIncludeAndExclude,
             @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
@@ -950,8 +948,7 @@ public void LogWindowsWarningUponBuildingProjectWithDriveEnumeration(string cont
         /// Log warning for drive enumerating wildcards that exist in projects on Unix platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         [InlineData(
             TargetWithDefinedPropertyAndItemWithInclude,
             @"$(Microsoft_WindowsAzure_EngSys)**",
@@ -981,8 +978,7 @@ public void LogUnixWarningUponBuildingProjectWithDriveEnumeration(string content
         /// <summary>
         /// Tests target item evaluation resulting in no build failures.
         /// </summary>
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(
             TargetWithDefinedPropertyAndItemWithInclude,
             @"$(Microsoft_WindowsAzure_EngSys)*.cs",
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 51d86b2f804..14c83442af4 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -79,7 +79,10 @@
       <Link>TestData\GlobbingTestData.cs</Link>
     </Compile>
     <Compile Include="..\Shared\ProcessExtensions.cs" />
+    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
+    <Compile Include="..\UnitTests.Shared\DriveMapping.cs" />
+    <Compile Include="..\UnitTests.Shared\DummyMappedDrive.cs" />
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
       <SubType>Designer</SubType>
diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index e7458cf0a26..c0a00cf572e 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -9,6 +9,7 @@
 using Xunit;
 #endif
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 namespace Microsoft.Build.Engine.OM.UnitTests
 {
@@ -23,8 +24,7 @@ public NugetRestoreTests(ITestOutputHelper output)
         // This NuGet version cannot locate other assemblies when parsing solutions at restore time. This includes localized strings required in debug mode.
         // NuGet version 4.1.0 was somewhat arbitrarily chosen. 3.5 breaks with an unrelated error, and 4.8.2 does not fail when a new dependency is introduced. This is a safe middle point.
 #if !DEBUG
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
-        [Fact]
+        [WindowsFullFrameworkOnlyFact]
         public void TestOldNuget()
         {
             string msbuildExePath = Path.GetDirectoryName(RunnerUtilities.PathToCurrentlyRunningMsBuildExe)!;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
index ef34a5876b9..bd2346f8b43 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
@@ -6,13 +6,13 @@
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
+    using System.Collections;
     using System.Collections.Generic;
     using System.Linq;
     using Microsoft.Build.Construction;
-    using Microsoft.Build.ObjectModelRemoting;
     using Microsoft.Build.Evaluation;
+    using Microsoft.Build.ObjectModelRemoting;
     using Xunit;
-    using System.Collections;
 
     internal class ElementLinkPair<T> : LinkPair<T>
         where T : ProjectElement
@@ -205,7 +205,7 @@ public ElementLinkPair<CT> QuerySingleChildrenWithValidation<CT>(Func<T, IEnumer
         }
     }
 
-    internal class ProjectXmlPair : ElementLinkPair<ProjectRootElement>
+    internal sealed class ProjectXmlPair : ElementLinkPair<ProjectRootElement>
     {
         private ProjectPair Project { get; }
         public ProjectXmlPair(ProjectPair pair) : base(null, pair.View.Xml, pair.Real.Xml) { this.Project = pair; this.PRE = this; }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
index 0545ad97ba8..f07ab76dd54 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
@@ -94,7 +94,7 @@ public virtual void Verify()
         }
     }
 
-    internal class ValidationContext
+    internal sealed class ValidationContext
     {
         public ValidationContext() { }
         public ValidationContext(ProjectPair pair) { this.Pair = pair; }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
index 09505be2280..c461631536d 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
@@ -8,10 +8,10 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using System.Collections.Generic;
     using System.Linq;
     using Microsoft.Build.Evaluation;
-    using Xunit;
     using Microsoft.Build.Framework;
+    using Xunit;
 
-    internal class ProjectPair : LinkPair<Project>
+    internal sealed class ProjectPair : LinkPair<Project>
     {
         public ProjectPair(Project view, Project real)
             : base(view, real)
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
index 4d2a3fa0dde..31086e8f06b 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectChooseElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectChooseElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectChooseElementLink : ProjectChooseElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectChooseElementLink : ProjectChooseElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectChooseElementLink(MockProjectChooseElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
index 4649ce117d8..621624db5f4 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
@@ -48,7 +48,7 @@ public void RemoveChild(MockProjectElementLinkRemoter child)
     }
 
     // not used - just a copy/paste template for remoting support objects of Construction model hierarchical containers.
-    internal class TemplateProjectElementContainerLink : ProjectElementContainerLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class TemplateProjectElementContainerLink : ProjectElementContainerLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public TemplateProjectElementContainerLink(MockProjectElementContainerLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
index ef223917f02..3dc529aa1bb 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
@@ -71,7 +71,7 @@ public void SetOrRemoveAttribute(string name, string value, bool clearAttributeC
     }
 
     // not used - just a copy/paste template for remoting support objects of Construction model hierarchical elements.
-    internal class TemplateProjectElementLink : ProjectElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class TemplateProjectElementLink : ProjectElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public TemplateProjectElementLink(MockProjectElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
index 54e3281620d..de6cd1c40fb 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectExtensionsElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectExtensionsElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectExtensionsElement ExtensionXml => (ProjectExtensionsElement)Source;
 
@@ -30,7 +30,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public void SetSubElement(string name, string value) { this.ExtensionXml[name] = value; }
     }
 
-    internal class MockProjectExtensionsElementLink : ProjectExtensionsElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectExtensionsElementLink : ProjectExtensionsElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectExtensionsElementLink(MockProjectExtensionsElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
index c5fa1a839c3..f922ee9a0b9 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectImportElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectImportElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectImportElement ImportElementXml => (ProjectImportElement)Source;
 
@@ -28,7 +28,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public MockProjectElementLinkRemoter OriginalElement => this.Export(ImportElementXml.OriginalElement);
     }
 
-    internal class MockProjectImportElementLink : ProjectImportElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectImportElementLink : ProjectImportElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectImportElementLink(MockProjectImportElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
index 91183160a77..6e330840bf8 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectImportGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectImportGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectImportGroupElementLink : ProjectImportGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectImportGroupElementLink : ProjectImportGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectImportGroupElementLink(MockProjectImportGroupElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
index 1fa22919a85..2fb99698599 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemDefinitionElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectItemDefinitionElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectItemDefinitionElementLink : ProjectItemDefinitionElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectItemDefinitionElementLink : ProjectItemDefinitionElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectItemDefinitionElementLink(MockProjectItemDefinitionElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
index 4db3a3887c6..88b97424784 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemDefinitionGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectItemDefinitionGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectItemDefinitionGroupElementLink : ProjectItemDefinitionGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectItemDefinitionGroupElementLink : ProjectItemDefinitionGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectItemDefinitionGroupElementLink(MockProjectItemDefinitionGroupElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
index b3e6082cfa6..146fa5ce523 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectItemElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public ProjectItemElement ItemXml => (ProjectItemElement)Source;
 
@@ -30,7 +30,7 @@ public void ChangeItemType(string newType)
         }
     }
 
-    internal class MockProjectItemElementLink : ProjectItemElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectItemElementLink : ProjectItemElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectItemElementLink(MockProjectItemElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
index 2a2cd60b8fd..477d059db25 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectItemGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectItemGroupElementLink : ProjectItemGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectItemGroupElementLink : ProjectItemGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectItemGroupElementLink(MockProjectItemGroupElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
index c1c4104e896..4272a5e7d90 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectMetadataElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectMetadataElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectMetadataElement MetadataXml => (ProjectMetadataElement)Source;
 
@@ -29,7 +29,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public void ChangeName(string newName) { MetadataXml.Name = newName; }
     }
 
-    internal class MockProjectMetadataElementLink : ProjectMetadataElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectMetadataElementLink : ProjectMetadataElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectMetadataElementLink(MockProjectMetadataElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
index 2e2f270b6bd..0fb6c5e0666 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectOnErrorElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectOnErrorElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectOnErrorElementLink : ProjectOnErrorElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectOnErrorElementLink : ProjectOnErrorElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectOnErrorElementLink(MockProjectOnErrorElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
index f505ff63bfc..7e16caa74f6 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectOtherwiseElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectOtherwiseElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectOtherwiseElementLink : ProjectOtherwiseElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectOtherwiseElementLink : ProjectOtherwiseElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectOtherwiseElementLink(MockProjectOtherwiseElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
index 6614aefb505..1ec65066649 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectOutputElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectOutputElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectOutputElementLink : ProjectOutputElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectOutputElementLink : ProjectOutputElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectOutputElementLink(MockProjectOutputElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
index 2ec4b700504..44d9f686880 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectPropertyElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectPropertyElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectPropertyElement PropertyXml => (ProjectPropertyElement)Source;
 
@@ -29,7 +29,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public void ChangeName(string newName) { PropertyXml.Name = newName; }
     }
 
-    internal class MockProjectPropertyElementLink : ProjectPropertyElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectPropertyElementLink : ProjectPropertyElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectPropertyElementLink(MockProjectPropertyElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
index 12145a4d3cf..1b8ec9a2e71 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectPropertyGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectPropertyGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectPropertyGroupElementLink : ProjectPropertyGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectPropertyGroupElementLink : ProjectPropertyGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectPropertyGroupElementLink(MockProjectPropertyGroupElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
index a42fa6bf257..61d4f806261 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
@@ -5,15 +5,15 @@
 
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
-    using System.Collections.Generic;
     using System;
+    using System.Collections.Generic;
     using System.IO;
     using System.Text;
     using System.Xml;
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectRootElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectRootElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         private ProjectRootElement ProjectXml => (ProjectRootElement)Source;
 
@@ -146,7 +146,7 @@ public MockProjectSdkElementLinkRemoter CreateProjectSdkElement(string sdkName,
     }
 
 
-    internal class MockProjectRootElementLink : ProjectRootElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectRootElementLink : ProjectRootElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectRootElementLink(MockProjectRootElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
index 04c02eae76c..9663cb312c9 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectSdkElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectSdkElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectSdkElementLink : ProjectSdkElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectSdkElementLink : ProjectSdkElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectSdkElementLink(MockProjectSdkElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
index e4c86708942..e7b1c473978 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectTargetElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectTargetElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public ProjectTargetElement TargetXml => (ProjectTargetElement)Source;
 
@@ -29,7 +29,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public string Returns { set => this.TargetXml.Returns = value; }
     }
 
-    internal class MockProjectTargetElementLink : ProjectTargetElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectTargetElementLink : ProjectTargetElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectTargetElementLink(MockProjectTargetElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
index e269c88d187..2be15a871d7 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectTaskElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectTaskElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public ProjectTaskElement TaskXml => (ProjectTaskElement)Source;
 
@@ -39,7 +39,7 @@ public IDictionary<string, string> Parameters
         public void RemoveAllParameters() { this.TaskXml.RemoveAllParameters(); }
     }
 
-    internal class MockProjectTaskElementLink : ProjectTaskElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectTaskElementLink : ProjectTaskElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectTaskElementLink(MockProjectTaskElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
index 096dfd6bbea..e1bdae40e51 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectUsingTaskBodyElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectUsingTaskBodyElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectUsingTaskBodyElement UsingTaskBodyXml => (ProjectUsingTaskBodyElement)Source;
 
@@ -28,7 +28,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public string TaskBody { get => this.UsingTaskBodyXml.TaskBody; set => this.UsingTaskBodyXml.TaskBody = value; }
     }
 
-    internal class MockProjectUsingTaskBodyElementLink : ProjectUsingTaskBodyElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectUsingTaskBodyElementLink : ProjectUsingTaskBodyElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectUsingTaskBodyElementLink(MockProjectUsingTaskBodyElementLinkRemoter proxy, IImportHolder holder)
         {
@@ -68,7 +68,7 @@ public MockProjectUsingTaskBodyElementLink(MockProjectUsingTaskBodyElementLinkRe
 
 namespace Microsoft.Build.Engine.OM.UnitTests.ObjectModelRemoting.RemoteProjectsProviderMock.ConstructionLinkMocks
 {
-    internal class MockProjectUsingTaskBodyElementLink
+    internal sealed class MockProjectUsingTaskBodyElementLink
     {
     }
 }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
index bbdf492a173..8948a31fdf0 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectUsingTaskElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectUsingTaskElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectUsingTaskElementLink : ProjectUsingTaskElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectUsingTaskElementLink : ProjectUsingTaskElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectUsingTaskElementLink(MockProjectUsingTaskElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
index 91d70d33982..d1b96ecefec 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectUsingTaskParameterElementLinkRemoter : MockProjectElementLinkRemoter
+    internal sealed class MockProjectUsingTaskParameterElementLinkRemoter : MockProjectElementLinkRemoter
     {
         public ProjectUsingTaskParameterElement TaskParamXml => (ProjectUsingTaskParameterElement)Source;
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
@@ -26,7 +26,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         public string Name { get => this.TaskParamXml.Name; set => TaskParamXml.Name = value; }
     }
 
-    internal class MockProjectUsingTaskParameterElementLink : ProjectUsingTaskParameterElementLink, ILinkMock, IProjectElementLinkHelper
+    internal sealed class MockProjectUsingTaskParameterElementLink : ProjectUsingTaskParameterElementLink, ILinkMock, IProjectElementLinkHelper
     {
         public MockProjectUsingTaskParameterElementLink(MockProjectUsingTaskParameterElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
index 921a0a367e8..6d9f536f43b 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectWhenElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockProjectWhenElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockProjectWhenElementLink : ProjectWhenElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockProjectWhenElementLink : ProjectWhenElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockProjectWhenElementLink(MockProjectWhenElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
index 3a020455530..a1926cee93d 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Construction;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockUsingTaskParameterGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
+    internal sealed class MockUsingTaskParameterGroupElementLinkRemoter : MockProjectElementContainerLinkRemoter
     {
         public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         {
@@ -23,7 +23,7 @@ public override ProjectElement CreateLinkedObject(IImportHolder holder)
         }
     }
 
-    internal class MockUsingTaskParameterGroupElementLink : UsingTaskParameterGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
+    internal sealed class MockUsingTaskParameterGroupElementLink : UsingTaskParameterGroupElementLink, ILinkMock, IProjectElementLinkHelper, IProjectElementContainerLinkHelper
     {
         public MockUsingTaskParameterGroupElementLink(MockUsingTaskParameterGroupElementLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
index daa32209fe2..e4cdda6ef58 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     internal static class ProjectElemetExportHelper
     {
         private delegate MockProjectElementLinkRemoter ExporterFactory(ProjectCollectionLinker exporter, ProjectElement xml);
-        private class ElementInfo
+        private sealed class ElementInfo
         {
             public static ElementInfo New<T, RMock>()
                 where RMock : MockProjectElementLinkRemoter, new()
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
index 85dd231427c..f8d3cb321d5 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
@@ -23,7 +23,7 @@ internal static ResolvedImport Import(this RemotedResolvedImport remoted, Projec
         }
     }
 
-    internal class RemotedResolvedImport
+    internal sealed class RemotedResolvedImport
     {
         public RemotedResolvedImport(ResolvedImport resolvedImport, ProjectCollectionLinker exporter)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
index e2c9738fde6..1d8222f47eb 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Evaluation;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemDefinitionLinkRemoter : MockLinkRemoter<ProjectItemDefinition>
+    internal sealed class MockProjectItemDefinitionLinkRemoter : MockLinkRemoter<ProjectItemDefinition>
     {
         public override ProjectItemDefinition CreateLinkedObject(IImportHolder holder)
         {
@@ -28,7 +28,7 @@ public MockProjectMetadataLinkRemoter SetMetadataValue(string name, string uneva
             => this.OwningCollection.Export<ProjectMetadata, MockProjectMetadataLinkRemoter>(this.Source.SetMetadataValue(name, unevaluatedValue));
     }
 
-    internal class MockProjectItemDefinitionLink : ProjectItemDefinitionLink, ILinkMock
+    internal sealed class MockProjectItemDefinitionLink : ProjectItemDefinitionLink, ILinkMock
     {
         public MockProjectItemDefinitionLink(MockProjectItemDefinitionLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
index 5012822e461..b2e6a366b81 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Evaluation;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectItemLinkRemoter : MockLinkRemoter<ProjectItem>
+    internal sealed class MockProjectItemLinkRemoter : MockLinkRemoter<ProjectItem>
     {
         public override ProjectItem CreateLinkedObject(IImportHolder holder)
         {
@@ -35,7 +35,7 @@ public MockProjectMetadataLinkRemoter SetMetadataValue(string name, string uneva
         public void ChangeItemType(string newItemType) => this.Source.ItemType = newItemType;
     }
 
-    internal class MockProjectItemLink : ProjectItemLink, ILinkMock
+    internal sealed class MockProjectItemLink : ProjectItemLink, ILinkMock
     {
         public MockProjectItemLink(MockProjectItemLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
index abb23669f25..c6378a0ece2 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
@@ -12,11 +12,11 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Evaluation;
     using Microsoft.Build.Evaluation.Context;
     using Microsoft.Build.Execution;
-    using Microsoft.Build.ObjectModelRemoting;
     using Microsoft.Build.Framework;
     using Microsoft.Build.Logging;
+    using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectLinkRemoter : MockLinkRemoter<Project>
+    internal sealed class MockProjectLinkRemoter : MockLinkRemoter<Project>
     {
         public override Project CreateLinkedObject(IImportHolder holder)
         {
@@ -114,7 +114,7 @@ public MockProjectPropertyLinkRemoter SetProperty(string name, string unevaluate
         public void Unload() { }
     }
 
-    internal class MockProjectLink : ProjectLink, ILinkMock
+    internal sealed class MockProjectLink : ProjectLink, ILinkMock
     {
         public MockProjectLink(MockProjectLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
index 0b5ae0d6dfd..fc4755f2a23 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Evaluation;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectMetadataLinkRemoter : MockLinkRemoter<ProjectMetadata>
+    internal sealed class MockProjectMetadataLinkRemoter : MockLinkRemoter<ProjectMetadata>
     {
         public override ProjectMetadata CreateLinkedObject(IImportHolder holder)
         {
@@ -43,7 +43,7 @@ public object Parent
         public MockProjectMetadataLinkRemoter Predecessor => this.OwningCollection.Export<ProjectMetadata, MockProjectMetadataLinkRemoter>(this.Source.Predecessor);
     }
 
-    internal class MockProjectMetadataLink : ProjectMetadataLink, ILinkMock
+    internal sealed class MockProjectMetadataLink : ProjectMetadataLink, ILinkMock
     {
         public MockProjectMetadataLink(MockProjectMetadataLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
index aa838bc26ea..e0f987ce7c7 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using Microsoft.Build.Evaluation;
     using Microsoft.Build.ObjectModelRemoting;
 
-    internal class MockProjectPropertyLinkRemoter : MockLinkRemoter<ProjectProperty>
+    internal sealed class MockProjectPropertyLinkRemoter : MockLinkRemoter<ProjectProperty>
     {
         public override ProjectProperty CreateLinkedObject(IImportHolder holder)
         {
@@ -30,7 +30,7 @@ public override ProjectProperty CreateLinkedObject(IImportHolder holder)
         public bool IsImported => this.Source.IsImported;
     }
 
-    internal class MockProjectPropertyLink : ProjectPropertyLink, ILinkMock
+    internal sealed class MockProjectPropertyLink : ProjectPropertyLink, ILinkMock
     {
         public MockProjectPropertyLink(MockProjectPropertyLinkRemoter proxy, IImportHolder holder)
         {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
index a76b6b88a0a..607e9ba8586 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
@@ -143,7 +143,7 @@ internal interface IImportHolder
     /// <summary>
     /// Provide ability to export and import OM objects to another collections.
     /// </summary>
-    internal class ProjectCollectionLinker : ExternalProjectsProvider
+    internal sealed class ProjectCollectionLinker : ExternalProjectsProvider
     {
         internal static int _collecitonId = 0;
 
@@ -371,7 +371,7 @@ private interface IActiveImportDBG
             object Linked { get; }
         }
 
-        private class ActiveImport<T, RMock> : ImportedLinksMap.LinkedObject<RMock>, IImportHolder, IActiveImportDBG
+        private sealed class ActiveImport<T, RMock> : ImportedLinksMap.LinkedObject<RMock>, IImportHolder, IActiveImportDBG
             where T : class
             where RMock : MockLinkRemoter<T>
         {
@@ -388,8 +388,8 @@ public override void Initialize(uint key, RMock source, object context)
 
             public ProjectCollectionLinker Linker { get; private set; }
 
-            public T Linked { get; protected set; }
-            public RMock Remoter { get; protected set; }
+            public T Linked { get; private set; }
+            public RMock Remoter { get; private set; }
         }
 
 
@@ -398,7 +398,7 @@ public static ConnectedProjectCollections CreateGroup()
             return new ConnectedProjectCollections();
         }
 
-        internal class ConnectedProjectCollections
+        internal sealed class ConnectedProjectCollections
         {
             private List<ProjectCollectionLinker> group = new List<ProjectCollectionLinker>();
             public ProjectCollectionLinker AddNew()
@@ -441,7 +441,7 @@ private void ClearAllRemotes()
         }
 
 
-        private class ExternalConnection
+        private sealed class ExternalConnection
         {
             public ExternalConnection(ProjectCollectionLinker linker)
             {
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
index e9716a0d517..16f346a6df6 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     using System;
     using System.Collections.Generic;
 
-    internal class LinkedObjectsMap<KeyType> : IDisposable
+    internal sealed class LinkedObjectsMap<KeyType> : IDisposable
     {
         private static object Lock { get; } = new object();
         private static UInt32 nextCollectionId = 0;
@@ -269,7 +269,7 @@ public LinkedObject ActivateSlow(LinkedObjectsMap<KeyType> map)
             public virtual bool IsNull => false;
         }
 
-        private class WeakHolder
+        private sealed class WeakHolder
         {
             public WeakHolder(LinkedObject ro)
             {
diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index 8ce02b04836..8bf9bf686bb 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -3,15 +3,15 @@
 
 using System;
 using System.Collections.Generic;
+using System.Reflection;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Reflection;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Construction;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using Xunit;
 using Shouldly;
+using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -430,7 +430,6 @@ public void VerifyMatchingParametersDontLaunchTaskHost()
         /// parameters that explicitly do not match the current process. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyNonmatchingUsingTaskParametersLaunchTaskHost()
         {
             ITask createdTask = null;
@@ -464,7 +463,6 @@ public void VerifyNonmatchingUsingTaskParametersLaunchTaskHost()
         /// parameters that explicitly do not match the current process. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyNonmatchingTaskParametersLaunchTaskHost()
         {
             ITask createdTask = null;
@@ -496,7 +494,6 @@ public void VerifyNonmatchingTaskParametersLaunchTaskHost()
         /// parameters that explicitly do not match the current process. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyNonmatchingParametersLaunchTaskHost()
         {
             ITask createdTask = null;
@@ -561,7 +558,6 @@ public void VerifyExplicitlyLaunchTaskHost()
         /// explicitly instructed to launch the task host. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch1()
         {
             ITask createdTask = null;
@@ -595,7 +591,6 @@ public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch1()
         /// explicitly instructed to launch the task host. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch2()
         {
             ITask createdTask = null;
@@ -629,7 +624,6 @@ public void VerifyExplicitlyLaunchTaskHostEvenIfParametersMatch2()
         /// explicitly instructed to launch the task host. 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifySameFactoryCanGenerateDifferentTaskInstances()
         {
             ITask createdTask = null;
diff --git a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
index c47157d44fb..8cfb2d4a575 100644
--- a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
@@ -2,19 +2,18 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Xml;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
-using System.Collections.Generic;
 using Microsoft.Build.Shared.FileSystem;
+using Xunit;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
-using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 528e53b0285..b1288952956 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -5,9 +5,9 @@
 using System.Collections.Generic;
 using System.Configuration.Assemblies;
 using System.Globalization;
-using Microsoft.Build.BackEnd;
 using System.IO;
 using System.Reflection;
+using Microsoft.Build.BackEnd;
 using Shouldly;
 using Xunit;
 
@@ -843,7 +843,7 @@ public virtual void Translate(ITranslator translator)
             /// <summary>
             /// Comparer for BaseClass.
             /// </summary>
-            private class BaseClassComparer : IComparer<BaseClass>
+            private sealed class BaseClassComparer : IComparer<BaseClass>
             {
                 /// <summary>
                 /// Constructor.
@@ -873,7 +873,7 @@ public int Compare(BaseClass x, BaseClass y)
         /// <summary>
         /// Derived class for testing.
         /// </summary>
-        private class DerivedClass : BaseClass
+        private sealed class DerivedClass : BaseClass
         {
             /// <summary>
             /// A field.
@@ -928,7 +928,7 @@ public override void Translate(ITranslator translator)
             /// <summary>
             /// Comparer for DerivedClass.
             /// </summary>
-            private class DerivedClassComparer : IComparer<DerivedClass>
+            private sealed class DerivedClassComparer : IComparer<DerivedClass>
             {
                 /// <summary>
                 /// Constructor
diff --git a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
index 063eb110090..170ab5deb73 100644
--- a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
@@ -2,11 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -123,9 +124,7 @@ void TransportDelegate(INodePacket packet)
         /// <summary>
         /// Make sure shutdown will correctly null out the send data delegate
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/282")]
+        [WindowsFullFrameworkOnlyFact("https://github.com/dotnet/msbuild/issues/282")]
         public void TestShutDown()
         {
             SendDataDelegate transportDelegate = new(PacketProcessor);
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index c2d0569cb90..e340aaacdc6 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -2303,7 +2303,6 @@ public void ProjectInstanceLimitedTransferToOOPNode()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void CacheLifetime()
         {
             FileUtilities.ClearCacheDirectory();
@@ -3966,7 +3965,6 @@ public void OutOfProcEvaluationIdsUnique()
         /// Regression test for https://github.com/dotnet/msbuild/issues/3047
         /// </summary>
         [Fact]
-        [SkipOnMono("out-of-proc nodes not working on mono yet")]
         public void MultiProcReentrantProjectWithCallTargetDoesNotFail()
         {
             var a =
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 3f0b73c8dbb..2892ae25f6b 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -6,14 +6,14 @@
 using System.IO;
 using System.Linq;
 using System.Xml;
-using Microsoft.Build.Shared;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Definition;
+using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -417,7 +417,6 @@ public void TestCache()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void WorksCorrectlyWithCurlyBraces()
         {
             string projectBody = ObjectModelHelpers.CleanupFileContents(@"
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index a2c9cd48246..e16bc08dab2 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -2,18 +2,18 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Collections.Generic;
 using System.IO;
 using System.Threading;
+using System.Xml;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
-using Microsoft.Build.BackEnd;
 using Microsoft.Build.Unittest;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -23,7 +23,7 @@ namespace Microsoft.Build.UnitTests.BackEnd
 
     public class BuildRequestEngine_Tests : IDisposable
     {
-        internal class MockRequestBuilder : IRequestBuilder, IBuildComponent
+        internal sealed class MockRequestBuilder : IRequestBuilder, IBuildComponent
         {
             public bool ThrowExceptionOnRequest
             {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
index 9ba42506c30..2090f4c4807 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.Framework;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -136,8 +137,7 @@ public void TestTranslation()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void TestTranslationRemoteHostObjects()
         {
diff --git a/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs b/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
index 527c35aa556..32078810707 100644
--- a/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
@@ -1,6 +1,7 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using System.IO;
 using Microsoft.Build.BackEnd;
@@ -22,31 +23,63 @@ public static IEnumerable<object[]> CacheData
             {
                 var configCache = new ConfigCache();
                 var brq1 = new BuildRequestConfiguration(
-                   1,
-                   new BuildRequestData("path1", new Dictionary<string, string> { ["a1"] = "b1" }, Constants.defaultToolsVersion, new[] { "target1" }, null),
-                   Constants.defaultToolsVersion);
+                    1,
+                    new BuildRequestData("path1", new Dictionary<string, string> { ["a1"] = "b1" }, Constants.defaultToolsVersion, new[] { "target1", "target2" }, null),
+                    Constants.defaultToolsVersion);
 
                 var brq2 = new BuildRequestConfiguration(
                     2,
                     new BuildRequestData("path2", new Dictionary<string, string> { ["a2"] = "b2" }, Constants.defaultToolsVersion, new[] { "target2" }, null),
                     Constants.defaultToolsVersion);
                 var brq3 = new BuildRequestConfiguration(
-                   3,
-                   new BuildRequestData("path3", new Dictionary<string, string> { ["a3"] = "b3" }, Constants.defaultToolsVersion, new[] { "target3" }, null),
-                   Constants.defaultToolsVersion);
+                    3,
+                    new BuildRequestData("path3", new Dictionary<string, string> { ["a3"] = "b3" }, Constants.defaultToolsVersion, new[] { "target3" }, null),
+                    Constants.defaultToolsVersion);
 
                 configCache.AddConfiguration(brq1);
                 configCache.AddConfiguration(brq2);
                 configCache.AddConfiguration(brq3);
 
                 var resultsCache = new ResultsCache();
-                var request1 = new BuildRequest(1, 0, 1, new string[] { "target1" }, null, BuildEventContext.Invalid, null);
+                var request1 = new BuildRequest(1, 0, 1, new string[] { "target1", "target2", "target3" }, null, BuildEventContext.Invalid, null);
                 var request2 = new BuildRequest(2, 0, 2, new string[] { "target2" }, null, BuildEventContext.Invalid, null);
                 var request3 = new BuildRequest(3, 0, 3, new string[] { "target3" }, null, BuildEventContext.Invalid, null);
 
-                resultsCache.AddResult(new BuildResult(request1));
-                resultsCache.AddResult(new BuildResult(request2));
-                resultsCache.AddResult(new BuildResult(request3));
+                var buildResult1 = new BuildResult(request1);
+                var buildResult2 = new BuildResult(request2);
+                var buildResult3 = new BuildResult(request3);
+
+                buildResult1.AddResultsForTarget(
+                    "target1",
+                    new TargetResult(
+                        Array.Empty<ProjectItemInstance.TaskItem>(),
+                        new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)));
+                buildResult1.AddResultsForTarget(
+                    "target2",
+                    new TargetResult(
+                        Array.Empty<ProjectItemInstance.TaskItem>(),
+                        new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)));
+                buildResult1.AddResultsForTarget(
+                    "target3",
+                    new TargetResult(
+                        Array.Empty<ProjectItemInstance.TaskItem>(),
+                        new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)));
+
+                buildResult2.AddResultsForTarget(
+                    "target2",
+                    new TargetResult(
+                        Array.Empty<ProjectItemInstance.TaskItem>(),
+                        new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)));
+
+                buildResult3.AddResultsForTarget(
+                    "target3",
+                    new TargetResult(
+                        Array.Empty<ProjectItemInstance.TaskItem>(),
+                        new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null)));
+
+                resultsCache.AddResult(buildResult1);
+                resultsCache.AddResult(buildResult2);
+                resultsCache.AddResult(buildResult3);
 
                 return new List<object[]>
                 {
@@ -63,7 +96,11 @@ public void OnlySerializeCacheEntryWithSmallestConfigId(object configCache, obje
             try
             {
                 cacheFile = FileUtilities.GetTemporaryFile("MSBuildResultsCache");
-                Assert.Null(CacheSerialization.SerializeCaches((ConfigCache)configCache, (ResultsCache)resultsCache, cacheFile));
+                Assert.Null(CacheSerialization.SerializeCaches(
+                    (ConfigCache)configCache,
+                    (ResultsCache)resultsCache,
+                    cacheFile,
+                    ProjectIsolationMode.True));
 
                 var result = CacheSerialization.DeserializeCaches(cacheFile);
                 Assert.True(result.ConfigCache.HasConfiguration(1));
@@ -75,5 +112,39 @@ public void OnlySerializeCacheEntryWithSmallestConfigId(object configCache, obje
                 File.Delete(cacheFile);
             }
         }
+
+        [Theory]
+        [MemberData(nameof(CacheData))]
+        public void OnlySerializeResultsForSpecifiedTargets(object configCache, object resultsCache)
+        {
+            // Setup:
+            // 1. Create a config with id 1 whose project is built with top-level targets target1
+            // and target2.
+            // 2. Send a build request and collect the BuildResults for targets target1, target2,
+            // and target3.
+            // 3. Ensure the BuildResult for target3 is excluded from output cache serialization
+            // since it's not a top-level target.
+            string cacheFile = null;
+            try
+            {
+                cacheFile = FileUtilities.GetTemporaryFile("MSBuildResultsCache");
+                Assert.Null(CacheSerialization.SerializeCaches(
+                    (ConfigCache)configCache,
+                    (ResultsCache)resultsCache,
+                    cacheFile,
+                    ProjectIsolationMode.MessageUponIsolationViolation));
+
+                var result = CacheSerialization.DeserializeCaches(cacheFile);
+                Assert.True(result.ConfigCache.HasConfiguration(1));
+                BuildResult buildResult = result.ResultsCache.GetResultsForConfiguration(1);
+                Assert.True(buildResult.HasResultsForTarget("target1"));
+                Assert.True(buildResult.HasResultsForTarget("target2"));
+                Assert.False(buildResult.HasResultsForTarget("target3"));
+            }
+            finally
+            {
+                File.Delete(cacheFile);
+            }
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
index 35a76ac4ae7..7ac75e98903 100644
--- a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
 
@@ -145,7 +145,7 @@ private static EventSourceSink AttachForwardingLoggerAndRedirector(BuildEventArg
         /// us to check to see if the forwarding logger is
         /// sending us the events we send in.
         /// </summary>
-        private class TestEventRedirector : IEventRedirector
+        private sealed class TestEventRedirector : IEventRedirector
         {
             #region Data
 
diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index ed39c3676dd..d930cc19092 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -2,13 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Collections.Generic;
+using System.IO;
+using System.Xml;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
-using Microsoft.Build.BackEnd;
-using System.IO;
 using Shouldly;
 using Xunit;
 
diff --git a/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs b/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
index 1b53811036a..bd5fab167bd 100644
--- a/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
+++ b/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
@@ -2,11 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.CodeDom.Compiler;
 using System.IO;
-using System.Text;
 using System.Reflection;
-using System.CodeDom.Compiler;
-
+using System.Text;
 using Microsoft.Build.Utilities;
 
 #nullable disable
diff --git a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
index aea8fff3734..6f5fd31c934 100644
--- a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
+++ b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
@@ -7,6 +7,7 @@
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
 
 #nullable disable
 
@@ -15,23 +16,24 @@ namespace Microsoft.Build.UnitTests
     public class DebugUtils_Tests
     {
         [Fact]
-        public void DumpExceptionToFileShouldWriteInTempPathByDefault()
+        public void DumpExceptionToFileShouldWriteInDebugDumpPath()
         {
-            Directory.GetFiles(Path.GetTempPath(), "MSBuild_*failure.txt").ShouldBeEmpty();
+            var exceptionFilesBefore = Directory.GetFiles(ExceptionHandling.DebugDumpPath, "MSBuild_*failure.txt");
 
             string[] exceptionFiles = null;
 
             try
             {
                 ExceptionHandling.DumpExceptionToFile(new Exception("hello world"));
-                exceptionFiles = Directory.GetFiles(FileUtilities.TempFileDirectory, "MSBuild_*failure.txt");
+                exceptionFiles = Directory.GetFiles(ExceptionHandling.DebugDumpPath, "MSBuild_*failure.txt");
             }
             finally
             {
+                exceptionFilesBefore.ShouldNotBeNull();
                 exceptionFiles.ShouldNotBeNull();
-                exceptionFiles.ShouldHaveSingleItem();
+                (exceptionFiles.Length - exceptionFilesBefore.Length).ShouldBe(1);
 
-                var exceptionFile = exceptionFiles.First();
+                var exceptionFile = exceptionFiles.Except(exceptionFilesBefore).Single();
                 File.ReadAllText(exceptionFile).ShouldContain("hello world");
                 File.Delete(exceptionFile);
             }
diff --git a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
index 429c8b56084..62f2cef2033 100644
--- a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
 
diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 379f27a3f1c..5aca8898ee3 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -3,12 +3,11 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 using Xunit;
+using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 
 #nullable disable
 
@@ -330,7 +329,7 @@ private static void VerifyRegisteredHandlers(BuildEventArgs buildEventToRaise, R
         /// Generic class derived from BuildEventArgs which is used to test the case
         /// where the event is not a well known event, or a custom event
         /// </summary>
-        internal class GenericBuildEventArgs : BuildEventArgs
+        internal sealed class GenericBuildEventArgs : BuildEventArgs
         {
             /// <summary>
             /// Default constructor
@@ -345,7 +344,7 @@ internal GenericBuildEventArgs()
         /// Generic class derived from BuildStatusEvent which is used to test the case
         /// where a status event is raised but it is not a well known status event (build started ...)
         /// </summary>
-        internal class GenericBuildStatusEventArgs : BuildStatusEventArgs
+        internal sealed class GenericBuildStatusEventArgs : BuildStatusEventArgs
         {
             /// <summary>
             /// Default constructor
@@ -360,7 +359,7 @@ internal GenericBuildStatusEventArgs()
         /// Create a test class which will register to the event source and have event handlers
         /// which can act normally or throw exceptions.
         /// </summary>
-        internal class EventHandlerHelper
+        internal sealed class EventHandlerHelper
         {
             #region Data
             /// <summary>
@@ -693,7 +692,7 @@ private void Source_AnyEventRaised(object sender, BuildEventArgs e)
         /// by not having to instantiate new objects everywhere and
         /// all the fields are set in one place which makes it more maintainable
         /// </summary>
-        internal class RaiseEventHelper
+        internal sealed class RaiseEventHelper
         {
             #region Data
             /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
index 51748e79ab0..88a88252485 100644
--- a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.UnitTests;
-using Shouldly;
 using System.Linq;
 using System.Reflection;
+using Microsoft.Build.UnitTests;
+using Shouldly;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/BackEnd/IntegrationTests.cs b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
index b2934bab86f..e1b7ce20040 100644
--- a/src/Build.UnitTests/BackEnd/IntegrationTests.cs
+++ b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
@@ -5,7 +5,7 @@
 
 namespace Microsoft.Build.Unittest.BackEnd
 {
-    internal class IntegrationTests
+    internal sealed class IntegrationTests
     {
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index 25e2ed70e01..9c1ef800dc6 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -6,7 +6,6 @@
 using System.IO;
 using System.Linq;
 using System.Xml;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
@@ -16,9 +15,9 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Shouldly;
+using Xunit;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
-using Xunit;
 
 #nullable disable
 
@@ -3255,7 +3254,6 @@ public void IncludeCheckOnMetadata2()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void IncludeCheckOnMetadata_3()
         {
             MockLogger logger = new MockLogger();
diff --git a/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs b/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
index a33becfa758..3b7b1987f96 100644
--- a/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
@@ -15,19 +15,19 @@ public class KnownTelemetry_Tests
     [Fact]
     public void BuildTelemetryCanBeSetToNull()
     {
-        KnownTelemetry.BuildTelemetry = new BuildTelemetry();
-        KnownTelemetry.BuildTelemetry = null;
+        KnownTelemetry.PartialBuildTelemetry = new BuildTelemetry();
+        KnownTelemetry.PartialBuildTelemetry = null;
 
-        KnownTelemetry.BuildTelemetry.ShouldBeNull();
+        KnownTelemetry.PartialBuildTelemetry.ShouldBeNull();
     }
 
     [Fact]
     public void BuildTelemetryCanBeSet()
     {
         BuildTelemetry buildTelemetry = new BuildTelemetry();
-        KnownTelemetry.BuildTelemetry = buildTelemetry;
+        KnownTelemetry.PartialBuildTelemetry = buildTelemetry;
 
-        KnownTelemetry.BuildTelemetry.ShouldBeSameAs(buildTelemetry);
+        KnownTelemetry.PartialBuildTelemetry.ShouldBeSameAs(buildTelemetry);
     }
 
     [Fact]
diff --git a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
index 4d56352d241..e0f6a6ff618 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 504cbb3747b..078aae2bb15 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -3,19 +3,19 @@
 
 using System;
 using System.Collections;
-using Microsoft.Build.Framework;
-using Microsoft.Build.BackEnd.Logging;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Logging;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Execution;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.BackEnd;
-using System.Threading;
-using System.Reflection;
-using System.Collections.Generic;
-using System.Linq;
 using Shouldly;
 using Xunit;
 
@@ -1501,7 +1501,7 @@ public void Shutdown()
         /// <summary>
         ///  Create a non logging packet to test the packet handling code
         /// </summary>
-        internal class NonLoggingPacket : INodePacket
+        internal sealed class NonLoggingPacket : INodePacket
         {
             #region Members
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 5942f8ab8e4..5cd20e9d57a 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -2,24 +2,23 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-using System.IO;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Construction;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using Microsoft.Build.Execution;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using System.Collections;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
 using System.Xml;
-
-using MockHost = Microsoft.Build.UnitTests.BackEnd.MockHost;
-using Xunit;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Shouldly;
+using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using MockHost = Microsoft.Build.UnitTests.BackEnd.MockHost;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -1021,7 +1020,6 @@ public void LogBuildStarted()
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/437")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void LogBuildStartedCriticalOnly()
         {
             ProcessBuildEventHelper service =
@@ -1783,7 +1781,7 @@ private void LogandVerifyBuildEvent(BuildEventArgs expectedBuildEvent, ProcessBu
         /// we can test most of the logging methods without relying on the
         /// exact implementation of process logging events.
         /// </summary>
-        internal class ProcessBuildEventHelper : LoggingService
+        internal sealed class ProcessBuildEventHelper : LoggingService
         {
             #region Data
             /// <summary>
@@ -1797,7 +1795,7 @@ internal class ProcessBuildEventHelper : LoggingService
             /// Create a constructor which calls the base class constructor
             /// </summary>
             /// <param name="loggerMode">Is the logging service supposed to be Synchronous or Asynchronous</param>
-            protected ProcessBuildEventHelper(LoggerMode loggerMode, int nodeId, IBuildComponentHost componentHost)
+            private ProcessBuildEventHelper(LoggerMode loggerMode, int nodeId, IBuildComponentHost componentHost)
                 : base(loggerMode, nodeId)
             {
                 if (componentHost == null)
@@ -1875,7 +1873,7 @@ internal void ResetProcessedBuildEvent()
             #endregion
         }
 
-        private class EventArgsEqualityComparer<T> : IEqualityComparer<T> where T : BuildEventArgs
+        private sealed class EventArgsEqualityComparer<T> : IEqualityComparer<T> where T : BuildEventArgs
         {
             public bool Equals(T x, T y)
             {
diff --git a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
index 2ca5c9a96c4..becd57ad8dc 100644
--- a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
@@ -1285,7 +1285,7 @@ public void ModifiedProperty()
         }
     }
 
-    internal class LookupHelpers
+    internal sealed class LookupHelpers
     {
         internal static Lookup CreateEmptyLookup()
         {
diff --git a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
index a948c97234a..4eb2b6a1307 100644
--- a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
@@ -1286,7 +1286,6 @@ public void StopOnFirstFailureandBuildInParallelSingleNode()
         /// Verify stopOnFirstFailure with BuildInParallel override message are correctly logged when there are multiple nodes
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void StopOnFirstFailureandBuildInParallelMultipleNode()
         {
             string project1 = ObjectModelHelpers.CreateTempFileOnDisk(@"
diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index caae65aa14d..4b8f3b07286 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using System;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Engine.UnitTests.BackEnd;
 using Microsoft.Build.Evaluation;
@@ -17,7 +17,7 @@ namespace Microsoft.Build.UnitTests.BackEnd
     /// <summary>
     /// Mock host which is used during tests which need a host object
     /// </summary>
-    internal class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
+    internal sealed class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
     {
         /// <summary>
         /// Configuration cache
@@ -66,24 +66,47 @@ internal class MockHost : MockLoggingService, IBuildComponentHost, IBuildCompone
         #endregion;
 
         /// <summary>
-        /// Constructor
+        /// Initializes a new instance of the <see cref="MockHost"/> class.
         /// </summary>
-        public MockHost()
-            : this(new BuildParameters())
+        /// <param name="overrideConfigCache">The override config cache.</param>
+        /// <param name="overrideResultsCache">The override results cache.</param>
+        public MockHost(ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)
+            : this(new BuildParameters(), overrideConfigCache, overrideResultsCache)
         {
         }
 
         /// <summary>
-        /// Constructor
+        /// Initializes a new instance of the <see cref="MockHost"/> class.
         /// </summary>
-        public MockHost(BuildParameters buildParameters)
+        /// <param name="buildParameters">The mock host's build parameters.</param>
+        /// <param name="overrideConfigCache">The override config cache.</param>
+        /// <param name="overrideResultsCache">The override results cache.</param>
+        public MockHost(BuildParameters buildParameters, ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)
         {
             _buildParameters = buildParameters;
 
             _buildParameters.ProjectRootElementCache = new ProjectRootElementCache(false);
 
-            _configCache = new ConfigCache();
-            ((IBuildComponent)_configCache).InitializeComponent(this);
+            if (overrideConfigCache != null && overrideResultsCache != null)
+            {
+                _configCache = new ConfigCacheWithOverride(overrideConfigCache);
+                _resultsCache = new ResultsCacheWithOverride(overrideResultsCache);
+            }
+            else if (overrideConfigCache == null && overrideResultsCache == null)
+            {
+                _configCache = new ConfigCache();
+                _resultsCache = new ResultsCache();
+            }
+            else if (overrideConfigCache == null)
+            {
+                throw new ArgumentNullException($"Attempted to create an override cache with a null {nameof(overrideConfigCache)}.");
+            }
+            else
+            {
+                throw new ArgumentNullException($"Attempted to create an override cache with a null {nameof(overrideResultsCache)}.");
+            }
+
+            _configCache.InitializeComponent(this);
 
             // We are a logging service
             _loggingService = this;
@@ -93,10 +116,9 @@ public MockHost(BuildParameters buildParameters)
             _requestEngine = new BuildRequestEngine();
             ((IBuildComponent)_requestEngine).InitializeComponent(this);
 
-            _resultsCache = new ResultsCache();
-            ((IBuildComponent)_resultsCache).InitializeComponent(this);
+            _resultsCache.InitializeComponent(this);
 
-            _requestBuilder = new Microsoft.Build.UnitTests.BackEnd.BuildRequestEngine_Tests.MockRequestBuilder();
+            _requestBuilder = new BuildRequestEngine_Tests.MockRequestBuilder();
             ((IBuildComponent)_requestBuilder).InitializeComponent(this);
 
             _targetBuilder = new TestTargetBuilder();
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 63872aacec7..b3ceffe4bd5 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -4,12 +4,11 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
-
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
diff --git a/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs b/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
index 26c55e26571..8961d45c800 100644
--- a/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
+++ b/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
-    internal class MockRemoteHostObject : ITaskHost, ITestRemoteHostObject
+    internal sealed class MockRemoteHostObject : ITaskHost, ITestRemoteHostObject
     {
         private int _state;
 
diff --git a/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs b/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
index 07e98fef1b8..be8b8dc6182 100644
--- a/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
+++ b/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
-    internal class MockRunningObjectTable : IRunningObjectTableWrapper
+    internal sealed class MockRunningObjectTable : IRunningObjectTableWrapper
     {
         private readonly Dictionary<string, object> _dictionary = new Dictionary<string, object>();
 
@@ -35,7 +35,7 @@ public IDisposable Register(string itemName, object obj)
             return new MockRegisterHandle();
         }
 
-        private class MockRegisterHandle : IDisposable
+        private sealed class MockRegisterHandle : IDisposable
         {
             public void Dispose()
             {
diff --git a/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs b/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
index 8d4c69d1e0b..8cea7b26b0c 100644
--- a/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
+++ b/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
@@ -1,18 +1,18 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
-using System;
 
 #nullable disable
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
-    internal class MockSdkResolverService : IBuildComponent, ISdkResolverService
+    internal sealed class MockSdkResolverService : IBuildComponent, ISdkResolverService
     {
         public Action<INodePacket> SendPacket { get; }
 
diff --git a/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs b/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
index c69de1ec4ee..d2241b404ae 100644
--- a/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
+++ b/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
@@ -4,12 +4,11 @@
 using System;
 using System.Collections.Generic;
 using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
-
+using Microsoft.Build.Shared;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
-using System.Threading.Tasks;
 
 #nullable disable
 
@@ -18,7 +17,7 @@ namespace Microsoft.Build.UnitTests.BackEnd
     /// <summary>
     /// The mock task builder.
     /// </summary>
-    internal class MockTaskBuilder : ITaskBuilder, IBuildComponent
+    internal sealed class MockTaskBuilder : ITaskBuilder, IBuildComponent
     {
         /// <summary>
         /// The component host.
diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index 7675567e257..3d29df4b00a 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -20,7 +20,7 @@ public class NodeEndpointInProc_Tests
     {
         private delegate void EndpointOperationDelegate(NodeEndpointInProc endpoint);
 
-        private class MockHost : IBuildComponentHost, INodePacketFactory
+        private sealed class MockHost : IBuildComponentHost, INodePacketFactory
         {
             private DataReceivedContext _dataReceivedContext;
             private AutoResetEvent _dataReceivedEvent;
@@ -122,7 +122,7 @@ public WaitHandle DataReceivedEvent
 
             #endregion
         }
-        private class TestPacket : INodePacket
+        private sealed class TestPacket : INodePacket
         {
             #region INodePacket Members
 
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index 9287c529d6c..13de6f28e6f 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -3,13 +3,13 @@
 
 using System;
 using System.Collections;
+using System.Collections.Generic;
 using System.Linq;
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using System.Collections.Generic;
 using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/NullMetadataTask.cs b/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
index f30a88b9058..1cd4019786c 100644
--- a/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
+++ b/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/OnError_Tests.cs b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
index bdab3015c8c..c82578b6e61 100644
--- a/src/Build.UnitTests/BackEnd/OnError_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
@@ -3,15 +3,15 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Framework;
+using System.Linq;
+using System.Reflection;
+using System.Xml;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
-using System.Xml;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using Xunit;
-using System.Reflection;
+using Microsoft.Build.Framework;
 using Shouldly;
-using System.Linq;
+using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -58,7 +58,6 @@ public void Basic()
         /// Then these items and properties should be visible to the onerror targets.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void FailingTaskStillPublishesOutputs()
         {
             MockLogger l = new MockLogger();
diff --git a/src/Build.UnitTests/BackEnd/ProcessIdTask.cs b/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
index 6dc7565ad85..d59076ff254 100644
--- a/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
+++ b/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
-using System.Diagnostics;
 #nullable disable
 
 namespace Microsoft.Build.UnitTests
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index ae711aeac89..8f436af4e0a 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -3,24 +3,24 @@
 
 using System;
 using System.Collections.Generic;
-using System.Threading;
 using System.IO;
-using Microsoft.Build.Framework;
+using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
-    using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
     using System.Threading.Tasks;
+    using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
     public class RequestBuilder_Tests : IDisposable
     {
@@ -337,7 +337,7 @@ private NodeLoggingContext GetNodeLoggingContext()
         }
     }
 
-    internal class TestTargetBuilder : ITargetBuilder, IBuildComponent
+    internal sealed class TestTargetBuilder : ITargetBuilder, IBuildComponent
     {
         private IBuildComponentHost _host;
         private IResultsCache _cache;
diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 60e08fe2019..7bcca24e739 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 94079fa39f1..4aea24b2a95 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -2,18 +2,18 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Collections.Generic;
 using System.IO;
-using Microsoft.Build.Framework;
+using System.Xml;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Shouldly;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -597,6 +597,22 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             Assert.Equal(4, nextNodeId); // 3 nodes
         }
 
+        [Fact]
+        public void BuildResultNotPlacedInCurrentCacheIfConfigExistsInOverrideCache()
+        {
+            ConfigCache overrideConfigCache = new();
+            ResultsCache overrideResultsCache = new();
+            CreateConfiguration(1, "test.csproj", overrideConfigCache);
+            BuildRequest br1 = CreateBuildRequest(1, 1, new string[] { "A" });
+            CacheBuildResult(br1, "A", BuildResultUtilities.GetSuccessResult(), overrideResultsCache);
+            _host = new MockHost(overrideConfigCache, overrideResultsCache);
+            _scheduler = new Scheduler();
+            _scheduler.InitializeComponent(_host);
+            BuildRequest br2 = CreateBuildRequest(1, 1, new string[] { "B" });
+            _scheduler.RecordResultToCurrentCacheIfConfigNotInOverrideCache(CreateBuildResult(br2, "B", BuildResultUtilities.GetSuccessResult()));
+            Assert.Null(((ResultsCacheWithOverride)_host.GetComponent(BuildComponentType.ResultsCache)).CurrentCache.GetResultsForConfiguration(1));
+        }
+
         /// <summary>
         /// Verify that if we get two requests but one of them is a failure, we only get the failure result back.
         /// </summary>
@@ -706,26 +722,48 @@ public void TestDetailedSummary()
         }
 
         /// <summary>
-        /// Creates a configuration and stores it in the cache.
+        /// Creates a configuration to store in the <see cref="ConfigCache"/>.
         /// </summary>
-        private void CreateConfiguration(int configId, string file)
+        /// <param name="configId">The configuration id.</param>
+        /// <param name="projectFullPath">The project's full path.</param>
+        /// <param name="configCache">The config cache in which to place the configuration. If
+        /// <see cref="langword"="null" />, use the host's config cache.</param>
+        private void CreateConfiguration(int configId, string projectFullPath, ConfigCache configCache = null)
         {
-            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(configId, data, "4.0");
-            config.ProjectInitialTargets = new List<string>();
-            config.ProjectDefaultTargets = new List<string>();
-
-            (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);
+            BuildRequestData data = new(projectFullPath, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
+            BuildRequestConfiguration config = new(configId, data, "4.0") { ProjectInitialTargets = new List<string>(), ProjectDefaultTargets = new List<string>() };
+            if (configCache == null)
+            {
+                (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);
+            }
+            else
+            {
+                configCache.AddConfiguration(config);
+            }
         }
 
         /// <summary>
-        /// Creates and caches a built result.
+        /// Creates and caches a <see cref="BuildResult"/> in the <see cref="ResultsCache"/>.
         /// </summary>
-        private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)
+        /// <param name="request">The build request corresponding to the <see cref="BuildResult"/> to be
+        /// created and cached.</param>
+        /// <param name="target">The target for which there will be a result.</param>
+        /// <param name="workUnitResult">The result of executing the specified target.</param>
+        /// <param name="resultsCache">The results cache to contain the <see cref="BuildResult"/>.
+        /// If <see cref="langword"="null"/>, use the host's results cache.</param>
+        /// <returns>The build result.</returns>
+        private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult, ResultsCache resultsCache = null)
         {
             BuildResult result = CreateBuildResult(request, target, workUnitResult);
-            IResultsCache resultsCache = _host.GetComponent(BuildComponentType.ResultsCache) as IResultsCache;
-            resultsCache.AddResult(result);
+            if (resultsCache == null)
+            {
+                (_host.GetComponent(BuildComponentType.ResultsCache) as IResultsCache).AddResult(result);
+            }
+            else
+            {
+                resultsCache.AddResult(result);
+            }
+
             return result;
         }
 
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index 3a8b2877175..52eb10a8b12 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using Shouldly;
 using System.IO;
 using System.Linq;
 using System.Reflection;
@@ -14,6 +13,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 using Exception = System.Exception;
@@ -401,7 +401,7 @@ public void SdkResolverLoaderHonorsAdditionalResolversFolder()
             }
         }
 
-        private class MockSdkResolverThatDoesNotLoad : SdkResolverBase
+        private sealed class MockSdkResolverThatDoesNotLoad : SdkResolverBase
         {
             public const string ExpectedMessage = "A8BB8B3131D3475D881ACD3AF8D75BD6";
 
@@ -420,7 +420,7 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
             }
         }
 
-        private class MockSdkResolverNoPublicConstructor : SdkResolverBase
+        private sealed class MockSdkResolverNoPublicConstructor : SdkResolverBase
         {
             private MockSdkResolverNoPublicConstructor()
             {
@@ -436,7 +436,7 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
             }
         }
 
-        private class MockSdkResolverWithAssemblyPath : SdkResolverBase
+        private sealed class MockSdkResolverWithAssemblyPath : SdkResolverBase
         {
             public string AssemblyPath;
 
@@ -455,7 +455,7 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
             }
         }
 
-        private class MockSdkResolverLoader : SdkResolverLoader
+        private sealed class MockSdkResolverLoader : SdkResolverLoader
         {
             public Func<string, LoggingContext, ElementLocation, Assembly> LoadResolverAssemblyFunc { get; set; }
 
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 5dbc1c65571..dce922f7c2f 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -1,24 +1,24 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.BackEnd.SdkResolution;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Framework;
-using Microsoft.Build.UnitTests;
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Text.RegularExpressions;
 using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
+using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
 using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 using SdkResultImpl = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
-using Microsoft.Build.Shared;
-using System.Text.RegularExpressions;
 
 #nullable disable
 
@@ -605,7 +605,7 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
             isRunningInVisualStudio.ShouldBeTrue();
         }
 
-        private class MockLoaderStrategy : SdkResolverLoader
+        private sealed class MockLoaderStrategy : SdkResolverLoader
         {
             private List<SdkResolver> _resolvers;
             private List<(string ResolvableSdkPattern, SdkResolver Resolver)> _resolversWithPatterns;
@@ -689,7 +689,7 @@ internal override IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingC
             }
         }
 
-        private class MockResolverReturnsNull : SdkResolver
+        private sealed class MockResolverReturnsNull : SdkResolver
         {
             public override string Name => nameof(MockResolverReturnsNull);
 
@@ -698,7 +698,7 @@ private class MockResolverReturnsNull : SdkResolver
             public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory) => null;
         }
 
-        private class MockSdkResolver1 : SdkResolver
+        private sealed class MockSdkResolver1 : SdkResolver
         {
             public override string Name => nameof(MockSdkResolver1);
 
@@ -717,7 +717,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
-        private class MockSdkResolver2 : SdkResolver
+        private sealed class MockSdkResolver2 : SdkResolver
         {
             public override string Name => nameof(MockSdkResolver2);
 
@@ -736,7 +736,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
-        private class MockSdkResolverWithResolvableSdkPattern1 : SdkResolver
+        private sealed class MockSdkResolverWithResolvableSdkPattern1 : SdkResolver
         {
             public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern1);
 
@@ -755,7 +755,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
-        private class MockSdkResolverWithResolvableSdkPattern2 : SdkResolver
+        private sealed class MockSdkResolverWithResolvableSdkPattern2 : SdkResolver
         {
             public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern2);
 
@@ -774,7 +774,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
-        private class MockSdkResolverWithState : SdkResolver
+        private sealed class MockSdkResolverWithState : SdkResolver
         {
             public const string Expected = "01713226A202458F97D9074168DF2618";
 
@@ -799,7 +799,7 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
             }
         }
 
-        private class MockSdkResolverThrows : SdkResolver
+        private sealed class MockSdkResolverThrows : SdkResolver
         {
             public override string Name => nameof(MockSdkResolverThrows);
             public override int Priority => 0;
diff --git a/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
index 20c76c5c493..6af6e6616b5 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Shouldly;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.Framework;
+using Shouldly;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
index 7a2fedacf27..322c61aa579 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
@@ -1,6 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.IO;
+using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Construction;
@@ -10,11 +15,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Unittest;
 using Shouldly;
-using System;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.IO;
-using System.Linq;
 using Xunit;
 using Xunit.Abstractions;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 802920e0bd4..30eafec7e91 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -2,26 +2,25 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Collections.Generic;
 using System.IO;
 using System.Threading;
-using Microsoft.Build.Framework;
+using System.Threading.Tasks;
+using System.Xml;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Engine.UnitTests.BackEnd;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Shouldly;
-
+using Xunit;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
-using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
-using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.SdkResolution;
-using Microsoft.Build.Engine.UnitTests.BackEnd;
-using Xunit;
+using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
+using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
 
 #nullable disable
 
@@ -1650,7 +1649,7 @@ private BuildResult BuildSimpleProject(string projectBody, string[] targets, int
         /// <summary>
         /// The mock component host object.
         /// </summary>
-        private class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
+        private sealed class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
         {
             #region IBuildComponentHost Members
 
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 4bcb6fcd531..66a27a4e9d6 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -1193,7 +1193,7 @@ private ProjectLoggingContext GetProjectLoggingContext(BuildRequestEntry entry)
         /// <summary>
         /// The mock component host.
         /// </summary>
-        private class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
+        private sealed class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
         {
             #region IBuildComponentHost Members
 
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 716d67fd83b..5c653497011 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -3,12 +3,12 @@
 
 using System;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Unittest;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
+using Microsoft.Build.Unittest;
 using Xunit;
-using Microsoft.Build.Engine.UnitTests.TestComparers;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index 4e870f62a04..42a4d6545d3 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -4,19 +4,19 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Threading;
 using System.Xml;
-using System.Runtime.InteropServices;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
-using Microsoft.Win32.SafeHandles;
-using Xunit;
-using Xunit.Abstractions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Runtime.Versioning;
+using Microsoft.Win32.SafeHandles;
+using Xunit;
+using Xunit.Abstractions;
 
 #nullable disable
 
@@ -495,7 +495,7 @@ public void MultiInputItemsThatCorrelatesWithMultipleTransformOutputItems2()
         private readonly DateTime _yesterday = DateTime.Today.AddTicks(-TimeSpan.TicksPerDay);
         private readonly DateTime _twoDaysAgo = DateTime.Today.AddTicks(-2 * TimeSpan.TicksPerDay);
 
-        private class FileWriteInfo
+        private sealed class FileWriteInfo
         {
             public string Path;
             public DateTime LastWriteTime;
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
index 27775be9a60..8d7f7f5936d 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
@@ -5,8 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
-using Microsoft.Build.Framework;
 using System.Reflection;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
@@ -461,7 +461,7 @@ public void SetPropertyValue(TaskPropertyInfo property, object value)
         /// <summary>
         /// Task factory which wraps a test task, this is used for unit testing
         /// </summary>
-        internal class TaskBuilderTestTaskFactory : ITaskFactory
+        internal sealed class TaskBuilderTestTaskFactory : ITaskFactory
         {
             /// <summary>
             /// Type of the task wrapped by the task factory
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 09a8655bf48..6f66f263d26 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Reflection;
+using System.Threading;
 using System.Threading.Tasks;
 using System.Xml;
 using Microsoft.Build.BackEnd;
@@ -15,14 +16,12 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
-using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
-using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.Threading;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
+using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 
 #nullable disable
 
@@ -527,7 +526,6 @@ public void IllegalFileCharsInItemsOutOfTask()
         /// If an item being output from a task has null metadata, we shouldn't crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void NullMetadataOnOutputItems()
         {
             string customTaskPath = Assembly.GetExecutingAssembly().Location;
@@ -544,7 +542,7 @@ public void NullMetadataOnOutputItems()
   </Target>
 </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
@@ -552,7 +550,6 @@ public void NullMetadataOnOutputItems()
         /// If an item being output from a task has null metadata, we shouldn't crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void NullMetadataOnLegacyOutputItems()
         {
             string customTaskPath = Assembly.GetExecutingAssembly().Location;
@@ -569,7 +566,7 @@ public void NullMetadataOnLegacyOutputItems()
   </Target>
 </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
@@ -642,15 +639,14 @@ public void NullMetadataOnOutputItems_InlineTask()
                       </Target>
                     </Project>";
 
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);
             logger.AssertLogContains("[foo: ]");
         }
 
         /// <summary>
         /// If an item being output from a task has null metadata, we shouldn't crash.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6521")]
-        [Trait("Category", "non-mono-tests")]
+        [Fact(Skip = "This test fails when diagnostic logging is available, as deprecated EscapingUtilities.UnescapeAll method cannot handle null value. This is not relevant to non-deprecated version of this method.")]
         public void NullMetadataOnLegacyOutputItems_InlineTask()
         {
             string projectContents = @"
@@ -686,6 +682,47 @@ public void NullMetadataOnLegacyOutputItems_InlineTask()
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);
             logger.AssertLogContains("[foo: ]");
         }
+
+        /// <summary>
+        /// If an item being output from a task has null metadata, we shouldn't crash.
+        /// </summary>
+        [Fact(Skip = "This test fails when diagnostic logging is available, as deprecated EscapingUtilities.UnescapeAll method cannot handle null value. This is not relevant to non-deprecated version of this method.")]
+        [Trait("Category", "non-mono-tests")]
+        public void NullMetadataOnLegacyOutputItems_InlineTask_Diagnostic()
+        {
+            string projectContents = @"
+                    <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
+                        <UsingTask TaskName=`NullMetadataTask_v4` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildFrameworkToolsPath)\Microsoft.Build.Tasks.v4.0.dll`>
+                            <ParameterGroup>
+                               <OutputItems ParameterType=`Microsoft.Build.Framework.ITaskItem[]` Output=`true` />
+                            </ParameterGroup>
+                            <Task>
+                                <Code>
+                                <![CDATA[
+                                    OutputItems = new ITaskItem[1];
+
+                                    IDictionary<string, string> metadata = new Dictionary<string, string>();
+                                    metadata.Add(`a`, null);
+
+                                    OutputItems[0] = new TaskItem(`foo`, (IDictionary)metadata);
+
+                                    return true;
+                                ]]>
+                                </Code>
+                            </Task>
+                        </UsingTask>
+                      <Target Name=`Build`>
+                        <NullMetadataTask_v4>
+                          <Output TaskParameter=`OutputItems` ItemName=`Outputs` />
+                        </NullMetadataTask_v4>
+
+                        <Message Text=`[%(Outputs.Identity): %(Outputs.a)]` Importance=`High` />
+                      </Target>
+                    </Project>";
+
+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, loggerVerbosity: LoggerVerbosity.Diagnostic);
+            logger.AssertLogContains("[foo: ]");
+        }
 #endif
 
         /// <summary>
@@ -706,7 +743,6 @@ public void ValidateDefiningProjectMetadataOnTaskOutputs()
         /// which didn't support the defining project metadata.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ValidateDefiningProjectMetadataOnTaskOutputs_LegacyItems()
         {
             string customTaskPath = Assembly.GetExecutingAssembly().Location;
@@ -718,7 +754,6 @@ public void ValidateDefiningProjectMetadataOnTaskOutputs_LegacyItems()
         /// Tests that putting the RunInSTA attribute on a task causes it to run in the STA thread.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadRequired()
         {
             TestSTATask(true, false, false);
@@ -728,7 +763,6 @@ public void TestSTAThreadRequired()
         /// Tests an STA task with an exception
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadRequiredWithException()
         {
             TestSTATask(true, false, true);
@@ -738,7 +772,6 @@ public void TestSTAThreadRequiredWithException()
         /// Tests an STA task with failure.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadRequiredWithFailure()
         {
             TestSTATask(true, true, false);
@@ -748,7 +781,6 @@ public void TestSTAThreadRequiredWithFailure()
         /// Tests an MTA task.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadNotRequired()
         {
             TestSTATask(false, false, false);
@@ -758,7 +790,6 @@ public void TestSTAThreadNotRequired()
         /// Tests an MTA task with an exception.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadNotRequiredWithException()
         {
             TestSTATask(false, false, true);
@@ -768,7 +799,6 @@ public void TestSTAThreadNotRequiredWithException()
         /// Tests an MTA task with failure.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSTAThreadNotRequiredWithFailure()
         {
             TestSTATask(false, true, false);
@@ -1145,7 +1175,7 @@ private ProjectInstance CreateTestProject()
         /// <summary>
         /// The mock component host object.
         /// </summary>
-        private class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
+        private sealed class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
         {
             #region IBuildComponentHost Members
 
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 994620b917a..7ca94153d09 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -13,14 +13,14 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Engine.UnitTests.TestComparers;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Xunit;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using Xunit;
-using Microsoft.Build.Engine.UnitTests.TestComparers;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
index 6688e687a44..a3226a7df75 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
@@ -25,7 +25,6 @@ public TaskHostFactory_Tests(ITestOutputHelper testOutputHelper)
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TaskNodesDieAfterBuild()
         {
             using (TestEnvironment env = TestEnvironment.Create())
diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
index 7c0369ec0ae..c85e00e0f9c 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Xunit;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
index ec73cdbc6d9..5c6bf006b2c 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
@@ -3,15 +3,12 @@
 
 using System;
 using System.Collections.Generic;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-
-
-using TaskHostPacketHelpers = Microsoft.Build.UnitTests.BackEnd.TaskHostConfiguration_Tests.TaskHostPacketHelpers;
 using Xunit;
+using TaskHostPacketHelpers = Microsoft.Build.UnitTests.BackEnd.TaskHostConfiguration_Tests.TaskHostPacketHelpers;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index 821e0e2644e..8f4a5d6c1aa 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -2,20 +2,20 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework;
+using System.Collections;
+using System.Collections.Generic;
+using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
-using System.Collections.Generic;
-using Microsoft.Build.Execution;
 using Microsoft.Build.Collections;
-using System.Collections;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using System.Threading.Tasks;
-using Xunit;
 using Shouldly;
+using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -794,7 +794,7 @@ public void ReleaseCoresReturnsImplicitCore()
         /// Create a custom message event to make sure it can get sent correctly
         /// </summary>
         [Serializable]
-        internal class MyCustomMessageEvent : BuildMessageEventArgs
+        internal sealed class MyCustomMessageEvent : BuildMessageEventArgs
         {
             /// <summary>
             /// Some custom data for the custom event.
@@ -831,7 +831,7 @@ internal string CustomMessage
         /// Create a custom build event to test the logging of custom build events against the task host
         /// </summary>
         [Serializable]
-        internal class MyCustomBuildEventArgs : CustomBuildEventArgs
+        internal sealed class MyCustomBuildEventArgs : CustomBuildEventArgs
         {
             /// <summary>
             /// Constructor
@@ -852,7 +852,7 @@ public MyCustomBuildEventArgs(string message) : base(message, "HelpKeyword", "Se
         /// Class which implements a simple custom build error
         /// </summary>
         [Serializable]
-        internal class MyCustomBuildErrorEventArgs : BuildErrorEventArgs
+        internal sealed class MyCustomBuildErrorEventArgs : BuildErrorEventArgs
         {
             /// <summary>
             /// Some custom data for the custom event.
@@ -889,7 +889,7 @@ internal string CustomData
         /// Class which implements a simple custom build warning
         /// </summary>
         [Serializable]
-        internal class MyCustomBuildWarningEventArgs : BuildWarningEventArgs
+        internal sealed class MyCustomBuildWarningEventArgs : BuildWarningEventArgs
         {
             /// <summary>
             /// Custom data for the custom event
@@ -925,7 +925,7 @@ internal string CustomData
         /// <summary>
         /// Create a custom message event to make sure it can get sent correctly
         /// </summary>
-        internal class MyCustomMessageEventNotSerializable : BuildMessageEventArgs
+        internal sealed class MyCustomMessageEventNotSerializable : BuildMessageEventArgs
         {
             /// <summary>
             /// Some custom data for the custom event.
@@ -961,7 +961,7 @@ internal string CustomMessage
         /// <summary>
         /// Custom build event which is not marked serializable. This is used to make sure we warn if we try and log a not serializable type in multiproc.
         /// </summary>
-        internal class MyCustomBuildEventArgsNotSerializable : CustomBuildEventArgs
+        internal sealed class MyCustomBuildEventArgsNotSerializable : CustomBuildEventArgs
         {
             // If binary serialization is not available, then we use a simple serializer which relies on a default constructor.  So to test
             //  what happens for an event that's not serializable, don't include a default constructor.
@@ -983,7 +983,7 @@ public MyCustomBuildEventArgsNotSerializable(string message) : base(message, "He
         /// <summary>
         /// Class which implements a simple custom build error which is not serializable
         /// </summary>
-        internal class MyCustomBuildErrorEventArgsNotSerializable : BuildErrorEventArgs
+        internal sealed class MyCustomBuildErrorEventArgsNotSerializable : BuildErrorEventArgs
         {
             /// <summary>
             /// Custom data for the custom event
@@ -1019,7 +1019,7 @@ internal string CustomData
         /// <summary>
         /// Class which implements a simple custom build warning which is not serializable
         /// </summary>
-        internal class MyCustomBuildWarningEventArgsNotSerializable : BuildWarningEventArgs
+        internal sealed class MyCustomBuildWarningEventArgsNotSerializable : BuildWarningEventArgs
         {
             /// <summary>
             /// Custom data for the custom event
@@ -1055,7 +1055,7 @@ internal string CustomData
         /// <summary>
         /// Custom logger which will be used for testing
         /// </summary>
-        internal class MyCustomLogger : ILogger
+        internal sealed class MyCustomLogger : ILogger
         {
             /// <summary>
             /// Last error event the logger encountered
@@ -1285,7 +1285,7 @@ internal void MyCustomBuildHandler(object s, CustomBuildEventArgs e)
         /// <summary>
         /// Mock this class so that we can determine if build results are being cloned or if the live copies are being returned to the callers of the msbuild callback.
         /// </summary>
-        internal class MockIRequestBuilderCallback : IRequestBuilderCallback, IRequestBuilder
+        internal sealed class MockIRequestBuilderCallback : IRequestBuilderCallback, IRequestBuilder
         {
             /// <summary>
             /// BuildResults to return from the BuildProjects method.
diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index 025477ab3bd..993c4ee1593 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -16,11 +16,11 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -2259,7 +2259,7 @@ internal static Expander<ProjectPropertyInstance, ProjectItemInstance> GetExpand
         /// <summary>
         /// Create a custom class derived from ITaskItem to test input and output parameters work using this item.
         /// </summary>
-        internal class DerivedFromITaskItem : ITaskItem
+        internal sealed class DerivedFromITaskItem : ITaskItem
         {
             /// <summary>
             /// The ItemSpec of the item
diff --git a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
index 8a357f8b621..60f073a0cf2 100644
--- a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
+++ b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
@@ -4,8 +4,8 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Linq;
 using System.IO;
+using System.Linq;
 using System.Text;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index aad07daee2a..10e697437e2 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -8,6 +8,7 @@
 using System.Text;
 
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
@@ -102,7 +103,12 @@ public void TestBinaryLoggerRoundtrip(string projectText)
             parallelFromBuild.Parameters = "NOPERFORMANCESUMMARY";
 
             // build and log into binary logger, mock logger, serial and parallel console loggers
-            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild);
+            // no logging on evaluation
+            using (ProjectCollection collection = new())
+            {
+                Project project = ObjectModelHelpers.CreateInMemoryProject(collection, projectText);
+                project.Build(new ILogger[] { binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild }).ShouldBeTrue();
+            }
 
             var mockLogFromPlayback = new MockLogger();
 
@@ -182,6 +188,55 @@ public void UnusedEnvironmentVariablesDoNotAppearInBinaryLog()
             }
         }
 
+        [Fact]
+        public void AssemblyLoadsDuringTaskRunLogged()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                string contents = $"""
+                    <Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Hello">
+                      <!-- This simple inline task displays "Hello, world!" -->
+                      <UsingTask
+                        TaskName="HelloWorld"
+                        TaskFactory="RoslynCodeTaskFactory"
+                        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
+                        <ParameterGroup />
+                        <Task> 
+                          <Using Namespace="System"/>
+                          <Using Namespace="System.IO"/>
+                          <Using Namespace="System.Reflection"/>
+                          <Code Type="Fragment" Language="cs">
+                    <![CDATA[
+                        // Display "Hello, world!"
+                        Log.LogMessage("Hello, world!");
+                    	//load assembly
+                    	var assemblies = AppDomain.CurrentDomain.GetAssemblies();
+                    	var diagAssembly = Assembly.LoadFrom(Path.Combine(Path.GetDirectoryName(assemblies[0].Location), "System.Diagnostics.Debug.dll"));
+                    	Log.LogMessage("Loaded: " + diagAssembly);
+                    ]]>
+                          </Code>
+                        </Task>
+                      </UsingTask>
+
+                    <Target Name="Hello">
+                      <HelloWorld />
+                    </Target>
+                    </Project>
+                    """;
+                TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
+                TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
+                BinaryLogger logger = new();
+                logger.Parameters = _logFile;
+                env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
+                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -nr:False -bl:{logger.Parameters}", out bool success);
+                success.ShouldBeTrue();
+                RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
+                success.ShouldBeTrue();
+                string text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile.log"));
+                text.ShouldContain("Assembly loaded during TaskRun (InlineCode.HelloWorld): System.Diagnostics.Debug");
+            }
+        }
+
         [Fact]
         public void BinaryLoggerShouldEmbedFilesViaTaskOutput()
         {
@@ -210,7 +265,7 @@ public void BinaryLoggerShouldEmbedFilesViaTaskOutput()
             zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith("testtaskoutputfile.txt"));
         }
 
-        [Fact]
+        [RequiresSymbolicLinksFact]
         public void BinaryLoggerShouldEmbedSymlinkFilesViaTaskOutput()
         {
             string testFileName = "foobar.txt";
diff --git a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
index 1394e76a11b..d987efa0fab 100644
--- a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
+++ b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
@@ -7,6 +7,7 @@
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -62,9 +63,7 @@ public void FindBuildEnvironmentByEnvironmentVariable()
         /// If MSBUILD_EXE_PATH is explicitly set, we should detect it as a VisualStudio instance even in older scenarios
         /// (for example when the install path is under 15.0).
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void FindVisualStudioEnvironmentByEnvironmentVariable()
         {
             using (var env = new EmptyVSEnviroment())
@@ -90,9 +89,7 @@ public void FindVisualStudioEnvironmentByEnvironmentVariable()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void FindBuildEnvironmentFromCommandLineVisualStudio()
         {
             using (var env = new EmptyVSEnviroment())
@@ -125,9 +122,7 @@ public void FindBuildEnvironmentFromCommandLineStandalone()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void FindBuildEnvironmentFromRunningProcessVisualStudio()
         {
             using (var env = new EmptyVSEnviroment())
@@ -196,9 +191,7 @@ public void FindBuildEnvironmentFromAppContextDirectory()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void FindBuildEnvironmentFromVisualStudioRoot()
         {
             using (var env = new EmptyVSEnviroment())
@@ -215,11 +208,9 @@ public void FindBuildEnvironmentFromVisualStudioRoot()
             }
         }
 
-        [Theory]
+        [WindowsFullFrameworkOnlyTheory(additionalMessage: "No Visual Studio installed for .NET.")]
         [InlineData(MSBuildConstants.CurrentVisualStudioVersion, true)]
         [InlineData("15.0", false)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentDetectsVisualStudioByEnvironment(string visualStudioVersion, bool shouldBeValid)
         {
             using (var env = new EmptyVSEnviroment())
@@ -242,9 +233,7 @@ public void BuildEnvironmentDetectsVisualStudioByEnvironment(string visualStudio
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentDetectsVisualStudioByMSBuildProcess()
         {
             using (var env = new EmptyVSEnviroment())
@@ -257,9 +246,7 @@ public void BuildEnvironmentDetectsVisualStudioByMSBuildProcess()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentDetectsVisualStudioByMSBuildProcessAmd64()
         {
             using (var env = new EmptyVSEnviroment())
@@ -272,9 +259,7 @@ public void BuildEnvironmentDetectsVisualStudioByMSBuildProcessAmd64()
             }
         }
 
-        [Theory]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyTheory(additionalMessage: "No Visual Studio installed for .NET.")]
         [InlineData("17.0", true)]
         [InlineData("17.3", true)]
         [InlineData("16.0", false)]
@@ -325,9 +310,7 @@ public void BuildEnvironmentDetectsRunningTests()
             BuildEnvironmentHelper.Instance.RunningInVisualStudio.ShouldBeFalse();
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentDetectsVisualStudioByProcessName()
         {
             using (var env = new EmptyVSEnviroment())
@@ -340,9 +323,7 @@ public void BuildEnvironmentDetectsVisualStudioByProcessName()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentDetectsVisualStudioByBlendProcess()
         {
             using (var env = new EmptyVSEnviroment())
@@ -355,9 +336,7 @@ public void BuildEnvironmentDetectsVisualStudioByBlendProcess()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentFindsAmd64()
         {
             using (var env = new EmptyVSEnviroment())
@@ -371,9 +350,8 @@ public void BuildEnvironmentFindsAmd64()
             }
         }
 
-        [Fact]
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
         {
             using (var env = new EmptyStandaloneEnviroment(MSBuildExeName, writeFakeFiles: true, includeAmd64Folder: true))
@@ -389,9 +367,8 @@ public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
-        [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64NoVS()
         {
             using (var env = new EmptyStandaloneEnviroment(MSBuildExeName, writeFakeFiles: true, includeAmd64Folder: true))
@@ -405,10 +382,8 @@ public void BuildEnvironmentFindsAmd64NoVS()
             }
         }
 
-        [Fact]
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentFindsAmd64RunningInAmd64()
         {
             using (var env = new EmptyVSEnviroment())
@@ -438,9 +413,7 @@ public void BuildEnvironmentNoneWhenNotAvailable()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentVSFromMSBuildAssembly()
         {
             using (var env = new EmptyVSEnviroment())
@@ -457,9 +430,7 @@ public void BuildEnvironmentVSFromMSBuildAssembly()
             }
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio installed for .NET.")]
         public void BuildEnvironmentVSFromMSBuildAssemblyAmd64()
         {
             using (var env = new EmptyVSEnviroment())
@@ -481,7 +452,7 @@ private static string ReturnNull()
             return null;
         }
 
-        private class EmptyVSEnviroment : EmptyStandaloneEnviroment
+        private sealed class EmptyVSEnviroment : EmptyStandaloneEnviroment
         {
             public string DevEnvPath { get; }
 
diff --git a/src/Build.UnitTests/BuildResultUtilities.cs b/src/Build.UnitTests/BuildResultUtilities.cs
index e587fbef48f..8ed38e7014f 100644
--- a/src/Build.UnitTests/BuildResultUtilities.cs
+++ b/src/Build.UnitTests/BuildResultUtilities.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Unittest
 {
-    internal class BuildResultUtilities
+    internal sealed class BuildResultUtilities
     {
         public static TargetResult GetEmptyFailingTargetResult()
         {
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index ebb131da07d..2fcc3003a50 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Xunit;
-using Shouldly;
-using Microsoft.Build.Framework;
+using System;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Utilities;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+using Xunit;
 using Xunit.Abstractions;
-using System;
-using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
index f7b81000d87..1f167556b98 100644
--- a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
+++ b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
@@ -3,9 +3,9 @@
 
 using System;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs b/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
index 75d3029570a..eabc4ee8b91 100644
--- a/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
+++ b/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
-using System;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/Collections/OMcollections_tests.cs b/src/Build.UnitTests/Collections/OMcollections_tests.cs
index dbc03d5df13..354a6bc9464 100644
--- a/src/Build.UnitTests/Collections/OMcollections_tests.cs
+++ b/src/Build.UnitTests/Collections/OMcollections_tests.cs
@@ -1,20 +1,20 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Collections.Generic;
-using Microsoft.Build.Collections;
 using System;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Framework;
 using System.Collections;
+using System.Collections.Generic;
 using System.Linq;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.BackEnd;
 using Shouldly;
-using ObjectModel = System.Collections.ObjectModel;
 using Xunit;
-using Microsoft.Build.BackEnd;
+using ObjectModel = System.Collections.ObjectModel;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs b/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
index 1612c82f6a5..7ccdbeeb57b 100644
--- a/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
+++ b/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
-using Microsoft.Build.BackEnd.Logging;
 using Shouldly;
 using Xunit;
 
@@ -32,7 +32,7 @@ public class ConfigureableForwardingLogger_Tests
         private readonly ProjectFinishedEventArgs _projectFinished = new ProjectFinishedEventArgs("message", "help", "ProjectFile", true);
         private readonly ExternalProjectStartedEventArgs _externalStartedEvent = new ExternalProjectStartedEventArgs("message", "help", "senderName", "projectFile", "targetNames");
 
-        internal class TestForwardingLogger : ConfigurableForwardingLogger
+        internal sealed class TestForwardingLogger : ConfigurableForwardingLogger
         {
             internal TestForwardingLogger()
             {
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 622e8c81c88..70ed081e9fb 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -6,21 +6,20 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Text.RegularExpressions;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
-
-
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Microsoft.Build.Execution;
-using System.Runtime.Versioning;
+using Xunit.NetCore.Extensions;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -45,7 +44,7 @@ public class ConsoleLoggerTest
             </Target>
          </Project>";
 
-        private class SimulatedConsole
+        private sealed class SimulatedConsole
         {
             private StringBuilder _simulatedConsole;
 
@@ -119,7 +118,7 @@ internal MyCustomBuildEventArgs(string message)
             }
         }
 
-        private class MyCustomBuildEventArgs2 : CustomBuildEventArgs { }
+        private sealed class MyCustomBuildEventArgs2 : CustomBuildEventArgs { }
 
         private readonly ITestOutputHelper _output;
 
@@ -176,7 +175,6 @@ public void TestEmptyProjectNameForTargetStarted()
         /// started event but there was no target printed out.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestTargetAfterProjectStarted()
         {
             SimulatedConsole sc = new SimulatedConsole();
@@ -321,9 +319,7 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
             output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2 TargetFramework=netcoreapp2.1]");
         }
 
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6518")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Minimal path validation in Core allows expanding path containing quoted slashes.")]
-        [SkipOnMono("Minimal path validation in Mono allows expanding path containing quoted slashes.")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Minimal path validation in Core allows expanding path containing quoted slashes.", Skip = "https://github.com/dotnet/msbuild/issues/6518")]
         public void TestItemsWithUnexpandableMetadata()
         {
             SimulatedConsole sc = new SimulatedConsole();
@@ -349,7 +345,6 @@ public void TestItemsWithUnexpandableMetadata()
         /// Verify that on minimal verbosity the console logger does not log the target names.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestNoTargetNameOnMinimal()
         {
             SimulatedConsole sc = new SimulatedConsole();
@@ -367,7 +362,6 @@ public void TestNoTargetNameOnMinimal()
         /// Make sure if a target has no messages logged that its started and finished events show up on detailed but not normal.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptyTargetsOnDetailedButNotNormal()
         {
             SimulatedConsole sc = new SimulatedConsole();
@@ -412,7 +406,6 @@ public void EmptyTargetsOnDetailedButNotNormal()
         /// Test a number of cases where difference values from showcommandline are used with normal verbosity
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ShowCommandLineWithNormalVerbosity()
         {
             string command = "echo a";
diff --git a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
index 2a5130e7bde..7a33e0d5343 100644
--- a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
@@ -2,16 +2,16 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.IO;
+using System.Reflection;
+using System.Xml;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Construction;
 using Microsoft.Build.UnitTests.BackEnd;
-using System.Xml;
-using System.IO;
-using System.Reflection;
 using Xunit;
-using Microsoft.Build.BackEnd;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
index aab1c6b3273..bc8888a0359 100644
--- a/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -1,11 +1,11 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Linq;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Shouldly;
-using System;
-using System.Linq;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index a8f04046ca2..84c24cb12b0 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -1,14 +1,14 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Construction;
-using Microsoft.Build.Exceptions;
-using Microsoft.Build.Shared;
-using Shouldly;
 using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Shared;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -49,7 +49,6 @@ public void BasicParseFirstProjectLine()
         /// extension of vcproj is seen as invalid.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void ParseFirstProjectLine_VC()
@@ -498,7 +497,6 @@ public void TestVSAndSolutionVersionParsing()
         /// Test ParseEtpProject function.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void ParseNestedEtpProjectMultipleLevel()
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 4e20b2d9617..2306910aabc 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -6,29 +6,25 @@
 using System.IO;
 using System.Linq;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using LoggingService = Microsoft.Build.BackEnd.Logging.LoggingService;
+using Microsoft.Build.UnitTests.Shared;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+using FrameworkLocationHelper = Microsoft.Build.Shared.FrameworkLocationHelper;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
+using InternalUtilities = Microsoft.Build.Internal.Utilities;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using LoggerMode = Microsoft.Build.BackEnd.Logging.LoggerMode;
-
+using LoggingService = Microsoft.Build.BackEnd.Logging.LoggingService;
 using Project = Microsoft.Build.Evaluation.Project;
 using ProjectCollection = Microsoft.Build.Evaluation.ProjectCollection;
+using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
 using Toolset = Microsoft.Build.Evaluation.Toolset;
-
-using InternalUtilities = Microsoft.Build.Internal.Utilities;
-
 using XMakeElements = Microsoft.Build.Shared.XMakeElements;
-using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using FrameworkLocationHelper = Microsoft.Build.Shared.FrameworkLocationHelper;
-using Xunit;
-using Xunit.Abstractions;
-using Shouldly;
-using Microsoft.Build.UnitTests.Shared;
 
 #nullable disable
 
@@ -336,7 +332,6 @@ public void AddNewErrorWarningMessageElement()
         /// on the Solution File Format Version.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void EmitToolsVersionAttributeToInMemoryProject9()
@@ -372,7 +367,6 @@ public void EmitToolsVersionAttributeToInMemoryProject9()
         /// on the Solution File Format Version.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void EmitToolsVersionAttributeToInMemoryProject10()
@@ -485,7 +479,6 @@ public void SubToolsetSetBySolutionVersion()
         /// Test to make sure that even if the solution version corresponds to an existing sub-toolset version,
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SolutionBasedSubToolsetVersionOverriddenByEnvironment()
         {
             Environment.SetEnvironmentVariable("VisualStudioVersion", "ABC");
@@ -1208,7 +1201,6 @@ public void TestAddPropertyGroupForSolutionConfigurationBuildProjectInSolutionNo
         /// The repro below has one of each case. WebProjects can't build so they are set as SkipNonexistentProjects='Build'
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void Regress751742_SkipNonexistentProjects()
@@ -1611,7 +1603,6 @@ public void TestConfigurationPlatformDefaults2()
         /// Tests the algorithm for choosing default Venus configuration values for solutions
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void TestVenusConfigurationDefaults()
@@ -1642,7 +1633,6 @@ public void TestVenusConfigurationDefaults()
         /// Tests that the correct value for TargetFrameworkVersion gets set when creating Venus solutions
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void VenusSolutionDefaultTargetFrameworkVersion()
@@ -1682,7 +1672,6 @@ public void VenusSolutionDefaultTargetFrameworkVersion()
         /// Tests the algorithm for choosing target framework paths for ResolveAssemblyReferences for Venus
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void TestTargetFrameworkPaths0()
@@ -1708,7 +1697,6 @@ public void TestTargetFrameworkPaths0()
         /// Tests the algorithm for choosing target framework paths for ResolveAssemblyReferences for Venus
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void TestTargetFrameworkPaths1()
@@ -1735,7 +1723,6 @@ public void TestTargetFrameworkPaths1()
         /// Tests the algorithm for choosing target framework paths for ResolveAssemblyReferences for Venus
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void TestTargetFrameworkPaths2()
@@ -1935,7 +1922,6 @@ public void SolutionGeneratorCanEmitSolutions()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void TestSkipInvalidConfigurationsCase()
         {
             string tmpFileName = FileUtilities.GetTemporaryFileName();
diff --git a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
index db3134ae8eb..2fc8f9950a5 100644
--- a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
-using System.Xml;
 using System.IO;
+using System.Xml;
+using Microsoft.Build.Evaluation;
 using Xunit;
 
 #nullable disable
@@ -12,7 +12,7 @@ namespace Microsoft.Build.UnitTests.Construction
 {
     public class XmlReaderWithoutLocation_Tests
     {
-        private class XmlReaderNoIXmlLineInfo : XmlReader
+        private sealed class XmlReaderNoIXmlLineInfo : XmlReader
         {
             private XmlReader _wrappedReader;
 
diff --git a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
index d155a128239..798c1294447 100644
--- a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
@@ -2,19 +2,18 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Linq;
 using System.Reflection;
-using System.Collections.Generic;
 using System.Xml;
-using Microsoft.Build.Execution;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
index 86311e423a3..fa09e0d0cd5 100644
--- a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
@@ -2,14 +2,14 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Linq;
-using System.Collections.Generic;
 using System.Xml;
-using Microsoft.Build.Evaluation;
-using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Xunit;
+using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
index 507514617ea..c08c92c9134 100644
--- a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
+++ b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
@@ -3,13 +3,13 @@
 
 using System;
 using System.Collections.Generic;
-using System.Xml;
 using System.IO;
+using System.Xml;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 using Shouldly;
-using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using Xunit;
+using InternalUtilities = Microsoft.Build.Internal.Utilities;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
index 2e9ac12c15f..b33fd7a00ce 100644
--- a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
@@ -6,18 +6,18 @@
 using System.IO;
 using System.Text.RegularExpressions;
 using System.Xml;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Collections;
-
-using LoggingService = Microsoft.Build.BackEnd.Logging.LoggingService;
-using LoggerMode = Microsoft.Build.BackEnd.Logging.LoggerMode;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using InternalUtilities = Microsoft.Build.Internal.Utilities;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
+using InternalUtilities = Microsoft.Build.Internal.Utilities;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using LoggerMode = Microsoft.Build.BackEnd.Logging.LoggerMode;
+using LoggingService = Microsoft.Build.BackEnd.Logging.LoggingService;
 
 #nullable disable
 
@@ -87,8 +87,7 @@ public void OverrideTaskPathIsRelative()
             mockLogger.AssertLogContains(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("OverrideTasksFileFailure", rootedPathMessage));
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void OverrideTaskPathHasInvalidChars()
         {
             ProjectCollection e = new ProjectCollection();
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
index bf0eed44d46..66d03679314 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Helper class to simulate application configuration read
     /// </summary>
-    internal class ToolsetConfigurationReaderTestHelper
+    internal sealed class ToolsetConfigurationReaderTestHelper
     {
         private static ExeConfigurationFileMap s_configFile;
         private static string s_testFolderFullPath = null;
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
index 4d3962dfa70..4b1c8457c93 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
@@ -1,16 +1,15 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using System.Configuration;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
-
-using ToolsetConfigurationSection = Microsoft.Build.Evaluation.ToolsetConfigurationSection;
 using Xunit;
-using System;
-using System.Collections.Generic;
+using ToolsetConfigurationSection = Microsoft.Build.Evaluation.ToolsetConfigurationSection;
 
 #nullable disable
 
@@ -198,7 +197,6 @@ public void MSBuildToolsetsTest_BasicWithOtherConfigEntries()
         /// name attribute is missing from toolset element 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ToolsVersionTest_NameNotSpecified()
         {
             Assert.Throws<ConfigurationErrorsException>(() =>
@@ -255,7 +253,6 @@ public void ToolsVersionTest_MultipleElementsWithSameName()
         /// empty toolset element 
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ToolsVersionTest_EmptyElement()
         {
             Assert.Throws<ConfigurationErrorsException>(() =>
@@ -323,7 +320,6 @@ public void ToolsVersionTest_SingleElement()
         ///  name attribute is missing
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyTest_NameNotSpecified()
         {
             Assert.Throws<ConfigurationErrorsException>(() =>
@@ -400,7 +396,6 @@ public void PropertyTest_MultipleElementsWithSameName()
         ///  property element is an empty element
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyTest_EmptyElement()
         {
             Assert.Throws<ConfigurationErrorsException>(() =>
diff --git a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
index f37d6c7329c..8a4dde6410c 100644
--- a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
@@ -20,6 +20,7 @@
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -30,7 +31,6 @@ namespace Microsoft.Build.UnitTests.Definition
     /// <summary>
     /// Unit tests for ToolsetReader class and its derived classes
     /// </summary>
-    [PlatformSpecific(TestPlatforms.Windows)]
     public class ToolsetReaderTests : IDisposable
     {
         // The registry key that is passed as the baseKey parameter to the ToolsetRegistryReader class
@@ -92,14 +92,9 @@ private void DeleteTestRegistryKey()
         /// Test to make sure machine.config file has the section registered
         /// and we are picking it up from there.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "The machine.config is only present on Windows.")]
         public void GetToolsetDataFromConfiguration_SectionNotRegisteredInConfigFile()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "The machine.config is only present on Windows"
-            }
-
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
                  <configuration>
                    <configSections>
@@ -131,7 +126,7 @@ public void GetToolsetDataFromConfiguration_SectionNotRegisteredInConfigFile()
         /// <summary>
         /// Tests that the data is correctly populated using function GetToolsetDataFromConfiguration
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_Basic()
         {
             string v2Folder = NativeMethodsShared.IsWindows
@@ -175,7 +170,7 @@ public void GetToolsetDataFromConfiguration_Basic()
         /// <summary>
         /// Relative paths can be used in a config file value
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void RelativePathInValue()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -216,7 +211,7 @@ public void RelativePathInValue()
         /// <summary>
         /// Invalid relative path in msbuildbinpath value
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void InvalidRelativePath()
         {
             if (NativeMethodsShared.IsLinux)
@@ -253,7 +248,7 @@ public void InvalidRelativePath()
         /// <summary>
         /// Tests the case where application configuration file is invalid
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_InvalidXmlFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -272,7 +267,7 @@ public void GetToolsetDataFromConfiguration_InvalidXmlFile()
         /// <summary>
         /// Tests the case where application configuration file is invalid
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_InvalidConfigFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -301,7 +296,7 @@ public void GetToolsetDataFromConfiguration_InvalidConfigFile()
         /// <summary>
         /// Tests the case where application configuration file is empty
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_FileEmpty()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -321,7 +316,7 @@ public void GetToolsetDataFromConfiguration_FileEmpty()
         /// Tests the case when ReadConfiguration throws exception
         /// Make sure that we don't eat it and always throw ConfigurationErrorsException
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_ConfigurationExceptionThrown()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -342,7 +337,7 @@ public void GetToolsetDataFromConfiguration_ConfigurationExceptionThrown()
         /// Tests the case when ReadConfiguration throws exception
         /// Make sure that we don't eat it and always throw ConfigurationErrorsException
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_ConfigurationErrorsExceptionThrown()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -362,7 +357,7 @@ public void GetToolsetDataFromConfiguration_ConfigurationErrorsExceptionThrown()
         /// <summary>
         /// Tests the case where default attribute is not specified in the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_DefaultAttributeNotSpecified()
         {
             string v2Folder = NativeMethodsShared.IsWindows
@@ -397,7 +392,7 @@ public void GetToolsetDataFromConfiguration_DefaultAttributeNotSpecified()
         /// <summary>
         /// Default toolset has no toolsVersion element definition
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_DefaultToolsetUndefined()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -427,7 +422,7 @@ public void GetToolsetDataFromConfiguration_DefaultToolsetUndefined()
         /// Tests the case where msbuildToolsets is not specified in the config file
         /// Basically in the code we should be checking if config.GetSection("msbuildToolsets") returns a null
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_MSBuildToolsetsNodeNotPresent()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -451,7 +446,7 @@ public void GetToolsetDataFromConfiguration_MSBuildToolsetsNodeNotPresent()
         /// <summary>
         /// Tests that we handle empty MSBuildToolsets element correctly
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_EmptyMSBuildToolsetsNode()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -476,7 +471,7 @@ public void GetToolsetDataFromConfiguration_EmptyMSBuildToolsetsNode()
         /// <summary>
         /// Tests the case where only default ToolsVersion is specified in the application configuration file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_OnlyDefaultSpecified()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -503,7 +498,7 @@ public void GetToolsetDataFromConfiguration_OnlyDefaultSpecified()
         /// <summary>
         /// Tests the case where only one ToolsVersion data is specified in the application configuration file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_OneToolsVersionNode()
         {
             string v2Folder = NativeMethodsShared.IsWindows
@@ -537,7 +532,7 @@ public void GetToolsetDataFromConfiguration_OneToolsVersionNode()
         /// <summary>
         /// Tests the case when an invalid value of ToolsVersion is specified
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_ToolsVersionIsEmptyString()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -570,7 +565,7 @@ public void GetToolsetDataFromConfiguration_ToolsVersionIsEmptyString()
         /// <summary>
         /// If both MSBuildToolsPath and MSBuildBinPath are present, they must match
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_ToolsPathAndBinPathDiffer()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -600,7 +595,7 @@ public void GetToolsetDataFromConfiguration_ToolsPathAndBinPathDiffer()
         /// <summary>
         /// Tests the case when a blank value of PropertyName is specified in the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyNameInConfigFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -634,7 +629,7 @@ public void BlankPropertyNameInConfigFile()
         /// <summary>
         /// Tests the case when a blank property name is specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyNameInRegistry()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -661,7 +656,7 @@ public void BlankPropertyNameInRegistry()
         /// Tests the case when a blank property name is specified in the registry in a
         /// sub-toolset.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyNameInRegistrySubToolset()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -694,7 +689,7 @@ public void BlankPropertyNameInRegistrySubToolset()
         /// <summary>
         /// Tests the case when a blank property value is specified in the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyValueInConfigFile()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -725,7 +720,7 @@ public void BlankPropertyValueInConfigFile()
         /// <summary>
         /// Tests the case when a blank property value is specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyValueInRegistry()
         {
             RegistryKey rk = _toolsVersionsRegistryKey.CreateSubKey("2.0");
@@ -749,7 +744,7 @@ public void BlankPropertyValueInRegistry()
         /// <summary>
         /// Tests the case when a blank property value is specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BlankPropertyValueInRegistrySubToolset()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"c:\someBinPath" : "/someBinPath";
@@ -783,7 +778,7 @@ public void BlankPropertyValueInRegistrySubToolset()
         /// <summary>
         /// Tests the case when an invalid value of PropertyName is specified in the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void InvalidPropertyNameInConfigFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -816,7 +811,7 @@ public void InvalidPropertyNameInConfigFile()
         /// <summary>
         /// Tests the case when an invalid value of PropertyName is specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void InvalidPropertyNameInRegistry()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -842,7 +837,7 @@ public void InvalidPropertyNameInRegistry()
         /// <summary>
         /// Tests the case when an invalid value of PropertyName is specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void InvalidPropertyNameInRegistrySubToolset()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -872,7 +867,7 @@ public void InvalidPropertyNameInRegistrySubToolset()
         /// <summary>
         /// Tests that empty string is an invalid value for MSBuildBinPath
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString1()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -901,7 +896,7 @@ public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString1()
         /// <summary>
         /// Tests that empty string is a valid property value for an arbitrary property
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString2()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -935,7 +930,7 @@ public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString2()
         /// Note that this comes for free with the current implementation using the
         /// framework api to access section in the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetDataFromConfiguration_XmlEscapedCharacters()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -972,7 +967,7 @@ public void GetToolsetDataFromConfiguration_XmlEscapedCharacters()
         /// <summary>
         /// Tests the case where registry and config file contains different toolsVersion
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_NoConflict()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somepath" : "/somepath";
@@ -1031,7 +1026,7 @@ public void GetToolsetData_NoConflict()
         /// <summary>
         /// Tests that ToolsetInitialization are respected.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ToolsetInitializationFlagsSetToNone()
         {
             // Set up registry with two tools versions and one property each
@@ -1085,7 +1080,7 @@ public void ToolsetInitializationFlagsSetToNone()
         /// <summary>
         /// Tests that ToolsetInitialization are respected.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ToolsetInitializationFlagsSetToRegistry()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somepath" : "/somepath";
@@ -1132,7 +1127,7 @@ public void ToolsetInitializationFlagsSetToRegistry()
             Assert.Equal(binPath2, values["4.0"].ToolsPath);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ThrowOnNonStringRegistryValueTypes()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1157,7 +1152,7 @@ public void ThrowOnNonStringRegistryValueTypes()
                                                                ToolsetDefinitionLocations.Registry);
             });
         }
-        [Fact]
+        [WindowsOnlyFact]
         public void PropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
         {
             string binPath = NativeMethodsShared.IsWindows ? "c:\\x" : "/x";
@@ -1186,7 +1181,7 @@ public void PropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
             Assert.Equal(binPath, values["2.0"].ToolsPath);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void SubToolsetPropertiesInRegistryCannotReferToOtherPropertiesInRegistry()
         {
             RegistryKey rk = _toolsVersionsRegistryKey.CreateSubKey("2.0");
@@ -1216,7 +1211,7 @@ public void SubToolsetPropertiesInRegistryCannotReferToOtherPropertiesInRegistry
             Assert.Equal("c:\\x", values["2.0"].SubToolsets["dogfood"].Properties["p3"].EvaluatedValue);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void SubToolsetsCannotDefineMSBuildToolsPath()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1246,7 +1241,7 @@ public void SubToolsetsCannotDefineMSBuildToolsPath()
         /// <summary>
         /// Tests that ToolsetInitialization are respected.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ToolsetInitializationFlagsSetToConfigurationFile()
         {
             string v2Dir = NativeMethodsShared.IsWindows ? "D:\\windows\\Microsoft.NET\\Framework\\v2.0.x86ret" : "/windows/Microsoft.NET/Framework/v2.0.x86ret";
@@ -1301,14 +1296,9 @@ public void ToolsetInitializationFlagsSetToConfigurationFile()
         /// "TaskLocation" is the name of the value.  The name of the value and the preceding "@" may be omitted if
         /// the default value is desired.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Registry access is only supported under Windows.")]
         public void PropertyInConfigurationFileReferencesRegistryLocation()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Registry access is only supported under Windows."
-            }
-
             // Registry Read
             RegistryKey key1 = Registry.CurrentUser.CreateSubKey(@"Software\Vendor\Tools");
             key1.SetValue("TaskLocation", @"somePathToTasks");
@@ -1353,7 +1343,7 @@ public void PropertyInConfigurationFileReferencesRegistryLocation()
             Registry.CurrentUser.DeleteSubKeyTree(@"Software\Vendor");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ToolsPathInRegistryHasInvalidPathChars()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1378,7 +1368,7 @@ public void ToolsPathInRegistryHasInvalidPathChars()
         }
 
 #if FEATURE_SYSTEM_CONFIGURATION
-        [Fact]
+        [WindowsOnlyFact]
         public void SamePropertyDefinedMultipleTimesForSingleToolsVersionInConfigurationFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1410,7 +1400,7 @@ public void SamePropertyDefinedMultipleTimesForSingleToolsVersionInConfiguration
             });
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void SamePropertyDifferentCaseDefinedMultipleTimesForSingleToolsVersionInConfigurationFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1443,7 +1433,7 @@ public void SamePropertyDifferentCaseDefinedMultipleTimesForSingleToolsVersionIn
         }
 
 
-        [Fact]
+        [WindowsOnlyFact]
         public void SameToolsVersionDefinedMultipleTimesInConfigurationFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1481,7 +1471,7 @@ public void SameToolsVersionDefinedMultipleTimesInConfigurationFile()
             });
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void SameToolsVersionDifferentCaseDefinedMultipleTimesInConfigurationFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1519,7 +1509,7 @@ public void SameToolsVersionDifferentCaseDefinedMultipleTimesInConfigurationFile
             });
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void CannotSetReservedPropertyInConfigFile()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1550,7 +1540,7 @@ public void CannotSetReservedPropertyInConfigFile()
         }
 #endif
 
-        [Fact]
+        [WindowsOnlyFact]
         public void CannotSetReservedPropertyInRegistry()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1574,7 +1564,7 @@ public void CannotSetReservedPropertyInRegistry()
             });
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void CannotSetReservedPropertyInRegistrySubToolset()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -1604,7 +1594,7 @@ public void CannotSetReservedPropertyInRegistrySubToolset()
         /// Properties defined in previously processed toolset definitions should
         /// not affect the evaluation of subsequent toolset definitions.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NoInterferenceBetweenToolsetDefinitions()
         {
             string v20Dir = NativeMethodsShared.IsWindows ? @"D:\20\some\folder\on\disk" : "/20/some/folder/on/disk";
@@ -1659,76 +1649,56 @@ public void NoInterferenceBetweenToolsetDefinitions()
         /// "TaskLocation" is the name of the value.  The name of the value and the preceding "@" may be omitted if
         /// the default value is desired.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Access local machine registry is for Windows only.")]
         public void ConfigFileInvalidRegistryExpression1()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Access local machine registry is for Windows only"
-            }
-
             // No location
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Access local machine registry is for Windows only.")]
         public void ConfigFileInvalidRegistryExpression2()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Access local machine registry is for Windows only"
-            }
-
             // Bogus key expression
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:__bogus__)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Access local machine registry is for Windows only.")]
         public void ConfigFileInvalidRegistryExpression3()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Access local machine registry is for Windows only"
-            }
-
             // No registry location just @
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:@)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileInvalidRegistryExpression4()
         {
             // Double @
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:HKEY_CURRENT_USER\Software\Vendor\Tools@@TaskLocation)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileInvalidRegistryExpression5()
         {
             // Trailing @
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:HKEY_CURRENT_USER\Software\Vendor\Tools@TaskLocation@)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileInvalidRegistryExpression6()
         {
             // Leading @
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:@HKEY_CURRENT_USER\Software\Vendor\Tools@TaskLocation)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Access registry is for Windows only.")]
         public void ConfigFileInvalidRegistryExpression7()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Access registry is for Windows only"
-            }
-
             // Bogus hive
             ConfigFileInvalidRegistryExpressionHelper(@"<property name=""p"" value=""$(Registry:BOGUS_HIVE\Software\Vendor\Tools@TaskLocation)""/>");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileStringEmptyRegistryExpression1()
         {
             // Regular undefined property beginning with "Registry"
@@ -1736,7 +1706,7 @@ public void ConfigFileStringEmptyRegistryExpression1()
                                           String.Empty);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileStringEmptyRegistryExpression2()
         {
             // Nonexistent key
@@ -1744,7 +1714,7 @@ public void ConfigFileStringEmptyRegistryExpression2()
                                           String.Empty);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileNonPropertyRegistryExpression1()
         {
             // Property not terminated with paren, does not look like property
@@ -1752,7 +1722,7 @@ public void ConfigFileNonPropertyRegistryExpression1()
                                           @"$(Registry:HKEY_CURRENT_USER\Software\Vendor\Tools@TaskLocation");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileNonPropertyRegistryExpression2()
         {
             // Missing colon, looks like regular property (but with invalid property name chars, we will return blank as a result)
@@ -1760,7 +1730,7 @@ public void ConfigFileNonPropertyRegistryExpression2()
                                           String.Empty);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void ConfigFileItemExpressionsDoNotExpandInConfigurationProperties()
         {
             // Expect that item expressions such as '@(SomeItem)' are not evaluated in any way, e.g., they are treated literally
@@ -1768,19 +1738,14 @@ public void ConfigFileItemExpressionsDoNotExpandInConfigurationProperties()
                                           @"@(SomeItem)");
         }
 
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Access local machine registry is for Windows only.")]
         public void RegistryInvalidRegistryExpression1()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Access local machine registry is for Windows only"
-            }
-
             // Bogus key expression
             RegistryInvalidRegistryExpressionHelper("$(Registry:__bogus__)");
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void RegistryValidRegistryExpression1()
         {
             // Regular undefined property beginning with "Registry"
@@ -1890,7 +1855,7 @@ private void ConfigFileValidRegistryExpressionHelper(string propertyExpression,
         /// <summary>
         /// Tests the case where application configuration file overrides a value already specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_ConflictingPropertyValuesSameCase()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somepath" : "/somepath";
@@ -1935,7 +1900,7 @@ public void GetToolsetData_ConflictingPropertyValuesSameCase()
         /// where that registry value is bogus and would otherwise throw.  However, since the config file also
         /// contains an entry for that toolset, the registry toolset never gets read, and thus never throws.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somepath" : "/somepath";
@@ -1979,7 +1944,7 @@ public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
         /// well as in the config file for the same tools version.
         /// We should not merge them; we should take the config file ones only
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_NoMerging()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somepath" : "/somepath";
@@ -2028,7 +1993,7 @@ public void GetToolsetData_NoMerging()
         /// The absence of the ToolsVersion attribute on the main Project element in a project file means
         /// that the engine's default tools version should be used.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSpecifiedInRegistry()
         {
             string oldValue = Environment.GetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION");
@@ -2070,7 +2035,7 @@ public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSp
         /// <summary>
         /// Tests the case when no values are specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_RegistryNotPresent()
         {
             string binPath = NativeMethodsShared.IsWindows ? @"D:\somedifferentpath" : "/somedifferentpath";
@@ -2110,7 +2075,7 @@ public void GetToolsetData_RegistryNotPresent()
         /// Note that config file not present is same as config file
         /// with no MSBuildToolsets Section
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_ConfigFileNotPresent()
         {
             // Registry Read
@@ -2138,7 +2103,7 @@ public void GetToolsetData_ConfigFileNotPresent()
         /// <summary>
         /// Tests the case where nothing is specified in registry and config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_RegistryAndConfigNotPresent()
         {
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
@@ -2168,7 +2133,7 @@ public void GetToolsetData_RegistryAndConfigNotPresent()
         /// <summary>
         /// Tests the case when reading config file throws an exception
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_ReadConfigThrowsException()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -2198,7 +2163,7 @@ public void GetToolsetData_ReadConfigThrowsException()
         /// <summary>
         /// Tests the case where reading from registry throws exception
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -2242,7 +2207,7 @@ public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
         /// Tests that the default ToolsVersion is correctly resolved when specified
         /// in registry and config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultToolsetVersion_SpecifiedInRegistryAndConfigFile()
         {
             // Set up registry with two tools versions and one property each
@@ -2287,7 +2252,7 @@ public void SetDefaultToolsetVersion_SpecifiedInRegistryAndConfigFile()
         /// <summary>
         /// Tests that the default ToolsVersion is correctly resolved when specified in registry only
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultToolsetVersion_SpecifiedOnlyInRegistry()
         {
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2330,7 +2295,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInRegistry()
         /// <summary>
         /// Tests that the override task path is correctly resolved when specified in registry only
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetOverrideTasks_SpecifiedOnlyInRegistry()
         {
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2380,7 +2345,7 @@ public void SetOverrideTasks_SpecifiedOnlyInRegistry()
         /// <summary>
         /// Tests that the override default toolsversion is correctly resolved when specified in registry only
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInRegistry()
         {
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2427,7 +2392,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInRegistry()
         /// Tests that the default ToolsVersion is correctly resolved
         /// when specified in config file only
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultToolsetVersion_SpecifiedOnlyInConfigFile()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -2466,7 +2431,7 @@ public void SetDefaultToolsetVersion_SpecifiedOnlyInConfigFile()
         /// when specified in config file only.
         /// Also, that MSBuildOverrideTasksPath can be overridden.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetOverrideTaskPath_SpecifiedOnlyInConfigFile()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -2507,7 +2472,7 @@ public void SetOverrideTaskPath_SpecifiedOnlyInConfigFile()
         /// Tests that the override default ToolsVersion is correctly resolved
         /// when specified in config file only.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInConfigFile()
         {
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -2545,7 +2510,7 @@ public void SetDefaultOverrideToolsVersion_SpecifiedOnlyInConfigFile()
         /// <summary>
         /// Tests that the default ToolsVersion is correctly resolved when specified nowhere
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SetDefaultToolsetVersion_SpecifiedNowhere()
         {
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2592,7 +2557,7 @@ public void SetDefaultToolsetVersion_SpecifiedNowhere()
         /// <summary>
         /// Tests that properties are properly expanded when reading them from the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PropertiesInToolsetsFromConfigFileAreExpanded()
         {
             // $(COMPUTERNAME) is just a convenient env var. $(NUMBER_OF_PROCESSORS) isn't defined on Longhorn
@@ -2632,7 +2597,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpanded()
         /// <summary>
         /// Tests that properties in MSBuildToolsPath are properly expanded when reading them from the config file
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PropertiesInToolsetsFromConfigFileAreExpandedInToolsPath()
         {
             string binPathConfig = NativeMethodsShared.IsWindows ?
@@ -2686,7 +2651,7 @@ public void PropertiesInToolsetsFromConfigFileAreExpandedInToolsPath()
         /// Global properties are available, but they cannot be overwritten by other toolset properties, just as they cannot
         /// be overwritten by project file properties.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GlobalPropertiesInToolsetsAreExpandedButAreNotOverwritten()
         {
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -2743,7 +2708,7 @@ private ToolsetConfigurationReader GetStandardConfigurationReader()
 #endif
 
 #if FEATURE_WIN32_REGISTRY
-    internal class MockRegistryKey : RegistryKeyWrapper
+    internal sealed class MockRegistryKey : RegistryKeyWrapper
     {
         public enum WhereToThrow
         {
@@ -2762,7 +2727,7 @@ public enum WhereToThrow
         /// Construct the mock key with a specified key
         /// </summary>
         /// <param name="path"></param>
-        protected MockRegistryKey(RegistryKey wrappedKey, RegistryKey registryHive)
+        private MockRegistryKey(RegistryKey wrappedKey, RegistryKey registryHive)
             : base(wrappedKey, registryHive)
         { }
 
diff --git a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
index a39a6b336b0..213b448ec14 100644
--- a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
@@ -10,10 +10,10 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 
@@ -24,7 +24,6 @@ namespace Microsoft.Build.UnitTests.Definition
     /// <summary>
     /// Unit test for ToolsetRegistryReader class
     /// </summary>
-    [PlatformSpecific(TestPlatforms.Windows)]
     public class ToolsetRegistryReader_Tests : IDisposable
     {
         // The registry key that is passed as the baseKey parameter to the ToolsetRegistryReader class
@@ -79,7 +78,7 @@ private void DeleteTestRegistryKey()
         /// <summary>
         /// If the base key has been deleted, then we just don't get any information (no exception)
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_DeletedKey()
         {
             DeleteTestRegistryKey();
@@ -119,7 +118,7 @@ public void DefaultValuesInRegistryCreatedBySetup()
         /// <summary>
         /// Tests we handle no default toolset specified in the registry
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void DefaultValueInRegistryDoesNotExist()
         {
             ToolsetReader reader = new ToolsetRegistryReader(new ProjectCollection().EnvironmentProperties, new PropertyDictionary<ProjectPropertyInstance>(), new MockRegistryKey(testRegistryPath, "3.5" /* fail to find subkey 3.5 */));
@@ -138,7 +137,7 @@ public void DefaultValueInRegistryDoesNotExist()
         /// <summary>
         /// The base key exists but contains no subkey or values: this is okay
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_NoSubkeyNoValues()
         {
             ToolsetReader reader = GetStandardRegistryReader();
@@ -155,7 +154,7 @@ public void ReadRegistry_NoSubkeyNoValues()
         /// Here we validate that MSBuild does not fail when there are unrecognized values underneath
         /// the ToolsVersion key.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_NoSubkeysOnlyValues()
         {
             _toolsVersionsRegistryKey.SetValue("Name1", "Value1");
@@ -174,7 +173,7 @@ public void ReadRegistry_NoSubkeysOnlyValues()
         /// <summary>
         /// Basekey has only 1 subkey
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_OnlyOneSubkey()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -197,7 +196,7 @@ public void ReadRegistry_OnlyOneSubkey()
         /// <summary>
         /// Basic case
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_Basic()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -227,7 +226,7 @@ public void ReadRegistry_Basic()
         /// <summary>
         /// baseKey contains some non-String data
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_NonStringData()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -256,7 +255,7 @@ public void ReadRegistry_NonStringData()
         ///        SubKey2
         ///        SubKey3
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_HasSubToolsets()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -312,7 +311,7 @@ public void ReadRegistry_HasSubToolsets()
         ///        SubKey1
         ///            SubSubKey1
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_IgnoreSubToolsetSubKeys()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -347,7 +346,7 @@ public void ReadRegistry_IgnoreSubToolsetSubKeys()
         /// selected subtoolset, the subtoolset value overrides -- even if that
         /// value is empty.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_SubToolsetOverridesBaseToolsetEntries()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -387,7 +386,7 @@ public void ReadRegistry_SubToolsetOverridesBaseToolsetEntries()
         /// selected subtoolset, the subtoolset value overrides -- even if that
         /// value is empty.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadRegistry_UnselectedSubToolsetIsIgnored()
         {
             string xdir = NativeMethodsShared.IsWindows ? "c:\\xxx" : "/xxx";
@@ -416,7 +415,7 @@ public void ReadRegistry_UnselectedSubToolsetIsIgnored()
         /// <summary>
         /// Regular case of getting default tools version
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultToolsVersionFromRegistry_Basic()
         {
             _currentVersionRegistryKey.SetValue("DefaultToolsVersion", "tv1");
@@ -435,7 +434,7 @@ public void GetDefaultToolsVersionFromRegistry_Basic()
         /// <summary>
         /// Default value is not set
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultToolsVersionFromRegistry_DefaultValueNotSet()
         {
             ToolsetReader reader = GetStandardRegistryReader();
@@ -450,7 +449,7 @@ public void GetDefaultToolsVersionFromRegistry_DefaultValueNotSet()
         /// <summary>
         /// "DefaultToolsVersion" has non-String data
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultToolsVersionFromRegistry_NonStringData()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -473,7 +472,7 @@ private ToolsetRegistryReader GetStandardRegistryReader()
         /// <summary>
         /// Regular case of getting overridetaskspath
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetOverrideTasksPathFromRegistry_Basic()
         {
             if (NativeMethodsShared.IsUnixLike)
@@ -495,7 +494,7 @@ public void GetOverrideTasksPathFromRegistry_Basic()
         /// <summary>
         /// OverrideTasksPath is not set
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetOverrideTasksPathFromRegistry_ValueNotSet()
         {
             ToolsetReader reader = GetStandardRegistryReader();
@@ -510,7 +509,7 @@ public void GetOverrideTasksPathFromRegistry_ValueNotSet()
         /// <summary>
         /// "OverrideTasksPath" has non-String data
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetOverrideTasksPathFromRegistry_NonStringData()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -527,7 +526,7 @@ public void GetOverrideTasksPathFromRegistry_NonStringData()
         /// <summary>
         /// Regular case of getting the default override toolsversion
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultOverrideToolsVersionFromRegistry_Basic()
         {
             _currentVersionRegistryKey.SetValue("DefaultOverrideToolsVersion", "Current");
@@ -544,7 +543,7 @@ public void GetDefaultOverrideToolsVersionFromRegistry_Basic()
         /// <summary>
         /// DefaultOverrideToolsVersion is not set
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultOverrideToolsVersionFromRegistry_ValueNotSet()
         {
             ToolsetReader reader = GetStandardRegistryReader();
@@ -559,7 +558,7 @@ public void GetDefaultOverrideToolsVersionFromRegistry_ValueNotSet()
         /// <summary>
         /// "DefaultOverrideToolsVersion" has non-String data
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetDefaultOverrideToolsVersionFromRegistry_NonStringData()
         {
             Assert.Throws<InvalidToolsetDefinitionException>(() =>
@@ -573,7 +572,7 @@ public void GetDefaultOverrideToolsVersionFromRegistry_NonStringData()
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
             });
         }
-        [Fact]
+        [WindowsOnlyFact]
         public void ReadToolsets_NoBinPathOrToolsPath()
         {
             RegistryKey key1 = _toolsVersionsRegistryKey.CreateSubKey("tv1");
diff --git a/src/Build.UnitTests/Definition/Toolset_Tests.cs b/src/Build.UnitTests/Definition/Toolset_Tests.cs
index aaaade0b2b2..2bf6e660b37 100644
--- a/src/Build.UnitTests/Definition/Toolset_Tests.cs
+++ b/src/Build.UnitTests/Definition/Toolset_Tests.cs
@@ -12,6 +12,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -173,8 +174,7 @@ public void TestDefaultSubToolset()
             Assert.Equal("v13.0", t.DefaultSubToolsetVersion);
         }
 
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/4363")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact(Skip = "https://github.com/dotnet/msbuild/issues/4363")]
         public void TestDefaultSubToolsetFor40()
         {
             Toolset t = ProjectCollection.GlobalProjectCollection.GetToolset("4.0");
diff --git a/src/Build.UnitTests/EscapingInProjects_Tests.cs b/src/Build.UnitTests/EscapingInProjects_Tests.cs
index 93a4f449f12..e897cd174e3 100644
--- a/src/Build.UnitTests/EscapingInProjects_Tests.cs
+++ b/src/Build.UnitTests/EscapingInProjects_Tests.cs
@@ -107,7 +107,6 @@ public void SemicolonInPropertyPassedIntoStringParam()
         /// a string parameter of a task, in this case the Message task.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SemicolonInPropertyPassedIntoStringParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
@@ -160,7 +159,6 @@ public void SemicolonInPropertyPassedIntoITaskItemParam()
         /// an ITaskItem[] task parameter.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SemicolonInPropertyPassedIntoITaskItemParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
@@ -606,7 +604,6 @@ public void ItemTransformContainingSemicolon()
         /// as an escaped percent sign.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ItemTransformContainingSemicolon_InTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
@@ -733,7 +730,6 @@ public void EscapedWildcardsShouldNotBeExpanded()
         /// literally, not as a wildcard
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()
         {
             MockLogger logger = new();
@@ -1792,7 +1788,7 @@ public class Class1
     }
 #endif
 
-    internal class EscapingInProjectsHelper
+    internal sealed class EscapingInProjectsHelper
     {
         /// <summary>
         /// Deletes all *.weirdo files from the temp path, and dumps 3 files there --
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index c58a0dc6ad7..f215d86d9ec 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -20,7 +20,7 @@
 using Microsoft.Build.Shared.FileSystem;
 using Shouldly;
 using Xunit;
-
+using Xunit.NetCore.Extensions;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
@@ -199,7 +199,6 @@ public void VerifyExistsInMemoryProjects()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyConditionsInsideOutsideTargets()
         {
             string testtargets = @"
@@ -2297,7 +2296,6 @@ public void InitialTargetsWithBlanks()
         /// or on a 32-bit machine and "c:\program files (x86)\msbuild" in a 32-bit process on a 64-bit machine.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPathDefault_Legacy()
         {
             string specialPropertyName = "MSBuildExtensionsPath";
@@ -2411,7 +2409,6 @@ public void MSBuildExtensionsPathWithEnvironmentOverride()
         /// should win over whatever MSBuild thinks the default is.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPathWithGlobalOverride()
         {
             Project project = new Project(new ProjectCollection());
@@ -2430,7 +2427,6 @@ public void MSBuildExtensionsPathWithGlobalOverride()
         /// We can't test that unless we are on a 64 bit box, but this test will work on either
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPath32Default()
         {
             // On a 64 bit machine we always want to use the program files x86.  If we are running as a 64 bit process then this variable will be set correctly
@@ -2464,7 +2460,6 @@ public void MSBuildExtensionsPath32Default()
         /// of seeing whether our value wins.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPath32WithEnvironmentOverride()
         {
             string originalMSBuildExtensionsPath32Value = Environment.GetEnvironmentVariable("MSBuildExtensionsPath32");
@@ -2488,7 +2483,6 @@ public void MSBuildExtensionsPath32WithEnvironmentOverride()
         /// of seeing whether our value wins.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPath32WithGlobalOverride()
         {
             Project project = new Project(new ProjectCollection());
@@ -2505,7 +2499,6 @@ public void MSBuildExtensionsPath32WithGlobalOverride()
         /// We can't test that unless we are on a 64 bit box, but this test will work on either
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MSBuildExtensionsPath64Default()
         {
             string expected = string.Empty;
@@ -2679,7 +2672,6 @@ public void MSBuildVersion()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ReservedProjectProperties()
         {
             string file = NativeMethodsShared.IsWindows ? @"c:\foo\bar.csproj" : "/foo/bar.csproj";
@@ -2717,14 +2709,9 @@ public void ReservedProjectPropertiesAtRoot()
         /// <summary>
         /// Test standard reserved properties on UNC at root
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("UNC is only available under Windows.")]
         public void ReservedProjectPropertiesOnUNCRoot()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "UNC is only available under Windows"
-            }
-
             string uncFile = @"\\foo\bar\baz.csproj";
             ProjectRootElement xml = ProjectRootElement.Create(uncFile);
             Project project = new Project(xml);
@@ -2740,14 +2727,9 @@ public void ReservedProjectPropertiesOnUNCRoot()
         /// <summary>
         /// Test standard reserved properties on UNC
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("UNC is only available under Windows.")]
         public void ReservedProjectPropertiesOnUNC()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "UNC is only available under Windows"
-            }
-
             string uncFile = @"\\foo\bar\baz\biz.csproj";
             ProjectRootElement xml = ProjectRootElement.Create(uncFile);
             Project project = new Project(xml);
@@ -2765,7 +2747,6 @@ public void ReservedProjectPropertiesOnUNC()
         /// Verify when a node count is passed through on the project collection that the correct number is used to evaluate the msbuildNodeCount
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyMsBuildNodeCountReservedProperty()
         {
             string content = ObjectModelHelpers.CleanupFileContents(@"
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 82aadfa05a2..d93e4342dc0 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -10,28 +10,23 @@
 using System.Runtime.Versioning;
 using System.Text;
 using System.Xml;
-
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
-
-
-
-using ProjectHelpers = Microsoft.Build.UnitTests.BackEnd.ProjectHelpers;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-
+using Shouldly;
+using Xunit;
+using Xunit.NetCore.Extensions;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using ProjectHelpers = Microsoft.Build.UnitTests.BackEnd.ProjectHelpers;
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
-
-using Xunit;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared.FileSystem;
-using Shouldly;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
@@ -259,7 +254,6 @@ public void ExpandItemVectorFunctionsGetDirectoryNameOfMetadataValueDistinct()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ExpandItemVectorFunctionsItemSpecModifier()
         {
             ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
@@ -320,7 +314,6 @@ public void ExpandItemVectorFunctionsInvalid2()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ExpandItemVectorFunctionsChained1()
         {
             ProjectHelpers.CreateEmptyProjectInstance();
@@ -337,7 +330,6 @@ public void ExpandItemVectorFunctionsChained1()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ExpandItemVectorFunctionsChained2()
         {
             ProjectHelpers.CreateEmptyProjectInstance();
@@ -365,7 +357,6 @@ public void ExpandItemVectorFunctionsChained3()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ExpandItemVectorFunctionsChainedProject1()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
@@ -590,9 +581,7 @@ public void ExpandItemVectorFunctionsBuiltIn4()
             log.AssertLogContains("[foo;bar]");
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/4363")]
+        [LongPathSupportDisabledFact(fullFrameworkOnly: true, additionalMessage: "https://github.com/dotnet/msbuild/issues/4363")]
         public void ExpandItemVectorFunctionsBuiltIn_PathTooLongError()
         {
             string content = @"
@@ -612,15 +601,9 @@ public void ExpandItemVectorFunctionsBuiltIn_PathTooLongError()
             log.AssertLogContains("MSB4198");
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. Cannot have invalid characters in file name on Unix.")]
         public void ExpandItemVectorFunctionsBuiltIn_InvalidCharsError()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Cannot have invalid characters in file name on Unix"
-            }
-
             string content = @"
  <Project DefaultTargets=`t`>
 
@@ -644,7 +627,6 @@ public void ExpandItemVectorFunctionsBuiltIn_InvalidCharsError()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void ExpandItemVectorFunctionsItemSpecModifier2()
         {
             ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
@@ -876,8 +858,7 @@ public void ItemIncludeContainsMultipleItemReferences()
         /// <summary>
         /// Bad path when getting metadata through ->Metadata function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportDisabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -897,9 +878,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong()
         /// <summary>
         /// Bad path with illegal windows chars when getting metadata through ->Metadata function
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -938,8 +917,7 @@ public void InvalidMetadataName()
         /// <summary>
         /// Bad path when getting metadata through ->WithMetadataValue function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportDisabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -959,9 +937,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         /// <summary>
         /// Bad path with illegal windows chars when getting metadata through ->WithMetadataValue function
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -1000,8 +976,7 @@ public void InvalidMetadataName2()
         /// <summary>
         /// Bad path when getting metadata through ->AnyHaveMetadataValue function
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportDisabledFact]
         public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -1021,9 +996,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         /// <summary>
         /// Bad path with illegal windows chars when getting metadata through ->AnyHaveMetadataValue function
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
@@ -1039,9 +1012,7 @@ public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
             logger.AssertLogContains("MSB4023");
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void InvalidPathInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
@@ -1057,9 +1028,7 @@ public void InvalidPathInDirectMetadata()
             logger.AssertLogContains("MSB4248");
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "new enough dotnet.exe transparently opts into long paths")]
+        [LongPathSupportDisabledFact(fullFrameworkOnly: true, additionalMessage: "new enough dotnet.exe transparently opts into long paths")]
         public void PathTooLongInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
@@ -1710,8 +1679,7 @@ public void RegistryPropertyInvalidPrefixError2()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyString()
         {
@@ -1733,8 +1701,7 @@ public void RegistryPropertyString()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyBinary()
         {
@@ -1759,8 +1726,7 @@ public void RegistryPropertyBinary()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyDWord()
         {
@@ -1782,8 +1748,7 @@ public void RegistryPropertyDWord()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyExpandString()
         {
@@ -1806,8 +1771,7 @@ public void RegistryPropertyExpandString()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyQWord()
         {
@@ -1829,8 +1793,7 @@ public void RegistryPropertyQWord()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void RegistryPropertyMultiString()
         {
@@ -1879,7 +1842,6 @@ public void TestItemSpecModiferEscaping()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestGetPathToReferenceAssembliesAsFunction()
         {
             if (ToolLocationHelper.GetPathToDotNetFrameworkReferenceAssemblies(TargetDotNetFrameworkVersion.Version48) == null)
@@ -2212,7 +2174,6 @@ public void PropertyFunctionArrayReturn()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyFunctionDictionaryReturn()
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -2521,8 +2482,7 @@ public void PropertyFunctionConstructor2()
         /// <summary>
         /// Expand property function that is only available when MSBUILDENABLEALLPROPERTYFUNCTIONS=1
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/coreclr/issues/15662")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "https://github.com/dotnet/coreclr/issues/15662")]
         public void PropertyStaticFunctionAllEnabled()
         {
             using (var env = TestEnvironment.Create())
@@ -3228,7 +3188,6 @@ public void PropertyFunctionValueOrDefaultFromEnvironment()
         /// Expand property function that tests for existence of the task host
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyFunctionDoesTaskHostExist()
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -3245,7 +3204,6 @@ public void PropertyFunctionDoesTaskHostExist()
         /// Expand property function that tests for existence of the task host
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyFunctionDoesTaskHostExist_Whitespace()
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -3301,7 +3259,6 @@ public void PropertyFunctionDoesTaskHostExist_Error()
         /// Expand property function that tests for existence of the task host
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyFunctionDoesTaskHostExist_Evaluated()
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -3354,7 +3311,6 @@ public void PropertyFunctionDoesTaskHostExist_NonexistentTaskHost()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyFunctionStaticMethodFileAttributes()
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();
@@ -3466,8 +3422,7 @@ public void PropertySimpleSpaced()
             Assert.Equal(String.Empty, result);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegitryValue()
         {
@@ -3491,8 +3446,7 @@ public void PropertyFunctionGetRegitryValue()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegitryValueDefault()
         {
@@ -3516,8 +3470,7 @@ public void PropertyFunctionGetRegitryValueDefault()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegistryValueFromView1()
         {
@@ -3541,8 +3494,7 @@ public void PropertyFunctionGetRegistryValueFromView1()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegistryValueFromView2()
         {
diff --git a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
index 2419fe271db..1d768794e9f 100644
--- a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Text.RegularExpressions;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
-using System.Text.RegularExpressions;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index d3bd36d2e35..4d4e33ff79d 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -1,16 +1,15 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
-
 using Xunit;
-using System;
-using System.Collections.Generic;
-using System.IO;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
index c80efa78126..67b41b392cf 100644
--- a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
@@ -5,11 +5,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
-using Microsoft.Build.Evaluation;
-using Xunit;
 using System.Text;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
index 0ef9b538656..856de263ffe 100644
--- a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
@@ -10,10 +10,10 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Shouldly;
 using Xunit;
-using ProjectInstanceItemSpec =
-    Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance>;
 using ProjectInstanceExpander =
     Microsoft.Build.Evaluation.Expander<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance>;
+using ProjectInstanceItemSpec =
+    Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance>;
 
 
 #nullable disable
diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index c743a3a02da..3f17110a7d0 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -1,17 +1,17 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Construction;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Shared;
+using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Xml;
-using System;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
 using Xunit;
-using Microsoft.Build.Framework;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
index b39f50cd243..1d30e7f6067 100644
--- a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
@@ -1,14 +1,14 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System;
 using System.IO;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 
 
@@ -79,10 +79,7 @@ public void AddEntry()
         /// <summary>
         /// Tests that a strong reference is held to a single item
         /// </summary>
-        [Fact]
-        // This test fails on .NET Core and Mono: https://github.com/dotnet/msbuild/issues/282
-        [Trait("Category", "non-mono-tests")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/282")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "This test fails on .NET Core and Mono: https://github.com/dotnet/msbuild/issues/282")]
         public void AddEntryStrongReference()
         {
             string projectPath = NativeMethodsShared.IsUnixLike ? "/foo" : "c:\\foo";
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index 1a1918ead7e..7f026071d8c 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -16,10 +16,10 @@
 using Microsoft.Build.Unittest;
 using Shouldly;
 using Xunit;
+using SdkReferencePropertyExpansionMode = Microsoft.Build.Framework.EscapeHatches.SdkReferencePropertyExpansionMode;
 using SdkResolverContext = Microsoft.Build.Framework.SdkResolverContext;
 using SdkResult = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactory = Microsoft.Build.Framework.SdkResultFactory;
-using SdkReferencePropertyExpansionMode = Microsoft.Build.Framework.EscapeHatches.SdkReferencePropertyExpansionMode;
 
 #nullable disable
 
@@ -542,7 +542,7 @@ public void ImplicitImportsShouldHaveParsedSdkInfo(
             }
         }
 
-        internal class SdkPropertiesAreExpandedDataTemplate
+        internal sealed class SdkPropertiesAreExpandedDataTemplate
         {
             public SdkPropertiesAreExpandedDataTemplate(string template, bool expectedMinimumVersionIsNull)
             {
@@ -565,7 +565,7 @@ public override string ToString()
             }
         }
 
-        internal class SdkPropertiesAreExpandedCase
+        internal sealed class SdkPropertiesAreExpandedCase
         {
             public SdkPropertiesAreExpandedCase(SdkReferencePropertyExpansionMode? mode,
                 SdkPropertiesAreExpandedDataTemplate template, bool setName, bool setVersion, bool expectedSuccess)
diff --git a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
index 4258549fe70..a5041d55fd6 100644
--- a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
@@ -1,6 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
@@ -8,10 +12,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Unittest;
 using Shouldly;
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
 using Xunit;
 using Xunit.Abstractions;
 
diff --git a/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs b/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
index 505b4e12f5b..9ab78f45907 100644
--- a/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.Evaluation;
-
-using Xunit;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs b/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
index cfb3c3ad477..8d2b638d485 100644
--- a/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Utilities;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/FileLogger_Tests.cs b/src/Build.UnitTests/FileLogger_Tests.cs
index 729864e9b1c..279859f2058 100644
--- a/src/Build.UnitTests/FileLogger_Tests.cs
+++ b/src/Build.UnitTests/FileLogger_Tests.cs
@@ -8,10 +8,9 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
-
+using Xunit;
 using EventSourceSink = Microsoft.Build.BackEnd.Logging.EventSourceSink;
 using Project = Microsoft.Build.Evaluation.Project;
-using Xunit;
 
 #nullable disable
 
@@ -80,7 +79,6 @@ public void BasicNoExistingFile()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void InvalidFile()
         {
             Assert.Throws<LoggerException>(() =>
diff --git a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
index 0a0b99e5b37..72a46b6d23b 100644
--- a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
+++ b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Xunit;
-using Shouldly;
-using Microsoft.Build.Shared;
-using System.Text.RegularExpressions;
 using System.Globalization;
+using System.Text.RegularExpressions;
+using Microsoft.Build.Shared;
+using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/FixPathOnUnix_Tests.cs b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
index e74cfd7b14e..f3f635df854 100644
--- a/src/Build.UnitTests/FixPathOnUnix_Tests.cs
+++ b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
@@ -6,15 +6,15 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
-    [PlatformSpecific(TestPlatforms.AnyUnix)]
     public class FixPathOnUnixTests
     {
-        [Fact]
+        [UnixOnlyFact]
         public void TestPathFixupInMetadata()
         {
             string buildProjectContents = @"
diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index 78e73980389..72abe497317 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -7,11 +7,14 @@
 using System.Linq;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using ExpectedNodeBuildOutput = System.Collections.Generic.Dictionary<Microsoft.Build.Graph.ProjectGraphNode, string[]>;
+using OutputCacheDictionary = System.Collections.Generic.Dictionary<Microsoft.Build.Graph.ProjectGraphNode, string>;
 
 #nullable disable
 
@@ -131,7 +134,7 @@ public class IsolateProjectsTests : IDisposable
         public IsolateProjectsTests(ITestOutputHelper testOutput)
         {
             _testOutput = testOutput;
-            _env = TestEnvironment.Create(_testOutput);
+            _env = TestEnvironment.Create(_testOutput, ignoreBuildErrorFiles: true);
 
             if (NativeMethodsShared.IsOSX)
             {
@@ -146,7 +149,7 @@ public IsolateProjectsTests(ITestOutputHelper testOutput)
             _buildParametersPrototype = new BuildParameters
             {
                 EnableNodeReuse = false,
-                IsolateProjects = true,
+                ProjectIsolationMode = ProjectIsolationMode.True,
                 DisableInProcNode = disableInProcNode
             };
         }
@@ -156,8 +159,6 @@ public void Dispose()
             _env.Dispose();
         }
 
-
-
         [Theory]
         [InlineData(BuildResultCode.Success, new string[] { })]
         [InlineData(BuildResultCode.Success, new[] { "BuildSelf" })]
@@ -239,7 +240,130 @@ public void IsolationRelatedMessagesShouldNotBePresentInNonIsolatedBuilds()
                     logger.AssertLogDoesntContain("MSB4260");
                 },
                 excludeReferencesFromConstraints: true,
-                isolateProjects: false);
+                isolateProjects: ProjectIsolationMode.False);
+        }
+
+        [Fact]
+        public void IsolationRelatedMessageShouldBePresentInIsolatedBuildsWithMessaging()
+        {
+            AssertBuild(
+                new[] { "BuildDeclaredReference", "BuildUndeclaredReference" },
+                (result, logger) =>
+                {
+                    result.OverallResult.ShouldBe(BuildResultCode.Success);
+
+                    logger.ErrorCount.ShouldBe(0);
+                    logger.Errors.ShouldBeEmpty();
+
+                    // The references got built because the isolation mode is set to ProjectIsolationMode.MessageUponIsolationViolation.
+                    logger.AssertMessageCount("Message from reference", 2);
+                    logger.AllBuildEvents.OfType<ProjectStartedEventArgs>().Count().ShouldBe(3);
+
+                    logger.AssertMessageCount("MSB4260", 2);
+                },
+                isolateProjects: ProjectIsolationMode.MessageUponIsolationViolation);
+        }
+
+        [Fact]
+        public void UndeclaredReferenceBuildResultNotPresentInOutputCache()
+        {
+            // Create the graph 1 -> 2 -> 3, where 2 is a declared project reference
+            // and 3 is an undeclared project reference.
+            // 3 outputs an item UndeclaredReferenceTargetItem that 2 outputs.
+            // Run under ProjectIsolationMode.MessageUponIsolationViolation mode
+            // and verify that 3's build result is not present in 2's output results
+            // cache since, under this mode, only the results of the project
+            // to build under isolation (2) should be serialized.
+            // See CacheSerialization.SerializeCaches for more info.
+            string undeclaredReferenceFile = GraphTestingUtilities.CreateProjectFile(
+                _env,
+                3,
+                extraContent: @"
+                    <Target Name='UndeclaredReferenceTarget' Outputs='@(UndeclaredReferenceTargetItem)'>
+                        <ItemGroup>
+                            <UndeclaredReferenceTargetItem Include='Foo.cs' />
+                        </ItemGroup>
+                        <Message Text='Message from undeclared reference' Importance='High' />
+                    </Target>",
+                defaultTargets: "UndeclaredReferenceTarget").Path;
+            string declaredReferenceContents = string.Format(
+                @"
+                <Target Name='DeclaredReferenceTarget' Outputs='@(UndeclaredReferenceTargetItem)'>
+                    <MSBuild
+                        Projects='{0}'
+                        Targets='UndeclaredReferenceTarget'>
+                        <Output TaskParameter='TargetOutputs' ItemName='UndeclaredReferenceTargetItem' />
+                    </MSBuild>
+                </Target>".Cleanup(),
+                undeclaredReferenceFile).Cleanup();
+            string declaredReferenceFile = GraphTestingUtilities.CreateProjectFile(
+                _env,
+                2,
+                extraContent: declaredReferenceContents,
+                defaultTargets: "DeclaredReferenceTarget").Path;
+            string rootProjectContents = string.Format(
+                @"
+                <ItemGroup>
+                    <ProjectReference Include='{0}' />
+                </ItemGroup>
+                <Target Name='BuildDeclaredReference'>
+                    <MSBuild
+                        Projects='{1}'
+                        Targets='DeclaredReferenceTarget'
+                    />
+                </Target>".Cleanup(),
+                declaredReferenceFile,
+                declaredReferenceFile).Cleanup();
+            string rootFile = GraphTestingUtilities.CreateProjectFile(
+                _env,
+                1,
+                extraContent: rootProjectContents,
+                defaultTargets: "BuildDeclaredReference").Path;
+            var projectGraph = new ProjectGraph(
+                rootFile,
+                new Dictionary<string, string>(),
+                _env.CreateProjectCollection().Collection);
+            var expectedOutput = new ExpectedNodeBuildOutput();
+            var outputCaches = new OutputCacheDictionary();
+            ProjectGraphNode[] topoSortedProjectGraphNodes = projectGraph.ProjectNodesTopologicallySorted.ToArray();
+            Dictionary<string, (BuildResult Result, MockLogger Logger)> results = ResultCacheBasedBuilds_Tests.BuildUsingCaches(
+                _env,
+                topoSortedProjectGraphNodes,
+                expectedOutput,
+                outputCaches,
+                generateCacheFiles: true,
+                assertBuildResults: false,
+                projectIsolationMode: ProjectIsolationMode.MessageUponIsolationViolation);
+            var deserializedOutputCacheDeclaredReference = CacheSerialization.DeserializeCaches(outputCaches[topoSortedProjectGraphNodes[0]]);
+            var deserializedOutputCacheRoot = CacheSerialization.DeserializeCaches(outputCaches[topoSortedProjectGraphNodes[1]]);
+            deserializedOutputCacheDeclaredReference.exception.ShouldBeNull();
+            deserializedOutputCacheRoot.exception.ShouldBeNull();
+            BuildResult[] declaredReferenceBuildResults = deserializedOutputCacheDeclaredReference.ResultsCache.GetEnumerator().ToArray();
+            BuildResult[] rootBuildResults = deserializedOutputCacheRoot.ResultsCache.GetEnumerator().ToArray();
+
+            // Both the root and declared reference projects should only have one build result.
+            declaredReferenceBuildResults.Length.ShouldBe(1);
+            rootBuildResults.Length.ShouldBe(1);
+            declaredReferenceBuildResults[0].OverallResult.ShouldBe(BuildResultCode.Success);
+            rootBuildResults[0].OverallResult.ShouldBe(BuildResultCode.Success);
+            MockLogger rootLogger = results["1"].Logger;
+            MockLogger declaredReferenceLogger = results["2"].Logger;
+            rootLogger.ErrorCount.ShouldBe(0);
+            declaredReferenceLogger.ErrorCount.ShouldBe(0);
+            rootLogger.Errors.ShouldBeEmpty();
+            declaredReferenceLogger.Errors.ShouldBeEmpty();
+            rootLogger.AllBuildEvents.OfType<ProjectStartedEventArgs>().Count().ShouldBe(2);
+            declaredReferenceLogger.AllBuildEvents.OfType<ProjectStartedEventArgs>().Count().ShouldBe(2);
+
+            // One undeclared reference was built in isolation violation.
+            declaredReferenceLogger.AssertMessageCount("Message from undeclared reference", 1);
+            declaredReferenceLogger.AssertMessageCount("MSB4260", 1);
+
+            // The declared reference project's output item is that of the undeclared reference
+            // project.
+            declaredReferenceBuildResults[0]["DeclaredReferenceTarget"].Items.Length.ShouldBe(1);
+            declaredReferenceBuildResults[0]["DeclaredReferenceTarget"].Items[0].ItemSpec.ShouldBe("Foo.cs");
+            rootBuildResults[0]["BuildDeclaredReference"].Items.Length.ShouldBe(0);
         }
 
         [Theory]
@@ -385,7 +509,7 @@ private void AssertBuild(
             bool buildUndeclaredReference = false,
             bool addContinueOnError = false,
             bool excludeReferencesFromConstraints = false,
-            bool isolateProjects = true,
+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True,
             Func<string, string> projectReferenceModifier = null,
             Func<string, string> msbuildOnDeclaredReferenceModifier = null)
         {
@@ -411,7 +535,7 @@ private void AssertBuild(
             File.WriteAllText(undeclaredReferenceFile, _undeclaredReference);
 
             var buildParameters = _buildParametersPrototype.Clone();
-            buildParameters.IsolateProjects = isolateProjects;
+            buildParameters.ProjectIsolationMode = isolateProjects;
 
             using (var buildManagerSession = new Helpers.BuildManagerSession(_env, buildParameters))
             {
@@ -474,7 +598,7 @@ public void SkippedTargetsShouldNotTriggerCacheMissEnforcement()
 </Project>
 ".Cleanup()).Path;
 
-            _buildParametersPrototype.IsolateProjects.ShouldBeTrue();
+            _buildParametersPrototype.ProjectIsolationMode.ShouldBe(ProjectIsolationMode.True);
             var buildParameters = _buildParametersPrototype.Clone();
 
             using (var buildManagerSession = new Helpers.BuildManagerSession(_env, buildParameters))
diff --git a/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs b/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
index 95538f1b5ac..0577e926dae 100644
--- a/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
+++ b/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Graph.UnitTests
 {
     public class ParallelWorkSet_Tests
     {
-        private class ParallelWorkSetTestCase
+        private sealed class ParallelWorkSetTestCase
         {
             internal int DegreeOfParallelism { get; set; }
             internal List<WorkItem> WorkItemsToAdd { get; set; } = new List<WorkItem>();
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 841a48e4e64..d07f8cc81fc 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -1277,6 +1277,114 @@ public void GetTargetsListProjectReferenceTargetsOrDefaultComplexPropagation()
             }
         }
 
+        [Fact]
+        public void GetTargetsListSupportsTargetsMarkedSkipNonexistentTargets()
+        {
+            ProjectGraph graph = Helpers.CreateProjectGraph(
+                _env,
+                dependencyEdges: new Dictionary<int, int[]>
+                {
+                    { 1, new[] { 2 } },
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>
+                {
+                    {
+                        1,
+                        @"
+                          <ItemGroup>
+                            <ProjectReferenceTargets Include='Build' Targets='NonskippableTarget1' />
+                            <ProjectReferenceTargets Include='Build' Targets='NonskippableTarget2' SkipNonexistentTargets='false' />
+                            <ProjectReferenceTargets Include='Build' Targets='SkippableExistingTarget;SkippableNonexistentTarget' SkipNonexistentTargets='true' />
+                            <ProjectReference Include='2.proj' />
+                          </ItemGroup>
+                          <Target Name='Build'>
+                            <MSBuild Projects='2.proj' Targets='NonskippableTarget1; NonskippableTarget2' />
+                            <MSBuild Projects='2.proj' Targets='SkippableExistingTarget;SkippableNonexistentTarget' SkipNonexistentTargets='true' />
+                          </Target>"
+                    },
+                    {
+                        2,
+                        @"<Target Name='NonskippableTarget1'>
+                          </Target>
+                          <Target Name='NonskippableTarget2'>
+                          </Target>
+                          <Target Name='SkippableExistingTarget'>
+                          </Target>"
+                    },
+                });
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(entryProjectTargets: new[] { "Build" });
+            targetLists[key: GetFirstNodeWithProjectNumber(graph: graph, projectNum: 1)].ShouldBe(expected: new[] { "Build" });
+            targetLists[key: GetFirstNodeWithProjectNumber(graph: graph, projectNum: 2)].ShouldBe(expected: new[] { "NonskippableTarget1", "NonskippableTarget2", "SkippableExistingTarget" });
+            Dictionary<string, (BuildResult Result, MockLogger Logger)> results = ResultCacheBasedBuilds_Tests.BuildUsingCaches(
+                _env,
+                topoSortedNodes: graph.ProjectNodesTopologicallySorted,
+                generateCacheFiles: true,
+                expectedNodeBuildOutput: new Dictionary<ProjectGraphNode, string[]>(),
+                outputCaches: new Dictionary<ProjectGraphNode, string>(),
+                assertBuildResults: false,
+                targetListsPerNode: targetLists);
+            foreach (KeyValuePair<string, (BuildResult Result, MockLogger Logger)> result in results)
+            {
+                result.Value.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            }
+        }
+
+        [Fact]
+        public void SkipNonexistentTargetsDoesNotHideMissedTargetResults()
+        {
+            ProjectGraph graph = Helpers.CreateProjectGraph(
+                env: _env,
+                dependencyEdges: new Dictionary<int, int[]>
+                {
+                    { 1, new[] { 2 } },
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>
+                {
+                    {
+                        1,
+                        @"
+                          <ItemGroup>
+                            <!-- NonskippableTarget2 is not specified in the target protocol, which should cause the build to fail -->
+                            <ProjectReferenceTargets Include='Build' Targets='NonskippableTarget1;SkippableExistingTarget;SkippableNonexistentTarget' SkipNonexistentTargets='true' />
+                            <ProjectReference Include='2.proj' />
+                          </ItemGroup>
+                          <Target Name='Build'>
+                            <MSBuild Projects='2.proj' Targets='NonskippableTarget1;NonskippableTarget2;SkippableExistingTarget;SkippableNonexistentTarget' SkipNonexistentTargets='true' />
+                          </Target>"
+                    },
+                    {
+                        2,
+                        @"<Target Name='NonskippableTarget1'>
+                          </Target>
+                          <Target Name='NonskippableTarget2'>
+                          </Target>
+                          <Target Name='SkippableExistingTarget'>
+                          </Target>"
+                    },
+                });
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(entryProjectTargets: new[] { "Build" });
+            targetLists[key: GetFirstNodeWithProjectNumber(graph: graph, projectNum: 1)].ShouldBe(expected: new[] { "Build" });
+            targetLists[key: GetFirstNodeWithProjectNumber(graph: graph, projectNum: 2)].ShouldBe(expected: new[] { "NonskippableTarget1", "SkippableExistingTarget" });
+            Dictionary<string, (BuildResult Result, MockLogger Logger)> results = ResultCacheBasedBuilds_Tests.BuildUsingCaches(
+                env: _env,
+                topoSortedNodes: graph.ProjectNodesTopologicallySorted,
+                generateCacheFiles: true,
+                expectedNodeBuildOutput: new Dictionary<ProjectGraphNode, string[]>(),
+                outputCaches: new Dictionary<ProjectGraphNode, string>(),
+                assertBuildResults: false,
+                targetListsPerNode: targetLists);
+            results["2"].Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            BuildResult project1BuildResult = results["1"].Result;
+            project1BuildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+            MockLogger project1MockLogger = results["1"].Logger;
+            project1MockLogger.ErrorCount.ShouldBe(1);
+            string project1ErrorMessage = project1MockLogger.Errors.First().Message;
+            project1ErrorMessage.ShouldContain("MSB4252");
+            project1ErrorMessage.ShouldContain("1.proj");
+            project1ErrorMessage.ShouldContain("2.proj");
+            project1ErrorMessage.ShouldContain(" with the (NonskippableTarget1;NonskippableTarget2;SkippableExistingTarget;SkippableNonexistentTarget) target(s) but the build result for the built project is not in the engine cache");
+        }
+
         [Fact]
         public void ReferencedMultitargetingEntryPointNodeTargetListContainsDefaultTarget()
         {
diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index 59309f030e8..65ab4706791 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using System.IO;
 using System.Linq;
 using System.Text;
@@ -298,7 +299,7 @@ public void BuildProjectGraphUsingCaches(Dictionary<int, int[]> edges)
             var outputCaches = new OutputCacheDictionary();
 
             // Build unchanged project files using caches.
-            BuildUsingCaches(topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
+            BuildUsingCaches(_env, topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
 
             // Change the project files to remove all items.
             var collection = _env.CreateProjectCollection().Collection;
@@ -318,6 +319,7 @@ public void BuildProjectGraphUsingCaches(Dictionary<int, int[]> edges)
 
             // Build again using the first caches. Project file changes from references should not be visible.
             BuildUsingCaches(
+                _env,
                 topoSortedNodes,
                 expectedOutput,
                 outputCaches,
@@ -343,7 +345,7 @@ public void OutputCacheShouldNotContainInformationFromInputCaches()
 
             var outputCaches = new OutputCacheDictionary();
 
-            BuildUsingCaches(topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
+            BuildUsingCaches(_env, topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
 
             var rootNode = topoSortedNodes.First(n => Path.GetFileNameWithoutExtension(n.ProjectInstance.FullPath) == "1");
             var outputCache = outputCaches[rootNode];
@@ -381,12 +383,12 @@ public void MissingResultFromCacheShouldErrorDueToIsolatedBuildCacheEnforcement(
 
             var outputCaches = new OutputCacheDictionary();
 
-            BuildUsingCaches(topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
+            BuildUsingCaches(_env, topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: true);
 
             // remove cache for project 3 to cause a cache miss
             outputCaches.Remove(expectedOutput.Keys.First(n => ProjectNumber(n) == "3"));
 
-            var results = BuildUsingCaches(topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: false, assertBuildResults: false);
+            var results = BuildUsingCaches(_env, topoSortedNodes, expectedOutput, outputCaches, generateCacheFiles: false, assertBuildResults: false);
 
             results["3"].Result.OverallResult.ShouldBe(BuildResultCode.Success);
             results["2"].Result.OverallResult.ShouldBe(BuildResultCode.Success);
@@ -408,21 +410,27 @@ public void MissingResultFromCacheShouldErrorDueToIsolatedBuildCacheEnforcement(
         /// When it is false, it uses the filled in <param name="outputCaches"/> and <param name="expectedNodeBuildOutput"/> to simulate a fully cached build.
         /// 
         /// </summary>
+        /// <param name="env">The test environment under which to run.</param>
         /// <param name="topoSortedNodes"></param>
         /// <param name="expectedNodeBuildOutput"></param>
         /// <param name="outputCaches"></param>
         /// <param name="generateCacheFiles"></param>
         /// <param name="assertBuildResults"></param>
         /// <param name="expectedOutputProducer"></param>
+        /// <param name="targetListsPerNode">The list of targets to build per node.</param>
+        /// <param name="projectIsolationMode">The isolation mode under which to run.</param>
         /// <returns></returns>
-        private Dictionary<string, (BuildResult Result, MockLogger Logger)> BuildUsingCaches(
+        internal static Dictionary<string, (BuildResult Result, MockLogger Logger)> BuildUsingCaches(
+            TestEnvironment env,
             IReadOnlyCollection<ProjectGraphNode> topoSortedNodes,
             ExpectedNodeBuildOutput expectedNodeBuildOutput,
             OutputCacheDictionary outputCaches,
             bool generateCacheFiles,
             bool assertBuildResults = true,
             // (current node, expected output dictionary) -> actual expected output for current node
-            Func<ProjectGraphNode, ExpectedNodeBuildOutput, string[]> expectedOutputProducer = null)
+            Func<ProjectGraphNode, ExpectedNodeBuildOutput, string[]> expectedOutputProducer = null,
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetListsPerNode = null,
+            ProjectIsolationMode projectIsolationMode = ProjectIsolationMode.False)
         {
             expectedOutputProducer ??= ((node, expectedOutputs) => expectedOutputs[node]);
 
@@ -445,23 +453,25 @@ public void MissingResultFromCacheShouldErrorDueToIsolatedBuildCacheEnforcement(
 
                 var buildParameters = new BuildParameters
                 {
-                    InputResultsCacheFiles = cacheFilesForReferences
+                    InputResultsCacheFiles = cacheFilesForReferences,
+                    ProjectIsolationMode = projectIsolationMode,
                 };
 
                 if (generateCacheFiles)
                 {
-                    outputCaches[node] = _env.DefaultTestDirectory.CreateFile($"OutputCache-{ProjectNumber(node)}").Path;
+                    outputCaches[node] = env.DefaultTestDirectory.CreateFile($"OutputCache-{ProjectNumber(node)}").Path;
                     buildParameters.OutputResultsCacheFile = outputCaches[node];
                 }
 
-                var logger = new MockLogger();
+                var logger = new MockLogger(env.Output);
 
                 buildParameters.Loggers = new[] { logger };
 
                 var result = BuildProjectFileUsingBuildManager(
                     node.ProjectInstance.FullPath,
                     null,
-                    buildParameters);
+                    buildParameters,
+                    targetListsPerNode?[node] != null ? targetListsPerNode?[node] : node.ProjectInstance.DefaultTargets);
 
                 results[ProjectNumber(node)] = (result, logger);
 
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index 3a9ebdb07c2..c20134ea1dc 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -13,6 +13,7 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -241,8 +242,7 @@ public void TestContradictoryAffinityCausesException_Any()
         /// <summary>
         /// Test which ensures that setting an Any affinity for a project with a remote host object does not throws.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void TestNoContradictoryRemoteHostObjectAffinity()
         {
@@ -295,8 +295,7 @@ public void TestNonContraditcoryHostObjectAllowed_Any()
         /// <summary>
         /// Test which ensures the remote host object cannot affect a project which has the Any affinity specifically set.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void TestRegisterRemoteHostObjectNoAffect_Any2()
         {
@@ -334,8 +333,7 @@ public void TestNonContraditcoryHostObjectAllowed_InProc()
         /// <summary>
         /// Test which ensures the affinity for a project can be changed once the in process host object is registered
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void TestAffinityChangeAfterRegisterInprocessHostObject()
         {
@@ -444,8 +442,7 @@ public void UnloadedProjectDiscardsHostServices()
         /// <summary>
         /// Tests that register overrides existing reigsted remote host object.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         [SupportedOSPlatform("windows")]
         public void TestRegisterOverrideExistingRegisted()
         {
@@ -519,7 +516,7 @@ public Project LoadDummyProject(string fileName)
         /// <summary>
         /// A dummy host object class.
         /// </summary>
-        private class TestHostObject : ITaskHost
+        private sealed class TestHostObject : ITaskHost
         {
             /// <summary>
             /// Constructor.
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index a12c2382a58..546c42c9432 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -340,7 +340,6 @@ public void GetSubToolsetVersion()
         /// environment
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetSubToolsetVersion_FromEnvironment()
         {
             string originalVisualStudioVersion = Environment.GetEnvironmentVariable("VisualStudioVersion");
diff --git a/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
index f47190d3d78..fdde22a05a9 100644
--- a/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
@@ -1,12 +1,12 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Execution;
 using System;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
-using Microsoft.Build.BackEnd;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
index 4424a3d53e3..92ee3d73435 100644
--- a/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
@@ -1,12 +1,12 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Execution;
 using System;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
-using Microsoft.Build.BackEnd;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
index 2f8177e5a78..1f575aecfbc 100644
--- a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
@@ -7,8 +7,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
-using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 using static Microsoft.Build.Engine.UnitTests.TestComparers.ProjectInstanceModelTestComparers;
+using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Instance/TaskItem_Tests.cs b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
index b3f48f86480..da4fd47acd2 100644
--- a/src/Build.UnitTests/Instance/TaskItem_Tests.cs
+++ b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
@@ -2,20 +2,20 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Construction;
-using Microsoft.Build.UnitTests.BackEnd;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using System.Xml;
-using Microsoft.Build.Framework;
 using System.IO;
 using System.Linq;
-using Xunit;
+using System.Xml;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests.BackEnd;
 using Shouldly;
+using Xunit;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/InternalEngineHelpers.cs b/src/Build.UnitTests/InternalEngineHelpers.cs
index 8ba8868dbd1..4751aef9ddd 100644
--- a/src/Build.UnitTests/InternalEngineHelpers.cs
+++ b/src/Build.UnitTests/InternalEngineHelpers.cs
@@ -36,7 +36,7 @@ public static ProjectOptions CreateProjectOptionsWithResolver(SdkResolver resolv
             };
         }
 
-        internal class ConfigurableMockSdkResolver : SdkResolver
+        internal sealed class ConfigurableMockSdkResolver : SdkResolver
         {
             private readonly Dictionary<string, SdkResult> _resultMap;
             private readonly Func<SdkReference, SdkResolverContext, SdkResultFactory, Framework.SdkResult> _resolveFunc;
@@ -128,7 +128,7 @@ private SdkResult CloneSdkResult(SdkResult sdkResult)
             }
         }
 
-        internal class FileBasedMockSdkResolver : SdkResolver
+        internal sealed class FileBasedMockSdkResolver : SdkResolver
         {
             private readonly Dictionary<string, string> _mapping;
 
diff --git a/src/Build.UnitTests/LogFormatter_Tests.cs b/src/Build.UnitTests/LogFormatter_Tests.cs
index 972239729b9..8ecb8e65e4a 100644
--- a/src/Build.UnitTests/LogFormatter_Tests.cs
+++ b/src/Build.UnitTests/LogFormatter_Tests.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.BackEnd.Logging;
 using System.Globalization;
+using Microsoft.Build.BackEnd.Logging;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/LoggerDescription_Tests.cs b/src/Build.UnitTests/LoggerDescription_Tests.cs
index f65fcbbdb01..345df4543cc 100644
--- a/src/Build.UnitTests/LoggerDescription_Tests.cs
+++ b/src/Build.UnitTests/LoggerDescription_Tests.cs
@@ -3,10 +3,9 @@
 
 using System;
 using System.IO;
-
 using Microsoft.Build.Framework;
-using Xunit;
 using Microsoft.Build.Logging;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/LoggerException_Tests.cs b/src/Build.UnitTests/LoggerException_Tests.cs
index 4fb900a4cce..6a052a7ee27 100644
--- a/src/Build.UnitTests/LoggerException_Tests.cs
+++ b/src/Build.UnitTests/LoggerException_Tests.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Framework;
+using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Framework;
 using Xunit;
-using System.Runtime.Serialization.Formatters.Binary;
 
 #nullable disable
 
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index d017ffbe1cc..f7493839380 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -76,6 +76,7 @@
     <Compile Include="..\Shared\UnitTests\ResourceUtilities_Tests.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -118,6 +119,12 @@
     <Compile Include="..\Shared\UnitTests\ImmutableDictionary_Tests.cs" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' == 'Full' and '$(MonoBuild)' != 'true'">
       <Link>Collections\ImmutableDictionary_Tests.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\UnitTests\LongPathSupportDisabledFactAttribute.cs">
+      <Link>Shared\LongPathSupportDisabledFactAttribute.cs</Link>
+    </Compile>
+    <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs">
+      <Link>RequiresSymbolicLinksFactAttribute.cs</Link>
+    </Compile>
 
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
diff --git a/src/Build.UnitTests/MockLoggingContext.cs b/src/Build.UnitTests/MockLoggingContext.cs
index 44edbc48ce0..2b0887a1fd6 100644
--- a/src/Build.UnitTests/MockLoggingContext.cs
+++ b/src/Build.UnitTests/MockLoggingContext.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Engine.UnitTests
     /// <summary>
     /// Logging context and helpers for evaluation logging
     /// </summary>
-    internal class MockLoggingContext : LoggingContext
+    internal sealed class MockLoggingContext : LoggingContext
     {
         public MockLoggingContext(ILoggingService loggingService, BuildEventContext eventContext) : base(loggingService, eventContext)
         {
diff --git a/src/Build.UnitTests/MockTask.cs b/src/Build.UnitTests/MockTask.cs
index ffaa49409d5..f1a646fdd8a 100644
--- a/src/Build.UnitTests/MockTask.cs
+++ b/src/Build.UnitTests/MockTask.cs
@@ -421,7 +421,7 @@ public bool Execute()
     /// Custom implementation of ITaskItem for unit testing
     /// Just TaskItem would work fine, but why not test a custom type as well
     /// </summary>
-    internal class MyTaskItem : ITaskItem
+    internal sealed class MyTaskItem : ITaskItem
     {
         #region ITaskItem Members
 
diff --git a/src/Build.UnitTests/Scanner_Tests.cs b/src/Build.UnitTests/Scanner_Tests.cs
index 97d786fd815..b2b705d2c22 100644
--- a/src/Build.UnitTests/Scanner_Tests.cs
+++ b/src/Build.UnitTests/Scanner_Tests.cs
@@ -2,10 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-
-using Microsoft.Build.Framework;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
diff --git a/src/Build.UnitTests/SolutionFileBuilder.cs b/src/Build.UnitTests/SolutionFileBuilder.cs
index 9c2a4823123..73774529835 100644
--- a/src/Build.UnitTests/SolutionFileBuilder.cs
+++ b/src/Build.UnitTests/SolutionFileBuilder.cs
@@ -21,7 +21,7 @@
 
 namespace Microsoft.Build.Engine.UnitTests
 {
-    internal class SolutionFileBuilder
+    internal sealed class SolutionFileBuilder
     {
         public static readonly IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatformsDefaults = new[]
         {
diff --git a/src/Build.UnitTests/TargetsFile_Test.cs b/src/Build.UnitTests/TargetsFile_Test.cs
index 3012894b25c..364c68081a9 100644
--- a/src/Build.UnitTests/TargetsFile_Test.cs
+++ b/src/Build.UnitTests/TargetsFile_Test.cs
@@ -3,9 +3,8 @@
 
 using System;
 using System.IO;
-
-using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Shared;
 using Xunit;
 
 #nullable disable
diff --git a/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs b/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
index b7fd3234b21..d4a1e60404f 100644
--- a/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
+++ b/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
@@ -257,7 +257,7 @@ public int GetHashCode(ProjectItemDefinitionInstance obj)
         }
     }
 
-    internal class TargetSpecificationComparer : IEqualityComparer<TargetSpecification>
+    internal sealed class TargetSpecificationComparer : IEqualityComparer<TargetSpecification>
     {
         public bool Equals(TargetSpecification x, TargetSpecification y)
         {
diff --git a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
index e09aba6d6c1..380d2b73bb6 100644
--- a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
+++ b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
@@ -13,9 +13,9 @@
 
 namespace Microsoft.Build.Engine.UnitTests.TestComparers
 {
-    internal class TaskRegistryComparers
+    internal sealed class TaskRegistryComparers
     {
-        internal class TaskRegistryComparer : IEqualityComparer<TaskRegistry>
+        internal sealed class TaskRegistryComparer : IEqualityComparer<TaskRegistry>
         {
             public bool Equals(TaskRegistry x, TaskRegistry y)
             {
@@ -39,7 +39,7 @@ public int GetHashCode(TaskRegistry obj)
             }
         }
 
-        internal class RegisteredTaskRecordComparer : IEqualityComparer<TaskRegistry.RegisteredTaskRecord>
+        internal sealed class RegisteredTaskRecordComparer : IEqualityComparer<TaskRegistry.RegisteredTaskRecord>
         {
             public bool Equals(TaskRegistry.RegisteredTaskRecord x, TaskRegistry.RegisteredTaskRecord y)
             {
@@ -67,7 +67,7 @@ public int GetHashCode(TaskRegistry.RegisteredTaskRecord obj)
             }
         }
 
-        internal class ParamterGroupAndTaskBodyComparer : IEqualityComparer<TaskRegistry.RegisteredTaskRecord.ParameterGroupAndTaskElementRecord>
+        internal sealed class ParamterGroupAndTaskBodyComparer : IEqualityComparer<TaskRegistry.RegisteredTaskRecord.ParameterGroupAndTaskElementRecord>
         {
             public bool Equals(
                 TaskRegistry.RegisteredTaskRecord.ParameterGroupAndTaskElementRecord x,
@@ -94,7 +94,7 @@ public int GetHashCode(TaskRegistry.RegisteredTaskRecord.ParameterGroupAndTaskEl
             }
         }
 
-        internal class TaskPropertyInfoComparer : IEqualityComparer<TaskPropertyInfo>
+        internal sealed class TaskPropertyInfoComparer : IEqualityComparer<TaskPropertyInfo>
         {
             public bool Equals(TaskPropertyInfo x, TaskPropertyInfo y)
             {
@@ -112,7 +112,7 @@ public int GetHashCode(TaskPropertyInfo obj)
             }
         }
 
-        public class ToolsetComparer : IEqualityComparer<Toolset>
+        public sealed class ToolsetComparer : IEqualityComparer<Toolset>
         {
             public bool Equals(Toolset x, Toolset y)
             {
diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 00162f01816..d6ded939073 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -3,27 +3,21 @@
 
 using System;
 using System.Collections;
-
+using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Shared;
-
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
 using CommunicationsUtilities = Microsoft.Build.Internal.CommunicationsUtilities;
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using MSBuildApp = Microsoft.Build.CommandLine.MSBuildApp;
 using ProjectCollection = Microsoft.Build.Evaluation.ProjectCollection;
-
 using Toolset = Microsoft.Build.Evaluation.Toolset;
-
-
 using XmlDocumentWithLocation = Microsoft.Build.Construction.XmlDocumentWithLocation;
 using XmlElementWithLocation = Microsoft.Build.Construction.XmlElementWithLocation;
 
-using Xunit;
-using System.Collections.Generic;
-using System.IO;
-using Xunit.Abstractions;
-using Shouldly;
-
 #nullable disable
 
 namespace Microsoft.Build.UnitTests
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 532f9b3e778..9787ffe4a5c 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -256,6 +256,12 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private IEnumerable<DeferredBuildMessage> _deferredBuildMessages;
 
+        /// <summary>
+        /// Build telemetry to be send when this build ends.
+        /// <remarks>Could be null</remarks>
+        /// </summary>
+        private BuildTelemetry _buildTelemetry;
+
         private ProjectCacheService _projectCacheService;
 
         private bool _hasProjectCacheServiceInitializedVsScenario;
@@ -504,11 +510,22 @@ public void BeginBuild(BuildParameters parameters)
 
                 // Initiate build telemetry data
                 DateTime now = DateTime.UtcNow;
-                KnownTelemetry.BuildTelemetry ??= new()
+
+                // Acquire it from static variable so we can apply data collected up to this moment
+                _buildTelemetry = KnownTelemetry.PartialBuildTelemetry;
+                if (_buildTelemetry != null)
                 {
-                    StartAt = now,
-                };
-                KnownTelemetry.BuildTelemetry.InnerStartAt = now;
+                    KnownTelemetry.PartialBuildTelemetry = null;
+                }
+                else
+                {
+                    _buildTelemetry = new()
+                    {
+                        StartAt = now,
+                    };
+                }
+
+                _buildTelemetry.InnerStartAt = now;
 
                 if (BuildParameters.DumpOpportunisticInternStats)
                 {
@@ -525,9 +542,14 @@ public void BeginBuild(BuildParameters parameters)
                 // Initialize additional build parameters.
                 _buildParameters.BuildId = GetNextBuildId();
 
-                if (_buildParameters.UsesCachedResults())
+                if (_buildParameters.UsesCachedResults() && parameters.ProjectIsolationMode == ProjectIsolationMode.False)
                 {
-                    _buildParameters.IsolateProjects = true;
+                    // If input or output caches are used and the project isolation mode is set to
+                    // ProjectIsolationMode.False, then set it to ProjectIsolationMode.True. The explicit
+                    // condition on ProjectIsolationMode is necessary to ensure that, if we're using input
+                    // or output caches and ProjectIsolationMode is set to ProjectIsolationMode.MessageUponIsolationViolation,
+                    // ProjectIsolationMode isn't changed to ProjectIsolationMode.True.
+                    _buildParameters.ProjectIsolationMode = ProjectIsolationMode.True;
                 }
 
                 if (_buildParameters.UsesOutputCache() && string.IsNullOrWhiteSpace(_buildParameters.OutputResultsCacheFile))
@@ -819,10 +841,10 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)
 
                 var newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);
 
-                if (KnownTelemetry.BuildTelemetry != null)
+                if (_buildTelemetry != null)
                 {
-                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectFullPath;
-                    KnownTelemetry.BuildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
+                    _buildTelemetry.Project ??= requestData.ProjectFullPath;
+                    _buildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
                 }
 
                 _buildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
@@ -847,12 +869,12 @@ public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)
 
                 var newSubmission = new GraphBuildSubmission(this, GetNextSubmissionId(), requestData);
 
-                if (KnownTelemetry.BuildTelemetry != null)
+                if (_buildTelemetry != null)
                 {
                     // Project graph can have multiple entry points, for purposes of identifying event for same build project,
                     // we believe that including only one entry point will provide enough precision.
-                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectGraphEntryPoints?.FirstOrDefault().ProjectFile;
-                    KnownTelemetry.BuildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
+                    _buildTelemetry.Project ??= requestData.ProjectGraphEntryPoints?.FirstOrDefault().ProjectFile;
+                    _buildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
                 }
 
                 _graphBuildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
@@ -998,13 +1020,13 @@ public void EndBuild()
 
                         loggingService.LogBuildFinished(_overallBuildSuccess);
 
-                        if (KnownTelemetry.BuildTelemetry != null)
+                        if (_buildTelemetry != null)
                         {
-                            KnownTelemetry.BuildTelemetry.FinishedAt = DateTime.UtcNow;
-                            KnownTelemetry.BuildTelemetry.Success = _overallBuildSuccess;
-                            KnownTelemetry.BuildTelemetry.Version = ProjectCollection.Version;
-                            KnownTelemetry.BuildTelemetry.DisplayVersion = ProjectCollection.DisplayVersion;
-                            KnownTelemetry.BuildTelemetry.FrameworkName = NativeMethodsShared.FrameworkName;
+                            _buildTelemetry.FinishedAt = DateTime.UtcNow;
+                            _buildTelemetry.Success = _overallBuildSuccess;
+                            _buildTelemetry.Version = ProjectCollection.Version;
+                            _buildTelemetry.DisplayVersion = ProjectCollection.DisplayVersion;
+                            _buildTelemetry.FrameworkName = NativeMethodsShared.FrameworkName;
 
                             string host = null;
                             if (BuildEnvironmentState.s_runningInVisualStudio)
@@ -1019,12 +1041,12 @@ public void EndBuild()
                             {
                                 host = "VSCode";
                             }
-                            KnownTelemetry.BuildTelemetry.Host = host;
+                            _buildTelemetry.Host = host;
 
-                            KnownTelemetry.BuildTelemetry.UpdateEventProperties();
-                            loggingService.LogTelemetry(buildEventContext: null, KnownTelemetry.BuildTelemetry.EventName, KnownTelemetry.BuildTelemetry.Properties);
+                            _buildTelemetry.UpdateEventProperties();
+                            loggingService.LogTelemetry(buildEventContext: null, _buildTelemetry.EventName, _buildTelemetry.Properties);
                             // Clean telemetry to make it ready for next build submission.
-                            KnownTelemetry.BuildTelemetry = null;
+                            _buildTelemetry = null;
                         }
                     }
 
@@ -1053,8 +1075,11 @@ public void EndBuild()
 
             void SerializeCaches()
             {
-                var errorMessage = CacheSerialization.SerializeCaches(_configCache, _resultsCache, _buildParameters.OutputResultsCacheFile);
-
+                string errorMessage = CacheSerialization.SerializeCaches(
+                    _configCache,
+                    _resultsCache,
+                    _buildParameters.OutputResultsCacheFile,
+                    _buildParameters.ProjectIsolationMode);
                 if (!string.IsNullOrEmpty(errorMessage))
                 {
                     LogErrorAndShutdown(errorMessage);
@@ -1389,7 +1414,7 @@ private void LoadSolutionIntoConfiguration(BuildRequestConfiguration config, Bui
                 ((IBuildComponentHost)this).LoggingService,
                 request.BuildEventContext,
                 false /* loaded by solution parser*/,
-                config.TargetNames,
+                config.RequestedTargets,
                 SdkResolverService,
                 request.SubmissionId);
 
@@ -2328,23 +2353,17 @@ private void HandleConfigurationRequest(int node, BuildRequestConfiguration unre
         /// </summary>
         private void HandleResult(int node, BuildResult result)
         {
-            // Update cache with the default and initial targets, as needed.
+            // Update cache with the default, initial, and project targets, as needed.
             BuildRequestConfiguration configuration = _configCache[result.ConfigurationId];
             if (result.DefaultTargets != null)
             {
-                // If the result has Default and Initial targets, we populate the configuration cache with them if it
+                // If the result has Default, Initial, and project targets, we populate the configuration cache with them if it
                 // doesn't already have entries.  This can happen if we created a configuration based on a request from
                 // an external node, but hadn't yet received a result since we may not have loaded the Project locally
-                // and thus wouldn't know what the default and initial targets were.
-                if (configuration.ProjectDefaultTargets == null)
-                {
-                    configuration.ProjectDefaultTargets = result.DefaultTargets;
-                }
-
-                if (configuration.ProjectInitialTargets == null)
-                {
-                    configuration.ProjectInitialTargets = result.InitialTargets;
-                }
+                // and thus wouldn't know what the default, initial, and project targets were.
+                configuration.ProjectDefaultTargets ??= result.DefaultTargets;
+                configuration.ProjectInitialTargets ??= result.InitialTargets;
+                configuration.ProjectTargets ??= result.ProjectTargets;
             }
 
             IEnumerable<ScheduleResponse> response = _scheduler.ReportResult(node, result);
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index a91ec457ef8..db8405646a1 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -5,8 +5,8 @@
 using System.Collections.Generic;
 using System.Collections.ObjectModel;
 using System.Diagnostics.CodeAnalysis;
-using System.Threading;
 using System.Globalization;
+using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -212,7 +212,7 @@ public class BuildParameters : ITranslatable
 
         private bool _interactive;
 
-        private bool _isolateProjects;
+        private ProjectIsolationMode _projectIsolationMode;
 
         private string[] _inputResultsCacheFiles;
 
@@ -298,7 +298,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             WarningsAsMessages = other.WarningsAsMessages == null ? null : new HashSet<string>(other.WarningsAsMessages, StringComparer.OrdinalIgnoreCase);
             _projectLoadSettings = other._projectLoadSettings;
             _interactive = other._interactive;
-            _isolateProjects = other._isolateProjects;
+            _projectIsolationMode = other.ProjectIsolationMode;
             _inputResultsCacheFiles = other._inputResultsCacheFiles;
             _outputResultsCacheFile = other._outputResultsCacheFile;
             DiscardBuildResults = other.DiscardBuildResults;
@@ -760,17 +760,26 @@ public bool Interactive
         }
 
         /// <summary>
-        /// Gets or sets a value indicating whether projects should build in isolation.
+        /// Gets or sets a value indicating the isolation mode to use.
         /// </summary>
+        /// <remarks>
+        /// Kept for API backwards compatibility.
+        /// </remarks>
         public bool IsolateProjects
         {
-            get => _isolateProjects;
-            set => _isolateProjects = value;
+            get => ProjectIsolationMode == ProjectIsolationMode.True;
+            set => ProjectIsolationMode = value ? ProjectIsolationMode.True : ProjectIsolationMode.False;
         }
 
+        /// <summary>
+        /// Gets or sets a value indicating the isolation mode to use.
+        /// </summary>
+        public ProjectIsolationMode ProjectIsolationMode { get => _projectIsolationMode; set => _projectIsolationMode = value; }
+
         /// <summary>
         /// Input cache files that MSBuild will use to read build results from.
-        /// Setting this also turns on isolated builds.
+        /// If the isolation mode is set to <see cref="ProjectIsolationMode.False"/>,
+        /// this sets the isolation mode to <see cref="ProjectIsolationMode.True"/>.
         /// </summary>
         public string[] InputResultsCacheFiles
         {
@@ -780,7 +789,8 @@ public string[] InputResultsCacheFiles
 
         /// <summary>
         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.
-        /// Setting this also turns on isolated builds.
+        /// If the isolation mode is set to <see cref="ProjectIsolationMode.False"/>,
+        /// this sets the isolation mode to <see cref="ProjectIsolationMode.True"/>.
         /// </summary>
         public string OutputResultsCacheFile
         {
@@ -828,7 +838,7 @@ public BuildParameters Clone()
 
         internal bool UsesInputCaches() => InputResultsCacheFiles != null;
 
-        internal bool SkippedResultsDoNotCauseCacheMiss() => IsolateProjects;
+        internal bool SkippedResultsDoNotCauseCacheMiss() => ProjectIsolationMode == ProjectIsolationMode.True;
 
         /// <summary>
         /// Implementation of the serialization mechanism.
@@ -861,7 +871,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _logInitialPropertiesAndItems);
             translator.TranslateEnum(ref _projectLoadSettings, (int)_projectLoadSettings);
             translator.Translate(ref _interactive);
-            translator.Translate(ref _isolateProjects);
+            translator.TranslateEnum(ref _projectIsolationMode, (int)_projectIsolationMode);
 
             // ProjectRootElementCache is not transmitted.
             // ResetCaches is not transmitted.
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 1a50e0248e0..ca2147dfae2 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Globalization;
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
-using System.Globalization;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/BuildManager/CacheSerialization.cs b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
index d1864fef845..3fa59bfe28b 100644
--- a/src/Build/BackEnd/BuildManager/CacheSerialization.cs
+++ b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
@@ -13,7 +13,11 @@ namespace Microsoft.Build.Execution
 {
     internal static class CacheSerialization
     {
-        public static string SerializeCaches(IConfigCache configCache, IResultsCache resultsCache, string outputCacheFile)
+        public static string SerializeCaches(
+            IConfigCache configCache,
+            IResultsCache resultsCache,
+            string outputCacheFile,
+            ProjectIsolationMode projectIsolationMode)
         {
             ErrorUtilities.VerifyThrowInternalNull(outputCacheFile, nameof(outputCacheFile));
 
@@ -83,6 +87,19 @@ public static string SerializeCaches(IConfigCache configCache, IResultsCache res
                         resultsCacheToSerialize = tempResultsCacheToSerialize;
                     }
 
+                    if (projectIsolationMode == ProjectIsolationMode.MessageUponIsolationViolation)
+                    {
+                        int smallestConfigId = configCacheToSerialize.GetSmallestConfigId();
+
+                        // In MessageUponIsolationViolation mode, only keep the TargetResults for
+                        // top-level targets to mitigate the chances of an isolation-
+                        // violating target on a dependency project using incorrect state
+                        // due to its dependency on a cached target whose side effects would
+                        // not be taken into account. (E.g., the definition of a property.)
+                        resultsCacheToSerialize.GetResultsForConfiguration(smallestConfigId)
+                            .KeepSpecificTargetResults(configCacheToSerialize[smallestConfigId].RequestedTargets);
+                    }
+
                     translator.Translate(ref configCacheToSerialize);
                     translator.Translate(ref resultsCacheToSerialize);
                 }
diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index d6454f5c8c5..cb4464c8460 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -2,11 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
-using System.Collections.Generic;
-using System.Threading.Tasks;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs b/src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs
new file mode 100644
index 00000000000..31d5273b51b
--- /dev/null
+++ b/src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs
@@ -0,0 +1,34 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Execution
+{
+    /// <summary>
+    /// The isolation mode to use.
+    /// </summary>
+    public enum ProjectIsolationMode
+    {
+        /// <summary>
+        /// Do not enable isolation.
+        /// </summary>
+        False,
+
+        /// <summary>
+        /// Enable isolation and log isolation violations as messages.
+        /// </summary>
+        /// <remarks>
+        /// Under this mode, only the results from top-level targets
+        /// are serialized if the -orc switch is supplied to mitigate
+        /// the chances of an isolation-violating target on a
+        /// dependency project using incorrect state due to its
+        /// dependency on a cached target whose side effects would
+        /// not be taken into account. (E.g., the definition of a property.)
+        /// </remarks>
+        MessageUponIsolationViolation,
+
+        /// <summary>
+        /// Enable isolation and log isolation violations as errors.
+        /// </summary>
+        True,
+    }
+}
diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index e655c52b8aa..9f4a4cdb9e2 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -174,9 +174,9 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
             try
             {
                 bool serverIsAlreadyRunning = ServerIsRunning();
-                if (KnownTelemetry.BuildTelemetry != null)
+                if (KnownTelemetry.PartialBuildTelemetry != null)
                 {
-                    KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? "hot" : "cold";
+                    KnownTelemetry.PartialBuildTelemetry.InitialServerState = serverIsAlreadyRunning ? "hot" : "cold";
                 }
                 if (!serverIsAlreadyRunning)
                 {
@@ -531,6 +531,7 @@ private bool TryLaunchServer()
 
         private bool TrySendShutdownCommand()
         {
+            CommunicationsUtilities.Trace("Sending shutdown command to server.");
             _packetPump.ServerWillDisconnect();
             return TrySendPacket(() => new NodeBuildComplete(false /* no node reuse */));
         }
@@ -552,14 +553,14 @@ private ServerNodeBuildCommand GetServerNodeBuildCommand()
             // We remove env variable used to invoke MSBuild server as that might be equal to 1, so we do not get an infinite recursion here. 
             envVars.Remove(Traits.UseMSBuildServerEnvVarName);
 
-            Debug.Assert(KnownTelemetry.BuildTelemetry == null || KnownTelemetry.BuildTelemetry.StartAt.HasValue, "BuildTelemetry.StartAt was not initialized!");
+            Debug.Assert(KnownTelemetry.PartialBuildTelemetry == null || KnownTelemetry.PartialBuildTelemetry.StartAt.HasValue, "BuildTelemetry.StartAt was not initialized!");
 
-            PartialBuildTelemetry? partialBuildTelemetry = KnownTelemetry.BuildTelemetry == null
+            PartialBuildTelemetry? partialBuildTelemetry = KnownTelemetry.PartialBuildTelemetry == null
                 ? null
                 : new PartialBuildTelemetry(
-                    startedAt: KnownTelemetry.BuildTelemetry.StartAt.GetValueOrDefault(),
-                    initialServerState: KnownTelemetry.BuildTelemetry.InitialServerState,
-                    serverFallbackReason: KnownTelemetry.BuildTelemetry.ServerFallbackReason);
+                    startedAt: KnownTelemetry.PartialBuildTelemetry.StartAt.GetValueOrDefault(),
+                    initialServerState: KnownTelemetry.PartialBuildTelemetry.InitialServerState,
+                    serverFallbackReason: KnownTelemetry.PartialBuildTelemetry.ServerFallbackReason);
 
             return new ServerNodeBuildCommand(
                         _commandLine,
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 99fff072659..250d4b4c8bf 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -809,6 +809,7 @@ private void EvaluateRequestStates()
                     // own cache.
                     completedEntry.Result.DefaultTargets = configuration.ProjectDefaultTargets;
                     completedEntry.Result.InitialTargets = configuration.ProjectInitialTargets;
+                    completedEntry.Result.ProjectTargets = configuration.ProjectTargets;
                 }
 
                 TraceEngine("ERS: Request is now {0}({1}) (nr {2}) has had its builder cleaned up.", completedEntry.Request.GlobalRequestId, completedEntry.Request.ConfigurationId, completedEntry.Request.NodeRequestId);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index 6ac44d35291..3e926e2e75e 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -2,12 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
 using System.Diagnostics;
-
+using System.IO;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
index 8d7d6cac205..fe0362d6fba 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using BuildResult = Microsoft.Build.Execution.BuildResult;
+using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
index ce4d7e531a0..a0dcaa0c89f 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
@@ -50,7 +50,7 @@ public BuildRequestConfiguration this[int configId]
         {
             get
             {
-                if (_override.HasConfiguration(configId))
+                if (HasConfigurationInOverrideCache(configId))
                 {
 #if DEBUG
                     ErrorUtilities.VerifyThrow(!CurrentCache.HasConfiguration(configId), "caches should not overlap");
@@ -115,7 +115,7 @@ public BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata
 
         public bool HasConfiguration(int configId)
         {
-            var overrideHasConfiguration = _override.HasConfiguration(configId);
+            bool overrideHasConfiguration = HasConfigurationInOverrideCache(configId);
 
             if (overrideHasConfiguration)
             {
@@ -125,7 +125,12 @@ public bool HasConfiguration(int configId)
                 return overrideHasConfiguration;
             }
 
-            return _override.HasConfiguration(configId) || CurrentCache.HasConfiguration(configId);
+            return overrideHasConfiguration || CurrentCache.HasConfiguration(configId);
+        }
+
+        public bool HasConfigurationInOverrideCache(int configId)
+        {
+            return _override.HasConfiguration(configId);
         }
 
         public void ClearConfigurations()
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index fd85472b1be..f02decfdc60 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index ed7bcc24057..f05aa33f9f6 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
-using System.Threading;
 using System.Diagnostics;
+using System.Threading;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
 {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index c587d69211f..c5f2aa282f8 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -5,11 +5,11 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
-using Microsoft.Build.Shared;
+using System.Linq;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
-using System.Linq;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 3b88899af8b..c9223838572 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -286,6 +286,8 @@ bool TryReuseAnyFromPossibleRunningNodes(int nodeId)
                     {
                         // Connection successful, use this node.
                         CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeToReuse.Id);
+                        string msg = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("NodeReused", nodeId, nodeToReuse.Id);
+                        _componentHost.LoggingService.LogBuildEvent(new BuildMessageEventArgs(msg, null, null, MessageImportance.Low));
 
                         CreateNodeContext(nodeId, nodeToReuse, nodeStream);
                         return true;
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index c892dc79e2e..03a45a0e6bb 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -3,13 +3,12 @@
 
 using System;
 using System.Collections.Generic;
-using System.IO;
 using System.Diagnostics;
+using System.IO;
+using System.Linq;
 using System.Threading;
-
-using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
-using System.Linq;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
index 914acb1de57..ad7730289d5 100644
--- a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
 using System.Collections.Generic;
 using System.Diagnostics;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 874159feb38..bcbc7eac430 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
+using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 0906d1eaae4..a3b78640194 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -7,9 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
-
-using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 1998da2733d..0f80c152ba5 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -8,6 +8,8 @@
 using System.Linq;
 using System.Reflection;
 using System.Threading;
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
@@ -1589,8 +1591,20 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
         /// <exception cref="Exception">Any exception which is a ExceptionHandling.IsCriticalException will not be wrapped</exception>
         private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
         {
+            ILogger UnwrapLoggerType(ILogger log)
+            {
+                while (log is ProjectCollection.ReusableLogger reusableLogger)
+                {
+                    log = reusableLogger.OriginalLogger;
+                }
+
+                return log;
+            }
+
             try
             {
+                using var assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(this, AssemblyLoadingContext.LoggerInitialization, UnwrapLoggerType(logger).GetType());
+
                 INodeLogger nodeLogger = logger as INodeLogger;
                 if (nodeLogger != null)
                 {
diff --git a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
index d3b442b7dea..36138422b00 100644
--- a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
index 8b2b9694b85..7bff292f0e1 100644
--- a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
@@ -2,12 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using System.Collections;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index 576827e292f..2728ed5592e 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
new file mode 100644
index 00000000000..61f4bcb31fb
--- /dev/null
+++ b/src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs
@@ -0,0 +1,174 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+#if FEATURE_APPDOMAIN
+using System.Collections.Generic;
+using System.Linq;
+#endif
+using System.Reflection;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.BackEnd.Components.RequestBuilder
+{
+    internal sealed class AssemblyLoadsTracker : MarshalByRefObject, IDisposable
+    {
+#if FEATURE_APPDOMAIN
+        private static readonly List<AssemblyLoadsTracker> s_instances = new();
+#endif
+        private readonly LoggingContext? _loggingContext;
+        private readonly LoggingService? _loggingService;
+        private readonly AssemblyLoadingContext _context;
+        private readonly string? _initiator;
+        private readonly AppDomain _appDomain;
+
+        private AssemblyLoadsTracker(
+            LoggingContext? loggingContext,
+            LoggingService? loggingService,
+            AssemblyLoadingContext context,
+            Type? initiator,
+            AppDomain appDomain)
+        {
+            _loggingContext = loggingContext;
+            _loggingService = loggingService;
+            _context = context;
+            _initiator = initiator?.FullName;
+            _appDomain = appDomain;
+        }
+
+        public static IDisposable StartTracking(
+            LoggingContext loggingContext,
+            AssemblyLoadingContext context,
+            Type? initiator,
+            AppDomain? appDomain = null)
+            => StartTracking(loggingContext, null, context, initiator, null, appDomain);
+
+        public static IDisposable StartTracking(
+            LoggingContext loggingContext,
+            AssemblyLoadingContext context,
+            string? initiator = null,
+            AppDomain? appDomain = null)
+            => StartTracking(loggingContext, null, context, null, initiator, appDomain);
+
+        public static IDisposable StartTracking(
+            LoggingService loggingService,
+            AssemblyLoadingContext context,
+            Type initiator,
+            AppDomain? appDomain = null)
+            => StartTracking(null, loggingService, context, initiator, null, appDomain);
+
+
+
+#if FEATURE_APPDOMAIN
+        public static void StopTracking(AppDomain appDomain)
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && !appDomain.IsDefaultAppDomain())
+            {
+                lock (s_instances)
+                {
+                    foreach (AssemblyLoadsTracker tracker in s_instances.Where(t => t._appDomain == appDomain))
+                    {
+                        tracker.StopTracking();
+                    }
+
+                    s_instances.RemoveAll(t => t._appDomain == appDomain);
+                }
+            }
+        }
+#endif
+
+        public void Dispose()
+        {
+            StopTracking();
+        }
+
+        private static bool IsBuiltinType(string? typeName)
+        {
+            if (string.IsNullOrEmpty(typeName))
+            {
+                return false;
+            }
+
+            return typeName!.StartsWith("Microsoft.Build", StringComparison.Ordinal) ||
+                   typeName.StartsWith("Microsoft.NET.Build", StringComparison.Ordinal) ||
+                   typeName.StartsWith("Microsoft.NET.Sdk", StringComparison.Ordinal);
+        }
+
+        private static IDisposable StartTracking(
+            LoggingContext? loggingContext,
+            LoggingService? loggingService,
+            AssemblyLoadingContext context,
+            Type? initiatorType,
+            string? initiatorName,
+            AppDomain? appDomain)
+        {
+            if (
+                // Feature is not enabled
+                !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) ||
+                (
+                    // We do not want to load all assembly loads (including those triggered by builtin types)
+                    !Traits.Instance.LogAllAssemblyLoads &&
+                    (
+                        // Load will be initiated by internal type - so we are not interested in those
+                        initiatorType?.Assembly == Assembly.GetExecutingAssembly()
+                        ||
+                        IsBuiltinType(initiatorType?.FullName)
+                        ||
+                        IsBuiltinType(initiatorName)
+                    )
+                )
+            )
+            {
+                return EmptyDisposable.Instance;
+            }
+
+            var tracker = new AssemblyLoadsTracker(loggingContext, loggingService, context, initiatorType, appDomain ?? AppDomain.CurrentDomain);
+#if FEATURE_APPDOMAIN
+            if (appDomain != null && !appDomain.IsDefaultAppDomain())
+            {
+                lock (s_instances)
+                {
+                    s_instances.Add(tracker);
+                }
+            }
+#endif
+            tracker.StartTracking();
+            return tracker;
+        }
+
+        private void StartTracking()
+        {
+            _appDomain.AssemblyLoad += CurrentDomainOnAssemblyLoad;
+        }
+
+        private void StopTracking()
+        {
+            _appDomain.AssemblyLoad -= CurrentDomainOnAssemblyLoad;
+        }
+
+        private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs args)
+        {
+            string? assemblyName = args.LoadedAssembly.FullName;
+            string assemblyPath = args.LoadedAssembly.Location;
+            Guid mvid = args.LoadedAssembly.ManifestModule.ModuleVersionId;
+            string? appDomainDescriptor = _appDomain.IsDefaultAppDomain()
+                ? null
+                : $"{_appDomain.Id}|{_appDomain.FriendlyName}";
+
+
+            AssemblyLoadBuildEventArgs buildArgs = new(_context, _initiator, assemblyName, assemblyPath, mvid, appDomainDescriptor)
+            {
+                BuildEventContext = _loggingContext?.BuildEventContext ?? BuildEventContext.Invalid
+            };
+            _loggingContext?.LogBuildEvent(buildArgs);
+            _loggingService?.LogBuildEvent(buildArgs);
+        }
+
+        private class EmptyDisposable : IDisposable
+        {
+            public static readonly IDisposable Instance = new EmptyDisposable();
+            public void Dispose() { }
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
index a985b059b81..c5852c97d30 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
@@ -3,12 +3,11 @@
 
 using System;
 using System.Collections.Generic;
-
 using Microsoft.Build.Collections;
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
index 9c8542a8888..2cce591c070 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Execution;
-using Microsoft.Build.Collections;
 using System.Threading.Tasks;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
index 946b66ddf91..51fe0d9196d 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
-using Microsoft.Build.Execution;
 using System.Threading.Tasks;
+using Microsoft.Build.Execution;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
index 4406501a860..74d4f09524a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
 using System.Reflection;
-using Microsoft.Build.Execution;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 28607329499..8dd00b2148b 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -5,17 +5,17 @@
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared.FileSystem;
-using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using EngineFileUtilities = Microsoft.Build.Internal.EngineFileUtilities;
+using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
-using Microsoft.Build.BackEnd.Logging;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
index 7f230112204..0c250da8f00 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
@@ -3,11 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
index 69fe0121518..9ead103fe08 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
@@ -4,12 +4,11 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Microsoft.Build.Shared;
 using System.Threading;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Collections;
-
+using Microsoft.Build.Shared;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 607e0f576e4..b4b97933ac7 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1,6 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Concurrent;
+using System.Collections.Generic;
+using System.Globalization;
+using System.IO;
+using System.Linq;
+using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -10,14 +18,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-using System;
-using System.Collections.Concurrent;
-using System.Collections.Generic;
-using System.Globalization;
-using System.IO;
-using System.Linq;
-using System.Threading;
-using System.Threading.Tasks;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
 
@@ -362,12 +362,14 @@ public async Task<BuildResult[]> BuildProjects(string[] projectFiles, PropertyDi
                 BuildRequestData data = new BuildRequestData(projectFiles[i], properties[i].ToDictionary(), explicitToolsVersion, targets, null);
 
                 BuildRequestConfiguration config = new BuildRequestConfiguration(data, _componentHost.BuildParameters.DefaultToolsVersion);
-
+                ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
+                bool skipStaticGraphIsolationConstraints = (isolateProjects != ProjectIsolationMode.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))
+                    || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation;
                 requests[i] = new FullyQualifiedBuildRequest(
                     config: config,
                     targets: targets,
                     resultsNeeded: waitForResults,
-                    skipStaticGraphIsolationConstraints: _componentHost.BuildParameters.IsolateProjects && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath),
+                    skipStaticGraphIsolationConstraints: skipStaticGraphIsolationConstraints,
                     flags: skipNonexistentTargets
                         ? BuildRequestDataFlags.SkipNonexistentTargets
                         : BuildRequestDataFlags.None);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 9bc4f3de097..537660af9bf 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -1,21 +1,21 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Collections;
-using Microsoft.Build.Eventing;
-using Microsoft.Build.Execution;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
-using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Eventing;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
index 9f0e9097a14..8409e8135ca 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using ElementLocation = Microsoft.Build.Construction.ElementLocation;
-using Microsoft.Build.Shared;
 using System.Diagnostics;
+using Microsoft.Build.Shared;
+using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index 65f1f4cbb51..bb99f7d5237 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -20,7 +20,7 @@
 namespace Microsoft.Build.BackEnd
 {
     using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
-
+    using ItemVectorPartition = System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>;
     // ItemVectorPartitionCollection is designed to contains a set of project items which have possibly undergone transforms.
     // The outer dictionary it usually keyed by item type, so if items originally came from 
     // an expression like @(Foo), the outer dictionary would have a key of "Foo" in it.
@@ -29,7 +29,6 @@ namespace Microsoft.Build.BackEnd
     // the inner dictionary would have a key of "@(Foo->'%(Filename).obj')", in which would be 
     // contained a list of the items which were created/transformed using that pattern.    
     using ItemVectorPartitionCollection = System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>>;
-    using ItemVectorPartition = System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>;
 
     /// <summary>
     /// Enumeration of the results of target dependency analysis.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 2fbe1580634..b83da0aa245 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -13,6 +13,7 @@
 #endif
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Eventing;
@@ -661,6 +662,8 @@ private async Task<WorkUnitResult> InitializeAndExecuteTask(TaskLoggingContext t
                 ProjectErrorUtilities.ThrowInvalidProject(_targetChildInstance.Location, "TaskDeclarationOrUsageError", _taskNode.Name);
             }
 
+            using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(taskLoggingContext, AssemblyLoadingContext.TaskRun, (_taskExecutionHost as TaskExecutionHost)?.TaskInstance?.GetType());
+
             try
             {
                 // UNDONE: Move this and the task host.
@@ -1024,7 +1027,8 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
 
         private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
         {
-            if (!_componentHost.BuildParameters.IsolateProjects)
+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
+            if (isolateProjects == ProjectIsolationMode.False || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation)
             {
                 return null;
             }
@@ -1051,11 +1055,7 @@ private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
                     !(declaredProjects.Contains(normalizedMSBuildProject)
                       || _buildRequestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(normalizedMSBuildProject)))
                 {
-                    if (undeclaredProjects == null)
-                    {
-                        undeclaredProjects = new List<string>(projectReferenceItems.Count);
-                    }
-
+                    undeclaredProjects ??= new List<string>(projectReferenceItems.Count);
                     undeclaredProjects.Add(normalizedMSBuildProject);
                 }
             }
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
index 142b8021262..33d0de2f88c 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 2dea902ef71..0c11f731cb5 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -364,9 +364,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
             _schedulingData.EventTime = DateTime.UtcNow;
             List<ScheduleResponse> responses = new List<ScheduleResponse>();
             TraceScheduler("Reporting result from node {0} for request {1}, parent {2}.", nodeId, result.GlobalRequestId, result.ParentGlobalRequestId);
-
-            // Record these results to the cache.
-            _resultsCache.AddResult(result);
+            RecordResultToCurrentCacheIfConfigNotInOverrideCache(result);
 
             if (result.NodeRequestId == BuildRequest.ResultsTransferNodeRequestId)
             {
@@ -1961,13 +1959,15 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
         {
             emitNonErrorLogs = _ => { };
 
-            var isIsolatedBuild = _componentHost.BuildParameters.IsolateProjects;
+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;
             var configCache = (IConfigCache)_componentHost.GetComponent(BuildComponentType.ConfigCache);
 
             // do not check root requests as nothing depends on them
-            if (!isIsolatedBuild || request.IsRootRequest || request.SkipStaticGraphIsolationConstraints)
+            if (isolateProjects == ProjectIsolationMode.False || request.IsRootRequest || request.SkipStaticGraphIsolationConstraints
+                || SkipNonexistentTargetsIfExistentTargetsHaveResults(request))
             {
-                if (isIsolatedBuild && request.SkipStaticGraphIsolationConstraints)
+                bool logComment = ((isolateProjects == ProjectIsolationMode.True || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation) && request.SkipStaticGraphIsolationConstraints);
+                if (logComment)
                 {
                     // retrieving the configs is not quite free, so avoid computing them eagerly
                     var configs = GetConfigurations();
@@ -1976,14 +1976,14 @@ private bool CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot(int nodeF
                             NewBuildEventContext(),
                             MessageImportance.Normal,
                             "SkippedConstraintsOnRequest",
-                            configs.parentConfig.ProjectFullPath,
-                            configs.requestConfig.ProjectFullPath);
+                            configs.ParentConfig.ProjectFullPath,
+                            configs.RequestConfig.ProjectFullPath);
                 }
 
                 return true;
             }
 
-            var (requestConfig, parentConfig) = GetConfigurations();
+            (BuildRequestConfiguration requestConfig, BuildRequestConfiguration parentConfig) = GetConfigurations();
 
             // allow self references (project calling the msbuild task on itself, potentially with different global properties)
             if (parentConfig.ProjectFullPath.Equals(requestConfig.ProjectFullPath, StringComparison.OrdinalIgnoreCase))
@@ -2022,20 +2022,20 @@ BuildEventContext NewBuildEventContext()
                     BuildEventContext.InvalidTaskId);
             }
 
-            (BuildRequestConfiguration requestConfig, BuildRequestConfiguration parentConfig) GetConfigurations()
+            (BuildRequestConfiguration RequestConfig, BuildRequestConfiguration ParentConfig) GetConfigurations()
             {
-                var buildRequestConfiguration = configCache[request.ConfigurationId];
+                BuildRequestConfiguration buildRequestConfiguration = configCache[request.ConfigurationId];
 
                 // Need the parent request. It might be blocked or executing; check both.
-                var parentRequest = _schedulingData.BlockedRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId)
-                                    ?? _schedulingData.ExecutingRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId);
+                SchedulableRequest parentRequest = _schedulingData.BlockedRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId)
+                    ?? _schedulingData.ExecutingRequests.FirstOrDefault(r => r.BuildRequest.GlobalRequestId == request.ParentGlobalRequestId);
 
                 ErrorUtilities.VerifyThrowInternalNull(parentRequest, nameof(parentRequest));
                 ErrorUtilities.VerifyThrow(
                     configCache.HasConfiguration(parentRequest.BuildRequest.ConfigurationId),
                     "All non root requests should have a parent with a loaded configuration");
 
-                var parentConfiguration = configCache[parentRequest.BuildRequest.ConfigurationId];
+                BuildRequestConfiguration parentConfiguration = configCache[parentRequest.BuildRequest.ConfigurationId];
                 return (buildRequestConfiguration, parentConfiguration);
             }
 
@@ -2043,6 +2043,57 @@ string ConcatenateGlobalProperties(BuildRequestConfiguration configuration)
             {
                 return string.Join("; ", configuration.GlobalProperties.Select<ProjectPropertyInstance, string>(p => $"{p.Name}={p.EvaluatedValue}"));
             }
+
+            bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildRequest)
+            {
+                // Return early if the top-level target(s) of this build request weren't requested to be skipped if nonexistent.
+                if ((buildRequest.BuildRequestDataFlags & BuildRequestDataFlags.SkipNonexistentTargets) != BuildRequestDataFlags.SkipNonexistentTargets)
+                {
+                    return false;
+                }
+
+                BuildResult requestResults = _resultsCache.GetResultsForConfiguration(buildRequest.ConfigurationId);
+
+                // On a self-referenced build, cache misses are allowed.
+                if (requestResults == null)
+                {
+                    return false;
+                }
+
+                // A cache miss on at least one existing target without results is disallowed,
+                // as it violates isolation constraints.
+                foreach (string target in request.Targets)
+                {
+                    if (_configCache[buildRequest.ConfigurationId]
+                        .ProjectTargets
+                        .Contains(target) &&
+                        !requestResults.HasResultsForTarget(target))
+                    {
+                        return false;
+                    }
+                }
+
+                // A cache miss on nonexistent targets on the reference is allowed, given the request
+                // to skip nonexistent targets.
+                return true;
+            }
+        }
+
+        /// <summary>
+        /// Records the result to the current cache if its config isn't in the override cache.
+        /// </summary>
+        /// <param name="result">The result to potentially record in the current cache.</param>
+        internal void RecordResultToCurrentCacheIfConfigNotInOverrideCache(BuildResult result)
+        {
+            // Record these results to the current cache only if their config isn't in the
+            // override cache, which can happen if we are building in the project isolation mode
+            // ProjectIsolationMode.MessageUponIsolationViolation, and the received result was built by an
+            // isolation-violating dependency project.
+            if (_configCache is not ConfigCacheWithOverride configCacheWithOverride
+                || !configCacheWithOverride.HasConfigurationInOverrideCache(result.ConfigurationId))
+            {
+                _resultsCache.AddResult(result);
+            }
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
index ea8229ef246..e28c86db050 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
index ff41aea3c33..022b6acf9d0 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
@@ -5,10 +5,10 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs b/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
index e9239f1d124..8ce9065b9d0 100644
--- a/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
@@ -1,10 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.IO;
-
 using SdkResolverBase = Microsoft.Build.Framework.SdkResolver;
 using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
diff --git a/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs b/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
index 03806f0f311..e0ecb46e353 100644
--- a/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Threading;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
-using System;
-using System.Threading;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
index 037279f85bd..289abf71f6d 100644
--- a/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
-using System;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
index 1df10d45a37..8b937f7c5e6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System;
-using System.Collections.Generic;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
index 78a3f1e42a2..40dc8ffdf2b 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Concurrent;
+using System.Threading;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System;
-using System.Collections.Concurrent;
-using System.Threading;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index e6743f911e7..68a14ae42a9 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.IO;
 using System.Text.RegularExpressions;
 using System.Xml;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 275e2b6bd03..8b5f572381a 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -1,19 +1,19 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System;
-using System.IO;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Reflection;
-using Microsoft.Build.Eventing;
+using System.IO;
 using System.Linq;
+using System.Reflection;
 using System.Text.RegularExpressions;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Eventing;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
index f95bc780ca1..d341db1add7 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using Microsoft.Build.Framework;
 using SdkReference = Microsoft.Build.Framework.SdkReference;
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
index d4341ee5f1c..56c31a7c5e4 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
@@ -1,9 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System.Collections.Generic;
-
+using Microsoft.Build.Framework;
 using SdkReference = Microsoft.Build.Framework.SdkReference;
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
diff --git a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
index 0e2ee6b45c8..efa6765d159 100644
--- a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index c143daf038e..3b0b1600905 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -2,17 +2,17 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.Globalization;
 using System.Threading;
+using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
-using Microsoft.Build.BackEnd.Components.Caching;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 266b8189db5..c0c3531ff34 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -2,22 +2,22 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
+using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
-using System.IO;
 using System.Globalization;
+using System.IO;
 using System.Threading;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
-using Microsoft.Build.BackEnd.Components.Caching;
-using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Shared;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index cc23c012e8e..f419172153b 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -7,11 +7,11 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Internal;
-using Microsoft.Build.Execution;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework.Telemetry;
+using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental
 {
@@ -369,15 +369,13 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             ConsoleConfiguration.Provider = command.ConsoleConfiguration;
 
             // Initiate build telemetry
-            if (KnownTelemetry.BuildTelemetry == null)
-            {
-                KnownTelemetry.BuildTelemetry = new BuildTelemetry();
-            }
             if (command.PartialBuildTelemetry != null)
             {
-                KnownTelemetry.BuildTelemetry.StartAt = command.PartialBuildTelemetry.StartedAt;
-                KnownTelemetry.BuildTelemetry.InitialServerState = command.PartialBuildTelemetry.InitialServerState;
-                KnownTelemetry.BuildTelemetry.ServerFallbackReason = command.PartialBuildTelemetry.ServerFallbackReason;
+                BuildTelemetry buildTelemetry = KnownTelemetry.PartialBuildTelemetry ??= new BuildTelemetry();
+
+                buildTelemetry.StartAt = command.PartialBuildTelemetry.StartedAt;
+                buildTelemetry.InitialServerState = command.PartialBuildTelemetry.InitialServerState;
+                buildTelemetry.ServerFallbackReason = command.PartialBuildTelemetry.ServerFallbackReason;
             }
 
             // Also try our best to increase chance custom Loggers which use Console static members will work as expected.
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index a2c3132444d..428eea19656 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -4,10 +4,10 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Linq;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index b1616f43858..7fb5d26c006 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -3,17 +3,17 @@
 
 using System;
 using System.Collections.Generic;
-using System.Globalization;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Execution;
-using Microsoft.Build.Collections;
 using System.Diagnostics;
+using System.Globalization;
 using System.IO;
 using System.Linq;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Globbing;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
@@ -107,6 +107,11 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// </summary>
         private List<string> _projectDefaultTargets;
 
+        /// <summary>
+        /// The defined targets for the project.
+        /// </summary>
+        private HashSet<string> _projectTargets;
+
         /// <summary>
         /// This is the lookup representing the current project items and properties 'state'.
         /// </summary>
@@ -138,7 +143,7 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// <summary>
         /// The target names that were requested to execute.
         /// </summary>
-        internal IReadOnlyCollection<string> TargetNames { get; }
+        internal IReadOnlyCollection<string> RequestedTargets { get; }
 
         /// <summary>
         /// Initializes a configuration from a BuildRequestData structure.  Used by the BuildManager.
@@ -170,7 +175,7 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
             _explicitToolsVersionSpecified = data.ExplicitToolsVersionSpecified;
             _toolsVersion = ResolveToolsVersion(data, defaultToolsVersion);
             _globalProperties = data.GlobalPropertiesDictionary;
-            TargetNames = new List<string>(data.TargetNames);
+            RequestedTargets = new List<string>(data.TargetNames);
 
             // The following information only exists when the request is populated with an existing project.
             if (data.ProjectInstance != null)
@@ -178,7 +183,7 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
                 _project = data.ProjectInstance;
                 _projectInitialTargets = data.ProjectInstance.InitialTargets;
                 _projectDefaultTargets = data.ProjectInstance.DefaultTargets;
-
+                _projectTargets = GetProjectTargets(data.ProjectInstance.Targets);
                 if (data.PropertiesToTransfer != null)
                 {
                     _transferredProperties = new List<ProjectPropertyInstance>();
@@ -215,6 +220,7 @@ internal BuildRequestConfiguration(int configId, ProjectInstance instance)
             _project = instance;
             _projectInitialTargets = instance.InitialTargets;
             _projectDefaultTargets = instance.DefaultTargets;
+            _projectTargets = GetProjectTargets(instance.Targets);
             IsCacheable = false;
         }
 
@@ -231,13 +237,14 @@ private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
             _transferredProperties = other._transferredProperties;
             _projectDefaultTargets = other._projectDefaultTargets;
             _projectInitialTargets = other._projectInitialTargets;
+            _projectTargets = other._projectTargets;
             _projectFullPath = other._projectFullPath;
             _toolsVersion = other._toolsVersion;
             _explicitToolsVersionSpecified = other._explicitToolsVersionSpecified;
             _globalProperties = other._globalProperties;
             IsCacheable = other.IsCacheable;
             _configId = configId;
-            TargetNames = other.TargetNames;
+            RequestedTargets = other.RequestedTargets;
         }
 
         /// <summary>
@@ -404,9 +411,11 @@ private void SetProjectBasedState(ProjectInstance project)
             // Clear these out so the other accessors don't complain.  We don't want to generally enable resetting these fields.
             _projectDefaultTargets = null;
             _projectInitialTargets = null;
+            _projectTargets = null;
 
             ProjectDefaultTargets = _project.DefaultTargets;
             ProjectInitialTargets = _project.InitialTargets;
+            ProjectTargets = GetProjectTargets(_project.Targets);
 
             if (IsCached)
             {
@@ -548,6 +557,23 @@ public List<string> ProjectDefaultTargets
             }
         }
 
+        /// <summary>
+        /// Gets or sets the targets defined for the project.
+        /// </summary>
+        internal HashSet<string> ProjectTargets
+        {
+            [DebuggerStepThrough]
+            get => _projectTargets;
+            [DebuggerStepThrough]
+            set
+            {
+                ErrorUtilities.VerifyThrow(
+                    _projectTargets == null,
+                    "Targets cannot be reset once set.");
+                _projectTargets = value;
+            }
+        }
+
         /// <summary>
         /// Returns the node packet type
         /// </summary>
@@ -879,6 +905,7 @@ internal void TranslateForFutureUse(ITranslator translator)
             translator.Translate(ref _explicitToolsVersionSpecified);
             translator.Translate(ref _projectDefaultTargets);
             translator.Translate(ref _projectInitialTargets);
+            translator.Translate(ref _projectTargets);
             translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
         }
 
@@ -961,6 +988,13 @@ private bool InternalEquals(BuildRequestConfiguration other)
             }
         }
 
+        /// <summary>
+        /// Gets the set of project targets for this <see cref="BuildRequestConfiguration"/>.
+        /// </summary>
+        /// <param name="projectTargets">The project targets to transform into a set.</param>
+        /// <returns>The set of project targets for this <see cref="BuildRequestConfiguration"/>.</returns>
+        private HashSet<string> GetProjectTargets(IDictionary<string, ProjectTargetInstance> projectTargets) => projectTargets.Keys.ToHashSet();
+
         /// <summary>
         /// Determines what the real tools version is.
         /// </summary>
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 414eb216ed6..ca443451880 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -5,6 +5,7 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -117,6 +118,8 @@ public class BuildResult : INodePacket, IBuildResults
 
         private string _schedulerInducedError;
 
+        private HashSet<string> _projectTargets;
+
         /// <summary>
         /// Constructor for serialization.
         /// </summary>
@@ -228,6 +231,7 @@ internal BuildResult(BuildResult result, int nodeRequestId)
             _circularDependency = result._circularDependency;
             _initialTargets = result._initialTargets;
             _defaultTargets = result._defaultTargets;
+            _projectTargets = result._projectTargets;
             _baseOverallResult = result.OverallResult == BuildResultCode.Success;
         }
 
@@ -244,6 +248,7 @@ internal BuildResult(BuildResult result, int submissionId, int configurationId,
             _circularDependency = result._circularDependency;
             _initialTargets = result._initialTargets;
             _defaultTargets = result._defaultTargets;
+            _projectTargets = result._projectTargets;
             _baseOverallResult = result.OverallResult == BuildResultCode.Success;
         }
 
@@ -433,6 +438,17 @@ internal List<string> DefaultTargets
             { _defaultTargets = value; }
         }
 
+        /// <summary>
+        /// The defined targets for the project associated with this build result.
+        /// </summary>
+        internal HashSet<string> ProjectTargets
+        {
+            [DebuggerStepThrough]
+            get => _projectTargets;
+            [DebuggerStepThrough]
+            set => _projectTargets = value;
+        }
+
         /// <summary>
         /// Container used to transport errors from the scheduler (issued while computing a build result)
         /// to the TaskHost that has the proper logging context (project id, target id, task id, file location)
@@ -480,6 +496,25 @@ public void AddResultsForTarget(string target, TargetResult result)
             _resultsByTarget[target] = result;
         }
 
+        /// <summary>
+        /// Keep the results only for targets in <paramref name="targetsToKeep"/>.
+        /// </summary>
+        /// <param name="targetsToKeep">The targets whose results to keep.</param>
+        internal void KeepSpecificTargetResults(IReadOnlyCollection<string> targetsToKeep)
+        {
+            ErrorUtilities.VerifyThrow(
+                targetsToKeep.Count > 0,
+                $"{nameof(targetsToKeep)} should contain at least one target.");
+
+            foreach (string target in _resultsByTarget.Keys)
+            {
+                if (!targetsToKeep.Contains(target))
+                {
+                    _ = _resultsByTarget.TryRemove(target, out _);
+                }
+            }
+        }
+
         /// <summary>
         /// Merges the specified results with the results contained herein.
         /// </summary>
@@ -537,6 +572,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _nodeRequestId);
             translator.Translate(ref _initialTargets);
             translator.Translate(ref _defaultTargets);
+            translator.Translate(ref _projectTargets);
             translator.Translate(ref _circularDependency);
             translator.TranslateException(ref _requestException);
             translator.TranslateDictionary(ref _resultsByTarget, TargetResult.FactoryForDeserialization, CreateTargetResultDictionary);
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index 21634fb0f4e..3136450178d 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -3,14 +3,14 @@
 
 using System;
 using System.Diagnostics;
-using System.IO;
 using System.Globalization;
+using System.IO;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Collections;
+using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 389f8c6459b..eed1d5872a3 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -152,7 +152,8 @@ internal TaskExecutionHost(IBuildComponentHost host)
         }
 
         /// <summary>
-        /// Constructor, for unit testing only.  
+        /// Initializes a new instance of the <see cref="TaskExecutionHost"/> class
+        /// for unit testing only.
         /// </summary>
         internal TaskExecutionHost()
         {
diff --git a/src/Build/Collections/MultiDictionary.cs b/src/Build/Collections/MultiDictionary.cs
index 7a1492aa855..4c1243c7010 100644
--- a/src/Build/Collections/MultiDictionary.cs
+++ b/src/Build/Collections/MultiDictionary.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections;
-using Microsoft.Build.Shared;
+using System.Collections.Generic;
 using System.Diagnostics;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index 71ddf8eb4b4..5b20c1f59ba 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -5,8 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index c480f2cc80e..eeedd7c4c1b 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -5,12 +5,12 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Diagnostics.CodeAnalysis;
 using System.Diagnostics.Contracts;
 using System.Runtime.Serialization;
-using System.Diagnostics.CodeAnalysis;
 using System.Security;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
 
 /*
     ==================================================================================================================
diff --git a/src/Build/Construction/ProjectChooseElement.cs b/src/Build/Construction/ProjectChooseElement.cs
index 5914776c11f..39d9fc749ac 100644
--- a/src/Build/Construction/ProjectChooseElement.cs
+++ b/src/Build/Construction/ProjectChooseElement.cs
@@ -2,12 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
+using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Collections;
 
 #nullable disable
 
diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index bc4edf2addd..b6208f51108 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
+using System.Xml;
 using Microsoft.Build.Framework;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 5f0c2d45ada..4eb8f8edb91 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -3,12 +3,12 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using System.Xml;
-using System.Diagnostics;
+using Microsoft.Build.Internal;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Internal;
 
 #nullable disable
 
diff --git a/src/Build/Construction/ProjectExtensionsElement.cs b/src/Build/Construction/ProjectExtensionsElement.cs
index 9f0058fcbda..3f9f6541d5a 100644
--- a/src/Build/Construction/ProjectExtensionsElement.cs
+++ b/src/Build/Construction/ProjectExtensionsElement.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Diagnostics;
+using System.Xml;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Construction/ProjectItemDefinitionElement.cs b/src/Build/Construction/ProjectItemDefinitionElement.cs
index be712263f49..dc8fa52003f 100644
--- a/src/Build/Construction/ProjectItemDefinitionElement.cs
+++ b/src/Build/Construction/ProjectItemDefinitionElement.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
index f8f4d2aad05..892b33cb8d6 100644
--- a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
+++ b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/ProjectItemElement.cs b/src/Build/Construction/ProjectItemElement.cs
index 2d9a2e0adfd..bb31b120e9f 100644
--- a/src/Build/Construction/ProjectItemElement.cs
+++ b/src/Build/Construction/ProjectItemElement.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/ProjectOutputElement.cs b/src/Build/Construction/ProjectOutputElement.cs
index d1b22301339..43814d3f9a0 100644
--- a/src/Build/Construction/ProjectOutputElement.cs
+++ b/src/Build/Construction/ProjectOutputElement.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Diagnostics;
+using System.Xml;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Construction/ProjectTaskElement.cs b/src/Build/Construction/ProjectTaskElement.cs
index 9798a27df29..49048f632bd 100644
--- a/src/Build/Construction/ProjectTaskElement.cs
+++ b/src/Build/Construction/ProjectTaskElement.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Collections.ObjectModel;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/ProjectWhenElement.cs b/src/Build/Construction/ProjectWhenElement.cs
index bf4c2dc4db0..92140145ed1 100644
--- a/src/Build/Construction/ProjectWhenElement.cs
+++ b/src/Build/Construction/ProjectWhenElement.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
-using System.Xml;
 using System.Diagnostics;
 using System.Linq;
+using System.Xml;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 8326549c24b..4cdd0fe8ac1 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -3,24 +3,23 @@
 
 using System;
 using System.Collections.Generic;
-using System.Xml;
-using System.IO;
-using System.Text;
+using System.Collections.ObjectModel;
 using System.Globalization;
+using System.IO;
 using System.Runtime.InteropServices;
 using System.Security;
+using System.Text;
 using System.Text.Json;
 using System.Text.RegularExpressions;
-
+using System.Xml;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
+using BuildEventFileInfo = Microsoft.Build.Shared.BuildEventFileInfo;
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
-using VisualStudioConstants = Microsoft.Build.Shared.VisualStudioConstants;
+using ExceptionUtilities = Microsoft.Build.Shared.ExceptionHandling;
 using ProjectFileErrorUtilities = Microsoft.Build.Shared.ProjectFileErrorUtilities;
-using BuildEventFileInfo = Microsoft.Build.Shared.BuildEventFileInfo;
 using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
-using ExceptionUtilities = Microsoft.Build.Shared.ExceptionHandling;
-using System.Collections.ObjectModel;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Shared.FileSystem;
+using VisualStudioConstants = Microsoft.Build.Shared.VisualStudioConstants;
 
 #nullable disable
 
diff --git a/src/Build/Construction/UsingTaskParameterGroupElement.cs b/src/Build/Construction/UsingTaskParameterGroupElement.cs
index 9b58223c601..a0fc796495a 100644
--- a/src/Build/Construction/UsingTaskParameterGroupElement.cs
+++ b/src/Build/Construction/UsingTaskParameterGroupElement.cs
@@ -2,13 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Diagnostics;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 
 #nullable disable
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 6faa9cde0ea..c3df653db94 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -6,32 +6,32 @@
 using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
 using System.IO;
 using System.Linq;
 using System.Text;
 using System.Xml;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
-using ObjectModel = System.Collections.ObjectModel;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
+using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Execution;
+using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Globbing;
+using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Constants = Microsoft.Build.Internal.Constants;
+using EvaluationItemExpressionFragment = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>.ItemExpressionFragment;
+using EvaluationItemSpec = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using ObjectModel = System.Collections.ObjectModel;
 using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
-using System.Globalization;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Definition;
-using Microsoft.Build.Evaluation.Context;
-using Microsoft.Build.Globbing;
-using Microsoft.Build.ObjectModelRemoting;
-using EvaluationItemSpec = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
-using EvaluationItemExpressionFragment = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>.ItemExpressionFragment;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
-using Microsoft.Build.FileSystem;
 
 #nullable disable
 
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 2a7325a9d32..1f24703fd5b 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -10,15 +10,14 @@
 using System.Reflection;
 using System.Threading;
 using System.Xml;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Internal;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Internal;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 11e35aa5ece..645f8810cc0 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using System.Diagnostics;
+using System.Diagnostics.CodeAnalysis;
+using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-using System.Collections.Generic;
-using System;
-using System.Diagnostics.CodeAnalysis;
-using System.Linq;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Build/Definition/ProjectItemDefinition.cs b/src/Build/Definition/ProjectItemDefinition.cs
index 0e3ddd7a1d8..5cbad98cb06 100644
--- a/src/Build/Definition/ProjectItemDefinition.cs
+++ b/src/Build/Definition/ProjectItemDefinition.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
+using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
-using System.Collections.Generic;
-using System;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/Definition/ProjectMetadata.cs b/src/Build/Definition/ProjectMetadata.cs
index aa172d165b5..bd4cc51c88a 100644
--- a/src/Build/Definition/ProjectMetadata.cs
+++ b/src/Build/Definition/ProjectMetadata.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Diagnostics;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Definition/ToolsetLocalReader.cs b/src/Build/Definition/ToolsetLocalReader.cs
index b4476a5786e..33feee94720 100644
--- a/src/Build/Definition/ToolsetLocalReader.cs
+++ b/src/Build/Definition/ToolsetLocalReader.cs
@@ -1,12 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
-using System.Collections.Generic;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/Definition/ToolsetPropertyDefinition.cs b/src/Build/Definition/ToolsetPropertyDefinition.cs
index 2c38bce7b0c..da172891cd1 100644
--- a/src/Build/Definition/ToolsetPropertyDefinition.cs
+++ b/src/Build/Definition/ToolsetPropertyDefinition.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Diagnostics;
-
-using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using Microsoft.Build.Shared;
+using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 
 #nullable disable
 
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index c7723447806..9c064f5e68f 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -2,21 +2,21 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
+using System.Runtime.CompilerServices;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using ErrorUtils = Microsoft.Build.Shared.ErrorUtilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
-using System.Runtime.CompilerServices;
 
 #nullable disable
 
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index 7c38151cac7..0cc16709f31 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -5,17 +5,16 @@
 
 using System;
 using System.Collections.Generic;
-
-using Microsoft.Build.Shared;
-using error = Microsoft.Build.Shared.ErrorUtilities;
-using RegistryKeyWrapper = Microsoft.Build.Internal.RegistryKeyWrapper;
-using RegistryException = Microsoft.Build.Exceptions.RegistryException;
-using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
-using Constants = Microsoft.Build.Internal.Constants;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
+using Constants = Microsoft.Build.Internal.Constants;
+using error = Microsoft.Build.Shared.ErrorUtilities;
+using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
+using RegistryException = Microsoft.Build.Exceptions.RegistryException;
+using RegistryKeyWrapper = Microsoft.Build.Internal.RegistryKeyWrapper;
 
 #nullable disable
 
diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 63629f1ef21..8d84d5dc908 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Collections;
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/ElementLocation/RegistryLocation.cs b/src/Build/ElementLocation/RegistryLocation.cs
index b39b4da62a2..f8e947908d1 100644
--- a/src/Build/ElementLocation/RegistryLocation.cs
+++ b/src/Build/ElementLocation/RegistryLocation.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd;
 using System;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/ElementLocation/XmlAttributeWithLocation.cs b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
index c0fbad7e82c..6749621b10c 100644
--- a/src/Build/ElementLocation/XmlAttributeWithLocation.cs
+++ b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Diagnostics;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Build/ElementLocation/XmlElementWithLocation.cs b/src/Build/ElementLocation/XmlElementWithLocation.cs
index 91a5f107a36..ddbf27a08de 100644
--- a/src/Build/ElementLocation/XmlElementWithLocation.cs
+++ b/src/Build/ElementLocation/XmlElementWithLocation.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Diagnostics;
+using System.Xml;
 using Microsoft.Build.ObjectModelRemoting;
 
 #nullable disable
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index 653cfe536b9..3ff00696595 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -11,13 +11,13 @@
 
 namespace Microsoft.Build.Evaluation
 {
-    using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
-    using BuildEventContext = Microsoft.Build.Framework.BuildEventContext;
-    using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
-    using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+    using Microsoft.Build.BackEnd.Logging;
     using Microsoft.Build.Shared;
     using Microsoft.Build.Shared.FileSystem;
-    using Microsoft.Build.BackEnd.Logging;
+    using BuildEventContext = Microsoft.Build.Framework.BuildEventContext;
+    using ElementLocation = Microsoft.Build.Construction.ElementLocation;
+    using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
+    using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
     internal static class ConditionEvaluator
     {
diff --git a/src/Build/Evaluation/Conditionals/AndExpressionNode.cs b/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
index 07708c80e85..ce021dc2f10 100644
--- a/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/Conditionals/NotExpressionNode.cs b/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
index f40106ded47..71dec16ec3d 100644
--- a/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/Conditionals/OrExpressionNode.cs b/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
index ea702400754..9d4add7436e 100644
--- a/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/Conditionals/Scanner.cs b/src/Build/Evaluation/Conditionals/Scanner.cs
index 76ad5124991..a9d31698a28 100644
--- a/src/Build/Evaluation/Conditionals/Scanner.cs
+++ b/src/Build/Evaluation/Conditionals/Scanner.cs
@@ -1,10 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Globalization;
 using System;
 using System.Diagnostics;
-
+using System.Globalization;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index dd25193cec7..35097b0aeda 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -11,6 +11,7 @@
 using System.Text;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
@@ -596,6 +597,7 @@ private static ProjectTargetInstance ReadNewTargetElement(ProjectTargetElement t
         private void Evaluate()
         {
             string projectFile = String.IsNullOrEmpty(_projectRootElement.ProjectFileLocation.File) ? "(null)" : _projectRootElement.ProjectFileLocation.File;
+            using (AssemblyLoadsTracker.StartTracking(_evaluationLoggingContext, AssemblyLoadingContext.Evaluation))
             using (_evaluationProfiler.TrackPass(EvaluationPass.TotalEvaluation))
             {
                 ErrorUtilities.VerifyThrow(_data.EvaluationId == BuildEventContext.InvalidEvaluationId, "There is no prior evaluation ID. The evaluator data needs to be reset at this point");
@@ -1843,6 +1845,8 @@ static string EvaluateProperty(string value, IElementLocation location,
                 // Combine SDK path with the "project" relative path
                 try
                 {
+                    using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(_evaluationLoggingContext, AssemblyLoadingContext.SdkResolution, _sdkResolverService.GetType());
+
                     sdkResult = _sdkResolverService.ResolveSdk(_submissionId, sdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive, _isRunningInVisualStudio,
                         failOnUnresolvedSdk: !_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) || _loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk));
                 }
diff --git a/src/Build/Evaluation/EvaluatorMetadataTable.cs b/src/Build/Evaluation/EvaluatorMetadataTable.cs
index 9f7c871a7e0..d48f458465c 100644
--- a/src/Build/Evaluation/EvaluatorMetadataTable.cs
+++ b/src/Build/Evaluation/EvaluatorMetadataTable.cs
@@ -4,9 +4,8 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Collections;
-
+using Microsoft.Build.Construction;
 using EscapingUtilities = Microsoft.Build.Shared.EscapingUtilities;
 
 #nullable disable
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index ab6d9b76eb6..5e3147ec52f 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -12,6 +12,7 @@
 using System.Reflection;
 using System.Runtime.CompilerServices;
 using System.Text.RegularExpressions;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Execution;
@@ -19,15 +20,13 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.NET.StringTools;
 using Microsoft.Win32;
 using AvailableStaticMethods = Microsoft.Build.Internal.AvailableStaticMethods;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using TaskItemFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.TaskItemFactory;
 
-using Microsoft.NET.StringTools;
-using Microsoft.Build.BackEnd.Logging;
-
 #nullable disable
 
 namespace Microsoft.Build.Evaluation
diff --git a/src/Build/Evaluation/ExpressionShredder.cs b/src/Build/Evaluation/ExpressionShredder.cs
index e7130f4b211..c555a10d0e2 100644
--- a/src/Build/Evaluation/ExpressionShredder.cs
+++ b/src/Build/Evaluation/ExpressionShredder.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Shared;
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/IEvaluatorData.cs b/src/Build/Evaluation/IEvaluatorData.cs
index 2c534c608d2..729e99b48ab 100644
--- a/src/Build/Evaluation/IEvaluatorData.cs
+++ b/src/Build/Evaluation/IEvaluatorData.cs
@@ -3,12 +3,12 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Execution;
-using Microsoft.Build.Collections;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation.Context;
+using Microsoft.Build.Execution;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
index 19290e8f921..6bda7df146c 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Collections;
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Execution;
-using Microsoft.Build.BackEnd.Logging;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 4850ef44d0a..f35b4cc322a 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -1,16 +1,16 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Linq;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.CodeAnalysis.Collections;
-using System;
-using System.Collections.Generic;
-using System.Collections.Immutable;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index 9517f7c0542..bd7933842b0 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Construction;
-using Microsoft.Build.Eventing;
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Linq;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index ddabfcf4e94..771b0e6ce40 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -1,12 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Construction;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index bddbcaf8150..e773885225b 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Framework;
 using System.Collections.Immutable;
 using System.Linq;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index 9c38f01f962..e622acbfdc5 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -1,13 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Eventing;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
 using System.Xml;
-
+using Microsoft.Build.Eventing;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Expander = Microsoft.Build.Evaluation.Expander<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index beb1d86e13e..49e921d8160 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -3,16 +3,15 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
+using System.Globalization;
 using System.IO;
 using System.Xml;
-using Microsoft.Build.Construction;
-
-using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
-using System.Diagnostics;
-using System.Globalization;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Shared;
+using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using OutOfProcNode = Microsoft.Build.Execution.OutOfProcNode;
 
 #nullable disable
diff --git a/src/Build/Evaluation/ProjectStringCache.cs b/src/Build/Evaluation/ProjectStringCache.cs
index f6fdd3733b0..dc1132049de 100644
--- a/src/Build/Evaluation/ProjectStringCache.cs
+++ b/src/Build/Evaluation/ProjectStringCache.cs
@@ -5,10 +5,10 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Xml;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 08ddb45cd60..7a4d6da9521 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.Collections;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Execution;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation.Context;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
diff --git a/src/Build/Evaluation/ToolsetProvider.cs b/src/Build/Evaluation/ToolsetProvider.cs
index 9309c78af57..01fa37d33e2 100644
--- a/src/Build/Evaluation/ToolsetProvider.cs
+++ b/src/Build/Evaluation/ToolsetProvider.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd;
 
 #nullable disable
 
diff --git a/src/Build/FileSystem/MSBuildFileSystemBase.cs b/src/Build/FileSystem/MSBuildFileSystemBase.cs
index a6be85df301..3fc54552ddd 100644
--- a/src/Build/FileSystem/MSBuildFileSystemBase.cs
+++ b/src/Build/FileSystem/MSBuildFileSystemBase.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared.FileSystem;
 using System;
 using System.Collections.Generic;
 using System.IO;
+using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
 
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 35b57e90b01..fa1642fb36b 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -63,6 +63,25 @@ public ReferenceInfo(ConfigurationMetadata referenceConfiguration, ProjectItemIn
             }
         }
 
+        private readonly struct TargetSpecification
+        {
+            public TargetSpecification(string target, bool skipIfNonexistent)
+            {
+                // Verify that if this target is skippable then it equals neither 
+                // ".default" nor ".projectReferenceTargetsOrDefaultTargets".
+                ErrorUtilities.VerifyThrow(
+                    !skipIfNonexistent || (!target.Equals(MSBuildConstants.DefaultTargetsMarker)
+                    && !target.Equals(MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker)),
+                    target + " cannot be marked as SkipNonexistentTargets");
+                Target = target;
+                SkipIfNonexistent = skipIfNonexistent;
+            }
+
+            public string Target { get; }
+
+            public bool SkipIfNonexistent { get; }
+        }
+
         public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstance, ProjectCollection _projectCollection, ProjectGraph.ProjectInstanceFactoryFunc _projectInstanceFactory)
         {
             IEnumerable<ProjectItemInstance> projectReferenceItems;
@@ -391,10 +410,10 @@ private static void RemoveFromPropertyDictionary(
 
         public readonly struct TargetsToPropagate
         {
-            private readonly ImmutableList<string> _outerBuildTargets;
-            private readonly ImmutableList<string> _allTargets;
+            private readonly ImmutableList<TargetSpecification> _outerBuildTargets;
+            private readonly ImmutableList<TargetSpecification> _allTargets;
 
-            private TargetsToPropagate(ImmutableList<string> outerBuildTargets, ImmutableList<string> nonOuterBuildTargets)
+            private TargetsToPropagate(ImmutableList<TargetSpecification> outerBuildTargets, ImmutableList<TargetSpecification> nonOuterBuildTargets)
             {
                 _outerBuildTargets = outerBuildTargets;
 
@@ -416,23 +435,22 @@ private TargetsToPropagate(ImmutableList<string> outerBuildTargets, ImmutableLis
             /// <returns></returns>
             public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance project, ImmutableList<string> entryTargets)
             {
-                var targetsForOuterBuild = ImmutableList.CreateBuilder<string>();
-                var targetsForInnerBuild = ImmutableList.CreateBuilder<string>();
+                ImmutableList<TargetSpecification>.Builder targetsForOuterBuild = ImmutableList.CreateBuilder<TargetSpecification>();
+                ImmutableList<TargetSpecification>.Builder targetsForInnerBuild = ImmutableList.CreateBuilder<TargetSpecification>();
 
-                var projectReferenceTargets = project.GetItems(ItemTypeNames.ProjectReferenceTargets);
+                ICollection<ProjectItemInstance> projectReferenceTargets = project.GetItems(ItemTypeNames.ProjectReferenceTargets);
 
-                foreach (var entryTarget in entryTargets)
+                foreach (string entryTarget in entryTargets)
                 {
-                    foreach (var projectReferenceTarget in projectReferenceTargets)
+                    foreach (ProjectItemInstance projectReferenceTarget in projectReferenceTargets)
                     {
                         if (projectReferenceTarget.EvaluatedInclude.Equals(entryTarget, StringComparison.OrdinalIgnoreCase))
                         {
-                            var targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
-
-                            var targetsAreForOuterBuild = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName));
-
-                            var targets = ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue).ToArray();
-
+                            string targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
+                            bool skipNonexistentTargets = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue("SkipNonexistentTargets"));
+                            bool targetsAreForOuterBuild = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName));
+                            TargetSpecification[] targets = ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue)
+                                .Select(t => new TargetSpecification(t, skipNonexistentTargets)).ToArray();
                             if (targetsAreForOuterBuild)
                             {
                                 targetsForOuterBuild.AddRange(targets);
@@ -450,11 +468,20 @@ public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance proj
 
             public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance reference)
             {
-                return (GetProjectType(reference)) switch
+                ImmutableList<string> RemoveNonexistentTargetsIfSkippable(ImmutableList<TargetSpecification> targets)
+                {
+                    // Keep targets that are non-skippable or that exist but are skippable.
+                    return targets
+                        .Where(t => !t.SkipIfNonexistent || reference.Targets.ContainsKey(t.Target))
+                        .Select(t => t.Target)
+                        .ToImmutableList();
+                }
+
+                return GetProjectType(reference) switch
                 {
-                    ProjectType.InnerBuild => _allTargets,
-                    ProjectType.OuterBuild => _outerBuildTargets,
-                    ProjectType.NonMultitargeting => _allTargets,
+                    ProjectType.InnerBuild => RemoveNonexistentTargetsIfSkippable(_allTargets),
+                    ProjectType.OuterBuild => RemoveNonexistentTargetsIfSkippable(_outerBuildTargets),
+                    ProjectType.NonMultitargeting => RemoveNonexistentTargetsIfSkippable(_allTargets),
                     _ => throw new ArgumentOutOfRangeException(),
                 };
             }
diff --git a/src/Build/Instance/HostServices.cs b/src/Build/Instance/HostServices.cs
index 3bd49e0fe24..2154606e625 100644
--- a/src/Build/Instance/HostServices.cs
+++ b/src/Build/Instance/HostServices.cs
@@ -1,15 +1,15 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
-using Microsoft.Build.Framework;
-using System.Collections.Generic;
 using System;
+using System.Collections.Generic;
 using System.Diagnostics;
-using System.Runtime.InteropServices;
 using System.Linq;
-using Microsoft.Build.BackEnd;
+using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectItemGroupTaskInstance.cs b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
index 6166df3ed20..93b70dbf356 100644
--- a/src/Build/Instance/ProjectItemGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
@@ -5,9 +5,8 @@
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
index e48abcebe21..8ab3e2a467a 100644
--- a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
@@ -5,9 +5,8 @@
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
index 6c0a2915eff..4779f833474 100644
--- a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
@@ -3,9 +3,8 @@
 
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 05aa7f5e8c0..2d124f82d8d 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -6,15 +6,14 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
-using System.Linq;
 using System.IO;
-
+using System.Linq;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Construction;
-using Microsoft.Build.BackEnd;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Build/Instance/ProjectMetadataInstance.cs b/src/Build/Instance/ProjectMetadataInstance.cs
index e1cd5c22df6..dc807f89574 100644
--- a/src/Build/Instance/ProjectMetadataInstance.cs
+++ b/src/Build/Instance/ProjectMetadataInstance.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.BackEnd;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectOnErrorInstance.cs b/src/Build/Instance/ProjectOnErrorInstance.cs
index f36b8407df7..b4ee503221a 100644
--- a/src/Build/Instance/ProjectOnErrorInstance.cs
+++ b/src/Build/Instance/ProjectOnErrorInstance.cs
@@ -3,9 +3,8 @@
 
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
index 428761765b5..aaef26a3e97 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
@@ -5,9 +5,8 @@
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
index 9f2640e0de9..6eb9b3f1972 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
@@ -3,9 +3,8 @@
 
 using System.Diagnostics;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 300d6150226..efcc5bbec16 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -3,15 +3,14 @@
 
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.BackEnd;
-
-using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectTargetInstanceChild.cs b/src/Build/Instance/ProjectTargetInstanceChild.cs
index 7a2fa4c7240..a44cf35b295 100644
--- a/src/Build/Instance/ProjectTargetInstanceChild.cs
+++ b/src/Build/Instance/ProjectTargetInstanceChild.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectTaskInstance.cs b/src/Build/Instance/ProjectTaskInstance.cs
index 87fac8bd045..1e066edcda8 100644
--- a/src/Build/Instance/ProjectTaskInstance.cs
+++ b/src/Build/Instance/ProjectTaskInstance.cs
@@ -1,13 +1,13 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections.Generic;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Collections;
-using Microsoft.Build.Shared;
 using System.Diagnostics;
-using System;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectTaskInstanceChild.cs b/src/Build/Instance/ProjectTaskInstanceChild.cs
index a4a94933f0a..a9b67aa341b 100644
--- a/src/Build/Instance/ProjectTaskInstanceChild.cs
+++ b/src/Build/Instance/ProjectTaskInstanceChild.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectTaskOutputItemInstance.cs b/src/Build/Instance/ProjectTaskOutputItemInstance.cs
index e475c63cb23..f0f0eb61705 100644
--- a/src/Build/Instance/ProjectTaskOutputItemInstance.cs
+++ b/src/Build/Instance/ProjectTaskOutputItemInstance.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
-
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs b/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
index 01152bb2ed9..38dc5f6adb6 100644
--- a/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
+++ b/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index e6c0d6a2ef7..15bb1ebc0cc 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -8,9 +8,10 @@
 using System.Threading.Tasks;
 #endif
 
+using Microsoft.Build.BackEnd.Components.RequestBuilder;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
+using System.IO;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using TaskLoggingContext = Microsoft.Build.BackEnd.Logging.TaskLoggingContext;
@@ -210,6 +211,7 @@ public void CleanupTask(ITask task)
 
                 if (appDomain != null)
                 {
+                    AssemblyLoadsTracker.StopTracking(appDomain);
                     // Unload the AppDomain asynchronously to avoid a deadlock that can happen because
                     // AppDomain.Unload blocks for the process's one Finalizer thread to finalize all
                     // objects. Some objects are RCWs for STA COM objects and as such would need the
@@ -269,6 +271,10 @@ internal LoadedType InitializeFactory(
             {
                 ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
                 _taskName = taskName;
+
+                string assemblyName = loadInfo.AssemblyName ?? Path.GetFileName(loadInfo.AssemblyFile);
+                using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(targetLoggingContext, AssemblyLoadingContext.TaskRun, assemblyName);
+
                 _loadedType = _typeLoader.Load(taskName, loadInfo, _taskHostFactoryExplicitlyRequested);
                 ProjectErrorUtilities.VerifyThrowInvalidProject(_loadedType != null, elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, String.Empty);
             }
@@ -384,6 +390,7 @@ internal ITask CreateTaskInstance(ElementLocation taskLocation, TaskLoggingConte
                     new TaskLoader.LogError(ErrorLoggingDelegate),
 #if FEATURE_APPDOMAIN
                     appDomainSetup,
+                    appDomain => AssemblyLoadsTracker.StartTracking(taskLoggingContext, AssemblyLoadingContext.TaskRun, _loadedType.Type, appDomain),
 #endif
                     isOutOfProc
 #if FEATURE_APPDOMAIN
@@ -393,10 +400,14 @@ internal ITask CreateTaskInstance(ElementLocation taskLocation, TaskLoggingConte
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
 #if FEATURE_APPDOMAIN
-                if (taskAppDomain != null)
+                if (taskAppDomain != null && taskInstance != null)
                 {
                     _tasksAndAppDomains[taskInstance] = taskAppDomain;
                 }
+                else if (taskAppDomain != null)
+                {
+                    AssemblyLoadsTracker.StopTracking(taskAppDomain);
+                }
 #endif
 
                 return taskInstance;
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 19cde9900c8..0b874696321 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -2,17 +2,16 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.Reflection;
 using System.Threading;
-
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd.Logging;
 
 #nullable disable
 
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index bcdf1286940..58dcc1b4e7b 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Reflection;
 using System.Collections.Generic;
+using System.Reflection;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index ced1b61e0fa..33cf3ae1322 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -2,26 +2,24 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Diagnostics;
 using System.Collections.Generic;
+using System.Collections.ObjectModel;
+using System.Diagnostics;
 using System.IO;
 using System.Reflection;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Construction;
-using Microsoft.Build.BackEnd;
-
+using Microsoft.Build.Shared.FileSystem;
+using Microsoft.NET.StringTools;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
-using TaskEngineAssemblyResolver = Microsoft.Build.BackEnd.Logging.TaskEngineAssemblyResolver;
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
-using System.Collections.ObjectModel;
-using Microsoft.Build.Shared.FileSystem;
-
-using Microsoft.NET.StringTools;
+using TaskEngineAssemblyResolver = Microsoft.Build.BackEnd.Logging.TaskEngineAssemblyResolver;
 
 #nullable disable
 
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 67e6691aa4d..ce386341186 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -8,14 +8,12 @@
 using System.IO;
 using System.Linq;
 using System.Text;
-
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-
-using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
+using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
 
 #nullable disable
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 29dfb17f8f1..9fe1638fd3a 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -34,5 +34,6 @@ internal enum BinaryLogRecordKind
         String,
         TaskParameter,
         ResponseFileUsed,
+        AssemblyLoad,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 35780421fb1..29b259d2bef 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -57,7 +57,9 @@ public sealed class BinaryLogger : ILogger
         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext
         // version 15:
         //   - new record kind: ResponseFileUsedEventArgs
-        internal const int FileFormatVersion = 15;
+        // version 16:
+        //   - AssemblyLoadBuildEventArgs
+        internal const int FileFormatVersion = 16;
 
         private Stream stream;
         private BinaryWriter binaryWriter;
@@ -65,6 +67,7 @@ public sealed class BinaryLogger : ILogger
         private ProjectImportsCollector projectImportsCollector;
         private string _initialTargetOutputLogging;
         private bool _initialLogImports;
+        private string _initialIsBinaryLoggerEnabled;
 
         /// <summary>
         /// Describes whether to collect the project files (including imported project files) used during the build.
@@ -114,9 +117,12 @@ public void Initialize(IEventSource eventSource)
         {
             _initialTargetOutputLogging = Environment.GetEnvironmentVariable("MSBUILDTARGETOUTPUTLOGGING");
             _initialLogImports = Traits.Instance.EscapeHatches.LogProjectImports;
+            _initialIsBinaryLoggerEnabled = Environment.GetEnvironmentVariable("MSBUILDBINARYLOGGERENABLED");
 
             Environment.SetEnvironmentVariable("MSBUILDTARGETOUTPUTLOGGING", "true");
             Environment.SetEnvironmentVariable("MSBUILDLOGIMPORTS", "1");
+            Environment.SetEnvironmentVariable("MSBUILDBINARYLOGGERENABLED", bool.TrueString);
+
             Traits.Instance.EscapeHatches.LogProjectImports = true;
             bool logPropertiesAndItemsAfterEvaluation = Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation ?? true;
 
@@ -214,6 +220,8 @@ public void Shutdown()
         {
             Environment.SetEnvironmentVariable("MSBUILDTARGETOUTPUTLOGGING", _initialTargetOutputLogging);
             Environment.SetEnvironmentVariable("MSBUILDLOGIMPORTS", _initialLogImports ? "1" : "");
+            Environment.SetEnvironmentVariable("MSBUILDBINARYLOGGERENABLED", _initialIsBinaryLoggerEnabled);
+
             Traits.Instance.EscapeHatches.LogProjectImports = _initialLogImports;
 
             if (projectImportsCollector != null)
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index ee7f201ba25..ddb7520a7fd 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -188,6 +188,9 @@ public BuildEventArgs Read()
                 case BinaryLogRecordKind.PropertyInitialValueSet:
                     result = ReadPropertyInitialValueSetEventArgs();
                     break;
+                case BinaryLogRecordKind.AssemblyLoad:
+                    result = ReadAssemblyLoadEventArgs();
+                    break;
                 default:
                     break;
             }
@@ -800,6 +803,29 @@ private BuildEventArgs ReadPropertyInitialValueSetEventArgs()
             return e;
         }
 
+        private AssemblyLoadBuildEventArgs ReadAssemblyLoadEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields(readImportance: false);
+
+            AssemblyLoadingContext context = (AssemblyLoadingContext)ReadInt32();
+            string loadingInitiator = ReadDeduplicatedString();
+            string assemblyName = ReadDeduplicatedString();
+            string assemblyPath = ReadDeduplicatedString();
+            Guid mvid = ReadGuid();
+            string appDomainName = ReadDeduplicatedString();
+
+            var e = new AssemblyLoadBuildEventArgs(
+                context,
+                loadingInitiator,
+                assemblyName,
+                assemblyPath,
+                mvid,
+                appDomainName);
+            SetCommonFields(e, fields);
+
+            return e;
+        }
+
         /// <summary>
         /// For errors and warnings these 8 fields are written out explicitly
         /// (their presence is not marked as a bit in the flags). So we have to
@@ -1205,6 +1231,11 @@ private bool ReadBoolean()
             return binaryReader.ReadBoolean();
         }
 
+        private unsafe Guid ReadGuid()
+        {
+            return new Guid(binaryReader.ReadBytes(sizeof(Guid)));
+        }
+
         private DateTime ReadDateTime()
         {
             return new DateTime(binaryReader.ReadInt64(), (DateTimeKind)ReadInt32());
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 67a2005c284..cf69bcbacbc 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -438,6 +438,7 @@ private void Write(BuildMessageEventArgs e)
                 case EnvironmentVariableReadEventArgs environmentVariableRead: Write(environmentVariableRead); break;
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: Write(propertyInitialValueSet); break;
                 case CriticalBuildMessageEventArgs criticalBuildMessage: Write(criticalBuildMessage); break;
+                case AssemblyLoadBuildEventArgs assemblyLoad: Write(assemblyLoad); break;
                 default: // actual BuildMessageEventArgs
                     Write(BinaryLogRecordKind.Message);
                     WriteMessageFields(e, writeImportance: true);
@@ -469,6 +470,18 @@ private void Write(TargetSkippedEventArgs e)
             binaryWriter.WriteOptionalBuildEventContext(e.OriginalBuildEventContext);
         }
 
+        private void Write(AssemblyLoadBuildEventArgs e)
+        {
+            Write(BinaryLogRecordKind.AssemblyLoad);
+            WriteMessageFields(e, writeMessage: false, writeImportance: false);
+            Write((int)e.LoadingContext);
+            WriteDeduplicatedString(e.LoadingInitiator);
+            WriteDeduplicatedString(e.AssemblyName);
+            WriteDeduplicatedString(e.AssemblyPath);
+            Write(e.MVID);
+            WriteDeduplicatedString(e.AppDomainDescriptor);
+        }
+
         private void Write(CriticalBuildMessageEventArgs e)
         {
             Write(BinaryLogRecordKind.CriticalBuildMessage);
@@ -1088,6 +1101,15 @@ private void Write(bool boolean)
             binaryWriter.Write(boolean);
         }
 
+        private unsafe void Write(Guid guid)
+        {
+            byte* ptr = (byte*)&guid;
+            for (int i = 0; i < sizeof(Guid); i++, ptr++)
+            {
+                binaryWriter.Write(*ptr);
+            }
+        }
+
         private void WriteDeduplicatedString(string text)
         {
             var (recordId, _) = HashString(text);
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 6cd217dc48a..be295c3bf94 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -2,14 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
 using BaseConsoleLogger = Microsoft.Build.BackEnd.Logging.BaseConsoleLogger;
-using SerialConsoleLogger = Microsoft.Build.BackEnd.Logging.SerialConsoleLogger;
 using ParallelConsoleLogger = Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger;
+using SerialConsoleLogger = Microsoft.Build.BackEnd.Logging.SerialConsoleLogger;
 
 #nullable disable
 
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index 3f9dff7f034..a66ac147253 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -2,13 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Reflection;
 using System.IO;
-
+using System.Reflection;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.BackEnd;
-
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 
 #nullable disable
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 6fc7b7e6702..54ca8cba62e 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -3,15 +3,15 @@
 
 using System;
 using System.Collections;
-using System.Globalization;
 using System.Collections.Generic;
+using System.Globalization;
+using System.Linq;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
+using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
-using System.Linq;
 
 #nullable disable
 
@@ -1124,6 +1124,11 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
                 return;
             }
 
+            if (e.BuildEventContext == null && e is AssemblyLoadBuildEventArgs)
+            {
+                return;
+            }
+
             ErrorUtilities.VerifyThrowArgumentNull(e.BuildEventContext, "BuildEventContext");
             bool print = false;
             bool lightenText = false;
diff --git a/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs b/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
index 0774ad98fbd..d7612d7f3a6 100644
--- a/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.Collections.Generic;
+using System.Globalization;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Globalization;
 
 #nullable disable
 
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index f5f8127a5c2..ac0ce5609c3 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -2,16 +2,14 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections;
-
+using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
-using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
+using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 6e13af19356..c2757e1ff4d 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -148,6 +148,7 @@
     <Compile Include="BackEnd\BuildManager\BuildParameters.cs" />
     <Compile Include="BackEnd\BuildManager\CacheSerialization.cs" />
     <Compile Include="BackEnd\BuildManager\CacheAggregator.cs" />
+    <Compile Include="BackEnd\BuildManager\ProjectIsolationMode.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientPacketPump.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientExitType.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientExitResult.cs" />
@@ -157,6 +158,7 @@
     <Compile Include="BackEnd\Components\ProjectCache\*.cs" />
     <Compile Include="BackEnd\Components\Communications\CurrentHost.cs" />
     <Compile Include="BackEnd\Components\Communications\ServerNodeEndpointOutOfProc.cs" />
+    <Compile Include="BackEnd\Components\RequestBuilder\AssemblyLoadsTracker.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
index ea9a88049be..aec8a9493a0 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System.Collections.Generic;
+using Microsoft.Build.Evaluation;
 
 #nullable disable
 
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
index 6f21870c95d..609ba0a95fd 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Collections.Generic;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
-using System.Collections.Generic;
 
 #nullable disable
 
diff --git a/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs b/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
index 76b3a0a5f4c..4baaa9ace7d 100644
--- a/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
+++ b/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Collections.Generic;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
-using System.Collections.Generic;
 
 #nullable disable
 
diff --git a/src/Build/Resources/AssemblyResources.cs b/src/Build/Resources/AssemblyResources.cs
index f6113241bf7..19954b16396 100644
--- a/src/Build/Resources/AssemblyResources.cs
+++ b/src/Build/Resources/AssemblyResources.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
-using System.Reflection;
 using System.Globalization;
+using System.Reflection;
+using System.Resources;
 
 #nullable disable
 
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index fb8c9b64a74..2436979d94f 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.Globalization;
+using System.IO;
 using System.Runtime.InteropServices;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Collections;
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 7b1b4f411e1..52faacfee31 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1977,4 +1977,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="SDKResolverReturnedNull" xml:space="preserve">
     <value>SDK resolver "{0}" returned null.</value>
   </data>
-</root>
+  <data name="TaskAssemblyLoaded" xml:space="preserve">
+    <value>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</value>
+  </data>
+  <data name="NodeReused" xml:space="preserve">
+    <value>Reusing node {0} (PID: {1}).</value>
+  </data>
+</root>
\ No newline at end of file
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 0fd2a55f4a1..278dbe4c739 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: V sestaven√≠ {0} se nena≈°ly ≈æ√°dn√© moduly plug-in mezipamƒõti projektu. Modul plug-in se oƒçek√°val.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Po≈æadovan√© sestaven√≠ NuGet se nena≈°lo. Oƒçek√°van√° cesta: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">√öloha {0} po≈æadovala tento poƒçet jader: {1}. Z√≠skala tento poƒçet jader: {2}. Teƒè pou≈æ√≠v√° celkem tento poƒçet jader: {3}</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">√öloha {0} uvolnila tento poƒçet jader: {1}. Teƒè pou≈æ√≠v√° celkem tento poƒçet jader: {2}</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 49aab4ca53c..759cbf24118 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: In der Assembly "{0}" wurde ein Projektcache-Plug-In erwartet, aber keines gefunden.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Eine erforderliche NuGet-Assembly wurde nicht gefunden. Erwarteter Pfad: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">Die Aufgabe "{0}" hat {1} Kerne angefordert und {2} Kerne erhalten und belegt jetzt insgesamt {3} Kerne.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">Die Aufgabe "{0}" hat {1} Kerne freigegeben und belegt jetzt insgesamt {2} Kerne.</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 3e8d9e420ce..88c3b698231 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: No se encontr√≥ ning√∫n complemento de cach√© de proyectos en el ensamblado "{0}". Se esperaba uno.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">No se encontr√≥ un ensamblado de NuGet necesario. Ruta de acceso esperada: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">La tarea "{0}" solicit√≥ {1}¬†n√∫cleos, adquiri√≥ {2}¬†n√∫cleos y ahora retiene un total de {3}¬†n√∫cleos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">La tarea "{0}" liber√≥ {1}¬†n√∫cleos y ahora retiene un total de {2}¬†n√∫cleos.</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 369cad1fc61..2264173e816 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: plug-ins de cache de projet introuvables dans l'assembly "{0}". Un plug-in est attendu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Un assembly NuGet obligatoire est introuvable. Chemin attendu¬†: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">La t√¢che "{0}" a demand√© {1} c≈ìurs et a obtenu {2} c≈ìurs. Elle d√©tient d√©sormais {3} c≈ìurs au total.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">La t√¢che "{0}" a lib√©r√© {1} c≈ìur. Elle d√©tient d√©sormais {2} c≈ìurs au total.</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 16c46738aa3..4c5f37c1953 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: non sono stati trovati plug-in della cache del progetto nell'assembly "{0}". Ne √® previsto uno.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Un assembly NuGet obbligatorio non √® stato trovato. Percorso previsto: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">L'attivit√† "{0}" ha richiesto {1} core, ha acquisito {2} core e ora contiene {3} core in totale.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">L'attivit√† "{0}" ha rilasciato {1} core e ora contiene {2} core in totale.</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 2767d3b459d..25261590068 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: „Éó„É≠„Ç∏„Çß„ÇØ„Éà „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„Éó„É©„Ç∞„Ç§„É≥„Åå„Ç¢„Çª„É≥„Éñ„É™ "{0}" „Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„Éó„É©„Ç∞„Ç§„É≥„Åå 1 „Å§ÂøÖË¶Å„Åß„Åô„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">ÂøÖË¶Å„Å™ NuGet „Ç¢„Çª„É≥„Éñ„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÊÉ≥ÂÆö„Åï„Çå„Çã„Éë„Çπ: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">„Çø„Çπ„ÇØ "{0}" „Åß„ÅØ„ÄÅ{1} ÂÄã„ÅÆ„Ç≥„Ç¢„ÇíË¶ÅÊ±Ç„Åó„ÄÅ{2} ÂÄã„ÅÆ„Ç≥„Ç¢„ÇíÂèñÂæó„Åó„Åü„Åü„ÇÅ„ÄÅÁèæÂú®ÂêàË®à {3} ÂÄã„ÅÆ„Ç≥„Ç¢„Çí‰øùÊåÅ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">„Çø„Çπ„ÇØ "{0}" „Åß„ÅØ„ÄÅ{1} ÂÄã„ÅÆ„Ç≥„Ç¢„ÇíËß£Êîæ„Åó„Åü„Åü„ÇÅ„ÄÅÁèæÂú®ÂêàË®à {2} ÂÄã„ÅÆ„Ç≥„Ç¢„Çí‰øùÊåÅ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index a8b9e95d0a2..a315a48652f 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: "{0}" Ïñ¥ÏÖàÎ∏îÎ¶¨ÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏ Ï∫êÏãú ÌîåÎü¨Í∑∏ Ïù∏ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. 1Í∞úÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">ÌïÑÏöîÌïú NuGet Ïñ¥ÏÖàÎ∏îÎ¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÏòàÏÉÅ Í≤ΩÎ°ú: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">"{0}" ÏûëÏóÖÏóêÏÑú ÏΩîÏñ¥ {1}Í∞úÎ•º ÏöîÏ≤≠ÌñàÍ≥† ÏΩîÏñ¥ {2}Í∞úÎ•º ÌöçÎìùÌñàÏúºÎ©∞ ÏßÄÍ∏à Ï¥ù {3}Í∞úÏùò ÏΩîÏñ¥Î•º Î≥¥Ïú†ÌïòÍ≥† ÏûàÏäµÎãàÎã§.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">"{0}" ÏûëÏóÖÏóêÏÑú ÏΩîÏñ¥ {1}Í∞úÎ•º Ìï¥Ï†úÌñàÍ≥† ÏßÄÍ∏à Ï¥ù {2}Í∞úÏùò ÏΩîÏñ¥Î•º Î≥¥Ïú†ÌïòÍ≥† ÏûàÏäµÎãàÎã§.</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index dd63fc75115..00856a177e8 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: nie znaleziono wtyczek pamiƒôci podrƒôcznej projektu w zestawie ‚Äû{0}‚Äù. Oczekiwano jednej.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Nie znaleziono wymaganego zestawu NuGet. Oczekiwano ≈õcie≈ºki {0}.</target>
@@ -416,6 +421,11 @@
         <target state="translated">Zadanie ‚Äû{0}‚Äù ≈ºƒÖda≈Ço {1} rdzeni, uzyska≈Ço {2} i teraz jego ≈ÇƒÖczna liczba rdzeni to {3}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">Zadanie ‚Äû{0}‚Äù zwolni≈Ço rdzenie ({1}) i teraz jego ≈ÇƒÖczna liczba rdzeni to {2}.</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 54b6e04475e..becfa993d0d 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: n√£o foi encontrado nenhum plug-in de cache do projeto no assembly "{0}". Era esperado um plug-in.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Um assembly NuGet necess√°rio n√£o foi encontrado. Caminho Esperado: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">A tarefa "{0}" solicitou {1} n√∫cleos, adquiriu {2} n√∫cleos e agora cont√©m {3} n√∫cleos no total.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">A tarefa "{0}" liberou {1} n√∫cleos e agora cont√©m {2} n√∫cleos no total.</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 75cd9f7d0c3..abdf27bb687 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ –º–æ–¥—É–ª–∏ –∫—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–±–æ—Ä–∫–µ "{0}". –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –º–æ–¥—É–ª—å.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ NuGet. –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">–ó–∞–¥–∞—á–∞ "{0}" –∑–∞–ø—Ä–æ—Å–∏–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä ({1}) –∏ –ø–æ–ª—É—á–∏–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä ({2}). –¢–µ–ø–µ—Ä—å –æ–±—â–µ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∑–∞–¥–∞—á–∞, —Ä–∞–≤–Ω–æ {3}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">–ó–∞–¥–∞—á–∞ "{0}" –æ—Å–≤–æ–±–æ–¥–∏–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä ({1}). –¢–µ–ø–µ—Ä—å –æ–±—â–µ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç –∑–∞–¥–∞—á–∞, —Ä–∞–≤–Ω–æ {2}.</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 83a86862dee..023ad6274fd 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: "{0}" b√ºt√ºnle≈ütirilmi≈ü kodunda proje √∂nbelleƒüi eklentisi bulunamadƒ±. Bir eklenti bekleniyordu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Gereken NuGet derlemesi bulunamadƒ±. Beklenen Yol: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">"{0}" g√∂revi {1} √ßekirdek istedi, {2} √ßekirdek aldƒ± ve ≈üu anda toplam {3} √ßekirdek tutuyor.</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">"{0}" g√∂revi {1} √ßekirdeƒüi serbest bƒ±raktƒ±. ≈ûu anda toplam {2} √ßekirdek tutuyor.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 9be6ea491ba..400130f727e 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: Âú®Á®ãÂ∫èÈõÜ "{0}" ‰∏≠Êú™ÊâæÂà∞È°πÁõÆÁºìÂ≠òÊèí‰ª∂„ÄÇÂ∫îÊúâ‰∏Ä‰∏™Êèí‰ª∂„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Êú™ÊâæÂà∞ÊâÄÈúÄÁöÑ NuGet Á®ãÂ∫èÈõÜ„ÄÇÊâÄÈúÄË∑ØÂæÑ: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">‰ªªÂä°‚Äú{0}‚ÄùËØ∑Ê±Ç‰∫Ü {1} ‰∏™Ê†∏ÂøÉÔºåÂ∑≤Ëé∑Âèñ {2} ‰∏™Ê†∏ÂøÉÔºåÁé∞ÊÄªÂÖ±ÂåÖÂê´ {3} ‰∏™Ê†∏ÂøÉ„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">‰ªªÂä°‚Äú{0}‚ÄùÂèëÂ∏É‰∫Ü {1} ‰∏™Ê†∏ÂøÉÔºåÁé∞ÊÄªÂÖ±ÂåÖÂê´ {2} ‰∏™Ê†∏ÂøÉ„ÄÇ</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 70f6dd3f097..970cd8cd04f 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -191,6 +191,11 @@
         <target state="translated">MSB4270: Âú®ÁµÑ‰ª∂ "{0}" ‰∏≠Êâæ‰∏çÂà∞‰ªª‰ΩïÂ∞àÊ°àÂø´ÂèñÂ§ñÊéõÁ®ãÂºèÔºå‰ΩÜÊáâË©≤Ë¶ÅÊúâ‰∏ÄÂÄãÂ§ñÊéõÁ®ãÂºè„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="NodeReused">
+        <source>Reusing node {0} (PID: {1}).</source>
+        <target state="new">Reusing node {0} (PID: {1}).</target>
+        <note />
+      </trans-unit>
       <trans-unit id="NuGetAssemblyNotFound">
         <source>A required NuGet assembly was not found. Expected Path: {0}</source>
         <target state="translated">Êâæ‰∏çÂà∞ÂøÖË¶ÅÁöÑ NuGet ÂÖÉ‰ª∂„ÄÇÈ†êÊúüÁöÑË∑ØÂæë: {0}</target>
@@ -416,6 +421,11 @@
         <target state="translated">Â∑•‰Ωú "{0}" Â∑≤Ë¶ÅÊ±Ç {1} ÂÄãÊ†∏ÂøÉ„ÄÅÂ∑≤ÂèñÂæó {2} ÂÄãÊ†∏ÂøÉÔºåÁèæÂú®ÂÖ±‰øùÁïô {3} ÂÄãÊ†∏ÂøÉ„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="TaskAssemblyLoaded">
+        <source>Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</source>
+        <target state="new">Assembly loaded during {0}{1}: {2} (location: {3}, MVID: {4}, AppDomain: {5})</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TaskReleasedCores">
         <source>Task "{0}" released {1} cores and now holds {2} cores total.</source>
         <target state="translated">Â∑•‰Ωú "{0}" Â∑≤ÁôºË°å {1} ÂÄãÊ†∏ÂøÉÔºåÁèæÂú®ÂÖ±‰øùÁïô {2} ÂÄãÊ†∏ÂøÉ„ÄÇ</target>
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 997b6c29c0c..a0dd2580e23 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -6,11 +6,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using System.Text.RegularExpressions;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Text.RegularExpressions;
 
 #nullable disable
 
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index 977655e7fa2..15380c2d5a0 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Diagnostics;
 using System.IO;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Utilities/SimpleVersion.cs b/src/Build/Utilities/SimpleVersion.cs
index 82f23426a39..9ed8e0eb05d 100644
--- a/src/Build/Utilities/SimpleVersion.cs
+++ b/src/Build/Utilities/SimpleVersion.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Diagnostics;
 using System.Globalization;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 12e73b4806b..c70d46dac78 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -2,14 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Diagnostics;
 using System.Collections;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.IO;
 using System.Linq;
 using System.Text.RegularExpressions;
 using System.Xml;
-
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
diff --git a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
index d0ea43ec76e..acd3388da81 100644
--- a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
 using System.Xml;
 using Microsoft.Build.Construction;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index e9c01d6bd13..25667c21f6c 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -3,11 +3,11 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Construction;
 using System.IO;
 using System.Xml;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Deprecated/Conversion.UnitTests/OldVSProjectFileReader_Tests.cs b/src/Deprecated/Conversion.UnitTests/OldVSProjectFileReader_Tests.cs
index 950a3d5e18e..1f71766cbd9 100644
--- a/src/Deprecated/Conversion.UnitTests/OldVSProjectFileReader_Tests.cs
+++ b/src/Deprecated/Conversion.UnitTests/OldVSProjectFileReader_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Conversion.UnitTests/ProjectFileConverter_Tests.cs b/src/Deprecated/Conversion.UnitTests/ProjectFileConverter_Tests.cs
index 4f5b3823725..5a7f8163273 100644
--- a/src/Deprecated/Conversion.UnitTests/ProjectFileConverter_Tests.cs
+++ b/src/Deprecated/Conversion.UnitTests/ProjectFileConverter_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Conversion/AdditionalOptionsParser.cs b/src/Deprecated/Conversion/AdditionalOptionsParser.cs
index 13ef74e260c..b1460c62f46 100644
--- a/src/Deprecated/Conversion/AdditionalOptionsParser.cs
+++ b/src/Deprecated/Conversion/AdditionalOptionsParser.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Text;
diff --git a/src/Deprecated/Conversion/AssemblyInfo.cs b/src/Deprecated/Conversion/AssemblyInfo.cs
index c0eb0d198bb..9f260a4bf6f 100644
--- a/src/Deprecated/Conversion/AssemblyInfo.cs
+++ b/src/Deprecated/Conversion/AssemblyInfo.cs
@@ -1,6 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Security.Permissions;
 using System.Resources;
diff --git a/src/Deprecated/Conversion/AssemblyResources.cs b/src/Deprecated/Conversion/AssemblyResources.cs
index c0877022279..ccdba65a922 100644
--- a/src/Deprecated/Conversion/AssemblyResources.cs
+++ b/src/Deprecated/Conversion/AssemblyResources.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Resources;
 using System.Reflection;
 using System.Globalization;
diff --git a/src/Deprecated/Conversion/Constants.cs b/src/Deprecated/Conversion/Constants.cs
index 5a7c52a3c3b..05ffc70b443 100644
--- a/src/Deprecated/Conversion/Constants.cs
+++ b/src/Deprecated/Conversion/Constants.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Conversion
diff --git a/src/Deprecated/Conversion/OldVSProjectFileReader.cs b/src/Deprecated/Conversion/OldVSProjectFileReader.cs
index 93d3a29f1dd..a0f8f164e17 100644
--- a/src/Deprecated/Conversion/OldVSProjectFileReader.cs
+++ b/src/Deprecated/Conversion/OldVSProjectFileReader.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Conversion/ProjectFileConverter.cs b/src/Deprecated/Conversion/ProjectFileConverter.cs
index f8c13eceb4d..808ea0749a1 100644
--- a/src/Deprecated/Conversion/ProjectFileConverter.cs
+++ b/src/Deprecated/Conversion/ProjectFileConverter.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/BatchingEngine_Tests.cs b/src/Deprecated/Engine.UnitTests/BatchingEngine_Tests.cs
index 38fc04848c1..591373a9614 100644
--- a/src/Deprecated/Engine.UnitTests/BatchingEngine_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BatchingEngine_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/BuildItemDefinitionGroupXml_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildItemDefinitionGroupXml_Tests.cs
index 401d8328050..09bad8c8d39 100644
--- a/src/Deprecated/Engine.UnitTests/BuildItemDefinitionGroupXml_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildItemDefinitionGroupXml_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/BuildItemGroupChildXml_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildItemGroupChildXml_Tests.cs
index d8db53819c4..0fd52f93013 100644
--- a/src/Deprecated/Engine.UnitTests/BuildItemGroupChildXml_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildItemGroupChildXml_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/BuildItemGroupProxy_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildItemGroupProxy_Tests.cs
index 2a2406eb365..36d2e5a250b 100644
--- a/src/Deprecated/Engine.UnitTests/BuildItemGroupProxy_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildItemGroupProxy_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/BuildItemGroup_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildItemGroup_Tests.cs
index 553f47e77fd..d3bfa33cdfe 100644
--- a/src/Deprecated/Engine.UnitTests/BuildItemGroup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildItemGroup_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/BuildItem_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildItem_Tests.cs
index 87a19d88fe9..31e5f7f33bc 100644
--- a/src/Deprecated/Engine.UnitTests/BuildItem_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildItem_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/BuildPropertyGroupProxy_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildPropertyGroupProxy_Tests.cs
index 19dd41b56ca..471a412087f 100644
--- a/src/Deprecated/Engine.UnitTests/BuildPropertyGroupProxy_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildPropertyGroupProxy_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/BuildRequest_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildRequest_Tests.cs
index ea63a7c4aea..e9410241358 100644
--- a/src/Deprecated/Engine.UnitTests/BuildRequest_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildRequest_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/BuildResult_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildResult_Tests.cs
index 4b236667a6c..fd513ec6bff 100644
--- a/src/Deprecated/Engine.UnitTests/BuildResult_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildResult_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/BuildTask_Tests.cs b/src/Deprecated/Engine.UnitTests/BuildTask_Tests.cs
index c14b7375b0f..e86fcf19d40 100644
--- a/src/Deprecated/Engine.UnitTests/BuildTask_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/BuildTask_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/CacheEntry_Tests.cs b/src/Deprecated/Engine.UnitTests/CacheEntry_Tests.cs
index 8b972fad8b3..a54dd736553 100644
--- a/src/Deprecated/Engine.UnitTests/CacheEntry_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/CacheEntry_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/CacheManager_Tests.cs b/src/Deprecated/Engine.UnitTests/CacheManager_Tests.cs
index 2f88ba17696..a29953fe147 100644
--- a/src/Deprecated/Engine.UnitTests/CacheManager_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/CacheManager_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/CacheScope_Tests.cs b/src/Deprecated/Engine.UnitTests/CacheScope_Tests.cs
index 718e61840f0..c31074ed5fd 100644
--- a/src/Deprecated/Engine.UnitTests/CacheScope_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/CacheScope_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Choose_Tests.cs b/src/Deprecated/Engine.UnitTests/Choose_Tests.cs
index deff1ddba13..01740c10dbf 100644
--- a/src/Deprecated/Engine.UnitTests/Choose_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Choose_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/AddNewImport_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/AddNewImport_Tests.cs
index 2e60f18f20f..a29a9aaf8a6 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/AddNewImport_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/AddNewImport_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroupCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroupCollection_Tests.cs
index f0917417530..2e75151dd74 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroupCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroupCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroup_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroup_Tests.cs
index 5257bda908e..3f23ef5418e 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItemGroup_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItem_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItem_Tests.cs
index 07691154d7b..36346a09aed 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildItem_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildItem_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroupCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroupCollection_Tests.cs
index 36eacf29da8..0ecfa85e42f 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroupCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroupCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroup_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroup_Tests.cs
index b2ddc24b96e..510aa0c0cc7 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildPropertyGroup_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildProperty_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildProperty_Tests.cs
index f1cf4c8545d..f404cbe6a25 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildProperty_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildProperty_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 
 using System;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/BuildTask_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/BuildTask_Tests.cs
index 30b843f7c09..a4a1e25db4e 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/BuildTask_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/BuildTask_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestData.cs b/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestData.cs
index 5124e06aadb..6a7ee297fd3 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestData.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestData.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestHelpers.cs b/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestHelpers.cs
index b6033dfe120..dd4aa83b78d 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestHelpers.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/CompatibilityTestHelpers.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections.Generic;
 using System;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/EngineFileUtilities_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/EngineFileUtilities_Tests.cs
index d49757102bd..6d52b2ad042 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/EngineFileUtilities_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/EngineFileUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/Engine_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/Engine_Tests.cs
index 8142b417440..fb8071e9797 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/Engine_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/Engine_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/ImportCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/ImportCollection_Tests.cs
index 47eaae46c4c..a5c628e1154 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/ImportCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/ImportCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/Import_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/Import_Tests.cs
index 32ed6361aff..24f45c85abb 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/Import_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/Import_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/InvalidProjectfileException_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/InvalidProjectfileException_Tests.cs
index cd3bcb68bdc..c0bf9b10207 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/InvalidProjectfileException_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/InvalidProjectfileException_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/InvalidToolsetDefinitionException_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/InvalidToolsetDefinitionException_Tests.cs
index 1dc0573aecd..cd392c6aa53 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/InvalidToolsetDefinitionException_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/InvalidToolsetDefinitionException_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/Project_Tests.cs
index d57fa90f9e5..443f8ab355f 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/Project_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Security.Principal;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/TargetCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/TargetCollection_Tests.cs
index 5129675aa1f..929bbcd5363 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/TargetCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/TargetCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/Target_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/Target_Tests.cs
index 5de95337512..5e0eb30a014 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/Target_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/Target_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/ToolSet_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/ToolSet_Tests.cs
index 1e65748c014..40c3501be80 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/ToolSet_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/ToolSet_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/ToolsetCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/ToolsetCollection_Tests.cs
index 06d6da52122..b49e5d85d1d 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/ToolsetCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/ToolsetCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/UsingTaskCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/UsingTaskCollection_Tests.cs
index 20f5d3c0b17..7e9875d1e9c 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/UsingTaskCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/UsingTaskCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/Compatibility/UsingTask_Tests.cs b/src/Deprecated/Engine.UnitTests/Compatibility/UsingTask_Tests.cs
index 58fbb30dab1..a18ddc9fb3c 100644
--- a/src/Deprecated/Engine.UnitTests/Compatibility/UsingTask_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Compatibility/UsingTask_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/ConfigureableForwardingLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/ConfigureableForwardingLogger_Tests.cs
index 9481acfd6f8..50fae87fea3 100644
--- a/src/Deprecated/Engine.UnitTests/ConfigureableForwardingLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ConfigureableForwardingLogger_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/ConsoleLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/ConsoleLogger_Tests.cs
index d32a91008d2..c20ec968081 100644
--- a/src/Deprecated/Engine.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ConsoleLogger_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/CopyOnWriteHashtable_Tests.cs b/src/Deprecated/Engine.UnitTests/CopyOnWriteHashtable_Tests.cs
index 58548143982..8a1b3cf86ea 100644
--- a/src/Deprecated/Engine.UnitTests/CopyOnWriteHashtable_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/CopyOnWriteHashtable_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/DualQueue_Tests.cs b/src/Deprecated/Engine.UnitTests/DualQueue_Tests.cs
index 2d5a9148514..36f96f964a3 100644
--- a/src/Deprecated/Engine.UnitTests/DualQueue_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/DualQueue_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/EngineLoggingServices_Tests.cs b/src/Deprecated/Engine.UnitTests/EngineLoggingServices_Tests.cs
index 0cc0829e415..523d1efcd70 100644
--- a/src/Deprecated/Engine.UnitTests/EngineLoggingServices_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/EngineLoggingServices_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs b/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
index e2e5bcfd692..19716b7d824 100644
--- a/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/Engine_Tests.cs b/src/Deprecated/Engine.UnitTests/Engine_Tests.cs
index d5a5940e2d7..a1f4f2dd994 100644
--- a/src/Deprecated/Engine.UnitTests/Engine_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Engine_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/EscapingInProjects_Tests.cs b/src/Deprecated/Engine.UnitTests/EscapingInProjects_Tests.cs
index 63e6516679a..5904741689e 100644
--- a/src/Deprecated/Engine.UnitTests/EscapingInProjects_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/EscapingInProjects_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/EventArgsFormatting_Tests.cs b/src/Deprecated/Engine.UnitTests/EventArgsFormatting_Tests.cs
index 2544b551712..4ec1aaea85f 100644
--- a/src/Deprecated/Engine.UnitTests/EventArgsFormatting_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/EventArgsFormatting_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using NUnit.Framework;
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Expander_Tests.cs b/src/Deprecated/Engine.UnitTests/Expander_Tests.cs
index 74af338b24c..9286aad3558 100644
--- a/src/Deprecated/Engine.UnitTests/Expander_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Expander_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/ExpressionShredder_Tests.cs b/src/Deprecated/Engine.UnitTests/ExpressionShredder_Tests.cs
index 1f0532061ba..ad182c69884 100644
--- a/src/Deprecated/Engine.UnitTests/ExpressionShredder_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ExpressionShredder_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/ExpressionTree_Tests.cs b/src/Deprecated/Engine.UnitTests/ExpressionTree_Tests.cs
index ca5cbccf744..a1fc5b6ac9b 100644
--- a/src/Deprecated/Engine.UnitTests/ExpressionTree_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ExpressionTree_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
index 557447e9cda..5605b1e2310 100644
--- a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/GroupingCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/GroupingCollection_Tests.cs
index b376b9cb88c..7d069a7ae05 100644
--- a/src/Deprecated/Engine.UnitTests/GroupingCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/GroupingCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/HashTableUtility_Tests.cs b/src/Deprecated/Engine.UnitTests/HashTableUtility_Tests.cs
index c44a38fec60..2a7d3f3edab 100644
--- a/src/Deprecated/Engine.UnitTests/HashTableUtility_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/HashTableUtility_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/ImportCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/ImportCollection_Tests.cs
index 120ce7d103c..f44a4169435 100644
--- a/src/Deprecated/Engine.UnitTests/ImportCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ImportCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/IntrinsicTask_Tests.cs b/src/Deprecated/Engine.UnitTests/IntrinsicTask_Tests.cs
index 6fd8b8525fd..35f4de5709f 100644
--- a/src/Deprecated/Engine.UnitTests/IntrinsicTask_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/IntrinsicTask_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/InvalidProjectFileException_Tests.cs b/src/Deprecated/Engine.UnitTests/InvalidProjectFileException_Tests.cs
index 6257cb9d078..599a19cfc3f 100644
--- a/src/Deprecated/Engine.UnitTests/InvalidProjectFileException_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/InvalidProjectFileException_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/ItemBucket_Tests.cs b/src/Deprecated/Engine.UnitTests/ItemBucket_Tests.cs
index da7de4fba54..0df120e2083 100644
--- a/src/Deprecated/Engine.UnitTests/ItemBucket_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ItemBucket_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/ItemDefinitionLibrary_Tests.cs b/src/Deprecated/Engine.UnitTests/ItemDefinitionLibrary_Tests.cs
index 9d47de51899..db0a3760d63 100644
--- a/src/Deprecated/Engine.UnitTests/ItemDefinitionLibrary_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ItemDefinitionLibrary_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/ItemExpander_Tests.cs b/src/Deprecated/Engine.UnitTests/ItemExpander_Tests.cs
index ea3034e4d3f..a242d3b5282 100644
--- a/src/Deprecated/Engine.UnitTests/ItemExpander_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ItemExpander_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Item_Tests.cs b/src/Deprecated/Engine.UnitTests/Item_Tests.cs
index 28f982f9961..9534bcbef79 100644
--- a/src/Deprecated/Engine.UnitTests/Item_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Item_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/LocalNode_Tests.cs b/src/Deprecated/Engine.UnitTests/LocalNode_Tests.cs
index 7401bcfa9ea..010afb84108 100644
--- a/src/Deprecated/Engine.UnitTests/LocalNode_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/LocalNode_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/LogFormatter_Tests.cs b/src/Deprecated/Engine.UnitTests/LogFormatter_Tests.cs
index ce90a19b9a7..dc8f5e5ea13 100644
--- a/src/Deprecated/Engine.UnitTests/LogFormatter_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/LogFormatter_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/LoggerDescription_Tests.cs b/src/Deprecated/Engine.UnitTests/LoggerDescription_Tests.cs
index 2c1c1bb8aa2..9b5fc6a0ed8 100644
--- a/src/Deprecated/Engine.UnitTests/LoggerDescription_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/LoggerDescription_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/LoggerException_Tests.cs b/src/Deprecated/Engine.UnitTests/LoggerException_Tests.cs
index fb231e09250..0dd9d40ee95 100644
--- a/src/Deprecated/Engine.UnitTests/LoggerException_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/LoggerException_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs b/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
index de461f2716f..5fd283b96b8 100644
--- a/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/MockNode.cs b/src/Deprecated/Engine.UnitTests/MockNode.cs
index a006ae62cf4..e15b49678e1 100644
--- a/src/Deprecated/Engine.UnitTests/MockNode.cs
+++ b/src/Deprecated/Engine.UnitTests/MockNode.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/MockProjectStartedLogger.cs b/src/Deprecated/Engine.UnitTests/MockProjectStartedLogger.cs
index a7dd2476bdf..39b945d3b31 100644
--- a/src/Deprecated/Engine.UnitTests/MockProjectStartedLogger.cs
+++ b/src/Deprecated/Engine.UnitTests/MockProjectStartedLogger.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/MockTask.cs b/src/Deprecated/Engine.UnitTests/MockTask.cs
index 8aca15c4838..e884fd59f52 100644
--- a/src/Deprecated/Engine.UnitTests/MockTask.cs
+++ b/src/Deprecated/Engine.UnitTests/MockTask.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/NodeLoggingEventTests.cs b/src/Deprecated/Engine.UnitTests/NodeLoggingEventTests.cs
index 0b106ce3938..bf0059aecfd 100644
--- a/src/Deprecated/Engine.UnitTests/NodeLoggingEventTests.cs
+++ b/src/Deprecated/Engine.UnitTests/NodeLoggingEventTests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/NodeManager_Tests.cs b/src/Deprecated/Engine.UnitTests/NodeManager_Tests.cs
index 6a108e21c17..ffac549db5f 100644
--- a/src/Deprecated/Engine.UnitTests/NodeManager_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/NodeManager_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/NodeRequestMapping_Tests.cs b/src/Deprecated/Engine.UnitTests/NodeRequestMapping_Tests.cs
index c7cadce62fe..917333040ba 100644
--- a/src/Deprecated/Engine.UnitTests/NodeRequestMapping_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/NodeRequestMapping_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/NodeStatus_Tests.cs b/src/Deprecated/Engine.UnitTests/NodeStatus_Tests.cs
index 5f9f7064499..a45b6843ef5 100644
--- a/src/Deprecated/Engine.UnitTests/NodeStatus_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/NodeStatus_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/OnError_Tests.cs b/src/Deprecated/Engine.UnitTests/OnError_Tests.cs
index ea92fe05820..c7ae69c3c7d 100644
--- a/src/Deprecated/Engine.UnitTests/OnError_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/OnError_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Parser_Tests.cs b/src/Deprecated/Engine.UnitTests/Parser_Tests.cs
index 321ba15dcb7..b37e54e36e6 100644
--- a/src/Deprecated/Engine.UnitTests/Parser_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Parser_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/ProjectIdLogger.cs b/src/Deprecated/Engine.UnitTests/ProjectIdLogger.cs
index e6a6c046230..ac4bd424323 100644
--- a/src/Deprecated/Engine.UnitTests/ProjectIdLogger.cs
+++ b/src/Deprecated/Engine.UnitTests/ProjectIdLogger.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/ProjectManager_Tests.cs b/src/Deprecated/Engine.UnitTests/ProjectManager_Tests.cs
index 48183e4407d..41d99de4a84 100644
--- a/src/Deprecated/Engine.UnitTests/ProjectManager_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ProjectManager_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 #region Using directives
 
 using System;
diff --git a/src/Deprecated/Engine.UnitTests/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
index ad705831690..0321d970bd5 100644
--- a/src/Deprecated/Engine.UnitTests/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Resources;
diff --git a/src/Deprecated/Engine.UnitTests/PropertyGroup_Tests.cs b/src/Deprecated/Engine.UnitTests/PropertyGroup_Tests.cs
index 247a66cfb76..a44c713c9b8 100644
--- a/src/Deprecated/Engine.UnitTests/PropertyGroup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/PropertyGroup_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
     using System;
     using System.Collections;
 
diff --git a/src/Deprecated/Engine.UnitTests/Property_Tests.cs b/src/Deprecated/Engine.UnitTests/Property_Tests.cs
index 736656005ac..45631ee035f 100644
--- a/src/Deprecated/Engine.UnitTests/Property_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Property_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using NUnit.Framework;
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine.UnitTests/Scanner_Tests.cs b/src/Deprecated/Engine.UnitTests/Scanner_Tests.cs
index c7f717b6709..d1a2e0bf821 100644
--- a/src/Deprecated/Engine.UnitTests/Scanner_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Scanner_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/SharedMemory_Test.cs b/src/Deprecated/Engine.UnitTests/SharedMemory_Test.cs
index d8cef6666bb..903a4672d44 100644
--- a/src/Deprecated/Engine.UnitTests/SharedMemory_Test.cs
+++ b/src/Deprecated/Engine.UnitTests/SharedMemory_Test.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/SolutionWrapperProject_Tests.cs b/src/Deprecated/Engine.UnitTests/SolutionWrapperProject_Tests.cs
index a202f85c38e..32930c3e3fb 100644
--- a/src/Deprecated/Engine.UnitTests/SolutionWrapperProject_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/SolutionWrapperProject_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/TargetCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/TargetCollection_Tests.cs
index 1a7ff566ff6..fa53fd1ac3e 100644
--- a/src/Deprecated/Engine.UnitTests/TargetCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TargetCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/TargetDependencyAnalyzer_Tests.cs b/src/Deprecated/Engine.UnitTests/TargetDependencyAnalyzer_Tests.cs
index 53c3cff6357..a7ebf203b7f 100644
--- a/src/Deprecated/Engine.UnitTests/TargetDependencyAnalyzer_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TargetDependencyAnalyzer_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Resources;
diff --git a/src/Deprecated/Engine.UnitTests/TargetInProgressState_Tests.cs b/src/Deprecated/Engine.UnitTests/TargetInProgressState_Tests.cs
index 4b94865d723..7208e44a525 100644
--- a/src/Deprecated/Engine.UnitTests/TargetInProgressState_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TargetInProgressState_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/TaskEngine_Tests.cs b/src/Deprecated/Engine.UnitTests/TaskEngine_Tests.cs
index 4e404c94257..4ee7f8d6178 100644
--- a/src/Deprecated/Engine.UnitTests/TaskEngine_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskEngine_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/TaskExecutionContext_Tests.cs b/src/Deprecated/Engine.UnitTests/TaskExecutionContext_Tests.cs
index 99b7c7eb9e1..9cca1f5f524 100644
--- a/src/Deprecated/Engine.UnitTests/TaskExecutionContext_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskExecutionContext_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/TaskExecutionState_Test.cs b/src/Deprecated/Engine.UnitTests/TaskExecutionState_Test.cs
index b825f739ebc..fe1a2deeeb3 100644
--- a/src/Deprecated/Engine.UnitTests/TaskExecutionState_Test.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskExecutionState_Test.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/TaskItem_Tests.cs b/src/Deprecated/Engine.UnitTests/TaskItem_Tests.cs
index 80dc4d27bec..d71b488df0a 100644
--- a/src/Deprecated/Engine.UnitTests/TaskItem_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskItem_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/TaskRegistry_Tests.cs b/src/Deprecated/Engine.UnitTests/TaskRegistry_Tests.cs
index 41c6e2a2bea..0b70e2bc552 100644
--- a/src/Deprecated/Engine.UnitTests/TaskRegistry_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskRegistry_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/TaskWorkerThread_Tests.cs b/src/Deprecated/Engine.UnitTests/TaskWorkerThread_Tests.cs
index 07e64bf7222..023dae3a02c 100644
--- a/src/Deprecated/Engine.UnitTests/TaskWorkerThread_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/TaskWorkerThread_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine.UnitTests/ToolsVersion_Tests.cs b/src/Deprecated/Engine.UnitTests/ToolsVersion_Tests.cs
index a1e2cce9198..0a2eb0629af 100644
--- a/src/Deprecated/Engine.UnitTests/ToolsVersion_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ToolsVersion_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReaderTestHelper.cs b/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReaderTestHelper.cs
index c2048ff763e..a1169ea0989 100644
--- a/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReaderTestHelper.cs
+++ b/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReaderTestHelper.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReader_Tests.cs b/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReader_Tests.cs
index bef6a3f606c..735d39dbc35 100644
--- a/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReader_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ToolsetConfigurationReader_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/ToolsetReader_Tests.cs b/src/Deprecated/Engine.UnitTests/ToolsetReader_Tests.cs
index 298c6b45105..ceee9e343dd 100644
--- a/src/Deprecated/Engine.UnitTests/ToolsetReader_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ToolsetReader_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/ToolsetRegistryReader_Tests.cs b/src/Deprecated/Engine.UnitTests/ToolsetRegistryReader_Tests.cs
index d78426b9377..a15965d4f01 100644
--- a/src/Deprecated/Engine.UnitTests/ToolsetRegistryReader_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/ToolsetRegistryReader_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Configuration;
diff --git a/src/Deprecated/Engine.UnitTests/Toolset_Tests.cs b/src/Deprecated/Engine.UnitTests/Toolset_Tests.cs
index bc7dee889dc..d94a85bcbf2 100644
--- a/src/Deprecated/Engine.UnitTests/Toolset_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Toolset_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine.UnitTests/UsingTaskCollection_Tests.cs b/src/Deprecated/Engine.UnitTests/UsingTaskCollection_Tests.cs
index 14f53e55b79..d19f7cb7428 100644
--- a/src/Deprecated/Engine.UnitTests/UsingTaskCollection_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/UsingTaskCollection_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/Utilities_Tests.cs b/src/Deprecated/Engine.UnitTests/Utilities_Tests.cs
index 4177a8bd405..7d3d8fdcccd 100644
--- a/src/Deprecated/Engine.UnitTests/Utilities_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Utilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Reflection;
diff --git a/src/Deprecated/Engine.UnitTests/VCProjectParser_Tests.cs b/src/Deprecated/Engine.UnitTests/VCProjectParser_Tests.cs
index 37aa9a22d58..d879b420870 100644
--- a/src/Deprecated/Engine.UnitTests/VCProjectParser_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/VCProjectParser_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine.UnitTests/XmlSearcher_Tests.cs b/src/Deprecated/Engine.UnitTests/XmlSearcher_Tests.cs
index 2ba53b0acc2..88cf72e8dd1 100644
--- a/src/Deprecated/Engine.UnitTests/XmlSearcher_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/XmlSearcher_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/XmlTestUtilities.cs b/src/Deprecated/Engine.UnitTests/XmlTestUtilities.cs
index e46fce34692..1d53b74a255 100644
--- a/src/Deprecated/Engine.UnitTests/XmlTestUtilities.cs
+++ b/src/Deprecated/Engine.UnitTests/XmlTestUtilities.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Text;
diff --git a/src/Deprecated/Engine.UnitTests/enginehelpers.cs b/src/Deprecated/Engine.UnitTests/enginehelpers.cs
index d8e951c8b11..f2da5eaf5c5 100644
--- a/src/Deprecated/Engine.UnitTests/enginehelpers.cs
+++ b/src/Deprecated/Engine.UnitTests/enginehelpers.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine.UnitTests/projectschemavalidationhandler_tests.cs b/src/Deprecated/Engine.UnitTests/projectschemavalidationhandler_tests.cs
index 2cc1dd1a3bc..3a64926a5c5 100644
--- a/src/Deprecated/Engine.UnitTests/projectschemavalidationhandler_tests.cs
+++ b/src/Deprecated/Engine.UnitTests/projectschemavalidationhandler_tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Resources;
diff --git a/src/Deprecated/Engine/AssemblyInfo.cs b/src/Deprecated/Engine/AssemblyInfo.cs
index 1fdb6408e1e..c5b1b730cff 100644
--- a/src/Deprecated/Engine/AssemblyInfo.cs
+++ b/src/Deprecated/Engine/AssemblyInfo.cs
@@ -1,6 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Resources;
 using System.Security.Permissions;
diff --git a/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs b/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
index c2822f4fc16..5d7aa08520c 100644
--- a/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs b/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
index 3cf94253502..1d58a30e4a7 100644
--- a/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.IO;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Caching/CacheEntry.cs b/src/Deprecated/Engine/Caching/CacheEntry.cs
index 69c10aaccb2..b9c8a59e74c 100644
--- a/src/Deprecated/Engine/Caching/CacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/CacheEntry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.IO;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Caching/CacheEntryCustomSerializer.cs b/src/Deprecated/Engine/Caching/CacheEntryCustomSerializer.cs
index c77668154c6..809067d4616 100644
--- a/src/Deprecated/Engine/Caching/CacheEntryCustomSerializer.cs
+++ b/src/Deprecated/Engine/Caching/CacheEntryCustomSerializer.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Caching/PropertyCacheEntry.cs b/src/Deprecated/Engine/Caching/PropertyCacheEntry.cs
index 2ee0f811477..d70ee64af30 100644
--- a/src/Deprecated/Engine/Caching/PropertyCacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/PropertyCacheEntry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.IO;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Choose/Choose.cs b/src/Deprecated/Engine/Choose/Choose.cs
index b3fb2c7c79f..0ca947a0486 100644
--- a/src/Deprecated/Engine/Choose/Choose.cs
+++ b/src/Deprecated/Engine/Choose/Choose.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Xml;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Choose/GroupEnumeratorHelper.cs b/src/Deprecated/Engine/Choose/GroupEnumeratorHelper.cs
index 6ca1f091fb0..6c164a2b84c 100644
--- a/src/Deprecated/Engine/Choose/GroupEnumeratorHelper.cs
+++ b/src/Deprecated/Engine/Choose/GroupEnumeratorHelper.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 
 using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
diff --git a/src/Deprecated/Engine/Choose/GroupingCollection.cs b/src/Deprecated/Engine/Choose/GroupingCollection.cs
index 6751aec4eea..16c60f1e1af 100644
--- a/src/Deprecated/Engine/Choose/GroupingCollection.cs
+++ b/src/Deprecated/Engine/Choose/GroupingCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Choose/When.cs b/src/Deprecated/Engine/Choose/When.cs
index 00ede41125f..d995c8833ac 100644
--- a/src/Deprecated/Engine/Choose/When.cs
+++ b/src/Deprecated/Engine/Choose/When.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 4fcde96fdfe..b3cf778c04d 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Collections/DualQueue.cs b/src/Deprecated/Engine/Collections/DualQueue.cs
index fff75c0a193..4136db8a3e9 100644
--- a/src/Deprecated/Engine/Collections/DualQueue.cs
+++ b/src/Deprecated/Engine/Collections/DualQueue.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Threading;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Collections/HashTableUtility.cs b/src/Deprecated/Engine/Collections/HashTableUtility.cs
index e15c91b7865..f143143524e 100644
--- a/src/Deprecated/Engine/Collections/HashTableUtility.cs
+++ b/src/Deprecated/Engine/Collections/HashTableUtility.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Conditionals/AndExpressionNode.cs b/src/Deprecated/Engine/Conditionals/AndExpressionNode.cs
index b05b1785725..f6b4714046f 100644
--- a/src/Deprecated/Engine/Conditionals/AndExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/AndExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs b/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
index ff1462d1eb0..9921f9a13ff 100644
--- a/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
+++ b/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     internal static class CharacterUtilities
diff --git a/src/Deprecated/Engine/Conditionals/ConditionEvaluationState.cs b/src/Deprecated/Engine/Conditionals/ConditionEvaluationState.cs
index a0207d81cf4..4355f02bb7b 100644
--- a/src/Deprecated/Engine/Conditionals/ConditionEvaluationState.cs
+++ b/src/Deprecated/Engine/Conditionals/ConditionEvaluationState.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 using System.Xml;
 
diff --git a/src/Deprecated/Engine/Conditionals/EqualExpressionNode.cs b/src/Deprecated/Engine/Conditionals/EqualExpressionNode.cs
index 87a73307e07..eca80addba0 100644
--- a/src/Deprecated/Engine/Conditionals/EqualExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/EqualExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs b/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
index 896c5979373..bde7889d466 100644
--- a/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine/Conditionals/GenericExpressionNode.cs b/src/Deprecated/Engine/Conditionals/GenericExpressionNode.cs
index cd4f8d25fac..f1bfdaf7f4d 100644
--- a/src/Deprecated/Engine/Conditionals/GenericExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/GenericExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/GreaterThanExpressionNode.cs b/src/Deprecated/Engine/Conditionals/GreaterThanExpressionNode.cs
index db1f39db41c..9f2a5084ae0 100644
--- a/src/Deprecated/Engine/Conditionals/GreaterThanExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/GreaterThanExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/GreaterThanOrEqualExpressionNode.cs b/src/Deprecated/Engine/Conditionals/GreaterThanOrEqualExpressionNode.cs
index ff8fc4f6cfc..d601ae68143 100644
--- a/src/Deprecated/Engine/Conditionals/GreaterThanOrEqualExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/GreaterThanOrEqualExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs b/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
index de9a73dfc53..0b9ef6853ee 100644
--- a/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs b/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
index 3e60b10c7c1..14a0a6c2e62 100644
--- a/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/MultipleComparisonExpressionNode.cs b/src/Deprecated/Engine/Conditionals/MultipleComparisonExpressionNode.cs
index aeb581435b4..ac037127800 100644
--- a/src/Deprecated/Engine/Conditionals/MultipleComparisonExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/MultipleComparisonExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/NotEqualExpressionNode.cs b/src/Deprecated/Engine/Conditionals/NotEqualExpressionNode.cs
index 8c3a6221de0..17fc5e7c863 100644
--- a/src/Deprecated/Engine/Conditionals/NotEqualExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/NotEqualExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/NotExpressionNode.cs b/src/Deprecated/Engine/Conditionals/NotExpressionNode.cs
index 5167530f58c..17fc122cc85 100644
--- a/src/Deprecated/Engine/Conditionals/NotExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/NotExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/NumericComparisonExpressionNode.cs b/src/Deprecated/Engine/Conditionals/NumericComparisonExpressionNode.cs
index feffc85f7d7..ea6e3c80780 100644
--- a/src/Deprecated/Engine/Conditionals/NumericComparisonExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/NumericComparisonExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/NumericExpressionNode.cs b/src/Deprecated/Engine/Conditionals/NumericExpressionNode.cs
index c556fc25b49..53ae427394c 100644
--- a/src/Deprecated/Engine/Conditionals/NumericExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/NumericExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/OperandExpressionNode.cs b/src/Deprecated/Engine/Conditionals/OperandExpressionNode.cs
index 8773ccddd51..fc92a743b34 100644
--- a/src/Deprecated/Engine/Conditionals/OperandExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/OperandExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/OperatorExpressionNode.cs b/src/Deprecated/Engine/Conditionals/OperatorExpressionNode.cs
index 932b9c3c8dd..c090f79f569 100644
--- a/src/Deprecated/Engine/Conditionals/OperatorExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/OperatorExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/OrExpressionNode.cs b/src/Deprecated/Engine/Conditionals/OrExpressionNode.cs
index 2dd6791916b..39d1df39fbe 100644
--- a/src/Deprecated/Engine/Conditionals/OrExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/OrExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/Parser.cs b/src/Deprecated/Engine/Conditionals/Parser.cs
index 8871466f464..a6759139298 100644
--- a/src/Deprecated/Engine/Conditionals/Parser.cs
+++ b/src/Deprecated/Engine/Conditionals/Parser.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 using System.Xml;
 using System;
diff --git a/src/Deprecated/Engine/Conditionals/Scanner.cs b/src/Deprecated/Engine/Conditionals/Scanner.cs
index 23c0a26e1a9..ae786ef938b 100644
--- a/src/Deprecated/Engine/Conditionals/Scanner.cs
+++ b/src/Deprecated/Engine/Conditionals/Scanner.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Globalization;
 using System;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/Conditionals/StringExpressionNode.cs b/src/Deprecated/Engine/Conditionals/StringExpressionNode.cs
index 1c28c1a2f38..6c4005ca9c9 100644
--- a/src/Deprecated/Engine/Conditionals/StringExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/StringExpressionNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Conditionals/Token.cs b/src/Deprecated/Engine/Conditionals/Token.cs
index 58ebbf97903..d9fcca9d366 100644
--- a/src/Deprecated/Engine/Conditionals/Token.cs
+++ b/src/Deprecated/Engine/Conditionals/Token.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Engine/BatchingEngine.cs b/src/Deprecated/Engine/Engine/BatchingEngine.cs
index e8e30c39522..3b7b78a6015 100644
--- a/src/Deprecated/Engine/Engine/BatchingEngine.cs
+++ b/src/Deprecated/Engine/Engine/BatchingEngine.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/BuildRequest.cs b/src/Deprecated/Engine/Engine/BuildRequest.cs
index 89419a6fe2b..1e4f2694f47 100644
--- a/src/Deprecated/Engine/Engine/BuildRequest.cs
+++ b/src/Deprecated/Engine/Engine/BuildRequest.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Diagnostics;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/BuildResult.cs b/src/Deprecated/Engine/Engine/BuildResult.cs
index 3a4518a4211..921eb36531e 100644
--- a/src/Deprecated/Engine/Engine/BuildResult.cs
+++ b/src/Deprecated/Engine/Engine/BuildResult.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.IO;
diff --git a/src/Deprecated/Engine/Engine/BuildTask.cs b/src/Deprecated/Engine/Engine/BuildTask.cs
index 2bf5ea34e01..35a9bf9fcf2 100644
--- a/src/Deprecated/Engine/Engine/BuildTask.cs
+++ b/src/Deprecated/Engine/Engine/BuildTask.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/CacheManager.cs b/src/Deprecated/Engine/Engine/CacheManager.cs
index 0ed428b9dd2..5dab13cb787 100644
--- a/src/Deprecated/Engine/Engine/CacheManager.cs
+++ b/src/Deprecated/Engine/Engine/CacheManager.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/CacheScope.cs b/src/Deprecated/Engine/Engine/CacheScope.cs
index 4e87cab7e09..99891eac6e5 100644
--- a/src/Deprecated/Engine/Engine/CacheScope.cs
+++ b/src/Deprecated/Engine/Engine/CacheScope.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Threading;
diff --git a/src/Deprecated/Engine/Engine/Engine.cs b/src/Deprecated/Engine/Engine/Engine.cs
index aa2d5670394..f86f29afae3 100644
--- a/src/Deprecated/Engine/Engine/Engine.cs
+++ b/src/Deprecated/Engine/Engine/Engine.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/EngineCallback.cs b/src/Deprecated/Engine/Engine/EngineCallback.cs
index cead0ac2c9e..c296b99e327 100644
--- a/src/Deprecated/Engine/Engine/EngineCallback.cs
+++ b/src/Deprecated/Engine/Engine/EngineCallback.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/EngineCommand.cs b/src/Deprecated/Engine/Engine/EngineCommand.cs
index 48f1ea0b00e..5dd38dd9f98 100644
--- a/src/Deprecated/Engine/Engine/EngineCommand.cs
+++ b/src/Deprecated/Engine/Engine/EngineCommand.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using Microsoft.Build.BuildEngine.Shared;
 
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
index df792b5025b..c07525b9d17 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
index de2abc127a3..6e9885a4a92 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Threading;
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
index 649526dc0ab..de4d5685304 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Threading;
 
diff --git a/src/Deprecated/Engine/Engine/EngineProxy.cs b/src/Deprecated/Engine/Engine/EngineProxy.cs
index ee84357a8b2..1adb71454fd 100644
--- a/src/Deprecated/Engine/Engine/EngineProxy.cs
+++ b/src/Deprecated/Engine/Engine/EngineProxy.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/EventRedirector.cs b/src/Deprecated/Engine/Engine/EventRedirector.cs
index 3c83a4fab79..6b2ba26679f 100644
--- a/src/Deprecated/Engine/Engine/EventRedirector.cs
+++ b/src/Deprecated/Engine/Engine/EventRedirector.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
 
diff --git a/src/Deprecated/Engine/Engine/EventSource.cs b/src/Deprecated/Engine/Engine/EventSource.cs
index a7f60365d38..08ae814e058 100644
--- a/src/Deprecated/Engine/Engine/EventSource.cs
+++ b/src/Deprecated/Engine/Engine/EventSource.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine/Engine/ExecutionContext.cs b/src/Deprecated/Engine/Engine/ExecutionContext.cs
index a67f46bac82..ef68b9c8f8c 100644
--- a/src/Deprecated/Engine/Engine/ExecutionContext.cs
+++ b/src/Deprecated/Engine/Engine/ExecutionContext.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Engine/Expander.cs b/src/Deprecated/Engine/Engine/Expander.cs
index 8fa4792b16c..3255c4ce3a0 100644
--- a/src/Deprecated/Engine/Engine/Expander.cs
+++ b/src/Deprecated/Engine/Engine/Expander.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Text;
diff --git a/src/Deprecated/Engine/Engine/IEngineCallback.cs b/src/Deprecated/Engine/Engine/IEngineCallback.cs
index ef0e68ec266..cb5b1969340 100644
--- a/src/Deprecated/Engine/Engine/IEngineCallback.cs
+++ b/src/Deprecated/Engine/Engine/IEngineCallback.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Engine/IItemPropertyGrouping.cs b/src/Deprecated/Engine/Engine/IItemPropertyGrouping.cs
index 384c819a7a8..9c350f7ae66 100644
--- a/src/Deprecated/Engine/Engine/IItemPropertyGrouping.cs
+++ b/src/Deprecated/Engine/Engine/IItemPropertyGrouping.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Engine/INodeDescription.cs b/src/Deprecated/Engine/Engine/INodeDescription.cs
index 10260aaba32..b7498e70226 100644
--- a/src/Deprecated/Engine/Engine/INodeDescription.cs
+++ b/src/Deprecated/Engine/Engine/INodeDescription.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     internal interface INodeDescription
diff --git a/src/Deprecated/Engine/Engine/INodeProvider.cs b/src/Deprecated/Engine/Engine/INodeProvider.cs
index 5ac748c3d27..9ae4d575f26 100644
--- a/src/Deprecated/Engine/Engine/INodeProvider.cs
+++ b/src/Deprecated/Engine/Engine/INodeProvider.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Engine/ITaskRegistry.cs b/src/Deprecated/Engine/Engine/ITaskRegistry.cs
index befb3870587..855f498a83c 100644
--- a/src/Deprecated/Engine/Engine/ITaskRegistry.cs
+++ b/src/Deprecated/Engine/Engine/ITaskRegistry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Xml;
 using Microsoft.Build.BuildEngine.Shared;
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine/Engine/Import.cs b/src/Deprecated/Engine/Engine/Import.cs
index b7079e6f05c..bad3fb3d99d 100644
--- a/src/Deprecated/Engine/Engine/Import.cs
+++ b/src/Deprecated/Engine/Engine/Import.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Xml;
 
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/ImportCollection.cs b/src/Deprecated/Engine/Engine/ImportCollection.cs
index 5d2a7d317d9..21957a6cbfe 100644
--- a/src/Deprecated/Engine/Engine/ImportCollection.cs
+++ b/src/Deprecated/Engine/Engine/ImportCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Engine/ImportedProject.cs b/src/Deprecated/Engine/Engine/ImportedProject.cs
index e00308c90a7..7bcfc1ba5b2 100644
--- a/src/Deprecated/Engine/Engine/ImportedProject.cs
+++ b/src/Deprecated/Engine/Engine/ImportedProject.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs b/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
index 36edcdfd0f7..30b2bc929a9 100644
--- a/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
+++ b/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/ItemBucket.cs b/src/Deprecated/Engine/Engine/ItemBucket.cs
index b351e8c182f..6cd83a31170 100644
--- a/src/Deprecated/Engine/Engine/ItemBucket.cs
+++ b/src/Deprecated/Engine/Engine/ItemBucket.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/Node.cs b/src/Deprecated/Engine/Engine/Node.cs
index 15647bced7c..25b5959951a 100644
--- a/src/Deprecated/Engine/Engine/Node.cs
+++ b/src/Deprecated/Engine/Engine/Node.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs b/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
index 2aacc066b71..896a869526c 100644
--- a/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
+++ b/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Engine/NodeManager.cs b/src/Deprecated/Engine/Engine/NodeManager.cs
index f80d1707a43..72dd15b4ae6 100644
--- a/src/Deprecated/Engine/Engine/NodeManager.cs
+++ b/src/Deprecated/Engine/Engine/NodeManager.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/NodeRequestMapping.cs b/src/Deprecated/Engine/Engine/NodeRequestMapping.cs
index d17c3b1afef..2b29c1d3916 100644
--- a/src/Deprecated/Engine/Engine/NodeRequestMapping.cs
+++ b/src/Deprecated/Engine/Engine/NodeRequestMapping.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Engine/NodeWorkerThread.cs b/src/Deprecated/Engine/Engine/NodeWorkerThread.cs
index a08a2e4958c..4486e5be236 100644
--- a/src/Deprecated/Engine/Engine/NodeWorkerThread.cs
+++ b/src/Deprecated/Engine/Engine/NodeWorkerThread.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index 81ca6348c7c..e99d8f5961b 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Security;
diff --git a/src/Deprecated/Engine/Engine/ProjectBuildState.cs b/src/Deprecated/Engine/Engine/ProjectBuildState.cs
index b1dcc8ef06d..be2c64a3767 100644
--- a/src/Deprecated/Engine/Engine/ProjectBuildState.cs
+++ b/src/Deprecated/Engine/Engine/ProjectBuildState.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Diagnostics;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/ProjectManager.cs b/src/Deprecated/Engine/Engine/ProjectManager.cs
index 59b3c2c4d21..3c4c1ad9e70 100644
--- a/src/Deprecated/Engine/Engine/ProjectManager.cs
+++ b/src/Deprecated/Engine/Engine/ProjectManager.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 #region Using directives
 
 using System;
diff --git a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
index 2b8536bf7e2..de94023867b 100644
--- a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
+++ b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
index cec7b909fea..f7b892ae87e 100644
--- a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
+++ b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Security;
diff --git a/src/Deprecated/Engine/Engine/RequestRoutingContext.cs b/src/Deprecated/Engine/Engine/RequestRoutingContext.cs
index eaaeec445bc..958bbf9468e 100644
--- a/src/Deprecated/Engine/Engine/RequestRoutingContext.cs
+++ b/src/Deprecated/Engine/Engine/RequestRoutingContext.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
 
diff --git a/src/Deprecated/Engine/Engine/Router.cs b/src/Deprecated/Engine/Engine/Router.cs
index 83ce36a4d38..cd4de9d5bec 100644
--- a/src/Deprecated/Engine/Engine/Router.cs
+++ b/src/Deprecated/Engine/Engine/Router.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Engine/Scheduler.cs b/src/Deprecated/Engine/Engine/Scheduler.cs
index b5548c04cbd..0af5b3dbf00 100644
--- a/src/Deprecated/Engine/Engine/Scheduler.cs
+++ b/src/Deprecated/Engine/Engine/Scheduler.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/SchedulerRecord.cs b/src/Deprecated/Engine/Engine/SchedulerRecord.cs
index ce054b5ae71..8695ba4205b 100644
--- a/src/Deprecated/Engine/Engine/SchedulerRecord.cs
+++ b/src/Deprecated/Engine/Engine/SchedulerRecord.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections.Generic;
 using System.Diagnostics; // For the debugger attribute
 
diff --git a/src/Deprecated/Engine/Engine/Target.cs b/src/Deprecated/Engine/Engine/Target.cs
index d6e23872382..42435566ead 100644
--- a/src/Deprecated/Engine/Engine/Target.cs
+++ b/src/Deprecated/Engine/Engine/Target.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Diagnostics;       // for debugger display attribute
diff --git a/src/Deprecated/Engine/Engine/TargetCollection.cs b/src/Deprecated/Engine/Engine/TargetCollection.cs
index 3f7fb230511..a936991ff67 100644
--- a/src/Deprecated/Engine/Engine/TargetCollection.cs
+++ b/src/Deprecated/Engine/Engine/TargetCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
index 2c1b036dc1d..3578916f165 100644
--- a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
+++ b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/TargetExecutionWrapper.cs b/src/Deprecated/Engine/Engine/TargetExecutionWrapper.cs
index 1ba50ce82bd..b47e12001b6 100644
--- a/src/Deprecated/Engine/Engine/TargetExecutionWrapper.cs
+++ b/src/Deprecated/Engine/Engine/TargetExecutionWrapper.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Diagnostics;   // for the debugger display attribute
diff --git a/src/Deprecated/Engine/Engine/TaskEngine.cs b/src/Deprecated/Engine/Engine/TaskEngine.cs
index 909c7071472..e7b5a534131 100644
--- a/src/Deprecated/Engine/Engine/TaskEngine.cs
+++ b/src/Deprecated/Engine/Engine/TaskEngine.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Text;
diff --git a/src/Deprecated/Engine/Engine/TaskEngineAssemblyResolver.cs b/src/Deprecated/Engine/Engine/TaskEngineAssemblyResolver.cs
index 9bae44d4dba..47cda57c85a 100644
--- a/src/Deprecated/Engine/Engine/TaskEngineAssemblyResolver.cs
+++ b/src/Deprecated/Engine/Engine/TaskEngineAssemblyResolver.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionContext.cs b/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
index d2947869433..09c6e9f0b61 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionContext.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
index 26814250ebe..892ae43873b 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionState.cs b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
index a1402733cf5..2da1fadc4bb 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionState.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Engine/Engine/TaskOutput.cs b/src/Deprecated/Engine/Engine/TaskOutput.cs
index db21abce839..e7b23786469 100644
--- a/src/Deprecated/Engine/Engine/TaskOutput.cs
+++ b/src/Deprecated/Engine/Engine/TaskOutput.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Xml;
 
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/TaskRegistry.cs b/src/Deprecated/Engine/Engine/TaskRegistry.cs
index ef690909b26..b9769cbf454 100644
--- a/src/Deprecated/Engine/Engine/TaskRegistry.cs
+++ b/src/Deprecated/Engine/Engine/TaskRegistry.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/TaskWorkerThread.cs b/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
index 893c9b78381..a944142b0a3 100644
--- a/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
+++ b/src/Deprecated/Engine/Engine/TaskWorkerThread.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/Toolset.cs b/src/Deprecated/Engine/Engine/Toolset.cs
index cc3bacd103e..be0f64d822f 100644
--- a/src/Deprecated/Engine/Engine/Toolset.cs
+++ b/src/Deprecated/Engine/Engine/Toolset.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Engine/ToolsetCollection.cs b/src/Deprecated/Engine/Engine/ToolsetCollection.cs
index b58c946ba43..78fa2e1cf1b 100644
--- a/src/Deprecated/Engine/Engine/ToolsetCollection.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
index 1facf2df351..e2e91a177d0 100644
--- a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Configuration;
diff --git a/src/Deprecated/Engine/Engine/ToolsetReader.cs b/src/Deprecated/Engine/Engine/ToolsetReader.cs
index f0ab606e9be..e476e2b9a2e 100644
--- a/src/Deprecated/Engine/Engine/ToolsetReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetReader.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
index 999d9f0eac7..46a2434dab9 100644
--- a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections.Generic;
 using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
 
diff --git a/src/Deprecated/Engine/Engine/ToolsetState.cs b/src/Deprecated/Engine/Engine/ToolsetState.cs
index dc3cd45ff6f..b8e186065bb 100644
--- a/src/Deprecated/Engine/Engine/ToolsetState.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetState.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Engine/UsingTask.cs b/src/Deprecated/Engine/Engine/UsingTask.cs
index fbc96584ba4..119da7388b2 100644
--- a/src/Deprecated/Engine/Engine/UsingTask.cs
+++ b/src/Deprecated/Engine/Engine/UsingTask.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 
diff --git a/src/Deprecated/Engine/Engine/UsingTaskCollection.cs b/src/Deprecated/Engine/Engine/UsingTaskCollection.cs
index 72cd53c4f73..192f47830bc 100644
--- a/src/Deprecated/Engine/Engine/UsingTaskCollection.cs
+++ b/src/Deprecated/Engine/Engine/UsingTaskCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Engine/Utilities.cs b/src/Deprecated/Engine/Engine/Utilities.cs
index 7cbfce7b91f..f3ccf678690 100644
--- a/src/Deprecated/Engine/Engine/Utilities.cs
+++ b/src/Deprecated/Engine/Engine/Utilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Engine/XmlSearcher.cs b/src/Deprecated/Engine/Engine/XmlSearcher.cs
index 3016ece3da9..033ed172e99 100644
--- a/src/Deprecated/Engine/Engine/XmlSearcher.cs
+++ b/src/Deprecated/Engine/Engine/XmlSearcher.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Errors/InternalLoggerException.cs b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
index c2a314bd6c5..a0d44e8eebe 100644
--- a/src/Deprecated/Engine/Errors/InternalLoggerException.cs
+++ b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Runtime.Serialization;
 using System.Security.Permissions;
diff --git a/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs b/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
index 2311e582a9c..9a09530d884 100644
--- a/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
+++ b/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Runtime.Serialization;
diff --git a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
index 743cea4b59c..7beacba7655 100644
--- a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Errors/RegistryException.cs b/src/Deprecated/Engine/Errors/RegistryException.cs
index a4c07c216cc..c849de9712e 100644
--- a/src/Deprecated/Engine/Errors/RegistryException.cs
+++ b/src/Deprecated/Engine/Errors/RegistryException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Runtime.Serialization;
 
diff --git a/src/Deprecated/Engine/Errors/RemoteErrorException.cs b/src/Deprecated/Engine/Errors/RemoteErrorException.cs
index d6061669ff9..a2e3e5493b6 100644
--- a/src/Deprecated/Engine/Errors/RemoteErrorException.cs
+++ b/src/Deprecated/Engine/Errors/RemoteErrorException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Runtime.Serialization;
 using System.Security.Permissions;
diff --git a/src/Deprecated/Engine/Introspector/Introspector.cs b/src/Deprecated/Engine/Introspector/Introspector.cs
index 0ed9599f8e5..7eab8986e55 100644
--- a/src/Deprecated/Engine/Introspector/Introspector.cs
+++ b/src/Deprecated/Engine/Introspector/Introspector.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Introspector/NodeStatus.cs b/src/Deprecated/Engine/Introspector/NodeStatus.cs
index 659b759ec7f..32470cbb680 100644
--- a/src/Deprecated/Engine/Introspector/NodeStatus.cs
+++ b/src/Deprecated/Engine/Introspector/NodeStatus.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Runtime.Serialization.Formatters.Binary;
diff --git a/src/Deprecated/Engine/Introspector/TargetCycleDetector.cs b/src/Deprecated/Engine/Introspector/TargetCycleDetector.cs
index b9a6e128815..43d4d1681f8 100644
--- a/src/Deprecated/Engine/Introspector/TargetCycleDetector.cs
+++ b/src/Deprecated/Engine/Introspector/TargetCycleDetector.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
index 922347d5963..96b17f23abc 100644
--- a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
+++ b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.IO;
diff --git a/src/Deprecated/Engine/Items/BuildItem.cs b/src/Deprecated/Engine/Items/BuildItem.cs
index 9bc731add47..e398bba1776 100644
--- a/src/Deprecated/Engine/Items/BuildItem.cs
+++ b/src/Deprecated/Engine/Items/BuildItem.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/Items/BuildItemGroup.cs b/src/Deprecated/Engine/Items/BuildItemGroup.cs
index b11d20d010a..7d0238b9222 100644
--- a/src/Deprecated/Engine/Items/BuildItemGroup.cs
+++ b/src/Deprecated/Engine/Items/BuildItemGroup.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Items/BuildItemGroupCollection.cs b/src/Deprecated/Engine/Items/BuildItemGroupCollection.cs
index ec7bc1cb34e..4a08bf3edab 100644
--- a/src/Deprecated/Engine/Items/BuildItemGroupCollection.cs
+++ b/src/Deprecated/Engine/Items/BuildItemGroupCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Items/BuildItemGroupProxy.cs b/src/Deprecated/Engine/Items/BuildItemGroupProxy.cs
index 481e3d2b06d..117abf65a61 100644
--- a/src/Deprecated/Engine/Items/BuildItemGroupProxy.cs
+++ b/src/Deprecated/Engine/Items/BuildItemGroupProxy.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs b/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
index 732d49fedf4..a53bff392ac 100644
--- a/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
+++ b/src/Deprecated/Engine/Items/ItemDefinitionLibrary.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Items/ItemExpander.cs b/src/Deprecated/Engine/Items/ItemExpander.cs
index 3643c32e74a..8aa0fd4540c 100644
--- a/src/Deprecated/Engine/Items/ItemExpander.cs
+++ b/src/Deprecated/Engine/Items/ItemExpander.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Text.RegularExpressions;
diff --git a/src/Deprecated/Engine/Items/TaskItem.cs b/src/Deprecated/Engine/Items/TaskItem.cs
index 27aac1327f6..4284f44b84f 100644
--- a/src/Deprecated/Engine/Items/TaskItem.cs
+++ b/src/Deprecated/Engine/Items/TaskItem.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Security;
diff --git a/src/Deprecated/Engine/ItemsAndProperties/ExpressionShredder.cs b/src/Deprecated/Engine/ItemsAndProperties/ExpressionShredder.cs
index 74d9b3c3edb..15f8d543192 100644
--- a/src/Deprecated/Engine/ItemsAndProperties/ExpressionShredder.cs
+++ b/src/Deprecated/Engine/ItemsAndProperties/ExpressionShredder.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/ItemsAndProperties/Lookup.cs b/src/Deprecated/Engine/ItemsAndProperties/Lookup.cs
index 2b346d2ace4..db111e979dc 100644
--- a/src/Deprecated/Engine/ItemsAndProperties/Lookup.cs
+++ b/src/Deprecated/Engine/ItemsAndProperties/Lookup.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs b/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
index 9f78a696309..8a68a2a2f19 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Threading;
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNode.cs b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
index 62dabcdb2f4..e8b4a9f0417 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNode.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
index 776c0a08b61..3860eca2c77 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Threading;
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeInfo.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeInfo.cs
index f4c4b0de46b..53fefa323c9 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeInfo.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeInfo.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections.Generic;
 using System.Threading;
 
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
index ad45e12e9b3..9d72e9c81e1 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
index 7712d1cd550..d88fc4c9267 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Reflection;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/LocalProvider/NativeMethods.cs b/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
index 549e63b93e9..42a02af1012 100644
--- a/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
+++ b/src/Deprecated/Engine/LocalProvider/NativeMethods.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using Microsoft.Win32.SafeHandles;
 using System.Runtime.InteropServices;
diff --git a/src/Deprecated/Engine/LocalProvider/SharedMemory.cs b/src/Deprecated/Engine/LocalProvider/SharedMemory.cs
index 0872834d068..7eb8902bcd6 100644
--- a/src/Deprecated/Engine/LocalProvider/SharedMemory.cs
+++ b/src/Deprecated/Engine/LocalProvider/SharedMemory.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
index 00b1ed66480..81bcca5a7f1 100644
--- a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine/Logging/ConsoleLogger.cs b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
index 71fa548ca55..049c264d0ac 100644
--- a/src/Deprecated/Engine/Logging/ConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 1f20320e013..97ec2c4385a 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
index d1e84706dfa..334a6a4c43d 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 
diff --git a/src/Deprecated/Engine/Logging/FileLogger.cs b/src/Deprecated/Engine/Logging/FileLogger.cs
index a97cea4dba6..f7fd9fdf988 100644
--- a/src/Deprecated/Engine/Logging/FileLogger.cs
+++ b/src/Deprecated/Engine/Logging/FileLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.IO;
diff --git a/src/Deprecated/Engine/Logging/LogFormatter.cs b/src/Deprecated/Engine/Logging/LogFormatter.cs
index d22c2fbb40c..34d8ee31a0c 100644
--- a/src/Deprecated/Engine/Logging/LogFormatter.cs
+++ b/src/Deprecated/Engine/Logging/LogFormatter.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 
diff --git a/src/Deprecated/Engine/Logging/LoggerDescription.cs b/src/Deprecated/Engine/Logging/LoggerDescription.cs
index 01872c8b8b4..227d86a6940 100644
--- a/src/Deprecated/Engine/Logging/LoggerDescription.cs
+++ b/src/Deprecated/Engine/Logging/LoggerDescription.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.IO;
diff --git a/src/Deprecated/Engine/Logging/NullCentralLogger.cs b/src/Deprecated/Engine/Logging/NullCentralLogger.cs
index 0b72010b66f..d2652a40c13 100644
--- a/src/Deprecated/Engine/Logging/NullCentralLogger.cs
+++ b/src/Deprecated/Engine/Logging/NullCentralLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
 
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
index ae58a2c5112..f90d16e88e4 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
index a14b5902881..919014c2898 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.Framework;
diff --git a/src/Deprecated/Engine/Logging/SerialConsoleLogger.cs b/src/Deprecated/Engine/Logging/SerialConsoleLogger.cs
index 607b952275c..35a75e0f540 100644
--- a/src/Deprecated/Engine/Logging/SerialConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/SerialConsoleLogger.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/Properties/BuildProperty.cs b/src/Deprecated/Engine/Properties/BuildProperty.cs
index 34990b9cc8d..80cb2bc1705 100644
--- a/src/Deprecated/Engine/Properties/BuildProperty.cs
+++ b/src/Deprecated/Engine/Properties/BuildProperty.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs b/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
index 8a6481c2675..c067add2c83 100644
--- a/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
+++ b/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.IO;
diff --git a/src/Deprecated/Engine/Properties/BuildPropertyGroupCollection.cs b/src/Deprecated/Engine/Properties/BuildPropertyGroupCollection.cs
index b5b6abd506c..8a9b3a26939 100644
--- a/src/Deprecated/Engine/Properties/BuildPropertyGroupCollection.cs
+++ b/src/Deprecated/Engine/Properties/BuildPropertyGroupCollection.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 
diff --git a/src/Deprecated/Engine/Properties/BuildPropertyGroupProxy.cs b/src/Deprecated/Engine/Properties/BuildPropertyGroupProxy.cs
index e0286ea54ba..4304d1e91d4 100644
--- a/src/Deprecated/Engine/Properties/BuildPropertyGroupProxy.cs
+++ b/src/Deprecated/Engine/Properties/BuildPropertyGroupProxy.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 
 namespace Microsoft.Build.BuildEngine
diff --git a/src/Deprecated/Engine/Resources/AssemblyResources.cs b/src/Deprecated/Engine/Resources/AssemblyResources.cs
index d6601ae9317..c7ed902495b 100644
--- a/src/Deprecated/Engine/Resources/AssemblyResources.cs
+++ b/src/Deprecated/Engine/Resources/AssemblyResources.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Resources;
 using System.Reflection;
 using System.Globalization;
diff --git a/src/Deprecated/Engine/Resources/Constants.cs b/src/Deprecated/Engine/Resources/Constants.cs
index dffb0f06a08..ce6972f0b2a 100644
--- a/src/Deprecated/Engine/Resources/Constants.cs
+++ b/src/Deprecated/Engine/Resources/Constants.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Collections.Concurrent;
diff --git a/src/Deprecated/Engine/Shared/AssemblyLoadInfo.cs b/src/Deprecated/Engine/Shared/AssemblyLoadInfo.cs
index 51120f353b7..880d20bc416 100644
--- a/src/Deprecated/Engine/Shared/AssemblyLoadInfo.cs
+++ b/src/Deprecated/Engine/Shared/AssemblyLoadInfo.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine.Shared
diff --git a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
index d4fda64c5ba..394b68bbee2 100644
--- a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
+++ b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Shared/BuildEventFileInfo.cs b/src/Deprecated/Engine/Shared/BuildEventFileInfo.cs
index 7dc0de6c962..b14dbf94ebc 100644
--- a/src/Deprecated/Engine/Shared/BuildEventFileInfo.cs
+++ b/src/Deprecated/Engine/Shared/BuildEventFileInfo.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 using System.Xml.Schema;
diff --git a/src/Deprecated/Engine/Shared/ConfigurationInSolution.cs b/src/Deprecated/Engine/Shared/ConfigurationInSolution.cs
index 7541e3c074e..0b9e8f4eedc 100644
--- a/src/Deprecated/Engine/Shared/ConfigurationInSolution.cs
+++ b/src/Deprecated/Engine/Shared/ConfigurationInSolution.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Globalization;
 
 namespace Microsoft.Build.BuildEngine.Shared
diff --git a/src/Deprecated/Engine/Shared/ConversionUtilities.cs b/src/Deprecated/Engine/Shared/ConversionUtilities.cs
index 454cda81a46..a339ba5793f 100644
--- a/src/Deprecated/Engine/Shared/ConversionUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ConversionUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 
diff --git a/src/Deprecated/Engine/Shared/Delegate.cs b/src/Deprecated/Engine/Shared/Delegate.cs
index 9721c12bbac..e205f233704 100644
--- a/src/Deprecated/Engine/Shared/Delegate.cs
+++ b/src/Deprecated/Engine/Shared/Delegate.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine.Shared
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Shared/ErrorUtilities.cs b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
index 359b726d9ab..b3d152dc7c8 100644
--- a/src/Deprecated/Engine/Shared/ErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Diagnostics;
 
diff --git a/src/Deprecated/Engine/Shared/EscapingUtilities.cs b/src/Deprecated/Engine/Shared/EscapingUtilities.cs
index ce1ae808288..618918de5af 100644
--- a/src/Deprecated/Engine/Shared/EscapingUtilities.cs
+++ b/src/Deprecated/Engine/Shared/EscapingUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.Globalization;
diff --git a/src/Deprecated/Engine/Shared/EventArgsFormatting.cs b/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
index 955a9c7e289..2ab8b3b6a5b 100644
--- a/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
+++ b/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Globalization;
 using System.Text;
diff --git a/src/Deprecated/Engine/Shared/ExceptionHandling.cs b/src/Deprecated/Engine/Shared/ExceptionHandling.cs
index 1b51a59b06e..a3a04ef335a 100644
--- a/src/Deprecated/Engine/Shared/ExceptionHandling.cs
+++ b/src/Deprecated/Engine/Shared/ExceptionHandling.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Security;
diff --git a/src/Deprecated/Engine/Shared/FileMatcher.cs b/src/Deprecated/Engine/Shared/FileMatcher.cs
index 4d3757b8a3a..13f25e1be16 100644
--- a/src/Deprecated/Engine/Shared/FileMatcher.cs
+++ b/src/Deprecated/Engine/Shared/FileMatcher.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Text;
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index 077f878c844..7b19c8ec90a 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Shared/FileUtilitiesRegex.cs b/src/Deprecated/Engine/Shared/FileUtilitiesRegex.cs
index 7561372e55a..528bb121c15 100644
--- a/src/Deprecated/Engine/Shared/FileUtilitiesRegex.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilitiesRegex.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Globalization;
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index 2d2b3ee0024..177c0bf7daa 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 
diff --git a/src/Deprecated/Engine/Shared/InternalErrorException.cs b/src/Deprecated/Engine/Shared/InternalErrorException.cs
index 344c55e2fe6..218c3e31f65 100644
--- a/src/Deprecated/Engine/Shared/InternalErrorException.cs
+++ b/src/Deprecated/Engine/Shared/InternalErrorException.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Runtime.Serialization;
 
diff --git a/src/Deprecated/Engine/Shared/LoadedType.cs b/src/Deprecated/Engine/Shared/LoadedType.cs
index 69a2055632a..49632ee85e7 100644
--- a/src/Deprecated/Engine/Shared/LoadedType.cs
+++ b/src/Deprecated/Engine/Shared/LoadedType.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Shared/NativeMethodsShared.cs b/src/Deprecated/Engine/Shared/NativeMethodsShared.cs
index 120a1639181..6b4863fedc9 100644
--- a/src/Deprecated/Engine/Shared/NativeMethodsShared.cs
+++ b/src/Deprecated/Engine/Shared/NativeMethodsShared.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Text;
 using System.Runtime.InteropServices;
diff --git a/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs b/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
index 778606a8504..efddac5040a 100644
--- a/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
+++ b/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine.Shared
diff --git a/src/Deprecated/Engine/Shared/ProjectErrorUtilities.cs b/src/Deprecated/Engine/Shared/ProjectErrorUtilities.cs
index 775a3ed6b13..c4e02764d55 100644
--- a/src/Deprecated/Engine/Shared/ProjectErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ProjectErrorUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Xml;
 
 /******************************************************************************
diff --git a/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs b/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
index 52dca01cc3a..d04ee7cc6bb 100644
--- a/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine.Shared
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Shared/ProjectInSolution.cs b/src/Deprecated/Engine/Shared/ProjectInSolution.cs
index da716c0358f..8e025bb32ae 100644
--- a/src/Deprecated/Engine/Shared/ProjectInSolution.cs
+++ b/src/Deprecated/Engine/Shared/ProjectInSolution.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Shared/ProjectWriter.cs b/src/Deprecated/Engine/Shared/ProjectWriter.cs
index 391665594f5..715987e6fbe 100644
--- a/src/Deprecated/Engine/Shared/ProjectWriter.cs
+++ b/src/Deprecated/Engine/Shared/ProjectWriter.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.IO;
 using System.Xml;
 using System.Text;
diff --git a/src/Deprecated/Engine/Shared/ResourceUtilities.cs b/src/Deprecated/Engine/Shared/ResourceUtilities.cs
index 7444182984e..396ff96d1f8 100644
--- a/src/Deprecated/Engine/Shared/ResourceUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ResourceUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 #if !BUILDINGAPPXTASKS && DEBUG
 using System.Resources;
diff --git a/src/Deprecated/Engine/Shared/SolutionParser.cs b/src/Deprecated/Engine/Shared/SolutionParser.cs
index a6847afb3f2..68d1bfee87b 100644
--- a/src/Deprecated/Engine/Shared/SolutionParser.cs
+++ b/src/Deprecated/Engine/Shared/SolutionParser.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Shared/TypeLoader.cs b/src/Deprecated/Engine/Shared/TypeLoader.cs
index b3ac7ddc635..2397160dd7a 100644
--- a/src/Deprecated/Engine/Shared/TypeLoader.cs
+++ b/src/Deprecated/Engine/Shared/TypeLoader.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/ErrorUtilities_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/ErrorUtilities_Tests.cs
index 84ff1afb0d4..c2d79851b43 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/ErrorUtilities_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/ErrorUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 #region Using directives
 
 using System;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/EscapingUtilities_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/EscapingUtilities_Tests.cs
index f3e56952704..da5e0d3c484 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/EscapingUtilities_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/EscapingUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 #region Using directives
 
 using System;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/FileMatcher_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/FileMatcher_Tests.cs
index 5a3d396cb3c..b3b15a8d70b 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/FileMatcher_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/FileUtilities_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/FileUtilities_Tests.cs
index d23fed0ddf6..a51a2a98b5b 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/FileUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Diagnostics;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
index d8345c8d90d..0d6c712ce5c 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Resources;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/MockLogger.cs b/src/Deprecated/Engine/Shared/UnitTests/MockLogger.cs
index f5e04fc8a0f..330c0d1a9d7 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/MockLogger.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/MockLogger.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/ObjectModelHelpers.cs b/src/Deprecated/Engine/Shared/UnitTests/ObjectModelHelpers.cs
index 510afc3ed79..42750cc2964 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/ResourceUtilities_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/ResourceUtilities_Tests.cs
index cea38d616a8..ae375d72201 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/ResourceUtilities_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/ResourceUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/SolutionParser_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/SolutionParser_Tests.cs
index 472ad5925ee..cfebd960b5a 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/SolutionParser_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/SolutionParser_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Reflection;
 using System.Collections;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/StreamHelpers.cs b/src/Deprecated/Engine/Shared/UnitTests/StreamHelpers.cs
index 27397c26ffa..b390295cca4 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/StreamHelpers.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/StreamHelpers.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Reflection;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/TypeLoader_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/TypeLoader_Tests.cs
index a9c33b7de43..656b454d8c0 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/TypeLoader_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using NUnit.Framework;
diff --git a/src/Deprecated/Engine/Shared/UnitTests/XmakeAttributes_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/XmakeAttributes_Tests.cs
index db3e256216e..117b0a710cf 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/XmakeAttributes_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/XmakeAttributes_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Shared/UnitTests/XmlUtilities_Tests.cs b/src/Deprecated/Engine/Shared/UnitTests/XmlUtilities_Tests.cs
index ee4c984dfc3..56948d3d86b 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/XmlUtilities_Tests.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/XmlUtilities_Tests.cs
@@ -1,6 +1,10 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Shared/VisualStudioConstants.cs b/src/Deprecated/Engine/Shared/VisualStudioConstants.cs
index 80fd4d70191..13c6a740f60 100644
--- a/src/Deprecated/Engine/Shared/VisualStudioConstants.cs
+++ b/src/Deprecated/Engine/Shared/VisualStudioConstants.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 namespace Microsoft.Build.BuildEngine.Shared
 {
     /// <summary>
diff --git a/src/Deprecated/Engine/Shared/XMakeAttributes.cs b/src/Deprecated/Engine/Shared/XMakeAttributes.cs
index 416adfd76ba..c226f194ab6 100644
--- a/src/Deprecated/Engine/Shared/XMakeAttributes.cs
+++ b/src/Deprecated/Engine/Shared/XMakeAttributes.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 
 namespace Microsoft.Build.BuildEngine.Shared
diff --git a/src/Deprecated/Engine/Shared/XMakeElements.cs b/src/Deprecated/Engine/Shared/XMakeElements.cs
index 0f8c108fd5b..f179b6c2add 100644
--- a/src/Deprecated/Engine/Shared/XMakeElements.cs
+++ b/src/Deprecated/Engine/Shared/XMakeElements.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System.Collections;
 using System.Xml;
 
diff --git a/src/Deprecated/Engine/Shared/XmlUtilities.cs b/src/Deprecated/Engine/Shared/XmlUtilities.cs
index 5e76b57a9a4..78f2965d971 100644
--- a/src/Deprecated/Engine/Shared/XmlUtilities.cs
+++ b/src/Deprecated/Engine/Shared/XmlUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Xml;
 
diff --git a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
index 146bd7020d4..a0bdcf41c6d 100644
--- a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
diff --git a/src/Deprecated/Engine/Solution/VCProjectParser.cs b/src/Deprecated/Engine/Solution/VCProjectParser.cs
index 1358ada8d73..285725eb8e2 100644
--- a/src/Deprecated/Engine/Solution/VCProjectParser.cs
+++ b/src/Deprecated/Engine/Solution/VCProjectParser.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Solution/VCWrapperProject.cs b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
index 68562a18442..95534559b85 100644
--- a/src/Deprecated/Engine/Solution/VCWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.IO;
 using System.Xml;
diff --git a/src/Deprecated/Engine/Tasks/IntrinsicTask.cs b/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
index 54ee215a411..cfd1bf7c879 100644
--- a/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
+++ b/src/Deprecated/Engine/Tasks/IntrinsicTask.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 
diff --git a/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs b/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
index 1a5ee68930c..630ce7f29a6 100644
--- a/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
+++ b/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using Microsoft.Build.BuildEngine.Shared;
 
diff --git a/src/Deprecated/Engine/Xml/BuildItemGroupChildXml.cs b/src/Deprecated/Engine/Xml/BuildItemGroupChildXml.cs
index 2a33816c7f2..070055fdc91 100644
--- a/src/Deprecated/Engine/Xml/BuildItemGroupChildXml.cs
+++ b/src/Deprecated/Engine/Xml/BuildItemGroupChildXml.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Xml/BuildItemGroupXml.cs b/src/Deprecated/Engine/Xml/BuildItemGroupXml.cs
index 34f44ca8e7e..e6218e8cdd4 100644
--- a/src/Deprecated/Engine/Xml/BuildItemGroupXml.cs
+++ b/src/Deprecated/Engine/Xml/BuildItemGroupXml.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Xml/ProjectXmlUtilities.cs b/src/Deprecated/Engine/Xml/ProjectXmlUtilities.cs
index 10c64fa1bc5..7cbe04cbcdc 100644
--- a/src/Deprecated/Engine/Xml/ProjectXmlUtilities.cs
+++ b/src/Deprecated/Engine/Xml/ProjectXmlUtilities.cs
@@ -1,6 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE
+// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL
+// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.
+
 using System;
 using System.Collections.Generic;
 using System.Xml;
diff --git a/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs b/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs
new file mode 100644
index 00000000000..8e2bf7db11b
--- /dev/null
+++ b/src/Framework.UnitTests/AssemblyLoadBuildEventArgs_Tests.cs
@@ -0,0 +1,42 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.Framework.UnitTests
+{
+    public class AssemblyLoadBuildEventArgs_Tests
+    {
+        [Fact]
+        public void SerializationDeserializationTest()
+        {
+            string assemblyName = Guid.NewGuid().ToString();
+            string assemblyPath = Guid.NewGuid().ToString();
+            Guid mvid = Guid.NewGuid();
+            string loadingInitiator = Guid.NewGuid().ToString();
+            string appDomainName = Guid.NewGuid().ToString();
+            AssemblyLoadingContext context =
+                (AssemblyLoadingContext)(new Random().Next(Enum.GetNames(typeof(AssemblyLoadingContext)).Length));
+            AssemblyLoadBuildEventArgs arg = new(context, loadingInitiator, assemblyName, assemblyPath, mvid, appDomainName);
+
+            using MemoryStream stream = new MemoryStream();
+            using BinaryWriter bw = new BinaryWriter(stream);
+            arg.WriteToStream(bw);
+
+            stream.Position = 0;
+            using BinaryReader br = new BinaryReader(stream);
+            AssemblyLoadBuildEventArgs argDeserialized = new();
+            argDeserialized.CreateFromStream(br, 0);
+
+            argDeserialized.LoadingInitiator.ShouldBe(loadingInitiator);
+            argDeserialized.AssemblyName.ShouldBe(assemblyName);
+            argDeserialized.AssemblyPath.ShouldBe(assemblyPath);
+            argDeserialized.MVID.ShouldBe(mvid);
+            argDeserialized.AppDomainDescriptor.ShouldBe(appDomainName);
+            argDeserialized.LoadingContext.ShouldBe(context);
+        }
+    }
+}
diff --git a/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs b/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
index 280ac6a4d97..b7d99c7e3a1 100644
--- a/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
@@ -35,7 +35,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and
         /// verify this code path.
         /// </summary>
-        private class BuildErrorEventArgs2 : BuildErrorEventArgs
+        private sealed class BuildErrorEventArgs2 : BuildErrorEventArgs
         {
             /// <summary>
             /// Test Constructor
diff --git a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
index 94b459b2d28..703349fde83 100644
--- a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
@@ -34,7 +34,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class BuildFinishedEventArgs2 : BuildFinishedEventArgs
+        private sealed class BuildFinishedEventArgs2 : BuildFinishedEventArgs
         {
             /// <summary>
             /// Test constructor
diff --git a/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs b/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
index 94df096ada3..4d829a9222d 100644
--- a/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
@@ -40,7 +40,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class BuildMessageEventArgs2 : BuildMessageEventArgs
+        private sealed class BuildMessageEventArgs2 : BuildMessageEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs b/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
index 16c9b493af0..c3a2115e069 100644
--- a/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
@@ -47,7 +47,7 @@ public void TestGetHashCode()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class BuildStartedEventArgs2 : BuildStartedEventArgs
+        private sealed class BuildStartedEventArgs2 : BuildStartedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs b/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
index ed32552b268..919bcc523d1 100644
--- a/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
@@ -50,7 +50,7 @@ public void TestGetHashCode()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class BuildWarningEventArgs2 : BuildWarningEventArgs
+        private sealed class BuildWarningEventArgs2 : BuildWarningEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs b/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
index fe1dec9a784..0fe6a0094a4 100644
--- a/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
@@ -33,7 +33,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class CriticalBuildMessageEventArgs2 : CriticalBuildMessageEventArgs
+        private sealed class CriticalBuildMessageEventArgs2 : CriticalBuildMessageEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
index 1c882b2ef53..ec67a9b96aa 100644
--- a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
+++ b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.UnitTests
     public class CustomEventArgSerialization_Tests : IDisposable
     {
         // Generic build class to test custom serialization of abstract class BuildEventArgs
-        internal class GenericBuildEventArg : BuildEventArgs
+        internal sealed class GenericBuildEventArg : BuildEventArgs
         {
             internal GenericBuildEventArg(
             string message,
diff --git a/src/Framework.UnitTests/EventArgs_Tests.cs b/src/Framework.UnitTests/EventArgs_Tests.cs
index 002efd3710a..c2af0cbdef1 100644
--- a/src/Framework.UnitTests/EventArgs_Tests.cs
+++ b/src/Framework.UnitTests/EventArgs_Tests.cs
@@ -147,7 +147,7 @@ public void ExerciseBuildEventContext()
         /// <summary>
         /// A generic buildEvent arg to test the equals method
         /// </summary>
-        internal class GenericBuildEventArgs : BuildEventArgs
+        internal sealed class GenericBuildEventArgs : BuildEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
index b78bc8a56a3..9f21ebb48fa 100644
--- a/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
@@ -32,7 +32,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class ExternalProjectFinishedEventArgs2 : ExternalProjectFinishedEventArgs
+        private sealed class ExternalProjectFinishedEventArgs2 : ExternalProjectFinishedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs b/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
index d59c1326059..c3a47382a31 100644
--- a/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
@@ -32,7 +32,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class ExternalProjectStartedEventArgs2 : ExternalProjectStartedEventArgs
+        private sealed class ExternalProjectStartedEventArgs2 : ExternalProjectStartedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/LoggerException_Tests.cs b/src/Framework.UnitTests/LoggerException_Tests.cs
index 91ba8b2eae5..abc8c6fc726 100644
--- a/src/Framework.UnitTests/LoggerException_Tests.cs
+++ b/src/Framework.UnitTests/LoggerException_Tests.cs
@@ -4,10 +4,9 @@
 using System;
 using System.IO;
 using System.Runtime.Serialization.Formatters.Binary;
-
 using Microsoft.Build.Framework;
-using Xunit;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
index e83658633c7..d55d227ec28 100644
--- a/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
@@ -31,7 +31,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class ProjectFinishedEventArgs2 : ProjectFinishedEventArgs
+        private sealed class ProjectFinishedEventArgs2 : ProjectFinishedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
index abe90d6e73f..2ab1af0fbd1 100644
--- a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
@@ -78,7 +78,7 @@ public void ItemsAndPropertiesDifferentEquals()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class ProjectStartedEventArgs2 : ProjectStartedEventArgs
+        private sealed class ProjectStartedEventArgs2 : ProjectStartedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/SdkReference_Tests.cs b/src/Framework.UnitTests/SdkReference_Tests.cs
index bc63f3b8c23..90f225b8f18 100644
--- a/src/Framework.UnitTests/SdkReference_Tests.cs
+++ b/src/Framework.UnitTests/SdkReference_Tests.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Xunit;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
index 71505177e31..6bd3ad2ba7f 100644
--- a/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
@@ -34,7 +34,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class TargetFinishedEventArgs2 : TargetFinishedEventArgs
+        private sealed class TargetFinishedEventArgs2 : TargetFinishedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs b/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
index fc4773f126c..6eb88790fb7 100644
--- a/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
@@ -34,7 +34,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class TargetStartedEventArgs2 : TargetStartedEventArgs
+        private sealed class TargetStartedEventArgs2 : TargetStartedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs b/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
index 1d9b383c585..4d053b565cb 100644
--- a/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
@@ -32,7 +32,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class TaskCommandLineEventArgs2 : TaskCommandLineEventArgs
+        private sealed class TaskCommandLineEventArgs2 : TaskCommandLineEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
index 24e32d25aa4..1c5af624176 100644
--- a/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
@@ -32,7 +32,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class TaskFinishedEventArgs2 : TaskFinishedEventArgs
+        private sealed class TaskFinishedEventArgs2 : TaskFinishedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs b/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
index 381f0f3ec4f..b5cee33aa50 100644
--- a/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
@@ -34,7 +34,7 @@ public void EventArgsCtors()
         /// Create a derived class so that we can test the default constructor in order to increase code coverage and 
         /// verify this code path does not cause any exceptions.
         /// </summary>
-        private class TaskStartedEventArgs2 : TaskStartedEventArgs
+        private sealed class TaskStartedEventArgs2 : TaskStartedEventArgs
         {
             /// <summary>
             /// Default constructor
diff --git a/src/Framework/AssemblyLoadBuildEventArgs.cs b/src/Framework/AssemblyLoadBuildEventArgs.cs
new file mode 100644
index 00000000000..bb9d8e58e6f
--- /dev/null
+++ b/src/Framework/AssemblyLoadBuildEventArgs.cs
@@ -0,0 +1,83 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#nullable enable
+
+using System;
+using System.IO;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Framework
+{
+    public sealed class AssemblyLoadBuildEventArgs : BuildMessageEventArgs
+    {
+        private const string DefaultAppDomainDescriptor = "[Default]";
+
+        public AssemblyLoadBuildEventArgs()
+        { }
+
+        public AssemblyLoadBuildEventArgs(
+            AssemblyLoadingContext loadingContext,
+            string? loadingInitiator,
+            string? assemblyName,
+            string assemblyPath,
+            Guid mvid,
+            string? customAppDomainDescriptor,
+            MessageImportance importance = MessageImportance.Low)
+            : base(null, null, null, importance, DateTime.UtcNow, assemblyName, assemblyPath, mvid)
+        {
+            LoadingContext = loadingContext;
+            LoadingInitiator = loadingInitiator;
+            AssemblyName = assemblyName;
+            AssemblyPath = assemblyPath;
+            MVID = mvid;
+            AppDomainDescriptor = customAppDomainDescriptor;
+        }
+
+        public AssemblyLoadingContext LoadingContext { get; private set; }
+        public string? LoadingInitiator { get; private set; }
+        public string? AssemblyName { get; private set; }
+        public string? AssemblyPath { get; private set; }
+        public Guid MVID { get; private set; }
+        // Null string indicates that load occurred on Default AppDomain (for both Core and Framework).
+        public string? AppDomainDescriptor { get; private set; }
+
+        internal override void WriteToStream(BinaryWriter writer)
+        {
+            writer.Write7BitEncodedInt((int)LoadingContext);
+            writer.WriteTimestamp(RawTimestamp);
+            writer.WriteOptionalBuildEventContext(BuildEventContext);
+            writer.WriteGuid(MVID);
+            writer.WriteOptionalString(LoadingInitiator);
+            writer.WriteOptionalString(AssemblyName);
+            writer.WriteOptionalString(AssemblyPath);
+            writer.WriteOptionalString(AppDomainDescriptor);
+        }
+
+        internal override void CreateFromStream(BinaryReader reader, int version)
+        {
+            LoadingContext = (AssemblyLoadingContext)reader.Read7BitEncodedInt();
+            RawTimestamp = reader.ReadTimestamp();
+            BuildEventContext = reader.ReadOptionalBuildEventContext();
+            MVID = reader.ReadGuid();
+            LoadingInitiator = reader.ReadOptionalString();
+            AssemblyName = reader.ReadOptionalString();
+            AssemblyPath = reader.ReadOptionalString();
+            AppDomainDescriptor = reader.ReadOptionalString();
+        }
+
+        public override string Message
+        {
+            get
+            {
+                if (RawMessage == null)
+                {
+                    string? loadingInitiator = LoadingInitiator == null ? null : $" ({LoadingInitiator})";
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("TaskAssemblyLoaded", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);
+                }
+
+                return RawMessage;
+            }
+        }
+    }
+}
diff --git a/src/Framework/AssemblyLoadingContext.cs b/src/Framework/AssemblyLoadingContext.cs
new file mode 100644
index 00000000000..66dace0b8e6
--- /dev/null
+++ b/src/Framework/AssemblyLoadingContext.cs
@@ -0,0 +1,12 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Framework;
+
+public enum AssemblyLoadingContext
+{
+    TaskRun,
+    Evaluation,
+    SdkResolution,
+    LoggerInitialization,
+}
diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index 01daed1341a..206ab7fa5a9 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Runtime.Serialization;
 using System.IO;
+using System.Runtime.Serialization;
 using System.Text;
 using Microsoft.Build.Shared;
 
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 9b2de23aa47..2af7392c4d2 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -20,8 +20,8 @@ internal enum ChangeWaveConversionState
     /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,
     /// this class acts as a way to make risky changes while giving customers an opt-out.
     /// </summary>
-    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md
-    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md
+    /// See docs here: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md
+    /// For dev docs: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md
     internal class ChangeWaves
     {
         internal static readonly Version Wave17_2 = new Version(17, 2);
diff --git a/src/Framework/IForwardingLogger.cs b/src/Framework/IForwardingLogger.cs
index d68921fc550..ba578195755 100644
--- a/src/Framework/IForwardingLogger.cs
+++ b/src/Framework/IForwardingLogger.cs
@@ -7,7 +7,7 @@ namespace Microsoft.Build.Framework
 {
     /// <summary>
     /// This interface extends the ILogger interface to provide a property which can be used to forward events
-    /// to a logger running in a different process. It can also be used create filtering loggers.
+    /// to a logger running in a different process. It can also be used to create filtering loggers.
     /// </summary>
     public interface IForwardingLogger : INodeLogger
     {
diff --git a/src/Framework/ITaskHost.cs b/src/Framework/ITaskHost.cs
index d4a0f207409..687d2c3229f 100644
--- a/src/Framework/ITaskHost.cs
+++ b/src/Framework/ITaskHost.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Runtime.InteropServices;
 using System.Diagnostics.CodeAnalysis;
+using System.Runtime.InteropServices;
 
 #nullable disable
 
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b5bdead5c07..85fbdddd446 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -195,6 +195,21 @@ internal enum ProcessorArchitectures
         // ARM64
         ARM64,
 
+        // WebAssembly
+        WASM,
+
+        // S390x
+        S390X,
+
+        // LongAarch64
+        LOONGARCH64,
+
+        // 32-bit ARMv6
+        ARMV6,
+
+        // PowerPC 64-bit (little-endian) 
+        PPC64LE,
+
         // Who knows
         Unknown
     }
@@ -435,7 +450,8 @@ public SystemInformationData()
             else
             {
                 ProcessorArchitectures processorArchitecture = ProcessorArchitectures.Unknown;
-#if !NET35
+
+#if NETCOREAPP || NETSTANDARD1_1_OR_GREATER
                 // Get the architecture from the runtime.
                 processorArchitecture = RuntimeInformation.OSArchitecture switch
                 {
@@ -443,64 +459,21 @@ public SystemInformationData()
                     Architecture.Arm64 => ProcessorArchitectures.ARM64,
                     Architecture.X64 => ProcessorArchitectures.X64,
                     Architecture.X86 => ProcessorArchitectures.X86,
+#if NET5_0_OR_GREATER
+                    Architecture.Wasm => ProcessorArchitectures.WASM,
+#endif
+#if NET6_0_OR_GREATER
+                    Architecture.S390x => ProcessorArchitectures.S390X,
+#endif
+#if NET7_0_OR_GREATER
+                    Architecture.LoongArch64 => ProcessorArchitectures.LOONGARCH64,
+                    Architecture.Armv6 => ProcessorArchitectures.ARMV6,
+                    Architecture.Ppc64le => ProcessorArchitectures.PPC64LE,
+#endif
                     _ => ProcessorArchitectures.Unknown,
                 };
-#endif
-                // Fall back to 'uname -m' to get the architecture.
-                if (processorArchitecture == ProcessorArchitectures.Unknown)
-                {
-                    try
-                    {
-                        // On Unix run 'uname -m' to get the architecture. It's common for Linux and Mac
-                        using (
-                            var proc =
-                                Process.Start(
-                                    new ProcessStartInfo("uname")
-                                    {
-                                        Arguments = "-m",
-                                        UseShellExecute = false,
-                                        RedirectStandardOutput = true,
-                                        CreateNoWindow = true
-                                    }))
-                        {
-                            string arch = null;
-                            if (proc != null)
-                            {
-                                arch = proc.StandardOutput.ReadLine();
-                                proc.WaitForExit();
-                            }
 
-                            if (!string.IsNullOrEmpty(arch))
-                            {
-                                if (arch.StartsWith("x86_64", StringComparison.OrdinalIgnoreCase))
-                                {
-                                    ProcessorArchitectureType = ProcessorArchitectures.X64;
-                                }
-                                else if (arch.StartsWith("ia64", StringComparison.OrdinalIgnoreCase))
-                                {
-                                    ProcessorArchitectureType = ProcessorArchitectures.IA64;
-                                }
-                                else if (arch.StartsWith("arm", StringComparison.OrdinalIgnoreCase))
-                                {
-                                    ProcessorArchitectureType = ProcessorArchitectures.ARM;
-                                }
-                                else if (arch.StartsWith("aarch64", StringComparison.OrdinalIgnoreCase))
-                                {
-                                    ProcessorArchitectureType = ProcessorArchitectures.ARM64;
-                                }
-                                else if (arch.StartsWith("i", StringComparison.OrdinalIgnoreCase)
-                                        && arch.EndsWith("86", StringComparison.OrdinalIgnoreCase))
-                                {
-                                    ProcessorArchitectureType = ProcessorArchitectures.X86;
-                                }
-                            }
-                        }
-                    }
-                    catch
-                    {
-                        // Best effort: fall back to Unknown
-                    }
-                }
+#endif
 
                 ProcessorArchitectureTypeNative = ProcessorArchitectureType = processorArchitecture;
             }
@@ -1044,7 +1017,7 @@ internal static MemoryStatus GetMemoryStatus()
         return null;
     }
 
-    internal static bool MakeSymbolicLink(string newFileName, string exitingFileName, ref string errorMessage)
+    internal static bool MakeSymbolicLink(string newFileName, string existingFileName, ref string errorMessage)
     {
         bool symbolicLinkCreated;
         if (IsWindows)
@@ -1056,12 +1029,12 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName
                 flags |= SymbolicLink.AllowUnprivilegedCreate;
             }
 
-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);
+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);
             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;
         }
         else
         {
-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;
+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;
             errorMessage = symbolicLinkCreated ? null : Marshal.GetLastWin32Error().ToString();
         }
 
diff --git a/src/Framework/ProjectStartedEventArgs.cs b/src/Framework/ProjectStartedEventArgs.cs
index 55f523a2dc1..539fae2b5e1 100644
--- a/src/Framework/ProjectStartedEventArgs.cs
+++ b/src/Framework/ProjectStartedEventArgs.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections;
-using System.IO;
-using System.Runtime.Serialization;
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
+using System.Runtime.Serialization;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Framework
diff --git a/src/Framework/TargetFinishedEventArgs.cs b/src/Framework/TargetFinishedEventArgs.cs
index 7dd9e1ad1d7..5909897d5eb 100644
--- a/src/Framework/TargetFinishedEventArgs.cs
+++ b/src/Framework/TargetFinishedEventArgs.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections;
+using System.IO;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Framework/Telemetry/KnownTelemetry.cs b/src/Framework/Telemetry/KnownTelemetry.cs
index bbfb62666e7..2a335fa0930 100644
--- a/src/Framework/Telemetry/KnownTelemetry.cs
+++ b/src/Framework/Telemetry/KnownTelemetry.cs
@@ -9,9 +9,10 @@ namespace Microsoft.Build.Framework.Telemetry;
 internal static class KnownTelemetry
 {
     /// <summary>
-    /// Telemetry for build.
-    /// If null Telemetry is not supposed to be emitted.
-    /// After telemetry is emitted, sender shall null it.
+    /// Partial Telemetry for build.
+    /// This could be optionally initialized with some values from early in call stack, for example in Main method.
+    /// After this instance is acquired by a particular build, this is set to null.
+    /// Null means there are no prior collected build telemetry data, new clean instance shall be created for particular build.
     /// </summary>
-    public static BuildTelemetry? BuildTelemetry { get; set; }
+    public static BuildTelemetry? PartialBuildTelemetry { get; set; }
 }
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 8b7fce908e4..7a4db37105c 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -101,6 +101,11 @@ public Traits()
         /// </summary>
         public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
 
+        /// <summary>
+        /// Log all environment variables whether or not they are used in a build in the binary log.
+        /// </summary>
+        public readonly bool LogAllAssemblyLoads = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLASSEMBLYLOADS"));
+
         /// <summary>
         /// Log all environment variables whether or not they are used in a build in the binary log.
         /// </summary>
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index e3233cff927..ca52d2e3156 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -10,11 +10,13 @@
 using System.Resources;
 using Microsoft.Build.CommandLine;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -1018,7 +1020,7 @@ public void InvalidToolsVersionErrors()
                                         profilerLogger: null,
                                         enableProfiler: false,
                                         interactive: false,
-                                        isolateProjects: false,
+                                        isolateProjects: ProjectIsolationMode.False,
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         inputResultsCaches: null,
@@ -1345,8 +1347,7 @@ public void ProcessGraphBuildSwitch(string[] parameters, GraphBuildOptions expec
         /// Verifies that when the /profileevaluation switch is used with invalid filenames an error is shown.
         /// </summary>
         [MemberData(nameof(GetInvalidFilenames))]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
-        [Theory]
+        [WindowsFullFrameworkOnlyTheory(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void ProcessProfileEvaluationInvalidFilename(string filename)
         {
             bool enableProfiler = false;
diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 2231689abae..a7ea9759b10 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -11,6 +11,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
 #if NETFRAMEWORK
@@ -220,6 +221,10 @@ public void CanShutdownServerProcess(bool byBuildManager)
         {
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
 
+            // This test seems to be flaky, lets enable better logging to investigate it next time
+            // TODO: delete after investigated its flakiness
+            _env.WithTransientDebugEngineForNewProcesses(true);
+
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
 
             // Start a server node and find its PID.
@@ -284,6 +289,10 @@ public void ServerShouldNotStartWhenBuildIsInteractive()
         [Fact]
         public void PropertyMSBuildStartupDirectoryOnServer()
         {
+            // This test seems to be flaky, lets enable better logging to investigate it next time
+            // TODO: delete after investigated its flakiness
+            _env.WithTransientDebugEngineForNewProcesses(true);
+
             string reportMSBuildStartupDirectoryProperty = @$"
 <Project>
     <UsingTask TaskName=""ProcessIdTask"" AssemblyFile=""{Assembly.GetExecutingAssembly().Location}"" />
diff --git a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
index ea90a86c84e..61f2c68c312 100644
--- a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
+++ b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
@@ -42,6 +42,7 @@
     <Compile Include="..\Shared\UnitTests\MockEngine.cs" />
     <Compile Include="..\Shared\UnitTests\MockLogger.cs" />
     <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs" />
+    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
 
     <EmbeddedResource Include="..\MSBuild\MSBuild\Microsoft.Build.Core.xsd">
diff --git a/src/MSBuild.UnitTests/PerfLog_Tests.cs b/src/MSBuild.UnitTests/PerfLog_Tests.cs
index 0f747122ec8..eadb3226199 100644
--- a/src/MSBuild.UnitTests/PerfLog_Tests.cs
+++ b/src/MSBuild.UnitTests/PerfLog_Tests.cs
@@ -2,11 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.IO;
-
 using Microsoft.Build.UnitTests.Shared;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Shouldly;
 
 #nullable disable
 
@@ -22,7 +21,6 @@ public PerfLogTests(ITestOutputHelper output)
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")] // Disable on Mono OSX, since Mono doesn't implement EventSource.
         public void TestPerfLogEnabledProducedLogFile()
         {
             using (TestEnvironment testEnv = TestEnvironment.Create(_output))
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 3dec3a1446c..c6029b73765 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -6,20 +6,19 @@
 using System.Diagnostics;
 using System.Globalization;
 using System.IO;
+using System.IO.Compression;
 using System.Linq;
+using System.Reflection;
 using System.Threading;
-
 using Microsoft.Build.CommandLine;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.Shared;
+using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Shouldly;
-using System.IO.Compression;
-using System.Reflection;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Logging;
 
 #nullable disable
 
@@ -1615,7 +1614,7 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
         /// <summary>
         /// Helper class to simulate directory work for ignore project extensions
         /// </summary>
-        internal class IgnoreProjectExtensionsHelper
+        internal sealed class IgnoreProjectExtensionsHelper
         {
             private readonly List<string> _directoryFileNameList;
 
diff --git a/src/MSBuild/AssemblyResources.cs b/src/MSBuild/AssemblyResources.cs
index a0eaaa57204..041c55cc2b2 100644
--- a/src/MSBuild/AssemblyResources.cs
+++ b/src/MSBuild/AssemblyResources.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
-using System.Reflection;
 using System.Globalization;
+using System.Reflection;
+using System.Resources;
 
 #nullable disable
 
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index c9785c3b3fe..9a7d968a673 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -47,7 +47,7 @@ internal enum ParameterlessSwitch
             FileLogger8,
             FileLogger9,
             DistributedFileLogger,
-            FancyLogger,
+            LiveLogger,
 #if DEBUG
             WaitForDebugger,
 #endif
@@ -201,25 +201,25 @@ internal ParameterizedSwitchInfo(
             //---------------------------------------------------------------------------------------------------------------------------------------------------
             //                                          Switch Names                        Switch Id                             Dup Error  Light up key
             //---------------------------------------------------------------------------------------------------------------------------------------------------
-            new ParameterlessSwitchInfo(  new string[] { "help", "h", "?" },                ParameterlessSwitch.Help,                  null),
-            new ParameterlessSwitchInfo(  new string[] { "version", "ver" },                ParameterlessSwitch.Version,               null),
-            new ParameterlessSwitchInfo(  new string[] { "nologo" },                        ParameterlessSwitch.NoLogo,                null),
-            new ParameterlessSwitchInfo(  new string[] { "noautoresponse", "noautorsp" },   ParameterlessSwitch.NoAutoResponse,        null),
-            new ParameterlessSwitchInfo(  new string[] { "noconsolelogger", "noconlog" },   ParameterlessSwitch.NoConsoleLogger,       null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger", "fl" },              ParameterlessSwitch.FileLogger,            null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger1", "fl1" },            ParameterlessSwitch.FileLogger1,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger2", "fl2" },            ParameterlessSwitch.FileLogger2,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger3", "fl3" },            ParameterlessSwitch.FileLogger3,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger4", "fl4" },            ParameterlessSwitch.FileLogger4,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger5", "fl5" },            ParameterlessSwitch.FileLogger5,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger6", "fl6" },            ParameterlessSwitch.FileLogger6,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger7", "fl7" },            ParameterlessSwitch.FileLogger7,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger8", "fl8" },            ParameterlessSwitch.FileLogger8,           null),
-            new ParameterlessSwitchInfo(  new string[] { "filelogger9", "fl9" },            ParameterlessSwitch.FileLogger9,           null),
-            new ParameterlessSwitchInfo(  new string[] { "distributedfilelogger", "dfl" },  ParameterlessSwitch.DistributedFileLogger, null),
-            new ParameterlessSwitchInfo(  new string[] { "fancylogger", "flg" },            ParameterlessSwitch.FancyLogger,           null),
+            new ParameterlessSwitchInfo(  new string[] { "help", "h", "?" },                         ParameterlessSwitch.Help,                  null),
+            new ParameterlessSwitchInfo(  new string[] { "version", "ver" },                         ParameterlessSwitch.Version,               null),
+            new ParameterlessSwitchInfo(  new string[] { "nologo" },                                 ParameterlessSwitch.NoLogo,                null),
+            new ParameterlessSwitchInfo(  new string[] { "noautoresponse", "noautorsp" },            ParameterlessSwitch.NoAutoResponse,        null),
+            new ParameterlessSwitchInfo(  new string[] { "noconsolelogger", "noconlog" },            ParameterlessSwitch.NoConsoleLogger,       null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger", "fl" },                       ParameterlessSwitch.FileLogger,            null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger1", "fl1" },                     ParameterlessSwitch.FileLogger1,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger2", "fl2" },                     ParameterlessSwitch.FileLogger2,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger3", "fl3" },                     ParameterlessSwitch.FileLogger3,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger4", "fl4" },                     ParameterlessSwitch.FileLogger4,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger5", "fl5" },                     ParameterlessSwitch.FileLogger5,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger6", "fl6" },                     ParameterlessSwitch.FileLogger6,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger7", "fl7" },                     ParameterlessSwitch.FileLogger7,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger8", "fl8" },                     ParameterlessSwitch.FileLogger8,           null),
+            new ParameterlessSwitchInfo(  new string[] { "filelogger9", "fl9" },                     ParameterlessSwitch.FileLogger9,           null),
+            new ParameterlessSwitchInfo(  new string[] { "distributedfilelogger", "dfl" },           ParameterlessSwitch.DistributedFileLogger, null),
+            new ParameterlessSwitchInfo(  new string[] { "livelogger", "ll", "fancylogger", "flg" }, ParameterlessSwitch.LiveLogger,            null),
 #if DEBUG
-            new ParameterlessSwitchInfo(  new string[] { "waitfordebugger", "wfd" },        ParameterlessSwitch.WaitForDebugger,       null),
+            new ParameterlessSwitchInfo(  new string[] { "waitfordebugger", "wfd" },                 ParameterlessSwitch.WaitForDebugger,       null),
 #endif
         };
 
diff --git a/src/MSBuild/FancyLogger/ANSIBuilder.cs b/src/MSBuild/LiveLogger/ANSIBuilder.cs
similarity index 88%
rename from src/MSBuild/FancyLogger/ANSIBuilder.cs
rename to src/MSBuild/LiveLogger/ANSIBuilder.cs
index b735859d666..f787c2949b3 100644
--- a/src/MSBuild/FancyLogger/ANSIBuilder.cs
+++ b/src/MSBuild/LiveLogger/ANSIBuilder.cs
@@ -5,18 +5,24 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
     internal static class ANSIBuilder
     {
-        public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~])";
-        // TODO: This should replace ANSIRegex once FancyLogger's API is internal
+        public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~]|(?:\]8;;.*?\x1b\\))";
+        // TODO: This should replace ANSIRegex once LiveLogger's API is internal
         public static Regex ANSIRegexRegex = new Regex(ANSIRegex);
         public static string ANSIRemove(string text)
         {
             return ANSIRegexRegex.Replace(text, "");
         }
 
+        /// <summary>
+        /// Find a place to break a string after a number of visible characters, not counting VT-100 codes.
+        /// </summary>
+        /// <param name="text">String to split.</param>
+        /// <param name="position">Number of visible characters to split after.</param>
+        /// <returns>Index in <paramref name="text"/> that represents <paramref name="position"/> visible characters.</returns>
         // TODO: This should be an optional parameter for ANSIBreakpoint(string text, int positioon, int initialPosition = 0)
         public static int ANSIBreakpoint(string text, int position)
         {
@@ -29,34 +35,33 @@ public static int ANSIBreakpoint(string text, int position, int initialPosition)
                 return text.Length;
             }
             int nonAnsiIndex = 0;
-            // Match nextMatch = Regex.Match(text, ANSIRegex);
             Match nextMatch = ANSIRegexRegex.Match(text, initialPosition);
-            int i = 0;
-            while (i < text.Length && nonAnsiIndex != position)
+            int logicalIndex = 0;
+            while (logicalIndex < text.Length && nonAnsiIndex != position)
             {
                 // Jump over ansi codes
-                if (i == nextMatch.Index && nextMatch.Length > 0)
+                if (logicalIndex == nextMatch.Index && nextMatch.Length > 0)
                 {
-                    i += nextMatch.Length;
+                    logicalIndex += nextMatch.Length;
                     nextMatch = nextMatch.NextMatch();
                 }
                 // Increment non ansi index
                 nonAnsiIndex++;
-                i++;
+                logicalIndex++;
             }
-            return i;
+            return logicalIndex;
         }
 
-        public static List<string> ANSIWrap(string text, int position)
+        public static List<string> ANSIWrap(string text, int maxLength)
         {
             ReadOnlySpan<char> textSpan = text.AsSpan();
             List<string> result = new();
-            int breakpoint = ANSIBreakpoint(text, position);
+            int breakpoint = ANSIBreakpoint(text, maxLength);
             while (textSpan.Length > breakpoint)
             {
                 result.Add(textSpan.Slice(0, breakpoint).ToString());
                 textSpan = textSpan.Slice(breakpoint);
-                breakpoint = ANSIBreakpoint(text, position, breakpoint);
+                breakpoint = ANSIBreakpoint(text, maxLength, breakpoint);
             }
             result.Add(textSpan.ToString());
             return result;
@@ -115,12 +120,12 @@ public static string SpaceBetween(string leftText, string rightText, int width)
                 string result = String.Empty;
                 string leftNoFormatString = ANSIRemove(leftText);
                 string rightNoFormatString = ANSIRemove(rightText);
-                if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth)
+                if (leftNoFormatString.Length + rightNoFormatString.Length >= width)
                 {
                     return leftText + rightText;
                 }
 
-                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length);
+                int space = width - (leftNoFormatString.Length + rightNoFormatString.Length);
                 result += leftText;
                 result += new string(' ', space - 1);
                 result += rightText;
@@ -196,11 +201,6 @@ public static string DoubleUnderlined(string text)
                 return String.Format("\x1b[21m{0}\x1b[24m", text);
             }
 
-            public static string Blinking(string text)
-            {
-                return String.Format("\x1b[5m{0}\x1b[25m", text);
-            }
-
             public static string Inverse(string text)
             {
                 return String.Format("\x1b[7m{0}\x1b[27m", text);
@@ -221,11 +221,10 @@ public static string Overlined(string text)
                 return String.Format("\x1b[53m{0}\x1b[55m", text);
             }
 
-            // TODO: Right now only replaces \ with /. Needs review to make sure it works on all or most terminal emulators.
-            public static string Hyperlink(string text, string url)
+            public static string Hyperlink(string text, string rawUrl)
             {
-                // return String.Format("\x1b[]8;;{0}\x1b\\{1}\x1b[]8;\x1b\\", text, url);
-                return url.Replace("\\", "/");
+                string url = rawUrl.Length > 0 ? new System.Uri(rawUrl).AbsoluteUri : rawUrl;
+                return $"\x1b]8;;{url}\x1b\\{text}\x1b]8;;\x1b\\";
             }
 
             public static string DECLineDrawing(string text)
@@ -423,16 +422,7 @@ public static string Spinner(int n)
 
             public static string ProgressBar(float percentage, int width = 10, char completedChar = '‚ñà', char remainingChar = '‚ñë')
             {
-                string result = String.Empty;
-                for (int i = 0; i < (int)Math.Floor(width * percentage); i++)
-                {
-                    result += completedChar;
-                }
-                for (int i = (int)Math.Floor(width * percentage); i < width; i++)
-                {
-                    result += remainingChar;
-                }
-                return result;
+                return new string(completedChar, (int)Math.Floor(width * percentage)) + new string(remainingChar, width - (int)Math.Floor(width * percentage));
             }
 
             public static string Bell()
diff --git a/src/MSBuild/FancyLogger/FancyLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
similarity index 54%
rename from src/MSBuild/FancyLogger/FancyLogger.cs
rename to src/MSBuild/LiveLogger/LiveLogger.cs
index 28008e2699b..7068886ba69 100644
--- a/src/MSBuild/FancyLogger/FancyLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -1,48 +1,75 @@
-// Licensed to the .NET Foundation under one or more agreements.
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class FancyLogger : ILogger
+    internal class LiveLogger : ILogger
     {
-        private Dictionary<int, FancyLoggerProjectNode> projects = new Dictionary<int, FancyLoggerProjectNode>();
+        private ConcurrentDictionary<int, ProjectNode> projects = new();
 
-        private bool Succeeded;
+        private bool succeeded;
+        private int startedProjects = 0;
+        private int finishedProjects = 0;
+        private ConcurrentDictionary<string, int> blockedProjects = new();
 
-        private float existingTasks = 1;
-        private float completedTasks = 0;
+        private Stopwatch? _stopwatch;
 
+        public LoggerVerbosity Verbosity { get; set; }
         public string Parameters { get; set; }
 
-        public LoggerVerbosity Verbosity { get; set; }
+        /// <summary>
+        /// List of events the logger needs as parameters to the <see cref="ConfigurableForwardingLogger"/>.
+        /// </summary>
+        /// <remarks>
+        /// If LiveLogger runs as a distributed logger, MSBuild out-of-proc nodes might filter the events that will go to the main node using an instance of <see cref="ConfigurableForwardingLogger"/> with the following parameters.
+        /// </remarks>
+        public static readonly string[] ConfigurableForwardingLoggerParameters =
+        {
+            "BUILDSTARTEDEVENT",
+            "BUILDFINISHEDEVENT",
+            "PROJECTSTARTEDEVENT",
+            "PROJECTFINISHEDEVENT",
+            "TARGETSTARTEDEVENT",
+            "TARGETFINISHEDEVENT",
+            "TASKSTARTEDEVENT",
+            "HIGHMESSAGEEVENT",
+            "WARNINGEVENT",
+            "ERROREVENT"
+        };
 
-        public FancyLogger()
+        public LiveLogger()
         {
             Parameters = "";
         }
 
         public void Initialize(IEventSource eventSource)
         {
-            // Register for different events
-            // Started
+            // Start the stopwatch as soon as the logger is initialized to capture
+            // any time before the BuildStarted event
+            _stopwatch = Stopwatch.StartNew();
+            // Register for different events. Make sure that ConfigurableForwardingLoggerParameters are in sync with them.
+            // Started and Finished events  
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
-            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
-            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
-            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
-            // Finished
             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);
+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
             eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);
+            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
             eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
-            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
-            // Raised
+            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
+
+            // Messages/Warnings/Errors
+            // BuildMessageEventHandler event handler below currently process only High importance events. 
             eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
+
             // Cancelled
             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
 
@@ -54,28 +81,35 @@ public void Initialize(IEventSource eventSource)
 
         private void Render()
         {
-            // Initialize FancyLoggerBuffer
-            FancyLoggerBuffer.Initialize();
+            // Initialize LiveLoggerBuffer
+            TerminalBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            FancyLoggerBuffer.WriteNewLine(string.Empty);
+            TerminalBuffer.WriteNewLine(string.Empty);
+
+            // Top line indicates the number of finished projects.
+            TerminalBuffer.FinishedProjects = this.finishedProjects;
+
             // First render
-            FancyLoggerBuffer.Render();
+            TerminalBuffer.Render();
             int i = 0;
             // Rerender periodically
-            while (!FancyLoggerBuffer.IsTerminated)
+            while (!TerminalBuffer.IsTerminated)
             {
                 i++;
                 // Delay by 1/60 seconds
                 // Use task delay to avoid blocking the task, so that keyboard input is listened continously
                 Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
+                    TerminalBuffer.FinishedProjects = this.finishedProjects;
+
                     // Rerender projects only when needed
                     foreach (var project in projects)
                     {
                         project.Value.Log();
                     }
+
                     // Rerender buffer
-                    FancyLoggerBuffer.Render();
+                    TerminalBuffer.Render();
                 });
                 // Handle keyboard input
                 if (Console.KeyAvailable)
@@ -84,15 +118,15 @@ private void Render()
                     switch (key)
                     {
                         case ConsoleKey.UpArrow:
-                            if (FancyLoggerBuffer.TopLineIndex > 0)
+                            if (TerminalBuffer.TopLineIndex > 0)
                             {
-                                FancyLoggerBuffer.TopLineIndex--;
+                                TerminalBuffer.TopLineIndex--;
                             }
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            TerminalBuffer.ShouldRerender = true;
                             break;
                         case ConsoleKey.DownArrow:
-                            FancyLoggerBuffer.TopLineIndex++;
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            TerminalBuffer.TopLineIndex++;
+                            TerminalBuffer.ShouldRerender = true;
                             break;
                         default:
                             break;
@@ -101,6 +135,15 @@ private void Render()
             }
         }
 
+        private void UpdateFooter()
+        {
+            float percentage = startedProjects == 0 ? 0.0f : (float)finishedProjects / startedProjects;
+            TerminalBuffer.FooterText = ANSIBuilder.Alignment.SpaceBetween(
+                $"Build progress (approx.) [{ANSIBuilder.Graphics.ProgressBar(percentage)}]",
+                ANSIBuilder.Formatting.Italic(ANSIBuilder.Formatting.Dim("[Up][Down] Scroll")),
+                Console.BufferWidth);
+        }
+
         // Build
         private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
@@ -108,38 +151,45 @@ private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
 
         private void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
-            Succeeded = e.Succeeded;
+            succeeded = e.Succeeded;
         }
 
         // Project
         private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
+            startedProjects++;
+
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            // If id already exists...
-            if (projects.ContainsKey(id))
+
+            // If id does not exist...
+            projects.GetOrAdd(id, (_) =>
             {
-                return;
-            }
-            // Add project
-            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
-            projects[id] = node;
-            // Log
-            node.ShouldRerender = true;
+                // Add project
+                ProjectNode node = new(e)
+                {
+                    ShouldRerender = true,
+                };
+                UpdateFooter();
+
+                return node;
+            });
         }
 
         private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
+
             // Update line
             node.Finished = true;
-            // Log
             node.ShouldRerender = true;
+            finishedProjects++;
+            UpdateFooter();
         }
 
         // Target
@@ -147,7 +197,7 @@ private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -161,7 +211,7 @@ private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -176,20 +226,23 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
             // Update
             node.AddTask(e);
-            existingTasks++;
             // Log
             node.ShouldRerender = true;
-        }
 
-        private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
-        {
-            completedTasks++;
+            if (e.TaskName.Equals("MSBuild"))
+            {
+                TerminalBufferLine? line = null; // TerminalBuffer.WriteNewLineAfterMidpoint($"{e.ProjectFile} is blocked by the MSBuild task.");
+                if (line is not null)
+                {
+                    blockedProjects[e.ProjectFile] = line.Id;
+                }
+            }
         }
 
         // Raised messages, warnings and errors
@@ -201,7 +254,7 @@ private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             }
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -215,7 +268,7 @@ private void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -229,7 +282,7 @@ private void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -247,35 +300,44 @@ private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eve
 
         public void Shutdown()
         {
-            FancyLoggerBuffer.Terminate();
-            // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
-            Console.Clear();
+            TerminalBuffer.Terminate();
             int errorCount = 0;
             int warningCount = 0;
             foreach (var project in projects)
             {
+                if (project.Value.AdditionalDetails.Count == 0)
+                {
+                    continue;
+                }
+
+                Console.WriteLine(project.Value.ToANSIString());
                 errorCount += project.Value.ErrorCount;
                 warningCount += project.Value.WarningCount;
                 foreach (var message in project.Value.AdditionalDetails)
                 {
-                    Console.WriteLine(message.ToANSIString());
+                    Console.WriteLine($"    ‚îî‚îÄ‚îÄ {message.ToANSIString()}");
                 }
+                Console.WriteLine();
             }
 
-            // Emmpty line
+            // Empty line
+            Console.WriteLine();
+
+            Debug.Assert(_stopwatch is not null, $"Expected {nameof(_stopwatch)} to be initialized long before Shutdown()");
+            TimeSpan buildDuration = _stopwatch!.Elapsed;
+
+            string prettyDuration = buildDuration.TotalHours > 1.0 ?
+                buildDuration.ToString(@"h\:mm\:ss") :
+                buildDuration.ToString(@"m\:ss");
+
+            string status = succeeded ?
+                ANSIBuilder.Formatting.Color("succeeded", ANSIBuilder.Formatting.ForegroundColor.Green) :
+                ANSIBuilder.Formatting.Color("failed", ANSIBuilder.Formatting.ForegroundColor.Red);
+
+            Console.WriteLine($"Build {status} in {prettyDuration}");
+            Console.WriteLine($"\t{warningCount} Warnings(s)");
+            Console.WriteLine($"\t{errorCount} Errors(s)");
             Console.WriteLine();
-            if (Succeeded)
-            {
-                Console.WriteLine(ANSIBuilder.Formatting.Color("Build succeeded.", ANSIBuilder.Formatting.ForegroundColor.Green));
-                Console.WriteLine($"\t{warningCount} Warning(s)");
-                Console.WriteLine($"\t{errorCount} Error(s)");
-            }
-            else
-            {
-                Console.WriteLine(ANSIBuilder.Formatting.Color("Build failed.", ANSIBuilder.Formatting.ForegroundColor.Red));
-                Console.WriteLine($"\t{warningCount} Warnings(s)");
-                Console.WriteLine($"\t{errorCount} Errors(s)");
-            }
         }
     }
 }
diff --git a/src/MSBuild/FancyLogger/FancyLoggerMessageNode.cs b/src/MSBuild/LiveLogger/MessageNode.cs
similarity index 64%
rename from src/MSBuild/FancyLogger/FancyLoggerMessageNode.cs
rename to src/MSBuild/LiveLogger/MessageNode.cs
index 73ce25f47d2..7d6029e041d 100644
--- a/src/MSBuild/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/MSBuild/LiveLogger/MessageNode.cs
@@ -2,12 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.IO;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
 
-    internal class FancyLoggerMessageNode
+    internal class MessageNode
     {
         // Use this to change the max lenngth (relative to screen size) of messages
         private static int MAX_LENGTH = 3 * Console.BufferWidth;
@@ -15,16 +16,18 @@ public enum MessageType
         {
             HighPriorityMessage,
             Warning,
-            Error
+            Error,
+            ProjectOutputMessage
         }
         public string Message;
-        public FancyLoggerBufferLine? Line;
+        public TerminalBufferLine? Line;
         public MessageType Type;
         public string? Code;
         public string? FilePath;
         public int? LineNumber;
         public int? ColumnNumber;
-        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
+        public string? ProjectOutputExecutablePath;
+        public MessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
             if (Message.Length > MAX_LENGTH)
@@ -34,8 +37,20 @@ public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
             // Get type
             switch (args)
             {
-                case BuildMessageEventArgs:
-                    Type = MessageType.HighPriorityMessage;
+                case BuildMessageEventArgs message:
+                    // Detect output messages
+                    var finalOutputMarker = " -> ";
+                    int i = message.Message!.IndexOf(finalOutputMarker, StringComparison.Ordinal);
+                    if (i > 0)
+                    {
+                        Type = MessageType.ProjectOutputMessage;
+                        ProjectOutputExecutablePath = message.Message!.Substring(i + finalOutputMarker.Length);
+                    }
+                    else
+                    {
+                        Type = MessageType.HighPriorityMessage;
+                        Code = message.Subcategory;
+                    }
                     break;
                 case BuildWarningEventArgs warning:
                     Type = MessageType.Warning;
@@ -66,13 +81,15 @@ public string ToANSIString()
                     return $"‚ùå {ANSIBuilder.Formatting.Color(
                         $"Error {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}",
                         ANSIBuilder.Formatting.ForegroundColor.Red)}";
+                case MessageType.ProjectOutputMessage:
+                    return $"‚öôÔ∏è {ANSIBuilder.Formatting.Hyperlink(ProjectOutputExecutablePath!, Path.GetDirectoryName(ProjectOutputExecutablePath)!)}";
                 case MessageType.HighPriorityMessage:
                 default:
-                    return $"‚ÑπÔ∏è {ANSIBuilder.Formatting.Italic(Message)}";
+                    return $"‚ÑπÔ∏è {Code}{(Code is not null ? ": " : string.Empty)} {ANSIBuilder.Formatting.Italic(Message)}";
             }
         }
 
-        // TODO: Rename to Log after FancyLogger's API becomes internal
+        // TODO: Rename to Log after LiveLogger's API becomes internal
         public void Log()
         {
             if (Line == null)
diff --git a/src/MSBuild/FancyLogger/FancyLoggerProjectNode.cs b/src/MSBuild/LiveLogger/ProjectNode.cs
similarity index 51%
rename from src/MSBuild/FancyLogger/FancyLoggerProjectNode.cs
rename to src/MSBuild/LiveLogger/ProjectNode.cs
index 00e1cd8090a..9561ead1647 100644
--- a/src/MSBuild/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/MSBuild/LiveLogger/ProjectNode.cs
@@ -7,9 +7,9 @@
 using System.Linq;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class FancyLoggerProjectNode
+    internal class ProjectNode
     {
         /// <summary>
         /// Given a list of paths, this method will get the shortest not ambiguous path for a project.
@@ -25,21 +25,22 @@ private static string GetUnambiguousPath(string path)
         public string ProjectPath;
         public string TargetFramework;
         public bool Finished;
+        public string? ProjectOutputExecutable;
         // Line to display project info
-        public FancyLoggerBufferLine? Line;
+        public TerminalBufferLine? Line;
         // Targets
         public int FinishedTargets;
-        public FancyLoggerBufferLine? CurrentTargetLine;
-        public FancyLoggerTargetNode? CurrentTargetNode;
+        public TerminalBufferLine? CurrentTargetLine;
+        public TargetNode? CurrentTargetNode;
         // Messages, errors and warnings
-        public List<FancyLoggerMessageNode> AdditionalDetails = new();
+        public List<MessageNode> AdditionalDetails = new();
         // Count messages, warnings and errors
         public int MessageCount = 0;
         public int WarningCount = 0;
         public int ErrorCount = 0;
         // Bool if node should rerender
         internal bool ShouldRerender = true;
-        public FancyLoggerProjectNode(ProjectStartedEventArgs args)
+        public ProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
             ProjectPath = args.ProjectFile!;
@@ -55,7 +56,30 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
             }
         }
 
-        // TODO: Rename to Render() after FancyLogger's API becomes internal
+        public string ToANSIString()
+        {
+            ANSIBuilder.Formatting.ForegroundColor color = ANSIBuilder.Formatting.ForegroundColor.Default;
+            string icon = ANSIBuilder.Graphics.Spinner() + " ";
+
+            if (Finished && WarningCount + ErrorCount == 0)
+            {
+                color = ANSIBuilder.Formatting.ForegroundColor.Green;
+                icon = "‚úì";
+            }
+            else if (ErrorCount > 0)
+            {
+                color = ANSIBuilder.Formatting.ForegroundColor.Red;
+                icon = "X";
+            }
+            else if (WarningCount > 0)
+            {
+                color = ANSIBuilder.Formatting.ForegroundColor.Yellow;
+                icon = "‚úì";
+            }
+            return icon + " " + ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), color) + " " + ANSIBuilder.Formatting.Inverse(TargetFramework);
+        }
+
+        // TODO: Rename to Render() after LiveLogger's API becomes internal
         public void Log()
         {
             if (!ShouldRerender)
@@ -65,20 +89,11 @@ public void Log()
 
             ShouldRerender = false;
             // Project details
-            string lineContents = ANSIBuilder.Alignment.SpaceBetween(
-                // Show indicator
-                (Finished ? ANSIBuilder.Formatting.Color("‚úì", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Formatting.Blinking(ANSIBuilder.Graphics.Spinner())) +
-                // Project
-                ANSIBuilder.Formatting.Dim("Project: ") +
-                // Project file path with color
-                $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default)} [{TargetFramework ?? "*"}]",
-                $"({MessageCount} Messages, {WarningCount} Warnings, {ErrorCount} Errors)",
-                Console.WindowWidth);
-
+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(ToANSIString(), $"({MessageCount} ‚ÑπÔ∏è, {WarningCount} ‚ö†Ô∏è, {ErrorCount} ‚ùå)", Console.BufferWidth - 1);
             // Create or update line
             if (Line is null)
             {
-                Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
+                Line = TerminalBuffer.WriteNewLineBeforeMidpoint(lineContents, false);
             }
             else
             {
@@ -90,21 +105,42 @@ public void Log()
             {
                 if (CurrentTargetLine is not null)
                 {
-                    FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                    TerminalBuffer.DeleteLine(CurrentTargetLine.Id);
                 }
 
-                foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
+                bool foundErrorOrWarning = false;
+
+                foreach (MessageNode node in AdditionalDetails)
                 {
+                    if (node.Type != MessageNode.MessageType.HighPriorityMessage)
+                    {
+                        foundErrorOrWarning = true;
+                    }
+
                     // Only delete high priority messages
-                    if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage)
+                    if (node.Type != MessageNode.MessageType.HighPriorityMessage)
                     {
                         continue;
                     }
 
                     if (node.Line is not null)
                     {
-                        FancyLoggerBuffer.DeleteLine(node.Line.Id);
+                        TerminalBuffer.DeleteLine(node.Line.Id);
+                    }
+                }
+
+                if (!foundErrorOrWarning && this.Line is not null)
+                {
+                    foreach (MessageNode node in AdditionalDetails)
+                    {
+                        int? id = node.Line?.Id;
+                        if (id is not null)
+                        {
+                            TerminalBuffer.DeleteLine(id.Value);
+                        }
                     }
+
+                    TerminalBuffer.DeleteLine(this.Line.Id);
                 }
             }
 
@@ -117,7 +153,7 @@ public void Log()
             string currentTargetLineContents = $"    ‚îî‚îÄ‚îÄ {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
             if (CurrentTargetLine is null)
             {
-                CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+                CurrentTargetLine = TerminalBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
             }
             else
             {
@@ -125,28 +161,28 @@ public void Log()
             }
 
             // Messages, warnings and errors
-            foreach (FancyLoggerMessageNode node in AdditionalDetails)
+            foreach (MessageNode node in AdditionalDetails)
             {
-                if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage)
+                if (Finished && node.Type == MessageNode.MessageType.HighPriorityMessage)
                 {
                     continue;
                 }
 
                 if (node.Line is null)
                 {
-                    node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                    node.Line = TerminalBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 }
 
                 node.Log();
             }
         }
 
-        public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
+        public TargetNode AddTarget(TargetStartedEventArgs args)
         {
-            CurrentTargetNode = new FancyLoggerTargetNode(args);
+            CurrentTargetNode = new TargetNode(args);
             return CurrentTargetNode;
         }
-        public FancyLoggerTaskNode? AddTask(TaskStartedEventArgs args)
+        public TaskNode? AddTask(TaskStartedEventArgs args)
         {
             // Get target id
             int targetId = args.BuildEventContext!.TargetId;
@@ -159,7 +195,7 @@ public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
                 return null;
             }
         }
-        public FancyLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
+        public MessageNode? AddMessage(BuildMessageEventArgs args)
         {
             if (args.Importance != MessageImportance.High)
             {
@@ -167,22 +203,30 @@ public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
             }
 
             MessageCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
+            // Add output executable path
+            if (node.ProjectOutputExecutablePath is not null)
+            {
+                ProjectOutputExecutable = node.ProjectOutputExecutablePath;
+            }
+
             AdditionalDetails.Add(node);
             return node;
         }
-        public FancyLoggerMessageNode? AddWarning(BuildWarningEventArgs args)
+        public MessageNode? AddWarning(BuildWarningEventArgs args)
         {
             WarningCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
             AdditionalDetails.Add(node);
+            TerminalBuffer.overallBuildState = TerminalBuffer.overallBuildState == OverallBuildState.Error ? OverallBuildState.Error : OverallBuildState.Warning;
             return node;
         }
-        public FancyLoggerMessageNode? AddError(BuildErrorEventArgs args)
+        public MessageNode? AddError(BuildErrorEventArgs args)
         {
             ErrorCount++;
-            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
             AdditionalDetails.Add(node);
+            TerminalBuffer.overallBuildState = OverallBuildState.Error;
             return node;
         }
     }
diff --git a/src/MSBuild/FancyLogger/FancyLoggerTargetNode.cs b/src/MSBuild/LiveLogger/TargetNode.cs
similarity index 55%
rename from src/MSBuild/FancyLogger/FancyLoggerTargetNode.cs
rename to src/MSBuild/LiveLogger/TargetNode.cs
index 21430209d83..06d61dd431a 100644
--- a/src/MSBuild/FancyLogger/FancyLoggerTargetNode.cs
+++ b/src/MSBuild/LiveLogger/TargetNode.cs
@@ -3,22 +3,22 @@
 
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
 
-    internal class FancyLoggerTargetNode
+    internal class TargetNode
     {
         public int Id;
         public string TargetName;
-        public FancyLoggerTaskNode? CurrentTaskNode;
-        public FancyLoggerTargetNode(TargetStartedEventArgs args)
+        public TaskNode? CurrentTaskNode;
+        public TargetNode(TargetStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TargetId;
             TargetName = args.TargetName;
         }
-        public FancyLoggerTaskNode AddTask(TaskStartedEventArgs args)
+        public TaskNode AddTask(TaskStartedEventArgs args)
         {
-            CurrentTaskNode = new FancyLoggerTaskNode(args);
+            CurrentTaskNode = new TaskNode(args);
             return CurrentTaskNode;
         }
     }
diff --git a/src/MSBuild/FancyLogger/FancyLoggerTaskNode.cs b/src/MSBuild/LiveLogger/TaskNode.cs
similarity index 70%
rename from src/MSBuild/FancyLogger/FancyLoggerTaskNode.cs
rename to src/MSBuild/LiveLogger/TaskNode.cs
index 7ad82beca4a..4e8d8118675 100644
--- a/src/MSBuild/FancyLogger/FancyLoggerTaskNode.cs
+++ b/src/MSBuild/LiveLogger/TaskNode.cs
@@ -3,14 +3,14 @@
 
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
 
-    internal class FancyLoggerTaskNode
+    internal class TaskNode
     {
         public int Id;
         public string TaskName;
-        public FancyLoggerTaskNode(TaskStartedEventArgs args)
+        public TaskNode(TaskStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TaskId;
             TaskName = args.TaskName;
diff --git a/src/MSBuild/FancyLogger/FancyLoggerBuffer.cs b/src/MSBuild/LiveLogger/TerminalBuffer.cs
similarity index 59%
rename from src/MSBuild/FancyLogger/FancyLoggerBuffer.cs
rename to src/MSBuild/LiveLogger/TerminalBuffer.cs
index 95f4283b8fd..d58b42c7689 100644
--- a/src/MSBuild/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/MSBuild/LiveLogger/TerminalBuffer.cs
@@ -1,14 +1,16 @@
-// Licensed to the .NET Foundation under one or more agreements.
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Runtime.CompilerServices;
 using System.Text;
+using static System.Net.Mime.MediaTypeNames;
 
-namespace Microsoft.Build.Logging.FancyLogger
+namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class FancyLoggerBufferLine
+    internal class TerminalBufferLine
     {
         private static int Counter = 0;
         private string _text = string.Empty;
@@ -31,22 +33,22 @@ public string Text
                     WrappedText = new List<string> { value };
                 }
                 // Buffer should rerender
-                FancyLoggerBuffer.ShouldRerender = true;
+                TerminalBuffer.ShouldRerender = true;
             }
         }
 
-        public FancyLoggerBufferLine()
+        public TerminalBufferLine()
         {
             Id = Counter++;
             Text = string.Empty;
             ShouldWrapLines = false;
         }
-        public FancyLoggerBufferLine(string text)
+        public TerminalBufferLine(string text)
             : this()
         {
             Text = text;
         }
-        public FancyLoggerBufferLine(string text, bool shouldWrapLines)
+        public TerminalBufferLine(string text, bool shouldWrapLines)
             : this()
         {
             ShouldWrapLines = shouldWrapLines;
@@ -54,13 +56,19 @@ public FancyLoggerBufferLine(string text, bool shouldWrapLines)
         }
     }
 
-    internal class FancyLoggerBuffer
+    internal class TerminalBuffer
     {
-        private static List<FancyLoggerBufferLine> Lines = new();
+        private const char errorSymbol = '‚ùå';
+        private const char warningSymbol = '‚ö†';
+        private static List<TerminalBufferLine> Lines = new();
+        public static string FooterText = string.Empty;
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
         internal static bool IsTerminated = false;
         internal static bool ShouldRerender = true;
+        internal static OverallBuildState overallBuildState = OverallBuildState.None;
+        internal static int FinishedProjects = 0;
+        private static int midLineId;
         internal static int ScrollableAreaHeight
         {
             get
@@ -75,15 +83,21 @@ public static void Initialize()
             Console.OutputEncoding = Encoding.UTF8;
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
             Console.Write(ANSIBuilder.Cursor.Invisible());
+            // TerminalBufferLine midLine = new(new string('-', Console.BufferWidth), true);
+            // WriteNewLine(midLine);
+            // midLineId = midLine.Id;
+            midLineId = -1;
         }
 
         public static void Terminate()
         {
             IsTerminated = true;
+            // Delete contents from alternate buffer before switching back to main buffer
+            Console.Write(
+                ANSIBuilder.Cursor.Home() +
+                ANSIBuilder.Eraser.DisplayCursorToEnd());
             // Reset configuration for buffer and cursor, and clear screen
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
-            Console.Write(ANSIBuilder.Eraser.Display());
-            Console.Clear();
             Console.Write(ANSIBuilder.Cursor.Visible());
             Lines = new();
         }
@@ -97,14 +111,27 @@ public static void Render()
             }
 
             ShouldRerender = false;
+            ANSIBuilder.Formatting.ForegroundColor desiredColor =
+                overallBuildState == OverallBuildState.Error ? ANSIBuilder.Formatting.ForegroundColor.Red :
+                overallBuildState == OverallBuildState.Warning ? ANSIBuilder.Formatting.ForegroundColor.Yellow :
+                ANSIBuilder.Formatting.ForegroundColor.White;
+
+            string text = $"MSBuild - Build in progress - {FinishedProjects} finished projects";
+            text =
+                overallBuildState == OverallBuildState.Error ? $"{errorSymbol} {text} {errorSymbol}" :
+                overallBuildState == OverallBuildState.Warning ? $"{warningSymbol} {text} {warningSymbol}" :
+                text;
+
             Console.Write(
                 // Write header
                 ANSIBuilder.Cursor.Home() +
-                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress")) +
+                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center(text)), ANSIBuilder.Formatting.BackgroundColor.Black, desiredColor) +
                 // Write footer
-                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
-                // TODO: Remove and replace with actual footer
-                new string('-', Console.BufferWidth) + $"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}");
+                ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
+                    ANSIBuilder.Eraser.LineCursorToEnd() +
+                    new string('-', Console.BufferWidth) +
+                    Environment.NewLine +
+                    FooterText);
 
             if (Lines.Count == 0)
             {
@@ -115,7 +142,7 @@ public static void Render()
             string contents = string.Empty;
             int accumulatedLineCount = 0;
             int lineIndex = 0;
-            foreach (FancyLoggerBufferLine line in Lines)
+            foreach (TerminalBufferLine line in Lines)
             {
                 // Continue if accum line count + next lines < scrolling area
                 if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex)
@@ -151,13 +178,14 @@ public static void Render()
             Console.Write(contents);
         }
         #endregion
+
         #region Line identification
         public static int GetLineIndexById(int lineId)
         {
             return Lines.FindIndex(x => x.Id == lineId);
         }
 
-        public static FancyLoggerBufferLine? GetLineById(int lineId)
+        public static TerminalBufferLine? GetLineById(int lineId)
         {
             int index = GetLineIndexById(lineId);
             if (index == -1)
@@ -171,16 +199,16 @@ public static int GetLineIndexById(int lineId)
 
         #region Line create, update and delete
         // Write new line
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, string text)
         {
             return WriteNewLineAfter(lineId, text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            TerminalBufferLine line = new TerminalBufferLine(text, shouldWrapLines);
             return WriteNewLineAfter(lineId, line);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
+        public static TerminalBufferLine? WriteNewLineAfter(int lineId, TerminalBufferLine line)
         {
             if (lineId != -1)
             {
@@ -191,7 +219,7 @@ public static int GetLineIndexById(int lineId)
                     return null;
                 }
                 // Get line end index
-                Lines.Insert(lineIndex, line);
+                Lines.Insert(lineIndex + 1, line);
             }
             else
             {
@@ -200,23 +228,44 @@ public static int GetLineIndexById(int lineId)
             return line;
         }
 
-        public static FancyLoggerBufferLine? WriteNewLine(string text)
+        public static TerminalBufferLine? WriteNewLineAfterMidpoint(string text, bool shouldWrapLines = false)
+        {
+            TerminalBufferLine line = new(text, shouldWrapLines);
+            return WriteNewLineAfter(midLineId, line);
+        }
+
+        public static TerminalBufferLine? WriteNewLineBeforeMidpoint(string text, bool shouldWrapLines)
+        {
+            TerminalBufferLine line = new(text, shouldWrapLines);
+            int lineIndex = GetLineIndexById(midLineId);
+            if (lineIndex == -1)
+            {
+                WriteNewLine(line);
+                return null;
+            }
+
+            Lines.Insert(lineIndex, line);
+
+            return line;
+        }
+
+        public static TerminalBufferLine? WriteNewLine(string text)
         {
             return WriteNewLine(text, true);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(string text, bool shouldWrapLines)
+        public static TerminalBufferLine? WriteNewLine(string text, bool shouldWrapLines)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
+            TerminalBufferLine line = new TerminalBufferLine(text, shouldWrapLines);
             return WriteNewLine(line);
         }
-        public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
+        public static TerminalBufferLine? WriteNewLine(TerminalBufferLine line)
         {
             return WriteNewLineAfter(Lines.Count > 0 ? Lines.Last().Id : -1, line);
         }
 
         // Update line
         // TODO: Remove. Use line.Text instead
-        public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
+        public static TerminalBufferLine? UpdateLine(int lineId, string text)
         {
             return null;
         }
@@ -236,4 +285,11 @@ public static void DeleteLine(int lineId)
         }
         #endregion
     }
+
+    internal enum OverallBuildState
+    {
+        None,
+        Warning,
+        Error,
+    }
 }
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index e3d5d6b9589..345d27ecf51 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -172,7 +172,7 @@
     <Compile Include="DistributedLoggerRecord.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
-    <Compile Include="FancyLogger\*.cs" />
+    <Compile Include="LiveLogger\*.cs" />
     <Compile Include="InitializationException.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -243,13 +243,8 @@
   </ItemGroup>
 
   <!-- Xsds are not TF or arch-specific so copy once them in the outer build -->
-  <Target Name="CopyXsds"
-          BeforeTargets="Build"
-          Condition="'$(IsInnerBuild)' != 'true'">
-    <Copy SourceFiles="@(XsdsForVS)"
-          DestinationFiles="@(XsdsForVS->'$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'xsd'))%(RecursiveDir)%(Filename)%(Extension)')"
-          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
-          />
+  <Target Name="CopyXsds" BeforeTargets="Build" Condition="'$(IsInnerBuild)' != 'true'">
+    <Copy SourceFiles="@(XsdsForVS)" DestinationFiles="@(XsdsForVS-&gt;'$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'xsd'))%(RecursiveDir)%(Filename)%(Extension)')" SkipUnchangedFiles="$(SkipCopyUnchangedFiles)" />
   </Target>
 
   <!-- Include MSBuild.deps.json and MSBuild.runtimeconfig.json in ContentWithTargetPath so they will be copied to the output folder of projects
@@ -270,10 +265,7 @@
        in resolving references using them instead of the correct build-time references.
        Instead, add them just afterward, before assigning target paths/copying to
        the bin folder. -->
-  <Target Name="AddRefAssemblies"
-          DependsOnTargets="ResolveAssemblyReferences"
-          BeforeTargets="AssignTargetPaths"
-          Condition="'$(MonoBuild)' != 'true'">
+  <Target Name="AddRefAssemblies" DependsOnTargets="ResolveAssemblyReferences" BeforeTargets="AssignTargetPaths" Condition="'$(MonoBuild)' != 'true'">
     <ItemGroup>
       <Content Include="$(NuGetPackageRoot)\netstandard.library\2.0.3\build\netstandard2.0\ref\netstandard.dll" Link="ref\netstandard.dll" CopyToOutputDirectory="PreserveNewest" />
       <Content Include="$(NuGetPackageRoot)\netstandard.library\2.0.3\build\netstandard2.0\ref\mscorlib.dll" Link="ref\mscorlib.dll" CopyToOutputDirectory="PreserveNewest" />
@@ -354,7 +346,7 @@
     </Task>
   </UsingTask>
 
-  <Target Name="ValidateMSBuildPackageDependencyVersions" BeforeTargets="AfterBuild" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" >
+  <Target Name="ValidateMSBuildPackageDependencyVersions" BeforeTargets="AfterBuild" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <ValidateMSBuildPackageDependencyVersions AppConfig="@(AppConfigWithTargetPath)" AssemblyPath="$(OutputPath)" />
   </Target>
 
diff --git a/src/MSBuild/MSBuildClientApp.cs b/src/MSBuild/MSBuildClientApp.cs
index c9ea4f7cd03..de7895a6259 100644
--- a/src/MSBuild/MSBuildClientApp.cs
+++ b/src/MSBuild/MSBuildClientApp.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Shared;
 using System.Threading;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
+using Microsoft.Build.Shared;
 
 #if RUNTIME_TYPE_NETCORE || MONO
 using System.IO;
@@ -78,9 +78,9 @@ public static MSBuildApp.ExitType Execute(
                 exitResult.MSBuildClientExitType == MSBuildClientExitType.UnknownServerState ||
                 exitResult.MSBuildClientExitType == MSBuildClientExitType.LaunchError)
             {
-                if (KnownTelemetry.BuildTelemetry != null)
+                if (KnownTelemetry.PartialBuildTelemetry != null)
                 {
-                    KnownTelemetry.BuildTelemetry.ServerFallbackReason = exitResult.MSBuildClientExitType.ToString();
+                    KnownTelemetry.PartialBuildTelemetry.ServerFallbackReason = exitResult.MSBuildClientExitType.ToString();
                 }
 
                 // Server is busy, fallback to old behavior.
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 49475409d3f..2290f4aa7c9 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -292,6 +292,8 @@ private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask(
                     new TaskLoader.LogError(LogErrorDelegate),
 #if FEATURE_APPDOMAIN
                     appDomainSetup,
+                    // custom app domain assembly loading won't be available for task host
+                    null,
 #endif
                     true /* always out of proc */
 #if FEATURE_APPDOMAIN
@@ -299,7 +301,6 @@ private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask(
 #endif
                     );
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
-
                 wrappedTask.BuildEngine = oopTaskHostNode;
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index 5701c2d3cc9..3cea4a096b1 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -470,7 +470,7 @@
    <value>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </value>
     <comment>
@@ -482,9 +482,8 @@
   <data name="HelpMessage_InputCachesFiles" UESanitized="false" Visibility="Public">
    <value>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </value>
     <comment>
       LOCALIZATION: The following should not be localized: MSBuild, -isolate
@@ -756,9 +755,18 @@
     </comment>
   </data>
   <data name="HelpMessage_35_IsolateProjectsSwitch" UESanitized="false" Visibility="Public">
-    <value>  -isolateProjects[:True|False]
+    <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -1187,7 +1195,8 @@
     <comment>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 629795762ae..827a5cd91a3 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      Zp≈Øsob√≠, ≈æe MSBuild sestav√≠ jednotliv√© projekty izolovanƒõ.
 
                      Jde o omezenƒõj≈°√≠ re≈æim n√°stroje MSBuild, proto≈æe vy≈æaduje,
@@ -336,9 +345,9 @@
         <target state="translated">  @&lt;soubor&gt;            Vlo≈æen√≠ nastaven√≠ p≈ô√≠kazov√©ho ≈ô√°dku z textov√©ho souboru. Chcete-li zadat
                      v√≠ce soubor≈Ø odpovƒõd√≠, uveƒète ka≈æd√Ω soubor
                      odpovƒõd√≠ zvl√°≈°≈•.
-                     
-                     Automaticky jsou pou≈æity v≈°echny soubory s n√°zvem msbuild.rsp 
-                     nach√°zej√≠c√≠ se v n√°sleduj√≠c√≠ch um√≠stƒõn√≠ch: 
+
+                     Automaticky jsou pou≈æity v≈°echny soubory s n√°zvem msbuild.rsp
+                     nach√°zej√≠c√≠ se v n√°sleduj√≠c√≠ch um√≠stƒõn√≠ch:
                      (1) adres√°≈ô n√°stroje msbuild.exe
                      (2) adres√°≈ô prvn√≠ho sestaven√©ho projektu nebo ≈ôe≈°en√≠
 </target>
@@ -399,7 +408,7 @@
 </source>
         <target state="translated">  -property:&lt;n&gt;=&lt;v&gt;  Nastaven√≠ nebo potlaƒçen√≠ dan√Ωch vlastnost√≠ na √∫rovni
                      projektu. &lt;n&gt; je n√°zev vlastnosti a &lt;v&gt; je jej√≠ hodnota. V√≠ce
-                     vlastnost√≠ oddƒõlte st≈ôedn√≠kem ƒçi ƒç√°rkou nebo zadejte 
+                     vlastnost√≠ oddƒõlte st≈ôedn√≠kem ƒçi ƒç√°rkou nebo zadejte
                      ka≈ædou vlastnost zvl√°≈°≈•. (Kr√°tk√Ω tvar: -p)
                      P≈ô√≠klad:
                        -property:WarningLevel=2;OutDir=bin\Debug\
@@ -440,7 +449,7 @@
                      Syntaxe hodnoty &lt;sestaven√≠_protok_n√°st&gt;:
                         {&lt;n√°zev_sestaven√≠&gt;[,&lt;strong name&gt;] | &lt;soubor_sestaven√≠&gt;}
                      Parametry protokolovac√≠ho n√°stroje urƒçuj√≠, jak MSBuild vytvo≈ô√≠ protokolovac√≠ n√°stroj.
-                     Parametry &lt;param_protok_n√°st&gt; jsou voliteln√© a p≈ôed√°vaj√≠ se 
+                     Parametry &lt;param_protok_n√°st&gt; jsou voliteln√© a p≈ôed√°vaj√≠ se
                      protokolovac√≠mu n√°stroji p≈ôesnƒõ v tom tvaru, v jak√©m
                      byly zad√°ny. (Kr√°tk√Ω tvar: -l)
                      P≈ô√≠klady:
@@ -587,10 +596,10 @@
                      Example:
                        -validate:MyExtendedBuildSchema.xsd
 </source>
-        <target state="translated">  -validate          Ovƒõ≈ôit projekt podle v√Ωchoz√≠ho sch√©matu. 
+        <target state="translated">  -validate          Ovƒõ≈ôit projekt podle v√Ωchoz√≠ho sch√©matu.
                      (Kr√°tk√Ω tvar: -val)
 
-  -validate:&lt;sch√©ma&gt; Ovƒõ≈ôit projekt podle zadan√©ho sch√©matu. 
+  -validate:&lt;sch√©ma&gt; Ovƒõ≈ôit projekt podle zadan√©ho sch√©matu.
                      (Kr√°tk√Ω tvar: -val)
                      P≈ô√≠klad:
                        -validate:MyExtendedBuildSchema.xsd
@@ -647,11 +656,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
                      Seznam st≈ôedn√≠kem oddƒõlen√Ωch vstupn√≠ch soubor≈Ø mezipamƒõti, ze kter√Ωch
                      MSBuild p≈ôeƒçte v√Ωsledky sestaven√≠.
                      Nastaven√≠ tohoto atributu z√°rove≈à zapne izolovan√© buildy (-isolate).
@@ -666,10 +674,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[souborMezipamƒõti]...
+        <target state="needs-review-translation">  -outputResultsCache:[souborMezipamƒõti]...
                      V√Ωstupn√≠ soubor mezipamƒõti, do nƒõho≈æ bude MSBuild
                      zapisovat obsah sv√Ωch mezipamƒõt√≠ v√Ωsledk≈Ø sestaven√≠.
                      Nastaven√≠m t√©to mo≈ænosti zapnete tak√© izolovan√© buildy (-isolate).
@@ -705,11 +713,11 @@
                        -dl:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
                        -dl:MyLogger,C:\My.dll*ForwardingLogger,C:\Logger.dll
 </source>
-        <target state="translated">  -distributedlogger:&lt;centr_protok_n√°st&gt;*&lt;p≈ôed√°v_protok_n√°st&gt;                     
+        <target state="translated">  -distributedlogger:&lt;centr_protok_n√°st&gt;*&lt;p≈ôed√°v_protok_n√°st&gt;
                      Pou≈æ√≠t zadan√Ω protokolovac√≠ n√°stroj pro protokolov√°n√≠ ud√°lost√≠
-                     z n√°stroje MSBuild; ke ka≈æd√©mu uzlu p≈ôipojit jinou instanci 
-                     protokolovac√≠ho n√°stroje. Chcete-li zadat v√≠ce 
-                     protokolovac√≠ch n√°stroj≈Ø, uveƒète je jednotlivƒõ. 
+                     z n√°stroje MSBuild; ke ka≈æd√©mu uzlu p≈ôipojit jinou instanci
+                     protokolovac√≠ho n√°stroje. Chcete-li zadat v√≠ce
+                     protokolovac√≠ch n√°stroj≈Ø, uveƒète je jednotlivƒõ.
                      (Kr√°tk√Ω tvar: -dl)
                      Syntaxe hodnoty &lt;protok_n√°st&gt;:
                         [&lt;t≈ô√≠da_protok_n√°st&gt;,]&lt;sestav_protok_n√°st&gt;
@@ -773,7 +781,7 @@
         <target state="translated">  -toolsversion:&lt;verze&gt;
                      Verze sady n√°stroj≈Ø MSBuild (√∫loh, c√≠l≈Ø apod.), kter√° m√° b√Ωt
                      pou≈æita p≈ôi sestaven√≠. Tato verze m√° p≈ôednost p≈ôed verzemi
-                     uveden√Ωmi v jednotliv√Ωch projektech. 
+                     uveden√Ωmi v jednotliv√Ωch projektech.
                      (Kr√°tk√Ω tvar: -tv)
                      P≈ô√≠klad:
                        -toolsversion:3.5
@@ -891,25 +899,25 @@
                      popis p≈ôep√≠naƒçe -distributedFileLogger.
                      (Kr√°tk√Ω tvar: -flp[n])
                      K dispozici jsou stejn√© parametry jako ty,
-                     kter√© jsou uvedeny u protokolovac√≠ho n√°stroje 
+                     kter√© jsou uvedeny u protokolovac√≠ho n√°stroje
                      konzoly. Nƒõkter√© dal≈°√≠ dostupn√© parametry:
                        LogFile ‚Äì cesta k souboru protokolu, do nƒõj≈æ bude zaps√°n
-                                  protokol sestaven√≠ 
+                                  protokol sestaven√≠
                        Append  ‚Äì urƒçuje, zda bude protokol sestaven√≠ p≈ôipojen
-                                  k souboru protokolu, nebo jej p≈ôep√≠≈°e. P≈ôi nastaven√≠ 
+                                  k souboru protokolu, nebo jej p≈ôep√≠≈°e. P≈ôi nastaven√≠
                                   p≈ôep√≠naƒçe bude protokol sestaven√≠ p≈ôipojen k souboru
-                                  protokolu. Nen√≠-li p≈ôep√≠naƒç nastaven, bude obsah 
-                                  existuj√≠c√≠ho souboru protokolu p≈ôeps√°n. 
+                                  protokolu. Nen√≠-li p≈ôep√≠naƒç nastaven, bude obsah
+                                  existuj√≠c√≠ho souboru protokolu p≈ôeps√°n.
                                   Podle v√Ωchoz√≠ho nastaven√≠ je soubor protokolu p≈ôeps√°n.
-                       Encoding ‚Äì urƒçuje k√≥dov√°n√≠ souboru, nap≈ô√≠klad 
+                       Encoding ‚Äì urƒçuje k√≥dov√°n√≠ souboru, nap≈ô√≠klad
                      UTF-8, Unicode nebo ASCII.
                        V√Ωchoz√≠ √∫rove≈à podrobnost√≠ je Detailed.
                      P≈ô√≠klady:
                        -fileLoggerParameters:LogFile=MyLog.log;Append;
                                              Verbosity=diagnostic;Encoding=UTF-8
 
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum 
-                       -flp1:warningsonly;logfile=msbuild.wrn 
+                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
+                       -flp1:warningsonly;logfile=msbuild.wrn
                        -flp2:errorsonly;logfile=msbuild.err
     </target>
         <note>
@@ -1032,11 +1040,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Hodnota izolace projekt≈Ø nen√≠ platn√°. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Hodnota izolace projekt≈Ø nen√≠ platn√°. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 3c0965cfed9..a48f6fd867d 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -116,7 +116,7 @@
                      value that comes from a response file.
     </source>
         <target state="translated">  -interactive[:True|False]
-                     Weist darauf hin, dass f√ºr Aktionen im Build eine 
+                     Weist darauf hin, dass f√ºr Aktionen im Build eine
                      Interaktion mit dem Benutzer zugelassen ist. Verwenden Sie dieses Argument
                      in einem automatisierten Szenario, in dem keine Interaktivit√§t
                      erwartet wird.
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,11 +150,11 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      F√ºhrt dazu, dass MSBuild jedes Projekt isoliert erstellt.
 
                      Dies ist ein restriktiverer Modus von MSBuild, da er erfordert, dass
-                     der Projektgraph zur Auswertungszeit statisch ermittelbar ist. Er kann jedoch 
+                     der Projektgraph zur Auswertungszeit statisch ermittelbar ist. Er kann jedoch
                      die Planung verbessern und den Speichermehraufwand
                      beim Erstellen einer gro√üen Anzahl von Projekten verringern.
                      (Kurzform: -isolate)
@@ -337,8 +346,8 @@ Beispiel:
                      Antwortdateien anzugeben, geben Sie jede Antwortdatei
                      gesondert an.
 
-                     Alle Antwortdateien mit dem Name "msbuild.rsp" werden automatisch 
-                     in den folgenden Speicherorten verwendet: 
+                     Alle Antwortdateien mit dem Name "msbuild.rsp" werden automatisch
+                     in den folgenden Speicherorten verwendet:
                      (1) Verzeichnis von "msbuild.exe"
                      (2) Verzeichnis des ersten erstellten Projekts oder Projektmappe
 </target>
@@ -429,7 +438,7 @@ Beispiel:
                        -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
                        -logger:XMLLogger,C:\Loggers\MyLogger.dll;OutputAsHTML
 </source>
-        <target state="translated">  -logger:&lt;Protokollierung&gt;   Mithilfe dieser Protokollierung werden Ereignisse von MSBuild protokolliert. Um mehrere Protokollierungen anzugeben, 
+        <target state="translated">  -logger:&lt;Protokollierung&gt;   Mithilfe dieser Protokollierung werden Ereignisse von MSBuild protokolliert. Um mehrere Protokollierungen anzugeben,
                      wird jede Protokollierung gesondert angegeben.
                      Die Syntax f√ºr die &lt;Protokollierung&gt; lautet:
                        [&lt;Klasse&gt;,]&lt;Assembly&gt;[,&lt;Optionen&gt;][;&lt;Parameter&gt;]
@@ -438,7 +447,7 @@ Beispiel:
                      Die Syntax f√ºr die &lt;Protokollierungsassembly&gt; lautet:
                        {&lt;Assemblyname&gt;[,&lt;strong name&gt;] | &lt;Assemblydatei&gt;}
                      Die Protokollierungsoptionen geben an, wie MSBuild die Protokollierung erstellt.
-                     Die &lt;Protokollierungsparameter&gt; sind optional und werden genau 
+                     Die &lt;Protokollierungsparameter&gt; sind optional und werden genau
                      so an die Protokollierung √ºbergeben, wie sie eingegeben wurden. (Kurzform: -l)
                      Beispiele:
                        -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
@@ -644,11 +653,10 @@ Beispiel:
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
                      Durch Semikolons getrennte Liste von Eingabecachedateien, aus denen MSBuild
                      Buildergebnisse liest.
                      Durch Festlegen dieser Option werden auch isolierte Builds aktiviert (-isolate).
@@ -663,10 +671,10 @@ Beispiel:
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[Cachedatei]
+        <target state="needs-review-translation">  -outputResultsCache:[Cachedatei]
                      Ausgabecachedateien, in die MSBuild am Ende des Buildvorgangs die Inhalte
                      der zugeh√∂rigen Caches mit Buildergebnissen schreibt.
                      Durch Festlegung dieser Option werden au√üerdem isolierte Builds aktiviert (-isolate).
@@ -703,8 +711,8 @@ Beispiel:
                        -dl:MyLogger,C:\My.dll*ForwardingLogger,C:\Logger.dll
 </source>
         <target state="translated">  -distributedlogger:&lt;Zentrale Protokollierung&gt;*&lt;Weiterleitende Protokollierung&gt;
-                     Mithilfe dieser Protokollierung werden Ereignisse von MSBuild protokolliert, wobei an jeden Knoten eine andere 
-                     Protokollierungsinstanz angef√ºgt wird. Um mehrere Protokollierungen anzugeben, wird jede Protokollierung 
+                     Mithilfe dieser Protokollierung werden Ereignisse von MSBuild protokolliert, wobei an jeden Knoten eine andere
+                     Protokollierungsinstanz angef√ºgt wird. Um mehrere Protokollierungen anzugeben, wird jede Protokollierung
                      gesondert angegeben.
                      (Kurzform -dl)
                      Die Syntax f√ºr die &lt;Protokollierung&gt; lautet:
@@ -714,7 +722,7 @@ Beispiel:
                      Die Syntax f√ºr die &lt;Protokollierungsassembly&gt; lautet:
                        {&lt;Assemblyname&gt;[,&lt;strong name&gt;] | &lt;Assemblydatei&gt;}
                      Die Protokollierungsoptionen geben an, wie MSBuild die Protokollierung erstellt.
-                     Die &lt;Protokollierungsparameter&gt; sind optional und werden genau 
+                     Die &lt;Protokollierungsparameter&gt; sind optional und werden genau
                      so an die Protokollierung √ºbergeben, wie sie eingegeben wurden. (Kurzform: -l)
                      Beispiele:
                        -dl:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
@@ -739,8 +747,8 @@ Beispiel:
                        -ignoreProjectExtensions:.sln
     </source>
         <target state="translated">  -ignoreprojectextensions:&lt;Erweiterungen&gt;
-                     Liste der zu ignorierenden Erweiterungen, wenn die zu erstellende 
-                     Projektdatei ermittelt wird. Verwenden Sie ein Semikolon oder ein Komma, 
+                     Liste der zu ignorierenden Erweiterungen, wenn die zu erstellende
+                     Projektdatei ermittelt wird. Verwenden Sie ein Semikolon oder ein Komma,
                      um mehrere Erweiterungen voneinander zu trennen.
                      (Kurzform: -ignore)
                      Beispiel:
@@ -766,8 +774,8 @@ Beispiel:
    </source>
         <target state="translated">  -toolsversion:&lt;Version&gt;
                      Die Version des MSBuild-Toolsets (Aufgaben, Ziele usw.),
-                     die w√§hrend des Erstellens zu verwenden ist. Diese Version √ºberschreibt die 
-                     von einzelnen Projekten angegebenen Versionen. (Kurzform: 
+                     die w√§hrend des Erstellens zu verwenden ist. Diese Version √ºberschreibt die
+                     von einzelnen Projekten angegebenen Versionen. (Kurzform:
                      -tv)
                      Beispiel:
                        -toolsversion:3.5
@@ -826,14 +834,14 @@ Beispiel:
         <target state="translated">  -distributedFileLogger
                      Protokolliert die Erstellungsausgabe in mehrere Dateien, eine Protokolldatei
                      pro MSBuild-Knoten. Der anf√§ngliche Speicherort f√ºr diese Dateien ist
-                     das aktuelle Verzeichnis. Standardm√§√üig werden die Dateien 
+                     das aktuelle Verzeichnis. Standardm√§√üig werden die Dateien
                      "MSBuild&lt;Knoten-ID&gt;.log" benannt. Der Speicherort der Datei und
-                     andere Parameter f√ºr fileLogger k√∂nnen durch das Hinzuf√ºgen 
+                     andere Parameter f√ºr fileLogger k√∂nnen durch das Hinzuf√ºgen
                      des Schalters "-fileLoggerParameters" angegeben werden.
 
                      Wenn mithilfe des fileLoggerParameters-Parameters ein Protokolldateiname festgelegt wurde,
-                     verwendet die verteilte Protokollierung den Dateinamen als 
-                     Vorlage und f√ºgt die Knoten-ID an diesen Dateinamen an, 
+                     verwendet die verteilte Protokollierung den Dateinamen als
+                     Vorlage und f√ºgt die Knoten-ID an diesen Dateinamen an,
                      um f√ºr jeden Knoten eine Protokolldatei zu erstellen.
     </target>
         <note>
@@ -877,31 +885,31 @@ Beispiel:
     </source>
         <target state="translated">  -fileLoggerParameters[n]:&lt;Parameter&gt;
                      Gibt zus√§tzliche Parameter f√ºr Dateiprotokollierungen an.
-                     Dieser Schalter bedeutet, dass der entsprechende 
+                     Dieser Schalter bedeutet, dass der entsprechende
                      Schalter "-fileLogger[n]" ebenfalls vorhanden ist.
                      "n" (optional) kann eine Zahl von 1‚Äì9 sein.
-                     "-fileLoggerParameters" wird auch von verteilten 
+                     "-fileLoggerParameters" wird auch von verteilten
                      Dateiprotokollierungen verwendet (siehe Beschreibung zu "-distributedFileLogger").
                      (Kurzform: -flp[n])
                      Es sind dieselben Parameter wie f√ºr die Konsolenprotokollierung
                      verf√ºgbar. Einige zus√§tzliche Parameter:
-                        LogFile: Pfad der Protokolldatei, in die das 
+                        LogFile: Pfad der Protokolldatei, in die das
                             Buildprotokoll geschrieben wird.
-                        Append: Gibt an, ob das Buildprotokoll erweitert oder 
+                        Append: Gibt an, ob das Buildprotokoll erweitert oder
                             oder √ºberschrieben wird. Mit diesem Schalter
                             wird das Buildprotokoll an die Protokolldatei angef√ºgt;
-                            Ohne diesen Schalter wird der Inhalt 
-                            der vorhandenen Protokolldatei √ºberschrieben. 
+                            Ohne diesen Schalter wird der Inhalt
+                            der vorhandenen Protokolldatei √ºberschrieben.
                             Standardm√§√üig wird die Protokolldatei nicht erweitert.
-                        Encoding: Gibt die Codierung der Datei an, 
+                        Encoding: Gibt die Codierung der Datei an,
                             z. B. UTF-8, Unicode oder ASCII.
                      Die Standardeinstellung f√ºr "verbosity" ist "Detailed".
                      Beispiele:
                        -fileLoggerParameters:LogFile=MyLog.log;Append;
                                            Verbosity=diagnostic;Encoding=UTF-8
 
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum 
-                       -flp1:warningsonly;logfile=msbuild.wrn 
+                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
+                       -flp1:warningsonly;logfile=msbuild.wrn
                        -flp2:errorsonly;logfile=msbuild.err
     </target>
         <note>
@@ -927,7 +935,7 @@ Beispiel:
         <target state="translated">  -nodeReuse:&lt;Parameter&gt;
                      Aktiviert oder deaktiviert die Wiederverwendung von MSBuild-Knoten.
                      Die Parameter lauten:
-                     True: Knoten bleiben nach dem Abschluss der Erstellung 
+                     True: Knoten bleiben nach dem Abschluss der Erstellung
                      erhalten und werden bei folgenden Erstellungen wiederverwendet (Standardeinstellung).
                      False: Knoten bleiben nach dem Abschluss der Erstellung nicht erhalten.
                      (Kurzform: -nr)
@@ -1024,11 +1032,12 @@ Beispiel:
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Der Wert f√ºr das Isolieren von Projekten ist nicht g√ºltig. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Der Wert f√ºr das Isolieren von Projekten ist nicht g√ºltig. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index 061121dec63..bf8d89e1c84 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      Hace que MSBuild compile cada proyecto en aislamiento.
 
                      Este es un modo de MSBuild m√°s restrictivo ya que requiere
@@ -648,11 +657,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;archivoCach√©&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;archivoCach√©&gt;...
                      Lista de archivos de cach√© de entrada, separados por punto y coma, de la que MSBuild
                      leer√° los resultados de la compilaci√≥n.
                      Si se establece esta opci√≥n, se activan tambi√©n las compilaciones aisladas (-isolate).
@@ -667,10 +675,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[archivo-de-cach√©]
+        <target state="needs-review-translation">  -outputResultsCache:[archivo-de-cach√©]
                      Archivo de cach√© de salida donde MSBuild escribe
                      el contenido de las memorias cach√© de resultados
                      de compilaci√≥n cuando esta acaba.
@@ -748,8 +756,8 @@
                        -ignoreProjectExtensions:.sln
     </source>
         <target state="translated">  -ignoreProjectExtensions:&lt;extensiones&gt;
-                     Lista de extensiones que se omiten al determinar el 
-                     archivo del proyecto que se va a compilar. Use el car√°cter de 
+                     Lista de extensiones que se omiten al determinar el
+                     archivo del proyecto que se va a compilar. Use el car√°cter de
                      punto y coma o coma para separar varias extensiones.
                     (Forma corta: -ignore)
                      Ejemplo:
@@ -900,9 +908,9 @@
                             sobrescribir√° el archivo de registro. Si se establece el
                             modificador, se adjunta el registro de compilaci√≥n al archivo de registro;
                             Si no se especifica el modificador, se sobrescribe
-                            el contenido del archivo de registro existente. 
+                            el contenido del archivo de registro existente.
                             El valor predeterminado es adjuntar el archivo de registro.
-                        Encoding: especifica la codificaci√≥n del archivo, 
+                        Encoding: especifica la codificaci√≥n del archivo,
                             por ejemplo, UTF-8, Unicode o ASCII
                      El nivel de detalle predeterminado es Detailed.
                      Ejemplos:
@@ -1033,11 +1041,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: El valor de los proyectos aislados no es v√°lido. {0}.</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: El valor de los proyectos aislados no es v√°lido. {0}.</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index cbe9a27f313..572e704317d 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      Force MSBuild √† g√©n√©rer chaque projet de mani√®re isol√©e.
 
                      Ce mode de MSBuild est plus restrictif car il n√©cessite
@@ -644,11 +653,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;fichierCache&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;fichierCache&gt;...
          Liste de fichiers cache d'entr√©e s√©par√©s par des points-virgules, √†
          partir desquels MSBuild va lire les r√©sultats de la build.
          Ce param√®tre active √©galement les builds isol√©es (-isolate).
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      Fichier cache de sortie dans lequel MSBuild √©crit le contenu de
                      ses caches de r√©sultats de la build √† la fin de la build.
                      Ce param√®tre active √©galement les builds isol√©es (-isolate).
@@ -1024,11 +1032,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: La valeur d‚Äôisolation des projets n'est pas valide. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: La valeur d‚Äôisolation des projets n'est pas valide. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
@@ -1752,7 +1761,7 @@ fois plus petit que le journal
         <target state="translated">  -profileEvaluation:&lt;fichier&gt;
          Profile l'√©valuation MSBuild et √©crit le r√©sultat
          dans le fichier sp√©cifi√©. Si l'extension du fichier sp√©cifi√©
-         est '.md', le r√©sultat est g√©n√©r√© au format Markdown. 
+         est '.md', le r√©sultat est g√©n√©r√© au format Markdown.
          Sinon, un fichier de valeurs s√©par√©es par des tabulations est g√©n√©r√©.
     </target>
         <note />
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index c222fdf2e2e..d97eee21a68 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -131,9 +131,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -142,9 +151,9 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      Fa in modo che MSBuild compili ogni progetto in modalit√†
-                     isolamento. 
+                     isolamento.
 
                      Si tratta di una modalit√† pi√π restrittiva di
                      MSBuild perch√© richiede che il grafico del progetto sia
@@ -348,7 +357,7 @@ Esempio:
                      separatamente.
 
                      Qualsiasi file di risposta denominato "msbuild.rsp" viene usato
-                     automaticamente dai percorsi seguenti: 
+                     automaticamente dai percorsi seguenti:
                      (1) la directory di msbuild.exe
                      (2) la directory della prima compilazione di soluzione o progetto
 </target>
@@ -654,11 +663,10 @@ Esempio:
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;fileCache&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;fileCache&gt;...
                      Elenco di file di cache di input delimitati da punto e virgola da cui MSBuild
                      legger√† i risultati della compilazione.
                      Se si imposta questa opzione, si attivano anche le compilazioni isolate (-isolate).
@@ -673,10 +681,10 @@ Esempio:
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[fileCache]
+        <target state="needs-review-translation">  -outputResultsCache:[fileCache]
                      File di cache di output in cui MSBuild scriver√† il contenuto delle
                      cache dei risultati della compilazione al termine della compilazione.
                      Se si imposta questa opzione, si attivano anche le compilazioni isolate (-isolate).
@@ -1038,11 +1046,12 @@ Esempio:
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: il valore di isolateProjects non √® valido. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: il valore di isolateProjects non √® valido. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index b43a24ea5b0..c590ae60203 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      MSBuild „ÅØ„ÄÅÂêÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÂàÜÈõ¢„Åó„Å¶„Éì„É´„Éâ„Åó„Åæ„Åô„ÄÇ
 
                      „Åì„Çå„ÅØ MSBuild „ÅÆ„Çà„ÇäÂà∂ÈôêÁöÑ„Å™„É¢„Éº„Éâ„Åß„Åô„ÄÇ
@@ -205,7 +214,7 @@
     </source>
         <target state="translated">  -targets[:file]
                      ‰ΩøÁî®ÂèØËÉΩ„Å™„Çø„Éº„Ç≤„ÉÉ„Éà„ÅÆ‰∏ÄË¶ß„Çí„ÄÅÂÆüÈöõ„ÅÆ„Éì„É´„ÉâÂá¶ÁêÜ„Çí
-                     ÂÆüË°å„Åõ„Åö„Å´Âá∫Âäõ„Åó„Åæ„Åô„ÄÇÊó¢ÂÆö„Åß„ÅØ„ÄÅÂá∫Âäõ„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´ 
+                     ÂÆüË°å„Åõ„Åö„Å´Âá∫Âäõ„Åó„Åæ„Åô„ÄÇÊó¢ÂÆö„Åß„ÅØ„ÄÅÂá∫Âäõ„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´
                      „Ç¶„Ç£„É≥„Éâ„Ç¶„Å´Êõ∏„ÅçËæº„Åæ„Çå„Åæ„Åô„ÄÇÂá∫Âäõ„Éï„Ç°„Ç§„É´„Å∏„ÅÆ„Éë„Çπ„Çí
                      ÊåáÂÆö„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ‰ª£„Çè„Çä„Å´„Åù„ÅÆ„Éï„Ç°„Ç§„É´„Åå‰ΩøÁî®„Åï„Çå„Åæ„Åô„ÄÇ
                      (Áü≠„ÅÑÂΩ¢Âºè:-ts)
@@ -644,11 +653,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
                      MSBuild „Åå„Éì„É´„ÉâÁµêÊûú„ÇíË™≠„ÅøËæº„ÇÄ„ÄÅÂÖ•Âäõ„Ç≠„É£„ÉÉ„Ç∑„É• „Éï„Ç°„Ç§„É´„ÅÆ
                      „Çª„Éü„Ç≥„É≠„É≥„ÅßÂå∫Âàá„Çâ„Çå„Åü„É™„Çπ„Éà„ÄÇ
                      „Åì„Çå„ÇíË®≠ÂÆö„Åô„Çã„Å®„ÄÅÂàÜÈõ¢„Åï„Çå„Åü„Éì„É´„Éâ (-isolate) „ÇÇÊúâÂäπ„Å´„Å™„Çä„Åæ„Åô„ÄÇ
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      MSBuild „Åå„Éì„É´„Éâ„ÅÆÊúÄÂæå„Å´„Éì„É´„ÉâÁµêÊûú„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ
                      ÂÜÖÂÆπ„ÇíÊõ∏„ÅçËæº„ÇÄÂá∫Âäõ„Ç≠„É£„ÉÉ„Ç∑„É• „Éï„Ç°„Ç§„É´„ÄÇ
                      Ë®≠ÂÆö„Åô„Çã„Å®„ÄÅÂàÜÈõ¢„Åï„Çå„Åü„Éì„É´„Éâ„ÇÇÊúâÂäπ„Å´„Å™„Çä„Åæ„Åô (-isolate)„ÄÇ
@@ -1024,11 +1032,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Isolate projects ÂÄ§„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ{0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Isolate projects ÂÄ§„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ{0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
@@ -1691,7 +1700,7 @@
                      (Short form: -r)
     </source>
         <target state="translated">  -restore[:True|False]
-                     ‰ªñ„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„Çí„Éì„É´„Éâ„Åô„ÇãÂâç„Å´ Restore 
+                     ‰ªñ„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„Çí„Éì„É´„Éâ„Åô„ÇãÂâç„Å´ Restore
                      „Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„ÇíÂÆüË°å„Åó„ÄÅ„Åì„Çå„Çâ„ÅÆ„Çø„Éº„Ç≤„ÉÉ„Éà„ÅÆ„Éì„É´„Éâ„Åå
                      ÊúÄÊñ∞„ÅÆÂæ©ÂÖÉ„Éì„É´„Éâ „É≠„Ç∏„ÉÉ„ÇØ„Çí‰ΩøÁî®„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åô„ÄÇ
                      „Åì„Çå„ÅØ„ÄÅ„Éë„ÉÉ„Ç±„Éº„Ç∏ „ÉÑ„É™„Éº„Åß„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Éì„É´„Éâ
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index 212687577a1..e136d34da21 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -116,12 +116,12 @@
                      value that comes from a response file.
     </source>
         <target state="translated">  -interactive[:True|False]
-                     ÎπåÎìúÏùò ÏûëÏóÖÏù¥ ÏÇ¨Ïö©ÏûêÏôÄ ÏÉÅÌò∏ ÏûëÏö©Ìï† Ïàò 
-                     ÏûàÏùåÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. ÏÉÅÌò∏ ÏûëÏö©Ïù¥ ÌïÑÏöîÌïòÏßÄ 
-                     ÏïäÏùÄ ÏûêÎèôÌôîÎêú ÏãúÎÇòÎ¶¨Ïò§ÏóêÏÑúÎäî Ïù¥ Ïù∏ÏàòÎ•º 
+                     ÎπåÎìúÏùò ÏûëÏóÖÏù¥ ÏÇ¨Ïö©ÏûêÏôÄ ÏÉÅÌò∏ ÏûëÏö©Ìï† Ïàò
+                     ÏûàÏùåÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. ÏÉÅÌò∏ ÏûëÏö©Ïù¥ ÌïÑÏöîÌïòÏßÄ
+                     ÏïäÏùÄ ÏûêÎèôÌôîÎêú ÏãúÎÇòÎ¶¨Ïò§ÏóêÏÑúÎäî Ïù¥ Ïù∏ÏàòÎ•º
                      ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
                      -interactiveÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÏùÄ -interactive:trueÎ•º
-                     ÏßÄÏ†ïÌïòÎäî Í≤ÉÍ≥º Í∞ôÏäµÎãàÎã§. Îß§Í∞ú Î≥ÄÏàòÎ•º 
+                     ÏßÄÏ†ïÌïòÎäî Í≤ÉÍ≥º Í∞ôÏäµÎãàÎã§. Îß§Í∞ú Î≥ÄÏàòÎ•º
                      ÏÇ¨Ïö©ÌïòÏó¨ ÏßÄÏãú ÌååÏùºÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Í∞íÏùÑ Ïû¨Ï†ïÏùòÌï©ÎãàÎã§.
     </target>
         <note>
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,12 +150,12 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      MSBuildÍ∞Ä Í≤©Î¶¨ Î™®ÎìúÏóêÏÑú Í∞Å ÌîÑÎ°úÏ†ùÌä∏Î•º ÎπåÎìúÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
 
-                     Ïù¥ Î™®ÎìúÎäî ÌîÑÎ°úÏ†ùÌä∏ Í∑∏ÎûòÌîÑÍ∞Ä ÌèâÍ∞Ä ÏãúÍ∞ÑÏóê Ï†ïÏ†ÅÏúºÎ°ú 
-                     Í≤ÄÏÉâ Í∞ÄÎä•Ìï¥Ïïº ÌïòÎØÄÎ°ú Îçî Ï†úÌïúÏ†ÅÏù∏ MSBuild Î™®ÎìúÏù¥ÎÇò, 
-                     ÎåÄÍ∑úÎ™® ÌîÑÎ°úÏ†ùÌä∏Î•º ÎπåÎìúÌï† Í≤ΩÏö∞ ÏòàÏïΩÏùÑ Í∞úÏÑ†ÌïòÍ≥† 
+                     Ïù¥ Î™®ÎìúÎäî ÌîÑÎ°úÏ†ùÌä∏ Í∑∏ÎûòÌîÑÍ∞Ä ÌèâÍ∞Ä ÏãúÍ∞ÑÏóê Ï†ïÏ†ÅÏúºÎ°ú
+                     Í≤ÄÏÉâ Í∞ÄÎä•Ìï¥Ïïº ÌïòÎØÄÎ°ú Îçî Ï†úÌïúÏ†ÅÏù∏ MSBuild Î™®ÎìúÏù¥ÎÇò,
+                     ÎåÄÍ∑úÎ™® ÌîÑÎ°úÏ†ùÌä∏Î•º ÎπåÎìúÌï† Í≤ΩÏö∞ ÏòàÏïΩÏùÑ Í∞úÏÑ†ÌïòÍ≥†
                      Î©îÎ™®Î¶¨ Ïò§Î≤ÑÌó§ÎìúÎ•º Ï§ÑÏùº Ïàò ÏûàÏäµÎãàÎã§.
                      (ÏïΩÏãù: -isolate)
 
@@ -173,9 +182,9 @@
         <target state="translated">  -graphBuild[:True|False]
                      MSBuildÍ∞Ä ÌîÑÎ°úÏ†ùÌä∏ Í∑∏ÎûòÌîÑÎ•º ÏÉùÏÑ± Î∞è ÎπåÎìúÌïòÎèÑÎ°ù Ìï©ÎãàÎã§.
 
-                     Í∑∏ÎûòÌîÑ ÏÉùÏÑ±ÏóêÎäî Ï¢ÖÏÜçÏÑ±ÏùÑ ÌòïÏÑ±ÌïòÍ∏∞ ÏúÑÌïú ÌîÑÎ°úÏ†ùÌä∏ 
-                     Ï∞∏Ï°∞ ÏãùÎ≥ÑÏù¥ Í¥ÄÎ†®Îê©ÎãàÎã§. Ìï¥Îãπ Í∑∏ÎûòÌîÑ ÎπåÎìúÏóêÎäî ÌîÑÎ°úÏ†ùÌä∏ 
-                     Ï∞∏Ï°∞Î•º Ï∞∏Ï°∞ÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏ Ï†ÑÏóê ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Ï°∞Î•º 
+                     Í∑∏ÎûòÌîÑ ÏÉùÏÑ±ÏóêÎäî Ï¢ÖÏÜçÏÑ±ÏùÑ ÌòïÏÑ±ÌïòÍ∏∞ ÏúÑÌïú ÌîÑÎ°úÏ†ùÌä∏
+                     Ï∞∏Ï°∞ ÏãùÎ≥ÑÏù¥ Í¥ÄÎ†®Îê©ÎãàÎã§. Ìï¥Îãπ Í∑∏ÎûòÌîÑ ÎπåÎìúÏóêÎäî ÌîÑÎ°úÏ†ùÌä∏
+                     Ï∞∏Ï°∞Î•º Ï∞∏Ï°∞ÌïòÎäî ÌîÑÎ°úÏ†ùÌä∏ Ï†ÑÏóê ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Ï°∞Î•º
                      ÎπåÎìúÌïòÎäî ÏãúÎèÑÍ∞Ä Í¥ÄÎ†®ÎêòÎ©∞, Ïù¥Îäî Í∏∞Ï°¥ MSBuild
                      ÏòàÏïΩÍ≥º Îã§Î¶ÖÎãàÎã§.
                      (ÏïΩÏãù: -graph)
@@ -229,7 +238,7 @@
         <target state="translated">  -lowPriority[:True|False]
                      MSBuildÍ∞Ä ÎÇÆÏùÄ ÌîÑÎ°úÏÑ∏Ïä§ Ïö∞ÏÑ† ÏàúÏúÑÎ°ú Ïã§ÌñâÎê©ÎãàÎã§.
 
-                     -lowPriorityÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÏùÄ 
+                     -lowPriorityÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÏùÄ
                      -lowPriority:TrueÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÍ≥º Í∞ôÏäµÎãàÎã§.
                      (ÏïΩÏãù: -low)
     </target>
@@ -333,11 +342,11 @@
                      (1) the directory of msbuild.exe
                      (2) the directory of the first project or solution built
 </source>
-        <target state="translated">  @&lt;file&gt;            ÌÖçÏä§Ìä∏ ÌååÏùºÏóêÏÑú Î™ÖÎ†πÏ§Ñ ÏÑ§Ï†ïÏùÑ ÏÇΩÏûÖÌï©ÎãàÎã§. 
-                     Ïó¨Îü¨ ÏßÄÏãú ÌååÏùºÏùÑ ÏßÄÏ†ïÌïòÎ†§Î©¥ Í∞Å ÏßÄÏãú ÌååÏùºÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú 
+        <target state="translated">  @&lt;file&gt;            ÌÖçÏä§Ìä∏ ÌååÏùºÏóêÏÑú Î™ÖÎ†πÏ§Ñ ÏÑ§Ï†ïÏùÑ ÏÇΩÏûÖÌï©ÎãàÎã§.
+                     Ïó¨Îü¨ ÏßÄÏãú ÌååÏùºÏùÑ ÏßÄÏ†ïÌïòÎ†§Î©¥ Í∞Å ÏßÄÏãú ÌååÏùºÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú
                      ÏßÄÏ†ïÌï©ÎãàÎã§.
 
-                     "msbuild.rsp"ÎùºÎäî ÏßÄÏãú ÌååÏùºÏù¥ Îã§Ïùå ÏúÑÏπòÏóêÏÑú 
+                     "msbuild.rsp"ÎùºÎäî ÏßÄÏãú ÌååÏùºÏù¥ Îã§Ïùå ÏúÑÏπòÏóêÏÑú
                      ÏûêÎèôÏúºÎ°ú ÏÇ¨Ïö©Îê©ÎãàÎã§.
                      (1) msbuild.exeÏùò ÎîîÎ†âÌÑ∞Î¶¨
                      (2) ÎπåÎìúÎêú Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ ÎòêÎäî ÏÜîÎ£®ÏÖòÏùò ÎîîÎ†âÌÑ∞Î¶¨
@@ -374,8 +383,8 @@
                      Example:
                        -target:Resources;Compile
 </source>
-        <target state="translated">  -target:&lt;targets&gt;  Ïù¥ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÎåÄÏÉÅÏùÑ ÎπåÎìúÌï©ÎãàÎã§. ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ 
-                     Ïó¨Îü¨ ÎåÄÏÉÅÏùÑ Íµ¨Î∂ÑÌïòÍ±∞ÎÇò, Í∞Å ÎåÄÏÉÅÏùÑ 
+        <target state="translated">  -target:&lt;targets&gt;  Ïù¥ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÎåÄÏÉÅÏùÑ ÎπåÎìúÌï©ÎãàÎã§. ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©ÌïòÏó¨
+                     Ïó¨Îü¨ ÎåÄÏÉÅÏùÑ Íµ¨Î∂ÑÌïòÍ±∞ÎÇò, Í∞Å ÎåÄÏÉÅÏùÑ
                      Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏßÄÏ†ïÌï©ÎãàÎã§. (ÏïΩÏãù: -t)
                      Ïòà:
                        -target:Resources;Compile
@@ -397,9 +406,9 @@
                      Example:
                        -property:WarningLevel=2;OutDir=bin\Debug\
 </source>
-        <target state="translated">  -property:&lt;n&gt;=&lt;v&gt;  ÌîÑÎ°úÏ†ùÌä∏ ÏàòÏ§Ä ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌïòÍ±∞ÎÇò Ïû¨Ï†ïÏùòÌï©ÎãàÎã§. &lt;n&gt;ÏùÄ 
-                     ÏÜçÏÑ± Ïù¥Î¶ÑÏù¥Í≥† &lt;v&gt;Îäî ÏÜçÏÑ± Í∞íÏûÖÎãàÎã§. 
-                     ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïó¨Îü¨ ÏÜçÏÑ±ÏùÑ Íµ¨Î∂ÑÌïòÍ±∞ÎÇò, 
+        <target state="translated">  -property:&lt;n&gt;=&lt;v&gt;  ÌîÑÎ°úÏ†ùÌä∏ ÏàòÏ§Ä ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌïòÍ±∞ÎÇò Ïû¨Ï†ïÏùòÌï©ÎãàÎã§. &lt;n&gt;ÏùÄ
+                     ÏÜçÏÑ± Ïù¥Î¶ÑÏù¥Í≥† &lt;v&gt;Îäî ÏÜçÏÑ± Í∞íÏûÖÎãàÎã§.
+                     ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïó¨Îü¨ ÏÜçÏÑ±ÏùÑ Íµ¨Î∂ÑÌïòÍ±∞ÎÇò,
                      Í∞Å ÏÜçÏÑ±ÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏßÄÏ†ïÌï©ÎãàÎã§. (ÏïΩÏãù: -p)
                      Ïòà:
                        -property:WarningLevel=2;OutDir=bin\Debug\
@@ -584,10 +593,10 @@
                      Example:
                        -validate:MyExtendedBuildSchema.xsd
 </source>
-        <target state="translated">  -validate          Í∏∞Î≥∏ Ïä§ÌÇ§ÎßàÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏Ïùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏÇ¨Ìï©ÎãàÎã§. 
+        <target state="translated">  -validate          Í∏∞Î≥∏ Ïä§ÌÇ§ÎßàÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏Ïùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏÇ¨Ìï©ÎãàÎã§.
                      (ÏïΩÏãù: -val)
 
-  -validate:&lt;schema&gt; ÏßÄÏ†ïÎêú Ïä§ÌÇ§ÎßàÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏Ïùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏÇ¨Ìï©ÎãàÎã§. 
+  -validate:&lt;schema&gt; ÏßÄÏ†ïÎêú Ïä§ÌÇ§ÎßàÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÌîÑÎ°úÏ†ùÌä∏Ïùò Ïú†Ìö®ÏÑ±ÏùÑ Í≤ÄÏÇ¨Ìï©ÎãàÎã§.
                      (ÏïΩÏãù: -val)
                      Ïòà:
                        -validate:MyExtendedBuildSchema.xsd
@@ -644,12 +653,11 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
-                     MSBuildÍ∞Ä ÎπåÎìú Í≤∞Í≥ºÎ•º ÏùΩÎäî ÏÜåÏä§ ÏûÖÎ†• Ï∫êÏãú ÌååÏùºÏùò 
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
+                     MSBuildÍ∞Ä ÎπåÎìú Í≤∞Í≥ºÎ•º ÏùΩÎäî ÏÜåÏä§ ÏûÖÎ†• Ï∫êÏãú ÌååÏùºÏùò
                      ÏÑ∏ÎØ∏ÏΩúÎ°†ÏúºÎ°ú Íµ¨Î∂ÑÎêú Î™©Î°ùÏûÖÎãàÎã§.
                      Ïù¥ Ïä§ÏúÑÏπòÎ•º ÏÑ§Ï†ïÌïòÎ©¥ Í≤©Î¶¨Îêú ÎπåÎìú(-isolate)ÎèÑ ÏºúÏßëÎãàÎã§.
                      (ÏïΩÏãù: -irc)
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      MSBuildÏóêÏÑú ÎπåÎìú ÎßàÏßÄÎßâÏóê ÎπåÎìú Í≤∞Í≥º Ï∫êÏãúÏùò
                      ÏΩòÌÖêÏ∏†Î•º Ïì∞Îäî Ï∂úÎ†• Ï∫êÏãú ÌååÏùºÏûÖÎãàÎã§.
                      ÏÑ§Ï†ïÌïòÎ©¥ Í≤©Î¶¨Îêú ÎπåÎìúÏóêÏÑúÎèÑ ÏÑ§Ï†ïÎê©ÎãàÎã§(-isolate).
@@ -739,8 +747,8 @@
                        -ignoreProjectExtensions:.sln
     </source>
         <target state="translated">  -ignoreProjectExtensions:&lt;extensions&gt;
-                     ÎπåÎìúÌï† ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùºÏùÑ Í≤∞Ï†ïÌï† Îïå 
-                     Î¨¥ÏãúÌï† ÌôïÏû• Î™©Î°ùÏûÖÎãàÎã§. Ïó¨Îü¨ ÌôïÏû•ÏùÑ Íµ¨Î∂ÑÌïòÎäî Îç∞Îäî 
+                     ÎπåÎìúÌï† ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùºÏùÑ Í≤∞Ï†ïÌï† Îïå
+                     Î¨¥ÏãúÌï† ÌôïÏû• Î™©Î°ùÏûÖÎãàÎã§. Ïó¨Îü¨ ÌôïÏû•ÏùÑ Íµ¨Î∂ÑÌïòÎäî Îç∞Îäî
                      ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
                      (ÏïΩÏãù: -ignore)
                      Ïòà:
@@ -766,7 +774,7 @@
    </source>
         <target state="translated">  -toolsVersion:&lt;version&gt;
                      ÎπåÎìú Ï§ëÏóê ÏÇ¨Ïö©Ìï† MSBuild ÎèÑÍµ¨ ÏÑ∏Ìä∏(ÏûëÏóÖ, ÎåÄÏÉÅ Îì±)Ïùò Î≤ÑÏ†ÑÏûÖÎãàÎã§.
-                     Ïù¥ Î≤ÑÏ†ÑÏùÄ Í∞úÎ≥Ñ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÏßÄÏ†ïÌïú Î≤ÑÏ†ÑÏùÑ 
+                     Ïù¥ Î≤ÑÏ†ÑÏùÄ Í∞úÎ≥Ñ ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÏßÄÏ†ïÌïú Î≤ÑÏ†ÑÏùÑ
                      Ïû¨Ï†ïÏùòÌï©ÎãàÎã§. (ÏïΩÏãù:
                      -tv)
                      Ïòà:
@@ -795,9 +803,9 @@
                      ÌååÏùºÏùÄ ÌòÑÏû¨ ÎîîÎ†âÌÑ∞Î¶¨Ïóê ÏûàÍ≥†
                      "msbuild[n].log"Î°ú Ïù¥Î¶ÑÏù¥ ÏßÄÏ†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§. Î™®Îì† ÎÖ∏ÎìúÏùò Ïù¥Î≤§Ìä∏Îäî Îã®Ïùº Î°úÍ∑∏Î°ú
                      Í≤∞Ìï©Îê©ÎãàÎã§. ÌååÏùºÏùò ÏúÑÏπò Î∞è fileLoggerÏùò
-                     Îã§Î•∏ Îß§Í∞ú Î≥ÄÏàòÎäî "-fileLoggerParameters[n]" Ïä§ÏúÑÏπòÎ•º 
+                     Îã§Î•∏ Îß§Í∞ú Î≥ÄÏàòÎäî "-fileLoggerParameters[n]" Ïä§ÏúÑÏπòÎ•º
                      Ï∂îÍ∞ÄÌïòÏó¨ ÏßÄÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
-                     "n"ÏùÄ 1-9 ÏÇ¨Ïù¥Ïùò Ïà´ÏûêÏùº Ïàò ÏûàÏúºÎ©∞ ÏµúÎåÄ 10Í∞úÏùò 
+                     "n"ÏùÄ 1-9 ÏÇ¨Ïù¥Ïùò Ïà´ÏûêÏùº Ïàò ÏûàÏúºÎ©∞ ÏµúÎåÄ 10Í∞úÏùò
                      ÌååÏùº Î°úÍ±∞Í∞Ä Ï∂îÍ∞ÄÎê† Ïàò ÏûàÏäµÎãàÎã§. (ÏïΩÏãù: -fl[n])
     </target>
         <note>
@@ -824,16 +832,16 @@
                      create a log file for each node.
     </source>
         <target state="translated">  -distributedFileLogger
-                     MSBuild ÎÖ∏ÎìúÎãπ Î°úÍ∑∏ ÌååÏùº ÌïòÎÇòÏî©, Ïó¨Îü¨ Î°úÍ∑∏ ÌååÏùºÏóê ÎπåÎìú Ï∂úÎ†•ÏùÑ 
-                     Í∏∞Î°ùÌï©ÎãàÎã§. Ìï¥Îãπ ÌååÏùºÏùò Ï¥àÍ∏∞ ÏúÑÏπòÎäî 
-                     ÌòÑÏû¨ ÎîîÎ†âÌÑ∞Î¶¨ÏûÖÎãàÎã§. Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ìï¥Îãπ ÌååÏùºÏùÑ 
-                     "MSBuild&lt;nodeid&gt;.log"ÎùºÍ≥† Ìï©ÎãàÎã§. ÌååÏùº ÏúÑÏπò Î∞è fileLoggerÏùò Í∏∞ÌÉÄ Îß§Í∞ú Î≥ÄÏàòÎäî 
-                     "-fileLoggerParameters" Ïä§ÏúÑÏπòÎ•º Ï∂îÍ∞ÄÌï¥ÏÑú 
+                     MSBuild ÎÖ∏ÎìúÎãπ Î°úÍ∑∏ ÌååÏùº ÌïòÎÇòÏî©, Ïó¨Îü¨ Î°úÍ∑∏ ÌååÏùºÏóê ÎπåÎìú Ï∂úÎ†•ÏùÑ
+                     Í∏∞Î°ùÌï©ÎãàÎã§. Ìï¥Îãπ ÌååÏùºÏùò Ï¥àÍ∏∞ ÏúÑÏπòÎäî
+                     ÌòÑÏû¨ ÎîîÎ†âÌÑ∞Î¶¨ÏûÖÎãàÎã§. Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ìï¥Îãπ ÌååÏùºÏùÑ
+                     "MSBuild&lt;nodeid&gt;.log"ÎùºÍ≥† Ìï©ÎãàÎã§. ÌååÏùº ÏúÑÏπò Î∞è fileLoggerÏùò Í∏∞ÌÉÄ Îß§Í∞ú Î≥ÄÏàòÎäî
+                     "-fileLoggerParameters" Ïä§ÏúÑÏπòÎ•º Ï∂îÍ∞ÄÌï¥ÏÑú
                      ÏßÄÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
 
-                     Î°úÍ∑∏ ÌååÏùº Ïù¥Î¶ÑÏù¥ fileLoggerParameters Ïä§ÏúÑÏπòÎ•º ÌÜµÌï¥ ÏÑ§Ï†ïÎêòÎ©¥ 
-                     Î∞∞Ìè¨Îêú Î°úÍ±∞Í∞Ä fileNameÏùÑ ÌÖúÌîåÎ¶øÏúºÎ°ú ÏÇ¨Ïö©ÌïòÍ≥† 
-                     ÎÖ∏Îìú IDÎ•º Ïù¥ fileNameÏóê Ï∂îÍ∞ÄÌïòÏó¨ 
+                     Î°úÍ∑∏ ÌååÏùº Ïù¥Î¶ÑÏù¥ fileLoggerParameters Ïä§ÏúÑÏπòÎ•º ÌÜµÌï¥ ÏÑ§Ï†ïÎêòÎ©¥
+                     Î∞∞Ìè¨Îêú Î°úÍ±∞Í∞Ä fileNameÏùÑ ÌÖúÌîåÎ¶øÏúºÎ°ú ÏÇ¨Ïö©ÌïòÍ≥†
+                     ÎÖ∏Îìú IDÎ•º Ïù¥ fileNameÏóê Ï∂îÍ∞ÄÌïòÏó¨
                      Í∞Å ÎÖ∏ÎìúÏùò Î°úÍ∑∏ ÌååÏùºÏùÑ ÎßåÎì≠ÎãàÎã§.
     </target>
         <note>
@@ -877,20 +885,20 @@
     </source>
         <target state="translated">  -fileLoggerParameters[n]:&lt;parameters&gt;
                      ÌååÏùº Î°úÍ±∞Ïùò Ï∂îÍ∞Ä Îß§Í∞ú Î≥ÄÏàòÎ•º Ï†úÍ≥µÌï©ÎãàÎã§.
-                     Ïù¥ Ïä§ÏúÑÏπòÍ∞Ä ÏûàÎã§Îäî Í≤ÉÏùÄ 
+                     Ïù¥ Ïä§ÏúÑÏπòÍ∞Ä ÏûàÎã§Îäî Í≤ÉÏùÄ
                      Ìï¥Îãπ fileLogger[n] Ïä§ÏúÑÏπòÎ•º ÏùòÎØ∏Ìï©ÎãàÎã§.
                      "n"(ÏûàÎäî Í≤ΩÏö∞)ÏùÄ 1~9Ïùò Ïà´ÏûêÏùº Ïàò ÏûàÏäµÎãàÎã§.
-                     -fileLoggerParametersÎäî Î∞∞Ìè¨Îêú ÌååÏùº Î°úÍ±∞ÏóêÏÑúÎèÑ 
+                     -fileLoggerParametersÎäî Î∞∞Ìè¨Îêú ÌååÏùº Î°úÍ±∞ÏóêÏÑúÎèÑ
                      ÏÇ¨Ïö©Îê©ÎãàÎã§. -distributedFileLoggerÏóê ÎåÄÌïú ÏÑ§Î™ÖÏùÑ Ï∞∏Ï°∞ÌïòÏÑ∏Ïöî.
                      (ÏïΩÏãù: -flp[n])
                      ÏΩòÏÜî Î°úÍ±∞Ïö©ÏúºÎ°ú ÎÇòÏó¥Îêú ÎèôÏùºÌïú Îß§Í∞ú Î≥ÄÏàòÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                      Îã§ÏùåÍ≥º Í∞ôÏùÄ Î™á Í∞ÄÏßÄ Ï∂îÍ∞Ä Îß§Í∞ú Î≥ÄÏàòÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
-                        LogFile--ÎπåÎìú Î°úÍ∑∏Í∞Ä Í∏∞Î°ùÎêòÎäî 
+                        LogFile--ÎπåÎìú Î°úÍ∑∏Í∞Ä Í∏∞Î°ùÎêòÎäî
                             Î°úÍ∑∏ ÌååÏùºÏùò Í≤ΩÎ°úÏûÖÎãàÎã§.
-                        Append--ÎπåÎìú Î°úÍ∑∏Í∞Ä Î°úÍ∑∏ ÌååÏùºÏóê Ï∂îÍ∞ÄÎêòÎäîÏßÄ, 
-                            ÏïÑÎãàÎ©¥ Î°úÍ∑∏ ÌååÏùºÏùÑ ÎçÆÏñ¥Ïì∞ÎäîÏßÄ Ïó¨Î∂ÄÎ•º Í≤∞Ï†ïÌï©ÎãàÎã§. 
+                        Append--ÎπåÎìú Î°úÍ∑∏Í∞Ä Î°úÍ∑∏ ÌååÏùºÏóê Ï∂îÍ∞ÄÎêòÎäîÏßÄ,
+                            ÏïÑÎãàÎ©¥ Î°úÍ∑∏ ÌååÏùºÏùÑ ÎçÆÏñ¥Ïì∞ÎäîÏßÄ Ïó¨Î∂ÄÎ•º Í≤∞Ï†ïÌï©ÎãàÎã§.
                             Ïä§ÏúÑÏπòÎ•º ÏÑ§Ï†ïÌïòÎ©¥ ÎπåÎìú Î°úÍ∑∏Í∞Ä Î°úÍ∑∏ ÌååÏùºÏóê Ï∂îÍ∞ÄÎê©ÎãàÎã§.
-                            Ïä§ÏúÑÏπòÎ•º ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏúºÎ©¥ Í∏∞Ï°¥ Î°úÍ∑∏ ÌååÏùºÏùò 
+                            Ïä§ÏúÑÏπòÎ•º ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏúºÎ©¥ Í∏∞Ï°¥ Î°úÍ∑∏ ÌååÏùºÏùò
                             ÏΩòÌÖêÏ∏†Î•º ÎçÆÏñ¥ÏîÅÎãàÎã§.
                             Í∏∞Î≥∏Í∞íÏùÄ Î°úÍ∑∏ ÌååÏùºÏóê Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÎäî Í≤ÉÏûÖÎãàÎã§.
                         Encoding--ÌååÏùºÏùò Ïù∏ÏΩîÎî©ÏùÑ ÏßÄÏ†ïÌï©ÎãàÎã§
@@ -927,7 +935,7 @@
         <target state="translated">  -nodeReuse:&lt;parameters&gt;
                      MSBuild ÎÖ∏ÎìúÎ•º Îã§Ïãú ÏÇ¨Ïö©ÌïòÍ±∞ÎÇò Îã§Ïãú ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ïÌï©ÎãàÎã§.
                      Îß§Í∞ú Î≥ÄÏàòÎäî Îã§ÏùåÍ∞Ä Í∞ôÏäµÎãàÎã§.
-                     True --ÎπåÎìú ÏôÑÎ£å ÌõÑ ÎÖ∏ÎìúÍ∞Ä Ïú†ÏßÄÎêòÍ≥† 
+                     True --ÎπåÎìú ÏôÑÎ£å ÌõÑ ÎÖ∏ÎìúÍ∞Ä Ïú†ÏßÄÎêòÍ≥†
                             ÌõÑÏÜç ÎπåÎìúÏóêÏÑú Îã§Ïãú ÏÇ¨Ïö©Îê©ÎãàÎã§(Í∏∞Î≥∏Í∞í).
                      False--ÎπåÎìú ÏôÑÎ£å ÌõÑ ÎÖ∏ÎìúÍ∞Ä Ïú†ÏßÄÎêòÏßÄ ÏïäÏäµÎãàÎã§.
                      (ÏïΩÏãù: -nr)
@@ -1024,11 +1032,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: ÌîÑÎ°úÏ†ùÌä∏ Í≤©Î¶¨ Í∞íÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: ÌîÑÎ°úÏ†ùÌä∏ Í≤©Î¶¨ Í∞íÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
@@ -1692,10 +1701,10 @@
     </source>
         <target state="translated">  -restore[:True|False]
                      Îã§Î•∏ ÎåÄÏÉÅÏùÑ ÎπåÎìúÌïòÍ∏∞ Ï†ÑÏóê RestoreÎùºÎäî ÎåÄÏÉÅÏùÑ
-                     Ïã§ÌñâÌïòÍ≥† Ïù¥Îü¨Ìïú ÎåÄÏÉÅÏùò ÎπåÎìúÏóê ÏµúÏã† Î≥µÏõêÎêú 
-                     ÎπåÎìú ÎÖºÎ¶¨Í∞Ä ÏÇ¨Ïö©ÎêòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§. 
-                     ÌîÑÎ°úÏ†ùÌä∏ Ìä∏Î¶¨Î•º ÎπåÎìúÌïòÍ∏∞ Ï†ÑÏóê 
-                     ÌîÑÎ°úÏ†ùÌä∏ Ìä∏Î¶¨ÏóêÏÑú Ìå®ÌÇ§ÏßÄÎ•º Î≥µÏõêÌï¥Ïïº ÌïòÎäî 
+                     Ïã§ÌñâÌïòÍ≥† Ïù¥Îü¨Ìïú ÎåÄÏÉÅÏùò ÎπåÎìúÏóê ÏµúÏã† Î≥µÏõêÎêú
+                     ÎπåÎìú ÎÖºÎ¶¨Í∞Ä ÏÇ¨Ïö©ÎêòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
+                     ÌîÑÎ°úÏ†ùÌä∏ Ìä∏Î¶¨Î•º ÎπåÎìúÌïòÍ∏∞ Ï†ÑÏóê
+                     ÌîÑÎ°úÏ†ùÌä∏ Ìä∏Î¶¨ÏóêÏÑú Ìå®ÌÇ§ÏßÄÎ•º Î≥µÏõêÌï¥Ïïº ÌïòÎäî
                      Í≤ΩÏö∞Ïóê Ïú†Ïö©Ìï©ÎãàÎã§. -restoreÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÏùÄ
                      -restore:TrueÎ•º ÏßÄÏ†ïÌïòÎäî Í≤ÉÍ≥º ÎèôÏùºÌï©ÎãàÎã§. Ïù¥ Îß§Í∞ú Î≥ÄÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨
                      ÏßÄÏãú ÌååÏùºÏóêÏÑú Í∞ÄÏ†∏Ïò§Îäî Í∞íÏùÑ Ïû¨Ï†ïÏùòÌï† Ïàò ÏûàÏäµÎãàÎã§.
@@ -1733,7 +1742,7 @@
     </source>
         <target state="translated">  -profileEvaluation:&lt;file&gt;
                      MSBuild ÌèâÍ∞ÄÎ•º ÌîÑÎ°úÌååÏùºÎßÅÌïòÍ≥† Í≤∞Í≥ºÎ•º ÏßÄÏ†ïÎêú ÌååÏùºÏóê Í∏∞Î°ùÌï©ÎãàÎã§.
-                     ÏßÄÏ†ïÎêú ÌååÏùºÏùò ÌôïÏû•Î™ÖÏù¥ '.md'Ïù¥Î©¥ 
+                     ÏßÄÏ†ïÎêú ÌååÏùºÏùò ÌôïÏû•Î™ÖÏù¥ '.md'Ïù¥Î©¥
                      Í≤∞Í≥ºÍ∞Ä Markdown ÌòïÏãùÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§.
                      Í∑∏Î†áÏßÄ ÏïäÏúºÎ©¥ ÌÉ≠ÏúºÎ°ú Íµ¨Î∂ÑÎêú ÌååÏùºÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§.
     </target>
@@ -1752,9 +1761,9 @@
                        -restoreProperty:IsRestore=true;MyProperty=value
     </source>
         <target state="translated">  -restoreProperty:&lt;n&gt;=&lt;v&gt;
-                     Î≥µÏõêÌïòÎäî ÎèôÏïà ÌîÑÎ°úÏ†ùÌä∏ ÏàòÏ§Ä ÏÜçÏÑ±Îßå ÏÑ§Ï†ïÌïòÍ±∞ÎÇò 
-                     Ïû¨Ï†ïÏùòÌïòÍ≥†, -property Ïù∏ÏàòÎ°ú ÏßÄÏ†ïÎêú ÏÜçÏÑ±ÏùÑ 
-                     ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§. &lt;n&gt;ÏùÄ ÏÜçÏÑ± Ïù¥Î¶ÑÏù¥Í≥† 
+                     Î≥µÏõêÌïòÎäî ÎèôÏïà ÌîÑÎ°úÏ†ùÌä∏ ÏàòÏ§Ä ÏÜçÏÑ±Îßå ÏÑ§Ï†ïÌïòÍ±∞ÎÇò
+                     Ïû¨Ï†ïÏùòÌïòÍ≥†, -property Ïù∏ÏàòÎ°ú ÏßÄÏ†ïÎêú ÏÜçÏÑ±ÏùÑ
+                     ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏäµÎãàÎã§. &lt;n&gt;ÏùÄ ÏÜçÏÑ± Ïù¥Î¶ÑÏù¥Í≥†
                      &lt;v&gt;Îäî ÏÜçÏÑ± Í∞íÏûÖÎãàÎã§.
                      ÏÑ∏ÎØ∏ÏΩúÎ°† ÎòêÎäî ÏâºÌëúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ïó¨Îü¨ ÏÜçÏÑ±ÏùÑ Íµ¨Î∂ÑÌïòÍ±∞ÎÇò,
                      Í∞Å ÏÜçÏÑ±ÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏßÄÏ†ïÌï©ÎãàÎã§.
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index b25931898c2..acd8432703f 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -122,7 +122,7 @@
                      interakcyjno≈õƒá nie jest oczekiwana.
                      Podanie parametru -interactive jest r√≥wnoznaczne
                      z podaniem parametru -interactive:true. U≈ºyj tego
-                     parametru, aby przes≈Çoniƒá warto≈õƒá pochodzƒÖcƒÖ z pliku 
+                     parametru, aby przes≈Çoniƒá warto≈õƒá pochodzƒÖcƒÖ z pliku
                      odpowiedzi.
     </target>
         <note>
@@ -131,9 +131,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -142,8 +151,8 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
-                     Powoduje, ≈ºe program MSBuild kompiluje ka≈ºdy projekt                        
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
+                     Powoduje, ≈ºe program MSBuild kompiluje ka≈ºdy projekt
                      w spos√≥b izolowany.
 
                      Jest to bardziej restrykcyjny tryb programu MSBuild, poniewa≈º
@@ -175,7 +184,7 @@
                      This flag is experimental and may not work as intended.
     </source>
         <target state="translated">  -graphBuild[:True|False]
-                     Powoduje, ≈ºe program MSBuild tworzy i kompiluje graf                 
+                     Powoduje, ≈ºe program MSBuild tworzy i kompiluje graf
                      projektu.
 
                      Tworzenie grafu obejmuje identyfikowanie odwo≈Ça≈Ñ do
@@ -275,7 +284,7 @@
     </source>
         <target state="translated">
  -warnNotAsError[:code[;code2]]
- Lista kod√≥w ostrze≈ºe≈Ñ, kt√≥re majƒÖ byƒá traktowane jako b≈Çƒôdy. 
+ Lista kod√≥w ostrze≈ºe≈Ñ, kt√≥re majƒÖ byƒá traktowane jako b≈Çƒôdy.
  Rozdziel ≈õrednik lub przecinek
  wiele kod√≥w ostrze≈ºe≈Ñ. Nie ma ≈ºadnego efektu, je≈õli prze≈ÇƒÖcznik -warnaserror
                      switch is not set.
@@ -345,7 +354,7 @@
                      osobno.
 
                      Wszelkie pliki odpowiedzi o nazwie ‚Äûmsbuild.rsp‚Äù bƒôdƒÖ automatycznie
-                     wykorzystywane z nastƒôpujƒÖcych lokalizacji: 
+                     wykorzystywane z nastƒôpujƒÖcych lokalizacji:
                      (1) katalog programu msbuild.exe
                      (2) katalog pierwszej kompilacji projektu lub rozwiƒÖzania
 </target>
@@ -654,11 +663,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;plik pamiƒôci podrƒôcznej&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;plik pamiƒôci podrƒôcznej&gt;...
                      Rozdzielana ≈õrednikami lista wej≈õciowych plik√≥w pamiƒôci podrƒôcznej, z kt√≥rych program MSBuild
                      bƒôdzie odczytywaƒá wyniki kompilacji.
                      Ustawienie tej opcji w≈ÇƒÖcza te≈º kompilacje izolowane (-isolate).
@@ -673,10 +681,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[plik pamiƒôci podrƒôcznej]
+        <target state="needs-review-translation">  -outputResultsCache:[plik pamiƒôci podrƒôcznej]
                      Plik pamiƒôci podrƒôcznej, w kt√≥rym program MSBuild zapisze zawarto≈õƒá
                      swoich pamiƒôci podrƒôcznych wynik√≥w kompilacji po zako≈Ñczeniu kompilacji.
                      Ustawienie tej opcji w≈ÇƒÖcza te≈º kompilacje izolowane (-isolate).
@@ -898,7 +906,7 @@
                      Dostƒôpne sƒÖ parametry takie same, jak podane dla rejestratora
                      konsoli. Dostƒôpne sƒÖ r√≥wnie≈º dodatkowe parametry:
                        LogFile ‚Äî ≈õcie≈ºka do pliku dziennika, w kt√≥rym bƒôdzie
-                                 zapisywany dziennik kompilacji. 
+                                 zapisywany dziennik kompilacji.
                        Append ‚Äî okre≈õla, czy plik dziennika kompilacji zostanie
                                 do≈ÇƒÖczony do pliku dziennika, czy go zastƒÖpi.
                                 Ustawienie tego prze≈ÇƒÖcznika powoduje do≈ÇƒÖczenie dziennika kompilacji
@@ -912,8 +920,8 @@
                        -fileLoggerParameters:LogFile=MyLog.log;Append;
                                            Verbosity=diagnostic;Encoding=UTF-8
 
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum 
-                       -flp1:warningsonly;logfile=msbuild.wrn 
+                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
+                       -flp1:warningsonly;logfile=msbuild.wrn
                        -flp2:errorsonly;logfile=msbuild.err
     </target>
         <note>
@@ -1036,11 +1044,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Warto≈õƒá projekt√≥w izolacji jest nieprawid≈Çowa. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Warto≈õƒá projekt√≥w izolacji jest nieprawid≈Çowa. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
@@ -1704,10 +1713,10 @@ dziennik√≥w                     tekstowych i wykorzystaƒá w innych narzƒôdziach
     </source>
         <target state="translated">  -restore[:True|False]
                      Uruchamia element docelowy o nazwie Restore przed skompilowaniem
-                     innych element√≥w docelowych i zapewnia, ≈ºe kompilacja tych 
-                     element√≥w docelowych korzysta z najnowszej logiki przywr√≥conej 
-                     kompilacji. Jest to przydatne, gdy drzewo projektu wymaga 
-                     przywr√≥cenia pakiet√≥w przed ich skompilowaniem. Podanie parametru 
+                     innych element√≥w docelowych i zapewnia, ≈ºe kompilacja tych
+                     element√≥w docelowych korzysta z najnowszej logiki przywr√≥conej
+                     kompilacji. Jest to przydatne, gdy drzewo projektu wymaga
+                     przywr√≥cenia pakiet√≥w przed ich skompilowaniem. Podanie parametru
                      -restore jest r√≥wnoznaczne z podaniem parametru -restore:True.
                      Za pomocƒÖ tego parametru mo≈ºna przes≈Çoniƒá warto≈õƒá pochodzƒÖcƒÖ
                      z pliku odpowiedzi.
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index 690d79cd062..8ef4d8c30d2 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -131,9 +131,18 @@ arquivo de resposta.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -142,8 +151,8 @@ arquivo de resposta.
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
-                     Faz o MSBuild compilar cada projeto 
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
+                     Faz o MSBuild compilar cada projeto
 isoladamente.
                      Esse √© um modo mais restritivo do MSBuild, pois requer
                      que o gr√°fico do projeto seja estatisticamente detect√°vel no
@@ -609,10 +618,10 @@ isoladamente.
                      MSBuild will use up to the number of processors on the
                      computer. (Short form: -m[:n])
       </source>
-        <target state="translated">  -maxCpuCount[:n] Especifica o n√∫mero m√°ximo de processos simult√¢neos a serem 
+        <target state="translated">  -maxCpuCount[:n] Especifica o n√∫mero m√°ximo de processos simult√¢neos a serem
                      compilados. Se a op√ß√£o n√£o for usada, o valor padr√£o
                      usado ser√° 1. Se a op√ß√£o for usada sem um valor, o
-                     MSBuild usar√° o n√∫mero de processadores do 
+                     MSBuild usar√° o n√∫mero de processadores do
                      computador. (Forma abreviada: -m[:n])
       </target>
         <note>
@@ -630,7 +639,7 @@ isoladamente.
         <target state="translated">Exemplos:
 
         MSBuild MyApp.sln -t:Rebuild -p:Configuration=Release
-        MSBuild MyApp.csproj -t:Clean 
+        MSBuild MyApp.csproj -t:Clean
                              -p:Configuration=Debug;TargetFrameworkVersion=v3.5
     </target>
         <note>
@@ -645,11 +654,10 @@ isoladamente.
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
                      Lista separada por ponto e v√≠rgula de arquivos de cache de entrada dos quais o MSBuild
                      ler√° os resultados do build.
                      A defini√ß√£o dessa op√ß√£o tamb√©m habilita os builds isolados (-isolate).
@@ -664,10 +672,10 @@ isoladamente.
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      Arquivo de cache de sa√≠da no qual o MSBuild gravar√° o conte√∫do
                      dos caches de resultado do build no final do build.
                      A configura√ß√£o dessa op√ß√£o tamb√©m habilita builds isolado (-isolate).
@@ -793,12 +801,12 @@ isoladamente.
                      10 file loggers to be attached. (Short form: -fl[n])
     </source>
         <target state="translated">  -fileLogger[n] Registra a sa√≠da do build em um arquivo. Por padr√£o,
-                     o arquivo est√° no diret√≥rio atual e tem o nome 
+                     o arquivo est√° no diret√≥rio atual e tem o nome
                      "msbuild[n].log". Os eventos de todos os n√≥s s√£o combinados em
                      um √∫nico log. A localiza√ß√£o do arquivo e outros
-                     par√¢metros do fileLogger pode ser especificada por meio 
+                     par√¢metros do fileLogger pode ser especificada por meio
                      do acr√©scimo da op√ß√£o "-fileLoggerParameters[n]".
-                     "n", se presente, pode ser um d√≠gito de 1 a 9, permitindo que at√© 
+                     "n", se presente, pode ser um d√≠gito de 1 a 9, permitindo que at√©
                      10 agentes de arquivo sejam anexados. (Forma abreviada: -fl[n])
     </target>
         <note>
@@ -951,14 +959,14 @@ isoladamente.
                      Example:
                        -pp:out.txt
     </source>
-        <target state="translated">  -preprocess[:arquivo] 
+        <target state="translated">  -preprocess[:arquivo]
                      Cria um arquivo de projeto √∫nico e agregado
                      embutindo todos os arquivos que poderiam ser importados durante um
                      build, com seus limites marcados. Isso pode ser
                      √∫til para descobrir quais arquivos s√£o importados,
                      de qual localiza√ß√£o e como contribuir√£o para
                      o build. Por padr√£o, a sa√≠da √© gravada na
-                     janela do console. Se o caminho de um arquivo de sa√≠da 
+                     janela do console. Se o caminho de um arquivo de sa√≠da
                      for fornecido, ele ser√° usado.
                      (Forma abreviada: -pp)
                      Exemplo:
@@ -1025,11 +1033,12 @@ isoladamente.
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: O valor de projetos isolados n√£o √© v√°lido. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: O valor de projetos isolados n√£o √© v√°lido. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
@@ -1538,7 +1547,7 @@ isoladamente.
                        -warnAsError:MSB4130
 
                      Quando um aviso for tratado como um erro, o destino continuar√°
-                     a ser executado como se ele fosse um aviso, mas o 
+                     a ser executado como se ele fosse um aviso, mas o
                      build geral falhar√°.
     </target>
         <note>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index 3e778b63862..252b68b4885 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -129,9 +129,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -140,7 +149,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      –°–æ–æ–±—â–∞–µ—Ç MSBuild, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.
 
                      –≠—Ç–æ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º MSBuild, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç,
@@ -643,11 +652,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;—Ñ–∞–π–ª_–∫—ç—à–∞&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;—Ñ–∞–π–ª_–∫—ç—à–∞&gt;...
                      –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞, –æ—Ç–∫—É–¥–∞ MSBuild
                      –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
                      –ó–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏ (-isolate).
@@ -662,10 +670,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[—Ñ–∞–π–ª_–∫—ç—à–∞]
+        <target state="needs-review-translation">  -outputResultsCache:[—Ñ–∞–π–ª_–∫—ç—à–∞]
                      –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∫—ç—à–∞, –≥–¥–µ MSBuild –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                      —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏ –≤ –∫–æ–Ω—Ü–µ.
                      –ü—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–∞–∫–∂–µ –≤–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏ (-isolate).
@@ -1023,11 +1031,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index acbff27d93c..4ff9206f999 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -120,7 +120,7 @@
                      izin verildiƒüini g√∂sterir.  Etkile≈üimin beklenmediƒüi
                      otomatik bir senaryoda bu baƒüƒ±msƒ±z deƒüi≈ükeni
                      kullanmayƒ±n.
-                     -interactive deƒüerinin belirtilmesi, -interactive:true 
+                     -interactive deƒüerinin belirtilmesi, -interactive:true
                      deƒüerinin belirtilmesiyle aynƒ±dƒ±r.  Parametreyi, yanƒ±t
                      dosyasƒ±ndan gelen bir deƒüeri ge√ßersiz kƒ±lmak i√ßin kullanƒ±n.
     </target>
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      MSBuild tarafƒ±ndan her projenin yalƒ±tƒ±lmƒ±≈ü olarak olu≈üturulmasƒ±na yol a√ßar.
 
                      Bu mod, deƒüerlendirme sƒ±rasƒ±nda proje grafiƒüinin
@@ -397,7 +406,7 @@
                      Example:
                        -property:WarningLevel=2;OutDir=bin\Debug\
 </source>
-        <target state="translated">  -property:&lt;n&gt;=&lt;v&gt;  Bu proje d√ºzeyi √∂zellikleri ayarlayƒ±n veya ge√ßersiz kƒ±lƒ±n. &lt;n&gt; 
+        <target state="translated">  -property:&lt;n&gt;=&lt;v&gt;  Bu proje d√ºzeyi √∂zellikleri ayarlayƒ±n veya ge√ßersiz kƒ±lƒ±n. &lt;n&gt;
                      √∂zelliƒüin adƒ± ve &lt;v&gt; √∂zelliƒüin deƒüeridir. Birden √ßok
                      √∂zelliƒüi birbirinden ayƒ±rmak i√ßin noktalƒ± virg√ºl veya virg√ºl
                      kullanƒ±n veya her √∂zelliƒüi ayrƒ± ayrƒ± belirtin. (Kƒ±sa bi√ßim: -p)
@@ -438,7 +447,7 @@
                      &lt;g√ºnl√ºk√ß√º derlemesi&gt; s√∂z dizimi ≈ü√∂yledir:
                        {&lt;derleme adƒ±&gt;[,&lt;strong name&gt;] | &lt;derleme dosyasƒ±&gt;}
                      G√ºnl√ºk√ß√º se√ßenekleri, MSBuild'in g√ºnl√ºk√ß√ºy√º olu≈üturma bi√ßimini belirtir.
-                     &lt;g√ºnl√ºk√ß√º parametreleri &gt; isteƒüe baƒülƒ±dƒ±r ve tam olarak 
+                     &lt;g√ºnl√ºk√ß√º parametreleri &gt; isteƒüe baƒülƒ±dƒ±r ve tam olarak
                      yazdƒ±ƒüƒ±nƒ±z ≈üekliyle g√ºnl√ºk√ß√ºye ge√ßirilir. (Kƒ±sa bi√ßim: -l)
                      √ñrnekler:
                        -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
@@ -644,11 +653,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;√∂nbellekDosyasƒ±&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;√∂nbellekDosyasƒ±&gt;...
                      MSBuild'in derleme sonu√ßlarƒ±nƒ± okuyacaƒüƒ± giri≈ü
                      √∂nbellek dosyalarƒ±nƒ±n noktalƒ± virg√ºlle ayrƒ±lmƒ±≈ü listesi.
                      Ayarlandƒ±ƒüƒ±nda yalƒ±tƒ±lmƒ±≈ü derlemeler de a√ßƒ±lƒ±r (-isolate).
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[√∂nbellekDosyasƒ±]
+        <target state="needs-review-translation">  -outputResultsCache:[√∂nbellekDosyasƒ±]
                      MSBuild‚Äôin derleme sonunda derleme sonucu √∂nbelleklerinin
                      i√ßeriƒüini yazacaƒüƒ± √ßƒ±kƒ±≈ü √∂nbellek dosyasƒ±.
                      Bu a√ßƒ±ldƒ±ƒüƒ±nda yalƒ±tƒ±lmƒ±≈ü derlemeler (-isolate) de a√ßƒ±lƒ±r.
@@ -739,9 +747,9 @@
                        -ignoreProjectExtensions:.sln
     </source>
         <target state="translated">  -ignoreProjectExtensions:&lt;uzantƒ±lar&gt;
-                     Hangi proje dosyasƒ±nƒ±n olu≈üturulacaƒüƒ± belirlenirken 
-                     yoksayƒ±lacak uzantƒ±larƒ±n listesi. Birden √ßok uzantƒ±yƒ± 
-                     birbirinden ayƒ±rmak i√ßin noktalƒ± virg√ºl veya 
+                     Hangi proje dosyasƒ±nƒ±n olu≈üturulacaƒüƒ± belirlenirken
+                     yoksayƒ±lacak uzantƒ±larƒ±n listesi. Birden √ßok uzantƒ±yƒ±
+                     birbirinden ayƒ±rmak i√ßin noktalƒ± virg√ºl veya
                      virg√ºl kullanƒ±n.
                      (Kƒ±sa bi√ßim: -ignore)
                      √ñrnek:
@@ -767,8 +775,8 @@
    </source>
         <target state="translated">  -toolsVersion:&lt;s√ºr√ºm&gt;
                      Derleme sƒ±rasƒ±nda kullanƒ±lacak MSBuild Ara√ß K√ºmesinin
-                     (g√∂revler, hedefler vb.) s√ºr√ºm√º. Bu s√ºr√ºm, tek tek projelerde 
-                     belirtilen s√ºr√ºmleri ge√ßersiz kƒ±lar. (Kƒ±sa bi√ßim: 
+                     (g√∂revler, hedefler vb.) s√ºr√ºm√º. Bu s√ºr√ºm, tek tek projelerde
+                     belirtilen s√ºr√ºmleri ge√ßersiz kƒ±lar. (Kƒ±sa bi√ßim:
                      -tv)
                      √ñrnek:
                        -toolsVersion:3.5
@@ -827,14 +835,14 @@
         <target state="translated">  -distributedFileLogger
                      Derleme √ßƒ±kƒ±≈üƒ±nƒ±, her MSBuild d√ºƒü√ºm√º i√ßin bir g√ºnl√ºk
                      dosyasƒ± olmak √ºzere birden √ßok g√ºnl√ºk dosyasƒ±na kaydeder. Bu
-                     dosyalarƒ±n ilk konumu ge√ßerli dizindir. Dosyalarƒ±n 
-                     varsayƒ±lan adƒ± "MSBuild&lt;d√ºƒü√ºmkimliƒüi&gt;.log"dur. 
-                     Dosyalarƒ±n konumu ve fileLogger'ƒ±n diƒüer parametreleri 
+                     dosyalarƒ±n ilk konumu ge√ßerli dizindir. Dosyalarƒ±n
+                     varsayƒ±lan adƒ± "MSBuild&lt;d√ºƒü√ºmkimliƒüi&gt;.log"dur.
+                     Dosyalarƒ±n konumu ve fileLogger'ƒ±n diƒüer parametreleri
                      "/fileLoggerParameters" anahtarƒ±nƒ±n eklenmesi yoluyla
                      belirtilebilir.
 
                      G√ºnl√ºk dosyasƒ± adƒ± fileLoggerParameters anahtarƒ±
-                     aracƒ±lƒ±ƒüƒ±yla ayarlanƒ±rsa daƒüƒ±tƒ±lmƒ±≈ü g√ºnl√ºk√ß√º fileName 
+                     aracƒ±lƒ±ƒüƒ±yla ayarlanƒ±rsa daƒüƒ±tƒ±lmƒ±≈ü g√ºnl√ºk√ß√º fileName
                      deƒüerini ≈üablon olarak kullanƒ±p her d√ºƒü√ºm√ºn g√ºnl√ºk dosyasƒ±nƒ±
                      olu≈üturmak i√ßin bu fileName deƒüerine d√ºƒü√ºm kimliƒüini ekler.
     </target>
@@ -879,32 +887,32 @@
     </source>
         <target state="translated">  -fileLoggerParameters[n]:&lt;parametreler&gt;
                      Dosya g√ºnl√ºk√ß√ºleri i√ßin ek parametreler saƒülar.
-                     Bu anahtarƒ±n olmasƒ± kar≈üƒ±lƒ±k gelen -fileLogger[n] 
+                     Bu anahtarƒ±n olmasƒ± kar≈üƒ±lƒ±k gelen -fileLogger[n]
                      anahtarƒ±nƒ±n olduƒüu anlamƒ±na gelir.
                      "n" varsa, 1-9 arasƒ±nda bir rakam olabilir.
-                     Daƒüƒ±tƒ±lmƒ±≈ü dosya g√ºnl√ºk√ß√ºleri varsa -fileLoggerParameters 
-                     bunlar tarafƒ±ndan da kullanƒ±lƒ±r; -distributedFileLogger 
+                     Daƒüƒ±tƒ±lmƒ±≈ü dosya g√ºnl√ºk√ß√ºleri varsa -fileLoggerParameters
+                     bunlar tarafƒ±ndan da kullanƒ±lƒ±r; -distributedFileLogger
                      a√ßƒ±klamasƒ±na bakƒ±n.
                      (Kƒ±sa bi√ßim: -flp[n])
-                     Konsol g√ºnl√ºk√ß√ºs√º i√ßin listelenenlerle aynƒ± parametreler 
+                     Konsol g√ºnl√ºk√ß√ºs√º i√ßin listelenenlerle aynƒ± parametreler
                      kullanƒ±labilir. Kullanƒ±labilecek bazƒ± ek parametreler:
-                        LogFile--Olu≈üturma g√ºnl√ºƒü√ºn√ºn yazƒ±lacaƒüƒ± g√ºnl√ºk 
+                        LogFile--Olu≈üturma g√ºnl√ºƒü√ºn√ºn yazƒ±lacaƒüƒ± g√ºnl√ºk
                             dosyasƒ±nƒ±n yolu.
-                        Append--Derleme g√ºnl√ºƒü√ºn√ºn g√ºn dosyasƒ±nƒ±n sonuna mƒ± 
-                            ekleneceƒüini yoksa √ºzerine mi yazƒ±lacaƒüƒ±nƒ± 
-                            belirler. Anahtar ayarlandƒ±ƒüƒ±nda olu≈üturma g√ºnl√ºƒü√º 
-                            dosyanƒ±n sonuna eklenir. Anahtar ayarlanmadƒ±ƒüƒ±nda 
-                            varolan g√ºnl√ºk dosyasƒ±nƒ±n √ºzerine yazƒ±lƒ±r. 
+                        Append--Derleme g√ºnl√ºƒü√ºn√ºn g√ºn dosyasƒ±nƒ±n sonuna mƒ±
+                            ekleneceƒüini yoksa √ºzerine mi yazƒ±lacaƒüƒ±nƒ±
+                            belirler. Anahtar ayarlandƒ±ƒüƒ±nda olu≈üturma g√ºnl√ºƒü√º
+                            dosyanƒ±n sonuna eklenir. Anahtar ayarlanmadƒ±ƒüƒ±nda
+                            varolan g√ºnl√ºk dosyasƒ±nƒ±n √ºzerine yazƒ±lƒ±r.
                             Varsayƒ±lan: g√ºnl√ºk dosyasƒ±nƒ±n sonuna eklenmez.
-                        Encoding--Dosyanƒ±n kodlamasƒ±nƒ± belirtir; √∂rneƒüin, 
+                        Encoding--Dosyanƒ±n kodlamasƒ±nƒ± belirtir; √∂rneƒüin,
                             UTF-8, Unicode veya ASCII
                      Varsayƒ±lan ayrƒ±ntƒ± d√ºzeyi ayarƒ± Detailed'dƒ±r.
                      √ñrnekler:
                        -fileLoggerParameters:LogFile=MyLog.log;Append;
                                            Verbosity=diagnostic;Encoding=UTF-8
 
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum 
-                       -flp1:warningsonly;logfile=msbuild.wrn 
+                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
+                       -flp1:warningsonly;logfile=msbuild.wrn
                        -flp2:errorsonly;logfile=msbuild.err
     </target>
         <note>
@@ -1028,11 +1036,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Projeleri yalƒ±tma deƒüeri ge√ßerli deƒüil. {0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Projeleri yalƒ±tma deƒüeri ge√ßerli deƒüil. {0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index ac8ff48e194..a5ec18908f5 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      ‰Ωø MSBuild Áã¨Á´ãÁîüÊàêÊØè‰∏™È°πÁõÆ„ÄÇ
 
                      ËøôÊòØ MSBuild Êõ¥ÂÖ∑ÈôêÂà∂ÊÄßÁöÑÊ®°ÂºèÔºåÂõ†‰∏∫ÂÆÉË¶ÅÊ±Ç
@@ -584,10 +593,10 @@
                      Example:
                        -validate:MyExtendedBuildSchema.xsd
 </source>
-        <target state="translated">  -validate     ‰æùÊçÆÈªòËÆ§Êû∂ÊûÑÈ™åËØÅÈ°πÁõÆ„ÄÇ(Áº©ÂÜô: 
+        <target state="translated">  -validate     ‰æùÊçÆÈªòËÆ§Êû∂ÊûÑÈ™åËØÅÈ°πÁõÆ„ÄÇ(Áº©ÂÜô:
            -val)
 
- -validate:&lt;schema&gt; ‰æùÊçÆÊåáÂÆöÁöÑÊû∂ÊûÑÈ™åËØÅÈ°πÁõÆ„ÄÇ(Áº©ÂÜô: 
+ -validate:&lt;schema&gt; ‰æùÊçÆÊåáÂÆöÁöÑÊû∂ÊûÑÈ™åËØÅÈ°πÁõÆ„ÄÇ(Áº©ÂÜô:
            -val)
            Á§∫‰æã:
             -validate:MyExtendedBuildSchema.xsd
@@ -644,11 +653,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;cacheFile&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;cacheFile&gt;...
                      ËæìÂÖ•ÁºìÂ≠òÊñá‰ª∂ÁöÑÂàÜÂè∑ÂàÜÈöîÂàóË°®ÔºåMSBuild
                      Â∞Ü‰ªéËøô‰∫õÊñá‰ª∂‰∏≠ËØªÂèñÁîüÊàêÁªìÊûú„ÄÇ
                      ËÆæÁΩÆÊ≠§ÂàóË°®ËøòÂ∞ÜÊâìÂºÄÂàÜÈöîÁöÑÁîüÊàê(-isolate)„ÄÇ
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      ËæìÂá∫ÁºìÂ≠òÊñá‰ª∂ÔºåMSBuild Â∞ÜÂú®
                      ÁîüÊàêÁªìÊùüÊó∂ÂÜôÂÖ•ÂÖ∂ÁîüÊàêÁªìÊûúÁºìÂ≠òÁöÑÂÜÖÂÆπ„ÄÇ
                      ËÆæÁΩÆÂÆÉ‰πü‰ºöÊâìÂºÄÈöîÁ¶ªÁöÑÁîüÊàê (-isolate).
@@ -767,7 +775,7 @@
         <target state="translated">  -toolsversion:&lt;version&gt;
            Ë¶ÅÂú®ÁîüÊàêËøáÁ®ã‰∏≠‰ΩøÁî®ÁöÑ MSBuild Â∑•ÂÖ∑ÈõÜ
            (‰ªªÂä°„ÄÅÁõÆÊ†áÁ≠â)ÁöÑÁâàÊú¨„ÄÇÊ≠§ÁâàÊú¨Â∞ÜÈáçÂÜô
-           ÂêÑ‰∏™È°πÁõÆÊåáÂÆöÁöÑÁâàÊú¨„ÄÇ(Áº©ÂÜô: 
+           ÂêÑ‰∏™È°πÁõÆÊåáÂÆöÁöÑÁâàÊú¨„ÄÇ(Áº©ÂÜô:
            -tv)
            Á§∫‰æã:
             -toolsversion:3.5
@@ -823,17 +831,17 @@
                      template and append the node id to this fileName to
                      create a log file for each node.
     </source>
-        <target state="translated">  -distributedFileLogger                            
+        <target state="translated">  -distributedFileLogger
            Â∞ÜÁîüÊàêËæìÂá∫ËÆ∞ÂΩïÂà∞Â§ö‰∏™Êó•ÂøóÊñá‰ª∂ÔºåÊØè‰∏™ MSBuild ËäÇÁÇπ
            ‰∏Ä‰∏™Êó•ÂøóÊñá‰ª∂„ÄÇËøô‰∫õÊñá‰ª∂ÁöÑÂàùÂßã‰ΩçÁΩÆ‰∏∫
            ÂΩìÂâçÁõÆÂΩï„ÄÇÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºåËøô‰∫õÊñá‰ª∂Âêç‰∏∫
            ‚ÄúMSBuild&lt;nodeid&gt;.log‚Äù„ÄÇÂèØÈÄöËøáÊ∑ªÂä†
-           ‚Äú-fileLoggerParameters‚ÄùÂºÄÂÖ≥Êù•ÊåáÂÆö 
+           ‚Äú-fileLoggerParameters‚ÄùÂºÄÂÖ≥Êù•ÊåáÂÆö
            Ëøô‰∫õÊñá‰ª∂ÁöÑ‰ΩçÁΩÆÂíå fileLogger ÁöÑÂÖ∂‰ªñÂèÇÊï∞„ÄÇ
 
            Â¶ÇÊûúÊó•ÂøóÊñá‰ª∂ÂêçÊòØÈÄöËøá fileLoggerParameters
            ÂºÄÂÖ≥ËÆæÁΩÆÁöÑÔºåÂàÜÂ∏ÉÂºèËÆ∞ÂΩïÂô®Â∞Ü‰ΩøÁî® fileName ‰Ωú‰∏∫
-           Ê®°ÊùøÂπ∂Â∞ÜËäÇÁÇπ ID ÈôÑÂä†Âà∞Ê≠§ fileName 
+           Ê®°ÊùøÂπ∂Â∞ÜËäÇÁÇπ ID ÈôÑÂä†Âà∞Ê≠§ fileName
            ‰ª•‰æø‰∏∫ÊØè‰∏™ËäÇÁÇπÂàõÂª∫‰∏Ä‰∏™Êó•ÂøóÊñá‰ª∂„ÄÇ
     </target>
         <note>
@@ -875,12 +883,12 @@
                        -flp1:warningsonly;logfile=msbuild.wrn
                        -flp2:errorsonly;logfile=msbuild.err
     </source>
-        <target state="translated">  -fileloggerparameters[n]:&lt;parameters&gt;                
+        <target state="translated">  -fileloggerparameters[n]:&lt;parameters&gt;
            ‰∏∫Êñá‰ª∂ËÆ∞ÂΩïÂô®Êèê‰æõ‰ªª‰ΩïÈ¢ùÂ§ñÁöÑÂèÇÊï∞„ÄÇ
            Â≠òÂú®Ê≠§ÂºÄÂÖ≥ÊÑèÂë≥ÁùÄ
            Â≠òÂú®ÂØπÂ∫îÁöÑ -filelogger[n] ÂºÄÂÖ≥„ÄÇ
           ‚Äún‚Äù(Â¶ÇÊûúÂ≠òÂú®)ÂèØ‰ª•‰∏∫ 1-9 ÁöÑÊï∞Â≠ó„ÄÇ
-           ‰ªª‰ΩïÂàÜÂ∏ÉÂºèÊñá‰ª∂ËÆ∞ÂΩïÂô®‰πüÂèØ‰ª•‰ΩøÁî® 
+           ‰ªª‰ΩïÂàÜÂ∏ÉÂºèÊñá‰ª∂ËÆ∞ÂΩïÂô®‰πüÂèØ‰ª•‰ΩøÁî®
            -fileloggerparametersÔºåÂÖ∑‰ΩìÂèØÂèÇÈòÖ -distributedFileLogger ÁöÑËØ¥Êòé„ÄÇ
            (Áº©ÂÜô: -flp[n])
            ‰∏∫ÊéßÂà∂Âè∞ËÆ∞ÂΩïÂô®ÂàóÂá∫ÁöÑÁõ∏ÂêåÂèÇÊï∞
@@ -900,8 +908,8 @@
             -fileLoggerParameters:LogFile=MyLog.log;Append;
                       Verbosity=diagnostic;Encoding=UTF-8
 
-            -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum 
-            -flp1:warningsonly;logfile=msbuild.wrn 
+            -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
+            -flp1:warningsonly;logfile=msbuild.wrn
             -flp2:errorsonly;logfile=msbuild.err
     </target>
         <note>
@@ -1024,11 +1032,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Áã¨Á´ãÈ°πÁõÆÂÄºÊó†Êïà„ÄÇ{0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Áã¨Á´ãÈ°πÁõÆÂÄºÊó†Êïà„ÄÇ{0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index b2f5a5a0110..521bc7fb13b 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -130,9 +130,18 @@
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
+        <source>  -isolateProjects[:True|MessageUponIsolationViolation|False]
                      Causes MSBuild to build each project in isolation.
 
+                     When set to "MessageUponIsolationViolation" (or its short
+                     form "Message"), only the results from top-level targets
+                     are serialized if the -outputResultsCache switch is
+                     supplied. This is to mitigate the chances of an
+                     isolation-violating target on a dependency project using
+                     incorrect state due to its dependency on a cached target
+                     whose side effects would not be taken into account.
+                     (For example, the definition of a property.)
+
                      This is a more restrictive mode of MSBuild as it requires
                      that the project graph be statically discoverable at
                      evaluation time, but can improve scheduling and reduce
@@ -141,7 +150,7 @@
 
                      This flag is experimental and may not work as intended.
     </source>
-        <target state="translated">  -isolateProjects[:True|False]
+        <target state="needs-review-translation">  -isolateProjects[:True|False]
                      ÂºïÁôº MSBuild Áç®Á´ãÂª∫ÁΩÆÂêÑÂÄãÂ∞àÊ°à„ÄÇ
 
                      ÈÄôÊòØÈôêÂà∂Â∫¶ËºÉÈ´òÁöÑ MSBuild Ê®°ÂºèÔºåÂõ†ÁÇ∫
@@ -644,11 +653,10 @@
       <trans-unit id="HelpMessage_InputCachesFiles">
         <source>  -inputResultsCaches:&lt;cacheFile&gt;...
                      Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
+                     will read build results from. If -isolateProjects is set
+                     to False, this sets it to True. (short form: -irc)
    </source>
-        <target state="translated">  -inputResultsCaches:&lt;Âø´ÂèñÊ™îÊ°à&gt;...
+        <target state="needs-review-translation">  -inputResultsCaches:&lt;Âø´ÂèñÊ™îÊ°à&gt;...
                      ‰ª•ÂàÜËôüÂàÜÈöîÁöÑËº∏ÂÖ•Âø´ÂèñÊ™îÊ°à
                       (MSBuild Â∞áÊúÉÂæûÊ≠§Ê™îÊ°àËÆÄÂèñÂª∫ÁΩÆÁµêÊûú) Ê∏ÖÂñÆ„ÄÇ
                      Ë®≠ÂÆöÊ≠§È†ÖÁõÆ‰πüÊúÉÈñãÂïüÈöîÈõ¢ÂºèÂª∫ÁΩÆ (-isolate)„ÄÇ
@@ -663,10 +671,10 @@
         <source>  -outputResultsCache:[cacheFile]
                      Output cache file where MSBuild will write the contents of
                      its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
+                     If -isolateProjects is set to False, this sets it to True.
                      (short form: -orc)
    </source>
-        <target state="translated">  -outputResultsCache:[cacheFile]
+        <target state="needs-review-translation">  -outputResultsCache:[cacheFile]
                      MSBuild Ë¶ÅÂú®ÁµÑÂª∫ÁµêÊùüÊôÇÂØ´ÂÖ•
                      ÂÖ∂ÁµÑÂª∫ÁµêÊûúÂø´ÂèñÂÖßÂÆπÁöÑÁõÆÊ®ôËº∏Âá∫Âø´ÂèñÊ™îÊ°à„ÄÇ
                      Ë®≠ÂÆöÊ≠§È†Ö‰πüÊúÉÈñãÂïüÈöîÈõ¢ÁµÑÂª∫ (-isolate)„ÄÇ
@@ -766,8 +774,8 @@
    </source>
         <target state="translated">  -toolsversion:&lt;ÁâàÊú¨&gt;
                      Âª∫ÁΩÆÊúüÈñìÊâÄ‰ΩøÁî®ÁöÑ MSBuild Â∑•ÂÖ∑ÁµÑ (Â∑•‰Ωú„ÄÅÁõÆÊ®ôÁ≠â)
-                      ÁâàÊú¨„ÄÇÊ≠§ÁâàÊú¨Â∞áÊúÉË¶ÜÂØ´ 
-                     ÂÄãÂà•Â∞àÊ°àÊâÄÊåáÂÆöÁöÑÁâàÊú¨„ÄÇ(Á∞°Áü≠ÂΩ¢Âºè: 
+                      ÁâàÊú¨„ÄÇÊ≠§ÁâàÊú¨Â∞áÊúÉË¶ÜÂØ´
+                     ÂÄãÂà•Â∞àÊ°àÊâÄÊåáÂÆöÁöÑÁâàÊú¨„ÄÇ(Á∞°Áü≠ÂΩ¢Âºè:
                      -tv)
                      ÁØÑ‰æã:
                        -toolsVersion:3.5
@@ -1024,11 +1032,12 @@
       </trans-unit>
       <trans-unit id="InvalidIsolateProjectsValue">
         <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="translated">MSBUILD : error MSB1056: Áç®Á´ãÂºèÂ∞àÊ°àÂÄºÁÑ°Êïà„ÄÇ{0}</target>
+        <target state="needs-review-translation">MSBUILD : error MSB1056: Áç®Á´ãÂºèÂ∞àÊ°àÂÄºÁÑ°Êïà„ÄÇ{0}</target>
         <note>
       {StrBegin="MSBUILD : error MSB1056: "}
       UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
+      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent
+      to Boolean.TrueString, nameof(ProjectIsolationMode.MessageUponIsolationViolation), or Boolean.FalseString.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index f2ef7143789..9418b75f52a 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -38,7 +38,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Logging.FancyLogger;
+using Microsoft.Build.Logging.LiveLogger;
 using System.Runtime.InteropServices;
 
 #nullable disable
@@ -224,7 +224,7 @@ string[] args
             DebuggerLaunchCheck();
 
             // Initialize new build telemetry and record start of this build.
-            KnownTelemetry.BuildTelemetry = new BuildTelemetry { StartAt = DateTime.UtcNow };
+            KnownTelemetry.PartialBuildTelemetry = new BuildTelemetry { StartAt = DateTime.UtcNow };
 
             using PerformanceLogEventListener eventListener = PerformanceLogEventListener.Create();
 
@@ -309,18 +309,18 @@ private static bool CanRunServerBasedOnCommandLineSwitches(
                     IsInteractiveBuild(commandLineSwitches))
                 {
                     canRunServer = false;
-                    if (KnownTelemetry.BuildTelemetry != null)
+                    if (KnownTelemetry.PartialBuildTelemetry != null)
                     {
-                        KnownTelemetry.BuildTelemetry.ServerFallbackReason = "Arguments";
+                        KnownTelemetry.PartialBuildTelemetry.ServerFallbackReason = "Arguments";
                     }
                 }
             }
             catch (Exception ex)
             {
                 CommunicationsUtilities.Trace("Unexpected exception during command line parsing. Can not determine if it is allowed to use Server. Fall back to old behavior. Exception: {0}", ex);
-                if (KnownTelemetry.BuildTelemetry != null)
+                if (KnownTelemetry.PartialBuildTelemetry != null)
                 {
-                    KnownTelemetry.BuildTelemetry.ServerFallbackReason = "ErrorParsingCommandLine";
+                    KnownTelemetry.PartialBuildTelemetry.ServerFallbackReason = "ErrorParsingCommandLine";
                 }
                 canRunServer = false;
             }
@@ -631,7 +631,7 @@ public static ExitType Execute(
             DebuggerLaunchCheck();
 
             // Initialize new build telemetry and record start of this build, if not initialized already
-            KnownTelemetry.BuildTelemetry ??= new BuildTelemetry { StartAt = DateTime.UtcNow };
+            KnownTelemetry.PartialBuildTelemetry ??= new BuildTelemetry { StartAt = DateTime.UtcNow };
 
             // Indicate to the engine that it can toss extraneous file content
             // when it loads microsoft.*.targets. We can't do this in the general case,
@@ -701,7 +701,7 @@ public static ExitType Execute(
                 ProfilerLogger profilerLogger = null;
                 bool enableProfiler = false;
                 bool interactive = false;
-                bool isolateProjects = false;
+                ProjectIsolationMode isolateProjects = ProjectIsolationMode.False;
                 GraphBuildOptions graphBuildOptions = null;
                 bool lowPriority = false;
                 string[] inputResultsCaches = null;
@@ -1118,7 +1118,7 @@ internal static bool BuildProject(
             ProfilerLogger profilerLogger,
             bool enableProfiler,
             bool interactive,
-            bool isolateProjects,
+            ProjectIsolationMode isolateProjects,
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             string[] inputResultsCaches,
@@ -1289,7 +1289,7 @@ internal static bool BuildProject(
                     parameters.WarningsNotAsErrors = warningsNotAsErrors;
                     parameters.WarningsAsMessages = warningsAsMessages;
                     parameters.Interactive = interactive;
-                    parameters.IsolateProjects = isolateProjects;
+                    parameters.ProjectIsolationMode = isolateProjects;
                     parameters.InputResultsCacheFiles = inputResultsCaches;
                     parameters.OutputResultsCacheFile = outputResultsCache;
 
@@ -2210,7 +2210,7 @@ private static bool ProcessCommandLineSwitches(
             ref ProfilerLogger profilerLogger,
             ref bool enableProfiler,
             ref Dictionary<string, string> restoreProperties,
-            ref bool isolateProjects,
+            ref ProjectIsolationMode isolateProjects,
             ref GraphBuildOptions graphBuild,
             ref string[] inputResultsCaches,
             ref string outputResultsCache,
@@ -2385,7 +2385,7 @@ private static bool ProcessCommandLineSwitches(
 
                     if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.IsolateProjects))
                     {
-                        isolateProjects = ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.IsolateProjects], defaultValue: true, resourceName: "InvalidIsolateProjectsValue");
+                        isolateProjects = ProcessIsolateProjectsSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.IsolateProjects]);
                     }
 
                     if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GraphBuild))
@@ -2406,7 +2406,7 @@ private static bool ProcessCommandLineSwitches(
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
                         commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoConsoleLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.DistributedFileLogger],
-                        commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.FancyLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.LiveLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.FileLoggerParameters], // used by DistributedFileLogger
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
@@ -2526,6 +2526,39 @@ private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLin
             return indexOfColon < 0 || indexOfColon == val.Length - 1;
         }
 
+        internal static ProjectIsolationMode ProcessIsolateProjectsSwitch(string[] parameters)
+        {
+
+            // Before /isolate had parameters, it was treated as a boolean switch.
+            // Preserve that in case anyone is using /isolate:{false|true}
+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out bool boolValue))
+            {
+                return boolValue ? ProjectIsolationMode.True : ProjectIsolationMode.False;
+            }
+
+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True;
+            foreach (string parameter in parameters)
+            {
+                if (string.IsNullOrWhiteSpace(parameter))
+                {
+                    continue;
+                }
+
+                string trimmedParameter = parameter.Trim();
+                if (trimmedParameter.Equals(nameof(ProjectIsolationMode.MessageUponIsolationViolation), StringComparison.OrdinalIgnoreCase)
+                    || trimmedParameter.Equals("Message", StringComparison.OrdinalIgnoreCase))
+                {
+                    isolateProjects = ProjectIsolationMode.MessageUponIsolationViolation;
+                }
+                else
+                {
+                    CommandLineSwitchException.Throw("InvalidIsolateProjectsValue", parameter);
+                }
+            }
+
+            return isolateProjects;
+        }
+
         internal static GraphBuildOptions ProcessGraphBuildSwitch(string[] parameters)
         {
             var options = new GraphBuildOptions();
@@ -3187,7 +3220,7 @@ private static ILogger[] ProcessLoggingSwitches(
             string[] verbositySwitchParameters,
             bool noConsoleLogger,
             bool distributedFileLogger,
-            bool fancyLoggerCommandLineOptIn,
+            bool liveLoggerCommandLineOptIn,
             string[] fileLoggerParameters,
             string[] consoleLoggerParameters,
             string[] binaryLoggerParameters,
@@ -3210,16 +3243,22 @@ private static ILogger[] ProcessLoggingSwitches(
                 originalVerbosity = ProcessVerbositySwitch(verbositySwitchParameters[verbositySwitchParameters.Length - 1]);
                 verbosity = originalVerbosity;
             }
+            var loggers = new List<ILogger>();
+
+            var outVerbosity = verbosity;
+            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref outVerbosity);
 
-            var loggers = ProcessLoggerSwitch(loggerSwitchParameters, verbosity);
+            ProcessLoggerSwitch(loggerSwitchParameters, loggers, verbosity);
 
             // Add any loggers which have been specified on the commandline
             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);
 
             // Choose default console logger
-            if ((fancyLoggerCommandLineOptIn || Environment.GetEnvironmentVariable("MSBUILDFANCYLOGGER") == "true") && DoesEnvironmentSupportFancyLogger())
+            if (
+                (liveLoggerCommandLineOptIn || Environment.GetEnvironmentVariable("MSBUILDFANCYLOGGER") == "true" || Environment.GetEnvironmentVariable("MSBUILDLIVELOGGER") == "true")
+                && DoesEnvironmentSupportLiveLogger())
             {
-                ProcessFancyLogger(noConsoleLogger, loggers);
+                ProcessLiveLogger(noConsoleLogger, distributedLoggerRecords, cpuCount, loggers);
             }
             else
             {
@@ -3230,10 +3269,10 @@ private static ILogger[] ProcessLoggingSwitches(
 
             ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
 
-            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref verbosity);
-
             // TOOD: Review
-            // ProcessFancyLogger(noConsoleLogger, loggers);
+            // ProcessLiveLogger(noConsoleLogger, loggers);
+
+            verbosity = outVerbosity;
 
             profilerLogger = ProcessProfileEvaluationSwitch(profileEvaluationParameters, loggers, out enableProfiler);
 
@@ -3398,36 +3437,50 @@ internal static void ProcessConsoleLoggerSwitch(
             }
         }
 
-        private static bool DoesEnvironmentSupportFancyLogger()
+        private static bool DoesEnvironmentSupportLiveLogger()
         {
             // If output is redirected
             if (Console.IsOutputRedirected)
             {
                 messagesToLogInBuildLoggers.Add(
-                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is being redirected to a file.", MessageImportance.Low));
+                    new BuildManager.DeferredBuildMessage("LiveLogger was not used because the output is being redirected to a file.", MessageImportance.Low));
                 return false;
             }
             // If terminal is dumb
             if (
-                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") == "")
+                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WT_SESSION")))
                 || Environment.GetEnvironmentVariable("TERM") == "dumb")
             {
                 messagesToLogInBuildLoggers.Add(
-                    new BuildManager.DeferredBuildMessage("FancyLogger was not used because the output is not supported.", MessageImportance.Low));
+                    new BuildManager.DeferredBuildMessage("LiveLogger was not used because the output is not supported.", MessageImportance.Low));
                 return false;
             }
             return true;
         }
 
-        private static void ProcessFancyLogger(
+        private static void ProcessLiveLogger(
             bool noConsoleLogger,
+            List<DistributedLoggerRecord> distributedLoggerRecords,
+            int cpuCount,
             List<ILogger> loggers)
         {
-            // Check for flags and env variables
             if (!noConsoleLogger)
             {
-                FancyLogger l = new FancyLogger();
-                loggers.Add(l);
+                // A central logger will be created for both single proc and multiproc.
+                LiveLogger logger = new LiveLogger();
+
+                // Check to see if there is a possibility we will be logging from an out-of-proc node.
+                // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
+                if (cpuCount == 1 && !Traits.Instance.InProcNodeDisabled)
+                {
+                    loggers.Add(logger);
+                }
+                else
+                {
+                    // For performance, register this logger using the forwarding logger mechanism.
+                    DistributedLoggerRecord forwardingLoggerRecord = CreateForwardingLoggerRecord(logger, string.Join(";", LiveLogger.ConfigurableForwardingLoggerParameters), LoggerVerbosity.Quiet);
+                    distributedLoggerRecords.Add(forwardingLoggerRecord);
+                }
             }
         }
 
@@ -3619,10 +3672,8 @@ internal static LoggerVerbosity ProcessVerbositySwitch(string value)
         /// Figures out which additional loggers are going to listen to build events.
         /// </summary>
         /// <returns>List of loggers.</returns>
-        private static List<ILogger> ProcessLoggerSwitch(string[] parameters, LoggerVerbosity verbosity)
+        private static void ProcessLoggerSwitch(string[] parameters, List<ILogger> loggers, LoggerVerbosity verbosity)
         {
-            var loggers = new List<ILogger>();
-
             foreach (string parameter in parameters)
             {
                 string unquotedParameter = QuotingUtilities.Unquote(parameter);
@@ -3634,8 +3685,6 @@ private static List<ILogger> ProcessLoggerSwitch(string[] parameters, LoggerVerb
                     loggers.Add(logger);
                 }
             }
-
-            return loggers;
         }
 
         /// <summary>
diff --git a/src/MSBuildTaskHost/AssemblyResources.cs b/src/MSBuildTaskHost/AssemblyResources.cs
index d03e3abe886..6ee4f10b194 100644
--- a/src/MSBuildTaskHost/AssemblyResources.cs
+++ b/src/MSBuildTaskHost/AssemblyResources.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
-using System.Reflection;
 using System.Globalization;
+using System.Reflection;
+using System.Resources;
 
 #nullable disable
 
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 08ab44925ed..148cc6b1210 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Reflection;
-using System.Collections.Generic;
 using System.Threading;
 using Microsoft.Build.Framework;
 
diff --git a/src/Package/Microsoft.Build.UnGAC/Program.cs b/src/Package/Microsoft.Build.UnGAC/Program.cs
index fb850b26700..884d1929d8b 100644
--- a/src/Package/Microsoft.Build.UnGAC/Program.cs
+++ b/src/Package/Microsoft.Build.UnGAC/Program.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.UnGAC
     /// It runs at VS install-time as well as repair-time.
     /// It is intended to run as best effort. Meaning that if it fails, we avoid throwing and instead log it.
     /// </summary>
-    internal class Program
+    internal sealed class Program
     {
         private static void Main(string[] args)
         {
diff --git a/src/Samples/Dependency/Properties/AssemblyInfo.cs b/src/Samples/Dependency/Properties/AssemblyInfo.cs
index 4219e2cae88..0fa73ca8f5c 100644
--- a/src/Samples/Dependency/Properties/AssemblyInfo.cs
+++ b/src/Samples/Dependency/Properties/AssemblyInfo.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
 using System.Reflection;
+using System.Resources;
 
 // General Information about an assembly is controlled through the following
 // set of attributes. Change these attribute values to modify the information
diff --git a/src/Samples/Directory.Build.props b/src/Samples/Directory.Build.props
index 317ef14a6bb..f04411fb004 100644
--- a/src/Samples/Directory.Build.props
+++ b/src/Samples/Directory.Build.props
@@ -1,17 +1,21 @@
 Ôªø<Project>
 
+  <!--This should be before importing parent properties, as it affects the output directory (defined in arcade SDK) -->
   <PropertyGroup>
     <!-- Use Samples subdirectory for samples in output folder -->
     <OutDirName>Samples\$(MSBuildProjectName)</OutDirName>
+  </PropertyGroup>
+
+  <!-- Import parent props -->
+  <Import Project="..\Directory.Build.props"/>
 
+  <PropertyGroup>
     <!-- Don't regulate package versions for samples -->
-    <EnableCentralPackageVersions>false</EnableCentralPackageVersions>
+    <ManagePackageVersionsCentrally>false</ManagePackageVersionsCentrally>
+    <ImportDirectoryPackagesProps>false</ImportDirectoryPackagesProps>
 
     <IsShipping>false</IsShipping>
     <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>
   </PropertyGroup>
 
-  <!-- Import parent props -->
-  <Import Project="..\Directory.Build.props"/>
-
 </Project>
diff --git a/src/Samples/PortableTask/Properties/AssemblyInfo.cs b/src/Samples/PortableTask/Properties/AssemblyInfo.cs
index 098449693bb..574e376635c 100644
--- a/src/Samples/PortableTask/Properties/AssemblyInfo.cs
+++ b/src/Samples/PortableTask/Properties/AssemblyInfo.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
 using System.Reflection;
+using System.Resources;
 
 // General Information about an assembly is controlled through the following 
 // set of attributes. Change these attribute values to modify the information
diff --git a/src/Samples/PortableTask/ShowItems.cs b/src/Samples/PortableTask/ShowItems.cs
index 15937c7a645..061f38bdb7d 100644
--- a/src/Samples/PortableTask/ShowItems.cs
+++ b/src/Samples/PortableTask/ShowItems.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System.Reflection;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
index 207ed556262..f90686a9a3b 100644
--- a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
+++ b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
@@ -2,14 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
-using System.Linq;
-using System.Globalization;
-using System.Text.RegularExpressions;
 using System.Diagnostics;
+using System.Globalization;
+using System.IO;
+using System.Linq;
 using System.Reflection;
-
+using System.Text.RegularExpressions;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
@@ -413,7 +412,7 @@ private static bool ShouldIgnoreProject(string projectPath)
         /// Store data about a particular task invocation
         /// </summary>
         [DebuggerDisplay("{TaskName} {TargetName} {TaskAssembly}")]
-        private class TaskData
+        private sealed class TaskData
         {
             public string TaskName;
             public string TargetName;
@@ -443,7 +442,7 @@ public override string ToString()
         /// Store data about a particular task registration
         /// </summary>
         [DebuggerDisplay("{TaskName} {TaskAssembly} {FilePath}")]
-        private class UsingTaskData
+        private sealed class UsingTaskData
         {
             public string TaskName;
             public string TaskAssembly;
diff --git a/src/Samples/TaskWithDependency/Properties/AssemblyInfo.cs b/src/Samples/TaskWithDependency/Properties/AssemblyInfo.cs
index ac44e52b0c3..ab5fb3ba759 100644
--- a/src/Samples/TaskWithDependency/Properties/AssemblyInfo.cs
+++ b/src/Samples/TaskWithDependency/Properties/AssemblyInfo.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
 using System.Reflection;
+using System.Resources;
 
 // General Information about an assembly is controlled through the following 
 // set of attributes. Change these attribute values to modify the information
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Build.cs b/src/Samples/XmlFileLogger/ObjectModel/Build.cs
index 5bcdc8135ce..2646251675a 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Build.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Build.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of an MSBuild overall build execution.
     /// </summary>
-    internal class Build : LogProcessNode
+    internal sealed class Build : LogProcessNode
     {
         /// <summary>
         /// A lookup table mapping of project identifiers to project nodes (which can be nested multiple layers). 
diff --git a/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs b/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
index 354fea86729..aef86f71d50 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of a task input parameter.
     /// </summary>
-    internal class InputParameter : TaskParameter
+    internal sealed class InputParameter : TaskParameter
     {
         /// <summary>
         /// Initializes a new instance of the <see cref="InputParameter"/> class.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Item.cs b/src/Samples/XmlFileLogger/ObjectModel/Item.cs
index c25ca8c5eea..2dff7d9e95d 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Item.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Item.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of an item/property with associated metadata (if any).
     /// </summary>
-    internal class Item
+    internal sealed class Item
     {
         /// <summary>
         /// The metadata associated with this Item
diff --git a/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs b/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
index 0d5150ec47c..562e546c4e4 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of a logged item group entry.
     /// </summary>
-    internal class ItemGroup : TaskParameter
+    internal sealed class ItemGroup : TaskParameter
     {
         /// <summary>
         /// Initializes a new instance of the <see cref="ItemGroup"/> class.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Message.cs b/src/Samples/XmlFileLogger/ObjectModel/Message.cs
index 378708d8ca9..16547fc5a49 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Message.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Message.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of a logged generic string output message.
     /// </summary>
-    internal class Message : ILogNode
+    internal sealed class Message : ILogNode
     {
         private readonly string _message;
         private readonly DateTime _timestamp;
diff --git a/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs b/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
index 5f51bf46ef8..1ba78bf6e2b 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of a task output item group.
     /// </summary>
-    internal class OutputItem : TaskParameter
+    internal sealed class OutputItem : TaskParameter
     {
         /// <summary>
         /// Initializes a new instance of the <see cref="OutputItem"/> class.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs b/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
index 3792dedb95e..f51b53e8c61 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of a task output property.
     /// </summary>
-    internal class OutputProperty : TaskParameter
+    internal sealed class OutputProperty : TaskParameter
     {
         /// <summary>
         /// Initializes a new instance of the <see cref="OutputProperty"/> class.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Project.cs b/src/Samples/XmlFileLogger/ObjectModel/Project.cs
index 8fcee5fe6d7..19081d2c14b 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Project.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Project.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of an MSBuild project execution.
     /// </summary>
-    internal class Project : LogProcessNode
+    internal sealed class Project : LogProcessNode
     {
         /// <summary>
         /// The full path to the MSBuild project file for this project.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Target.cs b/src/Samples/XmlFileLogger/ObjectModel/Target.cs
index 41d4a4a1d33..495fbfadcd8 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Target.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Target.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of an MSBuild target execution.
     /// </summary>
-    internal class Target : LogProcessNode
+    internal sealed class Target : LogProcessNode
     {
         /// <summary>
         /// Initializes a new instance of the <see cref="Target"/> class.
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Task.cs b/src/Samples/XmlFileLogger/ObjectModel/Task.cs
index dcc6982c577..6ac28f1ba1e 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Task.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Task.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// <summary>
     /// Class representation of an MSBuild task execution.
     /// </summary>
-    internal class Task : LogProcessNode
+    internal sealed class Task : LogProcessNode
     {
         /// <summary>
         /// The assembly from which the task originated.
diff --git a/src/Samples/XmlFileLogger/PropertyBag.cs b/src/Samples/XmlFileLogger/PropertyBag.cs
index d702f1edd11..8a99fe50b7a 100644
--- a/src/Samples/XmlFileLogger/PropertyBag.cs
+++ b/src/Samples/XmlFileLogger/PropertyBag.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Logging.StructuredLogger
     /// hierarchical way. (e.g. if the parameter is defined and identical in the parent, it is not
     /// stored in this instance). 
     /// </summary>
-    internal class PropertyBag
+    internal sealed class PropertyBag
     {
         /// <summary>
         /// The parent instance.
diff --git a/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs b/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
index a5569056a82..93a07cdac24 100644
--- a/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
+++ b/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.Logging.StructuredLogger
 {
-    internal class UnknownTaskParameterPrefixException : Exception
+    internal sealed class UnknownTaskParameterPrefixException : Exception
     {
         public UnknownTaskParameterPrefixException(string prefix)
             : base(string.Format("Unknown task parameter type: {0}", prefix))
diff --git a/src/Shared/AssemblyLoadInfo.cs b/src/Shared/AssemblyLoadInfo.cs
index d4b3413772c..be467ff2a20 100644
--- a/src/Shared/AssemblyLoadInfo.cs
+++ b/src/Shared/AssemblyLoadInfo.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
 using System.IO;
 using Microsoft.Build.BackEnd;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index aed07dfebdd..c63b0ff90a1 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -2,13 +2,13 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Text;
-using System.Reflection;
-using System.Globalization;
 using System.Collections.Generic;
 using System.Configuration.Assemblies;
-using System.Runtime.Serialization;
+using System.Globalization;
 using System.IO;
+using System.Reflection;
+using System.Runtime.Serialization;
+using System.Text;
 using Microsoft.Build.BackEnd;
 
 #nullable disable
diff --git a/src/Shared/BinaryReaderExtensions.cs b/src/Shared/BinaryReaderExtensions.cs
index cd95cc40864..cb3857ff100 100644
--- a/src/Shared/BinaryReaderExtensions.cs
+++ b/src/Shared/BinaryReaderExtensions.cs
@@ -75,5 +75,11 @@ public static BuildEventContext ReadBuildEventContext(this BinaryReader reader)
             var buildEventContext = new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, targetId, taskId);
             return buildEventContext;
         }
+
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        public static unsafe Guid ReadGuid(this BinaryReader reader)
+        {
+            return new Guid(reader.ReadBytes(sizeof(Guid)));
+        }
     }
 }
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index e7bf01731cc..055d34bb141 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -4,11 +4,11 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Globalization;
 using System.IO;
 using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Globalization;
 
 #nullable disable
 
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 41636982688..2a221d573a5 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -71,5 +71,19 @@ public static void WriteBuildEventContext(this BinaryWriter writer, BuildEventCo
             writer.Write(context.ProjectInstanceId);
             writer.Write(context.EvaluationId);
         }
+
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        public static void WriteGuid(this BinaryWriter writer, Guid value)
+        {
+            Guid val = value;
+            unsafe
+            {
+                byte* ptr = (byte*)&val;
+                for (int i = 0; i < sizeof(Guid); i++, ptr++)
+                {
+                    writer.Write(*ptr);
+                }
+            }
+        }
     }
 }
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 493ab1758b5..a4c00b30b76 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -2,12 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
 using System.Linq;
-using System.Collections.Generic;
 using System.Text.RegularExpressions;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
 
@@ -15,7 +14,7 @@
 
 namespace Microsoft.Build.Shared
 {
-    internal class BuildEnvironmentHelper
+    internal sealed class BuildEnvironmentHelper
     {
         // Since this class is added as 'link' to shared source in multiple projects,
         // MSBuildConstants.CurrentVisualStudioVersion is not available in all of them.
@@ -526,7 +525,7 @@ internal enum BuildEnvironmentMode
     /// <summary>
     /// Defines the current environment for build tools.
     /// </summary>
-    internal class BuildEnvironment
+    internal sealed class BuildEnvironment
     {
         public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath, bool runningTests, bool runningInVisualStudio, string visualStudioPath)
         {
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index fa13e50f7d1..b10887f23c3 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -674,12 +674,69 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int
             return defaultValue;
         }
 
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T>(string format, T arg0)
+        {
+            Trace(nodeId: -1, format, arg0);
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T>(int nodeId, string format, T arg0)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1>(string format, T0 arg0, T1 arg1)
+        {
+            Trace(nodeId: -1, format, arg0, arg1);
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1>(int nodeId, string format, T0 arg0, T1 arg1)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0, arg1));
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)
+        {
+            Trace(nodeId: -1, format, arg0, arg1, arg2);
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        internal static void Trace<T0, T1, T2>(int nodeId, string format, T0 arg0, T1 arg1, T2 arg2)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, string.Format(format, arg0, arg1, arg2));
+            }
+        }
+
         /// <summary>
         /// Writes trace information to a log file
         /// </summary>
         internal static void Trace(string format, params object[] args)
         {
-            Trace(/* nodeId */ -1, format, args);
+            Trace(nodeId: -1, format, args);
         }
 
         /// <summary>
@@ -689,49 +746,65 @@ internal static void Trace(int nodeId, string format, params object[] args)
         {
             if (s_trace)
             {
-                lock (s_traceLock)
-                {
-                    s_debugDumpPath ??=
+                string message = string.Format(CultureInfo.CurrentCulture, format, args);
+                TraceCore(nodeId, message);
+            }
+        }
+
+        internal static void Trace(int nodeId, string message)
+        {
+            if (s_trace)
+            {
+                TraceCore(nodeId, message);
+            }
+        }
+
+        /// <summary>
+        /// Writes trace information to a log file
+        /// </summary>
+        private static void TraceCore(int nodeId, string message)
+        {
+            lock (s_traceLock)
+            {
+                s_debugDumpPath ??=
 #if CLR2COMPATIBILITY
-                        Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+                    Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #else
                         DebugUtils.DebugPath;
 #endif
 
-                    if (String.IsNullOrEmpty(s_debugDumpPath))
-                    {
-                        s_debugDumpPath = FileUtilities.TempFileDirectory;
-                    }
-                    else
-                    {
-                        Directory.CreateDirectory(s_debugDumpPath);
-                    }
+                if (String.IsNullOrEmpty(s_debugDumpPath))
+                {
+                    s_debugDumpPath = FileUtilities.TempFileDirectory;
+                }
+                else
+                {
+                    Directory.CreateDirectory(s_debugDumpPath);
+                }
 
-                    try
+                try
+                {
+                    string fileName = @"MSBuild_CommTrace_PID_{0}";
+                    if (nodeId != -1)
                     {
-                        string fileName = @"MSBuild_CommTrace_PID_{0}";
-                        if (nodeId != -1)
-                        {
-                            fileName += "_node_" + nodeId;
-                        }
+                        fileName += "_node_" + nodeId;
+                    }
 
-                        fileName += ".txt";
+                    fileName += ".txt";
 
-                        using (StreamWriter file = FileUtilities.OpenWrite(
-                            String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
-                        {
-                            string message = String.Format(CultureInfo.CurrentCulture, format, args);
-                            long now = DateTime.UtcNow.Ticks;
-                            float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
-                            s_lastLoggedTicks = now;
-                            file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
-                        }
-                    }
-                    catch (IOException)
+                    using (StreamWriter file = FileUtilities.OpenWrite(
+                        String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
                     {
-                        // Ignore
+                        long now = DateTime.UtcNow.Ticks;
+                        float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
+                        s_lastLoggedTicks = now;
+                        file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
                     }
                 }
+                catch (IOException)
+                {
+                    // Ignore
+                }
             }
         }
 
diff --git a/src/Shared/CoreCLRAssemblyLoader.cs b/src/Shared/CoreCLRAssemblyLoader.cs
index f1bd9b9fca4..27bdb7e93e3 100644
--- a/src/Shared/CoreCLRAssemblyLoader.cs
+++ b/src/Shared/CoreCLRAssemblyLoader.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared.FileSystem;
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
 using System.Reflection;
 using System.Runtime.Loader;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
 
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index 3dbb923f690..cd81d66dc0c 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System;
 using System.Diagnostics;
 using System.IO;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Shared/Debugging/PrintLineDebugger.cs b/src/Shared/Debugging/PrintLineDebugger.cs
index e0aeb5eab73..ea3b9735314 100644
--- a/src/Shared/Debugging/PrintLineDebugger.cs
+++ b/src/Shared/Debugging/PrintLineDebugger.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Shared.Debugging
     ///     tools like VS or CLI.
     ///     See example usages in PrintLineDebugger_Tests
     /// </summary>
-    internal class PrintLineDebugger : IDisposable
+    internal sealed class PrintLineDebugger : IDisposable
     {
         private static readonly Lazy<PropertyInfo> CommonWriterProperty = new Lazy<PropertyInfo>(
             () =>
diff --git a/src/Shared/Debugging/PrintLineDebuggerWriters.cs b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
index ce90f8a074d..e0dc425c320 100644
--- a/src/Shared/Debugging/PrintLineDebuggerWriters.cs
+++ b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Shared.Debugging
     /// </summary>
     internal static class PrintLineDebuggerWriters
     {
-        public class IdBasedFilesWriter
+        public sealed class IdBasedFilesWriter
         {
             private string LogFileRoot { get; }
 
@@ -46,7 +46,7 @@ public static IdBasedFilesWriter FromArtifactLogDirectory()
             }
         }
 
-        public class CompositeWriter
+        public sealed class CompositeWriter
         {
             private IEnumerable<CommonWriterType> Writers { get; }
 
diff --git a/src/Shared/EncodingStringWriter.cs b/src/Shared/EncodingStringWriter.cs
index 3955798c458..18ea74e0502 100644
--- a/src/Shared/EncodingStringWriter.cs
+++ b/src/Shared/EncodingStringWriter.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Shared
     /// StringWriter class that allows Encoding to be specified. In the standard StringWriter
     /// class only UTF16 is allowed.
     /// </summary>
-    internal class EncodingStringWriter : StringWriter
+    internal sealed class EncodingStringWriter : StringWriter
     {
         /// <summary>
         /// Default ctor (Encoding = UTF8)
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 1dc5a2b9c8a..048974719bb 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -3,11 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using System.IO;
 using System.Diagnostics;
 using System.Globalization;
+using System.IO;
 using System.Threading;
-
 using Microsoft.Build.Framework;
 
 #nullable disable
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 660dbd5327d..36613d4cd52 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -2311,7 +2311,7 @@ private static bool IsFullFileSystemScan(int directoryPartIndex, int directoryPa
         /// Returns true if the given character is a valid drive letter.
         /// </summary>
         /// <remarks>
-        /// Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/PathInternal.Windows.cs#L77-L83
+        /// Copied from https://github.com/dotnet/corefx/blob/b8b81a66738bb10ef0790023598396861d92b2c4/src/Common/src/System/IO/PathInternal.Windows.cs#L53-L59
         /// </remarks>
         private static bool IsValidDriveChar(char value)
         {
diff --git a/src/Shared/FileSystem/CachingFileSystemWrapper.cs b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
index 9f43fe26b65..9c143cb79e1 100644
--- a/src/Shared/FileSystem/CachingFileSystemWrapper.cs
+++ b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Shared.FileSystem
 {
-    internal class CachingFileSystemWrapper : IFileSystem
+    internal sealed class CachingFileSystemWrapper : IFileSystem
     {
         private readonly IFileSystem _fileSystem;
         private readonly ConcurrentDictionary<string, bool> _existenceCache = new ConcurrentDictionary<string, bool>();
diff --git a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
index b6028669729..efc70334ee7 100644
--- a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
+++ b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
@@ -15,13 +15,13 @@ namespace Microsoft.Build.Shared.FileSystem
     /// TODO Remove this class and replace with WindowsFileSystem. Test perf to ensure no regressions.
     /// </summary>
     [SupportedOSPlatform("windows")]
-    internal class MSBuildOnWindowsFileSystem : IFileSystem
+    internal sealed class MSBuildOnWindowsFileSystem : IFileSystem
     {
         private static readonly MSBuildOnWindowsFileSystem Instance = new MSBuildOnWindowsFileSystem();
 
         public static MSBuildOnWindowsFileSystem Singleton() => Instance;
 
-        protected MSBuildOnWindowsFileSystem() { }
+        public MSBuildOnWindowsFileSystem() { }
 
         public TextReader ReadFile(string path)
         {
diff --git a/src/Shared/FileSystem/WindowsFileSystem.cs b/src/Shared/FileSystem/WindowsFileSystem.cs
index 6185124d4f1..aa350505a0d 100644
--- a/src/Shared/FileSystem/WindowsFileSystem.cs
+++ b/src/Shared/FileSystem/WindowsFileSystem.cs
@@ -30,7 +30,7 @@ internal enum FileArtifactType : byte
     /// TODO For potential extra perf gains, provide native implementations for all IFileSystem methods and stop inheriting from ManagedFileSystem
     /// </summary>
     [SupportedOSPlatform("windows")]
-    internal class WindowsFileSystem : ManagedFileSystem
+    internal sealed class WindowsFileSystem : ManagedFileSystem
     {
         private static readonly WindowsFileSystem Instance = new();
 
diff --git a/src/Shared/LanguageParser/CSharptokenEnumerator.cs b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
index 0dbcda4b003..1e3e70f5c03 100644
--- a/src/Shared/LanguageParser/CSharptokenEnumerator.cs
+++ b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Diagnostics;
+using System.IO;
 
 #nullable disable
 
diff --git a/src/Shared/LanguageParser/CSharptokenizer.cs b/src/Shared/LanguageParser/CSharptokenizer.cs
index d609157d3d2..06519da0616 100644
--- a/src/Shared/LanguageParser/CSharptokenizer.cs
+++ b/src/Shared/LanguageParser/CSharptokenizer.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.IO;
 using System.Collections;
+using System.IO;
 
 #nullable disable
 
diff --git a/src/Shared/LanguageParser/VisualBasictokenizer.cs b/src/Shared/LanguageParser/VisualBasictokenizer.cs
index fc76012673e..59b51bbb49b 100644
--- a/src/Shared/LanguageParser/VisualBasictokenizer.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenizer.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.IO;
 using System.Collections;
+using System.IO;
 
 #nullable disable
 
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 9938e6ac170..b885d081a74 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -139,7 +139,12 @@ internal enum LoggingEventType : int
         /// <summary>
         /// Event is a ResponseFileUsedEventArgs
         /// </summary>
-        ResponseFileUsedEvent = 20
+        ResponseFileUsedEvent = 20,
+
+        /// <summary>
+        /// Event is an AssemblyLoadBuildEventArgs
+        /// </summary>
+        AssemblyLoadEvent = 21,
     }
     #endregion
 
@@ -332,9 +337,9 @@ internal void WriteToStream(ITranslator translator)
                 bool eventCanSerializeItself = methodInfo != null;
 
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
-                if (_buildEvent is ProjectEvaluationStartedEventArgs ||
-                    _buildEvent is ProjectEvaluationFinishedEventArgs ||
-                    _buildEvent is EnvironmentVariableReadEventArgs)
+                if (_buildEvent is ProjectEvaluationStartedEventArgs
+                    or ProjectEvaluationFinishedEventArgs
+                    or EnvironmentVariableReadEventArgs)
                 {
                     // switch to serialization methods that we provide in this file
                     // and don't use the WriteToStream inherited from LazyFormattedBuildEventArgs
@@ -524,6 +529,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
                 LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
+                LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
                 LoggingEventType.ProjectEvaluationStartedEvent => new ProjectEvaluationStartedEventArgs(),
                 LoggingEventType.ProjectEvaluationFinishedEvent => new ProjectEvaluationFinishedEventArgs(),
@@ -588,6 +594,10 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.Telemetry;
             }
+            else if (eventType == typeof(AssemblyLoadBuildEventArgs))
+            {
+                return LoggingEventType.AssemblyLoadEvent;
+            }
 #endif
             else if (eventType == typeof(TargetStartedEventArgs))
             {
diff --git a/src/Shared/MSBuildLoadContext.cs b/src/Shared/MSBuildLoadContext.cs
index 6bbdaa7983e..9bde8a4db14 100644
--- a/src/Shared/MSBuildLoadContext.cs
+++ b/src/Shared/MSBuildLoadContext.cs
@@ -1,14 +1,13 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared.FileSystem;
-
 using System;
 using System.Collections.Immutable;
 using System.IO;
 using System.Reflection;
 using System.Runtime.Loader;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared.FileSystem;
 
 namespace Microsoft.Build.Shared
 {
diff --git a/src/Shared/Modifiers.cs b/src/Shared/Modifiers.cs
index 24ed8cc9a85..785e7c42ce1 100644
--- a/src/Shared/Modifiers.cs
+++ b/src/Shared/Modifiers.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
-using System.Diagnostics.CodeAnalysis;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
+using System.IO;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Shared/ProjectWriter.cs b/src/Shared/ProjectWriter.cs
index bcbcf374cb2..fa2e6f76a1c 100644
--- a/src/Shared/ProjectWriter.cs
+++ b/src/Shared/ProjectWriter.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.IO;
-using System.Xml;
 using System.Text;
 using System.Text.RegularExpressions;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Shared/ReadOnlyCollection.cs b/src/Shared/ReadOnlyCollection.cs
index 452b28889d2..32d751d2749 100644
--- a/src/Shared/ReadOnlyCollection.cs
+++ b/src/Shared/ReadOnlyCollection.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
-using System.Collections;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Shared/ReadOnlyEmptyCollection.cs b/src/Shared/ReadOnlyEmptyCollection.cs
index a29a5f75867..128480dca68 100644
--- a/src/Shared/ReadOnlyEmptyCollection.cs
+++ b/src/Shared/ReadOnlyEmptyCollection.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using System.Collections;
+using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Shared/RegistryDelegates.cs b/src/Shared/RegistryDelegates.cs
index a3eb5d25133..3222f6e2600 100644
--- a/src/Shared/RegistryDelegates.cs
+++ b/src/Shared/RegistryDelegates.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Win32;
 using System.Collections.Generic;
+using Microsoft.Win32;
 
 namespace Microsoft.Build.Shared
 {
diff --git a/src/Shared/StrongNameHelpers.cs b/src/Shared/StrongNameHelpers.cs
index f72147f976d..102681f6050 100644
--- a/src/Shared/StrongNameHelpers.cs
+++ b/src/Shared/StrongNameHelpers.cs
@@ -4,10 +4,10 @@
 #if FEATURE_STRONG_NAMES
 
 using System;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
 using System.Diagnostics.CodeAnalysis;
 using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
 
 #nullable disable
 
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index 0dcfd58ba9d..b74e7ce01d8 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Reflection;
-
 using Microsoft.Build.Framework;
 
 #nullable disable
@@ -52,6 +51,7 @@ internal static ITask CreateTask(
             LogError logError,
 #if FEATURE_APPDOMAIN
             AppDomainSetup appDomainSetup,
+            Action<AppDomain> appDomainCreated,
 #endif
             bool isOutOfProc
 #if FEATURE_APPDOMAIN
@@ -118,6 +118,7 @@ bool isOutOfProc
 
                         // Hook up last minute dumping of any exceptions 
                         taskAppDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
+                        appDomainCreated?.Invoke(taskAppDomain);
                     }
                 }
                 else
diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index 5b20b80d4a4..c73af5ba444 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -210,7 +210,7 @@ internal static void CopyDirectory(string source, string dest)
             }
         }
 
-        public class TempWorkingDirectory : IDisposable
+        public sealed class TempWorkingDirectory : IDisposable
         {
             public string Path { get; }
 
diff --git a/src/Shared/UnitTests/BuildEventArgsExtension.cs b/src/Shared/UnitTests/BuildEventArgsExtension.cs
index 4ee4e78d47e..eb492bbecd7 100644
--- a/src/Shared/UnitTests/BuildEventArgsExtension.cs
+++ b/src/Shared/UnitTests/BuildEventArgsExtension.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework;
 using System.Collections.Generic;
+using Microsoft.Build.Framework;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
diff --git a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
index 7b77647dd70..9589762b100 100644
--- a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
+++ b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
@@ -6,8 +6,8 @@
 using System.IO;
 using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Collections;
-using Xunit;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 93df7aebdc3..c06703a4a66 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -28,9 +28,9 @@ public partial class TestEnvironment
         private object _resetBuildManager = new ResetDefaultBuildManager();
 #pragma warning restore CA1823 // Avoid unused private fields
 
-        private class ResetDefaultBuildManager
+        private sealed class ResetDefaultBuildManager
         {
-            protected internal static FieldInfo SingletonField;
+            internal static FieldInfo SingletonField;
 
             public ResetDefaultBuildManager()
             {
@@ -153,8 +153,9 @@ public override void Revert()
         {
             var result = new List<(ILogger logger, Func<string> textGetter)>();
 
-            result.Add(GetMockLogger());
+            // Add binlogger first - so that it get's all messages (the logger initialization messages goes only to so far initialized loggers)
             result.Add(GetBinaryLogger());
+            result.Add(GetMockLogger());
 
 #if MICROSOFT_BUILD_ENGINE_UNITTESTS
             result.Add(GetSerialLogger());
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index b29b4238e8e..26e8d9bd848 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -1,18 +1,19 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
-using Shouldly;
 using System;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.IO;
 using System.Linq;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -68,7 +69,7 @@ public void GetFilesPatternMatching(string pattern, int expectedMatchCount)
         }
 
 #if FEATURE_SYMLINK_TARGET
-        [Fact]
+        [RequiresSymbolicLinksFact]
         public void DoNotFollowRecursiveSymlinks()
         {
             TransientTestFolder testFolder = _env.CreateFolder();
@@ -822,14 +823,9 @@ public void Regress162390()
         * Convert a short local path to a long path.
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForShortLocalPath()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"D:\LONGDI~1\LONGSU~1\LONGFI~1.TXT",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -859,14 +855,9 @@ public void GetLongFileNameForLongLocalPath()
         * Convert a short UNC path to a long path.
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForShortUncPath()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"\\server\share\LONGDI~1\LONGSU~1\LONGFI~1.TXT",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -896,14 +887,9 @@ public void GetLongFileNameForLongUncPath()
         * Convert a short relative path to a long path
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForRelativePath()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\LONGSU~1\LONGFI~1.TXT",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -917,14 +903,9 @@ public void GetLongFileNameForRelativePath()
         * Convert a short relative path with a trailing backslash to a long path
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForRelativePathPreservesTrailingSlash()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\LONGSU~1\",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -938,14 +919,9 @@ public void GetLongFileNameForRelativePathPreservesTrailingSlash()
         * Convert a short relative path with doubled embedded backslashes to a long path
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForRelativePathPreservesExtraSlashes()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"LONGDI~1\\LONGSU~1\\",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -959,14 +935,9 @@ public void GetLongFileNameForRelativePathPreservesExtraSlashes()
         * Only part of the path might be short.
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameForMixedLongAndShort()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"c:\apple\banana\tomato\pomegr~1\orange\",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -981,14 +952,9 @@ public void GetLongFileNameForMixedLongAndShort()
         * as if they were already a long file name.
         *
         */
-        [Fact]
+        [WindowsOnlyFact("Short names are for Windows only.")]
         public void GetLongFileNameWherePartOfThePathDoesntExist()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Short names are for Windows only"
-            }
-
             string longPath = FileMatcher.GetLongPathName(
                 @"c:\apple\banana\tomato\pomegr~1\orange\chocol~1\vanila~1",
                 new FileMatcher.GetFileSystemEntries(FileMatcherTest.GetFileSystemEntries));
@@ -1338,7 +1304,6 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
             }
         }
 
-        [PlatformSpecific(TestPlatforms.Any)]
         [Theory]
         [InlineData(@"\", "**")]
         [InlineData(@"\\", "**")]
@@ -1350,8 +1315,7 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
         public void DriveEnumeratingWildcardIsObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
             DriveEnumeratingWildcardIsObserved(directoryPart, wildcardPart);
 
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(@"\", "**")]
         [InlineData(@"c:\", "**")]
         [InlineData(@"c:\\", "**")]
@@ -1366,8 +1330,7 @@ public void DriveEnumeratingWildcardIsObservedOnWindows(string directoryPart, st
         private void DriveEnumeratingWildcardIsObserved(string directoryPart, string wildcardPart) =>
             FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart).ShouldBeTrue();
 
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         [InlineData(@"\", "**")]
         [InlineData("/", "**/*.cs")]
         [InlineData("/", "**")]
@@ -1415,8 +1378,7 @@ private void DriveEnumeratingWildcardFailsAndReturns(string directoryPart, strin
         }
 
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(@"z:\**")]
         [InlineData(@"z:\\**")]
         [InlineData(@"z:\\\\\\\\**")]
@@ -1453,7 +1415,6 @@ public void DriveEnumeratingWildcardIsLoggedOnWindows(string driveEnumeratingWil
             }
         }
 
-        [PlatformSpecific(TestPlatforms.Any)]
         [Theory]
         [InlineData(@"\", @"*\*.cs")]
         [InlineData(@"\\", @"*\*.cs")]
@@ -1464,8 +1425,7 @@ public void DriveEnumeratingWildcardIsLoggedOnWindows(string driveEnumeratingWil
         public void DriveEnumeratingWildcardIsNotObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
             DriveEnumeratingWildcardIsNotObserved(directoryPart, wildcardPart);
 
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         [InlineData(@"c:\", "**")]
         [InlineData(@"c:\\", "**")]
         [InlineData(@"c:\\\\\\\\", "**")]
@@ -1899,8 +1859,7 @@ public void GetFileSpecInfoCommon(
                 expectedIsLegalFileSpec);
         }
 
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         // Escape pecial regex characters valid in Windows paths
         [InlineData(
             @"$()+.[^{\?$()+.[^{\$()+.[^{",
@@ -1938,8 +1897,7 @@ public void GetFileSpecInfoWindows(
                 expectedIsLegalFileSpec);
         }
 
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         // Escape regex characters valid in Unix paths
         [InlineData(
             @"$()+.[^{|\?$()+.[^{|\$()+.[^{|",
@@ -2012,7 +1970,7 @@ private void TestGetFileSpecInfo(
         /// It accepts multiple sets of files and keeps track of how many files were "hit"
         /// In this case, "hit" means that the caller asked for that file directly.
         /// </summary>
-        internal class MockFileSystem
+        internal sealed class MockFileSystem
         {
             /// <summary>
             /// Array of files (set1)
@@ -2655,7 +2613,7 @@ private static bool IsFileMatchAssertIfIllegal(
 
         #endregion
 
-        private class FileSystemAdapter : IFileSystem
+        private sealed class FileSystemAdapter : IFileSystem
         {
             private readonly MockFileSystem _mockFileSystem;
 
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 199b46c85f1..a99d79be223 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -4,11 +4,12 @@
 using System;
 using System.Globalization;
 using System.IO;
-using System.Threading;
 using System.Linq;
+using System.Threading;
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -20,7 +21,6 @@ public class FileUtilities_Tests
         /// Exercises FileUtilities.ItemSpecModifiers.GetItemSpecModifier
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void GetItemSpecModifier()
@@ -150,9 +150,7 @@ public void MakeRelativeTests()
         /// <summary>
         /// Exercises FileUtilities.ItemSpecModifiers.GetItemSpecModifier on a bad path.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // On Unix there no invalid file name characters
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void GetItemSpecModifierOnBadPath()
         {
             Assert.Throws<InvalidOperationException>(() =>
@@ -163,9 +161,7 @@ public void GetItemSpecModifierOnBadPath()
         /// <summary>
         /// Exercises FileUtilities.ItemSpecModifiers.GetItemSpecModifier on a bad path.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // On Unix there no invalid file name characters
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void GetItemSpecModifierOnBadPath2()
         {
             Assert.Throws<InvalidOperationException>(() =>
@@ -219,7 +215,6 @@ public void GetFileInfoNoThrowNonexistent()
         /// Exercises FileUtilities.EndsWithSlash
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void EndsWithSlash()
@@ -244,7 +239,6 @@ public void EndsWithSlash()
         /// Exercises FileUtilities.GetDirectory
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void GetDirectoryWithTrailingSlash()
@@ -294,9 +288,7 @@ public void HasExtension_WhenFileNameDoesNotHaveExtension_ReturnsFalse(string fi
             Assert.False(result);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void HasExtension_WhenInvalidFileName_ThrowsArgumentException()
         {
             Assert.Throws<ArgumentException>(() =>
@@ -417,8 +409,7 @@ public void CheckDerivableItemSpecModifiers()
             Assert.False(FileUtilities.ItemSpecModifiers.IsDerivableItemSpecModifier("recursivedir"));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void NormalizePathThatFitsIntoMaxPath()
         {
             string currentDirectory = @"c:\aardvark\aardvark\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890";
@@ -428,9 +419,7 @@ public void NormalizePathThatFitsIntoMaxPath()
             Assert.Equal(fullPath, FileUtilities.NormalizePath(Path.Combine(currentDirectory, filePath)));
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/4363")]
+        [LongPathSupportDisabledFact(fullFrameworkOnly: true, additionalMessage: "https://github.com/dotnet/msbuild/issues/4363")]
         public void NormalizePathThatDoesntFitIntoMaxPath()
         {
             Assert.Throws<PathTooLongException>(() =>
@@ -445,8 +434,7 @@ public void NormalizePathThatDoesntFitIntoMaxPath()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetItemSpecModifierRootDirThatFitsIntoMaxPath()
         {
             string currentDirectory = @"c:\aardvark\aardvark\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890\1234567890";
@@ -474,9 +462,7 @@ public void NormalizePathEmpty()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void NormalizePathBadUNC1()
         {
             Assert.Throws<ArgumentException>(() =>
@@ -485,9 +471,7 @@ public void NormalizePathBadUNC1()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void NormalizePathBadUNC2()
         {
             Assert.Throws<ArgumentException>(() =>
@@ -496,9 +480,7 @@ public void NormalizePathBadUNC2()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void NormalizePathBadUNC3()
         {
             Assert.Throws<ArgumentException>(() =>
@@ -507,15 +489,13 @@ public void NormalizePathBadUNC3()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void NormalizePathGoodUNC()
         {
             Assert.Equal(@"\\localhost\share", FileUtilities.NormalizePath(@"\\localhost\share"));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void NormalizePathTooLongWithDots()
         {
             string longPart = new string('x', 300);
@@ -523,8 +503,7 @@ public void NormalizePathTooLongWithDots()
         }
 
 #if FEATURE_LEGACY_GETFULLPATH
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/4205")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact(Skip = "https://github.com/dotnet/msbuild/issues/4205")]
         public void NormalizePathBadGlobalroot()
         {
             Assert.Throws<ArgumentException>(() =>
@@ -542,9 +521,7 @@ From Path.cs
         }
 #endif
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486.")]
         public void NormalizePathInvalid()
         {
             string filePath = @"c:\aardvark\|||";
@@ -555,8 +532,7 @@ public void NormalizePathInvalid()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void CannotNormalizePathWithNewLineAndSpace()
         {
             string filePath = "\r\n      C:\\work\\sdk3\\artifacts\\tmp\\Debug\\SimpleNamesWi---6143883E\\NETFrameworkLibrary\\bin\\Debug\\net462\\NETFrameworkLibrary.dll\r\n      ";
@@ -595,7 +571,6 @@ public void FileOrDirectoryExistsNoThrow()
         // These tests will need to be redesigned for Linux
 
         [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
-        [Trait("Category", "mono-osx-failing")]
         public void FileOrDirectoryExistsNoThrowTooLongWithDots()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3)).Length;
@@ -611,7 +586,6 @@ public void FileOrDirectoryExistsNoThrowTooLongWithDots()
         }
 
         [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
-        [Trait("Category", "mono-osx-failing")]
         public void FileOrDirectoryExistsNoThrowTooLongWithDotsRelative()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3)).Length;
@@ -665,7 +639,6 @@ public void DirectoryExistsNoThrowTooLongWithDots()
         }
 
         [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
-        [Trait("Category", "mono-osx-failing")]
         public void DirectoryExistsNoThrowTooLongWithDotsRelative()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3)).Length;
@@ -702,7 +675,6 @@ public static bool RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241()
         }
 
         [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
-        [Trait("Category", "mono-osx-failing")]
         public void FileExistsNoThrowTooLongWithDots()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3) + @"\..\explorer.exe").Length;
@@ -718,7 +690,6 @@ public void FileExistsNoThrowTooLongWithDots()
         }
 
         [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
-        [Trait("Category", "mono-osx-failing")]
         public void FileExistsNoThrowTooLongWithDotsRelative()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3) + @"\..\explorer.exe").Length;
@@ -746,7 +717,6 @@ public void FileExistsNoThrowTooLongWithDotsRelative()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetFileInfoNoThrowTooLongWithDots()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3) + @"\..\explorer.exe").Length;
@@ -762,7 +732,6 @@ public void GetFileInfoNoThrowTooLongWithDots()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetFileInfoNoThrowTooLongWithDotsRelative()
         {
             int length = (Environment.SystemDirectory + @"\" + @"\..\..\..\" + Environment.SystemDirectory.Substring(3) + @"\..\explorer.exe").Length;
@@ -884,7 +853,6 @@ public void GenerateTempFileNameWithExtensionNoPeriod()
         /// Extension is invalid
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void GenerateTempBatchFileWithBadExtension()
@@ -899,7 +867,6 @@ public void GenerateTempBatchFileWithBadExtension()
         /// Directory is invalid
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void GenerateTempBatchFileWithBadDirectory()
@@ -910,8 +877,7 @@ public void GenerateTempBatchFileWithBadDirectory()
             });
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void AbsolutePathLooksLikeUnixPathOnUnix()
         {
             var secondSlash = SystemSpecificAbsolutePath.Substring(1).IndexOf(Path.DirectorySeparatorChar) + 1;
@@ -921,8 +887,7 @@ public void AbsolutePathLooksLikeUnixPathOnUnix()
             Assert.True(FileUtilities.LooksLikeUnixFilePath(rootLevelPath));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void PathDoesNotLookLikeUnixPathOnWindows()
         {
             Assert.False(FileUtilities.LooksLikeUnixFilePath(SystemSpecificAbsolutePath));
@@ -930,8 +895,7 @@ public void PathDoesNotLookLikeUnixPathOnWindows()
             Assert.False(FileUtilities.LooksLikeUnixFilePath("/root"));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void RelativePathLooksLikeUnixPathOnUnixWithBaseDirectory()
         {
             string filePath = ObjectModelHelpers.CreateFileInTempProjectDirectory("first/second/file.txt", String.Empty);
@@ -961,8 +925,7 @@ public void RelativePathLooksLikeUnixPathOnUnixWithBaseDirectory()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void RelativePathMaybeAdjustFilePathWithBaseDirectory()
         {
             // <tmp_dir>/first/second/file.txt
diff --git a/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs b/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
new file mode 100644
index 00000000000..7a14d49dd74
--- /dev/null
+++ b/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
@@ -0,0 +1,41 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+using Xunit;
+using Xunit.NetCore.Extensions;
+
+namespace Microsoft.Build.UnitTests
+{
+    /// <summary>
+    ///  This test should be run only on Windows, and when long path support is enabled.
+    ///  It is possible to conditionally restrict the fact to be run only on full .NET Framework.
+    /// </summary>
+    public class LongPathSupportDisabledFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="LongPathSupportDisabledFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        /// <param name="fullFrameworkOnly"><see langword="true"/> if the test can be run only on full framework. The default value is <see langword="false"/>.</param>
+        public LongPathSupportDisabledFactAttribute(string? additionalMessage = null, bool fullFrameworkOnly = false)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test only runs on Windows and when long path support is disabled.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+
+            if (fullFrameworkOnly && !CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
+            {
+                this.Skip = "This test only runs on full .NET Framework and when long path support is disabled.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+
+            if (!NativeMethodsShared.IsMaxPathLegacyWindows())
+            {
+                this.Skip = "This test only runs when long path support is disabled.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index db10c0e6d6d..9a9bec6d5c9 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -167,11 +167,7 @@ internal string FullLog
          * The level of detail to show in the event log.
          *
          */
-        public LoggerVerbosity Verbosity
-        {
-            get => LoggerVerbosity.Normal;
-            set {/* do nothing */}
-        }
+        public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Normal;
 
         /*
          * Property:    Parameters
@@ -226,11 +222,12 @@ public void Shutdown()
         }
         #endregion
 
-        public MockLogger(ITestOutputHelper testOutputHelper = null, bool profileEvaluation = false, bool printEventsToStdout = true)
+        public MockLogger(ITestOutputHelper testOutputHelper = null, bool profileEvaluation = false, bool printEventsToStdout = true, LoggerVerbosity verbosity = LoggerVerbosity.Normal)
         {
             _testOutputHelper = testOutputHelper;
             _profileEvaluation = profileEvaluation;
             _printEventsToStdout = printEventsToStdout;
+            Verbosity = verbosity;
         }
 
         public List<Action<object, BuildEventArgs>> AdditionalHandlers { get; set; } = new List<Action<object, BuildEventArgs>>();
diff --git a/src/Shared/UnitTests/NativeMethodsShared_Tests.cs b/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
index e93424bcca7..fc4c92ed88b 100644
--- a/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
+++ b/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
@@ -5,9 +5,10 @@
 using System.Diagnostics;
 using System.IO;
 using System.Runtime.InteropServices;
-
+using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 
 
@@ -30,14 +31,10 @@ public sealed class NativeMethodsShared_Tests
         /// Verify that getProcAddress works, bug previously was due to a bug in the attributes used to pinvoke the method
         /// when that bug was in play this test would fail.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("No Kernel32.dll except on Windows.")]
+        [SupportedOSPlatform("windows")] // bypass CA1416: Validate platform compatibility
         public void TestGetProcAddress()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "No Kernel32.dll except on Windows"
-            }
-
             IntPtr kernel32Dll = NativeMethodsShared.LoadLibrary("kernel32.dll");
             try
             {
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index ac61dc8380c..31ce5b63c29 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -12,8 +12,6 @@
 using System.Threading;
 using System.Threading.Tasks;
 using System.Xml;
-
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
@@ -24,9 +22,11 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -206,7 +206,7 @@ internal interface ITestItem
             string GetMetadataValue(string key);
         }
 
-        internal class ProjectItemTestItemAdapter : ITestItem
+        internal sealed class ProjectItemTestItemAdapter : ITestItem
         {
             private readonly ProjectItem _projectInstance;
 
@@ -225,7 +225,7 @@ public static implicit operator ProjectItemTestItemAdapter(ProjectItem pi)
             }
         }
 
-        internal class ProjectItemInstanceTestItemAdapter : ITestItem
+        internal sealed class ProjectItemInstanceTestItemAdapter : ITestItem
         {
             private readonly ProjectItemInstance _projectInstance;
 
@@ -671,8 +671,8 @@ internal static ProjectRootElement CreateInMemoryProjectRootElement(string proje
         /// <summary>
         /// Create a project in memory. Load up the given XML.
         /// </summary>
-        /// <param name="xml"></param>
-        /// <returns></returns>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
         internal static Project CreateInMemoryProject(string xml)
         {
             return CreateInMemoryProject(xml, new ConsoleLogger());
@@ -681,42 +681,52 @@ internal static Project CreateInMemoryProject(string xml)
         /// <summary>
         /// Create a project in memory. Load up the given XML.
         /// </summary>
-        /// <param name="xml"></param>
-        /// <param name="logger"></param>
-        /// <returns></returns>
-        internal static Project CreateInMemoryProject(string xml, ILogger logger /* May be null */)
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="loggers">The array of loggers to attach on project evaluation.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
+        internal static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
         {
-            return CreateInMemoryProject(new ProjectCollection(), xml, logger);
+            return CreateInMemoryProject(new ProjectCollection(), xml, loggers);
         }
 
         /// <summary>
         /// Create an in-memory project and attach it to the passed-in engine.
         /// </summary>
-        /// <param name="engine"></param>
-        /// <param name="xml"></param>
-        /// <param name="logger">May be null</param>
-        /// <returns></returns>
-        internal static Project CreateInMemoryProject(ProjectCollection e, string xml, ILogger logger /* May be null */)
+        /// <param name="projectCollection"><see cref="ProjectCollection"/> to use for project creation.</param>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="loggers">The array of loggers to attach on project evaluation. May be null.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
+        internal static Project CreateInMemoryProject(ProjectCollection projectCollection, string xml, params ILogger[] loggers)
         {
-            return CreateInMemoryProject(e, xml, logger, null);
+            return CreateInMemoryProject(projectCollection, xml, null, loggers);
         }
 
         /// <summary>
         /// Create an in-memory project and attach it to the passed-in engine.
         /// </summary>
-        /// <param name="logger">May be null</param>
-        /// <param name="toolsVersion">May be null</param>
+        /// <param name="projectCollection"><see cref="ProjectCollection"/> to use for project creation.</param>
+        /// <param name="xml">the project to be created in string format.</param>
+        /// <param name="toolsVersion">The tools version to use on project creation. May be null.</param>
+        /// <param name="loggers">The array of loggers to attach to project collection before evaluation. May be null.</param>
+        /// <returns>Returns created <see cref="Project"/>.</returns>
         internal static Project CreateInMemoryProject(
             ProjectCollection projectCollection,
             string xml,
-            ILogger logger /* May be null */,
-            string toolsVersion) /* may be null */
+            string toolsVersion /* may be null */,
+            params ILogger[] loggers)
         {
             XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+            if (loggers != null)
+            {
+                foreach (ILogger logger in loggers)
+                {
+                    projectCollection.RegisterLogger(logger);
+                }
+            }
 
             Project project = new Project(
                 XmlReader.Create(new StringReader(CleanupFileContents(xml)), readerSettings),
-                null,
+                globalProperties: null,
                 toolsVersion,
                 projectCollection);
 
@@ -724,11 +734,6 @@ internal static Project CreateInMemoryProject(
             project.FullPath = Path.Combine(TempProjectDir, "Temporary" + guid.ToString("N") + ".csproj");
             project.ReevaluateIfNecessary();
 
-            if (logger != null)
-            {
-                project.ProjectCollection.RegisterLogger(logger);
-            }
-
             return project;
         }
 
@@ -736,48 +741,61 @@ internal static Project CreateInMemoryProject(
         /// Creates a project in memory and builds the default targets.  The build is
         /// expected to succeed.
         /// </summary>
-        /// <param name="projectContents"></param>
-        /// <returns></returns>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="testOutputHelper"><see cref="ITestOutputHelper"/> to log to.</param>
+        /// <param name="loggerVerbosity">The required logging verbosity.</param>
+        /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
         internal static MockLogger BuildProjectExpectSuccess(
             string projectContents,
-            ITestOutputHelper testOutputHelper = null)
+            ITestOutputHelper testOutputHelper = null,
+            LoggerVerbosity loggerVerbosity = LoggerVerbosity.Normal)
         {
-            MockLogger logger = new MockLogger(testOutputHelper);
+            MockLogger logger = new MockLogger(testOutputHelper, verbosity: loggerVerbosity);
             BuildProjectExpectSuccess(projectContents, logger);
             return logger;
         }
 
+        /// <summary>
+        /// Creates a project in memory and builds the default targets.  The build is
+        /// expected to succeed.
+        /// </summary>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="loggers">The array of loggers to use.</param>
         internal static void BuildProjectExpectSuccess(
             string projectContents,
             params ILogger[] loggers)
         {
-            Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves
-            project.Build(loggers).ShouldBeTrue();
+            using ProjectCollection collection = new();
+            Project project = CreateInMemoryProject(collection, projectContents, loggers);
+            project.Build().ShouldBeTrue();
         }
 
         /// <summary>
         /// Creates a project in memory and builds the default targets.  The build is
         /// expected to fail.
         /// </summary>
-        /// <param name="projectContents"></param>
-        /// <returns></returns>
-        internal static MockLogger BuildProjectExpectFailure(
-            string projectContents)
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <returns>The <see cref="MockLogger"/> that was used during evaluation and build.</returns>
+        internal static MockLogger BuildProjectExpectFailure(string projectContents)
         {
             MockLogger logger = new MockLogger();
             BuildProjectExpectFailure(projectContents, logger);
-
             return logger;
         }
 
+        /// <summary>
+        /// Creates a project in memory and builds the default targets.  The build is
+        /// expected to fail.
+        /// </summary>
+        /// <param name="projectContents">The project file content in string format.</param>
+        /// <param name="loggers">The array of loggers to use.</param>
         internal static void BuildProjectExpectFailure(
             string projectContents,
-            ILogger logger)
+            params ILogger[] loggers)
         {
-            Project project = CreateInMemoryProject(projectContents, logger);
-
-            bool success = project.Build(logger);
-            Assert.False(success); // "Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details"
+            using ProjectCollection collection = new();
+            Project project = CreateInMemoryProject(collection, projectContents, loggers);
+            project.Build().ShouldBeFalse("Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\"");
         }
 
         /// <summary>
@@ -1360,7 +1378,11 @@ public static BuildResult BuildProjectContentUsingBuildManager(string content, M
             }
         }
 
-        public static BuildResult BuildProjectFileUsingBuildManager(string projectFile, MockLogger logger = null, BuildParameters parameters = null)
+        public static BuildResult BuildProjectFileUsingBuildManager(
+            string projectFile,
+            MockLogger logger = null,
+            BuildParameters parameters = null,
+            IList<string> targetsToBuild = null)
         {
             using (var buildManager = new BuildManager())
             {
@@ -1377,7 +1399,7 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
                     projectFile,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    Array.Empty<string>(),
+                    targetsToBuild?.ToArray() ?? Array.Empty<string>(),
                     null);
 
                 var result = buildManager.Build(
@@ -1975,7 +1997,7 @@ internal static string ToForwardSlash(string path) =>
                 ? path
                 : path.ToSlash();
 
-        internal class ElementLocationComparerIgnoringType : IEqualityComparer<ElementLocation>
+        internal sealed class ElementLocationComparerIgnoringType : IEqualityComparer<ElementLocation>
         {
             public bool Equals(ElementLocation x, ElementLocation y)
             {
@@ -2003,7 +2025,7 @@ public int GetHashCode(ElementLocation obj)
             }
         }
 
-        internal class BuildManagerSession : IDisposable
+        internal sealed class BuildManagerSession : IDisposable
         {
             private readonly TestEnvironment _env;
             private readonly BuildManager _buildManager;
@@ -2150,7 +2172,7 @@ private void IncrementEnumerations(string path)
             }
         }
 
-        internal class LoggingFileSystem : MSBuildFileSystemBase
+        internal sealed class LoggingFileSystem : MSBuildFileSystemBase
         {
             private int _fileSystemCalls;
 
diff --git a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
index 761c0be4177..ebf590d0f71 100644
--- a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
+++ b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.UnitTests
 {
     public sealed class PrintLineDebugger_Tests
     {
-        private class MockWriter
+        private sealed class MockWriter
         {
             public readonly List<string> Logs = new List<string>();
 
diff --git a/src/Shared/UnitTests/TestAssemblyInfo.cs b/src/Shared/UnitTests/TestAssemblyInfo.cs
index 3491d4ebcee..368eb99d6c6 100644
--- a/src/Shared/UnitTests/TestAssemblyInfo.cs
+++ b/src/Shared/UnitTests/TestAssemblyInfo.cs
@@ -6,6 +6,7 @@
 using System.Linq;
 using System.Runtime.InteropServices;
 using System.Xml.Linq;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.UnitTests;
 using Xunit;
@@ -39,7 +40,8 @@ public MSBuildTestAssemblyFixture()
             var runningTestsField = testInfoType.GetField("s_runningTests", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
             runningTestsField.SetValue(null, true);
 
-            _testEnvironment = TestEnvironment.Create();
+            // Note: build error files will be initialized in test environments for particular tests, also we don't have output to report error files into anyway...
+            _testEnvironment = TestEnvironment.Create(output: null, ignoreBuildErrorFiles: true);
 
             _testEnvironment.DoNotLaunchDebugger();
 
@@ -63,6 +65,9 @@ public MSBuildTestAssemblyFixture()
 
             _testEnvironment.SetTempPath(assemblyTempFolder.Path);
 
+            // Lets clear FileUtilities.TempFileDirectory in case it was already initialized by other code, so it picks up new TempPath
+            FileUtilities.ClearTempFileDirectory();
+
             _testEnvironment.CreateFile(
                 transientTestFolder: assemblyTempFolder,
                 fileName: "MSBuild_Tests.txt",
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 6e531508885..5d7d3d22d65 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -15,9 +15,8 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-
-using TempPaths = System.Collections.Generic.Dictionary<string, string>;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
+using TempPaths = System.Collections.Generic.Dictionary<string, string>;
 
 #nullable disable
 
@@ -331,9 +330,19 @@ public TransientTestProcess WithTransientProcess(int processId)
             return WithTransientTestState(transientTestProcess);
         }
 
+        /// <summary>
+        /// Register transient debug engine.
+        /// Usable for tests which investigating might need msbuild debug logs.
+        /// </summary>
+        public TransientDebugEngine WithTransientDebugEngineForNewProcesses(bool state)
+        {
+            TransientDebugEngine transient = new(state);
+            return WithTransientTestState(transient);
+        }
+
         #endregion
 
-        private class DefaultOutput : ITestOutputHelper
+        private sealed class DefaultOutput : ITestOutputHelper
         {
             public void WriteLine(string message)
             {
@@ -430,46 +439,72 @@ void AssertDictionaryInclusion(IDictionary superset, IDictionary subset, string
 
     public class BuildFailureLogInvariant : TestInvariant
     {
+        private const string MSBuildLogFiles = "MSBuild_*.txt";
         private readonly string[] _originalFiles;
 
         public BuildFailureLogInvariant()
         {
-            _originalFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*.txt");
+            _originalFiles = GetMSBuildLogFiles();
+        }
+
+        private string[] GetMSBuildLogFiles()
+        {
+            List<string> files = new();
+            string debugPath = FileUtilities.TempFileDirectory;
+            if (debugPath != null)
+            {
+                try
+                {
+                    files.AddRange(Directory.GetFiles(debugPath, MSBuildLogFiles));
+                }
+                catch (DirectoryNotFoundException)
+                {
+                    // Temp folder might have been deleted by other TestEnvironment logic
+                }
+            }
+
+            try
+            {
+                files.AddRange(Directory.GetFiles(Path.GetTempPath(), MSBuildLogFiles));
+            }
+            catch (DirectoryNotFoundException)
+            {
+                // Temp folder might have been deleted by other TestEnvironment logic
+            }
+
+            return files.Distinct(StringComparer.InvariantCultureIgnoreCase).ToArray();
         }
 
         public override void AssertInvariant(ITestOutputHelper output)
         {
-            var newFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*.txt");
+            var newFiles = GetMSBuildLogFiles();
 
             int newFilesCount = newFiles.Length;
-            if (newFilesCount > _originalFiles.Length)
+            foreach (FileInfo file in newFiles.Except(_originalFiles).Select(f => new FileInfo(f)))
             {
-                foreach (FileInfo file in newFiles.Except(_originalFiles).Select(f => new FileInfo(f)))
-                {
-                    string contents = File.ReadAllText(file.FullName);
-
-                    // Delete the file so we don't pollute the build machine
-                    FileUtilities.DeleteNoThrow(file.FullName);
+                string contents = File.ReadAllText(file.FullName);
 
-                    // Ignore clean shutdown trace logs.
-                    if (Regex.IsMatch(file.Name, @"MSBuild_NodeShutdown_\d+\.txt") &&
-                        Regex.IsMatch(contents, @"Node shutting down with reason BuildComplete and exception:\s*"))
-                    {
-                        newFilesCount--;
-                        continue;
-                    }
+                // Delete the file so we don't pollute the build machine
+                FileUtilities.DeleteNoThrow(file.FullName);
 
-                    // Com trace file. This is probably fine, but output it as it was likely turned on
-                    // for a reason.
-                    if (Regex.IsMatch(file.Name, @"MSBuild_CommTrace_PID_\d+\.txt"))
-                    {
-                        output.WriteLine($"{file.Name}: {contents}");
-                        newFilesCount--;
-                        continue;
-                    }
+                // Ignore clean shutdown trace logs.
+                if (Regex.IsMatch(file.Name, @"MSBuild_NodeShutdown_\d+\.txt") &&
+                    Regex.IsMatch(contents, @"Node shutting down with reason BuildComplete and exception:\s*"))
+                {
+                    newFilesCount--;
+                    continue;
+                }
 
-                    output.WriteLine($"Build Error File {file.Name}: {contents}");
+                // Com trace file. This is probably fine, but output it as it was likely turned on
+                // for a reason.
+                if (Regex.IsMatch(file.Name, @"MSBuild_CommTrace_PID_\d+\.txt"))
+                {
+                    output.WriteLine($"{file.Name}: {contents}");
+                    newFilesCount--;
+                    continue;
                 }
+
+                output.WriteLine($"Build Error File {file.Name}: {contents}");
             }
 
             // Assert file count is equal minus any files that were OK
@@ -588,6 +623,34 @@ public override void Revert()
         }
     }
 
+    public class TransientDebugEngine : TransientTestState
+    {
+        private readonly string _previousDebugEngineEnv;
+        private readonly string _previousDebugPath;
+
+        public TransientDebugEngine(bool enabled)
+        {
+            _previousDebugEngineEnv = Environment.GetEnvironmentVariable("MSBuildDebugEngine");
+            _previousDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+
+            if (enabled)
+            {
+                Environment.SetEnvironmentVariable("MSBuildDebugEngine", "1");
+                Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", FileUtilities.TempFileDirectory);
+            }
+            else
+            {
+                Environment.SetEnvironmentVariable("MSBuildDebugEngine", null);
+                Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", null);
+            }
+        }
+
+        public override void Revert()
+        {
+            Environment.SetEnvironmentVariable("MSBuildDebugEngine", _previousDebugEngineEnv);
+            Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", _previousDebugPath);
+        }
+    }
 
     public class TransientTestFile : TransientTestState
     {
diff --git a/src/Shared/UnitTests/TestProgram.cs b/src/Shared/UnitTests/TestProgram.cs
index 6bb39ebf67d..ecfb5780562 100644
--- a/src/Shared/UnitTests/TestProgram.cs
+++ b/src/Shared/UnitTests/TestProgram.cs
@@ -4,7 +4,7 @@
 using System;
 using System.Collections.Generic;
 
-internal class Program
+internal sealed class Program
 {
     public static int Main(string[] args)
     {
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index 742bfca4919..4f206d425b9 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -4,13 +4,13 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Shared;
+using System.Linq;
 using System.Reflection;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.Shared;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Shouldly;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Shared/UnitTests/XmakeAttributes_Tests.cs b/src/Shared/UnitTests/XmakeAttributes_Tests.cs
index 7f6c1016f2e..25e7cb3a50d 100644
--- a/src/Shared/UnitTests/XmakeAttributes_Tests.cs
+++ b/src/Shared/UnitTests/XmakeAttributes_Tests.cs
@@ -5,6 +5,7 @@
 
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -93,9 +94,7 @@ public void TestMergeRuntimeValuesAnyAcceptsCurrent()
             mergedRuntime.ShouldBe(XMakeAttributes.GetCurrentMSBuildRuntime());
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp,
-            "Tests whether 'current' merges with 'clr4' which is true only on Framework")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Tests whether 'current' merges with 'clr4' which is true only on Framework.")]
         public void TestMergeRuntimeValuesCurrentToClr4()
         {
             XMakeAttributes.TryMergeRuntimeValues(
@@ -111,9 +110,7 @@ public void TestMergeRuntimeValuesCurrentToClr4()
             mergedRuntime.ShouldBeNull();
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework,
-            "Tests whether 'current' merges with 'net' which is true only on core")]
+        [DotNetOnlyFact(additionalMessage: "Tests whether 'current' merges with 'net' which is true only on core.")]
         public void TestMergeRuntimeValuesCurrentToCore()
         {
             XMakeAttributes.TryMergeRuntimeValues(
diff --git a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
index b4cc4806e20..c5ea2533add 100644
--- a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
+++ b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using BenchmarkDotNet.Attributes;
 using System.Text;
+using BenchmarkDotNet.Attributes;
 
 #nullable disable
 
diff --git a/src/StringTools.UnitTests/WeakStringCache_Tests.cs b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
index 75c418f48ca..41990c59396 100644
--- a/src/StringTools.UnitTests/WeakStringCache_Tests.cs
+++ b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
@@ -125,7 +125,6 @@ private void AddStringsWithSameHashCode(int numberOfStrings)
         /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
         /// </remarks>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RetainsStringUntilCollected()
         {
             // Add a string to the cache using a non-inlinable method to make sure it's not reachable from a GC root.
@@ -167,7 +166,6 @@ public void RetainsStringUntilCollected()
         /// https://www.mono-project.com/docs/advanced/garbage-collector/sgen/#precise-stack-marking
         /// </remarks>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RetainsLastStringWithGivenHashCode()
         {
             // Add 3 strings with the same hash code.
diff --git a/src/StringTools/InternableString.Simple.cs b/src/StringTools/InternableString.Simple.cs
index cffe45afc46..57789ab0700 100644
--- a/src/StringTools/InternableString.Simple.cs
+++ b/src/StringTools/InternableString.Simple.cs
@@ -200,29 +200,45 @@ public override unsafe string ToString()
         /// <returns>A stable hashcode of the string represented by this instance.</returns>
         public override int GetHashCode()
         {
-            int hashCode = 5381;
+            uint hash = (5381 << 16) + 5381;
+            bool isOddIndex = false;
 
             if (_firstString != null)
             {
                 foreach (char ch in _firstString)
                 {
-                    unchecked
-                    {
-                        hashCode = hashCode * 33 ^ ch;
-                    }
+                    hash = HashOneCharacter(hash, ch, isOddIndex);
+                    isOddIndex = !isOddIndex;
                 }
             }
             else if (_builder != null)
             {
                 for (int i = 0; i < _builder.Length; i++)
                 {
-                    unchecked
-                    {
-                        hashCode = hashCode * 33 ^ _builder[i];
-                    }
+                    hash = HashOneCharacter(hash, _builder[i], isOddIndex);
+                    isOddIndex = !isOddIndex;
                 }
             }
-            return hashCode;
+            return (int)hash;
+        }
+
+        /// <summary>
+        /// A helper to hash one character.
+        /// </summary>
+        /// <param name="hash">The running hash code.</param>
+        /// <param name="ch">The character to hash.</param>
+        /// <param name="isOddIndex">True if the index of the character in the string is odd.</param>
+        /// <returns></returns>
+        private static uint HashOneCharacter(uint hash, char ch, bool isOddIndex)
+        {
+            if (isOddIndex)
+            {
+                // The hash code was rotated for the previous character, just xor.
+                return hash ^ ((uint)ch << 16);
+            }
+
+            uint rotatedHash = (hash << 5) | (hash >> (32 - 5));
+            return (rotatedHash + hash) ^ ch;
         }
     }
 }
diff --git a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
index 0b3829c05e4..d0bbb4b1df0 100644
--- a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
+++ b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Evaluation;
 using System.Globalization;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Tasks;
 using Xunit;
 
 #nullable disable
@@ -243,7 +243,6 @@ public void AllParameters()
         /// the project files don't exist, but we only care about the events anyway.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestExternalProjectEvents()
         {
             string projectFileContents = @"
diff --git a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
index fc611cfbcda..85700054f33 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
@@ -219,7 +219,6 @@ public void VerifyNullPublicKeyspecificVersion()
         /// this was causing the GAC (api's) to crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyProcessorArchitectureDoesNotCrash()
         {
             AssemblyNameExtension fusionName = new AssemblyNameExtension("System, PublicKeyToken=b77a5c561934e089, ProcessorArchitecture=MSIL");
@@ -232,7 +231,6 @@ public void VerifyProcessorArchitectureDoesNotCrash()
         /// this was causing the GAC (api's) to crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyProcessorArchitectureDoesNotCrashSpecificVersion()
         {
             AssemblyNameExtension fusionName = new AssemblyNameExtension("System, PublicKeyToken=b77a5c561934e089, ProcessorArchitecture=MSIL");
@@ -405,7 +403,6 @@ public void SystemRuntimeDepends_Yes()
 
         // Indirect dependency
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SystemRuntimeDepends_Yes_Indirect()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -940,7 +937,7 @@ private static IEnumerable<AssemblyNameExtension> MockAssemblyCacheEnumerator(st
             return new MockEnumerator(listOfAssemblies);
         }
 
-        internal class MockEnumerator : IEnumerable<AssemblyNameExtension>
+        internal sealed class MockEnumerator : IEnumerable<AssemblyNameExtension>
         {
             private List<string> _assembliesToEnumerate = null;
             private List<string>.Enumerator _enumerator;
diff --git a/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
index d502a4a7486..cdacfae192e 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
@@ -53,7 +53,6 @@ public void SDkNameNotInResolvedSDKListButOnSearchPath()
         /// Verify when we are trying to match a name which is the reference assembly directory
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SDkNameMatchInRADirectory()
         {
             ResolveSDKFromRefereneAssemblyLocation("DebugX86SDKWinMD", @"C:\FakeSDK\References\Debug\X86\DebugX86SDKWinMD.Winmd", _output);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 750c73b673e..d8a3e63f4e9 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -11,13 +11,14 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
+using Shouldly;
 using Xunit;
-using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 using Xunit.Abstractions;
-using Shouldly;
-using Microsoft.Build.UnitTests.Shared;
+using Xunit.NetCore.Extensions;
+using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
 #nullable disable
 
@@ -126,7 +127,6 @@ public void VerifyPrimaryReferenceToBadImageDoesNotThrow()
         /// Since copyLocalDependenciesWhenParentReferenceInGac is set to false and the parent of Z is in the GAC
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalDependenciesWhenParentReferenceInGacFalseAllParentsInGac()
         {
             // Create the engine.
@@ -202,7 +202,6 @@ public void ValidateFrameworkNameError()
         /// Since copyLocalDependenciesWhenParentReferenceInGac is set to false but one of the parents of Z is not in the GAC and Z is not in the gac we should be copy local
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalDependenciesWhenParentReferenceInGacFalseSomeParentsInGac()
         {
             // Create the engine.
@@ -265,7 +264,6 @@ public void TestSetRuntimeVersion()
         /// Since copyLocalDependenciesWhenParentReferenceInGac is set to true and Z is not in the GAC it will be copy local true
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalDependenciesWhenParentReferenceInGacTrueAllParentsInGac()
         {
             // Create the engine.
@@ -314,7 +312,6 @@ public void CopyLocalDependenciesWhenParentReferenceInGacTrueAllParentsInGac()
         /// Since copyLocalDependenciesWhenParentReferenceInGac is set to true and Z is not in the GAC it will be copy local true
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalDependenciesWhenParentReferenceInGacTrueSomeParentsInGac()
         {
             // Create the engine.
@@ -355,7 +352,6 @@ public void CopyLocalDependenciesWhenParentReferenceInGacTrueSomeParentsInGac()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalDependenciesWhenParentReferenceNotInGac()
         {
             // Create the engine.
@@ -392,7 +388,6 @@ public void CopyLocalDependenciesWhenParentReferenceNotInGac()
         /// where it was actually resolved). Sets DoNotCopyLocalIfInGac = true
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CopyLocalLegacyBehavior()
         {
             // Create the engine.
@@ -430,8 +425,6 @@ public void CopyLocalLegacyBehavior()
         /// Very basic test.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void Basic()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -661,7 +654,6 @@ private enum EmbedInteropTypes_Indices
         /// Make sure the imageruntime is correctly returned.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestGetImageRuntimeVersion()
         {
             string imageRuntimeReportedByAsssembly = this.GetType().Assembly.ImageRuntimeVersion;
@@ -1042,7 +1034,6 @@ public void SimulateCreateProjectAgainstWhidbeyWithTrailingSlash()
         /// Invalid candidate assembly files should not crash
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress286699_InvalidCandidateAssemblyFiles()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1063,7 +1054,6 @@ public void Regress286699_InvalidCandidateAssemblyFiles()
         /// Invalid assembly files should not crash
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress286699_InvalidAssemblyFiles()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1104,7 +1094,6 @@ public void Regress286699_InvalidAssembliesParameter()
         /// Target framework path with a newline should not crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress286699_InvalidTargetFrameworkDirectory()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -1129,7 +1118,6 @@ public void Regress286699_InvalidTargetFrameworkDirectory()
         /// Invalid search path should not crash.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress286699_InvalidSearchPath()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1200,7 +1188,6 @@ public void NonExistentReference()
         /// that we don't find a strongly named assembly.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void StrongWeakMismatchInDependency()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1247,7 +1234,6 @@ public void DependenciesOfExternallyResolvedReferencesAreNotSearched()
         /// property, then the task should be able to resolve an assembly there.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UseSuppliedHintPath()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -1303,8 +1289,7 @@ public void Regress200872()
         /// <summary>
         /// Do the most basic AssemblyFoldersEx resolve.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExBasic()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1324,8 +1309,7 @@ public void AssemblyFoldersExBasic()
         /// <summary>
         /// Verify that higher alphabetical values for a component are chosen over lower alphabetic values of a component.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExVerifyComponentFolderSorting()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1346,8 +1330,7 @@ public void AssemblyFoldersExVerifyComponentFolderSorting()
         /// If the target framework version provided by the targets file doesn't begin
         /// with the letter "v", we should tolerate it and treat it as if it does.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExTargetFrameworkVersionDoesNotBeginWithV()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1371,8 +1354,7 @@ public void AssemblyFoldersExTargetFrameworkVersionDoesNotBeginWithV()
         /// Expect it not to resolve and get a message on the console
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchDoesNotMatch()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1397,8 +1379,7 @@ public void AssemblyFoldersExProcessorArchDoesNotMatch()
         /// Target MSIL and get an assembly out of the X86 directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchMSILX86()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1420,9 +1401,7 @@ public void AssemblyFoldersExProcessorArchMSILX86()
         /// <summary>
         /// Verify if there is a mismatch between what the project targets and the architecture of the resolved primary reference log a warning.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Trait("Category", "mono-windows-failing")]
+        [WindowsOnlyFact]
         public void VerifyProcessArchitectureMismatchWarning()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1446,9 +1425,7 @@ public void VerifyProcessArchitectureMismatchWarning()
         /// <summary>
         /// Verify if there is a mismatch between what the project targets and the architecture of the resolved primary reference log a warning.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Trait("Category", "mono-windows-failing")]
+        [WindowsOnlyFact]
         public void VerifyProcessArchitectureMismatchWarningDefault()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1471,9 +1448,7 @@ public void VerifyProcessArchitectureMismatchWarningDefault()
         /// <summary>
         /// Verify if there is a mismatch between what the project targets and the architecture of the resolved primary reference log a error.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Trait("Category", "mono-windows-failing")]
+        [WindowsOnlyFact]
         public void VerifyProcessArchitectureMismatchError()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1500,8 +1475,7 @@ public void VerifyProcessArchitectureMismatchError()
         /// Target None and get an assembly out of the X86 directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchNoneX86()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1521,8 +1495,7 @@ public void AssemblyFoldersExProcessorArchNoneX86()
         /// If we are targeting NONE and there are two assemblies with the same name then we want to pick the first one rather than look for an assembly which
         /// has a MSIL architecture or a NONE architecture. NONE means you do not care what architecture is picked.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchNoneMix()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1550,8 +1523,7 @@ public void AssemblyFoldersExProcessorArchNoneMix()
         /// Target MSIL and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchMSILLastFolder()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1576,8 +1548,7 @@ public void AssemblyFoldersExProcessorArchMSILLastFolder()
         /// Target None and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchNoneLastFolder()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1601,8 +1572,7 @@ public void AssemblyFoldersExProcessorArchNoneLastFolder()
         /// Target MSIL and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchX86FirstFolder()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1625,8 +1595,7 @@ public void AssemblyFoldersExProcessorArchX86FirstFolder()
         /// Target X86 and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchX86MSIL()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1648,8 +1617,7 @@ public void AssemblyFoldersExProcessorArchX86MSIL()
         /// Target X86 and get an assembly out of the None directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchX86None()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1671,8 +1639,7 @@ public void AssemblyFoldersExProcessorArchX86None()
         /// Target None and get an assembly out of the None directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchNoneNone()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1693,8 +1660,7 @@ public void AssemblyFoldersExProcessorArchNoneNone()
         /// Target MSIL and get an assembly out of the None directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArcMSILNone()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1715,8 +1681,7 @@ public void AssemblyFoldersExProcessorArcMSILNone()
         /// Target None and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchNoneMSIL()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1738,8 +1703,7 @@ public void AssemblyFoldersExProcessorArchNoneMSIL()
         /// Target MSIL and get an assembly out of the MSIL directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchMSILMSIL()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1761,8 +1725,7 @@ public void AssemblyFoldersExProcessorArchMSILMSIL()
         /// Target X86 and get an assembly out of the X86 directory.
         ///
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExProcessorArchMatches()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1786,8 +1749,7 @@ public void AssemblyFoldersExProcessorArchMatches()
         /// This means if there are remaining search paths to inspect, we should
         /// carry on and inspect those.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExTargetFrameworkVersionBogusValue()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1808,8 +1770,7 @@ public void AssemblyFoldersExTargetFrameworkVersionBogusValue()
         /// <summary>
         /// Tolerate keys like v2.0.x86chk.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void Regress357227_AssemblyFoldersExAgainstRawDrop()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1829,8 +1790,7 @@ public void Regress357227_AssemblyFoldersExAgainstRawDrop()
         /// <summary>
         /// Matches that exist only in the HKLM hive.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExHKLM()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1849,8 +1809,7 @@ public void AssemblyFoldersExHKLM()
         /// <summary>
         /// Matches that exist in both HKLM and HKCU should favor HKCU
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExHKCUTrumpsHKLM()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -1874,8 +1833,7 @@ public void AssemblyFoldersExHKCUTrumpsHKLM()
         /// <summary>
         /// When matches that have v3.0 (future) and v2.0 (current) versions, the 2.0 version wins.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExFutureTargetNDPVersionsDontMatch()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1894,8 +1852,7 @@ public void AssemblyFoldersExFutureTargetNDPVersionsDontMatch()
         /// <summary>
         /// If there is no v2.0 (current target NDP) match, then v1.0 should match.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExMatchBackVersion()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1914,8 +1871,7 @@ public void AssemblyFoldersExMatchBackVersion()
         /// <summary>
         /// If there is a 2.0 and a 1.0 then match 2.0.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExCurrentTargetVersionTrumpsPastTargetVersion()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1934,8 +1890,7 @@ public void AssemblyFoldersExCurrentTargetVersionTrumpsPastTargetVersion()
         /// <summary>
         /// If a control has a service pack then that wins over the control itself
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExServicePackTrumpsBaseVersion()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -1955,8 +1910,7 @@ public void AssemblyFoldersExServicePackTrumpsBaseVersion()
         /// Conditions (OSVersion/Platform) can be passed in SearchPaths to filter the result.
         /// Test MaxOSVersion condition
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExConditionFilterMaxOS()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -1999,8 +1953,7 @@ public void AssemblyFoldersExConditionFilterMaxOS()
         /// Conditions (OSVersion/Platform) can be passed in SearchPaths to filter the result.
         /// Test MinOSVersion condition
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExConditionFilterMinOS()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -2313,8 +2266,7 @@ public void GatherVersions35x86chkDotNet()
         /// Conditions (OSVersion/Platform) can be passed in SearchPaths to filter the result.
         /// Test Platform condition
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void AssemblyFoldersExConditionFilterPlatform()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -2986,7 +2938,6 @@ public void ToElementButNoFrom()
         /// then try to resolve directly to that file name and make it a full path.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RawFileNameRelative()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -3023,7 +2974,6 @@ public void RawFileNameRelative()
         /// then try to resolve the file but make sure it is a full name
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RelativeDirectoryResolver()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -3059,7 +3009,6 @@ public void RelativeDirectoryResolver()
         /// If a relative file name is passed in through the HintPath then try to resolve directly to that file name and make it a full path.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void HintPathRelative()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -3176,7 +3125,6 @@ public void Regress363340_RawFileNameMissing()
         /// because assemblyName was null and we were comparing the assemblyName from the hintPath to the null assemblyName.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress444793()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -3206,7 +3154,6 @@ public void Regress444793()
         /// then try to resolve directly to that file name.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RawFileNameDoesntExist()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -3286,7 +3233,6 @@ public void ResolveToGACSpecificVersion()
         /// instead we want to let the assembly be resolved normally so that the GAC and AF checks will work.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ParentAssemblyResolvedFromAForGac()
         {
             var parentReferenceFolders = new List<string>();
@@ -3402,7 +3348,6 @@ public void ResolveBadImageInPrimary()
         /// no reference. We don't want an exception.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ResolveBadImageInSecondary()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4089,7 +4034,6 @@ public void Regress199998()
         /// The user browsed to an .exe, so that's what we should give them.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ExecutableExtensionEXE()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4207,7 +4151,6 @@ public void ExecutableExtensionDefaultDLLFirst()
         /// Without an ExecutableExtension the first assembly out of .dll,.exe wins.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ExecutableExtensionDefaultEXEFirst()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4287,7 +4230,6 @@ public void SimpleNameWithSpecificVersionTrue()
         /// If specific version is false, then we should match the first "A" that we find.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SimpleNameWithSpecificVersionFalse()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4541,7 +4483,6 @@ public void Regress312873_UnresolvedPrimaryWithResolveDependency()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress275161_ScatterAssemblies()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4594,7 +4535,6 @@ public void Regress275161_ScatterAssemblies()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress317975_LeftoverLowerVersion()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4688,7 +4628,6 @@ public void Regress313086_Part1_MscorlibAsRawFilename()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress313086_Part2_MscorlibAsRawFilename()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4748,7 +4687,6 @@ public void Regress284466_DirectoryIntoAssemblyFiles()
         /// If a relative assemblyFile is passed in resolve it as a full path.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void RelativeAssemblyFiles()
         {
             string testPath = Path.Combine(Path.GetTempPath(), @"RelativeAssemblyFiles");
@@ -4915,7 +4853,6 @@ public void Regress269704_MissingRegistryElements()
         /// this reference, especially given the fact that the HintPath was provided in the project file.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress276548_AssemblyNameDifferentThanFusionName()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -4986,7 +4923,6 @@ public void Regress314573_VeryLongPaths()
         /// Need to be robust in the face of assembly names with special characters.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress265003_EscapedCharactersInFusionName()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5023,7 +4959,6 @@ public void Regress265003_EscapedCharactersInFusionName()
         /// have a hintpath, then go ahead and resolve anyway because we know what the path should be.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress284081_UnescapedCharactersInFusionNameWithHintPath()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5199,7 +5134,6 @@ public void Regress354669_HintPathWithTrailingSlash()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress339786_CrossVersionsWithAppConfig()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5268,7 +5202,6 @@ public void Regress_DogfoodCLRThrowsFileLoadException()
         /// but became false when Crystal Reports started putting their assemblies in this table.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress407623_RedistListDoesNotImplyPresenceInFrameworks()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5352,7 +5285,6 @@ public void InvalidCharsInInstalledAssemblyTable()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress435487_FxFileResolvedByHintPathShouldByCopyLocal()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5454,8 +5386,6 @@ public void PartialNameMatchingFromRedist()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void Regress46599_BogusInGACValueForAssemblyInRedistList()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -5507,8 +5437,6 @@ public void Regress46599_BogusInGACValueForAssemblyInRedistList()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void VerifyFrameworkFileMetadataFiles()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -6302,7 +6230,6 @@ public void SubsetListFinderNullSubsetExistsButNotXml()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void IgnoreDefaultInstalledAssemblyTables()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -7211,7 +7138,6 @@ private static void GenerateNewReferences(out Reference enginePrimaryReference,
         /// way to specify a TargetFrameworkSubset is to pass one to the InstalledAssemblySubsetTables property.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void IgnoreDefaultInstalledSubsetTables()
         {
             string redistListPath = CreateGenericRedistList();
@@ -7298,7 +7224,6 @@ private bool GenerateHelperDelegatesAndExecuteTask(ResolveAssemblyReference t, s
         /// is passed in. We expect to use that.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void NoClientSubsetButInstalledSubTables()
         {
             string redistListPath = CreateGenericRedistList();
@@ -7380,7 +7305,6 @@ public void NullFullTargetFrameworkSubsetNames()
         /// Test the case where a non existent subset list path is used and no additional subsets are passed in.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void FakeSubsetListPathsNoAdditionalSubsets()
         {
             string redistListPath = CreateGenericRedistList();
@@ -7590,7 +7514,6 @@ private bool GenerateHelperDelegatesAndExecuteTask(ResolveAssemblyReference t)
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void DoNotAssumeFilesDescribedByRedistListExistOnDisk()
         {
             string redistListPath = CreateGenericRedistList();
@@ -7776,7 +7699,6 @@ public void ByDesignRelatedTo454863_PrimaryReferencesDontResolveToParentFolders(
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress393931_AllowAlternateAssemblyExtensions_Case1()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -7808,7 +7730,6 @@ public void Regress393931_AllowAlternateAssemblyExtensions_Case1()
         /// Allow alternate extension values to be passed in.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress393931_AllowAlternateAssemblyExtensions()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -7837,7 +7758,6 @@ public void Regress393931_AllowAlternateAssemblyExtensions()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SGenDependeicies()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -7881,7 +7801,6 @@ public void SGenDependeicies()
         /// These two project references have different versions. Important: PKT is null.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Regress315619_TwoWeaklyNamedPrimariesIsInsoluble()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -7922,7 +7841,6 @@ public void Regress315619_TwoWeaklyNamedPrimariesIsInsoluble()
         ///
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ForwardRedistRoot()
         {
             ResolveAssemblyReference t = new ResolveAssemblyReference();
@@ -8048,7 +7966,6 @@ public void ReverseAssemblyNameExtensionComparer()
         /// Check the Filtering based on Target Framework.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TargetFrameworkFiltering()
         {
             int resultSet = RunTargetFrameworkFilteringTest("3.0");
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
index 7564fe66bff..6e875773019 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
@@ -25,8 +25,6 @@ public Perf(ITestOutputHelper output) : base(output)
         }
 
         [Theory]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         [InlineData(RARSimulationMode.LoadProject, 1)]
         [InlineData(RARSimulationMode.BuildProject, 2)]
         public void AutoUnifyUsesMinimumIO(RARSimulationMode rarSimulationMode, int ioThreshold)
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 690a1eb3dd8..748cce32307 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -6,19 +6,18 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.IO;
+using System.Runtime.Versioning;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Tasks.AssemblyDependency;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
-using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
-using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 using Xunit;
 using Xunit.Abstractions;
-
+using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using NativeMethods = Microsoft.Build.Tasks.NativeMethods;
-using System.Runtime.Versioning;
+using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
index e845e40d540..1f29749f3b3 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
@@ -9,6 +9,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -35,8 +36,7 @@ public SpecificVersionPrimary(ITestOutputHelper output) : base(output)
         ///     dependencies anyway to make things work consistently. This would be a significant
         ///     perf hit when loading large solutions.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void Exists()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -106,7 +106,6 @@ public void Exists()
         /// </list>
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ExistsDifferentName()
         {
             // Create the engine.
@@ -159,7 +158,6 @@ public void ExistsDifferentName()
         ///     perf hit when loading large solutions.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ExistsOldVersionRange()
         {
             // Create the engine.
@@ -212,7 +210,6 @@ public void ExistsOldVersionRange()
         ///     perf hit when loading large solutions.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void HighVersionDoesntExist()
         {
             // Create the engine.
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
index 6c39feba98b..1960dba7a0b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
@@ -44,7 +44,6 @@ public StronglyNamedDependency(ITestOutputHelper output) : base(output)
         /// We automatically unify FX dependencies.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Exists()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
index 9df8866c63a..e7219ac8973 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
@@ -308,7 +308,6 @@ public void Regress313747_FalseSuggestedRedirectsWhenAssembliesDifferOnlyByPkt()
         /// there and there won't be a binding redirect to point it at 2.0.0.0.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void Regress442570_MissingBackVersionShouldWarn()
@@ -388,7 +387,6 @@ public void RedirectsAreSuggestedInExternallyResolvedGraph()
         /// binding redirects.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void Regress387218_UnificationRequiresStrongName()
@@ -432,7 +430,6 @@ public void Regress387218_UnificationRequiresStrongName()
         /// There should be no suggested redirect because assemblies with different cultures cannot unify.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void Regress390219_UnificationRequiresSameCulture()
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
index ba882c518f0..7d92fe9e630 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
@@ -352,7 +352,6 @@ public void HigherVersionDirect()
         /// which has dependencies set to false.  A regular build or design time build has this set to true so we do the correct check.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void HigherVersionDirectDependenciesFalse()
         {
             MockEngine e = new MockEngine(_output);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
index 99483aec16d..6435b8cddaa 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
@@ -128,7 +128,6 @@ public void HigherThanHighestInRedistList()
         /// not warn -- this is a hack until we figure out how to properly deal with .NET assemblies being removed from the framework.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void HigherThanHighestInRedistListForMSBuildAssembly()
         {
             MockEngine e = new MockEngine(_output);
@@ -265,7 +264,6 @@ public void DependenciesHigherThanHighestInRedistList()
         /// not warn -- this is a hack until we figure out how to properly deal with .NET assemblies being removed from the framework.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void DependenciesHigherThanHighestInRedistListForMSBuildAssembly()
         {
             MockEngine e = new MockEngine(_output);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs b/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
index 84859e9d33f..285438b8181 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
@@ -18,7 +18,6 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
     /// <summary>
     /// Unit tests for the ResolveAssemblyReference task.
     /// </summary>
-    [Trait("Category", "non-mono-tests")]
     public sealed class WinMDTests : ResolveAssemblyReferenceTestFixture
     {
         public WinMDTests(ITestOutputHelper output) : base(output)
diff --git a/src/Tasks.UnitTests/AssignCulture_Tests.cs b/src/Tasks.UnitTests/AssignCulture_Tests.cs
index e6ddc3e2dd3..915bf102943 100644
--- a/src/Tasks.UnitTests/AssignCulture_Tests.cs
+++ b/src/Tasks.UnitTests/AssignCulture_Tests.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -241,8 +242,7 @@ public void SupportAliasedCultures(string culture)
             Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
         }
 
-        [Theory]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, "These cultures are not returned via Culture api on net472.")]
+        [DotNetOnlyTheory(additionalMessage: "These cultures are not returned via Culture api on net472.")]
         [InlineData("sh-BA")]
         [InlineData("shi-MA")]
         public void AliasedCultures_SupportedOnNetCore(string culture)
@@ -260,8 +260,7 @@ public void AliasedCultures_SupportedOnNetCore(string culture)
             Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, "Pseudoloc is special-cased in .NET relative to Framework.")]
+        [DotNetOnlyFact(additionalMessage: "Pseudoloc is special-cased in .NET relative to Framework.")]
         public void Pseudolocales_CaseInsensitive()
         {
             string culture = "qps-Ploc";
diff --git a/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs b/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
index 899517b56d0..f4fa9b32284 100644
--- a/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
+++ b/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
@@ -2,14 +2,14 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Evaluation;
-using System.Collections.Generic;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
@@ -61,7 +61,6 @@ public void InvalidItemPath()
         /// Test basic function of the AssignLinkMetadata task
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void Basic()
         {
             ITaskItem item = GetParentedTaskItem(_defaultItemSpec);
@@ -88,7 +87,6 @@ public void Basic()
         /// output any items that aren't problematic.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void InvalidItemPathWithOtherValidItem()
         {
             ITaskItem item1 = GetParentedTaskItem(itemSpec: "|||");
diff --git a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
index 048fa815c50..5a84c242c91 100644
--- a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
+++ b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
@@ -4,10 +4,9 @@
 using System;
 using System.Collections;
 using System.Xml;
-
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 using Xunit.Abstractions;
 
diff --git a/src/Tasks.UnitTests/AxImp_Tests.cs b/src/Tasks.UnitTests/AxImp_Tests.cs
index 77a7674dd7d..932661cdbbd 100644
--- a/src/Tasks.UnitTests/AxImp_Tests.cs
+++ b/src/Tasks.UnitTests/AxImp_Tests.cs
@@ -5,6 +5,7 @@
 using Microsoft.Build.Tasks;
 
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -32,7 +33,6 @@ public void ActiveXControlName()
         /// Tests that the assembly being imported is passed to the command line
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ActiveXControlNameWithSpaces()
         {
             var t = new ResolveComReference.AxImp();
@@ -70,14 +70,9 @@ public void GenerateSource()
         /// <summary>
         /// Tests the /nologo switch
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("The /nologo switch is not available on Mono.")]
         public void NoLogo()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "The /nologo switch is not available on Mono"
-            }
-
             var t = new ResolveComReference.AxImp();
 
             Assert.False(t.NoLogo); // "NoLogo should be false by default"
diff --git a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
index 9d33db3278f..9965648369b 100644
--- a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
+++ b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
@@ -3,11 +3,12 @@
 
 using System;
 using System.IO;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Microsoft.Runtime.Hosting;
-using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -40,14 +41,9 @@ public void DelaySign()
         /// <summary>
         /// Tests the /keycontainer: switch
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("Key container is not supported, except under Windows.")]
         public void KeyContainer()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Key container is not supported, except under Windows"
-            }
-
             var t = new ResolveComReference.TlbImp();
             t.TypeLibName = "FakeTlb.tlb";
             string badParameterValue = "badKeyContainer";
@@ -267,14 +263,9 @@ public void ToolPath()
         /// Tests that strong name sign-related parameters are validated properly, causing the task
         /// to fail if they are incorrectly set up.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("Key container is not supported, except under Windows.")]
         public void TaskFailsWhenImproperlySigned()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "Key container is not supported, except under Windows"
-            }
-
             var t = new ResolveComReference.TlbImp();
             t.TypeLibName = "Blah.tlb";
             string tempKeyContainer = null;
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 538e51342f3..f6d0b3a01ed 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -1,12 +1,12 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.IO;
 using System;
+using System.IO;
 using System.Linq;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
@@ -199,7 +199,6 @@ public void RuntimeException()
         /// Verify we get an error if a the languages attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptyLanguage()
         {
             string projectFileContents = @"
@@ -228,7 +227,6 @@ public void EmptyLanguage()
         /// Verify we get an error if a the Type attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptyType()
         {
             string projectFileContents = @"
@@ -257,7 +255,6 @@ public void EmptyType()
         /// Verify we get an error if a the source attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptySource()
         {
             string projectFileContents = @"
@@ -286,7 +283,6 @@ public void EmptySource()
         /// Verify we get an error if a reference is missing an include attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptyReferenceInclude()
         {
             string projectFileContents = @"
@@ -316,7 +312,6 @@ public void EmptyReferenceInclude()
         /// Verify we get an error if a Using statement is missing an namespace attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EmptyUsingNamespace()
         {
             string projectFileContents = @"
@@ -374,7 +369,6 @@ public void ReferenceNotPath()
         /// Verify we get an error a reference has strange chars
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ReferenceInvalidChars()
         {
             string projectFileContents = @"
@@ -404,7 +398,6 @@ public void ReferenceInvalidChars()
         /// Verify we get an error if a using has invalid chars
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UsingInvalidChars()
         {
             string projectFileContents = @"
@@ -462,7 +455,6 @@ public void SourcesInvalidFile()
         /// Verify we get an error if a the code element is missing
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MissingCodeElement()
         {
             string projectFileContents = @"
@@ -683,7 +675,6 @@ public void BuildTaskSimpleCodeFactoryTestExtraReferenceCS()
         /// jscript .net works
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MethodImplementationJScriptNet()
         {
             if (!CodeDomProvider.IsDefinedLanguage("js"))
@@ -879,7 +870,6 @@ public bool Execute()
         /// Verify we get an error if a the Type attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MultipleCodeElements()
         {
             string projectFileContents = @"
@@ -911,7 +901,6 @@ public void MultipleCodeElements()
         /// Verify we get an error if a the Type attribute is set but it is empty
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ReferenceNestedInCode()
         {
             string projectFileContents = @"
@@ -945,7 +934,6 @@ public void ReferenceNestedInCode()
         /// Verify we get an error if there is an unknown element in the task tag
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UnknownElementInTask()
         {
             string projectFileContents = @"
@@ -1057,7 +1045,6 @@ public override bool Execute()
         /// See https://github.com/dotnet/msbuild/issues/328 for details.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void BuildTaskSimpleCodeFactoryTempDirectoryDoesntExist()
         {
             string projectFileContents = @"
diff --git a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
index 54f66e923a1..689a15dbb70 100644
--- a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
+++ b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Tasks;
 using System.Runtime.InteropServices.ComTypes;
-using COMException = System.Runtime.InteropServices.COMException;
+using Microsoft.Build.Tasks;
 using Xunit;
+using COMException = System.Runtime.InteropServices.COMException;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/ComReference_Tests.cs b/src/Tasks.UnitTests/ComReference_Tests.cs
index 09a21f0bb38..741cd74479e 100644
--- a/src/Tasks.UnitTests/ComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ComReference_Tests.cs
@@ -3,9 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using Microsoft.Build.Tasks;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -39,14 +40,9 @@ private static bool FileExistsMock(string filepath)
             return ExistingFilesDictionary.ContainsKey(filepath);
         }
 
-        [Fact]
+        [WindowsOnlyFact("COM is only found on Windows.")]
         public void TestStripTypeLibNumber()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "COM is only found on Windows"
-            }
-
             Assert.Null(ComReference.StripTypeLibNumberFromPath(null, new FileExists(FileExistsMock)));
             Assert.Equal("", ComReference.StripTypeLibNumberFromPath("", new FileExists(FileExistsMock)));
             Assert.Equal(@"C:\test\typelib1.dll", ComReference.StripTypeLibNumberFromPath(@"C:\test\typelib1.dll", new FileExists(FileExistsMock)));
diff --git a/src/Tasks.UnitTests/CombinePath_Tests.cs b/src/Tasks.UnitTests/CombinePath_Tests.cs
index cee148bb2c5..a719717e07e 100644
--- a/src/Tasks.UnitTests/CombinePath_Tests.cs
+++ b/src/Tasks.UnitTests/CombinePath_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -203,9 +204,7 @@ public void BlankPath()
         /// <summary>
         /// Specified paths contain invalid characters.  Task should continue processing remaining items.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // No invalid characters on Unix
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No invalid characters on Unix.")]
         public void InvalidPath()
         {
             CombinePath t = new CombinePath();
diff --git a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
index 3e7b7c32d9d..22c89a4872d 100644
--- a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
@@ -98,8 +98,6 @@ public sealed class CommandLineGenerator_Tests
         /// Tests a command line generated from all of the specified switch values.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void BasicCommandLine()
         {
             CommandLineGenerator generator = CreateGenerator();
@@ -111,8 +109,6 @@ public void BasicCommandLine()
         /// Tests a command line generated from a specific template
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void TemplatedCommandLine()
         {
             CommandLineGenerator generator = CreateGenerator();
@@ -125,8 +121,6 @@ public void TemplatedCommandLine()
         /// Tests a command line generated from a specific template is not case sensitive on the parameter names.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void TemplateParametersAreCaseInsensitive()
         {
             CommandLineGenerator generator = CreateGenerator();
@@ -165,7 +159,7 @@ private CommandLineGenerator CreateGenerator()
 #endif
         }
 
-        private class TaskItem : ITaskItem
+        private sealed class TaskItem : ITaskItem
         {
             public TaskItem(string itemSpec)
             {
diff --git a/src/Tasks.UnitTests/CommandLine_Support.cs b/src/Tasks.UnitTests/CommandLine_Support.cs
index 0c33111ede9..36ca55794f3 100644
--- a/src/Tasks.UnitTests/CommandLine_Support.cs
+++ b/src/Tasks.UnitTests/CommandLine_Support.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.Reflection;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
index 73c43d16a92..fd15e069f96 100644
--- a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
+++ b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
@@ -20,7 +20,6 @@ public sealed class ConvertToAbsolutePath_Tests
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void RelativePath()
         {
             string fileName = ObjectModelHelpers.CreateFileInTempProjectDirectory("file.temp", "foo");
@@ -53,7 +52,6 @@ public void RelativePath()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void RelativePathWithEscaping()
         {
             string fileName = ObjectModelHelpers.CreateFileInTempProjectDirectory("file%3A.temp", "foo");
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 49a635d1385..8bdddb235b8 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -19,6 +19,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -131,7 +132,6 @@ public void DontCopyOverSameFile()
         /// Unless ignore readonly attributes is set, we should not copy over readonly files.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void DoNotNormallyCopyOverReadOnlyFile()
@@ -194,7 +194,6 @@ public void DoNotNormallyCopyOverReadOnlyFile()
         /// OverwriteReadOnlyFiles is false
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void CopyOverReadOnlyFileEnvironmentOverride()
@@ -260,7 +259,6 @@ public void CopyOverReadOnlyFileEnvironmentOverride()
         /// If MSBUILDALWAYSRETRY is set, keep retrying the copy.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void AlwaysRetryCopyEnvironmentOverride()
@@ -332,7 +330,6 @@ public void AlwaysRetryCopyEnvironmentOverride()
         /// Unless ignore readonly attributes is set, we should not copy over readonly files.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void CopyOverReadOnlyFileParameterIsSet()
@@ -651,16 +648,9 @@ public void DoCopyOverNonExistentFile()
         /// <summary>
         /// Make sure we do not retry when the source file has a misplaced colon
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. Colon is special only on Windows.")]
         public void DoNotRetryCopyNotSupportedException()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                // Colon is special only on Windows
-                return;
-            }
-
             string sourceFile = FileUtilities.GetTemporaryFile();
             string destinationFile = "foobar:";
 
@@ -790,7 +780,6 @@ public void DoNotRetryCopyWhenSourceIsFolder()
         /// Most important case is when destination is locked
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void DoRetryWhenDestinationLocked()
@@ -999,7 +988,7 @@ public void DoNotRetryCopyWhenDestinationFileIsFolder()
             }
         }
 
-        internal class CopyMonitor
+        internal sealed class CopyMonitor
         {
             internal int copyCount;
 
@@ -1019,9 +1008,7 @@ internal class CopyMonitor
         /// CopiedFiles should only include files that were successfully copied
         /// (or skipped), not files for which there was an error.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "Under Unix all filenames are valid and this test is not useful"
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. Under Unix all filenames are valid and this test is not useful.")]
         public void OutputsOnlyIncludeSuccessfulCopies()
         {
             string temp = Path.GetTempPath();
@@ -1177,8 +1164,7 @@ public void CopyFileOnItself()
         /// Copying a file on top of itself should be a success (no-op) whether
         /// or not skipUnchangedFiles is true or false. Variation with different casing/relativeness.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "File names under Unix are case-sensitive and this test is not useful"
+        [WindowsOnlyFact(additionalMessage: "File names under Unix are case-sensitive and this test is not useful.")]
         public void CopyFileOnItself2()
         {
             string currdir = Directory.GetCurrentDirectory();
@@ -1229,7 +1215,6 @@ public void CopyFileOnItself2()
         /// or not skipUnchangedFiles is true or false. Variation with a second copy failure.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void CopyFileOnItselfAndFailACopy()
@@ -1613,8 +1598,7 @@ public void DestinationFilesLengthNotEqualSourceFilesLength()
         /// If the destination path is too long, the task should not bubble up
         /// the System.IO.PathTooLongException
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void Regress451057_ExitGracefullyIfPathNameIsTooLong()
         {
             string sourceFile = FileUtilities.GetTemporaryFile();
@@ -1657,8 +1641,7 @@ public void Regress451057_ExitGracefullyIfPathNameIsTooLong()
         /// If the source path is too long, the task should not bubble up
         /// the System.IO.PathTooLongException
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void Regress451057_ExitGracefullyIfPathNameIsTooLong2()
         {
             const string sourceFile = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ";
@@ -1936,7 +1919,6 @@ public void TooFewRetriesThrows()
             engine.AssertLogContains("MSB3027");
         }
 
-        [PlatformSpecific(TestPlatforms.Windows)]
         internal virtual void ErrorIfLinkFailedCheck()
         {
             using (var env = TestEnvironment.Create())
@@ -1968,7 +1950,7 @@ internal virtual void ErrorIfLinkFailedCheck()
         /// Simulates the File.Copy method without touching the disk.
         /// First copy fails as requested, subsequent copies succeed.
         /// </summary>
-        private class CopyFunctor
+        private sealed class CopyFunctor
         {
             /// <summary>
             /// Protects the counts and lists below.
@@ -2189,8 +2171,7 @@ public void CopyToDestinationFolderWithHardLinkCheck()
         /// <summary>
         /// DestinationFolder should work.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // SMB share paths only work on Windows
+        [WindowsOnlyFact(additionalMessage: "SMB share paths only work on Windows.")]
         public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
         {
             // Workaround: For some reason when this test runs with all other tests we are getting
@@ -2295,8 +2276,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
         /// <summary>
         /// DestinationFolder should work.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // Only Windows has a (small) link limit, and this tests for an HRESULT
+        [WindowsOnlyFact(additionalMessage: "Only Windows has a (small) link limit, and this tests for an HRESULT.")]
         public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
         {
             // Workaround: For some reason when this test runs with all other tests we are getting
@@ -2382,7 +2362,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         internal override void ErrorIfLinkFailedCheck()
         {
             base.ErrorIfLinkFailedCheck();
@@ -2400,7 +2380,7 @@ public CopySymbolicLink_Tests(ITestOutputHelper testOutputHelper)
         /// <summary>
         /// DestinationFolder should work.
         /// </summary>
-        [Fact]
+        [RequiresSymbolicLinksFact]
         public void CopyToDestinationFolderWithSymbolicLinkCheck()
         {
             string sourceFile = FileUtilities.GetTemporaryFile();
@@ -2463,7 +2443,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         internal override void ErrorIfLinkFailedCheck()
         {
             base.ErrorIfLinkFailedCheck();
diff --git a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
index 25daf87a34e..ab9c9fbc182 100644
--- a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
@@ -56,7 +56,6 @@ public void Basic()
 #else
         [Fact]
 #endif
-        [Trait("Category", "mono-osx-failing")]
         public void Regress172107()
         {
             // Can't embed the '√É' directly because the string is Unicode already and the Unicode<-->ANSI transform
@@ -102,7 +101,6 @@ public void Regress172107()
 #else
         [Fact]
 #endif
-        [Trait("Category", "mono-osx-failing")]
         public void Regress249540()
         {
             // Special character is '√Ñ' in UTF8: 0xC3 84
diff --git a/src/Tasks.UnitTests/CreateItem_Tests.cs b/src/Tasks.UnitTests/CreateItem_Tests.cs
index 44ac891a76d..69f481a1cf7 100644
--- a/src/Tasks.UnitTests/CreateItem_Tests.cs
+++ b/src/Tasks.UnitTests/CreateItem_Tests.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
@@ -10,9 +10,10 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Shouldly;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -313,8 +314,7 @@ public void WildcardDriveEnumerationTaskItemLogsError(string itemSpec)
         /// Logs warning when encountering wildcard drive enumeration during task item creation on Windows platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(@"z:\**")]
         [InlineData(@"z:\**\*.log")]
         [InlineData(@"z:\\\\**\*.log")]
@@ -327,8 +327,7 @@ public void LogWindowsWarningUponCreateItemExecution(string itemSpec)
         /// Logs warning when encountering wildcard drive enumeration during task item creation on Unix platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         [InlineData(@"\**")]
         [InlineData(@"\**\*.log")]
         public void LogUnixWarningUponCreateItemExecution(string itemSpec)
@@ -393,8 +392,7 @@ public void ThrowExceptionUponItemCreationWithDriveEnumeration(string content, s
         /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Windows platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(
             CreateItemWithInclude,
             @"z:\**")]
@@ -421,8 +419,7 @@ public void LogWindowsWarningUponItemCreationWithDriveEnumeration(string content
         /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Unix platform.
         /// </summary>
         [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
-        [Theory]
+        [UnixOnlyTheory]
         [InlineData(
             CreateItemWithInclude,
             @"\**")]
diff --git a/src/Tasks.UnitTests/CreateProperty_Tests.cs b/src/Tasks.UnitTests/CreateProperty_Tests.cs
index f20bc8c9f60..23e74a88957 100644
--- a/src/Tasks.UnitTests/CreateProperty_Tests.cs
+++ b/src/Tasks.UnitTests/CreateProperty_Tests.cs
@@ -1,8 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System;
+using Microsoft.Build.Evaluation;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/Delete_Tests.cs b/src/Tasks.UnitTests/Delete_Tests.cs
index b752d309728..d404c63246f 100644
--- a/src/Tasks.UnitTests/Delete_Tests.cs
+++ b/src/Tasks.UnitTests/Delete_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -41,8 +42,7 @@ public void AttributeForwarding()
         /// <summary>
         /// Retry Delete. Specify windows since readonly not working on others
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void DeleteWithRetries()
         {
             string source = FileUtilities.GetTemporaryFile();
diff --git a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
index ce9919c8aa5..f0bf4e2172e 100644
--- a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System;
 using System.IO;
+using Microsoft.Build.Evaluation;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/DownloadFile_Tests.cs b/src/Tasks.UnitTests/DownloadFile_Tests.cs
index 6edc5512418..b2115398091 100644
--- a/src/Tasks.UnitTests/DownloadFile_Tests.cs
+++ b/src/Tasks.UnitTests/DownloadFile_Tests.cs
@@ -1,9 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.UnitTests;
-using Microsoft.Build.Utilities;
-using Shouldly;
 using System;
 using System.IO;
 using System.Net;
@@ -13,8 +10,10 @@
 using System.Text;
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
-
 using Task = System.Threading.Tasks.Task;
 
 #nullable disable
@@ -363,7 +362,7 @@ public void UnknownFileNameLogsError()
             _mockEngine.Log.ShouldContain("MSB3922", () => _mockEngine.Log);
         }
 
-        private class MockHttpContent : HttpContent
+        private sealed class MockHttpContent : HttpContent
         {
             private readonly Func<Stream, Task> _func;
             private readonly int _length;
@@ -387,7 +386,7 @@ protected override bool TryComputeLength(out long length)
             }
         }
 
-        private class MockHttpMessageHandler : HttpMessageHandler
+        private sealed class MockHttpMessageHandler : HttpMessageHandler
         {
             private readonly Func<HttpRequestMessage, CancellationToken, HttpResponseMessage> _func;
 
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 5c78ff468a7..cb468a6ccea 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -2,19 +2,20 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Reflection;
 using System.Text;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.Collections.Generic;
-using Microsoft.Build.Evaluation;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -51,7 +52,6 @@ private ExecWrapper PrepareExecWrapper(string command)
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
@@ -74,7 +74,6 @@ public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
         /// lying around.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void NoTempFileLeaks()
         {
             using (var testEnvironment = TestEnvironment.Create())
@@ -168,8 +167,7 @@ public void TimeoutFailsEvenWhenExitCodeIsIgnored()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void WindowsNewLineCharactersInCommandOnUnix()
         {
             var exec = PrepareExec("echo hello\r\n\r\n");
@@ -246,8 +244,7 @@ public void NonUNCWorkingDirectoryUsed()
             ((MockEngine)exec.BuildEngine).AssertLogContains("[" + working + "]");
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]   // UNC is Windows-Only
+        [WindowsOnlyFact(additionalMessage: "UNC is Windows-Only.")]
         public void UNCWorkingDirectoryUsed()
         {
             Exec exec = PrepareExec("echo [%cd%]");
@@ -475,10 +472,9 @@ public void ExecTaskUtf8AlwaysWithAnsi()
         /// Exec task will NOT use UTF8 when UTF8 Never is specified and non-ANSI characters are in the Command
         /// <remarks>Exec task will fail as the cmd processor will not be able to run the command.</remarks>
         /// </summary>
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData("Never")]
         [InlineData("System")]
-        [PlatformSpecific(TestPlatforms.Windows)]
         public void ExecTaskUtf8NeverWithNonAnsi(string useUtf8)
         {
             RunExec(true, EncodingUtilities.CurrentSystemOemEncoding.EncodingName, useUtf8, false);
@@ -903,8 +899,7 @@ public void ConsoleToMSBuild()
         /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded 
         /// in the current system encoding.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void CanEncodeTest()
         {
             var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;
@@ -968,7 +963,6 @@ echo line 3"" />
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void EndToEndMultilineExec_EscapeSpecialCharacters()
@@ -1021,7 +1015,7 @@ public void EndToEndMultilineExec_EscapeSpecialCharacters()
         }
     }
 
-    internal class ExecWrapper : Exec
+    internal sealed class ExecWrapper : Exec
     {
         public Encoding StdOutputEncoding
         {
diff --git a/src/Tasks.UnitTests/FileStateTests.cs b/src/Tasks.UnitTests/FileStateTests.cs
index da2d3ab4266..1048fc95358 100644
--- a/src/Tasks.UnitTests/FileStateTests.cs
+++ b/src/Tasks.UnitTests/FileStateTests.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -36,17 +37,14 @@ public void BadTooLongCtorOK()
             new FileState(new String('x', 5000));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // On Unix there no invalid file name characters
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. On Unix there is no invalid file name characters.")]
         public void BadChars()
         {
             var state = new FileState("|");
             Assert.Throws<ArgumentException>(() => { var time = state.LastWriteTime; });
         }
 
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsMaxPathLegacyWindows))]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [LongPathSupportDisabledFact]
         public void BadTooLongLastWriteTime()
         {
             Helpers.VerifyAssertThrowsSameWay(
@@ -229,7 +227,6 @@ public void NameReset()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void LastWriteTimeReset()
         {
             string file = null;
@@ -256,7 +253,6 @@ public void LastWriteTimeReset()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void LastWriteTimeUtcReset()
         {
             string file = null;
@@ -285,7 +281,6 @@ public void LastWriteTimeUtcReset()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void LengthReset()
         {
             string file = null;
@@ -341,7 +336,6 @@ public void ExistsButDirectory()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ReadOnlyOnDirectory()
         {
             Assert.Equal(new FileInfo(Path.GetTempPath()).IsReadOnly, new FileState(Path.GetTempPath()).IsReadOnly);
diff --git a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
index b24510a83dd..0965bb7c461 100644
--- a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
+++ b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
@@ -1,10 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/FindInList_Tests.cs b/src/Tasks.UnitTests/FindInList_Tests.cs
index 4f20967bda6..c051964fdfa 100644
--- a/src/Tasks.UnitTests/FindInList_Tests.cs
+++ b/src/Tasks.UnitTests/FindInList_Tests.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
index 006ff88f7bf..482ab9c1c3b 100644
--- a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
+++ b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
@@ -1,10 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Utilities;
+using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
-using System.Collections.Generic;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/FindUnderPath_Tests.cs b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
index 62cba40c5fd..ce0be31a183 100644
--- a/src/Tasks.UnitTests/FindUnderPath_Tests.cs
+++ b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 
 
@@ -35,9 +36,7 @@ public void BasicFilter()
             Assert.Equal(FileUtilities.FixFilePath(@"C:\SomeoneElsesProject\File2.txt"), t.OutOfPath[0].ItemSpec);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // On Unix there no invalid file name characters
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. On Unix there is no invalid file name characters.")]
         public void InvalidFile()
         {
             FindUnderPath t = new FindUnderPath();
@@ -53,9 +52,7 @@ public void InvalidFile()
             // Don't crash
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // On Unix there no invalid file name characters
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. On Unix there is no invalid file name characters.")]
         public void InvalidPath()
         {
             FindUnderPath t = new FindUnderPath();
@@ -97,7 +94,6 @@ private static void RunTask(FindUnderPath t, out FileInfo testFile, out bool suc
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyFullPath()
         {
             FindUnderPath t = new FindUnderPath();
@@ -120,7 +116,6 @@ public void VerifyFullPath()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyFullPathNegative()
         {
             FindUnderPath t = new FindUnderPath();
diff --git a/src/Tasks.UnitTests/FormatUrl_Tests.cs b/src/Tasks.UnitTests/FormatUrl_Tests.cs
index de622591d23..5260d22e642 100644
--- a/src/Tasks.UnitTests/FormatUrl_Tests.cs
+++ b/src/Tasks.UnitTests/FormatUrl_Tests.cs
@@ -7,6 +7,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 namespace Microsoft.Build.UnitTests
 {
@@ -66,8 +67,7 @@ public void NoInputTest()
         /// From the documentation, Path.GetFullPath(" ") should throw an ArgumentException, but it doesn't on macOS and Linux
         /// where whitespace characters are valid characters for filenames.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void WhitespaceTestOnUnix()
         {
             var t = new FormatUrl();
@@ -81,8 +81,7 @@ public void WhitespaceTestOnUnix()
         /// <summary>
         /// The URL to format is white space.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void WhitespaceTestOnWindows()
         {
             var t = new FormatUrl();
@@ -139,8 +138,7 @@ public void LocalRelativePathTest()
         /// <summary>
         /// The URL to format is a *nix-style (macOS, Linux) local absolute file path.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void LocalUnixAbsolutePathTest()
         {
             var t = new FormatUrl();
@@ -154,8 +152,7 @@ public void LocalUnixAbsolutePathTest()
         /// <summary>
         /// The URL to format is a Windows-style local absolute file path.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void LocalWindowsAbsolutePathTest()
         {
             var t = new FormatUrl();
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index fc0e1104856..927348ec7e1 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -42,7 +42,6 @@ public void Dispose()
         /// - The only goal for <see cref="GenerateBindingRedirects"/> task is to add specified redirects to the output app.config.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TargetAppConfigShouldContainsBindingRedirects()
         {
             // Arrange
@@ -68,7 +67,6 @@ public void TargetAppConfigShouldContainsBindingRedirects()
         /// - The only goal for <see cref="GenerateBindingRedirects"/> task is to add specified redirects to the output app.config.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TargetAppConfigShouldContainsBindingRedirectsFromAppConfig()
         {
             // Arrange
@@ -103,7 +101,6 @@ public void TargetAppConfigShouldContainsBindingRedirectsFromAppConfig()
         ///   should respect that.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GenerateBindingRedirectsFromTwoDependentAssemblySections()
         {
             // Arrange
@@ -163,7 +160,6 @@ public void GenerateBindingRedirectsFromTwoDependentAssemblySections()
         ///   But due to MSDN documentation, dependentAssembly could have only probing element without any other elements inside.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void AppConfigWithProbingPathAndWithoutDependentAssemblyShouldNotProduceWarningsBug1161241()
         {
             // Arrange
@@ -191,7 +187,6 @@ public void AppConfigWithProbingPathAndWithoutDependentAssemblyShouldNotProduceW
         ///   But due to MSDN documentation, dependentAssembly could have only probing element without any other elements inside.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void AppConfigWithEmptyAssemblyBindingShouldNotProduceWarnings()
         {
             // Arrange
@@ -217,7 +212,6 @@ public void AppConfigWithEmptyAssemblyBindingShouldNotProduceWarnings()
         /// - Due to app.config xsd schema this is a valid configuration.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void DependentAssemblySectionWithoutBindingRedirectShouldNotProduceWarnings()
         {
             // Arrange
@@ -348,7 +342,7 @@ private string WriteAppConfigRuntimeSection(string runtimeSection)
         /// <summary>
         /// Helper class that contains execution results for <see cref="GenerateBindingRedirects"/>.
         /// </summary>
-        private class BindingRedirectsExecutionResult
+        private sealed class BindingRedirectsExecutionResult
         {
             public MockEngine Engine { get; set; }
 
@@ -364,7 +358,7 @@ private class BindingRedirectsExecutionResult
         /// <summary>
         /// Mock implementation of the <see cref="ITaskItem"/>.
         /// </summary>
-        private class TaskItemMock : ITaskItem
+        private sealed class TaskItemMock : ITaskItem
         {
             public TaskItemMock(string assemblyName, string maxVersion)
             {
diff --git a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
index 0763674cfd8..ad5535b8991 100644
--- a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
+++ b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
@@ -6,11 +6,11 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Xunit;
 using Microsoft.Build.Tasks;
+using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -148,8 +148,7 @@ private static string MakeFakeSDKStructure2()
 
     /// <summary>
     /// Test the GetInstalledSDKLocations task
-    /// </summary>
-    [PlatformSpecific(TestPlatforms.Windows)]
+    /// </summary>W
     public class GetInstalledSDKLocationsTestFixture : IClassFixture<FakeSDKStructure>
     {
         private readonly string _fakeSDKStructureRoot;
@@ -165,7 +164,7 @@ public GetInstalledSDKLocationsTestFixture(FakeSDKStructure fakeSDKStructure)
         /// <summary>
         /// Make sure we get a ArgumentException if null is passed into the target platform version.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NullTargetPlatformVersion()
         {
             Assert.Throws<ArgumentNullException>(() =>
@@ -179,7 +178,7 @@ public void NullTargetPlatformVersion()
         /// <summary>
         /// Make sure we get a ArgumentException if null is passed into the target platform version.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NullTargetPlatformIdentifier()
         {
             Assert.Throws<ArgumentNullException>(() =>
@@ -193,7 +192,7 @@ public void NullTargetPlatformIdentifier()
         /// <summary>
         /// Make sure we get an error message if an empty platform identifier is passed in.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void EmptyTargetPlatformIdentifier()
         {
             MockEngine engine = new MockEngine();
@@ -211,7 +210,7 @@ public void EmptyTargetPlatformIdentifier()
         /// <summary>
         /// Make sure we get an error message if an empty platform Version is passed in.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void EmptyTargetPlatformVersion()
         {
             MockEngine engine = new MockEngine();
@@ -230,7 +229,7 @@ public void EmptyTargetPlatformVersion()
         /// <summary>
         /// Make sure we get an error message if an empty platform Version is passed in.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void BadTargetPlatformVersion()
         {
             MockEngine engine = new MockEngine();
@@ -249,7 +248,7 @@ public void BadTargetPlatformVersion()
         /// <summary>
         /// Make sure we get an Warning if no SDKs were found.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NoSDKsFound()
         {
             MockEngine engine = new MockEngine();
@@ -267,7 +266,7 @@ public void NoSDKsFound()
         /// <summary>
         /// Get a good set of SDKS installed on the machine from the fake SDK location.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetSDKVersions()
         {
             try
@@ -314,7 +313,7 @@ public void GetSDKVersions()
         /// <summary>
         /// Get a good set of SDKS installed on the machine from the fake SDK location.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetGoodSDKs()
         {
             try
@@ -388,7 +387,7 @@ public void GetGoodSDKs()
         /// <summary>
         /// Get a good set of SDKS installed on the machine from the fake SDK location.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetGoodSDKs2()
         {
             try
diff --git a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
index 880a4bfae09..056f0080963 100644
--- a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
+++ b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
@@ -2,12 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Shared;
 using System.IO;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using Xunit;
+using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 
 #if !RUNTIME_TYPE_NETCORE
 #nullable disable
diff --git a/src/Tasks.UnitTests/GetSDKReference_Tests.cs b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
index cd5316b3e03..851300230cd 100644
--- a/src/Tasks.UnitTests/GetSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
@@ -14,6 +13,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -180,7 +180,6 @@ private static string CreateFakeSDKReferenceAssemblyDirectory2(out string sdkDir
     /// <summary>
     /// Test the expansion of sdk reference assemblies.
     /// </summary>
-    [PlatformSpecific(TestPlatforms.Windows)]
     public class GetSDKReferenceFilesTestFixture : IDisposable, IClassFixture<FakeSdkStructure>
     {
         private readonly ITestOutputHelper _output;
@@ -223,7 +222,7 @@ public void Dispose()
         /// <summary>
         /// Make sure there are no outputs if no resolved sdk files are passed in.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PassReferenceWithNoReferenceDirectory()
         {
             var engine = new MockEngine(_output);
@@ -253,8 +252,7 @@ public void PassReferenceWithNoReferenceDirectory()
         /// <summary>
         /// Make sure we get the correct folder list when asking for it.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void GetSDKReferenceFolders()
         {
             var getReferenceFolders = new GetSDKFolders(ToolLocationHelper.GetSDKReferenceFolders);
@@ -263,7 +261,7 @@ public void GetSDKReferenceFolders()
             VerifySDKFolders(getReferenceFolders, getReferenceFolders2, "References", _sdkDirectory);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyGetSdkReferenceTranslator()
         {
             Dictionary<string, GetSDKReferenceFiles.SdkReferenceInfo> pathToReferenceMetadata = new();
@@ -321,8 +319,7 @@ private static void VerifySDKFolders(GetSDKFolders singleParamDelegate, GetSDKFo
         /// <summary>
         /// Make sure we get the correct folder list when asking for it.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void GetSDKRedistFolders()
         {
             var getRedistFolders = new GetSDKFolders(ToolLocationHelper.GetSDKRedistFolders);
@@ -334,8 +331,7 @@ public void GetSDKRedistFolders()
         /// <summary>
         /// Make sure we get the correct folder list when asking for it.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void GetSDKDesignTimeFolders()
         {
             var getDesignTimeFolders = new GetSDKFolders(ToolLocationHelper.GetSDKDesignTimeFolders);
@@ -347,7 +343,7 @@ public void GetSDKDesignTimeFolders()
         /// <summary>
         /// Make sure there are no outputs if an sdk which does not exist is passed in.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PassNoSDKReferences()
         {
             var engine = new MockEngine(_output);
@@ -365,7 +361,7 @@ public void PassNoSDKReferences()
         /// <summary>
         /// Make sure there are no outputs if expand sdks is not true.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PassReferenceWithExpandFalse()
         {
             var engine = new MockEngine(_output);
@@ -390,7 +386,7 @@ public void PassReferenceWithExpandFalse()
         /// <summary>
         /// Make sure there are no redist outputs if CopyRedist is false
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void PassReferenceWithCopyRedistFalse()
         {
             var engine = new MockEngine(_output);
@@ -416,8 +412,7 @@ public void PassReferenceWithCopyRedistFalse()
         /// <summary>
         /// Verify we get the correct set of reference assemblies and copy local files when the CopyLocal flag is true
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void GetReferenceAssembliesWhenExpandTrueCopyLocalTrue()
         {
             var engine = new MockEngine(_output);
@@ -482,8 +477,7 @@ public void GetReferenceAssembliesWhenExpandTrueCopyLocalTrue()
         /// <summary>
         /// Verify reference is not processed by GetSDKReferenceFiles when "ReferenceOnly" metadata is set.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyNoCopyWhenReferenceOnlyIsTrue()
         {
             var engine = new MockEngine(_output);
@@ -539,9 +533,7 @@ public void VerifyNoCopyWhenReferenceOnlyIsTrue()
         /// <summary>
         /// Verify we get the correct set of reference assemblies and copy local files when the CopyLocal flag is false
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
+        [WindowsOnlyFact]
         public void GetReferenceAssembliesWhenExpandTrueCopyLocalFalse()
         {
             var engine = new MockEngine(_output);
@@ -596,7 +588,7 @@ public void GetReferenceAssembliesWhenExpandTrueCopyLocalFalse()
         /// Verify that different cache files are created and used correctly for assemblies with the same identity but with files in different directories
         /// Also verifies that when
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyCacheFileNames()
         {
             var engine = new MockEngine(_output);
@@ -662,8 +654,7 @@ public void VerifyCacheFileNames()
         /// Verify the correct reference files are found and that by default we do log the reference files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyReferencesLogged()
         {
             var engine = new MockEngine(_output);
@@ -711,8 +702,7 @@ public void VerifyReferencesLogged()
         /// Verify the correct reference files are found and that by default we do log the reference files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyReferencesLoggedFilterOutWinmd()
         {
             var engine = new MockEngine(_output);
@@ -757,8 +747,7 @@ public void VerifyReferencesLoggedFilterOutWinmd()
         /// <summary>
         /// Verify we log an error if no configuration is on the sdk reference
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogErrorWhenNoConfiguration()
         {
             var engine = new MockEngine(_output);
@@ -781,8 +770,7 @@ public void LogErrorWhenNoConfiguration()
         /// <summary>
         /// Verify we log an error if no configuration is on the sdk reference
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogErrorWhenNoArchitecture()
         {
             var engine = new MockEngine(_output);
@@ -807,8 +795,7 @@ public void LogErrorWhenNoArchitecture()
         /// Verify the correct reference files are found and that by default we do log the reference files
         /// added.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void VerifyReferencesLoggedAmd64()
         {
             var engine = new MockEngine(_output);
@@ -859,8 +846,7 @@ public void VerifyReferencesLoggedAmd64()
         /// Verify the correct reference files are found and that by default we do log the reference files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyReferencesLoggedX64()
         {
             var engine = new MockEngine(_output);
@@ -911,8 +897,7 @@ public void VerifyReferencesLoggedX64()
         /// <summary>
         /// Verify the correct reference files are found and that if we do not want to log them we can set a property to do so.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyLogReferencesFalse()
         {
             var engine = new MockEngine(_output);
@@ -947,8 +932,7 @@ public void VerifyLogReferencesFalse()
         /// Verify the correct redist files are found and that by default we do not log the redist files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyRedistFilesLogRedistFalse()
         {
             var engine = new MockEngine(_output);
@@ -1013,8 +997,7 @@ public void VerifyRedistFilesLogRedistFalse()
         /// Verify the correct redist files are found and that by default we do not log the redist files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyRedistFilesLogRedistTrue()
         {
             var engine = new MockEngine(_output);
@@ -1045,8 +1028,7 @@ public void VerifyRedistFilesLogRedistTrue()
         /// Verify the correct redist files are found and that by default we do not log the redist files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyRedistFilesLogRedistTrueX64()
         {
             var engine = new MockEngine(_output);
@@ -1078,8 +1060,7 @@ public void VerifyRedistFilesLogRedistTrueX64()
         /// Verify the correct redist files are found and that by default we do not log the redist files
         /// added.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void VerifyRedistFilesLogRedistTrueAmd64()
         {
             var engine = new MockEngine(_output);
@@ -1110,8 +1091,7 @@ public void VerifyRedistFilesLogRedistTrueAmd64()
         /// <summary>
         /// Make sure by default conflicts between references are logged as a comment if they are within the sdk itself
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogNoWarningForReferenceConflictWithinSDK()
         {
             var engine = new MockEngine(_output);
@@ -1139,8 +1119,7 @@ public void LogNoWarningForReferenceConflictWithinSDK()
         /// <summary>
         /// Make sure that if the LogReferenceConflictsWithinSDKAsWarning is set log a warning for conflicts within an SDK for references.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogWarningForReferenceConflictWithinSDK()
         {
             var engine = new MockEngine(_output);
@@ -1169,8 +1148,7 @@ public void LogWarningForReferenceConflictWithinSDK()
         /// <summary>
         /// Make sure by default conflicts between references are logged as a comment if they are within the sdk itself
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogNoWarningForRedistConflictWithinSDK()
         {
             var engine = new MockEngine(_output);
@@ -1197,8 +1175,7 @@ public void LogNoWarningForRedistConflictWithinSDK()
         /// <summary>
         /// Make sure that if the LogRedistConflictsWithinSDKAsWarning is set log a warning for conflicts within an SDK for redist files.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogWarningForRedistConflictWithinSDK()
         {
             var engine = new MockEngine(_output);
@@ -1226,8 +1203,7 @@ public void LogWarningForRedistConflictWithinSDK()
         /// <summary>
         /// Verify if there are conflicts between references or redist files between sdks that we log a warning by default.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogReferenceAndRedistConflictBetweenSdks()
         {
             var engine = new MockEngine(_output);
@@ -1272,8 +1248,7 @@ public void LogReferenceAndRedistConflictBetweenSdks()
         /// <summary>
         /// If a user create a target path that causes a conflict between two sdks then we want to warn
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogReferenceAndRedistConflictBetweenSdksDueToCustomTargetPath()
         {
             var engine = new MockEngine(_output);
@@ -1315,8 +1290,7 @@ public void LogReferenceAndRedistConflictBetweenSdksDueToCustomTargetPath()
         /// <summary>
         /// Verify if there are conflicts between references or redist files between sdks that we do not log a warning if a certain property (LogxxxConflictBetweenSDKsAsWarning is set to false.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void LogReferenceAndRedistConflictBetweenSdksNowarning()
         {
             var engine = new MockEngine(_output);
@@ -1362,8 +1336,7 @@ public void LogReferenceAndRedistConflictBetweenSdksNowarning()
         /// <summary>
         /// If there are conflicting redist files between two sdks but their target paths are different then we should copy both to the appx
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void TwoSDKSConflictRedistButDifferentTargetPaths()
         {
             var engine = new MockEngine(_output);
diff --git a/src/Tasks.UnitTests/HintPathResolver_Tests.cs b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
index eb80da45cf8..800a3d7cb1a 100644
--- a/src/Tasks.UnitTests/HintPathResolver_Tests.cs
+++ b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
@@ -1,13 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Shouldly;
-using System;
-using System.Collections.Generic;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -36,8 +37,7 @@ public void CanResolveHintPath()
             result.ShouldBe(true);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void CanResolveLongNonNormalizedHintPath()
         {
             var tempfolder = _env.DefaultTestDirectory.CreateDirectory("tempfolder_for_CanResolveLongHintPath");
diff --git a/src/Tasks.UnitTests/MSBuild_Tests.cs b/src/Tasks.UnitTests/MSBuild_Tests.cs
index eb267ef08e7..f8dcf89bbfe 100644
--- a/src/Tasks.UnitTests/MSBuild_Tests.cs
+++ b/src/Tasks.UnitTests/MSBuild_Tests.cs
@@ -391,7 +391,6 @@ public void LogErrorWhenBuildingVCProj()
 #else
         [Fact]
 #endif
-        [Trait("Category", "mono-osx-failing")]
         public void PropertyOverridesContainSemicolon()
         {
             ObjectModelHelpers.DeleteTempProjectDirectory();
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index b05bd654604..fd390661eb3 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -4,10 +4,11 @@
 using System;
 using System.IO;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -59,8 +60,7 @@ public void AttributeForwarding()
         /// Check that if we fail to create a folder, we don't pass
         /// through the input.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "Under Unix all filenames are valid and this test is not useful"
+        [WindowsOnlyFact(additionalMessage: "Under Unix all filenames are valid and this test is not useful.")]
         public void SomeInputsFailToCreate()
         {
             string temp = Path.GetTempPath();
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 3acd8c56824..473207bfe6f 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -57,7 +57,12 @@
       <Link>TestEnvironment.cs</Link>
     </Compile>
     <Compile Include="..\Shared\ProcessExtensions.cs" />
+    <Compile Include="..\UnitTests.Shared\EnvironmentProvider.cs" />
     <Compile Include="..\UnitTests.Shared\RunnerUtilities.cs" />
+    <Compile Include="..\Shared\UnitTests\LongPathSupportDisabledFactAttribute.cs">
+      <Link>Shared\LongPathSupportDisabledFactAttribute.cs</Link>
+    </Compile>
+    <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs" />
 
     <EmbeddedResource Include="SampleResx" />
     <EmbeddedResource Include="AssemblyDependency\CacheFileSamples\Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache" />
diff --git a/src/Tasks.UnitTests/MockTypeInfo.cs b/src/Tasks.UnitTests/MockTypeInfo.cs
index 3cf5d11f108..aabf7050f11 100644
--- a/src/Tasks.UnitTests/MockTypeInfo.cs
+++ b/src/Tasks.UnitTests/MockTypeInfo.cs
@@ -4,11 +4,10 @@
 using System;
 using System.Collections.Generic;
 using System.Runtime.InteropServices.ComTypes;
-
+using Xunit;
+using IFixedTypeInfo = Microsoft.Build.Tasks.IFixedTypeInfo;
 using Marshal = System.Runtime.InteropServices.Marshal;
 using VarEnum = System.Runtime.InteropServices.VarEnum;
-using IFixedTypeInfo = Microsoft.Build.Tasks.IFixedTypeInfo;
-using Xunit;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/MockTypeLib.cs b/src/Tasks.UnitTests/MockTypeLib.cs
index 889aa6f63a1..28b42a5fa5c 100644
--- a/src/Tasks.UnitTests/MockTypeLib.cs
+++ b/src/Tasks.UnitTests/MockTypeLib.cs
@@ -4,11 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Runtime.InteropServices.ComTypes;
-
 using Microsoft.Build.Tasks;
-
-using Marshal = System.Runtime.InteropServices.Marshal;
 using Xunit;
+using Marshal = System.Runtime.InteropServices.Marshal;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
index e5ebcfc90ab..5adffb71e6e 100644
--- a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
+++ b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
@@ -3,9 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-
-using Marshal = System.Runtime.InteropServices.Marshal;
 using Xunit;
+using Marshal = System.Runtime.InteropServices.Marshal;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/Move_Tests.cs b/src/Tasks.UnitTests/Move_Tests.cs
index d76e34bd350..5c14b9ad86a 100644
--- a/src/Tasks.UnitTests/Move_Tests.cs
+++ b/src/Tasks.UnitTests/Move_Tests.cs
@@ -3,10 +3,11 @@
 
 using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Tasks;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -413,8 +414,7 @@ public void MoveOverExistingFileOverwriteReadOnlyOverWriteReadOnlyFilesTrue()
         /// MovedFiles should only include files that were successfully moved 
         /// (or skipped), not files for which there was an error.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "Under Unix all filenames are valid and this test is not useful"
+        [WindowsOnlyFact(additionalMessage: "Under Unix all filenames are valid and this test is not useful.")]
         public void OutputsOnlyIncludeSuccessfulMoves()
         {
             string temp = Path.GetTempPath();
@@ -493,8 +493,7 @@ public void OutputsOnlyIncludeSuccessfulMoves()
         /// <summary>
         /// Moving a locked file will fail
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "File locking Unix differs significantly from Windows"
+        [WindowsOnlyFact(additionalMessage: "File locking Unix differs significantly from Windows.")]
         public void MoveLockedFile()
         {
             string file = null;
@@ -588,8 +587,7 @@ public void SourceFileIsDirectory()
         /// Moving a file on top of itself should be a success (no-op).
         /// Variation with different casing/relativeness.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "File names under Unix are case-sensitive and this test is not useful"
+        [WindowsOnlyFact(additionalMessage: "File names under Unix are case-sensitive and this test is not useful.")]
         public void MoveFileOnItself2()
         {
             string currdir = Directory.GetCurrentDirectory();
@@ -781,8 +779,7 @@ public void DestinationFilesLengthNotEqualSourceFilesLength()
         /// If the destination path is too long, the task should not bubble up
         /// the System.IO.PathTooLongException 
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void Regress451057_ExitGracefullyIfPathNameIsTooLong()
         {
             string sourceFile = FileUtilities.GetTemporaryFile();
@@ -818,8 +815,7 @@ public void Regress451057_ExitGracefullyIfPathNameIsTooLong()
         /// If the source path is too long, the task should not bubble up
         /// the System.IO.PathTooLongException 
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void Regress451057_ExitGracefullyIfPathNameIsTooLong2()
         {
             string sourceFile = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ";
diff --git a/src/Tasks.UnitTests/NuGetPropsImportTests.cs b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
index 96880608729..bf7eaa44f9e 100644
--- a/src/Tasks.UnitTests/NuGetPropsImportTests.cs
+++ b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
@@ -1,9 +1,9 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System;
 using System.IO;
+using Microsoft.Build.Evaluation;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/OutputPathTests.cs b/src/Tasks.UnitTests/OutputPathTests.cs
index ddfd43951b7..af1d3902804 100644
--- a/src/Tasks.UnitTests/OutputPathTests.cs
+++ b/src/Tasks.UnitTests/OutputPathTests.cs
@@ -12,6 +12,7 @@
 
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -151,7 +152,7 @@ public void BothBaseOutputPathAndOutputPathWereSpecified()
         /// <summary>
         /// Test for [MSBuild]::NormalizePath and [MSBuild]::NormalizeDirectory returning current directory instead of current Project directory.
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsWindows), Skip = "Skipping this test for now until we have a consensus about this issue.")]
+        [WindowsOnlyFact(Skip = "Skipping this test for now until we have a consensus about this issue.")]
         public void MSBuildNormalizePathShouldReturnProjectDirectory()
         {
             // Arrange
diff --git a/src/Tasks.UnitTests/PortableTasks_Tests.cs b/src/Tasks.UnitTests/PortableTasks_Tests.cs
index 38457261232..e409d1f61bd 100644
--- a/src/Tasks.UnitTests/PortableTasks_Tests.cs
+++ b/src/Tasks.UnitTests/PortableTasks_Tests.cs
@@ -9,6 +9,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -29,9 +30,7 @@ public PortableTasks_Tests(ITestOutputHelper outputHelper)
             _outputHelper = outputHelper;
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "No Visual Studio install for .NET.")]
         public void TestDesktopMSBuildShouldRunPortableTask()
         {
             RunMSBuildOnProjectWithPortableTaskAndAssertOutput(true);
diff --git a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
index 5b4ad49085b..a430f5c2993 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Evaluation;
 using System;
 using System.IO;
 using System.Linq;
+using Microsoft.Build.Evaluation;
 using Shouldly;
 using Xunit;
 
diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index a889879c079..062eab76b12 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -1,13 +1,13 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.Utilities;
 using Shouldly;
-using System;
-using System.Collections.Generic;
-using System.IO;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/RegressionTests.cs b/src/Tasks.UnitTests/RegressionTests.cs
index 6ca6b081557..a92f5e148dc 100644
--- a/src/Tasks.UnitTests/RegressionTests.cs
+++ b/src/Tasks.UnitTests/RegressionTests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.UnitTests;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -51,7 +52,7 @@ public void OverrideBaseIntermediateOutputPathSucceeds()
         /// <summary>
         /// Tests fix for https://github.com/dotnet/msbuild/issues/1479.
         /// </summary>
-        [ConditionalFact(typeof(NativeMethodsShared), nameof(NativeMethodsShared.IsWindows))]
+        [WindowsOnlyFact]
         public void AssemblyAttributesLocation()
         {
             var expectedCompileItems = "a.cs;" + Path.Combine("obj", "Debug", ".NETFramework,Version=v4.8.AssemblyAttributes.cs");
diff --git a/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs b/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
index 367bc2660bf..a8eb139f408 100644
--- a/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Tasks;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
 using Xunit;
 
 #nullable disable
@@ -13,7 +13,7 @@ namespace Microsoft.Build.UnitTests
 {
     public class ResolveAnalyzerRuleSet_Tests
     {
-        private class TemporaryFile : IDisposable
+        private sealed class TemporaryFile : IDisposable
         {
             private readonly string _fullPath;
 
@@ -30,7 +30,7 @@ public void Dispose()
             }
         }
 
-        private class TemporaryDirectory : IDisposable
+        private sealed class TemporaryDirectory : IDisposable
         {
             private readonly string _path;
 
diff --git a/src/Tasks.UnitTests/ResolveComReference_Tests.cs b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
index 0768fb9ea36..f71b3383a34 100644
--- a/src/Tasks.UnitTests/ResolveComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
@@ -5,18 +5,16 @@
 
 using System;
 using System.Collections.Generic;
-
-// TYPELIBATTR clashes with the one in InteropServices.
-using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
-
-using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Tasks;
-using Xunit;
-using Microsoft.Build.Shared;
 using System.IO;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Shouldly;
+using Xunit;
+// TYPELIBATTR clashes with the one in InteropServices.
+using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
 
 #nullable disable
 
@@ -475,7 +473,6 @@ public void DelaySignWithoutEitherKeyFileOrKeyContainer()
         /// Test if assemblies located in the gac get their CopyLocal attribute set to False
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CheckSetCopyLocalToFalseOnEmbedInteropTypesAssemblies()
         {
             string gacPath = @"C:\windows\gac";
@@ -564,7 +561,6 @@ public void CheckSetCopyLocalToFalseOnEmbedInteropTypesAssemblies()
         /// Test if assemblies located in the gac get their CopyLocal attribute set to False
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CheckSetCopyLocalToFalseOnGacAssemblies()
         {
             string gacPath = @"C:\windows\gac";
diff --git a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
index 9948b29d469..5de1bfcf5fb 100644
--- a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
@@ -5,8 +5,8 @@
 using System.Collections;
 using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -125,7 +125,6 @@ private void TestResolveHelper(string itemSpec, string projectGuid, string packa
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestResolve()
         {
             // empty pre-generated string
@@ -209,7 +208,6 @@ private void TestUnresolvedReferencesHelper(ArrayList projectRefs, Hashtable pre
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestManagedCheck()
         {
             Hashtable unresolvedOutputs = null;
@@ -239,7 +237,6 @@ public void TestManagedCheck()
         /// Verifies that the UnresolvedProjectReferences output parameter is populated correctly.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestUnresolvedReferences()
         {
             ArrayList projectRefs = new ArrayList();
diff --git a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
index 8fd537d5c4f..fd2d6460e19 100644
--- a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
@@ -4,24 +4,21 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-
-
-
-using SDKReference = Microsoft.Build.Tasks.ResolveSDKReference.SDKReference;
-using Microsoft.Build.Evaluation;
-using Microsoft.Build.Execution;
-using Xunit;
 using Shouldly;
+using Xunit;
+using Xunit.NetCore.Extensions;
+using SDKReference = Microsoft.Build.Tasks.ResolveSDKReference.SDKReference;
 
 #nullable disable
 
 namespace Microsoft.Build.UnitTests.ResolveSDKReference_Tests
 {
-    [PlatformSpecific(TestPlatforms.Windows)]
     public class ResolveSDKReferenceTestFixture
     {
         private Microsoft.Build.UnitTests.MockEngine.GetStringDelegate _resourceDelegate = new Microsoft.Build.UnitTests.MockEngine.GetStringDelegate(AssemblyResources.GetString);
@@ -35,7 +32,7 @@ public class ResolveSDKReferenceTestFixture
         /// <summary>
         /// Make sure that SDK reference which should be good are parsed correctly.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ParseItemSpecGood()
         {
             TestGoodSDKReferenceIncludes(new TaskItem("Cat, Version=8.0"), "Cat", "8.0");
@@ -51,7 +48,7 @@ public void ParseItemSpecGood()
         /// <summary>
         /// Make sure ones which are incorrect and log the correct error.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ParseItemSpecBadNames()
         {
             // These should all be bad the format must be   <SDKName>, Version=<SDKVersion>.
@@ -72,7 +69,7 @@ public void ParseItemSpecBadNames()
         /// <summary>
         /// Make sure ones which are incorrect and log the correct error.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ParseDependsOnString()
         {
             Assert.Empty(ResolveSDKReference.ParseDependsOnSDK(null));
@@ -93,7 +90,7 @@ public void ParseDependsOnString()
         /// <summary>
         /// Make sure ones which are incorrect and log the correct error.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GetUnResolvedDependentSDKs()
         {
             HashSet<SDKReference> resolvedSDKsEmpty = new HashSet<SDKReference>();
@@ -121,7 +118,7 @@ public void GetUnResolvedDependentSDKs()
             Assert.Equal("\"baz, Version=2.0\"", result[1]);
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyBuildWarningForESDKWithoutMaxPlatformVersionOnBlueOrAbove()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "TestMaxPlatformVersionWithTargetFrameworkVersion");
@@ -312,7 +309,7 @@ public void VerifyBuildWarningForESDKWithoutMaxPlatformVersionOnBlueOrAbove()
         /// <summary>
         /// Verify "RuntimeReferenceOnly" equals to "true" is set for specified references
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyAddMetadataToReferences()
         {
             MockEngine engine = new MockEngine();
@@ -354,7 +351,7 @@ public void VerifyAddMetadataToReferences()
         /// <summary>
         /// Make sure ones which are incorrect and log the correct warning.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyUnResolvedSDKMessage()
         {
             MockEngine engine = new MockEngine();
@@ -429,7 +426,7 @@ public void VerifyUnResolvedSDKMessage()
         /// <summary>
         /// Verify if the DependsOn metadata is set on the reference item and that dependency is not resolved then cause the warning to happen.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyDependencyWarningFromMetadata()
         {
             // Create the engine.
@@ -460,7 +457,7 @@ public void VerifyDependencyWarningFromMetadata()
         /// <summary>
         /// Verify we get the correct dependson warning
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void VerifyDependsOnWarningFromManifest()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "VerifyDependsOnWarningFromManifest");
@@ -527,7 +524,7 @@ public void VerifyDependsOnWarningFromManifest()
         /// <summary>
         /// Make sure the equals works on the SDKReference.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void TestSDkReferenceEquals()
         {
             ITaskItem dummyItem = new TaskItem();
@@ -575,7 +572,7 @@ private static void TestBadSDKReferenceIncludes(ITaskItem referenceInclude)
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:true Target:msil Expect: No error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit1()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit1");
@@ -630,7 +627,7 @@ public void Prefer32bit1()
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:false Target:AnyCPU Expect: error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit2()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit2");
@@ -688,7 +685,7 @@ public void Prefer32bit2()
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:false Target:x86 Expect: No error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit3()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit3");
@@ -743,7 +740,7 @@ public void Prefer32bit3()
         /// <summary>
         /// Project: Prefer32bit false  Manifest:SupportPrefer32Bit:false Target:msil Expect: No error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit4()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit4");
@@ -798,7 +795,7 @@ public void Prefer32bit4()
         /// <summary>
         /// Project: Prefer32bit false  Manifest:SupportPrefer32Bit:false Target:x86 Expect: No error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit5()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit5");
@@ -853,7 +850,7 @@ public void Prefer32bit5()
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:FOO Target:msil Expect: error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit6()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit6");
@@ -910,7 +907,7 @@ public void Prefer32bit6()
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:empty Target:msil Expect: No error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit7()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit7");
@@ -965,7 +962,7 @@ public void Prefer32bit7()
         /// <summary>
         /// Project: Prefer32bit true  Manifest:SupportPrefer32Bit:missing Target:msil Expect: No Error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit8()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit8");
@@ -1019,7 +1016,7 @@ public void Prefer32bit8()
         /// <summary>
         /// Project: Prefer32bit false  Manifest:SupportPrefer32Bit:true Target:msil Expect: No Error
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void Prefer32bit9()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "Prefer32bit9");
@@ -1075,7 +1072,7 @@ public void Prefer32bit9()
         /// Resolve from an SDK which exists and is not a framework SDK. This means there is no frameworkIdentity or APPXLocation.
         /// Also since no configuration or architecture were passed in we expect the defaults.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ResolveFromNonFrameworkNoManifest()
         {
             // Create the engine.
@@ -1112,7 +1109,7 @@ public void ResolveFromNonFrameworkNoManifest()
         /// Resolve from an SDK which exists and is not a framework SDK. This means there is no frameworkIdentity or APPXLocation.
         /// Also since no configuration or architecture were passed in we expect the defaults.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ResolveFromNonFrameworkPassInConfigAndArch()
         {
             // Create the engine.
@@ -1150,7 +1147,7 @@ public void ResolveFromNonFrameworkPassInConfigAndArch()
         /// Resolve from an SDK which exists and is not a framework SDK. This means there is no frameworkIdentity or APPXLocation.
         /// Also since no configuration or architecture were passed in we expect the defaults.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ResolveFromNonFrameworkPassInConfigAndArchOverrideByMetadata()
         {
             // Create the engine.
@@ -1191,7 +1188,7 @@ public void ResolveFromNonFrameworkPassInConfigAndArchOverrideByMetadata()
         /// <summary>
         /// When duplicate references are passed in we only want the first one.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void DuplicateSDKReferences()
         {
             // Create the engine.
@@ -1227,7 +1224,7 @@ public void DuplicateSDKReferences()
         /// Verify that if references have SDKName metadata on them that matches a resolved SDK then that SDK should
         /// not have its reference assemblies expanded.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void DoNotExpandSDKsWhichAreAlsoTargetedByReferences()
         {
             // Create the engine.
@@ -1299,7 +1296,7 @@ public void DoNotExpandSDKsWhichAreAlsoTargetedByReferences()
         /// <summary>
         /// When InstalledSDK is empty we should log a message and succeed.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void InstalledSDKEmpty()
         {
             // Create the engine.
@@ -1323,7 +1320,7 @@ public void InstalledSDKEmpty()
         /// <summary>
         /// Lets have a mix of install sdk items, some are good, some are bad (missing item spec) others are bad (missing SDKName)
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MixOfInstalledSDKItemsGoodDuplicateAndBad()
         {
             // Create the engine.
@@ -1373,7 +1370,7 @@ public void MixOfInstalledSDKItemsGoodDuplicateAndBad()
         /// <summary>
         /// Make sure when no sdks are resolved there are no problems and that the names of the sdks which were not resolved are logged.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NOSDKResolved()
         {
             // Create the engine.
@@ -1401,7 +1398,7 @@ public void NOSDKResolved()
         /// When there is a mix of resolved and unresolved SDKs make sure that the resolved ones are correctly found
         /// and the unresolved ones are logged.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MixOfResolvedAndUnResolved()
         {
             // Create the engine.
@@ -1432,7 +1429,7 @@ public void MixOfResolvedAndUnResolved()
         /// <summary>
         /// When a null is passed into the SDKReferences property make sure we get the correct exception out.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NullSDKReferences()
         {
             Assert.Throws<ArgumentNullException>(() =>
@@ -1448,7 +1445,7 @@ public void NullSDKReferences()
         /// <summary>
         /// When a null is passed into the set of InstalledSDKS property make sure we get the correct exception out.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NullInstalledSDKs()
         {
             Assert.Throws<ArgumentNullException>(() =>
@@ -1465,7 +1462,7 @@ public void NullInstalledSDKs()
         /// <summary>
         /// If no SDKReferences are passed in then we should get nothing out.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void EmptySDKReferencesList()
         {
             // Create the engine.
@@ -1489,7 +1486,7 @@ public void EmptySDKReferencesList()
         /// When we find the SDKManifest it may be poorly formatted. If that happens we need to log the error
         /// and not resolve the SDK. We also add a good one as well to make sure resolution continues.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SDKFoundButBadlyFormattedSDKManifestWarnings()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SDKFoundButBadlyFormattedSDKManifestWarnings");
@@ -1548,8 +1545,7 @@ public void SDKFoundButBadlyFormattedSDKManifestWarnings()
         /// When we find the SDKManifest it may be poorly formatted. If that happens we need to log the error
         /// and not resolve the SDK. We also add a good one as well to make sure resolution continues.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
+        [WindowsOnlyFact]
         public void SDKFoundButBadlyFormattedSDKManifestErrors()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SDKFoundButBadlyFormattedSDKManifestErrors");
@@ -1600,7 +1596,7 @@ public void SDKFoundButBadlyFormattedSDKManifestErrors()
             }
         }
 
-        [Fact]
+        [WindowsOnlyFact]
         public void TestMaxPlatformVersionWithTargetFrameworkVersion()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "TestMaxPlatformVersionWithTargetFrameworkVersion");
@@ -1706,7 +1702,7 @@ public void TestMaxPlatformVersionWithTargetFrameworkVersion()
         /// <summary>
         /// Test the case where the manifest attributes are empty.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void EmptySDKManifestAttributes()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "EmptySDKManifestAttributes");
@@ -1791,7 +1787,7 @@ public void EmptySDKManifestAttributes()
         /// <summary>
         /// Test the case where we override ALL of the manifest properties with ones on the metadata
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void OverrideManifestAttributes()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "OverrideManifestAttributes");
@@ -1889,7 +1885,7 @@ public void OverrideManifestAttributes()
         /// <summary>
         /// Test the case where we Have a good manifest that had framework and appx locations that exactly match the targeted sdk configuration and architecture.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GoodManifestMatchingConfigAndArch()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GoodManifestMatchingConfigAndArch");
@@ -1962,7 +1958,7 @@ public void GoodManifestMatchingConfigAndArch()
         /// <summary>
         /// Test the case where we Have a good manifest that had framework and appx locations that only match the targeted sdk configuration.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GoodManifestMatchingConfigOnly()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GoodManifestMatchingConfigOnly");
@@ -2031,7 +2027,7 @@ public void GoodManifestMatchingConfigOnly()
         /// <summary>
         /// TVerify that when a platform identity is found that we do not copy the references or redist
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void NoCopyOnPlatformIdentityFound()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "NoCopyOnPlatformIdentityFound");
@@ -2098,7 +2094,7 @@ public void NoCopyOnPlatformIdentityFound()
         /// Test the case where we Have a good manifest that had framework and appx locations that does not match any of the config arch combinations but does match
         /// and entry name simply FrameworkIdentity or APPX
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void GoodManifestMatchingBaseNameOnly()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GoodManifestMatchingConfigOnly");
@@ -2172,7 +2168,7 @@ public void GoodManifestMatchingBaseNameOnly()
         /// <summary>
         /// Test the case where we only have the arm APPX and it can be found
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ManifestOnlyHasArmLocation()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ManifestOnlyHasArmLocation");
@@ -2240,7 +2236,7 @@ public void ManifestOnlyHasArmLocation()
         /// <summary>
         /// Test the case where we have a number of locations and arm APPX and can be found
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ManifestArmLocationWithOthers()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ManifestArmLocationWithOthers");
@@ -2311,7 +2307,7 @@ public void ManifestArmLocationWithOthers()
         /// Test the case where there are framework identity attributes but none of the match and there is no base FrameworkIdentity, the
         /// same is true for APPX.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MatchNoNamesButNamesExistWarning()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "MatchNoNamesButNamesExistWarning");
@@ -2383,7 +2379,7 @@ public void MatchNoNamesButNamesExistWarning()
         /// Test the case where there are framework identity attributes but none of the match and there is no base FrameworkIdentity, the
         /// same is true for APPX.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MatchNoNamesButNamesExistError()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "MatchNoNamesButNamesExistError");
@@ -2452,7 +2448,7 @@ public void MatchNoNamesButNamesExistError()
         /// <summary>
         /// Test the case where there is a single supported architecture and the project targets that architecture
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SingleSupportedArchitectureMatchesProject()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SingleSupportedArchitectureMatchesProject");
@@ -2525,7 +2521,7 @@ public void SingleSupportedArchitectureMatchesProject()
         /// <summary>
         /// Test the case where the productfamily is set in the manifest and not as metadata on the reference item.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ProductFamilySetInManifest()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ProductFamilySetInManifest");
@@ -2590,7 +2586,7 @@ public void ProductFamilySetInManifest()
         /// <summary>
         /// Test the case where the productfamily is set in the manifest and as metadata on the reference item. Expect the metadata to win.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ProductFamilySetInManifestAndMetadata()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ProductFamilySetInManifestAndMetadata");
@@ -2657,7 +2653,7 @@ public void ProductFamilySetInManifestAndMetadata()
         /// <summary>
         /// Test the case where the SupportsMultipleVersions is NOT in the manifest or on metadata
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SupportsMultipleVersionsNotInManifest()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SupportsMultipleVersionsNotInManifest");
@@ -2721,7 +2717,7 @@ public void SupportsMultipleVersionsNotInManifest()
         /// <summary>
         /// Test the case where metadata on the item is bad, we should then read from the manifest.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SupportsMultipleVersionsBadMetadata()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SupportsMultipleVersionsBadMetadata");
@@ -2789,7 +2785,7 @@ public void SupportsMultipleVersionsBadMetadata()
         /// <summary>
         /// Test the case where there are conflicts between sdks of the same product family
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ConflictsBetweenSameProductFamilySameName()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ConflictsBetweenSameProductFamilySameName");
@@ -2887,7 +2883,7 @@ public void ConflictsBetweenSameProductFamilySameName()
         /// <summary>
         /// Test the case where there are conflicts between sdks of the same product family
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ConflictsBetweenSameProductFamilyDiffName()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ConflictsBetweenSameProductFamilyDiffName");
@@ -2985,7 +2981,7 @@ public void ConflictsBetweenSameProductFamilyDiffName()
         /// <summary>
         /// Test the case where there are conflicts between sdks of the same product family
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ConflictsBetweenMIXPFAndName()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ConflictsBetweenSameProductFamilyDiffName");
@@ -3098,7 +3094,7 @@ public void ConflictsBetweenMIXPFAndName()
         /// <summary>
         /// Test the case where there are conflicts between sdks of the same SDK Name
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void ConflictsBetweenSameSDKName()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "ConflictsBetweenSameSDKName");
@@ -3196,7 +3192,7 @@ public void ConflictsBetweenSameSDKName()
         /// <summary>
         /// Test the case where metadata on the item is bad, we should then read from the manifest.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SupportsMultipleVersionsReadManifest()
         {
             SupportsMultipleVersionsVerifyManifestReading("Error");
@@ -3278,7 +3274,7 @@ private void SupportsMultipleVersionsVerifyManifestReading(string manifestEntry)
         /// <summary>
         /// Test the case where the supportedArchitectures are empty
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void EmptyArchitectures()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "OverrideManifestWithMetadata");
@@ -3355,7 +3351,7 @@ public void EmptyArchitectures()
         /// <summary>
         /// Test the case where the metadata on the reference overrides what is in the manifest but it does not match what is being targeted
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void OverrideManifestWithMetadataButMetadataDoesNotMatch()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "OverrideManifestWithMetadataButMetadataDoesNotMatch");
@@ -3421,7 +3417,7 @@ public void OverrideManifestWithMetadataButMetadataDoesNotMatch()
         /// <summary>
         /// Test the case where the metadata on the reference overrides what is in the manifest
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void OverrideManifestWithMetadata()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "OverrideManifestWithMetadata");
@@ -3499,7 +3495,7 @@ public void OverrideManifestWithMetadata()
         /// <summary>
         /// Test the case where there is a single supported architecture and the project does not target that architecture
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void SingleSupportedArchitectureDoesNotMatchProject()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "SingleSupportedArchitectureDoesNotMatchProject");
@@ -3563,7 +3559,7 @@ public void SingleSupportedArchitectureDoesNotMatchProject()
         /// <summary>
         /// Test the case where there is are multiple supported architecture and the project targets one of those architectures
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MultipleSupportedArchitectureMatchesProject()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "MultipleSupportedArchitectureMatchesProject");
@@ -3635,7 +3631,7 @@ public void MultipleSupportedArchitectureMatchesProject()
         /// <summary>
         /// Test the case where there is are multiple supported architecture and the project does not match one of those architectures
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact]
         public void MultipleSupportedArchitectureDoesNotMatchProject()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "MultipleSupportedArchitectureMatchesProject");
@@ -3701,11 +3697,9 @@ public void MultipleSupportedArchitectureDoesNotMatchProject()
     /// <summary>
     /// Test the output groups which will be used to generate the recipe fileGatherSDKOutputGroups
     /// </summary>
-    [PlatformSpecific(TestPlatforms.Windows)]
     public class GatherSDKOutputGroupsTestFixture
     {
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
+        [WindowsOnlyFact(additionalMessage: "No GetResolvedSDKReferences target in Unix.")]
         public void GatherSDKOutputGroupsTargetArchitectureExists()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GatherSDKOutputGroupsWithFramework");
@@ -3848,8 +3842,7 @@ public void GatherSDKOutputGroupsTargetArchitectureExists()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
+        [WindowsOnlyFact(additionalMessage: "No GetResolvedSDKReferences target in Unix.")]
         public void GatherSDKOutputGroupsTargetArchitectureExists2()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GatherSDKOutputGroupsWithFramework");
@@ -3993,8 +3986,7 @@ public void GatherSDKOutputGroupsTargetArchitectureExists2()
         }
 
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
+        [WindowsOnlyFact(additionalMessage: "No GetResolvedSDKReferences target in Unix.")]
         public void GatherSDKOutputGroupsTargetArchitectureDoesNotExists()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "GatherSDKOutputGroupsTargetArchitectureDoesNotExists");
@@ -4103,8 +4095,7 @@ public void GatherSDKOutputGroupsTargetArchitectureDoesNotExists()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
+        [WindowsOnlyFact(additionalMessage: "No GetResolvedSDKReferences target in Unix.")]
         public void CheckDefaultingOfTargetConfigAndArchitecture()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "CheckDefaultingOfTargetConfigAndArchitecture");
@@ -4201,8 +4192,7 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void VerifyPlatformAliasesWork()
         {
             // This verifies that UAP is an alias for windows, so verifying the target platforms align. Other parts of the reference don't matter here.
@@ -4224,8 +4214,7 @@ public void VerifyPlatformAliasesWork()
             reference.TargetPlatform.ShouldBe("UAP");
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
+        [WindowsOnlyFact(additionalMessage: "No GetResolvedSDKReferences target in Unix.")]
         public void CheckAttributesFromManifestArePassedToResolvedAssemblies()
         {
             /* \Microsoft SDKs\Windows\v8.0\ExtensionSDKs */
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index f2c6b9d0524..4172d013c78 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -3,22 +3,21 @@
 
 using System;
 using System.Collections.Generic;
+using System.IO;
+using System.Threading;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.IO;
-using System.Threading;
-using Shouldly;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
 namespace Microsoft.Build.UnitTests.GenerateResource_Tests.OutOfProc
 {
-    [Trait("Category", "mono-osx-failing")]
-    [Trait("Category", "mono-windows-failing")]
     public sealed class RequiredTransformations
     {
         private readonly ITestOutputHelper _output;
@@ -491,7 +490,6 @@ public void AllowLinkedNoGenerate()
         ///  Allow the task to skip processing based on having nothing out of date
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void NothingOutOfDate()
         {
             string resxFile = null;
@@ -571,8 +569,6 @@ public void NothingOutOfDate()
         /// </summary>
         /// <remarks>System dll is not locked because it forces a new app domain</remarks>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void NothingOutOfDateExceptReference()
         {
             string resxFile = null;
@@ -973,7 +969,6 @@ public void StronglyTypedResourcesUpToDate()
         /// STR class file is out of date, but resources are up to date. Should still generate it.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void StronglyTypedResourcesOutOfDate()
         {
             string resxFile = null;
@@ -1245,7 +1240,6 @@ public void StronglyTypedResourcesWithoutNamespaceOrClassOrFilename()
         ///  STR with resource namespace yields proper output, message (CS)
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void STRWithResourcesNamespaceCS()
         {
             Utilities.STRNamespaceTestHelper("CSharp", "MyResourcesNamespace", null, _output);
@@ -1273,7 +1267,6 @@ public void STRWithResourcesNamespaceAndSTRNamespaceCS()
         ///  STR with resource namespace and STR namespace yields proper output, message (CS)
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void STRWithResourcesNamespaceAndSTRNamespaceVB()
         {
             Utilities.STRNamespaceTestHelper("VB", "MyResourcesNamespace", "MySTClassNamespace", _output);
@@ -1293,7 +1286,6 @@ public TransformationErrors(ITestOutputHelper output)
         ///  Text input failures, no name, no '=', 'strings' token, invalid token, invalid escape
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TextToResourcesBadFormat()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -1359,8 +1351,6 @@ public void TextToResourcesBadFormat()
         ///  Cause failures in ResXResourceReader
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void FailedResXReader()
         {
             string resxFile1 = null;
@@ -1427,8 +1417,6 @@ public void FailedResXReader()
         ///  Cause failures in ResXResourceReader, different codepath
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void FailedResXReaderWithAllOutputResourcesSpecified()
         {
             string resxFile1 = null;
@@ -1502,7 +1490,6 @@ public void FailedResXReaderWithAllOutputResourcesSpecified()
         ///  Duplicate resource names
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void DuplicateResourceNames()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1528,7 +1515,6 @@ public void DuplicateResourceNames()
         ///  Non-string resource with text output
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UnsupportedTextType()
         {
             string bitmap = Utilities.CreateWorldsSmallestBitmap();
@@ -1596,7 +1582,6 @@ public void InvalidStateFile()
         ///  Cause failures in ResourceReader
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void FailedResourceReader()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1630,7 +1615,6 @@ public void FailedResourceReader()
         ///  Invalid STR Class name
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void FailedSTRProperty()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1818,8 +1802,6 @@ public void OutputFilesNotSpecified()
         ///  FilesWritten contains OutputResources + StateFile
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void FilesWrittenSet()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1860,8 +1842,6 @@ public void FilesWrittenSet()
         ///  Resource transformation fails on 3rd of 4 inputs, inputs 1 & 2 & 4 are in outputs and fileswritten.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void OutputFilesPartialInputs()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1928,8 +1908,6 @@ public void OutputFilesPartialInputs()
         ///  STR class name derived from output file transformation
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void StronglyTypedClassName()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -1971,8 +1949,6 @@ public void StronglyTypedClassName()
         ///  STR class file name derived from class name transformation
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void StronglyTypedFileName()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -2081,7 +2057,6 @@ public void ReferencesToBadAssemblies()
         ///  Source item not found
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SourceItemMissing()
         {
             string txtFile = null;
@@ -2123,9 +2098,7 @@ public void SourceItemMissing()
         /// <summary>
         ///  Non-existent StateFile yields message
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-windows-failing")]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void StateFileUnwritable()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -2165,7 +2138,6 @@ public void StateFileUnwritable()
         ///  Bad file extension on input
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void InputFileExtension()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -2199,7 +2171,6 @@ public void InputFileExtension()
         ///  Bad file extension on output
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void OutputFileExtension()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -2265,7 +2236,6 @@ public void SourcesMatchesOutputResources()
         ///  Invalid StronglyTypedLanguage yields CodeDOM exception
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UnknownStronglyTypedLanguage()
         {
             GenerateResource t = Utilities.CreateTaskOutOfProc(_output);
@@ -2349,8 +2319,6 @@ public void StronglyTypedResourceWithMoreThanOneInputResourceFile()
         ///  STR class name derived from output file transformation
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void BadStronglyTypedFilename()
         {
             string txtFile = null;
@@ -2506,7 +2474,6 @@ public void StronglyTypedResourceFilenameWithoutLanguage()
         /// Verify that passing a STR language with more than 1 sources errors
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void StronglyTypedResourceFileIsExistingDirectory()
         {
             string dir = null;
@@ -2602,7 +2569,6 @@ public References(ITestOutputHelper output)
         [Fact]
         // FIXME: mono: looks for csc.exe
         // https://github.com/dotnet/msbuild/issues/677
-        [Trait("Category", "mono-osx-failing")]
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -2780,7 +2746,6 @@ public class Class1
         [Fact]
         // FIXME: mono: looks for csc.exe
         // https://github.com/dotnet/msbuild/issues/677
-        [Trait("Category", "mono-osx-failing")]
         public void ReferencedAssemblySpecifiedUsingRelativePath()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index 1a62accb608..94131f1e4b6 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -2,27 +2,25 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
+using System.Collections.Generic;
 using System.IO;
 using System.Reflection;
-using System.Collections;
+using System.Text;
+using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
-
-using System.Text;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.Collections.Generic;
-using System.Text.RegularExpressions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
 namespace Microsoft.Build.UnitTests.GenerateResource_Tests.InProc
 {
-    [Trait("Category", "mono-osx-failing")]
-    [Trait("Category", "mono-windows-failing")]
     public sealed class RequiredTransformations : IDisposable
     {
         private readonly TestEnvironment _env;
@@ -1523,8 +1521,7 @@ public void StronglyTypedResourcesWithoutNamespaceOrClassOrFilename()
         /// <remarks>
         /// Regression test for legacy-codepath-resources case of https://github.com/dotnet/msbuild/issues/4582
         /// </remarks>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/2272")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "https://github.com/dotnet/msbuild/issues/2272")]
         public void StronglyTypedResourcesEmitTypeIntoClass()
         {
             string bitmap = Utilities.CreateWorldsSmallestBitmap();
@@ -1946,8 +1943,7 @@ public void InvalidStateFile()
         /// <summary>
         ///  Cause failures in ResourceReader
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core MSBuild doesn't try to read binary input resources")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core MSBuild doesn't try to read binary input resources.")]
         public void FailedResourceReader()
         {
             GenerateResource t = Utilities.CreateTask(_output);
@@ -1976,10 +1972,9 @@ public void FailedResourceReader()
             }
         }
 
-        [Theory]
+        [DotNetOnlyTheory(additionalMessage: "This error is .NET Core only.")]
         [InlineData(".resources")]
         [InlineData(".dll")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, "This error is .NET Core only")]
         public void ResourceReaderRejectsNonCoreCompatFormats(string inputExtension)
         {
             using var env = TestEnvironment.Create(_output);
@@ -2037,9 +2032,7 @@ public void FailedSTRProperty()
         /// <summary>
         /// Reference passed in that can't be loaded should error
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp,
-            reason: ".NET Core MSBuild doesn't load refs so it pushes this failure to runtime")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core MSBuild doesn't load refs so it pushes this failure to runtime.")]
         public void InvalidReference()
         {
             string txtFile = null;
@@ -2319,8 +2312,7 @@ public void OutputFilesPartialInputs()
         ///  STR class name derived from output file transformation
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
+
         public void StronglyTypedClassName()
         {
             GenerateResource t = Utilities.CreateTask(_output);
@@ -2366,8 +2358,6 @@ public void StronglyTypedClassName()
         ///  STR class file name derived from class name transformation
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void StronglyTypedFileName()
         {
             GenerateResource t = Utilities.CreateTask(_output);
@@ -2520,8 +2510,7 @@ public void SourceItemMissing()
         /// <summary>
         ///  Read-only StateFile yields message
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void StateFileUnwritable()
         {
             GenerateResource t = Utilities.CreateTask(_output);
@@ -2657,7 +2646,6 @@ public void SourcesMatchesOutputResources()
         ///  Invalid StronglyTypedLanguage yields CodeDOM exception
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UnknownStronglyTypedLanguage()
         {
             GenerateResource t = Utilities.CreateTask(_output);
@@ -2942,9 +2930,7 @@ public void StronglyTypedResourceFileIsExistingDirectory()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
         public void Regress25163_OutputResourcesContainsInvalidPathCharacters()
         {
             string resourcesFile = null;
@@ -2982,9 +2968,7 @@ public References(ITestOutputHelper output)
             _output = output;
         }
 
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
-        [SkipOnMono("https://github.com/dotnet/msbuild/issues/677")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -3160,9 +3144,7 @@ public class Class1
         /// which fails (LoadFile requires an absolute path).  The fix was to use
         /// Assembly.LoadFrom instead.
         /// </summary>
-        [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
-        [SkipOnMono("https://github.com/dotnet/msbuild/issues/677")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: "Linked resources not supported on Core: https://github.com/dotnet/msbuild/issues/4094")]
         public void ReferencedAssemblySpecifiedUsingRelativePath()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
index 042d17b9e16..d8462b8017b 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
@@ -1,13 +1,13 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.IO;
 using System.Reflection;
-using Microsoft.Build.Tasks;
 using Microsoft.Build.Shared;
-using Xunit;
+using Microsoft.Build.Tasks;
 using Shouldly;
-using System;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
index 35138733840..d62a9334a4a 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
@@ -3,14 +3,13 @@
 
 using System;
 using System.Collections.Generic;
-using System.Text;
 using System.IO;
 using System.Reflection;
+using System.Text;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
-
-using ResGen = Microsoft.Build.Tasks.GenerateResource.ResGen;
 using Xunit;
+using ResGen = Microsoft.Build.Tasks.GenerateResource.ResGen;
 
 #nullable disable
 
@@ -25,7 +24,6 @@ public class ResGen_Tests
         ///  - Verify that OutputFiles defaults appropriately
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void InputFiles()
         {
             ResGen t = new ResGen();
@@ -87,7 +85,6 @@ public void InputFiles()
         ///  - Verify that if OutputFiles are set explicitly, they map and show up on the command line as expected
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void OutputFiles()
         {
             ResGen t = new ResGen();
@@ -164,7 +161,6 @@ public void OutputFiles()
         /// Tests ResGen's /publicClass switch
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PublicClass()
         {
             ResGen t = new ResGen();
@@ -185,7 +181,6 @@ public void PublicClass()
         /// Tests the /r: parameter (passing in reference assemblies)
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void References()
         {
             ResGen t = new ResGen();
@@ -469,7 +464,6 @@ public void ToolPath()
         /// Tests ResGen's /useSourcePath switch
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void UseSourcePath()
         {
             ResGen t = new ResGen();
diff --git a/src/Tasks.UnitTests/ResourceManagement_Tests.cs b/src/Tasks.UnitTests/ResourceManagement_Tests.cs
index 330331071d2..1906c954726 100644
--- a/src/Tasks.UnitTests/ResourceManagement_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceManagement_Tests.cs
@@ -1,12 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.UnitTests;
 using System.Collections.Generic;
 using System.Linq;
-using Xunit;
+using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/SGen_Tests.cs b/src/Tasks.UnitTests/SGen_Tests.cs
index ac7c6847ec5..75b712a53a7 100644
--- a/src/Tasks.UnitTests/SGen_Tests.cs
+++ b/src/Tasks.UnitTests/SGen_Tests.cs
@@ -2,12 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Shared;
 using System.IO;
 using System.Linq;
-using Xunit;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
@@ -46,7 +46,7 @@ public void TaskFailsOnCore()
             }
         }
 #else
-        internal class SGenExtension : SGen
+        internal sealed class SGenExtension : SGen
         {
             internal string CommandLine()
             {
diff --git a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
index a381e987783..f0cd952108b 100644
--- a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
+++ b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
@@ -2,11 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 using System.IO;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -181,14 +182,9 @@ public void GeneratePathToToolX86DoesNotExistAnywhere()
         /// <summary>
         /// Test the case where there are illegal chars in the sdktoolspath and Path.combine has a problem.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("No invalid path characters under Unix.")]
         public void VerifyErrorWithIllegalChars()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "No invalid path characters under Unix"
-            }
-
             string toolPath = SdkToolsPathUtility.GeneratePathToTool(_mockExists.MockFileDoesNotExist, ProcessorArchitecture.X86, "./?><;)(*&^%$#@!", _toolName, _log, true);
             Assert.Null(toolPath);
             _mockEngine.AssertLogContains("MSB3666");
@@ -214,7 +210,7 @@ public void GeneratePathToToolX86DoesNotExistAnywhereNoLogging()
 
         #region Helper Classes
         // Task just so we can access to a real taskLogging helper and inspect the log.
-        internal class TaskToLogFrom : Task
+        internal sealed class TaskToLogFrom : Task
         {
             /// <summary>
             /// Empty execute, this task will never be executed
@@ -230,7 +226,7 @@ public override bool Execute()
         /// This class is used for testing the ability of the SdkToolsPathUtility class to handle situations when
         /// the toolname exists or does not exist.
         /// </summary>
-        internal class MockFileExists
+        internal sealed class MockFileExists
         {
             #region Data
             /// <summary>
diff --git a/src/Tasks.UnitTests/StreamMappedString_Tests.cs b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
index 8ad8e952a43..c91b7901458 100644
--- a/src/Tasks.UnitTests/StreamMappedString_Tests.cs
+++ b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
@@ -257,7 +257,7 @@ public void Regress_Mutation_RequestPageWellPastEnd()
         /// <summary>
         /// A stream class that counts the number of times it was reset.
         /// </summary>
-        private class RestartCountingStream : Stream
+        private sealed class RestartCountingStream : Stream
         {
             private int _resetCount;
             private Stream _stream;
diff --git a/src/Tasks.UnitTests/TlbImp_Tests.cs b/src/Tasks.UnitTests/TlbImp_Tests.cs
index da394bbb651..0827599cb35 100644
--- a/src/Tasks.UnitTests/TlbImp_Tests.cs
+++ b/src/Tasks.UnitTests/TlbImp_Tests.cs
@@ -68,7 +68,6 @@ public void TypeLibName()
         /// Tests that the assembly being imported is passed to the command line
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TypeLibNameWithSpaces()
         {
             var t = new ResolveComReference.TlbImp();
diff --git a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
index 17a383f03b9..ced85ee1368 100644
--- a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
+++ b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
@@ -121,7 +121,7 @@ public void UseNewLineSeparatorseInResponseFile()
             Assert.Equal(expected, actual);
         }
 
-        private class MyToolTaskExtension : ToolTaskExtension
+        private sealed class MyToolTaskExtension : ToolTaskExtension
         {
             private readonly Action<CommandLineBuilderExtension> _addResponseFileCommands;
 
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index 3e74d5ef77c..26de13ddc87 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -110,8 +111,7 @@ public void CanUnzip_ExplicitDirectoryEntries()
             }
         }
 
-        [PlatformSpecific(TestPlatforms.Windows)] // Can't figure out how to make CreateDirectory throw on non-Windows
-        [Fact]
+        [WindowsOnlyFact(additionalMessage: "Can't figure out how to make CreateDirectory throw on non-Windows.")]
         public void LogsErrorIfDirectoryCannotBeCreated()
         {
             Unzip unzip = new Unzip
diff --git a/src/Tasks.UnitTests/WinMDExp_Tests.cs b/src/Tasks.UnitTests/WinMDExp_Tests.cs
index 6382f489296..5a86a08b22b 100644
--- a/src/Tasks.UnitTests/WinMDExp_Tests.cs
+++ b/src/Tasks.UnitTests/WinMDExp_Tests.cs
@@ -3,10 +3,10 @@
 
 using System;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
-using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index 962dd1ec0a4..a538b371cf3 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -3,13 +3,14 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
-using Xunit;
 using System.Linq;
 using System.Runtime.InteropServices;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Shouldly;
+using Xunit;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -24,7 +25,6 @@ public class WriteCodeFragment_Tests
         /// Need an available language
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void InvalidLanguage()
         {
             WriteCodeFragment task = new WriteCodeFragment();
@@ -194,8 +194,7 @@ public void InvalidFilePath()
         /// <summary>
         /// Bad directory path
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "No invalid characters on Unix"
+        [WindowsOnlyFact(additionalMessage: "No invalid characters on Unix.")]
         public void InvalidDirectoryPath()
         {
             WriteCodeFragment task = new WriteCodeFragment();
@@ -247,7 +246,6 @@ public void OneAttributeNoParams()
         /// Test with the VB language
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void OneAttributeNoParamsVb()
         {
             WriteCodeFragment task = new WriteCodeFragment();
@@ -493,7 +491,6 @@ public void MultilineAttributeCSharp()
         /// Multi line argument values should cause a verbatim string to be used
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void MultilineAttributeVB()
         {
             var lines = new[] { "line 1", "line 2", "line 3" };
@@ -632,7 +629,6 @@ public void OneAttributePositionalAndNamedParams()
         /// These can also be combined with named params.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void OneAttributePositionalAndNamedParamsVisualBasic()
         {
             WriteCodeFragment task = new WriteCodeFragment();
diff --git a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
index c8f2f37161a..cefb96e614a 100644
--- a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
+++ b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
@@ -29,7 +29,6 @@ public GeneratedTask()
         /// Test to see whether all of the correct boolean switches are appended.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestDefaultFlags()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -41,7 +40,6 @@ public void TestDefaultFlags()
         /// This test case leaves the default flags the way they are
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestReversibleFlagsWithDefaults()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -55,7 +53,6 @@ public void TestReversibleFlagsWithDefaults()
         /// This test case explicitly sets the ComplexReversible to be false
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestReversibleFlagsWithoutDefaults()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -69,7 +66,6 @@ public void TestReversibleFlagsWithoutDefaults()
         /// Tests to make sure enums are working well.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestBasicString()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -79,7 +75,6 @@ public void TestBasicString()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestDynamicEnum()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -92,7 +87,6 @@ public void TestDynamicEnum()
         /// Tests the basic string array type
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestBasicStringArray()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -107,7 +101,6 @@ public void TestBasicStringArray()
         /// Tests the basic string array type, with an array that contains multiple values.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestBasicStringArray_MultipleValues()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -124,7 +117,6 @@ public void TestBasicStringArray_MultipleValues()
         /// Tests to see whether the integer appears correctly on the command line
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestInteger()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -138,7 +130,6 @@ public void TestInteger()
         /// Tests the (full) functionality of a reversible property
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexReversible()
         {
             // When flag is set to false
@@ -155,7 +146,6 @@ public void TestComplexReversible()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexString()
         {
             // check to see that the resulting value is good
@@ -169,7 +159,6 @@ public void TestComplexString()
         /// Tests the functionality of a string type property
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexStringArray()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -180,7 +169,6 @@ public void TestComplexStringArray()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexIntegerLessThanMin()
         {
             Assert.Throws<InvalidOperationException>(() =>
@@ -191,7 +179,6 @@ public void TestComplexIntegerLessThanMin()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexIntegerGreaterThanMax()
         {
             Assert.Throws<InvalidOperationException>(() =>
@@ -203,7 +190,6 @@ public void TestComplexIntegerGreaterThanMax()
             });
         }
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestComplexIntegerWithinRange()
         {
             object fakeTaskInstance = CreateFakeTask();
@@ -248,7 +234,6 @@ public class ProjectFileTests
         /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
         {
             string projectFile = @"
@@ -305,7 +290,6 @@ public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
         /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandline()
         {
             string projectFile = @"
@@ -342,7 +326,6 @@ public void CommandLineErrorsReportFullCommandline()
         /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void SquareBracketEscaping()
         {
             string projectFile = @"
diff --git a/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs b/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
index a2ae014d062..c298b8c75f2 100644
--- a/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
@@ -2,19 +2,19 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using Microsoft.Build.Framework;
-using System.IO;
 using System.CodeDom;
 using System.CodeDom.Compiler;
-using Microsoft.CSharp;
+using System.Collections.Generic;
+using System.Globalization;
+using System.IO;
 using System.Reflection;
+using System.Xaml;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Globalization;
 using Microsoft.Build.Tasks.Xaml;
-using System.Xaml;
-using Xunit;
+using Microsoft.CSharp;
 using Shouldly;
+using Xunit;
 
 #nullable disable
 
@@ -25,7 +25,6 @@ namespace Microsoft.Build.UnitTests.XamlTaskFactory_Tests
     /// The text fixture to unit test the task generator.
     /// Creates a new TaskGenerator object and tests the various methods
     /// </summary>
-    [Trait("Category", "mono-osx-failing")]
     public sealed class LoadAndParseTests
     {
         /// <summary>
@@ -450,7 +449,6 @@ public class CompilationTests
         /// Code must be compilable on its own.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestGenerateCodeToStream()
         {
             string xmlContents = @"<ProjectSchemaDefinitions xmlns=`clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework` xmlns:x=`http://schemas.microsoft.com/winfx/2006/xaml` xmlns:sys=`clr-namespace:System;assembly=mscorlib` xmlns:impl=`clr-namespace:Microsoft.VisualStudio.Project.Contracts.Implementation;assembly=Microsoft.VisualStudio.Project.Contracts.Implementation`>
@@ -503,7 +501,6 @@ public void TestGenerateCodeToStream()
         /// Tests to make sure the file generated compiles
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestGenerateToFile()
         {
             string xml = @"<ProjectSchemaDefinitions xmlns=`clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework` xmlns:x=`http://schemas.microsoft.com/winfx/2006/xaml` xmlns:sys=`clr-namespace:System;assembly=mscorlib` xmlns:impl=`clr-namespace:Microsoft.VisualStudio.Project.Contracts.Implementation;assembly=Microsoft.VisualStudio.Project.Contracts.Implementation`>
@@ -565,7 +562,6 @@ public void TestGenerateToFile()
     #endregion
 
     #region Tests Generated code based on one xml file
-    [Trait("Category", "mono-osx-failing")]
     public sealed class GeneratedTaskTests
     {
         private Assembly _fakeTaskDll;
diff --git a/src/Tasks.UnitTests/XamlTestHelpers.cs b/src/Tasks.UnitTests/XamlTestHelpers.cs
index 3fd447fbe62..15e4609b432 100644
--- a/src/Tasks.UnitTests/XamlTestHelpers.cs
+++ b/src/Tasks.UnitTests/XamlTestHelpers.cs
@@ -1,9 +1,6 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.CSharp;
-using Microsoft.Build.Tasks.Xaml;
-
 using System;
 using System.CodeDom;
 using System.CodeDom.Compiler;
@@ -12,6 +9,8 @@
 using System.Reflection;
 using System.Xaml;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Tasks.Xaml;
+using Microsoft.CSharp;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/XmlPeek_Tests.cs b/src/Tasks.UnitTests/XmlPeek_Tests.cs
index d7c5e18531d..0367f6c78bc 100644
--- a/src/Tasks.UnitTests/XmlPeek_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPeek_Tests.cs
@@ -1,10 +1,10 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Utilities;
 using System;
 using System.IO;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks.UnitTests/XmlPoke_Tests.cs b/src/Tasks.UnitTests/XmlPoke_Tests.cs
index fba347fb692..d78bbcad622 100644
--- a/src/Tasks.UnitTests/XmlPoke_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPoke_Tests.cs
@@ -60,7 +60,6 @@ public void PokeWithNamespace()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PokeNoNamespace()
         {
             const string query = "//variable/@Name";
@@ -271,7 +270,6 @@ public void MissingNamespaceParameters()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void PokeElement()
         {
             const string query = "//variable/.";
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index bb4697a60ce..10a4e43738a 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -1,18 +1,18 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Tasks;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using System;
 using System.CodeDom.Compiler;
 using System.Collections.Generic;
+using System.IO;
 using System.Reflection;
 using System.Reflection.Emit;
-using System.IO;
 using System.Text.RegularExpressions;
-using System.Xml.Xsl;
 using System.Xml;
+using System.Xml.Xsl;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 
diff --git a/src/Tasks.UnitTests/ZipDirectory_Tests.cs b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
index 931229c1a29..88d9d50224a 100644
--- a/src/Tasks.UnitTests/ZipDirectory_Tests.cs
+++ b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.UnitTests;
-using Microsoft.Build.Utilities;
-using Shouldly;
 using System;
 using System.Collections.Generic;
 using System.IO;
 using System.IO.Compression;
 using System.Linq;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
 using Xunit;
 
 #nullable disable
diff --git a/src/Tasks/AppConfig/DependentAssembly.cs b/src/Tasks/AppConfig/DependentAssembly.cs
index f1e0bd4e4a9..4af507aac9e 100644
--- a/src/Tasks/AppConfig/DependentAssembly.cs
+++ b/src/Tasks/AppConfig/DependentAssembly.cs
@@ -2,10 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
-using System.Reflection;
 using System.Collections.Generic;
 using System.Globalization;
+using System.Reflection;
+using System.Xml;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Tasks/AppConfig/RuntimeSection.cs b/src/Tasks/AppConfig/RuntimeSection.cs
index 8867f62dfb8..59056ed3027 100644
--- a/src/Tasks/AppConfig/RuntimeSection.cs
+++ b/src/Tasks/AppConfig/RuntimeSection.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Xml;
 using System.Collections.Generic;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
index 87fc5b6d16c..00fbece8e58 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
@@ -5,8 +5,8 @@
 using System.Collections.Generic;
 using System.Runtime.Serialization;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
diff --git a/src/Tasks/AssemblyDependency/AssemblyResolution.cs b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
index d3064f2b7ff..2653a30a416 100644
--- a/src/Tasks/AssemblyDependency/AssemblyResolution.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index 77695308943..352b3e463a3 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Reflection;
 using Microsoft.Build.Shared;
-using System.Diagnostics;
 
 #nullable disable
 
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index aaf3cadfe52..fbb3c2470cb 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -4,11 +4,10 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Reflection;
 using System.Xml.Linq;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Reflection;
 using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index 66f9de8bfe1..3ac6302c964 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -2,15 +2,15 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
-using System.Runtime.InteropServices;
-using Microsoft.Build.Shared;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
+using System.IO;
 using System.Reflection;
-using Microsoft.Build.Framework;
-using System.Collections.Concurrent;
+using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index 8718bb29c40..f25e796f1a7 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -7,8 +7,8 @@
 using System.IO;
 using System.Reflection;
 using System.Runtime.Versioning;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index 527902d5370..b854a4015e5 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Reflection;
-using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Tasks/AssemblyInfo.cs b/src/Tasks/AssemblyInfo.cs
index f86d61efe2b..2fefd520e31 100644
--- a/src/Tasks/AssemblyInfo.cs
+++ b/src/Tasks/AssemblyInfo.cs
@@ -2,11 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
-
 using System;
 using System.Resources;
-using System.Runtime.InteropServices;
 using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
 
 // This is the assembly-level GUID, and the GUID for the TypeLib associated with
 // this assembly.  We should specify this explicitly, as opposed to letting
diff --git a/src/Tasks/AssemblyResources.cs b/src/Tasks/AssemblyResources.cs
index f8d24b76557..51a9b19d201 100644
--- a/src/Tasks/AssemblyResources.cs
+++ b/src/Tasks/AssemblyResources.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
-using System.Reflection;
 using System.Globalization;
+using System.Reflection;
+using System.Resources;
 
 #nullable disable
 
diff --git a/src/Tasks/AssignLinkMetadata.cs b/src/Tasks/AssignLinkMetadata.cs
index 768149a9fc8..55a043eefc7 100644
--- a/src/Tasks/AssignLinkMetadata.cs
+++ b/src/Tasks/AssignLinkMetadata.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.Collections.Generic;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-using System;
-using System.Collections.Generic;
 
 #nullable disable
 
diff --git a/src/Tasks/AssignTargetPath.cs b/src/Tasks/AssignTargetPath.cs
index 91d2f1d32b2..1c9ca3d5c38 100644
--- a/src/Tasks/AssignTargetPath.cs
+++ b/src/Tasks/AssignTargetPath.cs
@@ -4,8 +4,8 @@
 using System;
 using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 33082afe26f..12e60df9bbc 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -1,7 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -11,13 +10,14 @@
 using System.Linq;
 using System.Reflection;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Security.Cryptography.X509Certificates;
 using System.Text;
 using System.Xml;
 using System.Xml.XPath;
 using System.Xml.Xsl;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using System.Runtime.Versioning;
 
 #nullable disable
 
diff --git a/src/Tasks/BootstrapperUtil/Package.cs b/src/Tasks/BootstrapperUtil/Package.cs
index 36160c909d1..b452bf71d84 100644
--- a/src/Tasks/BootstrapperUtil/Package.cs
+++ b/src/Tasks/BootstrapperUtil/Package.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Xml;
 using System.Runtime.InteropServices;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Tasks/BootstrapperUtil/Product.cs b/src/Tasks/BootstrapperUtil/Product.cs
index 0909ebd1d61..6e9d0e1ceca 100644
--- a/src/Tasks/BootstrapperUtil/Product.cs
+++ b/src/Tasks/BootstrapperUtil/Product.cs
@@ -5,8 +5,8 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
-using System.Xml;
 using System.Runtime.InteropServices;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 237817f1b2d..522b4de5c81 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -12,11 +12,11 @@
 namespace Microsoft.Build.Tasks
 {
 #if FEATURE_CODETASKFACTORY
-    using System.CodeDom.Compiler;
     using System.CodeDom;
+    using System.CodeDom.Compiler;
     using System.Collections.Concurrent;
-    using System.Diagnostics.CodeAnalysis;
     using System.Diagnostics;
+    using System.Diagnostics.CodeAnalysis;
     using System.Globalization;
     using System.IO;
     using System.Reflection;
diff --git a/src/Tasks/ComDependencyWalker.cs b/src/Tasks/ComDependencyWalker.cs
index 3b736f1da1c..9de8725cd65 100644
--- a/src/Tasks/ComDependencyWalker.cs
+++ b/src/Tasks/ComDependencyWalker.cs
@@ -3,11 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using System.Runtime.InteropServices.ComTypes;
 using System.Globalization;
-
-using Marshal = System.Runtime.InteropServices.Marshal;
+using System.Runtime.InteropServices.ComTypes;
 using COMException = System.Runtime.InteropServices.COMException;
+using Marshal = System.Runtime.InteropServices.Marshal;
 using VarEnum = System.Runtime.InteropServices.VarEnum;
 
 #nullable disable
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index 1bcc11c2df1..95d63adb880 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -3,12 +3,10 @@
 
 using System;
 using System.Runtime.InteropServices.ComTypes;
-
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-
-using Marshal = System.Runtime.InteropServices.Marshal;
 using COMException = System.Runtime.InteropServices.COMException;
+using Marshal = System.Runtime.InteropServices.Marshal;
 
 #nullable disable
 
diff --git a/src/Tasks/ComReferenceInfo.cs b/src/Tasks/ComReferenceInfo.cs
index 4e74972a731..f41dd573f48 100644
--- a/src/Tasks/ComReferenceInfo.cs
+++ b/src/Tasks/ComReferenceInfo.cs
@@ -5,13 +5,11 @@
 using System.IO;
 using System.Runtime.InteropServices;
 using System.Runtime.InteropServices.ComTypes;
-
-// TYPELIBATTR clashes with the one in InteropServices.
-using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
+// TYPELIBATTR clashes with the one in InteropServices.
+using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
 
 #nullable disable
 
diff --git a/src/Tasks/CombinePath.cs b/src/Tasks/CombinePath.cs
index e798dc6b265..85138e2c215 100644
--- a/src/Tasks/CombinePath.cs
+++ b/src/Tasks/CombinePath.cs
@@ -2,11 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/CombineTargetFrameworkInfoProperties.cs b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
index 3d8eff50d94..6830ba9cb99 100644
--- a/src/Tasks/CombineTargetFrameworkInfoProperties.cs
+++ b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Xml.Linq;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Xml.Linq;
 
 #nullable disable
 
diff --git a/src/Tasks/CombineXmlElements.cs b/src/Tasks/CombineXmlElements.cs
index e2cf53fe52c..8fb5af15dc2 100644
--- a/src/Tasks/CombineXmlElements.cs
+++ b/src/Tasks/CombineXmlElements.cs
@@ -1,8 +1,8 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System.Xml.Linq;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Tasks/ConvertToAbsolutePath.cs b/src/Tasks/ConvertToAbsolutePath.cs
index 079a730a94a..099f6560c31 100644
--- a/src/Tasks/ConvertToAbsolutePath.cs
+++ b/src/Tasks/ConvertToAbsolutePath.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index eefeb02668e..36fd9b90a26 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -3,16 +3,16 @@
 
 using System;
 using System.Collections.Concurrent;
-using System.IO;
 using System.Collections.Generic;
-using System.Threading;
+using System.IO;
 using System.Runtime.InteropServices;
+using System.Threading;
 using System.Threading.Tasks.Dataflow;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Eventing;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index 8c7f8962e96..78f30146616 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -4,8 +4,8 @@
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/CreateManifestResourceName.cs b/src/Tasks/CreateManifestResourceName.cs
index e271d7f6a29..4d67448ef78 100644
--- a/src/Tasks/CreateManifestResourceName.cs
+++ b/src/Tasks/CreateManifestResourceName.cs
@@ -8,8 +8,8 @@
 using System.IO;
 using System.Text;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index 61b226008e3..f3c37bd0023 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -3,10 +3,9 @@
 
 using System;
 using System.Collections.Concurrent;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using System.Runtime.Versioning;
-
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyDependency;
 
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index c4152670c81..3f9c6d5bc8e 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -1,14 +1,14 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using System;
 using System.IO;
 using System.Net;
 using System.Net.Http;
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
 using Task = System.Threading.Tasks.Task;
 
 #nullable disable
@@ -125,7 +125,7 @@ private async Task<bool> ExecuteAsync()
                     }
                     else
                     {
-                        Log.LogErrorWithCodeFromResources("DownloadFile.ErrorDownloading", SourceUrl, actualException.Message);
+                        Log.LogErrorWithCodeFromResources("DownloadFile.ErrorDownloading", SourceUrl, actualException.ToString());
                         break;
                     }
                 }
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index afc49604a4e..dbf4be1fc51 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using System.Text;
 using System.IO;
+using System.Text;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
diff --git a/src/Tasks/FileIO/ReadLinesFromFile.cs b/src/Tasks/FileIO/ReadLinesFromFile.cs
index 083e8a5ad97..ead4981ecfe 100644
--- a/src/Tasks/FileIO/ReadLinesFromFile.cs
+++ b/src/Tasks/FileIO/ReadLinesFromFile.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index ec5b1fefa22..4d12de15d22 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -1,12 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Eventing;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System;
 using System.IO;
 using System.Text;
+using Microsoft.Build.Eventing;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -122,6 +122,10 @@ public override bool Execute()
                     }
                     else
                     {
+                        if (WriteOnlyWhenDifferent && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6))
+                        {
+                            Log.LogWarningWithCodeFromResources("WriteLinesToFile.UnusedWriteOnlyWhenDifferent", File.ItemSpec);
+                        }
                         Directory.CreateDirectory(directoryPath);
                         System.IO.File.AppendAllText(File.ItemSpec, buffer.ToString(), encoding);
                     }
diff --git a/src/Tasks/FindInvalidProjectReferences.cs b/src/Tasks/FindInvalidProjectReferences.cs
index d49ad88dfb8..7342f60e6f4 100644
--- a/src/Tasks/FindInvalidProjectReferences.cs
+++ b/src/Tasks/FindInvalidProjectReferences.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework;
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/Tasks/GenerateBootstrapper.cs b/src/Tasks/GenerateBootstrapper.cs
index 5a3b8da3e1b..7eb63e1e8e0 100644
--- a/src/Tasks/GenerateBootstrapper.cs
+++ b/src/Tasks/GenerateBootstrapper.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 
diff --git a/src/Tasks/GenerateDeploymentManifest.cs b/src/Tasks/GenerateDeploymentManifest.cs
index 827699955c9..729deffab5c 100644
--- a/src/Tasks/GenerateDeploymentManifest.cs
+++ b/src/Tasks/GenerateDeploymentManifest.cs
@@ -4,8 +4,8 @@
 using System;
 using System.Diagnostics;
 using System.IO;
-using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using System.Runtime.Versioning;
+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 
 #nullable disable
 
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 4b4da73a3c0..2b81a9dca99 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
-using System;
 
 namespace Microsoft.Build.Tasks
 {
diff --git a/src/Tasks/GetFrameworkSDKPath.cs b/src/Tasks/GetFrameworkSDKPath.cs
index 86d0a2eaa83..5d10aaf2817 100644
--- a/src/Tasks/GetFrameworkSDKPath.cs
+++ b/src/Tasks/GetFrameworkSDKPath.cs
@@ -3,8 +3,8 @@
 
 using System;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/LC.cs b/src/Tasks/LC.cs
index f4d5e0e871e..bc3e27b35ba 100644
--- a/src/Tasks/LC.cs
+++ b/src/Tasks/LC.cs
@@ -4,8 +4,8 @@
 using System;
 using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index c4d32f8cfac..b2c28967c6b 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -2,9 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
-
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
diff --git a/src/Tasks/MakeDir.cs b/src/Tasks/MakeDir.cs
index 6cc263c7254..4b5412534b0 100644
--- a/src/Tasks/MakeDir.cs
+++ b/src/Tasks/MakeDir.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.IO;
 using System.Collections.Generic;
+using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Tasks/ManifestUtil/AssemblyIdentity.cs b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
index 63658f51f7f..828a2ba70a0 100644
--- a/src/Tasks/ManifestUtil/AssemblyIdentity.cs
+++ b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
@@ -1,7 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Utilities;
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
@@ -14,6 +13,7 @@
 using System.Xml;
 using System.Xml.Serialization;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 
 #nullable disable
diff --git a/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs b/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
index a67b01d991e..45fcf658329 100644
--- a/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
+++ b/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Runtime.InteropServices;
 using System.Collections;
 using System.Collections.Generic;
+using System.Runtime.InteropServices;
 
 #nullable disable
 
diff --git a/src/Tasks/ManifestUtil/DeployManifest.cs b/src/Tasks/ManifestUtil/DeployManifest.cs
index de29d6ac5b2..228f7edbeda 100644
--- a/src/Tasks/ManifestUtil/DeployManifest.cs
+++ b/src/Tasks/ManifestUtil/DeployManifest.cs
@@ -2,16 +2,16 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.ComponentModel;
-using System.Runtime.InteropServices;
 using System.Globalization;
 using System.IO;
+using System.Runtime.InteropServices;
 using System.Xml;
 using System.Xml.Serialization;
+using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
-using System.Collections.Generic;
-using Microsoft.Build.Shared.FileSystem;
 
 #nullable disable
 
diff --git a/src/Tasks/ManifestUtil/OutputMessage.cs b/src/Tasks/ManifestUtil/OutputMessage.cs
index 7d0c5bb096c..2e9ff44f6b7 100644
--- a/src/Tasks/ManifestUtil/OutputMessage.cs
+++ b/src/Tasks/ManifestUtil/OutputMessage.cs
@@ -1,12 +1,12 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Utilities;
 using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.Globalization;
 using System.Runtime.InteropServices;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index 8394babb735..1428e5a01f8 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.IO;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index 0a8f9a2654c..5e96abc3314 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -1,9 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
-using Microsoft.Win32;
 using System;
 using System.Collections;
 using System.Collections.Generic;
@@ -17,7 +14,10 @@
 using System.Security;
 using System.Security.Cryptography;
 using System.Text;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Win32;
 
 #nullable disable
 
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 23e273cdad6..29c34e47730 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -3,14 +3,13 @@
 
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Security.Cryptography;
-using System.Security.Cryptography.Xml;
 using System.Security.Cryptography.X509Certificates;
+using System.Security.Cryptography.Xml;
 using System.Text;
 using System.Xml;
-using System.Runtime.InteropServices;
-using System.Runtime.Versioning;
-
 using _FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 
 #nullable disable
diff --git a/src/Tasks/Microsoft.Managed.After.targets b/src/Tasks/Microsoft.Managed.After.targets
index 48264892122..68a7e8d274d 100644
--- a/src/Tasks/Microsoft.Managed.After.targets
+++ b/src/Tasks/Microsoft.Managed.After.targets
@@ -41,11 +41,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <_MainReferenceTargetForBuild Condition="'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>
     <_MainReferenceTargetForBuild Condition="'$(_MainReferenceTargetForBuild)' == ''">GetTargetPath</_MainReferenceTargetForBuild>
 
-    <ProjectReferenceTargetsForBuildInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>
-    <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
+    <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
 
-    <ProjectReferenceTargetsForCleanInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>
-    <ProjectReferenceTargetsForClean>Clean;GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
 
     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>
 
@@ -54,16 +52,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <_MainReferenceTargetForPublish Condition="'$(NoBuild)' != 'true'">$(_MainReferenceTargetForBuild)</_MainReferenceTargetForPublish>
     <ProjectReferenceTargetsForPublish>GetTargetFrameworks;$(_MainReferenceTargetForPublish);GetNativeManifest;GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>
 
+    <!-- When DeployOnBuild=true, the Publish target is hooked to the Build target -->
+    <ProjectReferenceTargetsForBuild Condition="'$(DeployOnBuild)' == 'true'">$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForBuild>
+    <ProjectReferenceTargetsForRebuild Condition="'$(DeployOnBuild)' == 'true'">$(ProjectReferenceTargetsForRebuild);$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForRebuild>
+
     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>
   </PropertyGroup>
 
   <ItemGroup Condition="'$(IsGraphBuild)' == 'true'">
     <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' " OuterBuild="true" />
+    <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuild)" Condition=" '$(ProjectReferenceTargetsForBuild)' != '' " />
 
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForCleanInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' " OuterBuild="true" />
+    <ProjectReferenceTargets Include="Clean" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForClean)" Condition=" '$(ProjectReferenceTargetsForClean)' != '' " />
 
+    <!--
+     Note: SkipNonexistentTargets="true" on the following three items means that an outer build node's call to its existent GetTargetFrameworks target will fail if its inner build nodes don't define GetTargetFrameworksWithPlatformForSingleTargetFrameworks.
+     This is necessary since the P2P protocol cannot express the targets called from the outer build to the inner build.
+     -->
+    <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework" SkipNonexistentTargets="true" />
+    <ProjectReferenceTargets Include="Clean" Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework" SkipNonexistentTargets="true" />
+    <ProjectReferenceTargets Include="Rebuild" Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework" SkipNonexistentTargets="true" />
+
     <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuild)" Condition=" '$(ProjectReferenceTargetsForRebuild)' != '' " />
 
     <ProjectReferenceTargets Include="Publish" Targets="$(ProjectReferenceTargetsForPublish)" Condition=" '$(ProjectReferenceTargetsForPublish)' != '' " />
diff --git a/src/Tasks/ParserState.cs b/src/Tasks/ParserState.cs
index 0f1b0ec7405..d7513a72da8 100644
--- a/src/Tasks/ParserState.cs
+++ b/src/Tasks/ParserState.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Text;
 using System.Collections.Generic;
+using System.Text;
 
 #nullable disable
 
diff --git a/src/Tasks/RCWForCurrentContext.cs b/src/Tasks/RCWForCurrentContext.cs
index 9c2d4675327..83e90765226 100644
--- a/src/Tasks/RCWForCurrentContext.cs
+++ b/src/Tasks/RCWForCurrentContext.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Runtime.InteropServices;
 using System.Diagnostics;
+using System.Runtime.InteropServices;
 
 #nullable disable
 
diff --git a/src/Tasks/RedistList.cs b/src/Tasks/RedistList.cs
index 3428a752a0d..2337f450180 100644
--- a/src/Tasks/RedistList.cs
+++ b/src/Tasks/RedistList.cs
@@ -12,9 +12,9 @@
 using System.Linq;
 using System.Text;
 using System.Xml;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/RemoveDir.cs b/src/Tasks/RemoveDir.cs
index 3c9d3c4e9f1..da78951a376 100644
--- a/src/Tasks/RemoveDir.cs
+++ b/src/Tasks/RemoveDir.cs
@@ -5,9 +5,9 @@
 using System.Collections.Generic;
 using System.IO;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/ResourceHandling/MSBuildResXReader.cs b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
index 9e1cea4fcd4..765a023a102 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXReader.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
@@ -1,7 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
 using System.IO;
@@ -9,6 +8,7 @@
 using System.Text;
 using System.Xml;
 using System.Xml.Linq;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 5f1b46171f3..51638cae838 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -2178,6 +2178,9 @@
   <data name="WriteLinesToFile.SkippingUnchangedFile">
     <value>Skipping write to file "{0}" because content would not change.</value>
   </data>
+  <data name="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+    <value>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</value>
+  </data>
   <!--
         The GetReferenceAssemblyPaths message bucket is: MSB3642 - MSB3646.
         If this bucket overflows, pls. contact 'vsppbdev'.
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index c9068360667..600be081bc6 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: √öloze nebyly p≈ôed√°ny ≈æ√°dn√© odkazy. Je vy≈æadov√°n odkaz alespo≈à na knihovny mscorlib a Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: Nepovedlo se vytvo≈ôit √∫lohu XAML. Duplicitn√≠ n√°zev vlastnosti {0}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index aaf6ecd7f2e..8bd9ec1e77a 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Es wurden keine Verweise an die Aufgabe √ºbergeben. Es sind mindestens Verweise auf mscorlib und Windows.Foundation erforderlich.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: Die XAML-Aufgabe kann nicht erstellt werden. Doppelter Eigenschaftenname "{0}".</target>
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 934b002cd51..c6bb9026203 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: No se pas√≥ ninguna referencia a la tarea. Se requiere una referencia como m√≠nimo a mscorlib y Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: No se puede crear la tarea XAML. El nombre de propiedad "{0}" est√° duplicado.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index 457ca10fba0..4bc23acf0d2 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Aucune r√©f√©rence n'a √©t√© pass√©e √† la t√¢che. Les r√©f√©rences √† mscorlib et Windows.Foundation, au minimum, sont obligatoires.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: impossible de cr√©er la t√¢che XAML. Nom de propri√©t√© dupliqu√©¬†: '{0}'.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index 0598261c7b5..c1e7e1b0bcc 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: non sono stati passati riferimenti all'attivit√†. Sono necessari almeno i riferimenti a mscorlib e Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: non √® possibile creare l'attivit√† XAML. Il nome di propriet√† '{0}' √® duplicato.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index 26f7c7ffedc..72d4d318962 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: ÂèÇÁÖß„Åå„Çø„Çπ„ÇØ„Å´Ê∏°„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÂ∞ë„Å™„Åè„Å®„ÇÇ mscorlib „Å® Windows.Foundation „Å∏„ÅÆÂèÇÁÖß„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: XAML „Çø„Çπ„ÇØ„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Éó„É≠„Éë„ÉÜ„Ç£Âêç '{0}' „ÅåÈáçË§á„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index 121b7974433..16b7125d40b 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Ï∞∏Ï°∞Í∞Ä ÏûëÏóÖÏóê Ï†ÑÎã¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Ï†ÅÏñ¥ÎèÑ mscorlib Î∞è Windows.FoundationÏóê ÎåÄÌïú Ï∞∏Ï°∞Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: XAML ÏûëÏóÖÏùÑ ÎßåÎì§ Ïàò ÏóÜÏäµÎãàÎã§. ÏÜçÏÑ± Ïù¥Î¶Ñ '{0}'Ïù¥(Í∞Ä) Ï§ëÎ≥µÎêòÏóàÏäµÎãàÎã§.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 9294d0610d7..664689a99a2 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Do zadania nie zosta≈Çy przekazane informacje o ≈ºadnych odwo≈Çaniach. Wymagane sƒÖ odwo≈Çania co najmniej do biblioteki mscorlib i elementu Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: Nie mo≈ºna utworzyƒá zadania XAML. Zduplikowana nazwa w≈Ça≈õciwo≈õci ‚Äû{0}‚Äù.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index 5d79cb1a08b..5cf5c3f3274 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Nenhuma refer√™ncia foi passada para a tarefa. S√£o necess√°rias refer√™ncias a pelo menos mscorlib e Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: n√£o √© poss√≠vel criar a tarefa XAML. Nome da propriedade '{0}' duplicado.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index 1d850b97e97..ca2259ae631 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: –≤ –∑–∞–¥–∞—á—É –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å—Å—ã–ª–∫–∏. –¢—Ä–µ–±—É—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ mscorlib –∏ Windows.Foundation.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É XAML. –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ "{0}".</target>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 72b15c54aa6..8176b354433 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: G√∂reve hi√ßbir ba≈üvuru ge√ßirilmedi. En azƒ±ndan mscorlib ve Windows.Foundation ba≈üvurularƒ± gereklidir.</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: XAML g√∂revi olu≈üturulamƒ±yor. Yinelenen √∂zellik adƒ±: '{0}'.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index 763ab10b36c..579aad28fae 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Êú™Âêë‰ªªÂä°‰º†ÈÄí‰ªª‰ΩïÂºïÁî®„ÄÇËá≥Â∞ëÈúÄË¶ÅÂØπ mscorlib Âíå Windows.Foundation ÁöÑÂºïÁî®„ÄÇ</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: Êó†Ê≥ïÂàõÂª∫ Xaml ‰ªªÂä°„ÄÇÂ±ûÊÄßÂêç "{0}" ÈáçÂ§ç„ÄÇ</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index 09b3ae33af4..18ca3779377 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -2702,6 +2702,11 @@
         <target state="translated">MSB3762: Ê≤íÊúâÂèÉËÄÉÂÇ≥ÈÅûËá≥Â∑•‰Ωú„ÄÇÈúÄË¶ÅËá≥Â∞ë mscorlib Âíå Windows.Foundation ÁöÑÂèÉËÄÉ„ÄÇ</target>
         <note>{StrBegin="MSB3762: "}</note>
       </trans-unit>
+      <trans-unit id="WriteLinesToFile.UnusedWriteOnlyWhenDifferent">
+        <source>'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</source>
+        <target state="new">'WriteOnlyWhenDifferent' attribute on "{0}" takes effect only when 'Overwrite="true"'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Xaml.DuplicatePropertyName">
         <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
         <target state="translated">MSB3724: ÁÑ°Ê≥ïÂª∫Á´ã Xaml Â∑•‰Ωú„ÄÇÈáçË§áÁöÑÂ±¨ÊÄßÂêçÁ®± '{0}'„ÄÇ</target>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 70c13531635..43dd3c3ed10 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -1,9 +1,6 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 using System;
 using System.CodeDom;
 using System.CodeDom.Compiler;
@@ -16,7 +13,10 @@
 using System.Text;
 using System.Xml;
 using System.Xml.Linq;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
index ff9fc4289ef..f65af92cfed 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
@@ -1,11 +1,11 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
 using System;
 using System.IO;
 using System.Linq;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/SdkToolsPathUtility.cs b/src/Tasks/SdkToolsPathUtility.cs
index bacccd00dad..35e2efb656e 100644
--- a/src/Tasks/SdkToolsPathUtility.cs
+++ b/src/Tasks/SdkToolsPathUtility.cs
@@ -3,9 +3,9 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 5c674fb9732..6b18c794e8f 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -3,10 +3,10 @@
 
 using System;
 using System.IO;
-using Microsoft.Build.Utilities;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.BackEnd;
+using Microsoft.Build.Utilities;
 
 #nullable disable
 
diff --git a/src/Tasks/StrongNameUtils.cs b/src/Tasks/StrongNameUtils.cs
index 2e223cc2c74..7c2fa1a52fd 100644
--- a/src/Tasks/StrongNameUtils.cs
+++ b/src/Tasks/StrongNameUtils.cs
@@ -5,9 +5,8 @@
 using System.Diagnostics;
 using System.IO;
 using System.Reflection;
-using System.Security;
 using System.Runtime.InteropServices;
-
+using System.Security;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
diff --git a/src/Tasks/System.Design.cs b/src/Tasks/System.Design.cs
index 2c417146818..15ec2257b17 100644
--- a/src/Tasks/System.Design.cs
+++ b/src/Tasks/System.Design.cs
@@ -2,13 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Reflection;
+using System.ComponentModel;
 using System.Globalization;
+using System.Reflection;
 using System.Resources;
 using System.Threading;
 
-using System.ComponentModel;
-
 #nullable disable
 
 namespace Microsoft.Build.Tasks
diff --git a/src/Tasks/Telemetry.cs b/src/Tasks/Telemetry.cs
index 894fafea3db..71ee653a70a 100644
--- a/src/Tasks/Telemetry.cs
+++ b/src/Tasks/Telemetry.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index 4f438378071..12a00027180 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -2,22 +2,20 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Reflection.Emit;
-using System.Collections.Generic;
 using System.Runtime.InteropServices;
 using System.Runtime.InteropServices.ComTypes;
-using System.Linq;
-
-// TYPELIBATTR clashes with the one in InteropServices.
-using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
-using UtilitiesProcessorArchitecture = Microsoft.Build.Utilities.ProcessorArchitecture;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
+// TYPELIBATTR clashes with the one in InteropServices.
+using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
+using UtilitiesProcessorArchitecture = Microsoft.Build.Utilities.ProcessorArchitecture;
 
 #nullable disable
 
diff --git a/src/Tasks/XamlTaskFactory/RelationsParser.cs b/src/Tasks/XamlTaskFactory/RelationsParser.cs
index f6f9f9687c3..f9734a9720f 100644
--- a/src/Tasks/XamlTaskFactory/RelationsParser.cs
+++ b/src/Tasks/XamlTaskFactory/RelationsParser.cs
@@ -3,8 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using System.Xml;
 using System.IO;
+using System.Xml;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Tasks/XamlTaskFactory/TaskGenerator.cs b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
index 20ee37d6014..394daa631bd 100644
--- a/src/Tasks/XamlTaskFactory/TaskGenerator.cs
+++ b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
@@ -2,11 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.CodeDom;
 using System.Collections.Generic;
 using System.Configuration;
 using System.Globalization;
-using System.CodeDom;
-
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Tasks/XamlTaskFactory/TaskParser.cs b/src/Tasks/XamlTaskFactory/TaskParser.cs
index 87d63f90391..af2ba073221 100644
--- a/src/Tasks/XamlTaskFactory/TaskParser.cs
+++ b/src/Tasks/XamlTaskFactory/TaskParser.cs
@@ -4,9 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Globalization;
+using System.IO;
 using System.Text;
 using System.Xaml;
-using System.IO;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using XamlTypes = Microsoft.Build.Framework.XamlTypes;
diff --git a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
index 1d8a2ba8d4e..783513727fa 100644
--- a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
+++ b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
@@ -2,12 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Globalization;
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
-using System.Text;
+using System.Globalization;
 using System.Resources;
-
+using System.Text;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
diff --git a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
index 68cb433ad55..66e6834174c 100644
--- a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
+++ b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
@@ -13,13 +13,13 @@ namespace Microsoft.Build.Tasks
 {
 #if FEATURE_XAMLTASKFACTORY
 
-    using Microsoft.Build.Tasks.Xaml;
-    using System.CodeDom.Compiler;
     using System.CodeDom;
+    using System.CodeDom.Compiler;
     using System.IO;
     using System.Reflection;
     using System.Text;
     using System.Threading;
+    using Microsoft.Build.Tasks.Xaml;
 
     /// <summary>
     /// The task factory provider for XAML tasks.
diff --git a/src/Tasks/XslTransformation.cs b/src/Tasks/XslTransformation.cs
index eaecfe3dd83..33f00f1f19a 100644
--- a/src/Tasks/XslTransformation.cs
+++ b/src/Tasks/XslTransformation.cs
@@ -6,8 +6,8 @@
 using System.IO;
 using System.Reflection;
 using System.Xml;
-using System.Xml.Xsl;
 using System.Xml.XPath;
+using System.Xml.Xsl;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index 0832a5e8f4f..89ea647e786 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -1,10 +1,10 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Framework;
 using System;
 using System.IO;
 using System.IO.Compression;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
diff --git a/src/UnitTests.Shared/DriveMapping.cs b/src/UnitTests.Shared/DriveMapping.cs
new file mode 100644
index 00000000000..81324086548
--- /dev/null
+++ b/src/UnitTests.Shared/DriveMapping.cs
@@ -0,0 +1,92 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#nullable enable
+using System;
+using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
+using System.Text;
+
+namespace Microsoft.Build.UnitTests.Shared;
+
+internal static class DriveMapping
+{
+    private const int ERROR_FILE_NOT_FOUND = 2;
+    private const int ERROR_INSUFFICIENT_BUFFER = 122;
+    private const int DDD_REMOVE_DEFINITION = 2;
+    private const int DDD_NO_FLAG = 0;
+    // extra space for '\??\'. Not counting for long paths support in tests.
+    private const int MAX_PATH = 259;
+
+    /// <summary>
+    /// Windows specific. Maps path to a requested drive.
+    /// </summary>
+    /// <param name="letter">Drive letter</param>
+    /// <param name="path">Path to be mapped</param>
+    [SupportedOSPlatform("windows")]
+    public static void MapDrive(char letter, string path)
+    {
+        if (!DefineDosDevice(DDD_NO_FLAG, ToDeviceName(letter), path))
+        {
+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());
+        }
+    }
+
+    /// <summary>
+    /// Windows specific. Unmaps drive mapping.
+    /// </summary>
+    /// <param name="letter">Drive letter.</param>
+    [SupportedOSPlatform("windows")]
+    public static void UnmapDrive(char letter)
+    {
+        if (!DefineDosDevice(DDD_REMOVE_DEFINITION, ToDeviceName(letter), null))
+        {
+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());
+        }
+    }
+
+    /// <summary>
+    /// Windows specific. Fetches path mapped under specific drive letter.
+    /// </summary>
+    /// <param name="letter">Drive letter.</param>
+    /// <returns>Path mapped under specified letter. Empty string if mapping not found.</returns>
+    [SupportedOSPlatform("windows")]
+    public static string GetDriveMapping(char letter)
+    {
+        // since this is just for test purposes - let's not overcomplicate with long paths support
+        char[] buffer = new char[MAX_PATH];
+
+        while (QueryDosDevice(ToDeviceName(letter), buffer, buffer.Length) == 0)
+        {
+            // Return empty string if the drive is not mapped
+            int err = Marshal.GetLastWin32Error();
+            if (err == ERROR_FILE_NOT_FOUND)
+            {
+                return string.Empty;
+            }
+
+            if (err != ERROR_INSUFFICIENT_BUFFER)
+            {
+                NativeMethodsShared.ThrowExceptionForErrorCode(err);
+            }
+
+            buffer = new char[buffer.Length * 4];
+        }
+
+        // Translate from the native path semantic - starting with '\??\'
+        return new string(buffer, 4, buffer.Length - 4);
+    }
+
+    private static string ToDeviceName(char letter)
+    {
+        return $"{char.ToUpper(letter)}:";
+    }
+
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
+    [SupportedOSPlatform("windows")]
+    private static extern bool DefineDosDevice([In] int flags, [In] string deviceName, [In] string? path);
+
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
+    [SupportedOSPlatform("windows")]
+    private static extern int QueryDosDevice([In] string deviceName, [Out] char[] buffer, [In] int bufSize);
+}
diff --git a/src/UnitTests.Shared/DummyMappedDrive.cs b/src/UnitTests.Shared/DummyMappedDrive.cs
new file mode 100644
index 00000000000..ec7df37a00d
--- /dev/null
+++ b/src/UnitTests.Shared/DummyMappedDrive.cs
@@ -0,0 +1,87 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#nullable enable
+using System;
+using System.Diagnostics;
+using System.IO;
+using System.Runtime.Versioning;
+
+namespace Microsoft.Build.UnitTests.Shared;
+
+/// <summary>
+/// Windows specific. Class managing system resource - temporary local path mapped to available drive letter.
+/// </summary>
+public class DummyMappedDrive : IDisposable
+{
+    public char MappedDriveLetter { get; init; } = 'z';
+    private readonly string _mappedPath;
+    private readonly bool _mapped;
+
+    public DummyMappedDrive()
+    {
+        _mappedPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
+
+        if (!NativeMethodsShared.IsWindows)
+        {
+            return;
+        }
+
+        Directory.CreateDirectory(_mappedPath);
+        File.Create(Path.Combine(_mappedPath, "x")).Dispose();
+
+        for (char driveLetter = 'z'; driveLetter >= 'a'; driveLetter--)
+        {
+            if (DriveMapping.GetDriveMapping(driveLetter) == string.Empty)
+            {
+                DriveMapping.MapDrive(driveLetter, _mappedPath);
+                MappedDriveLetter = driveLetter;
+                _mapped = true;
+                return;
+            }
+        }
+    }
+
+    private void ReleaseUnmanagedResources(bool disposing)
+    {
+        Exception? e = null;
+        if (Directory.Exists(_mappedPath))
+        {
+            try
+            {
+                Directory.Delete(_mappedPath, true);
+            }
+            catch (Exception exc)
+            {
+                e = exc;
+                Debug.Fail("Exception in DummyMappedDrive finalizer: " + e.ToString());
+            }
+        }
+
+        if (_mapped && NativeMethodsShared.IsWindows)
+        {
+            try
+            {
+                DriveMapping.UnmapDrive(MappedDriveLetter);
+            }
+            catch (Exception exc)
+            {
+                e = e == null ? exc : new AggregateException(e, exc);
+                Debug.Fail("Exception in DummyMappedDrive finalizer: " + e.ToString());
+            }
+        }
+
+        if (disposing && e != null)
+        {
+            throw e;
+        }
+    }
+
+    public void Dispose()
+    {
+        ReleaseUnmanagedResources(true);
+        GC.SuppressFinalize(this);
+    }
+
+    ~DummyMappedDrive() => ReleaseUnmanagedResources(false);
+}
diff --git a/src/UnitTests.Shared/EnvironmentProvider.cs b/src/UnitTests.Shared/EnvironmentProvider.cs
new file mode 100644
index 00000000000..4ca3c276867
--- /dev/null
+++ b/src/UnitTests.Shared/EnvironmentProvider.cs
@@ -0,0 +1,137 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+#if !NET6_0_OR_GREATER
+using System.Diagnostics;
+#endif
+using System.IO;
+using System.Linq;
+using System.Runtime.InteropServices;
+
+namespace Microsoft.Build.UnitTests.Shared
+{
+    public class EnvironmentProvider
+    {
+        private static class Constants
+        {
+            public const string DotNet = "dotnet";
+            public const string Path = "PATH";
+            public const string DotnetMsbuildSdkResolverCliDir = "DOTNET_MSBUILD_SDK_RESOLVER_CLI_DIR";
+            public static readonly bool RunningOnWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
+            public static readonly string ExeSuffix = RunningOnWindows ? ".exe" : string.Empty;
+        }
+
+        private IEnumerable<string>? _searchPaths;
+
+        private readonly Func<string, string?> _getEnvironmentVariable;
+        private readonly Func<string?> _getCurrentProcessPath;
+
+        public EnvironmentProvider(Func<string, string?> getEnvironmentVariable)
+            : this(getEnvironmentVariable, GetCurrentProcessPath)
+        { }
+
+        public EnvironmentProvider(Func<string, string?> getEnvironmentVariable, Func<string?> getCurrentProcessPath)
+        {
+            _getEnvironmentVariable = getEnvironmentVariable;
+            _getCurrentProcessPath = getCurrentProcessPath;
+        }
+
+        private IEnumerable<string> SearchPaths
+        {
+            get
+            {
+                if (_searchPaths == null)
+                {
+                    var searchPaths = new List<string>();
+
+                    searchPaths.AddRange(
+                        (_getEnvironmentVariable(Constants.Path) ?? string.Empty)
+                        .Split(new char[] { Path.PathSeparator }, options: StringSplitOptions.RemoveEmptyEntries)
+                        .Select(p => p.Trim('"')));
+
+                    _searchPaths = searchPaths;
+                }
+
+                return _searchPaths;
+            }
+        }
+
+        public string? GetCommandPath(string commandName)
+        {
+            var commandNameWithExtension = commandName + Constants.ExeSuffix;
+            var commandPath = SearchPaths
+                .Where(p => !Path.GetInvalidPathChars().Any(p.Contains))
+                .Select(p => Path.Combine(p, commandNameWithExtension))
+                .FirstOrDefault(File.Exists);
+
+            return commandPath;
+        }
+
+        public string? GetDotnetExePath()
+        {
+            string? environmentOverride = _getEnvironmentVariable(Constants.DotnetMsbuildSdkResolverCliDir);
+            if (!string.IsNullOrEmpty(environmentOverride))
+            {
+                return Path.Combine(environmentOverride, Constants.DotNet + Constants.ExeSuffix);
+            }
+
+            string? dotnetExe = _getCurrentProcessPath();
+
+            if (string.IsNullOrEmpty(dotnetExe) || !Path.GetFileNameWithoutExtension(dotnetExe)
+                    .Equals(Constants.DotNet, StringComparison.InvariantCultureIgnoreCase))
+            {
+                string? dotnetExeFromPath = GetCommandPath(Constants.DotNet);
+#if NET
+                if (dotnetExeFromPath != null && !Constants.RunningOnWindows)
+                {
+                    // on Linux the 'dotnet' command from PATH is a symlink so we need to
+                    // resolve it to get the actual path to the binary
+                    FileInfo fi = new FileInfo(dotnetExeFromPath);
+                    while (fi.LinkTarget != null)
+                    {
+                        dotnetExeFromPath = fi.LinkTarget;
+                        fi = new FileInfo(dotnetExeFromPath);
+                    }
+                }
+#endif
+                if (!string.IsNullOrWhiteSpace(dotnetExeFromPath))
+                {
+                    dotnetExe = dotnetExeFromPath;
+                }
+            }
+
+            return dotnetExe;
+        }
+
+        public static string? GetDotnetExePath(Func<string, string?>? getEnvironmentVariable = null)
+        {
+            if (getEnvironmentVariable == null)
+            {
+                getEnvironmentVariable = Environment.GetEnvironmentVariable;
+            }
+            var environmentProvider = new EnvironmentProvider(getEnvironmentVariable);
+            return environmentProvider.GetDotnetExePath();
+        }
+
+        public static string? GetDotnetExePath(Func<string, string?> getEnvironmentVariable, Func<string?> getCurrentProcessPath)
+        {
+            getEnvironmentVariable ??= Environment.GetEnvironmentVariable;
+            getCurrentProcessPath ??= GetCurrentProcessPath;
+            var environmentProvider = new EnvironmentProvider(getEnvironmentVariable, getCurrentProcessPath);
+            return environmentProvider.GetDotnetExePath();
+        }
+
+        private static string? GetCurrentProcessPath()
+        {
+            string? currentProcessPath;
+#if NET6_0_OR_GREATER
+            currentProcessPath = Environment.ProcessPath;
+#else
+            currentProcessPath = Process.GetCurrentProcess().MainModule.FileName;
+#endif
+            return currentProcessPath;
+        }
+    }
+}
diff --git a/src/UnitTests.Shared/RequiresSymbolicLinksFactAttribute.cs b/src/UnitTests.Shared/RequiresSymbolicLinksFactAttribute.cs
new file mode 100644
index 00000000000..4e53459f155
--- /dev/null
+++ b/src/UnitTests.Shared/RequiresSymbolicLinksFactAttribute.cs
@@ -0,0 +1,55 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+
+using Microsoft.Build.Shared;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    /// <summary>
+    /// A custom <see cref="FactAttribute"/> that skips the test if the OS doesn't support creating symlinks.
+    /// </summary>
+    public sealed class RequiresSymbolicLinksFactAttribute : FactAttribute
+    {
+        private static readonly bool s_runningInAzurePipeline =
+            bool.TryParse(Environment.GetEnvironmentVariable("TF_BUILD"), out bool value) && value;
+
+        public RequiresSymbolicLinksFactAttribute()
+        {
+            if (s_runningInAzurePipeline || !NativeMethodsShared.IsWindows)
+            {
+                return;
+            }
+
+            // In Windows, a process can create symlinks only if it has sufficient permissions.
+            // We simply try to create one and if it fails we skip the test.
+            string sourceFile = FileUtilities.GetTemporaryFile();
+            string destinationFile = FileUtilities.GetTemporaryFile();
+            try
+            {
+                File.Create(sourceFile).Dispose();
+
+                string? errorMessage = null;
+                if (!NativeMethodsShared.MakeSymbolicLink(destinationFile, sourceFile, ref errorMessage))
+                {
+                    Skip = "Requires permission to create symbolic links. Need to be run elevated or under development mode " +
+                        "(https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development).";
+                }
+            }
+            finally
+            {
+                if (File.Exists(sourceFile))
+                {
+                    File.Delete(sourceFile);
+                }
+                if (File.Exists(destinationFile))
+                {
+                    File.Delete(destinationFile);
+                }
+            }
+        }
+    }
+}
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 78b694d815d..48dfd777c71 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Diagnostics;
+using Microsoft.Build.Shared;
 using Xunit.Abstractions;
 
 #nullable disable
@@ -13,6 +13,9 @@ namespace Microsoft.Build.UnitTests.Shared
     public static class RunnerUtilities
     {
         public static string PathToCurrentlyRunningMsBuildExe => BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
+#if !FEATURE_RUN_EXE_IN_TESTS
+        private static readonly string s_dotnetExePath = EnvironmentProvider.GetDotnetExePath();
+#endif
 
         /// <summary>
         /// Invoke the currently running msbuild and return the stdout, stderr, and process exit status.
@@ -32,7 +35,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
 #if FEATURE_RUN_EXE_IN_TESTS
             var pathToExecutable = pathToMsBuildExe;
 #else
-            var pathToExecutable = ResolveRuntimeExecutableName();
+            var pathToExecutable = s_dotnetExePath;
             msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
@@ -55,20 +58,6 @@ private static void AdjustForShellExecution(ref string pathToExecutable, ref str
             }
         }
 
-#if !FEATURE_RUN_EXE_IN_TESTS
-        /// <summary>
-        /// Resolve the platform specific path to the runtime executable that msbuild.exe needs to be run in (unix-mono, {unix, windows}-corerun).
-        /// </summary>
-        private static string ResolveRuntimeExecutableName()
-        {
-            // Run the child process with the same host as the currently-running process.
-            using (Process currentProcess = Process.GetCurrentProcess())
-            {
-                return currentProcess.MainModule.FileName;
-            }
-        }
-#endif
-
         /// <summary>
         /// Run the process and get stdout and stderr
         /// </summary>
diff --git a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
index 5e518f37a7a..6946d9e2323 100644
--- a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
+++ b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
@@ -459,7 +459,7 @@ public void UseNewLineSeparators()
             actual.ShouldBe(expected);
         }
 
-        internal class TestCommandLineBuilder : CommandLineBuilder
+        internal sealed class TestCommandLineBuilder : CommandLineBuilder
         {
             internal void TestVerifyThrow(string switchName, string parameter)
             {
diff --git a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
index 3a62f1fd10d..dc82ea5e6ae 100644
--- a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
+++ b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
@@ -183,7 +183,7 @@ public void FormatEventMessageOnNullBWEA()
     /// <summary>
     /// Minimal logger implementation
     /// </summary>
-    internal class MyLogger : Logger
+    internal sealed class MyLogger : Logger
     {
         public override void Initialize(IEventSource eventSource)
         {
diff --git a/src/Utilities.UnitTests/Logger_Tests.cs b/src/Utilities.UnitTests/Logger_Tests.cs
index 4bcecdc4237..1827d2cf7ff 100644
--- a/src/Utilities.UnitTests/Logger_Tests.cs
+++ b/src/Utilities.UnitTests/Logger_Tests.cs
@@ -12,7 +12,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    internal class EmptyLogger : Logger
+    internal sealed class EmptyLogger : Logger
     {
         /// <summary>
         /// Create a logger instance with a specific verbosity.
diff --git a/src/Utilities.UnitTests/MuxLogger_Tests.cs b/src/Utilities.UnitTests/MuxLogger_Tests.cs
index 7d9d44ccf72..e0a56e4f5a7 100644
--- a/src/Utilities.UnitTests/MuxLogger_Tests.cs
+++ b/src/Utilities.UnitTests/MuxLogger_Tests.cs
@@ -325,7 +325,7 @@ public void RegisteringLoggerDuringBuildThrowsException()
         /// <summary>
         /// A logger which signals an event when it gets a project started message.
         /// </summary>
-        private class EventingLogger : ILogger
+        private sealed class EventingLogger : ILogger
         {
             /// <summary>
             /// The event source
diff --git a/src/Utilities.UnitTests/PlatformManifest_Tests.cs b/src/Utilities.UnitTests/PlatformManifest_Tests.cs
index a6d4eee348f..2a0cdb3360d 100644
--- a/src/Utilities.UnitTests/PlatformManifest_Tests.cs
+++ b/src/Utilities.UnitTests/PlatformManifest_Tests.cs
@@ -5,9 +5,8 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
-
-using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index 99917144b38..e92f6c7fffd 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -1,12 +1,11 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Shouldly;
-using Xunit;
-
-using Microsoft.Build.Shared;
 using System.Diagnostics;
 using System.Threading.Tasks;
+using Microsoft.Build.Shared;
+using Shouldly;
+using Xunit;
 
 #nullable disable
 
diff --git a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
index f46e35ee4e3..ff9c8243fea 100644
--- a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
@@ -22,6 +22,11 @@ internal static string ProcessorArchitectureIntToString()
                 NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
                 NativeMethodsShared.ProcessorArchitectures.ARM => ProcessorArchitecture.ARM,
                 NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
+                NativeMethodsShared.ProcessorArchitectures.WASM => ProcessorArchitecture.WASM,
+                NativeMethodsShared.ProcessorArchitectures.S390X => ProcessorArchitecture.S390X,
+                NativeMethodsShared.ProcessorArchitectures.LOONGARCH64 => ProcessorArchitecture.LOONGARCH64,
+                NativeMethodsShared.ProcessorArchitectures.ARMV6 => ProcessorArchitecture.ARMV6,
+                NativeMethodsShared.ProcessorArchitectures.PPC64LE => ProcessorArchitecture.PPC64LE,
                 // unknown architecture? return null
                 _ => null,
             };
@@ -37,6 +42,11 @@ public void ValidateProcessorArchitectureStrings()
             ProcessorArchitecture.MSIL.ShouldBe("MSIL"); // "MSIL ProcessorArchitecture isn't correct"
             ProcessorArchitecture.ARM.ShouldBe("ARM"); // "ARM ProcessorArchitecture isn't correct"
             ProcessorArchitecture.ARM64.ShouldBe("ARM64"); // "ARM ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.WASM.ShouldBe("WASM"); // "WASM ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.S390X.ShouldBe("S390X"); // "S390X ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.LOONGARCH64.ShouldBe("LOONGARCH64"); // "LOONGARCH64 ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.ARMV6.ShouldBe("ARMV6"); // "ARMV6 ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.PPC64LE.ShouldBe("PPC64LE"); // "PPC64LE ProcessorArchitecture isn't correct"
         }
 
         [Fact]
diff --git a/src/Utilities.UnitTests/StringExtensions_Tests.cs b/src/Utilities.UnitTests/StringExtensions_Tests.cs
index d7b84659fb1..bc97460ff1d 100644
--- a/src/Utilities.UnitTests/StringExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/StringExtensions_Tests.cs
@@ -2,11 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 
-using Microsoft.Build.Shared;
-
 #nullable disable
 
 namespace Microsoft.Build.UnitTests
diff --git a/src/Utilities.UnitTests/TaskItem_Tests.cs b/src/Utilities.UnitTests/TaskItem_Tests.cs
index f774fdfc69e..2c81395c138 100644
--- a/src/Utilities.UnitTests/TaskItem_Tests.cs
+++ b/src/Utilities.UnitTests/TaskItem_Tests.cs
@@ -11,6 +11,7 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.NetCore.Extensions;
 
 #pragma warning disable 0219
 
@@ -227,14 +228,9 @@ public void NonexistentRequestDirectory()
             from.GetMetadata(FileUtilities.ItemSpecModifiers.Directory).ShouldBe(NativeMethodsShared.IsWindows ? @"subdir\" : "subdir/");
         }
 
-        [Fact]
+        [WindowsOnlyFact("UNC is not implemented except under Windows.")]
         public void NonexistentRequestDirectoryUNC()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "UNC is not implemented except under Windows"
-            }
-
             TaskItem from = new TaskItem();
             from.ItemSpec = @"\\local\share\subdir\Monkey.txt";
             from.GetMetadata(FileUtilities.ItemSpecModifiers.Directory).ShouldBe(@"subdir\");
@@ -333,8 +329,6 @@ public void SetNullMetadataValue()
         /// Test that task items can be successfully constructed based on a task item from another appdomain.  
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "mono-windows-failing")]
         public void RemoteTaskItem()
         {
             AppDomain appDomain = null;
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index 8c961c597f1..bb98a4a196f 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -23,6 +23,7 @@
 using SharedDotNetFrameworkArchitecture = Microsoft.Build.Shared.DotNetFrameworkArchitecture;
 using Xunit;
 using Xunit.Abstractions;
+using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -68,8 +69,7 @@ public void GetApiContractReferencesHandlesNonExistingLocation()
             returnValue.Length.ShouldBe(0);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetApiContractReferencesFindsWinMDs()
         {
             string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
@@ -93,8 +93,7 @@ public void GetApiContractReferencesFindsWinMDs()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetApiContractReferencesFindsVersionedWinMDs()
         {
             string tempDirectory = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
@@ -117,8 +116,7 @@ public void GetApiContractReferencesFindsVersionedWinMDs()
             }
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetWinBlueSDKLocation()
         {
             string sdkRootPath = ToolLocationHelper.GetPlatformSDKLocation("Windows", "8.1");
@@ -127,8 +125,7 @@ public void GetWinBlueSDKLocation()
             returnValue.ShouldBe(sdkRootPath);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetWinBlueContentFolderPath()
         {
             string sdkRootPath = ToolLocationHelper.GetPlatformSDKLocation("Windows", "8.1");
@@ -137,8 +134,7 @@ public void GetWinBlueContentFolderPath()
             returnValue.ShouldBe(Path.Combine(sdkRootPath, @"DesignTime\CommonConfiguration\Neutral"));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetSDKRootLocation()
         {
             string expectedValue = ToolLocationHelper.GetPlatformSDKLocation("Windows", "10.0");
@@ -151,11 +147,10 @@ public void GetSDKRootLocation()
         }
 
 #if RUNTIME_TYPE_NETCORE
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/1250")]
+        [WindowsOnlyFact(Skip = "https://github.com/dotnet/msbuild/issues/1250")]
 #else
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/2569")]
+        [WindowsOnlyFact(Skip = "https://github.com/dotnet/msbuild/issues/2569")]
 #endif
-        [PlatformSpecific(TestPlatforms.Windows)]
         public void GetUnversionedSDKUnionMetadataLocation()
         {
             string sdkRootPath = ToolLocationHelper.GetPlatformSDKLocation("Windows", "10.0");
@@ -165,8 +160,7 @@ public void GetUnversionedSDKUnionMetadataLocation()
             returnValue.ShouldBe(Path.Combine(sdkRootPath, "UnionMetadata"));
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetVersionedSDKUnionMetadataLocation()
         {
             // Create manifest file
@@ -533,8 +527,7 @@ public void FindFrameworksPathRunningThisTest()
          *
          * Search for a whidbey when whidbey is the current version.
          */
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void FindFrameworksPathRunningUnderWhidbey()
         {
             string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
@@ -551,8 +544,7 @@ public void FindFrameworksPathRunningUnderWhidbey()
         *
         * Search for a whidbey when orcas is the current version.
         */
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void FindFrameworksPathRunningUnderOrcas()
         {
             string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
@@ -569,8 +561,7 @@ public void FindFrameworksPathRunningUnderOrcas()
         *
         * Search for a whidbey when orcas is the current version.
         */
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void FindFrameworksPathRunningUnderEverett()
         {
             string path = FrameworkLocationHelper.FindDotNetFrameworkPath(
@@ -626,7 +617,6 @@ public void FindPathForEverettThatIsntProperlyInstalled()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
         public void ExerciseMiscToolLocationHelperMethods()
@@ -687,7 +677,6 @@ public void ExerciseMiscToolLocationHelperMethods()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TestGetPathToBuildToolsFile()
         {
             string net20Path = ToolLocationHelper.GetPathToDotNetFrameworkFile("MSBuild.exe", TargetDotNetFrameworkVersion.Version20);
@@ -710,7 +699,6 @@ public void TestGetPathToBuildToolsFile()
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/722")]
 #else
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
 #endif
         public void TestGetPathToBuildToolsFile_32Bit()
         {
@@ -907,11 +895,10 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
         }
 
 #if FEATURE_REGISTRY_SDKS
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/995")]
+        [WindowsOnlyFact(Skip = "https://github.com/dotnet/msbuild/issues/995")]
 #else
-        [Fact(Skip = "Registry SDKs not supported")]
+        [WindowsOnlyFact(Skip = "Registry SDKs not supported")]
 #endif
-        [PlatformSpecific(TestPlatforms.Windows)]
         public void GetPathToDotNetFrameworkSdk()
         {
             // Test out of range .net version.
@@ -990,8 +977,7 @@ public void GetPathToDotNetFrameworkSdk()
 
 #pragma warning disable 618 //The test below tests a deprecated API. We disable the warning for obsolete methods for this particular test
 #if FEATURE_WIN32_REGISTRY
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetPathToWindowsSdk()
         {
             // Test out of range .net version.
@@ -1134,7 +1120,6 @@ public void VerifyToolsetAndToolLocationHelperAgree()
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpty()
         {
             string projectContents = @"
@@ -1168,7 +1153,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
             ILogger logger = new MockLogger(_output);
 
             ProjectCollection collection = new ProjectCollection();
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
@@ -1176,7 +1161,6 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
         }
 
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
         {
             string projectContents = @"
@@ -1212,15 +1196,14 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
             globalProperties.Add("VisualStudioVersion", "10.0");
 
             ProjectCollection collection = new ProjectCollection(globalProperties);
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
             success.ShouldBeTrue(); // "Build Failed.  See Std Out for details."
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
         {
             string projectContents = @"
@@ -1266,7 +1249,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
             globalProperties.Add("VisualStudioVersion", "11.0");
 
             ProjectCollection collection = new ProjectCollection(globalProperties);
-            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, logger, "4.0");
+            Project p = ObjectModelHelpers.CreateInMemoryProject(collection, projectContents, "4.0", logger);
 
             bool success = p.Build(logger);
 
@@ -1358,9 +1341,7 @@ public void GenerateReferencAssemblyInvalidIdentifier()
         /// Make sure if the moniker and the root make a too long path that an InvalidOperationException is raised
         /// which indicates there was a problem generating the reference assembly path.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void GenerateReferencAssemblyPathTooLong()
         {
             Should.Throw<InvalidOperationException>(() =>
@@ -1388,7 +1369,6 @@ public void GenerateReferencAssemblyPathTooLong()
         /// do not have anything to chain with.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ChainReferenceAssembliesRedistExistsNoRedistList()
         {
             string path = ToolLocationHelper.ChainReferenceAssemblyPath(@"PathDoesNotExistSoICannotChain");
@@ -1632,9 +1612,7 @@ public void ChainReferenceAssembliesRedistInvalidPathChars()
         /// <summary>
         /// Make sure we get the correct exception when the xml file points to an included framework which has invalid path chars.
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void ChainReferenceAssembliesRedistPathTooLong()
         {
             Should.Throw<InvalidOperationException>(() =>
@@ -1937,7 +1915,6 @@ public void GetPathToReferenceAssembliesDefaultLocationNullFrameworkName()
         /// place, which means it just looks for a folder starting with v4.0 in the right spot for any higher version.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetPathToReferenceAssembliesDefaultLocation48()
         {
             if (ToolLocationHelper.GetPathToDotNetFrameworkReferenceAssemblies(TargetDotNetFrameworkVersion.Version48) != null)
@@ -1971,8 +1948,7 @@ public void GetPathToReferenceAssembliesDefaultLocation99()
         /// <summary>
         /// Make sure we choose the correct path for program files based on the operating system
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void TestGenerateProgramFiles32()
         {
             Environment.SpecialFolder folder = Environment.Is64BitOperatingSystem ? Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles;
@@ -1987,8 +1963,7 @@ public void TestGenerateProgramFiles32()
         /// <summary>
         /// Verify we get the correct reference assembly path out of the framework location helper
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // "No ProgramFiles known location outside Windows"
+        [WindowsOnlyFact(additionalMessage: "No ProgramFiles known location outside Windows.")]
         public void TestGeneratedReferenceAssemblyPath()
         {
             string programFiles32 = FrameworkLocationHelper.GenerateProgramFiles32();
@@ -2209,7 +2184,6 @@ public void GetPathToStandardLibraries64Bit35()
         /// We expect to always get the same path which is returned by GetPathToReferenceAssemblies.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void GetPathToStandardLibraries64Bit40()
         {
             IList<string> referencePaths = ToolLocationHelper.GetPathToReferenceAssemblies(new FrameworkNameVersioning(".NETFramework", new Version("4.0")));
@@ -2476,8 +2450,7 @@ public void GetAssemblyFoldersExInfoTestNullTargetRuntimeVersion()
         /// <summary>
         /// Verify we can get a list of directories out of the public API.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void GetAssemblyFoldersExInfoTest()
         {
             SetupAssemblyFoldersExTestConditionRegistryKey();
@@ -2837,7 +2810,7 @@ private static IEnumerable<TargetDotNetFrameworkVersion> EnumDotNetFrameworkVers
         /// <summary>
         /// This class will provide delegates and properties to allow differen combinations of ToolLocationHelper GetDotNetFrameworkPaths and GetReferenceAssemblyPaths to be simulated.
         /// </summary>
-        internal class LegacyFrameworkTestHelper
+        internal sealed class LegacyFrameworkTestHelper
         {
             /// <summary>
             /// Paths which simulate the fact that the frameworks are installed including their reference assemblies
@@ -3113,9 +3086,7 @@ public void TestGetExtensionSDKLocation()
         /// Verify we do not get any resolved paths when we pass in a root which is too long
         ///
         /// </summary>
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp)]
+        [WindowsFullFrameworkOnlyFact]
         public void ResolveFromDirectoryPathTooLong()
         {
             Should.Throw<PathTooLongException>(() =>
@@ -3135,9 +3106,7 @@ public void ResolveFromDirectoryPathTooLong()
         /// <summary>
         /// Verify we get no resolved paths when we pass in a root with invalid chars
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)] // No invalid characters on Unix
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486")]
+        [WindowsFullFrameworkOnlyFact(additionalMessage: ".NET Core 2.1+ no longer validates paths: https://github.com/dotnet/corefx/issues/27779#issuecomment-371253486. No invalid characters on Unix.")]
         public void ResolveFromDirectoryInvalidChar()
         {
             var targetPlatform = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
@@ -3175,8 +3144,7 @@ public void VerifySDKManifestWithNullOrEmptyParameter()
         /// Verify SDKManifest defaults values for MaxPlatformVersion, MinOSVersion, MaxOSVersion when these are not
         /// present in the manifest and the SDK is a framework extension SDK
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void VerifyFrameworkSdkWithOldManifest()
         {
             string tmpRootDirectory = Path.GetTempPath();
@@ -3732,7 +3700,6 @@ public void VerifyGetInstalledSDKLocations2()
         /// Setup some fake entries in the registry and verify we get the correct sdk from there.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyGetInstalledSDKLocations3()
         {
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "VerifyGetInstalledSDKLocations3");
@@ -3835,7 +3802,6 @@ public void VerifyGetInstalledSDKLocations3()
         /// get the expected set out.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ResolveSDKFromDirectory()
         {
             var paths = new List<string> { _fakeStructureRoot, _fakeStructureRoot2 };
@@ -3907,14 +3873,9 @@ public void ResolveSDKFromDirectory()
         /// Verify based on a fake directory structure with some good directories and some invalid ones at each level that we
         /// get the expected set out.
         /// </summary>
-        [Fact]
+        [WindowsOnlyFact("No registry unless under Windows.")]
         public void ResolveSDKFromRegistry()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                return; // "No registry unless under Windows"
-            }
-
             var targetPlatforms = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
 
             ToolLocationHelper.GatherSDKsFromRegistryImpl(targetPlatforms, "Software\\Microsoft\\MicrosoftSDks", RegistryView.Registry32, RegistryHive.CurrentUser, getRegistrySubKeyNames, getRegistrySubKeyDefaultValue, _openBaseKey, File.Exists);
@@ -3962,7 +3923,6 @@ public void ResolveSDKFromRegistry()
         /// and make sure we get the expected results.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ResolveSDKFromRegistryAndDisk()
         {
             var targetPlatforms = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
@@ -4147,15 +4107,13 @@ public void GetALLTargetPlatformSDKs()
         /// <summary>
         /// Verify that the list of platforms is empty if we ask for an sdk that is not installed.
         /// </summary>
-        [Fact]
-        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [UnixOnlyFact]
         public void VerifyGetFoldersInVSInstalls_Unix()
         {
             ToolLocationHelper.GetFoldersInVSInstalls(null, null, "relativePath").Count().ShouldBe(0);
         }
 
-        [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]
+        [WindowsOnlyFact]
         public void VerifyFindRootFolderWhereAllFilesExist()
         {
             // create directories and files in them
@@ -4195,7 +4153,6 @@ public void VerifyFindRootFolderWhereAllFilesExist()
         /// Verify that the GetPlatformSDKPropsFileLocation method can be correctly called for pre-OneCore SDKs during evaluation time as a msbuild function.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyGetPreOneCoreSDKPropsLocation()
         {
             // This is the mockup layout for SDKs before One Core SDK.
@@ -4240,7 +4197,7 @@ public void VerifyGetPreOneCoreSDKPropsLocation()
 
                 File.WriteAllText(Path.Combine(platformDirectory, "SDKManifest.xml"), "Test");
 
-                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents, null);
+                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents);
 
                 string propertyValue = project.GetPropertyValue("PlatformSDKLocation");
                 string propsLocation = project.GetPropertyValue("PropsLocation");
@@ -4271,7 +4228,6 @@ public void VerifyGetPreOneCoreSDKPropsLocation()
         /// Verify that the GetPlatformSDKPropsFileLocation method can be correctly called for OneCore SDK during evaluation time as a msbuild function.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void VerifyGetOneCoreSDKPropsLocation()
         {
             // This is the mockup layout for One Core SDK.
@@ -4319,7 +4275,7 @@ public void VerifyGetOneCoreSDKPropsLocation()
                 File.WriteAllText(Path.Combine(platformDirectory, "SDKManifest.xml"), "Test");
                 File.WriteAllText(Path.Combine(platformDirectory2, "Platform.xml"), "Test");
 
-                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents, null);
+                Project project = ObjectModelHelpers.CreateInMemoryProject(new ProjectCollection(), tempProjectContents);
 
                 string propertyValue = project.GetPropertyValue("PlatformSDKLocation");
                 string propsLocation = project.GetPropertyValue("PropsLocation");
diff --git a/src/Utilities.UnitTests/ToolTask_Tests.cs b/src/Utilities.UnitTests/ToolTask_Tests.cs
index b36c5d2ba11..f1d08123d54 100644
--- a/src/Utilities.UnitTests/ToolTask_Tests.cs
+++ b/src/Utilities.UnitTests/ToolTask_Tests.cs
@@ -25,7 +25,7 @@ public ToolTask_Tests(ITestOutputHelper testOutput)
             _output = testOutput;
         }
 
-        private class MyTool : ToolTask, IDisposable
+        private sealed class MyTool : ToolTask, IDisposable
         {
             private string _fullToolName;
             private string _responseFileCommands = string.Empty;
@@ -203,7 +203,6 @@ public void HandleExecutionErrorsWhenToolDoesntLogError()
         [Fact]
         [Trait("Category", "netcore-osx-failing")]
         [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void HandleExecutionErrorsWhenToolLogsError()
         {
             using (MyTool t = new MyTool())
@@ -340,7 +339,6 @@ public void ToolExeWinsOverToolName()
         /// of the regular tool name
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void ToolExeIsFoundOnToolPath()
         {
             string shellName = NativeMethodsShared.IsWindows ? "cmd.exe" : "sh";
@@ -390,7 +388,6 @@ public void TaskNotFoundOnPath()
         /// Task is found on path.
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void TaskFoundOnPath()
         {
             using (MyTool t = new MyTool())
@@ -510,7 +507,6 @@ public void ToolTaskCanChangeCanonicalErrorFormat()
         /// Passing env vars through the tooltask public property
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EnvironmentVariablesToToolTask()
         {
             MyTool task = new MyTool();
@@ -542,7 +538,6 @@ public void EnvironmentVariablesToToolTask()
         /// Equals sign in value
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EnvironmentVariablesToToolTaskEqualsSign()
         {
             MyTool task = new MyTool();
@@ -603,7 +598,6 @@ public void EnvironmentVariablesToToolTaskInvalid3()
         /// Not set should not wipe out other env vars
         /// </summary>
         [Fact]
-        [Trait("Category", "mono-osx-failing")]
         public void EnvironmentVariablesToToolTaskNotSet()
         {
             MyTool task = new MyTool();
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index 5c2d97eabd1..22a0dae0bf4 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -68,11 +68,13 @@ public FileTrackerTests()
                     Environment.ExpandEnvironmentVariables("%windir%\\system32;%windir%"));
             }
 
+#if ENABLE_TRACKER_TESTS // https://github.com/dotnet/msbuild/issues/649
             // Call StopTrackingAndCleanup here, just in case one of the unit tests failed before it called it
             // In real code StopTrackingAndCleanup(); would always be in a finally {} block.
             FileTracker.StopTrackingAndCleanup();
             FileTrackerTestHelper.CleanTlogs();
             FileTracker.SetThreadCount(1);
+#endif
         }
 
         public void Dispose()
@@ -83,7 +85,6 @@ public void Dispose()
                 Environment.SetEnvironmentVariable("PATH", s_oldPath);
                 s_oldPath = null;
             }
-
             FileTrackerTestHelper.CleanTlogs();
         }
 
@@ -837,11 +838,9 @@ public void FileTrackerFindStrInX86X64ChainRepeatCommand()
             FileTrackerTestHelper.AssertFoundStringInTLog(Path.GetFullPath("test.in").ToUpperInvariant(), tlogFiles[0]);
         }
 
-        [Fact(Skip = "FileTracker tests require VS2015 Update 3 or a packaged version of Tracker.exe https://github.com/dotnet/msbuild/issues/649")]
+        [Fact]
         public void FileTrackerFileIsUnderPath()
         {
-            Console.WriteLine("Test: FileTrackerFileIsUnderPath");
-
             // YES: Both refer to something under baz, so yes this is on the path
             Assert.True(FileTracker.FileIsUnderPath(@"c:\foo\bar\baz\", @"c:\foo\bar\baz\"));
 
@@ -883,11 +882,9 @@ public void FileTrackerFileIsUnderPath()
             Assert.False(FileTracker.FileIsUnderPath(@"c:\foo\rumble.cpp", @"c:\foo\rumble\"));
         }
 
-        [Fact(Skip = "FileTracker tests require VS2015 Update 3 or a packaged version of Tracker.exe https://github.com/dotnet/msbuild/issues/649")]
+        [Fact]
         public void FileTrackerFileIsExcludedFromDependencies()
         {
-            Console.WriteLine("Test: FileTrackerFileIsExcludedFromDependencies");
-
             string applicationDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
             string localApplicationDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
             string localLowApplicationDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "AppData\\LocalLow");
diff --git a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
index 3c3e924cd2b..913ccfc7098 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
@@ -3535,7 +3535,7 @@ public void RootContainsSubRoots()
         }
     }
 
-    internal class MockTask : Task
+    internal sealed class MockTask : Task
     {
         public MockTask(ResourceManager resourceManager)
             : base(resourceManager)
@@ -3547,7 +3547,7 @@ public MockTask(ResourceManager resourceManager)
         public override bool Execute() => true;
     }
 
-    internal class DependencyTestHelper
+    internal sealed class DependencyTestHelper
     {
         public static ITaskItem[] ItemArray(ITaskItem item)
         {
diff --git a/src/Utilities/ApiContract.cs b/src/Utilities/ApiContract.cs
index 854a72e7b17..15213d41e2f 100644
--- a/src/Utilities/ApiContract.cs
+++ b/src/Utilities/ApiContract.cs
@@ -2,8 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Xml;
 using System.Collections.Generic;
+using System.Xml;
 
 #nullable disable
 
diff --git a/src/Utilities/AssemblyResources.cs b/src/Utilities/AssemblyResources.cs
index b1dcdb2eb0a..b2a22970d12 100644
--- a/src/Utilities/AssemblyResources.cs
+++ b/src/Utilities/AssemblyResources.cs
@@ -1,9 +1,9 @@
 Ôªø// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Resources;
-using System.Reflection;
 using System.Globalization;
+using System.Reflection;
+using System.Resources;
 
 #nullable disable
 
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index 3c87712b9b9..7db0be0b667 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -5,9 +5,8 @@
 using System.Diagnostics;
 using System.IO;
 using System.Text;
-
-using Microsoft.Build.Framework;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Utilities/PlatformManifest.cs b/src/Utilities/PlatformManifest.cs
index de8f11a3a13..41b423f984b 100644
--- a/src/Utilities/PlatformManifest.cs
+++ b/src/Utilities/PlatformManifest.cs
@@ -2,9 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
 using System.Xml;
-using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
diff --git a/src/Utilities/ProcessorArchitecture.cs b/src/Utilities/ProcessorArchitecture.cs
index 962ef126ff0..88946934b37 100644
--- a/src/Utilities/ProcessorArchitecture.cs
+++ b/src/Utilities/ProcessorArchitecture.cs
@@ -45,6 +45,31 @@ public static class ProcessorArchitecture
         [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "ARM64", Justification = "This is the correct casing for ProcessorArchitecture")]
         public const string ARM64 = nameof(ARM64);
 
+        /// <summary>
+        /// Represents the WebAssembly platform.
+        /// </summary>
+        public const string WASM = nameof(WASM);
+
+        /// <summary>
+        /// Represents the S390x processor architecture.
+        /// </summary>
+        public const string S390X = nameof(S390X);
+
+        /// <summary>
+        /// Represents the LoongAarch64 processor architecture.
+        /// </summary>
+        public const string LOONGARCH64 = nameof(LOONGARCH64);
+
+        /// <summary>
+        /// Represents the 32-bit ARMv6 processor architecture.
+        /// </summary>
+        public const string ARMV6 = nameof(ARMV6);
+
+        /// <summary>
+        /// Represents the PowerPC 64-bit (little-endian) processor architecture.
+        /// </summary>
+        public const string PPC64LE = nameof(PPC64LE);
+
         /// <summary>
         /// Lazy-initted property for getting the architecture of the currently running process
         /// </summary>
@@ -63,6 +88,11 @@ private static string GetCurrentProcessArchitecture()
                 NativeMethodsShared.ProcessorArchitectures.IA64 => IA64,
                 NativeMethodsShared.ProcessorArchitectures.ARM => ARM,
                 NativeMethodsShared.ProcessorArchitectures.ARM64 => ARM64,
+                NativeMethodsShared.ProcessorArchitectures.WASM => WASM,
+                NativeMethodsShared.ProcessorArchitectures.S390X => S390X,
+                NativeMethodsShared.ProcessorArchitectures.LOONGARCH64 => LOONGARCH64,
+                NativeMethodsShared.ProcessorArchitectures.ARMV6 => ARMV6,
+                NativeMethodsShared.ProcessorArchitectures.PPC64LE => PPC64LE,
                 // unknown architecture? return null
                 _ => null,
             };
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index f6911a285ac..0f344499164 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -6,19 +6,17 @@
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Linq;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Xml;
-
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
 using Microsoft.Win32;
-
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
-using UtilitiesDotNetFrameworkArchitecture = Microsoft.Build.Utilities.DotNetFrameworkArchitecture;
 using SharedDotNetFrameworkArchitecture = Microsoft.Build.Shared.DotNetFrameworkArchitecture;
-using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
-using System.Runtime.Versioning;
-using Microsoft.Build.Framework;
+using UtilitiesDotNetFrameworkArchitecture = Microsoft.Build.Utilities.DotNetFrameworkArchitecture;
 
 #nullable disable
 
diff --git a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
index 5eb62b39979..82ed1626244 100644
--- a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
+++ b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
@@ -4,12 +4,11 @@
 #if FEATURE_FILE_TRACKER
 
 using System;
-using System.Collections.Generic;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Threading.Tasks;
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 580921a6e51..8012c69c886 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -73,8 +73,14 @@ public static class FileTracker
     {
         #region Static Member Data
 
-        // The default path to temp, used to create explicitly short and long paths
-        private static readonly string s_tempPath = FileUtilities.TempFileDirectory;
+        /// <summary>
+        /// The default path to temp, used to create explicitly short and long paths.
+        /// </summary>
+        /// <remarks>
+        /// This must be the base system-wide temp path because we use it to filter out I/O of tools outside of our control.
+        /// Tools running under the tracker may put temp files in the temp base or in a sub-directory of their choosing.
+        /// </remarks>
+        private static readonly string s_tempPath = Path.GetTempPath();
 
         // The short path to temp
         private static readonly string s_tempShortPath = FileUtilities.EnsureTrailingSlash(NativeMethodsShared.GetShortFilePath(s_tempPath).ToUpperInvariant());
diff --git a/src/Xunit.NetCore.Extensions/CustomXunitAttributesUtilities.cs b/src/Xunit.NetCore.Extensions/CustomXunitAttributesUtilities.cs
new file mode 100644
index 00000000000..5be9624189f
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/CustomXunitAttributesUtilities.cs
@@ -0,0 +1,21 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Xunit.NetCore.Extensions
+{
+    public static class CustomXunitAttributesUtilities
+    {
+#if NETFRAMEWORK
+        public static bool IsBuiltAgainstDotNet => false;
+
+        public static bool IsBuiltAgainstNetFramework => true;
+#elif NET
+        public static bool IsBuiltAgainstDotNet => true;
+
+        public static bool IsBuiltAgainstNetFramework => false;
+#endif
+
+        public static string AppendAdditionalMessage(this string message, string? additionalMessage)
+            => !string.IsNullOrWhiteSpace(additionalMessage) ? $"{message} {additionalMessage}" : message;
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
new file mode 100644
index 00000000000..b1b0fb8baa4
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
@@ -0,0 +1,23 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    ///  This test should be run only on .NET (or .NET Core).
+    /// </summary>
+    public class DotNetOnlyFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="DotNetOnlyFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public DotNetOnlyFactAttribute(string? additionalMessage = null)
+        {
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstDotNet)
+            {
+                this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
new file mode 100644
index 00000000000..b6ee768534b
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
@@ -0,0 +1,23 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    ///  This test should be run only on .NET (or .NET Core).
+    /// </summary>
+    public class DotNetOnlyTheoryAttribute : TheoryAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="DotNetOnlyTheoryAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public DotNetOnlyTheoryAttribute(string? additionalMessage = null)
+        {
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstDotNet)
+            {
+                this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs
new file mode 100644
index 00000000000..f3878ef0de3
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/UnixOnlyFactAttribute.cs
@@ -0,0 +1,25 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    /// This test should be run only on Unix (Linux, OSX platforms).
+    /// </summary>
+    public class UnixOnlyFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="UnixOnlyFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public UnixOnlyFactAttribute(string? additionalMessage = null)
+        {
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test requires Unix to run.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs
new file mode 100644
index 00000000000..f0a1769882e
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/UnixOnlyTheoryAttribute.cs
@@ -0,0 +1,25 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    /// This test should be run only on Unix (Linux, OSX platforms).
+    /// </summary>
+    public class UnixOnlyTheoryAttribute : TheoryAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="UnixOnlyTheoryAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public UnixOnlyTheoryAttribute(string? additionalMessage = null)
+        {
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test requires Unix to run.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
new file mode 100644
index 00000000000..4caa40a3198
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
@@ -0,0 +1,30 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    ///  This test should be run only on Windows on full .NET Framework.
+    /// </summary>
+    public class WindowsFullFrameworkOnlyFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="WindowsFullFrameworkOnlyFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public WindowsFullFrameworkOnlyFactAttribute(string? additionalMessage = null)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
+            {
+                this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
new file mode 100644
index 00000000000..952bf0d7250
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
@@ -0,0 +1,31 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    ///  This test should be run only on Windows on full .NET Framework.
+    /// </summary>
+    public class WindowsFullFrameworkOnlyTheoryAttribute : TheoryAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="WindowsFullFrameworkOnlyTheoryAttribute"/> class.
+        /// Creates the attribute.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public WindowsFullFrameworkOnlyTheoryAttribute(string? additionalMessage = null)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
+                return;
+            }
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
+            {
+                this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs
new file mode 100644
index 00000000000..72f2378ad02
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/WindowsOnlyFactAttribute.cs
@@ -0,0 +1,25 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    /// This test should be run only on Windows.
+    /// </summary>
+    public class WindowsOnlyFactAttribute : FactAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="WindowsOnlyFactAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public WindowsOnlyFactAttribute(string? additionalMessage = null)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test requires Windows to run.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
diff --git a/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs
new file mode 100644
index 00000000000..dfc2be0b220
--- /dev/null
+++ b/src/Xunit.NetCore.Extensions/WindowsOnlyTheoryAttribute.cs
@@ -0,0 +1,25 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Runtime.InteropServices;
+
+namespace Xunit.NetCore.Extensions
+{
+    /// <summary>
+    /// This test should be run only on Windows.
+    /// </summary>
+    public class WindowsOnlyTheoryAttribute : TheoryAttribute
+    {
+        /// <summary>
+        /// Initializes a new instance of the <see cref="WindowsOnlyTheoryAttribute"/> class.
+        /// </summary>
+        /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
+        public WindowsOnlyTheoryAttribute(string? additionalMessage = null)
+        {
+            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+            {
+                this.Skip = "This test requires Windows to run.".AppendAdditionalMessage(additionalMessage);
+            }
+        }
+    }
+}
