diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index bcb11463ae9..0ce84cfc277 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -346,7 +346,7 @@ private async Task<WorkUnitResult> ExecuteTask(TaskExecutionMode mode, Lookup lo
                         MSBuildEventSource.Log.ExecuteTaskStop(_taskNode?.Name, taskLoggingContext.BuildEventContext.TaskId);
                     }
                 }
-                
+
                 taskResult = aggregateResult;
             }
             finally
@@ -813,7 +813,9 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                         using (FullTracking.Track(taskLoggingContext.TargetLoggingContext.Target.Name, _taskNode.Name, _buildRequestEntry.ProjectRootDirectory, _buildRequestEntry.RequestConfiguration.Project.PropertiesToBuildWith))
 #endif
                         {
+                            taskHost?.RequireCores(1);
                             taskResult = taskExecutionHost.Execute();
+                            taskHost?.ReleaseCores(1);
                         }
                     }
                 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 0f93e233f57..b7d32396d35 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -126,9 +126,6 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             _continueOnError = false;
             _activeProxy = true;
             _callbackMonitor = new Object();
-
-            // Ensure that we have at least one core to run this task
-            RequireCores(1);
         }
 
         /// <summary>
@@ -685,13 +682,13 @@ public int RequestCores(int requestedCores)
             return coresAcquired;
         }
 
-        private void RequireCores(int requestedCores)
+        public void RequireCores(int requestedCores)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
             rms.RequireCores(requestedCores);
 
-            runningTotal += 1; // default reservation
+            runningTotal += requestedCores; // default reservation
         }
 
         public void ReleaseCores(int coresToRelease)
@@ -702,9 +699,8 @@ public void ReleaseCores(int coresToRelease)
 
             if (coresToRelease >= 1)
             {
-                runningTotal -= coresToRelease;
-
                 rms.ReleaseCores(coresToRelease);
+                runningTotal -= coresToRelease;
             }
         }
 
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 5a4b6bf5118..69ebd6a3063 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -4,6 +4,7 @@
 using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using System.Text;
 using System.Threading;
@@ -17,6 +18,10 @@ class ResourceManagerService : IBuildComponent
     {
         Semaphore? s = null;
 
+#if DEBUG
+        public int TotalNumberHeld = -1;
+#endif
+
         internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskResourceManager, "Cannot create components of type {0}", type);
@@ -30,6 +35,10 @@ public void InitializeComponent(IBuildComponentHost host)
 
             int resourceCount = host.BuildParameters.MaxNodeCount; // TODO: tweakability
 
+#if DEBUG
+            TotalNumberHeld = 0;
+#endif
+
             s = new Semaphore(resourceCount, resourceCount, SemaphoreName); // TODO: SemaphoreSecurity?
         }
 
@@ -37,6 +46,10 @@ public void ShutdownComponent()
         {
             s?.Dispose();
             s = null;
+
+#if DEBUG
+            TotalNumberHeld = -2;
+#endif
         }
 
         public int RequestCores(int requestedCores)
@@ -74,6 +87,10 @@ public void ReleaseCores(int coresToRelease)
             ErrorUtilities.VerifyThrow(coresToRelease > 0, "Tried to release {0} cores", coresToRelease);
 
             s.Release(coresToRelease);
+
+#if DEBUG
+            TotalNumberHeld -= coresToRelease;
+#endif
         }
 
         internal void RequireCores(int requestedCores)
@@ -88,8 +105,11 @@ internal void RequireCores(int requestedCores)
             if (!s.WaitOne())
             {
                 ErrorUtilities.ThrowInternalError("Couldn't get a core to run a task even with infinite timeout");
-
             }
+
+#if DEBUG
+            TotalNumberHeld++;
+#endif
         }
     }
 }
