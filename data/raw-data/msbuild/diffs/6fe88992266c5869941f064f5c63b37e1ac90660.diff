diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index ce85492e9f9..03df6e003e1 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -21,7 +21,7 @@ public BinaryLoggerParameters(string[] binaryLoggerArguments, string[] binaryLog
             this.binaryLoggerParameters = GetLastArgumentPart(binaryLoggerParameters);
         }
 
-        public bool isBinaryLoggerSet { get; set; }
+        public bool IsBinaryLoggerSet { get; set; }
 
         public string InitProjectFile { get; set; } = string.Empty;
 
@@ -41,5 +41,41 @@ private string GetLastArgumentPart(string[] arguments)
             }
             return result;
         }
+
+
+        /// <summary>
+        /// Generates the stringified representation of current instance
+        /// </summary>
+        /// <returns></returns>
+        public string GetStringifiedParameters()
+        {
+            var builtParameters = new StringBuilder();
+            // common configuration
+            builtParameters.Append("commonConfig=[");
+            builtParameters.Append($"InitProjectFile={InitProjectFile};");
+            builtParameters.Append($"IsBinaryLoggerSet={IsBinaryLoggerSet};");
+            builtParameters.Append(']');
+
+            builtParameters.Append($"blArguments=[binaryLoggerArguments={binaryLoggerArguments}]");
+            builtParameters.Append($"blParameters=[binaryLoggerParameters={binaryLoggerParameters}]");
+
+            return builtParameters.ToString();
+        }
+
+
+        /// <summary>
+        /// Generates the BinaryLoggerParameters instance based on the parameters provided
+        /// </summary>
+        /// <param name="parameters"></param>
+        /// <returns></returns>
+        public BinaryLoggerParameters GenerateInstanceFromParameters(string parameters)
+        {
+            if (string.IsNullOrEmpty(parameters))
+            {
+                return null;
+            }
+            // TODO: parsing logic
+            return new BinaryLoggerParameters(Array.Empty<string>(), Array.Empty<string>());
+        }
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index cf3e66daace..68f68d46752 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2634,7 +2634,7 @@ private static bool ProcessCommandLineSwitches(
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters])
                     {
-                        isBinaryLoggerSet = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
+                        IsBinaryLoggerSet = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
                         InitProjectFile = projectFile
                     };
 
@@ -3811,7 +3811,7 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
 
         private static void ProcessBinaryLogger(BinaryLoggerParameters binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
         {
-            if (!binaryLoggerParameters.isBinaryLoggerSet)
+            if (!binaryLoggerParameters.IsBinaryLoggerSet)
             {
                 return;
             }
