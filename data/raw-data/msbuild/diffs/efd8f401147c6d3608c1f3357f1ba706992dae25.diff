diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 3ba464e53d0..22f52492c45 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -48,7 +48,7 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// Stores the list of manifests of specific SDK resolvers which could be loaded.
         /// </summary>
-        protected IReadOnlyList<SdkResolverManifest> _specificResolversManifestsRegistry;
+        private List<SdkResolverManifest> _specificResolversManifestsRegistry;
 
         /// <summary>
         /// Stores the list of manifests of general SDK resolvers which could be loaded.
@@ -422,7 +422,7 @@ internal virtual void InitializeForTests(SdkResolverLoader resolverLoader = null
                 generalResolversManifestsRegistry.Add(sdkResolverManifest);
                 _manifestToResolvers[sdkResolverManifest] = resolvers;
                 _generalResolversManifestsRegistry = generalResolversManifestsRegistry;
-                _specificResolversManifestsRegistry = specificResolversManifestsRegistry.AsReadOnly();
+                _specificResolversManifestsRegistry = specificResolversManifestsRegistry;
             }
         }
 
@@ -519,7 +519,7 @@ private void RegisterResolversManifests(ElementLocation location)
                 // Then it will wait at the lock and return after we release it since the collections we have filled them before releasing the lock.
                 // The collections are never modified after this point.
                 // So I've made them ReadOnly
-                _specificResolversManifestsRegistry = specificResolversManifestsRegistry.AsReadOnly();
+                _specificResolversManifestsRegistry = specificResolversManifestsRegistry;
                 _generalResolversManifestsRegistry = generalResolversManifestsRegistry;
             }
         }
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index 6f290ff0333..d33ce400ddf 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -555,6 +555,9 @@ internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TRes
             {
                 ICollection<T> propertiesCollection = (ICollection<T>)_properties;
                 List<TResult> result = new(propertiesCollection.Count);
+
+                // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.
+                // RetrievableValuedEntryHashSet implements a struct enumerator.
                 if (_properties is RetrievableValuedEntryHashSet<T> hashSet)
                 {
                     foreach (T property in hashSet)
