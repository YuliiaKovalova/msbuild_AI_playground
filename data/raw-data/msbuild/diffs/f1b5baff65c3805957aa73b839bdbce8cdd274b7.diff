diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 7dc8fe2645a..d834c4e3f92 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1029,7 +1029,7 @@ void ExecuteSubmissionImpl()
             {
                 lock (_syncLock)
                 {
-                    var projectInstance = submission.BuildRequestData.ProjectInstance;
+                    ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
                     if (projectInstance != null)
                     {
                         if (_acquiredProjectRootElementCacheFromProjectInstance)
@@ -1065,34 +1065,24 @@ void ExecuteSubmissionImpl()
 
                             // If we have already named this instance when it was submitted previously during this build, use the same
                             // name so that we get the same configuration (and thus don't cause it to rebuild.)
-                            if (!_unnamedProjectInstanceToNames.TryGetValue(
-                                submission.BuildRequestData.ProjectInstance,
-                                out var tempName))
+                            if (!_unnamedProjectInstanceToNames.TryGetValue(submission.BuildRequestData.ProjectInstance, out var tempName))
                             {
                                 tempName = "Unnamed_" + _nextUnnamedProjectId++;
                                 _unnamedProjectInstanceToNames[submission.BuildRequestData.ProjectInstance] = tempName;
                             }
 
                             submission.BuildRequestData.ProjectFullPath = Path.Combine(
-                                submission.BuildRequestData.ProjectInstance
-                                    .GetProperty(ReservedPropertyNames.projectDirectory)
-                                    .EvaluatedValue,
+                                submission.BuildRequestData.ProjectInstance.GetProperty(ReservedPropertyNames.projectDirectory).EvaluatedValue,
                                 tempName);
                         }
 
                         // Create/Retrieve a configuration for each request
-                        var buildRequestConfiguration =
-                            new BuildRequestConfiguration(
-                                submission.BuildRequestData,
-                                _buildParameters.DefaultToolsVersion);
-                        var matchingConfiguration =
-                            _configCache.GetMatchingConfiguration(buildRequestConfiguration);
+                        var buildRequestConfiguration = new BuildRequestConfiguration(submission.BuildRequestData, _buildParameters.DefaultToolsVersion);
+                        var matchingConfiguration = _configCache.GetMatchingConfiguration(buildRequestConfiguration);
                         var newConfiguration = ResolveConfiguration(
                             buildRequestConfiguration,
                             matchingConfiguration,
-                            submission.BuildRequestData.Flags.HasFlag(
-                                BuildRequestDataFlags
-                                    .ReplaceExistingProjectInstance));
+                            submission.BuildRequestData.Flags.HasFlag(BuildRequestDataFlags.ReplaceExistingProjectInstance));
 
                         newConfiguration.ExplicitlyLoaded = true;
 
@@ -1183,7 +1173,7 @@ bool ProjectCacheIsPresent()
             {
                 return _projectCacheService != null ||
                        _buildParameters.ProjectCacheDescriptor != null ||
-                       BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Count > 0;
+                       (BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Count > 0);
             }
 
             bool CheckForShutdown()
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
index 8b184f220a2..bc7354b9a90 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
@@ -21,7 +21,7 @@ public class CacheContext
         public IReadOnlyDictionary<string, string> PluginSettings { get; }
         public ProjectGraph? Graph { get; }
         public IReadOnlyCollection<ProjectGraphEntryPoint>? GraphEntryPoints { get; }
-        public string MSBuildExePath { get; }
+        public string? MSBuildExePath { get; }
         public MSBuildFileSystemBase FileSystem { get; }
 
         public CacheContext(
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index a93d364c94f..5157fe4a471 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -160,14 +160,13 @@ public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest
             switch (cacheResult.ResultType)
             {
                 case CacheResultType.CacheHit:
-                    message += $"{message} Skipping project.";
+                    message += " Skipping project.";
                     break;
                 case CacheResultType.CacheMiss:
                 case CacheResultType.CacheNotApplicable:
-                    message += $"{message} Building project.";
+                    message += " Building project.";
                     break;
                 case CacheResultType.CacheError:
-                    message += $"{message}";
                     break;
                 default:
                     throw new ArgumentOutOfRangeException();
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
index eec7376b9c1..6b83993c148 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
@@ -24,7 +24,7 @@ public class ProxyTargets: ITranslatable
         private Dictionary<string, string> _proxyTargetToRealTargetMap = null!;
 
         /// <summary>
-        /// Mapping from proxy targets to real targets.
+        /// Mapping from proxy targets to real targets. Case insensitive.
         /// </summary>
         public IReadOnlyDictionary<string, string> ProxyTargetToRealTargetMap => _proxyTargetToRealTargetMap;
 
@@ -36,7 +36,7 @@ public ProxyTargets(IReadOnlyDictionary<string, string> proxyTargetToRealTargetM
         {
             ErrorUtilities.VerifyThrowArgumentLength(proxyTargetToRealTargetMap, nameof(proxyTargetToRealTargetMap));
 
-            _proxyTargetToRealTargetMap = proxyTargetToRealTargetMap.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
+            _proxyTargetToRealTargetMap = proxyTargetToRealTargetMap.ToDictionary(kvp => kvp.Key, kvp => kvp.Value, StringComparer.OrdinalIgnoreCase);
         }
 
         void ITranslatable.Translate(ITranslator translator)
diff --git a/src/Shared/CollectionHelpers.cs b/src/Shared/CollectionHelpers.cs
index 5997f2b683d..8d66f374154 100644
--- a/src/Shared/CollectionHelpers.cs
+++ b/src/Shared/CollectionHelpers.cs
@@ -67,7 +67,7 @@ internal static bool DictionaryEquals<K, V>(IReadOnlyDictionary<K, V> a, IReadOn
                     return false;
                 }
 
-                if (!aKvp.Value.Equals(bValue))
+                if (!Equals(aKvp.Value, bValue))
                 {
                     return false;
                 }
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index a2307e41713..07af5356dc7 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -250,7 +250,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                         {
                             string logMessage = $"{w.File}({w.LineNumber},{w.ColumnNumber}): {w.Subcategory} warning {w.Code}: {w.Message}";
 
-                            WriteLineToFullLog(logMessage);
+                            _fullLog.AppendLine(logMessage);
                             _testOutputHelper?.WriteLine(logMessage);
 
                             ++WarningCount;
@@ -260,7 +260,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                     case BuildErrorEventArgs e:
                     {
                         string logMessage = $"{e.File}({e.LineNumber},{e.ColumnNumber}): {e.Subcategory} error {e.Code}: {e.Message}";
-                        WriteLineToFullLog(logMessage);
+                        _fullLog.AppendLine(logMessage);
                         _testOutputHelper?.WriteLine(logMessage);
 
                         ++ErrorCount;
@@ -273,7 +273,7 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                         bool logMessage = !(eventArgs is BuildFinishedEventArgs) || LogBuildFinished;
                         if (logMessage)
                         {
-                            WriteLineToFullLog(eventArgs.Message);
+                            _fullLog.AppendLine(eventArgs.Message);
                             _testOutputHelper?.WriteLine(eventArgs.Message);
                         }
                         break;
@@ -359,11 +359,6 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
             }
         }
 
-        private void WriteLineToFullLog(string line)
-        {
-            _fullLog.AppendLine(line);
-        }
-
         private void PrintFullLog()
         {
             if (_printEventsToStdout)
