diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index b29d47adf12..2a7f57ece4e 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Diagnostics;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
@@ -34,13 +33,11 @@ internal NodeEndpointOutOfProc(bool enableReuse, bool lowPriority)
         /// </summary>
         protected override Handshake GetHandshake()
         {
-            CommunicationsUtilities.Trace("Creating handshake for endpoint out-of-proc node.");
             HandshakeOptions handshakeOptions = CommunicationsUtilities.GetHandshakeOptions(
                 taskHost: false,
                 architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(),
                 nodeReuse: _enableReuse,
                 lowPriority: LowPriority);
-
             return new Handshake(handshakeOptions);
         }
     }
diff --git a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
index 1a488958366..744784dc13f 100644
--- a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
@@ -43,7 +43,7 @@ public Process Start(string msbuildLocation, string commandLineArgs, int nodeId)
         }
 
         /// <summary>
-        /// Creates a new MSBuild or dotnet process.
+        /// Creates new MSBuild or dotnet process.
         /// </summary>
         private Process StartInternal(string msbuildLocation, string commandLineArgs)
         {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index cb0f8d4c3e2..65a50db5c63 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -25,8 +25,6 @@
 using Task = System.Threading.Tasks.Task;
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
-using System.Runtime.InteropServices.ComTypes;
-using Microsoft.Build.Collections;
 
 #nullable disable
 
@@ -46,7 +44,7 @@ internal abstract class NodeProviderOutOfProcBase
         /// <summary>
         /// The number of times to retry creating an out-of-proc node.
         /// </summary>
-        private const int NodeCreationRetries = 1;
+        private const int NodeCreationRetries = 10;
 
         /// <summary>
         /// The amount of time to wait for an out-of-proc node to spool up before we give up.
@@ -509,8 +507,6 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
             for (int i = 0; i < handshakeComponents.Length; i++)
             {
                 CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, handshakeComponents[i], pipeName);
-                CommunicationsUtilities.Trace($"Pipe state: {nodeStream.IsConnected}, Handle valid: {!nodeStream.SafePipeHandle.IsClosed}");
-                CommunicationsUtilities.Trace($"Can write: {nodeStream.CanWrite}");
                 nodeStream.WriteIntForHandshake(handshakeComponents[i]);
             }
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index a6f8011f496..6845044979c 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -404,7 +404,7 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
         /// executable (MSBuild, MSBuildTaskHost or dotnet) and path to MSBuild.dll if we want to use a custom one.
         /// null is returned if executable cannot be resolved.
         /// </summary>
-        internal static (string msbuildExcutable, string msbuildAssemblyPath) GetHostExecutionInfoFromContext(HandshakeOptions hostContext)
+        internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
             string toolPath = null;
@@ -449,7 +449,7 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetHostExe
 
                 toolPath = s_pathToX32Clr2;
             }
-            else if (IsHandshakeOptionEnabled(HandshakeOptions.X64))
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.X64) && !IsHandshakeOptionEnabled(HandshakeOptions.NET))
             {
                 s_pathToX64Clr4 ??= s_baseTaskHostPath64;
 
@@ -471,7 +471,7 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetHostExe
                 }
 
                 // TODO Get path to msbuild.dll
-                msbuildAssemblyPath = BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory;
+                msbuildAssemblyPath = Path.Combine(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory, "MSBuild.dll");
                 toolPath = s_baseTaskHostPathNet;
             }
             else
@@ -543,11 +543,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
                 return false;
             }
 
-            // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
-            // want to start up an MSBuild task host node.
-            // Start the new process. We pass in a node mode with a node number of 2, to indicate that we
-            // want to start up an MSBuild task host node.
-            (string msbuildExecutable, string msbuildAssemblyLocation) = GetHostExecutionInfoFromContext(hostContext);
+            (string msbuildExecutable, string msbuildAssemblyLocation) = GetMSBuildLocationFromHostContext(hostContext);
 
             // we couldn't even figure out the location we're trying to launch ... just go ahead and fail.
             if (msbuildExecutable == null)
@@ -563,7 +559,8 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
             }
             else
             {
-                // Original format for non-dotnet executables
+                // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
+                // want to start up an MSBuild task host node.
                 commandLineArgs = $"/nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority}";
             }
 
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index a09e4aab023..f83d3ad17e6 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -510,7 +510,7 @@ internal static bool DoesTaskHostExist(string runtime, string architecture)
             parameters.Add(XMakeAttributes.architecture, architecture);
 
             HandshakeOptions desiredContext = CommunicationsUtilities.GetHandshakeOptions(taskHost: true, taskHostParameters: parameters);
-            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetHostExecutionInfoFromContext(desiredContext).msbuildExcutable;
+            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext).msbuildExcutable;
 
             if (taskHostLocation != null && FileUtilities.FileExistsNoThrow(taskHostLocation))
             {
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index a988ddf3854..4cd98b02228 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -264,6 +264,7 @@ public bool Execute()
 
             TaskHostConfiguration hostConfiguration =
                 new TaskHostConfiguration(
+                        runtime,
                         _buildComponentHost.BuildParameters.NodeId,
                         NativeMethodsShared.GetCurrentDirectory(),
                         CommunicationsUtilities.GetEnvironmentVariables(),
@@ -569,7 +570,7 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
         /// </summary>
         private void LogErrorUnableToCreateTaskHost(HandshakeOptions requiredContext, string runtime, string architecture, NodeFailedToLaunchException e)
         {
-            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetHostExecutionInfoFromContext(requiredContext).msbuildExcutable ??
+            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext).msbuildExcutable ??
                 // We don't know the path -- probably we're trying to get a 64-bit assembly on a
                 // 32-bit machine.  At least give them the exe name to look for, though ...
                 ((requiredContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2 ? "MSBuildTaskHost.exe" : "MSBuild.exe");
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index a23fea18310..a2f7e5695fc 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Internal;
 
@@ -31,7 +30,6 @@ internal NodeEndpointOutOfProcTaskHost()
         /// </summary>
         protected override Handshake GetHandshake()
         {
-            CommunicationsUtilities.Trace("Creating handshake for out-of-proc task host node endpoint");
             return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
         }
     }
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 3b5a588ecd3..34a16650986 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -611,7 +611,7 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;
                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, "amd64") : CurrentMSBuildToolsDirectory;
                 MSBuildToolsDirectoryNET = @"C:\msbuild\msbuild_yk\msbuild\artifacts\bin\bootstrap\core";
-                MSBuildAssemblyDirectory = @"C:\msbuild\msbuild_yk\msbuild\artifacts\bin\bootstrap\core\sdk\9.0.200-preview.0.24523.19\MSBuild.dll";
+                MSBuildAssemblyDirectory = @"C:\msbuild\msbuild_yk\msbuild\artifacts\bin\bootstrap\core\sdk\9.0.200-preview.0.24603.3";
 #if RUNTIME_TYPE_NETCORE
                 // Fall back to "current" for any architecture since .NET SDK doesn't
                 // support cross-arch task invocations.
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index b8b9ef10818..6fe77c22fa0 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -647,7 +647,6 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string archi
                 }
             }
 
-            // if clrVersion is 5 or greater, we will default to .NET runtime
             if (!string.IsNullOrEmpty(architectureFlagToSet))
             {
                 if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.x64, StringComparison.OrdinalIgnoreCase))
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index bac1c374640..ee04824a965 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -15,8 +15,6 @@
 using Microsoft.Build.Shared;
 #if FEATURE_SECURITY_PERMISSIONS || FEATURE_PIPE_SECURITY
 using System.Security.AccessControl;
-using System.Diagnostics;
-
 
 #endif
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
@@ -348,7 +346,6 @@ private void InitializeAsyncPacketThread()
         /// </summary>
         private void PacketPumpProc()
         {
-            System.Diagnostics.Debugger.Launch();
             NamedPipeServerStream localPipeServer = _pipeServer;
 
             AutoResetEvent localPacketAvailable = _packetAvailable;
@@ -395,7 +392,6 @@ private void PacketPumpProc()
                     // verify it. Afterwards, the host sends an "End of Handshake" signal, to which we respond in kind.
                     // Once the handshake is complete, both sides can be assured the other is ready to accept data.
                     Handshake handshake = GetHandshake();
-                    CommunicationsUtilities.Trace($"Child handshake: {handshake}");
                     try
                     {
                         int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 723a4ba240b..83df9cdc435 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -43,6 +43,11 @@ internal class TaskHostConfiguration : INodePacket
         /// </summary>
         private CultureInfo _uiCulture = CultureInfo.CurrentUICulture;
 
+        /// <summary>
+        /// Task host runtime.
+        /// </summary>
+        private string _runtime;
+
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// The AppDomainSetup that we may want to use on AppDomainIsolated tasks.
@@ -208,6 +213,94 @@ public TaskHostConfiguration(
             _globalParameters = globalParameters ?? new Dictionary<string, string>();
         }
 
+#if FEATURE_APPDOMAIN
+        /// <summary>
+        /// Constructor.
+        /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
+        /// <param name="nodeId">The ID of the node being configured.</param>
+        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
+        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
+        /// <param name="culture">The culture of the thread that will execute the task.</param>
+        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
+        /// <param name="appDomainSetup">The AppDomainSetup that may be used to pass information to an AppDomainIsolated task.</param>
+        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
+        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
+        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
+        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
+        /// <param name="taskName">Name of the task.</param>
+        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
+        /// <param name="taskParameters">Parameters to apply to the task.</param>
+        /// <param name="globalParameters">global properties for the current project.</param>
+        /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
+        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
+#else
+        /// <summary>
+        /// Constructor.
+        /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
+        /// <param name="nodeId">The ID of the node being configured.</param>
+        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
+        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
+        /// <param name="culture">The culture of the thread that will execute the task.</param>
+        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
+        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
+        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
+        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
+        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
+        /// <param name="taskName">Name of the task.</param>
+        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
+        /// <param name="taskParameters">Parameters to apply to the task.</param>
+        /// <param name="globalParameters">global properties for the current project.</param>
+        /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
+        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
+#endif
+        public TaskHostConfiguration(
+                string runtime,
+                int nodeId,
+                string startupDirectory,
+                IDictionary<string, string> buildProcessEnvironment,
+                CultureInfo culture,
+                CultureInfo uiCulture,
+#if FEATURE_APPDOMAIN
+                AppDomainSetup appDomainSetup,
+#endif
+                int lineNumberOfTask,
+                int columnNumberOfTask,
+                string projectFileOfTask,
+                bool continueOnError,
+                string taskName,
+                string taskLocation,
+                bool isTaskInputLoggingEnabled,
+                IDictionary<string, object> taskParameters,
+                Dictionary<string, string> globalParameters,
+                ICollection<string> warningsAsErrors,
+                ICollection<string> warningsNotAsErrors,
+                ICollection<string> warningsAsMessages)
+            : this(nodeId,
+                  startupDirectory,
+                  buildProcessEnvironment,
+                  culture,
+                  uiCulture,
+#if FEATURE_APPDOMAIN
+                appDomainSetup,
+#endif
+                  lineNumberOfTask,
+                  columnNumberOfTask,
+                  projectFileOfTask,
+                  continueOnError,
+                  taskName, taskLocation,
+                  isTaskInputLoggingEnabled,
+                  taskParameters,
+                  globalParameters,
+                  warningsAsErrors,
+                  warningsNotAsErrors,
+                  warningsAsMessages) => _runtime = runtime;
+
         /// <summary>
         /// Constructor for deserialization.
         /// </summary>
@@ -417,20 +510,27 @@ public void Translate(ITranslator translator)
             translator.TranslateCulture(ref _culture);
             translator.TranslateCulture(ref _uiCulture);
 #if FEATURE_APPDOMAIN
-            byte[] appDomainConfigBytes = null;
 
-            // Set the configuration bytes just before serialization in case the SetConfigurationBytes was invoked during lifetime of this instance.
-            if (translator.Mode == TranslationDirection.WriteToStream)
+            // Skip AppDomain configuration when targeting .NET Task Host (Runtime="Net").
+            // Although MSBuild.exe runs under .NET Framework and has AppDomain support,
+            // we don't transmit AppDomain config when communicating with dotnet.exe (it is not supported in .NET 5+).
+            if (!string.Equals(_runtime, "Net", StringComparison.OrdinalIgnoreCase))
             {
-                appDomainConfigBytes = _appDomainSetup?.GetConfigurationBytes();
-            }
+                byte[] appDomainConfigBytes = null;
 
-            translator.Translate(ref appDomainConfigBytes);
+                // Set the configuration bytes just before serialization in case the SetConfigurationBytes was invoked during lifetime of this instance.
+                if (translator.Mode == TranslationDirection.WriteToStream)
+                {
+                    appDomainConfigBytes = _appDomainSetup?.GetConfigurationBytes();
+                }
 
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                _appDomainSetup = new AppDomainSetup();
-                _appDomainSetup.SetConfigurationBytes(appDomainConfigBytes);
+                translator.Translate(ref appDomainConfigBytes);
+
+                if (translator.Mode == TranslationDirection.ReadFromStream)
+                {
+                    _appDomainSetup = new AppDomainSetup();
+                    _appDomainSetup.SetConfigurationBytes(appDomainConfigBytes);
+                }
             }
 #endif
             translator.Translate(ref _lineNumberOfTask);
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 3e436da8c38..3b6265ca4d9 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -4,9 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
-using System.Linq;
 using System.Reflection;
 #if FEATURE_APPDOMAIN
 using System.Security;
