diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index ef21df23454..3b25bfdb8dd 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -30,6 +30,12 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -253,8 +259,8 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
                 // Failure to detect this has been known to stall builds when Windows pops up a related dialog.
                 // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
                 // nodes because we should never be able to connect in this case.
-                string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
-                if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
+                var taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost.AsSpan());
+                if (MemoryExtensions.Equals(Path.GetFileNameWithoutExtension(msbuildLocation.AsSpan()), taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
                 {
                     if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
                     {
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 2cc6ab1f7b4..6cf192117b6 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -16,6 +16,12 @@
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Shared.FileSystem;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -290,7 +296,7 @@ public bool IsTraversal
             {
                 if (!_isTraversalProject.HasValue)
                 {
-                    if (String.Equals(Path.GetFileName(ProjectFullPath), "dirs.proj", StringComparison.OrdinalIgnoreCase))
+                    if (MemoryExtensions.Equals(Path.GetFileName(ProjectFullPath.AsSpan()), "dirs.proj".AsSpan(), StringComparison.OrdinalIgnoreCase))
                     {
                         // dirs.proj are assumed to be traversals
                         _isTraversalProject = true;
diff --git a/src/Build/ElementLocation/XmlDocumentWithLocation.cs b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
index 15c91a6f68e..35fff7227c3 100644
--- a/src/Build/ElementLocation/XmlDocumentWithLocation.cs
+++ b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
@@ -7,6 +7,12 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -350,23 +356,23 @@ private void DetermineWhetherToLoadReadOnly(string fullPath)
                 else if (s_readOnlyFlags == ReadOnlyLoadFlags.LoadReadOnlyIfAppropriate && fullPath is object)
                 {
                     // Only files from Microsoft
-                    if (Path.GetFileName(fullPath).StartsWith("Microsoft.", StringComparison.OrdinalIgnoreCase))
+                    if (Path.GetFileName(fullPath.AsSpan()).StartsWith("Microsoft.".AsSpan(), StringComparison.OrdinalIgnoreCase))
                     {
                         // If we are loading devdiv targets, we're in razzle
-                        if (Path.GetFileName(fullPath).StartsWith("Microsoft.DevDiv", StringComparison.OrdinalIgnoreCase))
+                        if (Path.GetFileName(fullPath.AsSpan()).StartsWith("Microsoft.DevDiv".AsSpan(), StringComparison.OrdinalIgnoreCase))
                         {
                             _loadAsReadOnly = true;
                         }
                         else // Else, only load if they're in program files or windows directories
                         {
                             ErrorUtilities.VerifyThrow(Path.IsPathRooted(fullPath), "should be full path");
-                            string directory = Path.GetDirectoryName(fullPath);
+                            var directory = Path.GetDirectoryName(fullPath.AsSpan());
 
-                            string windowsFolder = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
+                            var windowsFolder = Environment.GetFolderPath(Environment.SpecialFolder.Windows).AsSpan();
 
-                            if ((!String.IsNullOrEmpty(windowsFolder) && directory.StartsWith(windowsFolder, StringComparison.OrdinalIgnoreCase)) ||
-                                (!String.IsNullOrEmpty(FrameworkLocationHelper.programFiles32) && directory.StartsWith(FrameworkLocationHelper.programFiles32, StringComparison.OrdinalIgnoreCase)) ||
-                                (!String.IsNullOrEmpty(FrameworkLocationHelper.programFiles64) && directory.StartsWith(FrameworkLocationHelper.programFiles64, StringComparison.OrdinalIgnoreCase)))
+                            if ((windowsFolder.Length > 0 && directory.StartsWith(windowsFolder, StringComparison.OrdinalIgnoreCase)) ||
+                                (!string.IsNullOrEmpty(FrameworkLocationHelper.programFiles32) && directory.StartsWith(FrameworkLocationHelper.programFiles32.AsSpan(), StringComparison.OrdinalIgnoreCase)) ||
+                                (!string.IsNullOrEmpty(FrameworkLocationHelper.programFiles64) && directory.StartsWith(FrameworkLocationHelper.programFiles64.AsSpan(), StringComparison.OrdinalIgnoreCase)))
                             {
                                 _loadAsReadOnly = true;
                             }
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 40cf6aee0ed..340c2dcf3f8 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -6,7 +6,6 @@
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Diagnostics;
-using System.IO;
 using System.Linq;
 using System.Text;
 using System.Threading;
@@ -18,6 +17,12 @@
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Utilities;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
@@ -503,8 +508,11 @@ internal string ToDot(
             {
                 var nodeId = GetNodeId(node);
 
+#if FEATURE_MSIOREDIST
                 var nodeName = Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath);
-
+#else
+                var nodeName = Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath.AsSpan());
+#endif
                 var globalPropertiesString = string.Join(
                     "<br/>",
                     node.ProjectInstance.GlobalProperties.OrderBy(kvp => kvp.Key)
@@ -512,7 +520,9 @@ internal string ToDot(
 
                 var targetListString = GetTargetListString(node);
 
-                sb.AppendLine($"\t{nodeId} [label=<{nodeName}<br/>({targetListString})<br/>{globalPropertiesString}>]");
+                sb.Append($"\t{nodeId} [label=<");
+                sb.Append(nodeName);
+                sb.AppendLine($"<br/>({targetListString})<br/>{globalPropertiesString}>]");
 
                 foreach (var reference in node.ProjectReferences)
                 {
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index c4408477cfa..918660bd0ed 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -40,6 +40,12 @@
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -2834,10 +2840,12 @@ DirectoryGetFiles getFiles
                 if (actualProjectFiles.Count == 1 && actualSolutionFiles.Count == 1)
                 {
                     // Grab the name of both project and solution without extensions
-                    string solutionName = Path.GetFileNameWithoutExtension(actualSolutionFiles[0]);
-                    string projectName = Path.GetFileNameWithoutExtension(actualProjectFiles[0]);
+                    var solutionName = Path.GetFileNameWithoutExtension(actualSolutionFiles[0].AsSpan());
+                    var projectName = Path.GetFileNameWithoutExtension(actualProjectFiles[0].AsSpan());
                     // Compare the names and error if they are not identical
-                    InitializationException.VerifyThrow(string.Equals(solutionName, projectName, StringComparison.OrdinalIgnoreCase), projectDirectory == null ? "AmbiguousProjectError" : "AmbiguousProjectDirectoryError", null, projectDirectory);
+                    InitializationException.VerifyThrow(
+                        MemoryExtensions.Equals(solutionName, projectName, StringComparison.OrdinalIgnoreCase),
+                        projectDirectory == null ? "AmbiguousProjectError" : "AmbiguousProjectDirectoryError", null, projectDirectory);
                     projectFile = actualSolutionFiles[0];
                 }
                 // If there is more than one solution file in the current directory we have no idea which one to use
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 22a9572fc82..4da5a82e462 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -13,6 +13,12 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -1672,9 +1678,7 @@ internal Result()
         internal static bool IsFileNameMatch(string path, string pattern)
         {
             // Use a span-based Path.GetFileName if it is available.
-#if FEATURE_MSIOREDIST
-            return IsMatch(Microsoft.IO.Path.GetFileName(path.AsSpan()), pattern);
-#elif NETSTANDARD2_0
+#if NETSTANDARD2_0
             return IsMatch(Path.GetFileName(path), pattern);
 #else
             return IsMatch(Path.GetFileName(path.AsSpan()), pattern);
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index afdbc7fefec..df9591df8f1 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -11,6 +11,12 @@
 
 using Microsoft.Build.Shared.FileSystem;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -781,8 +787,13 @@ DotNetFrameworkArchitecture architecture
 
             // If the current runtime starts with correct prefix, then this is the runtime we want to use.
             // However, only if we're requesting current architecture -- otherwise, the base path may be different, so we'll need to look it up.
-            string leaf = Path.GetFileName(currentRuntimePath);
+#if NETSTANDARD2_0
+            var leaf = Path.GetFileName(currentRuntimePath);
             if (leaf.StartsWith(prefix, StringComparison.Ordinal) && architecture == DotNetFrameworkArchitecture.Current)
+#else
+            var leaf = Path.GetFileName(currentRuntimePath.AsSpan());
+            if (leaf.StartsWith(prefix.AsSpan(), StringComparison.Ordinal) && architecture == DotNetFrameworkArchitecture.Current)
+#endif
             {
                 return currentRuntimePath;
             }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index e7766038d11..61ba8c8e8d5 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -16,6 +16,12 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -482,7 +488,11 @@ private string ComputePathToTool()
             // look for it in the path
             if (pathToTool != null)
             {
+#if NETSTANDARD2_0
                 bool isOnlyFileName = Path.GetFileName(pathToTool).Length == pathToTool.Length;
+#else
+                bool isOnlyFileName = Path.GetFileName(pathToTool.AsSpan()).Length == pathToTool.AsSpan().Length;
+#endif
                 if (!isOnlyFileName)
                 {
                     bool isExistingFile = FileSystems.Default.FileExists(pathToTool);
