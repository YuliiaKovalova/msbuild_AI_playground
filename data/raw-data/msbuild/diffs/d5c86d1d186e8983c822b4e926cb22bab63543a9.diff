diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 8408c19de17..b2ec4628283 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -26,6 +26,8 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     internal sealed class ReferenceTable
     {
+        private Dictionary<AssemblyNameExtension, Reference> referencesToResolve = new();
+
         /// <summary>version 4.0</summary>
         private static readonly Version s_targetFrameworkVersion_40 = new Version("4.0");
 
@@ -407,6 +409,17 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen
                 {
                     reference.AddRemapping(pair.From, pair.To);
                 }
+
+                if ((referenceGoingToBeReplaced.IsResolved || referenceGoingToBeReplaced.IsUnresolvable) &&
+                    (!reference.IsUnresolvable && !reference.IsResolved))
+                {
+                    referencesToResolve.Add(assemblyName, reference);
+                }
+                else if ((reference.IsUnresolvable || reference.IsResolved) &&
+                    (!referenceGoingToBeReplaced.IsUnresolvable && !referenceGoingToBeReplaced.IsResolved))
+                {
+                    referencesToResolve.Remove(assemblyName);
+                }
             }
 
             if (reference.FullPath.Length > 0)
@@ -475,6 +488,7 @@ string assemblyFileName
                             null
                         )
                     );
+                    referencesToResolve.Remove(assemblyName);
                     reference.FullPath = String.Empty;
                 }
 
@@ -484,16 +498,19 @@ string assemblyFileName
                     (
                         new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
                     );
+                    referencesToResolve.Remove(reference);
                 }
             }
             catch (BadImageFormatException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (UnauthorizedAccessException e)
             {
                 // If this isn't a valid assembly, then record the exception and continue on
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
 
             // If couldn't resolve the assemly name then just use the simple name extracted from
@@ -584,6 +601,7 @@ ITaskItem referenceAssemblyName
 
             // Create the reference.
             var reference = new Reference(_isWinMDFile, _fileExists, _getRuntimeVersion);
+            referencesToResolve.Add(reference);
             reference.MakePrimaryAssemblyReference(referenceAssemblyName, wantSpecificVersion, executableExtension);
 
             // Escape simple names.
@@ -673,19 +691,23 @@ ITaskItem referenceAssemblyName
             {
                 // If this isn't a valid assembly, then record the exception and continue on
                 reference.AddError(new BadImageReferenceException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (FileNotFoundException e) // Why isn't this covered in NotExpectedException?
             {
                 reference.AddError(new BadImageReferenceException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (FileLoadException e)
             {
                 // Managed assembly was found but could not be loaded.
                 reference.AddError(new BadImageReferenceException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
                 reference.AddError(new BadImageReferenceException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
 
             // If there is still no assembly name then this is a case where the assembly metadata
@@ -1121,6 +1143,7 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
                       (
                           new DependencyResolutionException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("General.ExpectedFileMissing", reference.FullPath), null)
                       );
+                referencesToResolve.Remove(reference);
 
                 return;
             }
@@ -1161,6 +1184,7 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
 
                         var newEntry = new KeyValuePair<AssemblyNameExtension, Reference>(unifiedDependency.PostUnified, newReference);
                         newEntries.Add(newEntry);
+                        referencesToResolve.Add(newReference);
                     }
                     else
                     {
@@ -1177,6 +1201,11 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
                             existingReference.AddSourceItems(reference.GetSourceItems());
                             existingReference.AddDependee(reference);
 
+                            if (!existingReference.IsResolved && !existingReference.IsUnresolvable)
+                            {
+                                referencesToResolve.Add(existingReference);
+                            }
+
                             if (unifiedDependency.IsUnified)
                             {
                                 existingReference.AddPreUnificationVersion(reference.FullPath, unifiedDependency.PreUnified.Version, unifiedDependency.UnificationReason);
@@ -1195,23 +1224,28 @@ List<KeyValuePair<AssemblyNameExtension, Reference>> newEntries
             catch (FileNotFoundException e) // Why isn't this covered in NotExpectedException?
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (FileLoadException e)
             {
                 // Managed assembly was found but could not be loaded.
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (BadImageFormatException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (System.Runtime.InteropServices.COMException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
         }
 
@@ -1332,6 +1366,7 @@ out userRequestedSpecificFile
             catch (BadImageFormatException e)
             {
                 reference.AddError(new DependencyResolutionException(e.Message, e));
+                referencesToResolve.Remove(reference);
             }
 
             // Update the list of assemblies considered and rejected.
@@ -1341,6 +1376,7 @@ out userRequestedSpecificFile
             if (resolvedPath != null)
             {
                 reference.FullPath = FileUtilities.NormalizePath(resolvedPath);
+                referencesToResolve.Remove(reference);
                 reference.ResolvedSearchPath = resolvedSearchPath;
                 reference.UserRequestedSpecificFile = userRequestedSpecificFile;
             }
@@ -1356,6 +1392,7 @@ out userRequestedSpecificFile
                             null
                         )
                     );
+                    referencesToResolve.Remove(reference);
                 }
             }
         }
@@ -1640,6 +1677,11 @@ List<Exception> exceptions
         /// </summary>
         private void ComputeClosure()
         {
+            while (referencesToResolve.Count > 0)
+            {
+                Reference r = referencesToResolve.First();
+                ResolveReference();
+            }
             bool moreResolvable;
             int moreResolvableIterations = 0;
             const int maxIterations = 100000; // Wait for a ridiculously large number of iterations before bailing out.
@@ -1767,6 +1809,7 @@ private bool FindAssociatedFiles()
                     {
                         // If the directory path is too long then record the error and move on.
                         reference.AddError(new DependencyResolutionException(e.Message, e));
+                        referencesToResolve.Remove(reference);
                     }
                 }
             }
