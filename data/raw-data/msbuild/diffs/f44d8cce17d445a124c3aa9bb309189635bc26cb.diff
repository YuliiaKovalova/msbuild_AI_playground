diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
new file mode 100644
index 00000000000..74e9b5c055a
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -0,0 +1,44 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{ 
+
+    public class FancyLoggerMessageNode
+    {
+        public string Message;
+        public FancyLoggerBufferLine? Line;
+
+        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
+        {
+            // TODO: Replace
+            if (args.Message == null)
+            {
+                Message = string.Empty;
+            }
+            else if (args.Message.Length > Console.WindowWidth - 1)
+            {
+                Message = args.Message.Substring(0, Console.WindowWidth - 1);
+            }
+            else
+            {
+                Message = args.Message;
+            }
+        }
+
+        public void Log()
+        {
+            if (Line == null) return;
+            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Italic(Message)}");
+        }
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
similarity index 75%
rename from src/Build/Logging/FancyLogger/FancyLoggerNode.cs
rename to src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 40c01857247..a97e265960a 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -117,60 +117,4 @@ public void AddError(BuildErrorEventArgs args)
             AdditionalDetails.Add(new FancyLoggerMessageNode(args));
         }
     }
-
-    public class FancyLoggerTargetNode
-    {
-        public int Id;
-        public string TargetName;
-        public FancyLoggerTaskNode? CurrentTaskNode;
-        public FancyLoggerTargetNode(TargetStartedEventArgs args)
-        {
-            Id = args.BuildEventContext!.TargetId;
-            TargetName = args.TargetName;
-        }
-        public void AddTask(TaskStartedEventArgs args)
-        {
-            CurrentTaskNode = new FancyLoggerTaskNode(args);
-        }
-    }
-
-    public class FancyLoggerTaskNode
-    {
-        public int Id;
-        public string TaskName;
-        public FancyLoggerTaskNode(TaskStartedEventArgs args)
-        {
-            Id = args.BuildEventContext!.TaskId;
-            TaskName = args.TaskName;
-        }
-    }
-
-    public class FancyLoggerMessageNode
-    {
-        public string Message;
-        public FancyLoggerBufferLine? Line;
-
-        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
-        {
-            // TODO: Replace
-            if (args.Message == null)
-            {
-                Message = string.Empty;
-            }
-            else if (args.Message.Length > Console.WindowWidth - 1)
-            {
-                Message = args.Message.Substring(0, Console.WindowWidth - 1);
-            }
-            else
-            {
-                Message = args.Message;
-            }
-        }
-
-        public void Log()
-        {
-            if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Italic(Message)}");
-        }
-    }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
new file mode 100644
index 00000000000..3859354d925
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
@@ -0,0 +1,31 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{ 
+
+    public class FancyLoggerTargetNode
+    {
+        public int Id;
+        public string TargetName;
+        public FancyLoggerTaskNode? CurrentTaskNode;
+        public FancyLoggerTargetNode(TargetStartedEventArgs args)
+        {
+            Id = args.BuildEventContext!.TargetId;
+            TargetName = args.TargetName;
+        }
+        public void AddTask(TaskStartedEventArgs args)
+        {
+            CurrentTaskNode = new FancyLoggerTaskNode(args);
+        }
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs
new file mode 100644
index 00000000000..a06223c415f
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerTaskNode.cs
@@ -0,0 +1,26 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{ 
+
+    public class FancyLoggerTaskNode
+    {
+        public int Id;
+        public string TaskName;
+        public FancyLoggerTaskNode(TaskStartedEventArgs args)
+        {
+            Id = args.BuildEventContext!.TaskId;
+            TaskName = args.TaskName;
+        }
+    }
+}
