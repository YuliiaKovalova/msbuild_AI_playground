diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Linux.verified.txt
index 04e77983a86..7e88eaa0b95 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Linux.verified.txt
@@ -4,7 +4,7 @@
 [?25l[1F
 [?25h
 Build summary:
-  project
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.OSX.verified.txt
index ee2f20f19a0..42a61e2fbbb 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.OSX.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.OSX.verified.txt
@@ -4,7 +4,7 @@
 [?25l[1F
 [?25h
 Build summary:
-  project
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Windows.verified.txt
index 04e77983a86..7e88eaa0b95 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintDetailedBuildSummary_FailedWithErrorAndWarning.Windows.verified.txt
@@ -4,7 +4,7 @@
 [?25l[1F
 [?25h
 Build summary:
-  project
+  project [31;1mfailed with 1 error(s) and 1 warning(s)[m (0.2s)
     directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: Warning!
     directory/[1mfile[m(1,2,3,4): [31;1merror[m [31;1mAA0000[m: Error!
 
diff --git a/src/MSBuild/TerminalLogger/Project.cs b/src/MSBuild/TerminalLogger/Project.cs
index 91b8091edfb..e32d3686dc7 100644
--- a/src/MSBuild/TerminalLogger/Project.cs
+++ b/src/MSBuild/TerminalLogger/Project.cs
@@ -13,6 +13,8 @@ namespace Microsoft.Build.Logging.TerminalLogger;
 /// </summary>
 internal sealed class Project
 {
+    private List<BuildMessage>? _buildMessages;
+
     /// <summary>
     /// Initialized a new <see cref="Project"/> with the given <paramref name="targetFramework"/>.
     /// </summary>
@@ -60,18 +62,47 @@ public Project(string projectFile, string? targetFramework, StopwatchAbstraction
     /// </summary>
     public bool IsCachePluginProject { get; set; }
 
+    /// <summary>
+    /// True if project built successfully; otherwise false.
+    /// </summary>
+    public bool Succeeded { get; set; }
+
+    /// <summary>
+    /// The number of errors raised during the build of the project.
+    /// </summary>
+    public int ErrorCount { get; private set; }
+
+    /// <summary>
+    /// The number of warnings raised during the build of the project.
+    /// </summary>
+    public int WarningCount { get; private set; }
+
+    /// <summary>
+    /// True when the project has error or warning build messages; otherwise false.
+    /// </summary>
+    public bool HasErrorsOrWarnings => ErrorCount > 0 || WarningCount > 0;
+
     /// <summary>
     /// A lazily initialized list of build messages/warnings/errors raised during the build.
     /// </summary>
-    public List<BuildMessage>? BuildMessages { get; private set; }
+    public IReadOnlyList<BuildMessage>? BuildMessages => _buildMessages;
 
     /// <summary>
     /// Adds a build message of the given severity to <see cref="BuildMessages"/>.
     /// </summary>
     public void AddBuildMessage(MessageSeverity severity, string message)
     {
-        BuildMessages ??= new List<BuildMessage>();
-        BuildMessages.Add(new BuildMessage(severity, message));
+        _buildMessages ??= new List<BuildMessage>();
+        _buildMessages.Add(new BuildMessage(severity, message));
+
+        if (severity == MessageSeverity.Error)
+        {
+            ErrorCount++;
+        }
+        else if (severity == MessageSeverity.Warning)
+        {
+            WarningCount++;
+        }
     }
 
     /// <summary>
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 0db5e6246c0..d4dc4346cf9 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -416,7 +416,7 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
             if (Verbosity > LoggerVerbosity.Quiet)
             {
                 string duration = (e.Timestamp - _buildStartTime).TotalSeconds.ToString("F1");
-                string buildResult = RenderBuildResult(e.Succeeded, _buildErrorsCount, _buildWarningsCount);
+                string buildResult = GetBuildResultString(e.Succeeded, _buildErrorsCount, _buildWarningsCount);
 
                 Terminal.WriteLine("");
                 if (_testRunSummaries.Any())
@@ -484,19 +484,21 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
 
     private void RenderBuildSummary()
     {
-        if (!_projects.Any(p => p.Value.GetBuildErrorAndWarningMessages().Any()))
+        if (_buildErrorsCount == 0 && _buildWarningsCount == 0)
         {
-            // No errors to display.
+            // No errors/warnings to display.
             return;
         }
 
         Terminal.WriteLine(ResourceUtilities.GetResourceString("BuildSummary"));
 
-        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorAndWarningMessages().Any()))
+        foreach (Project project in _projects.Values.Where(p => p.HasErrorsOrWarnings))
         {
-            string projectFileName = Path.GetFileNameWithoutExtension(project.File);
-            string? tfm = project.TargetFramework;
-            Terminal.WriteLine($"{Indentation}{projectFileName}{(tfm is null ? string.Empty : " ")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}");
+            string duration = project.Stopwatch.ElapsedSeconds.ToString("F1");
+            string buildResult = GetBuildResultString(project.Succeeded, project.ErrorCount, project.WarningCount);
+            string projectHeader = GetProjectFinishedHeader(project, buildResult, duration);
+
+            Terminal.WriteLine(projectHeader);
 
             foreach (BuildMessage buildMessage in project.GetBuildErrorAndWarningMessages())
             {
@@ -573,6 +575,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
         if (_projects.TryGetValue(c, out Project? project))
         {
+            project.Succeeded = e.Succeeded;
+            project.Stopwatch.Stop();
             lock (_lock)
             {
                 Terminal.BeginUpdate();
@@ -583,26 +587,16 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                     string duration = project.Stopwatch.ElapsedSeconds.ToString("F1");
                     ReadOnlyMemory<char>? outputPath = project.OutputPath;
 
-                    string projectFile = e.ProjectFile is not null ?
-                        Path.GetFileNameWithoutExtension(e.ProjectFile) :
-                        string.Empty;
-
                     // Build result. One of 'failed', 'succeeded with warnings', or 'succeeded' depending on the build result and diagnostic messages
                     // reported during build.
-                    int countErrors = project.BuildMessages?.Count(m => m.Severity == MessageSeverity.Error) ?? 0;
-                    int countWarnings = project.BuildMessages?.Count(m => m.Severity == MessageSeverity.Warning) ?? 0;
-
-                    string buildResult = RenderBuildResult(e.Succeeded, countErrors, countWarnings);
-
-                    bool haveErrors = countErrors > 0;
-                    bool haveWarnings = countWarnings > 0;
+                    string buildResult = GetBuildResultString(project.Succeeded, project.ErrorCount, project.WarningCount);
 
                     // Check if we're done restoring.
                     if (c == _restoreContext)
                     {
                         if (e.Succeeded)
                         {
-                            if (haveErrors || haveWarnings)
+                            if (project.HasErrorsOrWarnings)
                             {
                                 Terminal.WriteLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("RestoreCompleteWithMessage",
                                     buildResult,
@@ -629,46 +623,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                     else if (project.OutputPath is not null || project.BuildMessages is not null || project.IsTestProject)
                     {
                         // Show project build complete and its output
-                        if (project.IsTestProject)
-                        {
-                            if (string.IsNullOrEmpty(project.TargetFramework))
-                            {
-                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("TestProjectFinished_NoTF",
-                                    Indentation,
-                                    projectFile,
-                                    buildResult,
-                                    duration));
-                            }
-                            else
-                            {
-                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("TestProjectFinished_WithTF",
-                                    Indentation,
-                                    projectFile,
-                                    AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
-                                    buildResult,
-                                    duration));
-                            }
-                        }
-                        else
-                        {
-                            if (string.IsNullOrEmpty(project.TargetFramework))
-                            {
-                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_NoTF",
-                                    Indentation,
-                                    projectFile,
-                                    buildResult,
-                                    duration));
-                            }
-                            else
-                            {
-                                Terminal.Write(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ProjectFinished_WithTF",
-                                    Indentation,
-                                    projectFile,
-                                    AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
-                                    buildResult,
-                                    duration));
-                            }
-                        }
+                        string projectFinishedHeader = GetProjectFinishedHeader(project, buildResult, duration);
+                        Terminal.Write(projectFinishedHeader);
 
                         // Print the output path as a link if we have it.
                         if (outputPath is not null)
@@ -723,8 +679,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         }
                     }
 
-                    _buildErrorsCount += countErrors;
-                    _buildWarningsCount += countWarnings;
+                    _buildErrorsCount += project.ErrorCount;
+                    _buildWarningsCount += project.WarningCount;
 
                     DisplayNodes();
                 }
@@ -736,6 +692,35 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         }
     }
 
+    private static string GetProjectFinishedHeader(Project project, string buildResult, string duration)
+    {
+        string projectFile = project.File is not null ?
+            Path.GetFileNameWithoutExtension(project.File) :
+            string.Empty;
+
+        if (string.IsNullOrEmpty(project.TargetFramework))
+        {
+            string resourceName = project.IsTestProject ? "TestProjectFinished_NoTF" : "ProjectFinished_NoTF";
+
+            return ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(resourceName,
+                Indentation,
+                projectFile,
+                buildResult,
+                duration);
+        }
+        else
+        {
+            string resourceName = project.IsTestProject ? "TestProjectFinished_WithTF" : "ProjectFinished_WithTF";
+
+            return ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(resourceName,
+                Indentation,
+                projectFile,
+                AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),
+                buildResult,
+                duration);
+        }
+    }
+
     /// <summary>
     /// The <see cref="IEventSource.TargetStarted"/> callback.
     /// </summary>
@@ -1089,12 +1074,12 @@ private void EraseNodes()
     #region Helpers
 
     /// <summary>
-    /// Print a build result summary to the output.
+    /// Construct a build result summary string.
     /// </summary>
     /// <param name="succeeded">True if the build completed with success.</param>
     /// <param name="hasError">True if the build has logged at least one error.</param>
     /// <param name="hasWarning">True if the build has logged at least one warning.</param>
-    private string RenderBuildResult(bool succeeded, int countErrors, int countWarnings)
+    private static string GetBuildResultString(bool succeeded, int countErrors, int countWarnings)
     {
         if (!succeeded)
         {
