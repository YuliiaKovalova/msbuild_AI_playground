diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index a8dd9de497d..91bbc2269b3 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -39,14 +39,14 @@ public void ResolvesViaPlatformLookupTable()
         }
 
         [Fact]
-        public void ResolvesViaChildsPlatformLookupTable()
+        public void ResolvesViaProjectReferencesPlatformLookupTable()
         {
-            // A child's PlatformLookupTable takes priority over the current project's table.
+            // A ProjectReference's PlatformLookupTable takes priority over the current project's table.
             // This allows overrides on a per-ProjectItem basis.
             TaskItem projectReference = new TaskItem("foo.bar");
             projectReference.SetMetadata("Platforms", "x64;x86;AnyCPU");
 
-            // childproj will be assigned x86 because its table takes priority
+            // ProjectReference will be assigned x86 because its table takes priority
             projectReference.SetMetadata("PlatformLookupTable", "win32=x86");
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index cc3abfd7393..1d5019eaaa5 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -55,9 +55,9 @@ public override bool Execute()
             {
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
 
-                string childPlatformOptions = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
+                string projectReferenceOptions = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
 
-                if (string.IsNullOrEmpty(childPlatformOptions))
+                if (string.IsNullOrEmpty(projectReferenceOptions))
                 {
                     Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", AssignedProjectsWithPlatform[i].ItemSpec);
                     continue;
@@ -65,48 +65,48 @@ public override bool Execute()
 
                 // Pull platformlookuptable metadata from the referenced project. This allows custom
                 // translations on a per-ProjectReference basis.
-                Dictionary<string, string> childPlatformLookupTable = ExtractLookupTable(AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"));
+                Dictionary<string, string> projectReferenceLookupTable = ExtractLookupTable(AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"));
 
-                if (childPlatformLookupTable != null)
+                if (projectReferenceLookupTable != null)
                 {
-                    Log.LogMessage(MessageImportance.Low, $"Referenced Project's Translation Table: {string.Join(";", childPlatformLookupTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
+                    Log.LogMessage(MessageImportance.Low, $"Referenced Project's Translation Table: {string.Join(";", projectReferenceLookupTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
                 }
 
-                HashSet<string> childPlatforms = new HashSet<string>();
-                foreach (string s in childPlatformOptions.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+                HashSet<string> projectReferencePlatforms = new HashSet<string>();
+                foreach (string s in projectReferenceOptions.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
                 {
-                    childPlatforms.Add(s);
+                    projectReferencePlatforms.Add(s);
                 }
 
-                string buildChildProjectAs = string.Empty;
+                string buildProjectReferenceAs = string.Empty;
 
                 // Prefer matching platforms
-                if (childPlatforms.Contains(CurrentProjectPlatform))
+                if (projectReferencePlatforms.Contains(CurrentProjectPlatform))
                 {
-                    buildChildProjectAs = CurrentProjectPlatform;
+                    buildProjectReferenceAs = CurrentProjectPlatform;
                     Log.LogMessage(MessageImportance.Low, $"ProjectReference and current project have the same platform.");
                 }
                 // Prioritize PlatformLookupTable **metadata** attached to the ProjectReference item
                 // before the current project's table. We do this to allow per-ProjectReference fine tuning.
-                else if (childPlatformLookupTable != null &&
-                        childPlatformLookupTable.ContainsKey(CurrentProjectPlatform) &&
-                        childPlatforms.Contains(childPlatformLookupTable[CurrentProjectPlatform]))
+                else if (projectReferenceLookupTable != null &&
+                        projectReferenceLookupTable.ContainsKey(CurrentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(projectReferenceLookupTable[CurrentProjectPlatform]))
                 {
-                    buildChildProjectAs = childPlatformLookupTable[CurrentProjectPlatform];
-                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the referenced project's translation table.");
+                    buildProjectReferenceAs = projectReferenceLookupTable[CurrentProjectPlatform];
+                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildProjectReferenceAs}' in the referenced project's translation table.");
                 }
                 // Current project's translation table follows
                 else if (translationTable != null &&
                         translationTable.ContainsKey(CurrentProjectPlatform) &&
-                        childPlatforms.Contains(translationTable[CurrentProjectPlatform]))
+                        projectReferencePlatforms.Contains(translationTable[CurrentProjectPlatform]))
                 {
-                    buildChildProjectAs = translationTable[CurrentProjectPlatform];
-                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the current project's translation table.");
+                    buildProjectReferenceAs = translationTable[CurrentProjectPlatform];
+                    Log.LogMessage(MessageImportance.Low, $"Found '{CurrentProjectPlatform}={buildProjectReferenceAs}' in the current project's translation table.");
                 }
                 // AnyCPU if possible
-                else if (childPlatforms.Contains("AnyCPU"))
+                else if (projectReferencePlatforms.Contains("AnyCPU"))
                 {
-                    buildChildProjectAs = "AnyCPU";
+                    buildProjectReferenceAs = "AnyCPU";
                     Log.LogMessage(MessageImportance.Low, $"Defaulting to AnyCPU.");
                 }
                 else
@@ -116,8 +116,8 @@ public override bool Execute()
                     Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoCompatiblePlatformFound", AssignedProjectsWithPlatform[i].ItemSpec);
                 }
 
-                AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildChildProjectAs);
-                Log.LogMessage(MessageImportance.Low, $"Project '{AssignedProjectsWithPlatform[i].ItemSpec}' will build with Platform: '{buildChildProjectAs}'");
+                AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
+                Log.LogMessage(MessageImportance.Low, $"Project '{AssignedProjectsWithPlatform[i].ItemSpec}' will build with Platform: '{buildProjectReferenceAs}'");
             }
 
             return !Log.HasLoggedErrors;
