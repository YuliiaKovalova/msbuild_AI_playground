diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
index 2e28b9f96c5..7041410820d 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
@@ -6,6 +6,10 @@ MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubun
 
 `build.cmd -msbuildEngine dotnet`
 
+## Tests
+
+Follow [Running Unit Tests](Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md#running-unit-tests) section of the .NET Framework guide
+
 # Unix
 
 ## The easy way
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
index b95f657d757..f030621c1a1 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
@@ -25,6 +25,8 @@ To run the unit tests from Visual Studio:
 
 To build MSBuild and run all unit tests from the command line, use `.\build.cmd -test`.
 
+Some tests are creating symlinks to test associated functionality - in order for them to succeed you'll need to enable [Development Mode](https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development) on your machine or run those tests elevated.
+
 To mimic our CI job use `eng\CIBuild.cmd`. Be aware that this command may delete your local NuGet cache.
 
 The CI does two builds. In the second build, it uses the binaries from the first build to build the repository again.
diff --git a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
index d49e8ea0b31..4e6973c3ed4 100644
--- a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
+++ b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
@@ -130,7 +130,7 @@ private void AddFileCore(string filePath)
                 return;
             }
 
-            if (!File.Exists(filePath))
+            if (!NativeMethodsShared.ExistAndHasContent(filePath))
             {
                 _processedFiles.Add(filePath);
                 return;
@@ -144,12 +144,9 @@ private void AddFileCore(string filePath)
                 return;
             }
 
-            using FileStream content = NativeMethodsShared.OpenReadFileThroughSymlinks(filePath);
-            if (content != null)
-            {
-                using Stream entryStream = OpenArchiveEntry(filePath);
-                content.CopyTo(entryStream);
-            }
+            using Stream entryStream = OpenArchiveEntry(filePath);
+            using FileStream content = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);
+            content.CopyTo(entryStream);
         }
 
         /// <remarks>
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b92612196a2..a882115a631 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1042,12 +1042,17 @@ internal static MemoryStatus GetMemoryStatus()
         return null;
     }
 
-    internal static bool IsSymLink(string fullPath)
+    internal static bool ExistAndHasContent(string path)
     {
-#if NET
-        var fileInfo = new FileInfo(fullPath);
+        var fileInfo = new FileInfo(path);
+
+        return fileInfo.Exists && (fileInfo.Length > 0 || IsSymLink(fileInfo));
+    }
 
-        return fileInfo.Exists && fileInfo.Length == 0 && !string.IsNullOrEmpty(fileInfo.LinkTarget);
+    internal static bool IsSymLink(FileInfo fileInfo)
+    {
+#if NET
+        return fileInfo.Exists && !string.IsNullOrEmpty(fileInfo.LinkTarget);
 #else
         if (!IsWindows)
         {
@@ -1056,54 +1061,15 @@ internal static bool IsSymLink(string fullPath)
 
         WIN32_FILE_ATTRIBUTE_DATA data = new WIN32_FILE_ATTRIBUTE_DATA();
 
-        return NativeMethods.GetFileAttributesEx(fullPath, 0, ref data) &&
+        return NativeMethods.GetFileAttributesEx(fileInfo.FullName, 0, ref data) &&
                (data.fileAttributes & NativeMethods.FILE_ATTRIBUTE_DIRECTORY) == 0 &&
                (data.fileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) == FILE_ATTRIBUTE_REPARSE_POINT;
 #endif
     }
 
-    internal static void ReadFileThroughSymlinks(string filePath, Action<FileStream> contentConsumer)
+    internal static bool IsSymLink(string path)
     {
-        filePath = Path.GetFullPath(filePath);
-
-        if (IsSymLink(filePath))
-        {
-            using SafeFileHandle handle = OpenFileThroughSymlinks(filePath);
-            if (!handle.IsInvalid)
-            {
-                using FileStream content = new FileStream(handle, FileAccess.Read);
-                contentConsumer(content);
-            }
-        }
-        else
-        {
-            using FileStream content = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);
-            contentConsumer(content);
-        }
-    }
-
-    /// <summary>
-    /// Opens file for reading, if the file is symlink file - it reads the target file content.
-    /// </summary>
-    /// <param name="fullPath"></param>
-    /// <returns></returns>
-    internal static FileStream OpenReadFileThroughSymlinks(string fullPath)
-    {
-        if (IsSymLink(fullPath))
-        {
-            SafeFileHandle handle = OpenFileThroughSymlinks(fullPath);
-            if (handle.IsInvalid)
-            {
-                handle.Dispose();
-                return null;
-            }
-
-            return new FileStream(handle, FileAccess.Read);
-        }
-        else
-        {
-            return new FileStream(fullPath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);
-        }
+        return IsSymLink(new FileInfo(path));
     }
 
     internal static bool MakeSymbolicLink(string newFileName, string exitingFileName, ref string errorMessage)
