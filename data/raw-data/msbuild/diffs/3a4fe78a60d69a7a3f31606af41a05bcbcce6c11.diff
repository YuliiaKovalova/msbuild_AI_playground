diff --git a/.editorconfig b/.editorconfig
index 72c7d4a2b87..b8e856dc62d 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -1,25 +1,199 @@
-# EditorConfig is awesome:
-http://EditorConfig.org
+# editorconfig.org
 
 # top-most EditorConfig file
 root = true
 
 # Default settings:
+# A newline ending every file
 # Use 4 spaces as indentation
 [*]
+insert_final_newline = true
 indent_style = space
 indent_size = 4
-insert_final_newline = true
 trim_trailing_whitespace = true
 
+[project.json]
+indent_size = 2
+
+# C# files
+[*.cs]
+# New line preferences
+csharp_new_line_before_open_brace = all
+csharp_new_line_before_else = true
+csharp_new_line_before_catch = true
+csharp_new_line_before_finally = true
+csharp_new_line_before_members_in_object_initializers = true
+csharp_new_line_before_members_in_anonymous_types = true
+csharp_new_line_between_query_expression_clauses = true
+
+# Indentation preferences
+csharp_indent_block_contents = true
+csharp_indent_braces = false
+csharp_indent_case_contents = true
+csharp_indent_case_contents_when_block = true
+csharp_indent_switch_labels = true
+csharp_indent_labels = one_less_than_current
+
+# Modifier preferences
+csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
+
+# avoid this. unless absolutely necessary
+dotnet_style_qualification_for_field = false:suggestion
+dotnet_style_qualification_for_property = false:suggestion
+dotnet_style_qualification_for_method = false:suggestion
+dotnet_style_qualification_for_event = false:suggestion
+
+# Types: use keywords instead of BCL types, and permit var only when the type is clear
+csharp_style_var_for_built_in_types = false:suggestion
+csharp_style_var_when_type_is_apparent = false:none
+csharp_style_var_elsewhere = false:suggestion
+dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
+dotnet_style_predefined_type_for_member_access = true:suggestion
+
+# name all constant fields using PascalCase
+dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
+dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
+dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
+dotnet_naming_symbols.constant_fields.applicable_kinds   = field
+dotnet_naming_symbols.constant_fields.required_modifiers = const
+dotnet_naming_style.pascal_case_style.capitalization = pascal_case
+
+# static fields should have s_ prefix
+dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
+dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
+dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style
+dotnet_naming_symbols.static_fields.applicable_kinds   = field
+dotnet_naming_symbols.static_fields.required_modifiers = static
+dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
+dotnet_naming_style.static_prefix_style.required_prefix = s_
+dotnet_naming_style.static_prefix_style.capitalization = camel_case
+
+# internal and private fields should be _camelCase
+dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
+dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
+dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
+dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
+dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
+dotnet_naming_style.camel_case_underscore_style.required_prefix = _
+dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
+
+# Code style defaults
+csharp_using_directive_placement = outside_namespace:suggestion
+dotnet_sort_system_directives_first = true
+csharp_prefer_braces = true:silent
+csharp_preserve_single_line_blocks = true:none
+csharp_preserve_single_line_statements = false:none
+csharp_prefer_static_local_function = true:suggestion
+csharp_prefer_simple_using_statement = false:none
+csharp_style_prefer_switch_expression = true:suggestion
+
+# Code quality
+dotnet_style_readonly_field = true:suggestion
+dotnet_code_quality_unused_parameters = non_public:suggestion
+
+# Expression-level preferences
+dotnet_style_object_initializer = true:suggestion
+dotnet_style_collection_initializer = true:suggestion
+dotnet_style_explicit_tuple_names = true:suggestion
+dotnet_style_coalesce_expression = true:suggestion
+dotnet_style_null_propagation = true:suggestion
+dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
+dotnet_style_prefer_inferred_tuple_names = true:suggestion
+dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
+dotnet_style_prefer_auto_properties = true:suggestion
+dotnet_style_prefer_conditional_expression_over_assignment = true:silent
+dotnet_style_prefer_conditional_expression_over_return = true:silent
+csharp_prefer_simple_default_expression = true:suggestion
+
+# Expression-bodied members
+csharp_style_expression_bodied_methods = true:silent
+csharp_style_expression_bodied_constructors = true:silent
+csharp_style_expression_bodied_operators = true:silent
+csharp_style_expression_bodied_properties = true:silent
+csharp_style_expression_bodied_indexers = true:silent
+csharp_style_expression_bodied_accessors = true:silent
+csharp_style_expression_bodied_lambdas = true:silent
+csharp_style_expression_bodied_local_functions = true:silent
+
+# Pattern matching
+csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
+csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
+csharp_style_inlined_variable_declaration = true:suggestion
+
+# Null checking preferences
+csharp_style_throw_expression = true:suggestion
+csharp_style_conditional_delegate_call = true:suggestion
+
+# Other features
+csharp_style_prefer_index_operator = false:none
+csharp_style_prefer_range_operator = false:none
+csharp_style_pattern_local_over_anonymous_function = false:none
+
+# Space preferences
+csharp_space_after_cast = false
+csharp_space_after_colon_in_inheritance_clause = true
+csharp_space_after_comma = true
+csharp_space_after_dot = false
+csharp_space_after_keywords_in_control_flow_statements = true
+csharp_space_after_semicolon_in_for_statement = true
+csharp_space_around_binary_operators = before_and_after
+csharp_space_around_declaration_statements = do_not_ignore
+csharp_space_before_colon_in_inheritance_clause = true
+csharp_space_before_comma = false
+csharp_space_before_dot = false
+csharp_space_before_open_square_brackets = false
+csharp_space_before_semicolon_in_for_statement = false
+csharp_space_between_empty_square_brackets = false
+csharp_space_between_method_call_empty_parameter_list_parentheses = false
+csharp_space_between_method_call_name_and_opening_parenthesis = false
+csharp_space_between_method_call_parameter_list_parentheses = false
+csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
+csharp_space_between_method_declaration_name_and_open_parenthesis = false
+csharp_space_between_method_declaration_parameter_list_parentheses = false
+csharp_space_between_parentheses = false
+csharp_space_between_square_brackets = false
+
+# Analyzers
+dotnet_code_quality.ca1802.api_surface = private, internal
+dotnet_code_quality.ca2208.api_surface = public
+
+# License header
+file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\n
+
+# C++ Files
+[*.{cpp,h,in}]
+curly_bracket_next_line = true
+indent_brace_style = Allman
+
 # Xml project files
-[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
+[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
+indent_size = 2
+
+[*.{csproj,vbproj,proj,nativeproj,locproj}]
+charset = utf-8
+
+# Xml build files
+[*.builds]
+indent_size = 2
+
+# Xml files
+[*.{xml,stylecop,resx,ruleset}]
 indent_size = 2
 
 # Xml config files
-[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
+[*.{props,targets,config,nuspec}]
 indent_size = 2
 
+# YAML config files
+[*.{yml,yaml}]
+indent_size = 2
+
+# Shell scripts
+[*.sh]
+end_of_line = lf
+[*.{cmd, bat}]
+end_of_line = crlf
+
 [src/**/*.{cs,vb}]
 # IDE0005: Remove unnecessary usings/imports
 dotnet_diagnostic.IDE0005.severity = warning
diff --git a/Directory.Build.props b/Directory.Build.props
index 117512a6a29..35246a8e8ec 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -72,4 +72,11 @@
 
     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
   </PropertyGroup>
+  
+  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />
+
+  <PropertyGroup>
+    <EnableAnalyzers>true</EnableAnalyzers>
+  </PropertyGroup>
+  
 </Project>
diff --git a/eng/Analyzers.props b/eng/Analyzers.props
new file mode 100644
index 00000000000..2a523c21b2c
--- /dev/null
+++ b/eng/Analyzers.props
@@ -0,0 +1,7 @@
+<Project>
+  <PropertyGroup>
+    <CodeAnalysisRuleset>$(MSBuildThisFileDirectory)CodeAnalysis.ruleset</CodeAnalysisRuleset>
+    <!-- Disable analyzers in sourcebuild -->
+    <EnableAnalyzers Condition="'$(DotNetBuildFromSource)' == 'true'">false</EnableAnalyzers>
+  </PropertyGroup>
+</Project>
diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
new file mode 100644
index 00000000000..2078c42fe6c
--- /dev/null
+++ b/eng/CodeAnalysis.ruleset
@@ -0,0 +1,389 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<RuleSet Name="Microsoft.Analyzers.ManagedCodeAnalysis" Description="Microsoft.Analyzers.ManagedCodeAnalysis" ToolsVersion="16.0">
+  <Rules AnalyzerId="Microsoft.DotNet.CodeAnalysis" RuleNamespace="Microsoft.DotNet.CodeAnalysis.Analyzers"> 
+    <Rule Id="BCL0001" Action="Warning" />         <!-- Ensure minimum API surface is respected --> 
+    <Rule Id="BCL0010" Action="Warning" />         <!-- AppContext default value expected to be true --> 
+    <Rule Id="BCL0011" Action="Warning" />         <!-- AppContext default value defined in if statement with incorrect pattern --> 
+    <Rule Id="BCL0012" Action="Warning" />         <!-- AppContext default value defined in if statement at root of switch case --> 
+    <Rule Id="BCL0015" Action="None" />            <!-- Invalid P/Invoke call --> 
+    <Rule Id="BCL0020" Action="Warning" />         <!-- Invalid SR.Format call --> 
+  </Rules> 
+  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers"> 
+    <Rule Id="CA1000" Action="None" />             <!-- Do not declare static members on generic types --> 
+    <Rule Id="CA1001" Action="None" />             <!-- Types that own disposable fields should be disposable --> 
+    <Rule Id="CA1002" Action="None" />             <!-- Do not expose generic lists --> 
+    <Rule Id="CA1003" Action="None" />             <!-- Use generic event handler instances --> 
+    <Rule Id="CA1005" Action="None" />             <!-- Avoid excessive parameters on generic types --> 
+    <Rule Id="CA1008" Action="None" />             <!-- Enums should have zero value --> 
+    <Rule Id="CA1010" Action="None" />             <!-- Generic interface should also be implemented --> 
+    <Rule Id="CA1012" Action="None" />             <!-- Abstract types should not have constructors --> 
+    <Rule Id="CA1014" Action="None" />             <!-- Mark assemblies with CLSCompliant --> 
+    <Rule Id="CA1016" Action="None" />             <!-- Mark assemblies with assembly version --> 
+    <Rule Id="CA1017" Action="None" />             <!-- Mark assemblies with ComVisible --> 
+    <Rule Id="CA1018" Action="Warning" />          <!-- Mark attributes with AttributeUsageAttribute --> 
+    <Rule Id="CA1019" Action="None" />             <!-- Define accessors for attribute arguments --> 
+    <Rule Id="CA1024" Action="None" />             <!-- Use properties where appropriate --> 
+    <Rule Id="CA1027" Action="None" />             <!-- Mark enums with FlagsAttribute --> 
+    <Rule Id="CA1028" Action="None" />             <!-- Enum Storage should be Int32 --> 
+    <Rule Id="CA1030" Action="None" />             <!-- Use events where appropriate --> 
+    <Rule Id="CA1031" Action="None" />             <!-- Do not catch general exception types --> 
+    <Rule Id="CA1032" Action="None" />
+    <Rule Id="CA1033" Action="None" />             <!-- Interface methods should be callable by child types --> 
+    <Rule Id="CA1034" Action="None" />
+    <Rule Id="CA1036" Action="None" />             <!-- Override methods on comparable types --> 
+    <Rule Id="CA1040" Action="None" />             <!-- Avoid empty interfaces --> 
+    <Rule Id="CA1041" Action="None" />             <!-- Provide ObsoleteAttribute message --> 
+    <Rule Id="CA1043" Action="None" />             <!-- Use Integral Or String Argument For Indexers --> 
+    <Rule Id="CA1044" Action="None" />             <!-- Properties should not be write only --> 
+    <Rule Id="CA1046" Action="None" />             <!-- Do not overload equality operator on reference types --> 
+    <Rule Id="CA1047" Action="Warning" />          <!-- Do not declare protected member in sealed type --> 
+    <Rule Id="CA1050" Action="Info" />             <!-- Declare types in namespaces --> 
+    <Rule Id="CA1051" Action="None" />             <!-- Do not declare visible instance fields --> 
+    <Rule Id="CA1052" Action="None" />             <!-- Static holder types should be Static or NotInheritable --> 
+    <Rule Id="CA1054" Action="None" />             <!-- Uri parameters should not be strings --> 
+    <Rule Id="CA1055" Action="None" />             <!-- Uri return values should not be strings --> 
+    <Rule Id="CA1056" Action="None" />             <!-- Uri properties should not be strings --> 
+    <Rule Id="CA1058" Action="None" />             <!-- Types should not extend certain base types --> 
+    <Rule Id="CA1061" Action="None" />             <!-- Do not hide base class methods --> 
+    <Rule Id="CA1062" Action="None" />             <!-- Validate arguments of public methods --> 
+    <Rule Id="CA1063" Action="None" />             <!-- Implement IDisposable Correctly --> 
+    <Rule Id="CA1064" Action="None" />             <!-- Exceptions should be public --> 
+    <Rule Id="CA1065" Action="None" />             <!-- Do not raise exceptions in unexpected locations --> 
+    <Rule Id="CA1066" Action="None" />             <!-- Implement IEquatable when overriding Object.Equals --> 
+    <Rule Id="CA1067" Action="None" />             <!-- Override Object.Equals(object) when implementing IEquatable<T> --> 
+    <Rule Id="CA1068" Action="None" />             <!-- CancellationToken parameters must come last --> 
+    <Rule Id="CA1069" Action="None" />             <!-- Enums values should not be duplicated --> 
+    <Rule Id="CA1070" Action="Info" />             <!-- Do not declare event fields as virtual --> 
+    <Rule Id="CA1200" Action="Info" />             <!-- Avoid using cref tags with a prefix --> 
+    <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters --> 
+    <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo --> 
+    <Rule Id="CA1305" Action="None" />             <!-- Specify IFormatProvider --> 
+    <Rule Id="CA1307" Action="None" />             <!-- Specify StringComparison --> 
+    <Rule Id="CA1308" Action="None" />             <!-- Normalize strings to uppercase --> 
+    <Rule Id="CA1309" Action="None" />             <!-- Use ordinal stringcomparison --> 
+    <Rule Id="CA1401" Action="Warning" />          <!-- P/Invokes should not be visible --> 
+    <Rule Id="CA1417" Action="Warning" />          <!-- Do not use 'OutAttribute' on string parameters for P/Invokes --> 
+    <Rule Id="CA1502" Action="None" />             <!-- Avoid excessive complexity --> 
+    <Rule Id="CA1505" Action="None" />             <!-- Avoid unmaintainable code --> 
+    <Rule Id="CA1506" Action="None" />             <!-- Avoid excessive class coupling --> 
+    <Rule Id="CA1507" Action="Info" />             <!-- Use nameof to express symbol names --> 
+    <Rule Id="CA1508" Action="None" />             <!-- Avoid dead conditional code --> 
+    <Rule Id="CA1509" Action="None" />             <!-- Invalid entry in code metrics rule specification file --> 
+    <Rule Id="CA1700" Action="None" />             <!-- Do not name enum values 'Reserved' --> 
+    <Rule Id="CA1707" Action="None" />
+    <Rule Id="CA1710" Action="None" />             <!-- Identifiers should have correct suffix --> 
+    <Rule Id="CA1711" Action="None" />             <!-- Identifiers should not have incorrect suffix --> 
+    <Rule Id="CA1712" Action="None" />             <!-- Do not prefix enum values with type name --> 
+    <Rule Id="CA1714" Action="None" />
+    <Rule Id="CA1715" Action="None" />             <!-- Identifiers should have correct prefix --> 
+    <Rule Id="CA1716" Action="None" />             <!-- Identifiers should not match keywords --> 
+    <Rule Id="CA1717" Action="None" />
+    <Rule Id="CA1720" Action="None" />             <!-- Identifier contains type name --> 
+    <Rule Id="CA1721" Action="None" />             <!-- Property names should not match get methods --> 
+    <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
+    <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
+    <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
+    <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
+    <Rule Id="CA1806" Action="None" />
+    <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
+    <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
+    <Rule Id="CA1814" Action="None" />
+    <Rule Id="CA1815" Action="None" />
+    <Rule Id="CA1816" Action="None" />             <!-- Dispose methods should call SuppressFinalize --> 
+    <Rule Id="CA1819" Action="None" />
+    <Rule Id="CA1820" Action="None" />             <!-- Test for empty strings using string length --> 
+    <Rule Id="CA1821" Action="Warning" />          <!-- Remove empty Finalizers --> 
+    <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
+    <Rule Id="CA1823" Action="Info" />             <!-- Avoid unused private fields --> 
+    <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
+    <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. --> 
+    <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
+    <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
+    <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available --> 
+    <Rule Id="CA1830" Action="Warning" />          <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder. --> 
+    <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
+    <Rule Id="CA1835" Action="Info" />             <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
+    <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
+    <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
+    <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
+    <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
+    <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
+    <Rule Id="CA2007" Action="Info" />             <!-- Consider calling ConfigureAwait on the awaited task --> 
+    <Rule Id="CA2008" Action="Info" />             <!-- Do not create tasks without passing a TaskScheduler --> 
+    <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value --> 
+    <Rule Id="CA2011" Action="Warning" />          <!-- Avoid infinite recursion --> 
+    <Rule Id="CA2012" Action="Warning" />          <!-- Use ValueTasks correctly --> 
+    <Rule Id="CA2013" Action="Warning" />          <!-- Do not use ReferenceEquals with value types --> 
+    <Rule Id="CA2014" Action="Warning" />          <!-- Do not use stackalloc in loops. --> 
+    <Rule Id="CA2015" Action="Warning" />          <!-- Do not define finalizers for types derived from MemoryManager<T> --> 
+    <Rule Id="CA2016" Action="Info" />             <!-- Forward the 'CancellationToken' parameter to methods that take one --> 
+    <Rule Id="CA2100" Action="None" />             <!-- Review SQL queries for security vulnerabilities --> 
+    <Rule Id="CA2101" Action="None" />             <!-- Specify marshaling for P/Invoke string arguments --> 
+    <Rule Id="CA2109" Action="None" />             <!-- Review visible event handlers --> 
+    <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
+    <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
+    <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
+    <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly --> 
+    <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
+    <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
+    <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
+    <Rule Id="CA2216" Action="None" />             <!-- Disposable types should declare finalizer --> 
+    <Rule Id="CA2219" Action="None" />
+    <Rule Id="CA2224" Action="None" />             <!-- Override Equals on overloading operator equals --> 
+    <Rule Id="CA2225" Action="None" />             <!-- Operator overloads have named alternates --> 
+    <Rule Id="CA2226" Action="None" />             <!-- Operators should have symmetrical overloads --> 
+    <Rule Id="CA2227" Action="None" />             <!-- Collection properties should be read only --> 
+    <Rule Id="CA2231" Action="None" />             <!-- Overload operator equals on overriding value type Equals --> 
+    <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings --> 
+    <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields --> 
+    <Rule Id="CA2241" Action="Info" />             <!-- Provide correct arguments to formatting methods --> 
+    <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly --> 
+    <Rule Id="CA2243" Action="None" />             <!-- Attribute string literals should parse correctly --> 
+    <Rule Id="CA2244" Action="None" />             <!-- Do not duplicate indexed element initializations --> 
+    <Rule Id="CA2245" Action="Warning" />          <!-- Do not assign a property to itself. --> 
+    <Rule Id="CA2246" Action="None" />             <!-- Assigning symbol and its member in the same statement. --> 
+    <Rule Id="CA2247" Action="Warning" />          <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum. --> 
+    <Rule Id="CA2248" Action="Warning" />          <!-- Provide correct 'enum' argument to 'Enum.HasFlag' --> 
+    <Rule Id="CA2249" Action="Info" />             <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
+    <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter --> 
+    <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder --> 
+    <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize --> 
+    <Rule Id="CA2305" Action="None" />             <!-- Do not use insecure deserializer LosFormatter --> 
+    <Rule Id="CA2310" Action="None" />             <!-- Do not use insecure deserializer NetDataContractSerializer --> 
+    <Rule Id="CA2311" Action="None" />             <!-- Do not deserialize without first setting NetDataContractSerializer.Binder --> 
+    <Rule Id="CA2312" Action="None" />             <!-- Ensure NetDataContractSerializer.Binder is set before deserializing --> 
+    <Rule Id="CA2315" Action="None" />             <!-- Do not use insecure deserializer ObjectStateFormatter --> 
+    <Rule Id="CA2321" Action="None" />             <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver --> 
+    <Rule Id="CA2322" Action="None" />             <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing --> 
+    <Rule Id="CA2326" Action="None" />             <!-- Do not use TypeNameHandling values other than None --> 
+    <Rule Id="CA2350" Action="None" />             <!-- Do not use DataTable.ReadXml() with untrusted data --> 
+    <Rule Id="CA2351" Action="None" />             <!-- Do not use DataSet.ReadXml() with untrusted data --> 
+    <Rule Id="CA2352" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA2353" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type --> 
+    <Rule Id="CA2354" Action="None" />             <!-- Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA2355" Action="None" />             <!-- Unsafe DataSet or DataTable type found in deserializable object graph --> 
+    <Rule Id="CA2356" Action="None" />             <!-- Unsafe DataSet or DataTable type in web deserializable object graph --> 
+    <Rule Id="CA2361" Action="None" />             <!-- Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data --> 
+    <Rule Id="CA2362" Action="None" />             <!-- Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA3001" Action="None" />             <!-- Review code for SQL injection vulnerabilities --> 
+    <Rule Id="CA3002" Action="None" />             <!-- Review code for XSS vulnerabilities --> 
+    <Rule Id="CA3003" Action="None" />             <!-- Review code for file path injection vulnerabilities --> 
+    <Rule Id="CA3004" Action="None" />             <!-- Review code for information disclosure vulnerabilities --> 
+    <Rule Id="CA3005" Action="None" />             <!-- Review code for LDAP injection vulnerabilities --> 
+    <Rule Id="CA3006" Action="None" />             <!-- Review code for process command injection vulnerabilities --> 
+    <Rule Id="CA3007" Action="None" />             <!-- Review code for open redirect vulnerabilities --> 
+    <Rule Id="CA3008" Action="None" />             <!-- Review code for XPath injection vulnerabilities --> 
+    <Rule Id="CA3009" Action="None" />             <!-- Review code for XML injection vulnerabilities --> 
+    <Rule Id="CA3010" Action="None" />             <!-- Review code for XAML injection vulnerabilities --> 
+    <Rule Id="CA3011" Action="None" />             <!-- Review code for DLL injection vulnerabilities --> 
+    <Rule Id="CA3012" Action="None" />             <!-- Review code for regex injection vulnerabilities --> 
+    <Rule Id="CA3061" Action="Warning" />          <!-- Do Not Add Schema By URL --> 
+    <Rule Id="CA3075" Action="Warning" />          <!-- Insecure DTD processing in XML --> 
+    <Rule Id="CA3076" Action="Warning" />          <!-- Insecure XSLT script processing. --> 
+    <Rule Id="CA3077" Action="Warning" />          <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader --> 
+    <Rule Id="CA3147" Action="Warning" />          <!-- Mark Verb Handlers With Validate Antiforgery Token --> 
+    <Rule Id="CA5350" Action="Warning" />          <!-- Do Not Use Weak Cryptographic Algorithms --> 
+    <Rule Id="CA5351" Action="Warning" />          <!-- Do Not Use Broken Cryptographic Algorithms --> 
+    <Rule Id="CA5358" Action="None" />             <!-- Review cipher mode usage with cryptography experts --> 
+    <Rule Id="CA5359" Action="Warning" />          <!-- Do Not Disable Certificate Validation --> 
+    <Rule Id="CA5360" Action="Warning" />          <!-- Do Not Call Dangerous Methods In Deserialization --> 
+    <Rule Id="CA5361" Action="Warning" />          <!-- Do Not Disable SChannel Use of Strong Crypto --> 
+    <Rule Id="CA5362" Action="None" />             <!-- Potential reference cycle in deserialized object graph --> 
+    <Rule Id="CA5363" Action="Warning" />          <!-- Do Not Disable Request Validation --> 
+    <Rule Id="CA5364" Action="Warning" />          <!-- Do Not Use Deprecated Security Protocols --> 
+    <Rule Id="CA5365" Action="Warning" />          <!-- Do Not Disable HTTP Header Checking --> 
+    <Rule Id="CA5366" Action="None" />             <!-- Use XmlReader For DataSet Read Xml --> 
+    <Rule Id="CA5367" Action="None" />             <!-- Do Not Serialize Types With Pointer Fields --> 
+    <Rule Id="CA5368" Action="Warning" />          <!-- Set ViewStateUserKey For Classes Derived From Page --> 
+    <Rule Id="CA5369" Action="None" />             <!-- Use XmlReader For Deserialize --> 
+    <Rule Id="CA5370" Action="Warning" />          <!-- Use XmlReader For Validating Reader --> 
+    <Rule Id="CA5371" Action="None" />             <!-- Use XmlReader For Schema Read --> 
+    <Rule Id="CA5372" Action="None" />             <!-- Use XmlReader For XPathDocument --> 
+    <Rule Id="CA5373" Action="Warning" />          <!-- Do not use obsolete key derivation function --> 
+    <Rule Id="CA5374" Action="Warning" />          <!-- Do Not Use XslTransform --> 
+    <Rule Id="CA5375" Action="None" />             <!-- Do Not Use Account Shared Access Signature --> 
+    <Rule Id="CA5376" Action="Warning" />          <!-- Use SharedAccessProtocol HttpsOnly --> 
+    <Rule Id="CA5377" Action="Warning" />          <!-- Use Container Level Access Policy --> 
+    <Rule Id="CA5378" Action="Warning" />          <!-- Do not disable ServicePointManagerSecurityProtocols --> 
+    <Rule Id="CA5379" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function Algorithm --> 
+    <Rule Id="CA5380" Action="Warning" />          <!-- Do Not Add Certificates To Root Store --> 
+    <Rule Id="CA5381" Action="Warning" />          <!-- Ensure Certificates Are Not Added To Root Store --> 
+    <Rule Id="CA5382" Action="None" />             <!-- Use Secure Cookies In ASP.Net Core --> 
+    <Rule Id="CA5383" Action="None" />             <!-- Ensure Use Secure Cookies In ASP.Net Core --> 
+    <Rule Id="CA5384" Action="Warning" />          <!-- Do Not Use Digital Signature Algorithm (DSA) --> 
+    <Rule Id="CA5385" Action="Warning" />          <!-- Use RivestâShamirâAdleman (RSA) Algorithm With Sufficient Key Size --> 
+    <Rule Id="CA5386" Action="None" />             <!-- Avoid hardcoding SecurityProtocolType value --> 
+    <Rule Id="CA5387" Action="None" />             <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count --> 
+    <Rule Id="CA5388" Action="None" />             <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function --> 
+    <Rule Id="CA5389" Action="None" />             <!-- Do Not Add Archive Item's Path To The Target File System Path --> 
+    <Rule Id="CA5390" Action="None" />             <!-- Do not hard-code encryption key --> 
+    <Rule Id="CA5391" Action="None" />             <!-- Use antiforgery tokens in ASP.NET Core MVC controllers --> 
+    <Rule Id="CA5392" Action="None" />             <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes --> 
+    <Rule Id="CA5393" Action="None" />             <!-- Do not use unsafe DllImportSearchPath value --> 
+    <Rule Id="CA5394" Action="None" />             <!-- Do not use insecure randomness --> 
+    <Rule Id="CA5395" Action="None" />             <!-- Miss HttpVerb attribute for action methods --> 
+    <Rule Id="CA5396" Action="None" />             <!-- Set HttpOnly to true for HttpCookie --> 
+    <Rule Id="CA5397" Action="None" />             <!-- Do not use deprecated SslProtocols values --> 
+    <Rule Id="CA5398" Action="None" />             <!-- Avoid hardcoded SslProtocols values --> 
+    <Rule Id="CA5399" Action="None" />             <!-- HttpClients should enable certificate revocation list checks --> 
+    <Rule Id="CA5400" Action="None" />             <!-- Ensure HttpClient certificate revocation list check is not disabled --> 
+    <Rule Id="CA5401" Action="None" />             <!-- Do not use CreateEncryptor with non-default IV --> 
+    <Rule Id="CA5402" Action="None" />             <!-- Use CreateEncryptor with the default IV  --> 
+    <Rule Id="CA5403" Action="None" />             <!-- Do not hard-code certificate --> 
+    <Rule Id="IL3000" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+    <Rule Id="IL3001" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+  </Rules> 
+  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers"> 
+    <Rule Id="AD0001" Action="Info" /> <!-- Analyzer threw an exception --> 
+    <Rule Id="SA0001" Action="Info" /> <!-- XML comments --> 
+    <Rule Id="SA1000" Action="None" />
+    <Rule Id="SA1001" Action="None" />
+    <Rule Id="SA1002" Action="Info" /> <!-- Semicolons should not be preceded by a space --> 
+    <Rule Id="SA1003" Action="None" />
+    <Rule Id="SA1004" Action="Info" /> <!-- Documentation line should begin with a space --> 
+    <Rule Id="SA1005" Action="Info" /> <!-- Single line comment should begin with a space -->
+    <Rule Id="SA1006" Action="Info" /> <!-- Region should not be preceded by a space -->
+    <Rule Id="SA1008" Action="Info" /> <!-- Opening parenthesis should not be preceded by a space --> 
+    <Rule Id="SA1009" Action="Info" /> <!-- Closing parenthesis should not be followed by a space --> 
+    <Rule Id="SA1010" Action="Info" /> <!-- Opening square brackets should not be preceded by a space --> 
+    <Rule Id="SA1011" Action="Info" /> <!-- Closing square bracket should be followed by a space --> 
+    <Rule Id="SA1012" Action="Info" /> <!-- Opening brace should be followed by a space --> 
+    <Rule Id="SA1013" Action="Info" /> <!-- Closing brace should be preceded by a space --> 
+    <Rule Id="SA1015" Action="Info" /> <!-- Closing generic bracket should not be followed by a space --> 
+    <Rule Id="SA1019" Action="None" />
+    <Rule Id="SA1021" Action="Info" /> <!-- Negative sign should be preceded by a space --> 
+    <Rule Id="SA1023" Action="Info" /> <!-- Dereference symbol '*' should not be preceded by a space." --> 
+    <Rule Id="SA1024" Action="Info" /> <!-- Colon should be followed by a space --> 
+    <Rule Id="SA1025" Action="Info" /> <!-- Code should not contain multiple whitespace characters in a row --> 
+    <Rule Id="SA1026" Action="None" />
+    <Rule Id="SA1027" Action="None" />
+    <Rule Id="SA1028" Action="None" />
+    <Rule Id="SA1100" Action="Info" /> <!-- Do not prefix calls with base unless local implementation exists --> 
+    <Rule Id="SA1101" Action="None" />
+    <Rule Id="SA1102" Action="Info" />
+    <Rule Id="SA1106" Action="Info" /> <!-- Code should not contain empty statements --> 
+    <Rule Id="SA1107" Action="Info" /> <!-- Code should not contain multiple statements on one line --> 
+    <Rule Id="SA1108" Action="None" />
+    <Rule Id="SA1110" Action="Info" /> <!-- Opening parenthesis or bracket should be on declaration line --> 
+    <Rule Id="SA1111" Action="Info" /> <!-- Closing parenthesis should be on line of last parameter --> 
+    <Rule Id="SA1112" Action="None" />
+    <Rule Id="SA1113" Action="None" />
+    <Rule Id="SA1114" Action="Info" /> <!-- Parameter list should follow declaration --> 
+    <Rule Id="SA1115" Action="None" />
+    <Rule Id="SA1116" Action="Info" /> <!-- Split parameters should start on line after declaration --> 
+    <Rule Id="SA1117" Action="Info" /> <!-- Parameters should be on same line or separate lines --> 
+    <Rule Id="SA1118" Action="None" />
+    <Rule Id="SA1119" Action="None" />
+    <Rule Id="SA1120" Action="Info" /> <!-- Comments should contain text --> 
+    <Rule Id="SA1121" Action="None" />
+    <Rule Id="SA1122" Action="Info" /> <!-- Use string.Empty for empty strings --> 
+    <Rule Id="SA1123" Action="Info" /> <!-- Region should not be located within a code element --> 
+    <Rule Id="SA1124" Action="None" />
+    <Rule Id="SA1125" Action="Info" /> <!-- Use shorthand for nullable types --> 
+    <Rule Id="SA1127" Action="Info" /> <!-- Generic type constraints should be on their own line --> 
+    <Rule Id="SA1128" Action="Info" /> <!-- Put constructor initializers on their own line --> 
+    <Rule Id="SA1129" Action="None" />
+    <Rule Id="SA1130" Action="Info" /> <!-- Use lambda syntax --> 
+    <Rule Id="SA1131" Action="Info" /> <!-- Constant values should appear on the right-hand side of comparisons --> 
+    <Rule Id="SA1132" Action="Info" /> <!-- Do not combine fields --> 
+    <Rule Id="SA1133" Action="Info" /> <!-- Do not combine attributes --> 
+    <Rule Id="SA1134" Action="Info" /> <!-- Each attribute should be placed on its own line of code --> 
+    <Rule Id="SA1135" Action="Info" /> <!-- Using directive should be qualified --> 
+    <Rule Id="SA1136" Action="Info" /> <!-- Enum values should be on separate lines --> 
+    <Rule Id="SA1137" Action="Info" /> <!-- Elements should have the same indentation --> 
+    <Rule Id="SA1139" Action="None" />
+    <Rule Id="SA1200" Action="None" />
+    <Rule Id="SA1201" Action="Info" /> <!-- Elements should appear in the correct order --> 
+    <Rule Id="SA1202" Action="Info" /> <!-- Elements should be ordered by access --> 
+    <Rule Id="SA1203" Action="Info" /> <!-- Constants should appear before fields --> 
+    <Rule Id="SA1204" Action="Info" /> <!-- Static elements should appear before instance elements --> 
+    <Rule Id="SA1205" Action="None" />
+    <Rule Id="SA1206" Action="None" />
+    <Rule Id="SA1208" Action="Info" /> <!-- Using directive ordering --> 
+    <Rule Id="SA1209" Action="Info" /> <!-- Using alias directives should be placed after all using namespace directives --> 
+    <Rule Id="SA1210" Action="Info" /> <!-- Using directives should be ordered alphabetically by the namespaces --> 
+    <Rule Id="SA1211" Action="Info" /> <!-- Using alias directive ordering --> 
+    <Rule Id="SA1212" Action="None" />
+    <Rule Id="SA1214" Action="Info" /> <!-- Readonly fields should appear before non-readonly fields --> 
+    <Rule Id="SA1216" Action="Info" /> <!-- Using static directives should be placed at the correct location --> 
+    <Rule Id="SA1300" Action="Info" /> <!-- Element should begin with an uppercase letter --> 
+    <Rule Id="SA1303" Action="Info" /> <!-- Const field names should begin with upper-case letter --> 
+    <Rule Id="SA1304" Action="Info" /> <!-- Non-private readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1306" Action="Info" /> <!-- Field should begin with lower-case letter --> 
+    <Rule Id="SA1307" Action="None" />
+    <Rule Id="SA1308" Action="Info" /> <!-- Field should not begin with the prefix 's_' --> 
+    <Rule Id="SA1309" Action="None" />
+    <Rule Id="SA1310" Action="None" />
+    <Rule Id="SA1311" Action="Info" /> <!-- Static readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1312" Action="Info" /> <!-- Variable should begin with lower-case letter --> 
+    <Rule Id="SA1313" Action="Info" /> <!-- Parameter should begin with lower-case letter --> 
+    <Rule Id="SA1314" Action="None" />
+    <Rule Id="SA1316" Action="Info" /> <!-- Tuple element names should use correct casing --> 
+    <Rule Id="SA1400" Action="None" />
+    <Rule Id="SA1401" Action="Info" /> <!-- Fields should be private --> 
+    <Rule Id="SA1402" Action="Info" /> <!-- File may only contain a single type --> 
+    <Rule Id="SA1403" Action="Info" /> <!-- File may only contain a single namespace --> 
+    <Rule Id="SA1404" Action="Info" /> <!-- Code analysis suppression should have justification --> 
+    <Rule Id="SA1405" Action="Info" /> <!-- Debug.Assert should provide message text --> 
+    <Rule Id="SA1407" Action="Info" /> <!-- Arithmetic expressions should declare precedence --> 
+    <Rule Id="SA1408" Action="Info" /> <!-- Conditional expressions should declare precedence --> 
+    <Rule Id="SA1410" Action="None" />
+    <Rule Id="SA1411" Action="None" />
+    <Rule Id="SA1413" Action="Info" /> <!-- Use trailing comma in multi-line initializers --> 
+    <Rule Id="SA1414" Action="Info" /> <!-- Tuple types in signatures should have element names --> 
+    <Rule Id="SA1500" Action="Info" /> <!-- Braces for multi-line statements should not share line --> 
+    <Rule Id="SA1501" Action="Info" /> <!-- Statement should not be on a single line --> 
+    <Rule Id="SA1502" Action="Info" /> <!-- Element should not be on a single line --> 
+    <Rule Id="SA1503" Action="Info" /> <!-- Braces should not be omitted --> 
+    <Rule Id="SA1504" Action="Info" /> <!-- All accessors should be single-line or multi-line --> 
+    <Rule Id="SA1505" Action="Info" /> <!-- An opening brace should not be followed by a blank line --> 
+    <Rule Id="SA1506" Action="Info" /> <!-- Element documentation headers should not be followed by blank line --> 
+    <Rule Id="SA1507" Action="Info" /> <!-- Code should not contain multiple blank lines in a row --> 
+    <Rule Id="SA1508" Action="Info" /> <!-- A closing brace should not be preceded by a blank line --> 
+    <Rule Id="SA1509" Action="Info" /> <!-- Opening braces should not be preceded by blank line --> 
+    <Rule Id="SA1510" Action="Info" /> <!-- 'else' statement should not be preceded by a blank line --> 
+    <Rule Id="SA1512" Action="Info" /> <!-- Single-line comments should not be followed by blank line --> 
+    <Rule Id="SA1513" Action="Info" /> <!-- Closing brace should be followed by blank line --> 
+    <Rule Id="SA1514" Action="Info" /> <!-- Element documentation header should be preceded by blank line --> 
+    <Rule Id="SA1515" Action="Info" /> <!-- Single-line comment should be preceded by blank line --> 
+    <Rule Id="SA1516" Action="Info" /> <!-- Elements should be separated by blank line --> 
+    <Rule Id="SA1517" Action="None" />
+    <Rule Id="SA1518" Action="Info" /> <!-- Code should not contain blank lines at the end of the file -->
+    <Rule Id="SA1519" Action="Info" /> <!-- Braces should not be omitted from multi-line child statement --> 
+    <Rule Id="SA1520" Action="Info" /> <!-- Use braces consistently --> 
+    <Rule Id="SA1600" Action="None" />
+    <Rule Id="SA1601" Action="Info" /> <!-- Partial elements should be documented --> 
+    <Rule Id="SA1602" Action="Info" /> <!-- Enumeration items should be documented --> 
+    <Rule Id="SA1604" Action="Info" /> <!-- Element documentation should have summary --> 
+    <Rule Id="SA1605" Action="Info" /> <!-- Partial element documentation should have summary --> 
+    <Rule Id="SA1606" Action="Info" /> <!-- Element documentation should have summary text --> 
+    <Rule Id="SA1608" Action="Info" /> <!-- Element documentation should not have default summary --> 
+    <Rule Id="SA1610" Action="Info" /> <!-- Property documentation should have value text --> 
+    <Rule Id="SA1611" Action="Info" /> <!-- The documentation for parameter 'message' is missing --> 
+    <Rule Id="SA1612" Action="Info" /> <!-- The parameter documentation is at incorrect position --> 
+    <Rule Id="SA1614" Action="Info" /> <!-- Element parameter documentation should have text --> 
+    <Rule Id="SA1615" Action="None" />
+    <Rule Id="SA1616" Action="Info" /> <!-- Element return value documentation should have text --> 
+    <Rule Id="SA1617" Action="None" />
+    <Rule Id="SA1618" Action="Info" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1619" Action="Info" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1622" Action="Info" /> <!-- Generic type parameter documentation should have text --> 
+    <Rule Id="SA1623" Action="Info" /> <!-- Property documentation text --> 
+    <Rule Id="SA1624" Action="Info" /> <!-- Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets' --> 
+    <Rule Id="SA1625" Action="None" />
+    <Rule Id="SA1626" Action="Info" /> <!-- Single-line comments should not use documentation style slashes --> 
+    <Rule Id="SA1627" Action="Info" /> <!-- The documentation text within the \'exception\' tag should not be empty --> 
+    <Rule Id="SA1629" Action="Info" /> <!-- Documentation text should end with a period --> 
+    <Rule Id="SA1633" Action="Info" /> <!-- File should have header --> 
+    <Rule Id="SA1642" Action="Info" /> <!-- Constructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1643" Action="Info" /> <!-- Destructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1649" Action="Info" /> <!-- File name should match first type name --> 
+    <Rule Id="SA1652" Action="None" />
+  </Rules> 
+  <Rules AnalyzerId="xunit.analyzers" RuleNamespace="xunit.analyzers"> 
+    <Rule Id="xUnit2013" Action="None" /> <!-- Do not use equality check to check for collection size. --> 
+  </Rules> 
+</RuleSet> 
diff --git a/eng/Packages.props b/eng/Packages.props
index d6312348572..095ffd991cf 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -9,6 +9,7 @@
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
+    <PackageReference Update="Microsoft.CodeQuality.Analyzers" Version="3.3.0" PrivateAssets="all" />
     <PackageReference Update="Microsoft.DotNet.GenAPI" Version="2.1.0-prerelease-02404-02" />
     <PackageReference Update="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
     <PackageReference Update="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" />
@@ -20,6 +21,7 @@
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
     <PackageReference Update="SourceLink.Create.CommandLine" Version="2.1.2" />
+    <PackageReference Update="StyleCop.Analyzers" Version="1.2.0-beta.164" PrivateAssets="all" />
     <PackageReference Update="System.CodeDom" Version="4.4.0" />
     <PackageReference Update="System.Collections.Immutable" Version="5.0.0" />
     <PackageReference Update="System.Configuration.ConfigurationManager" Version="4.7.0" />
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 61adb110cf1..b98b15bbe8c 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1069,36 +1069,38 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
             ErrorUtilities.VerifyThrowArgumentNull(submission, nameof(submission));
             ErrorUtilities.VerifyThrow(!submission.IsCompleted, "Submission already complete.");
 
-            lock (_syncLock)
+            BuildRequestConfiguration resolvedConfiguration = null;
+            bool shuttingDown = false;
+
+            try
             {
-                ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
-                if (projectInstance != null)
+                lock (_syncLock)
                 {
-                    if (_acquiredProjectRootElementCacheFromProjectInstance)
+                    ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
+                    if (projectInstance != null)
                     {
-                        ErrorUtilities.VerifyThrowArgument(
-                            _buildParameters.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
-                            "OM_BuildSubmissionsMultipleProjectCollections");
+                        if (_acquiredProjectRootElementCacheFromProjectInstance)
+                        {
+                            ErrorUtilities.VerifyThrowArgument(
+                                _buildParameters.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
+                                "OM_BuildSubmissionsMultipleProjectCollections");
+                        }
+                        else
+                        {
+                            _buildParameters.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
+                            _acquiredProjectRootElementCacheFromProjectInstance = true;
+                        }
                     }
-                    else
+                    else if (_buildParameters.ProjectRootElementCache == null)
                     {
-                        _buildParameters.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
-                        _acquiredProjectRootElementCacheFromProjectInstance = true;
+                        // Create our own cache; if we subsequently get a build submission with a project instance attached,
+                        // we'll dump our cache and use that one.
+                        _buildParameters.ProjectRootElementCache =
+                            new ProjectRootElementCache(false /* do not automatically reload from disk */);
                     }
-                }
-                else if (_buildParameters.ProjectRootElementCache == null)
-                {
-                    // Create our own cache; if we subsequently get a build submission with a project instance attached,
-                    // we'll dump our cache and use that one.
-                    _buildParameters.ProjectRootElementCache =
-                        new ProjectRootElementCache(false /* do not automatically reload from disk */);
-                }
 
-                VerifyStateInternal(BuildManagerState.Building);
+                    VerifyStateInternal(BuildManagerState.Building);
 
-                BuildRequestConfiguration resolvedConfiguration = null;
-                try
-                {
                     // If we have an unnamed project, assign it a temporary name.
                     if (string.IsNullOrEmpty(submission.BuildRequestData.ProjectFullPath))
                     {
@@ -1129,45 +1131,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
 
                     resolvedConfiguration.ExplicitlyLoaded = true;
 
-                    if (_shuttingDown)
+                    // assign shutting down to local variable to avoid race condition: "setting _shuttingDown after this point during this method execution"
+                    shuttingDown = _shuttingDown;
+                    if (!shuttingDown)
                     {
-                        // We were already canceled!
-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());
-                        submission.CompleteResults(result);
-                        submission.CompleteLogging(true);
-                        CheckSubmissionCompletenessAndRemove(submission);
-                        return;
-                    }
-
-                    if (ProjectCacheIsPresent())
-                    {
-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));
-                    }
-                    else
-                    {
-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);
+                        if (ProjectCacheIsPresent())
+                        {
+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));
+                        }
+                        else
+                        {
+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);
+                        }
                     }
                 }
-                catch (ProjectCacheException ex)
+            }
+            catch (ProjectCacheException ex)
+            {
+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having BuildRequestConfiguration");
+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
+            }
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+            {
+                if (resolvedConfiguration is not null)
                 {
-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having ");
                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+                else
                 {
-                    if (resolvedConfiguration is not null)
-                    {
-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
-                    }
-                    else
-                    {
-                        HandleSubmissionException(submission, ex);
-                        throw;
-                    }
+                    HandleSubmissionException(submission, ex);
+                    throw;
                 }
             }
+
+            // We are shutting down so submission has to be completed with BuildAbortedException
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+            if (shuttingDown)
+            {
+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having BuildRequestConfiguration");
+                // We were already canceled!
+                CompleteSubmissionWithException(submission, resolvedConfiguration, new BuildAbortedException());
+            }
         }
 
         bool ProjectCacheIsPresent()
@@ -1516,24 +1521,34 @@ private void ProcessPacket(int node, INodePacket packet)
             }
         }
 
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
         private void CompleteSubmissionWithException(BuildSubmission submission, BuildRequestConfiguration configuration, Exception exception)
         {
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+
             lock (_syncLock)
             {
                 if (submission.BuildRequest is null)
                 {
                     AddBuildRequestToSubmission(submission, configuration.ConfigurationId);
                 }
-
-                HandleSubmissionException(submission, exception);
             }
+
+            HandleSubmissionException(submission, exception);
         }
 
         /// <summary>
         /// Deals with exceptions that may be thrown when handling a submission.
         /// </summary>
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
         private void HandleSubmissionException(BuildSubmission submission, Exception ex)
         {
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+
             if (ex is AggregateException ae && ae.InnerExceptions.Count == 1)
             {
                 ex = ae.InnerExceptions.First();
@@ -1548,14 +1563,28 @@ private void HandleSubmissionException(BuildSubmission submission, Exception ex)
                 }
             }
 
-            lock(_syncLock)
+            bool submissionNeedsCompletion;
+            lock (_syncLock)
             {
                 // BuildRequest may be null if the submission fails early on.
-                if (submission.BuildRequest != null)
+                submissionNeedsCompletion = submission.BuildRequest != null;
+                if (submissionNeedsCompletion)
                 {
                     var result = new BuildResult(submission.BuildRequest, ex);
                     submission.CompleteResults(result);
-                    submission.CompleteLogging(true);
+                }
+            }
+
+            if (submissionNeedsCompletion)
+            {
+                WaitForAllLoggingServiceEventsToBeProcessed();
+            }
+
+            lock (_syncLock)
+            {
+                if (submissionNeedsCompletion)
+                {
+                    submission.CompleteLogging();
                 }
 
                 _overallBuildSuccess = false;
@@ -1563,6 +1592,21 @@ private void HandleSubmissionException(BuildSubmission submission, Exception ex)
             }
         }
 
+        /// <summary>
+        /// Waits to drain all events of logging service.
+        /// This method shall be used carefully because during draining, LoggingService will block all incoming events.
+        /// </summary>
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
+        private void WaitForAllLoggingServiceEventsToBeProcessed()
+        {
+            // this has to be called out of the lock (_syncLock)
+            // because processing events can callback to 'this' instance and cause deadlock
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForThreadToProcessEvents();
+        }
+
         /// <summary>
         /// Deals with exceptions that may be thrown as a result of ExecuteSubmission.
         /// </summary>
@@ -1624,7 +1668,7 @@ private static void AddProxyBuildRequestToSubmission(BuildSubmission submission,
         /// The submission is a top level build request entering the BuildManager.
         /// Sends the request to the scheduler with optional legacy threading semantics behavior.
         /// </summary>
-        private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, bool allowMainThreadBuild = false)
+        private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, BuildRequestConfiguration configuration, bool allowMainThreadBuild = false)
         {
             _workQueue.Post(
                 () =>
@@ -1635,11 +1679,7 @@ private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, boo
                     }
                     catch (BuildAbortedException bae)
                     {
-                        // We were canceled before we got issued by the work queue.
-                        var result = new BuildResult(submission.BuildRequest, bae);
-                        submission.CompleteResults(result);
-                        submission.CompleteLogging(true);
-                        CheckSubmissionCompletenessAndRemove(submission);
+                        CompleteSubmissionWithException(submission, configuration, bae);
                     }
                     catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                     {
@@ -1703,11 +1743,17 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                             var buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                             ((IBuildComponentHost)this).LoggingService.LogFatalBuildError(buildEventContext, ex, new BuildEventFileInfo(submission.BuildRequestData.ProjectFullPath));
                         }
+                    }
 
-                        submission.CompleteLogging(true);
+                    WaitForAllLoggingServiceEventsToBeProcessed();
+
+                    lock (_syncLock)
+                    {
+                        submission.CompleteLogging();
                         ReportResultsToSubmission(new BuildResult(submission.BuildRequest, ex));
                         _overallBuildSuccess = false;
                     }
+
                 }
             }
         }
@@ -2259,14 +2305,14 @@ void HandleCacheResult()
                         {
                             // Issue the real build request.
                             AddBuildRequestToSubmission(submission, configuration.ConfigurationId);
-                            IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild: false);
+                            IssueBuildRequestForBuildSubmission(submission, configuration, allowMainThreadBuild: false);
                         }
                         else if (cacheResult.ResultType == CacheResultType.CacheHit && cacheResult.ProxyTargets != null)
                         {
                             // Setup submission.BuildRequest with proxy targets. The proxy request is built on the inproc node (to avoid
                             // ProjectInstance serialization). The proxy target results are used as results for the real targets.
                             AddProxyBuildRequestToSubmission(submission, configuration.ConfigurationId, cacheResult.ProxyTargets);
-                            IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild: false);
+                            IssueBuildRequestForBuildSubmission(submission, configuration, allowMainThreadBuild: false);
                         }
                         else if (cacheResult.ResultType == CacheResultType.CacheHit && cacheResult.BuildResult != null)
                         {
@@ -2282,7 +2328,7 @@ void HandleCacheResult()
                             }
 
                             _resultsCache.AddResult(result);
-                            submission.CompleteLogging(false);
+                            submission.CompleteLogging();
                             ReportResultsToSubmission(result);
                         }
                     }
@@ -2496,7 +2542,7 @@ private void CheckForActiveNodesAndCleanUpSubmissions()
 
                     // If we never received a project started event, consider logging complete anyhow, since the nodes have
                     // shut down.
-                    submission.CompleteLogging(waitForLoggingThread: false);
+                    submission.CompleteLogging();
 
                     _overallBuildSuccess = _overallBuildSuccess && (submission.BuildResult.OverallResult == BuildResultCode.Success);
                     CheckSubmissionCompletenessAndRemove(submission);
@@ -2625,7 +2671,7 @@ private void ReportResultsToSubmission(BuildResult result)
                     */
                     if (!submission.LoggingCompleted && result.Exception != null)
                     {
-                        submission.CompleteLogging(waitForLoggingThread: false);
+                        submission.CompleteLogging();
                     }
 
                     submission.CompleteResults(result);
@@ -2782,7 +2828,7 @@ private void OnThreadException(Exception e)
                         {
                             submission.BuildResult.Exception = e;
                         }
-                        submission.CompleteLogging(waitForLoggingThread: false);
+                        submission.CompleteLogging();
                         submission.CompleteResults(new BuildResult(submission.BuildRequest, e));
 
                         CheckSubmissionCompletenessAndRemove(submission);
@@ -2823,7 +2869,7 @@ private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
                         _projectStartedEvents.Remove(e.BuildEventContext.SubmissionId);
                         if (_buildSubmissions.TryGetValue(e.BuildEventContext.SubmissionId, out var submission))
                         {
-                            submission.CompleteLogging(false);
+                            submission.CompleteLogging();
                             CheckSubmissionCompletenessAndRemove(submission);
                         }
                     }
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 91356f814c6..5b574b82b20 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -165,13 +165,8 @@ internal void CompleteResults(BuildResult result)
         /// <summary>
         /// Indicates that all logging events for this submission are complete.
         /// </summary>
-        internal void CompleteLogging(bool waitForLoggingThread)
+        internal void CompleteLogging()
         {
-            if (waitForLoggingThread)
-            {
-                ((BackEnd.Logging.LoggingService)((IBuildComponentHost)BuildManager).LoggingService).WaitForThreadToProcessEvents();
-            }
-
             LoggingCompleted = true;
             CheckForCompletion();
         }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 163a6d4fc62..19ed313b922 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
@@ -1182,8 +1183,29 @@ internal void WaitForThreadToProcessEvents()
             // shutdown and nulled out the events we were going to wait on.
             if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
             {
-                TerminateLoggingEventQueue();
-                CreateLoggingEventQueue();
+                BufferBlock<object> loggingQueue = null;
+                ActionBlock<object> loggingQueueProcessor = null;
+
+                lock (_lockObject)
+                {
+                    loggingQueue = _loggingQueue;
+                    loggingQueueProcessor = _loggingQueueProcessor;
+
+                    // Replaces _loggingQueue and _loggingQueueProcessor with new one, this will assure that
+                    // no further messages could possibly be trying to be added into queue we are about to drain
+                    CreateLoggingEventQueue();
+                }
+
+                // Drain queue.
+                // This shall not be locked to avoid possible deadlock caused by
+                // event handlers to reenter 'this' instance while trying to log something.
+                if (loggingQueue != null)
+                {
+                    Debug.Assert(!Monitor.IsEntered(_lockObject));
+
+                    loggingQueue.Complete();
+                    loggingQueueProcessor.Completion.Wait();
+                }
             }
         }
 
@@ -1244,21 +1266,27 @@ private void CreateLoggingEventQueue()
                 BoundedCapacity = Convert.ToInt32(_queueCapacity)
             };
 
-            _loggingQueue = new BufferBlock<object>(dataBlockOptions);
+            var loggingQueue = new BufferBlock<object>(dataBlockOptions);
 
             var executionDataBlockOptions = new ExecutionDataflowBlockOptions
             {
                 BoundedCapacity = 1
             };
 
-            _loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
+            var loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
 
             var dataLinkOptions = new DataflowLinkOptions
             {
                 PropagateCompletion = true
             };
 
-            _loggingQueue.LinkTo(_loggingQueueProcessor, dataLinkOptions);
+            loggingQueue.LinkTo(loggingQueueProcessor, dataLinkOptions);
+
+            lock (_lockObject)
+            {
+                _loggingQueue = loggingQueue;
+                _loggingQueueProcessor = loggingQueueProcessor;
+            }
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 13e70263473..c5c3555f201 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -450,13 +450,10 @@ public void LogBuildStarted()
 
                 // Raise the event with the filters
                 ProcessLoggingEvent(buildEvent);
-
-                // Make sure we process this event before going any further
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <summary>
@@ -478,12 +475,10 @@ public void LogBuildFinished(bool success)
                 BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
 
                 ProcessLoggingEvent(buildEvent);
-
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <inheritdoc />
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index b40d2f1fb4c..65af9d8c8a7 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1764,7 +1764,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
 
                         if (affinityMismatch)
                         {
-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("AffinityConflict", requestAffinity, existingRequestAffinity)));
+                            ErrorUtilities.VerifyThrowInternalError(
+                                _configCache.HasConfiguration(request.ConfigurationId),
+                                "A request should have a configuration if it makes it this far in the build process.");
+
+                            var config = _configCache[request.ConfigurationId];
+                            var globalProperties = string.Join(
+                                ";",
+                                config.GlobalProperties.ToDictionary().Select(kvp => $"{kvp.Key}={kvp.Value}"));
+
+                            var result = new BuildResult(
+                                request,
+                                new InvalidOperationException(
+                                    ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
+                                        "AffinityConflict",
+                                        requestAffinity,
+                                        existingRequestAffinity,
+                                        config.ProjectFullPath,
+                                        globalProperties
+                                        )));
                             response = GetResponseForResult(nodeForResults, request, result);
                             responses.Add(response);
                             continue;
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 237ea72d01e..6f170c430d0 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -117,7 +117,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
                 {
                     result = (SdkResult)sdkResolver.Resolve(sdk, context, resultFactory);
                 }
-                catch (Exception e) when (e is FileNotFoundException || (e is FileLoadException && sdkResolver.GetType().GetTypeInfo().Name.Equals("NuGetSdkResolver", StringComparison.Ordinal)))
+                catch (Exception e) when ((e is FileNotFoundException || e is FileLoadException) && sdkResolver.GetType().GetTypeInfo().Name.Equals("NuGetSdkResolver", StringComparison.Ordinal))
                 {
                     // Since we explicitly add the NuGetSdkResolver, we special case this.  The NuGetSdkResolver has special logic
                     // to load NuGet assemblies at runtime which could fail if the user is not running installed MSBuild.  Rather
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 2441874fb8f..747e1b197e1 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1353,7 +1353,7 @@
     <comment>{StrBegin="MSB4209: "}</comment>
   </data>
   <data name="AffinityConflict" xml:space="preserve">
-    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</value>
+    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</value>
     <comment>{StrBegin="MSB4213: "}</comment>
   </data>
   <data name="UnableToCreateNode" xml:space="preserve">
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index fd04936e305..b3861309d5c 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: UrÄenÃ© spÅaÅ¾enÃ­ poÅ¾adavku {0} je v konfliktu s pÅedchozÃ­m spÅaÅ¾enÃ­m {1} urÄenÃ½m pro tento projekt.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index d3c84a65998..f8a63950797 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Die angegebene AnforderungsaffinitÃ¤t {0} steht mit einer frÃ¼heren AffinitÃ¤t {1} in Konflikt, die fÃ¼r dieses Projekt angegeben wurde.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.en.xlf b/src/Build/Resources/xlf/Strings.en.xlf
index 2e20e50527d..d628e3aac14 100644
--- a/src/Build/Resources/xlf/Strings.en.xlf
+++ b/src/Build/Resources/xlf/Strings.en.xlf
@@ -1870,8 +1870,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index f580cb75fab..39d606c3376 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: La afinidad de solicitud {0} especificada estÃ¡ en conflicto con una afinidad {1} anterior especificada para este proyecto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 7949e02cabc..4fb148b8f3f 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: L'affinitÃ© de requÃªte spÃ©cifiÃ©e {0} est en conflit avec une affinitÃ© prÃ©cÃ©dente {1} spÃ©cifiÃ©e pour ce projet.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 52645cf5e12..6c438cb90c0 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: l'affinitÃ  della richiesta specificata {0} Ã¨ in conflitto con l'affinitÃ  {1} precedentemente specificata per il progetto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 56ac6773c8a..83660d1cd01 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: æå®ãããè¦æ±ã®é¢ä¿ {0} ã¯ããã®ãã­ã¸ã§ã¯ãã«å¯¾ãã¦ä»¥åã«æå®ãããé¢ä¿ {1} ã¨ç«¶åãã¦ãã¾ãã</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index e682e068149..2886ef13d83 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ì§ì í ìì²­ ì í¸ë {0}ì´(ê°) ì´ íë¡ì í¸ì ëí´ ì´ì ì ì§ì í ì í¸ë {1}ê³¼(ì) ì¶©ëí©ëë¤.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index bf49e4af42e..f679567d179 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Podana koligacja Å¼Ädania {0} jest w konflikcie z poprzedniÄ koligacjÄ {1} okreÅlonÄ dla tego projektu.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 05415ba0bfa..389764664b3 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: A afinidade de solicitaÃ§Ã£o especificada {0} estÃ¡ em conflito com uma afinidade anterior {1} especificada para este projeto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 096b82fd9b8..bceaac58024 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ÑÐºÐ°Ð·Ð°Ð½Ð½Ð¾Ðµ ÑÑÐ¾Ð´ÑÑÐ²Ð¾ Ð·Ð°Ð¿ÑÐ¾ÑÐ° {0} ÐºÐ¾Ð½ÑÐ»Ð¸ÐºÑÑÐµÑ Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐ¸Ð¼ ÑÑÐ¾Ð´ÑÑÐ²Ð¾Ð¼ {1}, Ð·Ð°Ð´Ð°Ð½Ð½ÑÐ¼ Ð´Ð»Ñ Ð´Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ¾ÐµÐºÑÐ°.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 07e20b02e39..cccbf728f7f 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Belirtilen istek benzeÅimi {0} bu proje iÃ§in daha Ã¶nce belirtilen {1} benzeÅimi ile Ã§akÄ±ÅÄ±yor.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 5f687d7838f..973d8288178 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: æå®çè¯·æ±å³è {0} ä¸ååä¸ºæ­¤é¡¹ç®æå®çå³è {1} å²çªã</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index ef4f8832a45..2a863be7542 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -1790,8 +1790,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: æå®çè¦æ±è¦ªåæ§ {0} èååçºéåå°æ¡æå®çè¦ªåæ§ {1} è¡çªã</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 6e4db6d18bf..3581225789d 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -441,6 +441,19 @@ public void CopyUpToDateStop(string path, bool wasUpToDate)
         {
             WriteEvent(59, path, wasUpToDate);
         }
+
+        [Event(60, Keywords = Keywords.All)]
+        public void WriteLinesToFileUpToDateStart()
+        {
+            WriteEvent(60);
+        }
+
+        [Event(61, Keywords = Keywords.All)]
+        public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)
+        {
+            WriteEvent(61, fileItemSpec, wasUpToDate);
+        }
+
         #endregion
     }
 }
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 6f739d163b8..f35dc2f8a6e 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -220,7 +220,7 @@ private static BuildEnvironment TryFromMSBuildExeUnderVisualStudio(string msbuil
                 string visualStudioRoot = GetVsRootFromMSBuildAssembly(msbuildExe);
                 return new BuildEnvironment(
                         BuildEnvironmentMode.VisualStudio,
-                        msbuildExe,
+                        GetMSBuildExeFromVsRoot(visualStudioRoot),
                         runningTests: s_runningTests(),
                         runningInVisualStudio: false,
                         visualStudioPath: visualStudioRoot);
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index e7713cb359a..fef9909ce6f 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -15,6 +15,7 @@
     <SemanticVersioningV1>true</SemanticVersioningV1>
 
     <AssemblyName>Microsoft.NET.StringTools</AssemblyName>
+    <PackageDescription>This package contains the $(AssemblyName) assembly which implements common string-related functionality such as weak interning.</PackageDescription>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(TargetFramework)' == 'net35'">
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 4af1396f59e..9a6e36c008e 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -405,6 +405,11 @@ private void CorePopulateMetadata()
                         }
 
                         var container = metadataReader.GetMemberReference((MemberReferenceHandle) ctorHandle).Parent;
+                        if (container.Kind != HandleKind.TypeReference)
+                        {
+                            continue;
+                        }
+
                         var name = metadataReader.GetTypeReference((TypeReferenceHandle) container).Name;
                         if (!string.Equals(metadataReader.GetString(name), "TargetFrameworkAttribute"))
                         {
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index c4fdfbb1a50..776e48bbddb 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -1,6 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
@@ -87,27 +88,33 @@ public override bool Execute()
                     {
                         Directory.CreateDirectory(directoryPath);
                         string contentsAsString = buffer.ToString();
-                        try
+
+                        // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.
+                        if (WriteOnlyWhenDifferent)
                         {
-                            // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.
-                            if (WriteOnlyWhenDifferent && FileUtilities.FileExistsNoThrow(File.ItemSpec))
+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();
+                            try
                             {
-                                string existingContents = System.IO.File.ReadAllText(File.ItemSpec);
-                                if (existingContents.Length == buffer.Length)
+                                if (FileUtilities.FileExistsNoThrow(File.ItemSpec))
                                 {
-                                    if (existingContents.Equals(contentsAsString))
+                                    string existingContents = System.IO.File.ReadAllText(File.ItemSpec);
+                                    if (existingContents.Length == buffer.Length)
                                     {
-                                        Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.SkippingUnchangedFile", File.ItemSpec);
-                                        return true;
+                                        if (existingContents.Equals(contentsAsString))
+                                        {
+                                            Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.SkippingUnchangedFile", File.ItemSpec);
+                                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);
+                                            return true;
+                                        }
                                     }
                                 }
                             }
+                            catch (IOException)
+                            {
+                                Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
+                            }
+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
-                        catch (IOException)
-                        {
-                            Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
-                        }
-
 
                         System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);
                     }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 8cb9228276d..f5b35399d35 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1745,7 +1745,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
    -->
    <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' == '' and ('%(Extension)' == '.vcxproj' or '%(Extension)' == '.nativeproj')">
-        <!-- When we're dynamically figuring out platform, we need the MSBuild call that retrieves TF data. -->
+        <!-- 
+          Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
+          Don't skip when opted into the feature.
+        -->
         <SkipGetTargetFrameworkProperties Condition="'$(EnableDynamicPlatformResolution)' != 'true'">true</SkipGetTargetFrameworkProperties>
         <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>
       </_MSBuildProjectReferenceExistent>
@@ -1764,7 +1767,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
     <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''">
-        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
+        <!-- 
+          Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
+          Don't skip when opted into the feature.
+        -->
+        <SkipGetTargetFrameworkProperties Condition="'$(EnableDynamicPlatformResolution)' != 'true'">true</SkipGetTargetFrameworkProperties>
       </_MSBuildProjectReferenceExistent>
     </ItemGroup>
 
