diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index 49cea2f3682..3ddd79b7418 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -96,7 +96,7 @@ public void ParseSolution_VC2(bool convertToSlnx)
 
             string expectedProjectName = convertToSlnx ? "Project name" : "Project name.myvctype";
             Assert.Equal(expectedProjectName, solution.ProjectsInOrder[0].ProjectName);
-            Assert.Equal(GetPathForCurrentOs("Relative path\\to\\Project name.myvctype"), solution.ProjectsInOrder[0].RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("Relative path\\to\\Project name.myvctype"), solution.ProjectsInOrder[0].RelativePath);
             if (!convertToSlnx)
             {
                 // When converting to SLNX, the project GUID is not preserved.
@@ -416,7 +416,7 @@ public void SolutionFolders()
 
             Assert.Equal(5, solution.ProjectsInOrder.Count);
 
-            Assert.Equal(GetPathForCurrentOs("ClassLibrary1\\ClassLibrary1.csproj"), solution.ProjectsInOrder[0].RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("ClassLibrary1\\ClassLibrary1.csproj"), solution.ProjectsInOrder[0].RelativePath);
             Assert.Equal("{34E0D07D-CF8F-459D-9449-C4188D8C5564}", solution.ProjectsInOrder[0].ProjectGuid);
             Assert.Empty(solution.ProjectsInOrder[0].Dependencies);
             Assert.Null(solution.ProjectsInOrder[0].ParentProjectGuid);
@@ -425,7 +425,7 @@ public void SolutionFolders()
             Assert.Empty(solution.ProjectsInOrder[1].Dependencies);
             Assert.Null(solution.ProjectsInOrder[1].ParentProjectGuid);
 
-            Assert.Equal(GetPathForCurrentOs("MyPhysicalFolder\\ClassLibrary1\\ClassLibrary1.csproj"), solution.ProjectsInOrder[2].RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("MyPhysicalFolder\\ClassLibrary1\\ClassLibrary1.csproj"), solution.ProjectsInOrder[2].RelativePath);
             Assert.Equal("{A5EE8128-B08E-4533-86C5-E46714981680}", solution.ProjectsInOrder[2].ProjectGuid);
             Assert.Empty(solution.ProjectsInOrder[2].Dependencies);
             Assert.Equal("{E0F97730-25D2-418A-A7BD-02CAFDC6E470}", solution.ProjectsInOrder[2].ParentProjectGuid);
@@ -434,7 +434,7 @@ public void SolutionFolders()
             Assert.Empty(solution.ProjectsInOrder[3].Dependencies);
             Assert.Equal("{E0F97730-25D2-418A-A7BD-02CAFDC6E470}", solution.ProjectsInOrder[3].ParentProjectGuid);
 
-            Assert.Equal(GetPathForCurrentOs("ClassLibrary2\\ClassLibrary2.csproj"), solution.ProjectsInOrder[4].RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("ClassLibrary2\\ClassLibrary2.csproj"), solution.ProjectsInOrder[4].RelativePath);
             Assert.Equal("{6DB98C35-FDCC-4818-B5D4-1F0A385FDFD4}", solution.ProjectsInOrder[4].ProjectGuid);
             Assert.Empty(solution.ProjectsInOrder[4].Dependencies);
             Assert.Equal("{2AE8D6C4-FB43-430C-8AEB-15E5EEDAAE4B}", solution.ProjectsInOrder[4].ParentProjectGuid);
@@ -496,16 +496,16 @@ public void SolutionFoldersSlnx()
 
             Assert.Equal(3, solution.ProjectsInOrder.Count);
 
-            var classLibrary1 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == GetPathForCurrentOs("ClassLibrary1\\ClassLibrary1.csproj"));
+            var classLibrary1 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == ConvertToUnixPathIfNeeded("ClassLibrary1\\ClassLibrary1.csproj"));
             Assert.NotNull(classLibrary1);
             Assert.Empty(classLibrary1.Dependencies);
             Assert.Null(classLibrary1.ParentProjectGuid);
 
-            var myPhysicalFolderClassLibrary1 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == GetPathForCurrentOs("MyPhysicalFolder\\ClassLibrary1\\ClassLibrary1.csproj"));
+            var myPhysicalFolderClassLibrary1 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == ConvertToUnixPathIfNeeded("MyPhysicalFolder\\ClassLibrary1\\ClassLibrary1.csproj"));
             Assert.NotNull(myPhysicalFolderClassLibrary1);
             Assert.Empty(myPhysicalFolderClassLibrary1.Dependencies);
 
-            var classLibrary2 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == GetPathForCurrentOs("ClassLibrary2\\ClassLibrary2.csproj"));
+            var classLibrary2 = solution.ProjectsInOrder.FirstOrDefault(p => p.RelativePath == ConvertToUnixPathIfNeeded("ClassLibrary2\\ClassLibrary2.csproj"));
             Assert.NotNull(classLibrary2);
             Assert.Empty(classLibrary2.Dependencies);
 
@@ -708,19 +708,19 @@ public void SolutionDependencies(bool convertToSlnx)
             var classLibrary2 = solution.ProjectsInOrder.First(p => p.ProjectName == "ClassLibrary2");
             var classLibrary3 = solution.ProjectsInOrder.First(p => p.ProjectName == "ClassLibrary3");
 
-            Assert.Equal(GetPathForCurrentOs("ClassLibrary1\\ClassLibrary1.csproj"), classLibrary1.RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("ClassLibrary1\\ClassLibrary1.csproj"), classLibrary1.RelativePath);
             Assert.Single(classLibrary1.Dependencies);
             Assert.Equal(classLibrary3.ProjectGuid, classLibrary1.Dependencies[0]);
             Assert.Null(solution.ProjectsInOrder[0].ParentProjectGuid);
 
-            Assert.Equal(GetPathForCurrentOs("ClassLibrary2\\ClassLibrary2.csproj"), classLibrary2.RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("ClassLibrary2\\ClassLibrary2.csproj"), classLibrary2.RelativePath);
             Assert.Equal(2, classLibrary2.Dependencies.Count);
             // When converting to SLNX, the projects dependencies order is not preserved.
             Assert.Contains(classLibrary3.ProjectGuid, classLibrary2.Dependencies);
             Assert.Contains(classLibrary1.ProjectGuid, classLibrary2.Dependencies);
             Assert.Null(solution.ProjectsInOrder[1].ParentProjectGuid);
 
-            Assert.Equal(GetPathForCurrentOs("ClassLibrary3\\ClassLibrary3.csproj"), solution.ProjectsInOrder[2].RelativePath);
+            Assert.Equal(ConvertToUnixPathIfNeeded("ClassLibrary3\\ClassLibrary3.csproj"), solution.ProjectsInOrder[2].RelativePath);
             Assert.Empty(solution.ProjectsInOrder[2].Dependencies);
             Assert.Null(solution.ProjectsInOrder[2].ParentProjectGuid);
         }
@@ -1243,7 +1243,7 @@ private static string ConvertToSlnx(string slnPath)
             return slnxPath;
         }
 
-        private static string GetPathForCurrentOs(string path)
+        private static string ConvertToUnixPathIfNeeded(string path)
         {
             return NativeMethodsShared.IsWindows ? path : path.Replace('\\', '/');
         }
diff --git a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
index c21f164d0b5..e69fac5c555 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_NewParser_Tests.cs
@@ -86,7 +86,7 @@ public void ProjectWithWebsiteProperties(bool convertToSlnx)
 
             solution.ProjectsInOrder[0].ProjectType.ShouldBe(SolutionProjectType.WebProject);
             solution.ProjectsInOrder[0].ProjectName.ShouldBe(@"C:\WebSites\WebApplication3\");
-            solution.ProjectsInOrder[0].RelativePath.ShouldBe(GetPathForCurrentOs(@"C:\WebSites\WebApplication3\"));
+            solution.ProjectsInOrder[0].RelativePath.ShouldBe(ConvertToUnixPathIfNeeded(@"C:\WebSites\WebApplication3\"));
             solution.ProjectsInOrder[0].Dependencies.Count.ShouldBe(2);
             solution.ProjectsInOrder[0].ParentProjectGuid.ShouldBeNull();
             solution.ProjectsInOrder[0].GetUniqueProjectName().ShouldBe(@"C:\WebSites\WebApplication3\");
@@ -154,7 +154,7 @@ private static string ConvertToSlnx(string slnPath)
             return slnxPath;
         }
 
-        private static string GetPathForCurrentOs(string path)
+        private static string ConvertToUnixPathIfNeeded(string path)
         {
             return NativeMethodsShared.IsWindows ? path : path.Replace('\\', '/');
         }
