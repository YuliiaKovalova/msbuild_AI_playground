diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 68f21234456..087f4018bf0 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -110,5 +110,20 @@ public void ReleaseCores(int coresToRelease, TaskLoggingContext _taskLoggingCont
 
             _loggingService?.LogComment(_taskLoggingContext.BuildEventContext, Framework.MessageImportance.Low, "ResourceManagerReleasedCores", coresToRelease, TotalNumberHeld);
         }
+
+        internal void RequireCores(int requestedCores)
+        {
+            if (s is null)
+            {
+                // Since the current implementation of the cross-process resource count uses
+                // named semaphores, it's not usable on non-Windows, so just continue.
+                return;
+            }
+
+            if (!s.WaitOne())
+            {
+                ErrorUtilities.ThrowInternalError("Couldn't get a core to run a task even with infinite timeout");
+            }
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 0ce340f4828..fc7b75da51f 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -9,6 +9,8 @@
 using System.Linq;
 using System.Text;
 using System.Threading;
+
+using Microsoft.Build.BackEnd.Components.ResourceManager;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -70,6 +72,8 @@ internal class Scheduler : IScheduler
         /// </summary>
         private int _nodeLimitOffset;
 
+        private int _resourceManagedCoresUsed = 0;
+
         /// <summary>
         /// { nodeId -> NodeInfo }
         /// A list of nodes we know about.  For the non-distributed case, there will be no more nodes than the
@@ -105,6 +109,7 @@ internal class Scheduler : IScheduler
         /// The configuration cache.
         /// </summary>
         private IConfigCache _configCache;
+        private ResourceManagerService _resourceManager;
 
         /// <summary>
         /// The results cache.
@@ -529,6 +534,7 @@ public void InitializeComponent(IBuildComponentHost host)
             _componentHost = host;
             _resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
             _configCache = (IConfigCache)_componentHost.GetComponent(BuildComponentType.ConfigCache);
+            _resourceManager = (ResourceManagerService)_componentHost.GetComponent(BuildComponentType.TaskResourceManager);
         }
 
         /// <summary>
@@ -928,6 +934,7 @@ private void AssignUnscheduledRequestsWithConfigurationCountLevelling(List<Sched
                 {
                     if (CanScheduleRequestToNode(request, nodeId))
                     {
+                        _resourceManager.RequireCores(1); // TODO: is it ok to block here?
                         AssignUnscheduledRequestToNode(request, nodeId, responses);
                         idleNodes.Remove(nodeId);
                         break;
@@ -1279,12 +1286,14 @@ private bool AtSchedulingLimit()
                 return false;
             }
 
-            int limit = _componentHost.BuildParameters.MaxNodeCount switch
+            int limit = 1;
+
+            if (_componentHost.BuildParameters.MaxNodeCount > 1)
             {
-                1 => 1,
-                2 => _componentHost.BuildParameters.MaxNodeCount + 1 + _nodeLimitOffset,
-                _ => _componentHost.BuildParameters.MaxNodeCount + 2 + _nodeLimitOffset,
-            };
+                // Delegate the oversubscription factor to the resource manager
+                // but continue to support a manual override here
+                limit = _resourceManager.Count + _nodeLimitOffset;
+            }
 
             // We're at our limit of schedulable requests if: 
             // (1) MaxNodeCount requests are currently executing
