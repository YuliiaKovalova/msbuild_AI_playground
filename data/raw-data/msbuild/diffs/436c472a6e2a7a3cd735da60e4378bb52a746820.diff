diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 834d87e57b2..94e311932e6 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -677,7 +677,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE
                         // continue so we could throw the exception.
                         if (_requestEntry.RequestConfiguration.ActivelyBuildingTargets.ContainsKey(targetSpecification.TargetName))
                         {
-                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependency", targetSpecification.TargetName);
+                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependencyInTargetGraph", targetSpecification.TargetName);
                         }
                     }
                     else
@@ -689,7 +689,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE
                         }
 
                         // We are already building this target on this request. That's a circular dependency.
-                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependency", targetSpecification.TargetName);
+                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependencyInTargetGraph", targetSpecification.TargetName);
                     }
                 }
                 else
@@ -698,12 +698,14 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE
                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)
                     {
                         TargetEntry currentParent = parentTargetEntry;
+                        List<string> parentChain = new List<string>();
                         while (currentParent != null)
                         {
+                            parentChain.Add(currentParent.Name);
                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))
                             {
                                 // We are already building this target on this request. That's a circular dependency.
-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependency", targetSpecification.TargetName);
+                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, "CircularDependencyInTargetGraphWithVerbosity", targetSpecification.TargetName, parentTargetEntry.Name, buildReason, string.Join("<-", parentChain));
                             }
 
                             currentParent = currentParent.ParentEntry;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index d3431b4bf8c..60368e32719 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -866,7 +866,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                     else if (type == typeof(CircularDependencyException))
                     {
                         _continueOnError = ContinueOnError.ErrorAndStop;
-                        ProjectErrorUtilities.ThrowInvalidProject(taskLoggingContext.Task.Location, "CircularDependency", taskLoggingContext.TargetLoggingContext.Target.Name);
+                        ProjectErrorUtilities.ThrowInvalidProject(taskLoggingContext.Task.Location, "CircularDependencyInTargetGraph", taskLoggingContext.TargetLoggingContext.Target.Name);
                     }
                     else if (type == typeof(InvalidProjectFileException))
                     {
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 55a89a1db36..137e8ae11c5 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -264,11 +264,16 @@
     <comment>{StrBegin="MSB4114: "}UE: This message appears if the project file contains unreasonably nested Choose elements.
     LOCALIZATION: Do not localize "Choose" as it is an XML element name.</comment>
   </data>
-  <data name="CircularDependency" xml:space="preserve">
+  <data name="CircularDependencyInTargetGraph" xml:space="preserve">
     <value>MSB4006: There is a circular dependency in the target dependency graph involving target "{0}".</value>
     <comment>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</comment>
   </data>
+  <data name="CircularDependencyInTargetGraphWithVerbosity" xml:space="preserve">
+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target "{0}". Target {1} has a {2} dependency on it, but it is depended upon by {3}.</value>
+    <comment>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
+    request a target to build itself (perhaps via a chain of other targets).</comment>
+  </data>
   <data name="ComparisonOnNonNumericExpression" xml:space="preserve">
     <value>MSB4086: A numeric comparison was attempted on "{1}" that evaluates to "{2}" instead of a number, in condition "{0}".</value>
     <comment>{StrBegin="MSB4086: "}</comment>
