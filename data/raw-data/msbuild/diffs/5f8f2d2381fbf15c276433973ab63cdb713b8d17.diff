diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index d6e23e760f0..9f990c846fc 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -44,11 +45,48 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
-            // Initialize FancyLoggerBuffer
-            FancyLoggerBuffer.Initialize();
-            // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            FancyLoggerBuffer.WriteNewLine(string.Empty);
-            FancyLoggerBuffer.Render();
+            
+            Task.Run(() =>
+            {
+                // Initialize FancyLoggerBuffer
+                FancyLoggerBuffer.Initialize();
+                // TODO: Fix. First line does not appear at top. Leaving empty line for now
+                FancyLoggerBuffer.WriteNewLine(string.Empty);
+                // First render
+                FancyLoggerBuffer.Render();
+                int i = 0;
+                // Rerender periodically
+                while (!FancyLoggerBuffer.IsTerminated)
+                {
+                    i++;
+                    // Delay by 1/60 seconds
+                    Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
+                    {
+                        // Rerender projects only when needed
+                        foreach (var project in projects) project.Value.Render();
+                        // Rerender buffer
+                        FancyLoggerBuffer.Render();
+                    });
+                    // Handle keyboard input
+                    if (Console.KeyAvailable)
+                    {
+                        ConsoleKey key = Console.ReadKey().Key;
+                        switch (key)
+                        {
+                            case ConsoleKey.UpArrow:
+                                if (FancyLoggerBuffer.TopLineIndex > 0) FancyLoggerBuffer.TopLineIndex--;
+                                FancyLoggerBuffer.ShouldRerender = true;
+                                break;
+                            case ConsoleKey.DownArrow:
+                                FancyLoggerBuffer.TopLineIndex++;
+                                FancyLoggerBuffer.ShouldRerender = true;
+                                break;
+                            default:
+                                break;
+                        }
+                    }
+                }
+            });
         }
 
         // Build
@@ -72,7 +110,7 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
             projects[id] = node;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
@@ -83,7 +121,7 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
             // Update line
             node.Finished = true;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         // Target
@@ -95,7 +133,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             // Update
             node.AddTarget(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
@@ -106,7 +144,7 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             // Update
             node.FinishedTargets++;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         // Task
@@ -119,7 +157,7 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             node.AddTask(e);
             existingTasks++;
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
@@ -137,7 +175,7 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             // Update
             node.AddMessage(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
@@ -148,7 +186,7 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             // Update
             node.AddWarning(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
@@ -158,7 +196,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             // Update
             node.AddError(e);
             // Log
-            node.Log();
+            node.ShouldRerender = true;
         }
 
         void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 02453838914..573a33105d7 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -6,7 +6,6 @@
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
@@ -26,6 +25,8 @@ public string Text
                 _text = value;
                 if (ShouldWrapLines) WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
                 else WrappedText = new List<string> { value };
+                // Buffer should rerender
+                FancyLoggerBuffer.ShouldRerender = true;
             }
         }
 
@@ -53,51 +54,15 @@ public class FancyLoggerBuffer
         private static List<FancyLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
-        private static bool AutoScrollEnabled = true;
-        private static bool IsTerminated = false;
+        // private static bool AutoScrollEnabled = true;
+        internal static bool IsTerminated = false;
+        internal static bool ShouldRerender = true;
         public static void Initialize()
         {
-
-            Task.Run(() =>
-            {
-                // Configure buffer, encoding and cursor
-                Console.OutputEncoding = Encoding.UTF8;
-                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
-                Console.Write(ANSIBuilder.Cursor.Invisible());
-
-                // Counter for delaying render
-                int i = 0;
-
-                // Execute while the buffer is active
-                while (!IsTerminated)
-                {
-                    // Delay by 1/60 seconds
-                    i++;
-                    Task.Delay((i/60) * 1_000).ContinueWith((t) =>
-                    {
-                        Render();
-                    });
-                    if (Console.KeyAvailable)
-                    { 
-                        // Handle keyboard input
-                        ConsoleKey key = Console.ReadKey().Key;
-                        switch (key)
-                        {
-                            case ConsoleKey.UpArrow:
-                                if (TopLineIndex > 0) TopLineIndex--;
-                                break;
-                            case ConsoleKey.DownArrow:
-                                TopLineIndex++;
-                                break;
-                            case ConsoleKey.Spacebar:
-                                AutoScrollEnabled = !AutoScrollEnabled;
-                                break;
-                            default:
-                                break;
-                        }
-                    }
-                }
-            });
+            // Configure buffer, encoding and cursor
+            Console.OutputEncoding = Encoding.UTF8;
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+            Console.Write(ANSIBuilder.Cursor.Invisible());
         }
 
         public static void Terminate()
@@ -114,7 +79,8 @@ public static void Terminate()
         #region Rendering
         public static void Render()
         {
-            if (IsTerminated) return;
+            if (IsTerminated || !ShouldRerender) return;
+            ShouldRerender = false;
             Console.Write(
                 // Write header
                 ANSIBuilder.Cursor.Home() +
@@ -127,31 +93,32 @@ public static void Render()
             if (Lines.Count == 0) return;
 
             // Iterate over lines and display on terminal
-            // TODO: Delimit range to improve performance 
+            string contents = string.Empty;
             int accumulatedLineCount = 0;
             foreach (FancyLoggerBufferLine line in Lines)
             {
+                // Continue if accum line count + next lines < scrolling area
+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {
+                    accumulatedLineCount += line.WrappedText.Count;
+                    continue;
+                }
+                // Break if exceeds scrolling area
+                if (accumulatedLineCount - TopLineIndex > Console.BufferHeight - 3) break;
                 foreach (string s in line.WrappedText) {
                     // Get line index relative to scroll area
                     int lineIndex = accumulatedLineCount - TopLineIndex;
                     // Print if line in scrolling area
-                    if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3)
-                    {
-                        Console.Write(ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s);
-                    }
+                    if (lineIndex >= 0 && lineIndex < Console.BufferHeight - 3) contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
                     accumulatedLineCount++;
                 }
             }
+            Console.Write(contents);
         }
         #endregion
         #region Line identification
         public static int GetLineIndexById(int lineId)
         {
-            for (int i = 0; i < Lines.Count; i++)
-            {
-                if (Lines[i].Id == lineId) return i;
-            }
-            return -1;
+            return Lines.FindIndex(x => x.Id == lineId);
         }
 
         public static FancyLoggerBufferLine? GetLineById(int lineId)
@@ -187,7 +154,6 @@ public static int GetLineIndexById(int lineId)
             {
                 Lines.Add(line);
             }
-            // TODO: Handle autoscrolling
             return line;
         }
 
@@ -206,15 +172,10 @@ public static int GetLineIndexById(int lineId)
         }
 
         // Update line
+        // TODO: Remove. Use line.Text instead
         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
         {
-            // Get line
-            FancyLoggerBufferLine? line = GetLineById(lineId);
-            if (line == null) return null;
-            line.Text = text;
-            // Return
-            return line;
-            // TODO: Handle autoscrolling
+            return null;
         }
 
         // Delete line
@@ -223,11 +184,9 @@ public static void DeleteLine(int lineId)
             // Get line index
             int lineIndex = GetLineIndexById(lineId);
             if (lineIndex == -1) return;
-            // Save top line
-            int topLineId = Lines[TopLineIndex].Id;
             // Delete
             Lines.RemoveAt(lineIndex);
-            // TODO: Handle autoscrolling
+            ShouldRerender = true;
         }
         #endregion
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 8a0b42dbd1c..c843369bd65 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -70,10 +70,10 @@ public string ToANSIString()
             }
         }
 
-        public void Log()
+        public void Render()
         {
             if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ToANSIString()}");
+            Line.Text = $"    └── {ToANSIString()}";
         }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index dbdc72f974c..9741d461524 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -38,6 +38,8 @@ private static string GetUnambiguousPath(string path)
         public int MessageCount = 0;
         public int WarningCount = 0;
         public int ErrorCount = 0;
+        // Bool if node should rerender
+        internal bool ShouldRerender = true;
         public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
@@ -54,8 +56,10 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
             }
         }
 
-        public void Log()
+        public void Render()
         {
+            if (!ShouldRerender) return;
+            ShouldRerender = false;
             // Project details
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(
                 // Show indicator
@@ -68,34 +72,33 @@ public void Log()
                 Console.WindowWidth
             );
             // Create or update line
-            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
-            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);
+            if (Line is null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
+            else Line.Text = lineContents;
 
             // For finished projects
             if (Finished)
             {
-                if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                if (CurrentTargetLine is not null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
                 foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
                 {
                     // Only delete high priority messages
                     if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                    if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
-                    // AdditionalDetails.Remove(node);
+                    if (node.Line is not null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
                 }
             }
 
             // Current target details
-            if (CurrentTargetNode == null) return;
+            if (CurrentTargetNode is null) return;
             string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
-            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
-            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
+            if (CurrentTargetLine is null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+            else CurrentTargetLine.Text = currentTargetLineContents;
 
             // Messages, warnings and errors
             foreach (FancyLoggerMessageNode node in AdditionalDetails)
             {
                 if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
-                node.Log();
+                if (node.Line is null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                node.Render();
             }
         }
 
