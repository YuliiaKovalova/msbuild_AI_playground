diff --git a/src/Build/BackEnd/Components/Communications/CloningExtensions.cs b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
index 1d9f55105f8..516c0f127fe 100644
--- a/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
+++ b/src/Build/BackEnd/Components/Communications/CloningExtensions.cs
@@ -11,28 +11,28 @@ namespace Microsoft.Build.BackEnd;
 
 internal static class CloningExtensions
 {
-    public static PropertyDictionary<ProjectPropertyInstance> DeepClone(
-        this PropertyDictionary<ProjectPropertyInstance> properties)
-        => new(properties.Select<ProjectPropertyInstance, ProjectPropertyInstance>(p => p.DeepClone()));
+    public static PropertyDictionary<ProjectPropertyInstance>? DeepClone(
+        this PropertyDictionary<ProjectPropertyInstance>? properties)
+        => properties == null ? null : new(properties.Select<ProjectPropertyInstance, ProjectPropertyInstance>(p => p.DeepClone()));
 
-    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
-        this IDictionary<TKey, TValue> dictionary,
+    public static Dictionary<TKey, TValue>? DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue>? dictionary,
         Func<TValue, TValue> valueClone,
         IEqualityComparer<TKey> comparer) where TKey : notnull
         => dictionary.DeepClone(null, valueClone, comparer);
 
-    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
-        this IDictionary<TKey, TValue> dictionary,
+    public static Dictionary<TKey, TValue>? DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue>? dictionary,
         Func<TKey, TKey> keyClone,
         IEqualityComparer<TKey> comparer) where TKey : notnull
         => dictionary.DeepClone(keyClone, null, comparer);
 
-    public static Dictionary<TKey, TValue> DeepClone<TKey, TValue>(
-        this IDictionary<TKey, TValue> dictionary,
+    public static Dictionary<TKey, TValue>? DeepClone<TKey, TValue>(
+        this IDictionary<TKey, TValue>? dictionary,
         Func<TKey, TKey>? keyClone,
         Func<TValue, TValue>? valueClone,
         IEqualityComparer<TKey> comparer) where TKey : notnull
-        => dictionary.ToDictionary(
+        => dictionary?.ToDictionary(
         p => (keyClone ?? Identity)(p.Key),
         p => (valueClone ?? Identity)(p.Value),
         comparer);
diff --git a/src/Build/Definition/SubToolset.cs b/src/Build/Definition/SubToolset.cs
index c74a75fdd13..aeee55666cf 100644
--- a/src/Build/Definition/SubToolset.cs
+++ b/src/Build/Definition/SubToolset.cs
@@ -51,7 +51,7 @@ private SubToolset(ITranslator translator)
         }
 
         internal SubToolset DeepClone()
-            => new SubToolset(_subToolsetVersion, _properties.DeepClone());
+            => new SubToolset(_subToolsetVersion, _properties?.DeepClone());
 
         /// <summary>
         /// VisualStudioVersion that corresponds to this subtoolset
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 1804d2bafa9..7e73a3cba32 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -566,7 +566,7 @@ internal ProjectInstance(Evaluation.Project.Data data, string directory, string
             // If the task registry uses toolset identical to the one in data instance - deep clone it just once.
             this.Toolset = data.TaskRegistry?.Toolset == data.Toolset
                 ? this.TaskRegistry?.Toolset
-                : data.Toolset.DeepClone();
+                : data.Toolset?.DeepClone();
 
             this.ProjectRootElementCache = data.Project.ProjectCollection.ProjectRootElementCache;
 
@@ -649,7 +649,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
                 // If the task registry uses toolset identical to the one in project instance - deep clone it just once.
                 this.Toolset = that.TaskRegistry?.Toolset == that.Toolset
                     ? this.TaskRegistry?.Toolset
-                    : that.Toolset.DeepClone();
+                    : that.Toolset?.DeepClone();
                 this.SubToolsetVersion = that.SubToolsetVersion;
                 _targets = that._targets;
                 _itemDefinitions = that._itemDefinitions;
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index ef69ad2dafc..cf9cd8647f6 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1779,8 +1779,8 @@ public RegisteredTaskRecord DeepClone()
                     // AssemblyLoadInfo is immutable, so we can just copy the reference
                     _taskFactoryAssemblyLoadInfo = _taskFactoryAssemblyLoadInfo,
                     _taskFactory = _taskFactory,
-                    _parameterGroupAndTaskBody = _parameterGroupAndTaskBody.DeepClone(),
-                    _taskFactoryParameters = new Dictionary<string, string>(_taskFactoryParameters)
+                    _parameterGroupAndTaskBody = _parameterGroupAndTaskBody?.DeepClone(),
+                    _taskFactoryParameters = _taskFactoryParameters == null ? null : new Dictionary<string, string>(_taskFactoryParameters)
                 };
 
             public void Translate(ITranslator translator)
@@ -1812,9 +1812,9 @@ internal static RegisteredTaskRecord FactoryForDeserialization(ITranslator trans
         public TaskRegistry DeepClone()
             => new()
             {
-                _toolset = _toolset.DeepClone(),
-                _taskRegistrations = this._taskRegistrations?.DeepClone(
-                    v => v.Select(i => i.DeepClone()).ToList(),
+                _toolset = _toolset?.DeepClone(),
+                _taskRegistrations = this._taskRegistrations.DeepClone(
+                    v => v?.Select(i => i.DeepClone())?.ToList(),
                     RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact)
             };
 
