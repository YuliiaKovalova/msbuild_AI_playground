diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 502898ede3b..11f068342c4 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2020,10 +2020,10 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
 
         internal bool CreateRarNode()
         {
-            //// If the _buildParametrs is not set, we are in OutOfProc mode, so continue
-            //// Else check if users specified that he want to use multiple nodes, if so use RARaaS
-            //if (_buildParameters?.MaxNodeCount == 1)
-            //    return false;
+            // If the _buildParametrs is not set, we are in OutOfProc mode, so continue
+            // Else check if users specified that he want to use multiple nodes, if so use RARaaS
+            if (_buildParameters?.MaxNodeCount == 1)
+                return false;
 
 
             string nodeLocation = _buildParameters?.NodeExeLocation ?? BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 569c244ae97..d3ee7225b04 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -425,13 +425,13 @@ public void ResolveAssemblyReferenceNodeConnectStop()
         }
 
         [Event(58)]
-        internal void RARaaSStart()
+        internal void ResolveAssemblyReferenceServiceRequestStart()
         {
             WriteEvent(58);
         }
 
         [Event(59)]
-        internal void RARaaSStop()
+        internal void ResolveAssemblyReferenceServiceRequestStop()
         {
             WriteEvent(59);
         }
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index eaccd4c6d16..3ab08be6f70 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -489,8 +489,6 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
             return obj;
         }
 
-
-
         bool IRarBuildEngine.CreateRarNode()
         {
             throw new NotSupportedException("RAR node should be created before executing test");
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
index d081ed59c27..028bb58ae25 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
@@ -58,9 +58,8 @@ public void EnsureOutputPropertiesMatch()
                 inputProperties.ShouldContain(item);
             }
         }
-
         [Fact]
-        public void TransferedRequestEquals()
+        public void TransferredRequestEquals()
         {
             ITaskItem[] assemblyNames = new TaskItem[]
             {
@@ -72,7 +71,7 @@ public void TransferedRequestEquals()
                 Assemblies = assemblyNames
             };
 
-            MessagePackSerializerOptions options = MessagePackSerializerOptions.Standard.WithResolver(ResolveAssemlyReferneceResolver.Instance);
+            MessagePackSerializerOptions options = MessagePackSerializerOptions.Standard.WithResolver(ResolveAssemblyReferneceResolver.Instance);
 
             ResolveAssemblyReferenceRequest request = new ResolveAssemblyReferenceRequest(rar.ResolveAssemblyReferenceInput);
             byte[] data = MessagePackSerializer.Serialize(request, options);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 917b6fd08d5..d1fe413dfbb 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -29,7 +29,7 @@ public class ResolveAssemblyReferenceTestFixture : IDisposable
         /// <summary>
         /// Determines if <see cref="Execute(ResolveAssemblyReference, bool, RARSimulationMode)"/> should use RARaaS
         /// </summary>
-        private const bool UseRARaaS = false;
+        private const bool UseRARaaS = true;
 
         // Create the mocks.
         internal static Microsoft.Build.Shared.FileExists fileExists = new Microsoft.Build.Shared.FileExists(FileExists);
@@ -2989,7 +2989,6 @@ public void Dispose()
             public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
             {
                 return System.Threading.Tasks.Task.FromResult(Execute(input));
-
             }
 
             internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest input)
@@ -3003,14 +3002,9 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
 
                 task.ResolveAssemblyReferenceInput = taskInput;
                 bool taskResult = ExecuteRarTask(task);
-                ResolveAssemblyReferenceResult result = new ResolveAssemblyReferenceResult(taskResult, task.ResolveAssemblyReferenceOutput, task.ResolveAssemblyReferenceInput)
+                ResolveAssemblyReferenceResult result = new ResolveAssemblyReferenceResult(taskResult, task.ResolveAssemblyReferenceOutput)
                 {
-                    CustomBuildEvents = buildEngine.CustomBuildEvent,
-                    BuildMessageEvents = buildEngine.MessageBuildEvent,
-                    BuildWarningEvents = buildEngine.WarningBuildEvent,
-                    BuildErrorEvents = buildEngine.ErrorBuildEvent,
-
-                    EventCount = buildEngine.EventCount
+                    BuildEvents = buildEngine.BuildEvents
                 };
 
                 return result;
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index 19804253ce7..23ccac23cb2 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -23,9 +23,9 @@ internal class CandidateAssemblyFilesResolver : Resolver
         /// Construct.
         /// </summary>
         /// <param name="candidateAssemblyFiles">List of literal assembly file names to be considered when SearchPaths has {CandidateAssemblyFiles}.</param>
-        /// <param name="searchPathElement">The corresponding element from the search path.</param>	    
-        /// <param name="getAssemblyName">Delegate that gets the assembly name.</param>	        
-        /// <param name="fileExists">Delegate that returns if the file exists.</param>	        
+        /// <param name="searchPathElement">The corresponding element from the search path.</param>
+        /// <param name="getAssemblyName">Delegate that gets the assembly name.</param>
+        /// <param name="fileExists">Delegate that returns if the file exists.</param>
         /// <param name="getRuntimeVersion">Delegate that returns the clr runtime version for the file.</param>
         /// <param name="targetedRuntimeVesion">The targeted runtime version.</param>
         public CandidateAssemblyFilesResolver(string[] candidateAssemblyFiles, string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion)
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index b86fe971f62..c85dcc3ac99 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -188,7 +188,7 @@ internal sealed class ReferenceTable
         /// <param name="assemblyMetadataCache">Cache of metadata already read from paths.</param>
         /// <param name="allowedAssemblyExtensions"></param>
         /// <param name="getRuntimeVersion"></param>
-        /// /// <param name="getRootedPath">Get absolute path from relative one.</param>
+        /// <param name="getRootedPath">Get absolute path from relative one.</param>
         /// <param name="targetedRuntimeVersion">Version of the runtime to target.</param>
         /// <param name="projectTargetFramework">Version of the framework targeted by the project.</param>
         /// <param name="targetFrameworkMoniker">Target framework moniker we are targeting.</param>
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index d17c6e75af7..d070e63707d 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -3137,14 +3137,11 @@ public override bool Execute()
                 if (connected)
                 {
                     // Client is connected to the RAR node, we can execute RAR task remotely
-                    MSBuildEventSource.Log.RARaaSStart();
+                    MSBuildEventSource.Log.ResolveAssemblyReferenceServiceRequestStart();
                     ResolveAssemblyReferenceResult result = client.Execute(ResolveAssemblyReferenceInput);
-                    MSBuildEventSource.Log.RARaaSStop();
+                    MSBuildEventSource.Log.ResolveAssemblyReferenceServiceRequestStop();
                     ResolveAssemblyReferenceOutput = result.Output;
-                    LogEvents(result.BuildWarningEvents);
-                    LogEvents(result.BuildMessageEvents);
-                    LogEvents(result.BuildErrorEvents);
-                    LogEvents(result.CustomBuildEvents);
+                    LogEvents(result.BuildEvents);
                     return result.TaskResult;
                 }
             }
@@ -3171,7 +3168,7 @@ public override bool Execute()
             );
         }
 
-        private void LogEvents(IEnumerable<LazyFormattedBuildEventArgs> buildEventArgs)
+        private void LogEvents(IEnumerable<BuildEventArgs> buildEventArgs)
         {
             if (buildEventArgs == null)
             {
@@ -3236,7 +3233,7 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceTaskInpu
                 new ReadMachineTypeFromPEHeader(ReferenceTable.ReadMachineTypeFromPEHeader),
                 (path) =>
                 {
-                    if(Path.IsPathRooted(path))
+                    if (Path.IsPathRooted(path))
                     {
                         return FileUtilities.NormalizePath(path);
                     }
@@ -3245,7 +3242,7 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceTaskInpu
                 }
             );
 
-            return new ResolveAssemblyReferenceResult(result, ResolveAssemblyReferenceOutput, ResolveAssemblyReferenceInput);
+            return new ResolveAssemblyReferenceResult(result, ResolveAssemblyReferenceOutput);
         }
         #endregion
     }
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 0b7f6dbbb9b..9bf2b418821 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -361,14 +361,14 @@
     <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceRequestFormatter.cs" />
     <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceResponseFormatter.cs" />
     <Compile Include="ResolveAssemblyReferences\Formatters\ResolveAssemblyReferenceResultFormatter.cs" />
-    <Compile Include="ResolveAssemblyReferences\ResolveAssemlyReferneceResolver.cs" />
+    <Compile Include="ResolveAssemblyReferences\ResolveAssemblyReferneceResolver.cs" />
     <Compile Include="ResolveAssemblyReferences\RpcUtils.cs" />
     <Compile Include="ResolveAssemblyReferences\Server\RarController.cs" />
     <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceBuildEngine.cs" />
     <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceComparer.cs" />
     <Compile Include="ResolveAssemblyReferences\Server\ServerMutex.cs" />
     <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceHandler.cs" />
-    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemlyReferenceCacheHandler.cs" />
+    <Compile Include="ResolveAssemblyReferences\Services\ResolveAssemblyReferenceCacheHandler.cs" />
     <Compile Include="ResolveComReference.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
index f4a08eb3358..565f4f83dd7 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResult.cs
@@ -13,31 +13,18 @@ public ResolveAssemblyReferenceResult()
         {
         }
 
-        internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenceTaskOutput output, ResolveAssemblyReferenceTaskInput input)
+        internal ResolveAssemblyReferenceResult(bool taskResult, ResolveAssemblyReferenceTaskOutput output)
         {
             TaskResult = taskResult;
             Response = new ResolveAssemblyReferenceResponse(output);
-            Request = new ResolveAssemblyReferenceRequest(input);
         }
 
         public bool TaskResult { get; set; }
 
         public ResolveAssemblyReferenceResponse Response { get; set; }
 
-        public int EventCount { get; set; }
-
-        public List<CustomBuildEventArgs> CustomBuildEvents { get; set; }
-
-        public List<BuildErrorEventArgs> BuildErrorEvents { get; set; }
-
-        public List<BuildMessageEventArgs> BuildMessageEvents { get; set; }
-
-        public List<BuildWarningEventArgs> BuildWarningEvents { get; set; }
-
-        public ResolveAssemblyReferenceRequest Request { get; set; }
+        public List<BuildEventArgs> BuildEvents { get; set; }
 
         internal ResolveAssemblyReferenceTaskOutput Output => new ResolveAssemblyReferenceTaskOutput(Response);
-
-        internal ResolveAssemblyReferenceTaskInput InputOutput => new ResolveAssemblyReferenceTaskInput(Request);
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Formatters/BuildEventArgsFormatter.cs b/src/Tasks/ResolveAssemblyReferences/Formatters/BuildEventArgsFormatter.cs
index 106ebb9f9bf..02272e30cc4 100644
--- a/src/Tasks/ResolveAssemblyReferences/Formatters/BuildEventArgsFormatter.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Formatters/BuildEventArgsFormatter.cs
@@ -9,7 +9,7 @@
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences
 {
     internal sealed class BuildEventArgsFormatter
-        : IMessagePackFormatter<BuildErrorEventArgs>, IMessagePackFormatter<BuildWarningEventArgs>, IMessagePackFormatter<BuildMessageEventArgs>,
+        : IMessagePackFormatter<BuildEventArgs>, IMessagePackFormatter<BuildErrorEventArgs>, IMessagePackFormatter<BuildWarningEventArgs>, IMessagePackFormatter<BuildMessageEventArgs>,
          IMessagePackFormatter<CustomBuildEventArgs>, IMessagePackFormatter<ExternalProjectStartedEventArgs>, IMessagePackFormatter<ExternalProjectFinishedEventArgs>
     {
 
@@ -17,6 +17,7 @@ internal sealed class BuildEventArgsFormatter
 
         private BuildEventArgsFormatter() { }
 
+        #region BuildWarningEventArgs
         BuildWarningEventArgs IMessagePackFormatter<BuildWarningEventArgs>.Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
         {
             if (reader.TryReadNil())
@@ -116,7 +117,9 @@ void IMessagePackFormatter<BuildWarningEventArgs>.Serialize(ref MessagePackWrite
             writer.Write(value.File);
             writer.Write(value.Subcategory);
         }
+        #endregion
 
+        #region BuildErrorEventArgs
         BuildErrorEventArgs IMessagePackFormatter<BuildErrorEventArgs>.Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
         {
             if (reader.TryReadNil())
@@ -194,7 +197,6 @@ BuildErrorEventArgs IMessagePackFormatter<BuildErrorEventArgs>.Deserialize(ref M
             return buildEvent;
         }
 
-
         void IMessagePackFormatter<BuildErrorEventArgs>.Serialize(ref MessagePackWriter writer, BuildErrorEventArgs value, MessagePackSerializerOptions options)
         {
             if (value == null)
@@ -215,7 +217,9 @@ void IMessagePackFormatter<BuildErrorEventArgs>.Serialize(ref MessagePackWriter
             writer.Write(value.File);
             writer.Write(value.Subcategory);
         }
+        #endregion
 
+        #region BuildMessageEventArgs
         BuildMessageEventArgs IMessagePackFormatter<BuildMessageEventArgs>.Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
         {
             if (reader.TryReadNil())
@@ -321,7 +325,9 @@ void IMessagePackFormatter<BuildMessageEventArgs>.Serialize(ref MessagePackWrite
             writer.Write(value.Subcategory);
             writer.Write(importance);
         }
+        #endregion
 
+        #region CustomBuildEventArgs
         CustomBuildEventArgs IMessagePackFormatter<CustomBuildEventArgs>.Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
         {
             if (reader.TryReadNil())
@@ -509,126 +515,70 @@ void IMessagePackFormatter<ExternalProjectFinishedEventArgs>.Serialize(ref Messa
             writer.Write(value.ProjectFile);
             writer.Write(value.Succeeded);
         }
+        #endregion
+
+        BuildEventArgs IMessagePackFormatter<BuildEventArgs>.Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
+        {
+            if (reader.TryReadNil())
+            {
+                return null;
+            }
+
+            options.Security.DepthStep(ref reader);
+            int _ = reader.ReadArrayHeader();
+            int customType = reader.ReadInt32();
+            BuildEventArgs buildEvent = customType switch
+            {
+                1 => (this as IMessagePackFormatter<BuildErrorEventArgs>).Deserialize(ref reader, options),
+                2 => (this as IMessagePackFormatter<BuildWarningEventArgs>).Deserialize(ref reader, options),
+                3 => (this as IMessagePackFormatter<BuildMessageEventArgs>).Deserialize(ref reader, options),
+                4 => (this as IMessagePackFormatter<CustomBuildEventArgs>).Deserialize(ref reader, options),
+                _ => null
+            };
+            reader.Depth--;
+
+            ErrorUtilities.VerifyThrowInternalNull(buildEvent, nameof(buildEvent));
+
+            return buildEvent;
+        }
+
+        void IMessagePackFormatter<BuildEventArgs>.Serialize(ref MessagePackWriter writer, BuildEventArgs value, MessagePackSerializerOptions options)
+        {
+            if (value == null)
+            {
+                writer.WriteNil();
+                return;
+            }
 
+            int customType = value switch
+            {
+                BuildErrorEventArgs _ => 1,
+                BuildWarningEventArgs _ => 2,
+                BuildMessageEventArgs _ => 3,
+                CustomBuildEventArgs _ => 4,
+                _ => 0
+            };
 
-        //private abstract class Formatter<TArg> : IMessagePackFormatter<TArg> where TArg : BuildEventArgs
-        //{
-        //    public TArg Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
-        //    {
-        //        ReadOnlySequence<byte>? buffer = reader.ReadBytes();
-
-        //        if (!buffer.HasValue)
-        //        {
-        //            return null;
-        //        }
-
-        //        try
-        //        {
-        //            BinaryReader binaryReader = new BinaryReader(buffer.Value.AsStream());
-        //            TArg arg = GetEventArgInstance();
-        //            // We are communicating with current MSBuild RAR node, if not something is really wrong
-        //            arg.CreateFromStream(binaryReader, int.MaxValue);
-        //            return arg;
-        //        }
-        //        catch (Exception)
-        //        {
-        //            return null;
-        //        }
-        //    }
-
-        //    public void Serialize(ref MessagePackWriter writer, TArg value, MessagePackSerializerOptions options)
-        //    {
-        //        if (value is null)
-        //        {
-        //            writer.Write((byte[])null);
-        //            return;
-        //        }
-
-        //        using MemoryStream stream = new MemoryStream();
-        //        using BinaryWriter binaryWriter = new BinaryWriter(stream);
-
-        //        value.WriteToStream(binaryWriter);
-        //        writer.Write(stream.ToArray());
-        //    }
-
-        //    protected abstract TArg GetEventArgInstance();
-        //}
-
-        //private sealed class BuildError : Formatter<BuildErrorEventArgs>, IMessagePackFormatter<BuildErrorEventArgs>
-        //{
-        //    protected override BuildErrorEventArgs GetEventArgInstance() => new BuildErrorEventArgs();
-        //}
-
-        //private sealed class BuildMessage : Formatter<BuildMessageEventArgs>, IMessagePackFormatter<BuildMessageEventArgs>
-        //{
-        //    protected override BuildMessageEventArgs GetEventArgInstance() => new BuildMessageEventArgs();
-        //}
-
-        //private sealed class BuildWarning : Formatter<BuildWarningEventArgs>, IMessagePackFormatter<BuildWarningEventArgs>
-        //{
-        //    protected override BuildWarningEventArgs GetEventArgInstance() => new BuildWarningEventArgs();
-        //}
-
-        //private sealed class Custom : IMessagePackFormatter<CustomBuildEventArgs>
-        //{
-        //    private static IMessagePackFormatter<ExternalProjectFinishedEventArgs> ExternalProjectFinishedFormatter = new ExternalProjectFinished();
-        //    private static IMessagePackFormatter<ExternalProjectStartedEventArgs> ExternalProjectStartedFormatter = new ExternalProjectStarted();
-
-        //    public CustomBuildEventArgs Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
-        //    {
-        //        ushort formatter = reader.ReadUInt16();
-
-        //        switch (formatter)
-        //        {
-        //            case 1:
-        //                return ExternalProjectStartedFormatter.Deserialize(ref reader, options);
-        //            case 2:
-        //                return ExternalProjectFinishedFormatter.Deserialize(ref reader, options);
-        //            default:
-        //                ErrorUtilities.ThrowInternalError("Unexpected formatter id");
-        //                return null; // Never hits...
-        //        }
-        //    }
-
-        //    public void Serialize(ref MessagePackWriter writer, CustomBuildEventArgs value, MessagePackSerializerOptions options)
-        //    {
-        //        ushort formatterId = value switch
-        //        {
-        //            ExternalProjectStartedEventArgs _ => 1,
-        //            ExternalProjectFinishedEventArgs _ => 2,
-        //            _ => 0
-        //        };
-
-        //        if (formatterId == 0)
-        //        {
-        //            ErrorUtilities.ThrowArgumentOutOfRange(nameof(value));
-        //        }
-
-        //        writer.WriteUInt16(formatterId);
-
-        //        switch (formatterId)
-        //        {
-        //            case 1:
-        //                ExternalProjectStartedFormatter.Serialize(ref writer, value as ExternalProjectStartedEventArgs, options);
-        //                break;
-        //            case 2:
-        //                ExternalProjectFinishedFormatter.Serialize(ref writer, value as ExternalProjectFinishedEventArgs, options);
-        //                break;
-        //            default:
-        //                ErrorUtilities.ThrowInternalErrorUnreachable();
-        //                break;
-        //        }
-        //    }
-
-        //    private class ExternalProjectFinished : Formatter<ExternalProjectFinishedEventArgs>, IMessagePackFormatter<ExternalProjectFinishedEventArgs>
-        //    {
-        //        protected override ExternalProjectFinishedEventArgs GetEventArgInstance() => new ExternalProjectFinishedEventArgs();
-        //    }
-
-        //    private class ExternalProjectStarted : Formatter<ExternalProjectStartedEventArgs>, IMessagePackFormatter<ExternalProjectStartedEventArgs>
-        //    {
-        //        protected override ExternalProjectStartedEventArgs GetEventArgInstance() => new ExternalProjectStartedEventArgs();
-        //    }
-        //}
+            writer.WriteArrayHeader(2);
+            writer.WriteInt32(customType);
+            switch (customType)
+            {
+                case 1:
+                    (this as IMessagePackFormatter<BuildErrorEventArgs>).Serialize(ref writer, value as BuildErrorEventArgs, options);
+                    break;
+                case 2:
+                    (this as IMessagePackFormatter<BuildWarningEventArgs>).Serialize(ref writer, value as BuildWarningEventArgs, options);
+                    break;
+                case 3:
+                    (this as IMessagePackFormatter<BuildMessageEventArgs>).Serialize(ref writer, value as BuildMessageEventArgs, options);
+                    break;
+                case 4:
+                    (this as IMessagePackFormatter<CustomBuildEventArgs>).Serialize(ref writer, value as CustomBuildEventArgs, options);
+                    break;
+                default:
+                    ErrorUtilities.ThrowInternalError("Unexpected formatter id");
+                    break;
+            }
+        }
     }
 }
diff --git a/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResponseFormatter.cs b/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResponseFormatter.cs
index 98a0cebd9db..db22bbb5861 100644
--- a/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResponseFormatter.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResponseFormatter.cs
@@ -29,8 +29,6 @@ public void Serialize(ref MessagePackWriter writer, ResolveAssemblyReferenceResp
             formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Serialize(ref writer, value.ScatterFiles, options);
             formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Serialize(ref writer, value.SerializationAssemblyFiles, options);
             formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Serialize(ref writer, value.SuggestedRedirects, options);
-            //formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Serialize(ref writer, value.Assemblies, options);
-            //formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Serialize(ref writer, value.AssemblyFiles, options);
         }
 
         public ResolveAssemblyReferenceResponse Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
@@ -54,8 +52,6 @@ public ResolveAssemblyReferenceResponse Deserialize(ref MessagePackReader reader
             ReadOnlyTaskItem[] scatterFiles = default;
             ReadOnlyTaskItem[] serializationAssemblyFiles = default;
             ReadOnlyTaskItem[] suggestedRedirects = default;
-            //ReadOnlyTaskItem[] assemblies = default;
-            //ReadOnlyTaskItem[] assemblyFiles = default;
 
             for (int i = 0; i < length; i++)
             {
@@ -96,12 +92,6 @@ public ResolveAssemblyReferenceResponse Deserialize(ref MessagePackReader reader
                     case 10:
                         suggestedRedirects = formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Deserialize(ref reader, options);
                         break;
-                    //case 11:
-                    //    assemblies = formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Deserialize(ref reader, options);
-                    //    break;
-                    //case 12:
-                    //    assemblyFiles = formatterResolver.GetFormatter<ReadOnlyTaskItem[]>().Deserialize(ref reader, options);
-                    //    break;
                     default:
                         reader.Skip();
                         break;
@@ -121,8 +111,6 @@ public ResolveAssemblyReferenceResponse Deserialize(ref MessagePackReader reader
                 ScatterFiles = scatterFiles,
                 SerializationAssemblyFiles = serializationAssemblyFiles,
                 SuggestedRedirects = suggestedRedirects,
-                //Assemblies = assemblies,
-                //AssemblyFiles = assemblyFiles
             };
             reader.Depth--;
             return result;
diff --git a/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResultFormatter.cs b/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResultFormatter.cs
index 6c228b71844..1093f33c70f 100644
--- a/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResultFormatter.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Formatters/ResolveAssemblyReferenceResultFormatter.cs
@@ -20,15 +20,10 @@ public void Serialize(ref MessagePackWriter writer, ResolveAssemblyReferenceResu
             }
 
             IFormatterResolver formatterResolver = options.Resolver;
-            writer.WriteArrayHeader(8);
-            writer.Write(value.TaskResult);
+            writer.WriteArrayHeader(3);
+            formatterResolver.GetFormatter<List<BuildEventArgs>>().Serialize(ref writer, value.BuildEvents, options);
             formatterResolver.GetFormatter<ResolveAssemblyReferenceResponse>().Serialize(ref writer, value.Response, options);
-            writer.Write(value.EventCount);
-            formatterResolver.GetFormatter<List<CustomBuildEventArgs>>().Serialize(ref writer, value.CustomBuildEvents, options);
-            formatterResolver.GetFormatter<List<BuildErrorEventArgs>>().Serialize(ref writer, value.BuildErrorEvents, options);
-            formatterResolver.GetFormatter<List<BuildMessageEventArgs>>().Serialize(ref writer, value.BuildMessageEvents, options);
-            formatterResolver.GetFormatter<List<BuildWarningEventArgs>>().Serialize(ref writer, value.BuildWarningEvents, options);
-            formatterResolver.GetFormatter<ResolveAssemblyReferenceRequest>().Serialize(ref writer, value.Request, options);
+            writer.Write(value.TaskResult);
         }
 
         public ResolveAssemblyReferenceResult Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
@@ -41,13 +36,8 @@ public ResolveAssemblyReferenceResult Deserialize(ref MessagePackReader reader,
             options.Security.DepthStep(ref reader);
             IFormatterResolver formatterResolver = options.Resolver;
             int length = reader.ReadArrayHeader();
-            List<BuildErrorEventArgs> buildErrorEvents = default;
-            List<BuildMessageEventArgs> buildMessageEvents = default;
-            List<BuildWarningEventArgs> buildWarningEvents = default;
-            List<CustomBuildEventArgs> customBuildEvents = default;
-            int eventCount = default;
+            List<BuildEventArgs> buildEvents = default;
             ResolveAssemblyReferenceResponse response = default;
-            ResolveAssemblyReferenceRequest request = default;
             bool taskResult = default;
 
             for (int i = 0; i < length; i++)
@@ -56,29 +46,14 @@ public ResolveAssemblyReferenceResult Deserialize(ref MessagePackReader reader,
 
                 switch (key)
                 {
-                    case 4:
-                        buildErrorEvents = formatterResolver.GetFormatter<List<BuildErrorEventArgs>>().Deserialize(ref reader, options);
-                        break;
-                    case 5:
-                        buildMessageEvents = formatterResolver.GetFormatter<List<BuildMessageEventArgs>>().Deserialize(ref reader, options);
-                        break;
-                    case 6:
-                        buildWarningEvents = formatterResolver.GetFormatter<List<BuildWarningEventArgs>>().Deserialize(ref reader, options);
-                        break;
-                    case 3:
-                        customBuildEvents = formatterResolver.GetFormatter<List<CustomBuildEventArgs>>().Deserialize(ref reader, options);
-                        break;
                     case 2:
-                        eventCount = reader.ReadInt32();
+                        taskResult = reader.ReadBoolean();
                         break;
                     case 1:
                         response = formatterResolver.GetFormatter<ResolveAssemblyReferenceResponse>().Deserialize(ref reader, options);
                         break;
-                    case 7:
-                        request = formatterResolver.GetFormatter<ResolveAssemblyReferenceRequest>().Deserialize(ref reader, options);
-                        break;
                     case 0:
-                        taskResult = reader.ReadBoolean();
+                        buildEvents = formatterResolver.GetFormatter<List<BuildEventArgs>>().Deserialize(ref reader, options);
                         break;
                     default:
                         reader.Skip();
@@ -88,14 +63,9 @@ public ResolveAssemblyReferenceResult Deserialize(ref MessagePackReader reader,
 
             ResolveAssemblyReferenceResult result = new ResolveAssemblyReferenceResult
             {
-                BuildErrorEvents = buildErrorEvents,
-                BuildMessageEvents = buildMessageEvents,
-                BuildWarningEvents = buildWarningEvents,
-                CustomBuildEvents = customBuildEvents,
-                EventCount = eventCount,
-                Response = response,
                 TaskResult = taskResult,
-                Request = request
+                Response = response,
+                BuildEvents = buildEvents
             };
             reader.Depth--;
             return result;
diff --git a/src/Tasks/ResolveAssemblyReferences/ResolveAssemlyReferneceResolver.cs b/src/Tasks/ResolveAssemblyReferences/ResolveAssemblyReferneceResolver.cs
similarity index 50%
rename from src/Tasks/ResolveAssemblyReferences/ResolveAssemlyReferneceResolver.cs
rename to src/Tasks/ResolveAssemblyReferences/ResolveAssemblyReferneceResolver.cs
index 617489fbac7..397d22724dc 100644
--- a/src/Tasks/ResolveAssemblyReferences/ResolveAssemlyReferneceResolver.cs
+++ b/src/Tasks/ResolveAssemblyReferences/ResolveAssemblyReferneceResolver.cs
@@ -11,9 +11,9 @@
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences
 {
-    internal sealed class ResolveAssemlyReferneceResolver : IFormatterResolver
+    internal sealed class ResolveAssemblyReferneceResolver : IFormatterResolver
     {
-        public static readonly IFormatterResolver Instance = new ResolveAssemlyReferneceResolver();
+        public static readonly IFormatterResolver Instance = new ResolveAssemblyReferneceResolver();
 
         public IMessagePackFormatter<T> GetFormatter<T>()
         {
@@ -32,22 +32,7 @@ static FormatterCache()
                     Formatter = (IMessagePackFormatter<T>)f;
                     return;
                 }
-                else if (typeof(T) == typeof(BuildMessageEventArgs))
-                {
-                    Formatter = (IMessagePackFormatter<T>)BuildEventArgsFormatter.Instance;
-                    return;
-                }
-                else if (typeof(T) == typeof(BuildErrorEventArgs))
-                {
-                    Formatter = (IMessagePackFormatter<T>)BuildEventArgsFormatter.Instance;
-                    return;
-                }
-                else if (typeof(T) == typeof(BuildWarningEventArgs))
-                {
-                    Formatter = (IMessagePackFormatter<T>)BuildEventArgsFormatter.Instance;
-                    return;
-                }
-                else if (typeof(T) == typeof(CustomBuildEventArgs))
+                else if (typeof(T) == typeof(BuildEventArgs))
                 {
                     Formatter = (IMessagePackFormatter<T>)BuildEventArgsFormatter.Instance;
                     return;
@@ -66,16 +51,13 @@ static GeneratedResolverGetFormatterHelper()
             {
                 { typeof(ReadOnlyTaskItem[]), 0 },
                 { typeof(Dictionary<string, string>), 1 },
-                { typeof(List<BuildErrorEventArgs>), 2 },
-                { typeof(List<BuildMessageEventArgs>), 3 },
-                { typeof(List<BuildWarningEventArgs>), 4 },
-                { typeof(List<CustomBuildEventArgs>), 5 },
-                { typeof(ReadOnlyTaskItem), 6 },
-                { typeof(ResolveAssemblyReferenceRequest), 7 },
-                { typeof(ResolveAssemblyReferenceResponse), 8 },
-                { typeof(ResolveAssemblyReferenceResult), 9 },
-                { typeof(string[]), 10 },
-                { typeof(string), 11 },
+                { typeof(List<BuildEventArgs>), 2 },
+                { typeof(ReadOnlyTaskItem), 3 },
+                { typeof(ResolveAssemblyReferenceRequest), 4 },
+                { typeof(ResolveAssemblyReferenceResponse), 5 },
+                { typeof(ResolveAssemblyReferenceResult), 6 },
+                { typeof(string[]), 7 },
+                { typeof(string), 8 },
             };
         }
 
@@ -90,16 +72,13 @@ internal static object GetFormatter(Type t)
             {
                 0 => new ArrayFormatter<ReadOnlyTaskItem>(),
                 1 => new DictionaryFormatter<string, string>(),
-                2 => new ListFormatter<BuildErrorEventArgs>(),
-                3 => new ListFormatter<BuildMessageEventArgs>(),
-                4 => new ListFormatter<BuildWarningEventArgs>(),
-                5 => new ListFormatter<CustomBuildEventArgs>(),
-                6 => new ReadOnlyTaskItemFormatter(),
-                7 => new ResolveAssemblyReferenceRequestFormatter(),
-                8 => new ResolveAssemblyReferenceResponseFormatter(),
-                9 => new ResolveAssemblyReferenceResultFormatter(),
-                10 => NullableStringArrayFormatter.Instance,
-                11 => NullableStringFormatter.Instance,
+                2 => new ListFormatter<BuildEventArgs>(),
+                3 => new ReadOnlyTaskItemFormatter(),
+                4 => new ResolveAssemblyReferenceRequestFormatter(),
+                5 => new ResolveAssemblyReferenceResponseFormatter(),
+                6 => new ResolveAssemblyReferenceResultFormatter(),
+                7 => NullableStringArrayFormatter.Instance,
+                8 => NullableStringFormatter.Instance,
                 _ => null,
             };
         }
diff --git a/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs b/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
index 56f3fce42be..a2136b55e3e 100644
--- a/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
+++ b/src/Tasks/ResolveAssemblyReferences/RpcUtils.cs
@@ -22,7 +22,7 @@ internal static class RpcUtils
 
         static RpcUtils()
         {
-            _resolver = ResolveAssemlyReferneceResolver.Instance;
+            _resolver = ResolveAssemblyReferneceResolver.Instance;
             _options = MessagePackSerializerOptions.Standard.WithResolver(_resolver);
         }
 
diff --git a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
index 9510cf73e2c..77a5108b8d9 100644
--- a/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Server/RarController.cs
@@ -75,7 +75,7 @@ public RarController(
                   validateHandshakeCallback,
                   timeout: timeout,
                   resolveAssemblyReferenceTaskHandler:
-                      new ResolveAssemlyReferenceCacheHandler(
+                      new ResolveAssemblyReferenceCacheHandler(
                       new ResolveAssemblyReferenceHandler()))
         {
         }
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
index ef8f739355f..030a87faca4 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceBuildEngine.cs
@@ -10,11 +10,7 @@ namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
     internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine
     {
-        internal int EventCount => CustomBuildEvent.Count + MessageBuildEvent.Count + WarningBuildEvent.Count + ErrorBuildEvent.Count;
-        internal List<CustomBuildEventArgs> CustomBuildEvent { get; } = new List<CustomBuildEventArgs>();
-        internal List<BuildMessageEventArgs> MessageBuildEvent { get; } = new List<BuildMessageEventArgs>();
-        internal List<BuildWarningEventArgs> WarningBuildEvent { get; } = new List<BuildWarningEventArgs>();
-        internal List<BuildErrorEventArgs> ErrorBuildEvent { get; } = new List<BuildErrorEventArgs>();
+        internal List<BuildEventArgs> BuildEvents { get; } = new List<BuildEventArgs>();
 
         public bool AllowFailureWithoutError { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
 
@@ -31,17 +27,17 @@ internal sealed class ResolveAssemblyReferenceBuildEngine : IBuildEngine
        
         public void LogCustomEvent(CustomBuildEventArgs e)
         {
-            CustomBuildEvent.Add(e);
+            BuildEvents.Add(e);
         }
 
         public void LogErrorEvent(BuildErrorEventArgs e)
         {
-            ErrorBuildEvent.Add(e);
+            BuildEvents.Add(e);
         }
 
         public void LogMessageEvent(BuildMessageEventArgs e)
         {
-            MessageBuildEvent.Add(e);
+            BuildEvents.Add(e);
         }
 
         public void LogTelemetry(string eventName, IDictionary<string, string> properties)
@@ -51,7 +47,7 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie
 
         public void LogWarningEvent(BuildWarningEventArgs e)
         {
-            WarningBuildEvent.Add(e);
+            BuildEvents.Add(e);
         }
 
         public bool BuildProjectFile(string projectFileName, string[] targetNames, IDictionary globalProperties, IDictionary targetOutputs)
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceCacheHandler.cs
similarity index 92%
rename from src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs
rename to src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceCacheHandler.cs
index ecd471926aa..3a44a1c6162 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemlyReferenceCacheHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceCacheHandler.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Services
 {
-    internal sealed class ResolveAssemlyReferenceCacheHandler : IResolveAssemblyReferenceTaskHandler
+    internal sealed class ResolveAssemblyReferenceCacheHandler : IResolveAssemblyReferenceTaskHandler
     {
         private readonly struct CacheEntry
         {
@@ -29,7 +29,7 @@ public CacheEntry(ResolveAssemblyReferenceRequest request, ResolveAssemblyRefere
 
         private readonly IResolveAssemblyReferenceTaskHandler _handler;
 
-        public ResolveAssemlyReferenceCacheHandler(IResolveAssemblyReferenceTaskHandler handler)
+        public ResolveAssemblyReferenceCacheHandler(IResolveAssemblyReferenceTaskHandler handler)
         {
             _handler = handler;
             _cache = new Dictionary<string, CacheEntry>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs
index 9f71d957728..e2b1101d535 100644
--- a/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Services/ResolveAssemblyReferenceHandler.cs
@@ -24,13 +24,7 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
             };
 
             ResolveAssemblyReferenceResult result = task.Execute(taskInput);
-
-            result.CustomBuildEvents = buildEngine.CustomBuildEvent;
-            result.BuildMessageEvents = buildEngine.MessageBuildEvent;
-            result.BuildWarningEvents = buildEngine.WarningBuildEvent;
-            result.BuildErrorEvents = buildEngine.ErrorBuildEvent;
-            result.EventCount = buildEngine.EventCount;
-
+            result.BuildEvents = buildEngine.BuildEvents;
 
             return result;
         }
