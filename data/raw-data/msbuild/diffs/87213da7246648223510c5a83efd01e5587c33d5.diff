diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 725925b54e5..48742cc58bd 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -3209,7 +3209,7 @@ public override bool Execute()
             return Execute(
                 p => FileUtilities.FileExistsNoThrow(p),
                 p => FileUtilities.DirectoryExistsNoThrow(p),
-                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern),
+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),
                 p => AssemblyNameExtension.GetAssemblyNameEx(p),
                 (string path, ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache, out AssemblyNameExtension[] dependencies, out string[] scatterFiles, out FrameworkNameVersioning frameworkName)
                     => AssemblyInformation.GetAssemblyMetadata(path, assemblyMetadataCache, out dependencies, out scatterFiles, out frameworkName),
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index eb5f8614c14..48711172264 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -42,7 +42,7 @@ namespace Microsoft.Build.Tasks
     /// <param name="path">The path to get directories for.</param>
     /// <param name="pattern">The pattern to search for.</param>
     /// <returns>An array of directories.</returns>
-    internal delegate IEnumerable<string> GetDirectories(string path, string pattern);
+    internal delegate string[] GetDirectories(string path, string pattern);
 
     /// <summary>
     /// CopyFile delegate
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 81fb6b5ace9..cb7031ecb55 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -65,7 +65,7 @@ internal sealed class SystemState : StateFileBase, ITranslatable
         /// is only considered good for the lifetime of the task (or whatever) that owns
         /// this instance.
         /// </summary>
-        private Dictionary<string, IEnumerable<string>> instanceLocalDirectories = new Dictionary<string, IEnumerable<string>>(StringComparer.OrdinalIgnoreCase);
+        private Dictionary<string, string[]> instanceLocalDirectories = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// Additional level of caching kept at the process level.
@@ -632,17 +632,17 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         /// <param name="path"></param>
         /// <param name="pattern"></param>
         /// <returns>The list of directories from the specified path.</returns>
-        private IEnumerable<string> GetDirectories(string path, string pattern)
+        private string[] GetDirectories(string path, string pattern)
         {
             // Only cache the *. pattern. This is by far the most common pattern
             // and generalized caching would require a call to Path.Combine which
             // is a string-copy.
             if (pattern == "*")
             {
-                instanceLocalDirectories.TryGetValue(path, out IEnumerable<string> cached);
+                instanceLocalDirectories.TryGetValue(path, out string[] cached);
                 if (cached == null)
                 {
-                    IEnumerable<string> directories = getDirectories(path, pattern);
+                    string[] directories = getDirectories(path, pattern);
                     instanceLocalDirectories[path] = directories;
                     return directories;
                 }
