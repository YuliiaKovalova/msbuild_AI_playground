diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index 7b5d9ad50bc..577379cbb80 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -2052,15 +2052,12 @@ namespace Microsoft.Build.Utilities
 {
     public partial class ChangeWaves
     {
-        public static readonly string[] AllWaves;
-        public static readonly System.Version[] AllWavesAsVersion;
-        public const string EnableAllFeatures = "999.999";
-        public const string Wave16_10 = "16.10";
-        public const string Wave16_8 = "16.8";
-        public const string Wave17_0 = "17.0";
+        public static readonly System.Version[] AllWaves;
+        public static readonly System.Version Wave16_10;
+        public static readonly System.Version Wave16_8;
+        public static readonly System.Version Wave17_0;
         public ChangeWaves() { }
-        public static string DisabledWave { get { throw null; } set { } }
-        public static bool AreFeaturesEnabled(string wave) { throw null; }
+        public static System.Version DisabledWave { get { throw null; } }
         public static bool AreFeaturesEnabled(System.Version wave) { throw null; }
         public static void ResetStateForTests() { }
     }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index e82b1302b54..131ff13bc40 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -2046,15 +2046,12 @@ namespace Microsoft.Build.Utilities
 {
     public partial class ChangeWaves
     {
-        public static readonly string[] AllWaves;
-        public static readonly System.Version[] AllWavesAsVersion;
-        public const string EnableAllFeatures = "999.999";
-        public const string Wave16_10 = "16.10";
-        public const string Wave16_8 = "16.8";
-        public const string Wave17_0 = "17.0";
+        public static readonly System.Version[] AllWaves;
+        public static readonly System.Version Wave16_10;
+        public static readonly System.Version Wave16_8;
+        public static readonly System.Version Wave17_0;
         public ChangeWaves() { }
-        public static string DisabledWave { get { throw null; } set { } }
-        public static bool AreFeaturesEnabled(string wave) { throw null; }
+        public static System.Version DisabledWave { get { throw null; } }
         public static bool AreFeaturesEnabled(System.Version wave) { throw null; }
         public static void ResetStateForTests() { }
     }
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index 4574dee52b8..20c833da214 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.UnitTests;
 using Xunit.Abstractions;
 using Microsoft.Build.Evaluation;
+using System;
 
 namespace Microsoft.Build.Engine.UnitTests
 {
@@ -25,17 +26,17 @@ public ChangeWaves_Tests(ITestOutputHelper output)
         [InlineData("17.0")]
         [InlineData("25.87")]
         [InlineData("102.87")]
-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)
+        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureVersion)
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
+                Version featureAsVersion = Version.Parse(featureVersion);
                 env.SetChangeWave(ChangeWaves.EnableAllFeatures);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);
+                ChangeWaves.AreFeaturesEnabled(featureAsVersion).ShouldBe(true);
 
                 string projectFile = $"" +
                     $"<Project>" +
-                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureWave}'))\">" +
+                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureVersion}'))\">" +
                             $"<Message Text='Hello World!'/>" +
                         $"</Target>" +
                     $"</Project>";
@@ -48,7 +49,6 @@ public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWave
 
                 collection.LoadProject(file.Path).Build().ShouldBeTrue();
                 log.AssertLogContains("Hello World!");
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
         }
 
@@ -57,16 +57,16 @@ public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWave
         [InlineData("16.10")]
         [InlineData("17.0")]
         [InlineData("27.3")]
-        public void NoChangeWaveSetMeansAllChangeWavesAreEnabled(string featureWave)
+        public void NoChangeWaveSetMeansAllChangeWavesAreEnabled(string featureVersion)
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                ChangeWaves.ResetStateForTests();
-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);
+                Version featureAsVersion = Version.Parse(featureVersion);
+                ChangeWaves.AreFeaturesEnabled(featureAsVersion).ShouldBe(true);
 
                 string projectFile = $"" +
                     $"<Project>" +
-                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureWave}'))\">" +
+                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureVersion}'))\">" +
                             $"<Message Text='Hello World!'/>" +
                         $"</Target>" +
                     $"</Project>";
@@ -79,24 +79,6 @@ public void NoChangeWaveSetMeansAllChangeWavesAreEnabled(string featureWave)
 
                 collection.LoadProject(file.Path).Build().ShouldBeTrue();
                 log.AssertLogContains("Hello World!");
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-            }
-        }
-
-        [Theory]
-        [InlineData("test")]
-        [InlineData("    ")]
-        [InlineData("")]
-        [InlineData("16-7")]
-        [InlineData("16x7")]
-        [InlineData("16=7")]
-        public void InvalidCallerForIsFeatureEnabledThrows(string waveToCheck)
-        {
-            using (TestEnvironment env = TestEnvironment.Create())
-            {
-                env.SetChangeWave("16.8");
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-                Shouldly.Should.Throw<InternalErrorException>(() => ChangeWaves.AreFeaturesEnabled(waveToCheck));
             }
         }
 
@@ -105,17 +87,17 @@ public void InvalidCallerForIsFeatureEnabledThrows(string waveToCheck)
         [InlineData("16_8", "5.7")]
         [InlineData("16x8", "20.4")]
         [InlineData("garbage", "18.20")]
-        public void InvalidFormatThrowsWarningAndLeavesFeaturesEnabled(string disableFromWave, string featureWave)
+        public void InvalidFormatThrowsWarningAndLeavesFeaturesEnabled(string disableFeaturesFromVersion, string featureVersion)
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFromWave);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);
+                Version featureAsVersion = Version.Parse(featureVersion);
+                env.SetChangeWave(disableFeaturesFromVersion);
+                ChangeWaves.AreFeaturesEnabled(featureAsVersion).ShouldBeTrue();
 
                 string projectFile = $"" +
                     $"<Project>" +
-                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureWave}'))\">" +
+                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureVersion}'))\">" +
                             $"<Message Text='Hello World!'/>" +
                         $"</Target>" +
                     $"</Project>";
@@ -132,7 +114,6 @@ public void InvalidFormatThrowsWarningAndLeavesFeaturesEnabled(string disableFro
                 log.WarningCount.ShouldBe(1);
                 log.AssertLogContains("invalid format");
                 log.AssertLogContains("Hello World!");
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
         }
 
@@ -140,12 +121,11 @@ public void InvalidFormatThrowsWarningAndLeavesFeaturesEnabled(string disableFro
         [InlineData("0.8")]
         [InlineData("4.5")]
         [InlineData("10.0")]
-        public void VersionTooLowClampsToLowestVersionInRotation(string disableFromWave)
+        public void VersionTooLowClampsToLowestVersionInRotation(string disableFeaturesFromVersion)
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFromWave);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+                env.SetChangeWave(disableFeaturesFromVersion);
 
                 // All waves should be disabled
                 for (int i = 0; i < ChangeWaves.AllWaves.Length; i++)
@@ -167,8 +147,6 @@ public void VersionTooLowClampsToLowestVersionInRotation(string disableFromWave)
                     Project p = collection.LoadProject(file.Path);
                     p.Build().ShouldBeTrue();
 
-                    BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
                     log.WarningCount.ShouldBe(1);
                     log.AssertLogContains("out of rotation");
                     log.AssertLogContains("Hello World!");
@@ -180,15 +158,14 @@ public void VersionTooLowClampsToLowestVersionInRotation(string disableFromWave)
         [Theory]
         [InlineData("100.10")]
         [InlineData("203.45")]
-        public void VersionTooHighClampsToHighestVersionInRotation(string disableFromWave)
+        public void VersionTooHighClampsToHighestVersionInRotation(string disableFeaturesFromVersion)
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFromWave);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+                env.SetChangeWave(disableFeaturesFromVersion);
 
                 // all waves but the highest should pass
-                for (int i = 0; i < ChangeWaves.AllWaves.Length-1; i++)
+                for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)
                 {
                     ChangeWaves.ResetStateForTests();
                     string projectFile = $"" +
@@ -207,8 +184,6 @@ public void VersionTooHighClampsToHighestVersionInRotation(string disableFromWav
                     Project p = collection.LoadProject(file.Path);
                     p.Build().ShouldBeTrue();
 
-                    BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
                     log.WarningCount.ShouldBe(1);
                     log.AssertLogContains("out of rotation");
                     log.AssertLogContains("Hello World!");
@@ -221,28 +196,26 @@ public void VersionSetToValidValueButInvalidVersionSetsNextVersion()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave($"{ChangeWaves.LowestWaveAsVersion.Major}.{ChangeWaves.LowestWaveAsVersion.Minor}.{ChangeWaves.LowestWaveAsVersion.Build+1}");
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+                env.SetChangeWave($"{ChangeWaves.LowestWave.Major}.{ChangeWaves.LowestWave.Minor}.{ChangeWaves.LowestWave.Build + 1}");
 
                 // All waves should be disabled
-                    string projectFile = $"" +
-                        $"<Project>" +
-                            $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.AllWaves[1]}' and $([MSBuild]::AreFeaturesEnabled('{ChangeWaves.LowestWave}'))\">" +
-                                $"<Message Text='Hello World!'/>" +
-                            $"</Target>" +
-                        $"</Project>";
+                string projectFile = $"" +
+                    $"<Project>" +
+                        $"<Target Name='HelloWorld' Condition=\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.AllWaves[1]}' and $([MSBuild]::AreFeaturesEnabled('{ChangeWaves.LowestWave}'))\">" +
+                            $"<Message Text='Hello World!'/>" +
+                        $"</Target>" +
+                    $"</Project>";
 
-                    TransientTestFile file = env.CreateFile("proj.csproj", projectFile);
+                TransientTestFile file = env.CreateFile("proj.csproj", projectFile);
 
-                    ProjectCollection collection = new ProjectCollection();
-                    MockLogger log = new MockLogger();
-                    collection.RegisterLogger(log);
+                ProjectCollection collection = new ProjectCollection();
+                MockLogger log = new MockLogger();
+                collection.RegisterLogger(log);
 
-                    Project p = collection.LoadProject(file.Path);
-                    p.Build().ShouldBeTrue();
+                Project p = collection.LoadProject(file.Path);
+                p.Build().ShouldBeTrue();
 
-                    BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-                    log.AssertLogContains("Hello World!");
+                log.AssertLogContains("Hello World!");
 
             }
         }
@@ -255,9 +228,9 @@ public void CorrectlyDetermineEnabledFeatures()
                 env.SetChangeWave(ChangeWaves.HighestWave);
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-                for (int i = 0; i < ChangeWaves.AllWaves.Length-1; i++)
+                for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)
                 {
-                    ChangeWaves.DisabledWave = null;
+                    ChangeWaves.ResetStateForTests();
                     ChangeWaves.AreFeaturesEnabled(ChangeWaves.AllWaves[i]).ShouldBe(true);
 
                     string projectFile = $"" +
@@ -288,15 +261,15 @@ public void CorrectlyDetermineDisabledFeatures()
             using (TestEnvironment env = TestEnvironment.Create())
             {
                 env.SetChangeWave(ChangeWaves.LowestWave);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-                foreach (string wave in ChangeWaves.AllWaves)
+                foreach (Version wave in ChangeWaves.AllWaves)
                 {
+                    ChangeWaves.ResetStateForTests();
                     ChangeWaves.AreFeaturesEnabled(wave).ShouldBeFalse();
 
                     string projectFile = $"" +
                         $"<Project>" +
-                            $"<Target Name='HelloWorld' Condition=\"$([MSBuild]::AreFeaturesEnabled('{wave}')) == false\">" +
+                            $"<Target Name='HelloWorld' Condition=\"$([MSBuild]::AreFeaturesEnabled('{wave.ToString()}')) == false\">" +
                                 $"<Message Text='Hello World!'/>" +
                             $"</Target>" +
                         $"</Project>";
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index e385eece4e5..5a377a7dc46 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1052,10 +1052,7 @@ private void AddBeforeAndAfterTargetMappings(ProjectTargetElement targetElement,
 
         private void ValidateChangeWaveState()
         {
-            if (ChangeWaves.ConversionState == ChangeWaveConversionState.NotConvertedYet)
-            {
-                ChangeWaves.ApplyChangeWave();
-            }
+            ChangeWaves.ApplyChangeWave();
 
             switch (ChangeWaves.ConversionState)
             {
@@ -1086,7 +1083,7 @@ private void AddBuiltInProperties()
 
             ValidateChangeWaveState();
 
-            SetBuiltInProperty(ReservedPropertyNames.msbuilddisablefeaturesfromversion, ChangeWaves.DisabledWave);
+            SetBuiltInProperty(ReservedPropertyNames.msbuilddisablefeaturesfromversion, ChangeWaves.DisabledWave.ToString());
 
             // Fake OS env variables when not on Windows
             if (!NativeMethodsShared.IsWindows)
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index d933594e66b..5b4685be7cb 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4016,7 +4016,7 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.AreFeaturesEnabled), StringComparison.OrdinalIgnoreCase))
                         {
-                            if (TryGetArg(args, out string arg0))
+                            if (TryGetArg(args, out Version arg0))
                             {
                                 returnVal = IntrinsicFunctions.AreFeaturesEnabled(arg0);
                                 return true;
@@ -4302,6 +4302,31 @@ private static bool TryGetArg(object[] args, out int arg0)
                 return TryConvertToInt(args[0], out arg0);
             }
 
+            private static bool TryGetArg(object[] args, out Version arg0)
+            {
+                if (args.Length != 1)
+                {
+                    arg0 = new Version();
+                    return false;
+                }
+
+                return TryConvertToVersion(args[0], out arg0);
+            }
+
+            private static bool TryConvertToVersion(object value, out Version arg0)
+            {
+                string val = value as string;
+
+                if (string.IsNullOrEmpty(val) || !Version.TryParse(val, out arg0))
+                {
+                    arg0 = new Version();
+                    return false;
+                }
+
+                return true;
+            }
+
+
             private static bool TryConvertToInt(object value, out int arg0)
             {
                 switch (value)
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 7bdedf62916..aa1cdeaa90b 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -514,9 +514,9 @@ internal static string GetTargetPlatformVersion(string tfm, int versionPartCount
             return NuGetFramework.Value.GetTargetPlatformVersion(tfm, versionPartCount);
         }
 
-        internal static bool AreFeaturesEnabled(string wave)
+        internal static bool AreFeaturesEnabled(Version wave)
         {
-            return string.IsNullOrEmpty(wave) ? false : ChangeWaves.AreFeaturesEnabled(wave);
+            return ChangeWaves.AreFeaturesEnabled(wave);
         }
 
         public static string GetCurrentToolsDirectory()
diff --git a/src/Shared/ChangeWaves.cs b/src/Shared/ChangeWaves.cs
index 29487ea8b78..5aacb8ebaf6 100644
--- a/src/Shared/ChangeWaves.cs
+++ b/src/Shared/ChangeWaves.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using Microsoft.Build.Shared;
 using System;
 using System.Linq;
 
@@ -16,26 +15,27 @@ internal enum ChangeWaveConversionState
     }
 
     /// <summary>
-    /// All waves are enabled by default, meaning all features behind change wave versions are enabled.
+    /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,
+    /// this class acts as a way to make risky changes while giving customers an opt-out.
     /// </summary>
+    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md
+    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md
     public class ChangeWaves
     {
-        public static readonly string[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };
-        public static readonly Version[] AllWavesAsVersion = Array.ConvertAll<string, Version>(AllWaves, Version.Parse);
-        public const string Wave16_8 = "16.8";
-        public const string Wave16_10 = "16.10";
-        public const string Wave17_0 = "17.0";
+        public static readonly Version Wave16_8 = new Version(16, 8);
+        public static readonly Version Wave16_10 = new Version(16, 10);
+        public static readonly Version Wave17_0 = new Version(17, 0);
+        public static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };
 
         /// <summary>
-        /// Special value indicating that all features behind change-waves should be enabled.
+        /// Special value indicating that all features behind all Change Waves should be enabled.
         /// </summary>
-        public const string EnableAllFeatures = "999.999";
+        internal static readonly Version EnableAllFeatures = new Version(999, 999);
 
-        internal static readonly Version LowestWaveAsVersion = new Version(AllWaves[0]);
-        internal static readonly Version HighestWaveAsVersion = new Version(AllWaves[AllWaves.Length - 1]);
-        internal static readonly Version EnableAllFeaturesAsVersion = new Version(EnableAllFeatures);
-
-        internal static string LowestWave
+        /// <summary>
+        /// The lowest wave in the current rotation of Change Waves.
+        /// </summary>
+        internal static Version LowestWave
         {
             get
             {
@@ -43,7 +43,10 @@ internal static string LowestWave
             }
         }
 
-        internal static string HighestWave
+        /// <summary>
+        /// The highest wave in the current rotation of Change Waves.
+        /// </summary>
+        internal static Version HighestWave
         {
             get
             {
@@ -51,26 +54,40 @@ internal static string HighestWave
             }
         }
 
-        private static string cachedWave = null;
+        /// <summary>
+        /// Checks the conditions for whether or not we want ApplyChangeWave to be called again.
+        /// </summary>
+        private static bool ShouldApplyChangeWave
+        {
+            get
+            {
+                return ConversionState == ChangeWaveConversionState.NotConvertedYet || _cachedWave == null;
+            }
+        }
+
+        private static Version _cachedWave;
 
-        public static string DisabledWave
+        /// <summary>
+        /// The current disabled wave.
+        /// </summary>
+        public static Version DisabledWave
         {
             get
             {
-                if (cachedWave == null)
+                if (ShouldApplyChangeWave)
                 {
-                    cachedWave = Traits.Instance.MSBuildDisableFeaturesFromVersion ?? "";
+                    ApplyChangeWave();
                 }
 
-                return cachedWave;
-            }
-            set
-            {
-                cachedWave = value;
+                return _cachedWave;
             }
         }
 
         private static ChangeWaveConversionState _state;
+
+        /// <summary>
+        /// The status of how the disabled wave was set.
+        /// </summary>
         internal static ChangeWaveConversionState ConversionState
         {
             get
@@ -88,121 +105,81 @@ internal static ChangeWaveConversionState ConversionState
         }
 
         /// <summary>
-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.
+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.
         /// </summary>
-        /// <returns> String representation of the set change wave. "999.999" if unset or invalid, and clamped if out of bounds. </returns>
         internal static void ApplyChangeWave()
         {
-            Version changeWave;
+            // Once set, change wave should not need to be set again.
+            if (!ShouldApplyChangeWave)
+            {
+                return;
+            }
 
-            // If unset, enable all features.
-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))
+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset
+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))
             {
                 ConversionState = ChangeWaveConversionState.Valid;
-                DisabledWave = ChangeWaves.EnableAllFeatures;
+                _cachedWave = ChangeWaves.EnableAllFeatures;
                 return;
             }
-
-            // If the version is of invalid format, log a warning and enable all features.
-            if (!Version.TryParse(DisabledWave, out changeWave))
+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))
             {
                 ConversionState = ChangeWaveConversionState.InvalidFormat;
-                DisabledWave = ChangeWaves.EnableAllFeatures;
+                _cachedWave = ChangeWaves.EnableAllFeatures;
                 return;
             }
-            // If the version is 999.999, we're done.
-            else if (changeWave == EnableAllFeaturesAsVersion)
+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))
             {
                 ConversionState = ChangeWaveConversionState.Valid;
-                DisabledWave = changeWave.ToString();
                 return;
             }
-            // If the version is out of rotation, log a warning and clamp the value.
-            else if (changeWave < LowestWaveAsVersion)
+            else if (_cachedWave < LowestWave)
             {
                 ConversionState = ChangeWaveConversionState.OutOfRotation;
-                DisabledWave = LowestWave;
+                _cachedWave = LowestWave;
                 return;
             }
-            else if (changeWave > HighestWaveAsVersion)
+            else if (_cachedWave > HighestWave)
             {
                 ConversionState = ChangeWaveConversionState.OutOfRotation;
-                DisabledWave = HighestWave;
+                _cachedWave = HighestWave;
                 return;
             }
 
-            // Ensure it's set to an existing version within the current rotation
-            if (!AllWavesAsVersion.Contains(changeWave))
-            {
-                foreach (Version wave in AllWavesAsVersion)
-                {
-                    if (wave > changeWave)
-                    {
-                        ConversionState = ChangeWaveConversionState.Valid;
-                        DisabledWave = wave.ToString();
-                        return;
-                    }
-                }
-            }
-
+            // _cachedWave is somewhere between valid waves, find the next valid version.
+            _cachedWave = AllWaves.Where((x) => x > _cachedWave).First();
             ConversionState = ChangeWaveConversionState.Valid;
-            DisabledWave = changeWave.ToString();
         }
 
         /// <summary>
-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.
-        /// Version MUST be of the format: "xx.yy".
+        /// Determines whether features behind the given wave are enabled.
         /// </summary>
         /// <param name="wave">The version to compare.</param>
-        /// <returns>A bool indicating whether the feature behind a version is enabled.</returns>
-        public static bool AreFeaturesEnabled(string wave)
-        {
-            Version waveToCheck;
-
-            // When a caller passes an invalid wave, fail the build.
-            ErrorUtilities.VerifyThrow(Version.TryParse(wave.ToString(), out waveToCheck),
-                                       $"Argument 'wave' passed with invalid format." +
-                                       $"Please use pre-existing const strings or define one with format 'xx.yy");
-
-            return AreFeaturesEnabled(waveToCheck);
-        }
-
-        /// <summary>
-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.
-        /// </summary>
-        /// <param name="wave">The version to compare.</param>
-        /// <returns>A bool indicating whether the version is enabled.</returns>
+        /// <returns>A bool indicating whether the change wave is enabled.</returns>
         public static bool AreFeaturesEnabled(Version wave)
         {
-            if (_state == ChangeWaveConversionState.NotConvertedYet)
+            if (ShouldApplyChangeWave)
             {
                 ApplyChangeWave();
             }
 
-            // This is opt out behavior, all waves are enabled by default.
-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))
-            {
-                return true;
-            }
-
-            Version currentSetWave;
-
-            // If we can't parse the environment variable, default to enabling features.
-            if (!Version.TryParse(DisabledWave, out currentSetWave))
+            // Check if we cached the special value to enable all features behind change waves.
+            if (_cachedWave == EnableAllFeatures)
             {
                 return true;
             }
 
-            return wave < currentSetWave;
+            return wave < _cachedWave;
         }
 
         /// <summary>
         /// Resets the state and value of the currently disabled version.
+        /// Used for testing only.
         /// </summary>
         public static void ResetStateForTests()
         {
-            DisabledWave = null;
+            _cachedWave = null;
             _state = ChangeWaveConversionState.NotConvertedYet;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 8f05e3b94b5..1a8367d80fa 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -94,11 +94,16 @@ private void Cleanup()
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
         }
+        public void SetChangeWave(Version wave)
+        {
+            SetChangeWave(wave.ToString());
+        }
 
         public void SetChangeWave(string wave)
         {
             ChangeWaves.ResetStateForTests();
             SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", wave);
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
         }
 
         /// <summary>
