diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index b2157cf4e07..cf08dc532c5 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2154,6 +2154,7 @@ private NodeConfiguration GetNodeConfiguration()
                 , AppDomain.CurrentDomain.SetupInformation
 #endif
                 , new LoggingNodeConfiguration(loggingService.IncludeEvaluationMetaprojects, loggingService.IncludeEvaluationProfile, loggingService.IncludeTaskInputs)
+                , "MSBuildCpuCount"
                 );
             }
 
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 5a4b6bf5118..cc83d182199 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -17,6 +17,13 @@ class ResourceManagerService : IBuildComponent
     {
         Semaphore? s = null;
 
+        private string _semaphoreName;
+
+        public ResourceManagerService(string semaphoreName)
+        {
+            _semaphoreName = semaphoreName;
+        }
+
         internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskResourceManager, "Cannot create components of type {0}", type);
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerServiceFactory.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerServiceFactory.cs
new file mode 100644
index 00000000000..3b3dc53a7c8
--- /dev/null
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerServiceFactory.cs
@@ -0,0 +1,25 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Shared;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
+
+#nullable enable
+
+namespace Microsoft.Build.BackEnd.Components.ResourceManager
+{
+    class ResourceManagerServiceFactory
+    {
+        public IBuildComponent CreateInstance(BuildComponentType type)
+        {
+            // Create the instance of OutOfProcNodeSdkResolverService and pass parameters to the constructor.
+            return new ResourceManagerService();
+        }
+
+    }
+}
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index 7052f8c4014..ab0db7c232f 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -40,6 +40,8 @@ internal class NodeConfiguration : INodePacket
         /// </summary>
         private LoggingNodeConfiguration _loggingNodeConfiguration;
 
+        private string _resourceManagerSemaphoreName;
+
         /// <summary>
         /// Constructor
         /// </summary>
@@ -56,7 +58,8 @@ public NodeConfiguration
 #if FEATURE_APPDOMAIN
             AppDomainSetup appDomainSetup,
 #endif
-            LoggingNodeConfiguration loggingNodeConfiguration
+            LoggingNodeConfiguration loggingNodeConfiguration,
+            string resourceManagerSemaphoreName
             )
         {
             _nodeId = nodeId;
@@ -66,6 +69,7 @@ LoggingNodeConfiguration loggingNodeConfiguration
             _appDomainSetup = appDomainSetup;
 #endif
             _loggingNodeConfiguration = loggingNodeConfiguration;
+            _resourceManagerSemaphoreName = resourceManagerSemaphoreName;
         }
 
         /// <summary>
@@ -131,7 +135,18 @@ public LoggingNodeConfiguration LoggingNodeConfiguration
             { return _loggingNodeConfiguration; }
         }
 
-#region INodePacket Members
+        /// <summary>
+        /// Name of the semaphore that communicates resource use between nodes.
+        /// </summary>
+        public string ResourceManagerSemaphoreName
+        {
+            [DebuggerStepThrough]
+            get
+            { return _resourceManagerSemaphoreName; }
+
+        }
+
+        #region INodePacket Members
 
         /// <summary>
         /// Retrieves the packet type.
@@ -160,6 +175,7 @@ public void Translate(ITranslator translator)
             translator.TranslateDotNet(ref _appDomainSetup);
 #endif
             translator.Translate(ref _loggingNodeConfiguration);
+            translator.Translate(ref _resourceManagerSemaphoreName);
         }
 
         /// <summary>
@@ -183,6 +199,7 @@ internal NodeConfiguration Clone()
                 , _appDomainSetup
 #endif
                 , _loggingNodeConfiguration
+                , _resourceManagerSemaphoreName
                 );
         }
     }
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index be436db5431..073e1e3c842 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -18,6 +18,7 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.SdkResolution;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
+using Microsoft.Build.BackEnd.Components.ResourceManager;
 
 namespace Microsoft.Build.Execution
 {
@@ -639,6 +640,11 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
             // Grab the system parameters.
             _buildParameters = configuration.BuildParameters;
 
+            //configuration.ResourceManagerSemaphoreName
+
+            ((IBuildComponentHost)this).RegisterFactory(BuildComponentType.TaskResourceManager, new ResourceManagerServiceFactory(configuration.ResourceManagerSemaphoreName).CreateInstance);
+
+
             _buildParameters.ProjectRootElementCache = s_projectRootElementCacheBase;
 
             // Snapshot the current environment
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 5329a7386e3..eccd3580691 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -157,6 +157,7 @@
     <Compile Include="BackEnd\BuildManager\CacheAggregator.cs" />
     <Compile Include="BackEnd\Components\Caching\ConfigCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\Caching\ResultsCacheWithOverride.cs" />
+    <Compile Include="BackEnd\Components\ResourceManager\ResourceManagerServiceFactory.cs" />
     <Compile Include="BackEnd\Components\ResourceManager\ResourceManagerService.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
     <Compile Include="ObjectModelRemoting\ExternalProjectsProvider.cs" />
