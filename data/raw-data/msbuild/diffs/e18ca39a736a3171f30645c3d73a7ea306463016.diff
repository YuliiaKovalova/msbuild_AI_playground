diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 00c770e1f1d..bc9ab3f0cab 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -504,11 +504,11 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
             }
 #endif
 
-            int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
+            KeyValuePair<string, int>[] handshakeComponents = handshake.RetrieveHandshakeComponents();
             for (int i = 0; i < handshakeComponents.Length; i++)
             {
                 CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, handshakeComponents[i], pipeName);
-                nodeStream.WriteIntForHandshake(handshakeComponents[i]);
+                nodeStream.WriteIntForHandshake(handshakeComponents[i].Value);
             }
 
             // This indicates that we have finished all the parts of our handshake; hopefully the endpoint has as well.
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index a2f7e5695fc..7ceb44213c7 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -26,11 +26,8 @@ internal NodeEndpointOutOfProcTaskHost()
         #endregion // Constructors and Factories
 
         /// <summary>
-        /// Returns the host handshake for this node endpoint
+        /// Returns the host handshake for this node endpoint.
         /// </summary>
-        protected override Handshake GetHandshake()
-        {
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
-        }
+        protected override Handshake GetHandshake() => new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
     }
 }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 6fe77c22fa0..ed584aa0726 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -39,42 +39,42 @@ internal enum HandshakeOptions
         None = 0,
 
         /// <summary>
-        /// Process is a TaskHost
+        /// Process is a TaskHost.
         /// </summary>
         TaskHost = 1,
 
         /// <summary>
-        /// Using the 2.0 CLR
+        /// Using the 2.0 CLR.
         /// </summary>
         CLR2 = 2,
 
         /// <summary>
-        /// 64-bit Intel process
+        /// 64-bit Intel process.
         /// </summary>
         X64 = 4,
 
         /// <summary>
-        /// Node reuse enabled
+        /// Node reuse enabled.
         /// </summary>
         NodeReuse = 8,
 
         /// <summary>
-        /// Building with BelowNormal priority
+        /// Building with BelowNormal priority.
         /// </summary>
         LowPriority = 16,
 
         /// <summary>
-        /// Building with administrator privileges
+        /// Building with administrator privileges.
         /// </summary>
         Administrator = 32,
 
         /// <summary>
-        /// Using the .NET Core/.NET 5.0+ runtime
+        /// Using the .NET Core/.NET 5.0+ runtime.
         /// </summary>
         NET = 64,
 
         /// <summary>
-        /// ARM64 process
+        /// ARM64 process.
         /// </summary>
         Arm64 = 128,
     }
@@ -100,38 +100,47 @@ protected internal Handshake(HandshakeOptions nodeType)
 
             string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
             CommunicationsUtilities.Trace("Handshake salt is " + handshakeSalt);
-            string toolsDirectory = (nodeType & HandshakeOptions.NET) == HandshakeOptions.NET
+
+            bool isNetTaskHost = (nodeType & HandshakeOptions.NET) == HandshakeOptions.NET;
+            string toolsDirectory = isNetTaskHost
                 ? BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory
                 : BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
             CommunicationsUtilities.Trace("Tools directory root is " + toolsDirectory);
             salt = CommunicationsUtilities.GetHashCode(handshakeSalt + toolsDirectory);
-            Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
-            fileVersionMajor = fileVersion.Major;
-            fileVersionMinor = fileVersion.Minor;
-            fileVersionBuild = fileVersion.Build;
-            fileVersionPrivate = fileVersion.Revision;
+
+            if (isNetTaskHost)
+            {
+                // hardcode version to activate json protocol that allows to have more version flexibility
+                fileVersionMajor = 99;
+                fileVersionMinor = 99;
+                fileVersionBuild = 99;
+                fileVersionPrivate = 99;
+            }
+            else
+            {
+                Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
+                fileVersionMajor = fileVersion.Major;
+                fileVersionMinor = fileVersion.Minor;
+                fileVersionBuild = fileVersion.Build;
+                fileVersionPrivate = fileVersion.Revision;
+            }
+
             sessionId = Process.GetCurrentProcess().SessionId;
         }
 
         // This is used as a key, so it does not need to be human readable.
-        public override string ToString()
-        {
-            return String.Format("{0} {1} {2} {3} {4} {5} {6}", options, salt, fileVersionMajor, fileVersionMinor, fileVersionBuild, fileVersionPrivate, sessionId);
-        }
-
-        public virtual int[] RetrieveHandshakeComponents()
-        {
-            return
-            [
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(options),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(sessionId)
-            ];
-        }
+        public override string ToString() => String.Format("{0} {1} {2} {3} {4} {5} {6}", options, salt, fileVersionMajor, fileVersionMinor, fileVersionBuild, fileVersionPrivate, sessionId);
+
+        public virtual KeyValuePair<string, int>[] RetrieveHandshakeComponents() =>
+        [
+            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(options)),
+            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt)),
+            new KeyValuePair<string, int>(nameof(fileVersionMajor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor)),
+            new KeyValuePair<string, int>(nameof(fileVersionMinor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor)),
+            new KeyValuePair<string, int>(nameof(fileVersionBuild), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild)),
+            new KeyValuePair<string, int>(nameof(fileVersionPrivate), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate)),
+            new KeyValuePair<string, int>(nameof(sessionId), CommunicationsUtilities.AvoidEndOfHandshakeSignal(sessionId))
+        ];
 
         public virtual string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate} {sessionId}".ToString(CultureInfo.InvariantCulture);
 
@@ -152,24 +161,18 @@ internal ServerNodeHandshake(HandshakeOptions nodeType)
         {
         }
 
-        public override int[] RetrieveHandshakeComponents()
-        {
-            return
-            [
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(options),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild),
-                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate),
-            ];
-        }
-
-        public override string GetKey()
-        {
-            return $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate}"
+        public override KeyValuePair<string, int>[] RetrieveHandshakeComponents() =>
+        [
+            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(options)),
+            new KeyValuePair<string, int>(nameof(salt), CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt)),
+            new KeyValuePair<string, int>(nameof(fileVersionMajor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor)),
+            new KeyValuePair<string, int>(nameof(fileVersionMinor), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor)),
+            new KeyValuePair<string, int>(nameof(fileVersionBuild), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild)),
+            new KeyValuePair<string, int>(nameof(fileVersionPrivate), CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate))
+        ];
+
+        public override string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate}"
                 .ToString(CultureInfo.InvariantCulture);
-        }
 
         /// <summary>
         /// Computes Handshake stable hash string representing whole state of handshake.
@@ -606,7 +609,12 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
         /// <summary>
         /// Given the appropriate information, return the equivalent HandshakeOptions.
         /// </summary>
-        internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string architectureFlagToSet = null, bool nodeReuse = false, bool lowPriority = false, IDictionary<string, string> taskHostParameters = null)
+        internal static HandshakeOptions GetHandshakeOptions(
+            bool taskHost,
+            string architectureFlagToSet = null,
+            bool nodeReuse = false,
+            bool lowPriority = false,
+            IDictionary<string, string> taskHostParameters = null)
         {
             HandshakeOptions context = taskHost ? HandshakeOptions.TaskHost : HandshakeOptions.None;
 
@@ -858,7 +866,7 @@ private static void TraceCore(int nodeId, string message)
         /// they will return the same hash code.
         /// This is as implemented in CLR String.GetHashCode() [ndp\clr\src\BCL\system\String.cs]
         /// but stripped out architecture specific defines
-        /// that causes the hashcode to be different and this causes problem in cross-architecture handshaking
+        /// that causes the hashcode to be different and this causes problem in cross-architecture handshaking.
         /// </summary>
         internal static int GetHashCode(string fileVersion)
         {
@@ -889,9 +897,6 @@ internal static int GetHashCode(string fileVersion)
             }
         }
 
-        internal static int AvoidEndOfHandshakeSignal(int x)
-        {
-            return x == EndOfHandshakeSignal ? ~x : x;
-        }
+        internal static int AvoidEndOfHandshakeSignal(int x) => x == EndOfHandshakeSignal ? ~x : x;
     }
 }
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 0ead0e2b749..9ce88aa9134 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -13,9 +13,14 @@
 using System.Threading;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using System.Collections.Generic;
+using System.Diagnostics;
+
+
 #if FEATURE_SECURITY_PERMISSIONS || FEATURE_PIPE_SECURITY
 using System.Security.AccessControl;
 
+
 #endif
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
 using System.Security.Principal;
@@ -115,9 +120,13 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         /// A binary writer to help write into <see cref="_packetStream"/>
         /// </summary>
         private BinaryWriter _binaryWriter;
-
         #endregion
 
+
+        private readonly IList<string> _versionHandshakeGroup = ["fileVersionMajor", "fileVersionMinor", "fileVersionBuild", "fileVersionPrivate"];
+
+        private const int NetTaskHostHandshakeVersion = 99;
+
         #region INodeEndpoint Events
 
         /// <summary>
@@ -394,7 +403,7 @@ private void PacketPumpProc()
                     Handshake handshake = GetHandshake();
                     try
                     {
-                        int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
+                        KeyValuePair<string, int>[] handshakeComponents = handshake.RetrieveHandshakeComponents();
                         for (int i = 0; i < handshakeComponents.Length; i++)
                         {
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
@@ -406,12 +415,22 @@ private void PacketPumpProc()
                             );
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
 
-                            if (handshakePart != handshakeComponents[i])
+                            if (handshakePart != handshakeComponents[i].Value)
                             {
-                                CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, handshakeComponents[i]);
-                                _pipeServer.WriteIntForHandshake(i + 1);
-                                gotValidConnection = false;
-                                break;
+                                // NET Task host allows to connect to MSBuild.dll with the different handshake version.
+                                // We agreed to hardcode a value of 99 to bypass the protection for this scenario.
+                                if (_versionHandshakeGroup.Contains(handshakeComponents[i].Key)
+                                    && handshakeComponents[i].Value == NetTaskHostHandshakeVersion)
+                                {
+                                    CommunicationsUtilities.Trace("Handshake for NET Host. Child host {0} for {1}.", handshakePart, handshakeComponents[i].Key);
+                                }
+                                else
+                                {
+                                    CommunicationsUtilities.Trace("Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.", handshakePart, handshakeComponents[i]);
+                                    _pipeServer.WriteIntForHandshake(i + 1);
+                                    gotValidConnection = false;
+                                    break;
+                                }
                             }
                         }
 
@@ -511,9 +530,16 @@ private void PacketPumpProc()
             }
         }
 
-        private void RunReadLoop(Stream localReadPipe, Stream localWritePipe,
-            ConcurrentQueue<INodePacket> localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)
+        private void RunReadLoop(
+            Stream localReadPipe,
+            Stream localWritePipe,
+            ConcurrentQueue<INodePacket> localPacketQueue,
+            AutoResetEvent localPacketAvailable,
+            AutoResetEvent localTerminatePacketPump)
         {
+#if NETCOREAPP
+            Debugger.Launch();
+#endif
             // Ordering of the wait handles is important.  The first signaled wait handle in the array
             // will be returned by WaitAny if multiple wait handles are signaled.  We prefer to have the
             // terminate event triggered so that we cannot get into a situation where packets are being
