diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index f704ef169a1..c12a1c5c9e0 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -447,6 +447,59 @@ public void ForceOutOfDateLinked(bool usePreserialized)
             }
         }
 
+        [Fact]
+        public void QuestionOutOfDateByDeletion()
+        {
+            var folder = _env.CreateFolder();
+            string resxFileInput = Utilities.WriteTestResX(false, null, null, _env.CreateFile(folder, ".resx").Path);
+            TaskItem stateFile = new TaskItem(_env.GetTempFile(".cache").Path);
+            ITaskItem[] sources = new ITaskItem[] { new TaskItem(resxFileInput) };
+            ITaskItem[] output;
+
+            GenerateResource t1 = Utilities.CreateTask(_output);
+            t1.Sources = sources;
+            t1.StateFile = stateFile;
+            Utilities.ExecuteTask(t1);
+
+            Utilities.AssertLogContainsResource(t1, "GenerateResource.OutputDoesntExist", t1.OutputResources[0].ItemSpec);
+
+            output = t1.OutputResources;
+
+            // Run again to ensure all files are up to date.
+            GenerateResource t2 = Utilities.CreateTask(_output);
+            t2.Sources = sources;
+            t2.StateFile = stateFile;
+            t2.FailIfNotIncremental = true;
+            Utilities.ExecuteTask(t2);
+
+            // Delete the file and verify that FailIfNotIncremental will print the missing file
+            GenerateResource t3 = Utilities.CreateTask(_output);
+            t3.StateFile = stateFile;
+            t3.Sources = sources;
+            t3.FailIfNotIncremental = true;
+
+            // Delete the output
+            File.Delete(output[0].ItemSpec);
+
+            t3.Execute().ShouldBeFalse();
+
+            Utilities.AssertLogContainsResource(t3, "GenerateResource.ProcessingFile", sources[0].ItemSpec, output[0].ItemSpec);
+
+            GenerateResource t4 = Utilities.CreateTask(_output);
+            t4.Sources = sources;
+            t4.StateFile = stateFile;
+            Utilities.ExecuteTask(t4);
+
+            Utilities.AssertLogContainsResource(t4, "GenerateResource.OutputDoesntExist", t4.OutputResources[0].ItemSpec);
+
+            // Run again to ensure all files are up to date.
+            GenerateResource t5 = Utilities.CreateTask(_output);
+            t5.Sources = sources;
+            t5.StateFile = stateFile;
+            t5.FailIfNotIncremental = true;
+            Utilities.ExecuteTask(t5);
+        }
+
         [Theory]
         [InlineData(false, false)]
         [InlineData(false, true)]
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 3c198c1d512..a2b07598bb0 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -725,7 +725,15 @@ public override bool Execute()
                 }
                 else if (FailIfNotIncremental)
                 {
-                    Log.LogErrorFromResources("GenerateResource.OutOfDate");
+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);
+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5
+
+                    for (int index = 0; index < maxCount; index++)
+                    {
+                        Log.LogErrorFromResources("GenerateResource.ProcessingFile", inputsToProcess[index], outputsToProcess[index]);
+                    }
+
+                    return false;
                 }
                 else
                 {
@@ -3605,7 +3613,7 @@ private void ReadTextResources(ReaderInfo reader, String fileName)
                         name.Length--;
                     }
                     ch = sr.Read(); // move past =
-                    // If it exists, move past the first space after the equals sign.
+                                    // If it exists, move past the first space after the equals sign.
                     if (ch == ' ')
                     {
                         ch = sr.Read();
@@ -3747,7 +3755,7 @@ private void WriteResources(ReaderInfo reader,
                     // specifically an InvalidOperationException: "Token EndElement in state Error would result in an invalid XML document."
                     try { writer.Dispose(); }
                     catch (Exception) { } // We agressively catch all exception types since we already have one we will throw.
-                    // The second time we catch the out of disk space exception.
+                                          // The second time we catch the out of disk space exception.
                     try { writer.Dispose(); }
                     catch (Exception) { } // We agressively catch all exception types since we already have one we will throw.
                     throw capturedException; // In the event of a full disk, this is an out of disk space IOException.
