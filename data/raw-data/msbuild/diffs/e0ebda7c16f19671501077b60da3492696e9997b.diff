diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 0cdab49cef5..10e699b514f 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2123,6 +2123,23 @@ internal static bool ExpandExpressionCapture<S>(
                 // If there are no items of the given type, then bail out early
                 if (itemsOfType.Count == 0)
                 {
+                    if (expressionCapture.Captures?.Any(capture =>
+                        {
+                            if (string.Equals(capture.FunctionName, "Count", StringComparison.OrdinalIgnoreCase))
+                            {
+                                return true;
+                            }
+                            if (string.Equals(capture.FunctionName, "AnyHaveMetadataValue", StringComparison.OrdinalIgnoreCase))
+                            {
+                                return true;
+                            }
+                            return false;
+                        }) != true)
+                    {
+                        itemsFromCapture = new List<KeyValuePair<string, S>>();
+                        return false;
+                    }
+/*
                     // ... but only if there isn't a function "Count", since that will want to return something (zero) for an empty list
                     if (expressionCapture.Captures?.Any(capture => string.Equals(capture.FunctionName, "Count", StringComparison.OrdinalIgnoreCase)) != true)
                     {
@@ -2133,6 +2150,7 @@ internal static bool ExpandExpressionCapture<S>(
                             return false;
                         }
                     }
+*/
                 }
 
                 if (expressionCapture.Captures != null)
@@ -2647,26 +2665,26 @@ internal static IEnumerable<KeyValuePair<string, S>> GetPathsOfAllDirectoriesAbo
                 /// Intrinsic function that returns the DirectoryName of the items in itemsOfType
                 /// UNDONE: This can be removed in favor of a built-in %(DirectoryName) metadata in future.
                 /// </summary>
-                internal static IEnumerable<KeyValuePair<string, S>> DirectoryName(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<KeyValuePair<string, S>> itemsOfType, string[] arguments)
+                internal static IEnumerable<KeyValuePair<string, S>> DirectoryName(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Tuple<string, S>> itemsOfType, string[] arguments)
                 {
                     ProjectErrorUtilities.VerifyThrowInvalidProject(arguments == null || arguments.Length == 0, elementLocation, "InvalidItemFunctionSyntax", functionName, arguments == null ? 0 : arguments.Length);
 
                     Dictionary<string, string> directoryNameTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
-                    foreach (KeyValuePair<string, S> item in itemsOfType)
+                    foreach (Tuple<string, S> item in itemsOfType)
                     {
                         // If the item include has become empty,
                         // this is the end of the pipeline for this item
-                        if (String.IsNullOrEmpty(item.Key))
+                        if (String.IsNullOrEmpty(item.Item1))
                         {
                             continue;
                         }
 
                         string directoryName;
-                        if (!directoryNameTable.TryGetValue(item.Key, out directoryName))
+                        if (!directoryNameTable.TryGetValue(item.Item1, out directoryName))
                         {
                             // Unescape as we are passing to the file system
-                            string unescapedPath = EscapingUtilities.UnescapeAll(item.Key);
+                            string unescapedPath = EscapingUtilities.UnescapeAll(item.Item1);
 
                             try
                             {
@@ -2683,7 +2701,7 @@ internal static IEnumerable<KeyValuePair<string, S>> DirectoryName(Expander<P, I
                                     // If we're not a ProjectItem or ProjectItemInstance, then ProjectDirectory will be null.
                                     // In that case, we're safe to get the current directory as we'll be running on TaskItems which
                                     // only exist within a target where we can trust the current directory
-                                    string baseDirectoryToUse = item.Value.ProjectDirectory ?? String.Empty;
+                                    string baseDirectoryToUse = item.Item2.ProjectDirectory ?? String.Empty;
                                     rootedPath = Path.Combine(baseDirectoryToUse, unescapedPath);
                                 }
 
@@ -2691,7 +2709,7 @@ internal static IEnumerable<KeyValuePair<string, S>> DirectoryName(Expander<P, I
                             }
                             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                             {
-                                ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidItemFunctionExpression", functionName, item.Key, e.Message);
+                                ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidItemFunctionExpression", functionName, item.Item1, e.Message);
                             }
 
                             // Escape as this is going back into the engine
@@ -2702,11 +2720,11 @@ internal static IEnumerable<KeyValuePair<string, S>> DirectoryName(Expander<P, I
                         if (!String.IsNullOrEmpty(directoryName))
                         {
                             // return a result through the enumerator
-                            yield return new KeyValuePair<string, S>(directoryName, item.Value);
+                            yield return new KeyValuePair<string, S>(directoryName, item.Item2);
                         }
                         else if (includeNullEntries)
                         {
-                            yield return new KeyValuePair<string, S>(null, item.Value);
+                            yield return new KeyValuePair<string, S>(null, item.Item2);
                         }
                     }
                 }
diff --git a/src/StringTools/WeakStringCache.Concurrent.cs b/src/StringTools/WeakStringCache.Concurrent.cs
index bf9373e798c..1124bf2c4e9 100644
--- a/src/StringTools/WeakStringCache.Concurrent.cs
+++ b/src/StringTools/WeakStringCache.Concurrent.cs
@@ -14,6 +14,7 @@ namespace Microsoft.NET.StringTools
     internal sealed partial class WeakStringCache : IDisposable
     {
         private readonly ConcurrentDictionary<int, StringWeakHandle> _stringsByHashCode;
+        private int _count;
 
         public WeakStringCache()
         {
@@ -62,11 +63,15 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
 
             handle = new StringWeakHandle();
             handle.SetString(result);
-            _stringsByHashCode.TryAdd(hashCode, handle);
+            if (_stringsByHashCode.TryAdd(hashCode, handle))
+            {
+                Interlocked.Add(ref _count, 1);
+            }
+            
 
             // Remove unused handles if our heuristic indicates that it would be productive.
             int scavengeThreshold = _scavengeThreshold;
-            if (_stringsByHashCode.Count >= scavengeThreshold)
+            if (_count >= scavengeThreshold)
             {
                 // Before we start scavenging set _scavengeThreshold to a high value to effectively lock other threads from
                 // running Scavenge at the same time.
@@ -81,6 +86,7 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
                     {
                         // And do this again when the number of handles reaches double the current after-scavenge number.
                         _scavengeThreshold = _stringsByHashCode.Count * 2;
+                        _count = _stringsByHashCode.Count;
                     }
                 }
             }
