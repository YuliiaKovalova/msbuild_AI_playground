diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 2259df6abdd..23d3cf093e8 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -586,10 +586,6 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         {
         }
 
-        public void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success)
-        {
-        }
-
         /// <summary>
         /// Logs a target started event
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index ae8200de629..b57ab84ae82 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -577,8 +577,6 @@ ProjectStartedEventArgs CreateProjectStarted(
         /// <param name="success">Did the build succeede or not</param>
         void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success);
 
-        void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success);
-
         /// <summary>
         /// Log that a target has started
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index b1c591490d4..bbfd82c4fe3 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -604,17 +604,6 @@ public ProjectStartedEventArgs CreateProjectStarted(
         /// <param name="success">Did the project pass or fail</param>
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success)
-            => LogProjectFinished(projectBuildEventContext, null, projectFile, success);
-
-        /// <summary>
-        /// Logs that a project has finished
-        /// </summary>
-        /// <param name="projectBuildEventContext">Event context for the project.</param>
-        /// <param name="projectBuildStats"></param>
-        /// <param name="projectFile">Project file being built</param>
-        /// <param name="success">Did the project pass or fail</param>
-        /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
-        public void LogProjectFinished(BuildEventContext projectBuildEventContext, ProjectBuildStats projectBuildStats, string projectFile, bool success)
         {
             ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
 
@@ -624,7 +613,6 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, Proje
                     projectFile,
                     success);
             buildEvent.BuildEventContext = projectBuildEventContext;
-            buildEvent.ProjectBuildStats = projectBuildStats;
             ProcessLoggingEvent(buildEvent);
 
             // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index bfd185691ca..22687557135 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -258,11 +258,10 @@ private static ProjectStartedEventArgs CreateProjectStarted(
         /// Log that the project has finished
         /// </summary>
         /// <param name="success">Did the build succeede or not</param>
-        /// <param name="projectBuildStats"></param>
-        internal void LogProjectFinished(bool success, ProjectBuildStats projectBuildStats = null)
+        internal void LogProjectFinished(bool success)
         {
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
-            LoggingService.LogProjectFinished(BuildEventContext, projectBuildStats, _projectFullPath, success);
+            LoggingService.LogProjectFinished(BuildEventContext, _projectFullPath, success);
             this.IsValid = false;
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 0cbe089052e..c3620b78415 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1159,7 +1159,6 @@ private async Task<BuildResult> BuildProject()
 
             try
             {
-
                 HandleProjectStarted(buildCheckManager);
 
                 // Make sure to extract known immutable folders from properties and register them for fast up-to-date check
@@ -1231,7 +1230,6 @@ private async Task<BuildResult> BuildProject()
                     _requestEntry.RequestConfiguration.ProjectFullPath);
             }
 
-
             BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFromTargetBuilder)
             {
                 var proxyTargetMapping = _requestEntry.Request.ProxyTargets.ProxyTargetToRealTargetMap;
diff --git a/src/Framework/ProjectBuildStats.cs b/src/Framework/ProjectBuildStats.cs
deleted file mode 100644
index 3f1517b4553..00000000000
--- a/src/Framework/ProjectBuildStats.cs
+++ /dev/null
@@ -1,231 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using Microsoft.Build.Shared;
-
-namespace Microsoft.Build.Framework;
-
-/// <summary>
-/// Holder for project execution stats
-/// It is not intended to be serialized into binlog nor shared after the build execution is done.
-/// It is populated only if telemetry collection is active for current build and tasks/targets stats are regarded sampled-in.
-/// </summary>
-internal class ProjectBuildStats
-{
-    // Future: These might be configurable e.g. via telemetry sensitivity level?
-    internal static TimeSpan DurationThresholdForTopN { get; set; } = TimeSpan.FromMilliseconds(100);
-    private const int TopNTasksToReport = 5;
-    internal static bool CollectCustomTaskNames { get; set; } = false;
-    private const int MaxCustomTasksCsvLength = 400;
-    private const int MaxSingleTaskNameLength = 40;
-
-    public ProjectBuildStats(bool isDeserialized)
-    {
-        if (!isDeserialized)
-        {
-            _topTasksByCumulativeExecution =
-                // sorted in descending order, plus we cannot return 0 on equality as SortedList would throw
-                new SortedList<TimeSpan, string>(Comparer<TimeSpan>.Create((a, b) => b >= a ? 1 : -1));
-        }
-    }
-
-    public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom)
-    {
-        if (TopNTasksToReport > 0 && cumulativeExectionTime > DurationThresholdForTopN)
-        {
-            if (_topTasksByCumulativeExecution!.Count == 0 ||
-                _topTasksByCumulativeExecution.Last().Key < cumulativeExectionTime)
-            {
-                _topTasksByCumulativeExecution.Add(cumulativeExectionTime, (isCustom ? "Custom:" : null) + name);
-            }
-
-            while (_topTasksByCumulativeExecution!.Count > TopNTasksToReport)
-            {
-                _topTasksByCumulativeExecution.RemoveAt(_topTasksByCumulativeExecution.Count - 1);
-            }
-        }
-
-        TotalTasksCount++;
-        TotalTasksExecution += cumulativeExectionTime;
-        TotalTasksExecutionsCount += executionsCount;
-        if (executionsCount > 0)
-        {
-            TotalExecutedTasksCount++;
-        }
-
-        if (isCustom)
-        {
-            CustomTasksCount++;
-            TotalCustomTasksExecution += cumulativeExectionTime;
-            CustomTasksExecutionsCount += executionsCount;
-            if (executionsCount > 0)
-            {
-                ExecutedCustomTasksCount++;
-            }
-
-            if (CollectCustomTaskNames && CustomTasksCsv?.Length < MaxCustomTasksCsvLength)
-            {
-                CustomTasksCsv += "," + name.Substring(Math.Max(0, name.Length - MaxSingleTaskNameLength));
-            }
-        }
-    }
-
-    /// <summary>
-    /// Total number of tasks registered for execution of this project.
-    /// </summary>
-    public short TotalTasksCount { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalTasksCount"/> that were not regarded to be produced by Microsoft.
-    /// </summary>
-    public short CustomTasksCount { get; set; }
-
-    /// <summary>
-    /// Total number of time any task was executed. All executions of any task counts (even if executed multiple times).
-    /// </summary>
-    public short TotalTasksExecutionsCount { get; set; }
-
-    /// <summary>
-    /// Total number of tasks that were executed. Multiple executions of single task counts just once.
-    /// </summary>
-    public short TotalExecutedTasksCount { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalTasksExecutionsCount"/> that were performed on tasks not regarded to be produced by Microsoft.
-    /// </summary>
-    public short CustomTasksExecutionsCount { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalExecutedTasksCount"/> that were performed on tasks not regarded to be produced by Microsoft.
-    /// </summary>
-    public short ExecutedCustomTasksCount { get; set; }
-
-    /// <summary>
-    /// Total cumulative time spent in execution of tasks for this project request.
-    /// </summary>
-    public TimeSpan TotalTasksExecution { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalTasksExecution"/> for executions that were performed on tasks not regarded to be produced by Microsoft.
-    /// </summary>
-    public TimeSpan TotalCustomTasksExecution { get; set; }
-
-    /// <summary>
-    /// Total number of targets registered for execution of this project.
-    /// </summary>
-    public short TotalTargetsCount { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalTargetsCount"/> that were not regarded to be produced by Microsoft.
-    /// </summary>
-    public short CustomTargetsCount { get; set; }
-
-    /// <summary>
-    /// Total number of time any target was executed. Each target is counted at most once - as multiple executions of single target per project are not allowed.
-    /// </summary>
-    public short TotalTargetsExecutionsCount { get; set; }
-
-    /// <summary>
-    /// Subset of <see cref="TotalTargetsExecutionsCount"/> for executions that were not regarded to be produced by Microsoft.
-    /// </summary>
-    public short ExecutedCustomTargetsCount { get; set; }
-
-    /// <summary>
-    /// Csv list of names of custom tasks.
-    /// </summary>
-    public string? CustomTasksCsv { get; set; }
-
-    /// <summary>
-    /// Top N (<see cref="TopNTasksToReport"/>) tasks by cumulative execution time.
-    /// Custom tasks names are prefixed by "Custom:" prefix
-    /// </summary>
-    public IReadOnlyCollection<KeyValuePair<TimeSpan, string>> TopTasksByCumulativeExecution =>
-        _topTasksByCumulativeExecution ?? _topTasksDeserialized ?? [];
-
-    internal void SetDeserializedTopN(IReadOnlyCollection<KeyValuePair<TimeSpan, string>> topNTasks)
-    {
-        _topTasksDeserialized = topNTasks;
-    }
-
-    private IReadOnlyCollection<KeyValuePair<TimeSpan, string>>? _topTasksDeserialized;
-    private readonly SortedList<TimeSpan, string>? _topTasksByCumulativeExecution;
-
-    internal static void WriteToStream(BinaryWriter writer, ProjectBuildStats? stats)
-    {
-        if (stats != null)
-        {
-            writer.Write((byte)1);
-            writer.Write7BitEncodedInt(stats.TotalTasksCount);
-            writer.Write7BitEncodedInt(stats.CustomTasksCount);
-            writer.Write7BitEncodedInt(stats.TotalTasksExecutionsCount);
-            writer.Write7BitEncodedInt(stats.TotalExecutedTasksCount);
-            writer.Write7BitEncodedInt(stats.CustomTasksExecutionsCount);
-            writer.Write7BitEncodedInt(stats.ExecutedCustomTasksCount);
-
-            writer.Write(stats.TotalTasksExecution.Ticks);
-            writer.Write(stats.TotalCustomTasksExecution.Ticks);
-
-            writer.Write7BitEncodedInt(stats.TotalTargetsCount);
-            writer.Write7BitEncodedInt(stats.CustomTargetsCount);
-            writer.Write7BitEncodedInt(stats.TotalTargetsExecutionsCount);
-            writer.Write7BitEncodedInt(stats.ExecutedCustomTargetsCount);
-            writer.WriteOptionalString(stats.CustomTasksCsv);
-
-            writer.Write7BitEncodedInt(stats.TopTasksByCumulativeExecution.Count);
-            foreach (var pair in stats.TopTasksByCumulativeExecution)
-            {
-                writer.Write(pair.Key.Ticks);
-                writer.Write(pair.Value);
-            }
-        }
-        else
-        {
-            writer.Write((byte)0);
-        }
-    }
-
-    internal static ProjectBuildStats? ReadFromStream(BinaryReader reader, int version)
-    {
-        if (reader.ReadByte() == 0)
-        {
-            return null;
-        }
-
-        ProjectBuildStats stats = new(true)
-        {
-            TotalTasksCount = (short)reader.Read7BitEncodedInt(),
-            CustomTasksCount = (short)reader.Read7BitEncodedInt(),
-            TotalTasksExecutionsCount = (short)reader.Read7BitEncodedInt(),
-            TotalExecutedTasksCount = (short)reader.Read7BitEncodedInt(),
-            CustomTasksExecutionsCount = (short)reader.Read7BitEncodedInt(),
-            ExecutedCustomTasksCount = (short)reader.Read7BitEncodedInt(),
-            TotalTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
-            TotalCustomTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
-            TotalTargetsCount = (short)reader.Read7BitEncodedInt(),
-            CustomTargetsCount = (short)reader.Read7BitEncodedInt(),
-            TotalTargetsExecutionsCount = (short)reader.Read7BitEncodedInt(),
-            ExecutedCustomTargetsCount = (short)reader.Read7BitEncodedInt(),
-            CustomTasksCsv = reader.ReadOptionalString(),
-        };
-
-        stats.SetDeserializedTopN(ReadTaskStats(reader));
-
-        return stats;
-    }
-
-    private static IReadOnlyCollection<KeyValuePair<TimeSpan, string>> ReadTaskStats(BinaryReader reader)
-    {
-        int cnt = reader.Read7BitEncodedInt();
-        List<KeyValuePair<TimeSpan, string>> list = new(cnt);
-        for (int _ = 0; _ < cnt; _++)
-        {
-            list.Add(new KeyValuePair<TimeSpan, string>(TimeSpan.FromTicks(reader.ReadInt64()), reader.ReadString()));
-        }
-
-        return list;
-    }
-}
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 39a7fa50927..9308f830c2f 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -80,8 +80,6 @@ internal override void WriteToStream(BinaryWriter writer)
 
             writer.WriteOptionalString(projectFile);
             writer.Write(succeeded);
-
-            ProjectBuildStats.WriteToStream(writer, ProjectBuildStats);
         }
 
         /// <summary>
@@ -95,8 +93,6 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();
             succeeded = reader.ReadBoolean();
-
-            ProjectBuildStats = ProjectBuildStats.ReadFromStream(reader, version);
         }
         #endregion
 
@@ -122,11 +118,5 @@ public override string Message
                 return RawMessage;
             }
         }
-
-        /// <summary>
-        /// Optional holder of stats for telemetry.
-        /// Not intended to be de/serialized for binlogs.
-        /// </summary>
-        internal ProjectBuildStats? ProjectBuildStats { get; set; }
     }
 }
