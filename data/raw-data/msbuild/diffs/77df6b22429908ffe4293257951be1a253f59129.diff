diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..989f3de33d1 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -83,7 +83,7 @@
     <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
     <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
     <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
-    <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
+    <Rule Id="CA1805" Action="Warning" />          <!-- Do not initialize unnecessarily --> 
     <Rule Id="CA1806" Action="None" />
     <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
     <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
index 8ebfe5804bb..a2a66e2e8d4 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
@@ -265,7 +265,7 @@ public static bool IsLinkedObject(object obj)
             return LinkedObjectsFactory.GetLink(obj) != null;
         }
 
-        private static bool dbgIgnoreLinked = false; 
+        private static bool dbgIgnoreLinked;
         public static void VerifyNotLinked(object obj)
         {
             if (dbgIgnoreLinked) return;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
index 95a409f777e..f0e3ed21453 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
@@ -143,9 +143,9 @@ internal interface IImportHolder
     /// </summary>
     internal class ProjectCollectionLinker : ExternalProjectsProvider
     {
-        internal static int _collecitonId = 0;
+        internal static int _collecitonId;
 
-        private bool importing = false;
+        private bool importing;
         private ExportedLinksMap exported = ExportedLinksMap.Create();
         private Dictionary<UInt32, ExternalConnection> imported = new Dictionary<UInt32, ExternalConnection>();
 
@@ -214,7 +214,7 @@ private void ConnectTo (ProjectCollectionLinker other)
             }
         }
 
-        private static bool dbgValidateDuplicateViews = false;
+        private static bool dbgValidateDuplicateViews;
 
 
         internal  void ValidateNoDuplicates()
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
index b4a5223c125..e2bba4c5c8a 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
@@ -9,8 +9,8 @@ namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
     internal class LinkedObjectsMap<KeyType> : IDisposable
     {
         private static object Lock { get; } = new object();
-        private static UInt32 nextCollectionId = 0;
-        private UInt32 nextLocalId = 0;
+        private static UInt32 nextCollectionId;
+        private UInt32 nextLocalId;
 
         // internal fore debugging
         internal object GetLockForDebug => Lock;
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index e45add12e09..be7063d3061 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -1074,42 +1074,42 @@ internal class MyCustomLogger : ILogger
             /// <summary>
             /// Last error event the logger encountered
             /// </summary>
-            private BuildErrorEventArgs _lastError = null;
+            private BuildErrorEventArgs _lastError;
 
             /// <summary>
             /// Last warning event the logger encountered
             /// </summary>
-            private BuildWarningEventArgs _lastWarning = null;
+            private BuildWarningEventArgs _lastWarning;
 
             /// <summary>
             /// Last message event the logger encountered
             /// </summary>
-            private BuildMessageEventArgs _lastMessage = null;
+            private BuildMessageEventArgs _lastMessage;
 
             /// <summary>
             /// Last custom build event the logger encountered
             /// </summary>
-            private CustomBuildEventArgs _lastCustom = null;
+            private CustomBuildEventArgs _lastCustom;
 
             /// <summary>
             /// Number of errors
             /// </summary>
-            private int _numberOfError = 0;
+            private int _numberOfError;
 
             /// <summary>
             /// Number of warnings
             /// </summary>
-            private int _numberOfWarning = 0;
+            private int _numberOfWarning;
 
             /// <summary>
             /// Number of messages
             /// </summary>
-            private int _numberOfMessage = 0;
+            private int _numberOfMessage;
 
             /// <summary>
             /// Number of custom build events
             /// </summary>
-            private int _numberOfCustom = 0;
+            private int _numberOfCustom;
 
             /// <summary>
             /// Last error logged
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index a6649794529..9fb860f2fe0 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -36,7 +36,7 @@ public class SolutionProjectGenerator_Tests : IDisposable
     {
         private readonly ITestOutputHelper output;
 
-        private string _originalVisualStudioVersion = null;
+        private string _originalVisualStudioVersion;
 
         private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);
 
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
index 9299d5c6d87..2906641881f 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
@@ -16,8 +16,8 @@ namespace Microsoft.Build.UnitTests
     internal class ToolsetConfigurationReaderTestHelper
     {
         private static ExeConfigurationFileMap s_configFile;
-        private static string s_testFolderFullPath = null;
-        private static Exception s_exceptionToThrow = null;
+        private static string s_testFolderFullPath;
+        private static Exception s_exceptionToThrow;
 
         internal static string WriteConfigFile(string content)
         {
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index bfcf5685dc2..469a6f63eef 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.UnitTests.Evaluation
     /// </summary>
     public class ImportFromMSBuildExtensionsPathTests : IDisposable
     {
-        string toolsVersionToUse = null;
+        string toolsVersionToUse;
 
         public ImportFromMSBuildExtensionsPathTests()
         {
diff --git a/src/Build.UnitTests/MockTask.cs b/src/Build.UnitTests/MockTask.cs
index 929243a2859..8f5c0e248a2 100644
--- a/src/Build.UnitTests/MockTask.cs
+++ b/src/Build.UnitTests/MockTask.cs
@@ -12,43 +12,43 @@ namespace Microsoft.Build.UnitTests
 {
     internal class MockTaskBase
     {
-        private bool _myBoolParam = false;
-        private bool[] _myBoolArrayParam = null;
-        private int _myIntParam = 0;
-        private int[] _myIntArrayParam = null;
-        private string _myStringParam = null;
-        private string[] _myStringArrayParam = null;
-        private ITaskItem _myITaskItemParam = null;
-        private ITaskItem[] _myITaskItemArrayParam = null;
-
-        private bool _myRequiredBoolParam = false;
-        private bool[] _myRequiredBoolArrayParam = null;
-        private int _myRequiredIntParam = 0;
-        private int[] _myRequiredIntArrayParam = null;
-        private string _myRequiredStringParam = null;
-        private string[] _myRequiredStringArrayParam = null;
-        private ITaskItem _myRequiredITaskItemParam = null;
-        private ITaskItem[] _myRequiredITaskItemArrayParam = null;
-
-        internal bool myBoolParamWasSet = false;
-        internal bool myBoolArrayParamWasSet = false;
-        internal bool myIntParamWasSet = false;
-        internal bool myIntArrayParamWasSet = false;
-        internal bool myStringParamWasSet = false;
-        internal bool myStringArrayParamWasSet = false;
-        internal bool myITaskItemParamWasSet = false;
-        internal bool myITaskItemArrayParamWasSet = false;
+        private bool _myBoolParam;
+        private bool[] _myBoolArrayParam;
+        private int _myIntParam;
+        private int[] _myIntArrayParam;
+        private string _myStringParam;
+        private string[] _myStringArrayParam;
+        private ITaskItem _myITaskItemParam;
+        private ITaskItem[] _myITaskItemArrayParam;
+
+        private bool _myRequiredBoolParam;
+        private bool[] _myRequiredBoolArrayParam;
+        private int _myRequiredIntParam;
+        private int[] _myRequiredIntArrayParam;
+        private string _myRequiredStringParam;
+        private string[] _myRequiredStringArrayParam;
+        private ITaskItem _myRequiredITaskItemParam;
+        private ITaskItem[] _myRequiredITaskItemArrayParam;
+
+        internal bool myBoolParamWasSet;
+        internal bool myBoolArrayParamWasSet;
+        internal bool myIntParamWasSet;
+        internal bool myIntArrayParamWasSet;
+        internal bool myStringParamWasSet;
+        internal bool myStringArrayParamWasSet;
+        internal bool myITaskItemParamWasSet;
+        internal bool myITaskItemArrayParamWasSet;
 
         // disable csharp compiler warning #0414: field assigned unused value
 #pragma warning disable 0414
-        internal bool myRequiredBoolParamWasSet = false;
-        internal bool myRequiredBoolArrayParamWasSet = false;
-        internal bool myRequiredIntParamWasSet = false;
-        internal bool myRequiredIntArrayParamWasSet = false;
-        internal bool myRequiredStringParamWasSet = false;
-        internal bool myRequiredStringArrayParamWasSet = false;
-        internal bool myRequiredITaskItemParamWasSet = false;
-        internal bool myRequiredITaskItemArrayParamWasSet = false;
+        internal bool myRequiredBoolParamWasSet;
+        internal bool myRequiredBoolArrayParamWasSet;
+        internal bool myRequiredIntParamWasSet;
+        internal bool myRequiredIntArrayParamWasSet;
+        internal bool myRequiredStringParamWasSet;
+        internal bool myRequiredStringArrayParamWasSet;
+        internal bool myRequiredITaskItemParamWasSet;
+        internal bool myRequiredITaskItemArrayParamWasSet;
 #pragma warning restore 0414
 
         /// <summary>
@@ -377,7 +377,7 @@ public TaskItem[] TaskItemArrayOutputParameter
     /// </summary>
     sealed internal class MockTask : MockTaskBase, ITask
     {
-        private IBuildEngine _e = null;
+        private IBuildEngine _e;
 
         /// <summary>
         /// Task constructor.
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 93d21956172..5c7cf73fba9 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -327,7 +327,7 @@ public bool UseSynchronousLogging
         /// <summary>
         /// Indicates whether to emit a default error if a task returns false without logging an error.
         /// </summary>
-        public bool AllowFailureWithoutError { get; set; } = false;
+        public bool AllowFailureWithoutError { get; set; }
 
         /// <summary>
         /// Gets the environment variables which were set when this build was created.
@@ -780,7 +780,7 @@ public string OutputResultsCacheFile
         /// <summary>
         /// Determines whether MSBuild will save the results of builds after EndBuild to speed up future builds.
         /// </summary>
-        public bool DiscardBuildResults { get; set; } = false;
+        public bool DiscardBuildResults { get; set; }
 
         /// <summary>
         /// Gets or sets a value indicating whether the build process should run as low priority.
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 0081265b99c..15b6bc0946c 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -27,7 +27,7 @@ internal class NodeProviderInProc : INodeProvider, INodePacketFactory, IDisposab
         /// <summary>
         /// Flag indicating we have disposed.
         /// </summary>
-        private bool _disposed = false;
+        private bool _disposed;
 
         /// <summary>
         /// Value used to ensure multiple in-proc nodes which save the operating environment are not created.
@@ -72,7 +72,7 @@ internal class NodeProviderInProc : INodeProvider, INodePacketFactory, IDisposab
         /// <summary>
         /// Check to allow the inproc node to have exclusive ownership of the operating environment
         /// </summary>
-        private bool _exclusiveOperatingEnvironment = false;
+        private bool _exclusiveOperatingEnvironment;
 
         #endregion
 
diff --git a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
index 57c0e51523e..66d3bccd3ad 100644
--- a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
@@ -112,7 +112,7 @@ public IDictionary<int, ISet<string>> WarningsAsMessagesByProject
         /// <summary>
         /// This property is ignored by this event sink and relies on the receiver to keep track of whether or not any errors have been logged.
         /// </summary>
-        public ISet<int> BuildSubmissionIdsThatHaveLoggedErrors { get; } = null;
+        public ISet<int> BuildSubmissionIdsThatHaveLoggedErrors { get; }
         #endregion
         #region IBuildEventSink Methods
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 117f5195448..314d427b5c1 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -145,7 +145,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// What is the Id for the next logger registered with the logging service.
         /// This Id is unique for this instance of the loggingService.
         /// </summary>
-        private int _nextSinkId = 0;
+        private int _nextSinkId;
 
         /// <summary>
         /// The number of nodes in the system. Loggers may take different action depending on how many nodes are in the system.
@@ -185,7 +185,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <summary>
         /// What node is this logging service running on
         /// </summary>
-        private int _nodeId = 0;
+        private int _nodeId;
 
         /// <summary>
         /// Whether to include evaluation metaprojects in events.
@@ -477,7 +477,7 @@ public ISet<string> WarningsAsErrors
         {
             get;
             set;
-        } = null;
+        }
 
         /// <summary>
         /// A list of warnings to treat as low importance messages.
@@ -486,7 +486,7 @@ public ISet<string> WarningsAsMessages
         {
             get;
             set;
-        } = null;
+        }
 
         /// <summary>
         /// Should evaluation events include generated metaprojects?
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
index dcc4e2f8074..ed69b03a459 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
@@ -21,7 +21,7 @@ internal class LoggingServiceFactory
         /// <summary>
         /// What node is this logging service being created on.
         /// </summary>
-        private int _nodeId = 0;
+        private int _nodeId;
         #endregion
 
         #region Constructor
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
index cd25ccc91c4..e73090bfb1f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
@@ -34,7 +34,7 @@ internal class CallTarget : ITask
         /// default targets, use the <see cref="MSBuild"/> task and pass in Projects=$(MSBuildProjectFile).
         /// </summary>
         /// <value>Array of target names.</value>
-        public string[] Targets { get; set; } = null;
+        public string[] Targets { get; set; }
 
         /// <summary>
         /// Outputs of the targets built in each project.
@@ -48,12 +48,12 @@ internal class CallTarget : ITask
         /// we would call the engine once per target (for each project).  The benefit of this is that
         /// if one target fails, you can still continue with the remaining targets.
         /// </summary>
-        public bool RunEachTargetSeparately { get; set; } = false;
+        public bool RunEachTargetSeparately { get; set; }
 
         /// <summary>
         /// Deprecated. Does nothing.
         /// </summary>
-        public bool UseResultsCache { get; set; } = false;
+        public bool UseResultsCache { get; set; }
 
         #endregion
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index 6e0ba6a0d5f..11138bcc8e7 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -90,7 +90,7 @@ private enum SkipNonexistentProjectsBehavior
         /// <summary>
         /// Gets or sets a semicolon-delimited list of global properties to remove.
         /// </summary>
-        public string RemoveProperties { get; set; } = null;
+        public string RemoveProperties { get; set; }
 
         /// <summary>
         /// The targets to build in each project specified by the <see cref="Projects"/> property.
@@ -116,25 +116,25 @@ private enum SkipNonexistentProjectsBehavior
         /// Indicates if the paths of target output items should be rebased relative to the calling project.
         /// </summary>
         /// <value>true, if target output item paths should be rebased</value>
-        public bool RebaseOutputs { get; set; } = false;
+        public bool RebaseOutputs { get; set; }
 
         /// <summary>
         /// Forces the task to stop building the remaining projects as soon as any of
         /// them fail.
         /// </summary>
-        public bool StopOnFirstFailure { get; set; } = false;
+        public bool StopOnFirstFailure { get; set; }
 
         /// <summary>
         /// When this is true, instead of calling the engine once to build all the targets (for each project),
         /// we would call the engine once per target (for each project).  The benefit of this is that
         /// if one target fails, you can still continue with the remaining targets.
         /// </summary>
-        public bool RunEachTargetSeparately { get; set; } = false;
+        public bool RunEachTargetSeparately { get; set; }
 
         /// <summary>
         /// Value of ToolsVersion to use when building projects passed to this task.
         /// </summary>
-        public string ToolsVersion { get; set; } = null;
+        public string ToolsVersion { get; set; }
 
         /// <summary>
         /// When this is true we call the engine with all the projects at once instead of 
@@ -145,7 +145,7 @@ private enum SkipNonexistentProjectsBehavior
         /// <summary>
         /// If true the project will be unloaded once the operation is completed
         /// </summary>
-        public bool UnloadProjectsOnCompletion { get; set; } = false;
+        public bool UnloadProjectsOnCompletion { get; set; }
 
         /// <summary>
         /// Deprecated. Does nothing.
@@ -200,7 +200,7 @@ public string SkipNonexistentProjects
         /// will be un-escaped before processing. e.g. %3B (an escaped ';') in the string for any of them will 
         /// be treated as if it were an un-escaped ';'
         /// </summary>
-        public string[] TargetAndPropertyListSeparators { get; set; } = null;
+        public string[] TargetAndPropertyListSeparators { get; set; }
 
         /// <summary>
         /// If set, MSBuild will skip the targets specified in this build request if they are not defined in the
diff --git a/src/Framework.UnitTests/EventArgs_Tests.cs b/src/Framework.UnitTests/EventArgs_Tests.cs
index 69d90df50b3..f076d77a074 100644
--- a/src/Framework.UnitTests/EventArgs_Tests.cs
+++ b/src/Framework.UnitTests/EventArgs_Tests.cs
@@ -21,7 +21,7 @@ public class EventArgs_Tests
         /// Base instance of a BuildEventArgs some default data, this is used during the tests
         /// to verify the equals operators.
         /// </summary>
-        private static GenericBuildEventArgs s_baseGenericEvent = null;
+        private static GenericBuildEventArgs s_baseGenericEvent;
 
         /// <summary>
         /// Setup the test, this method is run ONCE for the entire test fixture
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index e747dbcc9a3..f8ffff3c833 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -267,7 +267,7 @@ public bool IsRunningMultipleNodes
         /// <summary>
         /// Enables or disables emitting a default error when a task fails without logging errors
         /// </summary>
-        public bool AllowFailureWithoutError { get; set; } = false;
+        public bool AllowFailureWithoutError { get; set; }
         #endregion
 
         #region IBuildEngine8 Implementation
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index ae95d608193..386669cbe3b 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2037,7 +2037,7 @@ bool allowEmptyParameters
         /// <summary>
         /// Whether switches from the auto-response file are being used.
         /// </summary>
-        internal static bool usingSwitchesFromAutoResponseFile = false;
+        internal static bool usingSwitchesFromAutoResponseFile;
 
         /// <summary>
         /// Parses the auto-response file (assumes the "/noautoresponse" switch is not specified on the command line), and combines the
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 99db41274e3..2a4bf7e261a 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -57,9 +57,9 @@ internal enum PartialComparisonFlags : int
     [Serializable]
     internal sealed class AssemblyNameExtension : ISerializable, IEquatable<AssemblyNameExtension>, ITranslatable
     {
-        private AssemblyName asAssemblyName = null;
-        private string asString = null;
-        private bool isSimpleName = false;
+        private AssemblyName asAssemblyName;
+        private string asString;
+        private bool isSimpleName;
         private bool hasProcessorArchitectureInFusionName;
         private bool immutable;
 
diff --git a/src/Shared/CoreCLRAssemblyLoader.cs b/src/Shared/CoreCLRAssemblyLoader.cs
index cd02dba6528..338d06d3984 100644
--- a/src/Shared/CoreCLRAssemblyLoader.cs
+++ b/src/Shared/CoreCLRAssemblyLoader.cs
@@ -22,7 +22,7 @@ internal sealed class CoreClrAssemblyLoader
         private readonly HashSet<string> _dependencyPaths = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
         private readonly object _guard = new object();
 
-        private bool _resolvingHandlerHookedUp = false;
+        private bool _resolvingHandlerHookedUp;
 
         private static readonly Version _currentAssemblyVersion = new Version(Microsoft.Build.Shared.MSBuildConstants.CurrentAssemblyVersion);
 
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 940bcd46ce9..6067abbb117 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -41,7 +41,7 @@ internal static partial class FileUtilities
         /// <summary>
         /// The directory where MSBuild stores cache information used during the build.
         /// </summary>
-        internal static string cacheDirectory = null;
+        internal static string cacheDirectory;
 
         /// <summary>
         /// FOR UNIT TESTS ONLY
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index c398d3304a5..4815c1ff99e 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -187,7 +187,7 @@ private static int GetDefaultPacketVersion()
         /// <summary>
         /// Delegate for translating targetfinished events. 
         /// </summary>
-        private TargetFinishedTranslator _targetFinishedTranslator = null;
+        private TargetFinishedTranslator _targetFinishedTranslator;
 
         #region Data
 
diff --git a/src/Shared/TaskEngineAssemblyResolver.cs b/src/Shared/TaskEngineAssemblyResolver.cs
index ddbc6dcc62c..705f97e8859 100644
--- a/src/Shared/TaskEngineAssemblyResolver.cs
+++ b/src/Shared/TaskEngineAssemblyResolver.cs
@@ -157,11 +157,11 @@ public override object InitializeLifetimeService()
 
 
         // we have to store the event handler instance in case we have to remove it
-        private ResolveEventHandler _eventHandler = null;
+        private ResolveEventHandler _eventHandler;
 #else
-        private Func<AssemblyLoadContext, AssemblyName, Assembly> _eventHandler = null;
+        private Func<AssemblyLoadContext, AssemblyName, Assembly> _eventHandler;
 #endif
         // path to the task assembly, but only if it's loaded using LoadFrom. If it's loaded with Load, this is null.
-        private string _taskAssemblyFile = null;
+        private string _taskAssemblyFile;
     }
 }
diff --git a/src/Shared/TaskHostTaskComplete.cs b/src/Shared/TaskHostTaskComplete.cs
index 11194395c49..ae4f7d4a3e7 100644
--- a/src/Shared/TaskHostTaskComplete.cs
+++ b/src/Shared/TaskHostTaskComplete.cs
@@ -73,12 +73,12 @@ internal class TaskHostTaskComplete : INodePacket
         /// <summary>
         /// The set of parameters / values from the task after it finishes execution. 
         /// </summary>
-        private Dictionary<string, TaskParameter> _taskOutputParameters = null;
+        private Dictionary<string, TaskParameter> _taskOutputParameters;
 
         /// <summary>
         /// The process environment at the end of task execution.
         /// </summary>
-        private Dictionary<string, string> _buildProcessEnvironment = null;
+        private Dictionary<string, string> _buildProcessEnvironment;
 
         /// <summary>
         /// Constructor
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 9dbd4f83802..e3e49bf3e99 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -502,17 +502,17 @@ private class TaskParameterTaskItem :
             /// <summary>
             /// The item spec 
             /// </summary>
-            private string _escapedItemSpec = null;
+            private string _escapedItemSpec;
 
             /// <summary>
             /// The full path to the project that originally defined this item.
             /// </summary>
-            private string _escapedDefiningProject = null;
+            private string _escapedDefiningProject;
 
             /// <summary>
             /// The custom metadata
             /// </summary>
-            private Dictionary<string, string> _customEscapedMetadata = null;
+            private Dictionary<string, string> _customEscapedMetadata;
 
             /// <summary>
             /// Cache for fullpath metadata
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index b779aaa45ba..c1ed41d7163 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -1965,17 +1965,17 @@ internal class MockFileSystem
             /// <summary>
             /// Number of times a file from set 1 was requested.
             /// </summary>
-            private int _fileSet1Hits = 0;
+            private int _fileSet1Hits;
 
             /// <summary>
             /// Number of times a file from set 2 was requested.
             /// </summary>
-            private int _fileSet2Hits = 0;
+            private int _fileSet2Hits;
 
             /// <summary>
             /// Number of times a file from set 3 was requested.
             /// </summary>
-            private int _fileSet3Hits = 0;
+            private int _fileSet3Hits;
 
             /// <summary>
             /// Construct.
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 431e8948cb0..bf02ec51ac7 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -51,7 +51,7 @@ internal MockEngine() : this(false)
 
         internal int Errors { get; set; }
 
-        public bool AllowFailureWithoutError { get; set; } = false;
+        public bool AllowFailureWithoutError { get; set; }
 
         public BuildErrorEventArgs[] ErrorEvents => _errorEvents.ToArray();
         public BuildWarningEventArgs[] WarningEvents => _warningEvents.ToArray();
diff --git a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
index 03fa15ccfc5..841fc3d51e8 100644
--- a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
+++ b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
@@ -20,7 +20,7 @@ public class SpanBasedStringBuilder_Benchmark
         private static SpanBasedStringBuilder _pooledSpanBasedStringBuilder = new SpanBasedStringBuilder();
         private static StringBuilder _pooledStringBuilder = new StringBuilder();
 
-        private static int _uniqueStringCounter = 0;
+        private static int _uniqueStringCounter;
 
         [GlobalSetup]
         public void GlobalSetup()
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index e64d7b07d8c..26c35c99ff0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -41,10 +41,10 @@ public class ResolveAssemblyReferenceTestFixture : IDisposable
         internal static Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader = new Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader(ReadMachineTypeFromPEHeader);
 
         // Performance checks.
-        internal static Dictionary<string, int> uniqueFileExists = null;
-        internal static Dictionary<string, int> uniqueGetAssemblyName = null;
+        internal static Dictionary<string, int> uniqueFileExists;
+        internal static Dictionary<string, int> uniqueGetAssemblyName;
 
-        internal static bool useFrameworkFileExists = false;
+        internal static bool useFrameworkFileExists;
         internal const string REDISTLIST = @"<FileList  Redist=""Microsoft-Windows-CLRCoreComp.4.0"" Name="".NET Framework 4"" RuntimeVersion=""4.0"" ToolsVersion=""12.0"">
   <File AssemblyName=""Accessibility"" Version=""4.0.0.0"" PublicKeyToken=""b03f5f7f11d50a3a"" Culture=""neutral"" ProcessorArchitecture=""MSIL"" InGac=""true"" />
   <File AssemblyName=""CustomMarshalers"" Version=""4.0.0.0"" PublicKeyToken=""b03f5f7f11d50a3a"" Culture=""neutral"" ProcessorArchitecture=""MSIL"" InGac=""true"" />
