diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index e9e63b26c76..2d29e8c5067 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -62,14 +62,13 @@ internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo)
             _propertyInfo = propertyInfo;
         }
 
-        internal ReflectableTaskPropertyInfo(TypeInformationPropertyInfo propertyInfo) :
+        internal ReflectableTaskPropertyInfo(TypeInformation.PropertyInfo propertyInfo) :
             base(
                 propertyInfo.Name,
                 propertyInfo.PropertyType,
                 propertyInfo.OutputAttribute,
                 propertyInfo.RequiredAttribute)
         {
-
         }
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 2658c86b45a..350a9cfa286 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -281,7 +281,7 @@ public bool Execute()
                         BuildEngine.ProjectFileOfTaskNode,
                         BuildEngine.ContinueOnError,
                         _taskType.TypeName,
-                        _taskType.LoadInfo.AssemblyLocation ?? _taskType.LoadedType.LoadedAssembly.Location,
+                        _taskType.Path,
                         _buildComponentHost.BuildParameters.LogTaskInputs,
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 021d88e2c70..3bb9231d6d7 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -204,7 +204,6 @@ internal void SetPropertyValue(ITask task, TaskPropertyInfo property, object val
             {
                 PropertyInfo prop = task.GetType().GetProperty(property.Name);
                 prop.SetValue(task, value);
-                //task.GetType().GetTypeInfo().DeclaredProperties.FirstOrDefault(prop => prop.Name.Equals(property.Name)).SetValue(property, value);
             }
         }
 
diff --git a/src/Shared/TypeInformation.cs b/src/Shared/TypeInformation.cs
index 39ea106e68d..67d3d05862d 100644
--- a/src/Shared/TypeInformation.cs
+++ b/src/Shared/TypeInformation.cs
@@ -8,10 +8,13 @@
 #endif
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     internal sealed class TypeInformation
     {
+        internal string Path { get; set; }
         internal AssemblyLoadInfo LoadInfo { get; set; }
         internal string TypeName { get; set; }
 
@@ -24,7 +27,7 @@ internal sealed class TypeInformation
         internal AssemblyName AssemblyName { get; set; }
         internal string Namespace { get; set; }
 #if !TASKHOST
-        internal TypeInformationPropertyInfo[] Properties { get; set; }
+        internal TypeInformation.PropertyInfo[] Properties { get; set; }
 #endif
 
         internal TypeInformation()
@@ -42,18 +45,18 @@ internal TypeInformation(LoadedType baseType)
 #else
             ImplementsIGeneratedTask = LoadedType.Type is IGeneratedTask;
 #endif
-            AssemblyName = LoadedType.LoadedAssembly?.GetName();
+            AssemblyName = baseType.LoadedAssembly?.GetName();
             Namespace = LoadedType.Type.Namespace;
             LoadInfo = LoadedType.Assembly;
             TypeName = LoadedType.Type.FullName;
+            Path = baseType.Assembly.AssemblyFile;
         }
 
-        public PropertyInfo[] GetProperties(BindingFlags flags)
+        public System.Reflection.PropertyInfo[] GetProperties(BindingFlags flags)
         {
             if (LoadedType is null)
             {
                 throw new NotImplementedException();
-                
             }
             else
             {
@@ -61,7 +64,7 @@ public PropertyInfo[] GetProperties(BindingFlags flags)
             }
         }
 
-        public PropertyInfo GetProperty(string name, BindingFlags flags)
+        public System.Reflection.PropertyInfo GetProperty(string name, BindingFlags flags)
         {
             if (LoadedType is null)
             {
@@ -72,13 +75,21 @@ public PropertyInfo GetProperty(string name, BindingFlags flags)
                 return LoadedType.Type.GetProperty(name, flags);
             }
         }
-    }
 
-    internal struct TypeInformationPropertyInfo
-    {
-        public string Name { get; set; }
-        public Type PropertyType { get; set; } = null;
-        public bool OutputAttribute { get; set; }
-        public bool RequiredAttribute { get; set; }
+        internal struct PropertyInfo
+        {
+            public PropertyInfo(string name, Type propertyType, bool outputAttribute, bool requiredAttribute)
+            {
+                Name = name;
+                PropertyType = propertyType;
+                OutputAttribute = outputAttribute;
+                RequiredAttribute = requiredAttribute;
+            }
+
+            public string Name { get; set; }
+            public Type PropertyType { get; set; }
+            public bool OutputAttribute { get; set; }
+            public bool RequiredAttribute { get; set; }
+        }
     }
 }
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 2b2fd4eb075..f433a5afd6e 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -396,6 +396,7 @@ private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string
                         TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
                         if (TryGetTypeInformationFromDefinition(metadataReader, typeDef, typeName, out TypeInformation typeInformation))
                         {
+                            typeInformation.Path = path;
                             return typeInformation;
                         }
                     }
@@ -451,10 +452,10 @@ private bool TryGetTypeInformationFromDefinition(MetadataReader metadataReader,
                 }
 
                 IEnumerable<PropertyDefinition> propertyDefinitions = typeDef.GetProperties().Select(prop => metadataReader.GetPropertyDefinition(prop));
-                List<TypeInformationPropertyInfo> typePropertyInfos = new();
+                List<TypeInformation.PropertyInfo> typePropertyInfos = new();
                 foreach (PropertyDefinition propertyDefinition in propertyDefinitions)
                 {
-                    TypeInformationPropertyInfo toAdd = new();
+                    TypeInformation.PropertyInfo toAdd = new();
                     toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
                     SignatureDecoder<string, object> decoder = new(ConstantSignatureVisualizer.Instance, metadataReader, genericContext: null);
                     BlobReader blob = metadataReader.GetBlobReader(propertyDefinition.Signature);
@@ -551,7 +552,7 @@ private bool TryGetTypeInformationFromDefinition(MetadataReader metadataReader,
 
             private Type StringToType(string s)
             {
-                //return Type.GetType(s, false, true) ?? typeof(object);
+                // return Type.GetType(s, false, true) ?? typeof(object);
                 return s switch
                 {
                     "String" => typeof(String),
