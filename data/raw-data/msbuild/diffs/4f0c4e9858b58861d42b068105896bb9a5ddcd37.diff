diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 5c2d296f26b..3e42d31bfa2 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -182,7 +182,7 @@ public void TestRetrieveSubsetTargetsFromResult()
             result.AddResultsForTarget("testTarget2", BuildResultUtilities.GetEmptySucceedingTargetResult());
             cache.AddResult(result);
 
-            ResultsCacheResponse response = cache.SatisfyRequest(request, new List<string>(), new List<string>(new string[] { "testTarget2" }), new List<string>(new string[] { "testTarget" }), skippedResultsAreOK: false);
+            ResultsCacheResponse response = cache.SatisfyRequest(request, new List<string>(), new List<string>(new string[] { "testTarget2" }), new List<string>(new string[] { "testTarget" }), skippedResultsDoNotCauseCacheMiss: false);
 
             Assert.Equal(ResultsCacheResponseType.Satisfied, response.Type);
 
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index b19980a2b61..c6e8e28b34b 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -787,6 +787,8 @@ public BuildParameters Clone()
 
         internal bool UsesInputCaches() => InputResultsCacheFiles != null;
 
+        internal bool SkippedResultsDoNotCauseCacheMiss() => IsolateProjects;
+
         /// <summary>
         /// Implementation of the serialization mechanism.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index edd89d352a4..e7eb27b0d06 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -512,7 +512,13 @@ public void ReportConfigurationResponse(BuildRequestConfigurationResponse respon
                                 {
                                     // If we have results already in the cache for this request, give them to the
                                     // entry now.
-                                    ResultsCacheResponse cacheResponse = resultsCache.SatisfyRequest(request, config.ProjectInitialTargets, config.ProjectDefaultTargets, config.GetAfterTargetsForDefaultTargets(request), skippedResultsAreOK: false);
+                                    var cacheResponse = resultsCache.SatisfyRequest(
+                                        request: request,
+                                        configInitialTargets: config.ProjectInitialTargets,
+                                        configDefaultTargets: config.ProjectDefaultTargets,
+                                        additionalTargetsToCheckForOverallResult: config.GetAfterTargetsForDefaultTargets(request),
+                                        skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
+
                                     if (cacheResponse.Type == ResultsCacheResponseType.Satisfied)
                                     {
                                         // We have a result, give it back to this request.
@@ -1169,11 +1175,11 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                         IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
 
                         var response = resultsCache.SatisfyRequest(
-                            newRequest,
-                            matchingConfig.ProjectInitialTargets,
-                            matchingConfig.ProjectDefaultTargets,
-                            matchingConfig.GetAfterTargetsForDefaultTargets(newRequest),
-                            skippedResultsAreOK: false);
+                            request: newRequest,
+                            configInitialTargets: matchingConfig.ProjectInitialTargets,
+                            configDefaultTargets: matchingConfig.ProjectDefaultTargets,
+                            additionalTargetsToCheckForOverallResult: matchingConfig.GetAfterTargetsForDefaultTargets(newRequest),
+                            skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
 
                         if (response.Type == ResultsCacheResponseType.Satisfied)
                         {
diff --git a/src/Build/BackEnd/Components/Caching/IResultsCache.cs b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
index bc9973f32cb..482db3eb491 100644
--- a/src/Build/BackEnd/Components/Caching/IResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
@@ -51,12 +51,12 @@ internal interface IResultsCache : IBuildComponent, ITranslatable, IEnumerable<B
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="additionalTargetsToCheckForOverallResult">Any additional targets that need to be checked to determine overall 
         /// pass or failure, but that are not included as actual results. (E.g. AfterTargets of an entrypoint target)</param>
-        /// <param name="skippedResultsAreOK">If false, a cached skipped target will cause this method to return "NotSatisfied".  
+        /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".  
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method 
         /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no 
         /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
-        ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, List<string> additionalTargetsToCheckForOverallResult, bool skippedResultsAreOK);
+        ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, List<string> additionalTargetsToCheckForOverallResult, bool skippedResultsDoNotCauseCacheMiss);
 
         /// <summary>
         /// Clears the results for a specific configuration.
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index c098bed1377..6b478133210 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -151,12 +151,12 @@ public BuildResult GetResultsForConfiguration(int configurationId)
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="additionalTargetsToCheckForOverallResult">Any additional targets that need to be checked to determine overall 
         /// pass or failure, but that are not included as actual results. (E.g. AfterTargets of an entrypoint target)</param>
-        /// <param name="skippedResultsAreOK">If false, a cached skipped target will cause this method to return "NotSatisfied".  
+        /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".  
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method 
         /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no 
         /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
-        public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, List<string> additionalTargetsToCheckForOverallResult, bool skippedResultsAreOK)
+        public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, List<string> additionalTargetsToCheckForOverallResult, bool skippedResultsDoNotCauseCacheMiss)
         {
             ErrorUtilities.VerifyThrowArgument(request.IsConfigurationResolved, "UnresolvedConfigurationInRequest");
             ResultsCacheResponse response = new ResultsCacheResponse(ResultsCacheResponseType.NotSatisfied);
@@ -168,7 +168,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                     BuildResult allResults = _resultsByConfiguration[request.ConfigurationId];
 
                     // Check for targets explicitly specified.
-                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsAreOK);
+                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);
 
                     if (explicitTargetsSatisfied)
                     {
@@ -176,7 +176,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                         response.Type = ResultsCacheResponseType.Satisfied;
 
                         // Check for the initial targets.  If we don't know what the initial targets are, we assume they are not satisfied.
-                        if (configInitialTargets == null || !CheckResults(allResults, configInitialTargets, null, skippedResultsAreOK))
+                        if (configInitialTargets == null || !CheckResults(allResults, configInitialTargets, null, skippedResultsDoNotCauseCacheMiss))
                         {
                             response.Type = ResultsCacheResponseType.NotSatisfied;
                         }
@@ -186,7 +186,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                         {
                             // Check for the default target, if necessary.  If we don't know what the default targets are, we
                             // assume they are not satisfied.
-                            if (configDefaultTargets == null || !CheckResults(allResults, configDefaultTargets, null, skippedResultsAreOK))
+                            if (configDefaultTargets == null || !CheckResults(allResults, configDefaultTargets, null, skippedResultsDoNotCauseCacheMiss))
                             {
                                 response.Type = ResultsCacheResponseType.NotSatisfied;
                             }
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
index 6d0aa20290d..10873f841e0 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
@@ -78,14 +78,14 @@ public ResultsCacheResponse SatisfyRequest(
             List<string> configInitialTargets,
             List<string> configDefaultTargets,
             List<string> additionalTargetsToCheckForOverallResult,
-            bool skippedResultsAreOK)
+            bool skippedResultsDoNotCauseCacheMiss)
         {
             var overrideRequest = _override.SatisfyRequest(
                 request,
                 configInitialTargets,
                 configDefaultTargets,
                 additionalTargetsToCheckForOverallResult,
-                skippedResultsAreOK);
+                skippedResultsDoNotCauseCacheMiss);
 
             if (overrideRequest.Type == ResultsCacheResponseType.Satisfied)
             {
@@ -96,7 +96,7 @@ public ResultsCacheResponse SatisfyRequest(
                         configInitialTargets,
                         configDefaultTargets,
                         additionalTargetsToCheckForOverallResult,
-                        skippedResultsAreOK)
+                        skippedResultsDoNotCauseCacheMiss)
                         .Type == ResultsCacheResponseType.NotSatisfied,
                     "caches should not overlap");
 #endif
@@ -108,7 +108,7 @@ public ResultsCacheResponse SatisfyRequest(
                 configInitialTargets,
                 configDefaultTargets,
                 additionalTargetsToCheckForOverallResult,
-                skippedResultsAreOK);
+                skippedResultsDoNotCauseCacheMiss);
         }
 
         public void ClearResultsForConfiguration(int configurationId)
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 38ddec64bbb..5b672934922 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -360,7 +360,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
                     // Note: In this case we do not need to log that we got the results from the cache because we are only using the cache 
                     // for filtering the targets for the result instead rather than using the cache as the location where this result came from.
-                    ScheduleResponse response = TrySatisfyRequestFromCache(request.Parent.AssignedNode, request.BuildRequest, skippedResultsAreOK: false);
+                    ScheduleResponse response = TrySatisfyRequestFromCache(request.Parent.AssignedNode, request.BuildRequest, skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
 
                     // response may be null if the result was never added to the cache. This can happen if the result has an exception in it
                     // or the results could not be satisfied because the initial or default targets have been skipped. If that is the case
@@ -403,7 +403,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
                         // its configuration and set of targets are identical -- from MSBuild's perspective, it's the same.  So since 
                         // we're not going to attempt to re-execute it, if there are skipped targets in the result, that's fine. We just 
                         // need to know what the target results are so that we can log them. 
-                        ScheduleResponse response = TrySatisfyRequestFromCache(parentNode, unscheduledRequest.BuildRequest, skippedResultsAreOK: true);
+                        ScheduleResponse response = TrySatisfyRequestFromCache(parentNode, unscheduledRequest.BuildRequest, skippedResultsDoNotCauseCacheMiss: true);
 
                         // If we have a response we need to tell the loggers that we satisified that request from the cache.
                         if (response != null)
@@ -1565,7 +1565,7 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                 // First, determine if we have already built this request and have results for it.  If we do, we prepare the responses for it
                 // directly here.  We COULD simply report these as blocking the parent request and let the scheduler pick them up later when the parent
                 // comes back up as schedulable, but we prefer to send the results back immediately so this request can (potentially) continue uninterrupted.
-                ScheduleResponse response = TrySatisfyRequestFromCache(nodeForResults, request, skippedResultsAreOK: false);
+                ScheduleResponse response = TrySatisfyRequestFromCache(nodeForResults, request, skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
                 if (null != response)
                 {
                     TraceScheduler("Request {0} (node request {1}) satisfied from the cache.", request.GlobalRequestId, request.NodeRequestId);
@@ -1697,7 +1697,7 @@ private void ResolveRequestFromCacheAndResumeIfPossible(SchedulableRequest reque
             int nodeForResults = (request.Parent != null) ? request.Parent.AssignedNode : InvalidNodeId;
 
             // Do we already have results?  If so, just return them.
-            ScheduleResponse response = TrySatisfyRequestFromCache(nodeForResults, request.BuildRequest, skippedResultsAreOK: false);
+            ScheduleResponse response = TrySatisfyRequestFromCache(nodeForResults, request.BuildRequest, skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
             if (response != null)
             {
                 if (response.Action == ScheduleActionType.SubmissionComplete)
@@ -1775,10 +1775,10 @@ private void ResumeRequiredWork(List<ScheduleResponse> responses)
         /// <summary>
         /// Attempts to get a result from the cache to satisfy the request, and returns the appropriate response if possible.
         /// </summary>
-        private ScheduleResponse TrySatisfyRequestFromCache(int nodeForResults, BuildRequest request, bool skippedResultsAreOK)
+        private ScheduleResponse TrySatisfyRequestFromCache(int nodeForResults, BuildRequest request, bool skippedResultsDoNotCauseCacheMiss)
         {
             BuildRequestConfiguration config = _configCache[request.ConfigurationId];
-            ResultsCacheResponse resultsResponse = _resultsCache.SatisfyRequest(request, config.ProjectInitialTargets, config.ProjectDefaultTargets, config.GetAfterTargetsForDefaultTargets(request), skippedResultsAreOK);
+            ResultsCacheResponse resultsResponse = _resultsCache.SatisfyRequest(request, config.ProjectInitialTargets, config.ProjectDefaultTargets, config.GetAfterTargetsForDefaultTargets(request), skippedResultsDoNotCauseCacheMiss);
 
             if (resultsResponse.Type == ResultsCacheResponseType.Satisfied)
             {
