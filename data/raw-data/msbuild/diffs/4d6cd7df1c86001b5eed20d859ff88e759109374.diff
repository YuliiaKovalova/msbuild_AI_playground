diff --git a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
index 4363b9fd4d1..d748a9335f1 100644
--- a/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
+++ b/src/Build.UnitTests/BuildEventArgsDataEnumeration.cs
@@ -68,13 +68,11 @@ public void SampleItemsEnumeration()
 
             results.Count.ShouldBe(2);
             results[0].Type.ShouldBe("Key");
-            results[0].Value.ItemSpec.ShouldBe("TestItemSpec");
-            results[0].Value.GetEvaluatedInclude().ShouldBe("TestItemSpec");
+            results[0].Value.EvaluatedInclude.ShouldBe("TestItemSpec");
             results[0].Value.EnumerateMetadata().ShouldBeEmpty();
 
             results[1].Type.ShouldBe("Key2");
-            results[1].Value.ItemSpec.ShouldBe("spec");
-            results[1].Value.GetEvaluatedInclude().ShouldBe("spec");
+            results[1].Value.EvaluatedInclude.ShouldBe("spec");
             List<KeyValuePair<string, string>> metadata = results[1].Value.EnumerateMetadata().ToList();
             metadata.Count.ShouldBe(2);
             metadata[0].Key.ShouldBe("metadat1");
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index f42747d0d1d..1a822781a41 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -28,7 +28,7 @@ namespace Microsoft.Build.Evaluation
     /// we do use it for build-time items.
     /// </comment>
     [DebuggerDisplay("{ItemType}={EvaluatedInclude} [{UnevaluatedInclude}] #DirectMetadata={DirectMetadataCount}")]
-    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemDataWithMetadata
+    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemData
     {
         /// <summary>
         /// Project that this item lives in.
@@ -144,11 +144,8 @@ internal ProjectItem(
 
         internal virtual ProjectItemLink Link => null;
 
-        /// <inheritdoc cref="IItemData.ItemSpec"/>
-        string IItemData.ItemSpec => this.EvaluatedInclude;
-
-        /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
-        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
 
         /// <summary>
         /// Backing XML item.
@@ -200,9 +197,10 @@ public string UnevaluatedInclude
             }
         }
 
-        /// <summary>
+        /// <inheritdoc cref="IItemData.EvaluatedInclude"/>
+        /// <remarks>
         /// Gets the evaluated value of the include, unescaped.
-        /// </summary>
+        /// </remarks>
         public string EvaluatedInclude
         {
             [DebuggerStepThrough]
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 82a53158881..e0af54e5480 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -38,7 +38,7 @@ public class ProjectItemInstance :
         ITranslatable,
         IMetadataContainer,
         IItemTypeDefinition,
-        IItemDataWithMetadata
+        IItemData
     {
         /// <summary>
         /// The project instance to which this item belongs.
@@ -185,10 +185,11 @@ public string ItemType
             { return _itemType; }
         }
 
-        /// <summary>
+        /// <inheritdoc cref="IItemData.EvaluatedInclude"/>
+        /// <remarks>
         /// Evaluated include value.
         /// May be empty string.
-        /// </summary>
+        /// </remarks>
         public string EvaluatedInclude
         {
             [DebuggerStepThrough]
@@ -302,11 +303,8 @@ string ITaskItem.ItemSpec
             }
         }
 
-        /// <inheritdoc cref="IItemData.ItemSpec"/>
-        string IItemData.ItemSpec => this.EvaluatedInclude;
-
-        /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
-        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
+        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
 
         /// <summary>
         /// ITaskItem implementation
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index 4d215c8b169..3abf0711eb6 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -49,30 +49,6 @@ public static IEnumerable<ItemData> EnumerateItems(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
-    /// <summary>
-    /// Enumerates custom metadata of an item, without known type.
-    /// </summary>
-    public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this IItemData itemData)
-    {
-        if (itemData is IItemDataWithMetadata iTemDataWithMetadata)
-        {
-            return iTemDataWithMetadata.EnumerateMetadata();
-        }
-
-        if (itemData is ITaskItem taskItem)
-        {
-            return ITaskItemExtensions.EnumerateMetadata(taskItem);
-        }
-
-        return [];
-    }
-
-    /// <summary>
-    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
-    /// </summary>
-    public static string GetEvaluatedInclude(this IItemData itemData)
-        => itemData.ItemSpec;
-
     private static IEnumerable<PropertyData> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 49c32ea60e2..8614970efd4 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -759,6 +759,8 @@ IEnumerable<ItemData> CastOneByOne(IEnumerable itms)
 
                     if (itemValue != null)
                     {
+                        // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
+                        //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
                         if (itemValue is IItemData dt)
                         {
                             data = dt;
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index 05b516078db..588c32be093 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -6,27 +6,18 @@
 namespace Microsoft.Build.Framework;
 
 /// <summary>
-/// Represents an item data (per single item type) that might be returned via <see cref="ProjectEvaluationFinishedEventArgs"/> or <see cref="ProjectStartedEventArgs"/>.
+/// Represents a metadata that can natively provide it's metadata.
 /// </summary>
 public interface IItemData
 {
     /// <summary>
     /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
     /// </summary>
-    /// <remarks>
-    /// This should be named "EvaluatedInclude" but that would be a breaking change to the upstream interface.
-    /// </remarks>
-    string ItemSpec
+    string EvaluatedInclude
     {
         get;
     }
-}
 
-/// <summary>
-/// Represents a metadata that can natively provide it's metadata.
-/// </summary>
-public interface IItemDataWithMetadata : IItemData
-{
     /// <summary>
     /// The item metadata
     /// </summary>
diff --git a/src/Framework/ITaskItem.cs b/src/Framework/ITaskItem.cs
index c6c3285e868..a69eeec483c 100644
--- a/src/Framework/ITaskItem.cs
+++ b/src/Framework/ITaskItem.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Framework
     /// </summary>
     [ComVisible(true)]
     [Guid("8661674F-2148-4F71-A92A-49875511C528")]
-    public interface ITaskItem : IItemData
+    public interface ITaskItem
     {
         /// <summary>
         /// Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
@@ -23,7 +23,7 @@ public interface ITaskItem : IItemData
         /// This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
         /// </remarks>
         /// <value>The item-spec string.</value>
-        new string ItemSpec
+        string ItemSpec
         {
             get;
 
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index eff41e10b9e..07b1ce57a0f 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -415,8 +415,6 @@ IDictionary ITaskItem.CloneCustomMetadata()
             {
                 throw new NotImplementedException();
             }
-
-            string IItemData.ItemSpec => ((ITaskItem)this).ItemSpec;
         }
     }
 }
