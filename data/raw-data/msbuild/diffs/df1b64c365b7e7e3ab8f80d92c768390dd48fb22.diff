diff --git a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
index 9d8fb580b75..826c040488e 100644
--- a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
@@ -127,9 +127,9 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
             buildConfig.EvaluationAnalysisScope?.ShouldBe(EvaluationAnalysisScope.AnalyzedProjectOnly);
         }
 
-        /*
+        
         [Fact]
-        public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
+        public void GetRuleIdConfiguration_CustomConfigurationValidity_NotValid_DifferentValues()
         {
             using TestEnvironment testEnvironment = TestEnvironment.Create();
 
@@ -143,30 +143,88 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
             build_check.rule_id.property2=value2
             build_check.rule_id.isEnabled=true
             build_check.rule_id.isEnabled2=true
-            any_other_key1=any_other_value1
-            any_other_key2=any_other_value2
-            any_other_key3=any_other_value3
-            any_other_key3=any_other_value3
 
             [test123.csproj]
             build_check.rule_id.property1=value2
             build_check.rule_id.property2=value3
             build_check.rule_id.isEnabled=true
             build_check.rule_id.isEnabled2=tru1
-            any_other_key1=any_other_value1
-            any_other_key2=any_other_value2
-            any_other_key3=any_other_value3
-            any_other_key3=any_other_value3
             """);
 
             var configurationProvider = new ConfigurationProvider();
             configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
 
-            // should fail, because the configs are the different
+            // should not fail => configurations are the same
             Should.Throw<BuildCheckConfigurationException>(() =>
             {
                 configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
             });
-        }*/
+        }
+
+        [Fact]
+        public void GetRuleIdConfiguration_CustomConfigurationValidity_NotValid_DifferentKeys()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled2=true
+
+            [test123.csproj]
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled2=true
+            build_check.rule_id.isEnabled3=true
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            // should not fail => configurations are the same
+            Should.Throw<BuildCheckConfigurationException>(() =>
+            {
+                configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
+            });
+        }
+
+
+        [Fact]
+        public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.isEnabled2=true
+
+            [test123.csproj]
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.isEnabled2=true
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            // should fail, because the configs are the different
+            Should.NotThrow(() =>
+            {
+                configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
+            });
+        }
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index 62e80417f91..a98d4e674ab 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -80,7 +80,17 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     /// <returns></returns>
     internal void CheckCustomConfigurationDataValidity(string projectFullPath, string ruleId)
     {
-        // TODO: repair the comparer of the objects
+        var configuration = GetCustomConfiguration(projectFullPath, ruleId);
+
+        if (_customConfigurationData.ContainsKey(ruleId))
+        {
+            var storedConfiguration = _customConfigurationData[ruleId];
+
+            if (!storedConfiguration.Equals(configuration))
+            {
+                throw new BuildCheckConfigurationException("Custom configuration should be equal between projects");
+            }
+        }
     }
 
     internal BuildAnalyzerConfigurationInternal[] GetMergedConfigurations(
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index d671b9b9c22..9470dc251e3 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -65,13 +65,39 @@ public override bool Equals(object? obj)
             return false;
         }
 
-        return Equals((CustomConfigurationData)obj);
-    }
+        var customConfigObj = (CustomConfigurationData) obj;
+
+        if(customConfigObj.RuleId != RuleId)
+        {
+            return false;
+        }
+
+        // validate keys and values
+        if (customConfigObj.ConfigurationData != null && ConfigurationData != null)
+        {
+            if (!customConfigObj.ConfigurationData.Keys.SequenceEqual(ConfigurationData.Keys))
+            {
+                return false;
+            }
+
+            var keys = customConfigObj.ConfigurationData.Keys;
+            foreach (var key in keys)
+            {
+                if (customConfigObj.ConfigurationData[key] != ConfigurationData[key])
+                {
+                    return false;
+                }
+            }
+        }else if (customConfigObj.ConfigurationData == null && ConfigurationData == null)
+        {
+            return true;
+        }
+        else
+        {
+            return false;
+        }
 
-    protected bool Equals(CustomConfigurationData other) {
-        // TODO: update the comparison: Compare ruleID, and exact match of the configuration data
-        
-        return Equals(ConfigurationData, other.ConfigurationData);
+        return true;
     }
 
     public override int GetHashCode() => (ConfigurationData != null ? ConfigurationData.GetHashCode() : 0);
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
index ffeeac4bb68..092859a5113 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
@@ -26,10 +26,10 @@ internal class EditorConfigGlobsMatcher
         internal readonly struct SectionNameMatcher
         {
             private readonly ImmutableArray<(int minValue, int maxValue)> _numberRangePairs;
-            // public for testing
-            public Regex Regex { get; }
 
-            public SectionNameMatcher(
+            internal Regex Regex { get; }
+
+            internal SectionNameMatcher(
                 Regex regex,
                 ImmutableArray<(int minValue, int maxValue)> numberRangePairs)
             {
@@ -466,17 +466,17 @@ private struct SectionNameLexer
         {
             private readonly string _sectionName;
 
-            public int Position { get; set; }
+            internal int Position { get; set; }
 
-            public SectionNameLexer(string sectionName)
+            internal SectionNameLexer(string sectionName)
             {
                 _sectionName = sectionName;
                 Position = 0;
             }
 
-            public bool IsDone => Position >= _sectionName.Length;
+            internal bool IsDone => Position >= _sectionName.Length;
 
-            public TokenKind Lex()
+            internal TokenKind Lex()
             {
                 int lexemeStart = Position;
                 switch (_sectionName[Position])
@@ -535,18 +535,18 @@ public TokenKind Lex()
                 }
             }
 
-            public char CurrentCharacter => _sectionName[Position];
+            internal char CurrentCharacter => _sectionName[Position];
 
             /// <summary>
             /// Call after getting <see cref="TokenKind.SimpleCharacter" /> from <see cref="Lex()" />
             /// </summary>
-            public char EatCurrentCharacter() => _sectionName[Position++];
+            internal char EatCurrentCharacter() => _sectionName[Position++];
 
             /// <summary>
             /// Returns false if there are no more characters in the lex stream.
             /// Otherwise, produces the next character in the stream and returns true.
             /// </summary>
-            public bool TryEatCurrentCharacter(out char nextChar)
+            internal bool TryEatCurrentCharacter(out char nextChar)
             {
                 if (IsDone)
                 {
@@ -560,13 +560,13 @@ public bool TryEatCurrentCharacter(out char nextChar)
                 }
             }
 
-            public char this[int position] => _sectionName[position];
+            internal char this[int position] => _sectionName[position];
 
             /// <summary>
             /// Returns the string representation of a decimal integer, or null if
             /// the current lexeme is not an integer.
             /// </summary>
-            public string? TryLexNumber()
+            internal string? TryLexNumber()
             {
                 bool start = true;
                 var sb = new StringBuilder();
