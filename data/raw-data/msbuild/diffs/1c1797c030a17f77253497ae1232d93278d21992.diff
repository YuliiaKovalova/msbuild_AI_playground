diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 5aeb09a6e81..0cb463bd72c 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Construction
     /// <summary>
     /// Abstract base class for MSBuild construction object model elements. 
     /// </summary>
-    public abstract class ProjectElement : IPublicLocation, IInternalLocation, IProjectElement, ILinkableObject
+    public abstract class ProjectElement : IInternalLocation, IProjectElement, ILinkableObject
     {
         /// <summary>
         /// Parent container object.
@@ -299,7 +299,7 @@ internal set
 
         internal ProjectElementLink Link => _xmlSource?.Link;
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// <see cref="ILinkableObject.Link"/>
@@ -533,12 +533,12 @@ internal static ProjectElement CreateNewInstance(ProjectElement xml, ProjectRoot
 
         internal ElementLocation GetAttributeLocation(string attributeName)
         {
-            return _xmlSource?.Link?.GetAttributeLocation(attributeName) ?? XmlElement.GetAttributeLocation(attributeName);
+            return Link != null ? Link.GetAttributeLocation(attributeName) : XmlElement.GetAttributeLocation(attributeName);
         }
 
         internal string GetAttributeValue(string attributeName, bool nullIfNotExists = false)
         {
-            return _xmlSource?.Link?.GetAttributeValue(attributeName, nullIfNotExists) ??
+            return Link != null ? Link.GetAttributeValue(attributeName, nullIfNotExists) :
                 ProjectXmlUtilities.GetAttributeValue(XmlElement, attributeName, nullIfNotExists);
         }
 
diff --git a/src/Build/Definition/ProjectMetadata.cs b/src/Build/Definition/ProjectMetadata.cs
index f7eea44b954..1d80c10fa40 100644
--- a/src/Build/Definition/ProjectMetadata.cs
+++ b/src/Build/Definition/ProjectMetadata.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Evaluation
     /// Never used to represent built-in metadata, like %(Filename). There is always a backing XML object.
     /// </remarks>
     [DebuggerDisplay("{Name}={EvaluatedValue} [{_xml.Value}]")]
-    public class ProjectMetadata : IEquatable<ProjectMetadata>, IMetadatum, IPublicLocation, IInternalLocation
+    public class ProjectMetadata : IEquatable<ProjectMetadata>, IMetadatum, IInternalLocation
     {
         /// <summary>
         /// Parent item or item definition that this metadatum lives in.
@@ -266,7 +266,7 @@ internal string EvaluatedValueEscaped
             get => Link != null ? Link.EvaluatedValueEscaped : _evaluatedValueEscaped;
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         #region IEquatable<ProjectMetadata> Members
 
diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 95ff1e2307d..0d1275c7e57 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Construction
     /// DO NOT make these objects any larger. There are huge numbers of them and they are transmitted between nodes.
     /// </remarks>
     [Serializable]
-    public abstract class ElementLocation : IElementLocation, IPublicLocation, ITranslatable, IImmutable
+    public abstract class ElementLocation : IElementLocation, ITranslatable, IImmutable
     {
         /// <summary>
         /// The singleton empty element location.
@@ -85,7 +85,7 @@ internal static ElementLocation EmptyLocation
 
         public ElementLocation Location => this;
 
-        IElementLocation ILocation<IElementLocation>.Location => this;
+        IElementLocation IInternalLocation.Location => this;
 
         /// <summary>
         /// Get reasonable hash code.
@@ -376,21 +376,9 @@ public override int Column
         }
     }
 
-
-
-    // internal interface
-    internal interface ILocation<T>
-    {
-        public T Location { get; }
-    }
-
-    // public interface
-    internal interface IPublicLocation : ILocation<ElementLocation>
-    {
-    }
-
     // internal interface
-    internal interface IInternalLocation : ILocation<IElementLocation>
+    internal interface IInternalLocation
     {
+        public IElementLocation Location { get; }
     }
 }
diff --git a/src/Build/ElementLocation/XmlAttributeWithLocation.cs b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
index deb655d4700..b4bcbefc1ad 100644
--- a/src/Build/ElementLocation/XmlAttributeWithLocation.cs
+++ b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Construction
     /// <summary>
     /// Derivation of XmlAttribute to implement IXmlLineInfo
     /// </summary>
-    internal class XmlAttributeWithLocation :  XmlAttribute, IPublicLocation, IInternalLocation, IXmlLineInfo
+    internal class XmlAttributeWithLocation :  XmlAttribute, IInternalLocation, IXmlLineInfo
     {
         /// <summary>
         /// Line, column, file information
@@ -82,7 +82,7 @@ public ElementLocation Location
             }
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// Whether location is available.
diff --git a/src/Build/ElementLocation/XmlElementWithLocation.cs b/src/Build/ElementLocation/XmlElementWithLocation.cs
index b2ed1acd175..ef0e3d888da 100644
--- a/src/Build/ElementLocation/XmlElementWithLocation.cs
+++ b/src/Build/ElementLocation/XmlElementWithLocation.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Construction
     /// C# doesn't currently allow covariance in method overloading, only on delegates.
     /// The caller must bravely downcast.
     /// </remarks>
-    internal class XmlElementWithLocation : XmlElement, IPublicLocation, IInternalLocation, IXmlLineInfo, ILinkedXml
+    internal class XmlElementWithLocation : XmlElement, IInternalLocation, IXmlLineInfo, ILinkedXml
     {
         /// <summary>
         /// Line, column, file information
@@ -102,7 +102,7 @@ public ElementLocation Location
             }
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// Whether location is available.
diff --git a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
index a22cacc3dbe..c287cb7b9b6 100644
--- a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Execution
     /// Immutable.
     /// </summary>
     [DebuggerDisplay("{_name} Value={_value} Condition={_condition}")]
-    public class ProjectItemGroupTaskMetadataInstance : IPublicLocation, IInternalLocation, ITranslatable
+    public class ProjectItemGroupTaskMetadataInstance : IInternalLocation, ITranslatable
     {
         /// <summary>
         /// Name of the metadatum
@@ -123,7 +123,7 @@ public ElementLocation ConditionLocation
             { return _conditionLocation; }
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// Deep clone
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
index 69c2174a93c..41879cf8239 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Execution
     /// Immutable.
     /// </summary>
     [DebuggerDisplay("{_name}={Value} Condition={_condition}")]
-    public class ProjectPropertyGroupTaskPropertyInstance : IPublicLocation, IInternalLocation, ITranslatable
+    public class ProjectPropertyGroupTaskPropertyInstance : IInternalLocation, ITranslatable
     {
         /// <summary>
         /// Name of the property
@@ -121,7 +121,7 @@ public ElementLocation ConditionLocation
             get { return _conditionLocation; }
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// Deep clone
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index 3cdcce89288..861bf175719 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -20,7 +20,7 @@ namespace Microsoft.Build.Execution
     /// This is an immutable class.
     /// </remarks>
     [DebuggerDisplay("Name={_name} Count={_children.Count} Condition={_condition} Inputs={_inputs} Outputs={_outputs} DependsOnTargets={_dependsOnTargets} BeforeTargets={_beforeTargets} AfterTargets={_afterTargets}")]
-    public sealed class ProjectTargetInstance : IPublicLocation, IInternalLocation, IImmutable, IKeyed, ITranslatable
+    public sealed class ProjectTargetInstance : IInternalLocation, IImmutable, IKeyed, ITranslatable
     {
         /// <summary>
         /// Name of the target
@@ -460,7 +460,7 @@ internal bool ParentProjectSupportsReturnsAttribute
             { return _parentProjectSupportsReturnsAttribute; }
         }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         /// <summary>
         /// Creates a ProjectTargetElement representing this instance.  Attaches it to the specified root element.
diff --git a/src/Build/Instance/ProjectTargetInstanceChild.cs b/src/Build/Instance/ProjectTargetInstanceChild.cs
index ecbdbe0c6e5..7e0de6001e8 100644
--- a/src/Build/Instance/ProjectTargetInstanceChild.cs
+++ b/src/Build/Instance/ProjectTargetInstanceChild.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Execution
     /// Type for ProjectTaskInstance and ProjectPropertyGroupTaskInstance and ProjectItemGroupTaskInstance
     /// allowing them to be used in a single collection of target children
     /// </summary>
-    public abstract class ProjectTargetInstanceChild : IPublicLocation, IInternalLocation, ITranslatable
+    public abstract class ProjectTargetInstanceChild : IInternalLocation, ITranslatable
     {
         /// <summary>
         /// Condition on the element
@@ -41,7 +41,7 @@ public string FullPath
         /// </summary>
         public abstract ElementLocation ConditionLocation { get; }
 
-        IElementLocation ILocation<IElementLocation>.Location => Location;
+        IElementLocation IInternalLocation.Location => Location;
 
         void ITranslatable.Translate(ITranslator translator)
         {
