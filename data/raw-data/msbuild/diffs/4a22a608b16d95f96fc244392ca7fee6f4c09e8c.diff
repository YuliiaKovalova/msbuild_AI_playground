diff --git a/.editorconfig b/.editorconfig
index 2927cad5369..8d13fd68939 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -298,6 +298,12 @@ dotnet_diagnostic.IDE0048.severity = suggestion
 # Member name can be simplified
 dotnet_diagnostic.IDE0049.severity = suggestion
 
+# Remove unused private member
+dotnet_diagnostic.IDE0051.severity = suggestion
+
+# Remove unread private member
+dotnet_diagnostic.IDE0052.severity = suggestion
+
 # Use compound assignment
 dotnet_diagnostic.IDE0054.severity = suggestion
 
@@ -428,6 +434,9 @@ dotnet_diagnostic.IDE0073.severity = error
 # Use 'System.Threading.Lock'
 dotnet_diagnostic.IDE0330.severity = suggestion
 
+# Use implicitly typed lambda
+dotnet_diagnostic.IDE0350.severity = suggestion
+
 # Value types are incompatible with null values. https://xunit.net/xunit.analyzers/rules/xUnit1012
 dotnet_diagnostic.xUnit1012.severity = warning
 
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 3b20b32f0d7..789a75506ce 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -773,7 +773,7 @@ private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUn
         }
 
         /// <summary>
-        /// Creates a build result for a request
+        /// Creates a build result for a request.
         /// </summary>
         private BuildResult CreateBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)
         {
@@ -866,7 +866,7 @@ private BuildRequest CreateProxyBuildRequest(int nodeRequestId, int configId, Pr
 
         /// <summary>
         /// The test checks how scheduler handles the duplicated requests and cache MISS for this case.
-        /// It's expected to have it rescheduled for the execution.
+        /// It's expected to have the duplicated request rescheduled for the execution.
         /// </summary>
         [Fact]
         public void ReportResultTest_NoCacheHitForDupes()
@@ -875,35 +875,30 @@ public void ReportResultTest_NoCacheHitForDupes()
             BuildRequest duplicateRequest = CreateBuildRequest(2, configId: DefaultConfigId, Array.Empty<string>(), parentRequest: null, BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
 
             // Schedule the duplicate request -> it goes to unscheduled request due to duplicated configId
-            List<ScheduleResponse> responses = [.. _scheduler.ReportRequestBlocked(2, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]))];
+            _scheduler.ReportRequestBlocked(2, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]));
 
             // try to get a result for the parent request and see if we get a result for the duplicate request
             var results = _scheduler.ReportResult(1, CreateBuildResult(_defaultParentRequest, "", BuildResultUtilities.GetSuccessResult()))
                 .ToList();
 
             results.ShouldNotBeNull();
-            results.Count.ShouldBe(3);
+            results.Count.ShouldBe(2);
 
             // Completed _defaultParentRequest
             results[0].BuildResult.ShouldNotBeNull();
             results[0].BuildResult.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.None);
             results[0].Action.ShouldBe(ScheduleActionType.SubmissionComplete);
 
-            // After cache miss, the candidate for rescheduling
+            // The automatically scheduled duplicated request.
             results[1].BuildResult.ShouldBeNull();
-            results[1].NodeId.Should().Be(-1);
+            results[1].NodeId.Should().Be(1);
             results[1].Action.ShouldBe(ScheduleActionType.Schedule);
             results[1].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
-
-            // The candidate for rescheduling has a node assignment for the execution.
-            results[2].BuildResult.ShouldBeNull();
-            results[2].NodeId.Should().Be(1);
-            results[2].Action.ShouldBe(ScheduleActionType.Schedule);
-            results[2].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
         }
 
         /// <summary>
         /// The test checks how scheduler handles the duplicated requests and cache HIT for this case.
+        /// It's expected to have an immediate result for the duplicated request.
         /// </summary>
         [Fact]
         public void ReportResultTest_CacheHitForDupes()
@@ -912,7 +907,7 @@ public void ReportResultTest_CacheHitForDupes()
             BuildRequest duplicateRequest = CreateBuildRequest(2, configId: DefaultConfigId, Array.Empty<string>(), parentRequest: null, BuildRequestDataFlags.None);
 
             // Schedule the duplicate request -> it goes to unscheduled request due to duplicated configId
-            List<ScheduleResponse> responses = [.. _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]))];
+            _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]));
 
             // try to get a result for the parent request and see if we get a result for the duplicate request.
             var results = _scheduler.ReportResult(1, CreateBuildResult(duplicateRequest, "", BuildResultUtilities.GetSuccessResult()))
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index fa6ae4bbbfd..d80cac3549f 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2412,8 +2412,8 @@ private void HandleNewRequest(int node, BuildRequestBlocker blocker)
                 }
             }
 
-            IEnumerable<ScheduleResponse> response = _scheduler!.ReportRequestBlocked(node, blocker);
-            PerformSchedulingActions(response);
+            IEnumerable<ScheduleResponse> responses = _scheduler!.ReportRequestBlocked(node, blocker);
+            PerformSchedulingActions(responses);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index aaef5f2d46a..88fa0a09dc1 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -431,7 +431,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
                 // This result may apply to a number of other unscheduled requests which are blocking active requests.  Report to them as well.
                 List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequests);
-               foreach (SchedulableRequest unscheduledRequest in unscheduledRequests)
+                foreach (SchedulableRequest unscheduledRequest in unscheduledRequests)
                 {
                     if (unscheduledRequest.BuildRequest.GlobalRequestId == result.GlobalRequestId)
                     {
@@ -458,18 +458,24 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
                             // Mark the request as complete (and the parent is no longer blocked by this request.)
                             unscheduledRequest.Complete(newResult);
+                            responses.Add(response);
                         }
                         else
                         {
-                            // IF WE HIT IT, WE ARE IN TROUBLE WITH OUR CACHE.
-                            // Response may be null if the result was never added to the cache. This can happen if the result has an exception in it.
-
-                            // We attempt to reschedule the request on the node that was assigned to it.
-                            bool mustSendConfigurationToNode = _availableNodes[nodeId].AssignConfiguration(unscheduledRequest.BuildRequest.ConfigurationId);
-                            response = ScheduleResponse.CreateScheduleResponse(unscheduledRequest.AssignedNode, unscheduledRequest.BuildRequest, mustSendConfigurationToNode);
+                            // This is a critical error case where a result should be in the cache but isn't.
+                            // The result might be missing from the cache if:
+                            // 1. The result contained an exception that prevented it from being cached properly
+                            // 2. The result was for a skipped target that couldn't satisfy all dependencies
+
+                            // Now scheduler will handle this situation automatically - the unscheduled request remains
+                            // in the unscheduled queue (_schedulingData.UnscheduledRequests) and will be picked up
+                            // in the next ScheduleUnassignedRequests execution to be properly rebuilt.
+
+                            // IMPORTANT: In earlier versions, we would hit this code path and did not handle it properly,
+                            // which caused deadlocks/hangs in Visual Studio. Without completing the request's
+                            // logging lifecycle, VS would never receive the completion callback and would wait
+                            // indefinitely, freezing the UI.
                         }
-
-                        responses.Add(response);
                     }
                 }
             }
@@ -676,7 +682,7 @@ private void HandleYieldAction(SchedulableRequest parentRequest, BuildRequestBlo
         /// <param name="responses">The list which should be populated with responses from the scheduling.</param>
         private void ScheduleUnassignedRequests(List<ScheduleResponse> responses)
         {
-         DateTime schedulingTime = DateTime.UtcNow;
+            DateTime schedulingTime = DateTime.UtcNow;
 
             // See if we are done.  We are done if there are no unassigned requests and no requests assigned to nodes.
             if (_schedulingData.UnscheduledRequestsCount == 0 &&
