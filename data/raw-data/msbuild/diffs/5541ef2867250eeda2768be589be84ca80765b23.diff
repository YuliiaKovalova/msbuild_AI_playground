diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 8501b7297f9..a8271b103d6 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -4295,6 +4295,23 @@ private void TestPropertyFunction(string expression, string propertyName, string
             result.ShouldBe(expected);
         }
 
+        [Theory]
+        [InlineData("net6.0", "netstandard2.0", "")]
+        [InlineData("net6.0-windows", "netstandard2.0", "")]
+        [InlineData("net6.0-windows", "net6.0", "net6.0-windows")]
+        [InlineData("netstandard2.0;net6.0", "net6.0", "net6.0")]
+        [InlineData("netstandard2.0;net6.0-windows", "net6.0", "net6.0-windows")]
+        [InlineData("netstandard2.0;net6.0-windows", "net6.0;netstandard2.0;net472", "netstandard2.0;net6.0-windows")]
+        [InlineData("netstandard2.0;net472", "net6.0;netstandard2.0;net472", "netstandard2.0;net472")]
+        [InlineData("netstandard2.0;net472", "net6.0;netstandard2.0;net472", "netstandard2.0;net472")]
+        public void PropertyFunctionIntersectTargetFrameworks(string left, string right, string expected)
+        {
+            var pg = new PropertyDictionary<ProjectPropertyInstance>();
+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
+
+            AssertSuccess(expander, $"$([MSBuild]::FilterTargetFrameworks('{left}', '{right}'))", expected);
+        }
+
         [Fact]
         public void ExpandItemVectorFunctions_GetPathsOfAllDirectoriesAbove()
         {
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index dd7d23de77e..cf17320a952 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -549,9 +549,9 @@ internal static string GetTargetPlatformVersion(string tfm, int versionPartCount
             return NuGetFramework.Value.GetTargetPlatformVersion(tfm, versionPartCount);
         }
 
-        internal static string IntersectTargetFrameworks(string left, string right)
+        internal static string FilterTargetFrameworks(string incoming, string filter)
         {
-            return NuGetFramework.Value.IntersectTargetFrameworks(left, right);
+            return NuGetFramework.Value.FilterTargetFrameworks(incoming, filter);
         }
 
         internal static bool AreFeaturesEnabled(Version wave)
diff --git a/src/Build/Utilities/NuGetFrameworkWrapper.cs b/src/Build/Utilities/NuGetFrameworkWrapper.cs
index 116d030cb26..e904e80c756 100644
--- a/src/Build/Utilities/NuGetFrameworkWrapper.cs
+++ b/src/Build/Utilities/NuGetFrameworkWrapper.cs
@@ -96,27 +96,27 @@ private string GetNonZeroVersionParts(Version version, int minVersionPartCount)
             return version.ToString(Math.Max(nonZeroVersionParts, minVersionPartCount));
         }
 
-        public string IntersectTargetFrameworks(string left, string right)
+        public string FilterTargetFrameworks(string incoming, string filter)
         {
-            IEnumerable<(string originalTfm, object parsedTfm)> leftFrameworks = ParseTfms(left);
-            IEnumerable<(string originalTfm, object parsedTfm)> rightFrameworks = ParseTfms(right);
-            string tfmList = "";
+            IEnumerable<(string originalTfm, object parsedTfm)> incomingFrameworks = ParseTfms(incoming);
+            IEnumerable<(string originalTfm, object parsedTfm)> filterFrameworks = ParseTfms(filter);
+            StringBuilder tfmList = new StringBuilder();
 
-            // An incoming target framework from 'left' is kept if it is compatible with any of the desired target frameworks on 'right'
-            foreach (var l in leftFrameworks)
+            // An incoming target framework from 'incoming' is kept if it is compatible with any of the desired target frameworks on 'filter'
+            foreach (var l in incomingFrameworks)
             {
-                if (rightFrameworks.Any(r =>
+                if (filterFrameworks.Any(r =>
                         (FrameworkProperty.GetValue(l.parsedTfm) as string).Equals(FrameworkProperty.GetValue(r.parsedTfm) as string, StringComparison.OrdinalIgnoreCase) &&
                         (((Convert.ToBoolean(AllFrameworkVersionsProperty.GetValue(l.parsedTfm))) && (Convert.ToBoolean(AllFrameworkVersionsProperty.GetValue(r.parsedTfm)))) ||
                          ((VersionProperty.GetValue(l.parsedTfm) as Version) == (VersionProperty.GetValue(r.parsedTfm) as Version)))))
                 {
                     if (string.IsNullOrEmpty(tfmList))
                     {
-                        tfmList = l.originalTfm;
+                        tfmList.Append(l.originalTfm);
                     }
                     else
                     {
-                        tfmList += $";{l.originalTfm}";
+                        tfmList.Append($";{l.originalTfm}");
                     }
                 }
             }
