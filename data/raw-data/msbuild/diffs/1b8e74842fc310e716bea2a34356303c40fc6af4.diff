diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index cfd53b89220..5409a6f3822 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -557,7 +557,12 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
             return false;
         }
 
-        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
+        public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
+        {
+            throw new NotImplementedException();
+        }
+
+        public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             throw new NotImplementedException();
         }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index e8257651162..eebb06bea2a 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -221,11 +221,17 @@ bool IncludeTaskInputs
 
         /// <summary>
         /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
-        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>
-        ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context);
+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>
+        ICollection<string> GetWarningsAsErrors(BuildEventContext context);
+
+        /// <summary>
+        /// Returns a hashset of warnings to be logged as messages for the specified project instance ID.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be logged as errors.</param>
+        /// <returns>A Hashset containing warning codes that should be treated as messages.</returns>
+        ICollection<string> GetWarningsAsMessages(BuildEventContext context);
 
         #region Register
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 89d9008f90d..9e5f061ece4 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -521,43 +521,64 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
 
         /// <summary>
         /// Returns a hashset of warnings to be logged as errors for the specified build context.
-        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.
-        ///
-        /// If all warnings to be treated as errors should also be treated as messages, return null.
-        /// This is to avoid all warnings being treated as errors. <see cref="RequestBuilder.ConfigureWarningsAsErrorsAndMessages()"/>
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
         /// <returns>
-        /// An empty set if all warnings should be treated as errors.
-        /// A set containing warning codes to be logged as errors.
-        /// Null if no warnings should be treated as errors.
         /// </returns>
-        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)
+        public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
         {
-            if (_warningsAsErrorsByProject == null)
+            int key = GetWarningsAsErrorOrMessageKey(context);
+
+            // If there is definitely nothing to convert into an error, return early.
+            if (WarningsAsErrors == null && (_warningsAsErrorsByProject == null || !_warningsAsErrorsByProject.ContainsKey(key)))
             {
                 return null;
             }
 
+            HashSet<string> allWarningsAsErrors = new HashSet<string>();
+
+            if (WarningsAsErrors != null)
+            {
+                allWarningsAsErrors.UnionWith(WarningsAsErrors);
+            }
+
+            if (_warningsAsErrorsByProject != null)
+            {
+                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))
+                {
+                    allWarningsAsErrors.UnionWith(warningsAsErrors);
+                }
+            }
+
+            return allWarningsAsErrors;
+        }
+
+        public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
+        {
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            if (!_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrorsExcludingMessages))
+            // If there is definitely nothing to convert into an message, return early.
+            if (WarningsAsMessages == null && (_warningsAsMessagesByProject == null || !_warningsAsMessagesByProject.ContainsKey(key)))
             {
                 return null;
             }
 
-            if (_warningsAsMessagesByProject != null)
+            HashSet<string> allWarningsAsMessages = new HashSet<string>();
+
+            if (WarningsAsMessages != null)
             {
-                warningsAsErrorsExcludingMessages.ExceptWith(_warningsAsMessagesByProject[key]);
+                allWarningsAsMessages.UnionWith(WarningsAsMessages);
+            }
 
-                // A non-null empty set means all warnings are errors. Avoid this.
-                if (warningsAsErrorsExcludingMessages.Count == 0)
+            if (_warningsAsMessagesByProject != null)
+            {
+                if (_warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))
                 {
-                    warningsAsErrorsExcludingMessages = null;
+                    allWarningsAsMessages.UnionWith(warningsAsMessages);
                 }
             }
 
-            return warningsAsErrorsExcludingMessages;
+            return allWarningsAsMessages;
         }
 
         public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index 2f4758b2196..6dc62c389ce 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -148,7 +148,12 @@ internal void LogTaskWarningFromException(Exception exception, BuildEventFileInf
 
         internal ICollection<string> GetWarningsAsErrors()
         {
-            return LoggingService.GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext);
+            return LoggingService.GetWarningsAsErrors(BuildEventContext);
+        }
+
+        internal ICollection<string> GetWarningsAsMessages()
+        {
+            return LoggingService.GetWarningsAsMessages(BuildEventContext);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 3bc78d7159a..2bb28c5ea91 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -697,14 +697,34 @@ private ICollection<string> WarningsAsErrors
             }
         }
 
+        private ICollection<string> _warningsAsMessages;
+
+        /// <summary>
+        /// Contains all warnings that should be logged as errors.
+        /// Non-null empty set when all warnings should be treated as errors.
+        /// </summary>
+        private ICollection<string> WarningsAsMessages
+        {
+            get
+            {
+                // Test compatibility
+                if (_taskLoggingContext == null)
+                {
+                    return null;
+                }
+
+                return _warningsAsMessages ??= _taskLoggingContext.GetWarningsAsMessages();
+            }
+        }
+
         /// <summary>
         /// Determines if the given warning should be treated as an error.
         /// </summary>
         /// <param name="warningCode"></param>
-        /// <returns>True if WarningsAsErrors is an empty set or contains the given warning code.</returns>
+        /// <returns>True if the warning should not be treated as a message and WarningsAsErrors is an empty set or contains the given warning code.</returns>
         public bool ShouldTreatWarningAsError(string warningCode)
         {
-            if (WarningsAsErrors == null)
+            if (WarningsAsErrors == null || (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode)))
             {
                 return false;
             }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 7339ac36cd0..7d8b8fcc7ef 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -275,8 +275,15 @@ public bool IsRunningMultipleNodes
         /// </summary>
         private ICollection<string> WarningsAsErrors { get; set; }
 
+        private ICollection<string> WarningsAsMessages { get; set; }
+
         public bool ShouldTreatWarningAsError(string warningCode)
         {
+            if (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode))
+            {
+                return false;
+            }
+
             return WarningsAsErrors != null && (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode));
         }
         #endregion
