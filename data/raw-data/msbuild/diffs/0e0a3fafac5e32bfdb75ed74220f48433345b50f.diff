diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index 8f951bbcab3..a58dceeaaa8 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -36,8 +36,8 @@ public ConfigurationMetadata(BuildRequestConfiguration configuration)
         public ConfigurationMetadata(Project project)
         {
             ErrorUtilities.VerifyThrowArgumentNull(project, nameof(project));
-            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalProperties.Count);
-            foreach (KeyValuePair<string, string> entry in project.GlobalProperties)
+            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalPropertiesCount);
+            foreach (KeyValuePair<string, string> entry in project.GlobalPropertiesEnumerable)
             {
                 _globalProperties[entry.Key] = ProjectPropertyInstance.Create(entry.Key, entry.Value);
             }
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 294b523e07e..a684ab092d2 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -600,6 +600,12 @@ private enum BuildEnabledSetting
         /// </remarks>
         public IDictionary<string, string> GlobalProperties => implementation.GlobalProperties;
 
+        internal bool GlobalPropertiesContains(string key) => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesContains(key) : GlobalProperties.ContainsKey(key);
+
+        internal int GlobalPropertiesCount => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesCount() : GlobalProperties.Count;
+
+        internal IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesEnumerable() : GlobalProperties;
+
         /// <summary>
         /// Item types in this project.
         /// This is an ordered collection.
@@ -2087,6 +2093,27 @@ public override bool IsDirty
                 }
             }
 
+            public bool GlobalPropertiesContains(string key)
+            {
+                return _data.GlobalPropertiesDictionary.Contains(key);
+            }
+
+            public int GlobalPropertiesCount()
+            {
+                return _data.GlobalPropertiesDictionary.Count;
+            }
+
+            public IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()
+            {
+                List<KeyValuePair<string, string>> result = new List<KeyValuePair<string, string>>();
+                foreach (ProjectPropertyInstance property in _data.GlobalPropertiesDictionary)
+                {
+                    result.Add(new KeyValuePair<string, string>(property.Name, ((IProperty)property).EvaluatedValueEscaped));
+                }
+
+                return result;
+            }
+
             /// <summary>
             /// Read only dictionary of the global properties used in the evaluation
             /// of this project.
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 240fbd0d77f..838e95574fc 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -2592,12 +2592,12 @@ private static bool HasEquivalentGlobalPropertiesAndToolsVersion(Project project
                     return false;
                 }
 
-                if (project.GlobalProperties.Count != globalProperties.Count)
+                if (project.GlobalPropertiesCount != globalProperties.Count)
                 {
                     return false;
                 }
 
-                foreach (KeyValuePair<string, string> leftProperty in project.GlobalProperties)
+                foreach (KeyValuePair<string, string> leftProperty in project.GlobalPropertiesEnumerable)
                 {
                     if (!globalProperties.TryGetValue(leftProperty.Key, out var rightValue))
                     {
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 157fc4366ec..4cb1e166b5b 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -596,7 +596,7 @@ public override bool IsGlobalProperty
             {
                 [DebuggerStepThrough]
                 get
-                { return _project.GlobalProperties.ContainsKey(Name); }
+                { return _project.GlobalPropertiesContains(Name); }
             }
 
             /// <summary>
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 3a253dbc5a8..de9f9d01451 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -352,8 +352,8 @@ public ProjectInstance(Project project, ProjectInstanceSettings settings)
 
             this.CreateEvaluatedIncludeSnapshotIfRequested(keepEvaluationCache, project.Items, projectItemToInstanceMap);
 
-            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalProperties.Count);
-            foreach (var property in project.GlobalProperties)
+            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalPropertiesCount);
+            foreach (var property in project.GlobalPropertiesEnumerable)
             {
                 _globalProperties.Set(ProjectPropertyInstance.Create(property.Key, property.Value));
             }
