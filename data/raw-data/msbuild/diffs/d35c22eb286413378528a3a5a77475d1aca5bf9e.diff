diff --git a/src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs b/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
similarity index 86%
rename from src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs
rename to src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
index 2e42d445901..80415d0befe 100644
--- a/src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs
+++ b/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
@@ -1,8 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-
-#if FEATURE_APPDOMAIN
+#if NETFRAMEWORK
 
 using System;
 using System.Collections.Generic;
@@ -17,7 +16,7 @@
 
 namespace Microsoft.Build.Tasks.UnitTests
 {
-    public class GetComAssembliesMetadata_Tests
+    public class GetAssembliesMetadata_Tests
     {
         private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, "TestResources", "Assemblies");
 
@@ -25,7 +24,7 @@ public class GetComAssembliesMetadata_Tests
         public void CheckPresenceOfCustomCOMAssemblyAttributes()
         {
             string assemblyPath = Path.Combine(TestAssembliesPaths, "Custom_COM.dll");
-            GetComAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+            GetAssembliesMetadata t = new() { AssemblyPaths = new[] { assemblyPath } };
 
             bool isSuccess = t.Execute();
 
@@ -52,10 +51,8 @@ public void CheckPresenceOfCustomCOMAssemblyAttributes()
         [Fact]
         public void CheckPresenceOfCOMAssemblyAttributes()
         {
-            string programFilesX86 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
-            string programFilesRefAssemblyLocation = Path.Combine(programFilesX86, "Reference Assemblies\\Microsoft\\Framework");
-            string assemblyPath = Path.Combine(programFilesRefAssemblyLocation, ".NETFramework", "v4.7.2", "mscorlib.dll");
-            GetComAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+            string assemblyPath = Path.Combine("C:/", "Windows", "Microsoft.NET", "Framework", "v4.0.30319", "mscorlib.dll");
+            GetAssembliesMetadata t = new() { AssemblyPaths = new[] { assemblyPath } };
 
             bool isSuccess = t.Execute();
 
diff --git a/src/Tasks/AssemblyDependency/AssemblyAttributes.cs b/src/Tasks/AssemblyDependency/AssemblyAttributes.cs
index 798218d848a..553b4b032a8 100644
--- a/src/Tasks/AssemblyDependency/AssemblyAttributes.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyAttributes.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Tasks.AssemblyDependency
     /// <summary>
     /// Collection of assembly attributes.
     /// </summary>
-    internal class AssemblyAttributes
+    internal sealed class AssemblyAttributes
     {
         public string AssemblyFullPath { get; set; } = string.Empty;
 
@@ -37,8 +37,6 @@ internal class AssemblyAttributes
         // it is a byte[] converted to string
         public string PublicKey { get; set; } = string.Empty;
 
-        public uint PublicKeyLength { get; set; }
-
         public bool IsAssembly { get; set; }
 
         public uint PeKind { get; set; }
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 8638e73d1b0..c298c4d022d 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -151,7 +151,7 @@ public AssemblyNameExtension[] Dependencies
         }
 
         /// <summary>
-        /// Get the scatter files from the assembly metadata. 
+        /// Get the scatter files from the assembly metadata.
         /// </summary>
         public string[] Files
         {
@@ -195,7 +195,7 @@ public FrameworkName FrameworkNameAttribute
         }
 
         /// <summary>
-        /// Given an assembly name, crack it open and retrieve the list of dependent 
+        /// Given an assembly name, crack it open and retrieve the list of dependent
         /// assemblies and  the list of scatter files.
         /// </summary>
         /// <param name="path">Path to the assembly.</param>
@@ -271,12 +271,13 @@ internal static bool IsWinMDFile(
 
 #if !FEATURE_ASSEMBLYLOADCONTEXT
         /// <summary>
-        /// Collects the metadata and attributes for specilied assembly.
+        /// Collects the metadata and attributes for specified assembly.
         /// The requested properties are used by legacy project system.
         /// </summary>
         internal AssemblyAttributes GetAssemblyMetadata()
         {
             IntPtr asmMetaPtr = IntPtr.Zero;
+            ASSEMBLYMETADATA asmMeta = new();
             try
             {
                 IMetaDataImport2 import2 = (IMetaDataImport2)_assemblyImport;
@@ -311,9 +312,9 @@ internal AssemblyAttributes GetAssemblyMetadata()
                     out uint flags);
 
                 assemblyAttributes.AssemblyName = new string(defaultCharArray, 0, (int)nameLength - 1);
-                assemblyAttributes.DefaultAlias = new string(defaultCharArray, 0, (int)nameLength - 1);
+                assemblyAttributes.DefaultAlias = assemblyAttributes.AssemblyName;
 
-                ASSEMBLYMETADATA asmMeta = (ASSEMBLYMETADATA)Marshal.PtrToStructure(asmMetaPtr, typeof(ASSEMBLYMETADATA));
+                asmMeta = (ASSEMBLYMETADATA)Marshal.PtrToStructure(asmMetaPtr, typeof(ASSEMBLYMETADATA));
                 assemblyAttributes.MajorVersion = asmMeta.usMajorVersion;
                 assemblyAttributes.MinorVersion = asmMeta.usMinorVersion;
                 assemblyAttributes.RevisionNumber = asmMeta.usRevisionNumber;
@@ -323,7 +324,6 @@ internal AssemblyAttributes GetAssemblyMetadata()
                 byte[] publicKey = new byte[publicKeyLength];
                 Marshal.Copy(publicKeyPtr, publicKey, 0, (int)publicKeyLength);
                 assemblyAttributes.PublicKey = BitConverter.ToString(publicKey).Replace("-", string.Empty);
-                assemblyAttributes.PublicKeyLength = publicKeyLength;
 
                 if (import2 != null)
                 {
@@ -354,18 +354,17 @@ internal AssemblyAttributes GetAssemblyMetadata()
             }
             finally
             {
-                FreeAsmMeta(asmMetaPtr);
+                FreeAsmMeta(asmMetaPtr, ref asmMeta);
             }
         }
 
-        private string GetStringCustomAttribute(IMetaDataImport2 import2, uint assemblyScope, string propertyName)
+        private string GetStringCustomAttribute(IMetaDataImport2 import2, uint assemblyScope, string attributeName)
         {
-            int hr = import2.GetCustomAttributeByName(assemblyScope, propertyName, out IntPtr data, out uint valueLen);
+            int hr = import2.GetCustomAttributeByName(assemblyScope, attributeName, out IntPtr data, out uint valueLen);
 
-            // get the AssemblyTitle
             if (hr == NativeMethodsShared.S_OK)
             {
-                // if an AssemblyTitle exists, parse the contents of the blob
+                // if an custom attribute exists, parse the contents of the blob
                 if (NativeMethods.TryReadMetadataString(_sourceFile, data, valueLen, out string propertyValue))
                 {
                     return propertyValue;
@@ -644,7 +643,7 @@ private static List<string> GetFixedStringArguments(MetadataReader reader, Custo
 
 #if !FEATURE_ASSEMBLYLOADCONTEXT
         /// <summary>
-        /// Release interface pointers on Dispose(). 
+        /// Release interface pointers on Dispose().
         /// </summary>
         protected override void DisposeUnmanagedResources()
         {
@@ -683,7 +682,7 @@ internal static string GetRuntimeVersion(string path)
 
                 unsafe
                 {
-                    // Allocate an initial buffer 
+                    // Allocate an initial buffer
                     char* runtimeVersion = stackalloc char[bufferLength];
 
                     // Run GetFileVersion, this should succeed using the initial buffer.
@@ -882,7 +881,7 @@ private static IntPtr AllocAsmMeta()
         }
 
         /// <summary>
-        /// Construct assembly name. 
+        /// Construct assembly name.
         /// </summary>
         /// <param name="asmMetaPtr">Assembly metadata structure</param>
         /// <param name="asmNameBuf">Buffer containing the name</param>
@@ -944,6 +943,19 @@ private static void FreeAsmMeta(IntPtr asmMetaPtr)
             {
                 // Marshal the assembly metadata back to a managed type.
                 var asmMeta = (ASSEMBLYMETADATA)Marshal.PtrToStructure(asmMetaPtr, typeof(ASSEMBLYMETADATA));
+                FreeAsmMeta(asmMetaPtr, ref asmMeta);
+            }
+        }
+
+        /// <summary>
+        /// Free the assembly metadata structure.
+        /// </summary>
+        /// <param name="asmMetaPtr">The pointer.</param>
+        /// <param name="asmMeta">Marshaled assembly metadata to the managed type.</param>
+        private static void FreeAsmMeta(IntPtr asmMetaPtr, ref ASSEMBLYMETADATA asmMeta)
+        {
+            if (asmMetaPtr != IntPtr.Zero)
+            {
                 // Free unmanaged memory.
                 Marshal.FreeCoTaskMem(asmMeta.rpLocale);
                 Marshal.DestroyStructure(asmMetaPtr, typeof(ASSEMBLYMETADATA));
diff --git a/src/Tasks/GetComAssembliesMetadata.cs b/src/Tasks/GetAssembliesMetadata.cs
similarity index 85%
rename from src/Tasks/GetComAssembliesMetadata.cs
rename to src/Tasks/GetAssembliesMetadata.cs
index 817885e8b98..731b39122fe 100644
--- a/src/Tasks/GetComAssembliesMetadata.cs
+++ b/src/Tasks/GetAssembliesMetadata.cs
@@ -24,10 +24,10 @@
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
-    /// Resolves metadata for the specified set of COM assemblies.
+    /// Resolves metadata for the specified set of assemblies.
     /// </summary>
     [SupportedOSPlatform("windows")]
-    public class GetComAssembliesMetadata : TaskExtension
+    public class GetAssembliesMetadata : TaskExtension
     {
         /// <summary>
         /// Assembly paths.
@@ -44,28 +44,20 @@ public class GetComAssembliesMetadata : TaskExtension
         /// </summary>
         public override bool Execute()
         {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GetComAssembliesMetadata));
-                return false;
-            }
-
-#if FEATURE_APPDOMAIN
-
             var assembliesMetadata = new List<ITaskItem>();
-            foreach (string assemblyPath in AssembyPaths)
+            foreach (string assemblyPath in AssemblyPaths)
             {
                 AssemblyInformation assemblyInformation = new(assemblyPath);
                 AssemblyAttributes attributes = assemblyInformation.GetAssemblyMetadata();
 
                 if (attributes != null)
                 {
-                    assembliesMetadata.Add(SetItemMetadata(attributes));
+                    assembliesMetadata.Add(CreateItemWithMetadata(attributes));
                 }
             }
 
             _assembliesMetadata = assembliesMetadata.ToArray();
-#endif
+
             return true;
         }
 
@@ -73,13 +65,13 @@ public override bool Execute()
         /// List of assembly paths.
         /// </summary>
         [Required]
-        public string[] AssembyPaths
+        public string[] AssemblyPaths
         {
             get => _assemblyPaths;
 
             set
             {
-                ErrorUtilities.VerifyThrowArgumentNull(value, nameof(AssembyPaths));
+                ErrorUtilities.VerifyThrowArgumentNull(value, nameof(AssemblyPaths));
                 _assemblyPaths = value;
             }
         }
@@ -93,7 +85,7 @@ public string[] AssembyPaths
         /// <summary>
         /// Sets metadata on the assembly path.
         /// </summary>
-        private TaskItem SetItemMetadata(AssemblyAttributes attributes)
+        private TaskItem CreateItemWithMetadata(AssemblyAttributes attributes)
         {
             TaskItem referenceItem = new()
             {
@@ -119,7 +111,6 @@ IEnumerable<KeyValuePair<string, string>> EnumerateCommonMetadata()
                 yield return new KeyValuePair<string, string>(nameof(attributes.MinorVersion), attributes.MinorVersion.ToString());
                 yield return new KeyValuePair<string, string>(nameof(attributes.PeKind), attributes.PeKind.ToString());
                 yield return new KeyValuePair<string, string>(nameof(attributes.PublicKey), attributes.PublicKey);
-                yield return new KeyValuePair<string, string>(nameof(attributes.PublicKeyLength), attributes.PublicKeyLength.ToString());
                 yield return new KeyValuePair<string, string>(nameof(attributes.IsAssembly), attributes.IsAssembly.ToString());
                 yield return new KeyValuePair<string, string>(nameof(attributes.TargetFrameworkMoniker), attributes.TargetFrameworkMoniker);
                 yield return new KeyValuePair<string, string>(nameof(attributes.IsImportedFromTypeLib), attributes.IsImportedFromTypeLib.ToString());
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 99cb4e334d6..eb4131e23f4 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -328,7 +328,6 @@
     </Compile>
     <Compile Include="ResourceHandling\*.cs" />
     <Compile Include="GetCompatiblePlatform.cs" />
-    <Compile Include="GetComAssembliesMetadata.cs" />
     <Compile Include="SetRidAgnosticValueForProjects.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
@@ -605,6 +604,7 @@
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
     <Compile Include="AxTlbBaseTask.cs" />
+    <Compile Include="GetAssembliesMetadata.cs" />
     <Compile Include="ComDependencyWalker.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 9ecf22dbc74..415b1c9fc0a 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -488,8 +488,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <PublishDir Condition="'$(PublishDir)'==''">$(OutputPath)app.publish\</PublishDir>
   </PropertyGroup>
 
-  <!-- 
-    ClickOncePublishDir property is the output location used by all ClickOnce publish targets. This should be same as PublishDir except 
+  <!--
+    ClickOncePublishDir property is the output location used by all ClickOnce publish targets. This should be same as PublishDir except
     for a trailing slash. PublishDir when specified as a global property on the command line cannot be changed to add a trailing slash.
   -->
   <PropertyGroup>
@@ -1485,7 +1485,6 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       GenerateBindingRedirects;
       GenerateBindingRedirectsUpdateAppConfig;
       ResolveComReferences;
-      GetComAssembliesMetadata;
       AfterResolveReferences
     </ResolveReferencesDependsOn>
   </PropertyGroup>
@@ -1512,7 +1511,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ============================================================
     -->
   <Target Name="AfterResolveReferences"/>
-  
+
   <!--
     ============================================================
                                         IgnoreJavaScriptOutputAssembly
@@ -1824,7 +1823,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         SkipNonexistentTargets="true">
       <Output TaskParameter="TargetOutputs" ItemName="_ProjectReferenceTargetFrameworkPossibilities" />
     </MSBuild>
-    
+
     <!--
        SetPlatform negotiation requires the 'GetTargetFrameworks' MSBuild call to NOT pass global properties. This is to verify
        whether or not the referenced project would build as the same platform as the current project by default. The above
@@ -1898,7 +1897,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <SetRidAgnosticValueForProjects Projects="@(AnnotatedProjects)">
       <Output ItemName="UpdatedAnnotatedProjects" TaskParameter="UpdatedProjects" />
     </SetRidAgnosticValueForProjects>
-    
+
     <ItemGroup>
       <AnnotatedProjects Remove="@(AnnotatedProjects)" />
       <AnnotatedProjects Include="@(UpdatedAnnotatedProjects)" />
@@ -1999,7 +1998,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
              SelfContained and RuntimeIdentifier should not flow across project references.  The IsRidAgnostic metadata value is consumed in the
              _GetProjectReferenceTargetFrameworkProperties target, where those properties are added to a project's UndefineProperties if
              IsRidAgnostic is set.
-        
+
              Generally we set the IsRidAgnostic metadata based on the IsRidAgnostic property set by the .NET SDK.  If that's not set, then the
              fallback logic here will be that the project is RID agnostic if it doesn't have RuntimeIdentifier or RuntimeIdentifiers properties set. -->
         <IsRidAgnostic>$(IsRidAgnostic)</IsRidAgnostic>
@@ -2526,7 +2525,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <_NewGenerateBindingRedirectsIntermediateAppConfig Condition="Exists('$(_GenerateBindingRedirectsIntermediateAppConfig)')">true</_NewGenerateBindingRedirectsIntermediateAppConfig>
       <AppConfig Condition="$(_NewGenerateBindingRedirectsIntermediateAppConfig) == 'true'">$(_GenerateBindingRedirectsIntermediateAppConfig)</AppConfig>
     </PropertyGroup>
-    
+
     <ItemGroup Condition="$(_NewGenerateBindingRedirectsIntermediateAppConfig) == 'true'">
       <AppConfigWithTargetPath Remove="@(AppConfigWithTargetPath)" />
       <AppConfigWithTargetPath Include="$(AppConfig)">
@@ -3045,7 +3044,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <!--
     ============================================================
-                                        GetComAssembliesMetadata
+                                        GetAssembliesMetadata
 
     Resolve Assembly attributes for COM assemblies
 
@@ -3058,19 +3057,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
 
   <Target
-      Name="GetComAssembliesMetadata"
+      Name="GetAssembliesMetadata"
       Condition="'@(ReferencePath)'!=''"
       Returns="@(AssembliesMetadata)"
       DependsOnTargets="ResolveComReferences"
         >
 
-    <GetComAssembliesMetadata
+    <GetAssembliesMetadata
           AssembyPaths="@(ReferencePath)"
           ContinueOnError="$(ContinueOnError)">
 
       <Output TaskParameter="AssembliesMetadata" ItemName="_AssembliesMetadata"/>
 
-    </GetComAssembliesMetadata>
+    </GetAssembliesMetadata>
 
   </Target>
 
@@ -4201,7 +4200,6 @@ Copyright (C) Microsoft Corporation. All rights reserved.
             _DeploymentComputeNativeManifestInfo;
             _DeploymentComputeClickOnceManifestInfo;
             ResolveComReferences;
-            GetComAssembliesMetadata;
             ResolveNativeReferences;
             _GenerateResolvedDeploymentManifestEntryPoint"
       Inputs="
diff --git a/src/Tasks/Microsoft.Common.overridetasks b/src/Tasks/Microsoft.Common.overridetasks
index e3295b01bdb..addd0dd6a2b 100644
--- a/src/Tasks/Microsoft.Common.overridetasks
+++ b/src/Tasks/Microsoft.Common.overridetasks
@@ -11,7 +11,7 @@
 
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"       AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5'" />
 
-  <UsingTask TaskName="Microsoft.Build.Tasks.GetComAssembliesMetadata"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetAssembliesMetadata"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5'" />
 
   <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
   <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"          AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
@@ -24,7 +24,7 @@
 
   <UsingTask TaskName="ResolveComReference"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0'" />
 
-  <UsingTask TaskName="Microsoft.Build.Tasks.GetComAssembliesMetadata"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetAssembliesMetadata"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0'" />
 
   <UsingTask TaskName="GenerateResource"                                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
   <UsingTask TaskName="GenerateResource"                                AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index f286bd8b228..eb02e63254a 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -48,6 +48,7 @@
 
   <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetAssembliesMetadata"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.GetCompatiblePlatform"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.GetFileHash"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -73,7 +74,6 @@
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveAssemblyReference"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveCodeAnalysisRuleSet"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-  <UsingTask TaskName="Microsoft.Build.Tasks.GetComAssembliesMetadata"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveKeySource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveManifestFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNativeReference"                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
