diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 56a5374abe6..914f1bd7dc9 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -206,6 +206,7 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
         bool AllowFailureWithoutError { get; set; }
+        void BlockingWaitForCore();
         void ReleaseCores(int coresToRelease);
         int RequestCores(int requestedCores);
     }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index a3c7a133d10..f2ade095604 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -206,6 +206,7 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
         bool AllowFailureWithoutError { get; set; }
+        void BlockingWaitForCore();
         void ReleaseCores(int coresToRelease);
         int RequestCores(int requestedCores);
     }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 1635d745476..44fa9699dcc 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -715,6 +715,13 @@ public void ReleaseCores(int coresToRelease)
             }
         }
 
+        public void BlockingWaitForCore()
+        {
+            var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
+
+            rms.RequireCores(1);
+        }
+
         internal void ReleaseAllCores()
         {
             ReleaseCores(runningTotal);
diff --git a/src/Framework/IBuildEngine7.cs b/src/Framework/IBuildEngine7.cs
index 025b60a6fbc..cb7bc8688d2 100644
--- a/src/Framework/IBuildEngine7.cs
+++ b/src/Framework/IBuildEngine7.cs
@@ -25,5 +25,10 @@ public interface IBuildEngine7 : IBuildEngine6
         /// <param name="coresToRelease">Number of cores no longer in use.</param>
         void ReleaseCores(int coresToRelease);
 
+        /// <summary>
+        /// Block until a "core" from the managed pool for this build is available.
+        /// </summary>
+        void BlockingWaitForCore();
+
     }
 }
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index da75a8716a6..adac8bf4f72 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -1182,5 +1182,10 @@ public void ReleaseCores(int coresToRelease)
         {
             throw new NotImplementedException();
         }
+
+        public void BlockingWaitForCore()
+        {
+            throw new NotImplementedException();
+        }
     }
 }
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index bd745cab9e2..4e44324afb0 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -522,7 +522,13 @@ public void ReleaseCores(int coresToRelease)
             {
                 cpuCount.Release(coresToRelease);
             }
+        }
+
+        public void BlockingWaitForCore()
+        {
+            cpuCount ??= Semaphore.OpenExisting("cpuCount");
 
+            cpuCount.WaitOne();
         }
     }
 }
diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
index 89f00bd0a0d..177e2c07fce 100644
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ b/src/Tasks/SemaphoreCPUTask.cs
@@ -9,33 +9,59 @@ namespace Microsoft.Build.Tasks
 {
     class SemaphoreCPUTask : Task
     {
+        private const int Repetitions = 20;
+
         public override bool Execute()
         {
-            int initial = BuildEngine7.RequestCores(3123890);
-            Log.LogMessageFromText($"Got {initial} cores from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            BuildEngine7.Yield();
 
-            if (initial > 0)
-            {
-                while (initial > 0)
-                {
-                    Thread.Sleep(TimeSpan.FromSeconds(1));
-                    BuildEngine7.ReleaseCores(1);
-                    initial--;
-                    Log.LogMessageFromText($"Released 1 core from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-                }
-
-                return !Log.HasLoggedErrors;
-            }
+            //int initial = BuildEngine7.RequestCores(3123890);
+            //Log.LogMessageFromText($"Got {initial} cores from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+
+            //if (initial > 0)
+            //{
+            //    while (initial > 0)
+            //    {
+            //        Thread.Sleep(TimeSpan.FromSeconds(1));
+            //        BuildEngine7.ReleaseCores(1);
+            //        initial--;
+            //        Log.LogMessageFromText($"Released 1 core from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            //    }
+
+            //    return !Log.HasLoggedErrors;
+            //}
+
+            //for (int i = 0; i < 20; i++)
+            //{
+            //    int v = BuildEngine7.RequestCores(9999);
+            //    Log.LogMessageFromText($"Got {v} cores  from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            //    BuildEngine7.ReleaseCores(v + 20);
+            //    Thread.Sleep(TimeSpan.FromSeconds(0.9));
+            //}
+
+            System.Threading.Tasks.Task[] tasks = new System.Threading.Tasks.Task[Repetitions];
 
-            for (int i = 0; i < 20; i++)
+            for (int i = 0; i < Repetitions; i++)
             {
-                int v = BuildEngine7.RequestCores(9999);
-                Log.LogMessageFromText($"Got {v} cores  from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
-                BuildEngine7.ReleaseCores(v + 20);
-                Thread.Sleep(TimeSpan.FromSeconds(0.9));
+                int i_local = i;
+                tasks[i] = System.Threading.Tasks.Task.Run(() => LaunchAndComplete(i_local, () => BuildEngine7.ReleaseCores(1)));
             }
 
+            System.Threading.Tasks.Task.WhenAll(tasks).Wait();
+
+            BuildEngine7.Reacquire();
+
             return !Log.HasLoggedErrors;
         }
+
+        void LaunchAndComplete(int i, Action completionCallback)
+        {
+            BuildEngine7.BlockingWaitForCore();
+            Log.LogMessageFromText($"Action {i} started from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            Thread.Sleep(2_000);
+            Log.LogMessageFromText($"Action {i} completed from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+
+            completionCallback.Invoke();
+        }
     }
 }
