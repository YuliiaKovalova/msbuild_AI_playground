diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index 8b6a07bd7d6..389450a2242 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -75,6 +75,7 @@ private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)
         /// </summary>
         override public String ReadString()
         {
+            char[] resultBuffer = null;
             try
             {
                 MemoryStream memoryStream = this.BaseStream as MemoryStream;
@@ -98,7 +99,6 @@ override public String ReadString()
                 }
 
                 char[] charBuffer = _buffer.CharBuffer;
-                char[] resultBuffer = null;
                 do
                 {
                     readLength = ((stringLength - currPos) > MaxCharsBuffer) ? MaxCharsBuffer : (stringLength - currPos);
@@ -163,11 +163,7 @@ override public String ReadString()
                 while (currPos < stringLength);
 
                 var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));
-#if !CLR2COMPATIBILITY
-                // It is required that resultBuffer is always not null
-                // and rented by ArrayPool so we can simply return it to back to the Pool
-                ArrayPool<char>.Shared.Return(resultBuffer);
-#endif
+
                 return retval;
             }
             catch (Exception e)
@@ -175,6 +171,16 @@ override public String ReadString()
                 Debug.Assert(false, e.ToString());
                 throw;
             }
+#if !CLR2COMPATIBILITY
+            finally
+            {
+                // resultBuffer shall always be either Rented or null
+                if (resultBuffer != null)
+                {
+                    ArrayPool<char>.Shared.Return(resultBuffer);
+                }
+            }
+#endif
         }
 
         /// <summary>
