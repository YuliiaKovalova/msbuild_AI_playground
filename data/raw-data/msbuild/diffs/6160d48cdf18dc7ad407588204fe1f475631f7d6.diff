diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 3eb868b682c..ec09003778a 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -37,7 +37,16 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
             {
                 if (!string.IsNullOrEmpty(stateFile))
                 {
-                    File.WriteAllText(stateFile, JsonSerializer.Serialize(this));
+                    if (FileSystems.Default.FileExists(stateFile))
+                    {
+                        File.Delete(stateFile);
+                    }
+
+                    using (var s = new FileStream(stateFile, FileMode.CreateNew))
+                    {
+                        var formatter = new BinaryFormatter();
+                        formatter.Serialize(s, this);
+                    }
                 }
             }
             catch (Exception e)
@@ -59,6 +68,7 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
         internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelper log, Type requiredReturnType, bool logWarnings = true)
         {
             StateFileBase retVal = null;
+            object deserializedObject = null;
 
             // First, we read the cache from disk if one exists, or if one does not exist
             // then we create one.  
@@ -66,8 +76,12 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
             {
                 if (!string.IsNullOrEmpty(stateFile) && FileSystems.Default.FileExists(stateFile))
                 {
-                    object deserializedObject = JsonSerializer.Deserialize(File.ReadAllText(stateFile), requiredReturnType);
-                    retVal = deserializedObject as StateFileBase;
+                    using (FileStream s = new FileStream(stateFile, FileMode.Open))
+                    {
+                        var formatter = new BinaryFormatter();
+                        deserializedObject = formatter.Deserialize(s);
+                        retVal = deserializedObject as StateFileBase;
+                    }
                     // If the deserialized object is null then there would be no cast error but retVal would still be null
                     // only log the message if there would have been a cast error
                     if (retVal == null && deserializedObject != null)
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index b54c97f8896..2ff64df7e92 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -577,17 +577,20 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
                         FileState fileState = (FileState)sfBase.instanceLocalFileStateCache[relativePath];
                         // Verify that the assembly is correct
                         Guid mvid;
-                        using (var reader = new PEReader(File.OpenRead(relativePath)))
+                        string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile), relativePath));
+                        if (File.Exists(fullPath))
                         {
-                            var metadataReader = reader.GetMetadataReader();
-                            mvid = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
-                        }
-                        if (File.Exists(relativePath) && mvid.Equals(fileState.ModuleVersionID))
-                        {
-                            // Correct file path and timestamp
-                            string fullPath = Path.GetFullPath(Path.Combine(stateFile, relativePath));
-                            fileState.LastModified = retVal.getLastWriteTime(fullPath);
-                            retVal.instanceLocalFileStateCache[fullPath] = fileState;
+                            using (var reader = new PEReader(File.OpenRead(fullPath)))
+                            {
+                                var metadataReader = reader.GetMetadataReader();
+                                mvid = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
+                            }
+                            if (mvid.Equals(fileState.ModuleVersionID))
+                            {
+                                // Correct file path and timestamp
+                                fileState.LastModified = retVal.getLastWriteTime(fullPath);
+                                retVal.instanceLocalFileStateCache[fullPath] = fileState;
+                            }
                         }
                     }
                 }
@@ -601,6 +604,7 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
         /// </summary>
         internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
+            Hashtable newInstanceLocalFileStateCache = new Hashtable();
             foreach (string path in instanceLocalFileStateCache.Keys)
             {
                 // Add MVID to allow us to verify that we are using the same assembly later
@@ -611,10 +615,10 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
                     fileState.ModuleVersionID = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
                 }
 
-                instanceLocalFileStateCache.Remove(path);
-                string relativePath = new Uri(Path.GetDirectoryName(stateFile)).MakeRelativeUri(new Uri(path)).ToString();
-                instanceLocalFileStateCache[relativePath] = fileState;
+                string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), path);
+                newInstanceLocalFileStateCache[relativePath] = fileState;
             }
+            instanceLocalFileStateCache = newInstanceLocalFileStateCache;
 
             SerializeCache(stateFile, log);
         }
