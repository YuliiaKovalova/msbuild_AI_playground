diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index b865c24a569..7100095f1b4 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -1,4 +1,4 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
@@ -391,27 +391,33 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,
 
         private void RemoveCheck(CheckFactoryContext checkToRemove)
         {
-            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));
-
-            while (_checkRegistry.TryTake(out _)) { }
-
-            foreach (var item in newRegistry)
-            {
-                _checkRegistry.Add(item);
-            }
-
-            if (checkToRemove.MaterializedCheck is not null)
+            var tempColl = new ConcurrentBag<CheckFactoryContext>();
+            
+            // Take items one by one and only keep those we don't want to remove
+            while (_checkRegistry.TryTake(out var item))
             {
-                _buildCheckCentralContext.DeregisterCheck(checkToRemove.MaterializedCheck);
-
-                // Get telemetry data before disposing
-                var telemetryData = checkToRemove.MaterializedCheck.GetRuleTelemetryData();
-                foreach (var data in telemetryData)
+                if (item != checkToRemove)
+                {
+                    tempColl.Add(item);
+                }
+                else if (item.MaterializedCheck is not null)
                 {
-                    _ruleTelemetryData.Add(data); 
+                    _buildCheckCentralContext.DeregisterCheck(item.MaterializedCheck);
+                    
+                    var telemetryData = item.MaterializedCheck.GetRuleTelemetryData();
+                    foreach (var data in telemetryData)
+                    {
+                        _ruleTelemetryData.Add(data);
+                    }
+                    
+                    item.MaterializedCheck.Check.Dispose();
                 }
+            }
 
-                checkToRemove.MaterializedCheck.Check.Dispose();
+            // Add back all preserved items
+            foreach (var item in tempColl)
+            {
+                _checkRegistry.Add(item);
             }
         }
 
