diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index 8887b9cca2b..675ee040ffc 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -439,10 +439,20 @@ bool accumulateProperties
                     Toolset toolset = ReadToolset(toolsVersion, globalProperties, initialPropertiesClone, accumulateProperties);
 
                     // Register toolset paths into list of immutable directories
-                    //   example: C:\Windows\Microsoft.NET\Framework\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
-                    // example:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
+                    // example: C:\Windows\Microsoft.NET\Framework
+                    string frameworksPathPrefix32 = rootOrNull(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefix32);
+                    // example: C:\Windows\Microsoft.NET\Framework64
+                    string frameworksPathPrefix64 = rootOrNull(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefix64);
+                    // example: C:\Windows\Microsoft.NET\FrameworkArm64
+                    // TODO: Apply MSBuildFrameworkToolsPathArm64 or equivalent as soon as there is one
+                    string frameworksPathPrefixArm64 = rootOrNull(frameworksPathPrefix32 ?? frameworksPathPrefix64);
+                    if (!string.IsNullOrEmpty(frameworksPathPrefixArm64))
+                    {
+                        frameworksPathPrefixArm64 = Path.Combine(frameworksPathPrefixArm64, "FrameworkArm64");
+                    }
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefixArm64);
 
                     if (toolset != null)
                     {
@@ -450,6 +460,23 @@ bool accumulateProperties
                     }
                 }
             }
+
+            string rootOrNull(string path)
+            {
+                if (!string.IsNullOrEmpty(path))
+                {
+                    try
+                    {
+                        path = Directory.GetParent(FileUtilities.EnsureNoTrailingSlash(path))?.FullName;
+                    }
+                    catch
+                    {
+                        path = null;
+                    }
+                }
+
+                return path;
+            }
         }
 
         /// <summary>
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index 5cd5303e605..a214a751443 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -76,17 +76,15 @@ internal class FileClassifier
         /// </remarks>
         public FileClassifier()
         {
-            string? programFiles32 = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
-            string? programFiles64 = Environment.GetEnvironmentVariable("ProgramW6432");
-
-            if (!string.IsNullOrEmpty(programFiles32))
-            {
-                RegisterImmutableDirectory(Path.Combine(programFiles32, "Reference Assemblies", "Microsoft"));
-            }
-
-            if (!string.IsNullOrEmpty(programFiles64))
+            // Register Microsoft "Reference Assemblies" as immutable
+            string[] programFilesEnvs = new[] { "ProgramFiles(x86)", "ProgramW6432", "ProgramFiles(Arm)" };
+            foreach (string programFilesEnv in programFilesEnvs)
             {
-                RegisterImmutableDirectory(Path.Combine(programFiles64, "Reference Assemblies", "Microsoft"));
+                string? programFiles = Environment.GetEnvironmentVariable(programFilesEnv);
+                if (!string.IsNullOrEmpty(programFiles))
+                {
+                    RegisterImmutableDirectory(Path.Combine(programFiles, "Reference Assemblies", "Microsoft"));
+                }
             }
 
 #if !RUNTIME_TYPE_NETCORE
