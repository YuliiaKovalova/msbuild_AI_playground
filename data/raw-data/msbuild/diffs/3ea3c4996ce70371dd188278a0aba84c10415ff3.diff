diff --git a/src/MSBuild.UnitTests/NodeStatus_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
index 50ae7b38a51..c979d5c5b1a 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_Tests.cs
@@ -1,4 +1,4 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
@@ -31,32 +31,32 @@ public NodeStatus_Tests()
     [Fact]
     public async Task EverythingFits()
     {
-        NodesFrame frame = new(new[] { _status }, width: 80, height: 5);
+        NodesFrame frame = new([_status], width: 80, height: 5);
 
-        await Verify(frame.RenderNodeStatus(_status).ToString());
+        await Verify(frame.RenderNodeStatus(0).ToString());
     }
 
     [Fact]
     public async Task TargetIsTruncatedFirst()
     {
-        NodesFrame frame = new(new[] { _status }, width: 45, height: 5);
+        NodesFrame frame = new([_status], width: 45, height: 5);
 
-        await Verify(frame.RenderNodeStatus(_status).ToString());
+        await Verify(frame.RenderNodeStatus(0).ToString());
     }
 
     [Fact]
     public async Task NamespaceIsTruncatedNext()
     {
-        NodesFrame frame = new(new[] { _status }, width: 40, height: 5);
+        NodesFrame frame = new([_status], width: 40, height: 5);
 
-        await Verify(frame.RenderNodeStatus(_status).ToString());
+        await Verify(frame.RenderNodeStatus(0).ToString());
     }
 
     [Fact]
     public async Task GoesToProject()
     {
-        NodesFrame frame = new(new[] { _status }, width: 10, height: 5);
+        NodesFrame frame = new([_status], width: 10, height: 5);
 
-        await Verify(frame.RenderNodeStatus(_status).ToString());
+        await Verify(frame.RenderNodeStatus(0).ToString());
     }
 }
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index 144288950fa..6e5f90d581e 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -17,6 +17,7 @@ internal sealed class NodesFrame
     private const int MaxColumn = 120;
 
     private readonly NodeStatus[] _nodes;
+    private readonly int[] _durationLength;
 
     private readonly StringBuilder _renderBuilder = new();
 
@@ -30,6 +31,7 @@ public NodesFrame(NodeStatus?[] nodes, int width, int height)
         Height = height;
 
         _nodes = new NodeStatus[nodes.Length];
+        _durationLength = new int[nodes.Length];
 
         foreach (NodeStatus? status in nodes)
         {
@@ -40,12 +42,16 @@ public NodesFrame(NodeStatus?[] nodes, int width, int height)
         }
     }
 
-    internal ReadOnlySpan<char> RenderNodeStatus(NodeStatus status)
+    internal ReadOnlySpan<char> RenderNodeStatus(int i)
     {
+        NodeStatus status = _nodes[i];
+
         string durationString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
             "DurationDisplay",
             status.Stopwatch.Elapsed.TotalSeconds);
 
+        _durationLength[i] = durationString.Length;
+
         string project = status.Project;
         string? targetFramework = status.TargetFramework;
         string target = status.Target;
@@ -91,14 +97,14 @@ public string Render(NodesFrame previousFrame)
         int i = 0;
         for (; i < NodesCount; i++)
         {
-            ReadOnlySpan<char> needed = RenderNodeStatus(_nodes[i]);
+            ReadOnlySpan<char> needed = RenderNodeStatus(i);
 
             // Do we have previous node string to compare with?
             if (previousFrame.NodesCount > i)
             {
-                if (previousFrame._nodes[i] == _nodes[i])
+                if (previousFrame._nodes[i] == _nodes[i] &&                 // Same everything except time, AND
+                    previousFrame._durationLength[i] == _durationLength[i]) // same number of digits in time
                 {
-                    // Same everything except time
                     string durationString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("DurationDisplay", _nodes[i].Stopwatch.Elapsed.TotalSeconds);
                     sb.Append($"{AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(durationString.Length)}{durationString}");
                 }
