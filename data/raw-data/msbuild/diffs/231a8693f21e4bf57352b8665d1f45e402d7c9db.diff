diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 8ba6bbbfc8b..731950b2405 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -1788,7 +1788,8 @@ internal void VerifyThrowInvalidOperationNotImported(ProjectRootElement otherXml
         /// project, specific for a given evaluation ID.
         /// </summary>
         /// <param name="evaluationId">The evaluation ID for which the cache is requested.</param>
-        /// <returns></returns>
+        /// <returns>An <see cref="IDirectoryCache"/> implementation, or null if this project has no <see cref="IDirectoryCacheFactory"/>
+        /// associated with it or it returned null.</returns>
         internal IDirectoryCache GetDirectoryCacheForEvaluation(int evaluationId)
         {
             return _directoryCacheFactory?.GetDirectoryCacheForEvaluation(evaluationId);
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index f5d52eed4ee..ada3da6a27f 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -29,7 +29,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         private readonly Expander<P, I> _outerExpander;
         private readonly IEvaluatorData<P, I, M, D> _evaluatorData;
         private readonly Expander<P, I> _expander;
-        protected readonly IItemFactory<I, I> _itemFactory;
+        private readonly IItemFactory<I, I> _itemFactory;
         private readonly LoggingContext _loggingContext;
         private readonly EvaluationProfiler _evaluationProfiler;
 
diff --git a/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs b/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
index 34e35a566be..84c24fb02cc 100644
--- a/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
+++ b/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
@@ -101,35 +101,17 @@ private IEnumerable<string> EnumerateFullFileSystemPaths(string path, string sea
 
         #region IFileSystem pass-through implementation
 
-        public FileAttributes GetAttributes(string path)
-        {
-            return _fileSystem.GetAttributes(path);
-        }
+        public FileAttributes GetAttributes(string path) => _fileSystem.GetAttributes(path);
 
-        public DateTime GetLastWriteTimeUtc(string path)
-        {
-            return _fileSystem.GetLastWriteTimeUtc(path);
-        }
+        public DateTime GetLastWriteTimeUtc(string path) => _fileSystem.GetLastWriteTimeUtc(path);
 
-        public TextReader ReadFile(string path)
-        {
-            return _fileSystem.ReadFile(path);
-        }
+        public TextReader ReadFile(string path) => _fileSystem.ReadFile(path);
 
-        public Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share)
-        {
-            return _fileSystem.GetFileStream(path, mode, access, share);
-        }
+        public Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => _fileSystem.GetFileStream(path, mode, access, share);
 
-        public string ReadFileAllText(string path)
-        {
-            return _fileSystem.ReadFileAllText(path);
-        }
+        public string ReadFileAllText(string path) => _fileSystem.ReadFileAllText(path);
 
-        public byte[] ReadFileAllBytes(string path)
-        {
-            return _fileSystem.ReadFileAllBytes(path);
-        }
+        public byte[] ReadFileAllBytes(string path) => _fileSystem.ReadFileAllBytes(path);
 
         #endregion
     }
diff --git a/src/Build/FileSystem/IDirectoryCache.cs b/src/Build/FileSystem/IDirectoryCache.cs
index 6567bf8a65d..3938bfc41d8 100644
--- a/src/Build/FileSystem/IDirectoryCache.cs
+++ b/src/Build/FileSystem/IDirectoryCache.cs
@@ -4,8 +4,6 @@
 using System;
 using System.Collections.Generic;
 
-using Microsoft.Build.Evaluation;
-
 namespace Microsoft.Build.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 7eb3ca6700a..22a9572fc82 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -94,7 +94,7 @@ public FileMatcher(IFileSystem fileSystem, ConcurrentDictionary<string, IReadOnl
         {
         }
 
-        internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemEntries, ConcurrentDictionary<string, IReadOnlyList<string>> fileEntryExpansionCache = null)
+        internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemEntries, ConcurrentDictionary<string, IReadOnlyList<string>> getFileSystemDirectoryEntriesCache = null)
         {
             if (Traits.Instance.MSBuildCacheFileEnumerations)
             {
@@ -103,12 +103,12 @@ internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemE
             }
             else
             {
-                _cachedGlobExpansions = fileEntryExpansionCache;
+                _cachedGlobExpansions = getFileSystemDirectoryEntriesCache;
             }
 
             _fileSystem = fileSystem;
 
-            _getFileSystemEntries = fileEntryExpansionCache == null
+            _getFileSystemEntries = getFileSystemDirectoryEntriesCache == null
                 ? getFileSystemEntries
                 : (type, path, pattern, directory, stripProjectDirectory) =>
                 {
@@ -123,7 +123,7 @@ internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemE
                             FileSystemEntity.FilesAndDirectories => "A",
                             _ => throw new NotImplementedException()
                         } + ";" + path;
-                        IReadOnlyList<string> allEntriesForPath = fileEntryExpansionCache.GetOrAdd(
+                        IReadOnlyList<string> allEntriesForPath = getFileSystemDirectoryEntriesCache.GetOrAdd(
                                 cacheKey,
                                 s => getFileSystemEntries(
                                     type,
@@ -144,7 +144,7 @@ internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemE
                         // Cache only directories, for files we won't hit the cache because the file name patterns tend to be unique
                         if (type == FileSystemEntity.Directories)
                         {
-                            return fileEntryExpansionCache.GetOrAdd(
+                            return getFileSystemDirectoryEntriesCache.GetOrAdd(
                                 $"D;{path};{pattern ?? "*"}",
                                 s => getFileSystemEntries(
                                     type,
