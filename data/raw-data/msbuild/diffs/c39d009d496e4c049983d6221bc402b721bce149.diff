diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 63b58fc73ca..ac9b733f8d2 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -34,6 +34,16 @@ public MockLoggingService(Action<string> writter = null)
         /// </summary>
         public event LoggingExceptionDelegate OnLoggingThreadException;
 
+        /// <summary>
+        /// The event to raise when ProjectStarted is processed.
+        /// </summary>
+        public event ProjectStartedEventHandler OnProjectStarted;
+
+        /// <summary>
+        /// The event to raise when ProjectFinished is processed
+        /// </summary>
+        public event ProjectFinishedEventHandler OnProjectFinished;
+
         /// <summary>
         /// Enumerator over all registered loggers.
         /// </summary>
@@ -50,6 +60,8 @@ public LoggingServiceState ServiceState
             get
             {
                 OnLoggingThreadException(null);
+                OnProjectStarted(null, null);
+                OnProjectFinished(null, null);
                 throw new NotImplementedException();
             }
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 5912348d64b..42c230c97cb 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -192,6 +192,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private readonly BuildComponentFactoryCollection _componentFactories;
 
+        /// <summary>
+        /// Mapping of submission IDs to their first project started events.
+        /// </summary>
+        private readonly Dictionary<int, BuildEventArgs> _projectStartedEvents;
+
         /// <summary>
         /// Whether a cache has been provided by a project instance, meaning
         /// we've acquired at least one build submission that included a project instance.
@@ -199,6 +204,16 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private bool _acquiredProjectRootElementCacheFromProjectInstance;
 
+        /// <summary>
+        /// The project started event handler
+        /// </summary>
+        private readonly ProjectStartedEventHandler _projectStartedEventHandler;
+
+        /// <summary>
+        /// The project finished event handler
+        /// </summary>
+        private readonly ProjectFinishedEventHandler _projectFinishedEventHandler;
+
         /// <summary>
         /// The logging exception event handler
         /// </summary>
@@ -269,7 +284,10 @@ public BuildManager(string hostName)
             _nextUnnamedProjectId = 1;
             _componentFactories = new BuildComponentFactoryCollection(this);
             _componentFactories.RegisterDefaultFactories();
+            _projectStartedEvents = new Dictionary<int, BuildEventArgs>();
 
+            _projectStartedEventHandler = OnProjectStarted;
+            _projectFinishedEventHandler = OnProjectFinished;
             _loggingThreadExceptionEventHandler = OnThreadException;
             _legacyThreadingData = new LegacyThreadingData();
             _instantiationTimeUtc = DateTime.UtcNow;
@@ -834,6 +852,31 @@ public void EndBuild()
 
                 projectCacheShutdown?.Wait();
 
+#if DEBUG
+                if (_projectStartedEvents.Count != 0)
+                {
+                    bool allMismatchedProjectStartedEventsDueToLoggerErrors = true;
+
+                    foreach (KeyValuePair<int, BuildEventArgs> projectStartedEvent in _projectStartedEvents)
+                    {
+                        BuildResult result = _resultsCache.GetResultsForConfiguration(projectStartedEvent.Value.BuildEventContext.ProjectInstanceId);
+
+                        // It's valid to have a mismatched project started event IFF that particular
+                        // project had some sort of unhandled exception.  If there is no result, we
+                        // can't tell for sure one way or the other, so err on the side of throwing
+                        // the assert, but if there is a result, make sure that it actually has an
+                        // exception attached.
+                        if (result?.Exception == null)
+                        {
+                            allMismatchedProjectStartedEventsDueToLoggerErrors = false;
+                            break;
+                        }
+                    }
+
+                    Debug.Assert(allMismatchedProjectStartedEventsDueToLoggerErrors, "There was a mismatched project started event not caused by an exception result");
+                }
+#endif
+
                 if (_buildParameters.DiscardBuildResults)
                 {
                     _resultsCache.ClearResults();
@@ -2087,6 +2130,7 @@ private void Reset()
             _acquiredProjectRootElementCacheFromProjectInstance = false;
 
             _unnamedProjectInstanceToNames.Clear();
+            _projectStartedEvents.Clear();
             _nodeIdToKnownConfigurations.Clear();
             _nextUnnamedProjectId = 1;
 
@@ -2765,6 +2809,42 @@ private void OnThreadException(Exception e)
             }
         }
 
+        /// <summary>
+        /// Raised when a project finished logging message has been processed.
+        /// </summary>
+        private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
+        {
+            lock (_syncLock)
+            {
+                if (_projectStartedEvents.TryGetValue(e.BuildEventContext.SubmissionId, out var originalArgs))
+                {
+                    if (originalArgs.BuildEventContext.Equals(e.BuildEventContext))
+                    {
+                        _projectStartedEvents.Remove(e.BuildEventContext.SubmissionId);
+                        if (_buildSubmissions.TryGetValue(e.BuildEventContext.SubmissionId, out var submission))
+                        {
+                            submission.CompleteLogging(false);
+                            CheckSubmissionCompletenessAndRemove(submission);
+                        }
+                    }
+                }
+            }
+        }
+
+        /// <summary>
+        /// Raised when a project started logging message is about to be processed.
+        /// </summary>
+        private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
+        {
+            lock (_syncLock)
+            {
+                if (!_projectStartedEvents.ContainsKey(e.BuildEventContext.SubmissionId))
+                {
+                    _projectStartedEvents[e.BuildEventContext.SubmissionId] = e;
+                }
+            }
+        }
+
         /// <summary>
         /// Creates a logging service around the specified set of loggers.
         /// </summary>
@@ -2786,6 +2866,8 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
 
             _threadException = null;
             loggingService.OnLoggingThreadException += _loggingThreadExceptionEventHandler;
+            loggingService.OnProjectStarted += _projectStartedEventHandler;
+            loggingService.OnProjectFinished += _projectFinishedEventHandler;
             loggingService.WarningsAsErrors = warningsAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
@@ -2871,6 +2953,8 @@ private void ShutdownLoggingService(ILoggingService loggingService)
                 if (loggingService != null)
                 {
                     loggingService.OnLoggingThreadException -= _loggingThreadExceptionEventHandler;
+                    loggingService.OnProjectFinished -= _projectFinishedEventHandler;
+                    loggingService.OnProjectStarted -= _projectStartedEventHandler;
                     _componentFactories.ShutdownComponent(BuildComponentType.LoggingService);
                 }
             }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 6bd8f177556..86d4e070d33 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -37,6 +37,16 @@ internal interface ILoggingService
         /// </summary>
         event LoggingExceptionDelegate OnLoggingThreadException;
 
+        /// <summary>
+        /// Raised when a ProjectStarted event is about to be sent to the loggers.
+        /// </summary>
+        event ProjectStartedEventHandler OnProjectStarted;
+
+        /// <summary>
+        /// Raised when a ProjectFinished event has just been sent to the loggers.
+        /// </summary>
+        event ProjectFinishedEventHandler OnProjectFinished;
+
         #endregion
 
         #region Properties
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index f16e888e5b4..eb11739f920 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -310,6 +310,16 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
         /// </summary>
         public event LoggingExceptionDelegate OnLoggingThreadException;
 
+        /// <summary>
+        /// Raised when a ProjectStarted event is about to be sent to the loggers.
+        /// </summary>
+        public event ProjectStartedEventHandler OnProjectStarted;
+
+        /// <summary>
+        /// Raised when a ProjectFinished event has just been sent to the loggers.
+        /// </summary>
+        public event ProjectFinishedEventHandler OnProjectFinished;
+
         #endregion
 
         #region Properties
@@ -1433,6 +1443,8 @@ private void RouteBuildEvent(object loggingEvent)
         /// </summary>
         private void RouteBuildEvent(KeyValuePair<int, BuildEventArgs> nodeEvent)
         {
+            TryRaiseProjectStartedEvent(nodeEvent.Value);
+
             // Get the sink which will handle the build event, then send the event to that sink
             IBuildEventSink sink;
             bool gotSink = _eventSinkDictionary.TryGetValue(nodeEvent.Key, out sink);
@@ -1441,6 +1453,8 @@ private void RouteBuildEvent(KeyValuePair<int, BuildEventArgs> nodeEvent)
                 // Sinks in the eventSinkDictionary are expected to not be null.
                 sink.Consume(nodeEvent.Value, nodeEvent.Key);
             }
+
+            TryRaiseProjectFinishedEvent(nodeEvent.Value);
         }
 
         /// <summary>
@@ -1449,6 +1463,8 @@ private void RouteBuildEvent(KeyValuePair<int, BuildEventArgs> nodeEvent)
         /// <param name="eventArg">Build event that needs to be routed to the correct filter or sink.</param>
         private void RouteBuildEvent(BuildEventArgs eventArg)
         {
+            TryRaiseProjectStartedEvent(eventArg);
+
             // The event has not been through a filter yet. All events must go through a filter before they make it to a logger
             if (_filterEventSource != null)   // Loggers may not be registered
             {
@@ -1498,6 +1514,8 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
                     }
                 }
             }
+
+            TryRaiseProjectFinishedEvent(eventArg);
         }
 
         /// <summary>
@@ -1552,6 +1570,40 @@ private void RaiseLoggingExceptionEvent(Exception ex)
             OnLoggingThreadException?.Invoke(ex);
         }
 
+        /// <summary>
+        /// Raise the project started event, if necessary.
+        /// </summary>
+        private void TryRaiseProjectStartedEvent(BuildEventArgs args)
+        {
+            ProjectStartedEventHandler eventHandler = OnProjectStarted;
+
+            if (eventHandler != null)
+            {
+                ProjectStartedEventArgs startedEventArgs = args as ProjectStartedEventArgs;
+                if (startedEventArgs != null)
+                {
+                    eventHandler(this, startedEventArgs);
+                }
+            }
+        }
+
+        /// <summary>
+        /// Raise the project finished event, if necessary.
+        /// </summary>
+        private void TryRaiseProjectFinishedEvent(BuildEventArgs args)
+        {
+            ProjectFinishedEventHandler eventHandler = OnProjectFinished;
+
+            if (eventHandler != null)
+            {
+                ProjectFinishedEventArgs finishedEventArgs = args as ProjectFinishedEventArgs;
+                if (finishedEventArgs != null)
+                {
+                    eventHandler(this, finishedEventArgs);
+                }
+            }
+        }
+
         /// <summary>
         /// Get the project name from a context ID. Throw an exception if it's not found.
         /// </summary>
