diff --git a/src/Build.UnitTests/Instance/TaskItem_Tests.cs b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
index ce5be41fb99..a9e40170709 100644
--- a/src/Build.UnitTests/Instance/TaskItem_Tests.cs
+++ b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
@@ -191,7 +191,6 @@ public void Metadata()
             item.MetadataNames.Cast<string>().ShouldBeSetEquivalentTo(new[] { "a", "b" }.Concat(s_builtInMetadataNames));
             item.MetadataCount.ShouldBe(s_builtInMetadataNames.Length + 2);
             item.CustomMetadataNames.Cast<string>().ShouldBeSetEquivalentTo(new[] { "a", "b" });
-            item.CustomMetadataCount.ShouldBe(2);
             item.DirectMetadataCount.ShouldBe(1);
 
             CopyOnWritePropertyDictionary<ProjectMetadataInstance> metadata = item.MetadataCollection;
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 787e757a587..f3452ad5972 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -969,16 +969,6 @@ public ICollection CustomMetadataNames
                 }
             }
 
-            /// <summary>
-            /// Gets the number of custom metadata set on the item.
-            /// Does not include built-in metadata.
-            /// Computed, not necessarily fast.
-            /// </summary>
-            public int CustomMetadataCount
-            {
-                get { return CustomMetadataNames.Count; }
-            }
-
             /// <summary>
             /// Gets the evaluated include for this item, unescaped.
             /// </summary>
@@ -1584,13 +1574,33 @@ public bool Equals(TaskItem other)
                     return false;
                 }
 
-                if (this.CustomMetadataCount != other.CustomMetadataCount)
+                var thisNames = new HashSet<string>(MSBuildNameIgnoreCaseComparer.Default);
+
+                if (_itemDefinitions is not null)
                 {
-                    return false;
+                    foreach (ProjectItemDefinitionInstance itemDefinition in _itemDefinitions)
+                    {
+                        thisNames.UnionWith(itemDefinition.MetadataNames);
+                    }
                 }
 
-                foreach (string name in this.CustomMetadataNames)
+                if (_directMetadata is not null)
                 {
+                    foreach (ProjectMetadataInstance metadatum in _directMetadata)
+                    {
+                        thisNames.Add(metadatum.Name);
+                    }
+                }
+
+                foreach (ProjectMetadataInstance metadatum in other.MetadataCollection)
+                {
+                    string name = metadatum.Name;
+
+                    if (!thisNames.Remove(name))
+                    {
+                        return false;
+                    }
+
                     // This is case-insensitive, so that for example "en-US" and "en-us" match and are bucketed together.
                     // In this respect, therefore, we have to consider item metadata value case as not significant.
                     if (!String.Equals
@@ -1606,7 +1616,7 @@ public bool Equals(TaskItem other)
                 }
 
                 // Do not consider mutability for equality comparison
-                return true;
+                return thisNames.Count == 0;
             }
 
 #endregion
