diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 5b0265c8ae2..3b3f2c9f985 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -423,8 +423,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(
                 }
                 else if (loggingContext.LoggingService.MinimumRequiredMessageImportance >= MessageImportance.Low)
                 {
-                    string resultWarnings = result.Warnings?.Any() == true ? string.Join(Environment.NewLine, result.Warnings) : "null";
-                    string resultErrors = result.Errors?.Any() == true ? string.Join(Environment.NewLine, result.Errors) : "null";
+                    string resultWarnings = result.Warnings != null && result.Warnings.Any() ? string.Join(Environment.NewLine, result.Warnings) : "null";
+                    string resultErrors = result.Errors != null && result.Errors.Any() ? string.Join(Environment.NewLine, result.Errors) : "null";
 
                     loggingContext.LogComment(MessageImportance.Low, "SDKResolverAttempt", sdkResolver.Name, sdk.ToString(), resultWarnings, resultErrors);
                 }
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 741babe959c..4729418f906 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -63,8 +63,8 @@ public class Project : ILinkableObject
         /// </summary>
         private static readonly BuildEventContext s_buildEventContext = new BuildEventContext(0 /* node ID */, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
 
-        private ProjectLink implementation;
-        private IProjectLinkInternal implementationInternal;
+        private readonly ProjectLink implementation;
+        private readonly IProjectLinkInternal implementationInternal;
 
         internal bool IsLinked => implementationInternal.IsLinked;
         internal ProjectLink Link => implementation;
@@ -3441,7 +3441,7 @@ public bool IsSuitableExistingItemXml(ProjectItemElement candidateExistingItemXm
                     return false;
                 }
 
-                if ((metadata?.Any() == true) || candidateExistingItemXml.Count > 0)
+                if ((metadata != null && metadata.Any()) || candidateExistingItemXml.Count > 0)
                 {
                     // Don't try to make sure the metadata are the same.
                     return false;
@@ -3846,7 +3846,7 @@ private ProjectElement GetAnySuitableExistingItemXml(string itemType, string une
                     return null;
                 }
 
-                if (metadata?.Any() == true)
+                if (metadata != null && metadata.Any())
                 {
                     // Don't bother trying to match up metadata
                     return null;
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index f754cbf4d3c..7ac5e58a95f 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -90,7 +90,7 @@ protected override IEnumerable<ToolsetPropertyDefinition> ToolsVersions
                             toolset.ElementInformation.LineNumber,
                             0);
 
-                        if (toolset.toolsVersion?.Length == 0)
+                        if (toolset.toolsVersion == null || toolset.toolsVersion.Length == 0)
                         {
                             InvalidToolsetDefinitionException.Throw(
                                 "InvalidToolsetValueInConfigFileValue",
@@ -167,7 +167,7 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetPropertyDefinitions
             {
                 ElementLocation location = ElementLocation.Create(propertyElement.ElementInformation.Source, propertyElement.ElementInformation.LineNumber, 0);
 
-                if (propertyElement.Name?.Length == 0)
+                if (propertyElement.Name == null || propertyElement.Name.Length == 0)
                 {
                     InvalidToolsetDefinitionException.Throw("InvalidToolsetValueInConfigFileValue", location.LocationString);
                 }
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index 0cc16709f31..3113191badb 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -291,7 +291,7 @@ private static ToolsetPropertyDefinition CreatePropertyFromRegistry(RegistryKeyW
         {
             string propertyValue = null;
 
-            if (propertyName?.Length == 0)
+            if (propertyName == null || propertyName.Length == 0)
             {
                 InvalidToolsetDefinitionException.Throw("PropertyNameInRegistryHasZeroLength", toolsetWrapper.Name);
             }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 1366feccc73..f5cfb5bdbb9 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -12,7 +12,6 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Components.RequestBuilder;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
@@ -166,7 +165,7 @@ internal class Evaluator<P, I, M, D>
         /// <summary>
         /// The logging context to be used and piped down throughout evaluation.
         /// </summary>
-        private EvaluationLoggingContext _evaluationLoggingContext;
+        private readonly EvaluationLoggingContext _evaluationLoggingContext;
 
         private bool _logProjectImportedEvents = true;
 
@@ -185,7 +184,7 @@ internal class Evaluator<P, I, M, D>
         /// <summary>
         /// Keeps track of the FullPaths of ProjectRootElements that may have been modified as a stream.
         /// </summary>
-        private List<string> _streamImports;
+        private readonly List<string> _streamImports;
 
         private readonly bool _interactive;
 
@@ -1848,8 +1847,8 @@ static string EvaluateProperty(string value, IElementLocation location,
                     }
                 }
 
-                if ((sdkResult.PropertiesToAdd?.Any() == true) ||
-                    (sdkResult.ItemsToAdd?.Any() == true))
+                if ((sdkResult.PropertiesToAdd != null && sdkResult.PropertiesToAdd.Any()) ||
+                    (sdkResult.ItemsToAdd != null && sdkResult.ItemsToAdd.Any()))
                 {
                     projectList ??= new List<ProjectRootElement>();
 
@@ -1918,7 +1917,7 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.FullPath = projectPath;
 
-                if (sdkResult.PropertiesToAdd?.Any() == true)
+                if (sdkResult.PropertiesToAdd != null && sdkResult.PropertiesToAdd.Any())
                 {
                     var propertyGroup = project.AddPropertyGroup();
                     foreach (var propertyNameAndValue in sdkResult.PropertiesToAdd)
@@ -1927,7 +1926,7 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
                     }
                 }
 
-                if (sdkResult.ItemsToAdd?.Any() == true)
+                if (sdkResult.ItemsToAdd != null && sdkResult.ItemsToAdd.Any())
                 {
                     var itemGroup = project.AddItemGroup();
                     foreach (var item in sdkResult.ItemsToAdd)
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 4b658abbecf..e8d05fad22b 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -39,7 +39,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
 
         private int _nextElementOrder = 0;
 
-        private Dictionary<string, LazyItemList> _itemLists = Traits.Instance.EscapeHatches.UseCaseSensitiveItemNames ?
+        private readonly Dictionary<string, LazyItemList> _itemLists = Traits.Instance.EscapeHatches.UseCaseSensitiveItemNames ?
             new Dictionary<string, LazyItemList>() :
             new Dictionary<string, LazyItemList>(StringComparer.OrdinalIgnoreCase);
 
@@ -75,7 +75,7 @@ private static bool EvaluateCondition(
             Expander<P, I> expander,
             LazyItemEvaluator<P, I, M, D> lazyEvaluator)
         {
-            if (condition?.Length == 0)
+            if (condition == null || condition.Length == 0)
             {
                 return true;
             }
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index cf6fc186770..eeb1f56b498 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -772,7 +772,7 @@ internal sealed class TaskItem :
             /// it is used to calculate built-in metadata. Otherwise,
             /// the current directory is used.
             /// </summary>
-            private string _projectDirectory;
+            private readonly string _projectDirectory;
 
             /// <summary>
             /// Whether the task item is immutable.
@@ -1504,13 +1504,13 @@ void ITranslatable.Translate(ITranslator translator)
                 translator.Translate(ref _itemDefinitions, ProjectItemDefinitionInstance.FactoryForDeserialization);
                 translator.TranslateDictionary(ref _directMetadata, ProjectMetadataInstance.FactoryForDeserialization);
 
-                if (_itemDefinitions?.Count == 0)
+                if (_itemDefinitions != null && _itemDefinitions.Count == 0)
                 {
                     // If there are no item definitions, toss the list.
                     _itemDefinitions = null;
                 }
 
-                if (_directMetadata?.Count == 0)
+                if (_directMetadata != null && _directMetadata.Count == 0)
                 {
                     // If there is no metadata, toss the dictionary.
                     _directMetadata = null;
@@ -1918,7 +1918,7 @@ internal class ProjectItemInstanceFactory : IItemFactory<ProjectItemInstance, Pr
                 /// <summary>
                 /// The project to which item instances created by this factory will belong.
                 /// </summary>
-                private ProjectInstance _project;
+                private readonly ProjectInstance _project;
 
                 /// <summary>
                 /// Constructor not taking an item type.
@@ -2063,7 +2063,7 @@ internal class TaskItemFactory : IItemFactory<ProjectItem, TaskItem>, IItemFacto
                 /// <summary>
                 /// The singleton instance.
                 /// </summary>
-                private static TaskItemFactory s_instance = new TaskItemFactory();
+                private static readonly TaskItemFactory s_instance = new TaskItemFactory();
 
                 /// <summary>
                 /// Private constructor for singleton creation.
@@ -2190,12 +2190,12 @@ private class BuiltInMetadataTable : IMetadataTable, IItemTypeDefinition
                 /// <summary>
                 /// Item type
                 /// </summary>
-                private string _itemType;
+                private readonly string _itemType;
 
                 /// <summary>
                 /// Backing item
                 /// </summary>
-                private TaskItem _item;
+                private readonly TaskItem _item;
 
                 /// <summary>
                 /// Constructor.
@@ -2256,7 +2256,7 @@ internal class ProjectItemInstanceEqualityComparer : IEqualityComparer<ProjectIt
             /// <summary>
             /// The singleton comparer.
             /// </summary>
-            private static ProjectItemInstanceEqualityComparer s_comparer = new ProjectItemInstanceEqualityComparer();
+            private static readonly ProjectItemInstanceEqualityComparer s_comparer = new ProjectItemInstanceEqualityComparer();
 
             /// <summary>
             /// Constructor.
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 9fc62d7b964..136c44cbc0d 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -192,7 +192,7 @@ private static string[] GetFileList(
 
             var filespecHasNoWildCards = !FilespecHasWildcards(filespecEscaped);
             var filespecMatchesLazyWildcard = FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards);
-            var excludeSpecsAreEmpty = excludeSpecsEscaped?.Any() != true;
+            var excludeSpecsAreEmpty = excludeSpecsEscaped == null || !excludeSpecsEscaped.Any();
 
             // Return original value if:
             //      FileSpec matches lazyloading regex or
diff --git a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
index dee78cabbf1..64fb2c8eee2 100644
--- a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
@@ -8,15 +8,15 @@
 using System;
 using System.Collections.Generic;
 using System.Configuration;
-using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
 using Microsoft.Build.BuildEngine.Shared;
+using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
 
 namespace Microsoft.Build.BuildEngine
 {
     internal class ToolsetConfigurationReader : ToolsetReader
     {
         private ToolsetConfigurationSection configurationSection = null;
-        private ReadApplicationConfiguration readApplicationConfiguration = null;
+        private readonly ReadApplicationConfiguration readApplicationConfiguration = null;
         private bool configurationReadAttempted = false;
 
         /// <summary>
@@ -55,7 +55,7 @@ protected override IEnumerable<PropertyDefinition> ToolsVersions
                                               toolset.ElementInformation.LineNumber
                                           );
 
-                        if (toolset.toolsVersion?.Length == 0)
+                        if (toolset.toolsVersion == null || toolset.toolsVersion.Length == 0)
                         {
                             InvalidToolsetDefinitionException.Throw("InvalidToolsetValueInConfigFileValue", location);
                         }
@@ -104,7 +104,7 @@ protected override IEnumerable<PropertyDefinition> GetPropertyDefinitions(string
                                       propertyElement.ElementInformation.LineNumber
                                   );
 
-                if (propertyElement.Name?.Length == 0)
+                if (propertyElement.Name == null || propertyElement.Name.Length == 0)
                 {
                     InvalidToolsetDefinitionException.Throw("InvalidToolsetValueInConfigFileValue", location);
                 }
@@ -248,7 +248,7 @@ internal sealed class ToolsetElementCollection : ConfigurationElementCollection
         /// toolset definition before, since the .NET configuration classes
         /// won't perform this check without respect for case.
         /// </summary>
-        private Dictionary<string, string> previouslySeenToolsVersions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+        private readonly Dictionary<string, string> previouslySeenToolsVersions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// Creates a new element of the collection
@@ -413,7 +413,7 @@ internal sealed class PropertyElementCollection : ConfigurationElementCollection
             /// property definition before, since the .NET configuration classes
             /// won't perform this check without respect for case.
             /// </summary>
-            private Dictionary<string, string> previouslySeenPropertyNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            private readonly Dictionary<string, string> previouslySeenPropertyNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
             /// <summary>
             /// Creates a new element
diff --git a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
index 1aca18c0ebd..7b6f495637a 100644
--- a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
@@ -33,7 +33,7 @@ internal class ToolsetRegistryReader : ToolsetReader
         private const string msbuildRegistryPath = @"SOFTWARE\Microsoft\MSBuild";
 
         // Cached registry wrapper at root of the msbuild entries
-        private RegistryKeyWrapper msbuildRegistryWrapper;
+        private readonly RegistryKeyWrapper msbuildRegistryWrapper;
 
         /// <summary>
         /// Default constructor
@@ -123,7 +123,7 @@ protected override IEnumerable<PropertyDefinition> GetPropertyDefinitions(string
             {
                 string propertyValue = null;
 
-                if (propertyName?.Length == 0)
+                if (propertyName == null || propertyName.Length == 0)
                 {
                     InvalidToolsetDefinitionException.Throw("PropertyNameInRegistryHasZeroLength", toolsVersionWrapper.Name);
                 }
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 269be983424..4749f333c5d 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -518,7 +518,7 @@ internal static void VerifyThrowArgumentLength<T>([NotNull] IReadOnlyCollection<
         /// </summary>
         internal static void VerifyThrowArgumentLengthIfNotNull<T>([MaybeNull] IReadOnlyCollection<T>? parameter, string parameterName)
         {
-            if (parameter?.Count == 0)
+            if (parameter == null || parameter.Count == 0)
             {
                 ThrowArgumentLength(parameterName);
             }
@@ -551,7 +551,7 @@ internal static void VerifyThrowArgumentInvalidPath([NotNull] string parameter,
         /// </summary>
         internal static void VerifyThrowArgumentLengthIfNotNull(string? parameter, string parameterName)
         {
-            if (parameter?.Length == 0)
+            if (parameter == null || parameter.Length == 0)
             {
                 ThrowArgumentLength(parameterName);
             }
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 479bd5ac67a..afea844df13 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -2552,7 +2552,7 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn
                 }
             }
 
-            if (searchesToExclude?.Count == 0)
+            if (searchesToExclude != null && searchesToExclude.Count == 0)
             {
                 searchesToExclude = null;
             }
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index 472d732a973..0d2456e0ede 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.Threading;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
@@ -12,7 +11,6 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -1667,7 +1665,7 @@ public void InvalidReference()
                 Assert.False(result);
 
                 // Should have not written any files
-                Assert.True(t.FilesWritten?.Length == 0);
+                Assert.True(t.FilesWritten == null || t.FilesWritten.Length == 0);
                 Assert.False(File.Exists(resourcesFile));
             }
             finally
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index a38fd0f4bbd..1fc0d6c58ac 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -11,12 +11,10 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
-using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using Xunit.NetCore.Extensions;
 
 #nullable disable
 
@@ -2149,7 +2147,7 @@ public void InvalidReference()
                 Assert.False(result);
 
                 // Should have not written any files
-                Assert.True(t.FilesWritten?.Length == 0);
+                Assert.True(t.FilesWritten == null || t.FilesWritten.Length == 0);
                 Assert.False(File.Exists(resourcesFile));
             }
             finally
diff --git a/src/Tasks/AssignProjectConfiguration.cs b/src/Tasks/AssignProjectConfiguration.cs
index ba5062c1ce5..f463d442769 100644
--- a/src/Tasks/AssignProjectConfiguration.cs
+++ b/src/Tasks/AssignProjectConfiguration.cs
@@ -45,7 +45,7 @@ public string DefaultToVcxPlatformMapping
             set
             {
                 _defaultToVcxPlatformMapping = value;
-                if (_defaultToVcxPlatformMapping?.Length == 0)
+                if (_defaultToVcxPlatformMapping != null && _defaultToVcxPlatformMapping.Length == 0)
                 {
                     _defaultToVcxPlatformMapping = null;
                 }
@@ -85,7 +85,7 @@ public string VcxToDefaultPlatformMapping
             {
                 _vcxToDefaultPlatformMapping = value;
 
-                if (_vcxToDefaultPlatformMapping?.Length == 0)
+                if (_vcxToDefaultPlatformMapping != null && _vcxToDefaultPlatformMapping.Length == 0)
                 {
                     _vcxToDefaultPlatformMapping = null;
                 }
