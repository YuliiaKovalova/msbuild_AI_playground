diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index bc35e8ce8b8..a359667d59d 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -39,7 +39,7 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
             {
                 ImmutableArray<I>.Builder? itemsToAdd = null;
 
-                Lazy<Func<string, bool>>? excludeTester = null;
+                Func<string, bool>? excludeTester = null;
                 ImmutableList<string>.Builder excludePatterns = ImmutableList.CreateBuilder<string>();
                 if (_excludes != null)
                 {
@@ -50,17 +50,17 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                         var excludeSplits = ExpressionShredder.SplitSemiColonSeparatedList(excludeExpanded);
                         excludePatterns.AddRange(excludeSplits);
                     }
-
-                    if (excludePatterns.Count > 0)
-                    {
-                        excludeTester = new Lazy<Func<string, bool>>(() => EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory));
-                    }
                 }
 
                 ISet<string>? excludePatternsForGlobs = null;
 
                 foreach (var fragment in _itemSpec.Fragments)
                 {
+                    if (excludeTester is null && excludePatterns.Count > 0)
+                    {
+                        excludeTester = EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory);
+                    }
+
                     if (fragment is ItemSpec<P, I>.ItemExpressionFragment itemReferenceFragment)
                     {
                         // STEP 3: If expression is "@(x)" copy specified list with its metadata, otherwise just treat as string
@@ -74,16 +74,27 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                             elementLocation: _itemElement.IncludeLocation);
 
                         itemsToAdd ??= ImmutableArray.CreateBuilder<I>();
-                        itemsToAdd.AddRange(
-                            excludeTester != null
-                                ? itemsFromExpression.Where(item => !excludeTester.Value(item.EvaluatedInclude))
-                                : itemsFromExpression);
+
+                        if (excludeTester is not null)
+                        {
+                            foreach (var item in itemsFromExpression)
+                            {
+                                if (!excludeTester(item.EvaluatedInclude))
+                                {
+                                    itemsToAdd.Add(item);
+                                }
+                            }
+                        }
+                        else
+                        {
+                            itemsToAdd.AddRange(itemsFromExpression);
+                        }
                     }
                     else if (fragment is ValueFragment valueFragment)
                     {
                         string value = valueFragment.TextFragment;
 
-                        if (excludeTester?.Value(EscapingUtilities.UnescapeAll(value)) != true)
+                        if (excludeTester is not null && !excludeTester(EscapingUtilities.UnescapeAll(value)))
                         {
                             itemsToAdd ??= ImmutableArray.CreateBuilder<I>();
                             itemsToAdd.Add(_itemFactory.CreateItem(value, value, _itemElement.ContainingProject.FullPath));
