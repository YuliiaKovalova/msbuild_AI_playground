diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 52e9866dbf1..ef42f9fe895 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -331,10 +331,7 @@ public void SubmitBuildRequest(BuildRequest request)
                         // Grab the results from the requested configuration
                         IResultsCache cache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
                         BuildResult result = cache.GetResultsForConfiguration(request.ConfigurationId);
-                        BuildResult resultToReport = new BuildResult(request, result, null)
-                        {
-                            BuildRequestDataFlags = request.BuildRequestDataFlags,
-                        };
+                        BuildResult resultToReport = new BuildResult(request, result, null);
                         BuildRequestConfiguration config = ((IConfigCache)_componentHost.GetComponent(BuildComponentType.ConfigCache))[request.ConfigurationId];
 
                         // Retrieve the config if it has been cached, since this would contain our instance data.  It is safe to do this outside of a lock
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index dbcb732750a..04a546b936c 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -163,15 +163,16 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                 if (_resultsByConfiguration.TryGetValue(request.ConfigurationId, out BuildResult allResults))
                 {
                     // Check for targets explicitly specified.
-                    bool explicitTargetsSatisfied = CheckResults(request.BuildRequestDataFlags, allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);
+                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);
+                    bool buildDataFlagsSatisfied = CheckBuildDataFlagsResults(request.BuildRequestDataFlags, allResults.BuildRequestDataFlags);
 
-                    if (explicitTargetsSatisfied)
+                    if (explicitTargetsSatisfied && buildDataFlagsSatisfied)
                     {
                         // All of the explicit targets, if any, have been satisfied
                         response.Type = ResultsCacheResponseType.Satisfied;
 
                         // Check for the initial targets.  If we don't know what the initial targets are, we assume they are not satisfied.
-                        if (configInitialTargets == null || !CheckResults(request.BuildRequestDataFlags, allResults, configInitialTargets, null, skippedResultsDoNotCauseCacheMiss))
+                        if (configInitialTargets == null || !CheckResults(allResults, configInitialTargets, null, skippedResultsDoNotCauseCacheMiss))
                         {
                             response.Type = ResultsCacheResponseType.NotSatisfied;
                         }
@@ -181,7 +182,7 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co
                         {
                             // Check for the default target, if necessary.  If we don't know what the default targets are, we
                             // assume they are not satisfied.
-                            if (configDefaultTargets == null || !CheckResults(request.BuildRequestDataFlags, allResults, configDefaultTargets, null, skippedResultsDoNotCauseCacheMiss))
+                            if (configDefaultTargets == null || !CheckResults(allResults, configDefaultTargets, null, skippedResultsDoNotCauseCacheMiss))
                             {
                                 response.Type = ResultsCacheResponseType.NotSatisfied;
                             }
@@ -295,21 +296,18 @@ internal static IBuildComponent CreateComponent(BuildComponentType componentType
         /// <summary>
         /// Looks for results for the specified targets.
         /// </summary>
-        /// <param name="buildRequestDataFlags">The current request build flags.</param>
         /// <param name="result">The result to examine</param>
         /// <param name="targets">The targets to search for</param>
         /// <param name="targetsMissingResults">An optional list to be populated with missing targets</param>
         /// <param name="skippedResultsAreOK">If true, a status of "skipped" counts as having valid results 
         /// for that target.  Otherwise, a skipped target is treated as equivalent to a missing target.</param>
         /// <returns>False if there were missing results, true otherwise.</returns>
-        private static bool CheckResults(BuildRequestDataFlags buildRequestDataFlags, BuildResult result, List<string> targets, HashSet<string> targetsMissingResults, bool skippedResultsAreOK)
+        private static bool CheckResults(BuildResult result, List<string> targets, HashSet<string> targetsMissingResults, bool skippedResultsAreOK)
         {
             bool returnValue = true;
             foreach (string target in targets)
             {
-                if (!result.HasResultsForTarget(target)
-                    || (result[target].ResultCode == TargetResultCode.Skipped && !skippedResultsAreOK)
-                    || result.BuildRequestDataFlags != buildRequestDataFlags)
+                if (!result.HasResultsForTarget(target) || (result[target].ResultCode == TargetResultCode.Skipped && !skippedResultsAreOK))
                 {
                     if (targetsMissingResults != null)
                     {
@@ -335,6 +333,15 @@ private static bool CheckResults(BuildRequestDataFlags buildRequestDataFlags, Bu
             return returnValue;
         }
 
+        /// <summary>
+        /// Checks results for the specified build flags.
+        /// </summary>
+        /// <param name="buildRequestDataFlags">The current request build flags.</param>
+        /// <param name="buildResultDataFlags">The existing build result data flags.</param>
+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>
+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>
+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;
+
         public IEnumerator<BuildResult> GetEnumerator()
         {
             return _resultsByConfiguration.Values.GetEnumerator();
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 6bf8c8a627e..38811e87f02 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -204,6 +204,7 @@ internal BuildResult(BuildRequest request, BuildResult existingResults, string[]
             _nodeRequestId = request.NodeRequestId;
             _circularDependency = false;
             _baseOverallResult = true;
+            BuildRequestDataFlags = request.BuildRequestDataFlags;
 
             if (existingResults == null)
             {
@@ -384,7 +385,7 @@ public ProjectInstance ProjectStateAfterBuild
         /// Gets or sets the flags that provide additional control over the build request.
         /// See <see cref="Execution.BuildRequestDataFlags"/> for examples of the available flags.
         /// </summary>
-        public BuildRequestDataFlags BuildRequestDataFlags { get; set; }
+        public BuildRequestDataFlags BuildRequestDataFlags { get; }
 
         /// <summary>
         /// Returns the node packet type.
