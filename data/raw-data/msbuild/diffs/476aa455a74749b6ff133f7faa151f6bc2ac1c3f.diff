diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index de1913f7440..1329988f9cb 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -103,6 +103,8 @@ public enum ProjectImportsCollectionMode
 
         private string FilePath { get; set; }
 
+        public BinaryLoggerParameters BinaryLoggerParameters { private get; set; }
+
         /// <summary>
         /// Boolean flag identifies if the log file was provided from parameters
         /// </summary>
@@ -115,18 +117,8 @@ public enum ProjectImportsCollectionMode
         /// </remarks>
         public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Diagnostic;
 
-        /// <summary>
-        /// Gets or sets the parameters
-        /// </summary>
-        public string BLParameters { get; set; }
-
-        /// <summary>
-        /// Gets or sets the parameters. The only supported parameter is the output log file path (for example, "msbuild.binlog").
-        /// </summary>
         public string Parameters { get; set; }
 
-        public string InitProjectFile { get; set; }
-
         /// <summary>
         /// Initializes the logger by subscribing to events of the specified event source.
         /// </summary>
@@ -335,6 +327,11 @@ private void CollectImports(BuildEventArgs e)
         /// </exception>
         private void ProcessParameters()
         {
+            if (BinaryLoggerParameters is null)
+            {
+                throw new LoggerException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidBinaryLoggerParameters", ""));
+            }
+
             AttachBLArguments();
             AttachBLParameters();
         }
@@ -352,7 +349,8 @@ private void UpdateFilePathBaseodOnParameters()
                     throw new LoggerException("Incompatible configuration provided");
                 }
 
-                FilePath = InitProjectFile + "." + DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()  + ".binlog";
+                var initProjectFilename = Path.GetFileName(BinaryLoggerParameters.InitProjectFile);
+                FilePath = initProjectFilename + "." + DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()  + ".binlog";
             }
             else
             {
@@ -364,7 +362,6 @@ private void UpdateFilePathBaseodOnParameters()
 
             KnownTelemetry.LoggingConfigurationTelemetry.BinaryLoggerUsedDefaultName = FilePath == "msbuild.binlog";
 
-
             try
             {
                 FilePath = Path.GetFullPath(FilePath);
@@ -385,12 +382,12 @@ private void UpdateFilePathBaseodOnParameters()
         /// <exception cref="LoggerException"></exception>
         private void AttachBLArguments()
         {
-            if (Parameters == null)
+            if (string.IsNullOrEmpty(BinaryLoggerParameters.binaryLoggerArguments))
             {
-                throw new LoggerException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("InvalidBinaryLoggerParameters", ""));
+                return;
             }
 
-            var parameters = Parameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+            var parameters = BinaryLoggerParameters.binaryLoggerArguments.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
 
             foreach (var parameter in parameters)
             {
@@ -430,12 +427,12 @@ private void AttachBLArguments()
         /// <exception cref="LoggerException"></exception>
         private void AttachBLParameters()
         {
-            if (BLParameters == null)
+            if (string.IsNullOrEmpty(BinaryLoggerParameters.binaryLoggerParameters))
             {
                 return;
             }
 
-            var parameters = BLParameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+            var parameters = BinaryLoggerParameters.binaryLoggerParameters.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
             foreach (var parameter in parameters)
             {
                 if (parameter.Length > 0)
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index 65bda90e64a..ce85492e9f9 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -9,11 +9,37 @@
 
 namespace Microsoft.Build.Logging
 {
-    internal class BinaryLoggerParameters
+    public class BinaryLoggerParameters
     {
-        public string[] binaryLoggerArguments;
+        public string binaryLoggerArguments { get; private set; }
 
-        public string[] binaryLoggerParameters;
+        public string binaryLoggerParameters { get; private set; }
 
+        public BinaryLoggerParameters(string[] binaryLoggerArguments, string[] binaryLoggerParameters)
+        {
+            this.binaryLoggerArguments = GetLastArgumentPart(binaryLoggerArguments);
+            this.binaryLoggerParameters = GetLastArgumentPart(binaryLoggerParameters);
+        }
+
+        public bool isBinaryLoggerSet { get; set; }
+
+        public string InitProjectFile { get; set; } = string.Empty;
+
+
+        /// <summary>
+        /// Gets the last argument from the provided array.
+        /// If the array is empty returns empty string
+        /// </summary>
+        /// <param name="arguments"></param>
+        /// <returns></returns>
+        private string GetLastArgumentPart(string[] arguments)
+        {
+            string result = string.Empty;
+            if (arguments != null && arguments.Length > 0)
+            {
+                result = arguments[arguments.Length - 1];
+            }
+            return result;
+        }
     }
 }
diff --git a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
index 21271e12fb0..67b1d939f93 100644
--- a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -68,7 +68,7 @@ private void ParseFileLoggerParameters()
         /// </summary>
         private void ApplyFileLoggerParameter(string parameterName, string parameterValue)
         {
-            if (String.Equals("LOGFILE", parameterName, StringComparison.OrdinalIgnoreCase))
+            if (string.Equals("LOGFILE", parameterName, StringComparison.OrdinalIgnoreCase))
             {
                 if (string.IsNullOrEmpty(parameterValue))
                 {
@@ -104,7 +104,7 @@ public void Initialize(IEventSource eventSource)
                 _nodeFileLogger = new FileLogger();
                 string extension = Path.GetExtension(_logFile);
                 // If there is no extension add a default of .log to it
-                if (String.IsNullOrEmpty(extension))
+                if (string.IsNullOrEmpty(extension))
                 {
                     _logFile += ".log";
                     extension = ".log";
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 5d20b948aa0..cf3e66daace 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1982,7 +1982,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
                             }
                         }
 
-                        // Special case: for the switches "/m" (or "/maxCpuCount") and "/bl" (or "/binarylogger") we wish to pretend we saw a default argument
+                        // Special case: for the switches "/m" (or "/maxCpuCount") and "/prof" (or "/profileevaluation") we wish to pretend we saw a default argument
                         // This allows a subsequent /m:n on the command line to override it.
                         // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case.
                         // Note that if no "/m" or "/maxCpuCount" switch -- either with or without parameters -- is present, then we still default to 1 cpu
@@ -2630,9 +2630,15 @@ private static bool ProcessCommandLineSwitches(
                     // figure out which loggers are going to listen to build events
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
-                    // TODO: update to pass a class of binary log parameters aggreated all in one
+                    var binaryLoggerParameters = new BinaryLoggerParameters(
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
+                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters])
+                    {
+                        isBinaryLoggerSet = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
+                        InitProjectFile = projectFile
+                    };
+
                     loggers = ProcessLoggingSwitches(
-                        projectFile,
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Logger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.DistributedLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
@@ -2642,9 +2648,7 @@ private static bool ProcessCommandLineSwitches(
                         aggregatedTerminalLoggerParameters,
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.FileLoggerParameters], // used by DistributedFileLogger
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters],
-                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
-                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters],
-                        commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
+                        binaryLoggerParameters,
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
                         groupedFileLoggerParameters,
                         getProperty.Length + getItem.Length + getTargetResult.Length > 0,
@@ -3646,7 +3650,6 @@ internal static Dictionary<string, string> ProcessPropertySwitch(string[] parame
         /// </summary>
         /// <returns>List of loggers.</returns>
         private static ILogger[] ProcessLoggingSwitches(
-            string startFile,
             string[] loggerSwitchParameters,
             string[] distributedLoggerSwitchParameters,
             string[] verbositySwitchParameters,
@@ -3656,9 +3659,7 @@ private static ILogger[] ProcessLoggingSwitches(
             string aggregatedTerminalLoggerParameters,
             string[] fileLoggerParameters,
             string[] consoleLoggerParameters,
-            string[] binaryLoggerArguments,
-            string[] binaryLoggerParameters,
-            bool isBinaryLoggerWasSet,
+            BinaryLoggerParameters binaryLoggerParameters,
             string[] profileEvaluationParameters,
             string[][] groupedFileLoggerParameters,
             bool useSimpleErrorLogger,
@@ -3683,7 +3684,8 @@ private static ILogger[] ProcessLoggingSwitches(
 
             var outVerbosity = verbosity;
 
-            ProcessBinaryLogger(isBinaryLoggerWasSet, startFile, binaryLoggerArguments, binaryLoggerParameters, loggers, ref outVerbosity);
+            // move to binary logger parameters
+            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref outVerbosity);
 
             // When returning the result of evaluation from the command line, do not use custom loggers.
             if (!useSimpleErrorLogger)
@@ -3807,29 +3809,15 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
             }
         }
 
-        private static void ProcessBinaryLogger(bool isBinaryLoggerWasSet, string startFile, string[] binaryLoggerArguments, string[] binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
+        private static void ProcessBinaryLogger(BinaryLoggerParameters binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
         {
-            if (!isBinaryLoggerWasSet)
+            if (!binaryLoggerParameters.isBinaryLoggerSet)
             {
                 return;
             }
 
-            string arguments = string.Empty;
-            if (binaryLoggerArguments.Length > 0)
-            {
-                arguments = binaryLoggerArguments[binaryLoggerArguments.Length - 1];
-            }
-
-            string parameters = null;
-            if (binaryLoggerParameters != null && binaryLoggerParameters.Length > 0)
-            {
-                parameters = binaryLoggerParameters[binaryLoggerParameters.Length - 1];
-            }
-
-            var filenameExample = Path.GetFileName(startFile);
-
             // arguments
-            BinaryLogger logger = new BinaryLogger { Parameters = arguments, BLParameters = parameters, InitProjectFile = filenameExample };
+            BinaryLogger logger = new BinaryLogger { BinaryLoggerParameters = binaryLoggerParameters };
 
             // If we have a binary logger, force verbosity to diagnostic.
             // The only place where verbosity is used downstream is to determine whether to log task inputs.
