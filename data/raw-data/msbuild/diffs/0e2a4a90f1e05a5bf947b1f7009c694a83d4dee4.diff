diff --git a/src/Tasks/ManifestUtil/ApplicationManifest.cs b/src/Tasks/ManifestUtil/ApplicationManifest.cs
index 228d7f70fe4..955ff8dd287 100644
--- a/src/Tasks/ManifestUtil/ApplicationManifest.cs
+++ b/src/Tasks/ManifestUtil/ApplicationManifest.cs
@@ -527,9 +527,13 @@ private void ValidateConfig()
             if (!TrustInfo.IsFullTrust)
             {
                 var document = new XmlDocument();
-                var xrs = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
-                FileStream fs = File.OpenRead(configFile.ResolvedPath);
-                using (XmlReader xr = XmlReader.Create(fs, xrs))
+                var xrs = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+                //
+                // XmlReader.Create(string, ...) treats the first parameter as a Uri and escapes GB18030 chars in PUA block.
+                // In order to open such files, we use StreamReader and pass that to pass that to XmlReader.Create
+                //
+                using (StreamReader sr = new StreamReader(configFile.ResolvedPath))
+                using (XmlReader xr = XmlReader.Create(sr, xrs))
                 {
                     document.Load(xr);
                 }
diff --git a/src/Tasks/ManifestUtil/AssemblyIdentity.cs b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
index bd2716e8f49..0acaccf2647 100644
--- a/src/Tasks/ManifestUtil/AssemblyIdentity.cs
+++ b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
@@ -193,9 +193,13 @@ public static AssemblyIdentity FromManifest(string path)
             var document = new XmlDocument();
             try
             {
-                var readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
-                FileStream fs = File.OpenRead(path);
-                using (XmlReader xmlReader = XmlReader.Create(fs, readerSettings))
+                var readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+                //
+                // XmlReader.Create(string, ...) treats the first parameter as a Uri and escapes GB18030 chars in PUA block.
+                // In order to open such files, we use StreamReader and pass that to pass that to XmlReader.Create
+                //
+                using (StreamReader sr = new StreamReader(path))
+                using (XmlReader xmlReader = XmlReader.Create(sr, readerSettings))
                 {
                     document.Load(xmlReader);
                 }
diff --git a/src/Tasks/ManifestUtil/DeployManifest.cs b/src/Tasks/ManifestUtil/DeployManifest.cs
index be7ce4a1d6c..03d2ebbae42 100644
--- a/src/Tasks/ManifestUtil/DeployManifest.cs
+++ b/src/Tasks/ManifestUtil/DeployManifest.cs
@@ -213,9 +213,13 @@ private static string GetInstallableFramework(string redistListFilePath)
             try
             {
                 var doc = new XmlDocument();
-                var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
-                FileStream fs = File.OpenRead(redistListFilePath);
-                using (XmlReader xr = XmlReader.Create(fs, xrSettings))
+                var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+                //
+                // XmlReader.Create(string, ...) treats the first parameter as a Uri and escapes GB18030 chars in PUA block.
+                // In order to open such files, we use StreamReader and pass that to pass that to XmlReader.Create
+                //
+                using (StreamReader sr = new StreamReader(redistListFilePath))
+                using (XmlReader xr = XmlReader.Create(sr, xrSettings))
                 {
                     doc.Load(xr);
                     XmlNode fileListNode = doc.DocumentElement;
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index 629fcb877e0..1619093fd43 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -376,9 +376,13 @@ internal bool TreatUnfoundNativeAssembliesAsPrerequisites
         internal static void UpdateEntryPoint(string inputPath, string outputPath, string updatedApplicationPath, string applicationManifestPath, string targetFrameworkVersion)
         {
             var document = new XmlDocument();
-            var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
-            FileStream fs = File.OpenRead(inputPath);
-            using (XmlReader xr = XmlReader.Create(fs, xrSettings))
+            var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+            //
+            // XmlReader.Create(string, ...) treats the first parameter as a Uri and escapes GB18030 chars in PUA block.
+            // In order to open such files, we use StreamReader and pass that to pass that to XmlReader.Create
+            //
+            using (StreamReader sr = new StreamReader(inputPath))
+            using (XmlReader xr = XmlReader.Create(sr, xrSettings))
             {
                 document.Load(xr);
             }
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index 3ff93e72a18..bff16153510 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -694,10 +694,13 @@ private static void SignFileInternal(X509Certificate2 cert,
                     try
                     {
                         var doc = new XmlDocument { PreserveWhitespace = true };
-                        var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
-                        FileStream fs = File.OpenRead(path);
-
-                        using (XmlReader xr = XmlReader.Create(fs, xrSettings))
+                        var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
+                        //
+                        // XmlReader.Create(string, ...) treats the first parameter as a Uri and escapes GB18030 chars in PUA block.
+                        // In order to open such files, we use StreamReader and pass that to pass that to XmlReader.Create
+                        //
+                        using (StreamReader sr = new StreamReader(path))
+                        using (XmlReader xr = XmlReader.Create(sr, xrSettings))
                         {
                             doc.Load(xr);
                         }
