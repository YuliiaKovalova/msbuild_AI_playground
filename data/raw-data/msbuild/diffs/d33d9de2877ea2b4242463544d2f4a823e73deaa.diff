diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index 2ef70fe3198..8f4a793b8ee 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -17,13 +17,14 @@ namespace Microsoft.Build.Logging.SimpleErrorLogger
     /// Users still might want diagnostic information if something goes wrong, so still
     /// output that as necessary.
     /// </summary>
-    public class SimpleErrorLogger : INodeLogger
+    public sealed class SimpleErrorLogger : INodeLogger
     {
-        public bool hasLoggedErrors = false;
         public SimpleErrorLogger()
         {
         }
 
+        public bool HasLoggedErrors { get; private set; } = false;
+
         public LoggerVerbosity Verbosity
         {
             get => LoggerVerbosity.Minimal;
@@ -44,7 +45,7 @@ public void Initialize(IEventSource eventSource, int nodeCount)
 
         private void HandleErrorEvent(object sender, BuildErrorEventArgs e)
         {
-            hasLoggedErrors = true;
+            HasLoggedErrors = true;
             Console.Error.Write("\x1b[31;1m");
             Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
             Console.Error.WriteLine("\x1b[m");
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index bd9a481327e..9bf15c33695 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1107,7 +1107,7 @@ public void InvalidToolsVersionErrors()
                                         question: false,
                                         inputResultsCaches: null,
                                         outputResultsCache: null,
-                                        saveProject: false,
+                                        saveProjectResult: false,
                                         ref buildResult,
                                         commandLine: null);
                 }
diff --git a/src/MSBuild/JsonOutputFormatter.cs b/src/MSBuild/JsonOutputFormatter.cs
index 1a9f075ca25..aa57a67d6d7 100644
--- a/src/MSBuild/JsonOutputFormatter.cs
+++ b/src/MSBuild/JsonOutputFormatter.cs
@@ -11,14 +11,18 @@
 
 namespace Microsoft.Build.CommandLine
 {
-    internal class JsonOutputFormatter
+    /// <summary>
+    /// This class is intended to take in names of properties, items, and/or target results and some means of computing
+    /// those data, then format them in a json object and provide a convenient means to stringify them.
+    /// </summary>
+    internal sealed class JsonOutputFormatter
     {
-        private static readonly JsonSerializerOptions Options = new() { AllowTrailingCommas = false, WriteIndented = true };
+        private static readonly JsonSerializerOptions s_options = new() { AllowTrailingCommas = false, WriteIndented = true };
         private readonly JsonNode _topLevelNode = new JsonObject();
 
         public override string ToString()
         {
-            return _topLevelNode.ToJsonString(Options);
+            return _topLevelNode.ToJsonString(s_options);
         }
 
         internal void AddPropertiesInJsonFormat(string[] propertyNames, Func<string, string> getProperty)
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index a4356612938..67f16318c55 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -32,6 +32,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
+using static Microsoft.Build.CommandLine.MSBuildApp;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 using ConsoleLogger = Microsoft.Build.Logging.ConsoleLogger;
 using FileLogger = Microsoft.Build.Logging.FileLogger;
@@ -799,32 +801,7 @@ public static ExitType Execute(
                     }
                     else if ((getProperty.Length > 0 || getItem.Length > 0) && (targets is null || targets.Length == 0))
                     {
-                        try
-                        {
-                            Project project = Project.FromFile(projectFile, new Definition.ProjectOptions()
-                            {
-                                GlobalProperties = globalProperties,
-                                ToolsVersion = toolsVersion,
-                            });
-
-                            // Special case if the user requests exactly one property: skip json formatting
-                            if (getProperty.Length == 1 && getItem.Length == 0)
-                            {
-                                Console.WriteLine(project.GetPropertyValue(getProperty[0]));
-                            }
-                            else
-                            {
-                                JsonOutputFormatter jsonOutputFormatter = new();
-                                jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
-                                jsonOutputFormatter.AddItemsInJsonFormat(getItem, project);
-                                Console.WriteLine(jsonOutputFormatter.ToString());
-                            }
-                        }
-                        catch (InvalidProjectFileException e)
-                        {
-                            exitType = ExitType.BuildError;
-                            Console.Error.WriteLine(e.Message);
-                        }
+                        exitType = OutputPropertiesAfterEvaluation(getProperty, getItem, projectFile, globalProperties, toolsVersion);
                     }
                     else // regular build
                     {
@@ -860,7 +837,7 @@ public static ExitType Execute(
                                     question,
                                     inputResultsCaches,
                                     outputResultsCache,
-                                    saveProject: getProperty.Length > 0 || getItem.Length > 0 || getTargetResult.Length > 0,
+                                    saveProjectResult: getProperty.Length > 0 || getItem.Length > 0 || getTargetResult.Length > 0,
                                     ref result,
                                     commandLine))
                         {
@@ -876,32 +853,7 @@ public static ExitType Execute(
 
                     if ((getProperty.Length > 0 || getItem.Length > 0 || getTargetResult.Length > 0) && targets?.Length > 0 && result is not null)
                     {
-                        ProjectInstance builtProject = result.ProjectStateAfterBuild;
-
-                        ILogger logger = loggers.FirstOrDefault(l => l is SimpleErrorLogger);
-                        if (logger is not null)
-                        {
-                            exitType = exitType == ExitType.Success && (logger as SimpleErrorLogger).hasLoggedErrors ? ExitType.BuildError : exitType;
-                        }
-
-                        if (builtProject is null)
-                        {
-                            // Build failed; do not proceed
-                            Console.Error.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildFailedWithPropertiesItemsOrTargetResultsRequested"));
-                        }
-                        // Special case if the user requests exactly one property: skip the json formatting
-                        else if (getProperty.Length == 1 && getItem.Length == 0 && getTargetResult.Length == 0)
-                        {
-                            Console.WriteLine(builtProject.GetPropertyValue(getProperty[0]));
-                        }
-                        else
-                        {
-                            JsonOutputFormatter jsonOutputFormatter = new();
-                            jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => builtProject.GetPropertyValue(property));
-                            jsonOutputFormatter.AddItemInstancesInJsonFormat(getItem, builtProject);
-                            jsonOutputFormatter.AddTargetResultsInJsonFormat(getTargetResult, result);
-                            Console.WriteLine(jsonOutputFormatter.ToString());
-                        }
+                        exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType);
                     }
 
                     if (!string.IsNullOrEmpty(timerOutputFilename))
@@ -1061,6 +1013,70 @@ public static ExitType Execute(
             return exitType;
         }
 
+        private static ExitType OutputPropertiesAfterEvaluation(string[] getProperty, string[] getItem, string projectFile, Dictionary<string, string> globalProperties, string toolsVersion)
+        {
+            try
+            {
+                Project project = Project.FromFile(projectFile, new Definition.ProjectOptions()
+                {
+                    GlobalProperties = globalProperties,
+                    ToolsVersion = toolsVersion,
+                });
+
+                // Special case if the user requests exactly one property: skip json formatting
+                if (getProperty.Length == 1 && getItem.Length == 0)
+                {
+                    Console.WriteLine(project.GetPropertyValue(getProperty[0]));
+                }
+                else
+                {
+                    JsonOutputFormatter jsonOutputFormatter = new();
+                    jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => project.GetPropertyValue(property));
+                    jsonOutputFormatter.AddItemsInJsonFormat(getItem, project);
+                    Console.WriteLine(jsonOutputFormatter.ToString());
+                }
+
+                return ExitType.Success;
+            }
+            catch (InvalidProjectFileException e)
+            {
+                Console.Error.WriteLine(e.Message);
+                return ExitType.BuildError;
+            }
+        }
+
+        private static ExitType OutputBuildInformationInJson(BuildResult result, string[] getProperty, string[] getItem, string[] getTargetResult, ILogger[] loggers, ExitType exitType)
+        {
+            ProjectInstance builtProject = result.ProjectStateAfterBuild;
+
+            ILogger logger = loggers.FirstOrDefault(l => l is SimpleErrorLogger);
+            if (logger is not null)
+            {
+                exitType = exitType == ExitType.Success && (logger as SimpleErrorLogger).HasLoggedErrors ? ExitType.BuildError : exitType;
+            }
+
+            if (builtProject is null)
+            {
+                // Build failed; do not proceed
+                Console.Error.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildFailedWithPropertiesItemsOrTargetResultsRequested"));
+            }
+            // Special case if the user requests exactly one property: skip the json formatting
+            else if (getProperty.Length == 1 && getItem.Length == 0 && getTargetResult.Length == 0)
+            {
+                Console.WriteLine(builtProject.GetPropertyValue(getProperty[0]));
+            }
+            else
+            {
+                JsonOutputFormatter jsonOutputFormatter = new();
+                jsonOutputFormatter.AddPropertiesInJsonFormat(getProperty, property => builtProject.GetPropertyValue(property));
+                jsonOutputFormatter.AddItemInstancesInJsonFormat(getItem, builtProject);
+                jsonOutputFormatter.AddTargetResultsInJsonFormat(getTargetResult, result);
+                Console.WriteLine(jsonOutputFormatter.ToString());
+            }
+
+            return exitType;
+        }
+
         /// <summary>
         /// Handler for when CTRL-C or CTRL-BREAK is called.
         /// CTRL-BREAK means "die immediately"
@@ -1213,7 +1229,7 @@ internal static bool BuildProject(
             bool question,
             string[] inputResultsCaches,
             string outputResultsCache,
-            bool saveProject,
+            bool saveProjectResult,
             ref BuildResult result,
 #if FEATURE_GET_COMMANDLINE
             string commandLine)
@@ -1486,7 +1502,7 @@ internal static bool BuildProject(
                                 // to the BuildResult passed back at the end of the build. This can then be used to find the value of properties, items, etc. after the
                                 // build is complete.
                                 BuildRequestDataFlags flags = BuildRequestDataFlags.None;
-                                if (saveProject)
+                                if (saveProjectResult)
                                 {
                                     flags |= BuildRequestDataFlags.ProvideProjectStateAfterBuild;
                                 }
