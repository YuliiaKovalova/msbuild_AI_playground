diff --git a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
new file mode 100644
index 00000000000..2f1fc8ce362
--- /dev/null
+++ b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
@@ -0,0 +1,331 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable enable
+using System;
+using Microsoft.Build.BackEnd.Logging;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    public class ConsoleOutputAlignerTests
+    {
+        [Theory]
+        [InlineData("a", true)]
+        [InlineData("a", false)]
+        [InlineData("12345", true)]
+        [InlineData("12345", false)]
+        public void IndentBiggerThanBuffer_IndentedAndNotAligned(string input, bool aligned)
+        {
+            string indent = "    ";
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: aligned);
+
+            string output = aligner.AlignConsoleOutput(message:input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
+
+            output.ShouldBe(indent + input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("a")]
+        [InlineData("12345")]
+        public void NoAlignNoIndent_NotAlignedEvenIfBiggerThanBuffer(string input)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: false);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData(1)]
+        [InlineData(1000)]
+        public void NoBufferWidthNoIndent_NotAligned(int sizeOfMessage)
+        {
+            string input = new string('.', sizeOfMessage);
+            var aligner = new ConsoleOutputAligner(bufferWidth: -1, alignMessages: false);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("a")]
+        [InlineData("12345")]
+        public void WithoutBufferWidthWithoutIndentWithAlign_NotIndentedAndNotAligned(string input)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: -1, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("a")]
+        [InlineData("12345")]
+        public void NoAlignPrefixAlreadyWritten_NotChanged(string input)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 10, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("",   "123")]
+        [InlineData(" ",  "12")]
+        [InlineData("  ", "1")]
+        public void SmallerThanBuffer_NotAligned(string indent, string input)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
+
+            output.ShouldBe(indent + input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "1234", "123", "4")]
+        [InlineData(" ", "123", " 12", " 3")]
+        [InlineData("  ", "12", "  1", "  2")]
+        public void BiggerThanBuffer_AlignedWithIndent(string indent, string input, string expected1stLine, string expected2ndLine)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
+
+            output.ShouldBe(expected1stLine + Environment.NewLine + expected2ndLine + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "12345678", "123\n" +
+                                    "456\n" +
+                                    "78\n")]
+        [InlineData(" ", "12345678", " 12\n" +
+                                     " 34\n" +
+                                     " 56\n" +
+                                     " 78\n" )]
+        [InlineData("  ", "1234", "  1\n" +
+                                  "  2\n" +
+                                  "  3\n" +
+                                  "  4\n")]
+        public void XTimesBiggerThanBuffer_AlignedToMultipleLines(string indent, string input, string expected)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
+
+            output.ShouldBe(expected.Replace("\n", Environment.NewLine));
+        }
+
+
+        [Theory]
+        [InlineData("", "1234", "123", "4")]
+        [InlineData(" ", "123", "12", " 3")]
+        [InlineData("  ", "12", "1", "  2")]
+        public void BiggerThanBufferWithPrefixAlreadyWritten_AlignedWithIndentFromSecondLine(string indent, string input, string expected1stLine, string expected2ndLine)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: indent.Length);
+
+            output.ShouldBe(expected1stLine + Environment.NewLine + expected2ndLine + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("a\nb")]
+        [InlineData("12345\n54321")]
+        [InlineData("\t12345\n\t54321")]
+        public void MultiLineWithoutAlign_NoChange(string input)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: false);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("a\nb")]
+        [InlineData("123456789\n987654321")]
+        [InlineData("\t1\n9\t1")]
+        public void ShortMultiLineWithAlign_NoChange(string input)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: 10, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "a\n12345", "a\n123\n45\n")]
+        [InlineData("", "12345\na\n54321", "123\n45\na\n543\n21\n")]
+        [InlineData(" ", "12345\na\n54321", "12\n 34\n 5\n a\n 54\n 32\n 1\n")]
+        public void MultiLineWithPrefixAlreadyWritten(string prefix, string input, string expected)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            expected = expected.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: prefix.Length);
+
+            output.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData(" ", "a\n12345", " a\n 12\n 34\n 5\n")]
+        [InlineData(" ", "12345\na\n54321", " 12\n 34\n 5\n a\n 54\n 32\n 1\n")]
+        public void MultiLineWithoutPrefixAlreadyWritten(string prefix, string input, string expected)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            expected = expected.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: prefix.Length);
+
+            output.ShouldBe(expected);
+        }
+
+        [Theory]
+        [InlineData("\t")]
+        [InlineData("a\nb\tc\nd")]
+        public void ShortTextWithTabs_NoChange(string input)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: 50, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: 0);
+
+            output.ShouldBe(input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "\t", 7, false)]
+        [InlineData("", "12345678\t", 15, false)]
+        [InlineData(" ", "2345678\t", 15, false)]
+        [InlineData(" ", "2345678\t", 15, true)]
+        public void LastTabOverLimit_NoChange(string prefix, string input, int bufferWidthWithoutNewLine, bool prefixAlreadyWritten)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: bufferWidthWithoutNewLine + 1, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: prefixAlreadyWritten, prefixWidth: prefix.Length);
+
+            output.ShouldBe((prefixAlreadyWritten ? string.Empty : prefix) + input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "\t", 8, false)]
+        [InlineData("", "12345678\t", 16, false)]
+        [InlineData(" ", "2345678\t", 16, false)]
+        [InlineData(" ", "2345678\t", 16, true)]
+        public void LastTabAtLimit_NoChange(string prefix, string input, int bufferWidthWithoutNewLine, bool prefixAlreadyWritten)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: bufferWidthWithoutNewLine + 1, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: prefixAlreadyWritten, prefixWidth: prefix.Length);
+
+            output.ShouldBe((prefixAlreadyWritten ? string.Empty : prefix) + input + Environment.NewLine);
+        }
+
+        [Theory]
+        [InlineData("", "\t", 8, false)]
+        [InlineData("", "12345678\t", 16, false)]
+        [InlineData(" ", "2345678\t", 16, false)]
+        [InlineData(" ", "2345678\t", 16, true)]
+        public void TabsMakesItJustOverLimit_IndentAndAlign(string prefix, string input, int bufferWidthWithoutNewLine, bool prefixAlreadyWritten)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: bufferWidthWithoutNewLine + 1, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input + "x", prefixAlreadyWritten: prefixAlreadyWritten, prefixWidth: prefix.Length);
+
+            string expected = (prefixAlreadyWritten ? string.Empty : prefix) + input + Environment.NewLine +
+                              prefix + "x" + Environment.NewLine;
+
+            output.ShouldBe(expected);
+        }
+
+        [Theory]
+        //+----+----+---+---+---+---+---+---+
+        //| 1  | 2  | 3 | 4 | 5 | 6 | 7 | 8 |
+        //+----+----+---+---+---+---+---+---+
+        //| \t | .  | . | . | . | . | . | . |
+        //+----+----+---+---+---+---+---+---+
+        //| 1  |    |   |   |   |   |   |   |
+        //+----+----+---+---+---+---+---+---+
+        //| a  | \t | . | . | . | . | . | . |
+        //+----+----+---+---+---+---+---+---+
+        //| b  |    |   |   |   |   |   |   |
+        //+----+----+---+---+---+---+---+---+
+        [InlineData("", "\t1\na\tb", "\t\n1\na\t\nb\n",  8, false)]
+        //+---+---+---+----+---+---+---+---+----+
+        //| 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  |
+        //+---+---+---+----+---+---+---+---+----+
+        //| 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | \t |
+        //+---+---+---+----+---+---+---+---+----+
+        //| a | b | c |    |   |   |   |   |    |
+        //+---+---+---+----+---+---+---+---+----+
+        //| d | e | f | \t | . | . | . | . | g  |
+        //+---+---+---+----+---+---+---+---+----+
+        [InlineData("", "12345678\tabc\ndef\tg", "12345678\t\nabc\ndef\tg\n", 9, false)]
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| 1  | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| \t | . | . | .  | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | a  |
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| b  | c |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| d  | e | f | \t | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| h  | i |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        [InlineData("", "\t\tabc\ndef\t\tghi", "\t\ta\nbc\ndef\t\tg\nhi\n", 17, false)]
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| 1 | 2 | 3  | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | a | \t | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | c |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | d | e  | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | h | i  | 5 | 6  | 7 | 8 | 9  | 0 | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | 9 |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        [InlineData(" ", "a\t\tbc\ndef\t\tghi567890123456789", " a\t\tb\n c\n def\t\tg\n hi56789012345678\n 9\n", 17, false)]
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| 1 | 2  | 3 | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| a | \t | . | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | c  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | d  | e | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | h  | i | 5 | 6  | 7 | 8 | 9 | 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        //| _ | 9  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        [InlineData(" ", "a\t\tbc\ndef\t\tghi567890123456789", "a\t\tb\n c\n def\t\tg\n hi56789012345678\n 9\n", 17, true)]
+        public void MultiLinesOverLimit_IndentAndAlign(string prefix, string input, string expected, int bufferWidthWithoutNewLine, bool prefixAlreadyWritten)
+        {
+            input = input.Replace("\n", Environment.NewLine);
+            expected = expected.Replace("\n", Environment.NewLine);
+            var aligner = new ConsoleOutputAligner(bufferWidth: bufferWidthWithoutNewLine + 1, alignMessages: true);
+
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: prefixAlreadyWritten, prefixWidth: prefix.Length);
+
+            output.ShouldBe(expected);
+        }
+    }
+}
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 6d90b335b8c..167a67e396e 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -1171,8 +1171,6 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <remarks>Currently we're not supporting "\r".</remarks>
         internal static readonly string[] newLines = { "\r\n", "\n" };
 
-        internal static readonly char[] newLineChars = { '\r', '\n' };
-
         /// <summary>
         /// Visual separator for projects. Line length was picked arbitrarily.
         /// </summary>
diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
new file mode 100644
index 00000000000..4c9d52b9dc1
--- /dev/null
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -0,0 +1,148 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable enable
+using System;
+using System.Text;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.BackEnd.Logging
+{
+    /// <summary>
+    /// Align output to multiple lines so no logged test is lost due to limited <see cref="Console.BufferWidth"/>.
+    /// During alignment optional prefix/indent is applied.
+    /// </summary>
+    /// <remarks>
+    /// This class is not thread safe.
+    /// </remarks>
+    internal class ConsoleOutputAligner
+    {
+        internal const int ConsoleTabWidth = 8;
+
+        private readonly StringBuilder _reusedStringBuilder = new(1024);
+        private readonly int _bufferWidth;
+        private readonly bool _alignMessages;
+
+        /// <summary>
+        /// Constructor.
+        /// </summary>
+        /// <param name="bufferWidth">Console buffer width. -1 if unknown/unlimited</param>
+        /// <param name="alignMessages">Whether messages are aligned/wrapped into console buffer width</param>
+        public ConsoleOutputAligner(int bufferWidth, bool alignMessages)
+        {
+            _bufferWidth = bufferWidth;
+            _alignMessages = alignMessages;
+        }
+
+        /// <summary>
+        /// Based on bufferWidth split message into multiple lines and indent if needed.
+        /// TAB character are interpreted by standard Console logic. 
+        /// </summary>
+        /// <param name="message">Input message. May contains tabs and new lines. Both \r\n and \n is supported but replaced into current environment new line.</param>
+        /// <param name="prefixAlreadyWritten">true if message already contains prefix (message context, timestamp, etc...).</param>
+        /// <param name="prefixWidth">Width of the prefix. Every line in result string will be indented by this number of spaces except 1st line with already written prefix.</param>
+        /// <returns>Aligned message ready to be written to Console</returns>
+        /// <remarks>
+        /// For optimization purposes this method uses single <see cref="StringBuilder"/> instance. This makes this method non thread safe.
+        /// Calling side is expected this usage is non-concurrent. This shall nto be an issue as it is expected that writing into Console shall be serialized anyway.
+        /// </remarks>
+        public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int prefixWidth)
+        {
+            int i = 0;
+            int j = message.IndexOfAny(MSBuildConstants.CrLf);
+            try
+            {
+                StringBuilder sb = _reusedStringBuilder;
+                sb.Length = 0;
+                // The string contains new lines, treat each new line as a different string to format and send to the console
+                while (j >= 0)
+                {
+                    AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, j - i);
+                    i = j + (message[j] == '\r' ? 2 : 1);
+                    j = i < message.Length ? message.IndexOfAny(MSBuildConstants.CrLf, i) : -1;
+                }
+
+                // Process rest of message
+                AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, message.Length - i);
+
+                return sb.ToString();
+            }
+            finally
+            {
+                // prepare for reuse
+                _reusedStringBuilder.Length = 0;
+            }
+        }
+
+        /// <summary>
+        /// Append aligned and indented message lines into running <see cref="StringBuilder"/>.
+        /// </summary>
+        private void AlignAndIndentLineOfMessage(StringBuilder sb, bool prefixAlreadyWritten, int prefixWidth, string message, int start, int count)
+        {
+            int bufferWidthMinusNewLine = _bufferWidth - 1;
+
+            bool bufferIsLargerThanPrefix = bufferWidthMinusNewLine > prefixWidth;
+            if (bufferIsLargerThanPrefix && _alignMessages)
+            {
+                // If the buffer is larger then the prefix information (timestamp and key) then reformat the messages.
+
+                // Beginning index of string to be written
+                int index = 0;
+                // Loop until all the string has been sent to the console
+                while (index < count)
+                {
+                    // Position of virtual console cursor.
+                    // By simulating cursor position adjustment for tab characters '\t' we can compute
+                    // exact numbers of characters from source string to fit into Console.BufferWidth
+                    int cursor = 0;
+
+                    // Write prefix if needed
+                    if ((!prefixAlreadyWritten || index > 0 || start > 0) && prefixWidth > 0)
+                    {
+                        sb.Append(' ', prefixWidth);
+                    }
+                    // We have to adjust cursor position whether the prefix has been already written or we wrote/indented it ourselves
+                    cursor += prefixWidth;
+
+                    // end index of string to be written (behind last character)
+                    int endIndex = index;
+                    while (cursor < bufferWidthMinusNewLine)
+                    {
+                        int remainingCharsToEndOfBuffer = Math.Min(bufferWidthMinusNewLine - cursor, count - endIndex);
+                        int nextTab = message.IndexOf('\t', start + endIndex, remainingCharsToEndOfBuffer);
+                        if (nextTab >= 0)
+                        {
+                            // position before tab
+                            cursor += nextTab - (start + endIndex);
+                            // move to next tab position
+                            cursor += ConsoleTabWidth - cursor % ConsoleTabWidth;
+                            // move end index after the '\t' in preparation for following IndexOf '\t'
+                            endIndex += nextTab - (start + endIndex) + 1;
+                        }
+                        else
+                        {
+                            endIndex += remainingCharsToEndOfBuffer;
+                            break;
+                        }
+                    }
+
+                    sb.Append(message, start + index, endIndex - index);
+                    sb.AppendLine();
+
+                    index = endIndex;
+                }
+            }
+            else
+            {
+                // If there is not enough room just print the message out and let the console do the formatting
+                if (!prefixAlreadyWritten && prefixWidth > 0)
+                {
+                    sb.Append(' ', prefixWidth);
+                }
+
+                sb.Append(message, start, count);
+                sb.AppendLine();
+            }
+        }
+    }
+}
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index a3edc2fbc83..ed5cf7b4fef 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -2,12 +2,10 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Text;
 using System.Collections;
 using System.Globalization;
 using System.Collections.Generic;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -105,6 +103,8 @@ private void CheckIfOutputSupportsAlignment()
                     _alignMessages = false;
                 }
             }
+
+            _consoleOutputAligner = new ConsoleOutputAligner(_bufferWidth, _alignMessages);
         }
 
         #endregion
@@ -1344,7 +1344,7 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
             {
                 int adjustedPrefixWidth = _prefixWidth + prefixAdjustment;
 
-                if (Traits.Instance.EscapeHatches.DoNotOptimizeConsoleLogger)
+                if (Traits.Instance.EscapeHatches.DoNotOptimizeConsoleLogger || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
                 {
                     // The string may contain new lines, treat each new line as a different string to format and send to the console
                     string[] nonNullMessages = SplitStringOnNewLines(message);
@@ -1385,107 +1385,16 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
                 }
                 else
                 {
-                    // If we do not indent and/or wrap we can simply write it as is.
-                    // This will always be true for FileLoggers
-                    if (!_alignMessages && adjustedPrefixWidth == 0)
+                    if (_alignMessages || adjustedPrefixWidth != 0)
                     {
-                        WriteHandler(message);
-                        WriteHandler(Environment.NewLine);
+                        WriteHandler(_consoleOutputAligner.AlignConsoleOutput(message, prefixAlreadyWritten, adjustedPrefixWidth));
                     }
                     else
                     {
-                        int j = message.IndexOfAny(newLineChars);
-                        int i = 0;
-                        try
-                        {
-                            var sb = _stringBuilderForWriteMessage;
-                            sb.Length = 0;
-                            // The string contains new lines, treat each new line as a different string to format and send to the console
-                            while (j >= 0)
-                            {
-                                WriteLineOfMessage(sb, adjustedPrefixWidth, message, i, j - i);
-                                i = j + (message[j] == '\r' ? 2 : 1);
-                                j = i < message.Length ? message.IndexOfAny(newLineChars, i) : -1;
-                            }
-
-                            WriteLineOfMessage(sb, adjustedPrefixWidth, message, i, message.Length - i);
-                            WriteHandler(sb.ToString());
-                        }
-                        finally
-                        {
-                            // prepare for reuse
-                            _stringBuilderForWriteMessage.Length = 0;
-                        }
-                    }
-
-                    void WriteLineOfMessage(StringBuilder sb, int adjustedPrefixWidth, string nonNullMessage, int start, int count)
-                    {
-                        int bufferWidthMinusNewLine = _bufferWidth - 1;
-
-                        // If the buffer is larger then the prefix information (timestamp and key) then reformat the messages. 
-                        // If there is not enough room just print the message out and let the console do the formatting
-                        bool bufferIsLargerThanPrefix = bufferWidthMinusNewLine > adjustedPrefixWidth;
-                        bool messageAndPrefixTooLargeForBuffer = (nonNullMessage.Length + adjustedPrefixWidth) > bufferWidthMinusNewLine;
-                        if (bufferIsLargerThanPrefix && messageAndPrefixTooLargeForBuffer && _alignMessages)
-                        {
-                            // If the message and the prefix are too large for one line in the console, split the string to fit
-
-                            // Beginning index of string to be written
-                            int index = 0;
-                            int tabWidth = consoleTab.Length;
-                            // Loop until all the string has been sent to the console
-                            while (index < count)
-                            {
-                                // Position of virtual console cursor
-                                // By simulating cursor position adjustment for tab characters '\t' we can compute
-                                // exact numbers of characters from source string to fit into Console.BufferWidth
-                                int cursor = 0;
-
-                                // Write prefix if needed
-                                if ((!prefixAlreadyWritten || index > 0) && adjustedPrefixWidth > 0)
-                                {
-                                    sb.Append(' ', adjustedPrefixWidth);
-                                    cursor += adjustedPrefixWidth;
-                                }
-
-                                // end index of string to be written (behind last character)
-                                int endIndex = index;
-                                while (cursor < bufferWidthMinusNewLine)
-                                {
-                                    int remainingCharsToEndOfBuffer = Math.Min(bufferWidthMinusNewLine - cursor, count - endIndex);
-                                    int nextTab = message.IndexOf('\t', start + endIndex, remainingCharsToEndOfBuffer);
-                                    if (nextTab >= 0)
-                                    {
-                                        // position before tab
-                                        cursor += nextTab - (start + endIndex);
-                                        // move to next tab position
-                                        cursor += tabWidth - (nextTab % tabWidth);
-
-                                        // move end index after the '\t' in preparation for following IndexOf '\t'
-                                        endIndex += nextTab - (start + endIndex) + 1;
-                                    }
-                                    else
-                                    {
-                                        endIndex += remainingCharsToEndOfBuffer;
-                                        break;
-                                    }
-                                }
-
-                                sb.Append(nonNullMessage, start + index, endIndex - index);
-                                sb.AppendLine();
-
-                                index = endIndex;
-                            }
-                        }
-                        else
-                        {
-                            // Let the console do the formatting
-                            if (!prefixAlreadyWritten)
-                                sb.Append(' ', adjustedPrefixWidth);
-
-                            sb.Append(nonNullMessage, start, count);
-                            sb.AppendLine();
-                        }
+                        // If we do not indent and/or align (wrap) we can simply write it as is.
+                        // This will always be true for FileLoggers
+                        WriteHandler(message);
+                        WriteHandler(Environment.NewLine);
                     }
                 }
             }
@@ -1870,10 +1779,6 @@ internal override void PrintCounterMessage(WriteLinePrettyFromResourceDelegate W
         private BuildEventContext _lastDisplayedBuildEventContext;
         private int _bufferWidth = -1;
         private readonly object _lockObject = new Object();
-        /// <summary>
-        /// Used exclusively by <see cref="WriteMessageAligned(string,bool,int)"/>
-        /// </summary>
-        private readonly StringBuilder _stringBuilderForWriteMessage = new StringBuilder(1024);
         private int _prefixWidth = 0;
         private ProjectFullKey _lastProjectFullKey = new ProjectFullKey(-1, -1);
         private bool _alignMessages;
@@ -1891,6 +1796,8 @@ internal override void PrintCounterMessage(WriteLinePrettyFromResourceDelegate W
         private bool _hasBuildStarted;
         private bool? _showCommandLine;
         private bool _showTimeStamp;
+        private ConsoleOutputAligner _consoleOutputAligner;
+
         #endregion
     }
 }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index f7540863381..c51797347b9 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -1,4 +1,4 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -612,6 +612,7 @@
     <Compile Include="Logging\ParallelLogger\ParallelConsoleLogger.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="Logging\ParallelLogger\ConsoleOutputAligner.cs" />
     <Compile Include="Logging\FileLogger.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
