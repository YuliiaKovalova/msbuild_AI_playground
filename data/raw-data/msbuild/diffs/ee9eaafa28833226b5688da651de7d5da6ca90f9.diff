diff --git a/src/Analyzers.UnitTests/CustomConfigurationData_Tests.cs b/src/Analyzers.UnitTests/CustomConfigurationData_Tests.cs
index 2c1672e6adc..f3b52c4645c 100644
--- a/src/Analyzers.UnitTests/CustomConfigurationData_Tests.cs
+++ b/src/Analyzers.UnitTests/CustomConfigurationData_Tests.cs
@@ -127,5 +127,26 @@ public void TestCustomConfigurationData_Equals_ShouldBeFalse_CustomConfigDataDif
 
             customConfigurationData1.Equals(customConfigurationData2).ShouldBeFalse();
         }
+
+        [Fact]
+        public void TestCustomConfigurationData_Equals_ShouldBeTrue_CustomConfigDataKeysOrderDiffers()
+        {
+            var config1 = new Dictionary<string, string>()
+            {
+                { "key1", "val1" },
+                { "key2", "val2" }
+            };
+
+            var config2 = new Dictionary<string, string>()
+            {
+                { "key2", "val2" },
+                { "key1", "val1" }
+            };
+
+            var customConfigurationData1 = new CustomConfigurationData("testRuleId", config1);
+            var customConfigurationData2 = new CustomConfigurationData("testRuleId", config2);
+
+            customConfigurationData1.Equals(customConfigurationData2).ShouldBeTrue();
+        }
     }
 }
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index b37595cc580..bfe82e52166 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -63,7 +63,7 @@ public static BuildAnalyzerConfiguration Create(Dictionary<string, string> confi
         };
     }
 
-    private static bool TryExtractValue<T>(string key, Dictionary<string, string> config, out T value) where T : struct
+    private static bool TryExtractValue<T>(string key, Dictionary<string, string> config, out T value) where T : struct, Enum
     {
         value = default;
 
@@ -72,28 +72,45 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
             return false;
         }
 
-        bool isParsed = false;
+        var isParsed = Enum.TryParse(stringValue, true, out value);
 
-        if (typeof(T) == typeof(bool))
+        if (!isParsed)
         {
-            if (bool.TryParse(stringValue, out bool boolValue))
-            {
-                value = (T)(object)boolValue;
-                isParsed = true;
-            }
+            ThrowIncorectValueEception(key, stringValue);
         }
-        else if(typeof(T).IsEnum)
+
+        return isParsed;
+    }
+
+    private static bool TryExtractValue(string key, Dictionary<string, string> config, out bool value)
+    {
+        value = default;
+
+        if (config == null || !config.TryGetValue(key, out string stringValue))
         {
-            isParsed = Enum.TryParse(stringValue, true, out value);
+            return false;
         }
 
+        bool isParsed = false;
+        
+        if (bool.TryParse(stringValue, out bool boolValue))
+        {
+            value = boolValue;
+            isParsed = true;
+        }
+        
         if (!isParsed)
         {
-            throw new BuildCheckConfigurationException(
-                $"Incorrect value provided in config for key {key}",
-                buildCheckConfigurationErrorScope: BuildCheckConfigurationErrorScope.EditorConfigParser);
+            ThrowIncorectValueEception(key, stringValue);
         }
 
         return isParsed;
     }
+
+    private static void ThrowIncorectValueEception(string key, string value)
+    {
+        throw new BuildCheckConfigurationException(
+                $"Incorrect value provided in config for key {key}: '{value}'",
+                buildCheckConfigurationErrorScope: BuildCheckConfigurationErrorScope.EditorConfigParser);
+    }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index 468aa459547..ba23accbf17 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -73,17 +73,11 @@ public override bool Equals(object? obj)
         }
 
         // validate keys and values
-        if (customConfigObj.ConfigurationData != null && ConfigurationData != null)
+        if (customConfigObj.ConfigurationData != null && ConfigurationData != null && ConfigurationData.Count == customConfigObj.ConfigurationData.Count)
         {
-            if (!customConfigObj.ConfigurationData.Keys.SequenceEqual(ConfigurationData.Keys))
+            foreach (var keyVal in customConfigObj.ConfigurationData)
             {
-                return false;
-            }
-
-            var keys = customConfigObj.ConfigurationData.Keys;
-            foreach (var key in keys)
-            {
-                if (customConfigObj.ConfigurationData[key] != ConfigurationData[key])
+                if(!ConfigurationData.TryGetValue(keyVal.Key, out string value) || value != keyVal.Value)
                 {
                     return false;
                 }
@@ -101,5 +95,22 @@ public override bool Equals(object? obj)
         return true;
     }
 
-    public override int GetHashCode() => (ConfigurationData != null ? ConfigurationData.GetHashCode() : 0);
+    public override int GetHashCode()
+    {
+        if (!NotNull(this))
+        {
+            return 0;
+        }
+
+        var hashCode = RuleId.GetHashCode();
+        if (ConfigurationData != null)
+        {
+            foreach (var keyVal in ConfigurationData)
+            {
+                hashCode = hashCode + keyVal.Key.GetHashCode() + keyVal.Value.GetHashCode();
+            }
+        }
+
+        return hashCode;
+    }
 }
