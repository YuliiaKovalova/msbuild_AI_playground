diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 836565cd1e4..c0e9a0022c5 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -276,6 +276,7 @@ string taskProjectFile
                 _taskName = taskName;
                 _typeInformation = _typeLoader.Load(taskName, loadInfo, taskHostFactoryExplicitlyRequested);
                 _typeInformation.LoadInfo = loadInfo;
+                _typeInformation.TypeName = taskName;
             }
             catch (TargetInvocationException e)
             {
diff --git a/src/Shared/TypeInformation.cs b/src/Shared/TypeInformation.cs
index e1c684209b5..106caf59b33 100644
--- a/src/Shared/TypeInformation.cs
+++ b/src/Shared/TypeInformation.cs
@@ -11,7 +11,6 @@ internal sealed class TypeInformation
     {
         internal AssemblyLoadInfo LoadInfo { get; set; }
         internal string TypeName { get; set; }
-        internal string AssemblyLocation { get; set; }
 
         internal LoadedType LoadedType { get; set; }
 
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index e585bf50329..31a7332e164 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -363,7 +363,49 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                             foreach (TypeDefinitionHandle typeDefHandle in metadataReader.TypeDefinitions)
                             {
                                 TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
-                                foreach (var attr in typeDef.Attributes) ;
+                                if ((typeDef.Attributes & TypeAttributes.Public) == 0 || (typeDef.Attributes & TypeAttributes.Class) == 0)
+                                {
+                                    continue;
+                                }
+                                else
+                                {
+                                    string currentTypeName = metadataReader.GetString(typeDef.Name);
+                                    if (currentTypeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(currentTypeName, typeName))
+                                    {
+                                        // We found the right type! Now get its information.
+                                        foreach (CustomAttributeHandle customAttrHandle in typeDef.GetCustomAttributes())
+                                        {
+                                            CustomAttribute customAttribute = metadataReader.GetCustomAttribute(customAttrHandle);
+                                            MemberReference constructorReference = metadataReader.GetMemberReference((MemberReferenceHandle)customAttribute.Constructor);
+                                            if (constructorReference.Parent.Kind == HandleKind.TypeReference)
+                                            {
+                                                TypeReference typeReference = metadataReader.GetTypeReference((TypeReferenceHandle)constructorReference.Parent);
+                                                string customAttributeName = metadataReader.GetString(typeReference.Name);
+                                                switch (customAttributeName)
+                                                {
+                                                    case "STAAttribute":
+                                                        typeInformation.HasSTAThreadAttribute = true;
+                                                        break;
+                                                    case "LoadInSeparateAppDomainAttribute":
+                                                        typeInformation.HasLoadInSeparateAppDomainAttribute = true;
+                                                        break;
+                                                    case "IsMarshallByRef":
+                                                        typeInformation.IsMarshallByRef = true;
+                                                        break;
+                                                }
+                                            }
+                                        }
+
+                                        foreach (InterfaceImplementationHandle interfaceHandle in typeDef.GetInterfaceImplementations())
+                                        {
+                                            if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
+                                            {
+                                                typeInformation.ImplementsIGeneratedTask = true;
+                                            }
+                                        }
+                                        break;
+                                    }
+                                }
                             }
                         }
                     }
