diff --git a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
index 896837b46fd..6b7e72a4679 100644
--- a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
+++ b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
@@ -375,7 +375,7 @@ public void MultiLinesOverLimit_IndentAndAlign(string prefix, string input, stri
             output.ShouldBe(expected);
         }
 
-        private sealed class TestStringBuilderProvider : IReusableStringBuilderProvider
+        private sealed class TestStringBuilderProvider : IStringBuilderProvider
         {
             public StringBuilder Acquire(int capacity) => new StringBuilder(capacity);
             public string GetStringAndRelease(StringBuilder builder) => builder.ToString();
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index fb525db841f..b7014cd6ac2 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -26,7 +26,7 @@ namespace Microsoft.Build.BackEnd.Logging
     internal delegate void WriteLinePrettyFromResourceDelegate(int indentLevel, string resourceString, params object[] args);
     #endregion
 
-    internal abstract class BaseConsoleLogger : INodeLogger, IReusableStringBuilderProvider
+    internal abstract class BaseConsoleLogger : INodeLogger, IStringBuilderProvider
     {
         #region Properties
 
@@ -132,7 +132,7 @@ public int Compare(Object a, Object b)
         /// <param name="indent">Depth to indent.</param>
         internal string IndentString(string s, int indent)
         {
-            return OptimizedStringIndenter.IndentString(s, indent, (IReusableStringBuilderProvider)this);
+            return OptimizedStringIndenter.IndentString(s, indent, (IStringBuilderProvider)this);
         }
 
         /// <summary>
@@ -1191,7 +1191,7 @@ private bool ApplyVerbosityParameter(string parameterValue)
 
         /// <summary>
         /// Since logging messages are processed serially, we can use a single StringBuilder wherever needed.
-        /// It should not be done directly, but rather through the <see cref="IReusableStringBuilderProvider"/> interface methods.
+        /// It should not be done directly, but rather through the <see cref="IStringBuilderProvider"/> interface methods.
         /// </summary>
         private StringBuilder _sharedStringBuilder = new StringBuilder(0x100);
 
@@ -1244,7 +1244,7 @@ private bool ApplyVerbosityParameter(string parameterValue)
         /// <summary>
         /// Since logging messages are processed serially, we can reuse a single StringBuilder wherever needed.
         /// </summary>
-        StringBuilder IReusableStringBuilderProvider.Acquire(int capacity)
+        StringBuilder IStringBuilderProvider.Acquire(int capacity)
         {
             StringBuilder shared = Interlocked.Exchange(ref _sharedStringBuilder, null);
 
@@ -1299,7 +1299,7 @@ StringBuilder IReusableStringBuilderProvider.Acquire(int capacity)
         /// Acquired StringBuilder must be returned before next use.
         /// Unbalanced releases are not supported.
         /// </summary>
-        string IReusableStringBuilderProvider.GetStringAndRelease(StringBuilder builder)
+        string IStringBuilderProvider.GetStringAndRelease(StringBuilder builder)
         {
             // This is not supposed to be used concurrently. One method is expected to return it before next acquire.
             // But just for sure if _sharedBuilder was already returned, keep the former.
diff --git a/src/Build/Logging/OptimizedStringIndenter.cs b/src/Build/Logging/OptimizedStringIndenter.cs
index 459e28aeb82..d98f1d62094 100644
--- a/src/Build/Logging/OptimizedStringIndenter.cs
+++ b/src/Build/Logging/OptimizedStringIndenter.cs
@@ -52,7 +52,7 @@ internal static class OptimizedStringIndenter
 #if NET7_0_OR_GREATER
     [SkipLocalsInit]
 #endif
-    internal static unsafe string IndentString(string? s, int indent, IReusableStringBuilderProvider stringBuilderProvider)
+    internal static unsafe string IndentString(string? s, int indent, IStringBuilderProvider stringBuilderProvider)
     {
         if (s is null)
         {
diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index 2a4974ba7eb..63e8f26bbe3 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -21,7 +21,7 @@ internal class ConsoleOutputAligner
 
         private readonly int _bufferWidth;
         private readonly bool _alignMessages;
-        private readonly IReusableStringBuilderProvider _stringBuilderProvider;
+        private readonly IStringBuilderProvider _stringBuilderProvider;
 
         /// <summary>
         /// Constructor.
@@ -29,7 +29,7 @@ internal class ConsoleOutputAligner
         /// <param name="bufferWidth">Console buffer width. -1 if unknown/unlimited</param>
         /// <param name="alignMessages">Whether messages are aligned/wrapped into console buffer width</param>
         /// <param name="stringBuilderProvider"></param>
-        public ConsoleOutputAligner(int bufferWidth, bool alignMessages, IReusableStringBuilderProvider stringBuilderProvider)
+        public ConsoleOutputAligner(int bufferWidth, bool alignMessages, IStringBuilderProvider stringBuilderProvider)
         {
             _bufferWidth = bufferWidth;
             _alignMessages = alignMessages;
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index c97255fe8d6..d8d1dce3a34 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -101,7 +101,7 @@ private void CheckIfOutputSupportsAlignment()
                 }
             }
 
-            _consoleOutputAligner = new ConsoleOutputAligner(_bufferWidth, _alignMessages, (IReusableStringBuilderProvider)this);
+            _consoleOutputAligner = new ConsoleOutputAligner(_bufferWidth, _alignMessages, (IStringBuilderProvider)this);
         }
 
         #endregion
