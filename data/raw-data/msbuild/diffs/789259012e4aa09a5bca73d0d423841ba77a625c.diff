diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 2ccc4a88c32..4d91a2f8358 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -38,33 +38,15 @@ public EndToEndTests(ITestOutputHelper output)
 
     public void Dispose() => _env.Dispose();
 
-    [Fact]
-    public void PropertiesUsageAnalyzerTest()
+    [Theory]
+    [InlineData(true)]
+    [InlineData(false)]
+    public void PropertiesUsageAnalyzerTest(bool buildInOutOfProcessNode)
     {
-        using TestEnvironment env = TestEnvironment.Create();
-        string contents = """
-                              <Project DefaultTargets="PrintEnvVar">
-
-                              <!-- MyProp4 is not defined - but it's checked against empty - which is allowed -->
-                              <PropertyGroup Condition="'$(MyProp4)' == ''">
-                                <!-- MyProp3 defined here - but not used anywhere -->
-                                <!-- MyProp1 used here - but not defined -->
-                                <MyProp3>$(MyProp1)</MyProp3>
-                              </PropertyGroup>
-
-
-                              <Target Name="PrintEnvVar">
-                                  <!-- MyProp2 used here - but defined later -->
-                                  <Message Text="MyProp2 has value $(MyProp2)" Importance="High" Condition="'$(MyProp2)' == ''" />
-                                  <PropertyGroup>
-                                    <MyProp2>$(MyProp2);xxx</MyProp2>
-                                  </PropertyGroup>
-                              </Target>
-
-                              </Project>
-                              """;
-        TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
-        TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
+        PrepareSampleProjectsAndConfig(
+            buildInOutOfProcessNode,
+            out TransientTestFile projectFile,
+            "PropsCheckTest.csproj");
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild($"{projectFile.Path} -check /v:detailed", out bool success);
         _env.Output.WriteLine(output);
@@ -420,20 +402,23 @@ private void PopulateXmlAttribute(XmlDocument doc, XmlNode node, string attribut
     private void PrepareSampleProjectsAndConfig(
         bool buildInOutOfProcessNode,
         out TransientTestFile projectFile,
-        IEnumerable<(string RuleId, string Severity)>? ruleToSeverity,
+        string entryProjectAssetName,
+        IEnumerable<string>? supplementalAssetNames = null,
+        IEnumerable<(string RuleId, string Severity)>? ruleToSeverity = null,
         IEnumerable<(string RuleId, (string ConfigKey, string Value) CustomConfig)>? ruleToCustomConfig = null)
     {
         string testAssetsFolderName = "SampleCheckIntegrationTest";
         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
         TransientTestFile testFile = _env.CreateFile(workFolder, "somefile");
 
-        string contents = ReadAndAdjustProjectContent("Project1");
-        string contents2 = ReadAndAdjustProjectContent("Project2");
-        string contentsImported = ReadAndAdjustProjectContent("ImportedFile1");
+        string contents = ReadAndAdjustProjectContent(entryProjectAssetName);
+        projectFile = _env.CreateFile(workFolder, entryProjectAssetName, contents);
 
-        projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
-        TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
-        TransientTestFile importedFile1 = _env.CreateFile(workFolder, "ImportedFile1.props", contentsImported);
+        foreach (string supplementalAssetName in supplementalAssetNames ?? Enumerable.Empty<string>())
+        {
+            string supplementalContent = ReadAndAdjustProjectContent(supplementalAssetName);
+            TransientTestFile supplementalFile = _env.CreateFile(workFolder, supplementalAssetName, supplementalContent);
+        }
 
         _env.CreateFile(workFolder, ".editorconfig", ReadEditorConfig(ruleToSeverity, ruleToCustomConfig, testAssetsFolderName));
 
@@ -454,6 +439,19 @@ string ReadAndAdjustProjectContent(string fileName) =>
                 .Replace("WorkFolderPath", workFolder.Path);
     }
 
+    private void PrepareSampleProjectsAndConfig(
+        bool buildInOutOfProcessNode,
+        out TransientTestFile projectFile,
+        IEnumerable<(string RuleId, string Severity)>? ruleToSeverity,
+        IEnumerable<(string RuleId, (string ConfigKey, string Value) CustomConfig)>? ruleToCustomConfig = null)
+        => PrepareSampleProjectsAndConfig(
+            buildInOutOfProcessNode,
+            out projectFile,
+            "Project1.csproj",
+            new[] { "Project2.csproj", "ImportedFile1.props" },
+            ruleToSeverity,
+            ruleToCustomConfig);
+
     private string ReadEditorConfig(
         IEnumerable<(string RuleId, string Severity)>? ruleToSeverity,
         IEnumerable<(string RuleId, (string ConfigKey, string Value) CustomConfig)>? ruleToCustomConfig,
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
index 57d36981808..26422d4b213 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
@@ -11,3 +11,8 @@ build_check.BC0103.CustomConfig=dummy
 build_check.COND0543.Severity=Error
 build_check.COND0543.EvaluationCheckScope=CheckedProjectOnly
 build_check.COND0543.CustomSwitch=QWERTY
+
+
+build_check.BC0201.Severity=warning
+build_check.BC0202.Severity=warning
+build_check.BC0203.Severity=warning
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/ImportedFile1 b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/ImportedFile1.props
similarity index 100%
rename from src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/ImportedFile1
rename to src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/ImportedFile1.props
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1 b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1.csproj
similarity index 92%
rename from src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1
rename to src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1.csproj
index 4412879248c..918173e191c 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project1.csproj
@@ -16,7 +16,7 @@
    <Target Name="Hello">
        <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
        <Copy SourceFiles="TestFilePath" DestinationFolder="WorkFolderPath" />
-       <MSBuild Projects=".\FooBar-Copy.csproj" Targets="Hello" />
+       <MSBuild Projects=".\Project2.csproj" Targets="Hello" />
 
        <PropertyGroup>
          <ReadFromEnvVariable>$(TEST)</ReadFromEnvVariable>
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2 b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2.csproj
similarity index 91%
rename from src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2
rename to src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2.csproj
index 17b8d3da249..b8355528363 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/Project2.csproj
@@ -11,7 +11,7 @@
     </PropertyGroup>
                     
     <ItemGroup>
-        <Reference Include="bin/foo.dll" />
+        <Reference Include="bin/Project1.dll" />
     </ItemGroup>
                     
     <Target Name="Hello">
@@ -19,4 +19,4 @@
         <Copy SourceFiles="TestFilePath" DestinationFolder="WorkFolderPath" />
     </Target>
                    
-</Project>
\ No newline at end of file
+</Project>
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.proj b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.proj
new file mode 100644
index 00000000000..4e5bb2af0e3
--- /dev/null
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/PropsCheckTest.proj
@@ -0,0 +1,26 @@
+<Project DefaultTargets="PrintEnvVar">
+    <PropertyGroup>
+        <!--
+        <MyProp1>value-of-prop1</MyProp1>
+        <MyProp2>$(MyProp1)</MyProp2>
+        <MyProp3>blah</MyProp3>
+        -->
+    </PropertyGroup>
+
+    <PropertyGroup Condition="'$(MyProp12)' == ''">
+        <MyProp13>$(MyProp11)</MyProp13>
+    </PropertyGroup>
+
+    <!--
+        <ItemGroup>
+        <a Include="$(nonexistent)" />
+        </ItemGroup>
+    -->
+
+    <Target Name="PrintEnvVar">
+        <Message Text="MyPropT2 has value $(MyPropT2)" Importance="High" Condition="'$(MyPropT2)' == ''" />
+        <PropertyGroup>
+            <MyPropT2>$(MyPropT2);xxx</MyPropT2>
+        </PropertyGroup>
+    </Target>
+</Project>
