diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 8d9406a91cb..f338b0a9aca 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -2418,8 +2418,9 @@ public void FailWithMatchingMultipleMetadata()
 
                 <I2 Remove='@(I1)' MatchOnMetadata='M1;M2'/>");
 
-            Should.Throw<InvalidProjectFileException>(() => ObjectModelHelpers.CreateInMemoryProject(content))
-                .HelpKeyword.ShouldBe("MSBuild.OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
+            Project project = ObjectModelHelpers.CreateInMemoryProject(content);
+            IEnumerable<ProjectItem> items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I2"));
+            items.Count().ShouldBe(3);
         }
 
         [Fact]
@@ -2443,8 +2444,9 @@ public void FailWithMultipleItemReferenceOnMatchingMetadata()
 
                 <I3 Remove='@(I1);@(I2)' MatchOnMetadata='M1' />");
 
-            Should.Throw<InvalidProjectFileException>(() => ObjectModelHelpers.CreateInMemoryProject(content))
-                .HelpKeyword.ShouldBe("MSBuild.OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
+            Project project = ObjectModelHelpers.CreateInMemoryProject(content);
+            IEnumerable<ProjectItem> items = project.ItemsIgnoringCondition.Where(i => i.ItemType.Equals("I3"));
+            items.ShouldBeEmpty();
         }
 
         [Fact]
@@ -2462,7 +2464,6 @@ public void FailWithMetadataItemReferenceOnMatchingMetadata()
                 <I2 Include='d2' M1='y' m2='d'/>
 
                 <I2 Remove='%(I1.M1)' MatchOnMetadata='M1' />");
-
             Should.Throw<InvalidProjectFileException>(() => ObjectModelHelpers.CreateInMemoryProject(content))
                 .HelpKeyword.ShouldBe("MSBuild.OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
         }
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index 0914d530708..e1b7ce29406 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -1988,63 +1988,6 @@ public void KeepWithItemReferenceOnNonmatchingMetadata()
             items.ElementAt(3).GetMetadataValue("d").ShouldBe("d");
         }
 
-        [Fact]
-        public void FailWithMatchingMultipleMetadata()
-        {
-            string content = ObjectModelHelpers.CleanupFileContents(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
-                    <Target Name='t'>
-                        <ItemGroup>
-                            <I1 Include='a1' M1='1' M2='a'/>
-                            <I1 Include='b1' M1='2' M2='x'/>
-                            <I1 Include='c1' M1='3' M2='y'/>
-                            <I1 Include='d1' M1='4' M2='b'/>
-
-                            <I2 Include='a2' M1='x' m2='c'/>
-                            <I2 Include='b2' M1='2' m2='x'/>
-                            <I2 Include='c2' M1='3' m2='Y'/>
-                            <I2 Include='d2' M1='y' m2='d'/>
-
-                            <I2 Remove='@(I1)' MatchOnMetadata='M1;M2' />
-                        </ItemGroup>
-                    </Target></Project>");
-            IntrinsicTask task = CreateIntrinsicTask(content);
-            Lookup lookup = LookupHelpers.CreateEmptyLookup();
-            Assert.ThrowsAny<InvalidProjectFileException>(() => ExecuteTask(task, lookup))
-                .HelpKeyword.ShouldBe("MSBuild.OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
-        }
-
-        [Fact]
-        public void FailWithMultipleItemReferenceOnMatchingMetadata()
-        {
-            string content = ObjectModelHelpers.CleanupFileContents(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
-                    <Target Name='t'>
-                        <ItemGroup>
-                            <I1 Include='a1' M1='1' M2='a'/>
-                            <I1 Include='b1' M1='2' M2='x'/>
-                            <I1 Include='c1' M1='3' M2='y'/>
-                            <I1 Include='d1' M1='4' M2='b'/>
-
-                            <I2 Include='a2' M1='x' m2='c'/>
-                            <I2 Include='b2' M1='2' m2='x'/>
-                            <I2 Include='c2' M1='3' m2='Y'/>
-                            <I2 Include='d2' M1='y' m2='d'/>
-
-                            <I3 Include='a3' M1='1' m2='b'/>
-                            <I3 Include='b3' M1='x' m2='a'/>
-                            <I3 Include='c3' M1='3' m2='2'/>
-                            <I3 Include='d3' M1='y' m2='d'/>
-
-                            <I3 Remove='@(I1);@(I2)' MatchOnMetadata='M1' />
-                        </ItemGroup>
-                    </Target></Project>");
-            IntrinsicTask task = CreateIntrinsicTask(content);
-            Lookup lookup = LookupHelpers.CreateEmptyLookup();
-            Assert.ThrowsAny<InvalidProjectFileException>(() => ExecuteTask(task, lookup))
-                .HelpKeyword.ShouldBe("MSBuild.OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
-        }
-
         [Fact]
         public void FailWithMetadataItemReferenceOnMatchingMetadata()
         {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 64e2ebf3d82..495cf717d01 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -249,18 +249,7 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             }
             else
             {
-                ImmutableList<string> metadataList = matchOnMetadata.ToImmutableList();
-                ItemSpec<ProjectPropertyInstance, ProjectItemInstance> itemSpec = new(child.Remove, bucket.Expander, child.RemoveLocation, Project.Directory, true);
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
-                    itemSpec.Fragments.Count == 1
-                    && itemSpec.Fragments.First() is ItemSpec<ProjectPropertyInstance, ProjectItemInstance>.ItemExpressionFragment
-                    && matchOnMetadata.Count == 1,
-                    new BuildEventFileInfo(string.Empty),
-                    "OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem",
-                    child.RemoveLocation,
-                    child.Remove);
-                MetadataSet<ProjectPropertyInstance, ProjectItemInstance> metadataSet = new(matchingOptions, metadataList, itemSpec);
-                itemsToRemove = group.Where(item => metadataSet.Contains(metadataList.Select(m => item.GetMetadataValue(m)))).ToList();
+                itemsToRemove = FindItemsMatchingMetadataSpecification(group, child, bucket.Expander, matchOnMetadata, matchingOptions);
             }
 
             if (itemsToRemove != null)
@@ -585,6 +574,24 @@ Expander<ProjectPropertyInstance, ProjectItemInstance> expander
             return itemsRemoved;
         }
 
+        private List<ProjectItemInstance> FindItemsMatchingMetadataSpecification(
+            ICollection<ProjectItemInstance> group,
+            ProjectItemGroupTaskItemInstance child,
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
+            HashSet<string> matchOnMetadata,
+            MatchOnMetadataOptions matchingOptions)
+        {
+            ItemSpec<ProjectPropertyInstance, ProjectItemInstance> itemSpec = new(child.Remove, expander, child.RemoveLocation, Project.Directory, true);
+            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
+                itemSpec.Fragments.All(f => f is ItemSpec<ProjectPropertyInstance, ProjectItemInstance>.ItemExpressionFragment),
+                new BuildEventFileInfo(string.Empty),
+                "OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem",
+                child.RemoveLocation,
+                child.Remove);
+            MetadataSet<ProjectPropertyInstance, ProjectItemInstance> metadataSet = new(matchingOptions, matchOnMetadata, itemSpec);
+            return group.Where(item => metadataSet.Contains(matchOnMetadata.Select(m => item.GetMetadataValue(m)))).ToList();
+        }
+
         /// <summary>
         /// This class is used during ItemGroup intrinsic tasks to resolve metadata references.  It consists of three tables:
         /// 1. The metadata added during evaluation.
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index f3956285bb7..266ef8b7242 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
 using System.Linq;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Internal;
@@ -460,16 +459,16 @@ public GlobFragment(string textFragment, string projectDirectory)
             && FileUtilities.IsAnySlash(TextFragment[3]);
     }
 
-    internal class MetadataSet<P, I> where P : class, IProperty where I : class, IItem, IMetadataTable
+    internal sealed class MetadataSet<P, I> where P : class, IProperty where I : class, IItem, IMetadataTable
     {
-        private Dictionary<string, MetadataSet<P, I>> children;
-        Func<string, string> normalize;
+        private readonly Dictionary<string, MetadataSet<P, I>> _children;
+        private readonly Func<string, string> _normalize;
 
-        internal MetadataSet(MatchOnMetadataOptions options, ImmutableList<string> metadata, ItemSpec<P, I> itemSpec)
+        internal MetadataSet(MatchOnMetadataOptions options, IEnumerable<string> metadata, ItemSpec<P, I> itemSpec)
         {
             StringComparer comparer = options == MatchOnMetadataOptions.CaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase;
-            children = new Dictionary<string, MetadataSet<P, I>>(comparer);
-            normalize = options == MatchOnMetadataOptions.PathLike ? p => FileUtilities.NormalizePathForComparisonNoThrow(p, Environment.CurrentDirectory) : p => p;
+            _children = new Dictionary<string, MetadataSet<P, I>>(comparer);
+            _normalize = options == MatchOnMetadataOptions.PathLike ? p => FileUtilities.NormalizePathForComparisonNoThrow(p, Environment.CurrentDirectory) : p => p;
             foreach (ItemSpec<P, I>.ItemExpressionFragment frag in itemSpec.Fragments)
             {
                 foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
@@ -481,7 +480,7 @@ internal MetadataSet(MatchOnMetadataOptions options, ImmutableList<string> metad
 
         private MetadataSet(StringComparer comparer)
         {
-            children = new Dictionary<string, MetadataSet<P, I>>(comparer);
+            _children = new Dictionary<string, MetadataSet<P, I>>(comparer);
         }
 
         // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
@@ -490,35 +489,31 @@ private void Add(IEnumerable<string> metadata, StringComparer comparer)
             MetadataSet<P, I> current = this;
             foreach (string m in metadata)
             {
-                string normalizedString = normalize(m);
-                if (current.children.TryGetValue(normalizedString, out MetadataSet<P, I> child))
+                string normalizedString = _normalize(m);
+                if (!current._children.TryGetValue(normalizedString, out MetadataSet<P, I> child))
                 {
-                    current = child;
-                }
-                else
-                {
-                    current.children.Add(normalizedString, new MetadataSet<P, I>(comparer));
-                    current = current.children[normalizedString];
+                    child = new MetadataSet<P, I>(comparer);
+                    current._children.Add(normalizedString, child);
                 }
+                current = child;
             }
         }
 
         internal bool Contains(IEnumerable<string> metadata)
         {
-            bool nonEmptyFound = false;
-            MetadataSet<P, I> curr = this;
+            MetadataSet<P, I> current = this;
             foreach (string m in metadata)
             {
-                if (!String.IsNullOrEmpty(m))
+                if (String.IsNullOrEmpty(m))
                 {
-                    nonEmptyFound = true;
+                    return false;
                 }
-                if (!curr.children.TryGetValue(normalize(m), out curr))
+                if (!current._children.TryGetValue(_normalize(m), out current))
                 {
                     return false;
                 }
             }
-            return nonEmptyFound;
+            return true;
         }
     }
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index bf0038c2c62..0e3c5d802a7 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -13,14 +13,22 @@ internal partial class LazyItemEvaluator<P, I, M, D>
         class RemoveOperation : LazyItemOperation
         {
             readonly ImmutableList<string> _matchOnMetadata;
-            readonly MatchOnMetadataOptions _matchOnMetadataOptions;
-            private MetadataSet<P, I> metadataSet;
+            private MetadataSet<P, I> _metadataSet;
 
             public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
             {
                 _matchOnMetadata = builder.MatchOnMetadata.ToImmutable();
-                _matchOnMetadataOptions = builder.MatchOnMetadataOptions;
+
+                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
+                    _matchOnMetadata.IsEmpty || _itemSpec.Fragments.All(f => f is ItemSpec<ProjectProperty, ProjectItem>.ItemExpressionFragment),
+                    new BuildEventFileInfo(string.Empty),
+                    "OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
+
+                if (!_matchOnMetadata.IsEmpty)
+                {
+                    _metadataSet = new MetadataSet<P, I>(builder.MatchOnMetadataOptions, _matchOnMetadata, _itemSpec);
+                }
             }
 
             /// <summary>
@@ -32,13 +40,6 @@ public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M
             /// </remarks>
             protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
-                var matchOnMetadataValid = !_matchOnMetadata.IsEmpty && _itemSpec.Fragments.Count == 1
-                    && _itemSpec.Fragments.First() is ItemSpec<ProjectProperty, ProjectItem>.ItemExpressionFragment;
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
-                    _matchOnMetadata.IsEmpty || (matchOnMetadataValid && _matchOnMetadata.Count == 1),
-                    new BuildEventFileInfo(string.Empty),
-                    "OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem");
-
                 if (_matchOnMetadata.IsEmpty && ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType) && _conditionResult)
                 {
                     // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
@@ -65,12 +66,7 @@ protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder
 
             private bool MatchesItemOnMetadata(I item)
             {
-                if (metadataSet == null)
-                {
-                    metadataSet = new MetadataSet<P, I>(_matchOnMetadataOptions, _matchOnMetadata, _itemSpec);
-                }
-
-                return metadataSet.Contains(_matchOnMetadata.Select(m => item.GetMetadataValue(m)));
+                return _metadataSet.Contains(_matchOnMetadata.Select(m => item.GetMetadataValue(m)));
             }
 
             protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
