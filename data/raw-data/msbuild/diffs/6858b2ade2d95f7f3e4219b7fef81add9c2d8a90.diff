diff --git a/documentation/specs/BuildCheck/Codes.md b/documentation/specs/BuildCheck/Codes.md
index d2a518cedf6..6fdcc5ad8eb 100644
--- a/documentation/specs/BuildCheck/Codes.md
+++ b/documentation/specs/BuildCheck/Codes.md
@@ -9,6 +9,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are
 | [BC0103](#bc0103---used-environment-variable) | Suggestion | Project | 9.0.100 | Used environment variable. |
 | [BC0104](#bc0104---projectreference-is-preferred-to-reference) | Warning | N/A | 9.0.200 | ProjectReference is preferred to Reference. |
 | [BC0105](#bc0105---embeddedresource-should-specify-culture-metadata) | Warning | N/A | 9.0.200 | Culture specific EmbeddedResource should specify Culture metadata. |
+| [BC0106](#bc0106---copytooutputdirectoryalways-should-be-avoided) | Warning | N/A | 9.0.200 | CopyToOutputDirectory='Always' should be avoided. |
 | [BC0201](#bc0201---usage-of-undefined-property) | Warning | Project | 9.0.100 | Usage of undefined property. |
 | [BC0202](#bc0202---property-first-declared-after-it-was-used) | Warning | Project | 9.0.100 | Property first declared after it was used. |
 | [BC0203](#bc0203----property-declared-but-never-used) | Suggestion | Project | 9.0.100 | Property declared but never used. |
@@ -76,7 +77,36 @@ Examples:
 
 <a name="RespectAlreadyAssignedItemCulture"></a>
 **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`"MSB3002: Explicitly set culture "{0}" for item "{1}" was overwritten with inferred culture "{2}", because 'RespectAlreadyAssignedItemCulture' property was not set."`)
- 
+
+<a name="BC0106"></a>
+## BC0106 - CopyToOutputDirectory='Always' should be avoided.
+
+"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying."
+
+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) has following recognized values:
+ * `Never`
+ * `Always`
+ * `PreserveNewest`
+ * `IfDifferent`
+
+The `Always` is not recommended - as it causes the files to be copied always - even if unnecesary.
+
+This might have been historicaly needed to workaround cases where the destination file could have changed between builds (e.g. a case of asset that can be changed during test run, but needs to be rest by the build). A `IfDifferent` value is currently offered to efficiently cover such scenario.
+
+In order to avoid a need for change all copy metada, it's now possible to specify `SkipUnchangedFilesOnCopyAlways` property with a value of `'True'` in order to flip all copy behavior of `CopyToOutputDirectory=Always` to behave identicaly as `CopyToOutputDirectory=IfDifferent`:
+
+```xml
+<PropertyGroup>
+    <SkipUnchangedFilesOnCopyAlways>True</SkipUnchangedFilesOnCopyAlways>
+</PropertyGroup>
+
+<ItemGroup>
+    <None Include="File1.txt" CopyToOutputDirectory="Always" />
+    <None Include="File2.txt" CopyToOutputDirectory="IfDifferent" />
+</ItemGroup>
+```
+
+Both items in above example are treated same and no BC0106 diagnostic is issued.
 
 <a name="BC0201"></a>
 ## BC0201 - Usage of undefined property.
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 4ff2f800aa9..bfdd926ee6a 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2176,19 +2176,19 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   </data>
   <data name="BuildCheck_BC0105_Title" xml:space="preserve">
     <value>It is recommended to specify explicit 'Culture' metadata, or 'WithCulture=false' metadata with 'EmbeddedResource' item in order to avoid wrong or nondeterministic culture estimation.</value>
-	<comment>Terms in quotes are not to be translated.</comment>
+	  <comment>Terms in quotes are not to be translated.</comment>
   </data>
   <data name="BuildCheck_BC0105_MessageFmt" xml:space="preserve">
     <value>Project {0} specifies 'EmbeddedResource' item '{1}', that has possibly a culture denoting extension ('{2}'), but explicit 'Culture' nor 'WithCulture=false' metadata are not specified.</value>
-	<comment>Terms in quotes are not to be translated.</comment>
+	  <comment>Terms in quotes are not to be translated.</comment>
   </data>
   <data name="BuildCheck_BC0106_Title" xml:space="preserve">
     <value>It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.</value>
-	<comment>Terms in quotes are not to be translated.</comment>
+	  <comment>Terms in quotes are not to be translated.</comment>
   </data>
   <data name="BuildCheck_BC0106_MessageFmt" xml:space="preserve">
-    <value>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</value>
-	<comment>Terms in quotes are not to be translated.</comment>
+    <value>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</value>
+	  <comment>Terms in quotes are not to be translated.</comment>
   </data>
   <data name="BuildCheck_BC0201_Title" xml:space="preserve">
     <value>A property that is accessed should be declared first.</value>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 015d982d739..8e22aa0ab59 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index c036f2ed95e..bfe8980ab5e 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 28e43bc9ffd..c87c4d472d7 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index cdab0bfcf50..d7605f1eb03 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index cf9185a5426..30e60b30a4a 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index ca1e834e1d4..4d7fd5266d1 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index b08c79a7a75..a00281c61e9 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 1c83c5aa46f..4b53345a1c0 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index ee53e998b1f..e23cfa37fc2 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index a183474bd0d..4b6a187a302 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index da2ed576ea3..85c443a351c 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 18127e5a417..4ec273ed1bb 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index e98d91fd3e8..42667a2162a 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -192,8 +192,8 @@
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_MessageFmt">
-        <source>Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
-        <target state="new">Project {0} specifies '{0}' item '{1}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
+        <source>Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</source>
+        <target state="new">Project {0} specifies '{1}' item '{2}', that has 'CopyToOutputDirectory' set as 'Always'. Change the metadata or use 'CopyToOutputDirectory' property.</target>
         <note>Terms in quotes are not to be translated.</note>
       </trans-unit>
       <trans-unit id="BuildCheck_BC0106_Title">
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 6979d98e114..e72f5c6d674 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -12,6 +12,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
+using Microsoft.VisualStudio.TestPlatform.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -147,14 +148,6 @@ void AssertHasResourceForCulture(string culture, bool isResourceExpected)
                     $"Unexpected resource for culture {culture} was found in deps.json:{Environment.NewLine}{output.DepsJsonResources.ToString()}");
             }
         }
-
-        int GetWarningsCount(string output)
-        {
-            Regex regex = new Regex(@"(\d+) Warning\(s\)");
-            Match match = regex.Match(output);
-            match.Success.ShouldBeTrue("Expected Warnings section not found in the build output.");
-            return int.Parse(match.Groups[1].Value);
-        }
     }
 
     private readonly record struct EmbedResourceTestOutput(String LogOutput, JsonObject DepsJsonResources);
@@ -218,6 +211,99 @@ private static void CopyFilesRecursively(string sourcePath, string targetPath)
         }
     }
 
+    private static int GetWarningsCount(string output)
+    {
+        Regex regex = new Regex(@"(\d+) Warning\(s\)");
+        Match match = regex.Match(output);
+        match.Success.ShouldBeTrue("Expected Warnings section not found in the build output.");
+        return int.Parse(match.Groups[1].Value);
+    }
+
+    private readonly record struct CopyTestOutput(
+        String LogOutput,
+        string File1Path,
+        string File2Path,
+        DateTime File1WriteUtc,
+        DateTime File2WriteUtc,
+        DateTime File1AccessUtc,
+        DateTime File2AccessUtc);
+
+    private CopyTestOutput RunCopyToOutputTest(bool restore, bool skipUnchangedDuringCopy)
+    {
+        string output = RunnerUtilities.ExecBootstrapedMSBuild($"-check {(restore ? "-restore" : null)} /p:SkipUnchanged={(skipUnchangedDuringCopy ? "True" : "\"\"")}", out bool success);
+        _env.Output.WriteLine(output);
+        _env.Output.WriteLine("=========================");
+        success.ShouldBeTrue();
+
+        // We should get warning only if we didn't opted-into the new behavior
+        if (!skipUnchangedDuringCopy)
+        {
+            string expectedDiagnostic = "warning BC0106: .* that has 'CopyToOutputDirectory' set as 'Always'";
+            Regex.Matches(output, expectedDiagnostic).Count.ShouldBe(2);
+        }
+
+        GetWarningsCount(output).ShouldBe(skipUnchangedDuringCopy ? 0 : 1);
+
+        string[] outFile1 = Directory.GetFiles(".", "File1.txt", SearchOption.AllDirectories);
+        outFile1.Length.ShouldBe(1);
+
+        string[] outFile2 = Directory.GetFiles(".", "File2.txt", SearchOption.AllDirectories);
+        outFile2.Length.ShouldBe(1);
+
+        // File.Copy does reuse LastWriteTime of source file
+        return new(
+            output,
+            outFile1[0],
+            outFile2[0],
+            File.GetLastWriteTimeUtc(outFile1[0]),
+            File.GetLastWriteTimeUtc(outFile2[0]),
+            File.GetLastAccessTimeUtc(outFile1[0]),
+            File.GetLastAccessTimeUtc(outFile2[0]));
+    }
+
+    [Theory]
+    [InlineData(false)]
+    [InlineData(true)]
+    public void CopyToOutputTest(bool skipUnchangedDuringCopy)
+    {
+        string testAssetsFolderName = "CopyAlwaysTest";
+        const string entryProjectName = "EntryProject";
+        TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
+
+        CopyFilesRecursively(Path.Combine(TestAssetsRootPath, testAssetsFolderName), workFolder.Path);
+
+        _env.SetCurrentDirectory(Path.Combine(workFolder.Path, entryProjectName));
+
+        var output1 = RunCopyToOutputTest(true, skipUnchangedDuringCopy);
+
+        // Run again - just Always should be copied
+
+        var output2 = RunCopyToOutputTest(false, skipUnchangedDuringCopy);
+
+        // CopyToOutputDirectory="Always"
+        output2.File1AccessUtc.ShouldBeGreaterThan(output1.File1AccessUtc);
+        // CopyToOutputDirectory="IfDifferent"
+        output2.File2AccessUtc.ShouldBeEquivalentTo(output1.File2AccessUtc);
+
+        // Change both in output
+
+        File.WriteAllLines(output2.File1Path, ["foo"]);
+        File.WriteAllLines(output2.File2Path, ["foo"]);
+
+        DateTime file1AccessUtc = File.GetLastAccessTimeUtc(output2.File1Path);
+        DateTime file2AccessUtc = File.GetLastAccessTimeUtc(output2.File2Path);
+
+        file1AccessUtc.ShouldBeGreaterThan(output2.File1AccessUtc);
+        file2AccessUtc.ShouldBeGreaterThan(output2.File2AccessUtc);
+
+        // Run again - both should be copied
+
+        var output3 = RunCopyToOutputTest(false, skipUnchangedDuringCopy);
+
+        output3.File1AccessUtc.ShouldBeGreaterThan(file1AccessUtc);
+        output3.File2AccessUtc.ShouldBeGreaterThan(file2AccessUtc);
+    }
+
 
     [Theory]
     [InlineData(true, true)]
diff --git a/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/EntryProject/EntryProject.csproj b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/EntryProject/EntryProject.csproj
new file mode 100644
index 00000000000..1ac36d043de
--- /dev/null
+++ b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/EntryProject/EntryProject.csproj
@@ -0,0 +1,13 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net9.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\ReferencedProject\ReferencedProject.csproj" />
+  </ItemGroup>
+
+</Project>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/File1.txt b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/File1.txt
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/File2.txt b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/File2.txt
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/ReferencedProject.csproj b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/ReferencedProject.csproj
new file mode 100644
index 00000000000..1fbc7cacb17
--- /dev/null
+++ b/src/BuildCheck.UnitTests/TestAssets/CopyAlwaysTest/ReferencedProject/ReferencedProject.csproj
@@ -0,0 +1,18 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net9.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <PropertyGroup>
+    <SkipUnchangedFilesOnCopyAlways>$(SkipUnchanged)</SkipUnchangedFilesOnCopyAlways>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <None Include="File1.txt" CopyToOutputDirectory="Always" />
+    <None Include="File2.txt" CopyToOutputDirectory="IfDifferent" />
+  </ItemGroup>
+
+</Project>
diff --git a/src/BuildCheck.UnitTests/TestAssets/EmbeddedResourceTest/ReferencedProject/ReferencedProject.csproj b/src/BuildCheck.UnitTests/TestAssets/EmbeddedResourceTest/ReferencedProject/ReferencedProject.csproj
index 3950740a4da..4208181be80 100644
--- a/src/BuildCheck.UnitTests/TestAssets/EmbeddedResourceTest/ReferencedProject/ReferencedProject.csproj
+++ b/src/BuildCheck.UnitTests/TestAssets/EmbeddedResourceTest/ReferencedProject/ReferencedProject.csproj
@@ -7,25 +7,17 @@
     <Nullable>enable</Nullable>
   </PropertyGroup>
 
-  <ItemGroup>
-    <Compile Update="Resource1.Designer.cs">
-      <DesignTime>True</DesignTime>
-      <AutoGen>True</AutoGen>
-      <DependentUpon>Resource1.resx</DependentUpon>
-    </Compile>
-  </ItemGroup>
-
-	<PropertyGroup>
-		<RespectAlreadyAssignedItemCulture>$(RespectCulture)</RespectAlreadyAssignedItemCulture>
-	</PropertyGroup>
+  <PropertyGroup>
+    <RespectAlreadyAssignedItemCulture>$(RespectCulture)</RespectAlreadyAssignedItemCulture>
+  </PropertyGroup>
 
   <ItemGroup>
     <EmbeddedResource Update="Resource1.resx">
     </EmbeddedResource>
-	  <EmbeddedResource Update="Resource1.en.resx">
-		  <Culture>en</Culture>
-		  <LogicalName>Test.en.resources</LogicalName>
-	  </EmbeddedResource>
+    <EmbeddedResource Update="Resource1.en.resx">
+      <Culture>en</Culture>
+      <LogicalName>Test.en.resources</LogicalName>
+    </EmbeddedResource>
     ###EmbeddedResourceToAdd
   </ItemGroup>
 
