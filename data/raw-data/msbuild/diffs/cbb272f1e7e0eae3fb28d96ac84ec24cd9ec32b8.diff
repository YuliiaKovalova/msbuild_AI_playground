diff --git a/documentation/specs/event-source.md b/documentation/specs/event-source.md
index 18936da2249..cf482946781 100644
--- a/documentation/specs/event-source.md
+++ b/documentation/specs/event-source.md
@@ -21,6 +21,7 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major
 | GenerateResourceOverall | Uses resource APIs to transform resource files into strongly-typed resource classes. |
 | LoadDocument | Loads an XMLDocumentWithLocation from a path.
 | MSBuildExe | Executes MSBuild from the command line. |
+| MSBuildServerBuild | Executes a build from the MSBuildServer node. |
 | PacketReadSize | Reports the size of a packet sent between nodes. Note that this does not include time information. |
 | Parse | Parses an XML document into a ProjectRootElement. |
 | ProjectGraphConstruction | Constructs a dependency graph among projects. |
diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index 3b4236837ce..db8f88bfacb 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -82,6 +82,12 @@ public sealed class MSBuildClient
         /// </summary>
         private readonly BinaryWriter _binaryWriter;
 
+        /// <summary>
+        /// Used to estimate the size of the build with an ETW trace.
+        /// </summary>
+        private int _numConsoleWritePackets;
+        private long _sizeOfConsoleWritePackets;
+
         /// <summary>
         /// Public constructor with parameters.
         /// </summary>
@@ -123,14 +129,19 @@ public MSBuildClient(string exeLocation, string dllLocation)
         /// or the manner in which it failed.</returns>
         public MSBuildClientExitResult Execute(string commandLine, CancellationToken cancellationToken)
         {
+            CommunicationsUtilities.Trace("Executing build with command line '{0}'", commandLine);
             string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);
             string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);
 
             // Start server it if is not running.
             bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);
-            if (!serverIsAlreadyRunning && !TryLaunchServer())
+            if (!serverIsAlreadyRunning)
             {
-                return _exitResult;
+                CommunicationsUtilities.Trace("Server was not running. Starting server now.");
+                if (!TryLaunchServer())
+                {
+                    return _exitResult;
+                }
             }
 
             // Check that server is not busy.
@@ -152,6 +163,7 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
 
             // Send build command.
             // Let's send it outside the packet pump so that we easier and quicker deal with possible issues with connection to server.
+            MSBuildEventSource.Log.MSBuildServerBuildStart(commandLine);
             if (!TrySendBuildCommand(commandLine))
             {
                 CommunicationsUtilities.Trace("Failure to connect to a server.");
@@ -159,6 +171,9 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                 return _exitResult;
             }
 
+            _numConsoleWritePackets = 0;
+            _sizeOfConsoleWritePackets = 0;
+
             try
             {
                 // Start packet pump
@@ -175,6 +190,11 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                     packetPump.PacketReceivedEvent
                 };
 
+                if (NativeMethodsShared.IsWindows)
+                {
+                    SupportVT100();
+                }
+
                 while (!_buildFinished)
                 {
                     int index = WaitHandle.WaitAny(waitHandles);
@@ -209,10 +229,21 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                 _exitResult.MSBuildClientExitType = MSBuildClientExitType.Unexpected;
             }
 
+            MSBuildEventSource.Log.MSBuildServerBuildStop(commandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
             CommunicationsUtilities.Trace("Build finished.");
             return _exitResult;
         }
 
+        private void SupportVT100()
+        {
+            IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+            if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
+            {
+                consoleMode |= NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING | NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN;
+                NativeMethodsShared.SetConsoleMode(stdOut, consoleMode);
+            }
+        }
+
         private void SendCancelCommand(NamedPipeClientStream nodeStream) => throw new NotImplementedException();
 
         /// <summary>
@@ -614,7 +645,7 @@ private bool TrySendBuildCommand(string commandLine)
             {
                 ServerNodeBuildCommand buildCommand = GetServerNodeBuildCommand(commandLine);
                 WritePacket(_nodeStream, buildCommand);
-                CommunicationsUtilities.Trace("Build command send...");
+                CommunicationsUtilities.Trace("Build command sent...");
             }
             catch (Exception ex)
             {
@@ -688,7 +719,10 @@ private void HandlePacket(INodePacket packet)
             switch (packet.Type)
             {
                 case NodePacketType.ServerNodeConsoleWrite:
-                    HandleServerNodeConsoleWrite((ServerNodeConsoleWrite)packet);
+                    ServerNodeConsoleWrite writePacket = (packet as ServerNodeConsoleWrite)!;
+                    HandleServerNodeConsoleWrite(writePacket);
+                    _numConsoleWritePackets++;
+                    _sizeOfConsoleWritePackets += writePacket.Text.Length;
                     break;
                 case NodePacketType.ServerNodeBuildResult:
                     HandleServerNodeBuildResult((ServerNodeBuildResult)packet);
diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index c2402156971..b2c82c88ab6 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -214,7 +214,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
 
                         case 1:
                             {
-                                // Client recieved a packet header. Read the rest of a package.
+                                // Client recieved a packet header. Read the rest of it.
                                 int headerBytesRead = 0;
 #if FEATURE_APM
                                 headerBytesRead = localStream.EndRead(result);
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 25b39f379be..f795a3eceae 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -9,6 +9,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
+using System.Threading.Tasks;
 
 namespace Microsoft.Build.Execution
 {
@@ -19,6 +20,8 @@ public sealed class OutOfProcServerNode : INode, INodePacketFactory, INodePacket
     {
         private readonly Func<string, (int exitCode, string exitType)> _buildFunction;
 
+        private readonly Action _onCancel;
+
         /// <summary>
         /// The endpoint used to talk to the host.
         /// </summary>
@@ -59,11 +62,14 @@ public sealed class OutOfProcServerNode : INode, INodePacketFactory, INodePacket
         /// </summary>
         private readonly bool _debugCommunications;
 
+        private Task? _buildTask;
+
         private string _serverBusyMutexName = default!;
 
-        public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFunction)
+        public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFunction, Action onCancel)
         {
             _buildFunction = buildFunction;
+            _onCancel = onCancel;
             new Dictionary<string, string>();
             _debugCommunications = (Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM") == "1");
 
@@ -74,6 +80,7 @@ public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFu
 
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildCommand, ServerNodeBuildCommand.FactoryForDeserialization, this);
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
+            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildCancel, ServerNodeBuildCancel.FactoryForDeserialization, this);
         }
 
         #region INode Members
@@ -85,13 +92,14 @@ public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFu
         /// <returns>The reason for shutting down.</returns>
         public NodeEngineShutdownReason Run(out Exception? shutdownException)
         {
-            var handshake = new ServerNodeHandshake(
+            ServerNodeHandshake handshake = new(
                 CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture()));
 
             _serverBusyMutexName = GetBusyServerMutexName(handshake);
 
             // Handled race condition. If two processes spawn to start build Server one will die while
             // one Server client connects to the other one and run build on it.
+            CommunicationsUtilities.Trace("Starting new server node with handshake {0}", handshake);
             using var serverRunningMutex = ServerNamedMutex.OpenOrCreateMutex(GetRunningServerMutexName(handshake), out bool mutexCreatedNew);
             if (!mutexCreatedNew)
             {
@@ -104,7 +112,7 @@ public NodeEngineShutdownReason Run(out Exception? shutdownException)
             _nodeEndpoint.Listen(this);
 
             var waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
-
+            
             // Get the current directory before doing any work. We need this so we can restore the directory when the node shutsdown.
             while (true)
             {
@@ -268,13 +276,38 @@ private void HandlePacket(INodePacket packet)
             switch (packet.Type)
             {
                 case NodePacketType.ServerNodeBuildCommand:
-                    HandleServerNodeBuildCommand((ServerNodeBuildCommand)packet);
+                    HandleServerNodeBuildCommandAsync((ServerNodeBuildCommand)packet);
+                    break;
+                case NodePacketType.ServerNodeBuildCancel:
+                    _onCancel();
                     break;
             }
         }
 
+        private void HandleServerNodeBuildCommandAsync(ServerNodeBuildCommand command)
+        {
+            _buildTask = Task.Run(() =>
+            {
+                try
+                {
+                    HandleServerNodeBuildCommand(command);
+                }
+                catch(Exception e)
+                {
+                    _shutdownException = e;
+                    _shutdownReason = NodeEngineShutdownReason.Error;
+                    _shutdownEvent.Set();
+                }
+                finally
+                {
+                    _buildTask = null;
+                }
+            });
+        }
+
         private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
         {
+            CommunicationsUtilities.Trace("Building with MSBuild server with command line {0}", command.CommandLine);
             using var serverBusyMutex = ServerNamedMutex.OpenOrCreateMutex(name: _serverBusyMutexName, createdNew: out var holdsMutex);
             if (!holdsMutex)
             {
@@ -283,6 +316,8 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
                 _shutdownException = new InvalidOperationException("Client requested build while server is busy processing previous client build request.");
                 _shutdownReason = NodeEngineShutdownReason.Error;
                 _shutdownEvent.Set();
+
+                return;
             }
 
             // set build process context
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
new file mode 100644
index 00000000000..349c1b8170d
--- /dev/null
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
@@ -0,0 +1,20 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+namespace Microsoft.Build.BackEnd
+{
+    internal sealed class ServerNodeBuildCancel : INodePacket
+    {
+        public NodePacketType Type => NodePacketType.ServerNodeBuildCancel;
+
+        public void Translate(ITranslator translator)
+        {
+        }
+
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        {
+            return new ServerNodeBuildCancel();
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index d14821f787f..9c4bbac8ee4 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -155,6 +155,7 @@
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\ServerNamedMutex.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeBuildCancel.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index b7e25f06956..349a8e57aac 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -15,5 +15,5 @@ Microsoft.Build.Execution.MSBuildClientExitType.ServerBusy = 1 -> Microsoft.Buil
 Microsoft.Build.Execution.MSBuildClientExitType.Success = 0 -> Microsoft.Build.Execution.MSBuildClientExitType
 Microsoft.Build.Execution.MSBuildClientExitType.Unexpected = 4 -> Microsoft.Build.Execution.MSBuildClientExitType
 Microsoft.Build.Execution.OutOfProcServerNode
-Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
-Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
\ No newline at end of file
+Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction, System.Action onCancel) -> void
+Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index b7e25f06956..39c901f1b5c 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -15,5 +15,5 @@ Microsoft.Build.Execution.MSBuildClientExitType.ServerBusy = 1 -> Microsoft.Buil
 Microsoft.Build.Execution.MSBuildClientExitType.Success = 0 -> Microsoft.Build.Execution.MSBuildClientExitType
 Microsoft.Build.Execution.MSBuildClientExitType.Unexpected = 4 -> Microsoft.Build.Execution.MSBuildClientExitType
 Microsoft.Build.Execution.OutOfProcServerNode
-Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
+Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction, System.Action onCancel) -> void
 Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
\ No newline at end of file
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index b4e335f7849..708f5f6a31b 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -599,6 +599,18 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis
             WriteEvent(80, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
+        [Event(81, Keywords = Keywords.All)]
+        public void MSBuildServerBuildStart(string commandLine)
+        {
+            WriteEvent(81, commandLine);
+        }
+
+        [Event(82, Keywords = Keywords.All)]
+        public void MSBuildServerBuildStop(string commandLine, int countOfConsoleMessages, long sumSizeOfConsoleMessages, string clientExitType, string serverExitType)
+        {
+            WriteEvent(82, commandLine, countOfConsoleMessages, sumSizeOfConsoleMessages, clientExitType, serverExitType);
+        }
+
         #endregion
     }
 }
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 9e68fc71c4e..5b990331277 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -10,7 +10,6 @@
 using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Versioning;
-using System.Text;
 using System.Threading;
 
 using Microsoft.Build.Shared;
@@ -37,6 +36,8 @@ internal static class NativeMethods
     internal const uint RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG = 0x40;
     internal const uint FILE_TYPE_CHAR = 0x0002;
     internal const Int32 STD_OUTPUT_HANDLE = -11;
+    internal const uint DISABLE_NEWLINE_AUTO_RETURN = 0x0008;
+    internal const uint ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004;
     internal const uint RPC_S_CALLPENDING = 0x80010115;
     internal const uint E_ABORT = (uint)0x80004004;
 
@@ -1488,6 +1489,12 @@ internal static void VerifyThrowWin32Result(int result)
     [DllImport("kernel32.dll")]
     internal static extern IntPtr GetStdHandle(int nStdHandle);
 
+    [DllImport("kernel32.dll")]
+    internal static extern bool GetConsoleMode(IntPtr hConsoleHandle, out uint lpMode);
+
+    [DllImport("kernel32.dll")]
+    internal static extern bool SetConsoleMode(IntPtr hConsoleHandle, uint dwMode);
+
     [DllImport("kernel32.dll")]
     internal static extern uint GetFileType(IntPtr hFile);
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index f3665f0c80b..b7d98c179d5 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2684,7 +2684,14 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches, bool
                         return (exitCode, exitType.ToString());
                     };
 
-                    OutOfProcServerNode node = new(buildFunction);
+                    Action onCancel = () =>
+                    {
+                        Console.WriteLine(ResourceUtilities.GetResourceString("AbortingBuild"));
+
+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();
+                    };
+
+                    OutOfProcServerNode node = new(buildFunction, onCancel);
 
                     s_isServerNode = true;
                     shutdownReason = node.Run(out nodeException);
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index b0ec1f1f6c5..0ddbf49a0d7 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -207,6 +207,12 @@ internal enum NodePacketType : byte
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
         ServerNodeConsoleWrite = 0xF2,
+
+        /// <summary>
+        /// Command to cancel ongoing build. 
+        /// Keep this enum value constant intact as this is part of contract with dotnet CLI
+        /// </summary>
+        ServerNodeBuildCancel = 0xF3,
     }
     #endregion
 
