diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index 084b637192a..94041f85132 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -2442,5 +2442,97 @@ public void TryParseConfigurationPlatform(string input, bool isPlatformRequired,
                 Assert.Equal(expectedPlatform, actualPlatform.ToString());
             }
         }
+
+        [Theory]
+        [InlineData("", false, -1, -1)]
+        [InlineData(
+            """
+            Microsoft Visual Studio Solution File, Format Version 8.00
+                Project('{FE3BBBB6-72D5-11D2-9ACE-00C04F79A2A4}') = 'someproj', 'someproj.etp', '{AD0F3D02-9925-4D57-9DAF-E0A9D936ABDB}'
+                    ProjectSection(ProjectDependencies) = postProject
+                    EndProjectSection
+                EndProject";
+            """,
+            true,
+            8,
+            0)]
+        [InlineData(
+            """
+            Microsoft Visual Studio Solution File, Format Version 8.00
+            """,
+            true,
+            8,
+            0)]
+        [InlineData(
+            """
+            Microsoft Visual Studio Solution File, Format Version 12.00
+            # Visual Studio Version 17
+            VisualStudioVersion = 17.0.31903.59
+            MinimumVisualStudioVersion = 17.0.31903.59
+            """,
+            true,
+            12,
+            17)]
+        [InlineData(
+            // Leading blank line
+            """
+
+            Microsoft Visual Studio Solution File, Format Version 12.00
+            # Visual Studio Version 17
+            VisualStudioVersion = 17.0.31903.59
+            MinimumVisualStudioVersion = 17.0.31903.59
+            """,
+            true,
+            12,
+            17)]
+        [InlineData(
+            // Lines indented
+            """
+                    Microsoft Visual Studio Solution File, Format Version 12.00
+                    # Visual Studio Version 17
+                    VisualStudioVersion = 17.0.31903.59
+                    MinimumVisualStudioVersion = 17.0.31903.59
+            """,
+            true,
+            12,
+            17)]
+        [InlineData(
+            // Version is too early
+            """
+            Microsoft Visual Studio Solution File, Format Version 6.00
+                Project('{FE3BBBB6-72D5-11D2-9ACE-00C04F79A2A4}') = 'someproj', 'someproj.etp', '{AD0F3D02-9925-4D57-9DAF-E0A9D936ABDB}'
+                    ProjectSection(ProjectDependencies) = postProject
+                    EndProjectSection
+                EndProject";
+            """,
+            false,
+            0,
+            0)]
+        public void GetSolutionFileAndVisualStudioMajorVersions(string content, bool expectedSuccess, int expectedSolutionVersion, int expectedVisualStudioMajorVersion)
+        {
+            string solutionPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
+            StringReader reader = new(content);
+
+            if (expectedSuccess)
+            {
+                SolutionFile.GetSolutionFileAndVisualStudioMajorVersions(
+                    reader,
+                    solutionPath,
+                    out int actualSolutionVersion,
+                    out int actualVisualStudioMajorVersion);
+
+                Assert.Equal(expectedSolutionVersion, actualSolutionVersion);
+                Assert.Equal(expectedVisualStudioMajorVersion, actualVisualStudioMajorVersion);
+            }
+            else
+            {
+                Assert.Throws<InvalidProjectFileException>(() =>
+                    SolutionFile.GetSolutionFileAndVisualStudioMajorVersions(
+                        reader,
+                        solutionPath,
+                        out int actualSolutionVersion,
+                        out int actualVisualStudioMajorVersion));
+            }
+        }
     }
 }
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index b54e55e4752..52cb3b5bb18 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -287,78 +287,83 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(string solution
             ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(solutionFile), "null solution file passed to GetSolutionFileMajorVersion!");
             ErrorUtilities.VerifyThrowInternalRooted(solutionFile);
 
+            // Open the file
+            using FileStream fileStream = File.OpenRead(solutionFile);
+            using StreamReader reader = new(fileStream, Encoding.GetEncoding(0)); // HIGHCHAR: If solution files have no byte-order marks, then assume ANSI rather than ASCII.
+
+            GetSolutionFileAndVisualStudioMajorVersions(reader, solutionFile, out solutionVersion, out visualStudioMajorVersion);
+        }
+
+        /// <summary>
+        /// Given a solution file, parses the header and returns the major version numbers of the solution file
+        /// and the visual studio. 
+        /// Throws InvalidProjectFileException if the solution header is invalid, or if the version is less than 
+        /// our minimum version. 
+        /// </summary>
+        internal static void GetSolutionFileAndVisualStudioMajorVersions(TextReader reader, string solutionFile, out int solutionVersion, out int visualStudioMajorVersion)
+        {
+            ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(solutionFile), "null solution file passed to GetSolutionFileMajorVersion!");
+            ErrorUtilities.VerifyThrowInternalRooted(solutionFile);
+
             const string slnFileHeaderNoVersion = "Microsoft Visual Studio Solution File, Format Version ";
             const string slnFileVSVLinePrefix = "VisualStudioVersion";
-            FileStream fileStream = null;
-            StreamReader reader = null;
+
             bool validVersionFound = false;
 
             solutionVersion = 0;
             visualStudioMajorVersion = 0;
 
-            try
+            // Read first 4 lines of the solution file. 
+            // The header is expected to be in line 1 or 2
+            // VisualStudioVersion is expected to be in line 3 or 4.
+            for (int i = 0; i < 4; i++)
             {
-                // Open the file
-                fileStream = File.OpenRead(solutionFile);
-                reader = new StreamReader(fileStream, Encoding.GetEncoding(0)); // HIGHCHAR: If solution files have no byte-order marks, then assume ANSI rather than ASCII.
+                string line = reader.ReadLine();
 
-                // Read first 4 lines of the solution file. 
-                // The header is expected to be in line 1 or 2
-                // VisualStudioVersion is expected to be in line 3 or 4.
-                for (int i = 0; i < 4; i++)
+                if (line == null)
                 {
-                    string line = reader.ReadLine();
+                    break;
+                }
 
-                    if (line == null)
-                    {
-                        break;
-                    }
+                if (line.Trim().StartsWith(slnFileHeaderNoVersion, StringComparison.Ordinal))
+                {
+                    // Found it. Validate the version.
+                    string fileVersionFromHeader = line.Substring(slnFileHeaderNoVersion.Length);
 
-                    if (line.Trim().StartsWith(slnFileHeaderNoVersion, StringComparison.Ordinal))
+                    if (!System.Version.TryParse(fileVersionFromHeader, out Version version))
                     {
-                        // Found it. Validate the version.
-                        string fileVersionFromHeader = line.Substring(slnFileHeaderNoVersion.Length);
-
-                        if (!System.Version.TryParse(fileVersionFromHeader, out Version version))
-                        {
-                            ProjectFileErrorUtilities.ThrowInvalidProjectFile(
-                                "SubCategoryForSolutionParsingErrors",
-                                new BuildEventFileInfo(solutionFile),
-                                "SolutionParseVersionMismatchError",
-                                slnFileMinUpgradableVersion,
-                                slnFileMaxVersion);
-                        }
-
-                        solutionVersion = version.Major;
+                        ProjectFileErrorUtilities.ThrowInvalidProjectFile(
+                            "SubCategoryForSolutionParsingErrors",
+                            new BuildEventFileInfo(solutionFile),
+                            "SolutionParseVersionMismatchError",
+                            slnFileMinUpgradableVersion,
+                            slnFileMaxVersion);
+                    }
 
-                        // Validate against our min & max
-                        if (solutionVersion < slnFileMinUpgradableVersion)
-                        {
-                            ProjectFileErrorUtilities.ThrowInvalidProjectFile(
-                                "SubCategoryForSolutionParsingErrors",
-                                new BuildEventFileInfo(solutionFile),
-                                "SolutionParseVersionMismatchError",
-                                slnFileMinUpgradableVersion,
-                                slnFileMaxVersion);
-                        }
+                    solutionVersion = version.Major;
 
-                        validVersionFound = true;
+                    // Validate against our min & max
+                    if (solutionVersion < slnFileMinUpgradableVersion)
+                    {
+                        ProjectFileErrorUtilities.ThrowInvalidProjectFile(
+                            "SubCategoryForSolutionParsingErrors",
+                            new BuildEventFileInfo(solutionFile),
+                            "SolutionParseVersionMismatchError",
+                            slnFileMinUpgradableVersion,
+                            slnFileMaxVersion);
                     }
-                    else if (line.Trim().StartsWith(slnFileVSVLinePrefix, StringComparison.Ordinal))
+
+                    validVersionFound = true;
+                }
+                else if (line.Trim().StartsWith(slnFileVSVLinePrefix, StringComparison.Ordinal))
+                {
+                    Version visualStudioVersion = ParseVisualStudioVersion(line.AsSpan());
+                    if (visualStudioVersion != null)
                     {
-                        Version visualStudioVersion = ParseVisualStudioVersion(line.AsSpan());
-                        if (visualStudioVersion != null)
-                        {
-                            visualStudioMajorVersion = visualStudioVersion.Major;
-                        }
+                        visualStudioMajorVersion = visualStudioVersion.Major;
                     }
                 }
             }
-            finally
-            {
-                fileStream?.Dispose();
-                reader?.Dispose();
-            }
 
             if (validVersionFound)
             {
