diff --git a/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs
deleted file mode 100644
index 9a07897b708..00000000000
--- a/src/Tasks.UnitTests/AssemblyDependency/BaseComparer.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-
-namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
-{
-    internal abstract class BaseComparer<T> : EqualityComparer<T>
-    {
-        protected bool CollectionEquals<TIn>(IEnumerable<TIn> c1, IEnumerable<TIn> c2, IEqualityComparer<TIn> equalityComparer)
-        {
-            if (c1 == null)
-            {
-                return c2 == null;
-            }
-
-            return c1.SequenceEqual(c2, equalityComparer);
-        }
-
-        public override int GetHashCode(T obj)
-        {
-            throw new NotSupportedException();
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 8593245ce4f..17b8a60e96f 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -3311,7 +3311,7 @@ public void ParentAssemblyResolvedFromAForGac()
         /// <returns></returns>
         private ReferenceTable GenerateTableWithAssemblyFromTheGlobalLocation(string location)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -6775,7 +6775,7 @@ public void ReferenceTableDependentItemsInBlackList3()
         [Fact]
         public void ReferenceTableDependentItemsInBlackList4()
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -6953,7 +6953,7 @@ public void ReferenceTableDependentItemsInBlackListPrimaryWithSpecificVersion()
 
         private static ReferenceTable MakeEmptyReferenceTable(TaskLoggingHelper log)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs
deleted file mode 100644
index 2b089a3a359..00000000000
--- a/src/Tasks.UnitTests/AssemblyDependency/RARRequestComparer.cs
+++ /dev/null
@@ -1,71 +0,0 @@
-﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-using System;
-using System.Collections.Generic;
-
-namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
-{
-
-    internal class RARRequestComparer
-        : BaseComparer<ResolveAssemblyReferenceRequest>
-    {
-        internal static IEqualityComparer<ResolveAssemblyReferenceRequest> Instance { get; } = new RARRequestComparer();
-
-        private static readonly IEqualityComparer<string> StringEqualityComparer = StringComparer.InvariantCulture;
-
-        private RARRequestComparer() { }
-
-        public override bool Equals(ResolveAssemblyReferenceRequest x, ResolveAssemblyReferenceRequest y)
-        {
-            // Same reference or null
-            if (x == y)
-                return true;
-
-            if (x == null || y == null)
-                return false;
-
-            bool fieldsEqual = y != null &&
-                   x.AppConfigFile == y.AppConfigFile &&
-                   x.AutoUnify == y.AutoUnify &&
-                   x.CopyLocalDependenciesWhenParentReferenceInGac == y.CopyLocalDependenciesWhenParentReferenceInGac &&
-                   x.DoNotCopyLocalIfInGac == y.DoNotCopyLocalIfInGac &&
-                   x.FindDependencies == y.FindDependencies &&
-                   x.FindDependenciesOfExternallyResolvedReferences == y.FindDependenciesOfExternallyResolvedReferences &&
-                   x.FindRelatedFiles == y.FindRelatedFiles &&
-                   x.FindSatellites == y.FindSatellites &&
-                   x.FindSerializationAssemblies == y.FindSerializationAssemblies &&
-                   x.IgnoreDefaultInstalledAssemblySubsetTables == y.IgnoreDefaultInstalledAssemblySubsetTables &&
-                   x.IgnoreDefaultInstalledAssemblyTables == y.IgnoreDefaultInstalledAssemblyTables &&
-                   x.IgnoreTargetFrameworkAttributeVersionMismatch == y.IgnoreTargetFrameworkAttributeVersionMismatch &&
-                   x.IgnoreVersionForFrameworkReferences == y.IgnoreVersionForFrameworkReferences &&
-                   x.ProfileName == y.ProfileName &&
-                   x.Silent == y.Silent &&
-                   x.StateFile == y.StateFile &&
-                   x.SupportsBindingRedirectGeneration == y.SupportsBindingRedirectGeneration &&
-                   x.TargetedRuntimeVersion == y.TargetedRuntimeVersion &&
-                   x.TargetFrameworkMoniker == y.TargetFrameworkMoniker &&
-                   x.TargetFrameworkMonikerDisplayName == y.TargetFrameworkMonikerDisplayName &&
-                   x.TargetFrameworkVersion == y.TargetFrameworkVersion &&
-                   x.TargetProcessorArchitecture == y.TargetProcessorArchitecture &&
-                   x.UnresolveFrameworkAssembliesFromHigherFrameworks == y.UnresolveFrameworkAssembliesFromHigherFrameworks &&
-                   x.UseResolveAssemblyReferenceService == y.UseResolveAssemblyReferenceService &&
-                   x.WarnOrErrorOnTargetArchitectureMismatch == y.WarnOrErrorOnTargetArchitectureMismatch;
-
-            return fieldsEqual &&
-                   CollectionEquals(x.AllowedAssemblyExtensions, y.AllowedAssemblyExtensions, StringEqualityComparer) &&
-                   CollectionEquals(x.AllowedRelatedFileExtensions, y.AllowedRelatedFileExtensions, StringEqualityComparer) &&
-                   CollectionEquals(x.Assemblies, y.Assemblies, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.AssemblyFiles, y.AssemblyFiles, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.CandidateAssemblyFiles, y.CandidateAssemblyFiles, StringEqualityComparer) &&
-                   CollectionEquals(x.FullFrameworkAssemblyTables, y.FullFrameworkAssemblyTables, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.FullFrameworkFolders, y.FullFrameworkFolders, StringEqualityComparer) &&
-                   CollectionEquals(x.FullTargetFrameworkSubsetNames, y.FullTargetFrameworkSubsetNames, StringEqualityComparer) &&
-                   CollectionEquals(x.InstalledAssemblySubsetTables, y.InstalledAssemblySubsetTables, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.InstalledAssemblyTables, y.InstalledAssemblyTables, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.LatestTargetFrameworkDirectories, y.LatestTargetFrameworkDirectories, StringEqualityComparer) &&
-                   CollectionEquals(x.ResolvedSDKReferences, y.ResolvedSDKReferences, ReadOnlyTaskItemComparer.Instance) &&
-                   CollectionEquals(x.SearchPaths, y.SearchPaths, StringEqualityComparer) &&
-                   CollectionEquals(x.TargetFrameworkDirectories, y.TargetFrameworkDirectories, StringEqualityComparer) &&
-                   CollectionEquals(x.TargetFrameworkSubsets, y.TargetFrameworkSubsets, StringEqualityComparer);
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs
deleted file mode 100644
index dad0216dca6..00000000000
--- a/src/Tasks.UnitTests/AssemblyDependency/RARResponseComparer.cs
+++ /dev/null
@@ -1,32 +0,0 @@
-﻿using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-using System.Collections.Generic;
-
-namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
-{
-    internal class RARResponseComparer : BaseComparer<ResolveAssemblyReferenceResponse>
-    {
-        public static IEqualityComparer<ResolveAssemblyReferenceResponse> Instance { get; } = new RARResponseComparer();
-
-        public override bool Equals(ResolveAssemblyReferenceResponse x, ResolveAssemblyReferenceResponse y)
-        {
-            if (x == y)
-                return true;
-
-            if (x == null || y == null)
-                return false;
-
-            return y != null &&
-               CollectionEquals(x.CopyLocalFiles, y.CopyLocalFiles, ReadOnlyTaskItemComparer.Instance) &&
-               x.DependsOnNETStandard == y.DependsOnNETStandard &&
-               x.DependsOnSystemRuntime == y.DependsOnSystemRuntime &&
-               CollectionEquals(x.FilesWritten, y.FilesWritten, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.RelatedFiles, y.RelatedFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.ResolvedDependencyFiles, y.ResolvedDependencyFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.ResolvedFiles, y.ResolvedFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.SatelliteFiles, y.SatelliteFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.ScatterFiles, y.ScatterFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.SerializationAssemblyFiles, y.SerializationAssemblyFiles, ReadOnlyTaskItemComparer.Instance) &&
-               CollectionEquals(x.SuggestedRedirects, y.SuggestedRedirects, ReadOnlyTaskItemComparer.Instance);
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
deleted file mode 100644
index 7fbfc9738fc..00000000000
--- a/src/Tasks.UnitTests/AssemblyDependency/RARResultComparer.cs
+++ /dev/null
@@ -1,30 +0,0 @@
-﻿using Microsoft.Build.Framework;
-using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-
-namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
-{
-    internal class RARResultComparer : BaseComparer<ResolveAssemblyReferenceResult>
-    {
-        public static IEqualityComparer<ResolveAssemblyReferenceResult> Instance { get; } = new RARResultComparer();
-
-        public override bool Equals(ResolveAssemblyReferenceResult x, ResolveAssemblyReferenceResult y)
-        {
-            if (x == y)
-                return true;
-
-            if (x == null || y == null)
-                return false;
-
-            return x.TaskResult == y.TaskResult &&
-                CollectionEquals(x.BuildErrorEvents?.Select(e => e.Message).ToList(), y.BuildErrorEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
-                CollectionEquals(x.BuildMessageEvents?.Select(e => e.Message).ToList(), y.BuildMessageEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
-                CollectionEquals(x.BuildWarningEvents?.Select(e => e.Message).ToList(), y.BuildWarningEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
-                CollectionEquals(x.CustomBuildEvents?.Select(e => e.Message).ToList(), y.CustomBuildEvents?.Select(e => e.Message).ToList(), StringComparer.OrdinalIgnoreCase) &&
-                RARResponseComparer.Instance.Equals(x.Response, y.Response);
-                
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs b/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs
deleted file mode 100644
index be85be3f2b7..00000000000
--- a/src/Tasks.UnitTests/AssemblyDependency/ReadOnlyTaskItemComparer.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-﻿using System;
-using System.Collections;
-using System.Collections.Generic;
-using System.Linq;
-using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
-
-namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
-{
-    internal class ReadOnlyTaskItemComparer : BaseComparer<ReadOnlyTaskItem>
-    {
-        internal static IEqualityComparer<ReadOnlyTaskItem> Instance { get; } = new ReadOnlyTaskItemComparer();
-        private ReadOnlyTaskItemComparer() { }
-
-        public override bool Equals(ReadOnlyTaskItem x, ReadOnlyTaskItem y)
-        {
-            // Same reference or null
-            if (x == y)
-                return true;
-
-            return
-                //EqualityComparer<ICollection>.Default.Equals(x.MetadataNames.Count, y.MetadataNames) &&
-               x.MetadataCount == y.MetadataCount &&
-               x.ItemSpec == y.ItemSpec &&
-               CollectionEquals(x.MetadataNameToValue, y.MetadataNameToValue, EqualityComparer<KeyValuePair<string, string>>.Default) &&
-               x.EvaluatedIncludeEscaped == y.EvaluatedIncludeEscaped;
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
index b1986fd0bc6..bafe42c80fb 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Services;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests;
 using Microsoft.Build.Utilities;
 using Nerdbank.Streams;
 using Shouldly;
@@ -19,13 +21,17 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Xunit;
-
+using Xunit.Abstractions;
 using Task = System.Threading.Tasks.Task;
 
 namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
 {
-    public sealed class ResolveAssemblyReferenceAsAService_Tests
+    public sealed class ResolveAssemblyReferenceAsAService_Tests : ResolveAssemblyReferenceTestFixture
     {
+        public ResolveAssemblyReferenceAsAService_Tests(ITestOutputHelper output) : base(output)
+        {
+        }
+
         [Fact]
         public void EnsureInputPropertiesMatch()
         {
@@ -33,10 +39,9 @@ public void EnsureInputPropertiesMatch()
                 .Where(p => !p.GetCustomAttributes(typeof(OutputAttribute), true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
             string[] inputProperties = typeof(ResolveAssemblyReferenceTaskInput).GetProperties().Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
 
-            Assert.Equal(rarInputProperties.Length, inputProperties.Length);
             foreach (var item in rarInputProperties)
             {
-                Assert.Contains(item, inputProperties);
+                inputProperties.ShouldContain(item);
             }
         }
 
@@ -47,10 +52,9 @@ public void EnsureOutputPropertiesMatch()
                 .Where(p => p.GetCustomAttributes(typeof(OutputAttribute), true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
             string[] inputProperties = typeof(ResolveAssemblyReferenceTaskOutput).GetProperties().Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
 
-            Assert.Equal(rarInputProperties.Length, inputProperties.Length);
             foreach (var item in rarInputProperties)
             {
-                Assert.Contains(item, inputProperties);
+                inputProperties.ShouldContain(item);
             }
         }
 
@@ -70,7 +74,7 @@ public void TransferedRequestEquals()
             byte[] data = MessagePackSerializer.Serialize(request);
             ResolveAssemblyReferenceRequest requestDes = MessagePackSerializer.Deserialize<ResolveAssemblyReferenceRequest>(data);
 
-            Assert.Equal(request, requestDes, RARRequestComparer.Instance);
+            ResolveAssemblyReferenceComparer.CompareInput(request, requestDes).ShouldBeTrue();
         }
 
 
@@ -79,54 +83,36 @@ public void TransmitDataTest()
         {
             using CancellationTokenSource cts = new CancellationTokenSource();
             (Stream serverStream, Stream clientStream) = FullDuplexStream.CreatePair();
+            MockEngine e = new MockEngine(_output)
+            {
+                ClientStream = clientStream
+            };
 
             RarController controller = new RarController(string.Empty, null, null);
             Task serverTask = controller.HandleClientAsync(serverStream, cts.Token);
-            RarClient client = new RarClient(new RarTestEngine(clientStream));
+            RarClient client = new RarClient(e);
             ITaskItem[] assemblyNames = new TaskItem[]
             {
                 new TaskItem("DependsOnEverettSystem, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=feedbeadbadcadbe")
             };
 
-            ResolveAssemblyReference rar = new ResolveAssemblyReference();
-            rar.Assemblies = assemblyNames;
+            ResolveAssemblyReference rar = new ResolveAssemblyReference
+            {
+                Assemblies = assemblyNames
+            };
+
             ResolveAssemblyReferenceRequest request = new ResolveAssemblyReferenceRequest(rar.ResolveAssemblyReferenceInput);
-            ResolveAssemblyReferenceTaskHandler handler = new ResolveAssemblyReferenceTaskHandler();
+            ResolveAssemblyReferenceHandler handler = new ResolveAssemblyReferenceHandler();
             ResolveAssemblyReferenceResult expectedResult = handler.Execute(request);
 
             client.Connect();
             ResolveAssemblyReferenceResult result = client.Execute(rar.ResolveAssemblyReferenceInput);
             cts.Cancel();
 
-            Assert.Equal(expectedResult, result, RARResultComparer.Instance);
+            ResolveAssemblyReferenceComparer.CompareOutput(expectedResult.Response, result.Response).ShouldBeTrue();
 
             serverStream.Dispose();
             clientStream.Dispose();
         }
-
-        class RarTestEngine : IRarBuildEngine
-        {
-            public Stream ClientStream { get; }
-
-            public RarTestEngine(Stream clientStream)
-            {
-                ClientStream = clientStream;
-            }
-
-            bool IRarBuildEngine.CreateRarNode()
-            {
-                throw new NotImplementedException();
-            }
-
-            Stream IRarBuildEngine.GetRarClientStream(string pipeName, int timeout)
-            {
-                return ClientStream;
-            }
-
-            string IRarBuildEngine.GetRarPipeName()
-            {
-                return string.Empty;
-            }
-        }
     }
 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index c2b855a00e7..847020bd852 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -15,6 +15,12 @@
 using Xunit;
 using Xunit.Abstractions;
 using Shouldly;
+using Nerdbank.Streams;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract;
+using System.Threading.Tasks;
+using System.Threading;
+using Microsoft.Build.Tasks.ResolveAssemblyReferences.Services;
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
@@ -171,8 +177,6 @@ public class ResolveAssemblyReferenceTestFixture : IDisposable
         public ResolveAssemblyReferenceTestFixture(ITestOutputHelper output)
         {
             Environment.SetEnvironmentVariable("MSBUILDDISABLEASSEMBLYFOLDERSEXCACHE", "1");
-
-            _output = output;
         }
 
         public void Dispose()
@@ -2958,9 +2962,9 @@ protected static bool ContainsItem(ITaskItem[] items, string spec)
         /// <remarks>
         /// NOTE! This test is not in fact completely isolated from its environment: it is reading the real redist lists.
         /// </remarks>
-        protected static bool Execute(ResolveAssemblyReference t, RARSimulationMode RARSimulationMode = RARSimulationMode.LoadAndBuildProject)
+        protected static bool Execute(ResolveAssemblyReference t, RARSimulationMode RARSimulationMode = RARSimulationMode.LoadAndBuildProject, bool useRarService = true)
         {
-            return Execute(t, true, RARSimulationMode);
+            return Execute(t, true, RARSimulationMode, useRarService);
         }
 
         [Flags]
@@ -2971,11 +2975,51 @@ public enum RARSimulationMode
             LoadAndBuildProject = LoadProject | BuildProject
         }
 
+        private class RarHandler : IResolveAssemblyReferenceTaskHandler
+        {
+            public void Dispose()
+            {
+            }
+
+            public Task<ResolveAssemblyReferenceResult> ExecuteAsync(ResolveAssemblyReferenceRequest input, CancellationToken cancellationToken = default)
+            {
+                return System.Threading.Tasks.Task.FromResult(Execute(input));
+
+            }
+
+            internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest input)
+            {
+                ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
+                ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
+                //ResolveAssemblyReference task = GetResolveAssemblyReferenceTask(buildEngine);
+                ResolveAssemblyReference task = new ResolveAssemblyReference
+                {
+                    BuildEngine = buildEngine
+                };
+
+                task.ResolveAssemblyReferenceInput = taskInput;
+                bool taskResult = ExecuteRarTask(task);
+                ResolveAssemblyReferenceResult result = new ResolveAssemblyReferenceResult(taskResult, task.ResolveAssemblyReferenceOutput, task.ResolveAssemblyReferenceInput)
+                {
+                    CustomBuildEvents = buildEngine.CustomBuildEvent,
+                    BuildMessageEvents = buildEngine.MessageBuildEvent,
+                    BuildWarningEvents = buildEngine.WarningBuildEvent,
+                    BuildErrorEvents = buildEngine.ErrorBuildEvent,
+
+                    EventCount = buildEngine.EventCount
+                };
+
+                //System.Console.WriteLine("RAR task: {0}. Logged {1} events", result.TaskResult ? "Succeded" : "Failed", result.EventCount);
+
+                return result;
+            }
+        }
+
         /// <summary>
         /// Execute the task. Without confirming that the number of files resolved with and without find dependencies is identical.
         /// This is because profiles could cause the number of primary references to be different.
         /// </summary>
-        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck, RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject)
+        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck, RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject, bool useRarService = true)
         {
             string tempPath = Path.GetTempPath();
             string redistListPath = Path.Combine(tempPath, Guid.NewGuid() + ".xml");
@@ -2984,6 +3028,22 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 
             bool succeeded = false;
 
+            bool usingRarService = false;
+            System.Threading.Tasks.Task serverTask = null;
+            Stream clientStream = null, serverStream = null;
+            if (useRarService)
+            {
+                if (t.BuildEngine is MockEngine e)
+                {
+                    (serverStream, clientStream) = FullDuplexStream.CreatePair();
+                    e.ClientStream = clientStream;
+                    RarController rarController = new RarController(string.Empty, null, null, new RarHandler());
+                    serverTask = rarController.HandleClientAsync(serverStream);
+                    usingRarService = true;
+                    t.UseResolveAssemblyReferenceService = true;
+                }
+            }
+
             try
             {
                 // Set the InstalledAssemblyTables parameter.
@@ -3003,27 +3063,15 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     t.FindSerializationAssemblies = false;
                     t.FindRelatedFiles = false;
                     t.StateFile = null;
-	                t.Execute
-	                (
-	                    fileExists,
-	                    directoryExists,
-	                    getDirectories,
-	                    getAssemblyName,
-	                    getAssemblyMetadata,
-	#if FEATURE_WIN32_REGISTRY
-	                    getRegistrySubKeyNames,
-	                    getRegistrySubKeyDefaultValue,
-	#endif
-	                    getLastWriteTime,
-	                    getRuntimeVersion,
-	#if FEATURE_WIN32_REGISTRY
-	                    openBaseKey,
-	#endif
-	                    checkIfAssemblyIsInGac,
-	                    isWinMDFile,
-	                    readMachineTypeFromPEHeader
-	                );
 
+                    if (usingRarService)
+                    {
+                        t.Execute();
+                    }
+                    else
+                    {
+                        ExecuteRarTask(t);
+                    }
                     // A few checks. These should always be true or it may be a perf issue for project load.
                     ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
                     if (t.ResolvedFiles != null)
@@ -3064,27 +3112,22 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                     string cache = rarCacheFile;
                     t.StateFile = cache;
                     File.Delete(t.StateFile);
-	                succeeded =
-	                    t.Execute
-	                    (
-	                        fileExists,
-	                        directoryExists,
-	                        getDirectories,
-	                        getAssemblyName,
-	                        getAssemblyMetadata,
-	#if FEATURE_WIN32_REGISTRY
-	                        getRegistrySubKeyNames,
-	                        getRegistrySubKeyDefaultValue,
-	#endif
-	                        getLastWriteTime,
-	                        getRuntimeVersion,
-	#if FEATURE_WIN32_REGISTRY
-	                        openBaseKey,
-	#endif
-	                        checkIfAssemblyIsInGac,
-	                        isWinMDFile,
-	                        readMachineTypeFromPEHeader
-	                    );
+
+                    if (usingRarService)
+                    {
+                        serverStream?.Dispose();
+                        clientStream?.Dispose();
+                        (serverStream, clientStream) = FullDuplexStream.CreatePair();
+                        e.ClientStream = clientStream;
+                        RarController rarController = new RarController(string.Empty, null, null, new RarHandler());
+                        serverTask = rarController.HandleClientAsync(serverStream);
+
+                        succeeded = t.Execute();
+                    }
+                    else
+                    {
+                        succeeded = ExecuteRarTask(t);
+                    }
                     if (FileUtilities.FileExistsNoThrow(t.StateFile))
                     {
                         Assert.Single(t.FilesWritten);
@@ -3115,10 +3158,37 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                 {
                     FileUtilities.DeleteNoThrow(rarCacheFile);
                 }
+
+                serverStream?.Dispose();
+                clientStream?.Dispose();
             }
             return succeeded;
         }
 
+        private static bool ExecuteRarTask(ResolveAssemblyReference t)
+        {
+            return t.Execute
+                (
+                    fileExists,
+                    directoryExists,
+                    getDirectories,
+                    getAssemblyName,
+                    getAssemblyMetadata,
+#if FEATURE_WIN32_REGISTRY
+                            getRegistrySubKeyNames,
+                    getRegistrySubKeyDefaultValue,
+#endif
+                            getLastWriteTime,
+                    getRuntimeVersion,
+#if FEATURE_WIN32_REGISTRY
+                            openBaseKey,
+#endif
+                            checkIfAssemblyIsInGac,
+                    isWinMDFile,
+                    readMachineTypeFromPEHeader
+                );
+        }
+
         /// <summary>
         /// Helper method which allows tests to specify additional assembly search paths.
         /// </summary>
diff --git a/src/Tasks.UnitTests/HintPathResolver_Tests.cs b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
index 37f8f89445c..c88b6e09a75 100644
--- a/src/Tasks.UnitTests/HintPathResolver_Tests.cs
+++ b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
@@ -67,7 +67,8 @@ private bool ResolveHintPath(string hintPath)
                 getAssemblyName: (path) => throw new NotImplementedException(), // not called in this code path
                 fileExists: p => FileUtilities.FileExistsNoThrow(p),
                 getRuntimeVersion: (path) => throw new NotImplementedException(), // not called in this code path
-                targetedRuntimeVesion: Version.Parse("4.0.30319"));
+                targetedRuntimeVesion: Version.Parse("4.0.30319"),
+                getRootedPath: FileUtilities.NormalizePath);
 
             var result = hintPathResolver.Resolve(new AssemblyNameExtension("FakeSystem.Net.Http"),
                 sdkName: "",
