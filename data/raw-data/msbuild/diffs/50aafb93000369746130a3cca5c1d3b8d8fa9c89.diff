diff --git a/src/Build/BackEnd/Components/Communications/EntryNodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
similarity index 90%
rename from src/Build/BackEnd/Components/Communications/EntryNodeEndpointOutOfProc.cs
rename to src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
index 8db6ff6d165..35e3bb8022a 100644
--- a/src/Build/BackEnd/Components/Communications/EntryNodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.BackEnd
     /// <summary>
     /// This is an implementation of INodeEndpoint for the out-of-proc nodes.  It acts only as a client.
     /// </summary>
-    internal class EntryNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
+    internal class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
     {
         #region Private Data
 
@@ -24,7 +24,7 @@ internal class EntryNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
         /// </summary>
         /// <param name="pipeName">The name of the pipe to which we should connect.</param>
         /// <param name="handshake"></param>
-        internal EntryNodeEndpointOutOfProc(
+        internal ServerNodeEndpointOutOfProc(
             string pipeName,
             IHandshake handshake)
         {
diff --git a/src/Build/BackEnd/Components/Communications/EntryNodeHandshake.cs b/src/Build/BackEnd/Components/Communications/ServerNodeHandshake.cs
similarity index 95%
rename from src/Build/BackEnd/Components/Communications/EntryNodeHandshake.cs
rename to src/Build/BackEnd/Components/Communications/ServerNodeHandshake.cs
index b1cf769ac5f..97fdffd2854 100644
--- a/src/Build/BackEnd/Components/Communications/EntryNodeHandshake.cs
+++ b/src/Build/BackEnd/Components/Communications/ServerNodeHandshake.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.BackEnd
 {
-    internal class EntryNodeHandshake : IHandshake
+    internal class ServerNodeHandshake : IHandshake
     {
         readonly int _options;
         readonly int _salt;
@@ -17,7 +17,7 @@ internal class EntryNodeHandshake : IHandshake
         readonly int _fileVersionBuild;
         readonly int _fileVersionRevision;
 
-        internal EntryNodeHandshake(HandshakeOptions nodeType, string msBuildLocation)
+        internal ServerNodeHandshake(HandshakeOptions nodeType, string msBuildLocation)
         {
             // We currently use 6 bits of this 32-bit integer. Very old builds will instantly reject any handshake that does not start with F5 or 06; slightly old builds always lead with 00.
             // This indicates in the first byte that we are a modern build.
diff --git a/src/Build/BackEnd/Node/OutOfProcEntryNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
similarity index 88%
rename from src/Build/BackEnd/Node/OutOfProcEntryNode.cs
rename to src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 0c604b769d8..fc70790e835 100644
--- a/src/Build/BackEnd/Node/OutOfProcEntryNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -10,14 +10,13 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
-using System.Diagnostics;
 
 namespace Microsoft.Build.Execution
 {
     /// <summary>
-    /// This class represents an implementation of INode for out-of-proc entry nodes aka MSBuild server 
+    /// This class represents an implementation of INode for out-of-proc server nodes aka MSBuild server 
     /// </summary>
-    public class OutOfProcEntryNode : INode, INodePacketFactory, INodePacketHandler
+    public class OutOfProcServerNode : INode, INodePacketFactory, INodePacketHandler
     {
         private readonly Func<string, (int exitCode, string exitType)> _buildFunction;
 
@@ -63,7 +62,7 @@ public class OutOfProcEntryNode : INode, INodePacketFactory, INodePacketHandler
 
         private string _serverBusyMutexName = default!;
 
-        public OutOfProcEntryNode(Func<string, (int exitCode, string exitType)> buildFunction)
+        public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFunction)
         {
             _buildFunction = buildFunction;
             new Dictionary<string, string>();
@@ -74,7 +73,7 @@ public OutOfProcEntryNode(Func<string, (int exitCode, string exitType)> buildFun
             _shutdownEvent = new ManualResetEvent(false);
             _packetFactory = new NodePacketFactory();
 
-            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.EntryNodeCommand, EntryNodeCommand.FactoryForDeserialization, this);
+            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuilCommand, ServerNodeBuildCommand.FactoryForDeserialization, this);
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
         }
 
@@ -113,10 +112,8 @@ public NodeEngineShutdownReason Run(bool enableReuse, out Exception? shutdownExc
         /// <returns>The reason for shutting down.</returns>
         public NodeEngineShutdownReason Run(bool enableReuse, bool lowPriority, out Exception? shutdownException)
         {
-            Debugger.Launch();
-            // Console.WriteLine("Run called at {0}", DateTime.Now);
             string msBuildLocation = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
-            var handshake = new EntryNodeHandshake(
+            var handshake = new ServerNodeHandshake(
                 CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: enableReuse, lowPriority: lowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess),
                 msBuildLocation);
 
@@ -130,12 +127,11 @@ public NodeEngineShutdownReason Run(bool enableReuse, bool lowPriority, out Exce
             using var serverRunningMutex = ServerNamedMutex.OpenOrCreateMutex(serverRunningMutexName, out bool mutexCreatedNew);
             if (!mutexCreatedNew)
             {
-                Debugger.Launch();
                 shutdownException = new InvalidOperationException("MSBuild server is already running!");
                 return NodeEngineShutdownReason.Error;
             }
 
-            _nodeEndpoint = new EntryNodeEndpointOutOfProc(pipeName, handshake);
+            _nodeEndpoint = new ServerNodeEndpointOutOfProc(pipeName, handshake);
             _nodeEndpoint.OnLinkStatusChanged += OnLinkStatusChanged;
             _nodeEndpoint.Listen(this);
 
@@ -233,7 +229,7 @@ void INodePacketHandler.PacketReceived(int node, INodePacket packet)
         /// <summary>
         /// Perform necessary actions to shut down the node.
         /// </summary>
-        // TODO: it is too complicated, for simple role of entry node it needs to be simplified
+        // TODO: it is too complicated, for simple role of server node it needs to be simplified
         private NodeEngineShutdownReason HandleShutdown(out Exception? exception)
         {
             CommunicationsUtilities.Trace("Shutting down with reason: {0}, and exception: {1}.", _shutdownReason, _shutdownException);
@@ -294,8 +290,8 @@ private void HandlePacket(INodePacket packet)
         {
             switch (packet.Type)
             {
-                case NodePacketType.EntryNodeCommand:
-                    HandleEntryNodeCommand((EntryNodeCommand)packet);
+                case NodePacketType.ServerNodeBuilCommand:
+                    HandleServerNodeBuildCommand((ServerNodeBuildCommand)packet);
                     break;
                 case NodePacketType.NodeBuildComplete:
                     HandleNodeBuildComplete((NodeBuildComplete)packet);
@@ -303,7 +299,7 @@ private void HandlePacket(INodePacket packet)
             }
         }
 
-        private void HandleEntryNodeCommand(EntryNodeCommand command)
+        private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
         {
             using var serverBusyMutex = ServerNamedMutex.OpenOrCreateMutex(name: _serverBusyMutexName, createdNew: out var holdsMutex);
             if (!holdsMutex)
@@ -325,13 +321,13 @@ private void HandleEntryNodeCommand(EntryNodeCommand command)
             var oldOut = Console.Out;
             var oldErr = Console.Error;
 
-            using var outWriter = new RedirectConsoleWriter((text, foreground, background) =>
+            using var outWriter = new RedirectConsoleWriter(text =>
             {
-                SendPacket(new EntryNodeConsoleWrite(text, 1));
+                SendPacket(new ServerNodeConsoleWrite(text, 1));
             });
-            using var errWriter = new RedirectConsoleWriter((text, foreground, background) =>
+            using var errWriter = new RedirectConsoleWriter(text =>
             {
-                SendPacket(new EntryNodeConsoleWrite(text, 2));
+                SendPacket(new ServerNodeConsoleWrite(text, 2));
             });
 
             Console.SetOut(outWriter);
@@ -348,7 +344,7 @@ private void HandleEntryNodeCommand(EntryNodeCommand command)
             // so reset it away from a user-requested folder that may get deleted.
             NativeMethodsShared.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
-            var response = new EntryNodeResponse(exitCode, exitType);
+            var response = new ServerNodeResponse(exitCode, exitType);
             SendPacket(response);
 
             _shutdownReason = NodeEngineShutdownReason.BuildCompleteReuse;
@@ -360,25 +356,12 @@ internal class RedirectConsoleWriter : StringWriter
         {
             private readonly string _newLineString;
 
-            private readonly Action<string, ConsoleColor, ConsoleColor> _writeCallback;
-            private ConsoleColor _lastBackgroundColor;
-            private ConsoleColor _lastForegroundColor;
+            private readonly Action<string> _writeCallback;
 
-            public RedirectConsoleWriter(Action<string, ConsoleColor, ConsoleColor> writeCallback)
+            public RedirectConsoleWriter(Action<string> writeCallback)
             {
                 _newLineString = new String(CoreNewLine);
                 _writeCallback = writeCallback;
-
-                _lastBackgroundColor = Console.BackgroundColor;
-                _lastForegroundColor = Console.ForegroundColor;
-            }
-
-            private void FlushIfColorChanged()
-            {
-                if (Console.ForegroundColor != _lastForegroundColor || Console.BackgroundColor != _lastBackgroundColor)
-                {
-                    Flush();
-                }
             }
 
             private void MaybeFlushCaptured(bool force)
@@ -404,24 +387,19 @@ public override void Flush()
                 var sb = GetStringBuilder();
                 var captured = sb.ToString();
                 sb.Clear();
-                _writeCallback(captured, _lastForegroundColor, _lastBackgroundColor);
-
-                _lastForegroundColor = Console.ForegroundColor;
-                _lastBackgroundColor = Console.BackgroundColor;
+                _writeCallback(captured);
 
                 base.Flush();
             }
 
             public override void Write(char value)
             {
-                FlushIfColorChanged();
                 base.Write(value);
                 MaybeFlushCaptured(false);
             }
 
             public override void Write(char[] buffer, int index, int count)
             {
-                FlushIfColorChanged();
                 base.Write(buffer, index, count);
                 MaybeFlushCaptured(buffer.SequenceEqual(CoreNewLine));
             }
@@ -433,7 +411,6 @@ public override void Write(string? value)
                     return;
                 }
 
-                FlushIfColorChanged();
                 base.Write(value);
                 MaybeFlushCaptured(value.Contains(_newLineString));
             }
diff --git a/src/Build/BackEnd/Node/EntryNodeCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
similarity index 86%
rename from src/Build/BackEnd/Node/EntryNodeCommand.cs
rename to src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index 1329e6018ef..43353e6f473 100644
--- a/src/Build/BackEnd/Node/EntryNodeCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -9,11 +9,11 @@
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
-    /// EntryNodeCommand contains all of the information necessary for a entry node to run a command line.
+    /// Contains all of the information necessary for a entry node to run a command line.
     /// </summary>
-    internal class EntryNodeCommand : INodePacket
+    internal class ServerNodeBuildCommand : INodePacket
     {
-        public EntryNodeCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
+        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
         {
             CommandLine = commandLine;
             StartupDirectory = startupDirectory;
@@ -25,7 +25,7 @@ public EntryNodeCommand(string commandLine, string startupDirectory, Dictionary<
         /// <summary>
         /// Private constructor for deserialization
         /// </summary>
-        private EntryNodeCommand()
+        private ServerNodeBuildCommand()
         {
         }
 
@@ -34,7 +34,7 @@ private EntryNodeCommand()
         /// <summary>
         /// Retrieves the packet type.
         /// </summary>
-        public NodePacketType Type => NodePacketType.EntryNodeCommand;
+        public NodePacketType Type => NodePacketType.ServerNodeBuilCommand;
 
         #endregion
 
@@ -99,7 +99,7 @@ public void Translate(ITranslator translator)
         /// </summary>
         internal static INodePacket FactoryForDeserialization(ITranslator translator)
         {
-            EntryNodeCommand command = new();
+            ServerNodeBuildCommand command = new();
             command.Translate(translator);
 
             return command;
diff --git a/src/Build/BackEnd/Node/EntryNodeConsoleWrite.cs b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
similarity index 65%
rename from src/Build/BackEnd/Node/EntryNodeConsoleWrite.cs
rename to src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
index 30767540962..59e6469bfdb 100644
--- a/src/Build/BackEnd/Node/EntryNodeConsoleWrite.cs
+++ b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
@@ -2,25 +2,19 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections.Generic;
-using System.Globalization;
 
 namespace Microsoft.Build.BackEnd
 {
-    internal class EntryNodeConsoleWrite : INodePacket
+    internal class ServerNodeConsoleWrite : INodePacket
     {
         public string Text { get; }
 
-        public ConsoleColor Foreground { get; }
-
-        public ConsoleColor Background { get; }
-
         /// <summary>
         /// 1 = stdout, 2 = stderr
         /// </summary>
         public byte OutputType { get; }
 
-        public EntryNodeConsoleWrite(string text, byte outputType)
+        public ServerNodeConsoleWrite(string text, byte outputType)
         {
             Text = text;
             OutputType = outputType;
@@ -30,9 +24,8 @@ public EntryNodeConsoleWrite(string text, byte outputType)
 
         /// <summary>
         /// Packet type.
-        /// This has to be in sync with Microsoft.Build.BackEnd.NodePacketType.EntryNodeInfo
         /// </summary>
-        public NodePacketType Type => NodePacketType.EntryNodeConsole;
+        public NodePacketType Type => NodePacketType.ServerNodeConsole;
 
         #endregion
 
@@ -43,8 +36,6 @@ public void Translate(ITranslator translator)
                 var bw = translator.Writer;
 
                 bw.Write(Text);
-                bw.Write((int)Foreground);
-                bw.Write((int)Background);
                 bw.Write(OutputType);
             }
             else
diff --git a/src/Build/BackEnd/Node/EntryNodeResponse.cs b/src/Build/BackEnd/Node/ServerNodeResponse.cs
similarity index 81%
rename from src/Build/BackEnd/Node/EntryNodeResponse.cs
rename to src/Build/BackEnd/Node/ServerNodeResponse.cs
index 9bed736a065..4ed6eb241ca 100644
--- a/src/Build/BackEnd/Node/EntryNodeResponse.cs
+++ b/src/Build/BackEnd/Node/ServerNodeResponse.cs
@@ -6,9 +6,9 @@
 
 namespace Microsoft.Build.BackEnd
 {
-    internal class EntryNodeResponse : INodePacket
+    internal class ServerNodeResponse : INodePacket
     {
-        public EntryNodeResponse(int exitCode, string exitType)
+        public ServerNodeResponse(int exitCode, string exitType)
         {
             ExitCode = exitCode;
             ExitType = exitType;
@@ -18,9 +18,9 @@ public EntryNodeResponse(int exitCode, string exitType)
 
         /// <summary>
         /// Packet type.
-        /// This has to be in sync with Microsoft.Build.BackEnd.NodePacketType.EntryNodeCommand
+        /// This has to be in sync with Microsoft.Build.BackEnd.NodePacketType.ServerNodeBuildCommand
         /// </summary>
-        public NodePacketType Type => NodePacketType.EntryNodeResponse;
+        public NodePacketType Type => NodePacketType.ServerNodeResponse;
 
         #endregion
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index ee6ceed31e5..81e3594a215 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -147,15 +147,15 @@
     <Compile Include="BackEnd\Components\Caching\ConfigCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\Caching\ResultsCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\ProjectCache\*.cs" />
-    <Compile Include="BackEnd\Components\Communications\EntryNodeEndpointOutOfProc.cs" />
-    <Compile Include="BackEnd\Components\Communications\EntryNodeHandshake.cs" />
+    <Compile Include="BackEnd\Components\Communications\ServerNodeEndpointOutOfProc.cs" />
+    <Compile Include="BackEnd\Components\Communications\ServerNodeHandshake.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="BackEnd\Node\EntryNodeCommand.cs" />
-    <Compile Include="BackEnd\Node\EntryNodeConsoleWrite.cs" />
-    <Compile Include="BackEnd\Node\EntryNodeResponse.cs" />
-    <Compile Include="BackEnd\Node\OutOfProcEntryNode.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeResponse.cs" />
+    <Compile Include="BackEnd\Node\OutOfProcServerNode.cs" />
     <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index afc42aa9e16..e06c2f3a6e3 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -3,8 +3,8 @@ Microsoft.Build.Construction.ProjectUsingTaskElement.Override.set -> void
 Microsoft.Build.Construction.ProjectUsingTaskElement.OverrideLocation.get -> Microsoft.Build.Construction.ElementLocation
 Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
-Microsoft.Build.Execution.OutOfProcEntryNode
-Microsoft.Build.Execution.OutOfProcEntryNode.OutOfProcEntryNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(bool enableReuse, bool lowPriority, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(bool enableReuse, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode
+Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
+Microsoft.Build.Execution.OutOfProcServerNode.Run(bool enableReuse, bool lowPriority, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode.Run(bool enableReuse, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index aac50573d88..f0979add0bf 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -5,8 +5,8 @@ Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.get -> System.Thre
 Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.set -> void
 Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
-Microsoft.Build.Execution.OutOfProcEntryNode
-Microsoft.Build.Execution.OutOfProcEntryNode.OutOfProcEntryNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(bool enableReuse, bool lowPriority, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(bool enableReuse, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
-Microsoft.Build.Execution.OutOfProcEntryNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode
+Microsoft.Build.Execution.OutOfProcServerNode.OutOfProcServerNode(System.Func<string, (int exitCode, string exitType)> buildFunction) -> void
+Microsoft.Build.Execution.OutOfProcServerNode.Run(bool enableReuse, bool lowPriority, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode.Run(bool enableReuse, out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
+Microsoft.Build.Execution.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
\ No newline at end of file
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 8f75c1fae05..3c2cb3ba5e7 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2621,7 +2621,7 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                     string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
                     bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals("true");
 
-                    // Since build function has to reuse code from *this* class and OutOfProcEntryNode is in different assembly
+                    // Since build function has to reuse code from *this* class and OutOfProcServerNode is in different assembly
                     // we have to pass down xmake build invocation to avoid circular dependency
                     Func<string, (int exitCode, string exitType)> buildFunction = (commandLine) =>
                     {
@@ -2648,7 +2648,9 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                         return (exitCode, exitType.ToString());
                     };
 
-                    OutOfProcEntryNode node = new(buildFunction);
+                    // commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ConsoleLoggerParameters]
+
+                    OutOfProcServerNode node = new(buildFunction);
 
                     shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
 
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 80c2b4c085c..785ac585d98 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -191,22 +191,22 @@ internal enum NodePacketType : byte
         ResourceResponse,
 
         /// <summary>
-        /// Command in form of MSBuild command line for entry node - MSBuild Server.
+        /// Command in form of MSBuild command line for server node - MSBuild Server.
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        EntryNodeCommand = 0xF0,
+        ServerNodeBuilCommand = 0xF0,
 
         /// <summary>
-        /// Response from Entry node command
+        /// Response from server node command
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        EntryNodeResponse = 0xF1,
+        ServerNodeResponse = 0xF1,
 
         /// <summary>
         /// Info about server console activity. 
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        EntryNodeConsole = 0xF2,
+        ServerNodeConsole = 0xF2,
     }
     #endregion
 
