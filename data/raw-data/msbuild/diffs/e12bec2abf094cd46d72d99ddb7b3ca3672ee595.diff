diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 691662bc446..e83fb22b6ef 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -125,6 +125,12 @@ internal sealed class TaskRegistry : ITranslatable
         /// </summary>
         private static string s_potentialTasksCoreLocation = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, s_tasksCoreFilename);
 
+        /// <summary>
+        /// Monotonically increasing counter for registered tasks.
+        /// It's not guaranteed not to have gaps, but it's purpose is the uniqueness.
+        /// </summary>
+        private static int s_nextRegistrationOrderId = 0;
+
         /// <summary>
         /// Cache of tasks already found using exact matching,
         /// keyed by the task identity requested.
@@ -137,7 +143,7 @@ internal sealed class TaskRegistry : ITranslatable
         /// Value is a dictionary of all possible matches for that
         /// task name, by unique identity.
         /// </summary>
-        private Lazy<ConcurrentDictionary<string, ConcurrentDictionary<RegisteredTaskIdentity, RegisteredTaskRecord>>> _cachedTaskRecordsWithFuzzyMatch = new(() => new(StringComparer.OrdinalIgnoreCase));
+        private readonly Lazy<ConcurrentDictionary<string, ConcurrentDictionary<RegisteredTaskIdentity, RegisteredTaskRecord>>> _cachedTaskRecordsWithFuzzyMatch = new(() => new(StringComparer.OrdinalIgnoreCase));
 
         /// <summary>
         /// Cache of task declarations i.e. the &lt;UsingTask&gt; tags fed to this registry,
@@ -566,7 +572,6 @@ ConcurrentDictionary<RegisteredTaskIdentity, RegisteredTaskRecord> taskRecords
                         _ => new (RegisteredTaskIdentity.RegisteredTaskIdentityComparer.Exact));
 
                 taskRecords[taskIdentity] = taskRecord;
-                _cachedTaskRecordsWithFuzzyMatch.Value[taskIdentity.Name] = taskRecords;
             }
 
             return taskRecord;
@@ -1082,7 +1087,6 @@ private readonly Lazy<ConcurrentDictionary<RegisteredTaskIdentity, object>> _tas
             /// </summary>
             private ParameterGroupAndTaskElementRecord _parameterGroupAndTaskBody;
 
-            private static int s_nextRegistrationOrderId = 0;
             /// <summary>
             /// The registration order id for this task.  This is used to determine the order in which tasks are registered.
             /// </summary>
@@ -1765,6 +1769,8 @@ public void Translate(ITranslator translator)
 
             IDictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> copy = _taskRegistrations;
             translator.TranslateDictionary(ref copy, TranslateTaskRegistrationKey, TranslateTaskRegistrationValue, count => CreateRegisteredTaskDictionary(count));
+            // Ensure that mutations of the deserialized task registry are getting unique order ids.
+            s_nextRegistrationOrderId = Math.Max(s_nextRegistrationOrderId, copy.Count);
 
             if (translator.Mode == TranslationDirection.ReadFromStream)
             {
