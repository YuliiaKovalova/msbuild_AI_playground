diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index d088c85ff3e..8b6dad20d35 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -207,6 +207,7 @@ public void BuildsWhileBuildIsRunningOnServer()
                 success.ShouldBeTrue();
                 pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
                 pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "Process ID and Server ID should coincide.");
             }
             finally
             {
@@ -224,6 +225,7 @@ public void BuildsWhileBuildIsRunningOnServer()
                     ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
                 }
 
+
                 if (t is not null)
                 {
                     t.Wait();
@@ -256,10 +258,6 @@ public void MultiProcBuildOnServer()
 
         private int ParseNumber(string searchString, string toFind)
         {
-            _output.WriteLine("ParseNumber func.");
-            _output.WriteLine("---");
-            _output.WriteLine(searchString);
-            _output.WriteLine("---");
             Regex regex = new(@$"{toFind}(\d+)");
             var x = regex.Match(searchString);
             return int.Parse(x.Groups[1].Value);
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 766849567b9..781b68d9a98 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -116,7 +116,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.StandardInput.Dispose();
 
                 p.WaitForExit(30000);
-                p.WaitForExit(); // The timeout overload does not wait for output to be recieved.
+                p.WaitForExit(); // The timeout overload does not wait for output to be received.
 
                 pid = p.Id;
                 successfulExit = p.ExitCode == 0;
