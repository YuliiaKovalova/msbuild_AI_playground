diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 63e7a479736..44332124f80 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -427,7 +427,7 @@ public virtual bool IsMatchNormalized(string normalizedItemToMatch)
 
         public virtual IEnumerable<string> GetReferencedItems()
         {
-            yield return EscapingUtilities.UnescapeAll(TextFragment);
+            return Enumerable.Repeat(EscapingUtilities.UnescapeAll(TextFragment), 1);
         }
 
         public virtual IMSBuildGlob ToMSBuildGlob()
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 7a3674ce605..f4885b96382 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -241,8 +241,45 @@ internal sealed class OrderedItemDataCollection
             /// <summary>
             /// An efficient multi-value wrapper holding one or more versioned items.
             /// </summary>
-            internal struct DictionaryValue : IEnumerable<I>
+            internal struct DictionaryValue
             {
+                /// <summary>
+                /// A non-allocating enumerator for the multi-value.
+                /// </summary>
+                public struct Enumerator : IEnumerator<I>
+                {
+                    private object _value;
+                    private int _index;
+
+                    public Enumerator(object value)
+                    {
+                        _value = value;
+                        _index = -1;
+                    }
+
+                    public I Current => (_value is IList<I> list) ? list[_index] : (I)_value;
+                    object System.Collections.IEnumerator.Current => Current;
+
+                    public void Dispose()
+                    { }
+
+                    public bool MoveNext()
+                    {
+                        int count = (_value is IList<I> list) ? list.Count : 1;
+                        if (_index + 1 < count)
+                        {
+                            _index++;
+                            return true;
+                        }
+                        return false;
+                    }
+
+                    public void Reset()
+                    {
+                        _index = -1;
+                    }
+                }
+
                 /// <summary>
                 /// The version of the containing collection at the time this value was last changed.
                 /// </summary>
@@ -281,22 +318,10 @@ public void Add(int version, I item)
                     _value = list;
                 }
 
-                public IEnumerator<I> GetEnumerator()
+                public Enumerator GetEnumerator()
                 {
-                    if (_value is I item)
-                    {
-                        yield return item;
-                    }
-                    else if (_value is IEnumerable<I> enumerable)
-                    {
-                        foreach (I enumerableItem in enumerable)
-                        {
-                            yield return enumerableItem;
-                        }
-                    }
+                    return new Enumerator(_value);
                 }
-
-                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
             }
 
             /// <summary>
