diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 04dde92b045..61bdba09094 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2950,7 +2950,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
             });
         }
 
-        public void AttachBuildCheckForBinaryLogReplay(List<ILogger> loggers, EventArgsDispatcher eventDispatcher)
+        public BinaryLogReplayEventSource GetBinaryLogReplayEventSourceWithAttachedBuildCheck()
         {
             _buildParameters = new BuildParameters
             {
@@ -2962,11 +2962,9 @@ public void AttachBuildCheckForBinaryLogReplay(List<ILogger> loggers, EventArgsD
 
             buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
 
-            var buildCheckLogger = new BuildCheckConnectorLogger(
-                new AnalysisDispatchingContextFactory(eventDispatcher),
-                buildCheckManagerProvider.Instance);
+            var eventDispatcher = new BuildCheckEventArgsDispatcher(buildCheckManagerProvider.Instance);
 
-            loggers.Add(buildCheckLogger);
+            return new BinaryLogReplayEventSource(eventDispatcher);
         }
 
         /// <summary>
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
index e26200f6f5d..f4ffd7727a6 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
@@ -33,6 +33,23 @@ public void DispatchBuildEvent(BuildEventArgs buildEvent)
     {
         ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
 
+        // BuildWarningEventArgs? warningEvent = null;
+        // BuildErrorEventArgs? errorEvent = null;
+        // BuildMessageEventArgs? messageEvent = null;
+
+        // if ((warningEvent = buildEvent as BuildWarningEventArgs) != null &&
+        //    warningEvent.ProjectFile == null)
+        // {
+        // }
+        // else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null &&
+        //    errorEvent.ProjectFile == null)
+        // {
+        // }
+        // else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null &&
+        //    messageEvent.ProjectFile == null)
+        // {
+        // }
+
         _eventDispatcher.Dispatch(buildEvent);
     }
 
@@ -57,6 +74,11 @@ public void DispatchAsErrorFromText(string? subcategoryResourceName, string? err
     {
         BuildErrorEventArgs buildEvent = EventsCreatorHelper.CreateErrorEventFromText(_eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
 
+        // if (buildEvent.ProjectFile == null &&
+        //    _eventContext!.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+        // {
+        // }
+
         _eventDispatcher.Dispatch(buildEvent);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
new file mode 100644
index 00000000000..dc4c9a19bc9
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -0,0 +1,154 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Experimental.BuildCheck.Acquisition;
+using Microsoft.Build.Experimental.BuildCheck.Utilities;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+internal class BuildCheckBuildEventHandler
+{
+    private readonly IBuildCheckManager _buildCheckManager;
+    private readonly IAnalysisContextFactory _analyzerContextFactory;
+
+    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
+
+    internal BuildCheckBuildEventHandler(
+        IAnalysisContextFactory analyzerContextFactory,
+        IBuildCheckManager buildCheckManager)
+    {
+        _buildCheckManager = buildCheckManager;
+        _analyzerContextFactory = analyzerContextFactory;
+
+        _eventHandlers = new()
+        {
+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
+            { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
+            { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => HandleBuildCheckAcquisitionEvent((BuildCheckAcquisitionEventArgs)e) },
+            { typeof(TaskStartedEventArgs), (BuildEventArgs e) => HandleTaskStartedEvent((TaskStartedEventArgs)e) },
+            { typeof(TaskFinishedEventArgs), (BuildEventArgs e) => HandleTaskFinishedEvent((TaskFinishedEventArgs)e) },
+            { typeof(TaskParameterEventArgs), (BuildEventArgs e) => HandleTaskParameterEvent((TaskParameterEventArgs)e) },
+            { typeof(BuildFinishedEventArgs), (BuildEventArgs e) => HandleBuildFinishedEvent((BuildFinishedEventArgs)e) },
+        };
+    }
+
+    public void HandleBuildEvent(BuildEventArgs e)
+    {
+        if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))
+        {
+            handler(e);
+        }
+    }
+
+    private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)
+    {
+        if (!IsMetaProjFile(eventArgs.ProjectFile))
+        {
+            _buildCheckManager.ProcessEvaluationFinishedEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
+
+            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);
+        }
+    }
+
+    private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)
+    {
+        if (!IsMetaProjFile(eventArgs.ProjectFile))
+        {
+            _buildCheckManager.StartProjectEvaluation(
+                BuildCheckDataSource.EventArgs,
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs.ProjectFile!);
+        }
+    }
+
+    private void HandleBuildCheckTracingEvent(BuildCheckTracingEventArgs eventArgs)
+    {
+        if (!eventArgs.IsAggregatedGlobalReport)
+        {
+            _stats.Merge(eventArgs.TracingData, (span1, span2) => span1 + span2);
+        }
+    }
+
+    private void HandleTaskStartedEvent(TaskStartedEventArgs eventArgs)
+        => _buildCheckManager.ProcessTaskStartedEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
+
+    private void HandleTaskFinishedEvent(TaskFinishedEventArgs eventArgs)
+        => _buildCheckManager.ProcessTaskFinishedEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
+
+    private void HandleTaskParameterEvent(TaskParameterEventArgs eventArgs)
+        => _buildCheckManager.ProcessTaskParameterEventArgs(
+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                eventArgs);
+
+    private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eventArgs)
+        => _buildCheckManager.ProcessAnalyzerAcquisition(
+                eventArgs.ToAnalyzerAcquisitionData(),
+                _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
+
+    private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase);
+
+    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();
+
+    private void HandleBuildFinishedEvent(BuildFinishedEventArgs eventArgs)
+    {
+        _stats.Merge(_buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
+
+        LogAnalyzerStats(_analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
+    }
+
+    private void LogAnalyzerStats(IAnalysisContext analysisContext)
+    {
+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();
+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();
+
+        foreach (var stat in _stats)
+        {
+            if (stat.Key.StartsWith(BuildCheckConstants.infraStatPrefix))
+            {
+                string newKey = stat.Key.Substring(BuildCheckConstants.infraStatPrefix.Length);
+                infraStats[newKey] = stat.Value;
+            }
+            else
+            {
+                analyzerStats[stat.Key] = stat.Value;
+            }
+        }
+
+        BuildCheckTracingEventArgs statEvent = new BuildCheckTracingEventArgs(_stats, true)
+        { BuildEventContext = analysisContext.BuildEventContext };
+
+        analysisContext.DispatchBuildEvent(statEvent);
+
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, $"BuildCheck run times{Environment.NewLine}");
+        string infraData = BuildCsvString("Infrastructure run times", infraStats);
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, infraData);
+        string analyzerData = BuildCsvString("Analyzer run times", analyzerStats);
+        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, analyzerData);
+    }
+
+    private string BuildCsvString(string title, Dictionary<string, TimeSpan> rowData)
+        => title + Environment.NewLine + String.Join(Environment.NewLine, rowData.Select(a => $"{a.Key},{a.Value}")) + Environment.NewLine;
+
+    private BuildEventContext GetBuildEventContext(BuildEventArgs e) => e.BuildEventContext
+        ?? new BuildEventContext(
+                BuildEventContext.InvalidNodeId,
+                BuildEventContext.InvalidTargetId,
+                BuildEventContext.InvalidProjectContextId,
+                BuildEventContext.InvalidTaskId);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 22f841bab27..3b6330a5a50 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 internal sealed class BuildCheckConnectorLogger : ILogger
 {
-    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
+    private readonly BuildCheckBuildEventHandler _eventHandler;
     private readonly IBuildCheckManager _buildCheckManager;
     private readonly IAnalysisContextFactory _analyzerContextFactory;
 
@@ -24,7 +24,7 @@ internal BuildCheckConnectorLogger(
     {
         _buildCheckManager = buildCheckManager;
         _analyzerContextFactory = analyzerContextFactory;
-        _eventHandlers = GetBuildEventHandlers();
+        _eventHandler = new BuildCheckBuildEventHandler(analyzerContextFactory, buildCheckManager);
     }
 
     public LoggerVerbosity Verbosity { get; set; }
@@ -34,7 +34,6 @@ internal BuildCheckConnectorLogger(
     public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
-        eventSource.BuildFinished += EventSource_BuildFinished;
 
         if (eventSource is IEventSource3 eventSource3)
         {
@@ -51,128 +50,6 @@ public void Shutdown()
     {
     }
 
-    private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)
-    {
-        if (!IsMetaProjFile(eventArgs.ProjectFile))
-        {
-            _buildCheckManager.ProcessEvaluationFinishedEventArgs(
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
-                eventArgs);
-
-            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);
-        }
-    }
-
-    private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)
-    {
-        if (!IsMetaProjFile(eventArgs.ProjectFile))
-        {
-            _buildCheckManager.StartProjectEvaluation(
-                BuildCheckDataSource.EventArgs,
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
-                eventArgs.ProjectFile!);
-        }
-    }
-
-    private void HandleBuildCheckTracingEvent(BuildCheckTracingEventArgs eventArgs)
-    {
-        if (!eventArgs.IsAggregatedGlobalReport)
-        {
-            _stats.Merge(eventArgs.TracingData, (span1, span2) => span1 + span2);
-        }
-    }
-
-    private void HandleTaskStartedEvent(TaskStartedEventArgs eventArgs)
-        => _buildCheckManager.ProcessTaskStartedEventArgs(
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
-                eventArgs);
-
-    private void HandleTaskFinishedEvent(TaskFinishedEventArgs eventArgs)
-        => _buildCheckManager.ProcessTaskFinishedEventArgs(
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
-                eventArgs);
-
-    private void HandleTaskParameterEvent(TaskParameterEventArgs eventArgs)
-        => _buildCheckManager.ProcessTaskParameterEventArgs(
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
-                eventArgs);
-
-    private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eventArgs)
-        => _buildCheckManager.ProcessAnalyzerAcquisition(
-                eventArgs.ToAnalyzerAcquisitionData(),
-                _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
-
-    private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase);
-
     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
-    {
-        if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))
-        {
-            handler(e);
-        }
-    }
-
-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();
-
-    private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
-    {
-        _stats.Merge(_buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
-
-        LogAnalyzerStats(_analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(e)));
-    }
-
-    private void LogAnalyzerStats(IAnalysisContext analysisContext)
-    {
-        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();
-        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();
-
-        foreach (var stat in _stats)
-        {
-            if (stat.Key.StartsWith(BuildCheckConstants.infraStatPrefix))
-            {
-                string newKey = stat.Key.Substring(BuildCheckConstants.infraStatPrefix.Length);
-                infraStats[newKey] = stat.Value;
-            }
-            else
-            {
-                analyzerStats[stat.Key] = stat.Value;
-            }
-        }
-
-        BuildCheckTracingEventArgs statEvent = new BuildCheckTracingEventArgs(_stats, true)
-        { BuildEventContext = analysisContext.BuildEventContext };
-
-        analysisContext.DispatchBuildEvent(statEvent);
-
-        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, $"BuildCheck run times{Environment.NewLine}");
-        string infraData = BuildCsvString("Infrastructure run times", infraStats);
-        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, infraData);
-        string analyzerData = BuildCsvString("Analyzer run times", analyzerStats);
-        analysisContext.DispatchAsCommentFromText(MessageImportance.Low, analyzerData);
-    }
-
-    private string BuildCsvString(string title, Dictionary<string, TimeSpan> rowData)
-    {
-        return title + Environment.NewLine + String.Join(Environment.NewLine, rowData.Select(a => $"{a.Key},{a.Value}")) + Environment.NewLine;
-    }
-
-    private Dictionary<Type, Action<BuildEventArgs>> GetBuildEventHandlers() => new()
-    {
-        { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
-        { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
-        { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
-        { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
-        { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
-        { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => HandleBuildCheckAcquisitionEvent((BuildCheckAcquisitionEventArgs)e) },
-        { typeof(TaskStartedEventArgs), (BuildEventArgs e) => HandleTaskStartedEvent((TaskStartedEventArgs)e) },
-        { typeof(TaskFinishedEventArgs), (BuildEventArgs e) => HandleTaskFinishedEvent((TaskFinishedEventArgs)e) },
-        { typeof(TaskParameterEventArgs), (BuildEventArgs e) => HandleTaskParameterEvent((TaskParameterEventArgs)e) },
-    };
-
-    private BuildEventContext GetBuildEventContext(BuildEventArgs e) => e.BuildEventContext
-        ?? new BuildEventContext(
-                BuildEventContext.InvalidNodeId,
-                BuildEventContext.InvalidTargetId,
-                BuildEventContext.InvalidProjectContextId,
-                BuildEventContext.InvalidTaskId);
+        => _eventHandler.HandleBuildEvent(e);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
new file mode 100644
index 00000000000..850f398f30f
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
@@ -0,0 +1,31 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+public class BuildCheckEventArgsDispatcher : EventArgsDispatcher
+{
+    private readonly BuildCheckBuildEventHandler _buildCheckEventHandler;
+
+    internal BuildCheckEventArgsDispatcher(IBuildCheckManager buildCheckManager)
+        => _buildCheckEventHandler = new BuildCheckBuildEventHandler(
+            new AnalysisDispatchingContextFactory(this),
+            buildCheckManager);
+
+    public override void Dispatch(BuildEventArgs buildEvent)
+    {
+        base.Dispatch(buildEvent);
+
+        _buildCheckEventHandler.HandleBuildEvent(buildEvent);
+    }
+}
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index abf9e4e80c9..85c07f6adee 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -59,15 +59,30 @@ void DeferredInitialize(
     /// by implementing IEventSource and raising corresponding events.
     /// </summary>
     /// <remarks>The class is public so that we can call it from MSBuild.exe when replaying a log file.</remarks>
-    public sealed class BinaryLogReplayEventSource : EventArgsDispatcher,
-        IBinaryLogReplaySource
+    public sealed class BinaryLogReplayEventSource : IBinaryLogReplaySource
     {
         private int? _fileFormatVersion;
         private int? _minimumReaderVersion;
 
+        private readonly EventArgsDispatcher _eventDispatcher;
+
         public int FileFormatVersion => _fileFormatVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
         public int MinimumReaderVersion => _minimumReaderVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
 
+        public BinaryLogReplayEventSource()
+        {
+            _eventDispatcher = new EventArgsDispatcher();
+
+            InitializeEventHandlers();
+        }
+
+        public BinaryLogReplayEventSource(EventArgsDispatcher eventDispatcher)
+        {
+            _eventDispatcher = eventDispatcher;
+
+            InitializeEventHandlers();
+        }
+
         /// Touches the <see cref="ItemGroupLoggingHelper"/> static constructor
         /// to ensure it initializes <see cref="TaskParameterEventArgs.MessageGetter"/>
         /// and <see cref="TaskParameterEventArgs.DictionaryFactory"/>
@@ -81,9 +96,43 @@ static BinaryLogReplayEventSource()
         /// </summary>
         public bool AllowForwardCompatibility { private get; init; }
 
+#region EventHandlers
         /// <inheritdoc cref="IBuildEventArgsReaderNotifications.RecoverableReadError"/>
         public event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
 
+        public event BuildMessageEventHandler? MessageRaised;
+        public event BuildErrorEventHandler? ErrorRaised;
+        public event BuildWarningEventHandler? WarningRaised;
+        public event BuildStartedEventHandler? BuildStarted;
+        public event BuildFinishedEventHandler? BuildFinished;
+        public event ProjectStartedEventHandler? ProjectStarted;
+        public event ProjectFinishedEventHandler? ProjectFinished;
+        public event TargetStartedEventHandler? TargetStarted;
+        public event TargetFinishedEventHandler? TargetFinished;
+        public event TaskStartedEventHandler? TaskStarted;
+        public event TaskFinishedEventHandler? TaskFinished;
+        public event CustomBuildEventHandler? CustomEventRaised;
+        public event BuildStatusEventHandler? StatusEventRaised;
+        public event AnyEventHandler? AnyEventRaised;
+
+        private void InitializeEventHandlers()
+        {
+            _eventDispatcher.MessageRaised += (sender, e) => MessageRaised?.Invoke(sender, e);
+            _eventDispatcher.ErrorRaised += (sender, e) => ErrorRaised?.Invoke(sender, e);
+            _eventDispatcher.WarningRaised += (sender, e) => WarningRaised?.Invoke(sender, e);
+            _eventDispatcher.BuildStarted += (sender, e) => BuildStarted?.Invoke(sender, e);
+            _eventDispatcher.BuildFinished += (sender, e) => BuildFinished?.Invoke(sender, e);
+            _eventDispatcher.ProjectStarted += (sender, e) => ProjectStarted?.Invoke(sender, e);
+            _eventDispatcher.ProjectFinished += (sender, e) => ProjectFinished?.Invoke(sender, e);
+            _eventDispatcher.TargetStarted += (sender, e) => TargetStarted?.Invoke(sender, e);
+            _eventDispatcher.TargetFinished += (sender, e) => TargetFinished?.Invoke(sender, e);
+            _eventDispatcher.TaskStarted += (sender, e) => TaskStarted?.Invoke(sender, e);
+            _eventDispatcher.TaskFinished += (sender, e) => TaskFinished?.Invoke(sender, e);
+            _eventDispatcher.CustomEventRaised += (sender, e) => CustomEventRaised?.Invoke(sender, e);
+            _eventDispatcher.StatusEventRaised += (sender, e) => StatusEventRaised?.Invoke(sender, e);
+            _eventDispatcher.AnyEventRaised += (sender, e) => AnyEventRaised?.Invoke(sender, e);
+        }
+#endregion
         /// <summary>
         /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
         /// </summary>
@@ -232,7 +281,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             bool supportsForwardCompatibility = reader.FileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion;
 
             // Allow any possible deferred subscriptions to be registered
-            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
+            if (_eventDispatcher.HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
                 _onStructuredReadingOnly?.Invoke();
             }
@@ -245,7 +294,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             reader.ArchiveFileEncountered += _archiveFileEncountered;
             reader.StringReadDone += _stringReadDone;
 
-            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
+            if (_eventDispatcher.HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
                 if (this._rawLogRecordReceived != null)
                 {
@@ -260,7 +309,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
 
                 while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
                 {
-                    Dispatch(instance);
+                    _eventDispatcher.Dispatch(instance);
                 }
             }
             else
diff --git a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
index cf56776752c..37f5e44b893 100644
--- a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
@@ -104,25 +104,24 @@ public class EventArgsDispatcher : IEventSource
         /// <summary>
         /// Raise one of the events that is appropriate for the type of the BuildEventArgs
         /// </summary>
-        public void Dispatch(BuildEventArgs buildEvent)
+        public virtual void Dispatch(BuildEventArgs buildEvent)
         {
-            BuildWarningEventArgs warningEvent = null;
-            BuildErrorEventArgs errorEvent = null;
-            BuildMessageEventArgs messageEvent = null;
-
-            if ((warningEvent = buildEvent as BuildWarningEventArgs) != null &&
-                warningEvent.ProjectFile == null)
-            {
-            }
-            else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null &&
-                errorEvent.ProjectFile == null)
-            {
-            }
-            else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null &&
-                messageEvent.ProjectFile == null)
-            {
-            }
-
+            // BuildWarningEventArgs? warningEvent = null;
+            // BuildErrorEventArgs? errorEvent = null;
+            // BuildMessageEventArgs? messageEvent = null;
+
+            // if ((warningEvent = buildEvent as BuildWarningEventArgs) != null &&
+            //    warningEvent.ProjectFile == null)
+            // {
+            // }
+            // else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null &&
+            //    errorEvent.ProjectFile == null)
+            // {
+            // }
+            // else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null &&
+            //    messageEvent.ProjectFile == null)
+            // {
+            // }
 
             if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 3843fba847f..0b57828e95b 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -167,6 +167,8 @@
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
+    <Compile Include="BuildCheck\Infrastructure\BuildCheckBuildEventHandler.cs" />
+    <Compile Include="BuildCheck\Infrastructure\BuildCheckEventArgsDispatcher.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContextFactory.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 35cc5f7f0e3..3897aac53a7 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4409,12 +4409,9 @@ private static void ReplayBinaryLog(
             int cpuCount,
             bool isBuildCheckEnabled)
         {
-            var replayEventSource = new BinaryLogReplayEventSource();
-
-            if (isBuildCheckEnabled)
-            {
-                BuildManager.DefaultBuildManager.AttachBuildCheckForBinaryLogReplay(loggers, replayEventSource);
-            }
+            var replayEventSource = isBuildCheckEnabled ?
+                BuildManager.DefaultBuildManager.GetBinaryLogReplayEventSourceWithAttachedBuildCheck() :
+                new BinaryLogReplayEventSource();
 
             foreach (var distributedLoggerRecord in distributedLoggerRecords)
             {
