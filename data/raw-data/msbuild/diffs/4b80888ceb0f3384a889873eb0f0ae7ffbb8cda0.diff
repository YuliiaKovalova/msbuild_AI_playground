diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index 78fe9a56240..e8d6a3610dc 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -49,7 +49,8 @@ public class BuildAnalyzerConfiguration
 
     /// <summary>
     /// Creates a <see cref="BuildAnalyzerConfiguration"/> object based on the provided configuration dictionary.
-    /// If key, equals to the name of the property in lowercase, exists in the dictionary => the value is parsed and assigned to the instance property value.
+    /// If the BuildAnalyzerConfiguration's property name presented in the dictionary, the value of this key-value pair is parsed and assigned to the instance's field.
+    /// If parsing failed the value will be equal to null.
     /// </summary>
     /// <param name="configDictionary">The configuration dictionary containing the settings for the build analyzer.</param>
     /// <returns>A new instance of <see cref="BuildAnalyzerConfiguration"/> with the specified settings.</returns>
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index f58c66ec182..7b012cd3b22 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -19,6 +19,8 @@ internal sealed class ConfigurationProvider
 {
     private readonly EditorConfigParser s_editorConfigParser = new EditorConfigParser();
 
+    private const string BuildCheck_ConfigurationKey = "build_check";
+
     // TODO: This module should have a mechanism for removing unneeded configurations
     //  (disabled rules and analyzers that need to run in different node)
 
@@ -88,10 +90,14 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     internal void CheckCustomConfigurationDataValidity(string projectFullPath, string ruleId)
     {
         var configuration = GetCustomConfiguration(projectFullPath, ruleId);
+        VerifyCustomConfigurationEquality(ruleId, configuration);
+    }
 
+    internal void VerifyCustomConfigurationEquality(string ruleId, CustomConfigurationData configurationData)
+    {
         if (_customConfigurationData.TryGetValue(ruleId, out var storedConfiguration))
         {
-            if (!storedConfiguration.Equals(configuration))
+            if (!storedConfiguration.Equals(configurationData))
             {
                 throw new BuildCheckConfigurationException("Custom configuration should be equal between projects");
             }
@@ -204,7 +210,7 @@ private Dictionary<string, string> FetchEditorConfigRules(string projectFullPath
 
         // clear the dictionary from the key-value pairs not BuildCheck related and
         // store the data so there is no need to parse the .editorconfigs all over again
-        _editorConfigData[projectFullPath] = FilterDictionaryByKeys("build_check.",  config);
+        _editorConfigData[projectFullPath] = FilterDictionaryByKeys($"{BuildCheck_ConfigurationKey}.",  config);
 
         return _editorConfigData[projectFullPath];
     }
@@ -212,7 +218,7 @@ private Dictionary<string, string> FetchEditorConfigRules(string projectFullPath
     internal Dictionary<string, string> GetConfiguration(string projectFullPath, string ruleId)
     {
         var config = FetchEditorConfigRules(projectFullPath);
-        return FilterDictionaryByKeys($"build_check.{ruleId}.", config, updateKey: true);
+        return FilterDictionaryByKeys($"{BuildCheck_ConfigurationKey}.{ruleId}.", config, updateKey: true);
     }
 
     /// <summary>
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index 5bafbfefeab..3f2068fb8b1 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -77,7 +77,7 @@ public override bool Equals(object? obj)
         {
             foreach (var keyVal in customConfigObj.ConfigurationData)
             {
-                if(!ConfigurationData.TryGetValue(keyVal.Key, out var value) || value != keyVal.Value)
+                if (!ConfigurationData.TryGetValue(keyVal.Key, out var value) || value != keyVal.Value)
                 {
                     return false;
                 }
@@ -100,7 +100,7 @@ public override int GetHashCode()
         if (!NotNull(this))
         {
             return 0;
-    }
+        }
 
         var hashCode = RuleId.GetHashCode();
         if (ConfigurationData != null)
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index 430b90b9fd5..4146ba92ad4 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -18,12 +18,7 @@ namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
     internal class EditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
-        private Dictionary<string, EditorConfigFile> editorConfigFileCache;
-
-        internal EditorConfigParser()
-        {
-            editorConfigFileCache = new Dictionary<string, EditorConfigFile>();
-        }
+        private Dictionary<string, EditorConfigFile> editorConfigFileCache = new Dictionary<string, EditorConfigFile>();
 
         internal Dictionary<string, string> Parse(string filePath)
         {
