diff --git a/src/MSBuild/LiveLogger/FancyLogger.cs b/src/MSBuild/LiveLogger/FancyLogger.cs
index 27220bc4b83..e65cde97cb1 100644
--- a/src/MSBuild/LiveLogger/FancyLogger.cs
+++ b/src/MSBuild/LiveLogger/FancyLogger.cs
@@ -55,14 +55,14 @@ public void Initialize(IEventSource eventSource)
         private void Render()
         {
             // Initialize FancyLoggerBuffer
-            FancyLoggerBuffer.Initialize();
+            TerminalBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            FancyLoggerBuffer.WriteNewLine(string.Empty);
+            TerminalBuffer.WriteNewLine(string.Empty);
             // First render
-            FancyLoggerBuffer.Render();
+            TerminalBuffer.Render();
             int i = 0;
             // Rerender periodically
-            while (!FancyLoggerBuffer.IsTerminated)
+            while (!TerminalBuffer.IsTerminated)
             {
                 i++;
                 // Delay by 1/60 seconds
@@ -75,7 +75,7 @@ private void Render()
                         project.Value.Log();
                     }
                     // Rerender buffer
-                    FancyLoggerBuffer.Render();
+                    TerminalBuffer.Render();
                 });
                 // Handle keyboard input
                 if (Console.KeyAvailable)
@@ -84,15 +84,15 @@ private void Render()
                     switch (key)
                     {
                         case ConsoleKey.UpArrow:
-                            if (FancyLoggerBuffer.TopLineIndex > 0)
+                            if (TerminalBuffer.TopLineIndex > 0)
                             {
-                                FancyLoggerBuffer.TopLineIndex--;
+                                TerminalBuffer.TopLineIndex--;
                             }
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            TerminalBuffer.ShouldRerender = true;
                             break;
                         case ConsoleKey.DownArrow:
-                            FancyLoggerBuffer.TopLineIndex++;
-                            FancyLoggerBuffer.ShouldRerender = true;
+                            TerminalBuffer.TopLineIndex++;
+                            TerminalBuffer.ShouldRerender = true;
                             break;
                         default:
                             break;
@@ -247,7 +247,7 @@ private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eve
 
         public void Shutdown()
         {
-            FancyLoggerBuffer.Terminate();
+            TerminalBuffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             Console.Clear();
             int errorCount = 0;
diff --git a/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs b/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs
index 66ade8d5d1a..45df15d749c 100644
--- a/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs
+++ b/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs
@@ -78,7 +78,7 @@ public void Log()
             // Create or update line
             if (Line is null)
             {
-                Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
+                Line = TerminalBuffer.WriteNewLine(lineContents, false);
             }
             else
             {
@@ -90,7 +90,7 @@ public void Log()
             {
                 if (CurrentTargetLine is not null)
                 {
-                    FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                    TerminalBuffer.DeleteLine(CurrentTargetLine.Id);
                 }
 
                 foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
@@ -103,7 +103,7 @@ public void Log()
 
                     if (node.Line is not null)
                     {
-                        FancyLoggerBuffer.DeleteLine(node.Line.Id);
+                        TerminalBuffer.DeleteLine(node.Line.Id);
                     }
                 }
             }
@@ -117,7 +117,7 @@ public void Log()
             string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
             if (CurrentTargetLine is null)
             {
-                CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+                CurrentTargetLine = TerminalBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
             }
             else
             {
@@ -134,7 +134,7 @@ public void Log()
 
                 if (node.Line is null)
                 {
-                    node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                    node.Line = TerminalBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 }
 
                 node.Log();
diff --git a/src/MSBuild/LiveLogger/FancyLoggerBuffer.cs b/src/MSBuild/LiveLogger/TerminalBuffer.cs
similarity index 98%
rename from src/MSBuild/LiveLogger/FancyLoggerBuffer.cs
rename to src/MSBuild/LiveLogger/TerminalBuffer.cs
index 4bae364f933..2825dc3c909 100644
--- a/src/MSBuild/LiveLogger/FancyLoggerBuffer.cs
+++ b/src/MSBuild/LiveLogger/TerminalBuffer.cs
@@ -31,7 +31,7 @@ public string Text
                     WrappedText = new List<string> { value };
                 }
                 // Buffer should rerender
-                FancyLoggerBuffer.ShouldRerender = true;
+                TerminalBuffer.ShouldRerender = true;
             }
         }
 
@@ -54,7 +54,7 @@ public FancyLoggerBufferLine(string text, bool shouldWrapLines)
         }
     }
 
-    internal class FancyLoggerBuffer
+    internal class TerminalBuffer
     {
         private static List<FancyLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
