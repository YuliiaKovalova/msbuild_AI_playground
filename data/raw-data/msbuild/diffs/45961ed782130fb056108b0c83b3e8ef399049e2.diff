diff --git a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
index 4df6b2830f9..7f90d035fd6 100644
--- a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -97,6 +97,7 @@ public void Initialize(IEventSource eventSource)
             ErrorUtilities.VerifyThrowArgumentNull(eventSource, nameof(eventSource));
             ParseFileLoggerParameters();
             string fileName = _logFile;
+
             try
             {
                 // Create a new file logger and pass it some parameters to make the build log very detailed
diff --git a/src/Build/Logging/FileLogger.cs b/src/Build/Logging/FileLogger.cs
index 050ede8b31d..96527226118 100644
--- a/src/Build/Logging/FileLogger.cs
+++ b/src/Build/Logging/FileLogger.cs
@@ -39,6 +39,11 @@ public FileLogger()
                 colorReset: BaseConsoleLogger.DontResetColor)
         {
             WriteHandler = Write;
+
+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)
+            {
+                _encoding = Encoding.UTF8;
+            }
         }
 
         #endregion
@@ -50,11 +55,6 @@ public FileLogger()
         /// <param name="eventSource">Available events.</param>
         public override void Initialize(IEventSource eventSource)
         {
-            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)
-            {
-                _encoding = Encoding.UTF8;
-            }
-
             ErrorUtilities.VerifyThrowArgumentNull(eventSource, nameof(eventSource));
             eventSource.BuildFinished += FileLoggerBuildFinished;
             InitializeFileLogger(eventSource, 1);
diff --git a/src/Framework/EncodingUtilities.cs b/src/Framework/EncodingUtilities.cs
index 9ad987bd730..67fdcdd971c 100644
--- a/src/Framework/EncodingUtilities.cs
+++ b/src/Framework/EncodingUtilities.cs
@@ -3,11 +3,15 @@
 
 using System;
 using System.Diagnostics;
+using System.Globalization;
 using System.IO;
 using System.Linq;
+using System.Runtime.InteropServices;
+using System.Security;
 using System.Text;
 
 using Microsoft.Build.Framework;
+using Microsoft.Win32;
 
 #nullable disable
 
@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
                         : EncodingUtilities.Utf8WithoutBom;
             }
         }
+
+        /// <summary>
+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.
+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.
+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.
+        /// If the environment variables are undefined, this function should be a no-op.
+        /// </summary>
+        /// <returns>
+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.
+        /// Returns <see langword="null"/> if none are set.
+        /// </returns>
+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()
+        {
+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();
+            if (externalLanguageSetting != null)
+            {
+                if (
+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals("en", StringComparison.InvariantCultureIgnoreCase) &&
+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
+                    )
+                {
+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke chcp ourselves.
+                    Console.OutputEncoding = Encoding.UTF8;
+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.
+                    Console.InputEncoding = Encoding.UTF8;
+                    return externalLanguageSetting;
+                }
+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+                {
+                    return externalLanguageSetting;
+                }
+            }
+            return null;
+        }
+
+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
+        {
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.
+            {
+                try
+                {
+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
+                    var buildNumber = windowsVersionRegistry.GetValue("CurrentBuildNumber").ToString();
+                    const int buildNumberThatOfficialySupportsUTF8 = 18363;
+                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();
+                }
+                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)
+                {
+                    // We don't want to break those in VS on older versions of Windows with a non-en language.
+                    // Allow those without registry permissions to force the encoding, however.
+                    return ForceUniversalEncodingOptInEnabled();
+                }
+            }
+            return false;
+        }
+
+        private static bool ForceUniversalEncodingOptInEnabled()
+        {
+            return string.Equals(Environment.GetEnvironmentVariable("DOTNET_CLI_FORCE_UTF8_ENCODING"), "true", StringComparison.OrdinalIgnoreCase);
+        }
+
+        /// <summary>
+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE.)
+        /// Does NOT check System Locale or OS Display Language.
+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs
+        /// </summary>
+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.
+        /// Returns null if none are set.</returns>
+        private static CultureInfo GetExternalOverriddenUILanguage()
+        {
+            // DOTNET_CLI_UI_LANGUAGE=<culture name> is the main way for users to customize the CLI's UI language via the .NET SDK.
+            string dotnetCliLanguage = Environment.GetEnvironmentVariable("DOTNET_CLI_UI_LANGUAGE");
+            if (dotnetCliLanguage != null)
+            {
+                try
+                {
+                    return new CultureInfo(dotnetCliLanguage);
+                }
+                catch (CultureNotFoundException) { }
+            }
+
+            return null;
+        }
     }
 }
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index f3ae4a58ab3..6c4784bed37 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -647,7 +647,7 @@ public void SetConsoleUICulture()
         [Fact]
         public void ConsoleUIRespectsSDKLanguage()
         {
-            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !MSBuildApp.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
             {
                 return; // The feature to detect .NET SDK Languages is not enabled on this machine, so don't test it.
             }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 91e97d0a5d6..3663ba46305 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -36,7 +36,6 @@
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 using LiveLogger = Microsoft.Build.Logging.LiveLogger.LiveLogger;
 using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
@@ -224,6 +223,10 @@ string[] args
             )
 #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter
         {
+            // Setup the console UI.
+            using AutomaticEncodingRestorer _ = new();
+            SetConsoleUI();
+
             DebuggerLaunchCheck();
 
             // Initialize new build telemetry and record start of this build.
@@ -236,10 +239,6 @@ string[] args
                 DumpCounters(true /* initialize only */);
             }
 
-            // Setup the console UI.
-            using AutomaticEncodingRestorer _ = new();
-            SetConsoleUI();
-
             int exitCode;
             if (
                 ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) &&
@@ -1276,7 +1275,7 @@ internal static bool BuildProject(
                     }
                     else
                     {
-                        Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
+                        Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
 
                         project.SaveLogicalProject(preprocessWriter);
 
@@ -1522,7 +1521,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
         {
             try
             {
-                Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
+                Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
 
                 foreach (string target in project.Targets.Keys)
                 {
@@ -1677,7 +1676,7 @@ internal static void SetConsoleUI()
             Thread thisThread = Thread.CurrentThread;
 
             // Eliminate the complex script cultures from the language selection.
-            var desiredCulture = GetExternalOverridenUILanguageIfSupportableWithEncoding() ?? CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();
+            var desiredCulture = EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() ?? CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();
             thisThread.CurrentUICulture = desiredCulture;
 
             // For full framework, both the above and below must be set. This is not true in core, but it is a no op in core.
@@ -1717,89 +1716,6 @@ internal static void SetConsoleUI()
 #endif
         }
 
-        /// <summary>
-        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.
-        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.
-        /// This code introduces a breaking change due to the encoding of the console being changed.
-        /// If the environment variables are undefined, this function should be a no-op.
-        /// </summary>
-        /// <returns>
-        /// The custom language that was set by the user for an 'external' tool besides MSBuild.
-        /// Returns <see langword="null"/> if none are set.
-        /// </returns>
-        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()
-        {
-            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();
-            if (externalLanguageSetting != null)
-            {
-                if (
-                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals("en", StringComparison.InvariantCultureIgnoreCase) &&
-                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
-                    )
-                {
-                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.
-                    Console.OutputEncoding = Encoding.UTF8;
-                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.
-                    Console.InputEncoding = Encoding.UTF8;
-                    return externalLanguageSetting;
-                }
-                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
-                {
-                    return externalLanguageSetting;
-                }
-            }
-            return null;
-        }
-
-        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
-        {
-            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.
-            {
-                try
-                {
-                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
-                    var buildNumber = windowsVersionRegistry.GetValue("CurrentBuildNumber").ToString();
-                    const int buildNumberThatOfficialySupportsUTF8 = 18363;
-                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();
-                }
-                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)
-                {
-                    // We don't want to break those in VS on older versions of Windows with a non-en language.
-                    // Allow those without registry permissions to force the encoding, however.
-                    return ForceUniversalEncodingOptInEnabled();
-                }
-            }
-            return false;
-        }
-
-        private static bool ForceUniversalEncodingOptInEnabled()
-        {
-            return string.Equals(Environment.GetEnvironmentVariable("DOTNET_CLI_FORCE_UTF8_ENCODING"), "true", StringComparison.OrdinalIgnoreCase);
-        }
-
-        /// <summary>
-        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE.)
-        /// Does NOT check System Locale or OS Display Language.
-        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs
-        /// </summary>
-        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.
-        /// Returns null if none are set.</returns>
-        private static CultureInfo GetExternalOverriddenUILanguage()
-        {
-            // DOTNET_CLI_UI_LANGUAGE=<culture name> is the main way for users to customize the CLI's UI language via the .NET SDK.
-            string dotnetCliLanguage = Environment.GetEnvironmentVariable("DOTNET_CLI_UI_LANGUAGE");
-            if (dotnetCliLanguage != null)
-            {
-                try
-                {
-                    return new CultureInfo(dotnetCliLanguage);
-                }
-                catch (CultureNotFoundException) { }
-            }
-
-            return null;
-        }
-
         /// <summary>
         /// Gets all specified switches, from the command line, as well as all
         /// response files, including the auto-response file.
