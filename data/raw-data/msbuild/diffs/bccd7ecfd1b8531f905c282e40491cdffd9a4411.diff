diff --git a/documentation/NETFramework-NGEN.md b/documentation/NETFramework-NGEN.md
index c7ec1412d8d..b117cacd6c0 100644
--- a/documentation/NETFramework-NGEN.md
+++ b/documentation/NETFramework-NGEN.md
@@ -102,7 +102,9 @@ right binding redirects, allowing MSBuild to use `Assembly.Load` and get the nat
 
 This approach has some small startup cost (building the config, creating AppDomain & a `MarshalByRefObject`) and a small run-time overhead
 of cross-domain calls. The former is orders of magnitude smaller that the startup hit of JITting and the latter is negligible as long as
-the types moved across the AppDomain boundary do not require expensive marshaling.
+the types moved across the AppDomain boundary do not require expensive marshaling. Additionally, the requirement to execute code in multiple
+AppDomains necessitates the use of `LoaderOptimization.MultiDomain` for loading all assemblies domain-neutral. This may come with run-time
+cost for certain code patterns, although none has been measured in MSBuild scenarios.
 
 ## Task assemblies
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index b77576de797..bfab8a95e49 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -681,7 +681,9 @@
     <NuGetFrameworkWrapperRedirects_FilePath>$(IntermediateOutputPath)NuGetFrameworkWrapper.redirects.cs</NuGetFrameworkWrapperRedirects_FilePath>
   </PropertyGroup>
 
-  <!-- Extract binding redirects for Microsoft.Build from MSBuild.exe.config into a source file -->
+  <!-- Extract binding redirects for MSBuild and dependencies from MSBuild.exe.config into a source file.
+       This allows us to create secondary AppDomains with the same redirects at run-time, see
+       https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#nugetframeworks -->
   <Target Name="GenerateAppDomainConfig"
           Inputs="..\MSBuild\app.config;..\MSBuild\app.amd64.config"
           Outputs="$(NuGetFrameworkWrapperRedirects_FilePath)"
diff --git a/src/Build/Utilities/NuGetFrameworkWrapper.cs b/src/Build/Utilities/NuGetFrameworkWrapper.cs
index 84b3b21ea85..97ccb0de770 100644
--- a/src/Build/Utilities/NuGetFrameworkWrapper.cs
+++ b/src/Build/Utilities/NuGetFrameworkWrapper.cs
@@ -157,6 +157,11 @@ public string FilterTargetFrameworks(string incoming, string filter)
         /// </summary>
         public override object InitializeLifetimeService() => null;
 
+        /// <summary>
+        /// Creates <see cref="AppDomainSetup"/> suitable for loading Microsoft.Build, NuGet.Frameworks, and dependencies.
+        /// See https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#nugetframeworks for the motivation
+        /// to use a separate AppDomain.
+        /// </summary>
         private static AppDomainSetup CreateAppDomainSetup(AssemblyName assemblyName, string assemblyPath)
         {
             byte[] publicKeyToken = assemblyName.GetPublicKeyToken();
