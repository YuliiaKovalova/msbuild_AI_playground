diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 54eefeb925b..b1b0217df10 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -93,7 +93,7 @@ public static void AssertNonMultitargetingNode(ProjectGraphNode node, Dictionary
 
             IsNotMultitargeting(node).ShouldBeTrue();
             node.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
-            node.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNull();
+            node.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNullOrEmpty();
         }
 
         public static void AssertOuterBuildEvaluation(ProjectGraphNode outerBuild, Dictionary<string, string> additionalGlobalProperties)
@@ -103,7 +103,7 @@ public static void AssertOuterBuildEvaluation(ProjectGraphNode outerBuild, Dicti
             IsOuterBuild(outerBuild).ShouldBeTrue();
             IsInnerBuild(outerBuild).ShouldBeFalse();
 
-            outerBuild.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNull();
+            outerBuild.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNullOrEmpty();
             outerBuild.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
         }
 
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 8ec1d5af8bb..521627a2204 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -150,12 +150,12 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,
                         {
                             var projectRefSnapshot = new ProjectReferenceSnapshot(new Dictionary<string, string>()
                             {
-                                { ProjectInterpretation.FullPathMetadataName, referenceInfo.ReferenceConfiguration.ProjectFullPath },
-                                { ProjectInterpretation.ToolsVersionMetadataName, "" },
+                                // { ProjectInterpretation.ToolsVersionMetadataName, "" },
                             })
                             {
                                 ItemType = ProjectInterpretation.TransitiveReferenceItemName,
                                 EvaluatedInclude = currentNode.ProjectInstance.FullPath,
+                                FullPath = referenceInfo.ReferenceConfiguration.ProjectFullPath,
                             };
 
                             currentNode.AddProjectReference(
@@ -233,12 +233,12 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada
                     {
                         var projectRefSnapshot = new ProjectReferenceSnapshot(new Dictionary<string, string>()
                         {
-                            { ProjectInterpretation.FullPathMetadataName, referencedNode.ProjectInstance.FullPath },
-                            { ProjectInterpretation.ToolsVersionMetadataName, "" },
+                            // { ProjectInterpretation.ToolsVersionMetadataName, "" },
                         })
                         {
                             ItemType = SolutionItemReference,
-                            EvaluatedInclude = referencedNode.ProjectInstance.FullPath
+                            EvaluatedInclude = referencedNode.ProjectInstance.FullPath,
+                            FullPath = referencedNode.ProjectInstance.FullPath,
                         };
                         referencingNode.AddProjectReference(referencedNode, projectRefSnapshot, edges);
                     }
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 1c4ab035786..53a2579b70f 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -721,7 +721,7 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>
                 }
                 else if (targets[i].Equals(MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker, StringComparison.OrdinalIgnoreCase))
                 {
-                    var targetsString = graphEdge.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName); ;
+                    var targetsString = graphEdge.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
 
                     var expandedTargets = string.IsNullOrEmpty(targetsString)
                         ? defaultTargets
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 469b54f1427..a0c18585413 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -17,6 +17,7 @@ namespace Microsoft.Build.Graph
 {
     public class ProjectReferenceSnapshot
     {
+        public string FullPath = string.Empty;
         public string EvaluatedInclude = string.Empty;
         public string ItemType = string.Empty;
 
@@ -37,7 +38,6 @@ public ProjectReferenceSnapshot(ProjectItemInstance projectReferenceTarget)
                 { ItemMetadataNames.PropertiesMetadataName , projectReferenceTarget.GetMetadataValue(ItemMetadataNames.PropertiesMetadataName) },
                 { ItemMetadataNames.AdditionalPropertiesMetadataName , projectReferenceTarget.GetMetadataValue(ItemMetadataNames.AdditionalPropertiesMetadataName) },
                 { ItemMetadataNames.UndefinePropertiesMetadataName , projectReferenceTarget.GetMetadataValue(ItemMetadataNames.UndefinePropertiesMetadataName) },
-                { FullPathMetadataName , projectReferenceTarget.GetMetadataValue(FullPathMetadataName) },
                 { ProjectMetadataName , projectReferenceTarget.GetMetadataValue(ProjectMetadataName) },
                 { ToolsVersionMetadataName ,projectReferenceTarget.GetMetadataValue(ToolsVersionMetadataName) },
                 { SetPlatformMetadataName , projectReferenceTarget.GetMetadataValue(SetPlatformMetadataName) },
@@ -46,17 +46,25 @@ public ProjectReferenceSnapshot(ProjectItemInstance projectReferenceTarget)
                 { SetConfigurationMetadataName , projectReferenceTarget.GetMetadataValue(SetConfigurationMetadataName) },
                 { SetTargetFrameworkMetadataName ,projectReferenceTarget.GetMetadataValue(SetTargetFrameworkMetadataName) },
             };
+
+            FullPath = projectReferenceTarget.GetMetadataValue(FullPathMetadataName);
         }
 
         public string GetMetadataValue(string metadataName)
         {
+            // Note: FullPath is a special metadata that doesn't count towards the DirectMetadataCount.
+            if (FullPathMetadataName == metadataName)
+            {
+                return FullPath;
+            }
+
             if (Metadata.TryGetValue(metadataName, out string result))
             {
                 return result;
             }
 
-            // return string.Empty;
-            throw new System.Exception($"Metadata Not Found {metadataName} in {ItemType}::{EvaluatedInclude} snapshot.");
+            return string.Empty;
+            // throw new System.Exception($"Metadata not found {metadataName} in {ItemType}::{EvaluatedInclude} snapshot.");
         }
 
         public void SetMetadata(string metadataName, string value)
@@ -66,7 +74,7 @@ public void SetMetadata(string metadataName, string value)
 
         public bool HasMetadata(string metadataName)
         {
-            return Metadata.TryGetValue(metadataName, out string _);
+            return Metadata.TryGetValue(metadataName, out string result) && !string.IsNullOrEmpty(result);
         }
 
         public int DirectMetadataCount => Metadata.Count;
@@ -112,11 +120,12 @@ public ProjectInstanceSnapshot(ProjectInstance instance)
                     { "Platform", instance.GetPropertyValue("Platform") },
                     { "Configuration", instance.GetPropertyValue("Configuration") },
                     { "PlatformLookupTable", instance.GetPropertyValue("PlatformLookupTable") },
+                    { "ShouldUnsetParentConfigurationAndPlatform", instance.GetPropertyValue("ShouldUnsetParentConfigurationAndPlatform") },
                 };
 
-            if (!string.IsNullOrEmpty(innerBuildPropValue))
+            if (!string.IsNullOrEmpty(innerBuildPropName))
             {
-                Properties[innerBuildPropValue] = innerBuildPropValue;
+                Properties[innerBuildPropName] = innerBuildPropValue;
             }
 
             if (!string.IsNullOrEmpty(innerBuildPropValues))
@@ -172,7 +181,8 @@ public string GetPropertyValue(string propertyName)
                 return result;
             }
 
-            throw new System.Exception($"Property Not Found {propertyName} in snapshot.");
+            // throw new System.Exception($"Property '{propertyName}' not found in '{FullPath}' project snapshot.");
+            return string.Empty;
         }
     }
 
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index ba941963789..488202e68be 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -281,13 +281,12 @@ private static IEnumerable<ProjectReferenceSnapshot> ConstructInnerBuildReferenc
             {
                 var prSnapshot = new ProjectReferenceSnapshot(new Dictionary<string, string>()
                 {
-                    { FullPathMetadataName, outerBuild.FullPath },
                     { ItemMetadataNames.PropertiesMetadataName , $"{globalPropertyName}={globalPropertyValue}" },
-                    { "ToolsVersion", "" },
                 })
                 {
                     ItemType = InnerBuildReferenceItemName,
-                    EvaluatedInclude = outerBuild.FullPath
+                    EvaluatedInclude = outerBuild.FullPath,
+                    FullPath = outerBuild.FullPath,
                 };
 
                 yield return prSnapshot;
