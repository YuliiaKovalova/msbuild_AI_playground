diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index e72f28469c6..e737e12e19d 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1428,7 +1428,7 @@ private void EvaluateImportElement(string directoryOfImportingFile, ProjectImpor
         {
             using (_evaluationProfiler.TrackElement(importElement))
             {
-                List<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);
+                IEnumerable<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);
 
                 foreach (ProjectRootElement importedProjectRootElement in importedProjectRootElements)
                 {
@@ -1529,7 +1529,7 @@ private bool EvaluateWhenOrOtherwiseChildren(IEnumerable<ProjectElement> childre
         /// in those additional paths if the default fails.
         /// </remarks>
         /// </summary>
-        private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportingFile, ProjectImportElement importElement, out SdkResult sdkResult)
+        private IEnumerable<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportingFile, ProjectImportElement importElement, out SdkResult sdkResult)
         {
             var fallbackSearchPathMatch = _data.Toolset.GetProjectImportSearchPaths(importElement.Project);
             sdkResult = null;
@@ -1538,7 +1538,7 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin
             // so, use the Import path
             if (fallbackSearchPathMatch.Equals(ProjectImportPathMatch.None))
             {
-                List<ProjectRootElement> projects;
+                IEnumerable<ProjectRootElement> projects;
                 ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(directoryOfImportingFile, importElement, out projects, out sdkResult);
                 return projects;
             }
@@ -1632,7 +1632,7 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin
                 var newExpandedImportPath = importElement.Project.Replace(extensionPropertyRefAsString, extensionPathExpanded, StringComparison.OrdinalIgnoreCase);
                 _evaluationLoggingContext.LogComment(MessageImportance.Low, "TryingExtensionsPath", newExpandedImportPath, extensionPathExpanded);
 
-                List<ProjectRootElement> projects;
+                IEnumerable<ProjectRootElement> projects;
                 var result = ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, newExpandedImportPath, false, out projects);
 
                 if (result == LoadImportsResult.ProjectsImported)
@@ -1699,10 +1699,11 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin
         private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
             string directoryOfImportingFile,
             ProjectImportElement importElement,
-            out List<ProjectRootElement> projects,
+            out IEnumerable<ProjectRootElement> projects,
             out SdkResult sdkResult,
             bool throwOnFileNotExistsError = true)
         {
+            projects = Enumerable.Empty<ProjectRootElement>();
             sdkResult = null;
 
             if (!EvaluateConditionCollectingConditionedProperties(importElement, ExpanderOptions.ExpandProperties,
@@ -1731,7 +1732,7 @@ private void ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(
 
                     _evaluationLoggingContext.LogBuildEvent(eventArgs);
                 }
-                projects = new List<ProjectRootElement>();
+                
                 return;
             }
 
@@ -1830,31 +1831,29 @@ static string EvaluateProperty(string value, IElementLocation location,
 
                         _evaluationLoggingContext.LogBuildEvent(eventArgs);
 
-                        projects = new List<ProjectRootElement>();
-
                         return;
                     }
 
                     ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, "CouldNotResolveSdk", sdkReference.ToString());
                 }
 
-                if (sdkResult.Path == null)
-                {
-                    projects = new List<ProjectRootElement>();
-                }
-                else
+                List<ProjectRootElement> projectList = null;
+
+                if (sdkResult.Path != null)
                 {
                     ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, Path.Combine(sdkResult.Path, project),
                         throwOnFileNotExistsError, out projects);
 
                     if (sdkResult.AdditionalPaths != null)
                     {
+                        projectList = sdkResult.AdditionalPaths.Count > 0 ? new List<ProjectRootElement>() : null;
+
                         foreach (var additionalPath in sdkResult.AdditionalPaths)
                         {
                             ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, Path.Combine(additionalPath, project),
                                 throwOnFileNotExistsError, out var additionalProjects);
 
-                            projects.AddRange(additionalProjects);
+                            projectList.AddRange(additionalProjects);
                         }
                     }
                 }
@@ -1862,9 +1861,16 @@ static string EvaluateProperty(string value, IElementLocation location,
                 if ((sdkResult.PropertiesToAdd?.Any() == true) ||
                     (sdkResult.ItemsToAdd?.Any() == true))
                 {
+                    projectList ??= new List<ProjectRootElement>();
+
                     //  Inserting at the beginning will mean that the properties or items from the SdkResult will be evaluated before
                     //  any projects from paths returned by the SDK Resolver.
-                    projects.Insert(0, CreateProjectForSdkResult(sdkResult));
+                    projectList.Insert(0, CreateProjectForSdkResult(sdkResult));
+                }
+
+                if (projectList != null)
+                {
+                    projects = projectList;
                 }
             }
             else
@@ -1971,9 +1977,9 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
         /// requests can be satisfied without re-parsing it.
         /// </summary>
         private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(string directoryOfImportingFile, ProjectImportElement importElement, string unescapedExpression,
-                                            bool throwOnFileNotExistsError, out List<ProjectRootElement> imports)
+                                            bool throwOnFileNotExistsError, out IEnumerable<ProjectRootElement> imports)
         {
-            imports = new List<ProjectRootElement>();
+            imports = Enumerable.Empty<ProjectRootElement>();
 
             string importExpressionEscaped = _expander.ExpandIntoStringLeaveEscaped(unescapedExpression, ExpanderOptions.ExpandProperties, importElement.ProjectLocation);
             ElementLocation importLocationInProject = importElement.Location;
@@ -2010,6 +2016,8 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
             bool atleastOneImportIgnored = false;
             bool atleastOneImportEmpty = false;
 
+            List<ProjectRootElement> importList = null;
+
             foreach (string importExpressionEscapedItem in ExpressionShredder.SplitSemiColonSeparatedList(importExpressionEscaped))
             {
                 string[] importFilesEscaped = null;
@@ -2056,6 +2064,8 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                     }
                 }
 
+                importList = importFilesEscaped.Length > 0 ? new List<ProjectRootElement>() : null;
+
                 foreach (string importFileEscaped in importFilesEscaped)
                 {
                     string importFileUnescaped = EscapingUtilities.UnescapeAll(importFileEscaped);
@@ -2171,7 +2181,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                         }
                         else
                         {
-                            imports.Add(importedProjectElement);
+                            importList.Add(importedProjectElement);
 
                             if (_lastModifiedProject == null || importedProjectElement.LastWriteTimeWhenRead > _lastModifiedProject.LastWriteTimeWhenRead)
                             {
@@ -2311,8 +2321,9 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                 }
             }
 
-            if (imports.Count > 0)
+            if (importList?.Count > 0)
             {
+                imports = importList;
                 return LoadImportsResult.ProjectsImported;
             }
 
