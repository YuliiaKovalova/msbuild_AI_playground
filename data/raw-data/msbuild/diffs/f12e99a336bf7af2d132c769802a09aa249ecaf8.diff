diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 1dcc2fb9fc2..500e45ad5a8 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -15,8 +15,9 @@
   </PropertyGroup>
 
   <PropertyGroup>
-    <NuGetCommandLinePackageVersion>4.1.0</NuGetCommandLinePackageVersion>
-</PropertyGroup>
+    <!-- Managed manually since PackageDownload is not supported by dependabot https://github.com/dependabot/dependabot-core/issues/2920 -->
+    <NuGetCommandLinePackageVersion>6.5.0</NuGetCommandLinePackageVersion>
+  </PropertyGroup>
 
   <ItemGroup>
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
@@ -28,7 +29,7 @@
 
   <ItemGroup>
     <!-- GeneratePathProperty currently isn't enabled for PackageDownload. -->
-    <Content Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(Configuration)' == 'Release'" Include="$(NuGetPackageRoot)\nuget.commandline\$(NuGetCommandLinePackageVersion)\tools\NuGet.exe" CopyToOutputDirectory="PreserveNewest" Link="nuget\NuGet.exe" />
+    <Content Condition="'$(MSBuildRuntimeType)' != 'Core'" Include="$(NuGetPackageRoot)\nuget.commandline\$(NuGetCommandLinePackageVersion)\tools\NuGet.exe" CopyToOutputDirectory="PreserveNewest" Link="nuget\NuGet.exe" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index c0a00cf572e..ee35a83c93a 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -1,13 +1,11 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-#if !DEBUG
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
 using Shouldly;
 using System.IO;
 using Xunit;
-#endif
 using Xunit.Abstractions;
 using Xunit.NetCore.Extensions;
 
@@ -21,9 +19,7 @@ public NugetRestoreTests(ITestOutputHelper output)
             _output = output;
         }
 
-        // This NuGet version cannot locate other assemblies when parsing solutions at restore time. This includes localized strings required in debug mode.
-        // NuGet version 4.1.0 was somewhat arbitrarily chosen. 3.5 breaks with an unrelated error, and 4.8.2 does not fail when a new dependency is introduced. This is a safe middle point.
-#if !DEBUG
+        // Tests proper loading of msbuild assemblies by nuget.exe
         [WindowsFullFrameworkOnlyFact]
         public void TestOldNuget()
         {
@@ -54,6 +50,5 @@ public void TestOldNuget()
             RunnerUtilities.RunProcessAndGetOutput(Path.Combine(msbuildExePath, "nuget", "NuGet.exe"), "restore " + sln.Path + " -MSBuildPath \"" + msbuildExePath + "\"", out bool success, outputHelper: _output);
             success.ShouldBeTrue();
         }
-#endif
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index 170b025bbac..54384181025 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -75,7 +75,7 @@ private BuildAbortedException(string message, Exception innerException, bool cal
             }
         }
 
-        protected internal override IDictionary<string, string> FlushCustomState()
+        protected override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -83,7 +83,7 @@ protected internal override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected internal override void InitializeCustomState(IDictionary<string, string> state)
+        protected override void InitializeCustomState(IDictionary<string, string> state)
         {
             ErrorCode = state[nameof(ErrorCode)];
         }
diff --git a/src/Build/Errors/InternalLoggerException.cs b/src/Build/Errors/InternalLoggerException.cs
index c174e2e3df3..89e5139ea48 100644
--- a/src/Build/Errors/InternalLoggerException.cs
+++ b/src/Build/Errors/InternalLoggerException.cs
@@ -136,7 +136,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("initializationException", initializationException);
         }
 
-        protected internal override IDictionary<string, string> FlushCustomState()
+        protected override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -146,7 +146,7 @@ protected internal override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected internal override void InitializeCustomState(IDictionary<string, string> state)
+        protected override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
             helpKeyword = state[nameof(helpKeyword)];
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index bdda27c2fdd..ff6e47dc437 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Runtime.Serialization;
+using Microsoft.Build.BackEnd;
 using System.Collections.Generic;
 #if FEATURE_SECURITY_PERMISSIONS
 using System.Security.Permissions;
@@ -22,9 +23,7 @@ namespace Microsoft.Build.Exceptions
     // promise to never change the type's fields i.e. the type is immutable; adding new fields in the next version of the type
     // without following certain special FX guidelines, can break both forward and backward compatibility
     [Serializable]
-    // WARNING: Intentionally deriving from Microsoft.Build.Internal.BuildExceptionBase and not Microsoft.Build.Backend.BuildExceptionBase
-    //  as due to nuget.exe limitations this cannot depend on Microsoft.Build.Framework assembly
-    public sealed class InvalidProjectFileException : Microsoft.Build.Internal.BuildExceptionBase
+    public sealed class InvalidProjectFileException : BuildExceptionBase
     {
         #region Basic constructors
 
@@ -125,7 +124,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("hasBeenLogged", hasBeenLogged);
         }
 
-        protected internal override IDictionary<string, string> FlushCustomState()
+        protected override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -141,7 +140,7 @@ protected internal override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected internal override void InitializeCustomState(IDictionary<string, string> state)
+        protected override void InitializeCustomState(IDictionary<string, string> state)
         {
             file = state[nameof(file)];
             lineNumber = int.Parse(state[nameof(lineNumber)]);
diff --git a/src/Build/Errors/InvalidToolsetDefinitionException.cs b/src/Build/Errors/InvalidToolsetDefinitionException.cs
index 8154d59ba77..ba704d024da 100644
--- a/src/Build/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Build/Errors/InvalidToolsetDefinitionException.cs
@@ -105,7 +105,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("errorCode", errorCode);
         }
 
-        protected internal override IDictionary<string, string> FlushCustomState()
+        protected override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -113,7 +113,7 @@ protected internal override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected internal override void InitializeCustomState(IDictionary<string, string> state)
+        protected override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
         }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7234d024aae..ab2df648d19 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -698,9 +698,6 @@
       <Link>Errors\ErrorUtilities.cs</Link>
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
-    <Compile Include="..\Framework\BuildException\BuildExceptionBase.cs">
-      <Link>Errors\BuildExceptionBase.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\EscapingUtilities.cs">
       <Link>SharedUtilities\EscapingUtilities.cs</Link>
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index edaf0779692..966fb665d60 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Xml;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index 1507ab9a664..826f2f0694e 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -487,7 +487,7 @@ public void TranslateException(ref Exception value)
                     return;
                 }
 
-                value = BuildExceptionSerializationHelper.ReadExceptionFromTranslator(this);
+                value = BuildExceptionBase.ReadExceptionFromTranslator(this);
             }
 
 
@@ -1121,7 +1121,7 @@ public void TranslateException(ref Exception value)
                     return;
                 }
 
-                BuildExceptionSerializationHelper.WriteExceptionToTranslator(this, value);
+                BuildExceptionBase.WriteExceptionToTranslator(this, value);
             }
 
             /// <summary>
diff --git a/src/Framework/BuildException/BuildExceptionBase.cs b/src/Framework/BuildException/BuildExceptionBase.cs
index 9f02ee46c47..af9cfb9f8e8 100644
--- a/src/Framework/BuildException/BuildExceptionBase.cs
+++ b/src/Framework/BuildException/BuildExceptionBase.cs
@@ -3,36 +3,34 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
+using System.IO;
 using System.Runtime.Serialization;
-#if !MSBUILD_FRAMEWORK && !TASKHOST
-using Microsoft.Build.BackEnd;
+using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.Internal;
-#else
 namespace Microsoft.Build.BackEnd;
-#endif
 
 public abstract class BuildExceptionBase : Exception
 {
     private string? _remoteTypeName;
     private string? _remoteStackTrace;
 
-    protected internal BuildExceptionBase()
+    private protected BuildExceptionBase()
         : base()
     { }
 
-    protected internal BuildExceptionBase(string message)
+    private protected BuildExceptionBase(string message)
         : base(message)
     { }
 
-    protected internal BuildExceptionBase(
+    private protected BuildExceptionBase(
         string message,
         Exception? inner)
         : base(message, inner)
     { }
 
     // This is needed as soon as we allow opt out of the non-BinaryFormatter serialization
-    protected internal BuildExceptionBase(SerializationInfo info, StreamingContext context)
+    private protected BuildExceptionBase(SerializationInfo info, StreamingContext context)
         : base(info, context)
     { }
 
@@ -40,18 +38,15 @@ protected internal BuildExceptionBase(SerializationInfo info, StreamingContext c
 
     public override string ToString() => string.IsNullOrEmpty(_remoteTypeName) ? base.ToString() : $"{_remoteTypeName}->{base.ToString()}";
 
-    protected internal virtual void InitializeCustomState(IDictionary<string, string?>? customKeyedSerializedData)
+    protected virtual void InitializeCustomState(IDictionary<string, string?>? customKeyedSerializedData)
     { /* This is it. Override for exceptions with custom state */ }
 
-    protected internal virtual IDictionary<string, string?>? FlushCustomState()
+    protected virtual IDictionary<string, string?>? FlushCustomState()
     {
         /* This is it. Override for exceptions with custom state */
         return null;
     }
 
-    // Do not remove - accessed via reflection
-    //  we cannot use strong typed method, as InvalidProjectFileException needs to be independent on the base in Microsoft.Build.Framework
-    //  (that's given by the legacy need of nuget.exe to call SolutionFile utils from Microsoft.Build without proper loading Microsoft.Build.Framework)
     private void InitializeFromRemoteState(BuildExceptionRemoteState remoteState)
     {
         _remoteTypeName = remoteState.RemoteTypeName;
@@ -64,4 +59,89 @@ private void InitializeFromRemoteState(BuildExceptionRemoteState remoteState)
             InitializeCustomState(remoteState.CustomKeyedSerializedData);
         }
     }
+
+    internal static void WriteExceptionToTranslator(ITranslator translator, Exception exception)
+    {
+        BinaryWriter writer = translator.Writer;
+        writer.Write(exception.InnerException != null);
+        if (exception.InnerException != null)
+        {
+            WriteExceptionToTranslator(translator, exception.InnerException);
+        }
+
+        string serializationType = BuildExceptionSerializationHelper.GetExceptionSerializationKey(exception.GetType());
+        writer.Write(serializationType);
+        writer.Write(exception.Message);
+        writer.WriteOptionalString(exception.StackTrace);
+        writer.WriteOptionalString(exception.Source);
+        writer.WriteOptionalString(exception.HelpLink);
+        // HResult is completely protected up till net4.5
+#if NET || NET45_OR_GREATER
+        int? hresult = exception.HResult;
+#else
+            int? hresult = null;
+#endif
+        writer.WriteOptionalInt32(hresult);
+
+        IDictionary<string, string?>? customKeyedSerializedData = (exception as BuildExceptionBase)?.FlushCustomState();
+        if (customKeyedSerializedData == null)
+        {
+            writer.Write((byte)0);
+        }
+        else
+        {
+            writer.Write((byte)1);
+            writer.Write(customKeyedSerializedData.Count);
+            foreach (var pair in customKeyedSerializedData)
+            {
+                writer.Write(pair.Key);
+                writer.WriteOptionalString(pair.Value);
+            }
+        }
+
+        Debug.Assert((exception.Data?.Count ?? 0) == 0,
+            "Exception Data is not supported in BuildTransferredException");
+    }
+
+    internal static Exception ReadExceptionFromTranslator(ITranslator translator)
+    {
+        BinaryReader reader = translator.Reader;
+        Exception? innerException = null;
+        if (reader.ReadBoolean())
+        {
+            innerException = ReadExceptionFromTranslator(translator);
+        }
+
+        string serializationType = reader.ReadString();
+        string message = reader.ReadString();
+        string? deserializedStackTrace = reader.ReadOptionalString();
+        string? source = reader.ReadOptionalString();
+        string? helpLink = reader.ReadOptionalString();
+        int hResult = reader.ReadOptionalInt32();
+
+        IDictionary<string, string?>? customKeyedSerializedData = null;
+        if (reader.ReadByte() == 1)
+        {
+            int count = reader.ReadInt32();
+            customKeyedSerializedData = new Dictionary<string, string?>(count, StringComparer.CurrentCulture);
+
+            for (int i = 0; i < count; i++)
+            {
+                customKeyedSerializedData[reader.ReadString()] = reader.ReadOptionalString();
+            }
+        }
+
+        BuildExceptionBase exception = BuildExceptionSerializationHelper.CreateExceptionFactory(serializationType)(message, innerException);
+
+        exception.InitializeFromRemoteState(
+            new BuildExceptionRemoteState(
+                serializationType,
+                deserializedStackTrace,
+                source,
+                helpLink,
+                hResult,
+                customKeyedSerializedData));
+
+        return exception;
+    }
 }
diff --git a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
index cbb2a075f80..f3532f6756b 100644
--- a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
+++ b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
@@ -4,99 +4,25 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
-using System.IO;
 using System.Reflection;
 using System.Threading;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
 {
     internal static class BuildExceptionSerializationHelper
     {
-        private class BuildExceptionConstructionCallbacks
-        {
-            public BuildExceptionConstructionCallbacks(
-                Func<string, Exception?, Exception> factory,
-                Action<Exception, BuildExceptionRemoteState> instnaceInitializer,
-                Func<Exception, IDictionary<string, string?>?> remoteStateExtractor)
-            {
-                Factory = factory;
-                InstnaceInitializer = instnaceInitializer;
-                RemoteStateExtractor = remoteStateExtractor;
-            }
-
-            internal Func<string, Exception?, Exception> Factory { get; }
-            internal Action<Exception, BuildExceptionRemoteState> InstnaceInitializer { get; }
-            internal Func<Exception, IDictionary<string, string?>?> RemoteStateExtractor { get; }
-        }
+        private static Dictionary<string, Func<string, Exception?, BuildExceptionBase>>? s_exceptionFactories;
 
-        private static Dictionary<string, BuildExceptionConstructionCallbacks>? s_exceptionFactories;
-
-        private static readonly BuildExceptionConstructionCallbacks s_defaultFactory =
-            new BuildExceptionConstructionCallbacks(
-                (message, innerException) => new GenericBuildTransferredException(message, innerException),
-                GetInstanceInitializer(typeof(GenericBuildTransferredException))!,
-                _ => null);
-
-        private static Action<Exception, BuildExceptionRemoteState>? GetInstanceInitializer(Type exceptionType)
-        {
-            while (!exceptionType.Name.Equals(nameof(BuildExceptionBase)) && exceptionType.BaseType != null)
-            {
-                exceptionType = exceptionType.BaseType!;
-            }
-
-            MethodInfo? methodInfo = exceptionType.GetMethod(
-                "InitializeFromRemoteState",
-                BindingFlags.Instance | BindingFlags.NonPublic,
-                null,
-                new[] { typeof(BuildExceptionRemoteState) },
-                null);
-
-            if (methodInfo != null)
-            {
-                // Not possible - contravariance not supported. We'd need to use Expression trees and compile them.
-                // return
-                //    (Action<Exception, BuildExceptionRemoteState>)
-                //    Delegate.CreateDelegate(typeof(Action<Exception, BuildExceptionRemoteState>), null, methodInfo);
-
-                return (exception, remoteState) => methodInfo.Invoke(exception, new object[] { remoteState });
-            }
-
-            return null;
-        }
-
-        private static Func<Exception, IDictionary<string, string?>?>? GetRemoteStateExtractor(Type exceptionType)
-        {
-            MethodInfo? methodInfo = exceptionType.GetMethod(
-                "FlushCustomState",
-                BindingFlags.Instance | BindingFlags.NonPublic,
-                null,
-                Type.EmptyTypes,
-                null);
-
-            if (methodInfo != null)
-            {
-                // Not possible - contravariance not supported. We'd need to use Expression trees and compile them.
-                // return
-                //    (Func<Exception, IDictionary<string, string?>?>)
-                //    Delegate.CreateDelegate(typeof(Func<BuildExceptionBase, IDictionary<string, string?>?>), null,
-                //        methodInfo);
-
-                return (exception) => (IDictionary<string, string?>?)methodInfo.Invoke(exception, null);
-            }
-
-            return null;
-        }
+        private static readonly Func<string, Exception?, BuildExceptionBase> s_defaultFactory =
+            (message, innerException) => new GenericBuildTransferredException(message, innerException);
 
         internal static bool IsSupportedExceptionType(Type type)
         {
             return type.IsClass &&
                    !type.IsAbstract &&
                    type.IsSubclassOf(typeof(Exception)) &&
-                   (type.IsSubclassOf(typeof(BuildExceptionBase)) ||
-                    // This is to support InvalidProjectFileException which is cannot be a subclass of BuildExceptionBase from Microsoft.Build.Framework
-                    type.BaseType!.Name.Equals(nameof(BuildExceptionBase)));
+                   type.IsSubclassOf(typeof(BuildExceptionBase));
         }
 
         internal static void InitializeSerializationContract(params Type[] exceptionTypesWhitelist)
@@ -111,7 +37,7 @@ internal static void InitializeSerializationContract(IEnumerable<Type> exception
                 return;
             }
 
-            var exceptionFactories = new Dictionary<string, BuildExceptionConstructionCallbacks>();
+            var exceptionFactories = new Dictionary<string, Func<string, Exception?, BuildExceptionBase>>();
 
             foreach (Type exceptionType in exceptionTypesWhitelist)
             {
@@ -120,13 +46,8 @@ internal static void InitializeSerializationContract(IEnumerable<Type> exception
                     EscapeHatches.ThrowInternalError($"Type {exceptionType.FullName} is not recognized as a build exception type.");
                 }
 
-                Func<Exception, IDictionary<string, string?>?>? remoteStateExtractor =
-                    GetRemoteStateExtractor(exceptionType);
-
                 // First try to find a static method CreateFromRemote
                 //   - to be used when exception has custom constructor logic (e.g. altering messages)
-                Func<string, Exception?, Exception>? factory = null;
-                bool hasFactory = false;
                 MethodInfo? methodInfo = exceptionType.GetMethod(
                     "CreateFromRemote",
                     BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic,
@@ -136,40 +57,29 @@ internal static void InitializeSerializationContract(IEnumerable<Type> exception
 
                 if (methodInfo != null)
                 {
-                    factory = (Func<string, Exception?, Exception>)Delegate.CreateDelegate(
-                        typeof(Func<string, Exception?, Exception>), methodInfo);
-                }
-                else
-                {
-                    // Then fallback to a constructor with (string, Exception) signature
-                    ConstructorInfo? ctorInfo = exceptionType.GetConstructor(
-                        BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.NonPublic |
-                        BindingFlags.Instance,
-                        null,
-                        new[] { typeof(string), typeof(Exception) },
-                        null);
+                    string key = GetExceptionSerializationKey(exceptionType);
+                    var value = (Func<string, Exception?, BuildExceptionBase>)Delegate.CreateDelegate(typeof(Func<string, Exception?, BuildExceptionBase>), methodInfo);
 
-                    if (ctorInfo != null)
-                    {
-                        factory = (message, innerException) =>
-                            (Exception)ctorInfo.Invoke(new object?[] { message, innerException });
-                    }
+                    exceptionFactories[key] = value;
+                    continue;
                 }
 
-                // Lastly we need to have 'InitializeFromRemoteState' method
-                if (factory != null)
+                // Otherwise use the constructor that accepts inner exception and a message
+                ConstructorInfo? ctorInfo = exceptionType.GetConstructor(
+                    BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,
+                    null,
+                    new[] { typeof(string), typeof(Exception) },
+                    null);
+
+                if (ctorInfo != null)
                 {
-                    Action<Exception, BuildExceptionRemoteState>? instanceInitializer =
-                        GetInstanceInitializer(exceptionType);
-                    if (instanceInitializer != null)
-                    {
-                        exceptionFactories.Add(GetExceptionSerializationKey(exceptionType),
-                            new BuildExceptionConstructionCallbacks(factory, instanceInitializer, remoteStateExtractor!));
-                        hasFactory = true;
-                    }
-                }
+                    string key = GetExceptionSerializationKey(exceptionType);
+                    Func<string, Exception?, BuildExceptionBase> value = (message, innerException) =>
+                        (BuildExceptionBase)ctorInfo.Invoke(new object?[] { message, innerException });
 
-                if (!hasFactory)
+                    exceptionFactories[key] = value;
+                }
+                else
                 {
                     Debug.Fail($"Unable to find a factory for exception type {exceptionType.FullName}");
                 }
@@ -186,9 +96,9 @@ internal static string GetExceptionSerializationKey(Type exceptionType)
             return exceptionType.FullName ?? exceptionType.ToString();
         }
 
-        private static BuildExceptionConstructionCallbacks CreateExceptionFactory(string serializationType)
+        internal static Func<string, Exception?, BuildExceptionBase> CreateExceptionFactory(string serializationType)
         {
-            BuildExceptionConstructionCallbacks? factory = null;
+            Func<string, Exception?, BuildExceptionBase>? factory = null;
             if (s_exceptionFactories == null)
             {
                 EscapeHatches.ThrowInternalError("Serialization contract was not initialized.");
@@ -200,90 +110,5 @@ private static BuildExceptionConstructionCallbacks CreateExceptionFactory(string
 
             return factory ?? s_defaultFactory;
         }
-
-        internal static void WriteExceptionToTranslator(ITranslator translator, Exception exception)
-        {
-            BinaryWriter writer = translator.Writer;
-            writer.Write(exception.InnerException != null);
-            if (exception.InnerException != null)
-            {
-                WriteExceptionToTranslator(translator, exception.InnerException);
-            }
-
-            string serializationType = GetExceptionSerializationKey(exception.GetType());
-            writer.Write(serializationType);
-            writer.Write(exception.Message);
-            writer.WriteOptionalString(exception.StackTrace);
-            writer.WriteOptionalString(exception.Source);
-            writer.WriteOptionalString(exception.HelpLink);
-            // HResult is completely protected up till net4.5
-#if NET || NET45_OR_GREATER
-            int? hresult = exception.HResult;
-#else
-            int? hresult = null;
-#endif
-            writer.WriteOptionalInt32(hresult);
-
-            IDictionary<string, string?>? customKeyedSerializedData = CreateExceptionFactory(serializationType).RemoteStateExtractor(exception);
-            if (customKeyedSerializedData == null)
-            {
-                writer.Write((byte)0);
-            }
-            else
-            {
-                writer.Write((byte)1);
-                writer.Write(customKeyedSerializedData.Count);
-                foreach (var pair in customKeyedSerializedData)
-                {
-                    writer.Write(pair.Key);
-                    writer.WriteOptionalString(pair.Value);
-                }
-            }
-
-            Debug.Assert((exception.Data?.Count ?? 0) == 0,
-                "Exception Data is not supported in BuildTransferredException");
-        }
-
-        internal static Exception ReadExceptionFromTranslator(ITranslator translator)
-        {
-            BinaryReader reader = translator.Reader;
-            Exception? innerException = null;
-            if (reader.ReadBoolean())
-            {
-                innerException = ReadExceptionFromTranslator(translator);
-            }
-
-            string serializationType = reader.ReadString();
-            string message = reader.ReadString();
-            string? deserializedStackTrace = reader.ReadOptionalString();
-            string? source = reader.ReadOptionalString();
-            string? helpLink = reader.ReadOptionalString();
-            int hResult = reader.ReadOptionalInt32();
-
-            IDictionary<string, string?>? customKeyedSerializedData = null;
-            if (reader.ReadByte() == 1)
-            {
-                int count = reader.ReadInt32();
-                customKeyedSerializedData = new Dictionary<string, string?>(count, StringComparer.CurrentCulture);
-
-                for (int i = 0; i < count; i++)
-                {
-                    customKeyedSerializedData[reader.ReadString()] = reader.ReadOptionalString();
-                }
-            }
-
-            BuildExceptionConstructionCallbacks constructionCallbacks = CreateExceptionFactory(serializationType);
-
-            Exception exception = constructionCallbacks.Factory(message, innerException);
-            constructionCallbacks.InstnaceInitializer(exception, new BuildExceptionRemoteState(
-                serializationType,
-                deserializedStackTrace,
-                source,
-                helpLink,
-                hResult,
-                customKeyedSerializedData));
-
-            return exception;
-        }
     }
 }
diff --git a/src/Framework/LoggerException.cs b/src/Framework/LoggerException.cs
index cce14c44139..45533829b48 100644
--- a/src/Framework/LoggerException.cs
+++ b/src/Framework/LoggerException.cs
@@ -106,7 +106,7 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("helpKeyword", helpKeyword);
         }
 
-        protected internal override IDictionary<string, string> FlushCustomState()
+        protected override IDictionary<string, string> FlushCustomState()
         {
             return new Dictionary<string, string>()
             {
@@ -115,7 +115,7 @@ protected internal override IDictionary<string, string> FlushCustomState()
             };
         }
 
-        protected internal override void InitializeCustomState(IDictionary<string, string> state)
+        protected override void InitializeCustomState(IDictionary<string, string> state)
         {
             errorCode = state[nameof(errorCode)];
             helpKeyword = state[nameof(helpKeyword)];
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index a1e1ec68dc2..f74a7047925 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -9,7 +9,6 @@
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
     <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
     <EnablePackageValidation>true</EnablePackageValidation>
-    <DefineConstants>$(DefineConstants);MSBUILD_FRAMEWORK</DefineConstants>
   </PropertyGroup>
 
   <ItemGroup>
