diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index b8440d4530d..b83468d4bd9 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1051,6 +1051,7 @@ public BuildResult() { }
         public Microsoft.Build.Execution.ProjectInstance ProjectStateAfterBuild { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, Microsoft.Build.Execution.TargetResult> ResultsByTarget { get { throw null; } }
         public int SubmissionId { get { throw null; } }
+        public System.Collections.Generic.HashSet<string> Targets { get { throw null; } set { } }
         public void AddResultsForTarget(string target, Microsoft.Build.Execution.TargetResult result) { }
         public bool HasResultsForTarget(string target) { throw null; }
         public void MergeResults(Microsoft.Build.Execution.BuildResult results) { }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 5a215a8c307..7c0db60b972 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1046,6 +1046,7 @@ public BuildResult() { }
         public Microsoft.Build.Execution.ProjectInstance ProjectStateAfterBuild { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, Microsoft.Build.Execution.TargetResult> ResultsByTarget { get { throw null; } }
         public int SubmissionId { get { throw null; } }
+        public System.Collections.Generic.HashSet<string> Targets { get { throw null; } set { } }
         public void AddResultsForTarget(string target, Microsoft.Build.Execution.TargetResult result) { }
         public bool HasResultsForTarget(string target) { throw null; }
         public void MergeResults(Microsoft.Build.Execution.BuildResult results) { }
diff --git a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
index a964b540d51..152e157812c 100644
--- a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
@@ -206,7 +206,7 @@ public void CollidingConfigurationsGetMergedViaFirstOneWinsResolution()
             aggregatedCache.ConfigCache.First().GlobalProperties.ToDictionary().ShouldBe(new Dictionary<string, string> { ["p"] = "v" });
             aggregatedCache.ConfigCache.First().ToolsVersion.ShouldBe("13");
             // first config wins
-            aggregatedCache.ConfigCache.First().TargetNames.ShouldBe(new []{"foo"});
+            aggregatedCache.ConfigCache.First().RequestedTargetNames.ShouldBe(new []{"foo"});
 
             aggregatedCache.ResultsCache.Count().ShouldBe(1);
             aggregatedCache.ResultsCache.First().ResultsByTarget.Count.ShouldBe(4);
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index e27729e3fb6..cd7dc824128 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1148,7 +1148,7 @@ internal void LoadSolutionIntoConfiguration(BuildRequestConfiguration config, Bu
             }
 
             ErrorUtilities.VerifyThrow(FileUtilities.IsSolutionFilename(config.ProjectFullPath), "{0} is not a solution", config.ProjectFullPath);
-            ProjectInstance[] instances = ProjectInstance.LoadSolutionForBuild(config.ProjectFullPath, config.GlobalProperties, config.ExplicitToolsVersionSpecified ? config.ToolsVersion : null, _buildParameters, ((IBuildComponentHost)this).LoggingService, request.BuildEventContext, false /* loaded by solution parser*/, config.TargetNames, SdkResolverService, request.SubmissionId);
+            ProjectInstance[] instances = ProjectInstance.LoadSolutionForBuild(config.ProjectFullPath, config.GlobalProperties, config.ExplicitToolsVersionSpecified ? config.ToolsVersion : null, _buildParameters, ((IBuildComponentHost)this).LoggingService, request.BuildEventContext, false /* loaded by solution parser*/, config.RequestedTargetNames, SdkResolverService, request.SubmissionId);
 
             // The first instance is the traversal project, which goes into this configuration
             config.Project = instances[0];
@@ -1820,6 +1820,11 @@ private void HandleResult(int node, BuildResult result)
                 {
                     configuration.ProjectInitialTargets = result.InitialTargets;
                 }
+
+                if (configuration.ProjectTargets == null)
+                {
+                    configuration.ProjectTargets = result.Targets;
+                }
             }
 
             IEnumerable<ScheduleResponse> response = _scheduler.ReportResult(node, result);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 2cf6ea5f8ed..5a4311dc18d 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -7,6 +7,7 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks.Dataflow;
 using Microsoft.Build.BackEnd.Logging;
@@ -784,6 +785,7 @@ private void EvaluateRequestStates()
                     // own cache.
                     completedEntry.Result.DefaultTargets = configuration.ProjectDefaultTargets;
                     completedEntry.Result.InitialTargets = configuration.ProjectInitialTargets;
+                    completedEntry.Result.Targets = configuration.Project.Targets.Keys.ToHashSet();
                 }
 
                 TraceEngine("ERS: Request is now {0}({1}) (nr {2}) has had its builder cleaned up.", completedEntry.Request.GlobalRequestId, completedEntry.Request.ConfigurationId, completedEntry.Request.NodeRequestId);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index 8446b48cae0..65bea74eaf8 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -192,7 +192,7 @@ public void WaitForConfiguration(BuildRequestConfiguration configuration)
         {
             ErrorUtilities.VerifyThrow(configuration.WasGeneratedByNode, "Configuration has already been resolved.");
 
-            _unresolvedConfigurationsToIssue = _unresolvedConfigurationsToIssue ?? new List<BuildRequestConfiguration>();
+            _unresolvedConfigurationsToIssue ??= new List<BuildRequestConfiguration>();
             _unresolvedConfigurationsToIssue.Add(configuration);
         }
 
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index b8f74a16d05..d192661d3c1 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -138,7 +138,7 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// <summary>
         /// The target names that were requested to execute.
         /// </summary>
-        internal IReadOnlyCollection<string> TargetNames { get; }
+        internal IReadOnlyCollection<string> RequestedTargetNames { get; }
 
         /// <summary>
         /// Initializes a configuration from a BuildRequestData structure.  Used by the BuildManager.
@@ -170,14 +170,17 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
             _explicitToolsVersionSpecified = data.ExplicitToolsVersionSpecified;
             _toolsVersion = ResolveToolsVersion(data, defaultToolsVersion);
             _globalProperties = data.GlobalPropertiesDictionary;
-            TargetNames = new List<string>(data.TargetNames);
+            RequestedTargetNames = new List<string>(data.TargetNames);
 
             // The following information only exists when the request is populated with an existing project.
             if (data.ProjectInstance != null)
             {
                 _project = data.ProjectInstance;
+
                 _projectInitialTargets = data.ProjectInstance.InitialTargets;
                 _projectDefaultTargets = data.ProjectInstance.DefaultTargets;
+                _projectTargets = data.ProjectInstance.Targets.Keys.ToHashSet();
+
                 _translateEntireProjectInstanceState = data.ProjectInstance.TranslateEntireState;
 
                 if (data.PropertiesToTransfer != null)
@@ -214,8 +217,11 @@ internal BuildRequestConfiguration(int configId, ProjectInstance instance)
             _globalProperties = instance.GlobalPropertiesDictionary;
 
             _project = instance;
+
             _projectInitialTargets = instance.InitialTargets;
             _projectDefaultTargets = instance.DefaultTargets;
+            _projectTargets = instance.Targets.Keys.ToHashSet();
+
             _translateEntireProjectInstanceState = instance.TranslateEntireState;
             IsCacheable = false;
         }
@@ -234,13 +240,14 @@ private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
             _transferredProperties = other._transferredProperties;
             _projectDefaultTargets = other._projectDefaultTargets;
             _projectInitialTargets = other._projectInitialTargets;
+            _projectTargets = other._projectTargets;
             _projectFullPath = other._projectFullPath;
             _toolsVersion = other._toolsVersion;
             _explicitToolsVersionSpecified = other._explicitToolsVersionSpecified;
             _globalProperties = other._globalProperties;
             IsCacheable = other.IsCacheable;
             _configId = configId;
-            TargetNames = other.TargetNames;
+            RequestedTargetNames = other.RequestedTargetNames;
             _skippedFromStaticGraphIsolationConstraints = other._skippedFromStaticGraphIsolationConstraints;
         }
 
@@ -408,9 +415,12 @@ private void SetProjectBasedState(ProjectInstance project)
             // Clear these out so the other accessors don't complain.  We don't want to generally enable resetting these fields.
             _projectDefaultTargets = null;
             _projectInitialTargets = null;
+            _projectTargets = null;
 
             ProjectDefaultTargets = _project.DefaultTargets;
             ProjectInitialTargets = _project.InitialTargets;
+            ProjectTargets = _project.Targets.Keys.ToHashSet();
+
             _translateEntireProjectInstanceState = _project.TranslateEntireState;
 
             if (IsCached)
@@ -483,6 +493,16 @@ public List<string> ProjectDefaultTargets
             }
         }
 
+        public HashSet<string> ProjectTargets
+        {
+            get => _projectTargets;
+            set
+            {
+                ErrorUtilities.VerifyThrow(_projectTargets == null, "Targets cannot be reset once they have been set.");
+                _projectTargets = value;
+            }
+        }
+
         /// <summary>
         /// Returns the node packet type
         /// </summary>
@@ -686,6 +706,7 @@ public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)
 
         private Func<string, bool> shouldSkipStaticGraphIsolationOnReference;
         private bool _skippedFromStaticGraphIsolationConstraints;
+        private HashSet<string> _projectTargets;
 
         public bool ShouldSkipIsolationConstraintsForReference(string referenceFullPath)
         {
@@ -831,6 +852,7 @@ internal void TranslateForFutureUse(ITranslator translator)
             translator.Translate(ref _explicitToolsVersionSpecified);
             translator.Translate(ref _projectDefaultTargets);
             translator.Translate(ref _projectInitialTargets);
+            translator.Translate(ref _projectTargets);
             translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
             translator.Translate(ref _skippedFromStaticGraphIsolationConstraints);
         }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 0c74fad44a3..84ac131d74c 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -115,6 +115,7 @@ public class BuildResult : INodePacket, IBuildResults
         private ProjectInstance _projectStateAfterBuild;
 
         private string _schedulerInducedError;
+        private HashSet<string> _targets;
 
         /// <summary>
         /// Constructor for serialization.
@@ -227,6 +228,7 @@ internal BuildResult(BuildResult result, int nodeRequestId)
             _circularDependency = result._circularDependency;
             _initialTargets = result._initialTargets;
             _defaultTargets = result._defaultTargets;
+            _targets = result._targets;
             _baseOverallResult = result.OverallResult == BuildResultCode.Success;
         }
 
@@ -243,6 +245,7 @@ internal BuildResult(BuildResult result, int submissionId, int configurationId,
             _circularDependency = result._circularDependency;
             _initialTargets = result._initialTargets;
             _defaultTargets = result._defaultTargets;
+            _targets = result._targets;
             _baseOverallResult = result.OverallResult == BuildResultCode.Success;
         }
 
@@ -432,6 +435,16 @@ internal List<string> DefaultTargets
             { _defaultTargets = value; }
         }
 
+        /// <summary>
+        /// Returns all the targets present in the project evaluation of this result's configuration.
+        /// </summary>
+        public HashSet<string> Targets
+        {
+            get => _targets;
+            set => _targets = value;
+        }
+
+
         /// <summary>
         /// Container used to transport errors from the scheduler (issued while computing a build result)
         /// to the TaskHost that has the proper logging context (project id, target id, task id, file location)
@@ -530,6 +543,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _nodeRequestId);
             translator.Translate(ref _initialTargets);
             translator.Translate(ref _defaultTargets);
+            translator.Translate(ref _targets);
             translator.Translate(ref _circularDependency);
             translator.TranslateException(ref _requestException);
             translator.TranslateDictionary(ref _resultsByTarget, TargetResult.FactoryForDeserialization, CreateTargetResultDictionary);
