diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index d08aa8aab6e..608facd00d8 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -621,9 +621,9 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()
                     shouldBeRetrievedFromCache: true
                 );
         }
-
+        
         [Fact]
-        public void ArchitectureSpecificTask_ShouldAlwaysReturnFirst()
+        public void OverriddenTask_AlwaysWins()
         {
             Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
 
@@ -631,6 +631,8 @@ public void ArchitectureSpecificTask_ShouldAlwaysReturnFirst()
             ProjectRootElement project = ProjectRootElement.Create();
 
             ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
+            element.Architecture = "x64";
+            element.Override = "true";
             elementList.Add(element);
 
             ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
@@ -649,7 +651,7 @@ public void ArchitectureSpecificTask_ShouldAlwaysReturnFirst()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
                 );
 
             // no parameters, fuzzy match
@@ -662,12 +664,12 @@ public void ArchitectureSpecificTask_ShouldAlwaysReturnFirst()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
                 );
         }
-
+        
         [Fact]
-        public void ArchitectureSpecificTask_FirstOneWins()
+        public void OverriddenTask_FirstOneWins()
         {
             Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
 
@@ -676,10 +678,12 @@ public void ArchitectureSpecificTask_FirstOneWins()
 
             ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
             element.Architecture = "x64";
+            element.Override = "true";
             elementList.Add(element);
 
             ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
             secondElement.Architecture = "x86";
+            secondElement.Override = "true";
             elementList.Add(secondElement);
 
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
@@ -694,7 +698,7 @@ public void ArchitectureSpecificTask_FirstOneWins()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
                 );
 
             // no parameters, fuzzy match
@@ -707,7 +711,7 @@ public void ArchitectureSpecificTask_FirstOneWins()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
+                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
                 );
         }
 
