diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 5e6daf2bd32..eae5c4243d3 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -467,23 +467,6 @@ public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expec
             string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                 $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n",
                 out bool successBuild);
-
-            foreach (string registeredRule in expectedRegisteredRules)
-            {
-               // projectCheckBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomCheckSuccessfulAcquisition", registeredRule));
-            }
-
-            if (!expectedRejectedChecks)
-            {
-                //successBuild.ShouldBeTrue(projectCheckBuildLog);
-            }
-            else
-            {
-                //projectCheckBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
-                //    "CustomCheckBaseTypeNotAssignable",
-                //    "InvalidCheck",
-                //    "InvalidCustomCheck, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
-            }
         }
     }
 
@@ -538,10 +521,6 @@ public void CustomChecksFailGracefully(string ruleId, string expectedMessage)
             string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                 $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool success);
 
-            //success.ShouldBeTrue();
-            //projectCheckBuildLog.ShouldContain(expectedMessage);
-            //projectCheckBuildLog.ShouldNotContain("This check should have been disabled");
-
             // Cleanup
             File.Delete(editorConfigName);
         }
