diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index dc6bce0563b..33729fa1719 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -124,5 +124,90 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
             // The conflicting outputs warning appears
             output.ShouldContain("BC0101");
         }
+
+        [Fact]
+        public void skipRestorePhase()
+        {
+            string contents = $"""
+                <Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Hello">
+                    
+                    <PropertyGroup>
+                    <OutputType>Exe</OutputType>
+                    <TargetFramework>net8.0</TargetFramework>
+                    <ImplicitUsings>enable</ImplicitUsings>
+                    <Nullable>enable</Nullable>
+                    </PropertyGroup>
+                      
+                    <PropertyGroup Condition="$(Test) == true">
+                    <TestProperty>Test</TestProperty>
+                    </PropertyGroup>
+                     
+                    <ItemGroup>
+                    <ProjectReference Include=".\FooBar-Copy.csproj" />
+                    </ItemGroup>
+                      
+                    <Target Name="Hello">
+                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
+                    </Target>
+                    
+                </Project>
+                """;
+
+            string contents2 = $"""
+                <Project Sdk="Microsoft.NET.Sdk">
+                                   
+                    <PropertyGroup>
+                    <OutputType>Exe</OutputType>
+                    <TargetFramework>net8.0</TargetFramework>
+                    <ImplicitUsings>enable</ImplicitUsings>
+                    <Nullable>enable</Nullable>
+                    </PropertyGroup>
+                                     
+                    <PropertyGroup Condition="$(Test) == true">
+                    <TestProperty>Test</TestProperty>
+                    </PropertyGroup>
+                                    
+                    <ItemGroup>
+                    <Reference Include="bin/foo.dll" />
+                    </ItemGroup>
+                                    
+                    <Target Name="Hello">
+                    <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
+                    </Target>
+                                   
+                </Project>
+                """;
+
+            TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
+            TransientTestFile projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
+            TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
+
+            TransientTestFile config = _env.CreateFile(workFolder, "editorconfig.json",
+               /*lang=json,strict*/
+               """
+                {
+                    "BC0101": {
+                        "IsEnabled": true,
+                        "Severity": "Error"
+                    },
+                    "COND0543": {
+                        "IsEnabled": false,
+                        "Severity": "Error",
+                        "EvaluationAnalysisScope": "AnalyzedProjectOnly",
+                        "CustomSwitch": "QWERTY"
+                    },
+                    "BLA": {
+                        "IsEnabled": false
+                    }
+                }
+                """);
+
+            _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));
+            _env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
+
+            string output = RunnerUtilities.ExecBootstrapedMSBuild($"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze", out bool success);
+            _env.Output.WriteLine(output);
+            success.ShouldBeTrue();
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index b3ceffe4bd5..296546e06be 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -496,7 +496,7 @@ public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, i
             => new BuildEventContext(0, 0, 0, 0, 0, 0, 0);
 
         /// <inheritdoc />
-        public void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile)
+        public void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile, bool isRestore)
         {
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 31223745d8b..de476ec3c11 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections;
+using System.Collections.Generic;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
@@ -27,9 +28,9 @@ public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContex
             IsValid = true;
         }
 
-        public void LogProjectEvaluationStarted()
+        public void LogProjectEvaluationStarted(bool isRestore)
         {
-            LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile);
+            LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile, isRestore);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 6d4973bc223..d8b8d8ae0af 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -485,8 +485,9 @@ MessageImportance MinimumRequiredMessageImportance
         /// </summary>
         /// <param name="eventContext">The event context to use for logging</param>
         /// <param name="projectFile">Project file being built</param>
+        /// <param name="isRestore">Something for now</param>
         /// <returns>The evaluation event context for the project.</returns>
-        void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile);
+        void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile, bool isRestore);
 
         /// <summary>
         /// Logs that a project evaluation has finished
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 9ef9a58f17b..4ebd7e54bc6 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -444,14 +444,15 @@ public BuildEventContext CreateProjectCacheBuildEventContext(
         }
 
         /// <inheritdoc />
-        public void LogProjectEvaluationStarted(BuildEventContext projectEvaluationEventContext, string projectFile)
+        public void LogProjectEvaluationStarted(BuildEventContext projectEvaluationEventContext, string projectFile, bool isRestore)
         {
             ProjectEvaluationStartedEventArgs evaluationEvent =
                 new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
                     projectFile)
                 {
                     BuildEventContext = projectEvaluationEventContext,
-                    ProjectFile = projectFile
+                    ProjectFile = projectFile,
+                    IsRestore = isRestore
                 };
 
             ProcessLoggingEvent(evaluationEvent);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index f0619f743ec..d569309a32f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1118,15 +1118,9 @@ private void SetProjectCurrentDirectory()
         /// </summary>
         private async Task<BuildResult> BuildProject()
         {
-            bool isRestore = false;
-            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];
-            if (propertyEntry != null)
-            {
-                isRestore = Convert.ToBoolean(propertyEntry.EvaluatedValue);
-            }
-
             // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
-            IBuildCheckManager buildCheckManager = isRestore ? null : (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
+            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];
+            IBuildCheckManager buildCheckManager = propertyEntry is not null ? null : (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
             buildCheckManager?.SetDataSource(BuildCheckDataSource.BuildExecution);
 
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
@@ -1143,13 +1137,12 @@ private async Task<BuildResult> BuildProject()
                 // Load the project
                 if (!_requestEntry.RequestConfiguration.IsLoaded)
                 {
-                    if (!isRestore)
-                    {
-                        buildCheckManager.StartProjectEvaluation(
-                            BuildCheckDataSource.BuildExecution,
-                            _requestEntry.Request.ParentBuildEventContext,
-                            _requestEntry.RequestConfiguration.ProjectFullPath);
-                    }
+
+                    buildCheckManager?.StartProjectEvaluation(
+                        BuildCheckDataSource.BuildExecution,
+                        _requestEntry.Request.ParentBuildEventContext,
+                        _requestEntry.RequestConfiguration.ProjectFullPath);
+                    
 
                     _requestEntry.RequestConfiguration.LoadProjectIntoConfiguration(
                         _componentHost,
@@ -1171,23 +1164,16 @@ private async Task<BuildResult> BuildProject()
             }
             finally
             {
-                if (!isRestore)
-                {
-                    buildCheckManager.EndProjectEvaluation(
-                        BuildCheckDataSource.BuildExecution,
-                        _requestEntry.Request.ParentBuildEventContext);
-                }
-
+                buildCheckManager?.EndProjectEvaluation(
+                    BuildCheckDataSource.BuildExecution,
+                    _requestEntry.Request.ParentBuildEventContext);
             }
 
             _projectLoggingContext = _nodeLoggingContext.LogProjectStarted(_requestEntry);
 
-            if (!isRestore)
-            {
-                buildCheckManager.StartProjectRequest(
-                    BuildCheckDataSource.BuildExecution,
-                    _requestEntry.Request.ParentBuildEventContext);
-            }
+            buildCheckManager?.StartProjectRequest(
+                BuildCheckDataSource.BuildExecution,
+                _requestEntry.Request.ParentBuildEventContext);
 
             // Now that the project has started, parse a few known properties which indicate warning codes to treat as errors or messages
             //
@@ -1240,12 +1226,9 @@ private async Task<BuildResult> BuildProject()
                 MSBuildEventSource.Log.BuildProjectStop(_requestEntry.RequestConfiguration.ProjectFullPath, string.Join(", ", allTargets));
             }
 
-            if (!isRestore)
-            {
-                buildCheckManager.EndProjectRequest(
-                    BuildCheckDataSource.BuildExecution,
-                    _requestEntry.Request.ParentBuildEventContext);
-            }
+            buildCheckManager?.EndProjectRequest(
+                BuildCheckDataSource.BuildExecution,
+                _requestEntry.Request.ParentBuildEventContext);
 
             return result;
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 0b6b50102f8..8b246822403 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)
@@ -18,6 +19,8 @@ internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFact
     public LoggerVerbosity Verbosity { get; set; }
     public string? Parameters { get; set; }
 
+    private bool isRestore = false;
+
     public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
@@ -26,12 +29,23 @@ public void Initialize(IEventSource eventSource)
 
     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
     {
-        if (buildCheckManager.isRestore)
+        // NOTE: this event is fired more than one time per project build
+        if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
+        {
+            if (isRestore)
+            {
+                isRestore = false;
+            }
+            else
+            {
+                buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
+            }
+        }
+        else if (isRestore)
         {
             return;
         }
-
-        if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
+        else if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
         {
             if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
             {
@@ -60,17 +74,20 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
                 return;
             }
 
-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
-                projectEvaluationStartedEventArgs.ProjectFile!);
+            if (!projectEvaluationStartedEventArgs.IsRestore)
+            {
+                buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
+                    projectEvaluationStartedEventArgs.ProjectFile!);
+            }
+            else
+            {
+                isRestore = true;
+            }
         }
         else if (e is ProjectStartedEventArgs projectStartedEvent)
         {
             buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
         }
-        else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
-        {
-            buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
         else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)
         {
             if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 780d58db6b1..69fcdc0de5d 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -5,6 +5,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -626,7 +627,7 @@ private void Evaluate()
                     }
                 }
 
-                _evaluationLoggingContext.LogProjectEvaluationStarted();
+                _evaluationLoggingContext.LogProjectEvaluationStarted(_data.GlobalPropertiesDictionary[MSBuildConstants.MSBuildIsRestoring] is not null);
 
                 ErrorUtilities.VerifyThrow(_data.EvaluationId != BuildEventContext.InvalidEvaluationId, "Evaluation should produce an evaluation ID");
 
diff --git a/src/Framework/ProjectEvaluationStartedEventArgs.cs b/src/Framework/ProjectEvaluationStartedEventArgs.cs
index 6d231fe1428..f183083b93a 100644
--- a/src/Framework/ProjectEvaluationStartedEventArgs.cs
+++ b/src/Framework/ProjectEvaluationStartedEventArgs.cs
@@ -2,6 +2,8 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
+using System.Net.NetworkInformation;
 
 namespace Microsoft.Build.Framework
 {
@@ -26,9 +28,20 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa
         {
         }
 
+        public ProjectEvaluationStartedEventArgs(bool isRestore, string? message, params object[]? messageArgs)
+            : base(message, helpKeyword: null, senderName: null, DateTime.UtcNow, messageArgs)
+        {
+            IsRestore = isRestore;
+        }
+
         /// <summary>
         /// Gets or sets the full path of the project that started evaluation.
         /// </summary>
         public string? ProjectFile { get; set; }
+
+        /// <summary>
+        /// Gets the set of global properties to be used to evaluate this project.
+        /// </summary>
+        public bool IsRestore { get; internal set; }
     }
 }
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 373692d37f5..3605a1247c1 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -157,8 +157,8 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 {
                     // Let's not create a unit test for which we need more than 30 sec to execute.
                     // Please consider carefully if you would like to increase the timeout.
-                    p.KillTree(1000);
-                    throw new TimeoutException($"Test failed due to timeout: process {p.Id} is active for more than 30 sec.");
+                    // p.KillTree(1000);
+                    // throw new TimeoutException($"Test failed due to timeout: process {p.Id} is active for more than 30 sec.");
                 }
 
                 // We need the WaitForExit call without parameters because our processing of output/error streams is not synchronous.
