diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 16b44946692..040e547cacc 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -562,7 +562,9 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                             new Dictionary<string, string>
                             {
                                 { SolutionProjectGenerator.SolutionPathPropertyName, graph.GraphRoots.First().ProjectInstance.FullPath },
-                                { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty }
+                                { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty },
+                                { PropertyNames.InnerBuildProperty, "TheInnerBuildProperty"},
+                                { "TheInnerBuildProperty", "FooBar"},
                             });
 
                     buildResult.ShouldHaveSucceeded();
@@ -573,14 +575,18 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                 buildSession.Logger.FullLog.ShouldContain("Visual Studio Workaround based");
                 buildSession.Logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
 
-                // Ensure MSBuild passes config / platform information set by VS.
                 foreach (var projectPath in projectPaths)
                 {
                     var projectName = Path.GetFileNameWithoutExtension(projectPath);
 
+                    // Ensure MSBuild passes config / platform information set by VS.
                     buildSession.Logger.FullLog.ShouldContain($"EntryPoint: {projectPath}");
-                    buildSession.Logger.FullLog.ShouldContain($"Configuration={projectName}Debug");
-                    buildSession.Logger.FullLog.ShouldContain($"Platform={projectName}x64");
+                    buildSession.Logger.FullLog.ShouldContain($"Configuration:{projectName}Debug");
+                    buildSession.Logger.FullLog.ShouldContain($"Platform:{projectName}x64");
+
+                    // Ensure MSBuild removes the inner build property if present.
+                    buildSession.Logger.FullLog.ShouldContain($"{PropertyNames.InnerBuildProperty}:TheInnerBuildProperty");
+                    buildSession.Logger.FullLog.ShouldNotContain("TheInnerBuildProperty:FooBar");
                 }
 
                 AssertCacheBuild(graph, testData, null, buildSession.Logger, nodesToBuildResults);
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 8e10216eb7f..2af88f79710 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -359,8 +359,7 @@ async Task LateInitializePluginForVsWorkaround(CacheRequest request)
                 // the graph entrypoint file, and the VS solution configuration as the entry point's global properties.
                 var graphEntryPointsFromSolutionConfig = GenerateGraphEntryPointsFromSolutionConfigurationXml(
                     solutionConfigurationXml,
-                    configuration.ProjectFullPath,
-                    configuration.Project.GlobalProperties);
+                    configuration.Project);
 
                 await BeginBuildAsync(
                     ProjectCacheDescriptor.FromAssemblyPath(
@@ -372,8 +371,7 @@ await BeginBuildAsync(
 
             static IReadOnlyCollection<ProjectGraphEntryPoint> GenerateGraphEntryPointsFromSolutionConfigurationXml(
                 string solutionConfigurationXml,
-                string definingProjectPath,
-                IDictionary<string, string> definingProjectGlobalProperties
+                ProjectInstance project
             )
             {
                 var doc = new XmlDocument();
@@ -384,6 +382,8 @@ IDictionary<string, string> definingProjectGlobalProperties
 
                 ErrorUtilities.VerifyThrow(projectConfigurationNodes.Count > 0, "Expected at least one project in solution");
 
+                var definingProjectPath = project.FullPath;
+                var definingProjectGlobalProperties = project.GlobalProperties;
                 var graphEntryPoints = new List<ProjectGraphEntryPoint>(projectConfigurationNodes.Count);
 
                 foreach (XmlNode node in projectConfigurationNodes)
@@ -407,10 +407,24 @@ IDictionary<string, string> definingProjectGlobalProperties
                         ["Platform"] = platform
                     };
 
+                    RemoveProjectSpecificGlobalProperties(globalProperties, project);
+
                     graphEntryPoints.Add(new ProjectGraphEntryPoint(projectPath, globalProperties));
                 }
 
                 return graphEntryPoints;
+
+                void RemoveProjectSpecificGlobalProperties(Dictionary<string, string> globalProperties, ProjectInstance project)
+                {
+                    // Remove the inner build property from the graph entry point global properties.
+                    // If the inner build property is set (TargetFramework), it will propagate down the project graph and force all nodes to that innerbuild value, which is incorrect.
+                    var innerBuildPropertyName = ProjectInterpretation.GetInnerBuildPropertyName(project);
+
+                    if (!string.IsNullOrWhiteSpace(innerBuildPropertyName) && globalProperties.ContainsKey(innerBuildPropertyName))
+                    {
+                        globalProperties.Remove(innerBuildPropertyName);
+                    }
+                }
             }
 
             static bool MSBuildStringIsTrue(string msbuildString) =>
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index ae88e1064b0..99362abab30 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -100,17 +100,17 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
             }
         }
 
-        private static string GetInnerBuildPropertyValue(ProjectInstance project)
+        internal static string GetInnerBuildPropertyValue(ProjectInstance project)
         {
             return project.GetPropertyValue(GetInnerBuildPropertyName(project));
         }
 
-        private static string GetInnerBuildPropertyName(ProjectInstance project)
+        internal static string GetInnerBuildPropertyName(ProjectInstance project)
         {
             return project.GetPropertyValue(PropertyNames.InnerBuildProperty);
         }
 
-        private static string GetInnerBuildPropertyValues(ProjectInstance project)
+        internal static string GetInnerBuildPropertyValues(ProjectInstance project)
         {
             return project.GetPropertyValue(project.GetPropertyValue(PropertyNames.InnerBuildPropertyValues));
         }
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index f306f9e8f8f..4277bdad314 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -27,10 +27,10 @@ public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logg
             foreach (var ep in context.GraphEntryPoints ?? Enumerable.Empty<ProjectGraphEntryPoint>())
             {
                 var globalPropertyString = ep.GlobalProperties is not null
-                    ? string.Join(", ", ep.GlobalProperties.Select(gp => $"{gp.Key}={gp.Value}"))
+                    ? string.Join("\n\t", ep.GlobalProperties.Select(gp => $"{gp.Key}:{gp.Value}"))
                     : string.Empty;
 
-                logger.LogMessage($"EntryPoint: {ep.ProjectFile} ({globalPropertyString})");
+                logger.LogMessage($"EntryPoint: {ep.ProjectFile} \n(\n\t{globalPropertyString}\n)");
             }
 
             ErrorFrom(nameof(BeginBuildAsync), logger);
