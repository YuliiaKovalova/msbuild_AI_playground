diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 5bfd050ac07..a63885e9958 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -162,8 +162,6 @@ public void BuildsWhileBuildIsRunningOnServer()
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
             TransientTestFile sleepProject = _env.CreateFile("napProject.proj", sleepingTaskContents);
-            _env.SetEnvironmentVariable("MSBUILDDEBUGCOMM", "1");
-            _env.SetEnvironmentVariable("MSBUILDDEBUGPATH", Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder"));
 
             int pidOfServerProcess = -1;
             try
@@ -172,12 +170,6 @@ public void BuildsWhileBuildIsRunningOnServer()
                 string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
                 pidOfServerProcess = ParseNumber(output, "Server ID is ");
 
-                foreach (Process p in Process.GetProcesses())
-                {
-                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
-                }
-
                 var msbuildParameters = sleepProject.Path;
 #if FEATURE_RUN_EXE_IN_TESTS
                 var pathToExecutable = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
@@ -195,11 +187,11 @@ public void BuildsWhileBuildIsRunningOnServer()
                     Arguments = msbuildParameters
                 };
 
-                Process pr = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    pr.Start();
-                    pr.BeginOutputReadLine();
-                    pr.BeginErrorReadLine();
-                    pr.StandardInput.Dispose();
+                Process pr = new() { EnableRaisingEvents = true, StartInfo = psi };
+                pr.Start();
+                pr.BeginOutputReadLine();
+                pr.BeginErrorReadLine();
+                pr.StandardInput.Dispose();
 
                 psi = new(pathToExecutable)
                 {
@@ -214,26 +206,20 @@ public void BuildsWhileBuildIsRunningOnServer()
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
                 output = String.Empty;
                 Process q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
-
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
+                DataReceivedEventHandler receiveData = delegate (object sender, DataReceivedEventArgs args)
+                {
+                    if (args != null)
                     {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
+                        output += args.Data + "\r\n";
+                    }
+                };
+                q.OutputDataReceived += receiveData;
+                q.ErrorDataReceived += receiveData;
 
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
+                q.Start();
+                q.BeginOutputReadLine();
+                q.BeginErrorReadLine();
+                q.StandardInput.Dispose();
 
                 q.WaitForExit(30000);
                 q.ExitCode.ShouldBe(0);
@@ -242,26 +228,21 @@ public void BuildsWhileBuildIsRunningOnServer()
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
                 output = String.Empty;
                 q = new Process { EnableRaisingEvents = true, StartInfo = psi };
-                    q.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
+                DataReceivedEventHandler receiveHandler = (object sender, DataReceivedEventArgs args) =>
+                {
+                    if (args != null)
                     {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
+                        output += args.Data + "\r\n";
+                    }
+                };
 
-                    q.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                    {
-                        if (args != null)
-                        {
-                            output += args.Data + "\r\n";
-                        }
-                    };
+                q.OutputDataReceived += receiveHandler;
+                q.ErrorDataReceived += receiveHandler;
 
-                    q.Start();
-                    q.BeginOutputReadLine();
-                    q.BeginErrorReadLine();
-                    q.StandardInput.Dispose();
+                q.Start();
+                q.BeginOutputReadLine();
+                q.BeginErrorReadLine();
+                q.StandardInput.Dispose();
 
                 q.WaitForExit(30000);
                 q.ExitCode.ShouldBe(0);
@@ -276,15 +257,6 @@ public void BuildsWhileBuildIsRunningOnServer()
             }
             finally
             {
-                foreach (string? file in Directory.GetFiles(Path.Combine(Path.GetDirectoryName(project.Path)!, "myFolder")))
-                {
-                    _output.WriteLine($"New file: {file}" + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    foreach (string line in File.ReadLines(file!))
-                    {
-                        _output.WriteLine(line + $" tid: {System.Threading.Thread.CurrentThread.ManagedThreadId} timestamp: {DateTime.Now.Ticks}");
-                    }
-                }
-
                 try
                 {
                     if (pidOfServerProcess > -1)
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 31b9ed35465..43627beeee3 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -91,7 +91,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
 
             using (var p = new Process { EnableRaisingEvents = true, StartInfo = psi })
             {
-                p.OutputDataReceived += delegate (object sender, DataReceivedEventArgs args)
+                DataReceivedEventHandler handler = delegate (object sender, DataReceivedEventArgs args)
                 {
                     if (args != null)
                     {
@@ -99,13 +99,8 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                     }
                 };
 
-                p.ErrorDataReceived += delegate (object sender, DataReceivedEventArgs args)
-                {
-                    if (args != null)
-                    {
-                        output += args.Data + "\r\n";
-                    }
-                };
+                p.OutputDataReceived += handler;
+                p.ErrorDataReceived += handler;
 
                 outputHelper?.WriteLine("Executing [{0} {1}]; TID: {2}, timestamp:{3}", process, parameters, System.Threading.Thread.CurrentThread.ManagedThreadId, System.DateTime.Now.Ticks);
                 Console.WriteLine("Executing [{0} {1}]", process, parameters);
