diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 813cea3dcf1..bafc8369c4c 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -1040,39 +1040,6 @@ public void GetTargetListsDoesNotUseTargetsMetadataOnInnerBuildsFromRootOuterBui
             }
         }
 
-        [Fact]
-        public void GetTargetFrameworksWithPlatformForSingleTargetFrameworkRemovedIfGetTargetFrameworksRemoved()
-        {
-            string entryProject = CreateProjectFile(
-                _env,
-                1,
-                new int[] { 2 },
-                extraContent: @"
-                <ItemGroup>
-                    <ProjectReferenceTargets Include='A' Targets='C;GetTargetFrameworksWithPlatformForSingleTargetFramework' />
-                    <ProjectReferenceTargets Include='A' Targets='B' OuterBuild='true' />
-                    <ProjectReferenceTargets Include='A' Targets='GetTargetFrameworks' OuterBuild='true' SkipNonexistentTargets='true' />
-                </ItemGroup>").Path;
-            CreateProjectFile(
-                _env,
-                2,
-                extraContent: MultitargetingSpecificationPropertyGroup);
-            var graph = new ProjectGraph(entryProject);
-            graph.ToDot();
-            ProjectGraphNode rootOuterBuild = GetFirstNodeWithProjectNumber(graph, 1);
-            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(new[] { "A" });
-            targetLists[rootOuterBuild].ShouldBe(new[] { "A" });
-            ProjectGraphNode referencedNode = GetOuterBuild(graph, 2);
-            targetLists[referencedNode].ShouldBe(new[] { "B" });
-
-            // None of the inner builds should have GetTargetFrameworksWithPlatformForSingleTargetFramework
-            // in their target lists.
-            foreach (ProjectGraphNode projectGraphNode in GetInnerBuilds(graph, 2))
-            {
-                targetLists[projectGraphNode].ShouldBe(new[] { "B", "C" });
-            }
-        }
-
         [Fact]
         public void GetTargetListsForComplexMultitargetingGraph()
         {
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 0f47f09b8a7..91754ec5bae 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -561,7 +561,7 @@ public List<string> ProjectDefaultTargets
         /// <summary>
         /// Gets or sets the targets defined for the project.
         /// </summary>
-        public HashSet<string> ProjectTargets
+        internal HashSet<string> ProjectTargets
         {
             [DebuggerStepThrough]
             get => _projectTargets;
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 56ca3f53f1a..305f7810471 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -469,29 +469,11 @@ public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance re
             {
                 ImmutableList<string> RemoveNonexistentTargetsIfSkippable(ImmutableList<TargetSpecification> targets)
                 {
-                    var targetsToKeep = new List<string>();
-                    bool getTargetFrameworksRemoved = false;
-                    foreach (TargetSpecification target in targets)
-                    {
-                        // Keep targets that are non-skippable or that exist but are skippable.
-                        if (!target.SkipIfNonexistent || reference.Targets.ContainsKey(target.Target))
-                        {
-                            targetsToKeep.Add(target.Target);
-                        }
-                        else if (target.Target.Equals("GetTargetFrameworks"))
-                        {
-                            getTargetFrameworksRemoved = true;
-                        }
-                    }
-
-                    // If GetTargetFrameworks is removed, also remove GetTargetFrameworksWithPlatformForSingleTargetFramework
-                    // since in the non-graph case it is only called when GetTargetFrameworks is called.
-                    if (getTargetFrameworksRemoved && targetsToKeep.Contains("GetTargetFrameworksWithPlatformForSingleTargetFramework"))
-                    {
-                        targetsToKeep.Remove("GetTargetFrameworksWithPlatformForSingleTargetFramework");
-                    }
-
-                    return targetsToKeep.ToImmutableList();
+                    // Keep targets that are non-skippable or that exist but are skippable.
+                    return targets
+                        .Where(t => !t.SkipIfNonexistent || reference.Targets.ContainsKey(t.Target))
+                        .Select(t => t.Target)
+                        .ToImmutableList();
                 }
 
                 return GetProjectType(reference) switch
diff --git a/src/Tasks/Microsoft.Managed.After.targets b/src/Tasks/Microsoft.Managed.After.targets
index 7cfc296e530..281d5692973 100644
--- a/src/Tasks/Microsoft.Managed.After.targets
+++ b/src/Tasks/Microsoft.Managed.After.targets
@@ -41,11 +41,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <_MainReferenceTargetForBuild Condition="'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>
     <_MainReferenceTargetForBuild Condition="'$(_MainReferenceTargetForBuild)' == ''">GetTargetPath</_MainReferenceTargetForBuild>
 
-    <ProjectReferenceTargetsForBuildInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>
-    <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
+    <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
 
-    <ProjectReferenceTargetsForCleanInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>
-    <ProjectReferenceTargetsForClean>Clean;GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
 
     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>
 
@@ -58,13 +56,23 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </PropertyGroup>
 
   <ItemGroup Condition="'$(IsGraphBuild)' == 'true'">
-    <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' " OuterBuild="true" />
-    <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
+  <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' " OuterBuild="true" />
+  <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuild)" Condition=" '$(ProjectReferenceTargetsForBuild)' != '' " />
+    
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForCleanInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' " OuterBuild="true" />
     <ProjectReferenceTargets Include="Clean" Targets="GetTargetFrameworks" OuterBuild="true" SkipNonexistentTargets="true" />
     <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForClean)" Condition=" '$(ProjectReferenceTargetsForClean)' != '' " />
 
+    <!--
+     Note: SkipNonexistentTargets="true" on the following two items means that an outer build node's call to its existent GetTargetFrameworks
+     target will fail if its inner build nodes don't define GetTargetFrameworksWithPlatformForSingleTargetFrameworks. This is necessary
+     since the P2P protocol cannot express logic that allows nonexistent targets to be skipped if other targets marked as SkipNonexistentTargets="true"
+     are actually skipped on a project due to their nonexistence.
+     -->
+    <ProjectReferenceTargets Include="Build" Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework" SkipNonexistentTargets="true" />
+    <ProjectReferenceTargets Include="Clean" Targets="GetTargetFrameworksWithPlatformForSingleTargetFramework" SkipNonexistentTargets="true" />
+
     <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuild)" Condition=" '$(ProjectReferenceTargetsForRebuild)' != '' " />
 
     <ProjectReferenceTargets Include="Publish" Targets="$(ProjectReferenceTargetsForPublish)" Condition=" '$(ProjectReferenceTargetsForPublish)' != '' " />
@@ -72,4 +80,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ProjectReferenceTargets Include="GetCopyToPublishDirectoryItems" Targets="$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)" Condition=" '$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)' != '' " />
   </ItemGroup>
 
-</Project>
\ No newline at end of file
+</Project>
