diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 0d4a6fc7cba..3e9efb2341a 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -470,8 +470,8 @@ public void TestTranslationWithValueTypesInDictionary()
 #endif
             Assert.NotNull(deserializedConfig.TaskParameters);
             Assert.Equal(config.TaskParameters.Count, deserializedConfig.TaskParameters.Count);
-            Assert.Equal(config.TaskParameters["Text"].WrappedParameter, deserializedConfig.TaskParameters["Text"].WrappedParameter);
-            Assert.Equal(config.TaskParameters["BoolValue"].WrappedParameter, deserializedConfig.TaskParameters["BoolValue"].WrappedParameter);
+            Assert.Equal(config.TaskParameters["Text"].GetWrappedParameter<string>(), deserializedConfig.TaskParameters["Text"].GetWrappedParameter<string>());
+            Assert.Equal(config.TaskParameters["BoolValue"].GetWrappedParameter<bool>(), deserializedConfig.TaskParameters["BoolValue"].GetWrappedParameter<bool>());
         }
 
         /// <summary>
@@ -519,7 +519,11 @@ public void TestTranslationWithITaskItemInDictionary()
 #endif
             Assert.NotNull(deserializedConfig.TaskParameters);
             Assert.Equal(config.TaskParameters.Count, deserializedConfig.TaskParameters.Count);
-            TaskHostPacketHelpers.AreEqual((ITaskItem)config.TaskParameters["TaskItemValue"].WrappedParameter, (ITaskItem)deserializedConfig.TaskParameters["TaskItemValue"].WrappedParameter);
+
+            ITaskItem item = config.TaskParameters["TaskItemValue"].GetWrappedParameter<ITaskItem>();
+            ITaskItem deserializedItem = deserializedConfig.TaskParameters["TaskItemValue"].GetWrappedParameter<ITaskItem>();
+
+            TaskHostPacketHelpers.AreEqual(item, deserializedItem);
         }
 
         /// <summary>
@@ -568,8 +572,8 @@ public void TestTranslationWithITaskItemArrayInDictionary()
             Assert.NotNull(deserializedConfig.TaskParameters);
             Assert.Equal(config.TaskParameters.Count, deserializedConfig.TaskParameters.Count);
 
-            ITaskItem[] itemArray = (ITaskItem[])config.TaskParameters["TaskItemArrayValue"].WrappedParameter;
-            ITaskItem[] deserializedItemArray = (ITaskItem[])deserializedConfig.TaskParameters["TaskItemArrayValue"].WrappedParameter;
+            ITaskItem[] itemArray = config.TaskParameters["TaskItemArrayValue"].GetWrappedParameter<ITaskItem[]>();
+            ITaskItem[] deserializedItemArray = deserializedConfig.TaskParameters["TaskItemArrayValue"].GetWrappedParameter<ITaskItem[]>();
 
             TaskHostPacketHelpers.AreEqual(itemArray, deserializedItemArray);
         }
diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
index 5c6bf006b2c..dc7e8a91b64 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
@@ -109,8 +109,8 @@ public void TestTranslationWithValueTypesInDictionary()
             Assert.Equal(complete.TaskResult, deserializedComplete.TaskResult);
             Assert.NotNull(deserializedComplete.TaskOutputParameters);
             Assert.Equal(complete.TaskOutputParameters.Count, deserializedComplete.TaskOutputParameters.Count);
-            Assert.Equal(complete.TaskOutputParameters["Text"].WrappedParameter, deserializedComplete.TaskOutputParameters["Text"].WrappedParameter);
-            Assert.Equal(complete.TaskOutputParameters["BoolValue"].WrappedParameter, deserializedComplete.TaskOutputParameters["BoolValue"].WrappedParameter);
+            Assert.Equal(complete.TaskOutputParameters["Text"].GetWrappedParameter<string>(), deserializedComplete.TaskOutputParameters["Text"].GetWrappedParameter<string>());
+            Assert.Equal(complete.TaskOutputParameters["BoolValue"].GetWrappedParameter<bool>(), deserializedComplete.TaskOutputParameters["BoolValue"].GetWrappedParameter<bool>());
         }
 
         /// <summary>
@@ -131,7 +131,11 @@ public void TestTranslationWithITaskItemInDictionary()
             Assert.Equal(complete.TaskResult, deserializedComplete.TaskResult);
             Assert.NotNull(deserializedComplete.TaskOutputParameters);
             Assert.Equal(complete.TaskOutputParameters.Count, deserializedComplete.TaskOutputParameters.Count);
-            TaskHostPacketHelpers.AreEqual((ITaskItem)complete.TaskOutputParameters["TaskItemValue"].WrappedParameter, (ITaskItem)deserializedComplete.TaskOutputParameters["TaskItemValue"].WrappedParameter);
+
+            ITaskItem item = complete.TaskOutputParameters["TaskItemValue"].GetWrappedParameter<ITaskItem>();
+            ITaskItem deserializedItem = deserializedComplete.TaskOutputParameters["TaskItemValue"].GetWrappedParameter<ITaskItem>();
+
+            TaskHostPacketHelpers.AreEqual(item, deserializedItem);
         }
 
         /// <summary>
@@ -153,8 +157,8 @@ public void TestTranslationWithITaskItemArrayInDictionary()
             Assert.NotNull(deserializedComplete.TaskOutputParameters);
             Assert.Equal(complete.TaskOutputParameters.Count, deserializedComplete.TaskOutputParameters.Count);
 
-            ITaskItem[] itemArray = (ITaskItem[])complete.TaskOutputParameters["TaskItemArrayValue"].WrappedParameter;
-            ITaskItem[] deserializedItemArray = (ITaskItem[])deserializedComplete.TaskOutputParameters["TaskItemArrayValue"].WrappedParameter;
+            ITaskItem[] itemArray = complete.TaskOutputParameters["TaskItemArrayValue"].GetWrappedParameter<ITaskItem[]>();
+            ITaskItem[] deserializedItemArray = deserializedComplete.TaskOutputParameters["TaskItemArrayValue"].GetWrappedParameter<ITaskItem[]>();
 
             TaskHostPacketHelpers.AreEqual(itemArray, deserializedItemArray);
         }
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 0b874696321..eab62570d0a 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -9,6 +9,7 @@
 using System.Threading;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -479,9 +480,13 @@ private void HandleTaskHostTaskComplete(TaskHostTaskComplete taskHostTaskComplet
             }
 
             // Set the output parameters for later
-            foreach (KeyValuePair<string, TaskParameter> outputParam in taskHostTaskComplete.TaskOutputParameters)
+            foreach (ReflectableTaskPropertyInfo propertyInfo in _taskType.Properties)
             {
-                _setParameters[outputParam.Key] = outputParam.Value?.WrappedParameter;
+                string name = propertyInfo.Name;
+                if (taskHostTaskComplete.TaskOutputParameters.TryGetValue(name, out TaskParameter taskParameter))
+                {
+                    _setParameters[name] = taskParameter?.GetWrappedParameter(propertyInfo.PropertyType);
+                }
             }
         }
 
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 2290f4aa7c9..b51847de07b 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -326,7 +326,7 @@ private OutOfProcTaskHostTaskResult InstantiateAndExecuteTask(
                 try
                 {
                     PropertyInfo paramInfo = wrappedTask.GetType().GetProperty(param.Key, BindingFlags.Instance | BindingFlags.Public);
-                    paramInfo.SetValue(wrappedTask, param.Value?.WrappedParameter, null);
+                    paramInfo.SetValue(wrappedTask, param.Value?.GetWrappedParameter(paramInfo.PropertyType), null);
                 }
                 catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index cc9ce9474a5..992bfc490e0 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -240,21 +240,44 @@ public TaskParameterType ParameterType
         }
 
         /// <summary>
-        /// The actual task parameter that we're wrapping
+        /// Returns the value wrapped by this instance.
         /// </summary>
-        public object WrappedParameter
+        /// <param name="type">The expected <see cref="Type"/> of the parameter.</param>
+        public object GetWrappedParameter(Type type)
         {
-            [DebuggerStepThrough]
-            get
-            { return _wrappedParameter; }
+            // ValueType and ValueTypeArray parameters may need to be first converted from their stringified form.
+            if (_parameterType == TaskParameterType.ValueType && _wrappedParameter is string)
+            {
+                // Make sure type is a RuntimeType.
+                type = Type.GetType(type.AssemblyQualifiedName);
+                _wrappedParameter = Convert.ChangeType(_wrappedParameter, type, CultureInfo.InvariantCulture);
+            }
+            else if (_parameterType == TaskParameterType.ValueTypeArray && _wrappedParameter is string[] arrayOfStringValues)
+            {
+                // Make sure elementType is a RuntimeType.
+                Type elementType = Type.GetType(type.GetElementType().AssemblyQualifiedName);
+                Array array = Array.CreateInstance(elementType, arrayOfStringValues.Length);
+                for (int i = 0; i < arrayOfStringValues.Length; i++)
+                {
+                    array.SetValue(Convert.ChangeType(arrayOfStringValues[i], elementType, CultureInfo.InvariantCulture), i);
+                }
+                _wrappedParameter = array;
+            }
+            return _wrappedParameter;
         }
 
+        /// <summary>
+        /// Returns the value wrapped by this instance (convenience helper for tests).
+        /// </summary>
+        /// <typeparam name="T">The expected type of the parameter.</typeparam>
+        internal T GetWrappedParameter<T>() => (T)GetWrappedParameter(typeof(T));
+
         /// <summary>
         /// TaskParameter's ToString should just pass through to whatever it's wrapping.
         /// </summary>
         public override string ToString()
         {
-            return (WrappedParameter == null) ? String.Empty : WrappedParameter.ToString();
+            return (_wrappedParameter == null) ? string.Empty : _wrappedParameter.ToString();
         }
 
         /// <summary>
@@ -593,33 +616,20 @@ private bool TranslateNullable<T>(ITranslator translator, T value)
         /// </remarks>
         private void TranslateValueType(ITranslator translator)
         {
-            string typeName = null;
             string valueString = null;
 
             if (translator.Mode == TranslationDirection.WriteToStream)
             {
-                Type type = _wrappedParameter.GetType();
-
-                // Don't allow non-serializable types to be translated to keep the same limitation as the previous
-                // BinaryFormatter-based implementation.
-#pragma warning disable SYSLIB0050
-                if (!type.GetTypeInfo().IsSerializable)
-#pragma warning restore SYSLIB0050
-                {
-                    throw new NotSupportedException($"{type} cannot be used as a task parameter type because it is not serializable.");
-                }
-
-                typeName = type.AssemblyQualifiedName;
                 valueString = Convert.ToString(_wrappedParameter, CultureInfo.InvariantCulture);
             }
 
-            translator.Translate(ref typeName);
             translator.Translate(ref valueString);
 
             if (translator.Mode == TranslationDirection.ReadFromStream)
             {
-                Type type = Type.GetType(typeName);
-                _wrappedParameter = Convert.ChangeType(valueString, type, CultureInfo.InvariantCulture);
+                // We don't know the exact type of the value type here, so we leave the deserialized value as string
+                // and make the conversion later when GetWrappedParameter is called.
+                _wrappedParameter = valueString;
             }
         }
 
@@ -634,21 +644,8 @@ private void TranslateValueTypeArray(ITranslator translator)
             if (translator.Mode == TranslationDirection.WriteToStream)
             {
                 Array array = (Array)_wrappedParameter;
-                Type arrayType = array.GetType();
-
-                // Don't allow non-serializable types to be translated to keep the same limitation as the previous
-                // BinaryFormatter-based implementation.
-#pragma warning disable SYSLIB0050
-                if (!arrayType.GetTypeInfo().IsSerializable)
-#pragma warning restore SYSLIB0050
-                {
-                    throw new NotSupportedException($"{arrayType} cannot be used as a task parameter type because it is not serializable.");
-                }
-
-                string typeName = arrayType.GetElementType().AssemblyQualifiedName;
                 int length = array.Length;
 
-                translator.Translate(ref typeName);
                 translator.Translate(ref length);
 
                 for (int i = 0; i < length; i++)
@@ -659,21 +656,19 @@ private void TranslateValueTypeArray(ITranslator translator)
             }
             else
             {
-                string typeName = null;
                 int length = 0;
-
-                translator.Translate(ref typeName);
                 translator.Translate(ref length);
 
-                Type elementType = Type.GetType(typeName);
-                Array array = Array.CreateInstance(elementType, length);
+                // We don't know the exact type of the array here, so we leave the deserialized value as string[]
+                // and make the conversion later when GetWrappedParameter is called.
+                string[] arrayOfStringValues = new string[length];
                 for (int i = 0; i < length; i++)
                 {
-                    string valueString = null;
-                    translator.Translate(ref valueString);
-                    array.SetValue(Convert.ChangeType(valueString, elementType, CultureInfo.InvariantCulture), i);
+                    string stringValue = null;
+                    translator.Translate(ref stringValue);
+                    arrayOfStringValues[i] = stringValue;
                 }
-                _wrappedParameter = array;
+                _wrappedParameter = arrayOfStringValues;
             }
         }
 
diff --git a/src/Shared/UnitTests/TaskParameter_Tests.cs b/src/Shared/UnitTests/TaskParameter_Tests.cs
index 292516e9cfb..cab96f21ba8 100644
--- a/src/Shared/UnitTests/TaskParameter_Tests.cs
+++ b/src/Shared/UnitTests/TaskParameter_Tests.cs
@@ -29,13 +29,13 @@ public void NullParameter()
         {
             TaskParameter t = new TaskParameter(null);
 
-            Assert.Null(t.WrappedParameter);
+            Assert.Null(t.GetWrappedParameter<object>());
             Assert.Equal(TaskParameterType.Null, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Null(t2.WrappedParameter);
+            Assert.Null(t2.GetWrappedParameter<object>());
             Assert.Equal(TaskParameterType.Null, t2.ParameterType);
         }
 
@@ -47,13 +47,13 @@ public void StringParameter()
         {
             TaskParameter t = new TaskParameter("foo");
 
-            Assert.Equal("foo", t.WrappedParameter);
+            Assert.Equal("foo", t.GetWrappedParameter<string>());
             Assert.Equal(TaskParameterType.String, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal("foo", t2.WrappedParameter);
+            Assert.Equal("foo", t2.GetWrappedParameter<string>());
             Assert.Equal(TaskParameterType.String, t2.ParameterType);
         }
 
@@ -67,7 +67,7 @@ public void StringArrayParameter()
 
             Assert.Equal(TaskParameterType.StringArray, t.ParameterType);
 
-            string[] wrappedParameter = t.WrappedParameter as string[];
+            string[] wrappedParameter = t.GetWrappedParameter<string[]>();
             Assert.NotNull(wrappedParameter);
             Assert.Equal(2, wrappedParameter.Length);
             Assert.Equal("foo", wrappedParameter[0]);
@@ -78,7 +78,7 @@ public void StringArrayParameter()
 
             Assert.Equal(TaskParameterType.StringArray, t2.ParameterType);
 
-            string[] wrappedParameter2 = t2.WrappedParameter as string[];
+            string[] wrappedParameter2 = t2.GetWrappedParameter<string[]>();
             Assert.NotNull(wrappedParameter2);
             Assert.Equal(2, wrappedParameter2.Length);
             Assert.Equal("foo", wrappedParameter2[0]);
@@ -93,13 +93,13 @@ public void IntParameter()
         {
             TaskParameter t = new TaskParameter(1);
 
-            Assert.Equal(1, t.WrappedParameter);
+            Assert.Equal(1, t.GetWrappedParameter<int>());
             Assert.Equal(TaskParameterType.Int, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal(1, t2.WrappedParameter);
+            Assert.Equal(1, t2.GetWrappedParameter<int>());
             Assert.Equal(TaskParameterType.Int, t2.ParameterType);
         }
 
@@ -113,7 +113,7 @@ public void IntArrayParameter()
 
             Assert.Equal(TaskParameterType.IntArray, t.ParameterType);
 
-            int[] wrappedParameter = t.WrappedParameter as int[];
+            int[] wrappedParameter = t.GetWrappedParameter<int[]>();
             Assert.NotNull(wrappedParameter);
             Assert.Equal(2, wrappedParameter.Length);
             Assert.Equal(2, wrappedParameter[0]);
@@ -124,7 +124,7 @@ public void IntArrayParameter()
 
             Assert.Equal(TaskParameterType.IntArray, t2.ParameterType);
 
-            int[] wrappedParameter2 = t2.WrappedParameter as int[];
+            int[] wrappedParameter2 = t2.GetWrappedParameter<int[]>();
             Assert.NotNull(wrappedParameter2);
             Assert.Equal(2, wrappedParameter2.Length);
             Assert.Equal(2, wrappedParameter2[0]);
@@ -142,13 +142,13 @@ public void EnumParameter()
         {
             TaskParameter t = new TaskParameter(TestEnumForParameter.SomethingElse);
 
-            Assert.Equal("SomethingElse", t.WrappedParameter);
+            Assert.Equal("SomethingElse", t.GetWrappedParameter<string>());
             Assert.Equal(TaskParameterType.String, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal("SomethingElse", t2.WrappedParameter);
+            Assert.Equal("SomethingElse", t2.GetWrappedParameter<string>());
             Assert.Equal(TaskParameterType.String, t2.ParameterType);
         }
 
@@ -157,13 +157,13 @@ public void BoolParameter()
         {
             TaskParameter t = new TaskParameter(true);
 
-            Assert.Equal(true, t.WrappedParameter);
+            Assert.Equal(true, t.GetWrappedParameter<bool>());
             Assert.Equal(TaskParameterType.Bool, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            Assert.Equal(true, t2.WrappedParameter);
+            Assert.Equal(true, t2.GetWrappedParameter<bool>());
             Assert.Equal(TaskParameterType.Bool, t2.ParameterType);
         }
 
@@ -177,7 +177,7 @@ public void BoolArrayParameter()
 
             Assert.Equal(TaskParameterType.BoolArray, t.ParameterType);
 
-            bool[] wrappedParameter = t.WrappedParameter as bool[];
+            bool[] wrappedParameter = t.GetWrappedParameter<bool[]>();
             Assert.NotNull(wrappedParameter);
             Assert.Equal(2, wrappedParameter.Length);
             Assert.False(wrappedParameter[0]);
@@ -188,7 +188,7 @@ public void BoolArrayParameter()
 
             Assert.Equal(TaskParameterType.BoolArray, t2.ParameterType);
 
-            bool[] wrappedParameter2 = Assert.IsType<bool[]>(t2.WrappedParameter);
+            bool[] wrappedParameter2 = t2.GetWrappedParameter<bool[]>();
             Assert.Equal(2, wrappedParameter2.Length);
             Assert.False(wrappedParameter2[0]);
             Assert.True(wrappedParameter2[1]);
@@ -204,7 +204,7 @@ public void ITaskItemParameter()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo", foo.ItemSpec);
 
@@ -213,7 +213,7 @@ public void ITaskItemParameter()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo", foo2.ItemSpec);
         }
@@ -232,7 +232,7 @@ public void ITaskItemParameterWithMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo", foo.ItemSpec);
             Assert.Equal("a1", foo.GetMetadata("a"));
@@ -243,7 +243,7 @@ public void ITaskItemParameterWithMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo", foo2.ItemSpec);
             Assert.Equal("a1", foo2.GetMetadata("a"));
@@ -260,7 +260,7 @@ public void ITaskItemArrayParameter()
 
             Assert.Equal(TaskParameterType.ITaskItemArray, t.ParameterType);
 
-            ITaskItem[] wrappedParameter = t.WrappedParameter as ITaskItem[];
+            ITaskItem[] wrappedParameter = t.GetWrappedParameter<ITaskItem[]>();
             Assert.NotNull(wrappedParameter);
             Assert.Equal(2, wrappedParameter.Length);
             Assert.Equal("foo", wrappedParameter[0].ItemSpec);
@@ -271,7 +271,7 @@ public void ITaskItemArrayParameter()
 
             Assert.Equal(TaskParameterType.ITaskItemArray, t.ParameterType);
 
-            ITaskItem[] wrappedParameter2 = t.WrappedParameter as ITaskItem[];
+            ITaskItem[] wrappedParameter2 = t.GetWrappedParameter<ITaskItem[]>();
             Assert.NotNull(wrappedParameter2);
             Assert.Equal(2, wrappedParameter2.Length);
             Assert.Equal("foo", wrappedParameter2[0].ItemSpec);
@@ -289,7 +289,7 @@ public void ITaskItemParameter_EscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo;bar", foo.ItemSpec);
 
@@ -298,7 +298,7 @@ public void ITaskItemParameter_EscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo;bar", foo2.ItemSpec);
         }
@@ -314,7 +314,7 @@ public void ITaskItemParameter_DoubleEscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo%3bbar", foo.ItemSpec);
 
@@ -323,18 +323,18 @@ public void ITaskItemParameter_DoubleEscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo%3bbar", foo2.ItemSpec);
 
-            TaskParameter t3 = new TaskParameter(t2.WrappedParameter);
+            TaskParameter t3 = new TaskParameter(foo2);
 
             ((ITranslatable)t3).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t4 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
             Assert.Equal(TaskParameterType.ITaskItem, t4.ParameterType);
 
-            ITaskItem foo4 = t4.WrappedParameter as ITaskItem;
+            ITaskItem foo4 = t4.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo4);
             Assert.Equal("foo%3bbar", foo4.ItemSpec);
         }
@@ -350,7 +350,7 @@ public void ITaskItemParameter_EscapableNotEscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem2 foo = t.WrappedParameter as ITaskItem2;
+            ITaskItem2 foo = t.GetWrappedParameter<ITaskItem2>(); ;
             Assert.NotNull(foo);
             Assert.Equal("foo;bar", foo.ItemSpec);
             Assert.Equal("foo;bar", foo.EvaluatedIncludeEscaped);
@@ -360,7 +360,7 @@ public void ITaskItemParameter_EscapableNotEscapedItemSpec()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem2 foo2 = t2.WrappedParameter as ITaskItem2;
+            ITaskItem2 foo2 = t2.GetWrappedParameter<ITaskItem2>();
             Assert.NotNull(foo2);
             Assert.Equal("foo;bar", foo2.ItemSpec);
             Assert.Equal("foo;bar", foo2.EvaluatedIncludeEscaped);
@@ -381,7 +381,7 @@ public void ITaskItemParameter_EscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo", foo.ItemSpec);
             Assert.Equal("a1%b1", foo.GetMetadata("a"));
@@ -392,7 +392,7 @@ public void ITaskItemParameter_EscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo", foo2.ItemSpec);
             Assert.Equal("a1%b1", foo2.GetMetadata("a"));
@@ -414,7 +414,7 @@ public void ITaskItemParameter_DoubleEscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem foo = t.WrappedParameter as ITaskItem;
+            ITaskItem foo = t.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo);
             Assert.Equal("foo", foo.ItemSpec);
             Assert.Equal("a1%25b1", foo.GetMetadata("a"));
@@ -425,20 +425,20 @@ public void ITaskItemParameter_DoubleEscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem foo2 = t2.WrappedParameter as ITaskItem;
+            ITaskItem foo2 = t2.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo2);
             Assert.Equal("foo", foo2.ItemSpec);
             Assert.Equal("a1%25b1", foo2.GetMetadata("a"));
             Assert.Equal("c1%28d1", foo2.GetMetadata("b"));
 
-            TaskParameter t3 = new TaskParameter(t2.WrappedParameter);
+            TaskParameter t3 = new TaskParameter(foo2);
 
             ((ITranslatable)t3).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t4 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
             Assert.Equal(TaskParameterType.ITaskItem, t4.ParameterType);
 
-            ITaskItem foo4 = t4.WrappedParameter as ITaskItem;
+            ITaskItem foo4 = t4.GetWrappedParameter<ITaskItem>();
             Assert.NotNull(foo4);
             Assert.Equal("foo", foo4.ItemSpec);
             Assert.Equal("a1%25b1", foo4.GetMetadata("a"));
@@ -461,7 +461,7 @@ public void ITaskItemParameter_EscapableNotEscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t.ParameterType);
 
-            ITaskItem2 foo = t.WrappedParameter as ITaskItem2;
+            ITaskItem2 foo = t.GetWrappedParameter<ITaskItem2>();
             Assert.NotNull(foo);
             Assert.Equal("foo", foo.ItemSpec);
             Assert.Equal("a1(b1", foo.GetMetadata("a"));
@@ -474,7 +474,7 @@ public void ITaskItemParameter_EscapableNotEscapedMetadata()
 
             Assert.Equal(TaskParameterType.ITaskItem, t2.ParameterType);
 
-            ITaskItem2 foo2 = t2.WrappedParameter as ITaskItem2;
+            ITaskItem2 foo2 = t2.GetWrappedParameter<ITaskItem2>();
             Assert.NotNull(foo2);
             Assert.Equal("foo", foo2.ItemSpec);
             Assert.Equal("a1(b1", foo2.GetMetadata("a"));
