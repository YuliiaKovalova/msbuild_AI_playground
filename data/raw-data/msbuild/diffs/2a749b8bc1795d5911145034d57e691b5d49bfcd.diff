diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 00e1391e239..a4cebe500c4 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -98,16 +98,19 @@ string IProperty.EvaluatedValueEscaped
             [DebuggerStepThrough]
             get
             {
-                if ((this as IProperty).IsEnvironmentProperty && this is ProjectPropertyNotXmlBacked notXmlBacked && notXmlBacked.loggingContext is not null)
+                if ((this as IProperty).IsEnvironmentProperty && this is ProjectPropertyNotXmlBacked notXmlBacked && notXmlBacked.loggingContext?.IsValid == true && !_loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
                     notXmlBacked.loggingContext.LogBuildEvent(args);
+                    _loggedEnvProperty = true;
                 }
 
                 return EvaluatedValueEscapedInternal;
             }
         }
 
+        private bool _loggedEnvProperty = false;
+
         /// <summary>
         /// Gets or sets the unevaluated property value.
         /// Updates the evaluated value in the project, although this is not sure to be correct until re-evaluation.
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 7d6d24267f6..016f21df53e 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -83,6 +83,8 @@ public string EvaluatedValue
         /// </summary>
         public virtual bool IsImmutable => false;
 
+        private bool _loggedEnvProperty = false;
+
         /// <summary>
         /// Evaluated value of the property, escaped as necessary.
         /// Setter assumes caller has protected global properties, if necessary.
@@ -92,11 +94,11 @@ string IProperty.EvaluatedValueEscaped
         {
             get
             {
-                if ((this as IProperty).IsEnvironmentProperty && loggingContext is not null)
+                if ((this as IProperty).IsEnvironmentProperty && loggingContext?.IsValid == true && !_loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
                     loggingContext.LogBuildEvent(args);
-                    loggingContext = null;
+                    _loggedEnvProperty = true;
                 }
 
                 return _escapedValue;
