diff --git a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
index bd923db1ed2..9d8fb580b75 100644
--- a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
@@ -53,8 +53,8 @@ public void GetRuleIdConfiguration_ReturnsConfiguration()
             root=true
 
             [*.csproj]
-            msbuild_analyzer.rule_id.property1=value1
-            msbuild_analyzer.rule_id.property2=value2
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
             """);
 
             var configurationProvider = new ConfigurationProvider();
@@ -80,10 +80,10 @@ public void GetRuleIdConfiguration_CustomConfigurationData()
             root=true
 
             [*.csproj]
-            msbuild_analyzer.rule_id.property1=value1
-            msbuild_analyzer.rule_id.property2=value2
-            msbuild_analyzer.rule_id.isEnabled=true
-            msbuild_analyzer.rule_id.isEnabled2=true
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.isEnabled2=true
             any_other_key1=any_other_value1
             any_other_key2=any_other_value2
             any_other_key3=any_other_value3
@@ -112,9 +112,9 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
             root=true
 
             [*.csproj]
-            msbuild_analyzer.rule_id.isEnabled=true
-            msbuild_analyzer.rule_id.Severity=Error
-            msbuild_analyzer.rule_id.EvaluationAnalysisScope=AnalyzedProjectOnly
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.Severity=Error
+            build_check.rule_id.EvaluationAnalysisScope=AnalyzedProjectOnly
             """);
 
             var configurationProvider = new ConfigurationProvider();
@@ -126,5 +126,47 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
             buildConfig.Severity?.ShouldBe(BuildAnalyzerResultSeverity.Error);
             buildConfig.EvaluationAnalysisScope?.ShouldBe(EvaluationAnalysisScope.AnalyzedProjectOnly);
         }
+
+        /*
+        [Fact]
+        public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            build_check.rule_id.property1=value1
+            build_check.rule_id.property2=value2
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.isEnabled2=true
+            any_other_key1=any_other_value1
+            any_other_key2=any_other_value2
+            any_other_key3=any_other_value3
+            any_other_key3=any_other_value3
+
+            [test123.csproj]
+            build_check.rule_id.property1=value2
+            build_check.rule_id.property2=value3
+            build_check.rule_id.isEnabled=true
+            build_check.rule_id.isEnabled2=tru1
+            any_other_key1=any_other_value1
+            any_other_key2=any_other_value2
+            any_other_key3=any_other_value3
+            any_other_key3=any_other_value3
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            // should fail, because the configs are the different
+            Should.Throw<BuildCheckConfigurationException>(() =>
+            {
+                configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
+            });
+        }*/
     }
 }
diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index 82e01a169fd..91b9d6c3742 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -90,15 +90,15 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
             root=true
 
             [*.csproj]
-            msbuild_analyzer.BC0101.IsEnabled=true
-            msbuild_analyzer.BC0101.Severity=warning
+            build_check.BC0101.IsEnabled=true
+            build_check.BC0101.Severity=warning
 
-            msbuild_analyzer.COND0543.IsEnabled=false
-            msbuild_analyzer.COND0543.Severity=Error
-            msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
-            msbuild_analyzer.COND0543.CustomSwitch=QWERTY
+            build_check.COND0543.IsEnabled=false
+            build_check.COND0543.Severity=Error
+            build_check.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
+            build_check.COND0543.CustomSwitch=QWERTY
 
-            msbuild_analyzer.BLA.IsEnabled=false
+            build_check.BLA.IsEnabled=false
             """);
 
             // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
index c599e436315..ba927e1573d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
@@ -18,13 +18,13 @@ internal class BuildCheckConfigurationException : Exception
     ///
     internal BuildCheckConfigurationErrorScope buildCheckConfigurationErrorScope;
 
-    public BuildCheckConfigurationException(string message, Exception innerException, BuildCheckConfigurationErrorScope buildCopConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message, innerException)
+    public BuildCheckConfigurationException(string message, Exception innerException, BuildCheckConfigurationErrorScope buildCheckConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message, innerException)
     {
-        this.buildCheckConfigurationErrorScope = buildCopConfigurationErrorScope;
+        this.buildCheckConfigurationErrorScope = buildCheckConfigurationErrorScope;
     }
 
-    public BuildCheckConfigurationException(string message, BuildCheckConfigurationErrorScope buildCopConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message)
+    public BuildCheckConfigurationException(string message, BuildCheckConfigurationErrorScope buildCheckConfigurationErrorScope = BuildCheckConfigurationErrorScope.SingleRule) : base(message)
     {
-        this.buildCheckConfigurationErrorScope = buildCopConfigurationErrorScope;
+        this.buildCheckConfigurationErrorScope = buildCheckConfigurationErrorScope;
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index b6b8ec160d4..f868f0a816b 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -25,7 +25,7 @@ internal class ConfigurationProvider
     //  (disabled rules and analyzers that need to run in different node)
     private readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = new Dictionary<string, BuildAnalyzerConfiguration>();
 
-    // private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>();
+    private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>();
 
     private readonly List<string> _infrastructureConfigurationKeys = new List<string>() {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
@@ -61,7 +61,14 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
             }
         }
 
-        return new CustomConfigurationData(ruleId, configuration);
+        var data = new CustomConfigurationData(ruleId, configuration);
+
+        if (!_customConfigurationData.ContainsKey(ruleId))
+        {
+            _customConfigurationData[ruleId] = data;
+        }
+
+        return data;
     }
 
     /// <summary>
@@ -73,9 +80,7 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
     /// <returns></returns>
     internal void CheckCustomConfigurationDataValidity(string projectFullPath, string ruleId)
     {
-        // Note: requires another cache layer for custom configuration. 
-        // var customConfiguration = GetCustomConfiguration(projectFullPath, ruleId);
-        // if prevData in cache => raise BuildCopConfigurationException;
+        // TODO: repair the comparer of the objects, to compare actual data
     }
 
     internal BuildAnalyzerConfigurationInternal[] GetMergedConfigurations(
@@ -133,7 +138,7 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
             throw new BuildCheckConfigurationException($"Parsing editorConfig data failed", exception, BuildCheckConfigurationErrorScope.EditorConfigParser);
         }
 
-        var keyTosearch = $"msbuild_analyzer.{ruleId}.";
+        var keyTosearch = $"build_check.{ruleId}.";
         var dictionaryConfig = new Dictionary<string, string>();
 
         foreach (var kv in config)
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index 0da7f32387e..f2e42649c95 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -68,7 +68,11 @@ public override bool Equals(object? obj)
         return Equals((CustomConfigurationData)obj);
     }
 
-    protected bool Equals(CustomConfigurationData other) => Equals(ConfigurationData, other.ConfigurationData);
+    protected bool Equals(CustomConfigurationData other) {
+        // TODO: update the comparison. For different instances with the same data it returns false, we will need to compare the exact match
+        
+        return Equals(ConfigurationData, other.ConfigurationData);
+    }
 
     public override int GetHashCode() => (ConfigurationData != null ? ConfigurationData.GetHashCode() : 0);
 }
