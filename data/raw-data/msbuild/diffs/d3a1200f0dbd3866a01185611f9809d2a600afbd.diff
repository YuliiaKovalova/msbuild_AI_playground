diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index 3abf0711eb6..845500d6991 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -34,24 +34,45 @@ public static IEnumerable<PropertyData> EnumerateProperties(
 
     /// <summary>
     /// Lazy enumerates and partially strong types items from Items property.
-    /// The actual item value might be wrapped to be able to provide defined interface
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
     /// </summary>
     /// <returns></returns>
     public static IEnumerable<ItemData> EnumerateItems(
         this ProjectEvaluationFinishedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property. Only items with matching type will be returned (case-insensitive, MSBuild valid names only).
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    /// <returns></returns>
+    public static IEnumerable<ItemData> EnumerateItemsOfType(
+        this ProjectEvaluationFinishedEventArgs eventArgs, string typeName)
+        => EnumerateItemsOfType(eventArgs.Items, typeName);
+
     /// <summary>
     /// Lazy enumerates and strong types items from Items property.
-    /// The actual item value might be wrapped to be able to provide defined interface
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
     /// </summary>
     public static IEnumerable<ItemData> EnumerateItems(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
+    /// <summary>
+    /// Lazy enumerates and partially strong types items from Items property. Only items with matching type will be returned (case-insensitive, MSBuild valid names only).
+    /// The actual item value is proxied via accessor methods - to be able to provide defined interface
+    /// </summary>
+    /// <returns></returns>
+    public static IEnumerable<ItemData> EnumerateItemsOfType(
+        this ProjectStartedEventArgs eventArgs, string typeName)
+        => EnumerateItemsOfType(eventArgs.Items, typeName);
+
     private static IEnumerable<PropertyData> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
     private static IEnumerable<ItemData> EnumerateItems(IEnumerable? items)
         => Internal.Utilities.EnumerateItems(items);
+
+    private static IEnumerable<ItemData> EnumerateItemsOfType(IEnumerable? items, string typeName)
+        => Internal.Utilities.EnumerateItemsOfType(items, typeName);
 }
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index f82691af730..5c5dac1c031 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -729,47 +729,36 @@ public static IEnumerable<ItemData> EnumerateItems(IEnumerable items)
             }
             else
             {
-                return CastOneByOne(items);
+                return CastItemsOneByOne(items, null);
             }
+        }
 
-            IEnumerable<ItemData> CastOneByOne(IEnumerable itms)
+        /// <summary>
+        /// Enumerates the given nongeneric enumeration and tries to match or wrap appropriate item types.
+        /// Only items with matching type (case insensitive, MSBuild valid names only) will be returned.
+        /// </summary>
+        public static IEnumerable<ItemData> EnumerateItemsOfType(IEnumerable items, string typeName)
+        {
+            if (items == null)
             {
-                foreach (var item in itms)
-                {
-                    string itemType = default;
-                    object itemValue = null;
-
-                    if (item is IItem iitem)
-                    {
-                        itemType = iitem.Key;
-                        itemValue = iitem;
-                    }
-                    else if (item is DictionaryEntry dictionaryEntry)
-                    {
-                        itemType = dictionaryEntry.Key as string;
-                        itemValue = dictionaryEntry.Value;
-                    }
-                    else
-                    {
-                        if (item == null)
-                        {
-                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected: {nameof(item)} is null");
-                        }
-                        else
-                        {
-                            Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(item)} {item} of type {item?.GetType().ToString()}");
-                        }
-                    }
+                return [];
+            }
 
-                    if (itemValue != null)
-                    {
-                        // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
-                        //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
-                        // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
-                        //  (see xml comments of TaskItemData for details)
-                        yield return new ItemData(itemType!, itemValue);
-                    }
-                }
+            if (items is ItemDictionary<ProjectItemInstance> projectItemInstanceDictionary)
+            {
+                return
+                    projectItemInstanceDictionary[typeName]
+                        .Select(i => new ItemData(i.ItemType, (IItemData)i));
+            }
+            else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
+            {
+                return
+                    projectItemDictionary[typeName]
+                        .Select(i => new ItemData(i.ItemType, (IItemData)i));
+            }
+            else
+            {
+                return CastItemsOneByOne(items, typeName);
             }
         }
 
@@ -783,5 +772,52 @@ public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> cal
                 callback(new DictionaryEntry(tuple.Type, tuple.Value));
             }
         }
+
+        /// <summary>
+        /// Enumerates the nongeneric items and attempts to cast them.
+        /// </summary>
+        /// <param name="items">Nongeneric list of items.</param>
+        /// <param name="itemTypeNameToFetch">If not null, only the items with matching type (case insensitive, MSBuild valid names only) will be returned.</param>
+        /// <returns></returns>
+        private static IEnumerable<ItemData> CastItemsOneByOne(IEnumerable items, string? itemTypeNameToFetch)
+        {
+            foreach (var item in items)
+            {
+                string itemType = default;
+                object itemValue = null;
+
+                if (item is IItem iitem)
+                {
+                    itemType = iitem.Key;
+                    itemValue = iitem;
+                }
+                else if (item is DictionaryEntry dictionaryEntry)
+                {
+                    itemType = dictionaryEntry.Key as string;
+                    itemValue = dictionaryEntry.Value;
+                }
+                else
+                {
+                    if (item == null)
+                    {
+                        Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected: {nameof(item)} is null");
+                    }
+                    else
+                    {
+                        Debug.Fail($"In {nameof(EnumerateItems)}(): Unexpected {nameof(item)} {item} of type {item?.GetType().ToString()}");
+                    }
+                }
+
+                // if itemTypeNameToFetch was not set - then return all items
+                if (itemValue != null && (itemTypeNameToFetch == null || MSBuildNameIgnoreCaseComparer.Default.Equals(itemType, itemTypeNameToFetch)))
+                {
+                    // The ProjectEvaluationFinishedEventArgs.Items are currently assigned only in Evaluator.Evaluate()
+                    //  where the only types that can be assigned are ProjectItem or ProjectItemInstance
+                    // However! NodePacketTranslator and BuildEventArgsReader might deserialize those as TaskItemData
+                    //  (see xml comments of TaskItemData for details)
+                    yield return new ItemData(itemType!, itemValue);
+                }
+            }
+        }
     }
 }
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index c5ede56bae9..55d323474b0 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -37,7 +37,7 @@ string EvaluatedInclude
 /// Structure defining single MSBuild item instance.
 /// </summary>
 /// <remarks>
-/// The underlying Value property can be of various distinct types - so it's suggested to use provided accessor methods
+/// The underlying data can be of various distinct types - so it needs to be accessed via provided accessor methods
 /// </remarks>
 public readonly struct ItemData
 {
@@ -80,7 +80,7 @@ public ItemData(string type, object value)
     /// This can be of a distinct types, hence the helper methods <see cref="EvaluatedInclude"/> and <see cref="EnumerateMetadata"/>
     ///  are recommended for accessing the data
     /// </summary>
-    public object? Value { get; private init; }
+    internal object? Value { get; private init; }
 
     /// <summary>
     /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
