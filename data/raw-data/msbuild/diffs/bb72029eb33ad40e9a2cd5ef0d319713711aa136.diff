diff --git a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
index a4b348dfc79..7686c5afd74 100644
--- a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
@@ -60,7 +60,7 @@ public void Initialize_ShouldSetStateToOptOut_WhenOptOutEnvVarIsTrue(string opto
 
             // Assert
             var state = GetTelemetryState(OpenTelemetryManager.Instance);
-            state.ShouldBe(TelemetryState.OptOut);
+            state.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
             OpenTelemetryManager.Instance.DefaultActivitySource.ShouldBeNull();
         }
 #if NET
@@ -78,11 +78,11 @@ public void Initialize_ShouldSetStateToUnsampled_WhenNoOverrideOnNetCore()
             OpenTelemetryManager.Instance.Initialize(isStandalone: false);
 
             var state = GetTelemetryState(OpenTelemetryManager.Instance);
-            state.ShouldBe(TelemetryState.Unsampled);
+            state.ShouldBe(OpenTelemetryManager.TelemetryState.Unsampled);
             OpenTelemetryManager.Instance.DefaultActivitySource.ShouldBeNull();
         }
 #endif
-        
+
         [WindowsFullFrameworkOnlyTheory]
         [InlineData(true)]
         [InlineData(false)]
@@ -100,7 +100,7 @@ public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenR
             // Assert
             var state = GetTelemetryState(OpenTelemetryManager.Instance);
             // On .NET Framework, we expect TelemetryState.ExporterInitialized
-            // On .NET / .NET Standard, the code doesn't explicitly set TelemetryState 
+            // On .NET / .NET Standard, the code doesn't explicitly set TelemetryState
             // => it remains TelemetryState.Uninitialized if not net48 or netframework.
             // So we can do a check to see if it is either ExporterInitialized or left at Uninitialized.
             // If your code has changed to set a different state, adapt accordingly.
@@ -108,16 +108,16 @@ public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenR
 #if NETFRAMEWORK
             if (standalone)
             {
-                state.ShouldBe(TelemetryState.CollectorInitialized);
+                state.ShouldBe(OpenTelemetryManager.TelemetryState.CollectorInitialized);
             }
             else
             {
                 // TODO: collector in VS
                 // state.ShouldBe(TelemetryState.ExporterInitialized);
-                state.ShouldBe(TelemetryState.CollectorInitialized);
+                state.ShouldBe(OpenTelemetryManager.TelemetryState.CollectorInitialized);
             }
 #else
-            state.ShouldBe(TelemetryState.TracerInitialized);
+            state.ShouldBe(OpenTelemetryManager.TelemetryState.TracerInitialized);
 #endif
             // In either scenario, we expect a non-null DefaultActivitySource
             OpenTelemetryManager.Instance.DefaultActivitySource.ShouldNotBeNull();
@@ -140,10 +140,10 @@ public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
             var secondState = GetTelemetryState(OpenTelemetryManager.Instance);
 
             // Assert
-            // Because the manager was already set to "OptOut" on the first call, 
+            // Because the manager was already set to "OptOut" on the first call,
             // the second call is a no-op (the state remains the same).
-            firstState.ShouldBe(TelemetryState.OptOut);
-            secondState.ShouldBe(TelemetryState.OptOut);
+            firstState.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
+            secondState.ShouldBe(OpenTelemetryManager.TelemetryState.OptOut);
         }
 
         /* Helper methods */
@@ -153,8 +153,8 @@ public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
         /// </summary>
         private void ResetManagerState()
         {
-            // The manager is a private static Lazy<OpenTelemetryManager>. We can forcibly 
-            // set the instance's internal fields to revert it to Uninitialized. 
+            // The manager is a private static Lazy<OpenTelemetryManager>. We can forcibly
+            // set the instance's internal fields to revert it to Uninitialized.
             // Another approach is to forcibly re-create the Lazy<T>, but that's more complicated.
             //
             // For demonstration, we do minimal reflection to set:
@@ -165,7 +165,7 @@ private void ResetManagerState()
             // 1. telemetryState
             var telemetryStateField = typeof(OpenTelemetryManager)
                 .GetField("_telemetryState", BindingFlags.NonPublic | BindingFlags.Instance);
-            telemetryStateField?.SetValue(instance, TelemetryState.Uninitialized);
+            telemetryStateField?.SetValue(instance, OpenTelemetryManager.TelemetryState.Uninitialized);
 
             // 2. DefaultActivitySource
             var defaultSourceProp = typeof(OpenTelemetryManager)
@@ -177,11 +177,11 @@ private void ResetManagerState()
         /// <summary>
         /// Reads the private _telemetryState field from the given manager instance using reflection.
         /// </summary>
-        private TelemetryState GetTelemetryState(OpenTelemetryManager manager)
+        private OpenTelemetryManager.TelemetryState GetTelemetryState(OpenTelemetryManager manager)
         {
             var field = typeof(OpenTelemetryManager)
                 .GetField("_telemetryState", BindingFlags.NonPublic | BindingFlags.Instance);
-            return (TelemetryState)field?.GetValue(manager)!;
+            return (OpenTelemetryManager.TelemetryState)field?.GetValue(manager)!;
         }
     }
 }
diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 163c01f29f3..b55d5e67aca 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -16,47 +16,6 @@
 namespace Microsoft.Build.Framework.Telemetry
 {
 
-    /// <summary>
-    /// State of the telemetry infrastructure.
-    /// </summary>
-    internal enum TelemetryState
-    {
-        /// <summary>
-        /// Initial state.
-        /// </summary>
-        Uninitialized,
-
-        /// <summary>
-        /// Opt out of telemetry.
-        /// </summary>
-        OptOut,
-
-        /// <summary>
-        /// Run not sampled for telemetry.
-        /// </summary>
-        Unsampled,
-
-        /// <summary>
-        /// For core hook, ActivitySource is created.
-        /// </summary>
-        TracerInitialized,
-
-        /// <summary>
-        /// For VS scenario with a collector. ActivitySource, OTel TracerProvider are created.
-        /// </summary>
-        ExporterInitialized,
-
-        /// <summary>
-        /// For standalone, ActivitySource, OTel TracerProvider, VS OpenTelemetry Collector are created.
-        /// </summary>
-        CollectorInitialized,
-
-        /// <summary>
-        /// End state.
-        /// </summary>
-        Disposed
-    }
-
     /// <summary>
     /// Singleton class for configuring and managing the telemetry infrastructure with System.Diagnostics.Activity,
     /// OpenTelemetry SDK, and VS OpenTelemetry Collector.
@@ -118,13 +77,21 @@ public void Initialize(bool isStandalone)
                 DefaultActivitySource = new MSBuildActivitySource(TelemetryConstants.DefaultActivitySourceNamespace);
 
 #if NETFRAMEWORK
-                InitializeTracerProvider();
+                try
+                {
+                    InitializeTracerProvider();
 
-                // TODO: Enable commented logic when Collector is present in VS
-                // if (isStandalone)
-                InitializeCollector();
+                    // TODO: Enable commented logic when Collector is present in VS
+                    // if (isStandalone)
+                    InitializeCollector();
 
-                // }
+                    // }
+                }
+                // catch OTel assemblies not present in VS tests
+                catch (System.IO.IOException)
+                {
+                    _telemetryState = TelemetryState.Unsampled;
+                }
 #endif
             }
         }
@@ -216,5 +183,46 @@ private bool IsSampled()
             Random random = new();
             return random.NextDouble() < _sampleRate;
         }
+
+        /// <summary>
+        /// State of the telemetry infrastructure.
+        /// </summary>
+        internal enum TelemetryState
+        {
+            /// <summary>
+            /// Initial state.
+            /// </summary>
+            Uninitialized,
+
+            /// <summary>
+            /// Opt out of telemetry.
+            /// </summary>
+            OptOut,
+
+            /// <summary>
+            /// Run not sampled for telemetry.
+            /// </summary>
+            Unsampled,
+
+            /// <summary>
+            /// For core hook, ActivitySource is created.
+            /// </summary>
+            TracerInitialized,
+
+            /// <summary>
+            /// For VS scenario with a collector. ActivitySource, OTel TracerProvider are created.
+            /// </summary>
+            ExporterInitialized,
+
+            /// <summary>
+            /// For standalone, ActivitySource, OTel TracerProvider, VS OpenTelemetry Collector are created.
+            /// </summary>
+            CollectorInitialized,
+
+            /// <summary>
+            /// End state.
+            /// </summary>
+            Disposed
+        }
     }
 }
