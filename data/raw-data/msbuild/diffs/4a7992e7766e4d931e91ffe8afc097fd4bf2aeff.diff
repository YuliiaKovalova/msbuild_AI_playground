diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index df0984df0f7..0aef6b3f950 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -46,6 +46,7 @@ public void Initialize(IEventSource eventSource)
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Initialize FancyLoggerBuffer
+            // FancyLoggerBuffer.Initialize();
             FancyLoggerBuffer.Initialize();
         }
 
@@ -124,8 +125,8 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             int id = e.BuildEventContext!.ProjectInstanceId;
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
-            node.AddMessage(e);
-            node.Log();
+            // node.AddMessage(e);
+            // node.Log();
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 594d813b8a9..4fb28343bf2 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -1,270 +1,196 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
+//
 
 using System;
 using System.Collections.Generic;
+using System.Collections.Specialized;
 using System.Linq;
 using System.Text;
+using System.Threading;
 using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    /// <summary>
-    /// Represents an identifiable line inside the fancylogger buffer.
-    /// </summary>
     public class FancyLoggerBufferLine
     {
-        private static int counter = 0;
+        private static int Counter = 0;
         public int Id;
         public string Text;
-        public bool IsHidden;
-        public int IdentationLevel = -1;
+
         public FancyLoggerBufferLine()
         {
-            Id = counter++;
+            Id = Counter++;
             Text = String.Empty;
         }
         public FancyLoggerBufferLine(string text)
+            : this()
         {
-            Id = counter++;
             Text = text;
         }
-        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)
-        {
-            IdentationLevel = identationLevel;
-        }
-        public void Hide()
-        {
-            IsHidden = true;
-        }
-        public void Unhide()
-        {
-            IsHidden = false;
-        }
-        public int GetIndex()
-        {
-            return FancyLoggerBuffer.GetLineIndexById(Id);
-        }
     }
 
-    /// <summary>
-    /// Buffer manager for FancyLogger
-    /// </summary>
-    internal static class FancyLoggerBuffer
+    public class FancyLoggerBuffer
     {
-        // Status
-        public static bool AutoScrollEnabled { get; private set; }
-        public static bool IsTerminated { get; private set; }
-        public static int CurrentTopLineIndex { get; private set; }
-        public static int Height { get { return Console.WindowHeight; } }
-        // Lines to be presented by the buffer
-        private static List<FancyLoggerBufferLine> lines = new();
+        private static List<FancyLoggerBufferLine> Lines = new();
+        private static int TopLineIndex = 0;
+        // private static bool AutoScrollEnabled = true;
         public static void Initialize()
         {
-            // Setup event listeners
+            // Use alternate buffer
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+
+            Task.Run(() => {
+                while (true)
+                {
+                    Thread.Sleep(500 / 60);
+                    Render();
+                }
+            });
+
             Task.Run(() =>
             {
                 while (true)
                 {
-                    if (IsTerminated) return;
                     switch (Console.ReadKey().Key)
                     {
-                        case ConsoleKey.Q:
-                            IsTerminated = true;
-                        break;
                         case ConsoleKey.UpArrow:
-                            ScrollToLine(CurrentTopLineIndex - 1);
+                            if (TopLineIndex > 0) TopLineIndex--;
                             break;
                         case ConsoleKey.DownArrow:
-                            ScrollToLine(CurrentTopLineIndex + 1);
-                            break;
-                        case ConsoleKey.Home:
-                            ScrollToLine(0);
-                            break;
-                        case ConsoleKey.End:
-                            ScrollToEnd();
+                            if (TopLineIndex < Lines.Count) TopLineIndex++;
                             break;
                         case ConsoleKey.Spacebar:
                         case ConsoleKey.Escape:
-                            ToggleAutoScroll();
+                            // AutoScrollEnabled = !AutoScrollEnabled;
                             break;
                     }
                 }
             });
-            // Switch to alternate
-            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
-            // Settings
-            AutoScrollEnabled = true;
-            // Render contents
-            WriteTitleBar();
-            WriteFooter("~~~~~~~~~~~~~~~~~~~~~~~~~~~");
-            ScrollToEnd();
         }
+
         public static void Terminate()
         {
-            // Switch to main buffer
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
-            // Dispose event listeners
-            IsTerminated = true;
-            // Delete lines
-            lines = new();
+            Console.Write(ANSIBuilder.Eraser.Display());
+            Lines = new();
         }
 
-        #region Scrolling
-        private static void ScrollToLine(int firstLineIndex)
-        {
-            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
-            CurrentTopLineIndex = firstLineIndex;
-            int i = 0;
-            while (i < Height - 4)
+        #region Rendering
+        public static void Render()
+        {
+            if (Lines.Count == 0) return;
+            // Write Header
+            Console.Write(
+                // Write header
+                ANSIBuilder.Cursor.Home() +
+                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress")) +
+                // Write footer
+                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
+                new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
+            );
+            // Write lines
+            for (int i = 0; i < Console.BufferHeight - 3; i++)
             {
-                int lineIndex = i + firstLineIndex;
-                Console.Write(""
-                    + ANSIBuilder.Cursor.Position(i + 2, 0)
-                    + ANSIBuilder.Eraser.LineCursorToEnd()
-                    // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
-                    + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
+                int lineIndex = i + TopLineIndex;
+                Console.Write(
+                    ANSIBuilder.Cursor.Position(i + 2, 0) +
+                    ANSIBuilder.Eraser.LineCursorToEnd() + 
+                    (lineIndex < Lines.Count ? Lines[lineIndex].Text : String.Empty)
                 );
-                i++;
-            }
-
-            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
-        }
-        private static void ScrollToEnd()
-        { 
-            // If number of lines is smaller than height
-            if (lines.Count < Height - 2)
-            {
-                ScrollToLine(0);
-            }
-            else
-            {
-                ScrollToLine(lines.Count - Height + 4);
             }
-            // Go to end
-            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
-        }
-        private static void ToggleAutoScroll()
-        {
-            AutoScrollEnabled = !AutoScrollEnabled;
         }
         #endregion
-        #region Line Referencing
+
+        #region Line identification
         public static int GetLineIndexById(int lineId)
         {
-            for (int i = 0; i < lines.Count; i++)
+            for (int i = 0; i < Lines.Count; i++)
             {
-                if (lines[i].Id == lineId) return i;
+                if (Lines[i].Id == lineId) return i;
             }
             return -1;
         }
+
         public static FancyLoggerBufferLine? GetLineById(int lineId)
         {
-            int i = GetLineIndexById(lineId);
-            if (i == -1) return null;
-            return lines[i];
+            int index = GetLineIndexById(lineId);
+            if (index == -1) return null;
+            return Lines[index];
         }
         #endregion
-        #region Writing
-        public static void WriteTitleBar()
-        {
-            Console.Write(""
-                + ANSIBuilder.Cursor.Home()
-                + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress"))
-            );
-        }
-        public static void WriteFooter(string text)
-        {
-            Console.Write(""
-                + ANSIBuilder.Cursor.Position(Height - 2, 0) // Position at bottom
-                + new string('-', Console.BufferWidth) + "\n"
-                + ANSIBuilder.Eraser.LineCursorToEnd()
-                + text
-            );
-        }
-        public static FancyLoggerBufferLine WriteNewLine(string text)
-        {
-            // Create line
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
-            return WriteNewLine(line);
-        }
-        public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
-        {
-            // Add line
-            lines.Add(line);
-            // Update contents
-            if (AutoScrollEnabled) ScrollToEnd();
-            else ScrollToLine(CurrentTopLineIndex);
-            return line;
-        }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(string text, int lineId)
-        {
-            // get line
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return null;
 
+        #region Line create, update and delete
+        // Write new line
+        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
+        {
             FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
-            return WriteNewLineAfterIndex(line, lineIndex);
+            return WriteNewLineAfter(lineId, line);
         }
-
-        public static FancyLoggerBufferLine? WriteNewLineAfter(FancyLoggerBufferLine line, int lineId)
+        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
         {
-            // get line
+            // Get line index
             int lineIndex = GetLineIndexById(lineId);
             if (lineIndex == -1) return null;
-
-            return WriteNewLineAfterIndex(line, lineIndex);
+            // Save top line
+            int topLineId = Lines[TopLineIndex].Id;
+            // Add
+            Lines.Insert(lineIndex + 1, line);
+            // Get updated top line index
+            TopLineIndex = GetLineIndexById(topLineId);
+            // Return
+            return line;
         }
 
-        public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)
+        public static FancyLoggerBufferLine? WriteNewLine(string text)
         {
-            if (lineIndex == -1) return null;
-            // Get Id of currentTopLineIndex
-            int currentTopLineId = lines[CurrentTopLineIndex].Id;
-            lines.Insert(lineIndex + 1, line);
-            // Get new current top line index
-            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
-            ScrollToLine(CurrentTopLineIndex);
-            return line; 
+            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            return WriteNewLine(line);
         }
-
-        public static void DeleteLine(int lineId)
+        public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
         {
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return;
-            // Get Id of currentTopLineIndex
-            int currentTopLineId = lines[CurrentTopLineIndex].Id;
-            lines.RemoveAt(lineIndex);
-            //
-            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
-            ScrollToLine(CurrentTopLineIndex);
+            // Get last id
+            if (Lines.Count > 0)
+            {
+                int lineId = Lines.Last().Id;
+                return WriteNewLineAfter(lineId, line);
+            }
+            else
+            {
+                Lines.Add(line);
+                return line;
+            }
         }
 
+        // Update line
         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
         {
+            // Get line
             FancyLoggerBufferLine? line = GetLineById(lineId);
             if (line == null) return null;
-
             line.Text = text;
-            ScrollToLine(CurrentTopLineIndex);
+            // Return
             return line;
         }
-        #endregion
 
-        public static void HideLine(int lineId)
-        {
-            FancyLoggerBufferLine? line = GetLineById(lineId);
-            if (line == null) return;
-            line.Hide();
-            ScrollToLine(CurrentTopLineIndex);
-        }
-        public static void UnhideLine(int lineId)
+        // Delete line
+        public static void DeleteLine(int lineId)
         {
-            FancyLoggerBufferLine? line = GetLineById(lineId);
-            if (line == null) return;
-            line.Unhide();
-            ScrollToLine(CurrentTopLineIndex);
+            // TODO: What if line id is equal to topLineId?????
+            // Get line index
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            // Save top line
+            int topLineId = Lines[TopLineIndex].Id;
+            // Delete
+            Lines.RemoveAt(lineIndex);
+            // Get updated top line index
+            if (topLineId != lineId)
+            {
+                TopLineIndex = GetLineIndexById(topLineId);
+            }
         }
+        #endregion
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs b/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
deleted file mode 100644
index 8fee783fd1a..00000000000
--- a/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
+++ /dev/null
@@ -1,146 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-//
-
-using System;
-using System.Collections.Generic;
-using System.Collections.Specialized;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
-namespace Microsoft.Build.Logging.FancyLogger
-{
-    public class FancyLoggerBufferLineNew
-    {
-        private static int Counter = 0;
-        public int Id;
-        public string Text;
-
-        public FancyLoggerBufferLineNew()
-        {
-            Id = Counter++;
-            Text = String.Empty;
-        }
-        public FancyLoggerBufferLineNew(string text)
-            : this()
-        {
-            Text = text;
-        }
-    }
-
-    public class FancyLoggerBufferNew
-    {
-        private static string Header = String.Empty;
-        private static string Footer = String.Empty;
-        private static List<FancyLoggerBufferLineNew> Lines;
-        private static int TopLineIndex = 0;
-        public static void Initialize()
-        {
-            // Use alternate buffer
-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
-
-            // TODO: Remove
-            Header = "This is ms build header";
-            Footer = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
-        }
-
-        #region Rendering
-        public static void Render()
-        {
-            // First clear all the screen
-            Console.Write(ANSIBuilder.Eraser.Display());
-            // Adjust top line index
-            if (TopLineIndex < 0) TopLineIndex = 0;
-            if (TopLineIndex >= Lines.Count) TopLineIndex = Lines.Count - 1;
-            // Write Header
-            Console.Write(
-                ANSIBuilder.Cursor.Home() +
-                ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress"))
-            );
-            // Write footer
-            Console.Write(
-                ANSIBuilder.Cursor.Position(Console.BufferHeight - 2, 0) +
-                new string('-', Console.BufferWidth) + '\n' + text
-            );
-        }
-        #endregion
-
-        #region Line identification
-        public static int GetLineIndexById(int lineId)
-        {
-            for (int i = 0; i < Lines.Count; i++)
-            {
-                if (Lines[i].Id == lineId) return i;
-            }
-            return -1;
-        }
-
-        public static FancyLoggerBufferLineNew? GetLineById(int lineId)
-        {
-            int index = GetLineIndexById(lineId);
-            if (index == -1) return null;
-            return Lines[index];
-        }
-        #endregion
-
-        #region Line create, update and delete
-        // Write new line
-        public void WriteNewLineAfter(int lineId, string text)
-        {
-            FancyLoggerBufferLineNew line = new FancyLoggerBufferLineNew(text);
-            WriteNewLineAfter(lineId, line);
-        }
-        public void WriteNewLineAfter(int lineId, FancyLoggerBufferLineNew line)
-        {
-            // Get line index
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return;
-            // Save top line
-            int topLineId = Lines[TopLineIndex].Id;
-            // Add
-            Lines.Insert(lineIndex + 1, line);
-            // Get updated top line index
-            TopLineIndex = GetLineIndexById(topLineId);
-        }
-
-        public void WriteNewLine(string text)
-        {
-            FancyLoggerBufferLineNew line = new FancyLoggerBufferLineNew(text);
-            WriteNewLine(line);
-        }
-        public void WriteNewLine(FancyLoggerBufferLineNew line)
-        {
-            // Get last id
-            int lineId = Lines.Last().Id;
-            WriteNewLineAfter(lineId, line);
-        }
-
-        // Update line
-        public void UpdateLine(int lineId, string text)
-        {
-            // Get line
-            FancyLoggerBufferLineNew? line = GetLineById(lineId);
-            if (line == null) return;
-            line.Text = text;
-        }
-
-        // Delete line
-        public void DeleteLine(int lineId)
-        {
-            // TODO: What if line id is equal to topLineId?????
-            // Get line index
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return;
-            // Save top line
-            int topLineId = Lines[TopLineIndex].Id;
-            // Delete
-            Lines.RemoveAt(lineIndex);
-            // Get updated top line index
-            TopLineIndex = GetLineIndexById(topLineId);
-        }
-        #endregion
-
-
-    }
-}
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBufferOld.cs b/src/Build/Logging/FancyLogger/FancyLoggerBufferOld.cs
new file mode 100644
index 00000000000..944c5863af4
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBufferOld.cs
@@ -0,0 +1,255 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    /// <summary>
+    /// Represents an identifiable line inside the fancylogger buffer.
+    /// </summary>
+    public class FancyLoggerBufferLineOld
+    {
+        private static int counter = 0;
+        public int Id;
+        public string Text;
+        public bool IsHidden;
+        public int IdentationLevel = -1;
+        public FancyLoggerBufferLineOld()
+        {
+            Id = counter++;
+            Text = String.Empty;
+        }
+        public FancyLoggerBufferLineOld(string text)
+        {
+            Id = counter++;
+            Text = text;
+        }
+        public FancyLoggerBufferLineOld(string text, int identationLevel) : this(text)
+        {
+            IdentationLevel = identationLevel;
+        }
+        public void Hide()
+        {
+            IsHidden = true;
+        }
+        public void Unhide()
+        {
+            IsHidden = false;
+        }
+        public int GetIndex()
+        {
+            return FancyLoggerBufferOld.GetLineIndexById(Id);
+        }
+    }
+
+    /// <summary>
+    /// Buffer manager for FancyLogger
+    /// </summary>
+    internal static class FancyLoggerBufferOld
+    {
+        // Status
+        public static bool AutoScrollEnabled { get; private set; }
+        public static bool IsTerminated { get; private set; }
+        public static int CurrentTopLineIndex { get; private set; }
+        public static int Height { get { return Console.WindowHeight; } }
+        // Lines to be presented by the buffer
+        private static List<FancyLoggerBufferLineOld> lines = new();
+        public static void Initialize()
+        {
+            // Setup event listeners
+            Task.Run(() =>
+            {
+                while (true)
+                {
+                    if (IsTerminated) return;
+                    switch (Console.ReadKey().Key)
+                    {
+                        case ConsoleKey.Q:
+                            IsTerminated = true;
+                        break;
+                        case ConsoleKey.UpArrow:
+                            ScrollToLine(CurrentTopLineIndex - 1);
+                            break;
+                        case ConsoleKey.DownArrow:
+                            ScrollToLine(CurrentTopLineIndex + 1);
+                            break;
+                        case ConsoleKey.Home:
+                            ScrollToLine(0);
+                            break;
+                        case ConsoleKey.End:
+                            ScrollToEnd();
+                            break;
+                        case ConsoleKey.Spacebar:
+                        case ConsoleKey.Escape:
+                            ToggleAutoScroll();
+                            break;
+                    }
+                }
+            });
+            // Switch to alternate
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+            // Settings
+            AutoScrollEnabled = true;
+            // Render contents
+            WriteTitleBar();
+            WriteFooter("~~~~~~~~~~~~~~~~~~~~~~~~~~~");
+            ScrollToEnd();
+        }
+        public static void Terminate()
+        {
+            // Switch to main buffer
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            // Dispose event listeners
+            IsTerminated = true;
+            // Delete lines
+            lines = new();
+        }
+
+        #region Scrolling
+        private static void ScrollToLine(int firstLineIndex)
+        {
+            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
+            CurrentTopLineIndex = firstLineIndex;
+            int i = 0;
+            while (i < Height - 4)
+            {
+                int lineIndex = i + firstLineIndex;
+                Console.Write(""
+                    + ANSIBuilder.Cursor.Position(i + 2, 0)
+                    + ANSIBuilder.Eraser.LineCursorToEnd()
+                    // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
+                    + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
+                );
+                i++;
+            }
+
+            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
+        }
+        private static void ScrollToEnd()
+        { 
+            // If number of lines is smaller than height
+            if (lines.Count < Height - 2)
+            {
+                ScrollToLine(0);
+            }
+            else
+            {
+                ScrollToLine(lines.Count - Height + 4);
+            }
+            // Go to end
+            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
+        }
+        private static void ToggleAutoScroll()
+        {
+            AutoScrollEnabled = !AutoScrollEnabled;
+        }
+        #endregion
+        #region Line Referencing
+        public static int GetLineIndexById(int lineId)
+        {
+            for (int i = 0; i < lines.Count; i++)
+            {
+                if (lines[i].Id == lineId) return i;
+            }
+            return -1;
+        }
+        public static FancyLoggerBufferLineOld? GetLineById(int lineId)
+        {
+            int i = GetLineIndexById(lineId);
+            if (i == -1) return null;
+            return lines[i];
+        }
+        #endregion
+        #region Writing
+        public static void WriteTitleBar()
+        {
+            Console.Write(""
+                + ANSIBuilder.Cursor.Home()
+                + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress"))
+            );
+        }
+        public static void WriteFooter(string text)
+        {
+            Console.Write(""
+                + ANSIBuilder.Cursor.Position(Height - 2, 0) // Position at bottom
+                + new string('-', Console.BufferWidth) + "\n"
+                + ANSIBuilder.Eraser.LineCursorToEnd()
+                + text
+            );
+        }
+        public static FancyLoggerBufferLineOld WriteNewLine(string text)
+        {
+            // Create line
+            FancyLoggerBufferLineOld line = new FancyLoggerBufferLineOld(text);
+            return WriteNewLine(line);
+        }
+        public static FancyLoggerBufferLineOld WriteNewLine(FancyLoggerBufferLineOld line)
+        {
+            // Add line
+            lines.Add(line);
+            // Update contents
+            if (AutoScrollEnabled) ScrollToEnd();
+            else ScrollToLine(CurrentTopLineIndex);
+            return line;
+        }
+        public static FancyLoggerBufferLineOld? WriteNewLineAfter(string text, int lineId)
+        {
+            // get line
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return null;
+
+            FancyLoggerBufferLineOld line = new FancyLoggerBufferLineOld(text);
+            return WriteNewLineAfterIndex(line, lineIndex);
+        }
+
+        public static FancyLoggerBufferLineOld? WriteNewLineAfter(FancyLoggerBufferLineOld line, int lineId)
+        {
+            // get line
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return null;
+
+            return WriteNewLineAfterIndex(line, lineIndex);
+        }
+
+        public static FancyLoggerBufferLineOld? WriteNewLineAfterIndex(FancyLoggerBufferLineOld line, int lineIndex)
+        {
+            if (lineIndex == -1) return null;
+            // Get Id of currentTopLineIndex
+            int currentTopLineId = lines[CurrentTopLineIndex].Id;
+            lines.Insert(lineIndex + 1, line);
+            // Get new current top line index
+            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
+            ScrollToLine(CurrentTopLineIndex);
+            return line; 
+        }
+
+        public static void DeleteLine(int lineId)
+        {
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            // Get Id of currentTopLineIndex
+            int currentTopLineId = lines[CurrentTopLineIndex].Id;
+            lines.RemoveAt(lineIndex);
+            //
+            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
+            ScrollToLine(CurrentTopLineIndex);
+        }
+
+        public static FancyLoggerBufferLineOld? UpdateLine(int lineId, string text)
+        {
+            FancyLoggerBufferLineOld? line = GetLineById(lineId);
+            if (line == null) return null;
+
+            line.Text = text;
+            ScrollToLine(CurrentTopLineIndex);
+            return line;
+        }
+        #endregion
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index e7645f48a0f..14cc6c9d324 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -65,13 +65,13 @@ public void Log()
             // Current target details
             if (CurrentTargetNode == null) return;
             string currentTargetLineContents = $"    âââ {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
-            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);
+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
             else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
 
             // Messages, warnings and errors
             foreach (FancyLoggerMessageNode node in AdditionalDetails)
             {
-                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter("", Line.Id);
+                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
         }
