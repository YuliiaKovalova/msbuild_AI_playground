diff --git a/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
new file mode 100644
index 00000000000..d931cf8a691
--- /dev/null
+++ b/src/Analyzers.UnitTests/ConfigurationProvider_Tests.cs
@@ -0,0 +1,132 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BuildCop.Infrastructure;
+using Microsoft.Build.BuildCop.Infrastructure.EditorConfig;
+using Microsoft.Build.Experimental.BuildCop;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using static Microsoft.Build.BuildCop.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
+
+#nullable disable
+
+namespace Microsoft.Build.Analyzers.UnitTests
+{
+    public class ConfigurationProvider_Tests
+    {
+        [Fact]
+        public void GetRuleIdConfiguration_ReturnsEmptyConfig()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            test_key=test_value_updated
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            var configs = configurationProvider.GetConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            // empty
+            configs.ShouldBe(new Dictionary<string, string>());
+        }
+
+        [Fact]
+        public void GetRuleIdConfiguration_ReturnsConfiguration()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            msbuild_analyzer.rule_id.property1=value1
+            msbuild_analyzer.rule_id.property2=value2
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            var configs = configurationProvider.GetConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            configs.Keys.Count.ShouldBe(2);
+
+            configs.ContainsKey("property1").ShouldBeTrue();
+            configs.ContainsKey("property2").ShouldBeTrue();
+
+            configs["property2"].ShouldBe("value2");
+            configs["property1"].ShouldBe("value1");
+        }
+
+        [Fact]
+        public void GetRuleIdConfiguration_CustomConfigurationData()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            msbuild_analyzer.rule_id.property1=value1
+            msbuild_analyzer.rule_id.property2=value2
+            msbuild_analyzer.rule_id.isEnabled=true
+            msbuild_analyzer.rule_id.isEnabled2=true
+            any_other_key1=any_other_value1
+            any_other_key2=any_other_value2
+            any_other_key3=any_other_value3
+            any_other_key3=any_other_value3
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            var customConfiguration = configurationProvider.GetCustomConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+            var configs = customConfiguration.ConfigurationData;
+
+            configs.Keys.Count().ShouldBe(3);
+
+            configs.ContainsKey("property1").ShouldBeTrue();
+            configs.ContainsKey("property2").ShouldBeTrue();
+            configs.ContainsKey("isenabled2").ShouldBeTrue();
+        }
+
+        [Fact]
+        public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
+        {
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+
+            TransientTestFolder workFolder1 = testEnvironment.CreateFolder(createFolder: true);
+            TransientTestFile config1 = testEnvironment.CreateFile(workFolder1, ".editorconfig",
+            """
+            root=true
+
+            [*.csproj]
+            msbuild_analyzer.rule_id.isEnabled=true
+            msbuild_analyzer.rule_id.Severity=Error
+            msbuild_analyzer.rule_id.EvaluationAnalysisScope=AnalyzedProjectOnly
+            """);
+
+            var configurationProvider = new ConfigurationProvider();
+            var buildConfig = configurationProvider.GetUserConfiguration(Path.Combine(workFolder1.Path, "test.csproj"), "rule_id");
+
+            buildConfig.ShouldNotBeNull();
+
+            buildConfig.IsEnabled?.ShouldBeTrue();
+            buildConfig.Severity?.ShouldBe(BuildAnalyzerResultSeverity.Error);
+            buildConfig.EvaluationAnalysisScope?.ShouldBe(EvaluationAnalysisScope.AnalyzedProjectOnly);
+        }
+    }
+}
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopConfigurationErrorScope.cs b/src/Build/BuildCop/Infrastructure/BuildCopConfigurationErrorScope.cs
new file mode 100644
index 00000000000..5836a28f2f9
--- /dev/null
+++ b/src/Build/BuildCop/Infrastructure/BuildCopConfigurationErrorScope.cs
@@ -0,0 +1,17 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.BuildCop.Infrastructure
+{
+    internal enum BuildCopConfigurationErrorScope
+    {
+        SingleRule,
+        EditorConfigParser
+    }
+}
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopConfigurationException.cs b/src/Build/BuildCop/Infrastructure/BuildCopConfigurationException.cs
index 4580fb03b81..fe31cdb435f 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopConfigurationException.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopConfigurationException.cs
@@ -15,7 +15,16 @@ internal class BuildCopConfigurationException : Exception
     /// Exception to communicate issues with user specified configuration - unsupported scenarios, malformations, etc.
     /// This exception usually leads to defuncting the particular analyzer for the rest of the build (even if issue occured with a single project).
     /// </summary>
-    public BuildCopConfigurationException(string message) : base(message)
+    ///
+    internal BuildCopConfigurationErrorScope buildCopConfigurationErrorScope;
+
+    public BuildCopConfigurationException(string message, Exception innerException, BuildCopConfigurationErrorScope buildCopConfigurationErrorScope = BuildCopConfigurationErrorScope.SingleRule) : base(message, innerException)
+    {
+        this.buildCopConfigurationErrorScope = buildCopConfigurationErrorScope;
+    }
+
+    public BuildCopConfigurationException(string message, BuildCopConfigurationErrorScope buildCopConfigurationErrorScope = BuildCopConfigurationErrorScope.SingleRule) : base(message)
     {
+        this.buildCopConfigurationErrorScope = buildCopConfigurationErrorScope;
     }
 }
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
index 349d2078504..c880c9efd77 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
@@ -179,7 +179,10 @@ private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryCont
         {
             // TODO: For user analyzers - it should run only on projects where referenced
             //  on others it should work similarly as disabling them.
-            // Disabled analyzer should not only post-filter results - it shouldn't even see the data 
+            // Disabled analyzer should not only post-filter results - it shouldn't even see the data
+
+
+            // TODO:catch the exception of fetching configuration 
 
             BuildAnalyzerWrapper wrapper;
             BuildAnalyzerConfigurationInternal[] configurations;
diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index 7917f4ba32f..aff50f8293e 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -125,11 +125,9 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
         {
             config = s_editorConfigParser.Parse(projectFullPath);
         }
-        catch (Exception ex)
+        catch (Exception exception)
         {
-            // Note: catch any exception, we do not want to break because of the failed operation with parsing the editorconfig.
-            Debug.WriteLine(ex);
-            throw new BuildCopConfigurationException($"Fetchin editorConfig data failed: {ex.Message}");
+            throw new BuildCopConfigurationException($"Parsing editorConfig data failed", exception, BuildCopConfigurationErrorScope.EditorConfigParser);
         }
 
         var keyTosearch = $"msbuild_analyzer.{ruleId}.";
@@ -139,7 +137,8 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
         {
             if (kv.Key.StartsWith(keyTosearch, StringComparison.OrdinalIgnoreCase))
             {
-                dictionaryConfig[kv.Key.Replace(keyTosearch.ToLower(), "")] = kv.Value;
+                var newKey = kv.Key.Replace(keyTosearch.ToLower(), "");
+                dictionaryConfig[newKey] = kv.Value;
             }
         }
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index fcdc6bd4851..45c1738a494 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -159,6 +159,7 @@
     <Compile Include="BuildCop\Acquisition\AnalyzerAcquisitionData.cs" />
     <Compile Include="BuildCop\Acquisition\BuildCopAcquisitionModule.cs" />
     <Compile Include="BuildCop\Analyzers\SharedOutputPathAnalyzer.cs" />
+    <Compile Include="BuildCop\Infrastructure\BuildCopConfigurationErrorScope.cs" />
     <Compile Include="BuildCop\Infrastructure\BuildCopConfigurationException.cs" />
     <Compile Include="BuildCop\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCop\Infrastructure\IBuildCopManagerProvider.cs" />
