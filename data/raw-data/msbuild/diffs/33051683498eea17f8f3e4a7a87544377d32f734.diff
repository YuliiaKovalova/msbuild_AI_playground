diff --git a/src/Tasks/Dependencies.cs b/src/Tasks/Dependencies.cs
index 650458721ff..2bf73615808 100644
--- a/src/Tasks/Dependencies.cs
+++ b/src/Tasks/Dependencies.cs
@@ -6,9 +6,9 @@
 
 namespace Microsoft.Build.Tasks
 {
-    /// <remarks>
+    /// <summary>
     /// Represents a cache of inputs to a compilation-style task.
-    /// </remarks>
+    /// </summary>
     /// <remarks>On-disk serialization format, don't change field names or types or use readonly.</remarks>
     [Serializable]
     internal class Dependencies
diff --git a/src/Tasks/RedistList.cs b/src/Tasks/RedistList.cs
index 514e79b0432..02d1951e168 100644
--- a/src/Tasks/RedistList.cs
+++ b/src/Tasks/RedistList.cs
@@ -265,7 +265,7 @@ private static RedistList GetFrameworkListFromReferenceAssembliesPath(TargetDotN
 
             // On dogfood build machines, v3.5 is not formally installed, so this returns null.
             // We don't use redist lists in this case.            
-            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>(): GetRedistListPathsFromDisk(referenceAssembliesPath);
+            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>() : GetRedistListPathsFromDisk(referenceAssembliesPath);
 
             var assemblyTableInfos = new AssemblyTableInfo[redistListPaths.Length];
             for (int i = 0; i < redistListPaths.Length; ++i)
@@ -349,6 +349,7 @@ public static RedistList GetRedistList(AssemblyTableInfo[] assemblyTables)
 
                 redistList = new RedistList(assemblyTables);
                 s_cachedRedistList.Add(key, redistList);
+
                 return redistList;
             }
         }
@@ -456,7 +457,7 @@ public bool FrameworkAssemblyEntryInRedist(AssemblyNameExtension assemblyName)
         public string GetUnifiedAssemblyName(string assemblyName)
         {
             AssemblyEntry entry = GetUnifiedAssemblyEntry(assemblyName);
-            return entry != null ? entry.FullName : assemblyName;
+            return entry?.FullName ?? assemblyName;
         }
 
         /// <summary>
diff --git a/src/Tasks/ResGen.cs b/src/Tasks/ResGen.cs
index 61e86cf5edf..69bb3979b85 100644
--- a/src/Tasks/ResGen.cs
+++ b/src/Tasks/ResGen.cs
@@ -334,7 +334,7 @@ protected internal override void AddResponseFileCommands(CommandLineBuilderExten
                         ToolLocationHelper.GetPathToDotNetFrameworkSdkFile(
                             "resgen.exe",
                             TargetDotNetFrameworkVersion.Version35),
-                        StringComparison.OrdinalIgnoreCase)
+                            StringComparison.OrdinalIgnoreCase)
                     && String.IsNullOrEmpty(StronglyTypedLanguage))
                 {
                     // 4.0 resgen.exe does support response files, so we can return the resgen arguments here!
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 78c0ddef04c..ba7b691cb2d 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -999,7 +999,7 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters
             private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)
             {
                 string metadataValue = item.GetMetadata(metadataName);
-                return metadataValue != null ? metadataValue.Trim() : metadataValue;
+                return metadataValue?.Trim() ?? metadataValue;
             }
 
             /// <summary>
@@ -1461,9 +1461,14 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ
 
                 if (!hasExpandReferenceAssemblies)
                 {
-                    ResolvedItem.SetMetadata(
-                        SDKManifest.Attributes.ExpandReferenceAssemblies,
-                        referenceItemHasSDKName ? "false" : "true");
+                    if (referenceItemHasSDKName)
+                    {
+                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, "false");
+                    }
+                    else
+                    {
+                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, "true");
+                    }
                 }
 
                 if (!hasCopyRedist)
