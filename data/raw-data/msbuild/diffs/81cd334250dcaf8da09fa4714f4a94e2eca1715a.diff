diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index 7e25fa8c93d..5f9c20258a2 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -1,29 +1,39 @@
-﻿using Shouldly;
+﻿using System;
+using System.Collections.Generic;
+using Shouldly;
 using System.IO;
 using System.Linq;
-using System.Text;
+using System.Reflection;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
-using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
+using Exception = System.Exception;
+using SdkResolverBase = Microsoft.Build.Framework.SdkResolver;
+using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
+using SdkResultBase = Microsoft.Build.Framework.SdkResult;
+using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public class SdkResolverLoader_Tests
     {
-        private readonly StringBuilder _log;
-        private readonly MockLoggingContext _loggingContext;
+        private readonly MockLogger _logger;
+        private readonly LoggingContext _loggingContext;
 
         public SdkResolverLoader_Tests()
         {
-            _log = new StringBuilder();
+            _logger = new MockLogger();
+            ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
+            loggingService.RegisterLogger(_logger);
 
-            var logger = new MockLoggingService(message => _log.AppendLine(message));
-            var bec = new BuildEventContext(0, 0, 0, 0, 0);
-
-            _loggingContext = new MockLoggingContext(logger, bec);
+            _loggingContext = new MockLoggingContext(
+                loggingService,
+                new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0, 0));
         }
 
         [Fact]
@@ -34,6 +44,9 @@ public void AssertDefaultLoaderReturnsDefaultResolvers()
             var resolvers = loader.LoadResolvers(_loggingContext, new MockElementLocation("file"));
 
             resolvers.Select(i => i.GetType()).ShouldBe(new [] { typeof(DefaultSdkResolver) });
+
+            _logger.ErrorCount.ShouldBe(0);
+            _logger.WarningCount.ShouldBe(0);
         }
 
         [Fact]
@@ -70,5 +83,176 @@ public void VerifySdkResolverLoaderFileDiscoveryPattern()
                 FileUtilities.DeleteDirectoryNoThrow(root, true);
             }
         }
+
+        /// <summary>
+        /// Verifies that if an SDK resolver throws while creating an instance that a warning is logged.
+        /// </summary>
+        [Fact]
+        public void VerifyThrowsWhenResolverFailsToLoad()
+        {
+            SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
+            {
+                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
+                FindPotentialSdkResolversFunc = rootFolder => new List<string>
+                {
+                    "myresolver.dll"
+                },
+                GetResolverTypesFunc = assembly => new[] { typeof(MockSdkResolverThatDoesNotLoad) }
+            };
+
+            InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
+            {
+                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+            });
+
+            exception.Message.ShouldBe($"The SDK resolver type \"{nameof(MockSdkResolverThatDoesNotLoad)}\" failed to load. A8BB8B3131D3475D881ACD3AF8D75BD6");
+
+            Exception innerException = exception.InnerException.ShouldBeOfType<Exception>();
+
+            innerException.Message.ShouldBe(MockSdkResolverThatDoesNotLoad.ExpectedMessage);
+
+            _logger.WarningCount.ShouldBe(0);
+            _logger.ErrorCount.ShouldBe(0);
+        }
+
+        /// <summary>
+        /// Verifies that when we attempt to create an instance of a resolver with no public constructor that a warning
+        /// is logged with the appropriate message.
+        /// </summary>
+        [Fact]
+        public void VerifyThrowsWhenResolverHasNoPublicConstructor()
+        {
+            SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
+            {
+                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
+                FindPotentialSdkResolversFunc = rootFolder => new List<string>
+                {
+                    "myresolver.dll"
+                },
+                GetResolverTypesFunc = assembly => new[] { typeof(MockSdkResolverNoPublicConstructor) }
+            };
+
+            InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
+            {
+                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+            });
+
+            exception.Message.ShouldBe($"The SDK resolver type \"{nameof(MockSdkResolverNoPublicConstructor)}\" failed to load. No parameterless constructor defined for this object.");
+
+            exception.InnerException.ShouldBeOfType<MissingMethodException>();
+
+            _logger.WarningCount.ShouldBe(0);
+            _logger.ErrorCount.ShouldBe(0);
+        }
+
+        /// <summary>
+        /// Verifies that when a resolver assembly cannot be loaded, that a warning is logged and other resolvers are still loaded.
+        /// </summary>
+        [Fact]
+        public void VerifyWarningLoggedWhenResolverAssemblyCannotBeLoaded()
+        {
+            const string assemblyPath = @"C:\foo\bar\myresolver.dll";
+            const string expectedMessage = "91BF077D4E9646819DE7AB2CBA2637B6";
+
+            SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
+            {
+                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) =>
+                {
+                    throw new Exception(expectedMessage);
+                },
+                FindPotentialSdkResolversFunc = rootFolder => new List<string>
+                {
+                    assemblyPath,
+                }
+            };
+
+            InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
+            {
+                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+            });
+
+            exception.Message.ShouldBe($"The SDK resolver assembly \"{assemblyPath}\" could not be loaded. {expectedMessage}");
+
+            Exception innerException = exception.InnerException.ShouldBeOfType<Exception>();
+
+            innerException.Message.ShouldBe(expectedMessage);
+
+            _logger.WarningCount.ShouldBe(0);
+            _logger.ErrorCount.ShouldBe(0);
+        }
+
+        private class MockSdkResolverThatDoesNotLoad : SdkResolverBase
+        {
+            public const string ExpectedMessage = "A8BB8B3131D3475D881ACD3AF8D75BD6";
+
+            public MockSdkResolverThatDoesNotLoad()
+            {
+                throw new Exception(ExpectedMessage);
+            }
+
+            public override string Name => nameof(MockSdkResolverThatDoesNotLoad);
+
+            public override int Priority => 0;
+
+            public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        private class MockSdkResolverNoPublicConstructor : SdkResolverBase
+        {
+            private MockSdkResolverNoPublicConstructor()
+            {
+            }
+
+            public override string Name => nameof(MockSdkResolverNoPublicConstructor);
+
+            public override int Priority => 0;
+
+            public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
+            {
+                throw new NotImplementedException();
+            }
+        }
+
+        private class MockSdkResolverLoader : SdkResolverLoader
+        {
+            public Func<string, LoggingContext, ElementLocation, Assembly> LoadResolverAssemblyFunc { get; set; }
+
+            public Func<string, IList<string>> FindPotentialSdkResolversFunc { get; set; }
+
+            public Func<Assembly, IEnumerable<Type>> GetResolverTypesFunc { get; set; }
+
+            protected override Assembly LoadResolverAssembly(string resolverPath, LoggingContext loggingContext, ElementLocation location)
+            {
+                if (LoadResolverAssemblyFunc != null)
+                {
+                    return LoadResolverAssemblyFunc(resolverPath, loggingContext, location);
+                }
+
+                return base.LoadResolverAssembly(resolverPath, loggingContext, location);
+            }
+
+            protected override IEnumerable<Type> GetResolverTypes(Assembly assembly)
+            {
+                if (GetResolverTypesFunc != null)
+                {
+                    return GetResolverTypesFunc(assembly);
+                }
+
+                return base.GetResolverTypes(assembly);
+            }
+
+            internal override IList<string> FindPotentialSdkResolvers(string rootFolder)
+            {
+                if (FindPotentialSdkResolversFunc != null)
+                {
+                    return FindPotentialSdkResolversFunc(rootFolder);
+                }
+
+                return base.FindPotentialSdkResolvers(rootFolder);
+            }
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index b079c65dc14..65f6bc56821 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -3,11 +3,9 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 using Microsoft.Build.UnitTests;
-using Microsoft.Build.UnitTests.BackEnd;
 using System;
 using System.Collections.Generic;
 using System.Linq;
-using System.Text;
 using Shouldly;
 using Xunit;
 using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
@@ -18,17 +16,18 @@ namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public class SdkResolverService_Tests
     {
-        private readonly StringBuilder _log;
-        private readonly MockLoggingContext _loggingContext;
+        private readonly MockLogger _logger;
+        private readonly LoggingContext _loggingContext;
 
         public SdkResolverService_Tests()
         {
-            _log = new StringBuilder();
+            _logger = new MockLogger();
+            ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
+            loggingService.RegisterLogger(_logger);
 
-            MockLoggingService logger = new MockLoggingService(message => _log.AppendLine(message));
-            BuildEventContext bec = new BuildEventContext(0, 0, 0, 0, 0);
-
-            _loggingContext = new MockLoggingContext(logger, bec);
+            _loggingContext = new MockLoggingContext(
+                loggingService,
+                new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0, 0));
         }
 
         [Fact]
@@ -40,13 +39,12 @@ public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
 
             string result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath");
 
-            string logResult = _log.ToString();
-            Assert.Null(result);
-            Assert.Contains("MockSdkResolver1 running", logResult);
-            Assert.Contains("MockSdkResolver2 running", logResult);
-            Assert.Contains("ERROR1", logResult);
-            Assert.Contains("ERROR2", logResult);
-            Assert.Contains("WARNING2", logResult);
+            result.ShouldBeNull();
+
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver2 running");
+            _logger.Errors.Select(i => i.Message).ShouldBe(new [] { "ERROR1", "ERROR2" });
+            _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING2" });
         }
 
         [Fact]
@@ -58,8 +56,8 @@ public void AssertErrorLoggedWhenResolverThrows()
 
             string result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath");
 
-            Assert.Equal("resolverpath1", result);
-            Assert.Contains("EXMESSAGE", _log.ToString());
+            result.ShouldBe("resolverpath1");
+            _logger.Warnings.Select(i => i.Message).ShouldBe(new [] { "The SDK resolver \"MockSdkResolverThrows\" failed to run. EXMESSAGE" });
         }
 
         [Fact]
@@ -72,7 +70,7 @@ public void AssertFirstResolverCanResolve()
             string result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath");
 
             Assert.Equal("resolverpath1", result);
-            Assert.Contains("MockSdkResolver1 running", _log.ToString().Trim());
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
         }
 
         [Fact]
@@ -86,16 +84,15 @@ public void AssertFirstResolverErrorsSupressedWhenResolved()
 
             string result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath");
 
-            string logResult = _log.ToString();
-            Assert.Equal("resolverpath2", result);
+            result.ShouldBe("resolverpath2");
 
             // Both resolvers should run, and no ERROR string.
-            Assert.Contains("MockSdkResolver1 running", logResult);
-            Assert.Contains("MockSdkResolver2 running", logResult);
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver2 running");
 
             // Resolver2 gives a warning on success or failure.
-            Assert.Contains("WARNING2", logResult);
-            Assert.DoesNotContain("ERROR", logResult);
+            _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING2" });
+            _logger.ErrorCount.ShouldBe(0);
         }
 
         [Fact]
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 7d2a305f6c8..619ba7501f0 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -10,12 +10,15 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     internal class SdkResolverLoader
     {
+#if !FEATURE_ASSEMBLY_LOADFROM
+        private readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();
+#endif
+
         internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
             ElementLocation location)
         {
@@ -30,29 +33,10 @@ internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
                 return resolvers;
             }
 
-#if !FEATURE_ASSEMBLY_LOADFROM
-            var loader = new CoreClrAssemblyLoader();
-#endif
-
             foreach (var potentialResolver in potentialResolvers)
-                try
-                {
-#if FEATURE_ASSEMBLY_LOADFROM
-                    var assembly = Assembly.LoadFrom(potentialResolver);
-#else
-                    loader.AddDependencyLocation(Path.GetDirectoryName(potentialResolver));
-                    Assembly assembly = loader.LoadFromPath(potentialResolver);
-#endif
-
-                    resolvers.AddRange(assembly.ExportedTypes
-                        .Select(type => new {type, info = type.GetTypeInfo()})
-                        .Where(t => t.info.IsClass && t.info.IsPublic && !t.info.IsAbstract && typeof(SdkResolver).IsAssignableFrom(t.type))
-                        .Select(t => (SdkResolver) Activator.CreateInstance(t.type)));
-                }
-                catch (Exception e)
-                {
-                    loggingContext.LogWarning(null, new BuildEventFileInfo(location), "CouldNotLoadSdkResolver", e.Message);
-                }
+            {
+                LoadResolvers(potentialResolver, loggingContext, location, resolvers);
+            }
 
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
@@ -73,5 +57,58 @@ internal virtual IList<string> FindPotentialSdkResolvers(string rootFolder)
                 .Where(FileUtilities.FileExistsNoThrow)
                 .ToList();
         }
+
+        protected virtual IEnumerable<Type> GetResolverTypes(Assembly assembly)
+        {
+            return assembly.ExportedTypes
+                .Select(type => new {type, info = type.GetTypeInfo()})
+                .Where(t => t.info.IsClass && t.info.IsPublic && !t.info.IsAbstract && typeof(SdkResolver).IsAssignableFrom(t.type))
+                .Select(t => t.type);
+        }
+
+        protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingContext loggingContext, ElementLocation location)
+        {
+#if FEATURE_ASSEMBLY_LOADFROM
+            return Assembly.LoadFrom(resolverPath);
+#else
+            _loader.AddDependencyLocation(Path.GetDirectoryName(resolverPath));
+            return _loader.LoadFromPath(resolverPath);
+#endif
+        }
+
+        protected virtual void LoadResolvers(string resolverPath, LoggingContext loggingContext, ElementLocation location, List<SdkResolver> resolvers)
+        {
+            Assembly assembly;
+            try
+            {
+                assembly = LoadResolverAssembly(resolverPath, loggingContext, location);
+            }
+            catch (Exception e)
+            {
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), e, "CouldNotLoadSdkResolverAssembly", resolverPath, e.Message);
+
+                return;
+            }
+
+            foreach (Type type in GetResolverTypes(assembly))
+            {
+                try
+                {
+                    resolvers.Add((SdkResolver)Activator.CreateInstance(type));
+                }
+                catch (TargetInvocationException e)
+                {
+                    // .NET wraps the original exception inside of a TargetInvocationException which masks the original message
+                    // Attempt to get the inner exception in this case, but fall back to the top exception message
+                    string message = e.InnerException?.Message ?? e.Message;
+
+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), e.InnerException ?? e, "CouldNotLoadSdkResolver", type.Name, message);
+                }
+                catch (Exception e)
+                {
+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), e, "CouldNotLoadSdkResolver", type.Name, e.Message);
+                }
+            }
+        }
     }
 }
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 408c28c8917..be765b967b1 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1200,9 +1200,13 @@
     <comment>{StrBegin="MSB4236: "}</comment>
   </data>
   <data name="CouldNotLoadSdkResolver" UESanitized="false" Visibility="Public">
-    <value>MSB4237: An SDK resolver was found but could not be loaded. {0}</value>
+    <value>MSB4237: The SDK resolver type "{0}" failed to load. {1}</value>
     <comment>{StrBegin="MSB4237: "}</comment>
   </data>
+  <data name="CouldNotLoadSdkResolverAssembly" UESanitized="false" Visibility="Public">
+    <value>MSB4244: The SDK resolver assembly "{0}" could not be loaded. {1}</value>
+    <comment>{StrBegin="MSB4244: "}</comment>
+  </data>
   <data name="CouldNotRunSdkResolver" UESanitized="false" Visibility="Public">
     <value>MSB4242: The SDK resolver "{0}" failed to run. {1}</value>
     <comment>{StrBegin="MSB4242: "}</comment>
@@ -1676,7 +1680,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
         MSB4128 is being used in FileLogger.cs (can't be added here yet as strings are currently frozen)
         MSB4129 is used by Shared\XmlUtilities.cs (can't be added here yet as strings are currently frozen)
 
-        Next message code should be MSB4244.
+        Next message code should be MSB4245.
               
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
