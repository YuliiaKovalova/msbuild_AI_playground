diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 4a48395a04c..976d244ef7f 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -422,14 +422,18 @@ public void LogBuildFinished(bool success)
         {
         }
 
-        /// <summary>
-        /// Logs a project evaluation started event
-        /// </summary>
-        public BuildEventContext LogProjectEvaluationStarted(int nodeId, int submissionId, string projectFile)
+
+        /// <inheritdoc />
+        public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)
         {
             return new BuildEventContext(0, 0, 0, 0, 0, 0, 0);
         }
 
+        /// <inheritdoc />
+        public void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile)
+        {
+        }
+
         /// <summary>
         /// Logs a project evaluation finished event
         /// </summary>
diff --git a/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs b/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
index de3972975e8..7f39ad5a8bd 100644
--- a/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
@@ -6,11 +6,13 @@
 //-----------------------------------------------------------------------
 
 using System;
+using System.Collections.Generic;
+using System.Diagnostics;
 using System.IO;
-using System.Linq;
 using Microsoft.Build.Engine.UnitTests;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.Evaluation
@@ -38,7 +40,10 @@ public void Dispose()
             GC.Collect();
         }
 
-        private static void AssertLoggingEvents(Action<Project, MockLogger> loggingTest)
+        private static void AssertLoggingEvents(
+            Action<Project, MockLogger> loggingTest = null,
+            MockLogger firstEvaluationLogger = null,
+            Func<Project, MockLogger> reevaluationLoggerFactory = null)
         {
             var projectImportContents =
                 @"<Project>
@@ -76,18 +81,28 @@ private static void AssertLoggingEvents(Action<Project, MockLogger> loggingTest)
 
                 projectContents = string.Format(projectContents, importFile);
 
-
                 var projectFile = env.CreateFile().Path;
                 File.WriteAllText(projectFile, projectContents);
 
-                var logger = new MockLogger();
-                collection.RegisterLogger(logger);
+                firstEvaluationLogger = firstEvaluationLogger ?? new MockLogger();
+                collection.RegisterLogger(firstEvaluationLogger);
 
                 var project = new Project(projectFile, null, null, collection);
 
-                Assert.NotEmpty(logger.AllBuildEvents);
+                firstEvaluationLogger.AllBuildEvents.ShouldNotBeEmpty();
+
+                if (reevaluationLoggerFactory != null)
+                {
+                    var reevaluationLogger = reevaluationLoggerFactory.Invoke(project);
+                    collection.RegisterLogger(reevaluationLogger);
+
+                    project.SetProperty("aProperty", "Value");
+                    project.ReevaluateIfNecessary();
+
+                    reevaluationLogger.AllBuildEvents.ShouldNotBeEmpty();
+                }
 
-                loggingTest.Invoke(project, logger);
+                loggingTest?.Invoke(project, firstEvaluationLogger);
             }
         }
 
@@ -95,29 +110,67 @@ private static void AssertLoggingEvents(Action<Project, MockLogger> loggingTest)
         public void AllEvaluationEventsShouldHaveAnEvaluationId()
         {
             AssertLoggingEvents(
-                (project, mockLogger) =>
+                (project, firstEvaluationLogger) =>
                 {
                     var evaluationId = project.LastEvaluationId;
+                    evaluationId.ShouldNotBe(BuildEventContext.InvalidEvaluationId);
 
-                    Assert.NotEqual(BuildEventContext.InvalidEvaluationId, evaluationId);
+                    foreach (var buildEvent in firstEvaluationLogger.AllBuildEvents)
+                    {
+                        buildEvent.BuildEventContext.EvaluationId.ShouldBe(evaluationId);
+                    }
+                });
+        }
 
-                    foreach (var buildEvent in mockLogger.AllBuildEvents)
+        [Fact]
+        public void GivenOneProjectThereShouldBeOneStartedAndOneEndedEvent()
+        {
+            AssertLoggingEvents(
+                (project, firstEvaluationLogger) =>
+                {
+                    var allBuildEvents = firstEvaluationLogger.AllBuildEvents;
+
+                    allBuildEvents.Count.ShouldBeGreaterThan(2);
+
+                    for (var i = 0; i < allBuildEvents.Count; i++)
                     {
-                        Assert.Equal(evaluationId, buildEvent.BuildEventContext.EvaluationId);
+                        var buildEvent = allBuildEvents[i];
+
+                        if (i == 0)
+                        {
+                            buildEvent.Message.ShouldStartWith("Evaluation started");
+                        }
+                        else if (i == allBuildEvents.Count - 1)
+                        {
+                            buildEvent.Message.ShouldStartWith("Evaluation finished");
+                        }
+                        else
+                        {
+                            buildEvent.Message.ShouldNotStartWith("Evaluation started");
+                            buildEvent.Message.ShouldNotStartWith("Evaluation finished");
+                        }
                     }
                 });
         }
 
         [Fact]
-        public void FirstAndLastEvaluationEventsShouldBeStartedAndEnded()
+        public void ProjectShouldHaveValidEvaluationIdDuringEvaluation()
         {
             AssertLoggingEvents(
-                (project, mockLogger) =>
+                null,
+                null,
+                project => new MockLogger
                 {
-                    Assert.True(mockLogger.AllBuildEvents.Count >= 2);
+                    AdditionalHandlers = new List<Action<object, BuildEventArgs>>
+                    {
+                        (sender, args) =>
+                        {
+                            var eventEvaluationId = args.BuildEventContext.EvaluationId;
 
-                    Assert.StartsWith("Evaluation started", mockLogger.AllBuildEvents.First().Message);
-                    Assert.StartsWith("Evaluation finished", mockLogger.AllBuildEvents.Last().Message);
+                            eventEvaluationId.ShouldNotBe(BuildEventContext.InvalidEvaluationId);
+                            project.LastEvaluationId.ShouldBe(eventEvaluationId);
+                        }
+                    }
                 });
         }
     }
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 3e5faf80761..4c8b74e2522 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -19,12 +19,17 @@ internal class EvaluationLoggingContext : LoggingContext
         public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContext buildEventContext, string projectFile) :
             base(
                 loggingService,
-                loggingService.LogProjectEvaluationStarted(buildEventContext.NodeId, buildEventContext.SubmissionId, projectFile))
+                loggingService.CreateEvaluationBuildEventContext(buildEventContext.NodeId, buildEventContext.SubmissionId))
         {
             _projectFile = projectFile;
             IsValid = true;
         }
 
+        public void LogProjectEvaluationStarted()
+        {
+            LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile);
+        }
+
         /// <summary>
         /// Log that the project has finished
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index ff50384b209..0cf3002bfaf 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -7,6 +7,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -367,14 +368,21 @@ ISet<string> WarningsAsMessages
         /// <param name="success">Did the build succeed or not</param>
         void LogBuildFinished(bool success);
 
+        /// <summary>
+        /// Create an evaluation context, by generating a new evaluation id.
+        /// </summary>
+        /// <param name="nodeId">The node id</param>
+        /// <param name="submissionId">The submission id</param>
+        /// <returns></returns>
+        BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId);
+
         /// <summary>
         /// Logs that a project evaluation has started
         /// </summary>
-        /// <param name="nodeId">The id of the node which is evaluating this project.</param>
-        /// <param name="submissionId">The id of the submission.</param>
-        /// <param name="projectFile">Project file to build</param>
+        /// <param name="eventContext">The event context to use for logging</param>
+        /// <param name="projectFile">Project file being built</param>
         /// <returns>The evaluation event context for the project.</returns>
-        BuildEventContext LogProjectEvaluationStarted(int nodeId, int submissionId, string projectFile);
+        void LogProjectEvaluationStarted(BuildEventContext eventContext, string projectFile);
 
         /// <summary>
         /// Logs that a project evaluation has finished
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 9d21fb94466..5038a8d1b2a 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -13,6 +13,7 @@
 using System.Text;
 using System.Threading;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -494,19 +495,17 @@ public void LogBuildFinished(bool success)
             }
         }
 
-        /// <summary>
-        /// Logs that a project evaluation has started
-        /// </summary>
-        /// <param name="nodeId">The id of the node which is evaluating this project.</param>
-        /// <param name="submissionId">The id of the submission.</param>
-        /// <param name="projectFile">Project file to build</param>
-        /// <returns>The evaluation event context for the project.</returns>
-        public BuildEventContext LogProjectEvaluationStarted(int nodeId, int submissionId, string projectFile)
+        /// <inheritdoc />
+        public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)
+        {
+            return new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+        }
+
+        /// <inheritdoc />
+        public void LogProjectEvaluationStarted(BuildEventContext projectEvaluationEventContext, string projectFile)
         {
             lock (_lockObject)
             {
-                BuildEventContext projectEvaluationEventContext = new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-
                 ProjectEvaluationStartedEventArgs evaluationEvent =
                     new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
                         projectFile)
@@ -516,8 +515,6 @@ public BuildEventContext LogProjectEvaluationStarted(int nodeId, int submissionI
                     };
 
                 ProcessLoggingEvent(evaluationEvent);
-
-                return projectEvaluationEventContext;
             }
         }
 
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 159d4f57ee2..ae2919518fd 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -803,6 +803,9 @@ private IDictionary<string, object> Evaluate(ILoggingService loggingService, Bui
 
                 _evaluationLoggingContext = new EvaluationLoggingContext(loggingService, buildEventContext, projectFile);
                 _data.EvaluationId = _evaluationLoggingContext.BuildEventContext.EvaluationId;
+
+                _evaluationLoggingContext.LogProjectEvaluationStarted();
+
                 ErrorUtilities.VerifyThrow(_data.EvaluationId != BuildEventContext.InvalidEvaluationId, "Evaluation should produce an evaluation ID");
 
 #if MSBUILDENABLEVSPROFILING
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index 9fa3474a38c..0fac1343344 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -185,8 +185,7 @@ public string Parameters
          */
         public void Initialize(IEventSource eventSource)
         {
-            eventSource.AnyEventRaised +=
-                    new AnyEventHandler(LoggerEventHandler);
+            eventSource.AnyEventRaised += LoggerEventHandler;
         }
 
         /// <summary>
@@ -219,6 +218,8 @@ public MockLogger(ITestOutputHelper testOutputHelper)
             _testOutputHelper = testOutputHelper;
         }
 
+        public List<Action<object, BuildEventArgs>> AdditionalHandlers { get; set; } = new List<Action<object, BuildEventArgs>>();
+
         /*
          * Method:  LoggerEventHandler
          *
@@ -229,6 +230,11 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
         {
             AllBuildEvents.Add(eventArgs);
 
+            foreach (var handler in AdditionalHandlers)
+            {
+                handler(sender, eventArgs);
+            }
+
             if (eventArgs is BuildWarningEventArgs)
             {
                 BuildWarningEventArgs w = (BuildWarningEventArgs) eventArgs;
