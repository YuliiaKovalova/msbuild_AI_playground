diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index cbc0a2d02c3..305ed776426 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -661,5 +661,8 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggi
 
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLoggingContext analysisContext)
         { /* Ignore the data */ }
+
+        public void StartProjectEvaluation(IAnalysisContext analysisContext, string projectFullPath)
+        { /* Ignore the data */ }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index d9cb65d4b93..8eee64243c5 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -3,6 +3,7 @@
 
 using System.Collections;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -30,6 +31,8 @@ public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContex
         public void LogProjectEvaluationStarted()
         {
             LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile);
+            LoggingService.BuildEngineDataRouter.StartProjectEvaluation(
+                new AnalysisLoggingContext(LoggingService, BuildEventContext), _projectFile);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index c7822f0c7aa..819f963c1ab 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -803,5 +803,8 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggi
 
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLoggingContext analysisContext)
             => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.ProcessPropertyWrite(propertyWriteInfo, analysisContext);
+
+        public void StartProjectEvaluation(IAnalysisContext analysisContext, string projectFullPath)
+            => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.StartProjectEvaluation(analysisContext, projectFullPath);
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index d792e0c2c05..daf10854514 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1121,7 +1121,7 @@ private async Task<BuildResult> BuildProject()
                 // Load the project
                 if (!_requestEntry.RequestConfiguration.IsLoaded)
                 {
-                    buildCheckManager.StartProjectEvaluation(
+                    buildCheckManager.ProjectFirstEncountered(
                         BuildCheckDataSource.BuildExecution,
                         new AnalysisLoggingContext(_nodeLoggingContext.LoggingService, _requestEntry.Request.BuildEventContext),
                         _requestEntry.RequestConfiguration.ProjectFullPath);
@@ -1147,14 +1147,12 @@ private async Task<BuildResult> BuildProject()
             finally
             {
                 buildCheckManager.EndProjectEvaluation(
-                    BuildCheckDataSource.BuildExecution,
                     _requestEntry.Request.BuildEventContext);
             }
 
             _projectLoggingContext = _nodeLoggingContext.LogProjectStarted(_requestEntry);
             buildCheckManager.StartProjectRequest(
-                BuildCheckDataSource.BuildExecution,
-                _requestEntry.Request.BuildEventContext,
+                _projectLoggingContext.BuildEventContext,
                 _requestEntry.RequestConfiguration.ProjectFullPath);
 
             try
@@ -1225,8 +1223,7 @@ private async Task<BuildResult> BuildProject()
             finally
             {
                 buildCheckManager.EndProjectRequest(
-                    BuildCheckDataSource.BuildExecution,
-                    new AnalysisLoggingContext(_nodeLoggingContext.LoggingService, _requestEntry.Request.BuildEventContext),
+                    new AnalysisLoggingContext(_nodeLoggingContext.LoggingService, _projectLoggingContext.BuildEventContext),
                     _requestEntry.RequestConfiguration.ProjectFullPath);
             }
 
diff --git a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
index f74b861adfa..fa096729e7a 100644
--- a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Collections;
@@ -28,7 +29,7 @@ internal class PropertiesUsageAnalyzer : InternalBuildAnalyzer
     private static readonly BuildAnalyzerRule _unusedPropertyRule = new BuildAnalyzerRule("BC0203", "UnusedPropertyDeclared",
         "A property that is not used should not be declared.",
         "Property: [{0}] was declared/initialized, but it was never used.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.None, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
 
     internal static readonly IReadOnlyList<BuildAnalyzerRule> SupportedRulesList = [_usedBeforeInitializedRule, _initializedAfterUsedRule, _unusedPropertyRule];
 
@@ -111,7 +112,7 @@ public override void RegisterInternalActions(IInternalBuildCheckRegistrationCont
             registrationContext.RegisterPropertyWriteAction(ProcessPropertyWrite);
         }
 
-        if (_unusedPropertyEnabled)
+        if (_unusedPropertyEnabled || _uninitializedReadEnabled)
         {
             registrationContext.RegisterProjectRequestProcessingDoneAction(DoneWithProject);
         }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index 2b6b94aa2d5..e7f60fe47a5 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -32,7 +32,7 @@ internal BuildCheckBuildEventHandler(
             { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
             { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
             { typeof(EnvironmentVariableReadEventArgs), (BuildEventArgs e) => HandleEnvironmentVariableReadEvent((EnvironmentVariableReadEventArgs)e) },
-            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!, ((ProjectStartedEventArgs)e).ProjectFile!) },
+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(e.BuildEventContext!, ((ProjectStartedEventArgs)e).ProjectFile!) },
             { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => HandleProjectFinishedRequest((ProjectFinishedEventArgs)e) },
             { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
             { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => HandleBuildCheckAcquisitionEvent((BuildCheckAcquisitionEventArgs)e) },
@@ -59,7 +59,7 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent
                 _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
                 eventArgs);
 
-            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);
+            _buildCheckManager.EndProjectEvaluation(eventArgs.BuildEventContext!);
         }
     }
 
@@ -67,16 +67,19 @@ private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventAr
     {
         if (!IsMetaProjFile(eventArgs.ProjectFile))
         {
-            _buildCheckManager.StartProjectEvaluation(
+            var analysisContext = _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!);
+            _buildCheckManager.ProjectFirstEncountered(
                 BuildCheckDataSource.EventArgs,
-                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
+                analysisContext,
+                eventArgs.ProjectFile!);
+            _buildCheckManager.StartProjectEvaluation(
+                analysisContext,
                 eventArgs.ProjectFile!);
         }
     }
 
     private void HandleProjectFinishedRequest(ProjectFinishedEventArgs eventArgs)
         => _buildCheckManager.EndProjectRequest(
-                BuildCheckDataSource.EventArgs,
                 _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),
                 eventArgs!.ProjectFile!);
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index d7b85615175..56cf641da37 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -411,34 +411,59 @@ public void FinalizeProcessing(LoggingContext loggingContext)
             loggingContext.LogBuildEvent(analyzerEventArg);
         }
 
-        private readonly ConcurrentDictionary<int, string> _projectsByContextId = new();
+        private readonly ConcurrentDictionary<int, string> _projectsByInstnaceId = new();
+        private readonly ConcurrentDictionary<int, string> _projectsByEvaluationId = new();
+
         /// <summary>
         /// This method fetches the project full path from the context id.
         /// This is needed because the full path is needed for configuration and later for fetching configured checks
         ///  (future version might optimize by using the ProjectContextId directly for fetching the checks).
         /// </summary>
         /// <param name="buildEventContext"></param>
+        /// <param name="projectFullPath"></param>
         /// <returns></returns>
-        private string GetProjectFullPath(BuildEventContext buildEventContext)
+        private bool TryGetProjectFullPath(BuildEventContext buildEventContext, out string projectFullPath)
         {
-            const string defaultProjectFullPath = "Unknown_Project";
-
-            if (_projectsByContextId.TryGetValue(buildEventContext.ProjectContextId, out string? projectFullPath))
+            if (buildEventContext.EvaluationId >= 0)
             {
-                return projectFullPath;
+                if (_projectsByEvaluationId.TryGetValue(buildEventContext.EvaluationId, out string? val))
+                {
+                    projectFullPath = val;
+                    return true;
+                }
             }
-            else if (buildEventContext.ProjectContextId == BuildEventContext.InvalidProjectContextId &&
-                     _projectsByContextId.Count == 1)
+            else if (buildEventContext.ProjectInstanceId >= 0)
             {
-                // The coalescing is for a rare possibility of a race where other thread removed the item (between the if check and fetch here).
+                if (_projectsByInstnaceId.TryGetValue(buildEventContext.ProjectInstanceId, out string? val))
+                {
+                    projectFullPath = val;
+                    return true;
+                }
+            }
+            else if (_projectsByInstnaceId.Count == 1)
+            {
+                projectFullPath = _projectsByInstnaceId.FirstOrDefault().Value;
+                // This is for a rare possibility of a race where other thread removed the item (between the if check and fetch here).
                 // We currently do not support multiple projects in parallel in a single node anyway.
-                return _projectsByContextId.FirstOrDefault().Value ?? defaultProjectFullPath;
+                if (!string.IsNullOrEmpty(projectFullPath))
+                {
+                    return true;
+                }
+            }
+            else if (_projectsByEvaluationId.Count == 1)
+            {
+                projectFullPath = _projectsByEvaluationId.FirstOrDefault().Value;
+                if (!string.IsNullOrEmpty(projectFullPath))
+                {
+                    return true;
+                }
             }
 
-            return defaultProjectFullPath;
+            projectFullPath = string.Empty;
+            return false;
         }
 
-        public void StartProjectEvaluation(
+        public void ProjectFirstEncountered(
             BuildCheckDataSource buildCheckDataSource,
             IAnalysisContext analysisContext,
             string projectFullPath)
@@ -452,7 +477,13 @@ public void StartProjectEvaluation(
             }
 
             SetupAnalyzersForNewProject(projectFullPath, analysisContext);
-            _projectsByContextId[analysisContext.BuildEventContext.ProjectContextId] = projectFullPath;
+        }
+
+        public void StartProjectEvaluation(
+            IAnalysisContext analysisContext,
+            string projectFullPath)
+        {
+            _projectsByEvaluationId[analysisContext.BuildEventContext.EvaluationId] = projectFullPath;
         }
 
         /*
@@ -462,23 +493,21 @@ public void StartProjectEvaluation(
          */
 
 
-        public void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
+        public void EndProjectEvaluation(BuildEventContext buildEventContext)
         {
         }
 
-        public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath)
+        public void StartProjectRequest(BuildEventContext buildEventContext, string projectFullPath)
         {
             // There can be multiple ProjectStarted-ProjectFinished per single configuration project build (each request for different target)
-            _projectsByContextId[buildEventContext.ProjectContextId] = projectFullPath;
+            _projectsByInstnaceId[buildEventContext.ProjectInstanceId] = projectFullPath;
         }
 
         public void EndProjectRequest(
-            BuildCheckDataSource buildCheckDataSource,
             IAnalysisContext analysisContext,
             string projectFullPath)
         {
             _buildEventsProcessor.ProcessProjectDone(analysisContext, projectFullPath);
-            _projectsByContextId.TryRemove(analysisContext.BuildEventContext.ProjectContextId, out _);
         }
 
         public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggingContext analysisContext)
@@ -488,11 +517,14 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggi
                 return;
             }
 
-            PropertyReadData propertyReadData = new(
-                GetProjectFullPath(analysisContext.BuildEventContext),
-                analysisContext.BuildEventContext.ProjectInstanceId,
-                propertyReadInfo);
-            _buildEventsProcessor.ProcessPropertyRead(propertyReadData, analysisContext);
+            if (TryGetProjectFullPath(analysisContext.BuildEventContext, out string projectFullPath))
+            {
+                PropertyReadData propertyReadData = new(
+                    projectFullPath,
+                    analysisContext.BuildEventContext.ProjectInstanceId,
+                    propertyReadInfo);
+                _buildEventsProcessor.ProcessPropertyRead(propertyReadData, analysisContext);
+            }
         }
 
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLoggingContext analysisContext)
@@ -502,11 +534,14 @@ public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLo
                 return;
             }
 
-            PropertyWriteData propertyWriteData = new(
-                GetProjectFullPath(analysisContext.BuildEventContext),
-                analysisContext.BuildEventContext.ProjectInstanceId,
-                propertyWriteInfo);
-            _buildEventsProcessor.ProcessPropertyWrite(propertyWriteData, analysisContext);
+            if (TryGetProjectFullPath(analysisContext.BuildEventContext, out string projectFullPath))
+            {
+                PropertyWriteData propertyWriteData = new(
+                    projectFullPath,
+                    analysisContext.BuildEventContext.ProjectInstanceId,
+                    propertyWriteInfo);
+                _buildEventsProcessor.ProcessPropertyWrite(propertyWriteData, analysisContext);
+            }
         }
 
         public void Shutdown()
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index d3174b94ed0..9e889446902 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -67,13 +67,18 @@ void ProcessTaskParameterEventArgs(
     //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
     //  to manager about what analyzers need to be materialized and configuration fetched.
     // No unloading of analyzers is yet considered - once loaded it stays for whole build.
-    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string projectFullPath);
 
-    void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+    // Project might be encountered first time in some node, but be already evaluated in another - so StartProjectEvaluation won't happen
+    //  - but we still need to know about it, hence the dedicated event.
+    void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string projectFullPath);
 
-    void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath);
+    void StartProjectEvaluation(IAnalysisContext analysisContext, string projectFullPath);
 
-    void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string projectFullPath);
+    void EndProjectEvaluation(BuildEventContext buildEventContext);
+
+    void StartProjectRequest(BuildEventContext buildEventContext, string projectFullPath);
+
+    void EndProjectRequest(IAnalysisContext analysisContext, string projectFullPath);
 
     void Shutdown();
 }
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
index 4aceff798f6..e7eafc06f4a 100644
--- a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
@@ -22,4 +22,11 @@ void ProcessPropertyRead(
     void ProcessPropertyWrite(
         PropertyWriteInfo propertyWriteInfo,
         AnalysisLoggingContext analysisContext);
+
+    /// <summary>
+    /// Signals that evaluation in current node is starting
+    /// </summary>
+    /// <param name="analysisContext"></param>
+    /// <param name="projectFullPath"></param>
+    void StartProjectEvaluation(IAnalysisContext analysisContext, string projectFullPath);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 338a282cdcd..acd25ca20b0 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -54,48 +54,36 @@ public void FinalizeProcessing(LoggingContext loggingContext)
     {
     }
 
-    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext, string fullPath)
+    public void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext,
+        string projectFullPath)
     {
     }
 
-    public void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
+    public void StartProjectEvaluation(IAnalysisContext analysisContext, string fullPath)
     {
     }
 
-    public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath)
+    public void EndProjectEvaluation(BuildEventContext buildEventContext)
     {
     }
 
-    public void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, IAnalysisContext analysisContext,
-        string projectFullPath)
+    public void StartProjectRequest(BuildEventContext buildEventContext, string projectFullPath)
     {
     }
 
-    public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
-    {
-    }
-
-    public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
+    public void EndProjectRequest(IAnalysisContext analysisContext,
+        string projectFullPath)
     {
     }
 
     public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => new Dictionary<string, TimeSpan>();
 
-    public void StartTaskInvocation(BuildCheckDataSource buildCheckDataSource, TaskStartedEventArgs eventArgs)
-    { }
-
-    public void EndTaskInvocation(BuildCheckDataSource buildCheckDataSource, TaskFinishedEventArgs eventArgs)
-    { }
-
-    public void ProcessTaskParameter(BuildCheckDataSource buildCheckDataSource, TaskParameterEventArgs eventArg)
-    { }
-
     public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, AnalysisLoggingContext buildEventContext)
     { }
 
     public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, AnalysisLoggingContext buildEventContext)
     { }
-	
+
     public void ProcessEnvironmentVariableReadEventArgs(IAnalysisContext analysisContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
     { }
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 32fde2a370d..60d44beb52f 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -76,19 +76,21 @@ public void PropertiesUsageAnalyzerTest()
         TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
         TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
 
-        string output = RunnerUtilities.ExecBootstrapedMSBuild($"{projectFile.Path} -analyze", out bool success);
+        string output = RunnerUtilities.ExecBootstrapedMSBuild($"{projectFile.Path} -analyze /v:detailed", out bool success);
         _env.Output.WriteLine(output);
         _env.Output.WriteLine("=========================");
         success.ShouldBeTrue(output);
 
         output.ShouldMatch(@"BC0201: .* Property: \[MyProp11\]");
         output.ShouldMatch(@"BC0202: .* Property: \[MyPropT2\]");
-        output.ShouldMatch(@"BC0203: .* Property: \[MyProp13\]");
+        // since it's just suggestion, it doesn't have a colon ':'
+        output.ShouldMatch(@"BC0203 .* Property: \[MyProp13\]");
 
         // each finding should be found just once - but reported twice, due to summary
         Regex.Matches(output, "BC0201: .* Property").Count.ShouldBe(2);
         Regex.Matches(output, "BC0202: .* Property").Count.ShouldBe(2);
-        Regex.Matches(output, "BC0203: .* Property").Count.ShouldBe(2);
+        // since it's not an error - it's not in summary
+        Regex.Matches(output, "BC0203 .* Property").Count.ShouldBe(1);
     }
 
     [Theory]
