diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 597d418b380..bcb11463ae9 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -321,8 +321,6 @@ private async Task<WorkUnitResult> ExecuteTask(TaskExecutionMode mode, Lookup lo
 
                 WorkUnitResult aggregateResult = new WorkUnitResult();
 
-                taskHost?.Log($"In ExecuteTask, project instance {_targetLoggingContext?.BuildEventContext?.ProjectInstanceId} target {_targetLoggingContext?.BuildEventContext?.TargetId}");
-
                 // Loop through each of the batch buckets and execute them one at a time
                 for (int i = 0; i < buckets.Count; i++)
                 {
@@ -348,9 +346,7 @@ private async Task<WorkUnitResult> ExecuteTask(TaskExecutionMode mode, Lookup lo
                         MSBuildEventSource.Log.ExecuteTaskStop(_taskNode?.Name, taskLoggingContext.BuildEventContext.TaskId);
                     }
                 }
-
-                taskHost?.Log($"ExecuteTask done, project instance {_targetLoggingContext?.BuildEventContext?.ProjectInstanceId} target {_targetLoggingContext?.BuildEventContext?.TargetId}");
-
+                
                 taskResult = aggregateResult;
             }
             finally
@@ -763,8 +759,6 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                 TaskExecutionHost host = taskExecutionHost as TaskExecutionHost;
                 Type taskType = host.TaskInstance.GetType();
 
-                taskHost?.Log($"ExecuteInstantiatedTask project instance {_targetLoggingContext?.BuildEventContext?.ProjectInstanceId} target {_targetLoggingContext?.BuildEventContext?.TargetId}, task is {taskType.Name}");
-
                 try
                 {
                     if (taskType == typeof(MSBuild))
@@ -819,13 +813,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                         using (FullTracking.Track(taskLoggingContext.TargetLoggingContext.Target.Name, _taskNode.Name, _buildRequestEntry.ProjectRootDirectory, _buildRequestEntry.RequestConfiguration.Project.PropertiesToBuildWith))
 #endif
                         {
-                            taskHost?.Log($"In ExecuteInstantiatedTask, project instance {_targetLoggingContext?.BuildEventContext?.ProjectInstanceId} target {_targetLoggingContext?.BuildEventContext?.TargetId}");
-                            taskHost?.RequireCores(1);
-
                             taskResult = taskExecutionHost.Execute();
-
-                            taskHost?.ReleaseCores(1);
-                            taskHost?.Log($"ExecuteInstantiatedTask done, project instance {_targetLoggingContext?.BuildEventContext?.ProjectInstanceId} target {_targetLoggingContext?.BuildEventContext?.TargetId}");
                         }
                     }
                 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 2a100338546..0f93e233f57 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -120,7 +120,6 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             ErrorUtilities.VerifyThrowInternalNull(taskLocation, "taskLocation");
 
             _host = host;
-            rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
             _requestEntry = requestEntry;
             _taskLocation = taskLocation;
             _targetBuilderCallback = targetBuilderCallback;
@@ -128,10 +127,8 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             _activeProxy = true;
             _callbackMonitor = new Object();
 
-            Log($"TaskHost ctor for {requestEntry.RequestConfiguration.ConfigurationId}: {requestEntry.RequestConfiguration.ProjectFullPath}");
-
             // Ensure that we have at least one core to run this task
-            //RequireCores(1);
+            RequireCores(1);
         }
 
         /// <summary>
@@ -350,8 +347,6 @@ public void Yield()
         {
             lock (_callbackMonitor)
             {
-                Log("Yielding");
-
                 IRequestBuilderCallback builderCallback = _requestEntry.Builder as IRequestBuilderCallback;
                 ErrorUtilities.VerifyThrow(_yieldThreadId == -1, "Cannot call Yield() while yielding.");
                 _yieldThreadId = Thread.CurrentThread.ManagedThreadId;
@@ -369,7 +364,6 @@ public void Reacquire()
         {
             lock (_callbackMonitor)
             {
-                Log("reacquring");
                 IRequestBuilderCallback builderCallback = _requestEntry.Builder as IRequestBuilderCallback;
                 ErrorUtilities.VerifyThrow(_yieldThreadId != -1, "Cannot call Reacquire() before Yield().");
                 ErrorUtilities.VerifyThrow(_yieldThreadId == Thread.CurrentThread.ManagedThreadId, "Cannot call Reacquire() on thread {0} when Yield() was called on thread {1}", Thread.CurrentThread.ManagedThreadId, _yieldThreadId);
@@ -377,7 +371,6 @@ public void Reacquire()
                 MSBuildEventSource.Log.ExecuteTaskReacquireStart(_taskLoggingContext.TaskName, _taskLoggingContext.BuildEventContext.TaskId);
                 builderCallback.Reacquire();
                 MSBuildEventSource.Log.ExecuteTaskReacquireStop(_taskLoggingContext.TaskName, _taskLoggingContext.BuildEventContext.TaskId);
-                Log("reacquired");
                 _yieldThreadId = -1;
             }
         }
@@ -679,10 +672,6 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         int runningTotal = 0;
 
-        ResourceManagerService rms;
-
-        public void Log(string s) => rms.Log($"{s}, runningTotal={runningTotal}");
-
         public int RequestCores(int requestedCores)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
@@ -693,53 +682,37 @@ public int RequestCores(int requestedCores)
 
             runningTotal += coresAcquired;
 
-            Log($"Requested {requestedCores}, got {coresAcquired}");
-
             return coresAcquired;
         }
 
-        public void RequireCores(int requestedCores)
+        private void RequireCores(int requestedCores)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
             rms.RequireCores(requestedCores);
 
-            runningTotal += requestedCores; // default reservation
-
-            Log($"Required {requestedCores}");
-
+            runningTotal += 1; // default reservation
         }
 
         public void ReleaseCores(int coresToRelease)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
-            Log($"Attempting to release {coresToRelease}");
 
             coresToRelease = Math.Min(runningTotal, coresToRelease);
 
             if (coresToRelease >= 1)
             {
-                rms.ReleaseCores(coresToRelease);
                 runningTotal -= coresToRelease;
-            }
 
-            Log($"Released {coresToRelease}");
+                rms.ReleaseCores(coresToRelease);
+            }
         }
 
         internal void ReleaseAllCores()
         {
-            Log("Releasing all");
             ReleaseCores(runningTotal);
 
-            var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
-
-            if (rms.TotalNumberHeld != 0)
-            {
-                //Debug.Fail("still holding");
-            }
-
             runningTotal = 0;
-            Log("all released");
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 37c51c7ea96..5a4b6bf5118 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -4,7 +4,6 @@
 using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Linq;
 using System.Text;
 using System.Threading;
@@ -18,12 +17,6 @@ class ResourceManagerService : IBuildComponent
     {
         Semaphore? s = null;
 
-        public int TotalNumberHeld = -1;
-
-        private static StringBuilder log = new StringBuilder();
-
-        public void Log(string s) => log.AppendFormat("{0}: {1}, current={2} thread={4} {3}", DateTime.Now.Ticks, s, TotalNumberHeld, Environment.NewLine, Thread.CurrentThread.ManagedThreadId);
-
         internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskResourceManager, "Cannot create components of type {0}", type);
@@ -37,10 +30,6 @@ public void InitializeComponent(IBuildComponentHost host)
 
             int resourceCount = host.BuildParameters.MaxNodeCount; // TODO: tweakability
 
-            TotalNumberHeld = 0;
-
-            Log($"Initialized with {resourceCount}");
-
             s = new Semaphore(resourceCount, resourceCount, SemaphoreName); // TODO: SemaphoreSecurity?
         }
 
@@ -48,16 +37,10 @@ public void ShutdownComponent()
         {
             s?.Dispose();
             s = null;
-
-            Log($"Tearing down; held should have been {TotalNumberHeld}");
-
-            TotalNumberHeld = -2;
         }
 
         public int RequestCores(int requestedCores)
         {
-            Log($"Requesting {requestedCores}");
-
             if (s is null)
             {
                 // TODO: ErrorUtilities should be annotated so this can just be `ErrorUtilities.VerifyThrow`
@@ -76,8 +59,6 @@ public int RequestCores(int requestedCores)
                 }
             }
 
-            Log($"got {i}, holding {TotalNumberHeld}");
-
             return i;
         }
 
@@ -93,10 +74,6 @@ public void ReleaseCores(int coresToRelease)
             ErrorUtilities.VerifyThrow(coresToRelease > 0, "Tried to release {0} cores", coresToRelease);
 
             s.Release(coresToRelease);
-
-            TotalNumberHeld -= coresToRelease;
-
-            Log($"released {coresToRelease}, now holding {TotalNumberHeld}");
         }
 
         internal void RequireCores(int requestedCores)
@@ -108,18 +85,11 @@ internal void RequireCores(int requestedCores)
                 throw new InternalErrorException($"{nameof(ResourceManagerService)} was called while uninitialized");
             }
 
-            if (TotalNumberHeld >= 1)
-            {
-                //Debugger.Launch();
-            }
-
             if (!s.WaitOne())
             {
                 ErrorUtilities.ThrowInternalError("Couldn't get a core to run a task even with infinite timeout");
-            }
 
-            TotalNumberHeld++;
-            Log($"required 1, now holding {TotalNumberHeld}");
+            }
         }
     }
 }
