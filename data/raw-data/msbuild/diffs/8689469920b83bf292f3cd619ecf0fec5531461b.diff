diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index 307b0bed35b..0aaa6f0baaf 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -143,7 +143,7 @@ public virtual string Message
         /// </summary>
         protected internal string RawMessage
         {
-            get => message;
+            get => FormattedMessage;
             set => message = value;
         }
 
@@ -151,7 +151,7 @@ protected internal string RawMessage
         /// Like <see cref="RawMessage"/> but returns a formatted message string if available.
         /// Used for serialization.
         /// </summary>
-        private protected virtual string RawFormattedMessage
+        private protected virtual string FormattedMessage
         {
             get => message;
         }
@@ -197,7 +197,7 @@ private protected void WriteToStreamWithExplicitMessage(BinaryWriter writer, str
         /// <param name="writer">Binary writer which is attached to the stream the event will be serialized into</param>
         internal virtual void WriteToStream(BinaryWriter writer)
         {
-            WriteToStreamWithExplicitMessage(writer, message);
+            WriteToStreamWithExplicitMessage(writer, RawMessage);
         }
 
         /// <summary>
diff --git a/src/Framework/LazyFormattedBuildEventArgs.cs b/src/Framework/LazyFormattedBuildEventArgs.cs
index 23529cc81db..9f0e8aded43 100644
--- a/src/Framework/LazyFormattedBuildEventArgs.cs
+++ b/src/Framework/LazyFormattedBuildEventArgs.cs
@@ -29,9 +29,9 @@ internal object[] RawArguments
         /// <summary>
         /// Exposes the formatted message string to serializers.
         /// </summary>
-        private protected override string RawFormattedMessage
+        private protected override string FormattedMessage
         {
-            get => (argumentsOrFormattedMessage is string formattedMessage) ? formattedMessage : base.RawFormattedMessage;
+            get => (argumentsOrFormattedMessage is string formattedMessage) ? formattedMessage : base.FormattedMessage;
         }
 
         /// <summary>
@@ -130,7 +130,7 @@ internal override void WriteToStream(BinaryWriter writer)
             object argsOrMessage = argumentsOrFormattedMessage;
             if (argsOrMessage is object[] arguments && arguments.Length > 0)
             {
-                base.WriteToStream(writer);
+                base.WriteToStreamWithExplicitMessage(writer, base.Message);
                 writer.Write(arguments.Length);
 
                 foreach (object argument in arguments)
@@ -142,7 +142,7 @@ internal override void WriteToStream(BinaryWriter writer)
             }
             else
             {
-                base.WriteToStreamWithExplicitMessage(writer, (argsOrMessage is string formattedMessage) ? formattedMessage : RawMessage);
+                base.WriteToStreamWithExplicitMessage(writer, (argsOrMessage is string formattedMessage) ? formattedMessage : base.Message);
                 writer.Write(-1);
             }
 
