diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index a684ab092d2..9840778dc67 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -600,11 +600,11 @@ private enum BuildEnabledSetting
         /// </remarks>
         public IDictionary<string, string> GlobalProperties => implementation.GlobalProperties;
 
-        internal bool GlobalPropertiesContains(string key) => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesContains(key) : GlobalProperties.ContainsKey(key);
+        internal bool GlobalPropertiesContains(string key) => implementation.GlobalPropertiesContains(key);
 
-        internal int GlobalPropertiesCount => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesCount() : GlobalProperties.Count;
+        internal int GlobalPropertiesCount => implementation.GlobalPropertiesCount();
 
-        internal IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable => implementation is ProjectImpl projImpl ? projImpl.GlobalPropertiesEnumerable() : GlobalProperties;
+        internal IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable => implementation.GlobalPropertiesEnumerable();
 
         /// <summary>
         /// Item types in this project.
@@ -2093,25 +2093,22 @@ public override bool IsDirty
                 }
             }
 
-            public bool GlobalPropertiesContains(string key)
+            public override bool GlobalPropertiesContains(string key)
             {
                 return _data.GlobalPropertiesDictionary.Contains(key);
             }
 
-            public int GlobalPropertiesCount()
+            public override int GlobalPropertiesCount()
             {
                 return _data.GlobalPropertiesDictionary.Count;
             }
 
-            public IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()
+            public override IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()
             {
-                List<KeyValuePair<string, string>> result = new List<KeyValuePair<string, string>>();
                 foreach (ProjectPropertyInstance property in _data.GlobalPropertiesDictionary)
                 {
-                    result.Add(new KeyValuePair<string, string>(property.Name, ((IProperty)property).EvaluatedValueEscaped));
+                    yield return new KeyValuePair<string, string>(property.Name, ((IProperty)property).EvaluatedValueEscaped);
                 }
-
-                return result;
             }
 
             /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
index 68e3609784b..5cfeb0c336e 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
@@ -259,5 +259,11 @@ public abstract class ProjectLink
         /// Called by the local project collection to indicate to this project that it is no longer loaded.
         /// </summary>
         public abstract void Unload();
+
+        public virtual bool GlobalPropertiesContains(string key) => GlobalProperties.ContainsKey(key);
+
+        public virtual int GlobalPropertiesCount() => GlobalProperties.Count;
+
+        public virtual IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable() => GlobalProperties;
     }
 }
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 47780d37b51..57af35851fb 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -19,3 +19,6 @@ Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback
 Microsoft.Build.Experimental.OutOfProcServerNode.OutOfProcServerNode(Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback buildFunction) -> void
 Microsoft.Build.Experimental.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
 static Microsoft.Build.Experimental.MSBuildClient.ShutdownServer(System.Threading.CancellationToken cancellationToken) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesContains(string key) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesCount() -> int
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesEnumerable() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 42acd772719..05446d8617c 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -19,4 +19,6 @@ Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback
 Microsoft.Build.Experimental.OutOfProcServerNode.OutOfProcServerNode(Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback buildFunction) -> void
 Microsoft.Build.Experimental.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
 static Microsoft.Build.Experimental.MSBuildClient.ShutdownServer(System.Threading.CancellationToken cancellationToken) -> bool
-
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesContains(string key) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesCount() -> int
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesEnumerable() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
