diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 129e9ae3f35..161b51b1018 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -415,7 +415,7 @@ public virtual void CopyFrom(ProjectElement element)
         }
 
         /// <summary>
-        /// Hook for subclasses to specify whether the given <param name="attribute"></param> should be cloned or not
+        /// Hook for subclasses to specify whether the given <paramref name="attribute"></param> should be cloned or not
         /// </summary>
         protected virtual bool ShouldCloneXmlAttribute(XmlAttribute attribute) => true;
 
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index b55ba655ff4..3c4c0d6f269 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -316,7 +316,7 @@ public void RemoveChild(ProjectElement child)
         /// </summary>
         /// <remarks>
         /// It is safe to modify the children in this way
-        /// during enumeration. See <cref see="RemoveChild">RemoveChild</cref>.
+        /// during enumeration. See <see cref="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
         /// </remarks>
         public void RemoveAllChildren()
         {
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 0a6df394738..8ff6c30c3bc 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -88,7 +88,7 @@ public class Project : ILinkableObject
         /// - <see cref="ProjectItem.SetMetadataValue(string,string)"/>
         /// - <see cref="ProjectItem.SetMetadataValue(string,string, bool)"/>
         ///
-        /// When this property is set to true, the previous item operations throw an <exception cref="InvalidOperationException"></exception>
+        /// When this property is set to true, the previous item operations throw an <see cref="InvalidOperationException"></exception>
         /// instead of expanding the item element.
         /// </summary>
         public bool ThrowInsteadOfSplittingItemElement
@@ -2406,7 +2406,7 @@ public override bool IsBuildEnabled
             /// their previously stored value to find out, and if so perhaps decide to update their own state.
             /// Note that the number may not increase monotonically.
             ///
-            /// This number corresponds to the <seealso cref="BuildEventContext.EvaluationId"/> and can be used to connect
+            /// This number corresponds to the <see cref="BuildEventContext.EvaluationId"/> and can be used to connect
             /// evaluation logging events back to the Project instance.
             /// </summary>
             public override int LastEvaluationId => _data.EvaluationId;
diff --git a/src/Framework/Sdk/SdkResolver.cs b/src/Framework/Sdk/SdkResolver.cs
index 9aafb5a84ff..71441a6942b 100644
--- a/src/Framework/Sdk/SdkResolver.cs
+++ b/src/Framework/Sdk/SdkResolver.cs
@@ -29,10 +29,11 @@ public abstract class SdkResolver
         ///     An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
         ///     the SDK could not be resolved.  Return <code>null</code> if the resolver is not
         ///     applicable for a particular <see cref="SdkReference"/>.
-        ///     <remarks>
-        ///         Note: You must use the <see cref="SdkResultFactory" /> to return a result.
-        ///     </remarks>
-        /// </returns>
+        ///  </returns>   
+        ///  <remarks>
+        ///    Note: You must use <xref:Microsoft.Build.Framework.SdkResultFactory> to return a result.
+        ///  </remarks>
+        /// 
         public abstract SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext,
             SdkResultFactory factory);
     }
diff --git a/src/Framework/Sdk/SdkResolverContext.cs b/src/Framework/Sdk/SdkResolverContext.cs
index df8c5f3f148..63e2f48482d 100644
--- a/src/Framework/Sdk/SdkResolverContext.cs
+++ b/src/Framework/Sdk/SdkResolverContext.cs
@@ -37,11 +37,11 @@ public abstract class SdkResolverContext
 
         /// <summary>
         ///     Version of MSBuild currently running.
+        /// </summary>
         /// <remarks>
         ///     File version based on commit height from our public git repository. This is informational
         ///     and not equal to the assembly version.
         /// </remarks>
-        /// </summary>
         public virtual Version MSBuildVersion { get; protected set; }
 
         /// <summary>
diff --git a/src/Framework/Sdk/SdkResult.cs b/src/Framework/Sdk/SdkResult.cs
index 12cf5db0eac..6352fb9d1d3 100644
--- a/src/Framework/Sdk/SdkResult.cs
+++ b/src/Framework/Sdk/SdkResult.cs
@@ -7,11 +7,15 @@ namespace Microsoft.Build.Framework
 {
     /// <summary>
     ///     An abstract interface class to indicate SDK resolver success or failure.
-    ///     <remarks>
-    ///         Note: Use <see cref="SdkResultFactory" /> to create instances of this class. Do not
-    ///         inherit from this class.
-    ///     </remarks>
     /// </summary>
+    /// <remarks>
+    ///   <format type="text/markdown"><![CDATA[
+    
+            ## Remarks
+            > [!NOTE]
+            > Use <xref:Microsoft.Build.Framework.SdkResultFactory> to create instances of this class. Do not inherit from this class.
+           ]]></format>
+    /// </remarks>
     public abstract class SdkResult
     {
         //  Explicit backing fields so that implementation in Microsoft.Build.dll can use them for translation
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index cb7bd833620..44021449491 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -31,14 +31,12 @@ public class CreateItem : TaskExtension
         /// A typical input: "metadataname1=metadatavalue1", "metadataname2=metadatavalue2", ...
         /// </summary>
         /// <remarks>
-        /// The fact that this is a string[] makes the following illegal:
-        ///     <CreateItem
-        ///         AdditionalMetadata="TargetPath=@(OutputPathItem)" />
-        /// The engine fails on this because it doesn't like item lists being concatenated with string
-        /// constants when the data is being passed into an array parameter.  So the workaround is to 
-        /// write this in the project file:
-        ///     <CreateItem
-        ///         AdditionalMetadata="@(OutputPathItem->'TargetPath=%(Identity)')" />
+        ///    The fact that this is a `string[]` makes the following illegal:
+        ///      `<CreateItem AdditionalMetadata="TargetPath=@(OutputPathItem)" />`
+        ///    The engine fails on this because it doesn't like item lists being concatenated with string
+        ///    constants when the data is being passed into an array parameter.  So the workaround is to 
+        ///    write this in the project file:
+        ///     `<CreateItem AdditionalMetadata="@(OutputPathItem-&gt;'TargetPath=%(Identity)')" />`
         /// </remarks>
         public string[] AdditionalMetadata { get; set; }
 
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index c822fa90f90..81699764e51 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -11,11 +11,11 @@ namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Generates a hash of a given ItemGroup items. Metadata is not considered in the hash.
+    /// </summary>
     /// <remarks>
     /// Currently uses SHA1. Implementation subject to change between MSBuild versions. Not
     /// intended as a cryptographic security measure, only uniqueness between build executions.
     /// </remarks>
-    /// </summary>
     public class Hash : TaskExtension
     {
         private const char ItemSeparatorCharacter = '\u2028';
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index 0d5fe24e603..3646a8f8419 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -55,14 +55,12 @@ private enum SkipNonexistentProjectsBehavior
         /// A typical input: "propname1=propvalue1", "propname2=propvalue2", "propname3=propvalue3".
         /// </summary>
         /// <remarks>
-        /// The fact that this is a string[] makes the following illegal:
-        ///     <MSBuild
-        ///         Properties="TargetPath=@(OutputPathItem)" />
-        /// The engine fails on this because it doesn't like item lists being concatenated with string
-        /// constants when the data is being passed into an array parameter.  So the workaround is to 
-        /// write this in the project file:
-        ///     <MSBuild
-        ///         Properties="@(OutputPathItem->'TargetPath=%(Identity)')" />
+        ///     The fact that this is a `string[]` makes the following illegal:
+        ///       `<MSBuild Properties="TargetPath=@(OutputPathItem)" />`
+        ///     The engine fails on this because it doesn't like item lists being concatenated with string
+        ///     constants when the data is being passed into an array parameter.  So the workaround is to 
+        ///     write this in the project file:
+        ///       `<MSBuild Properties="@(OutputPathItem-&gt;'TargetPath=%(Identity)')" />`
         /// </remarks>
         public string[] Properties { get; set; }
 
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index a6095129d51..bccf81d4269 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -1910,7 +1910,7 @@ public static IList<string> GetPathToReferenceAssemblies(string targetFrameworkI
         /// <param name="targetFrameworkVersion">Version being targeted</param>
         /// <param name="targetFrameworkProfile">Profile being targeted</param>
         /// <param name="targetFrameworkRootPath">Root directory which will be used to calculate the reference assembly path. The references assemblies will be
-        /// <param name="targetFrameworkFallbackSearchPaths">';' separated list of paths that are looked up if the framework cannot be found in @targetFrameworkRootPath</param>
+        /// <paramref name="targetFrameworkFallbackSearchPaths">';' separated list of paths that are looked up if the framework cannot be found in @targetFrameworkRootPath</param>
         /// generated in the following way TargetFrameworkRootPath\TargetFrameworkIdentifier\TargetFrameworkVersion\SubType\TargetFrameworkSubType.
         /// Uses the default path if this is null.
         /// </param>
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 7fb15a7f638..ec2d396bfc5 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -366,8 +366,9 @@ public static string EnsureFileTrackerOnPath(string rootPath)
         /// <summary>
         /// Searches %PATH% for the location of Tracker.exe, and returns the first 
         /// path that matches. 
-        /// <returns>Matching full path to Tracker.exe or null if a matching path is not found.</returns>
         /// </summary>
+        /// <returns>The full path to Tracker.exe, or <see langword="null" /> if a matching path is not found.</returns>
+        
         public static string FindTrackerOnPath()
         {
             string[] paths = Environment.GetEnvironmentVariable(pathEnvironmentVariableName).Split(pathSeparatorArray, StringSplitOptions.RemoveEmptyEntries);
