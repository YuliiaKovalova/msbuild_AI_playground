diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index b78001c5f3d..1ba99a4e48a 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -207,25 +207,26 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
 #if FEATURE_APM
                 IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
 #else
-                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();
+                Task<int> readTask = localStream.ReadAsync(headerByte.AsMemory(), CancellationToken.None).AsTask();
 #endif
 
-                bool continueReading = true;
-                do
-                {
-                    // Ordering of the wait handles is important. The first signalled wait handle in the array
-                    // will be returned by WaitAny if multiple wait handles are signalled. We prefer to have the
-                    // terminate event triggered so that we cannot get into a situation where packets are being
-                    // spammed to the client and it never gets an opportunity to shutdown.
-                    WaitHandle[] handles =
-                    [
-                        localPacketPumpShutdownEvent,
+                // Ordering of the wait handles is important. The first signalled wait handle in the array
+                // will be returned by WaitAny if multiple wait handles are signalled. We prefer to have the
+                // terminate event triggered so that we cannot get into a situation where packets are being
+                // spammed to the client and it never gets an opportunity to shutdown.
+                WaitHandle[] handles =
+                [
+                    localPacketPumpShutdownEvent,
 #if FEATURE_APM
-                        result.AsyncWaitHandle
+                    result.AsyncWaitHandle
 #else
-                        ((IAsyncResult)readTask).AsyncWaitHandle
+                    ((IAsyncResult)readTask).AsyncWaitHandle
 #endif
-                    ];
+                ];
+
+                bool continueReading = true;
+                do
+                {
                     int waitId = WaitHandle.WaitAny(handles);
                     switch (waitId)
                     {
@@ -242,7 +243,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
 #if FEATURE_APM
                                 headerBytesRead = localStream.EndRead(result);
 #else
-                                headerBytesRead = readTask.Result;
+                                headerBytesRead = readTask.ConfigureAwait(false).GetAwaiter().GetResult();
 #endif
 
                                 if ((headerBytesRead != headerByte.Length) && !localPacketPumpShutdownEvent.WaitOne(0))
@@ -275,7 +276,12 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
 
                                 while (packetBytesRead < packetLength)
                                 {
+#if FEATURE_APM
                                     int bytesRead = localStream.Read(packetData, packetBytesRead, packetLength - packetBytesRead);
+#else
+                                    ValueTask<int> bytesReadTask = localStream.ReadAsync(packetData.AsMemory(packetBytesRead, packetLength - packetBytesRead));
+                                    int bytesRead = bytesReadTask.IsCompleted ? bytesReadTask.Result : bytesReadTask.AsTask().ConfigureAwait(false).GetAwaiter().GetResult();;
+#endif
                                     if (bytesRead == 0)
                                     {
                                         // Incomplete read.  Abort.
@@ -305,8 +311,10 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                     // Start reading the next package header.
 #if FEATURE_APM
                                     result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);
+                                    handles[1] = result.AsyncWaitHandle;
 #else
-                                    readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();
+                                    readTask = localStream.ReadAsync(headerByte.AsMemory(), CancellationToken.None).AsTask();
+                                    handles[1] = ((IAsyncResult)readTask).AsyncWaitHandle;
 #endif
                                 }
                             }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 1064b2c709a..8e91f61ec94 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -651,7 +651,7 @@ public async Task RunPacketReadLoopAsync()
                 {
                     try
                     {
-                        int bytesRead = await CommunicationsUtilities.ReadAsync(_clientToServerStream, _headerByte, _headerByte.Length);
+                        int bytesRead = await _clientToServerStream.ReadAsync(_headerByte.AsMemory(), CancellationToken.None).ConfigureAwait(false);
                         if (!ProcessHeaderBytesRead(bytesRead))
                         {
                             return;
@@ -673,8 +673,19 @@ public async Task RunPacketReadLoopAsync()
 
                     try
                     {
-                        int bytesRead = await CommunicationsUtilities.ReadAsync(_clientToServerStream, packetData, packetLength);
-                        if (!ProcessBodyBytesRead(bytesRead, packetLength, packetType))
+                        int totalBytesRead = 0;
+                        while (totalBytesRead < packetLength)
+                        {
+                            int bytesRead = await _clientToServerStream.ReadAsync(packetData.AsMemory(totalBytesRead, packetLength - totalBytesRead), CancellationToken.None).ConfigureAwait(false);
+                            if (bytesRead == 0)
+                            {
+                                break;
+                            }
+
+                            totalBytesRead += bytesRead;
+                        }
+
+                        if (!ProcessBodyBytesRead(totalBytesRead, packetLength, packetType))
                         {
                             return;
                         }
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index fbaeb4dbde2..51a6327de8a 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -524,7 +524,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
 #if NET451_OR_GREATER
             Task<int> readTask = localReadPipe.ReadAsync(headerByte, 0, headerByte.Length, CancellationToken.None);
 #elif NETCOREAPP
-            Task<int> readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length).AsTask();
+            Task<int> readTask = localReadPipe.ReadAsync(headerByte.AsMemory(), CancellationToken.None).AsTask();
 #else
             IAsyncResult result = localReadPipe.BeginRead(headerByte, 0, headerByte.Length, null, null);
 #endif
@@ -554,7 +554,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             try
                             {
 #if NET451_OR_GREATER || NETCOREAPP
-                                bytesRead = readTask.Result;
+                                bytesRead = readTask.ConfigureAwait(false).GetAwaiter().GetResult();
 #else
                                 bytesRead = localReadPipe.EndRead(result);
 #endif
