diff --git a/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
index 4b2523f3b45..13ab48079a4 100644
--- a/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -119,9 +119,9 @@ public void ProjectLoadedStrippingCommentsAndWhiteSpaceIsReadOnly()
         }
 
         [Fact]
-        public void CreateNotDirtyCannotBeDirtied()
+        public void CreateEphemeralCannotBeDirtied()
         {
-            var projectRootElement = ProjectRootElement.CreateNotDirty(ProjectCollection.GlobalProjectCollection.ProjectRootElementCache);
+            var projectRootElement = ProjectRootElement.CreateEphemeral(ProjectCollection.GlobalProjectCollection.ProjectRootElementCache);
             var versionBeforeMarkDirty = projectRootElement.Version;
 
             projectRootElement.MarkDirty("test", "test");
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 1b8b9da0374..8cbb6b6ebe1 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -176,12 +176,12 @@ internal ProjectRootElement(XmlReader xmlReader, ProjectRootElementCacheBase pro
             ProjectParser.Parse(document, this);
         }
 
-        private readonly bool _cannotBeDirtied = false;
+        private readonly bool _isEphemeral = false;
 
-        private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache, NewProjectFileOptions projectFileOptions, bool canBeDirty)
+        private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache, NewProjectFileOptions projectFileOptions, bool isEphemeral)
             : this(projectRootElementCache, projectFileOptions)
         {
-            _cannotBeDirtied = canBeDirty;
+            _isEphemeral = isEphemeral;
         }
 
         /// <summary>
@@ -721,15 +721,15 @@ internal string LastDirtyReason
             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);
 
         /// <summary>
-        /// Initialize an in-memory, empty ProjectRootElement instance that CANNOT be saved later.
+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.
         /// The ProjectRootElement will not be marked dirty.
         /// Uses the global project collection.
         /// </summary>
-        internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase projectRootElementCache)
+        internal static ProjectRootElement CreateEphemeral(ProjectRootElementCacheBase projectRootElementCache)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectRootElementCache);
 
-            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, true);
+            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, isEphemeral: true);
         }
 
         /// <summary>
@@ -1837,7 +1837,7 @@ internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElem
         /// </remarks>
         internal sealed override void MarkDirty(string reason, string param)
         {
-            if (_cannotBeDirtied)
+            if (_isEphemeral)
             {
                 return;
             }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 90c45cbe0af..f2b0b2839c3 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1917,7 +1917,7 @@ private ProjectRootElement CreateProjectForSdkResult(SdkResult sdkResult)
 
             ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
             {
-                ProjectRootElement project = ProjectRootElement.CreateNotDirty(_projectRootElementCache);
+                ProjectRootElement project = ProjectRootElement.CreateEphemeral(_projectRootElementCache);
                 project.FullPath = projectPath;
 
                 if (sdkResult.PropertiesToAdd?.Any() == true)
