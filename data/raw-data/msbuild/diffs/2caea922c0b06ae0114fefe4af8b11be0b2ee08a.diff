diff --git a/src/MSBuild.UnitTests/MockTerminal.cs b/src/MSBuild.UnitTests/MockTerminal.cs
index 61311703bfb..915a1e15c8b 100644
--- a/src/MSBuild.UnitTests/MockTerminal.cs
+++ b/src/MSBuild.UnitTests/MockTerminal.cs
@@ -96,13 +96,13 @@ public void EndUpdate()
         }
 
         public void Write(string text) => AddOutput(text);
+        public void Write(ReadOnlySpan<char> text) { AddOutput(text.ToString()); }
         public void WriteColor(TerminalColor color, string text) => AddOutput(text);
         public void WriteColorLine(TerminalColor color, string text) { AddOutput(text); AddOutput("\n"); }
         public void WriteLine(string text) { AddOutput(text); AddOutput("\n"); }
-        public void WriteLine(ReadOnlySpan<char> text) { AddOutput(text.ToString()); AddOutput("\n"); }
-        public void WriteLineFitToWidth(ReadOnlySpan<char> input)
+        public void WriteLineFitToWidth(ReadOnlySpan<char> text)
         {
-            AddOutput(input.Slice(0, Math.Min(input.Length, _width - 1)).ToString());
+            AddOutput(text.Slice(0, Math.Min(text.Length, _width - 1)).ToString());
             AddOutput("\n");
         }
 
diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
index 4fc2ccae0c4..6a2f1e67faa 100644
--- a/src/MSBuild/LiveLogger/ITerminal.cs
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -41,18 +41,18 @@ internal interface ITerminal : IDisposable
     /// <summary>
     /// Writes a string to the output. Or buffers it if <see cref="BeginUpdate"/> was called.
     /// </summary>
-    void WriteLine(string text);
+    void Write(ReadOnlySpan<char> text);
 
     /// <summary>
     /// Writes a string to the output. Or buffers it if <see cref="BeginUpdate"/> was called.
     /// </summary>
-    void WriteLine(ReadOnlySpan<char> text);
+    void WriteLine(string text);
 
     /// <summary>
     /// Writes a string to the output, truncating it if it wouldn't fit on one screen line.
     /// Or buffers it if <see cref="BeginUpdate"/> was called.
     /// </summary>
-    void WriteLineFitToWidth(ReadOnlySpan<char> input);
+    void WriteLineFitToWidth(ReadOnlySpan<char> text);
 
     /// <summary>
     /// Writes a string to the output using the given color. Or buffers it if <see cref="BeginUpdate"/> was called.
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index d3028ac811c..2b2b124f391 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -325,7 +325,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
                     if (e.ProjectFile is not null)
                     {
-                        string projectFile = Path.GetFileName(e.ProjectFile);
+                        ReadOnlySpan<char> projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile.AsSpan());
                         Terminal.Write(projectFile);
                         Terminal.Write(" ");
                     }
@@ -398,7 +398,7 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
         {
             project.Stopwatch.Start();
 
-            string projectFile = Path.GetFileName(e.ProjectFile);
+            string projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile);
             NodeStatus nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
             lock (_lock)
             {
@@ -522,7 +522,7 @@ private void DisplayNodes()
     {
         NodesFrame newFrame = new NodesFrame(_nodes, width: Terminal.Width, height: Terminal.Height);
 
-        // Do not render delta but clear everything is Terminal width or height have changed
+        // Do not render delta but clear everything if Terminal width or height have changed.
         if (newFrame.Width != _currentFrame.Width || newFrame.Height != _currentFrame.Height)
         {
             EraseNodes();
@@ -534,7 +534,7 @@ private void DisplayNodes()
         Terminal.Write(AnsiCodes.HideCursor);
         try
         {
-            // Move cursor back to 1st line of nodes
+            // Move cursor back to 1st line of nodes.
             Terminal.WriteLine($"{AnsiCodes.CSI}{_currentFrame.NodesCount + 1}{AnsiCodes.MoveUpToLineStart}");
             Terminal.Write(rendered);
         }
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index 08f1b3cf39a..7335b60d40f 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -75,36 +75,44 @@ public void Write(string text)
     }
 
     /// <inheritdoc/>
-    public void WriteLine(string text)
+    public void Write(ReadOnlySpan<char> text)
     {
         if (_isBuffering)
         {
-            _outputBuilder.AppendLine(text);
+            _outputBuilder.Append(text);
         }
         else
         {
-            Console.WriteLine(text);
+            Console.Out.Write(text);
         }
     }
 
     /// <inheritdoc/>
-    public void WriteLine(ReadOnlySpan<char> text)
+    public void WriteLine(string text)
     {
         if (_isBuffering)
         {
-            _outputBuilder.Append(text);
-            _outputBuilder.AppendLine();
+            _outputBuilder.AppendLine(text);
         }
         else
         {
-            Console.Out.WriteLine(text);
+            Console.WriteLine(text);
         }
     }
 
     /// <inheritdoc/>
-    public void WriteLineFitToWidth(ReadOnlySpan<char> input)
+    public void WriteLineFitToWidth(ReadOnlySpan<char> text)
     {
-        WriteLine(input.Slice(0, Math.Min(input.Length, Width - 1)));
+        ReadOnlySpan<char> truncatedText = text.Slice(0, Math.Min(text.Length, Width - 1));
+        if (_isBuffering)
+        {
+            _outputBuilder.Append(truncatedText);
+            _outputBuilder.AppendLine();
+        }
+        else
+        {
+            Console.Out.WriteLine(truncatedText);
+        }
     }
 
     /// <inheritdoc/>
