diff --git a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
index 2d7464db54c..00a20b88810 100644
--- a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Xml;
 using Microsoft.Build.BackEnd.SdkResolution;
@@ -11,6 +12,7 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Unittest;
 using Shouldly;
 using Xunit;
@@ -169,6 +171,7 @@ public void DefaultContextIsIsolatedContext()
                 EvaluationContext.TestOnlyHookOnCreate = null;
             }
         }
+
         public static IEnumerable<object> ContextPinsGlobExpansionCacheData
         {
             get
@@ -220,8 +223,6 @@ public void ContextCachesItemElementGlobExpansions(EvaluationContext.SharingPoli
         {
             var projectDirectory = _env.DefaultTestDirectory.FolderPath;
 
-            _env.SetCurrentDirectory(projectDirectory);
-
             var context = EvaluationContext.Create(policy);
 
             var evaluationCount = 0;
@@ -243,6 +244,93 @@ public void ContextCachesItemElementGlobExpansions(EvaluationContext.SharingPoli
                 );
         }
 
+        private static string[] _projectsWithOutOfConeGlobs =
+        {
+            @"<Project>
+                <ItemGroup>
+                    <i Include=`{0}**/*.cs` />
+                </ItemGroup>
+            </Project>",
+
+            @"<Project>
+                <ItemGroup>
+                    <i Include=`{0}**/*.cs` />
+                </ItemGroup>
+            </Project>",
+        };
+
+        public static IEnumerable<object> ContextCachesCommonOutOfProjectConeGlobData
+        {
+            get
+            {
+                // combine the globbing test data with another bool for relative / absolute itemspecs
+                foreach (var itemSpecPathIsRelative in new []{true, false})
+                {
+                    foreach (var globData in ContextPinsGlobExpansionCacheData)
+                    {
+                        object[] globDataArray = (object[]) globData;
+
+                        yield return new[]
+                        {
+                            itemSpecPathIsRelative,
+                            globDataArray[0],
+                            globDataArray[1],
+                        };
+                    }
+                }
+            }
+        }
+
+        [Theory]
+        [MemberData(nameof(ContextCachesCommonOutOfProjectConeGlobData))]
+        // projects should cache glob expansions when the glob is shared between projects and points outside of project cone
+        public void ContextCachesCommonOutOfProjectConeGlob(bool itemSpecPathIsRelative, EvaluationContext.SharingPolicy policy, string[][] expectedGlobExpansions)
+        {
+            var testDirectory = _env.DefaultTestDirectory.FolderPath;
+            var globDirectory = Path.Combine(testDirectory, "GlobDirectory");
+
+            var itemSpecDirectoryPart = itemSpecPathIsRelative
+                ? Path.Combine("..", "GlobDirectory")
+                : globDirectory;
+
+            itemSpecDirectoryPart = itemSpecDirectoryPart.WithTrailingSlash();
+
+            Directory.CreateDirectory(globDirectory);
+
+            // Globs with a directory part will produce items prepended with that directory part
+            foreach (var globExpansion in expectedGlobExpansions)
+            {
+                for (var i = 0; i < globExpansion.Length; i++)
+                {
+                    globExpansion[i] = Path.Combine(itemSpecDirectoryPart, globExpansion[i]);
+                }
+            }
+
+            var projectSpecs = _projectsWithOutOfConeGlobs
+                .Select(p => string.Format(p, itemSpecDirectoryPart))
+                .Select((p ,i) => (Path.Combine(testDirectory, $"ProjectDirectory{i}", $"Project{i}.proj"), p));
+
+            var context = EvaluationContext.Create(policy);
+
+            var evaluationCount = 0;
+
+            File.WriteAllText(Path.Combine(globDirectory, $"{evaluationCount}.cs"), "");
+
+            EvaluateProjects(
+                projectSpecs,
+                context,
+                project =>
+                {
+                    var expectedGlobExpansion = expectedGlobExpansions[evaluationCount];
+                    evaluationCount++;
+
+                    File.WriteAllText(Path.Combine(globDirectory, $"{evaluationCount}.cs"), "");
+
+                    ObjectModelHelpers.AssertItems(expectedGlobExpansion, project.GetItems("i"));
+                }
+                );
+        }
+
         private static string[] _projectsWithGlobImports =
         {
             @"<Project>
@@ -260,8 +348,6 @@ public void ContextCachesImportGlobExpansions(EvaluationContext.SharingPolicy po
         {
             var projectDirectory = _env.DefaultTestDirectory.FolderPath;
 
-            _env.SetCurrentDirectory(projectDirectory);
-
             var context = EvaluationContext.Create(policy);
 
             var evaluationCount = 0;
@@ -305,8 +391,6 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
         {
             var projectDirectory = _env.DefaultTestDirectory.FolderPath;
 
-            _env.SetCurrentDirectory(projectDirectory);
-
             var context = EvaluationContext.Create(policy);
 
             var theFile = Path.Combine(projectDirectory, "0.cs");
@@ -346,19 +430,30 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
                 );
         }
 
+        private void EvaluateProjects(IEnumerable<string> projectContents, EvaluationContext context, Action<Project> afterEvaluationAction)
+        {
+            EvaluateProjects(
+                projectContents.Select((p, i) => (Path.Combine(_env.DefaultTestDirectory.FolderPath, $"Project{i}.proj"), p)),
+                context,
+                afterEvaluationAction);
+        }
+
         /// <summary>
         /// Should be at least two test projects to test cache visibility between projects
         /// </summary>
-        private void EvaluateProjects(string[] projectContents, EvaluationContext context, Action<Project> afterEvaluationAction)
+        private void EvaluateProjects(IEnumerable<(string ProjectPath, string ProjectContents)> projectSpecs, EvaluationContext context, Action<Project> afterEvaluationAction)
         {
             var collection = _env.CreateProjectCollection().Collection;
 
-            var projects = new List<Project>(projectContents.Length);
+            var projects = new List<Project>();
 
-            foreach (var projectContent in projectContents)
+            foreach (var spec in projectSpecs)
             {
-                var project = Project.FromXmlReader(
-                    XmlReader.Create(new StringReader(projectContent.Cleanup())),
+                Directory.CreateDirectory(Path.GetDirectoryName(spec.ProjectPath));
+                File.WriteAllText(spec.ProjectPath, spec.ProjectContents.Cleanup());
+
+                var project = Project.FromFile(
+                    spec.ProjectPath,
                     new ProjectOptions
                     {
                         ProjectCollection = collection,
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index f25afb97865..2aa18bbb14e 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -50,7 +50,7 @@ public bool IsMatch(string fileToMatch)
         // this method parses the glob and extracts the fixed directory part in order to normalize it and make it absolute
         // without this normalization step, strings pointing outside the globbing cone would still match when they shouldn't
         // for example, we dont want "**/*.cs" to match "../Shared/Foo.cs"
-        // todo: glob rooting partially duplicated with MSBuildGlob.Parse
+        // todo: glob rooting knowledge partially duplicated with MSBuildGlob.Parse and FileMatcher.ComputeFileEnumerationCacheKey
         private static Regex CreateRegex(string unescapedFileSpec, string currentDirectory)
         {
             Regex regex = null;
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 530a3208658..fe6eef94574 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -1782,9 +1782,27 @@ internal string[] GetFiles
 
         private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnescaped, string filespecUnescaped, IEnumerable<string> excludes)
         {
+            Debug.Assert(projectDirectoryUnescaped != null);
+            Debug.Assert(filespecUnescaped != null);
+
             var sb = new StringBuilder();
 
-            sb.Append(projectDirectoryUnescaped);
+            if (filespecUnescaped.Contains("..", StringComparison.Ordinal))
+            {
+                filespecUnescaped = FileUtilities.GetFullPathNoThrow(filespecUnescaped);
+            }
+
+            var filespecIsAnAbsoluteGlobPointingOutsideOfProjectCone =
+                Path.IsPathRooted(filespecUnescaped) &&
+                !filespecUnescaped.StartsWith(projectDirectoryUnescaped, StringComparison.OrdinalIgnoreCase);
+
+            // If we include the project directory when the filespec does not depend on it we'll get cache misses
+            // when the project directory independent glob repeats for each project.
+            if (!filespecIsAnAbsoluteGlobPointingOutsideOfProjectCone)
+            {
+                sb.Append(projectDirectoryUnescaped);
+            }
+
             sb.Append(filespecUnescaped);
 
             if (excludes != null)
