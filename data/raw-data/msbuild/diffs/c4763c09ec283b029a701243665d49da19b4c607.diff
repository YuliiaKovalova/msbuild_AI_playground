diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 8c78c47c3c2..0d6a295763f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -3333,28 +3333,15 @@ public void UpdateAndRemoveShouldUseCaseInsensitiveMatching()
 
             IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(content);
 
-            if (FileUtilities.GetIsFileSystemCaseSensitive())
-            {
-                var expectedUpdated = new Dictionary<string, string>
-                {
-                    {"m1", "m1_contents"},
-                    {"m2", "m2_contents"},
-                };
+            items.ShouldHaveSingleItem();
 
-                ObjectModelHelpers.AssertItemHasMetadata(expectedUpdated, items[0]);
-            }
-            else
+            var expectedUpdated = new Dictionary<string, string>
             {
-                items.ShouldHaveSingleItem();
-
-                var expectedUpdated = new Dictionary<string, string>
-                {
-                    {"m1", "m1_updated"},
-                    {"m2", "m2_updated"},
-                };
+                {"m1", "m1_updated"},
+                {"m2", "m2_updated"},
+            };
 
-                ObjectModelHelpers.AssertItemHasMetadata(expectedUpdated, items[0]);
-            }
+            ObjectModelHelpers.AssertItemHasMetadata(expectedUpdated, items[0]);
         }
 
         public static IEnumerable<Object[]> UpdateAndRemoveShouldWorkWithEscapedCharactersTestData
