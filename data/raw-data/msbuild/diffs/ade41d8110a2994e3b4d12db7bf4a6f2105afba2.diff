diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index ebae37eadc4..db6aed18321 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -2569,6 +2569,137 @@ public void RemoveMetadata(string metadataName) { }
         public void SetMetadata(string metadataName, string metadataValue) { }
         public void SetMetadataValueLiteral(string metadataName, string metadataValue) { }
     }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceRequest
+    {
+        public ResolveAssemblyReferenceRequest() { }
+        [MessagePack.KeyAttribute(0)]
+        public string[] AllowedAssemblyExtensions { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public string[] AllowedRelatedFileExtensions { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public string AppConfigFile { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] Assemblies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(4)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] AssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public bool AutoUnify { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public string[] CandidateAssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(7)]
+        public bool CopyLocalDependenciesWhenParentReferenceInGac { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(8)]
+        public bool DoNotCopyLocalIfInGac { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(9)]
+        public bool FindDependencies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(10)]
+        public bool FindDependenciesOfExternallyResolvedReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(11)]
+        public bool FindRelatedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(12)]
+        public bool FindSatellites { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(13)]
+        public bool FindSerializationAssemblies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(14)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] FullFrameworkAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(15)]
+        public string[] FullFrameworkFolders { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(16)]
+        public string[] FullTargetFrameworkSubsetNames { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(17)]
+        public bool IgnoreDefaultInstalledAssemblySubsetTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(18)]
+        public bool IgnoreDefaultInstalledAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(19)]
+        public bool IgnoreTargetFrameworkAttributeVersionMismatch { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(20)]
+        public bool IgnoreVersionForFrameworkReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(21)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] InstalledAssemblySubsetTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(22)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] InstalledAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(23)]
+        public string[] LatestTargetFrameworkDirectories { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(24)]
+        public string ProfileName { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(25)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedSDKReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(26)]
+        public string[] SearchPaths { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(27)]
+        public bool Silent { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(28)]
+        public string StateFile { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(29)]
+        public bool SupportsBindingRedirectGeneration { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(30)]
+        public string TargetedRuntimeVersion { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(31)]
+        public string[] TargetFrameworkDirectories { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(32)]
+        public string TargetFrameworkMoniker { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(33)]
+        public string TargetFrameworkMonikerDisplayName { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(34)]
+        public string[] TargetFrameworkSubsets { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(35)]
+        public string TargetFrameworkVersion { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(36)]
+        public string TargetProcessorArchitecture { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(37)]
+        public bool UnresolveFrameworkAssembliesFromHigherFrameworks { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(38)]
+        public bool UseResolveAssemblyReferenceService { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(39)]
+        public string WarnOrErrorOnTargetArchitectureMismatch { get { throw null; } set { } }
+    }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceResponse
+    {
+        public ResolveAssemblyReferenceResponse() { }
+        [MessagePack.KeyAttribute(0)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] CopyLocalFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public string DependsOnNETStandard { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public string DependsOnSystemRuntime { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] FilesWritten { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(4)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] RelatedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedDependencyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(7)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SatelliteFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(8)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ScatterFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(9)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SerializationAssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(10)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SuggestedRedirects { get { throw null; } set { } }
+    }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceResult
+    {
+        public ResolveAssemblyReferenceResult() { }
+        [MessagePack.KeyAttribute(4)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildErrorEventArgs> BuildErrorEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildMessageEventArgs> BuildMessageEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildWarningEventArgs> BuildWarningEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.CustomBuildEventArgs> CustomBuildEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public int EventCount { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResponse Response { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(0)]
+        public bool TaskResult { get { throw null; } set { } }
+    }
 }
 namespace Microsoft.Build.Tasks.Xaml
 {
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 8b03db9724b..c8536898736 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -2191,6 +2191,137 @@ public void RemoveMetadata(string metadataName) { }
         public void SetMetadata(string metadataName, string metadataValue) { }
         public void SetMetadataValueLiteral(string metadataName, string metadataValue) { }
     }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceRequest
+    {
+        public ResolveAssemblyReferenceRequest() { }
+        [MessagePack.KeyAttribute(0)]
+        public string[] AllowedAssemblyExtensions { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public string[] AllowedRelatedFileExtensions { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public string AppConfigFile { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] Assemblies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(4)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] AssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public bool AutoUnify { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public string[] CandidateAssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(7)]
+        public bool CopyLocalDependenciesWhenParentReferenceInGac { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(8)]
+        public bool DoNotCopyLocalIfInGac { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(9)]
+        public bool FindDependencies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(10)]
+        public bool FindDependenciesOfExternallyResolvedReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(11)]
+        public bool FindRelatedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(12)]
+        public bool FindSatellites { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(13)]
+        public bool FindSerializationAssemblies { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(14)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] FullFrameworkAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(15)]
+        public string[] FullFrameworkFolders { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(16)]
+        public string[] FullTargetFrameworkSubsetNames { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(17)]
+        public bool IgnoreDefaultInstalledAssemblySubsetTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(18)]
+        public bool IgnoreDefaultInstalledAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(19)]
+        public bool IgnoreTargetFrameworkAttributeVersionMismatch { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(20)]
+        public bool IgnoreVersionForFrameworkReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(21)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] InstalledAssemblySubsetTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(22)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] InstalledAssemblyTables { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(23)]
+        public string[] LatestTargetFrameworkDirectories { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(24)]
+        public string ProfileName { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(25)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedSDKReferences { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(26)]
+        public string[] SearchPaths { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(27)]
+        public bool Silent { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(28)]
+        public string StateFile { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(29)]
+        public bool SupportsBindingRedirectGeneration { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(30)]
+        public string TargetedRuntimeVersion { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(31)]
+        public string[] TargetFrameworkDirectories { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(32)]
+        public string TargetFrameworkMoniker { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(33)]
+        public string TargetFrameworkMonikerDisplayName { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(34)]
+        public string[] TargetFrameworkSubsets { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(35)]
+        public string TargetFrameworkVersion { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(36)]
+        public string TargetProcessorArchitecture { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(37)]
+        public bool UnresolveFrameworkAssembliesFromHigherFrameworks { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(38)]
+        public bool UseResolveAssemblyReferenceService { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(39)]
+        public string WarnOrErrorOnTargetArchitectureMismatch { get { throw null; } set { } }
+    }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceResponse
+    {
+        public ResolveAssemblyReferenceResponse() { }
+        [MessagePack.KeyAttribute(0)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] CopyLocalFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public string DependsOnNETStandard { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public string DependsOnSystemRuntime { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] FilesWritten { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(4)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] RelatedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedDependencyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ResolvedFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(7)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SatelliteFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(8)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] ScatterFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(9)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SerializationAssemblyFiles { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(10)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem[] SuggestedRedirects { get { throw null; } set { } }
+    }
+    [MessagePack.MessagePackObjectAttribute(false)]
+    public sealed partial class ResolveAssemblyReferenceResult
+    {
+        public ResolveAssemblyReferenceResult() { }
+        [MessagePack.KeyAttribute(4)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildErrorEventArgs> BuildErrorEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(5)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildMessageEventArgs> BuildMessageEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(6)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.BuildWarningEventArgs> BuildWarningEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(3)]
+        public System.Collections.Generic.List<Microsoft.Build.Framework.CustomBuildEventArgs> CustomBuildEvents { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(2)]
+        public int EventCount { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(1)]
+        public Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ResolveAssemblyReferenceResponse Response { get { throw null; } set { } }
+        [MessagePack.KeyAttribute(0)]
+        public bool TaskResult { get { throw null; } set { } }
+    }
 }
 namespace System.Deployment.Internal.CodeSigning
 {
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
index 461cfe62970..aa78c3fc168 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ResolveAssemblyReferenceResponse.cs
@@ -6,7 +6,7 @@
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract
 {
     [MessagePackObject]
-    internal sealed class ResolveAssemblyReferenceResponse
+    public sealed class ResolveAssemblyReferenceResponse
     {
         public ResolveAssemblyReferenceResponse()
         {
