diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index ffd2b33a2ed..068860bc74b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1070,6 +1070,8 @@ public void EndBuild()
                             }
                             _buildTelemetry.Host = host;
 
+                            _buildTelemetry.BuildCheckEnabled = _buildParameters!.IsBuildCheckEnabled;
+
                             loggingService.LogTelemetry(buildEventContext: null, _buildTelemetry.EventName, _buildTelemetry.GetProperties());
                             // Clean telemetry to make it ready for next build submission.
                             _buildTelemetry = null;
diff --git a/src/Framework/Telemetry/BuildTelemetry.cs b/src/Framework/Telemetry/BuildTelemetry.cs
index 7e2e0c6b514..166376f9d0c 100644
--- a/src/Framework/Telemetry/BuildTelemetry.cs
+++ b/src/Framework/Telemetry/BuildTelemetry.cs
@@ -74,6 +74,11 @@ internal class BuildTelemetry : TelemetryBase
         /// </summary>
         public string? Host { get; set; }
 
+        /// <summary>
+        /// True if buildcheck was used.
+        /// </summary>
+        public bool? BuildCheckEnabled { get; set; }
+
         /// <summary>
         /// State of MSBuild server process before this build.
         /// One of 'cold', 'hot', null (if not run as server)
@@ -145,6 +150,11 @@ public override IDictionary<string, string> GetProperties()
                 properties["BuildEngineVersion"] = Version.ToString();
             }
 
+            if (BuildCheckEnabled != null)
+            {
+                properties["BuildCheckEnabled"] = BuildCheckEnabled.Value.ToString(CultureInfo.InvariantCulture);
+            }
+
             return properties;
         }
     }
diff --git a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
index 0b54fe58139..493a945a526 100644
--- a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
+++ b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
@@ -16,11 +16,6 @@ internal class LoggingConfigurationTelemetry : TelemetryBase
     /// </summary>
     public bool TerminalLogger { get; set; }
 
-    /// <summary>
-    /// True if buildcheck was used.
-    /// </summary>
-    public bool BuildCheckEnabled { get; set; }
-
     /// <summary>
     /// What was user intent:
     ///   on | true -> user intent to enable logging
@@ -109,7 +104,6 @@ public override IDictionary<string, string> GetProperties()
 
         // populate property values
         properties["TerminalLogger"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);
-        properties["BuildCheckEnabled"] = BuildCheckEnabled.ToString(CultureInfo.InvariantCulture);
 
         if (TerminalLoggerUserIntent != null)
         {
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 7335ecbf171..8411c5408ba 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2797,7 +2797,7 @@ private static bool IsBuildCheckEnabled(CommandLineSwitches commandLineSwitches)
         {
             // Opt-in behavior to be determined by: https://github.com/dotnet/msbuild/issues/9723
             bool isBuildCheckEnabled = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Check);
-            return KnownTelemetry.LoggingConfigurationTelemetry.BuildCheckEnabled = isBuildCheckEnabled;
+            return isBuildCheckEnabled;
         }
 
         private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches commandLineSwitches, out string aggregatedParameters)
