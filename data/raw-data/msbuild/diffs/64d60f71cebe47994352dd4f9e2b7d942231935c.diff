diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index 5665b1aaf09..1a58f901f2c 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -41,6 +41,13 @@ internal class ToolsetConfigurationReader : ToolsetReader
         /// </summary>
         private static readonly char[] s_separatorForExtensionsPathSearchPaths = MSBuildConstants.SemicolonChar;
 
+        /// <summary>
+        /// Caching MSBuild exe configuration.
+        /// Used only by ReadApplicationConfiguration factory function (default) as oppose to unit tests config factory functions
+        /// which must not cache configs.
+        /// </summary>
+        private static readonly Lazy<Configuration> s_configurationCache = new Lazy<Configuration>(ReadOpenMappedExeConfiguration);
+
         /// <summary>
         /// Cached values of tools version -> project import search paths table
         /// </summary>
@@ -250,6 +257,18 @@ private Dictionary<string, ProjectImportPathMatch> ComputeDistinctListOfSearchPa
         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.
         /// </summary>
         private static Configuration ReadApplicationConfiguration()
+        {
+            if (Environment.GetEnvironmentVariable("MSBUILDCACHETOOLSETCONFIGURATION") != "0")
+            {
+                return s_configurationCache.Value;
+            }
+            else
+            {
+                return ReadOpenMappedExeConfiguration();
+            }
+        }
+
+        private static Configuration ReadOpenMappedExeConfiguration()
         {
             // When running from the command-line or from VS, use the msbuild.exe.config file.
             if (BuildEnvironmentHelper.Instance.Mode != BuildEnvironmentMode.None &&
diff --git a/src/Shared/ToolsetElement.cs b/src/Shared/ToolsetElement.cs
index ff7d9685aa7..f0be18719f4 100644
--- a/src/Shared/ToolsetElement.cs
+++ b/src/Shared/ToolsetElement.cs
@@ -15,7 +15,49 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal static class ToolsetConfigurationReaderHelpers
     {
+        /// <summary>
+        /// Lock for process wide ToolsetConfigurationSection section cache
+        /// </summary>
+        private static readonly object s_syncLock = new();
+
+        /// <summary>
+        /// Process wide ToolsetConfigurationSection section cache
+        /// </summary>
+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;
+        private static Configuration s_configurationOfCachedSection;
+
         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)
+        {
+            if (Environment.GetEnvironmentVariable("MSBUILDCACHETOOLSETCONFIGURATION") != "0")
+            {
+                if (configuration == null)
+                {
+                    return null;
+                }
+
+                lock (s_syncLock)
+                {
+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.
+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,
+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.
+                    if (s_toolsetConfigurationSectionCache == null)
+                    {
+                        s_toolsetConfigurationSectionCache = GetToolsetConfigurationSection(configuration);
+                        s_configurationOfCachedSection = configuration;
+                    }
+
+                    return s_configurationOfCachedSection == configuration ?
+                        s_toolsetConfigurationSectionCache :
+                        GetToolsetConfigurationSection(configuration);
+                }
+            }
+            else
+            {
+                return GetToolsetConfigurationSection(configuration);
+            }
+        }
+
+        private static ToolsetConfigurationSection GetToolsetConfigurationSection(Configuration configuration)
         {
             ToolsetConfigurationSection configurationSection = null;
 
