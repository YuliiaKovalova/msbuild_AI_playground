diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
new file mode 100644
index 00000000000..d781972856c
--- /dev/null
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -0,0 +1,17 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Logging.LiveLogger;
+
+internal interface ITerminal : IDisposable
+{
+    void Write(string text);
+
+    void WriteLine(string text);
+
+    void WriteLine(ReadOnlySpan<char> text);
+
+    void WriteLineFitToWidth(ReadOnlySpan<char> input);
+}
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 1deaf2d2230..b0e4f336ad9 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -5,7 +5,6 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.IO;
-using System.Text;
 using System.Threading;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -36,7 +35,8 @@ internal sealed class LiveLogger : INodeLogger
 
     private readonly List<string> _nodeStringBuffer = new();
 
-    private Encoding? _originalOutputEncoding;
+    private ITerminal? _terminal;
+    private ITerminal Terminal => _terminal! ?? throw new InvalidOperationException();
 
     public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
     public string Parameters { get => ""; set { } }
@@ -61,6 +61,14 @@ internal sealed class LiveLogger : INodeLogger
             "ERROREVENT"
     };
 
+    public LiveLogger()
+    { }
+
+    public LiveLogger(ITerminal terminal)
+    {
+        _terminal = terminal;
+    }
+
     public void Initialize(IEventSource eventSource, int nodeCount)
     {
         _nodes = new NodeStatus[nodeCount];
@@ -82,8 +90,7 @@ public void Initialize(IEventSource eventSource)
         eventSource.WarningRaised += new BuildWarningEventHandler(WarningRaised);
         eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorRaised);
 
-        _originalOutputEncoding = Console.OutputEncoding;
-        Console.OutputEncoding = Encoding.UTF8;
+        _terminal ??= new Terminal();
 
         _refresher = new Thread(ThreadProc);
         _refresher.Start();
@@ -138,7 +145,7 @@ private void ProjectStarted(object sender, ProjectStartedEventArgs e)
         if (e.TargetNames == "Restore")
         {
             _restoreContext = c;
-            Console.WriteLine("Restoring");
+            Terminal.WriteLine("Restoring");
             return;
         }
 
@@ -186,9 +193,9 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
                 UpdateNodeStringBuffer();
                 EraseNodes();
-                Console.WriteLine($"\x1b[{_usedNodes + 1}F");
-                Console.Write($"\x1b[0J");
-                Console.WriteLine($"Restore complete ({duration:F1}s)");
+                Terminal.WriteLine($"\x1b[{_usedNodes + 1}F");
+                Terminal.Write($"\x1b[0J");
+                Terminal.WriteLine($"Restore complete ({duration:F1}s)");
                 DisplayNodes();
                 return;
             }
@@ -215,11 +222,11 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                     }
                     catch
                     { }
-                    Console.WriteLine($"{e.ProjectFile} \x1b[1mcompleted\x1b[22m ({duration:F1}s) → \x1b]8;;{url}\x1b\\{outputPath}\x1b]8;;\x1b\\");
+                    Terminal.WriteLine($"{e.ProjectFile} \x1b[1mcompleted\x1b[22m ({duration:F1}s) → \x1b]8;;{url}\x1b\\{outputPath}\x1b]8;;\x1b\\");
                 }
                 else
                 {
-                    Console.WriteLine($"{e.ProjectFile} \x1b[1mcompleted\x1b[22m ({duration:F1}s)");
+                    Terminal.WriteLine($"{e.ProjectFile} \x1b[1mcompleted\x1b[22m ({duration:F1}s)");
                 }
 
                 // Print diagnostic output under the Project -> Output line.
@@ -227,7 +234,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 {
                     foreach (string message in project.BuildMessages)
                     {
-                        Console.WriteLine(message);
+                        Terminal.WriteLine(message);
                     }
                 }
 
@@ -278,24 +285,19 @@ private void DisplayNodes()
     {
         foreach (string str in _nodeStringBuffer)
         {
-            Console.Out.WriteLine(FitToWidth(str));
+            Terminal.WriteLineFitToWidth(str);
         }
         _usedNodes = _nodeStringBuffer.Count;
     }
 
-    private ReadOnlySpan<char> FitToWidth(ReadOnlySpan<char> input)
-    {
-        return input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1));
-    }
-
     private void EraseNodes()
     {
         if (_usedNodes == 0)
         {
             return;
         }
-        Console.WriteLine($"\x1b[{_usedNodes + 1}F");
-        Console.Write($"\x1b[0J");
+        Terminal.WriteLine($"\x1b[{_usedNodes + 1}F");
+        Terminal.Write($"\x1b[0J");
     }
 
     private void TargetStarted(object sender, TargetStartedEventArgs e)
@@ -379,10 +381,8 @@ public void Shutdown()
         _cts.Cancel();
         _refresher?.Join();
 
-        if (_originalOutputEncoding is not null)
-        {
-            Console.OutputEncoding = _originalOutputEncoding;
-        }
+        _terminal?.Dispose();
+        _terminal = null;
     }
 }
 
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index 3e630d41a06..c95f45974a0 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.CodeDom;
 using System.Collections.Generic;
 using System.Diagnostics;
 
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
new file mode 100644
index 00000000000..a17c7712a90
--- /dev/null
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -0,0 +1,32 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Text;
+
+namespace Microsoft.Build.Logging.LiveLogger;
+
+internal sealed class Terminal : ITerminal
+{
+    private Encoding _originalOutputEncoding;
+
+    public Terminal()
+    {
+        _originalOutputEncoding = Console.OutputEncoding;
+        Console.OutputEncoding = Encoding.UTF8;
+    }
+
+    public void Write(string text) => Console.Write(text);
+    public void WriteLine(string text) => Console.WriteLine(text);
+    public void WriteLine(ReadOnlySpan<char> text) => Console.Out.WriteLine(text);
+
+    public void WriteLineFitToWidth(ReadOnlySpan<char> input)
+    {
+        WriteLine(input.Slice(0, Math.Min(input.Length, Console.BufferWidth - 1)));
+    }
+
+    public void Dispose()
+    {
+        Console.OutputEncoding = _originalOutputEncoding;
+    }
+}
