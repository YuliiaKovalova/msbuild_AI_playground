diff --git a/src/MSBuild/LiveLogger/ITerminal.cs b/src/MSBuild/LiveLogger/ITerminal.cs
index ff7ddabd137..517cd4fea1d 100644
--- a/src/MSBuild/LiveLogger/ITerminal.cs
+++ b/src/MSBuild/LiveLogger/ITerminal.cs
@@ -7,6 +7,10 @@ namespace Microsoft.Build.Logging.LiveLogger;
 
 internal interface ITerminal : IDisposable
 {
+    void BeginUpdate();
+
+    void EndUpdate();
+
     void Write(string text);
 
     void WriteLine(string text);
diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 99d90825d27..f102c37c710 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -106,8 +106,16 @@ private void ThreadProc()
             {
                 if (UpdateNodeStringBuffer())
                 {
-                    EraseNodes();
-                    DisplayNodes();
+                    Terminal.BeginUpdate();
+                    try
+                    {
+                        EraseNodes();
+                        DisplayNodes();
+                    }
+                    finally
+                    {
+                        Terminal.EndUpdate();
+                    }
                 }
             }
         }
@@ -192,11 +200,20 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 double duration = _notableProjects[restoreContext].Stopwatch.Elapsed.TotalSeconds;
 
                 UpdateNodeStringBuffer();
-                EraseNodes();
-                Terminal.WriteLine($"\x1b[{_usedNodes + 1}F");
-                Terminal.Write($"\x1b[0J");
-                Terminal.WriteLine($"Restore complete ({duration:F1}s)");
-                DisplayNodes();
+
+                Terminal.BeginUpdate();
+                try
+                {
+                    EraseNodes();
+                    Terminal.WriteLine($"\x1b[{_usedNodes + 1}F");
+                    Terminal.Write($"\x1b[0J");
+                    Terminal.WriteLine($"Restore complete ({duration:F1}s)");
+                    DisplayNodes();
+                }
+                finally
+                {
+                    Terminal.EndUpdate();
+                }
                 return;
             }
         }
diff --git a/src/MSBuild/LiveLogger/Terminal.cs b/src/MSBuild/LiveLogger/Terminal.cs
index d011cd64aae..b2d4ad9215b 100644
--- a/src/MSBuild/LiveLogger/Terminal.cs
+++ b/src/MSBuild/LiveLogger/Terminal.cs
@@ -10,15 +10,73 @@ internal sealed class Terminal : ITerminal
 {
     private Encoding _originalOutputEncoding;
 
+    private StringBuilder _outputBuilder = new();
+
+    private bool _isBuffering = false;
+
     public Terminal()
     {
         _originalOutputEncoding = Console.OutputEncoding;
         Console.OutputEncoding = Encoding.UTF8;
     }
 
-    public void Write(string text) => Console.Write(text);
-    public void WriteLine(string text) => Console.WriteLine(text);
-    public void WriteLine(ReadOnlySpan<char> text) => Console.Out.WriteLine(text);
+    public void BeginUpdate()
+    {
+        if (_isBuffering)
+        {
+            throw new InvalidOperationException();
+        }
+        _isBuffering = true;
+    }
+
+    public void EndUpdate()
+    {
+        if (!_isBuffering)
+        {
+            throw new InvalidOperationException();
+        }
+        _isBuffering = false;
+
+        Console.Write(_outputBuilder.ToString());
+        _outputBuilder.Clear();
+    }
+
+    public void Write(string text)
+    {
+        if (_isBuffering)
+        {
+            _outputBuilder.Append(text);
+        }
+        else
+        {
+            Console.Write(text);
+        }
+    }
+
+    public void WriteLine(string text)
+    {
+        if (_isBuffering)
+        {
+            _outputBuilder.AppendLine(text);
+        }
+        else
+        {
+            Console.WriteLine(text);
+        }
+    }
+
+    public void WriteLine(ReadOnlySpan<char> text)
+    {
+        if (_isBuffering)
+        {
+            _outputBuilder.Append(text);
+            _outputBuilder.AppendLine();
+        }
+        else
+        {
+            Console.Out.WriteLine(text);
+        }
+    }
 
     public void WriteLineFitToWidth(ReadOnlySpan<char> input)
     {
@@ -27,12 +85,32 @@ public void WriteLineFitToWidth(ReadOnlySpan<char> input)
 
     public void WriteColor(TerminalColor color, string text)
     {
-        Write($"\x1b[{(int)color};1m{text}\x1b[m");
+        if (_isBuffering)
+        {
+            _outputBuilder
+                .Append("\x1b[")
+                .Append((int)color)
+                .Append(";1m")
+                .Append(text)
+                .Append("\x1b[m");
+        }
+        else
+        {
+            Write($"\x1b[{(int)color};1m{text}\x1b[m");
+        }
     }
 
     public void WriteColorLine(TerminalColor color, string text)
     {
-        WriteLine($"\x1b[{(int)color};1m{text}\x1b[m");
+        if (_isBuffering)
+        {
+            WriteColor(color, text);
+            _outputBuilder.AppendLine();
+        }
+        else
+        {
+            WriteLine($"\x1b[{(int)color};1m{text}\x1b[m");
+        }
     }
 
     public void Dispose()
