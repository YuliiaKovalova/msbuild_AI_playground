diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 13d8e23de61..df0984df0f7 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -13,15 +13,7 @@
 namespace Microsoft.Build.Logging.FancyLogger
 {
     public class FancyLogger : ILogger
-    {
-        // TODO: Move somewhere else
-        public string GetUnambiguousPath(string path)
-        {
-            // Get last part of path
-            return Path.GetFileName(path);
-        }
-        
-        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
+    {   
         public Dictionary<int, FancyLoggerProjectNode> projects = new Dictionary<int, FancyLoggerProjectNode>();
 
         private float existingTasks = 1;
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs b/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
new file mode 100644
index 00000000000..8fee783fd1a
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
@@ -0,0 +1,146 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.Collections.Specialized;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    public class FancyLoggerBufferLineNew
+    {
+        private static int Counter = 0;
+        public int Id;
+        public string Text;
+
+        public FancyLoggerBufferLineNew()
+        {
+            Id = Counter++;
+            Text = String.Empty;
+        }
+        public FancyLoggerBufferLineNew(string text)
+            : this()
+        {
+            Text = text;
+        }
+    }
+
+    public class FancyLoggerBufferNew
+    {
+        private static string Header = String.Empty;
+        private static string Footer = String.Empty;
+        private static List<FancyLoggerBufferLineNew> Lines;
+        private static int TopLineIndex = 0;
+        public static void Initialize()
+        {
+            // Use alternate buffer
+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
+
+            // TODO: Remove
+            Header = "This is ms build header";
+            Footer = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
+        }
+
+        #region Rendering
+        public static void Render()
+        {
+            // First clear all the screen
+            Console.Write(ANSIBuilder.Eraser.Display());
+            // Adjust top line index
+            if (TopLineIndex < 0) TopLineIndex = 0;
+            if (TopLineIndex >= Lines.Count) TopLineIndex = Lines.Count - 1;
+            // Write Header
+            Console.Write(
+                ANSIBuilder.Cursor.Home() +
+                ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress"))
+            );
+            // Write footer
+            Console.Write(
+                ANSIBuilder.Cursor.Position(Console.BufferHeight - 2, 0) +
+                new string('-', Console.BufferWidth) + '\n' + text
+            );
+        }
+        #endregion
+
+        #region Line identification
+        public static int GetLineIndexById(int lineId)
+        {
+            for (int i = 0; i < Lines.Count; i++)
+            {
+                if (Lines[i].Id == lineId) return i;
+            }
+            return -1;
+        }
+
+        public static FancyLoggerBufferLineNew? GetLineById(int lineId)
+        {
+            int index = GetLineIndexById(lineId);
+            if (index == -1) return null;
+            return Lines[index];
+        }
+        #endregion
+
+        #region Line create, update and delete
+        // Write new line
+        public void WriteNewLineAfter(int lineId, string text)
+        {
+            FancyLoggerBufferLineNew line = new FancyLoggerBufferLineNew(text);
+            WriteNewLineAfter(lineId, line);
+        }
+        public void WriteNewLineAfter(int lineId, FancyLoggerBufferLineNew line)
+        {
+            // Get line index
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            // Save top line
+            int topLineId = Lines[TopLineIndex].Id;
+            // Add
+            Lines.Insert(lineIndex + 1, line);
+            // Get updated top line index
+            TopLineIndex = GetLineIndexById(topLineId);
+        }
+
+        public void WriteNewLine(string text)
+        {
+            FancyLoggerBufferLineNew line = new FancyLoggerBufferLineNew(text);
+            WriteNewLine(line);
+        }
+        public void WriteNewLine(FancyLoggerBufferLineNew line)
+        {
+            // Get last id
+            int lineId = Lines.Last().Id;
+            WriteNewLineAfter(lineId, line);
+        }
+
+        // Update line
+        public void UpdateLine(int lineId, string text)
+        {
+            // Get line
+            FancyLoggerBufferLineNew? line = GetLineById(lineId);
+            if (line == null) return;
+            line.Text = text;
+        }
+
+        // Delete line
+        public void DeleteLine(int lineId)
+        {
+            // TODO: What if line id is equal to topLineId?????
+            // Get line index
+            int lineIndex = GetLineIndexById(lineId);
+            if (lineIndex == -1) return;
+            // Save top line
+            int topLineId = Lines[TopLineIndex].Id;
+            // Delete
+            Lines.RemoveAt(lineIndex);
+            // Get updated top line index
+            TopLineIndex = GetLineIndexById(topLineId);
+        }
+        #endregion
+
+
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index a73d76328e3..e7645f48a0f 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -29,7 +29,7 @@ private static string GetUnambiguousPath(string path)
         public FancyLoggerBufferLine? CurrentTargetLine;
         public FancyLoggerTargetNode? CurrentTargetNode;
         // Messages, errors and warnings
-        List<Object> AdditionalDetails = new();
+        List<FancyLoggerMessageNode> AdditionalDetails = new();
         public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
@@ -40,25 +40,40 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
 
         public void Log()
         {
+            // Project details
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(
                 $"{(Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim("Project: ")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}",
                 $"({FinishedTargets} targets completed)",
                 Console.WindowWidth
             );
+
             // Create or update line
             if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);
             else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);
-            // If current target
-            if (CurrentTargetNode == null) return;
-            // Create or update
-            if (Finished && CurrentTargetLine != null)
+
+            // For finished projects
+            if (Finished)
             {
-                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
-                return;
+                if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                foreach (FancyLoggerMessageNode node in AdditionalDetails)
+                {
+                    if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
+                    node.Line = null;
+                }
             }
-            string currentTargetLineContents = $"   └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
+
+            // Current target details
+            if (CurrentTargetNode == null) return;
+            string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
             if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);
             else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
+
+            // Messages, warnings and errors
+            foreach (FancyLoggerMessageNode node in AdditionalDetails)
+            {
+                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter("", Line.Id);
+                node.Log();
+            }
         }
 
         public void AddTarget(TargetStartedEventArgs args)
@@ -81,11 +96,11 @@ public void AddMessage(BuildMessageEventArgs args)
         }
         public void AddWarning(BuildWarningEventArgs args)
         {
-            AdditionalDetails.Add(new FancyLoggerWarningNode(args));
+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));
         }
         public void AddError(BuildErrorEventArgs args)
         {
-            AdditionalDetails.Add(new FancyLoggerErrorNode(args));
+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));
         }
     }
 
@@ -116,24 +131,32 @@ public FancyLoggerTaskNode(TaskStartedEventArgs args)
         }
     }
 
-    public class FancyLoggerWarningNode
-    {
-        public FancyLoggerWarningNode(BuildWarningEventArgs args)
-        {
-        }
-    }
-
     public class FancyLoggerMessageNode
     {
-        public FancyLoggerMessageNode(BuildMessageEventArgs args)
+        public string Message;
+        public FancyLoggerBufferLine? Line;
+
+        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
+            // TODO: Replace
+            if (args.Message == null)
+            {
+                Message = string.Empty;
+            }
+            else if (args.Message.Length > Console.WindowWidth - 1)
+            {
+                Message = args.Message.Substring(0, Console.WindowWidth - 1);
+            }
+            else
+            {
+                Message = args.Message;
+            }
         }
-    }
 
-    public class FancyLoggerErrorNode
-    {
-        public FancyLoggerErrorNode(BuildErrorEventArgs args)
+        public void Log()
         {
+            if (Line == null) return;
+            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Italic(Message)}");
         }
     }
 }
