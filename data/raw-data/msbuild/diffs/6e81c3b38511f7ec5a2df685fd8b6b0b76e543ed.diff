diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 2f451244f7b..176d34cd714 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2950,33 +2950,10 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
             });
         }
 
-        public IEventSource GetMergedEventSource(BinaryLogReplayEventSource replayEventSource)
+        public void EnableBuildCheck() => _buildParameters = new BuildParameters
         {
-            _buildParameters = new BuildParameters
-            {
-                IsBuildCheckEnabled = true,
-            };
-
-            var buildCheckManagerProvider =
-                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;
-
-            buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
-
-            var mergedEventSource = new EventArgsDispatcher();
-
-            // Pass the events from replayEventSource to the mergedEventSource
-            replayEventSource.AnyEventRaised += (sender, e) => mergedEventSource.Dispatch(e);
-
-            // Create BuildCheckBuildEventHandler that passes new events to the mergedEventSource
-            var buildCheckEventHandler = new BuildCheckBuildEventHandler(
-                new AnalysisDispatchingContextFactory(mergedEventSource),
-                buildCheckManagerProvider.Instance);
-
-            // Pass the events from replayEventSource to the BuildCheckBuildEventHandler to produce new events
-            replayEventSource.AnyEventRaised += (sender, e) => buildCheckEventHandler.HandleBuildEvent(e);
-
-            return mergedEventSource;
-        }
+            IsBuildCheckEnabled = true,
+        };
 
         /// <summary>
         /// Creates a logging service around the specified set of loggers.
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs
new file mode 100644
index 00000000000..44542d5c071
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs
@@ -0,0 +1,45 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+public static class BuildCheckReplayModeConnector
+{
+    public static IEventSource GetMergedEventSource(
+        BuildManager buildManager,
+        IEventSource replayEventSource)
+    {
+        buildManager.EnableBuildCheck();
+
+        var buildCheckManagerProvider = ((IBuildComponentHost)buildManager)
+            .GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;
+
+        buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
+
+        var mergedEventSource = new EventArgsDispatcher();
+
+        // Pass the events from replayEventSource to the mergedEventSource
+        replayEventSource.AnyEventRaised += (sender, e) => mergedEventSource.Dispatch(e);
+
+        // Create BuildCheckBuildEventHandler that passes new events to the mergedEventSource
+        var buildCheckEventHandler = new BuildCheckBuildEventHandler(
+            new AnalysisDispatchingContextFactory(mergedEventSource),
+            buildCheckManagerProvider.Instance);
+
+        // Pass the events from replayEventSource to the BuildCheckBuildEventHandler to produce new events
+        replayEventSource.AnyEventRaised += (sender, e) => buildCheckEventHandler.HandleBuildEvent(e);
+
+        return mergedEventSource;
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 9751b24cce6..b03b3ab32c4 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -169,6 +169,7 @@
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckBuildEventHandler.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
+    <Compile Include="BuildCheck\Infrastructure\BuildCheckReplayModeConnector.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 380069a61e0..882290d86d3 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -25,6 +25,7 @@
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
@@ -4413,7 +4414,7 @@ private static void ReplayBinaryLog(
             var replayEventSource = new BinaryLogReplayEventSource();
 
             var eventSource = isBuildCheckEnabled ?
-                BuildManager.DefaultBuildManager.GetMergedEventSource(replayEventSource) :
+                BuildCheckReplayModeConnector.GetMergedEventSource(BuildManager.DefaultBuildManager, replayEventSource) :
                 replayEventSource;
 
             foreach (var distributedLoggerRecord in distributedLoggerRecords)
