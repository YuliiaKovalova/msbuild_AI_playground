diff --git a/documentation/specs/custom-cultures.md b/documentation/specs/custom-cultures.md
index 826b96d4cf5..361d4a7944c 100644
--- a/documentation/specs/custom-cultures.md
+++ b/documentation/specs/custom-cultures.md
@@ -2,7 +2,7 @@
 
 ## Overview
 
-The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.
+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process. 
 
 ## Purpose
 
@@ -27,7 +27,7 @@ When the feature is enabled, you can specify directories that should not be trea
 </PropertyGroup>
 ```
 
-In this example, directories named "long", "hash", or "temp" will not be processed as culture-specific resources, even if their names match culture naming patterns.
+In this example, directories named "long", "hash", or "temp" will not be processed as culture-specific resources and the assemblied inside of them will be skipped, even if their names match culture naming patterns. Globbing is not supported.
 
 ## Additional Notes
 
diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index e58940cde64..4789ffcec85 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -73,11 +73,7 @@
   </UsingTask>
   <Target Name="BootstrapFull" DependsOnTargets="CleanBootstrapFolder;SetBinPaths;GatherNuGetDependencies">
 
-      <!-- MSBuildSdkResolver bits from stage1 if available. The folder is absent if the current runtime if .NET. -->
-      <PropertyGroup>
-        <DefaultSdkResolverPath>$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver</DefaultSdkResolverPath>
-      </PropertyGroup>
-      <LocateVisualStudioTask Condition="!Exists('$(DefaultSdkResolverPath)')">
+      <LocateVisualStudioTask>
         <Output TaskParameter="VsInstallPath" PropertyName="AvailableVsInstallPath" />
       </LocateVisualStudioTask>
 
@@ -87,11 +83,7 @@
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.dll" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.exe" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\FileTracker*.dll" />
-
-      <!-- If the bits from stage1 are available we take them otherwise copy from the local VS instance. -->
-      <SdkResolverFiles Include="$(DefaultSdkResolverPath)\**\*.*" Condition="'$(AvailableVsInstallPath)' == ''" />
-      <SdkResolverFiles Include="$(AvailableVsInstallPath)\MSBuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" Condition="'$(AvailableVsInstallPath)' != ''" />
-
+      <SdkResolverFiles Include="$(AvailableVsInstallPath)\MSBuild\Current\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" />
       <NuGetSdkResolverManifest Include="$(RepoRoot)src\MSBuild\SdkResolvers\VS\Microsoft.Build.NuGetSdkResolver.xml" />
       <InstalledSdks Include="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Sdks\**\*.*" />
 
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 0d9f03d72fb..20fe9dca5cc 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -12,7 +12,6 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
-using Microsoft.VisualStudio.TestPlatform.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -149,8 +148,6 @@ void AssertHasResourceForCulture(string culture, bool isResourceExpected)
                     $"Unexpected resource for culture {culture} was found in deps.json:{Environment.NewLine}{output.DepsJsonResources.ToString()}");
             }
         }
-
-        _env.SetEnvironmentVariable("MSBUILDENABLECUSTOMCULTURES", "");
     }
 
     private readonly record struct EmbedResourceTestOutput(String LogOutput, JsonObject DepsJsonResources);
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 1f89492c762..a85d9bf44c4 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -136,7 +136,7 @@ public Traits()
         /// <summary>
         /// Escape hatch to enable custom cultures recognition.
         /// </summary>
-        public static readonly bool EnableCustomCultures = Environment.GetEnvironmentVariable("MSBUILDENABLECUSTOMCULTURES") == "1";
+        public readonly bool EnableCustomCultures = Environment.GetEnvironmentVariable("MSBUILDENABLECUSTOMCULTURES") == "1";
 
         /// <summary>
         /// Variables controlling opt out at the level of not initializing telemetry infrastructure. Set to "1" or "true" to opt out.
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs
index 9d6354c81e0..91cf7608e36 100644
--- a/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs
@@ -1,6 +1,8 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+using System.IO;
 using System.Runtime.InteropServices;
 using System.Text;
 using Microsoft.Build.Framework;
@@ -15,36 +17,19 @@ public class LocateVisualStudioTask : ToolTask
         [Output]
         public string VsInstallPath { get; set; }
 
-        protected override string ToolName => "powershell.exe";
+        protected override string ToolName => "vswhere.exe";
 
-        protected override string GenerateFullPathToTool() => ToolName;
-
-        // vswhere.exe is a tool that allows to detect the installed VS on the machine.
-        // Local VS bits is a source for MSBuild-dependencies for full framework bootstrap.
-        protected override string GenerateCommandLineCommands()
+        protected override string GenerateFullPathToTool()
         {
-            string script = @"
-                $vsWherePath = ""${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe""
-                if (Test-Path $vsWherePath) {
-                    try {
-                        $vsPath = & $vsWherePath -latest -property installationPath
-                        if ($vsPath -and (Test-Path $vsPath)) {
-                            Write-Output $vsPath
-                            exit 0
-                        }
-                    } catch {
-                        Write-Warning ""VSWhere failed: $_""
-                    }
-                }
-                # No installation found
-                exit 1
-            ";
+            string programFilesX86 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
+            string vsWherePath = Path.Combine(programFilesX86, "Microsoft Visual Studio", "Installer", ToolName);
 
-            script = script.Replace("\"", "\\\"");
 
-            return $"-NoProfile -ExecutionPolicy Bypass -Command \"{script}\"";
+            return vsWherePath;
         }
 
+        protected override string GenerateCommandLineCommands() => "-latest -prerelease -property installationPath";
+
         public override bool Execute()
         {
             if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
@@ -53,7 +38,7 @@ public override bool Execute()
                 return true;
             }
 
-            _ = ExecuteTool(ToolName, string.Empty, GenerateCommandLineCommands());
+            _ = ExecuteTool(GenerateFullPathToTool(), string.Empty, GenerateCommandLineCommands());
 
             if (!Log.HasLoggedErrors)
             {
diff --git a/src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs b/src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs
index 878b710456f..2f6842785da 100644
--- a/src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs
+++ b/src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs
@@ -65,8 +65,6 @@ public void E2EScenarioTests(bool enableCustomCulture, string customCultureExclu
 
                 var euyCultureResourceDll = Path.Combine(projBOutputPath, "euy", "ProjectA.resources.dll");
                 AssertCustomCulture(isEuyCultureExpected, "euy", euyCultureResourceDll);
-
-                env.SetEnvironmentVariable("MSBUILDENABLECUSTOMCULTURES", "");
             }
 
             void AssertCustomCulture(bool isCultureExpectedToExist, string customCultureName, string cultureResourcePath)
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 93872d5bdc3..714ecadff88 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -981,7 +981,7 @@ private void FindSatellites(
                     string cultureName = Path.GetFileName(subDirectory);
 
                     // Custom or unknown cultures can be met only if the feature is enabled and the directory was not added to the exclusion list.
-                    if ((Traits.EnableCustomCultures && !_nonCultureResourceDirectories.Contains(cultureName))
+                    if ((Traits.Instance.EnableCustomCultures && !_nonCultureResourceDirectories.Contains(cultureName))
                         || CultureInfoCache.IsValidCultureString(cultureName))
                     {
                         string satelliteAssembly = Path.Combine(subDirectory, satelliteFilename);
diff --git a/src/Tasks/CreateCSharpManifestResourceName.cs b/src/Tasks/CreateCSharpManifestResourceName.cs
index 2b13627a33b..d257b91f260 100644
--- a/src/Tasks/CreateCSharpManifestResourceName.cs
+++ b/src/Tasks/CreateCSharpManifestResourceName.cs
@@ -103,7 +103,7 @@ internal static string CreateManifestNameImpl(
             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);
             Culture.ItemCultureInfo info;
 
-            if (!string.IsNullOrEmpty(culture) && Traits.EnableCustomCultures)
+            if (!string.IsNullOrEmpty(culture) && Traits.Instance.EnableCustomCultures)
             {
                 info = new Culture.ItemCultureInfo()
                 {
diff --git a/src/Tasks/CreateVisualBasicManifestResourceName.cs b/src/Tasks/CreateVisualBasicManifestResourceName.cs
index c23fa65b16a..7ca5e38443d 100644
--- a/src/Tasks/CreateVisualBasicManifestResourceName.cs
+++ b/src/Tasks/CreateVisualBasicManifestResourceName.cs
@@ -102,7 +102,7 @@ internal static string CreateManifestNameImpl(
             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);
             Culture.ItemCultureInfo info;
 
-            if (!string.IsNullOrEmpty(culture) && Traits.EnableCustomCultures)
+            if (!string.IsNullOrEmpty(culture) && Traits.Instance.EnableCustomCultures)
             {
                 info = new Culture.ItemCultureInfo()
                 {
