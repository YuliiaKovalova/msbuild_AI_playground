diff --git a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
index 32ce1ee09e7..6bbf0b390de 100644
--- a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
@@ -337,7 +337,7 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()
             @"a/b/\c",
             @"d/e\/*b*/\*.cs",
             @"d\e\\abc/\a.cs",
-            @"d\e\", @"abc\", @"a.cs")]
+            @"d\e\\", @"abc\\", @"a.cs")]
         public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,
             string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)
         {
@@ -350,10 +350,11 @@ public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, s
 
             string NormalizeSlashes(string path)
             {
-                return path.Replace(Path.DirectorySeparatorChar == '/' ? '\\' : '/', Path.DirectorySeparatorChar);
+                string normalized = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\' : '/', Path.DirectorySeparatorChar);
+                return NativeMethodsShared.IsWindows ? normalized.Replace("\\\\", "\\") : normalized;
             }
 
-            Assert.Equal(NormalizeSlashes(Path.GetFullPath(Path.Combine(globRoot, fixedDirectoryPart))), result.FixedDirectoryPartMatchGroup);
+            Assert.Equal(NormalizeSlashes(Path.Combine(FileUtilities.NormalizePath(globRoot), fixedDirectoryPart)), result.FixedDirectoryPartMatchGroup);
             Assert.Equal(NormalizeSlashes(wildcardDirectoryPart), result.WildcardDirectoryPartMatchGroup);
             Assert.Equal(NormalizeSlashes(filenamePart), result.FilenamePartMatchGroup);
         }
