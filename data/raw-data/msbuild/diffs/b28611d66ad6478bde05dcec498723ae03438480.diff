diff --git a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
index 87498a7c39e..6d2e01071f5 100644
--- a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
+++ b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
@@ -16,7 +16,7 @@ public sealed class SolutionConfigurationInSolution
         /// </summary>
         internal const char ConfigurationPlatformSeparator = '|';
 
-        internal static readonly char[] ConfigurationPlatformSeparatorArray = MSBuildConstants.PipeChar;
+        internal static readonly char[] ConfigurationPlatformSeparatorArray = new char[] { '|' };
 
         /// <summary>
         /// Constructor
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 065eb68560f..840be8683f2 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -17,7 +17,6 @@
 using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
 using ExceptionUtilities = Microsoft.Build.Shared.ExceptionHandling;
 using System.Collections.ObjectModel;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Construction
 {
@@ -1035,7 +1034,7 @@ string propertyValue
                 // ProjectReferences = "{FD705688-88D1-4C22-9BFF-86235D89C2FC}|CSClassLibrary1.dll;{F0726D09-042B-4A7A-8A01-6BED2422BD5D}|VCClassLibrary1.dll;" 
                 if (string.Compare(propertyName, "ProjectReferences", StringComparison.OrdinalIgnoreCase) == 0)
                 {
-                    string[] projectReferenceEntries = propertyValue.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries);
+                    string[] projectReferenceEntries = propertyValue.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
 
                     foreach (string projectReferenceEntry in projectReferenceEntries)
                     {
@@ -1228,7 +1227,7 @@ internal void ParseNestedProjects()
         /// </remarks>
         internal void ParseSolutionConfigurations()
         {
-            var nameValueSeparators = MSBuildConstants.EqualsChar;
+            var nameValueSeparators = '=';
             var configPlatformSeparators = new[] { SolutionConfigurationInSolution.ConfigurationPlatformSeparator };
 
             do
@@ -1310,7 +1309,7 @@ internal Dictionary<string, string> ParseProjectConfigurations()
                     continue;
                 }
 
-                string[] nameValue = str.Split(MSBuildConstants.EqualsChar);
+                string[] nameValue = str.Split('=');
 
                 // There should be exactly one '=' character, separating the name and value. 
                 ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(nameValue.Length == 2, "SubCategoryForSolutionParsingErrors",
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 0c937c6d71d..730b1f75d64 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -163,7 +163,7 @@ private SolutionProjectGenerator(
 
             if (targetNames != null)
             {
-                _targetNames = targetNames.Select(i => i.Split(MSBuildConstants.ColonChar, 2, StringSplitOptions.RemoveEmptyEntries).Last()).ToList();
+                _targetNames = targetNames.Select(i => i.Split(new char[] { ':' }, 2, StringSplitOptions.RemoveEmptyEntries).Last()).ToList();
             }
         }
 
@@ -1347,7 +1347,7 @@ private void AddMetaprojectBuildTask(ProjectInSolution project, ProjectTargetIns
             }
 
             task.SetParameter("BuildInParallel", "True");
-            task.SetParameter("ToolsVersion", MSBuildConstants.CurrentToolsVersion);
+            task.SetParameter("ToolsVersion", "Current");
             task.SetParameter("Properties", SolutionProperties);
             task.SetParameter("SkipNonexistentProjects", "%(ProjectReference.SkipNonexistentProjects)");
 
