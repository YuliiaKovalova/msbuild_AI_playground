diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index db889562ad9..656f0ca7733 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -973,13 +973,13 @@ public BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectColle
         public System.Threading.ThreadPriority BuildThreadPriority { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public System.Globalization.CultureInfo Culture { get { throw null; } set { } }
         public string DefaultToolsVersion { get { throw null; } set { } }
-        public bool DetailedSummary { get { throw null; } set { } }
+        public bool DetailedSummary { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool DisableInProcNode { get { throw null; } set { } }
         public bool EnableNodeReuse { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, string> EnvironmentProperties { get { throw null; } }
         public System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> ForwardingLoggers { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, string> GlobalProperties { get { throw null; } set { } }
-        public Microsoft.Build.Execution.HostServices HostServices { get { throw null; } set { } }
+        public Microsoft.Build.Execution.HostServices HostServices { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool LegacyThreadingSemantics { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> Loggers { get { throw null; } set { } }
         public bool LogInitialPropertiesAndItems { get { throw null; } set { } }
@@ -990,14 +990,14 @@ public BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectColle
         public bool OnlyLogCriticalEvents { get { throw null; } set { } }
         public Microsoft.Build.Evaluation.ProjectLoadSettings ProjectLoadSettings { get { throw null; } set { } }
         public bool ResetCaches { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
-        public bool SaveOperatingEnvironment { get { throw null; } set { } }
+        public bool SaveOperatingEnvironment { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool ShutdownInProcNodeOnBuildFinish { get { throw null; } set { } }
-        public Microsoft.Build.Evaluation.ToolsetDefinitionLocations ToolsetDefinitionLocations { get { throw null; } set { } }
+        public Microsoft.Build.Evaluation.ToolsetDefinitionLocations ToolsetDefinitionLocations { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.Toolset> Toolsets { get { throw null; } }
         public System.Globalization.CultureInfo UICulture { get { throw null; } set { } }
         public bool UseSynchronousLogging { get { throw null; } set { } }
-        public System.Collections.Generic.ISet<string> WarningsAsErrors { get { throw null; } set { } }
-        public System.Collections.Generic.ISet<string> WarningsAsMessages { get { throw null; } set { } }
+        public System.Collections.Generic.ISet<string> WarningsAsErrors { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public System.Collections.Generic.ISet<string> WarningsAsMessages { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public Microsoft.Build.Execution.BuildParameters Clone() { throw null; }
         public Microsoft.Build.Evaluation.Toolset GetToolset(string toolsVersion) { throw null; }
     }
@@ -1040,7 +1040,7 @@ public BuildResult() { }
         public int ConfigurationId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public System.Exception Exception { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public int GlobalRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
-        public Microsoft.Build.Execution.ITargetResult this[string target] { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
+        public Microsoft.Build.Execution.TargetResult this[string target] { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public int NodeRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public Microsoft.Build.Execution.BuildResultCode OverallResult { get { throw null; } }
         public int ParentGlobalRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
@@ -1061,7 +1061,7 @@ public partial class BuildSubmission
         internal BuildSubmission() { }
         public object AsyncContext { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public Microsoft.Build.Execution.BuildManager BuildManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
-        public Microsoft.Build.Execution.BuildResult BuildResult { get { throw null; } set { } }
+        public Microsoft.Build.Execution.BuildResult BuildResult { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool IsCompleted { get { throw null; } }
         public int SubmissionId { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public System.Threading.WaitHandle WaitHandle { get { throw null; } }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 172c4ee3a8f..82647d6c236 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -968,13 +968,13 @@ public BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectColle
         public System.Collections.Generic.IDictionary<string, string> BuildProcessEnvironment { get { throw null; } }
         public System.Globalization.CultureInfo Culture { get { throw null; } set { } }
         public string DefaultToolsVersion { get { throw null; } set { } }
-        public bool DetailedSummary { get { throw null; } set { } }
+        public bool DetailedSummary { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool DisableInProcNode { get { throw null; } set { } }
         public bool EnableNodeReuse { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, string> EnvironmentProperties { get { throw null; } }
         public System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> ForwardingLoggers { get { throw null; } set { } }
         public System.Collections.Generic.IDictionary<string, string> GlobalProperties { get { throw null; } set { } }
-        public Microsoft.Build.Execution.HostServices HostServices { get { throw null; } set { } }
+        public Microsoft.Build.Execution.HostServices HostServices { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool LegacyThreadingSemantics { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> Loggers { get { throw null; } set { } }
         public bool LogInitialPropertiesAndItems { get { throw null; } set { } }
@@ -985,14 +985,14 @@ public BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectColle
         public bool OnlyLogCriticalEvents { get { throw null; } set { } }
         public Microsoft.Build.Evaluation.ProjectLoadSettings ProjectLoadSettings { get { throw null; } set { } }
         public bool ResetCaches { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
-        public bool SaveOperatingEnvironment { get { throw null; } set { } }
+        public bool SaveOperatingEnvironment { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool ShutdownInProcNodeOnBuildFinish { get { throw null; } set { } }
-        public Microsoft.Build.Evaluation.ToolsetDefinitionLocations ToolsetDefinitionLocations { get { throw null; } set { } }
+        public Microsoft.Build.Evaluation.ToolsetDefinitionLocations ToolsetDefinitionLocations { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.Toolset> Toolsets { get { throw null; } }
         public System.Globalization.CultureInfo UICulture { get { throw null; } set { } }
         public bool UseSynchronousLogging { get { throw null; } set { } }
-        public System.Collections.Generic.ISet<string> WarningsAsErrors { get { throw null; } set { } }
-        public System.Collections.Generic.ISet<string> WarningsAsMessages { get { throw null; } set { } }
+        public System.Collections.Generic.ISet<string> WarningsAsErrors { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public System.Collections.Generic.ISet<string> WarningsAsMessages { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public Microsoft.Build.Execution.BuildParameters Clone() { throw null; }
         public Microsoft.Build.Evaluation.Toolset GetToolset(string toolsVersion) { throw null; }
     }
@@ -1035,7 +1035,7 @@ public BuildResult() { }
         public int ConfigurationId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public System.Exception Exception { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public int GlobalRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
-        public Microsoft.Build.Execution.ITargetResult this[string target] { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
+        public Microsoft.Build.Execution.TargetResult this[string target] { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public int NodeRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
         public Microsoft.Build.Execution.BuildResultCode OverallResult { get { throw null; } }
         public int ParentGlobalRequestId { [System.Diagnostics.DebuggerStepThroughAttribute]get { throw null; } }
@@ -1056,7 +1056,7 @@ public partial class BuildSubmission
         internal BuildSubmission() { }
         public object AsyncContext { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public Microsoft.Build.Execution.BuildManager BuildManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
-        public Microsoft.Build.Execution.BuildResult BuildResult { get { throw null; } set { } }
+        public Microsoft.Build.Execution.BuildResult BuildResult { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool IsCompleted { get { throw null; } }
         public int SubmissionId { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } }
         public System.Threading.WaitHandle WaitHandle { get { throw null; } }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index fc5e63547a4..2979c802b9f 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -6,7 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
@@ -116,7 +115,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// Flag indicating if we are currently shutting down.  When set, we stop processing packets other than NodeShutdown.
         /// </summary>
-        private bool _shuttingDown = false;
+        private bool _shuttingDown;
 
         /// <summary>
         /// The current state of the BuildManager.
@@ -211,7 +210,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// Flag indicating we have disposed.
         /// </summary>
-        private bool _disposed = false;
+        private bool _disposed;
 
 #if DEBUG
         /// <summary>
@@ -237,7 +236,7 @@ public BuildManager()
         /// </summary>
         public BuildManager(string hostName)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(hostName, "hostName");
+            ErrorUtilities.VerifyThrowArgumentNull(hostName, nameof(hostName));
             _hostName = hostName;
             _buildManagerState = BuildManagerState.Idle;
             _buildSubmissions = new Dictionary<int, BuildSubmission>();
@@ -530,12 +529,12 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)
         {
             lock (_syncLock)
             {
-                ErrorUtilities.VerifyThrowArgumentNull(requestData, "requestData");
+                ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
                 ErrorIfState(BuildManagerState.WaitingForBuildToComplete, "WaitingForEndOfBuild");
                 ErrorIfState(BuildManagerState.Idle, "NoBuildInProgress");
                 VerifyStateInternal(BuildManagerState.Building);
 
-                BuildSubmission newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);
+                var newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);
                 _buildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
                 _noActiveSubmissionsEvent.Reset();
                 return newSubmission;
@@ -572,7 +571,7 @@ public void EndBuild()
                 VerifyStateInternal(BuildManagerState.Building);
 
                 // If there are any submissions which never started, remove them now.
-                List<BuildSubmission> submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);
+                var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);
                 foreach (BuildSubmission submission in submissionsToCheck)
                 {
                     CheckSubmissionCompletenessAndRemove(submission);
@@ -613,7 +612,7 @@ public void EndBuild()
                 {
                     bool allMismatchedProjectStartedEventsDueToLoggerErrors = true;
 
-                    foreach (var projectStartedEvent in _projectStartedEvents)
+                    foreach (KeyValuePair<int, BuildEventArgs> projectStartedEvent in _projectStartedEvents)
                     {
                         BuildResult result = _resultsCache.GetResultsForConfiguration(projectStartedEvent.Value.BuildEventContext.ProjectInstanceId);
 
@@ -641,7 +640,7 @@ public void EndBuild()
                 }
                 finally
                 {
-                    if (_buildParameters.LegacyThreadingSemantics == true)
+                    if (_buildParameters.LegacyThreadingSemantics)
                     {
                         _legacyThreadingData.MainThreadSubmissionId = -1;
                     }
@@ -720,7 +719,7 @@ public void Dispose()
         /// <param name="packet">The packet.</param>
         void INodePacketHandler.PacketReceived(int node, INodePacket packet)
         {
-            _workQueue.Post(() => this.ProcessPacket(node, packet));
+            _workQueue.Post(() => ProcessPacket(node, packet));
         }
 
         #endregion
@@ -761,7 +760,7 @@ IBuildComponent IBuildComponentHost.GetComponent(BuildComponentType type)
         [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Complex class might need refactoring to separate scheduling elements from submission elements.")]
         internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThreadBuild)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(submission, "submission");
+            ErrorUtilities.VerifyThrowArgumentNull(submission, nameof(submission));
             ErrorUtilities.VerifyThrow(!submission.IsCompleted, "Submission already complete.");
 
             lock (_syncLock)
@@ -799,12 +798,10 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
                         ErrorUtilities.VerifyThrow(submission.BuildRequestData.ProjectInstance != null,
                             "Unexpected null path for a submission with no ProjectInstance.");
 
-                        string tempName;
-
                         // If we have already named this instance when it was submitted previously during this build, use the same
                         // name so that we get the same configuration (and thus don't cause it to rebuild.)
                         if (!_unnamedProjectInstanceToNames.TryGetValue(submission.BuildRequestData.ProjectInstance,
-                            out tempName))
+                            out string tempName))
                         {
                             tempName = "Unnamed_" + _nextUnnamedProjectId++;
                             _unnamedProjectInstanceToNames[submission.BuildRequestData.ProjectInstance] = tempName;
@@ -831,7 +828,7 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
                     // Now create the build request
                     submission.BuildRequest = new BuildRequest(
                         submission.SubmissionId,
-                        Microsoft.Build.BackEnd.BuildRequest.InvalidNodeRequestId,
+                        BackEnd.BuildRequest.InvalidNodeRequestId,
                         newConfiguration.ConfigurationId,
                         submission.BuildRequestData.TargetNames,
                         submission.BuildRequestData.HostServices,
@@ -852,7 +849,7 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
 
                     // Submit the build request.
                     BuildRequestBlocker blocker = new BuildRequestBlocker(-1, Array.Empty<string>(),
-                        new BuildRequest[] {submission.BuildRequest});
+                        new[] {submission.BuildRequest});
                     _workQueue.Post(() =>
                     {
                         try
@@ -862,7 +859,7 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
                         catch (BuildAbortedException bae)
                         {
                             // We were canceled before we got issued by the work queue.
-                            BuildResult result = new BuildResult(submission.BuildRequest, bae);
+                            var result = new BuildResult(submission.BuildRequest, bae);
                             submission.CompleteResults(result);
                             submission.CompleteLogging(true);
                             CheckSubmissionCompletenessAndRemove(submission);
@@ -914,8 +911,9 @@ internal void LoadSolutionIntoConfiguration(BuildRequestConfiguration config, Bu
                 // Create new configurations for each of these if they don't already exist.  That could happen if there are multiple
                 // solutions in this build which refer to the same project, in which case we want them to refer to the same
                 // metaproject as well.
-                BuildRequestConfiguration newConfig = new BuildRequestConfiguration(GetNewConfigurationId(), instances[i]);
-                newConfig.ExplicitlyLoaded = config.ExplicitlyLoaded;
+                var newConfig = new BuildRequestConfiguration(
+                    GetNewConfigurationId(),
+                    instances[i]) { ExplicitlyLoaded = config.ExplicitlyLoaded };
                 if (_configCache.GetMatchingConfiguration(newConfig) == null)
                 {
                     _configCache.AddConfiguration(newConfig);
@@ -979,7 +977,7 @@ private void ProcessWorkQueue(Action action)
                 {
                     // These need to go to the main thread exception handler.  We can't rethrow here because that will just silently stop the
                     // action block.  Instead, send them over to the main handler for the BuildManager.
-                    this.OnThreadException(ex);
+                    OnThreadException(ex);
                 }
                 finally
                 {
@@ -1064,7 +1062,7 @@ private void HandleExecuteSubmissionException(BuildSubmission submission, Except
             // BuildRequest may be null if the submission fails early on.
             if (submission.BuildRequest != null)
             {
-                BuildResult result = new BuildResult(submission.BuildRequest, ex);
+                var result = new BuildResult(submission.BuildRequest, ex);
                 submission.CompleteResults(result);
                 submission.CompleteLogging(true);
             }
@@ -1273,7 +1271,7 @@ private BuildRequestConfiguration ResolveConfiguration(BuildRequestConfiguration
             {
                 ReplaceExistingProjectInstance(unresolvedConfiguration, resolvedConfiguration);
             }
-            else if (unresolvedConfiguration.Project != null && resolvedConfiguration.Project != null && !Object.ReferenceEquals(unresolvedConfiguration.Project, resolvedConfiguration.Project))
+            else if (unresolvedConfiguration.Project != null && resolvedConfiguration.Project != null && !ReferenceEquals(unresolvedConfiguration.Project, resolvedConfiguration.Project))
             {
                 // The user passed in a different instance than the one we already had. Throw away any corresponding results.
                 ReplaceExistingProjectInstance(unresolvedConfiguration, resolvedConfiguration);
@@ -1357,9 +1355,9 @@ private void HandleConfigurationRequest(int node, BuildRequestConfiguration unre
         {
             BuildRequestConfiguration resolvedConfiguration = ResolveConfiguration(unresolvedConfiguration, null, false);
 
-            BuildRequestConfigurationResponse response = new BuildRequestConfigurationResponse(unresolvedConfiguration.ConfigurationId, resolvedConfiguration.ConfigurationId, resolvedConfiguration.ResultsNodeId);
+            var response = new BuildRequestConfigurationResponse(unresolvedConfiguration.ConfigurationId, resolvedConfiguration.ConfigurationId, resolvedConfiguration.ResultsNodeId);
 
-            if (!_nodeIdToKnownConfigurations.TryGetValue(node, out var configurationsOnNode))
+            if (!_nodeIdToKnownConfigurations.TryGetValue(node, out HashSet<NGen<int>> configurationsOnNode))
             {
                 configurationsOnNode = new HashSet<NGen<int>>();
                 _nodeIdToKnownConfigurations[node] = configurationsOnNode;
@@ -1459,7 +1457,7 @@ private void CheckForActiveNodesAndCleanUpSubmissions()
         {
             if (_activeNodes.Count == 0)
             {
-                List<BuildSubmission> submissions = new List<BuildSubmission>(_buildSubmissions.Values);
+                var submissions = new List<BuildSubmission>(_buildSubmissions.Values);
                 foreach (BuildSubmission submission in submissions)
                 {
                     // The submission has not started do not add it to the results cache
@@ -1516,7 +1514,7 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        List<NodeInfo> newNodes = new List<NodeInfo>();
+                        var newNodes = new List<NodeInfo>();
 
                         for (int i = 0; i < response.NumberOfNodesToCreate; i++)
                         {
@@ -1551,7 +1549,7 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                             // of which nodes have had configurations specifically assigned to them for building.  However, a node may
                             // have created a configuration based on a build request it needs to wait on.  In this
                             // case we need not send the configuration since it will already have been mapped earlier.
-                            if (!_nodeIdToKnownConfigurations.TryGetValue(response.NodeId, out var configurationsOnNode) ||
+                            if (!_nodeIdToKnownConfigurations.TryGetValue(response.NodeId, out HashSet<NGen<int>> configurationsOnNode) ||
                                !configurationsOnNode.Contains(response.BuildRequest.ConfigurationId))
                             {
                                 IConfigCache configCache = _componentFactories.GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
@@ -1652,7 +1650,7 @@ private NodeConfiguration GetNodeConfiguration()
             {
                 // Get the remote loggers
                 ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-                List<LoggerDescription> remoteLoggers = new List<LoggerDescription>(loggingService.LoggerDescriptions);
+                var remoteLoggers = new List<LoggerDescription>(loggingService.LoggerDescriptions);
 
                 _nodeConfiguration = new NodeConfiguration
                 (
@@ -1681,7 +1679,7 @@ private void OnThreadException(Exception e)
                 if (_threadException == null)
                 {
                     _threadException = e;
-                    List<BuildSubmission> submissions = new List<BuildSubmission>(_buildSubmissions.Values);
+                    var submissions = new List<BuildSubmission>(_buildSubmissions.Values);
                     foreach (BuildSubmission submission in submissions)
                     {
                         // Submission has not started
@@ -1830,7 +1828,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
         /// Ensures that the packet type matches the expected type
         /// </summary>
         /// <typeparam name="I">The instance-type of packet being expected</typeparam>
-        private I ExpectPacketType<I>(INodePacket packet, NodePacketType expectedType) where I : class, INodePacket
+        private static I ExpectPacketType<I>(INodePacket packet, NodePacketType expectedType) where I : class, INodePacket
         {
             I castPacket = packet as I;
 
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 4fd688bcb69..287f9ec8b47 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -22,7 +22,7 @@
 
 namespace Microsoft.Build.Execution
 {
-    using Utilities = Microsoft.Build.Internal.Utilities;
+    using Utilities = Internal.Utilities;
 
     /// <summary>
     /// This class represents all of the settings which must be specified to start a build.
@@ -102,7 +102,7 @@ public class BuildParameters : INodePacketTranslatable
         /// <summary>
         /// The build id
         /// </summary>
-        private int _buildId = 0;
+        private int _buildId;
 
         /// <summary>
         /// The culture
@@ -114,11 +114,6 @@ public class BuildParameters : INodePacketTranslatable
         /// </summary>
         private string _defaultToolsVersion = "2.0";
 
-        /// <summary>
-        /// When true, causes the build to emit a summary of project build information
-        /// </summary>
-        private bool _detailedSummary;
-
         /// <summary>
         /// Flag indicating whether node reuse should be enabled.
         /// By default, it is enabled.
@@ -149,11 +144,6 @@ public class BuildParameters : INodePacketTranslatable
         /// </summary>
         private PropertyDictionary<ProjectPropertyInstance> _globalProperties = new PropertyDictionary<ProjectPropertyInstance>();
 
-        /// <summary>
-        /// The host services object.
-        /// </summary>
-        private HostServices _hostServices;
-
         /// <summary>
         /// The loggers.
         /// </summary>
@@ -167,7 +157,7 @@ public class BuildParameters : INodePacketTranslatable
         /// <summary>
         /// The maximum amount of memory to use.
         /// </summary>
-        private int _memoryUseLimit = 0; // Unlimited
+        private int _memoryUseLimit; // Default 0 = unlimited
 
         /// <summary>
         /// The location of the node exe.  This is the full path including the exe file itself.
@@ -177,22 +167,7 @@ public class BuildParameters : INodePacketTranslatable
         /// <summary>
         /// Flag indicating if we should only log critical events.
         /// </summary>
-        private bool _onlyLogCriticalEvents = false;
-
-        /// <summary>
-        /// A list of warnings to treat as errors.
-        /// </summary>
-        private ISet<string> _warningsAsErrors;
-
-        /// <summary>
-        /// A list of warnings to treat as low importance messages.
-        /// </summary>
-        private ISet<string> _warningsAsMessages;
-
-        /// <summary>
-        /// The location of the toolset definitions.
-        /// </summary>
-        private ToolsetDefinitionLocations _toolsetDefinitionLocations = ToolsetDefinitionLocations.Default;
+        private bool _onlyLogCriticalEvents;
 
         /// <summary>
         /// The UI culture.
@@ -204,37 +179,31 @@ public class BuildParameters : INodePacketTranslatable
         /// </summary>
         private ToolsetProvider _toolsetProvider;
 
-        /// <summary>
-        /// Should the operating environment such as the current directory and environment be saved and restored between project builds and task invocations
-        /// This should be defaulted to true as we should normally do this. This should be set to false for GlobalDTAR which could run at the same time in a different build manager.
-        /// </summary>
-        private bool _saveOperatingEnvironment = true;
-
         /// <summary>
         /// Should the logging service be done Synchronously when the number of cps's is 1
         /// </summary>
-        private bool _useSynchronousLogging = false;
+        private bool _useSynchronousLogging;
 
         /// <summary>
         /// Should the inprocess node be shutdown when the build finishes. By default this is false
         /// since visual studio needs to keep the inprocess node around after the build has finished.
         /// </summary>
-        private bool _shutdownInProcNodeOnBuildFinish = false;
+        private bool _shutdownInProcNodeOnBuildFinish;
 
         /// <summary>
         /// When true, the in-proc node will not be available.
         /// </summary>
-        private bool _disableInProcNode = false;
+        private bool _disableInProcNode;
 
         /// <summary>
         /// When true, the build should log task inputs to the loggers.
         /// </summary>
-        private bool _logTaskInputs = false;
+        private bool _logTaskInputs;
 
         /// <summary>
         /// When true, the build should log the input parameters.  Note - logging these is very expensive!
         /// </summary>
-        private bool _logInitialPropertiesAndItems = false;
+        private bool _logInitialPropertiesAndItems;
 
         /// <summary>
         /// The settings used to load the project under build
@@ -255,13 +224,13 @@ public BuildParameters()
         /// <param name="projectCollection">The ProjectCollection from which the BuildParameters should populate itself.</param>
         public BuildParameters(ProjectCollection projectCollection)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(projectCollection, "projectCollection");
+            ErrorUtilities.VerifyThrowArgumentNull(projectCollection, nameof(projectCollection));
 
             Initialize(new PropertyDictionary<ProjectPropertyInstance>(projectCollection.EnvironmentProperties), projectCollection.ProjectRootElementCache, new ToolsetProvider(projectCollection.Toolsets));
 
             _maxNodeCount = projectCollection.MaxNodeCount;
             _onlyLogCriticalEvents = projectCollection.OnlyLogCriticalEvents;
-            _toolsetDefinitionLocations = projectCollection.ToolsetLocations;
+            ToolsetDefinitionLocations = projectCollection.ToolsetLocations;
             _defaultToolsVersion = projectCollection.DefaultToolsVersion;
 
             _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(projectCollection.GlobalPropertiesCollection);
@@ -280,7 +249,7 @@ private BuildParameters(INodePacketTranslator translator)
         /// </summary>
         private BuildParameters(BuildParameters other)
         {
-            ErrorUtilities.VerifyThrowInternalNull(other, "other");
+            ErrorUtilities.VerifyThrowInternalNull(other, nameof(other));
 
             _buildId = other._buildId;
             _culture = other._culture;
@@ -290,7 +259,7 @@ private BuildParameters(BuildParameters other)
             _environmentProperties = other._environmentProperties != null ? new PropertyDictionary<ProjectPropertyInstance>(other._environmentProperties) : null;
             _forwardingLoggers = other._forwardingLoggers != null ? new List<ForwardingLoggerRecord>(other._forwardingLoggers) : null;
             _globalProperties = other._globalProperties != null ? new PropertyDictionary<ProjectPropertyInstance>(other._globalProperties) : null;
-            _hostServices = other._hostServices;
+            HostServices = other.HostServices;
             _loggers = other._loggers != null ? new List<ILogger>(other._loggers) : null;
             _maxNodeCount = other._maxNodeCount;
             _memoryUseLimit = other._memoryUseLimit;
@@ -301,21 +270,21 @@ private BuildParameters(BuildParameters other)
             BuildThreadPriority = other.BuildThreadPriority;
 #endif
             _toolsetProvider = other._toolsetProvider;
-            _toolsetDefinitionLocations = other._toolsetDefinitionLocations;
+            ToolsetDefinitionLocations = other.ToolsetDefinitionLocations;
             _toolsetProvider = other._toolsetProvider;
             _uiCulture = other._uiCulture;
-            _detailedSummary = other._detailedSummary;
+            DetailedSummary = other.DetailedSummary;
             _shutdownInProcNodeOnBuildFinish = other._shutdownInProcNodeOnBuildFinish;
             ProjectRootElementCache = other.ProjectRootElementCache;
             ResetCaches = other.ResetCaches;
             LegacyThreadingSemantics = other.LegacyThreadingSemantics;
-            _saveOperatingEnvironment = other._saveOperatingEnvironment;
+            SaveOperatingEnvironment = other.SaveOperatingEnvironment;
             _useSynchronousLogging = other._useSynchronousLogging;
             _disableInProcNode = other._disableInProcNode;
             _logTaskInputs = other._logTaskInputs;
             _logInitialPropertiesAndItems = other._logInitialPropertiesAndItems;
-            _warningsAsErrors = other._warningsAsErrors == null ? null : new HashSet<string>(other._warningsAsErrors, StringComparer.OrdinalIgnoreCase);
-            _warningsAsMessages = other._warningsAsMessages == null ? null : new HashSet<string>(other._warningsAsMessages, StringComparer.OrdinalIgnoreCase);
+            WarningsAsErrors = other.WarningsAsErrors == null ? null : new HashSet<string>(other.WarningsAsErrors, StringComparer.OrdinalIgnoreCase);
+            WarningsAsMessages = other.WarningsAsMessages == null ? null : new HashSet<string>(other.WarningsAsMessages, StringComparer.OrdinalIgnoreCase);
             _projectLoadSettings = other._projectLoadSettings;
         }
 
@@ -364,11 +333,7 @@ public string DefaultToolsVersion
         /// <summary>
         /// When true, indicates that the build should emit a detailed summary at the end of the log.
         /// </summary>
-        public bool DetailedSummary
-        {
-            get => _detailedSummary;
-            set => _detailedSummary = value;
-        }
+        public bool DetailedSummary { get; set; }
 
         /// <summary>
         /// When true, indicates the in-proc node should not be used.
@@ -444,7 +409,7 @@ public IEnumerable<ForwardingLoggerRecord> ForwardingLoggers
                 {
                     foreach (ForwardingLoggerRecord logger in value)
                     {
-                        ErrorUtilities.VerifyThrowArgumentNull(logger, "ForwardingLoggers", "NullLoggerNotAllowed");
+                        ErrorUtilities.VerifyThrowArgumentNull(logger, nameof(ForwardingLoggers), "NullLoggerNotAllowed");
                     }
                 }
 
@@ -478,11 +443,7 @@ public IDictionary<string, string> GlobalProperties
         /// <summary>
         /// Interface allowing the host to provide additional control over the build process.
         /// </summary>
-        public HostServices HostServices
-        {
-            get => _hostServices;
-            set => _hostServices = value;
-        }
+        public HostServices HostServices { get; set; }
 
         /// <summary>
         /// Enables or disables legacy threading semantics
@@ -493,11 +454,7 @@ public HostServices HostServices
         /// requests will be built on the thread which invoked the build rather than a 
         /// thread owned by the BuildManager.
         /// </remarks>
-        public bool LegacyThreadingSemantics
-        {
-            get;
-            set;
-        }
+        public bool LegacyThreadingSemantics { get; set; }
 
         /// <summary>
         /// The collection of loggers to use during the build.
@@ -564,29 +521,17 @@ public bool OnlyLogCriticalEvents
         /// <summary>
         /// A list of warnings to treat as errors.  To treat all warnings as errors, set this to an empty <see cref="HashSet{String}"/>.  
         /// </summary>
-        public ISet<string> WarningsAsErrors
-        {
-            get => _warningsAsErrors;
-            set => _warningsAsErrors = value;
-        }
+        public ISet<string> WarningsAsErrors { get; set; }
 
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
-        public ISet<string> WarningsAsMessages
-        {
-            get => _warningsAsMessages;
-            set => _warningsAsMessages = value;
-        }
+        public ISet<string> WarningsAsMessages { get; set; }
 
         /// <summary>
         /// Locations to search for toolsets.
         /// </summary>
-        public ToolsetDefinitionLocations ToolsetDefinitionLocations
-        {
-            get => _toolsetDefinitionLocations;
-            set => _toolsetDefinitionLocations = value;
-        }
+        public ToolsetDefinitionLocations ToolsetDefinitionLocations { get; set; } = ToolsetDefinitionLocations.Default;
 
         /// <summary>
         /// Returns all of the toolsets.
@@ -609,11 +554,7 @@ public CultureInfo UICulture
         /// Flag indicating if the operating environment such as the current directory and environment be saved and restored between project builds and task invocations.
         /// This should be set to false for any other build managers running in the system so that we do not have two build managers trampling on each others environment.
         /// </summary>
-        public bool SaveOperatingEnvironment
-        {
-            get => _saveOperatingEnvironment;
-            set => _saveOperatingEnvironment = value;
-        }
+        public bool SaveOperatingEnvironment { get; set; } = true;
 
         /// <summary>
         /// Shutdown the inprocess node when the build finishes. By default this is false 
@@ -737,7 +678,7 @@ internal PropertyDictionary<ProjectPropertyInstance> EnvironmentPropertiesIntern
         /// <summary>
         /// Gets or sets the node id.
         /// </summary>
-        internal int NodeId { get; set; } = 0;
+        internal int NodeId { get; set; }
 
         /// <summary>
         /// Gets the toolset provider.
@@ -754,31 +695,19 @@ internal IToolsetProvider ToolsetProvider
         /// <summary>
         /// The one and only project root element cache to be used for the build.
         /// </summary>
-        internal ProjectRootElementCache ProjectRootElementCache
-        {
-            get;
-            set;
-        }
+        internal ProjectRootElementCache ProjectRootElementCache { get; set; }
 
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// Information for configuring child AppDomains.
         /// </summary>
-        internal AppDomainSetup AppDomainSetup
-        {
-            get;
-            set;
-        }
+        internal AppDomainSetup AppDomainSetup { get; set; }
 #endif
 
         /// <summary>
         ///  (for diagnostic use) Whether or not this is out of proc
         /// </summary>
-        internal bool IsOutOfProc
-        {
-            get;
-            set;
-        }
+        internal bool IsOutOfProc { get; set; }
 
         /// <nodoc/>
         public ProjectLoadSettings ProjectLoadSettings
@@ -830,7 +759,7 @@ void INodePacketTranslatable.Translate(INodePacketTranslator translator)
             translator.Translate(ref _onlyLogCriticalEvents);
             translator.Translate(ref s_startupDirectory);
             translator.TranslateCulture(ref _uiCulture);
-            translator.Translate(ref _toolsetProvider, Microsoft.Build.Evaluation.ToolsetProvider.FactoryForDeserialization);
+            translator.Translate(ref _toolsetProvider, Evaluation.ToolsetProvider.FactoryForDeserialization);
             translator.Translate(ref _useSynchronousLogging);
             translator.Translate(ref _shutdownInProcNodeOnBuildFinish);
             translator.Translate(ref _logTaskInputs);
@@ -906,7 +835,7 @@ private void Initialize(PropertyDictionary<ProjectPropertyInstance> environmentP
 
             if (Environment.GetEnvironmentVariable("MSBUILDDETAILEDSUMMARY") == "1") // For example to get detailed summary within Visual Studio
             {
-                _detailedSummary = true;
+                DetailedSummary = true;
             }
 
             _nodeExeLocation = FindMSBuildExe();
@@ -948,7 +877,7 @@ private string FindMSBuildExe()
         /// This File.Exists otherwise can show up in profiles when there's a lot of 
         /// design time builds going on.
         /// </summary>
-        private bool CheckMSBuildExeExistsAt(string path)
+        private static bool CheckMSBuildExeExistsAt(string path)
         {
             if (s_msbuildExeKnownToExistAt != null && string.Equals(path, s_msbuildExeKnownToExistAt, StringComparison.OrdinalIgnoreCase))
             {
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestData.cs b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
index 38cf472e9e7..fad8e96dae5 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestData.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
@@ -7,9 +7,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.IO;
-using System.Text;
-
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
@@ -133,7 +130,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags, IEnumerable<string> propertiesToTransfer)
             : this(targetsToBuild, hostServices, flags)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(projectInstance, "projectInstance");
+            ErrorUtilities.VerifyThrowArgumentNull(projectInstance, nameof(projectInstance));
 
             foreach (string targetName in targetsToBuild)
             {
@@ -147,7 +144,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
             ExplicitlySpecifiedToolsVersion = projectInstance.ExplicitToolsVersion;
             if (propertiesToTransfer != null)
             {
-                this.PropertiesToTransfer = new List<string>(propertiesToTransfer);
+                PropertiesToTransfer = new List<string>(propertiesToTransfer);
             }
         }
 
@@ -165,7 +162,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         {
             ErrorUtilities.VerifyThrowArgumentNull(requestedProjectState, nameof(requestedProjectState));
 
-            this.RequestedProjectState = requestedProjectState;
+            RequestedProjectState = requestedProjectState;
         }
 
 
@@ -199,7 +196,7 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         {
             ErrorUtilities.VerifyThrowArgumentNull(requestedProjectState, nameof(requestedProjectState));
 
-            this.RequestedProjectState = requestedProjectState;
+            RequestedProjectState = requestedProjectState;
         }
 
         /// <summary>
@@ -214,10 +211,10 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, string toolsVersion, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
             : this(targetsToBuild, hostServices, flags)
         {
-            ErrorUtilities.VerifyThrowArgumentLength(projectFullPath, "projectFullPath");
-            ErrorUtilities.VerifyThrowArgumentNull(globalProperties, "globalProperties");
+            ErrorUtilities.VerifyThrowArgumentLength(projectFullPath, nameof(projectFullPath));
+            ErrorUtilities.VerifyThrowArgumentNull(globalProperties, nameof(globalProperties));
 
-            this.ProjectFullPath = FileUtilities.NormalizePath(projectFullPath);
+            ProjectFullPath = FileUtilities.NormalizePath(projectFullPath);
             TargetNames = (ICollection<string>)targetsToBuild.Clone();
             GlobalPropertiesDictionary = new PropertyDictionary<ProjectPropertyInstance>(globalProperties.Count);
             foreach (KeyValuePair<string, string> propertyPair in globalProperties)
@@ -233,7 +230,7 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         /// </summary>
         private BuildRequestData(string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(targetsToBuild, "targetsToBuild");
+            ErrorUtilities.VerifyThrowArgumentNull(targetsToBuild, nameof(targetsToBuild));
 
             HostServices = hostServices;
             TargetNames = new List<string>(targetsToBuild);
@@ -248,103 +245,61 @@ private BuildRequestData(string[] targetsToBuild, HostServices hostServices, Bui
         public ProjectInstance ProjectInstance
         {
             get;
-            private set;
         }
 
         /// <summary>The project file.</summary>
         /// <value>The project file to be built.</value>
-        public string ProjectFullPath
-        {
-            get;
-            internal set;
-        }
+        public string ProjectFullPath { get; internal set; }
 
         /// <summary>
         /// The name of the targets to build.
         /// </summary>
         /// <value>An array of targets in the project to be built.</value>
-        public ICollection<string> TargetNames
-        {
-            get;
-            private set;
-        }
+        public ICollection<string> TargetNames { get; }
 
         /// <summary>
         /// Extra flags for this BuildRequest.
         /// </summary>
-        public BuildRequestDataFlags Flags
-        {
-            get;
-            private set;
-        }
+        public BuildRequestDataFlags Flags { get; }
 
         /// <summary>
         /// The global properties to use.
         /// </summary>
         /// <value>The set of global properties to be used to build this request.</value>
-        public ICollection<ProjectPropertyInstance> GlobalProperties
-        {
-            get
-            {
-                return (GlobalPropertiesDictionary == null) ?
-                    (ICollection<ProjectPropertyInstance>)ReadOnlyEmptyCollection<ProjectPropertyInstance>.Instance :
-                    new ReadOnlyCollection<ProjectPropertyInstance>(GlobalPropertiesDictionary);
-            }
-        }
+        public ICollection<ProjectPropertyInstance> GlobalProperties => (GlobalPropertiesDictionary == null) ?
+            (ICollection<ProjectPropertyInstance>)ReadOnlyEmptyCollection<ProjectPropertyInstance>.Instance :
+            new ReadOnlyCollection<ProjectPropertyInstance>(GlobalPropertiesDictionary);
 
         /// <summary>
         /// The explicitly requested tools version to use.
         /// </summary>
-        public string ExplicitlySpecifiedToolsVersion
-        {
-            get;
-            private set;
-        }
+        public string ExplicitlySpecifiedToolsVersion { get; }
 
         /// <summary>
         /// Gets the HostServices object for this request.
         /// </summary>
-        public HostServices HostServices
-        {
-            get;
-            private set;
-        }
+        public HostServices HostServices { get; }
 
         /// <summary>
         /// Returns a list of properties to transfer out of proc for the build.
         /// </summary>
-        public IEnumerable<string> PropertiesToTransfer
-        {
-            get;
-            private set;
-        }
+        public IEnumerable<string> PropertiesToTransfer { get; }
 
         /// <summary>
         /// Returns the properties, items, and metadata that will be returned
         /// by this build.
         /// </summary>
-        public RequestedProjectState RequestedProjectState
-        {
-            get;
-            private set;
-        }
+        public RequestedProjectState RequestedProjectState { get; }
 
         /// <summary>
         /// Whether the tools version used originated from an explicit specification,
         /// for example from an MSBuild task or /tv switch.
         /// </summary>
-        internal bool ExplicitToolsVersionSpecified
-        {
-            get { return (ExplicitlySpecifiedToolsVersion != null); }
-        }
+        internal bool ExplicitToolsVersionSpecified => (ExplicitlySpecifiedToolsVersion != null);
 
         /// <summary>
         /// Returns the global properties as a dictionary.
         /// </summary>
-        internal PropertyDictionary<ProjectPropertyInstance> GlobalPropertiesDictionary
-        {
-            get;
-            private set;
-        }
+        internal PropertyDictionary<ProjectPropertyInstance> GlobalPropertiesDictionary { get; }
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 295de58f868..cb93b7ef844 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -6,12 +6,7 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
 using System.Threading;
-using System.Runtime.InteropServices;
-
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using System.Globalization;
@@ -43,7 +38,7 @@ public class BuildSubmission
         /// <summary>
         /// The completion event.
         /// </summary>
-        private ManualResetEvent _completionEvent;
+        private readonly ManualResetEvent _completionEvent;
 
         /// <summary>
         /// Flag indicating if logging is done.
@@ -55,23 +50,18 @@ public class BuildSubmission
         /// </summary>
         private int _completionInvoked;
 
-        /// <summary>
-        /// The results of the build.
-        /// </summary>
-        private BuildResult _buildResult;
-
         /// <summary>
         /// Flag indicating whether synchronous wait should support legacy threading semantics.
         /// </summary>
-        private bool _legacyThreadingSemantics;
+        private readonly bool _legacyThreadingSemantics;
 
         /// <summary>
         /// Constructor
         /// </summary>
         internal BuildSubmission(BuildManager buildManager, int submissionId, BuildRequestData requestData, bool legacyThreadingSemantics)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(buildManager, "buildManager");
-            ErrorUtilities.VerifyThrowArgumentNull(requestData, "requestData");
+            ErrorUtilities.VerifyThrowArgumentNull(buildManager, nameof(buildManager));
+            ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
 
             BuildManager = buildManager;
             SubmissionId = submissionId;
@@ -85,85 +75,42 @@ internal BuildSubmission(BuildManager buildManager, int submissionId, BuildReque
         /// <summary>
         /// The BuildManager with which this submission is associated.
         /// </summary>
-        public BuildManager BuildManager
-        {
-            get;
-            private set;
-        }
+        public BuildManager BuildManager { get; }
 
         /// <summary>
         /// An ID uniquely identifying this request from among other submissions within the same build.
         /// </summary>
-        public int SubmissionId
-        {
-            get;
-            private set;
-        }
+        public int SubmissionId { get; }
 
         /// <summary>
         /// The asynchronous context provided to <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/>, if any.
         /// </summary>
-        public Object AsyncContext
-        {
-            get;
-            private set;
-        }
+        public Object AsyncContext { get; private set; }
 
         /// <summary>
         /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmission.Execute()"/> or <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/> returns, otherwise null.
         /// </summary>
-        public WaitHandle WaitHandle
-        {
-            get
-            {
-                return _completionEvent;
-            }
-        }
+        public WaitHandle WaitHandle => _completionEvent;
 
         /// <summary>
         /// Returns true if this submission is complete.
         /// </summary>
-        public bool IsCompleted
-        {
-            get
-            {
-                return WaitHandle.WaitOne(new TimeSpan(0));
-            }
-        }
+        public bool IsCompleted => WaitHandle.WaitOne(new TimeSpan(0));
 
         /// <summary>
         /// The result of the build.  Valid only after WaitHandle has become signalled.
         /// </summary>
-        public BuildResult BuildResult
-        {
-            get
-            {
-                return _buildResult;
-            }
-
-            set
-            {
-                _buildResult = value;
-            }
-        }
+        public BuildResult BuildResult { get; set; }
 
         /// <summary>
         /// The BuildRequestData being used for this submission.
         /// </summary>
-        internal BuildRequestData BuildRequestData
-        {
-            get;
-            private set;
-        }
+        internal BuildRequestData BuildRequestData { get; }
 
         /// <summary>
         /// The build request for execution.
         /// </summary>
-        internal BuildRequest BuildRequest
-        {
-            get;
-            set;
-        }
+        internal BuildRequest BuildRequest { get; set; }
 
         /// <summary>
         /// Starts the request and blocks until results are available.
@@ -172,19 +119,19 @@ internal BuildRequest BuildRequest
         public BuildResult Execute()
         {
             LegacyThreadingData legacyThreadingData = ((IBuildComponentHost)BuildManager).LegacyThreadingData;
-            legacyThreadingData.RegisterSubmissionForLegacyThread(this.SubmissionId);
+            legacyThreadingData.RegisterSubmissionForLegacyThread(SubmissionId);
 
             ExecuteAsync(null, null, _legacyThreadingSemantics);
             if (_legacyThreadingSemantics)
             {
-                RequestBuilder.WaitWithBuilderThreadStart(new WaitHandle[] { WaitHandle }, false, legacyThreadingData, this.SubmissionId);
+                RequestBuilder.WaitWithBuilderThreadStart(new[] { WaitHandle }, false, legacyThreadingData, SubmissionId);
             }
             else
             {
                 WaitHandle.WaitOne();
             }
 
-            legacyThreadingData.UnregisterSubmissionForLegacyThread(this.SubmissionId);
+            legacyThreadingData.UnregisterSubmissionForLegacyThread(SubmissionId);
 
             return BuildResult;
         }
@@ -203,7 +150,7 @@ public void ExecuteAsync(BuildSubmissionCompleteCallback callback, object contex
         /// </summary>
         internal void CompleteResults(BuildResult result)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(result, "result");
+            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
 
             // We verify that we got results from the same configuration, but not necessarily the same request, because we are 
             // rather flexible in how users are allowed to submit multiple requests for the same configuration.  In this case, the
@@ -226,7 +173,7 @@ internal void CompleteLogging(bool waitForLoggingThread)
         {
             if (waitForLoggingThread)
             {
-                ((Microsoft.Build.BackEnd.Logging.LoggingService)((IBuildComponentHost)BuildManager).LoggingService).WaitForThreadToProcessEvents();
+                ((BackEnd.Logging.LoggingService)((IBuildComponentHost)BuildManager).LoggingService).WaitForThreadToProcessEvents();
             }
 
             LoggingCompleted = true;
@@ -259,14 +206,12 @@ private void CheckForCompletion()
 
                     if (null != _completionCallback)
                     {
-                        WaitCallback callback = new WaitCallback
-                        (
-                         delegate (object state)
-                         {
-                             _completionCallback(this);
-                         });
-
-                        ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
+                        void Callback(object state)
+                        {
+                            _completionCallback(this);
+                        }
+
+                        ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
                     }
                 }
             }
diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index d27739d584a..0a7ed670a97 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -26,7 +26,7 @@ internal class LegacyThreadingData
         /// Item1: Start event, tracks when the submission has permission to start building. 
         /// Item2: End event, signalled when that submission is no longer using the legacy thread. 
         /// </summary>
-        private IDictionary<int, Tuple<AutoResetEvent, ManualResetEvent>> _legacyThreadingEventsById = new Dictionary<int, Tuple<AutoResetEvent, ManualResetEvent>>();
+        private readonly IDictionary<int, Tuple<AutoResetEvent, ManualResetEvent>> _legacyThreadingEventsById = new Dictionary<int, Tuple<AutoResetEvent, ManualResetEvent>>();
 
         /// <summary>
         /// The current submission id building on the main thread, if any.
@@ -42,7 +42,7 @@ internal class LegacyThreadingData
         /// Lock object for startNewRequestBuilderMainThreadEventsById, since it's possible for multiple submissions to be 
         /// submitted at the same time. 
         /// </summary>
-        private Object _legacyThreadingEventsLock = new Object();
+        private readonly Object _legacyThreadingEventsLock = new Object();
         #endregion
 
         #region Properties
@@ -52,10 +52,7 @@ internal class LegacyThreadingData
         /// </summary>
         internal RequestBuilder InstanceForMainThread
         {
-            get
-            {
-                return _instanceForMainThread;
-            }
+            get => _instanceForMainThread;
 
             set
             {
@@ -69,10 +66,7 @@ internal RequestBuilder InstanceForMainThread
         /// </summary>
         internal int MainThreadSubmissionId
         {
-            get
-            {
-                return _mainThreadSubmissionId;
-            }
+            get => _mainThreadSubmissionId;
 
             set
             {
@@ -127,7 +121,7 @@ internal void UnregisterSubmissionForLegacyThread(int submissionId)
         /// </summary>
         internal WaitHandle GetStartRequestBuilderMainThreadEventForSubmission(int submissionId)
         {
-            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents = null;
+            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents;
 
             lock (_legacyThreadingEventsLock)
             {
@@ -145,7 +139,7 @@ internal WaitHandle GetStartRequestBuilderMainThreadEventForSubmission(int submi
         /// </summary>
         internal Task GetLegacyThreadInactiveTask(int submissionId)
         {
-            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents = null;
+            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents;
 
             lock (_legacyThreadingEventsLock)
             {
@@ -164,16 +158,14 @@ internal void SignalLegacyThreadStart(RequestBuilder instance)
         {
             ErrorUtilities.VerifyThrow
                 (
-                    instance != null &&
-                    instance.RequestEntry != null &&
-                    instance.RequestEntry.Request != null,
+                    instance?.RequestEntry?.Request != null,
                     "Cannot signal legacy thread start for a RequestBuilder without a request"
                 );
 
             int submissionId = instance.RequestEntry.Request.SubmissionId;
-            this.InstanceForMainThread = instance;
+            InstanceForMainThread = instance;
 
-            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents = null;
+            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents;
             lock (_legacyThreadingEventsLock)
             {
                 _legacyThreadingEventsById.TryGetValue(submissionId, out legacyThreadingEvents);
@@ -193,9 +185,9 @@ internal void SignalLegacyThreadStart(RequestBuilder instance)
         /// </summary>
         internal void SignalLegacyThreadEnd(int submissionId)
         {
-            this.MainThreadSubmissionId = -1;
+            MainThreadSubmissionId = -1;
 
-            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents = null;
+            Tuple<AutoResetEvent, ManualResetEvent> legacyThreadingEvents;
             lock (_legacyThreadingEventsLock)
             {
                 _legacyThreadingEventsById.TryGetValue(submissionId, out legacyThreadingEvents);
diff --git a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
index 94c1b248cd8..d07060b06c7 100644
--- a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
+++ b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
@@ -20,8 +20,8 @@ public class RequestedProjectState : INodePacketTranslatable
         /// </summary>
         public List<string> PropertyFilters
         {
-            get { return _propertyFilters; }
-            set { _propertyFilters = value; }
+            get => _propertyFilters;
+            set => _propertyFilters = value;
         }
 
         /// <summary>
@@ -29,8 +29,8 @@ public List<string> PropertyFilters
         /// </summary>
         public IDictionary<string, List<string>> ItemFilters
         {
-            get { return _itemFilters; }
-            set { _itemFilters = value; }
+            get => _itemFilters;
+            set => _itemFilters = value;
         }
 
         void INodePacketTranslatable.Translate(INodePacketTranslator translator)
@@ -39,17 +39,17 @@ void INodePacketTranslatable.Translate(INodePacketTranslator translator)
             translator.TranslateDictionary(ref _itemFilters, TranslateString, TranslateMetadataForItem, CreateItemMetadataDictionary);
         }
 
-        private IDictionary<string, List<string>> CreateItemMetadataDictionary(int capacity)
+        private static IDictionary<string, List<string>> CreateItemMetadataDictionary(int capacity)
         {
             return new Dictionary<string, List<string>>(capacity, StringComparer.OrdinalIgnoreCase);
         }
 
-        private void TranslateMetadataForItem(ref List<string> list, INodePacketTranslator translator)
+        private static void TranslateMetadataForItem(ref List<string> list, INodePacketTranslator translator)
         {
             translator.Translate(ref list);
         }
 
-        private void TranslateString(ref string s, INodePacketTranslator translator)
+        private static void TranslateString(ref string s, INodePacketTranslator translator)
         {
             translator.Translate(ref s);
         }
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index c820bd48913..673edd275d2 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -5,10 +5,7 @@
 // <summary>A collection of component factories.</summary>
 //-----------------------------------------------------------------------
 
-using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Shared;
@@ -23,12 +20,12 @@ internal class BuildComponentFactoryCollection
         /// <summary>
         /// The build component factories.
         /// </summary>
-        private Dictionary<BuildComponentType, BuildComponentEntry> _componentEntriesByType;
+        private readonly Dictionary<BuildComponentType, BuildComponentEntry> _componentEntriesByType;
 
         /// <summary>
         /// The host used to initialize components.
         /// </summary>
-        private IBuildComponentHost _host;
+        private readonly IBuildComponentHost _host;
 
         /// <summary>
         /// Constructor.
@@ -150,9 +147,7 @@ public void AddFactory(BuildComponentType componentType, BuildComponentFactoryDe
         /// <returns>The component</returns>
         public IBuildComponent GetComponent(BuildComponentType type)
         {
-            BuildComponentEntry componentEntry = null;
-
-            if (!_componentEntriesByType.TryGetValue(type, out componentEntry))
+            if (!_componentEntriesByType.TryGetValue(type, out BuildComponentEntry componentEntry))
             {
                 ErrorUtilities.ThrowInternalError("No factory registered for component type {0}", type);
             }
@@ -180,9 +175,9 @@ private class BuildComponentEntry
             /// </summary>
             public BuildComponentEntry(BuildComponentType type, BuildComponentFactoryDelegate factory, CreationPattern pattern)
             {
-                this.ComponentType = type;
+                ComponentType = type;
                 _factory = factory;
-                this.Pattern = pattern;
+                Pattern = pattern;
             }
 
             /// <summary>
@@ -190,27 +185,20 @@ public BuildComponentEntry(BuildComponentType type, BuildComponentFactoryDelegat
             /// </summary>
             public BuildComponentEntry(BuildComponentType type, IBuildComponent singleton)
             {
+                ComponentType = type;
                 _singleton = singleton;
-                this.Pattern = CreationPattern.Singleton;
+                Pattern = CreationPattern.Singleton;
             }
 
             /// <summary>
             /// Retrieves the component type.
             /// </summary>
-            public BuildComponentType ComponentType
-            {
-                get;
-                private set;
-            }
+            private BuildComponentType ComponentType { get; }
 
             /// <summary>
             /// Retrieves the creation pattern.
             /// </summary>
-            public CreationPattern Pattern
-            {
-                get;
-                private set;
-            }
+            public CreationPattern Pattern { get; }
 
             /// <summary>
             /// Gets an instance of the component.
@@ -227,12 +215,10 @@ public IBuildComponent GetInstance(IBuildComponentHost host)
 
                     return _singleton;
                 }
-                else
-                {
-                    IBuildComponent component = _factory(ComponentType);
-                    component.InitializeComponent(host);
-                    return component;
-                }
+
+                IBuildComponent component = _factory(ComponentType);
+                component.InitializeComponent(host);
+                return component;
             }
 
             /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
index 00e3f99310f..3be20523f6f 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
@@ -5,12 +5,6 @@
 // <summary>Packet used to communicate configuration id back to the node</summary>
 //-----------------------------------------------------------------------
 
-using System;
-using System.Collections.Generic;
-using System.Text;
-using Microsoft.Build.Shared;
-using Microsoft.Build.Framework;
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -60,39 +54,24 @@ private BuildRequestConfigurationResponse(INodePacketTranslator translator)
         /// <summary>
         /// Returns the node-assigned configuration id
         /// </summary>
-        public int NodeConfigurationId
-        {
-            get { return _nodeConfigId; }
-        }
+        public int NodeConfigurationId => _nodeConfigId;
 
         /// <summary>
         /// Returns the build manager assigned configuration id
         /// </summary>
-        public int GlobalConfigurationId
-        {
-            get { return _globalConfigId; }
-        }
+        public int GlobalConfigurationId => _globalConfigId;
 
         /// <summary>
         /// Returns the results node for the global configuration.
         /// </summary>
-        public int ResultsNodeId
-        {
-            get { return _resultsNodeId; }
-        }
+        public int ResultsNodeId => _resultsNodeId;
 
         #region INodePacket Members
 
         /// <summary>
         /// INodePacket property.  Returns the packet type.
         /// </summary>
-        public NodePacketType Type
-        {
-            get
-            {
-                return NodePacketType.BuildRequestConfigurationResponse;
-            }
-        }
+        public NodePacketType Type => NodePacketType.BuildRequestConfigurationResponse;
 
         /// <summary>
         /// Reads/writes this packet
@@ -107,7 +86,7 @@ public void Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(INodePacketTranslator translator)
+        internal static INodePacket FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new BuildRequestConfigurationResponse(translator);
         }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 8fe695ccb3f..91a299943c9 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -12,7 +12,6 @@
 using System.Globalization;
 using System.IO;
 using System.Threading;
-using System.Threading.Tasks;
 using System.Threading.Tasks.Dataflow;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Execution;
@@ -63,17 +62,17 @@ internal class BuildRequestEngine : IBuildRequestEngine, IBuildComponent
         /// <summary>
         /// The list of current requests the engine is working on.
         /// </summary>
-        private List<BuildRequestEntry> _requests;
+        private readonly List<BuildRequestEntry> _requests;
 
         /// <summary>
         /// Mapping of global request ids to the request entries.
         /// </summary>
-        private Dictionary<int, BuildRequestEntry> _requestsByGlobalRequestId;
+        private readonly Dictionary<int, BuildRequestEntry> _requestsByGlobalRequestId;
 
         /// <summary>
         /// The list of requests currently waiting to be submitted from RequestBuilders.
         /// </summary>
-        private Queue<PendingUnsubmittedBuildRequests> _unsubmittedRequests;
+        private readonly Queue<PendingUnsubmittedBuildRequests> _unsubmittedRequests;
 
         /// <summary>
         /// The next available local unresolved configuration Id
@@ -103,17 +102,17 @@ internal class BuildRequestEngine : IBuildRequestEngine, IBuildComponent
         /// <summary>
         /// Flag indicating if we should trace.
         /// </summary>
-        private bool _debugDumpState;
+        private readonly bool _debugDumpState;
 
         /// <summary>
         /// The path where we will store debug files
         /// </summary>
-        private string _debugDumpPath;
+        private readonly string _debugDumpPath;
 
         /// <summary>
         /// Forces caching of all configurations and results.
         /// </summary>
-        private bool _debugForceCaching;
+        private readonly bool _debugForceCaching;
 
         /// <summary>
         /// Constructor
@@ -172,13 +171,7 @@ internal BuildRequestEngine()
         /// <summary>
         /// Returns the current engine status.
         /// </summary>
-        public BuildRequestEngineStatus Status
-        {
-            get
-            {
-                return _status;
-            }
-        }
+        public BuildRequestEngineStatus Status => _status;
 
         /// <summary>
         /// Prepares the build request engine to run a build.
@@ -220,8 +213,8 @@ public void CleanupForBuild()
 
                     // Determine how many requests there are to shut down, then terminate all of their builders.
                     // We will capture the exceptions which happen here (but continue shutting down gracefully.)
-                    List<BuildRequestEntry> requestsToShutdown = new List<BuildRequestEntry>(_requests);
-                    List<Exception> deactivateExceptions = new List<Exception>(_requests.Count);
+                    var requestsToShutdown = new List<BuildRequestEntry>(_requests);
+                    var deactivateExceptions = new List<Exception>(_requests.Count);
 
                     // VC observed their tasks (e.g. "CL") received the "cancel" event in several seconds after CTRL+C was captured;
                     // and the reason was we signaled the "cancel" event to the build request and wait for its completion one by one.
@@ -506,10 +499,10 @@ public void ReportConfigurationResponse(BuildRequestConfigurationResponse respon
                     // If any requests can now issue build requests, do so.
                     IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
 
-                    List<BuildRequestBlocker> blockersToIssue = new List<BuildRequestBlocker>();
+                    var blockersToIssue = new List<BuildRequestBlocker>();
                     foreach (BuildRequestEntry currentEntry in _requests)
                     {
-                        List<BuildRequest> requestsToIssue = new List<BuildRequest>();
+                        var requestsToIssue = new List<BuildRequest>();
                         if (currentEntry.State == BuildRequestEntryState.Waiting)
                         {
                             // Resolve the configuration id and get the list of requests to be issued, if any.
@@ -633,11 +626,7 @@ private void RaiseRequestComplete(BuildRequest request, BuildResult result)
         /// <param name="request">The request being resumed.</param>
         private void RaiseRequestResumed(BuildRequest request)
         {
-            RequestResumedDelegate requestResumed = OnRequestResumed;
-            if (null != requestResumed)
-            {
-                requestResumed(request);
-            }
+            OnRequestResumed?.Invoke(request);
         }
 
         /// <summary>
@@ -646,11 +635,7 @@ private void RaiseRequestResumed(BuildRequest request)
         /// <param name="e">The exception being thrown.</param>
         private void RaiseEngineException(Exception e)
         {
-            EngineExceptionDelegate engineException = OnEngineException;
-            if (null != engineException)
-            {
-                engineException(e);
-            }
+            OnEngineException?.Invoke(e);
         }
 
         /// <summary>
@@ -659,11 +644,7 @@ private void RaiseEngineException(Exception e)
         /// <param name="blocker">Information about what is blocking the current request.</param>
         private void RaiseRequestBlocked(BuildRequestBlocker blocker)
         {
-            RequestBlockedDelegate requestBlocked = OnRequestBlocked;
-            if (null != requestBlocked)
-            {
-                requestBlocked(blocker);
-            }
+            OnRequestBlocked?.Invoke(blocker);
         }
 
         /// <summary>
@@ -672,11 +653,7 @@ private void RaiseRequestBlocked(BuildRequestBlocker blocker)
         /// <param name="newStatus">The new engine status.</param>
         private void RaiseEngineStatusChanged(BuildRequestEngineStatus newStatus)
         {
-            EngineStatusChangedDelegate statusChanged = OnStatusChanged;
-            if (null != statusChanged)
-            {
-                statusChanged(newStatus);
-            }
+            OnStatusChanged?.Invoke(newStatus);
         }
 
         /// <summary>
@@ -685,11 +662,7 @@ private void RaiseEngineStatusChanged(BuildRequestEngineStatus newStatus)
         /// <param name="config">The configuration which needs resolving.</param>
         private void RaiseNewConfigurationRequest(BuildRequestConfiguration config)
         {
-            NewConfigurationRequestDelegate configRequest = OnNewConfigurationRequest;
-            if (null != configRequest)
-            {
-                configRequest(config);
-            }
+            OnNewConfigurationRequest?.Invoke(config);
         }
 
         #endregion
@@ -717,7 +690,7 @@ private void EvaluateRequestStates()
             BuildRequestEntry activeEntry = null;
             BuildRequestEntry firstReadyEntry = null;
             int waitingRequests = 0;
-            List<BuildRequestEntry> completedEntries = new List<BuildRequestEntry>();
+            var completedEntries = new List<BuildRequestEntry>();
 
             foreach (BuildRequestEntry currentEntry in _requests)
             {
@@ -781,14 +754,8 @@ private void EvaluateRequestStates()
                 }
                 else
                 {
-                    if (waitingRequests == 0)
-                    {
-                        ChangeStatus(BuildRequestEngineStatus.Idle);
-                    }
-                    else
-                    {
-                        ChangeStatus(BuildRequestEngineStatus.Waiting);
-                    }
+                    ChangeStatus(
+                        waitingRequests == 0 ? BuildRequestEngineStatus.Idle : BuildRequestEngineStatus.Waiting);
                 }
             }
             else
@@ -802,8 +769,8 @@ private void EvaluateRequestStates()
             foreach (BuildRequestEntry completedEntry in completedEntries)
             {
                 // Shut it down because we already have enough in reserve.
-                completedEntry.Builder.OnNewBuildRequests -= new NewBuildRequestsDelegate(Builder_OnNewBuildRequests);
-                completedEntry.Builder.OnBuildRequestBlocked -= new BuildRequestBlockedDelegate(Builder_OnBlockedRequest);
+                completedEntry.Builder.OnNewBuildRequests -= Builder_OnNewBuildRequests;
+                completedEntry.Builder.OnBuildRequestBlocked -= Builder_OnBlockedRequest;
                 ((IBuildComponent)completedEntry.Builder).ShutdownComponent();
 
                 BuildRequestConfiguration configuration = _configCache[completedEntry.Request.ConfigurationId];
@@ -898,7 +865,7 @@ private void CheckMemoryUsage()
                 {
                     _nodeLoggingContext.LogFatalBuildError(
                         e,
-                        new BuildEventFileInfo(Microsoft.Build.Construction.ElementLocation.EmptyLocation));
+                        new BuildEventFileInfo(Construction.ElementLocation.EmptyLocation));
                     throw new BuildAbortedException(e.Message, e);
                 }
             }
@@ -943,8 +910,8 @@ private IRequestBuilder GetRequestBuilder()
 
             // NOTE: We do NOT need to register for the OnBuildRequestCompleted because we already watch the BuildRequestEntry
             // state changes.
-            builder.OnNewBuildRequests += new NewBuildRequestsDelegate(Builder_OnNewBuildRequests);
-            builder.OnBuildRequestBlocked += new BuildRequestBlockedDelegate(Builder_OnBlockedRequest);
+            builder.OnNewBuildRequests += Builder_OnNewBuildRequests;
+            builder.OnBuildRequestBlocked += Builder_OnBlockedRequest;
 
             return builder;
         }
@@ -953,7 +920,7 @@ private IRequestBuilder GetRequestBuilder()
         /// Starts to terminate any builder associated with the entry and clean it up in preparation for removal.
         /// </summary>
         /// <param name="entry">The entry to be deactivated</param>
-        private void BeginDeactivateBuildRequest(BuildRequestEntry entry)
+        private static void BeginDeactivateBuildRequest(BuildRequestEntry entry)
         {
             if (entry.Builder != null)
             {
@@ -965,7 +932,7 @@ private void BeginDeactivateBuildRequest(BuildRequestEntry entry)
         /// Waits for the builders until they are terminated.
         /// </summary>
         /// <param name="entry">The entry to be deactivated</param>
-        private void WaitForDeactivateCompletion(BuildRequestEntry entry)
+        private static void WaitForDeactivateCompletion(BuildRequestEntry entry)
         {
             if (entry.Builder != null)
             {
@@ -1024,8 +991,7 @@ private void IssueUnsubmittedRequests()
             int countToSubmit = _unsubmittedRequests.Count;
             while (countToSubmit != 0)
             {
-                PendingUnsubmittedBuildRequests unsubmittedRequest;
-                unsubmittedRequest = _unsubmittedRequests.Dequeue();
+                PendingUnsubmittedBuildRequests unsubmittedRequest = _unsubmittedRequests.Dequeue();
 
                 BuildRequestEntry sourceEntry = unsubmittedRequest.SourceEntry;
 
@@ -1118,14 +1084,14 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
             // to the entry rather than a series of them.
             lock (issuingEntry.GlobalLock)
             {
-                List<BuildResult> existingResultsToReport = new List<BuildResult>();
-                HashSet<NGen<int>> unresolvedConfigurationsAdded = new HashSet<NGen<int>>();
+                var existingResultsToReport = new List<BuildResult>();
+                var unresolvedConfigurationsAdded = new HashSet<NGen<int>>();
 
                 foreach (FullyQualifiedBuildRequest request in newRequests)
                 {
                     // Do we have a matching configuration?
                     BuildRequestConfiguration matchingConfig = globalConfigCache.GetMatchingConfiguration(request.Config);
-                    BuildRequest newRequest = null;
+                    BuildRequest newRequest;
 
                     BuildRequestDataFlags buildRequestDataFlags = request.BuildRequestDataFlags;
 
@@ -1326,15 +1292,14 @@ private void IssueBuildRequest(BuildRequestBlocker blocker)
         /// <param name="isLastTask"><code>true</code> if this is the last task for this queue, otherwise <code>false</code>.</param>
         /// <returns>True if the task was scheduled, false otherwise.</returns>
         /// <remarks>This method will return false if an attempt is made to schedule an action after the queue has been shut down.</remarks>
-        private bool QueueAction(Action action, bool isLastTask)
+        private void QueueAction(Action action, bool isLastTask)
         {
-            bool actionQueued = false;
-            var queue = _workQueue;
+            ActionBlock<Action> queue = _workQueue;
             if (queue != null)
             {
                 lock (queue)
                 {
-                    actionQueued = queue.Post(
+                    queue.Post(
                         () =>
                         {
                             try
@@ -1374,8 +1339,6 @@ private bool QueueAction(Action action, bool isLastTask)
                     }
                 }
             }
-
-            return actionQueued;
         }
 
         /// <summary>
@@ -1407,22 +1370,22 @@ private struct PendingUnsubmittedBuildRequests
             /// <summary>
             /// The global request id on which we are blocking
             /// </summary>
-            public int BlockingGlobalRequestId;
+            public readonly int BlockingGlobalRequestId;
 
             /// <summary>
             /// The target on which we are blocking
             /// </summary>
-            public string BlockingTarget;
+            public readonly string BlockingTarget;
 
             /// <summary>
             /// The issuing request
             /// </summary>
-            public BuildRequestEntry SourceEntry;
+            public readonly BuildRequestEntry SourceEntry;
 
             /// <summary>
             /// The new requests to issue
             /// </summary>
-            public FullyQualifiedBuildRequest[] NewRequests;
+            public readonly FullyQualifiedBuildRequest[] NewRequests;
 
             /// <summary>
             /// Create a new unsubmitted request entry
@@ -1431,11 +1394,11 @@ private struct PendingUnsubmittedBuildRequests
             /// <param name="newRequests">The new requests to be issued.</param>
             public PendingUnsubmittedBuildRequests(BuildRequestEntry sourceEntry, FullyQualifiedBuildRequest[] newRequests)
             {
-                this.SourceEntry = sourceEntry;
-                this.NewRequests = newRequests;
-                this.BlockingGlobalRequestId = BuildRequest.InvalidGlobalRequestId;
-                this.BlockingTarget = null;
-                this.PartialBuildResult = null;
+                SourceEntry = sourceEntry;
+                NewRequests = newRequests;
+                BlockingGlobalRequestId = BuildRequest.InvalidGlobalRequestId;
+                BlockingTarget = null;
+                PartialBuildResult = null;
             }
 
             /// <summary>
@@ -1444,17 +1407,17 @@ public PendingUnsubmittedBuildRequests(BuildRequestEntry sourceEntry, FullyQuali
             /// <param name="sourceEntry">The build request originating these requests.</param>
             /// <param name="blockingGlobalRequestId">The request on which we are blocked.</param>
             /// <param name="blockingTarget">The target on which we are blocked.</param>
-            public PendingUnsubmittedBuildRequests(BuildRequestEntry sourceEntry, int blockingGlobalRequestId, string blockingTarget)
+            private PendingUnsubmittedBuildRequests(BuildRequestEntry sourceEntry, int blockingGlobalRequestId, string blockingTarget)
             {
-                this.SourceEntry = sourceEntry;
-                this.NewRequests = null;
-                this.BlockingGlobalRequestId = blockingGlobalRequestId;
-                this.BlockingTarget = blockingTarget;
-                this.PartialBuildResult = null;
+                SourceEntry = sourceEntry;
+                NewRequests = null;
+                BlockingGlobalRequestId = blockingGlobalRequestId;
+                BlockingTarget = blockingTarget;
+                PartialBuildResult = null;
             }
 
             public PendingUnsubmittedBuildRequests(BuildRequestEntry sourceEntry, int blockingGlobalRequestId, string blockingTarget, BuildResult partialBuildResult)
-            : this(sourceEntry, blockingGlobalRequestId, blockingTarget)
+                : this(sourceEntry, blockingGlobalRequestId, blockingTarget)
             {
                 PartialBuildResult = partialBuildResult;
             }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index f4691bcc77f..8fa564ac9a5 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -8,13 +8,11 @@
 using System;
 using System.IO;
 using System.Collections.Generic;
-using System.Text;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
 using System.Diagnostics;
 
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
-using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -78,26 +76,6 @@ internal enum BuildRequestEntryState
     /// </summary>
     internal class BuildRequestEntry
     {
-        /// <summary>
-        /// A class used for thread synchronization
-        /// </summary>
-        private Object _dataMonitor;
-
-        /// <summary>
-        /// The request for this entry
-        /// </summary>
-        private BuildRequest _request;
-
-        /// <summary>
-        /// The request configuration.
-        /// </summary>
-        private BuildRequestConfiguration _requestConfiguration;
-
-        /// <summary>
-        /// The result of building this entry's request
-        /// </summary>
-        private BuildResult _completedResult;
-
         /// <summary>
         /// Mapping of Build Request Configurations to Build Requests waiting for configuration resolution.
         /// </summary>
@@ -129,11 +107,6 @@ internal class BuildRequestEntry
         /// </summary>
         private int _blockingGlobalRequestId;
 
-        /// <summary>
-        /// The current state of this entry.
-        /// </summary>
-        private BuildRequestEntryState _state;
-
         /// <summary>
         /// The object used to build this request.
         /// </summary>
@@ -151,15 +124,15 @@ internal class BuildRequestEntry
         /// <param name="requestConfiguration">The build request configuration.</param>
         internal BuildRequestEntry(BuildRequest request, BuildRequestConfiguration requestConfiguration)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(request, "request");
-            ErrorUtilities.VerifyThrowArgumentNull(requestConfiguration, "requestConfiguration");
+            ErrorUtilities.VerifyThrowArgumentNull(request, nameof(request));
+            ErrorUtilities.VerifyThrowArgumentNull(requestConfiguration, nameof(requestConfiguration));
             ErrorUtilities.VerifyThrow(requestConfiguration.ConfigurationId == request.ConfigurationId, "Configuration id mismatch");
 
-            _dataMonitor = new Object();
-            _request = request;
-            _requestConfiguration = requestConfiguration;
+            GlobalLock = new Object();
+            Request = request;
+            RequestConfiguration = requestConfiguration;
             _blockingGlobalRequestId = BuildRequest.InvalidGlobalRequestId;
-            _completedResult = null;
+            Result = null;
             ChangeState(BuildRequestEntryState.Ready);
         }
 
@@ -171,68 +144,33 @@ internal BuildRequestEntry(BuildRequest request, BuildRequestConfiguration reque
         /// <summary>
         /// Returns the object used to lock for synchronization of long-running operations.
         /// </summary>
-        public Object GlobalLock
-        {
-            [DebuggerStepThrough]
-            get
-            { return _dataMonitor; }
-        }
+        public Object GlobalLock { [DebuggerStepThrough] get; }
 
         /// <summary>
         /// Returns the root directory for the project being built by this request.
         /// </summary>
-        public string ProjectRootDirectory
-        {
-            get
-            {
-                if (_projectRootDirectory == null)
-                {
-                    _projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath);
-                }
-
-                return _projectRootDirectory;
-            }
-        }
+        public string ProjectRootDirectory => _projectRootDirectory ??
+                                              (_projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath));
 
         /// <summary>
         /// Returns the current state of the build request.
         /// </summary>
-        public BuildRequestEntryState State
-        {
-            [DebuggerStepThrough]
-            get
-            { return _state; }
-        }
+        public BuildRequestEntryState State { [DebuggerStepThrough] get; private set; }
 
         /// <summary>
         /// Returns the request which originated this entry.
         /// </summary>
-        public BuildRequest Request
-        {
-            [DebuggerStepThrough]
-            get
-            { return _request; }
-        }
+        public BuildRequest Request { [DebuggerStepThrough] get; }
 
         /// <summary>
         /// Returns the build request configuration
         /// </summary>
-        public BuildRequestConfiguration RequestConfiguration
-        {
-            [DebuggerStepThrough]
-            get
-            { return _requestConfiguration; }
-        }
+        public BuildRequestConfiguration RequestConfiguration { [DebuggerStepThrough] get; }
 
         /// <summary>
         /// Returns the overall result for this request.
         /// </summary>
-        public BuildResult Result
-        {
-            [DebuggerStepThrough]
-            get
-            { return _completedResult; }
-        }
+        public BuildResult Result { [DebuggerStepThrough] get; private set; }
 
         /// <summary>
         /// Returns the request builder.
@@ -279,9 +217,9 @@ public void WaitForResult(BuildRequest newRequest)
         /// </summary>
         public void WaitForBlockingRequest(int blockingGlobalRequestId)
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Active, "Must be in Active state to wait for blocking request.  Config: {0} State: {1}", _requestConfiguration.ConfigurationId, _state);
+                ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Active, "Must be in Active state to wait for blocking request.  Config: {0} State: {1}", RequestConfiguration.ConfigurationId, State);
 
                 _blockingGlobalRequestId = blockingGlobalRequestId;
 
@@ -297,7 +235,7 @@ public void WaitForBlockingRequest(int blockingGlobalRequestId)
         /// <returns>True if all unresolved configurations have been resolved, false otherwise.</returns>
         public bool ResolveConfigurationRequest(int unresolvedConfigId, int configId)
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
                 if (_unresolvedConfigurations == null || !_unresolvedConfigurations.ContainsKey(unresolvedConfigId))
                 {
@@ -358,10 +296,10 @@ public List<BuildRequestConfiguration> GetUnresolvedConfigurationsToIssue()
         /// </summary>
         public string[] GetActiveTargets()
         {
-            string[] activeTargets = new string[_requestConfiguration.ActivelyBuildingTargets.Count];
+            var activeTargets = new string[RequestConfiguration.ActivelyBuildingTargets.Count];
 
             int index = 0;
-            foreach (string target in _requestConfiguration.ActivelyBuildingTargets.Keys)
+            foreach (string target in RequestConfiguration.ActivelyBuildingTargets.Keys)
             {
                 activeTargets[index++] = target;
             }
@@ -377,10 +315,10 @@ public string[] GetActiveTargets()
         /// <param name="result">The result for the request.</param>
         public void ReportResult(BuildResult result)
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                ErrorUtilities.VerifyThrowArgumentNull(result, "result");
-                ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Waiting || _outstandingRequests == null, "Entry must be in the Waiting state to report results, or we must have flushed our requests due to an error. Config: {0} State: {1} Requests: {2}", _requestConfiguration.ConfigurationId, _state, _outstandingRequests != null);
+                ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
+                ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Waiting || _outstandingRequests == null, "Entry must be in the Waiting state to report results, or we must have flushed our requests due to an error. Config: {0} State: {1} Requests: {2}", RequestConfiguration.ConfigurationId, State, _outstandingRequests != null);
 
                 // If the matching request is in the issue list, remove it so we don't try to ask for it to be built.
                 if (_requestsToIssue != null)
@@ -456,10 +394,10 @@ public void ReportResult(BuildResult result)
         /// </summary>
         public void Unblock()
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Waiting, "Entry must be in the waiting state to be unblocked. Config: {0} State: {1} Request: {2}", _requestConfiguration.ConfigurationId, _state, this.Request.GlobalRequestId);
-                ErrorUtilities.VerifyThrow(_blockingGlobalRequestId != BuildRequest.InvalidGlobalRequestId, "Entry must be waiting on another request to be unblocked.  Config: {0} Request: {1}", _requestConfiguration.ConfigurationId, this.Request.GlobalRequestId);
+                ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Waiting, "Entry must be in the waiting state to be unblocked. Config: {0} State: {1} Request: {2}", RequestConfiguration.ConfigurationId, State, Request.GlobalRequestId);
+                ErrorUtilities.VerifyThrow(_blockingGlobalRequestId != BuildRequest.InvalidGlobalRequestId, "Entry must be waiting on another request to be unblocked.  Config: {0} Request: {1}", RequestConfiguration.ConfigurationId, Request.GlobalRequestId);
 
                 _blockingGlobalRequestId = BuildRequest.InvalidGlobalRequestId;
 
@@ -474,11 +412,11 @@ public void Unblock()
         /// <returns>The results for all previously pending requests, or null if there were none.</returns>
         public IDictionary<int, BuildResult> Continue()
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
                 ErrorUtilities.VerifyThrow(_unresolvedConfigurations == null, "All configurations must be resolved before Continue may be called.");
                 ErrorUtilities.VerifyThrow(_outstandingRequests == null, "All outstanding requests must have been satisfied.");
-                ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Ready, "Entry must be in the Ready state.  Config: {0} State: {1}", _requestConfiguration.ConfigurationId, _state);
+                ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Ready, "Entry must be in the Ready state.  Config: {0} State: {1}", RequestConfiguration.ConfigurationId, State);
 
                 IDictionary<int, BuildResult> ret = _outstandingResults;
                 _outstandingResults = null;
@@ -494,9 +432,9 @@ public IDictionary<int, BuildResult> Continue()
         /// </summary>
         public void BeginCancel()
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                if (_state == BuildRequestEntryState.Waiting)
+                if (State == BuildRequestEntryState.Waiting)
                 {
                     if (_outstandingResults == null && _outstandingRequests != null)
                     {
@@ -528,10 +466,7 @@ public void BeginCancel()
                 }
             }
 
-            if (null != _requestBuilder)
-            {
-                _requestBuilder.BeginCancel();
-            }
+            _requestBuilder?.BeginCancel();
         }
 
         /// <summary>
@@ -539,10 +474,7 @@ public void BeginCancel()
         /// </summary>
         public void WaitForCancelCompletion()
         {
-            if (null != _requestBuilder)
-            {
-                _requestBuilder.WaitForCancelCompletion();
-            }
+            _requestBuilder?.WaitForCancelCompletion();
         }
 
         /// <summary>
@@ -551,23 +483,23 @@ public void WaitForCancelCompletion()
         /// <param name="result">The result of the build.</param>
         public void Complete(BuildResult result)
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                ErrorUtilities.VerifyThrowArgumentNull(result, "result");
-                ErrorUtilities.VerifyThrow(_completedResult == null, "Entry already Completed.");
+                ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
+                ErrorUtilities.VerifyThrow(Result == null, "Entry already Completed.");
 
                 // If this request is determined to be a success, then all outstanding items must have been taken care of
                 // and it must be in the correct state.  It can complete unsuccessfully for a variety of reasons in a variety 
                 // of states.
                 if (result.OverallResult == BuildResultCode.Success)
                 {
-                    ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Active, "Entry must be active before it can be Completed successfully.  Config: {0} State: {1}", _requestConfiguration.ConfigurationId, _state);
+                    ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Active, "Entry must be active before it can be Completed successfully.  Config: {0} State: {1}", RequestConfiguration.ConfigurationId, State);
                     ErrorUtilities.VerifyThrow(_unresolvedConfigurations == null, "Entry must not have any unresolved configurations.");
                     ErrorUtilities.VerifyThrow(_outstandingRequests == null, "Entry must have no outstanding requests.");
                     ErrorUtilities.VerifyThrow(_outstandingResults == null, "Results must be consumed before request may be completed.");
                 }
 
-                _completedResult = result;
+                Result = result;
                 ChangeState(BuildRequestEntryState.Complete);
             }
         }
@@ -577,9 +509,9 @@ public void Complete(BuildResult result)
         /// </summary>
         private void WaitForResult(BuildRequest newRequest, bool addToIssueList)
         {
-            lock (_dataMonitor)
+            lock (GlobalLock)
             {
-                ErrorUtilities.VerifyThrow(_state == BuildRequestEntryState.Active || _state == BuildRequestEntryState.Waiting, "Must be in Active or Waiting state to wait for results.  Config: {0} State: {1}", _requestConfiguration.ConfigurationId, _state);
+                ErrorUtilities.VerifyThrow(State == BuildRequestEntryState.Active || State == BuildRequestEntryState.Waiting, "Must be in Active or Waiting state to wait for results.  Config: {0} State: {1}", RequestConfiguration.ConfigurationId, State);
 
                 if (newRequest.IsConfigurationResolved)
                 {
@@ -590,7 +522,7 @@ private void WaitForResult(BuildRequest newRequest, bool addToIssueList)
                 }
                 else
                 {
-                    ErrorUtilities.VerifyThrow(addToIssueList == true, "Requests with unresolved configurations should always be added to the issue list.");
+                    ErrorUtilities.VerifyThrow(addToIssueList, "Requests with unresolved configurations should always be added to the issue list.");
                     _unresolvedConfigurations = _unresolvedConfigurations ?? new Dictionary<int, List<BuildRequest>>();
 
                     if (!_unresolvedConfigurations.ContainsKey(newRequest.ConfigurationId))
@@ -617,16 +549,13 @@ private void WaitForResult(BuildRequest newRequest, bool addToIssueList)
         /// <param name="newState">The new state for this entry.</param>
         private void ChangeState(BuildRequestEntryState newState)
         {
-            if (_state != newState)
+            if (State != newState)
             {
-                _state = newState;
+                State = newState;
 
                 BuildRequestEntryStateChangedDelegate stateEvent = OnStateChanged;
 
-                if (stateEvent != null)
-                {
-                    stateEvent(this, newState);
-                }
+                stateEvent?.Invoke(this, newState);
             }
         }
     }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
index 98700f8c776..ecabd554a7f 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
@@ -31,8 +31,8 @@ internal class FullyQualifiedBuildRequest
         /// <param name="flags">Flags specified for the build request.</param>
         public FullyQualifiedBuildRequest(BuildRequestConfiguration config, string[] targets, bool resultsNeeded, BuildRequestDataFlags flags = BuildRequestDataFlags.None)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(config, "config");
-            ErrorUtilities.VerifyThrowArgumentNull(targets, "targets");
+            ErrorUtilities.VerifyThrowArgumentNull(config, nameof(config));
+            ErrorUtilities.VerifyThrowArgumentNull(targets, nameof(targets));
 
             Config = config;
             Targets = targets;
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
index 9a78d2d86cf..5ad11ecea1c 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
@@ -6,9 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
-
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
@@ -128,10 +125,7 @@ internal interface IBuildRequestEngine
         /// <summary>
         /// Gets the current engine status.
         /// </summary>
-        BuildRequestEngineStatus Status
-        {
-            get;
-        }
+        BuildRequestEngineStatus Status { get; }
         #endregion
 
         #region Methods
diff --git a/src/Build/BackEnd/Components/IBuildComponent.cs b/src/Build/BackEnd/Components/IBuildComponent.cs
index 452f5d19769..5b162d64dc2 100644
--- a/src/Build/BackEnd/Components/IBuildComponent.cs
+++ b/src/Build/BackEnd/Components/IBuildComponent.cs
@@ -4,10 +4,6 @@
 // <summary>Interface for build components.</summary>
 //-----------------------------------------------------------------------
 
-using System;
-using System.Collections.Generic;
-using System.Text;
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 1c9dc61d1db..51240f501a8 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -4,10 +4,6 @@
 // <summary>Interface for the build component host.</summary>
 //-----------------------------------------------------------------------
 
-using System;
-using System.Collections.Generic;
-using System.Text;
-
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
@@ -147,34 +143,22 @@ internal interface IBuildComponentHost
         /// <summary>
         /// Retrieves the name of the host.
         /// </summary>
-        string Name
-        {
-            get;
-        }
+        string Name { get; }
 
         /// <summary>
         /// Retrieves the BuildParameters used during the build.
         /// </summary>
-        BuildParameters BuildParameters
-        {
-            get;
-        }
+        BuildParameters BuildParameters { get; }
 
         /// <summary>
         /// The data structure which holds the data for the use of legacy threading semantics
         /// </summary>
-        LegacyThreadingData LegacyThreadingData
-        {
-            get;
-        }
+        LegacyThreadingData LegacyThreadingData { get; }
 
         /// <summary>
         /// Retrieves the logging service associated with a particular build
         /// </summary>
-        ILoggingService LoggingService
-        {
-            get;
-        }
+        ILoggingService LoggingService { get; }
 
         /// <summary>
         /// Registers a factory which will be used to create the necessary components of the build
diff --git a/src/Build/BackEnd/Node/INode.cs b/src/Build/BackEnd/Node/INode.cs
index e77d2702a05..137a89d4578 100644
--- a/src/Build/BackEnd/Node/INode.cs
+++ b/src/Build/BackEnd/Node/INode.cs
@@ -5,12 +5,10 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
 
 namespace Microsoft.Build.BackEnd
 {
-    using NodeEngineShutdownReason = Microsoft.Build.Execution.NodeEngineShutdownReason;
+    using NodeEngineShutdownReason = Execution.NodeEngineShutdownReason;
 
     #region Delegates
     /// <summary>
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index 6533432d3ff..1579b272a07 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -6,26 +6,16 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Collections.Concurrent;
-using System.Diagnostics;
-using System.Linq;
-using System.Text;
 using System.Globalization;
 using System.Threading;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-
-using BuildEventArgTransportSink = Microsoft.Build.BackEnd.Logging.BuildEventArgTransportSink;
-using LoggingService = Microsoft.Build.BackEnd.Logging.LoggingService;
-using LoggingServiceFactory = Microsoft.Build.BackEnd.Logging.LoggingServiceFactory;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
-using LoggingExceptionDelegate = Microsoft.Build.BackEnd.Logging.LoggingExceptionDelegate;
 using Microsoft.Build.BackEnd.Components.Caching;
 
 namespace Microsoft.Build.BackEnd
@@ -38,7 +28,7 @@ internal class InProcNode : INode, INodePacketFactory
         /// <summary>
         /// The build component host.
         /// </summary>
-        private IBuildComponentHost _componentHost;
+        private readonly IBuildComponentHost _componentHost;
 
         /// <summary>
         /// The environment at the time the build is started.
@@ -58,27 +48,22 @@ internal class InProcNode : INode, INodePacketFactory
         /// <summary>
         /// The build request engine.
         /// </summary>
-        private IBuildRequestEngine _buildRequestEngine;
-
-        /// <summary>
-        /// The current node configuration
-        /// </summary>
-        private NodeConfiguration _currentConfiguration;
+        private readonly IBuildRequestEngine _buildRequestEngine;
 
         /// <summary>
         /// The queue of packets we have received but which have not yet been processed.
         /// </summary>
-        private ConcurrentQueue<INodePacket> _receivedPackets;
+        private readonly ConcurrentQueue<INodePacket> _receivedPackets;
 
         /// <summary>
         /// The event which is set when we receive packets.
         /// </summary>
-        private AutoResetEvent _packetReceivedEvent;
+        private readonly AutoResetEvent _packetReceivedEvent;
 
         /// <summary>
         /// The event which is set when we should shut down.
         /// </summary>
-        private AutoResetEvent _shutdownEvent;
+        private readonly AutoResetEvent _shutdownEvent;
 
         /// <summary>
         /// The reason we are shutting down.
@@ -90,35 +75,30 @@ internal class InProcNode : INode, INodePacketFactory
         /// </summary>
         private Exception _shutdownException;
 
-        /// <summary>
-        /// The set of configurations which have had projects loaded.
-        /// </summary>
-        private HashSet<NGen<int>> _configurationProjectsLoaded;
-
         /// <summary>
         /// The node endpoint
         /// </summary>
-        private INodeEndpoint _nodeEndpoint;
+        private readonly INodeEndpoint _nodeEndpoint;
 
         /// <summary>
         /// Handler for engine exceptions.
         /// </summary>
-        private EngineExceptionDelegate _engineExceptionEventHandler;
+        private readonly EngineExceptionDelegate _engineExceptionEventHandler;
 
         /// <summary>
         /// Handler for new configuration requests.
         /// </summary>
-        private NewConfigurationRequestDelegate _newConfigurationRequestEventHandler;
+        private readonly NewConfigurationRequestDelegate _newConfigurationRequestEventHandler;
 
         /// <summary>
         /// Handler for blocked request events.
         /// </summary>
-        private RequestBlockedDelegate _requestBlockedEventHandler;
+        private readonly RequestBlockedDelegate _requestBlockedEventHandler;
 
         /// <summary>
         /// Handler for request completed events.
         /// </summary>
-        private RequestCompleteDelegate _requestCompleteEventHandler;
+        private readonly RequestCompleteDelegate _requestCompleteEventHandler;
 
         /// <summary>
         /// Constructor.
@@ -131,14 +111,12 @@ public InProcNode(IBuildComponentHost componentHost, INodeEndpoint inProcNodeEnd
             _packetReceivedEvent = new AutoResetEvent(false);
             _shutdownEvent = new AutoResetEvent(false);
 
-            _configurationProjectsLoaded = new HashSet<NGen<int>>();
-
             _buildRequestEngine = componentHost.GetComponent(BuildComponentType.RequestEngine) as IBuildRequestEngine;
 
-            _engineExceptionEventHandler = new EngineExceptionDelegate(OnEngineException);
-            _newConfigurationRequestEventHandler = new NewConfigurationRequestDelegate(OnNewConfigurationRequest);
-            _requestBlockedEventHandler = new RequestBlockedDelegate(OnNewRequest);
-            _requestCompleteEventHandler = new RequestCompleteDelegate(OnRequestComplete);
+            _engineExceptionEventHandler = OnEngineException;
+            _newConfigurationRequestEventHandler = OnNewConfigurationRequest;
+            _requestBlockedEventHandler = OnNewRequest;
+            _requestCompleteEventHandler = OnRequestComplete;
         }
 
         #region INode Members
@@ -152,10 +130,10 @@ public NodeEngineShutdownReason Run(out Exception shutdownException)
         {
             try
             {
-                _nodeEndpoint.OnLinkStatusChanged += new LinkStatusChangedDelegate(OnLinkStatusChanged);
+                _nodeEndpoint.OnLinkStatusChanged += OnLinkStatusChanged;
                 _nodeEndpoint.Listen(this);
 
-                WaitHandle[] waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
+                var waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
 
                 // Get the current directory before doing work. We need this so we can restore the directory when the node shuts down.
                 _savedCurrentDirectory = NativeMethodsShared.GetCurrentDirectory();
@@ -176,9 +154,8 @@ public NodeEngineShutdownReason Run(out Exception shutdownException)
                             }
 
                         case 1:
-                            INodePacket packet = null;
 
-                            while (_receivedPackets.TryDequeue(out packet))
+                            while (_receivedPackets.TryDequeue(out INodePacket packet))
                             {
                                 if (packet != null)
                                 {
@@ -369,7 +346,7 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
 
             if (null != _loggingContext)
             {
-                _loggingContext.LoggingService.OnLoggingThreadException -= new LoggingExceptionDelegate(OnLoggingThreadException);
+                _loggingContext.LoggingService.OnLoggingThreadException -= OnLoggingThreadException;
                 _loggingContext = null;
             }
 
@@ -399,7 +376,7 @@ private void HandlePacket(INodePacket packet)
                     break;
 
                 case NodePacketType.BuildRequestConfiguration:
-                    HandleBuildRequestConfiguration(packet as BuildRequestConfiguration);
+                    HandleBuildRequestConfiguration();
                     break;
 
                 case NodePacketType.BuildRequestConfigurationResponse:
@@ -452,7 +429,7 @@ private void HandleBuildRequest(BuildRequest request)
         /// <summary>
         /// Handles the BuildRequestConfiguration packet.
         /// </summary>
-        private void HandleBuildRequestConfiguration(BuildRequestConfiguration configuration)
+        private static void HandleBuildRequestConfiguration()
         {
             // Configurations are already in the cache, which we share with the BuildManager.
         }
@@ -502,7 +479,7 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
 
             // Set the logging exception handler
             ILoggingService loggingService = _componentHost.LoggingService;
-            loggingService.OnLoggingThreadException += new LoggingExceptionDelegate(OnLoggingThreadException);
+            loggingService.OnLoggingThreadException += OnLoggingThreadException;
 
             // Now prep the buildRequestEngine for the build.
             _loggingContext = new NodeLoggingContext(loggingService, configuration.NodeId, true /* inProcNode */);
@@ -514,15 +491,11 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
 
             if (_shutdownException != null)
             {
-                Exception exception;
-                HandleShutdown(out exception);
+                HandleShutdown(out Exception exception);
                 throw exception;
             }
 
             _buildRequestEngine.InitializeForBuild(_loggingContext);
-
-            // Finally store off this configuration packet.
-            _currentConfiguration = configuration;
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Node/NativeMethods.cs b/src/Build/BackEnd/Node/NativeMethods.cs
index 2b8110f36d6..2d5db29b124 100644
--- a/src/Build/BackEnd/Node/NativeMethods.cs
+++ b/src/Build/BackEnd/Node/NativeMethods.cs
@@ -6,10 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
-using Microsoft.Build.Shared;
-using Microsoft.Win32.SafeHandles;
 using System.Runtime.InteropServices;
 
 namespace Microsoft.Build.BackEnd
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 0d4cf466170..ed0c91df081 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -6,18 +6,13 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Collections.Concurrent;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
-using System.Linq;
-using System.Text;
 using System.Globalization;
 using System.Threading;
-using System.Reflection;
-using System.Runtime.CompilerServices;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Evaluation;
@@ -60,7 +55,7 @@ public class OutOfProcNode : INode, IBuildComponentHost, INodePacketFactory, INo
         /// <summary>
         /// The component factories.
         /// </summary>
-        private BuildComponentFactoryCollection _componentFactories;
+        private readonly BuildComponentFactoryCollection _componentFactories;
 
         /// <summary>
         /// The build system parameters.
@@ -80,22 +75,22 @@ public class OutOfProcNode : INode, IBuildComponentHost, INodePacketFactory, INo
         /// <summary>
         /// The global config cache.
         /// </summary>
-        private IConfigCache _globalConfigCache;
+        private readonly IConfigCache _globalConfigCache;
 
         /// <summary>
         /// The global node manager
         /// </summary>
-        private INodeManager _taskHostNodeManager;
+        private readonly INodeManager _taskHostNodeManager;
 
         /// <summary>
         /// The build request engine.
         /// </summary>
-        private IBuildRequestEngine _buildRequestEngine;
+        private readonly IBuildRequestEngine _buildRequestEngine;
 
         /// <summary>
         /// The packet factory.
         /// </summary>
-        private NodePacketFactory _packetFactory;
+        private readonly NodePacketFactory _packetFactory;
 
         /// <summary>
         /// The current node configuration
@@ -105,17 +100,17 @@ public class OutOfProcNode : INode, IBuildComponentHost, INodePacketFactory, INo
         /// <summary>
         /// The queue of packets we have received but which have not yet been processed.
         /// </summary>
-        private ConcurrentQueue<INodePacket> _receivedPackets;
+        private readonly ConcurrentQueue<INodePacket> _receivedPackets;
 
         /// <summary>
         /// The event which is set when we receive packets.
         /// </summary>
-        private AutoResetEvent _packetReceivedEvent;
+        private readonly AutoResetEvent _packetReceivedEvent;
 
         /// <summary>
         /// The event which is set when we should shut down.
         /// </summary>
-        private ManualResetEvent _shutdownEvent;
+        private readonly ManualResetEvent _shutdownEvent;
 
         /// <summary>
         /// The reason we are shutting down.
@@ -130,17 +125,17 @@ public class OutOfProcNode : INode, IBuildComponentHost, INodePacketFactory, INo
         /// <summary>
         /// Flag indicating if we should debug communications or not.
         /// </summary>
-        private bool _debugCommunications = false;
+        private readonly bool _debugCommunications;
 
         /// <summary>
         /// Data for the use of LegacyThreading semantics.
         /// </summary>
-        private LegacyThreadingData _legacyThreadingData;
+        private readonly LegacyThreadingData _legacyThreadingData;
 
         /// <summary>
         /// The current <see cref="ISdkResolverService"/> instance.
         /// </summary>
-        private ISdkResolverService _sdkResolverService;
+        private readonly ISdkResolverService _sdkResolverService;
 
 #if !FEATURE_NAMED_PIPES_FULL_DUPLEX
         private string _clientToServerPipeHandle;
@@ -160,7 +155,7 @@ string serverToClientPipeHandle
             s_isOutOfProcNode = true;
 
 #if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
-            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(ExceptionHandling.UnhandledExceptionHandler);
+            AppDomain.CurrentDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
 #endif
 
 #if !FEATURE_NAMED_PIPES_FULL_DUPLEX
@@ -195,10 +190,10 @@ string serverToClientPipeHandle
                 s_projectRootElementCache = new ProjectRootElementCache(true /* automatically reload any changes from disk */);
             }
 
-            _buildRequestEngine.OnEngineException += new EngineExceptionDelegate(OnEngineException);
-            _buildRequestEngine.OnNewConfigurationRequest += new NewConfigurationRequestDelegate(OnNewConfigurationRequest);
-            _buildRequestEngine.OnRequestBlocked += new RequestBlockedDelegate(OnNewRequest);
-            _buildRequestEngine.OnRequestComplete += new RequestCompleteDelegate(OnRequestComplete);
+            _buildRequestEngine.OnEngineException += OnEngineException;
+            _buildRequestEngine.OnNewConfigurationRequest += OnNewConfigurationRequest;
+            _buildRequestEngine.OnRequestBlocked += OnNewRequest;
+            _buildRequestEngine.OnRequestComplete += OnRequestComplete;
 
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.BuildRequest, BuildRequest.FactoryForDeserialization, this);
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.BuildRequestConfiguration, BuildRequestConfiguration.FactoryForDeserialization, this);
@@ -213,55 +208,28 @@ string serverToClientPipeHandle
         /// Get the logging service for a build.
         /// </summary>
         /// <returns>The logging service.</returns>
-        ILoggingService IBuildComponentHost.LoggingService
-        {
-            get
-            {
-                return _loggingService;
-            }
-        }
+        ILoggingService IBuildComponentHost.LoggingService => _loggingService;
 
         /// <summary>
         /// Retrieves the LegacyThreadingData associated with a particular build manager
         /// </summary>
-        LegacyThreadingData IBuildComponentHost.LegacyThreadingData
-        {
-            get
-            {
-                return _legacyThreadingData;
-            }
-        }
+        LegacyThreadingData IBuildComponentHost.LegacyThreadingData => _legacyThreadingData;
 
         /// <summary>
         /// Retrieves the name of this component host.
         /// </summary>
-        string IBuildComponentHost.Name
-        {
-            get
-            {
-                return "OutOfProc";
-            }
-        }
+        string IBuildComponentHost.Name => "OutOfProc";
 
         /// <summary>
         /// Retrieves the build parameters for the current build.
         /// </summary>
         /// <returns>The build parameters.</returns>
-        BuildParameters IBuildComponentHost.BuildParameters
-        {
-            get
-            {
-                return _buildParameters;
-            }
-        }
+        BuildParameters IBuildComponentHost.BuildParameters => _buildParameters;
 
         /// <summary>
         /// Whether the current appdomain has an out of proc node.
         /// </summary>
-        internal static bool IsOutOfProcNode
-        {
-            get { return s_isOutOfProcNode; }
-        }
+        internal static bool IsOutOfProcNode => s_isOutOfProcNode;
 
         #region INode Members
 
@@ -293,10 +261,10 @@ public NodeEngineShutdownReason Run(bool enableReuse, out Exception shutdownExce
 #else
             _nodeEndpoint = new NodeEndpointOutOfProc(_clientToServerPipeHandle, _serverToClientPipeHandle, this, enableReuse);
 #endif
-            _nodeEndpoint.OnLinkStatusChanged += new LinkStatusChangedDelegate(OnLinkStatusChanged);
+            _nodeEndpoint.OnLinkStatusChanged += OnLinkStatusChanged;
             _nodeEndpoint.Listen(this);
 
-            WaitHandle[] waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
+            var waitHandles = new WaitHandle[] { _shutdownEvent, _packetReceivedEvent };
 
             // Get the current directory before doing any work. We need this so we can restore the directory when the node shutsdown.
             while (true)
@@ -309,9 +277,8 @@ public NodeEngineShutdownReason Run(bool enableReuse, out Exception shutdownExce
                         return shutdownReason;
 
                     case 1:
-                        INodePacket packet = null;
 
-                        while (_receivedPackets.TryDequeue(out packet))
+                        while (_receivedPackets.TryDequeue(out INodePacket packet))
                         {
                             if (packet != null)
                             {
@@ -539,7 +506,7 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
                 // Shut down logging, which will cause all queued logging messages to be sent.
                 if (null != _loggingContext && null != _loggingService)
                 {
-                    _loggingContext.LoggingService.OnLoggingThreadException -= new LoggingExceptionDelegate(OnLoggingThreadException);
+                    _loggingContext.LoggingService.OnLoggingThreadException -= OnLoggingThreadException;
                     _loggingContext = null;
                 }
 
@@ -551,7 +518,7 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
                     _nodeEndpoint.SendData(new NodeShutdown(_shutdownReason == NodeEngineShutdownReason.Error ? NodeShutdownReason.Error : NodeShutdownReason.Requested, exception));
 
                     // Flush all packets to the pipe and close it down.  This blocks until the shutdown is complete.
-                    _nodeEndpoint.OnLinkStatusChanged -= new LinkStatusChangedDelegate(OnLinkStatusChanged);
+                    _nodeEndpoint.OnLinkStatusChanged -= OnLinkStatusChanged;
                 }
 
                 _nodeEndpoint.Disconnect();
@@ -567,14 +534,12 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
         [SuppressMessage("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods", MessageId = "System.GC.Collect", Justification = "Required because when calling this method, we want the memory back NOW.")]
         private void CleanupCaches()
         {
-            IConfigCache configCache = _componentFactories.GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
-            if (null != configCache)
+            if (_componentFactories.GetComponent(BuildComponentType.ConfigCache) is IConfigCache configCache)
             {
                 configCache.ClearConfigurations();
             }
 
-            IResultsCache resultsCache = _componentFactories.GetComponent(BuildComponentType.ResultsCache) as IResultsCache;
-            if (null != resultsCache)
+            if (_componentFactories.GetComponent(BuildComponentType.ResultsCache) is IResultsCache resultsCache)
             {
                 resultsCache.ClearResults();
             }
@@ -793,7 +758,7 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
                 OnEngineException(ex);
             }
 
-            _loggingService.OnLoggingThreadException += new LoggingExceptionDelegate(OnLoggingThreadException);
+            _loggingService.OnLoggingThreadException += OnLoggingThreadException;
 
             string forwardPropertiesFromChild = Environment.GetEnvironmentVariable("MSBUILDFORWARDPROPERTIESFROMCHILD");
             string[] propertyListToSerialize = null;
@@ -801,7 +766,7 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
             // Get a list of properties which should be serialized
             if (!String.IsNullOrEmpty(forwardPropertiesFromChild))
             {
-                propertyListToSerialize = forwardPropertiesFromChild.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
+                propertyListToSerialize = forwardPropertiesFromChild.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
             }
 
             _loggingService.PropertiesToSerialize = propertyListToSerialize;
@@ -822,8 +787,7 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
 
             if (_shutdownException != null)
             {
-                Exception exception;
-                HandleShutdown(out exception);
+                HandleShutdown(out Exception exception);
                 throw exception;
             }
 
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index e067f29d395..584d4bed8bd 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -6,8 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
 using System.Runtime.Serialization;
 #if FEATURE_SECURITY_PERMISSIONS
 using System.Security.Permissions;
@@ -33,12 +31,9 @@ public class BuildAbortedException : Exception
         public BuildAbortedException()
             : base(ResourceUtilities.GetResourceString("BuildAborted"))
         {
-            string errorCode;
-            string helpKeyword;
+            ResourceUtilities.FormatResourceString(out string errorCode, out _, "BuildAborted");
 
-            ResourceUtilities.FormatResourceString(out errorCode, out helpKeyword, "BuildAborted");
-
-            this.ErrorCode = errorCode;
+            ErrorCode = errorCode;
         }
 
         /// <summary>
@@ -47,12 +42,9 @@ public BuildAbortedException()
         public BuildAbortedException(string message)
             : base(ResourceUtilities.FormatResourceString("BuildAbortedWithMessage", message))
         {
-            string errorCode;
-            string helpKeyword;
-
-            ResourceUtilities.FormatResourceString(out errorCode, out helpKeyword, "BuildAbortedWithMessage", message);
+            ResourceUtilities.FormatResourceString(out string errorCode, out _, "BuildAbortedWithMessage", message);
 
-            this.ErrorCode = errorCode;
+            ErrorCode = errorCode;
         }
 
         /// <summary>
@@ -61,12 +53,9 @@ public BuildAbortedException(string message)
         public BuildAbortedException(string message, Exception innerException)
             : base(ResourceUtilities.FormatResourceString("BuildAbortedWithMessage", message), innerException)
         {
-            string errorCode;
-            string helpKeyword;
-
-            ResourceUtilities.FormatResourceString(out errorCode, out helpKeyword, "BuildAbortedWithMessage", message);
+            ResourceUtilities.FormatResourceString(out string errorCode, out _, "BuildAbortedWithMessage", message);
 
-            this.ErrorCode = errorCode;
+            ErrorCode = errorCode;
         }
 
         /// <summary>
@@ -76,18 +65,14 @@ public BuildAbortedException(string message, Exception innerException)
         protected BuildAbortedException(SerializationInfo info, StreamingContext context)
             : base(info, context)
         {
-            this.ErrorCode = info.GetString("ErrorCode");
+            ErrorCode = info.GetString("ErrorCode");
         }
 
         /// <summary>
         /// Gets the error code (if any) associated with the exception message.
         /// </summary>
         /// <value>Error code string, or null.</value>
-        public string ErrorCode
-        {
-            get;
-            private set;
-        }
+        public string ErrorCode { get; }
 
         /// <summary>
         /// ISerializable method which we must override since Exception implements this interface
@@ -96,7 +81,7 @@ public string ErrorCode
 #if FEATURE_SECURITY_PERMISSIONS
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
 #endif
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index c4c4222b345..2d9b029f23f 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -5,16 +5,12 @@
 // <summary>Class containing data for a build request.</summary>
 //-----------------------------------------------------------------------
 
-using System;
 using System.Collections.Generic;
 using System.Diagnostics;
-using System.Text;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Execution;
 
-using Constants = Microsoft.Build.Internal.Constants;
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -68,11 +64,6 @@ internal class BuildRequest : INodePacket
         /// </summary>
         private List<string> _targets;
 
-        /// <summary>
-        /// The route for host-aware tasks back to the host
-        /// </summary>
-        private HostServices _hostServices;
-
         /// <summary>
         /// The build event context of the parent
         /// </summary>
@@ -141,7 +132,7 @@ public BuildRequest(
                 _targets.Add(EscapingUtilities.UnescapeAll(target));
             }
 
-            _hostServices = hostServices;
+            HostServices = hostServices;
             _buildEventContext = BuildEventContext.Invalid;
             _parentBuildEventContext = parentBuildEventContext;
             _globalRequestId = InvalidGlobalRequestId;
@@ -285,8 +276,8 @@ public BuildEventContext BuildEventContext
         /// </summary>
         public BuildRequestDataFlags BuildRequestDataFlags
         {
-            get { return _buildRequestDataFlags; }
-            set { _buildRequestDataFlags = value; }
+            get => _buildRequestDataFlags;
+            set => _buildRequestDataFlags = value;
         }
 
         /// <summary>
@@ -294,8 +285,8 @@ public BuildRequestDataFlags BuildRequestDataFlags
         /// </summary>
         public RequestedProjectState RequestedProjectState
         {
-            get { return _requestedProjectState; }
-            set { _requestedProjectState = value; }
+            get => _requestedProjectState;
+            set => _requestedProjectState = value;
         }
 
 
@@ -305,8 +296,7 @@ public RequestedProjectState RequestedProjectState
         internal HostServices HostServices
         {
             [DebuggerStepThrough]
-            get
-            { return _hostServices; }
+            get;
         }
 
         /// <summary>
@@ -324,8 +314,8 @@ internal bool IsRootRequest
         /// </summary>
         internal bool SkipNonexistentTargets
         {
-            get { return _skipNonexistentTargets; }
-            set { _skipNonexistentTargets = value; }
+            get => _skipNonexistentTargets;
+            set => _skipNonexistentTargets = value;
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
index c07332829da..a59ec8a0a50 100644
--- a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
@@ -5,9 +5,6 @@
 // <summary>Class describing what is blocking a build request from continuing.</summary>
 //-----------------------------------------------------------------------
 
-using System;
-using System.Collections.Generic;
-using System.Text;
 using System.Diagnostics;
 using Microsoft.Build.Execution;
 
@@ -41,7 +38,7 @@ internal enum YieldAction : byte
     ///    another request.
     /// 2) The request may be blocked because it has child requests which need to be satisfied to proceed.
     /// </summary>
-    internal class BuildRequestBlocker : INodePacketTranslatable, INodePacket
+    internal class BuildRequestBlocker : INodePacket
     {
         /// <summary>
         /// The yield action, if any.
@@ -246,7 +243,7 @@ public void Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(INodePacketTranslator translator)
+        internal static INodePacket FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new BuildRequestBlocker(translator);
         }
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index ffe6c1a7a78..2fa0af6cfdc 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -8,25 +8,15 @@
 using System;
 using System.Collections.Generic;
 using System.Globalization;
-using System.Text;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Collections;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Internal;
 using System.Diagnostics;
 using System.IO;
-using System.Xml;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.BackEnd
 {
-    using Utilities = Microsoft.Build.Internal.Utilities;
-
     /// <summary>
     /// A build request configuration represents all of the data necessary to know which project to build
     /// and the environment in which it should be built.
@@ -82,7 +72,7 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// same time, causing a race condition.  This class is not made 100% threadsafe by the presence
         /// and current usage of this lock.
         /// </summary>
-        private Object _syncLock = new Object();
+        private readonly Object _syncLock = new Object();
 
         #endregion
 
@@ -171,7 +161,7 @@ internal BuildRequestConfiguration(BuildRequestData data, string defaultToolsVer
         /// <param name="defaultToolsVersion">The default ToolsVersion to use as a fallback</param>
         internal BuildRequestConfiguration(int configId, BuildRequestData data, string defaultToolsVersion)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(data, "data");
+            ErrorUtilities.VerifyThrowArgumentNull(data, nameof(data));
             ErrorUtilities.VerifyThrowInternalLength(data.ProjectFullPath, "data.ProjectFullPath");
 
             _configId = configId;
@@ -198,11 +188,11 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
                     }
                 }
 
-                this.IsCacheable = false;
+                IsCacheable = false;
             }
             else
             {
-                this.IsCacheable = true;
+                IsCacheable = true;
             }
         }
 
@@ -214,7 +204,7 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
         /// <param name="instance">The project instance.</param>
         internal BuildRequestConfiguration(int configId, ProjectInstance instance)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(instance, "instance");
+            ErrorUtilities.VerifyThrowArgumentNull(instance, nameof(instance));
 
             _configId = configId;
             _projectFullPath = instance.FullPath;
@@ -226,7 +216,7 @@ internal BuildRequestConfiguration(int configId, ProjectInstance instance)
             _projectInitialTargets = instance.InitialTargets;
             _projectDefaultTargets = instance.DefaultTargets;
             _translateEntireProjectInstanceState = instance.TranslateEntireState;
-            this.IsCacheable = false;
+            IsCacheable = false;
         }
 
         /// <summary>
@@ -235,7 +225,7 @@ internal BuildRequestConfiguration(int configId, ProjectInstance instance)
         private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
         {
             ErrorUtilities.VerifyThrow(configId != 0, "Configuration ID must not be zero when using this constructor.");
-            ErrorUtilities.VerifyThrowArgumentNull(other, "other");
+            ErrorUtilities.VerifyThrowArgumentNull(other, nameof(other));
             ErrorUtilities.VerifyThrow(other._transferredState == null, "Unexpected transferred state still set on other configuration.");
 
             _project = other._project;
@@ -247,7 +237,7 @@ private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
             _toolsVersion = other._toolsVersion;
             _explicitToolsVersionSpecified = other._explicitToolsVersionSpecified;
             _globalProperties = other._globalProperties;
-            this.IsCacheable = other.IsCacheable;
+            IsCacheable = other.IsCacheable;
             _configId = configId;
             TargetNames = other.TargetNames;
         }
@@ -264,33 +254,19 @@ private BuildRequestConfiguration(INodePacketTranslator translator)
         /// Flag indicating whether the configuration is allowed to cache.  This does not mean that the configuration will
         /// actually cache - there are several criteria which must for that.
         /// </summary>
-        public bool IsCacheable
-        {
-            get;
-            set;
-        }
+        public bool IsCacheable { get; set; }
 
         /// <summary>
         /// When reset caches is false we need to only keep around the configurations which are being asked for during the design time build.
         /// Other configurations need to be cleared. If this configuration is marked as ExplicitlyLoadedConfiguration then it should not be cleared when 
         /// Reset Caches is false.
         /// </summary>
-        public bool ExplicitlyLoaded
-        {
-            get;
-            set;
-        }
+        public bool ExplicitlyLoaded { get; set; }
 
         /// <summary>
         /// Flag indicating whether or not the configuration is actually building.
         /// </summary>
-        public bool IsActivelyBuilding
-        {
-            get
-            {
-                return (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);
-            }
-        }
+        public bool IsActivelyBuilding => (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);
 
         /// <summary>
         /// Flag indicating whether or not the configuration has been loaded before.
@@ -300,11 +276,7 @@ public bool IsActivelyBuilding
         /// <summary>
         /// Flag indicating if the configuration is cached or not.
         /// </summary>
-        public bool IsCached
-        {
-            get;
-            private set;
-        }
+        public bool IsCached { get; private set; }
 
         /// <summary>
         /// Flag indicating if this configuration represents a traversal project.  Traversal projects
@@ -495,10 +467,7 @@ internal void CreateUniqueGlobalProperty()
         /// <summary>
         /// Returns true if the default and initial targets have been resolved.
         /// </summary>
-        public bool HasTargetsResolved
-        {
-            get { return ProjectInitialTargets != null && ProjectDefaultTargets != null; }
-        }
+        public bool HasTargetsResolved => ProjectInitialTargets != null && ProjectDefaultTargets != null;
 
         /// <summary>
         /// Gets the initial targets for the project
@@ -557,45 +526,25 @@ public Lookup BaseLookup
             {
                 ErrorUtilities.VerifyThrow(!IsCached, "Configuration is cached, we shouldn't be accessing the lookup.");
 
-                if (null == _baseLookup)
-                {
-                    _baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith);
-                }
-
-                return _baseLookup;
+                return _baseLookup ??
+                       (_baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith));
             }
         }
 
         /// <summary>
         /// Retrieves the set of targets currently building, mapped to the request id building them.
         /// </summary>
-        public Dictionary<string, int> ActivelyBuildingTargets
-        {
-            get
-            {
-                if (null == _activelyBuildingTargets)
-                {
-                    _activelyBuildingTargets = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
-                }
-
-                return _activelyBuildingTargets;
-            }
-        }
+        public Dictionary<string, int> ActivelyBuildingTargets => _activelyBuildingTargets ?? (_activelyBuildingTargets =
+                                                                      new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase));
 
         /// <summary>
         /// Holds a snapshot of the environment at the time we blocked.
         /// </summary>
         public Dictionary<string, string> SavedEnvironmentVariables
         {
-            get
-            {
-                return _savedEnvironmentVariables;
-            }
+            get => _savedEnvironmentVariables;
 
-            set
-            {
-                _savedEnvironmentVariables = value;
-            }
+            set => _savedEnvironmentVariables = value;
         }
 
         /// <summary>
@@ -603,15 +552,9 @@ public Dictionary<string, string> SavedEnvironmentVariables
         /// </summary>
         public string SavedCurrentDirectory
         {
-            get
-            {
-                return _savedCurrentDirectory;
-            }
+            get => _savedCurrentDirectory;
 
-            set
-            {
-                _savedCurrentDirectory = value;
-            }
+            set => _savedCurrentDirectory = value;
         }
 
         /// <summary>
@@ -630,15 +573,9 @@ public bool ExplicitToolsVersionSpecified
         /// </summary>
         internal int ResultsNodeId
         {
-            get
-            {
-                return _resultsNodeId;
-            }
+            get => _resultsNodeId;
 
-            set
-            {
-                _resultsNodeId = value;
-            }
+            set => _resultsNodeId = value;
         }
 
         /// <summary>
@@ -649,9 +586,9 @@ internal int ResultsNodeId
         /// <returns>True if the objects are equivalent, false otherwise.</returns>
         public static bool operator ==(BuildRequestConfiguration left, BuildRequestConfiguration right)
         {
-            if (Object.ReferenceEquals(left, null))
+            if (ReferenceEquals(left, null))
             {
-                if (Object.ReferenceEquals(right, null))
+                if (ReferenceEquals(right, null))
                 {
                     return true;
                 }
@@ -662,7 +599,7 @@ internal int ResultsNodeId
             }
             else
             {
-                if (Object.ReferenceEquals(right, null))
+                if (ReferenceEquals(right, null))
                 {
                     return false;
                 }
@@ -763,7 +700,7 @@ public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)
             List<string> initialTargets = _projectInitialTargets;
             List<string> nonInitialTargets = (request.Targets.Count == 0) ? _projectDefaultTargets : request.Targets;
 
-            List<string> allTargets = new List<string>(initialTargets.Count + nonInitialTargets.Count);
+            var allTargets = new List<string>(initialTargets.Count + nonInitialTargets.Count);
 
             allTargets.AddRange(initialTargets);
             allTargets.AddRange(nonInitialTargets);
@@ -779,17 +716,17 @@ public List<string> GetAfterTargetsForDefaultTargets(BuildRequest request)
         {
             // We may not have a project available.  In which case, return nothing -- we simply don't have 
             // enough information to figure out what the correct answer is.
-            if (!this.IsCached && this.Project != null)
+            if (!IsCached && Project != null)
             {
-                HashSet<string> afterTargetsFound = new HashSet<string>();
+                var afterTargetsFound = new HashSet<string>();
 
-                Queue<string> targetsToCheckForAfterTargets = new Queue<string>((request.Targets.Count == 0) ? this.ProjectDefaultTargets : request.Targets);
+                var targetsToCheckForAfterTargets = new Queue<string>((request.Targets.Count == 0) ? ProjectDefaultTargets : request.Targets);
 
                 while (targetsToCheckForAfterTargets.Count > 0)
                 {
                     string targetToCheck = targetsToCheckForAfterTargets.Dequeue();
 
-                    IList<TargetSpecification> targetsWhichRunAfter = this.Project.GetTargetsWhichRunAfter(targetToCheck);
+                    IList<TargetSpecification> targetsWhichRunAfter = Project.GetTargetsWhichRunAfter(targetToCheck);
 
                     foreach (TargetSpecification targetWhichRunsAfter in targetsWhichRunAfter)
                     {
@@ -838,12 +775,12 @@ public override string ToString()
         /// <returns>True if they contain the same data, false otherwise</returns>
         public override bool Equals(object obj)
         {
-            if (Object.ReferenceEquals(obj, null))
+            if (ReferenceEquals(obj, null))
             {
                 return false;
             }
 
-            if (this.GetType() != obj.GetType())
+            if (GetType() != obj.GetType())
             {
                 return false;
             }
@@ -860,7 +797,7 @@ public override bool Equals(object obj)
         /// <returns>True if equal, false otherwise.</returns>
         public bool Equals(BuildRequestConfiguration other)
         {
-            if (Object.ReferenceEquals(other, null))
+            if (ReferenceEquals(other, null))
             {
                 return false;
             }
@@ -891,7 +828,7 @@ public void Translate(INodePacketTranslator translator)
             translator.Translate(ref _resultsNodeId);
             translator.Translate(ref _toolsVersion);
             translator.Translate(ref _explicitToolsVersionSpecified);
-            translator.TranslateDictionary<PropertyDictionary<ProjectPropertyInstance>, ProjectPropertyInstance>(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
+            translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
             translator.Translate(ref _savedCurrentDirectory);
             translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
 
@@ -907,7 +844,7 @@ public void Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(INodePacketTranslator translator)
+        internal static INodePacket FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new BuildRequestConfiguration(translator);
         }
@@ -964,7 +901,7 @@ internal BuildRequestConfiguration ShallowCloneWithNewId(int newId)
         /// <returns>True if the objects contain the same data, false otherwise.</returns>
         private bool InternalEquals(BuildRequestConfiguration other)
         {
-            if (Object.ReferenceEquals(this, other))
+            if (ReferenceEquals(this, other))
             {
                 return true;
             }
@@ -986,7 +923,7 @@ private bool InternalEquals(BuildRequestConfiguration other)
         /// <summary>
         /// Determines what the real tools version is.
         /// </summary>
-        private string ResolveToolsVersion(BuildRequestData data, string defaultToolsVersion)
+        private static string ResolveToolsVersion(BuildRequestData data, string defaultToolsVersion)
         {
             if (data.ExplicitToolsVersionSpecified)
             {
diff --git a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
index 70c744bfbea..6106e2483b4 100644
--- a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
@@ -57,7 +57,7 @@ internal BuildRequestUnblocker(int globalRequestIdToResume)
         /// </summary>
         internal BuildRequestUnblocker(BuildResult buildResult)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(buildResult, "buildResult");
+            ErrorUtilities.VerifyThrowArgumentNull(buildResult, nameof(buildResult));
             _buildResult = buildResult;
             _blockedGlobalRequestId = buildResult.ParentGlobalRequestId;
         }
@@ -68,7 +68,7 @@ internal BuildRequestUnblocker(BuildResult buildResult)
         internal BuildRequestUnblocker(BuildRequest parentRequest, BuildResult buildResult)
             : this(buildResult)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(parentRequest, "parentRequest");
+            ErrorUtilities.VerifyThrowArgumentNull(parentRequest, nameof(parentRequest));
             _blockedGlobalRequestId = parentRequest.GlobalRequestId;
         }
 
@@ -122,7 +122,7 @@ public void Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(INodePacketTranslator translator)
+        internal static INodePacket FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new BuildRequestUnblocker(translator);
         }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index c27471668a0..8a292623a3d 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -11,7 +11,6 @@
 using System.Diagnostics;
 using System.IO;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Collections;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Execution
@@ -213,14 +212,7 @@ internal BuildResult(BuildRequest request, BuildResult existingResults, string[]
             {
                 _requestException = exception ?? existingResults._requestException;
 
-                if (targetNames == null)
-                {
-                    _resultsByTarget = existingResults._resultsByTarget;
-                }
-                else
-                {
-                    _resultsByTarget = CreateTargetResultDictionaryWithContents(existingResults, targetNames);
-                }
+                _resultsByTarget = targetNames == null ? existingResults._resultsByTarget : CreateTargetResultDictionaryWithContents(existingResults, targetNames);
 
                 if (existingResults.OverallResult == BuildResultCode.Success || (additionalTargetsToCheck == null || additionalTargetsToCheck.Count == 0))
                 {
@@ -250,8 +242,7 @@ internal BuildResult(BuildRequest request, BuildResult existingResults, string[]
 
                     foreach (string additionalTarget in additionalTargetsToCheck)
                     {
-                        TargetResult targetResult;
-                        if (existingResults.ResultsByTarget.TryGetValue(additionalTarget, out targetResult))
+                        if (existingResults.ResultsByTarget.TryGetValue(additionalTarget, out TargetResult targetResult))
                         {
                             if (targetResult.ResultCode == TargetResultCode.Failure && !targetResult.TargetFailureDoesntCauseBuildFailure)
                             {
@@ -404,8 +395,8 @@ public IDictionary<string, TargetResult> ResultsByTarget
         /// </summary>
         public ProjectInstance ProjectStateAfterBuild
         {
-            get { return _projectStateAfterBuild; }
-            set { _projectStateAfterBuild = value; }
+            get => _projectStateAfterBuild;
+            set => _projectStateAfterBuild = value;
         }
 
         /// <summary>
@@ -423,15 +414,9 @@ NodePacketType INodePacket.Type
         /// </summary>
         Dictionary<string, string> IBuildResults.SavedEnvironmentVariables
         {
-            get
-            {
-                return _savedEnvironmentVariables;
-            }
+            get => _savedEnvironmentVariables;
 
-            set
-            {
-                _savedEnvironmentVariables = value;
-            }
+            set => _savedEnvironmentVariables = value;
         }
 
         /// <summary>
@@ -439,15 +424,9 @@ Dictionary<string, string> IBuildResults.SavedEnvironmentVariables
         /// </summary>
         string IBuildResults.SavedCurrentDirectory
         {
-            get
-            {
-                return _savedCurrentDirectory;
-            }
+            get => _savedCurrentDirectory;
 
-            set
-            {
-                _savedCurrentDirectory = value;
-            }
+            set => _savedCurrentDirectory = value;
         }
 
         /// <summary>
@@ -496,7 +475,7 @@ internal bool ResultBelongsToRootRequest
         /// <returns>The results for the specified target</returns>
         /// <exception>KeyNotFoundException is returned if the specified target doesn't exist when reading this property.</exception>
         /// <exception>ArgumentException is returned if the specified target already has results.</exception>
-        public ITargetResult this[string target]
+        public TargetResult this[string target]
         {
             [DebuggerStepThrough]
             get
@@ -510,8 +489,8 @@ public ITargetResult this[string target]
         /// <param name="result">The results for the target.</param>
         public void AddResultsForTarget(string target, TargetResult result)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(target, "target");
-            ErrorUtilities.VerifyThrowArgumentNull(result, "result");
+            ErrorUtilities.VerifyThrowArgumentNull(target, nameof(target));
+            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
             if (_resultsByTarget.ContainsKey(target))
             {
                 ErrorUtilities.VerifyThrow(_resultsByTarget[target].ResultCode == TargetResultCode.Skipped, "Items already exist for target {0}.", target);
@@ -526,11 +505,11 @@ public void AddResultsForTarget(string target, TargetResult result)
         /// <param name="results">The results to merge in.</param>
         public void MergeResults(BuildResult results)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(results, "results");
+            ErrorUtilities.VerifyThrowArgumentNull(results, nameof(results));
             ErrorUtilities.VerifyThrow(results.ConfigurationId == ConfigurationId, "Result configurations don't match");
 
             // If we are merging with ourself or with a shallow clone, do nothing.
-            if (Object.ReferenceEquals(this, results) || Object.ReferenceEquals(_resultsByTarget, results._resultsByTarget))
+            if (ReferenceEquals(this, results) || ReferenceEquals(_resultsByTarget, results._resultsByTarget))
             {
                 return;
             }
@@ -581,7 +560,7 @@ void INodePacketTranslatable.Translate(INodePacketTranslator translator)
             translator.Translate(ref _defaultTargets);
             translator.Translate(ref _circularDependency);
             translator.TranslateException(ref _requestException);
-            translator.TranslateDictionary<ConcurrentDictionary<string, TargetResult>, TargetResult>(ref _resultsByTarget, TargetResult.FactoryForDeserialization, CreateTargetResultDictionary);
+            translator.TranslateDictionary(ref _resultsByTarget, TargetResult.FactoryForDeserialization, CreateTargetResultDictionary);
             translator.Translate(ref _baseOverallResult);
             translator.Translate(ref _projectStateAfterBuild, ProjectInstance.FactoryForDeserialization);
             translator.Translate(ref _savedCurrentDirectory);
@@ -591,7 +570,7 @@ void INodePacketTranslatable.Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization
         /// </summary>
-        static internal BuildResult FactoryForDeserialization(INodePacketTranslator translator)
+        internal static BuildResult FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new BuildResult(translator);
         }
@@ -626,16 +605,20 @@ internal void ClearCachedFiles()
         /// </summary>
         internal BuildResult Clone()
         {
-            BuildResult result = new BuildResult();
-            result._submissionId = _submissionId;
-            result._configurationId = _configurationId;
-            result._globalRequestId = _globalRequestId;
-            result._parentGlobalRequestId = _parentGlobalRequestId;
-            result._nodeRequestId = _nodeRequestId;
-            result._requestException = _requestException;
-            result._resultsByTarget = new ConcurrentDictionary<string, TargetResult>(_resultsByTarget, StringComparer.OrdinalIgnoreCase);
-            result._baseOverallResult = this.OverallResult == BuildResultCode.Success;
-            result._circularDependency = _circularDependency;
+            BuildResult result = new BuildResult
+            {
+                _submissionId = _submissionId,
+                _configurationId = _configurationId,
+                _globalRequestId = _globalRequestId,
+                _parentGlobalRequestId = _parentGlobalRequestId,
+                _nodeRequestId = _nodeRequestId,
+                _requestException = _requestException,
+                _resultsByTarget = new ConcurrentDictionary<string, TargetResult>(
+                    _resultsByTarget,
+                    StringComparer.OrdinalIgnoreCase),
+                _baseOverallResult = OverallResult == BuildResultCode.Success,
+                _circularDependency = _circularDependency
+            };
 
             return result;
         }
@@ -652,7 +635,7 @@ internal void SetOverallResult(bool overallResult)
         /// <summary>
         /// Creates the target result dictionary.
         /// </summary>
-        private ConcurrentDictionary<string, TargetResult> CreateTargetResultDictionary(int capacity)
+        private static ConcurrentDictionary<string, TargetResult> CreateTargetResultDictionary(int capacity)
         {
             return new ConcurrentDictionary<string, TargetResult>(1, capacity, StringComparer.OrdinalIgnoreCase);
         }
@@ -661,14 +644,13 @@ private ConcurrentDictionary<string, TargetResult> CreateTargetResultDictionary(
         /// Creates the target result dictionary and populates it with however many target results are 
         /// available given the list of targets passed. 
         /// </summary>
-        private ConcurrentDictionary<string, TargetResult> CreateTargetResultDictionaryWithContents(BuildResult existingResults, string[] targetNames)
+        private static ConcurrentDictionary<string, TargetResult> CreateTargetResultDictionaryWithContents(BuildResult existingResults, string[] targetNames)
         {
-            var resultsByTarget = CreateTargetResultDictionary(targetNames.Length);
+            ConcurrentDictionary<string, TargetResult> resultsByTarget = CreateTargetResultDictionary(targetNames.Length);
 
             foreach (string target in targetNames)
             {
-                TargetResult targetResult;
-                if (existingResults.ResultsByTarget.TryGetValue(target, out targetResult))
+                if (existingResults.ResultsByTarget.TryGetValue(target, out TargetResult targetResult))
                 {
                     resultsByTarget[target] = targetResult;
                 }
diff --git a/src/Build/BackEnd/Shared/CircularDependencyException.cs b/src/Build/BackEnd/Shared/CircularDependencyException.cs
index 1f287a32eb7..2cde02d08a5 100644
--- a/src/Build/BackEnd/Shared/CircularDependencyException.cs
+++ b/src/Build/BackEnd/Shared/CircularDependencyException.cs
@@ -6,10 +6,7 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
 using System.Runtime.Serialization;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -27,7 +24,6 @@ internal class CircularDependencyException : Exception
         /// Constructs a standard BuildAbortedException.
         /// </summary>
         internal CircularDependencyException()
-            : base()
         {
         }
 
diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index 5714c2cf9a2..696bc978680 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -7,7 +7,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Text;
 
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -26,7 +25,7 @@ internal class ConfigurationMetadata : IEquatable<ConfigurationMetadata>
         /// </summary>
         public ConfigurationMetadata(BuildRequestConfiguration configuration)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(configuration, "configuration");
+            ErrorUtilities.VerifyThrowArgumentNull(configuration, nameof(configuration));
             GlobalProperties = new PropertyDictionary<ProjectPropertyInstance>(configuration.GlobalProperties);
             ProjectFullPath = FileUtilities.NormalizePath(configuration.ProjectFullPath);
             ToolsVersion = configuration.ToolsVersion;
@@ -37,11 +36,11 @@ public ConfigurationMetadata(BuildRequestConfiguration configuration)
         /// </summary>
         public ConfigurationMetadata(Project project)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(project, "project");
+            ErrorUtilities.VerifyThrowArgumentNull(project, nameof(project));
             GlobalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalProperties.Count);
             foreach (KeyValuePair<string, string> entry in project.GlobalProperties)
             {
-                this.GlobalProperties[entry.Key] = ProjectPropertyInstance.Create(entry.Key, entry.Value);
+                GlobalProperties[entry.Key] = ProjectPropertyInstance.Create(entry.Key, entry.Value);
             }
 
             ToolsVersion = project.ToolsVersion;
@@ -51,11 +50,7 @@ public ConfigurationMetadata(Project project)
         /// <summary>
         /// The full path to the project to build.
         /// </summary>
-        public string ProjectFullPath
-        {
-            get;
-            private set;
-        }
+        public string ProjectFullPath { get; }
 
         /// <summary>
         /// The tools version specified for the configuration.
@@ -63,20 +58,12 @@ public string ProjectFullPath
         /// May have originated from a /tv switch, or an MSBuild task,
         /// or a Project tag, or the default.
         /// </summary>
-        public string ToolsVersion
-        {
-            get;
-            private set;
-        }
+        public string ToolsVersion { get; }
 
         /// <summary>
         /// The set of global properties which should be used when building this project.
         /// </summary>
-        public PropertyDictionary<ProjectPropertyInstance> GlobalProperties
-        {
-            get;
-            private set;
-        }
+        public PropertyDictionary<ProjectPropertyInstance> GlobalProperties { get; }
 
         /// <summary>
         /// This override is used to provide a hash code for storage in dictionaries and the like.
@@ -99,12 +86,12 @@ public override int GetHashCode()
         /// <returns>True if they contain the same data, false otherwise</returns>
         public override bool Equals(object obj)
         {
-            if (Object.ReferenceEquals(obj, null))
+            if (ReferenceEquals(obj, null))
             {
                 return false;
             }
 
-            if (this.GetType() != obj.GetType())
+            if (GetType() != obj.GetType())
             {
                 return false;
             }
@@ -121,7 +108,7 @@ public override bool Equals(object obj)
         /// <returns>True if equal, false otherwise.</returns>
         public bool Equals(ConfigurationMetadata other)
         {
-            if (Object.ReferenceEquals(other, null))
+            if (ReferenceEquals(other, null))
             {
                 return false;
             }
@@ -138,7 +125,7 @@ public bool Equals(ConfigurationMetadata other)
         /// <returns>True if the objects contain the same data, false otherwise.</returns>
         private bool InternalEquals(ConfigurationMetadata other)
         {
-            if (Object.ReferenceEquals(this, other))
+            if (ReferenceEquals(this, other))
             {
                 return true;
             }
diff --git a/src/Build/BackEnd/Shared/IBuildResults.cs b/src/Build/BackEnd/Shared/IBuildResults.cs
index 12b77833edb..ac7aba64d7b 100644
--- a/src/Build/BackEnd/Shared/IBuildResults.cs
+++ b/src/Build/BackEnd/Shared/IBuildResults.cs
@@ -7,7 +7,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Text;
 using Microsoft.Build.Execution;
 
 namespace Microsoft.Build.BackEnd
@@ -20,54 +19,34 @@ internal interface IBuildResults
         /// <summary>
         /// The exception, if any, generated while the build ran.
         /// </summary>
-        Exception Exception
-        {
-            get;
-        }
+        Exception Exception { get; }
 
         /// <summary>
         /// The overall build result code.
         /// </summary>
-        BuildResultCode OverallResult
-        {
-            get;
-        }
+        BuildResultCode OverallResult { get; }
 
         /// <summary>
         /// Returns an enumerator for all target results in this build result
         /// </summary>
-        IDictionary<string, TargetResult> ResultsByTarget
-        {
-            get;
-        }
+        IDictionary<string, TargetResult> ResultsByTarget { get; }
 
         /// <summary>
         /// Set of environment variables for the configuration this result came from
         /// </summary>
-        Dictionary<string, string> SavedEnvironmentVariables
-        {
-            get;
-            set;
-        }
+        Dictionary<string, string> SavedEnvironmentVariables { get; set; }
 
         /// <summary>
         /// The current directory for the configuration this result came from
         /// </summary>
-        string SavedCurrentDirectory
-        {
-            get;
-            set;
-        }
+        string SavedCurrentDirectory { get; set; }
 
         /// <summary>
         /// Gets the results for a target in the build request
         /// </summary>
         /// <param name="target">The target name</param>
         /// <returns>The target results</returns>
-        ITargetResult this[string target]
-        {
-            get;
-        }
+        TargetResult this[string target] { get; }
 
         /// <summary>
         /// Returns true if there are results for the specified target
diff --git a/src/Build/BackEnd/Shared/ITargetResult.cs b/src/Build/BackEnd/Shared/ITargetResult.cs
index 400b3e128cd..69e14095a09 100644
--- a/src/Build/BackEnd/Shared/ITargetResult.cs
+++ b/src/Build/BackEnd/Shared/ITargetResult.cs
@@ -6,9 +6,7 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
-using System.Text;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Execution
@@ -43,27 +41,22 @@ public interface ITargetResult
         /// <summary>
         /// The exception generated when the target ran, if any.
         /// </summary>
-        Exception Exception
-        {
-            get;
-        }
+        Exception Exception { get; }
 
         /// <summary>
         /// The set of build items output by the target.
         /// These are ITaskItem's, so they have no item-type.
         /// </summary>
-        [SuppressMessage("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays", Justification = "This isn't worth fixing. The current code depends too on the fact that TaskItem[] can implicitly cast to ITaskItem[] but the same is not true for List<TaskItem> and List<ITaskItem>. Also a public interface (IBuildEngine) would have to be changed, or the items copied into an array")]
-        ITaskItem[] Items
-        {
-            get;
-        }
+        [SuppressMessage(
+            "Microsoft.Performance",
+            "CA1819:PropertiesShouldNotReturnArrays",
+            Justification =
+                "This isn't worth fixing. The current code depends too on the fact that TaskItem[] can implicitly cast to ITaskItem[] but the same is not true for List<TaskItem> and List<ITaskItem>. Also a public interface (IBuildEngine) would have to be changed, or the items copied into an array")]
+        ITaskItem[] Items { get; }
 
         /// <summary>
         /// The result code for the target run.
         /// </summary>
-        TargetResultCode ResultCode
-        {
-            get;
-        }
+        TargetResultCode ResultCode { get; }
     }
 }
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index c538b55196d..ef89a40693e 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -8,7 +8,6 @@
 using System;
 using System.Diagnostics;
 using System.IO;
-using System.Text;
 using System.Globalization;
 using System.IO.Compression;
 using Microsoft.Build.BackEnd;
@@ -52,8 +51,8 @@ public class TargetResult : ITargetResult, INodePacketTranslatable
         /// <param name="result">The overall result for the target.</param>
         internal TargetResult(TaskItem[] items, WorkUnitResult result)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(items, "items");
-            ErrorUtilities.VerifyThrowArgumentNull(result, "result");
+            ErrorUtilities.VerifyThrowArgumentNull(items, nameof(items));
+            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
             _itemsStore = new ItemsStore(items);
             _result = result;
         }
@@ -70,11 +69,9 @@ private TargetResult(INodePacketTranslator translator)
         /// Returns the exception which aborted this target, if any.
         /// </summary>
         /// <value>The exception which aborted this target, if any.</value>
-        public Exception Exception
-        {
+        public Exception Exception {
             [DebuggerStepThrough]
-            get
-            { return _result.Exception; }
+            get => _result.Exception;
         }
 
         /// <summary>
@@ -132,8 +129,7 @@ public TargetResultCode ResultCode
         internal WorkUnitResult WorkUnitResult
         {
             [DebuggerStepThrough]
-            get
-            { return _result; }
+            get => _result;
         }
 
         /// <summary>
@@ -142,12 +138,10 @@ internal WorkUnitResult WorkUnitResult
         internal bool TargetFailureDoesntCauseBuildFailure
         {
             [DebuggerStepThrough]
-            get
-            { return _targetFailureDoesntCauseBuildFailure; }
+            get => _targetFailureDoesntCauseBuildFailure;
 
             [DebuggerStepThrough]
-            set
-            { _targetFailureDoesntCauseBuildFailure = value; }
+            set => _targetFailureDoesntCauseBuildFailure = value;
         }
 
         #region INodePacketTranslatable Members
@@ -176,7 +170,7 @@ void INodePacketTranslatable.Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal TargetResult FactoryForDeserialization(INodePacketTranslator translator)
+        internal static TargetResult FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new TargetResult(translator);
         }
@@ -278,7 +272,7 @@ private void RetrieveItemsFromCache()
         /// <summary>
         /// Gets the translator for this configuration.
         /// </summary>
-        private INodePacketTranslator GetResultsCacheTranslator(int configId, string targetToCache, TranslationDirection direction)
+        private static INodePacketTranslator GetResultsCacheTranslator(int configId, string targetToCache, TranslationDirection direction)
         {
             string cacheFile = GetCacheFile(configId, targetToCache);
             if (direction == TranslationDirection.WriteToStream)
@@ -303,40 +297,24 @@ private INodePacketTranslator GetResultsCacheTranslator(int configId, string tar
         /// </summary>
         private struct CacheInfo
         {
-            /// <summary>
-            /// The configuration ID for these results.
-            /// </summary>
-            private int _configId;
-
-            /// <summary>
-            /// The target with which these results are associated.
-            /// </summary>
-            private string _targetName;
-
             /// <summary>
             /// Constructor.
             /// </summary>
             public CacheInfo(int configId, string targetName)
             {
-                _configId = configId;
-                _targetName = targetName;
+                ConfigId = configId;
+                TargetName = targetName;
             }
 
             /// <summary>
             /// Retrieves the configuration id.
             /// </summary>
-            public int ConfigId
-            {
-                get { return _configId; }
-            }
+            public int ConfigId { get; }
 
             /// <summary>
             /// Retrieves the target name.
             /// </summary>
-            public string TargetName
-            {
-                get { return _targetName; }
-            }
+            public string TargetName { get; }
         }
 
         /// <summary>
@@ -363,13 +341,13 @@ private class ItemsStore : INodePacketTranslatable
             /// <summary>
             /// The compressed set of items, if any.
             /// </summary>
-            private byte[] _compressedItems = null;
+            private byte[] _compressedItems;
 
             /// <summary>
             /// The count of items, stored here so that we don't have to decompress the items if we are
             /// only looking at the count.
             /// </summary>
-            private int _itemsCount = 0;
+            private int _itemsCount;
 
             /// <summary>
             /// The items produced by this target.
@@ -383,14 +361,14 @@ static ItemsStore()
             {
                 if (Int32.TryParse(Environment.GetEnvironmentVariable("MSBUILDTARGETRESULTCOMPRESSIONTHRESHOLD"), out ItemsStore.s_compressionThreshold))
                 {
-                    if (ItemsStore.s_compressionThreshold < 0)
+                    if (s_compressionThreshold < 0)
                     {
-                        ItemsStore.s_compressionThreshold = 0;
+                        s_compressionThreshold = 0;
                     }
                 }
                 else
                 {
-                    ItemsStore.s_compressionThreshold = ItemsStore.DefaultCompressionThreshold;
+                    s_compressionThreshold = DefaultCompressionThreshold;
                 }
             }
 
@@ -415,10 +393,7 @@ private ItemsStore(INodePacketTranslator translator)
             /// <summary>
             /// Gets the count of items.
             /// </summary>
-            public int ItemsCount
-            {
-                get { return _itemsCount; }
-            }
+            public int ItemsCount => _itemsCount;
 
             /// <summary>
             /// Retrieves the items.
@@ -478,7 +453,7 @@ public void Translate(INodePacketTranslator translator)
             /// <summary>
             /// Factory for the serializer.
             /// </summary>
-            static internal ItemsStore FactoryForDeserialization(INodePacketTranslator translator)
+            internal static ItemsStore FactoryForDeserialization(INodePacketTranslator translator)
             {
                 return new ItemsStore(translator);
             }
@@ -537,16 +512,16 @@ private void CompressItems()
                 // rough guess for an average number of bytes needed to store them compressed.  This doesn't have to be accurate, just
                 // big enough to avoid unnecessary buffer reallocations in most cases.
                 int defaultCompressedBufferCapacity = _uncompressedItems.Length * 64;
-                using (MemoryStream serializedStream = new MemoryStream(defaultCompressedBufferCapacity))
+                using (var serializedStream = new MemoryStream(defaultCompressedBufferCapacity))
                 {
-                    using (DeflateStream deflateStream = new DeflateStream(serializedStream, CompressionMode.Compress))
+                    using (var deflateStream = new DeflateStream(serializedStream, CompressionMode.Compress))
                     {
                         INodePacketTranslator serializedBufferTranslator = NodePacketTranslator.GetWriteTranslator(deflateStream);
 
                         // Again, a rough calculation of buffer size, this time for an uncompressed buffer.  We assume compression 
                         // will give us 2:1, as it's all text.
                         int defaultUncompressedBufferCapacity = defaultCompressedBufferCapacity * 2;
-                        using (MemoryStream itemsStream = new MemoryStream(defaultUncompressedBufferCapacity))
+                        using (var itemsStream = new MemoryStream(defaultUncompressedBufferCapacity))
                         {
                             INodePacketTranslator itemTranslator = NodePacketTranslator.GetWriteTranslator(itemsStream);
 
@@ -556,9 +531,9 @@ private void CompressItems()
                             // being the same (and thus interning.)  This is a hueristic meant to get us in the ballpark to avoid 
                             // too many reallocations when growing the collections.
                             LookasideStringInterner interner = new LookasideStringInterner(StringComparer.Ordinal, _uncompressedItems.Length);
-                            for (int i = 0; i < _uncompressedItems.Length; i++)
+                            foreach (TaskItem t in _uncompressedItems)
                             {
-                                _uncompressedItems[i].TranslateWithInterning(itemTranslator, interner);
+                                t.TranslateWithInterning(itemTranslator, interner);
                             }
 
                             interner.Translate(serializedBufferTranslator);
diff --git a/src/Build/BackEnd/Shared/WorkUnitResult.cs b/src/Build/BackEnd/Shared/WorkUnitResult.cs
index dcf9969bbbd..7c55eccd510 100644
--- a/src/Build/BackEnd/Shared/WorkUnitResult.cs
+++ b/src/Build/BackEnd/Shared/WorkUnitResult.cs
@@ -6,8 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections.Generic;
-using System.Text;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -104,27 +102,21 @@ private WorkUnitResult(INodePacketTranslator translator)
         /// <summary>
         /// Get the result code.
         /// </summary>
-        internal WorkUnitResultCode ResultCode
-        {
-            get { return _resultCode; }
-        }
+        internal WorkUnitResultCode ResultCode => _resultCode;
 
         /// <summary>
         /// Get the action code.
         /// </summary>
         internal WorkUnitActionCode ActionCode
         {
-            get { return _actionCode; }
-            set { _actionCode = value; }
+            get => _actionCode;
+            set => _actionCode = value;
         }
 
         /// <summary>
         /// Get the exception
         /// </summary>
-        internal Exception Exception
-        {
-            get { return _exception; }
-        }
+        internal Exception Exception => _exception;
 
         #region INodePacketTranslatable Members
 
@@ -143,7 +135,7 @@ public void Translate(INodePacketTranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal WorkUnitResult FactoryForDeserialization(INodePacketTranslator translator)
+        internal static WorkUnitResult FactoryForDeserialization(INodePacketTranslator translator)
         {
             return new WorkUnitResult(translator);
         }
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 7b34225de32..d7eba3d1610 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -5,12 +5,6 @@
 // <summary>Interface for node packets.</summary>
 //-----------------------------------------------------------------------
 
-using System;
-using System.Collections.Generic;
-using System.Text;
-using System.IO;
-using Microsoft.Build.Framework;
-
 namespace Microsoft.Build.BackEnd
 {
     #region Enums
diff --git a/src/Tasks.UnitTests/GetSDKReference_Tests.cs b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
index e312bc6df08..d0cb92c471f 100644
--- a/src/Tasks.UnitTests/GetSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
@@ -507,9 +507,12 @@ public void VerifyNoCopyWhenReferenceOnlyIsTrue()
         public void GetReferenceAssembliesWhenExpandTrueCopyLocalFalse()
         {
             var engine = new MockEngine(_output);
-            var t = new GetSDKReferenceFiles();
-            t.BuildEngine = engine;
-            t.CacheFileFolderPath = _cacheDirectory;
+            var t = new GetSDKReferenceFiles
+            {
+                BuildEngine = engine,
+                CacheFileFolderPath = _cacheDirectory
+            };
+Console.WriteLine("erik: _cacheDirectory {0}", _cacheDirectory);
 
             ITaskItem item = new TaskItem(_sdkDirectory);
             item.SetMetadata("ExpandReferenceAssemblies", "true");
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index b4e22251e24..81c2215e4fd 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -77,20 +77,6 @@ public class GetSDKReferenceFiles : TaskExtension
         /// </summary>
         private string _cacheFilePath = Path.GetTempPath();
 
-        /// <summary>
-        /// Constructor
-        /// </summary>
-        public GetSDKReferenceFiles()
-        {
-            CacheFileFolderPath = Path.GetTempPath();
-            LogReferencesList = true;
-            LogRedistFilesList = true;
-            LogReferenceConflictBetweenSDKsAsWarning = true;
-            LogReferenceConflictWithinSDKAsWarning = false;
-            LogRedistConflictBetweenSDKsAsWarning = true;
-            LogRedistConflictWithinSDKAsWarning = false;
-        }
-
         #region Properties
 
         /// <summary>
@@ -140,13 +126,13 @@ public string[] ReferenceExtensions
         /// Should the references found as part of resolving the sdk be logged.
         /// The default is true
         /// </summary>
-        public bool LogReferencesList { get; set; }
+        public bool LogReferencesList { get; set; } = true;
 
         /// <summary>
         /// Should the redist files found as part of resolving the sdk be logged.
         /// The default is true
         /// </summary>
-        public bool LogRedistFilesList { get; set; }
+        public bool LogRedistFilesList { get; set; } = true;
 
         /// <summary>
         /// The targetted SDK identifier.
@@ -198,8 +184,12 @@ public string[] ReferenceExtensions
         /// Should conflicts between redist files across different referenced SDKs be logged as a message or a warning.
         /// The default is to log them as a warning.
         /// </summary>
-        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "SDKs", Justification = "Shipped this way in Dev11 Beta (go-live)")]
-        public bool LogRedistConflictBetweenSDKsAsWarning { get; set; }
+        [SuppressMessage(
+            "Microsoft.Naming",
+            "CA1709:IdentifiersShouldBeCasedCorrectly",
+            MessageId = "SDKs",
+            Justification = "Shipped this way in Dev11 Beta (go-live)")]
+        public bool LogRedistConflictBetweenSDKsAsWarning { get; set; } = true;
 
         /// <summary>
         /// Should conflicts between reference files within an SDK be logged as a message or a warning.
@@ -213,8 +203,12 @@ public string[] ReferenceExtensions
         /// Should conflicts between reference files across different referenced SDKs be logged as a message or a warning.
         /// The default is to log them as a warning.
         /// </summary>
-        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "SDKs", Justification = "Shipped this way in Dev11 Beta (go-live)")]
-        public bool LogReferenceConflictBetweenSDKsAsWarning { get; set; }
+        [SuppressMessage(
+            "Microsoft.Naming",
+            "CA1709:IdentifiersShouldBeCasedCorrectly",
+            MessageId = "SDKs",
+            Justification = "Shipped this way in Dev11 Beta (go-live)")]
+        public bool LogReferenceConflictBetweenSDKsAsWarning { get; set; } = true;
 
         /// <summary>
         /// Should we log exceptions which were hit when the cache file is being read and written to
@@ -669,7 +663,7 @@ private void PopulateReferencesForSDK(IEnumerable<ITaskItem> sdks)
 
                 if (info == null || !sdkFilesCache.IsAssemblyListCacheFileUpToDate(sdkIdentity, sdkRoot, _cacheFilePath))
                 {
-                    info = sdkFilesCache.GetCacheFileInfoFromSDK(sdkIdentity, sdkRoot, GetReferencePathsFromManifest(sdk));
+                    info = sdkFilesCache.GetCacheFileInfoFromSDK(sdkRoot, GetReferencePathsFromManifest(sdk));
 
                     // On a background thread save the file to disk
                     var saveContext = new SaveContext(sdkIdentity, sdkRoot, info);
@@ -884,7 +878,7 @@ private class SDKFilesCache
             private readonly GetAssemblyName _getAssemblyName;
 
             /// <summary>
-            /// Get the image runtime version from a afile
+            /// Get the image runtime version from a file
             /// </summary>
             private readonly GetAssemblyRuntimeVersion _getRuntimeVersion;
 
@@ -930,9 +924,9 @@ internal SDKInfo LoadAssemblyListFromCacheFile(string sdkIdentity, string sdkRoo
                     {
                         throw;
                     }
-
+//erik:
                     // Queue up for later logging, does not matter if the file is deleted or not
-                    _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceString("GetSDKReferenceFiles.ProblemReadingCacheFile", cacheFile, e.Message));
+                    _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceString("GetSDKReferenceFiles.ProblemReadingCacheFile", cacheFile, e.ToString()));
                 }
 
                 return null;
@@ -992,15 +986,15 @@ internal void SaveAssemblyListToCacheFile(object data)
             /// <summary>
             /// Get references from the paths provided, and populate the provided cache
             /// </summary>
-            internal SDKInfo GetCacheFileInfoFromSDK(string sdkIdentity, string sdkRootDirectory, string[] sdkManifestReferences)
+            internal SDKInfo GetCacheFileInfoFromSDK(string sdkRootDirectory, string[] sdkManifestReferences)
             {
                 var references = new ConcurrentDictionary<string, SdkReferenceInfo>(StringComparer.OrdinalIgnoreCase);
                 var directoryToFileList = new ConcurrentDictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);
 
                 var directoriesToHash = new List<string>();
 
-                var referenceDirectories = GetAllReferenceDirectories(sdkRootDirectory);
-                var redistDirectories = GetAllRedistDirectories(sdkRootDirectory);
+                IEnumerable<string> referenceDirectories = GetAllReferenceDirectories(sdkRootDirectory);
+                IEnumerable<string> redistDirectories = GetAllRedistDirectories(sdkRootDirectory);
 
                 directoriesToHash.AddRange(referenceDirectories);
                 directoriesToHash.AddRange(redistDirectories);
@@ -1017,7 +1011,7 @@ internal SDKInfo GetCacheFileInfoFromSDK(string sdkIdentity, string sdkRootDirec
 
                 PopulateRedistDictionaryFromPaths(directoryToFileList, redistDirectories);
 
-                var cacheInfo = new SDKInfo(references, directoryToFileList, FileUtilities.GetHexHash(sdkIdentity), FileUtilities.GetPathsHash(directoriesToHash));
+                var cacheInfo = new SDKInfo(references, directoryToFileList, FileUtilities.GetPathsHash(directoriesToHash));
                 return cacheInfo;
             }
 
@@ -1027,11 +1021,11 @@ internal SDKInfo GetCacheFileInfoFromSDK(string sdkIdentity, string sdkRootDirec
             private void PopulateReferencesDictionaryFromManifestPaths(ConcurrentDictionary<string, List<string>> referencesByDirectory, ConcurrentDictionary<string, SdkReferenceInfo> references, string[] sdkManifestReferences)
             {
                 // Sort by directory
-                var groupedByDirectory =
+                IEnumerable<IGrouping<string, string>> groupedByDirectory =
                     from reference in sdkManifestReferences
                     group reference by Path.GetDirectoryName(reference);
 
-                foreach (var group in groupedByDirectory)
+                foreach (IGrouping<string, string> group in groupedByDirectory)
                 {
                     referencesByDirectory.TryAdd(group.Key, group.ToList());
                 }
@@ -1049,7 +1043,7 @@ private void PopulateReferencesDictionaryFromPaths(ConcurrentDictionary<string,
                 referenceDirectories,
                 path =>
                 {
-                    List<string> files = Directory.GetFiles(path, "*", SearchOption.TopDirectoryOnly).ToList<string>();
+                    List<string> files = Directory.GetFiles(path, "*", SearchOption.TopDirectoryOnly).ToList();
                     referencesByDirectory.TryAdd(path, files);
 
                     Parallel.ForEach(files, filePath => { references.TryAdd(filePath, GetSDKReferenceInfo(filePath)); });
@@ -1216,22 +1210,22 @@ public SdkReferenceInfo(string fusionName, string imageRuntime, bool isWinMD, bo
             /// <summary>
             /// The fusionName
             /// </summary>
-            public string FusionName { get; private set; }
+            public string FusionName { get; }
 
             /// <summary>
             /// Is the file a winmd or not
             /// </summary>
-            public bool IsWinMD { get; private set; }
+            public bool IsWinMD { get; }
 
             /// <summary>
             /// Is the file a managed winmd or not
             /// </summary>
-            public bool IsManagedWinmd { get; private set; }
+            public bool IsManagedWinmd { get; }
 
             /// <summary>
             /// What is the imageruntime information on it.
             /// </summary>
-            public string ImageRuntime { get; private set; }
+            public string ImageRuntime { get; }
 
             #endregion
         }
@@ -1253,33 +1247,27 @@ private class SDKInfo
             /// <summary>
             /// Constructor
             /// </summary>
-            public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMetadata, ConcurrentDictionary<string, List<string>> directoryToFileList, string cacheFileSuffix, int cacheHash)
+            public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMetadata, ConcurrentDictionary<string, List<string>> directoryToFileList, int cacheHash)
             {
                 PathToReferenceMetadata = pathToReferenceMetadata;
                 DirectoryToFileList = directoryToFileList;
-                Suffix = cacheFileSuffix;
                 Hash = cacheHash;
             }
 
             /// <summary>
             /// A dictionary which maps a file path to a structure that contain some metadata information about that file.
             /// </summary>
-            public ConcurrentDictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get; private set; }
+            public ConcurrentDictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get; }
 
             /// <summary>
             /// Dictionary which maps a directory to a list of file names within that directory. This is used to shortcut hitting the disk for the list of files inside of it.
             /// </summary>
-            public ConcurrentDictionary<string, List<string>> DirectoryToFileList { get; private set; }
-
-            /// <summary>
-            /// Suffix for the cache file
-            /// </summary>
-            public string Suffix { get; private set; }
+            public ConcurrentDictionary<string, List<string>> DirectoryToFileList { get; }
 
             /// <summary>
             /// Hashset
             /// </summary>
-            public int Hash { get; private set; }
+            public int Hash { get; }
 
             public static SDKInfo Deserialize(string cacheFile)
             {
