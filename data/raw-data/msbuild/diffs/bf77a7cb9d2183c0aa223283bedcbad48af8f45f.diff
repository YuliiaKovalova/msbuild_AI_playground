diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index 52eb10a8b12..f299136e527 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -350,7 +350,7 @@ public void SdkResolverLoaderHonorsIncludeDefaultEnvVar()
                             resolvers.Add(new MockSdkResolverWithAssemblyPath(resolverPath));
                         }
                     };
-                    IList<SdkResolverBase> resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
+                    IReadOnlyList<SdkResolverBase> resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
 
                     resolvers.Count.ShouldBe(0);
                 }
@@ -390,7 +390,7 @@ public void SdkResolverLoaderHonorsAdditionalResolversFolder()
                     Environment.SetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER", additionalRoot);
 
                     SdkResolverLoader loader = new SdkResolverLoader();
-                    IList<string> resolvers = loader.FindPotentialSdkResolvers(testRoot, new MockElementLocation("file"));
+                    IReadOnlyList<string> resolvers = loader.FindPotentialSdkResolvers(testRoot, new MockElementLocation("file"));
 
                     resolvers.ShouldBeSameIgnoringOrder(new[] { resolver1Path, resolver2Path, resolver3Path });
                 }
@@ -459,7 +459,7 @@ private sealed class MockSdkResolverLoader : SdkResolverLoader
         {
             public Func<string, LoggingContext, ElementLocation, Assembly> LoadResolverAssemblyFunc { get; set; }
 
-            public Func<string, ElementLocation, IList<string>> FindPotentialSdkResolversFunc { get; set; }
+            public Func<string, ElementLocation, IReadOnlyList<string>> FindPotentialSdkResolversFunc { get; set; }
 
             public Func<Assembly, IEnumerable<Type>> GetResolverTypesFunc { get; set; }
 
@@ -485,7 +485,7 @@ protected override IEnumerable<Type> GetResolverTypes(Assembly assembly)
                 return base.GetResolverTypes(assembly);
             }
 
-            internal override IList<string> FindPotentialSdkResolvers(string rootFolder, ElementLocation location)
+            internal override IReadOnlyList<string> FindPotentialSdkResolvers(string rootFolder, ElementLocation location)
             {
                 if (FindPotentialSdkResolversFunc != null)
                 {
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index dce922f7c2f..2fa8989d641 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -638,12 +638,12 @@ private MockLoaderStrategy()
                 _resolversWithPatterns = new List<(string ResolvableSdkPattern, SdkResolver Resolver)>();
             }
 
-            internal override IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IReadOnlyList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
             {
                 return _resolvers.OrderBy(i => i.Priority).ToList();
             }
 
-            internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
+            internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
             ElementLocation location)
             {
                 var manifests = new List<SdkResolverManifest>();
@@ -663,7 +663,7 @@ internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContex
                 return manifests;
             }
 
-            protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+            protected internal override IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
             {
                 var resolvers = new List<SdkResolver>();
                 foreach (var resolver in _resolvers)
@@ -683,7 +683,7 @@ protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkReso
                 return resolvers.OrderBy(t => t.Priority).ToList();
             }
 
-            internal override IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IReadOnlyList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
             {
                 return new List<SdkResolver>();
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
index 8b937f7c5e6..b4ddbd55220 100644
--- a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
@@ -39,7 +39,7 @@ public static IBuildComponent CreateComponent(BuildComponentType type)
         }
 
         // Test hook
-        internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
+        internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IReadOnlyList<SdkResolver> resolvers = null)
         {
             ((CachingSdkResolverService)_cachedSdkResolver).InitializeForTests(resolverLoader, resolvers);
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 4bb7ed9bfb1..b6a4be03702 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -34,19 +34,18 @@ internal class SdkResolverLoader
 #endif
             ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
 
-        internal virtual IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
         {
-            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
+            var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> { new DefaultSdkResolver() }
                 : new List<SdkResolver>();
 
             return resolvers;
         }
 
-        internal virtual IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext,
-            ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
         {
-            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
+            var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> { new DefaultSdkResolver() }
                 : new List<SdkResolver>();
 
@@ -66,8 +65,7 @@ internal virtual IList<SdkResolver> LoadAllResolvers(LoggingContext loggingConte
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
 
-        internal virtual IList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
-            ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext, ElementLocation location)
         {
             return FindPotentialSdkResolversManifests(
                 Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot, "SdkResolvers"), location);
@@ -80,14 +78,14 @@ internal virtual IList<SdkResolverManifest> GetResolversManifests(LoggingContext
         /// <param name="rootFolder"></param>
         /// <param name="location"></param>
         /// <returns></returns>
-        internal virtual IList<string> FindPotentialSdkResolvers(string rootFolder, ElementLocation location)
+        internal virtual IReadOnlyList<string> FindPotentialSdkResolvers(string rootFolder, ElementLocation location)
         {
             var manifestsList = FindPotentialSdkResolversManifests(rootFolder, location);
 
             return manifestsList.Select(manifest => manifest.Path).ToList();
         }
 
-        internal virtual IList<SdkResolverManifest> FindPotentialSdkResolversManifests(string rootFolder, ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolverManifest> FindPotentialSdkResolversManifests(string rootFolder, ElementLocation location)
         {
             List<SdkResolverManifest> manifestsList = new List<SdkResolverManifest>();
 
@@ -183,14 +181,12 @@ private bool TryAddAssemblyManifestFromXml(string pathToManifest, string manifes
                 //   <Path>...</Path>
                 //   <ResolvableSdkPattern>(Optional field)</ResolvableSdkPattern>
                 // </SdkResolver>
-                manifest = SdkResolverManifest.Load(pathToManifest);
+                manifest = SdkResolverManifest.Load(pathToManifest, manifestFolder);
 
                 if (manifest == null || string.IsNullOrEmpty(manifest.Path))
                 {
                     ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, string.Empty);
                 }
-
-                manifest.Path = FileUtilities.FixFilePath(manifest.Path);
             }
             catch (XmlException e)
             {
@@ -198,12 +194,6 @@ private bool TryAddAssemblyManifestFromXml(string pathToManifest, string manifes
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), e, "SdkResolverManifestInvalid", pathToManifest, e.Message);
             }
 
-            if (!Path.IsPathRooted(manifest.Path))
-            {
-                manifest.Path = Path.Combine(manifestFolder, manifest.Path);
-                manifest.Path = Path.GetFullPath(manifest.Path);
-            }
-
             if (string.IsNullOrEmpty(manifest.Path) || !FileUtilities.FileExistsNoThrow(manifest.Path))
             {
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, manifest.Path);
@@ -242,7 +232,7 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #endif
         }
 
-        protected internal virtual IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+        protected internal virtual IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
         {
             var resolvers = new List<SdkResolver>();
             LoadResolvers(manifest.Path, loggingContext, location, resolvers);
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 85943ff9442..23a79a398d6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// <summary>
     /// Serialization contract for an SDK Resolver manifest
     /// </summary>
-    internal class SdkResolverManifest
+    internal sealed class SdkResolverManifest
     {
         private SdkResolverManifest()
         {
@@ -33,17 +33,17 @@ public SdkResolverManifest(string DisplayName, string Path, Regex ResolvableSdkR
         /// <remarks>
         /// This field should be used only for logging purposes. Do not use for any actual processing, unless that are tests.
         /// </remarks>
-        public string DisplayName { get; set; }
+        public string DisplayName { get; private set; }
 
         /// <summary>
         /// Path for resolvers dll location.
         /// </summary>
-        public string Path { get; set; }
+        public string Path { get; private set; }
 
         /// <summary>
         /// Regex which matches all the sdk names that could be resolved by the resolvers associated with given manifest.  
         /// </summary>
-        public Regex ResolvableSdkRegex { get; set; }
+        public Regex ResolvableSdkRegex { get; private set; }
 
         /// <summary>
         /// The time-out interval for the name pattern regex in milliseconds.
@@ -58,8 +58,9 @@ public SdkResolverManifest(string DisplayName, string Path, Regex ResolvableSdkR
         /// Deserialize the file into an SdkResolverManifest.
         /// </summary>
         /// <param name="filePath">Path to the manifest xml file.</param>
+        /// <param name="manifestFolder">Path to the directory containing the manifest.</param>
         /// <returns>New deserialized collection instance.</returns>
-        internal static SdkResolverManifest Load(string filePath)
+        internal static SdkResolverManifest Load(string filePath, string manifestFolder)
         {
             XmlReaderSettings readerSettings = new XmlReaderSettings()
             {
@@ -76,7 +77,16 @@ internal static SdkResolverManifest Load(string filePath)
                 {
                     if (reader.NodeType == XmlNodeType.Element && reader.Name == "SdkResolver")
                     {
-                        return ParseSdkResolverElement(reader, filePath);
+                        SdkResolverManifest manifest = ParseSdkResolverElement(reader, filePath);
+
+                        manifest.Path = FileUtilities.FixFilePath(manifest.Path);
+                        if (!System.IO.Path.IsPathRooted(manifest.Path))
+                        {
+                            manifest.Path = System.IO.Path.Combine(manifestFolder, manifest.Path);
+                            manifest.Path = System.IO.Path.GetFullPath(manifest.Path);
+                        }
+
+                        return manifest;
                     }
                     else
                     {
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index a684c59618a..c538f45f7e6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -46,12 +46,12 @@ internal class SdkResolverService : ISdkResolverService
         /// <remarks>
         /// Need it for supporting the ChangeWave less than <see cref="ChangeWaves.Wave17_4"/>. Remove when move out Wave17_4.
         /// </remarks>
-        private IList<SdkResolver> _resolversList;
+        private IReadOnlyList<SdkResolver> _resolversList;
 
         /// <summary>
         /// Stores the loaded SDK resolvers, mapped to the manifest from which they came.
         /// </summary>
-        private Dictionary<SdkResolverManifest, IList<SdkResolver>> _manifestToResolvers;
+        private Dictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>> _manifestToResolvers;
 
         /// <summary>
         /// Stores the list of manifests of specific SDK resolvers which could be loaded.
@@ -238,7 +238,7 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
             List<SdkResolver> resolvers = new List<SdkResolver>();
             foreach (var resolverManifest in resolversManifests)
             {
-                if (!_manifestToResolvers.TryGetValue(resolverManifest, out IList<SdkResolver> newResolvers))
+                if (!_manifestToResolvers.TryGetValue(resolverManifest, out IReadOnlyList<SdkResolver> newResolvers))
                 {
                     lock (_lockObject)
                     {
@@ -286,7 +286,7 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk
         }
 
         private bool TryResolveSdkUsingSpecifiedResolvers(
-            IList<SdkResolver> resolvers,
+            IReadOnlyList<SdkResolver> resolvers,
             int submissionId,
             SdkReference sdk,
             LoggingContext loggingContext,
@@ -379,7 +379,7 @@ private bool TryResolveSdkUsingSpecifiedResolvers(
         /// </summary>
         /// <param name="resolverLoader">An <see cref="SdkResolverLoader"/> to use for loading SDK resolvers.</param>
         /// <param name="resolvers">Explicit set of SdkResolvers to use for all SDK resolution.</param>
-        internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
+        internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IReadOnlyList<SdkResolver> resolvers = null)
         {
             if (resolverLoader != null)
             {
@@ -397,7 +397,7 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
                 {
                     _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
                     _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
-                    _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
+                    _manifestToResolvers = new Dictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>>();
 
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(DisplayName: "TestResolversManifest", Path: null, ResolvableSdkRegex: null);
                     _generalResolversManifestsRegistry.Add(sdkResolverManifest);
@@ -471,15 +471,15 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
                 MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
                 var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
 
-                _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
+                _manifestToResolvers = new Dictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>>();
 
                 // Load and add the manifest for the default resolvers, located directly in this dll.
-                IList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
+                IReadOnlyList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
+                SdkResolverManifest sdkDefaultResolversManifest = null;
                 if (defaultResolvers.Count > 0)
                 {
                     MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
-                    SdkResolverManifest sdkDefaultResolversManifest = new SdkResolverManifest(DisplayName: "DefaultResolversManifest", Path: null, ResolvableSdkRegex: null);
-                    allResolversManifests.Add(sdkDefaultResolversManifest);
+                    sdkDefaultResolversManifest = new SdkResolverManifest(DisplayName: "DefaultResolversManifest", Path: null, ResolvableSdkRegex: null);
                     _manifestToResolvers[sdkDefaultResolversManifest] = defaultResolvers;
                     MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.DisplayName, defaultResolvers.Count);
                 }
@@ -500,6 +500,10 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
                         _specificResolversManifestsRegistry.Add(manifest);
                     }
                 }
+                if (sdkDefaultResolversManifest != null)
+                {
+                    _generalResolversManifestsRegistry.Add(sdkDefaultResolversManifest);
+                }
             }
         }
 
