diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index 414e2ebe0b9..783f728e068 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1450,25 +1450,25 @@ public partial struct PluginTargetResult
         public string TargetName { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> TaskItems { get { throw null; } }
     }
-    public abstract partial class ProjectCacheBase
-    {
-        protected ProjectCacheBase() { }
-        public abstract System.Threading.Tasks.Task BeginBuildAsync(Microsoft.Build.Experimental.ProjectCache.CacheContext context, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-        public abstract System.Threading.Tasks.Task EndBuildAsync(Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-        public abstract System.Threading.Tasks.Task<Microsoft.Build.Experimental.ProjectCache.CacheResult> GetCacheResultAsync(Microsoft.Build.Execution.BuildRequestData buildRequest, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-    }
     public partial class ProjectCacheDescriptor
     {
         internal ProjectCacheDescriptor() { }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> EntryPoints { get { throw null; } }
         public string PluginAssemblyPath { get { throw null; } }
-        public Microsoft.Build.Experimental.ProjectCache.ProjectCacheBase PluginInstance { get { throw null; } }
+        public Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase PluginInstance { get { throw null; } }
         public System.Collections.Generic.IReadOnlyDictionary<string, string> PluginSettings { get { throw null; } }
         public Microsoft.Build.Graph.ProjectGraph ProjectGraph { get { throw null; } }
         public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
-        public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCacheBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
+        public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
         public override string ToString() { throw null; }
     }
+    public abstract partial class ProjectCachePluginBase
+    {
+        protected ProjectCachePluginBase() { }
+        public abstract System.Threading.Tasks.Task BeginBuildAsync(Microsoft.Build.Experimental.ProjectCache.CacheContext context, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+        public abstract System.Threading.Tasks.Task EndBuildAsync(Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+        public abstract System.Threading.Tasks.Task<Microsoft.Build.Experimental.ProjectCache.CacheResult> GetCacheResultAsync(Microsoft.Build.Execution.BuildRequestData buildRequest, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+    }
     public partial class ProxyTargets
     {
         public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) { }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index 7822ffd27a7..3809a771f27 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1444,25 +1444,25 @@ public partial struct PluginTargetResult
         public string TargetName { get { throw null; } }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> TaskItems { get { throw null; } }
     }
-    public abstract partial class ProjectCacheBase
-    {
-        protected ProjectCacheBase() { }
-        public abstract System.Threading.Tasks.Task BeginBuildAsync(Microsoft.Build.Experimental.ProjectCache.CacheContext context, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-        public abstract System.Threading.Tasks.Task EndBuildAsync(Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-        public abstract System.Threading.Tasks.Task<Microsoft.Build.Experimental.ProjectCache.CacheResult> GetCacheResultAsync(Microsoft.Build.Execution.BuildRequestData buildRequest, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
-    }
     public partial class ProjectCacheDescriptor
     {
         internal ProjectCacheDescriptor() { }
         public System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> EntryPoints { get { throw null; } }
         public string PluginAssemblyPath { get { throw null; } }
-        public Microsoft.Build.Experimental.ProjectCache.ProjectCacheBase PluginInstance { get { throw null; } }
+        public Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase PluginInstance { get { throw null; } }
         public System.Collections.Generic.IReadOnlyDictionary<string, string> PluginSettings { get { throw null; } }
         public Microsoft.Build.Graph.ProjectGraph ProjectGraph { get { throw null; } }
         public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
-        public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCacheBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
+        public static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings=null) { throw null; }
         public override string ToString() { throw null; }
     }
+    public abstract partial class ProjectCachePluginBase
+    {
+        protected ProjectCachePluginBase() { }
+        public abstract System.Threading.Tasks.Task BeginBuildAsync(Microsoft.Build.Experimental.ProjectCache.CacheContext context, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+        public abstract System.Threading.Tasks.Task EndBuildAsync(Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+        public abstract System.Threading.Tasks.Task<Microsoft.Build.Experimental.ProjectCache.CacheResult> GetCacheResultAsync(Microsoft.Build.Execution.BuildRequestData buildRequest, Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase logger, System.Threading.CancellationToken cancellationToken);
+    }
     public partial class ProxyTargets
     {
         public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) { }
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index c7baf563774..318c2791572 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -198,7 +198,7 @@ public enum ExceptionLocations
             EndBuildAsync = 1 << 3
         }
 
-        public class MockProjectCache : ProjectCacheBase
+        public class MockProjectCache : ProjectCachePluginBase
         {
             private readonly GraphCacheResponse? _testData;
             public ConcurrentQueue<BuildRequestData> Requests { get; } = new ConcurrentQueue<BuildRequestData>();
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
index a9481d72261..70670c72e13 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
@@ -29,7 +29,7 @@ public class ProjectCacheDescriptor
 
         public IReadOnlyDictionary<string, string> PluginSettings { get; }
 
-        public ProjectCacheBase? PluginInstance { get; }
+        public ProjectCachePluginBase? PluginInstance { get; }
 
         private ProjectCacheDescriptor(
             IReadOnlyCollection<ProjectGraphEntryPoint>? entryPoints,
@@ -55,7 +55,7 @@ private ProjectCacheDescriptor(
         }
 
         private ProjectCacheDescriptor(
-            ProjectCacheBase pluginInstance,
+            ProjectCachePluginBase pluginInstance,
             IReadOnlyCollection<ProjectGraphEntryPoint>? entryPoints,
             ProjectGraph? projectGraph,
             IReadOnlyDictionary<string, string>? pluginSettings) : this(entryPoints, projectGraph, pluginSettings)
@@ -73,7 +73,7 @@ public static ProjectCacheDescriptor FromAssemblyPath(
         }
 
         public static ProjectCacheDescriptor FromInstance(
-            ProjectCacheBase pluginInstance,
+            ProjectCachePluginBase pluginInstance,
             IReadOnlyCollection<ProjectGraphEntryPoint>? entryPoints,
             ProjectGraph? projectGraph,
             IReadOnlyDictionary<string, string>? pluginSettings = null)
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheBase.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
similarity index 97%
rename from src/Build/BackEnd/Components/ProjectCache/ProjectCacheBase.cs
rename to src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
index 74dcf0b0d58..2fe895fe150 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Experimental.ProjectCache
     /// <summary>
     ///     Only one plugin instance can exist for a given BuildManager BeginBuild / EndBuild session.
     /// </summary>
-    public abstract class ProjectCacheBase
+    public abstract class ProjectCachePluginBase
     {
         /// <summary>
         ///     Called once before the build, to have the plugin instantiate its state.
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 8b0ea9accf2..a93d364c94f 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -23,10 +23,10 @@ internal class ProjectCacheService
         private readonly PluginLoggerBase _logger;
         private readonly ProjectCacheDescriptor _projectCacheDescriptor;
         private readonly CancellationToken _cancellationToken;
-        private readonly ProjectCacheBase _projectCachePlugin;
+        private readonly ProjectCachePluginBase _projectCachePlugin;
 
         private ProjectCacheService(
-            ProjectCacheBase projectCachePlugin,
+            ProjectCachePluginBase projectCachePlugin,
             BuildManager buildManager,
             PluginLoggerBase logger,
             ProjectCacheDescriptor projectCacheDescriptor,
@@ -70,7 +70,7 @@ await plugin.BeginBuildAsync(
             return new ProjectCacheService(plugin, buildManager, logger, pluginDescriptor, cancellationToken);
         }
 
-        private static ProjectCacheBase GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
+        private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
         {
             if (pluginDescriptor.PluginInstance != null)
             {
@@ -88,11 +88,11 @@ private static ProjectCacheBase GetPluginInstance(ProjectCacheDescriptor pluginD
 #pragma warning restore CS8603 // Possible null reference return.
         }
 
-        private static ProjectCacheBase GetPluginInstanceFromType(Type pluginType)
+        private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
         {
             try
             {
-                return (ProjectCacheBase) Activator.CreateInstance(pluginType);
+                return (ProjectCachePluginBase) Activator.CreateInstance(pluginType);
             }
             catch (TargetInvocationException e) when (e.InnerException != null)
             {
@@ -104,7 +104,7 @@ private static Type GetTypeFromAssemblyPath(string pluginAssemblyPath)
         {
             var assembly = LoadAssembly(pluginAssemblyPath);
 
-            var type = GetTypes<ProjectCacheBase>(assembly).FirstOrDefault();
+            var type = GetTypes<ProjectCachePluginBase>(assembly).FirstOrDefault();
 
             ErrorUtilities.VerifyThrow(type != null, "NoProjectCachePluginFoundInAssembly", pluginAssemblyPath);
 
diff --git a/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs b/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs
index d9632a73a7b..df42b4ac302 100644
--- a/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs
+++ b/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs
@@ -10,7 +10,7 @@
 
 namespace MockCacheFromAssembly
 {
-    public class MockCacheFromAssembly : ProjectCacheBase
+    public class MockCacheFromAssembly : ProjectCachePluginBase
     {
         public MockCacheFromAssembly()
         {
