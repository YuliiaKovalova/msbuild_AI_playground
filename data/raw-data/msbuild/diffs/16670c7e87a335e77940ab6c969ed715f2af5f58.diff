diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 3be0b4ac397..b5108284b17 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4710,7 +4710,7 @@ private static bool TryExecuteAdd(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4736,7 +4736,7 @@ private static bool TryExecuteSubtract(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4762,7 +4762,7 @@ private static bool TryExecuteMultiply(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4788,7 +4788,7 @@ private static bool TryExecuteDivide(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -4814,7 +4814,7 @@ private static bool TryExecuteModulo(object[] args, out object resultValue)
                     return false;
                 }
 
-                if (IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
+                if (!EnableIntrinsicFunctionOverloads() || IsFloatingPointRepresentation(args[0]) || IsFloatingPointRepresentation(args[1]))
                 {
                     if (TryConvertToDouble(args[0], out double arg0) && TryConvertToDouble(args[1], out double arg1))
                     {
@@ -5345,6 +5345,8 @@ private static TypeCode SelectTypeOfFirstParameter(MethodBase method)
                     : TypeCode.Empty;
             }
 
+            private static bool EnableIntrinsicFunctionOverloads() => ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8);
+
             /// <summary>
             /// Construct and instance of objectType based on the constructor or method arguments provided.
             /// Arguments must never be null.
@@ -5387,7 +5389,7 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o
                             // Order by the TypeCode of the first parameter.
                             // When change wave is enabled, order long before double.
                             // Otherwise preserve prior behavior of double before long.
-                            IComparer<TypeCode> comparer = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8)
+                            IComparer<TypeCode> comparer = EnableIntrinsicFunctionOverloads()
                                 ? Comparer<TypeCode>.Create((key0, key1) => key0.CompareTo(key1))
                                 : Comparer<TypeCode>.Create((key0, key1) => key1.CompareTo(key0));
                             members = members.OrderBy(SelectTypeOfFirstParameter, comparer);
