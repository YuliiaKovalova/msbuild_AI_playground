diff --git a/src/Build.UnitTests/BufferedBinaryReader_Tests.cs b/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
index 0c65a2b8772..5818ab692a8 100644
--- a/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
+++ b/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
@@ -287,6 +287,32 @@ public void Test_FillBuffer_ReadString()
             }
         }
 
+        /// <summary>
+        /// Test ReadString support unicode string that are larger than the internal buffer.
+        /// </summary>
+        [Fact]
+        public void Test_Unicode_ReadString()
+        {
+            var testString = new string[] { "가 각 갂 갃 간", "一 丁 丂 七 丄 丅", "豈 更 車 賈 滑", "ﻬ ﻭ ﻮ ﻯ ﻰ ﻱ" };
+            using var stream = new MemoryStream();
+
+            using var writer = new BinaryWriter(stream);
+            foreach (string test in testString)
+            {
+                writer.Write(test);
+            }
+
+            stream.Position = 0;
+
+            // Use a buffer size that is between code point.
+            using var reader = new BufferedBinaryReader(stream, bufferCapacity: 7);
+            foreach (string test in testString)
+            {
+                string result = reader.ReadString();
+                Assert.Equal(test, result);
+            }
+        }
+
         /// <summary>
         /// Test Slice function to correctly stream with correct position.
         /// </summary>
diff --git a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
index 0248c31029b..b63b8eb0fb1 100644
--- a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
+++ b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
@@ -28,6 +28,7 @@ internal class BufferedBinaryReader : IBinaryReader
         private int bufferOffset = 0;
         private int bufferLength = 0;
         private Encoding encoding;
+        private Decoder decoder;
 
         public BufferedBinaryReader(Stream stream, Encoding? encoding = null, int bufferCapacity = 32768)
         {
@@ -39,6 +40,7 @@ public BufferedBinaryReader(Stream stream, Encoding? encoding = null, int buffer
             baseStream = stream;
             this.bufferCapacity = bufferCapacity;  // Note: bufferCapacity must be large enough for an BulkRead7BitEncodedInt operation.
             this.encoding = encoding ?? new UTF8Encoding();
+            this.decoder = this.encoding.GetDecoder();  // Note: decode will remember partially decoded characters
             buffer = new byte[this.bufferCapacity];
             charBuffer = new char[bufferCapacity + 1];
         }
@@ -101,12 +103,14 @@ public int ReadInt32()
         /// Reads a string with a prefixed of the length.
         /// </summary>
         /// <returns>A string.</returns>
-        /// <remarks>Logic refactored from BCL <see href="https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/BinaryReader.cs">BinaryReader.cs</see></remarks>
+        /// <remarks>Logic refactored from BCL <see href="https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/BinaryReader.cs">BinaryReader.cs</see> to leverage local buffers as to avoid extra allocations.</remarks>
         public string ReadString()
         {
+            // Length of the string in bytes, not chars
             int stringLength = Read7BitEncodedInt();
             int stringOffsetPos = 0;
             int readChunk = 0;
+            int charRead = 0;
 
             if (stringLength == 0)
             {
@@ -118,36 +122,34 @@ public string ReadString()
                 throw new FormatException();
             }
 
-            int charRead = 0;
+            cachedBuilder ??= new StringBuilder();
 
+            // Read the content from the local buffer.
             if (bufferLength > 0)
             {
-                // Read content in the buffer.
                 readChunk = stringLength < (bufferLength - bufferOffset) ? stringLength : bufferLength - bufferOffset;
-                charRead = encoding.GetChars(buffer, bufferOffset, readChunk, charBuffer, 0);
+                charRead = decoder.GetChars(buffer, bufferOffset, readChunk, charBuffer, 0, flush: false);
                 bufferOffset += readChunk;
                 baseStreamPosition += readChunk;
+                stringOffsetPos += readChunk;
+
+                // If the string is fits in the buffer, then cast to string without using string builder.
                 if (stringLength == readChunk)
                 {
-                    // if the string is fits in the buffer, then cast to string without using string builder.
                     return new string(charBuffer, 0, charRead);
                 }
                 else
                 {
-                    cachedBuilder ??= new StringBuilder();
                     cachedBuilder.Append(charBuffer, 0, charRead);
                 }
             }
 
-            cachedBuilder ??= new StringBuilder();
-            stringOffsetPos += readChunk;
-
+            // Loop to read the stream multiple times, as the string could be larger then local buffer.
             do
             {
-                // Read up to bufferCapacity;
                 readChunk = Math.Min(stringLength - stringOffsetPos, bufferCapacity);
                 FillBuffer(readChunk);
-                charRead = encoding.GetChars(buffer, bufferOffset, readChunk, charBuffer, 0);
+                charRead = decoder.GetChars(buffer, bufferOffset, readChunk, charBuffer, 0, flush: false);
                 bufferOffset += readChunk;
                 baseStreamPosition += readChunk;
                 cachedBuilder.Append(charBuffer, 0, charRead);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index ba1703f8c27..c1449bd6426 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -1082,9 +1082,10 @@ private void WriteProperties(IEnumerable properties)
 
         private void Write(BuildEventContext buildEventContext)
         {
-            // Place these 7 integers a byte buffer before writing to the stream.
+            // Optimized writing these 7 7bit encoded integers
+            // into a byte buffer, then in one call, write to the stream.
             int index = 0;
-            Span<int> ints =
+            Span<int> intSpan =
             [
                 buildEventContext.NodeId,
                 buildEventContext.ProjectContextId,
@@ -1095,9 +1096,9 @@ private void Write(BuildEventContext buildEventContext)
                 buildEventContext.EvaluationId,
             ];
 
-            foreach(int num in ints)
+            foreach(int num in intSpan)
             {
-                uint v = (uint)num;   // support negative numbers
+                uint v = (uint)num;   // treat as unsigned to support negative numbers
                 while (v >= 0x80)
                 {
                     buildEventContextBuffer[index++] = (byte)(v | 0x80);
@@ -1107,7 +1108,7 @@ private void Write(BuildEventContext buildEventContext)
                 buildEventContextBuffer[index++] = (byte)v;
             }
 
-            this.binaryWriter.Write(buildEventContextBuffer, 0, index);
+            binaryWriter.Write(buildEventContextBuffer, 0, index);
         }
 
         private void Write(IEnumerable<KeyValuePair<string, string>> keyValuePairs)
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 4e381f14b54..4b4737f3acf 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -60,7 +60,7 @@ public static void Write7BitEncodedInt(this BinaryWriter writer, int value, byte
             // Write out an int 7 bits at a time.  The high bit of the byte,
             // when on, tells reader to continue reading more bytes.
             int index = 0;
-            uint v = (uint)value;   // support negative numbers
+            uint v = (uint)value;   // treat as unsigned to support negative numbers
             while (v >= 0x80)
             {
                 buffer[index++] = (byte)(v | 0x80);
@@ -78,7 +78,7 @@ public static void Write7BitEncodedInt(this BinaryWriter writer, int value)
         {
             // Write out an int 7 bits at a time.  The high bit of the byte,
             // when on, tells reader to continue reading more bytes.
-            uint v = (uint)value;   // support negative numbers
+            uint v = (uint)value;   // treat as unsigned to support negative numbers
             while (v >= 0x80)
             {
                 writer.Write((byte)(v | 0x80));
