diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index aa1dcf9f728..6efee9336ba 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -149,7 +149,7 @@ public class BuildParameters : ITranslatable
         /// <summary>
         /// Properties passed from the command line (e.g. by using /p:).
         /// </summary>
-        private HashSet<string> _propertiesFromCommandLine;
+        private ICollection<string> _propertiesFromCommandLine;
 
         /// <summary>
         /// The loggers.
@@ -285,7 +285,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             _environmentProperties = other._environmentProperties != null ? new PropertyDictionary<ProjectPropertyInstance>(other._environmentProperties) : null;
             _forwardingLoggers = other._forwardingLoggers != null ? new List<ForwardingLoggerRecord>(other._forwardingLoggers) : null;
             _globalProperties = other._globalProperties != null ? new PropertyDictionary<ProjectPropertyInstance>(other._globalProperties) : null;
-            _propertiesFromCommandLine = other._propertiesFromCommandLine != null ? new HashSet<string>(other._propertiesFromCommandLine) : null;
+            _propertiesFromCommandLine = other._propertiesFromCommandLine != null ? new HashSet<string>(other._propertiesFromCommandLine, StringComparer.OrdinalIgnoreCase) : null;
             HostServices = other.HostServices;
             _loggers = other._loggers != null ? new List<ILogger>(other._loggers) : null;
             _maxNodeCount = other._maxNodeCount;
@@ -479,11 +479,6 @@ public IDictionary<string, string> GlobalProperties
             }
         }
 
-        /// <summary>
-        /// Properties passed from the command line (e.g. by using /p:).
-        /// </summary>
-        public HashSet<string> PropertiesFromCommandLine => _propertiesFromCommandLine;
-
         /// <summary>
         /// Interface allowing the host to provide additional control over the build process.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index 89745b5aab9..1326ea054fc 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -88,7 +88,16 @@ internal override void ExecuteTask(Lookup lookup)
                             string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(property.Value, ExpanderOptions.ExpandAll, property.Location);
                             bucket.Expander.PropertiesUseTracker.CheckPreexistingUndefinedUsage(property, evaluatedValue, LoggingContext);
 
-                            PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, property.Name, evaluatedValue, property.Location, Project.GetProperty(property.Name)?.EvaluatedValue ?? null, LoggingContext);
+                            if (_propertyTrackingSettings != PropertyTrackingSetting.None)
+                            {
+                                PropertyTrackingUtils.LogPropertyAssignment(
+                                    _propertyTrackingSettings,
+                                    property.Name,
+                                    evaluatedValue,
+                                    property.Location,
+                                    Project.GetProperty(property.Name)?.EvaluatedValue ?? null,
+                                    LoggingContext);
+                            }
 
                             if (LogTaskInputs && !LoggingContext.LoggingService.OnlyLogCriticalEvents)
                             {
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index cb14eb7df34..3280ce578af 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1586,7 +1586,16 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
                             }
                         }
 
-                        PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, outputTargetName, outputString, parameterLocation, _projectInstance.GetProperty(outputTargetName)?.EvaluatedValue ?? null, _taskLoggingContext);
+                        if (_propertyTrackingSettings != PropertyTrackingSetting.None)
+                        {
+                            PropertyTrackingUtils.LogPropertyAssignment(
+                                _propertyTrackingSettings,
+                                outputTargetName,
+                                outputString,
+                                parameterLocation,
+                                _projectInstance.GetProperty(outputTargetName)?.EvaluatedValue ?? null,
+                                _taskLoggingContext);
+                        }
 
                         _batchBucket.Lookup.SetProperty(ProjectPropertyInstance.Create(outputTargetName, outputString, parameterLocation, _projectInstance.IsImmutable));
                     }
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 4b25d8ded91..247c986423f 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -503,7 +503,7 @@ public static string DisplayVersion
         /// <summary>
         /// Properties passed from the command line (e.g. by using /p:).
         /// </summary>
-        public HashSet<string> PropertiesFromCommandLine { get; }
+        public ICollection<string> PropertiesFromCommandLine { get; }
 
         /// <summary>
         /// The default tools version of this project collection. Projects use this tools version if they
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index ceff67c2bc5..f7775e3edc6 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1263,7 +1263,7 @@ private int AddGlobalProperties()
                     globalProperty.Name,
                     ((IProperty)globalProperty).EvaluatedValueEscaped,
                     isGlobalProperty: true /* it is a global property, but it comes from command line and is tracked separately */,
-                    false /* may NOT be a reserved name */,
+                    mayBeReserved: false /* may NOT be a reserved name */,
                     loggingContext: _evaluationLoggingContext,
                     isCommandLineProperty: _propertiesFromCommandLine.Contains(globalProperty.Name) /* IS coming from command line argument */);
             }
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 2b04ff1e3d4..8a66ca3f63f 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -392,7 +392,7 @@ private enum PropertySource
 
         private static string GetPropertySourceName(PropertySource source) => source switch
         {
-            PropertySource.Xml => "XML",
+            PropertySource.Xml => "Xml",
             PropertySource.BuiltIn => "BuiltIn",
             PropertySource.Global => "Global",
             PropertySource.Toolset => "Toolset",
@@ -446,11 +446,6 @@ internal static void LogPropertyAssignment(
             string? previousPropertyValue,
             LoggingContext loggingContext)
         {
-            if (settings == PropertyTrackingSetting.None)
-            {
-                return;
-            }
-
             if (previousPropertyValue == null)
             {
                 if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyInitialValueSet))
@@ -469,7 +464,8 @@ internal static void LogPropertyAssignment(
             }
             else
             {
-                if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyReassignment) || (settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
+                if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyReassignment)
+                    || (settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
                 {
                     if (propertyValue != previousPropertyValue)
                     {
