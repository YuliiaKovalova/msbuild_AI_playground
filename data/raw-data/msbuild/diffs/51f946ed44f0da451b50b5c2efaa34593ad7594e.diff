diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 33a91ea7676..a18e3702372 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1299,7 +1299,7 @@ public void StaticMethodWithThrowawayParameterSupported()
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 <Project>
   <PropertyGroup>
-    <MyProperty>Value is $([System.Int32]::TryParse(""3"", _))</MyProperty>
+    <MyProperty>Value is $([System.Int32]::TryParse(""3"", out _))</MyProperty>
   </PropertyGroup>
   <Target Name='Build'>
     <Message Text='$(MyProperty)' />
@@ -1315,7 +1315,7 @@ public void StaticMethodWithThrowawayParameterSupported2()
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 <Project>
   <PropertyGroup>
-    <MyProperty>Value is $([System.Int32]::TryParse(""notANumber"", _))</MyProperty>
+    <MyProperty>Value is $([System.Int32]::TryParse(""notANumber"", out _))</MyProperty>
   </PropertyGroup>
   <Target Name='Build'>
     <Message Text='$(MyProperty)' />
@@ -1325,6 +1325,22 @@ public void StaticMethodWithThrowawayParameterSupported2()
             logger.FullLog.ShouldContain("Value is False");
         }
 
+        [Fact]
+        public void StaticMethodWithUnderscoreNotConfusedWithThrowaway()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
+<Project>
+  <PropertyGroup>
+    <MyProperty>Value is $([System.String]::Join('_', 'asdf', 'jkl'))</MyProperty>
+  </PropertyGroup>
+  <Target Name='Build'>
+    <Message Text='$(MyProperty)' />
+  </Target>
+</Project>");
+
+            logger.FullLog.ShouldContain("Value is asdf_jkl");
+        }
+
         /// <summary>
         /// Creates a set of complicated item metadata and properties, and items to exercise
         /// the Expander class.  The data here contains escaped characters, metadata that
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index e752c4be4f5..23118a1c2ea 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3598,7 +3598,7 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                             try
                             {
                                 // If there are any out parameters, try to figure out their type and create defaults for them as appropriate before calling the method.
-                                if (args.Any(a => "_".Equals(a)))
+                                if (args.Any(a => "out _".Equals(a)))
                                 {
                                     IEnumerable<MethodInfo> methods = _receiverType.GetMethods(_bindingFlags).Where(m => m.Name.Equals(_methodMethodName) && m.GetParameters().Length == args.Length);
                                     functionResult = GetMethodResult(objectInstance, methods, args, 0);
@@ -3707,7 +3707,7 @@ private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> me
             {
                 for (int i = index; i < args.Length; i++)
                 {
-                    if (args[i].Equals("_"))
+                    if (args[i].Equals("out _"))
                     {
                         object toReturn = null;
                         foreach (MethodInfo method in methods)
