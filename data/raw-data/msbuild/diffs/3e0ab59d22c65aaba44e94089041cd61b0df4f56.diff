diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 658b19190f0..a2d50dd86c1 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Diagnostics;
 using System.Reflection;
+using System.Runtime.Remoting.Messaging;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
@@ -165,6 +166,12 @@ public void BuildsWhileBuildIsRunningOnServer()
                 string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
                 pidOfServerProcess = ParseNumber(output, "Server ID is ");
 
+                foreach (Process p in Process.GetProcesses())
+                {
+                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}");
+                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
+                }
+
                 t = Task.Run(() =>
                 {
                     RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _, false, _output);
@@ -173,6 +180,13 @@ public void BuildsWhileBuildIsRunningOnServer()
                 // The server will soon be in use; make sure we don't try to use it before that happens.
                 Thread.Sleep(1000);
 
+                _output.WriteLine("next batch");
+                foreach (Process p in Process.GetProcesses())
+                {
+                    _output.WriteLine($"Process number {p.Id} is {p.ProcessName}");
+                    p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
+                }
+
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
                 output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
                 success.ShouldBeTrue();
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index f3082189e18..004f97e80b2 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -86,7 +86,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 UseShellExecute = false,
                 Arguments = parameters
             };
-            var output = string.Empty;
+            string output = string.Empty;
             int pid = -1;
 
             using (var p = new Process { EnableRaisingEvents = true, StartInfo = psi })
@@ -120,16 +120,17 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 successfulExit = p.ExitCode == 0;
             }
 
-            output += "Process ID is " + pid + "\r\n";
-
             outputHelper?.WriteLine("==== OUTPUT ====");
             outputHelper?.WriteLine(output);
+            outputHelper?.WriteLine("Process ID is " + pid + "\r\n");
             outputHelper?.WriteLine("==============");
 
             Console.WriteLine("==== OUTPUT ====");
             Console.WriteLine(output);
+            Console.WriteLine("Process ID is " + pid + "\r\n");
             Console.WriteLine("==============");
 
+            output += "Process ID is " + pid + "\r\n";
             return output;
         }
     }
