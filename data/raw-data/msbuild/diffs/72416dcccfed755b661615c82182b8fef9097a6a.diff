diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 5917bec2182..1f26cf2814a 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -98,14 +98,15 @@ public Miscellaneous(ITestOutputHelper output) : base(output)
         [Fact]
         public void test()
         {
+            ITaskItem w = new TaskItem(Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"));
             ITaskItem x = new TaskItem(Path.Combine(s_myComponentsRootPath, "X.dll"));
             ITaskItem xpdb = new TaskItem(Path.Combine(s_myComponentsRootPath, "X.pdb"));
             ResolveAssemblyReference t = new()
             {
                 BuildEngine = new MockEngine(),
                 AllowedRelatedFileExtensions = new string[] { ".pdb" },
-                Assemblies = new ITaskItem[] { x, xpdb },
-                AssemblyFiles = new ITaskItem[] { x, xpdb },
+                Assemblies = new ITaskItem[] { xpdb },
+                AssemblyFiles = new ITaskItem[] { w, x },
                 SearchPaths = new string[] { s_myComponentsRootPath }
         };
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index a74b546a7e2..b3296d635a0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -545,6 +545,7 @@ internal void StopIOMonitoring()
 
             Path.Combine(s_myComponentsRootPath, "V.dll"),
             Path.Combine(s_myComponents2RootPath, "W.dll"),
+            Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"),
             Path.Combine(s_myComponentsRootPath, "X.dll"),
             Path.Combine(s_myComponentsRootPath, "X.pdb"),
             Path.Combine(s_myComponentsRootPath, "Y.dll"),
@@ -1438,8 +1439,8 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.pdb"), StringComparison.OrdinalIgnoreCase))
             {
-                // throw new BadImageReferenceException("Bad Image", null);
-                return new AssemblyNameExtension("X, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null");
+                // return new AssemblyNameExtension("X, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null");
+                throw new BadImageReferenceException("Bad Image", null);
             }
 
             if (String.Equals(path, @"C:\Regress714052\X86\a.dll", StringComparison.OrdinalIgnoreCase))
@@ -1492,6 +1493,10 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
             {
                 return new AssemblyNameExtension("W, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
             }
+            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"), StringComparison.OrdinalIgnoreCase))
+            {
+                return new AssemblyNameExtension("DependsOnX, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
+            }
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension("X, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
@@ -2361,6 +2366,14 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 return Array.Empty<AssemblyNameExtension>();
             }
 
+            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"), StringComparison.OrdinalIgnoreCase))
+            {
+                return new AssemblyNameExtension[]
+                {
+                    new AssemblyNameExtension("X, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null")
+                };
+            }
+
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension[]
