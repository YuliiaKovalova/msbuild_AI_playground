diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f683529b74d..37603b19d4d 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -645,7 +645,7 @@ void InitializeCaches()
                         config.ResultsNodeId = Scheduler.InvalidNodeId;
                     }
 
-                    _buildParameters.ProjectRootElementCache.DiscardImplicitReferences();
+                    _buildParameters.ProjectRootElementCache.SetImplicitReferencesToAutoReload();
                 }
             }
         }
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 3463e872980..2ad0eb08815 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -262,6 +262,11 @@ private ProjectRootElement(XmlDocumentWithLocation document)
             ProjectParser.Parse(document, this);
         }
 
+	/// <summary>
+        /// See comments for <see cref="ProjectRootElementCache.SetImplicitReferencesToAutoReload"/> 
+        /// </summary>
+        internal bool AutoReloadFromDisk { get; set; }
+
         /// <summary>
         /// Event raised after this project is renamed
         /// </summary>
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index 208a43ed668..ef42094209a 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -228,7 +228,8 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
                 {
                     _weakCache.TryGetValue(projectFile, out projectRootElement);
 
-                    if (projectRootElement != null)
+
+                    if (projectRootElement != null && projectRootElement.AutoReloadFromDisk)
                     {
                         BoostEntryInStrongCache(projectRootElement);
 
@@ -456,6 +457,38 @@ internal override void DiscardImplicitReferences()
             }
         }
 
+        /// <summary>
+        /// Set any implicitly loaded entries in the cache to automatically reload if they have
+        /// changed on disk, and clean up any entries that have been garbage collected.
+        /// </summary>
+        /// <remarks>
+        /// Previously, implicit references were always discarded when a build started (in BuildManager.BeginBuild).
+        /// This resulted in a lot of reloading of shared .props and .targets files when loading projects in a large
+        /// solution (see https://github.com/Microsoft/msbuild/issues/1068).
+        /// So now we don't remove these entries from the cache.  In order to preserve the previous behavior, we
+        /// do need to reload them if they've changed on disk, so we set an AutoReloadFromDisk on each ProjectRootElement
+        /// that was not explicitly loaded.
+        /// </remarks>
+        internal override void SetImplicitReferencesToAutoReload()
+        {
+            lock (_locker)
+            {
+                foreach (string projectPath in _weakCache.Keys)
+                {
+                    ProjectRootElement rootElement;
+
+                    if (_weakCache.TryGetValue(projectPath, out rootElement))
+                    {
+                        if (!rootElement.IsExplicitlyLoaded)
+                        {
+                            rootElement.AutoReloadFromDisk = true;
+                        }
+                    }
+                }
+                _weakCache.Scavenge();
+            }
+        }
+
         /// <summary>
         /// Forces a removal of a project root element from the weak cache if it is present.
         /// </summary>
diff --git a/src/Build/Evaluation/ProjectRootElementCacheBase.cs b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
index 69f0fe3137c..1207680a3dd 100644
--- a/src/Build/Evaluation/ProjectRootElementCacheBase.cs
+++ b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
@@ -65,6 +65,8 @@ internal abstract ProjectRootElement Get(string projectFile, OpenProjectRootElem
 
         internal abstract void DiscardImplicitReferences();
 
+        internal abstract void SetImplicitReferencesToAutoReload();
+
         internal abstract void DiscardAnyWeakReference(ProjectRootElement projectRootElement);
 
         /// <summary>
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index a5cb9278e33..cbfe36cad22 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -145,5 +145,10 @@ protected override void RaiseProjectRootElementRemovedFromStrongCache(ProjectRoo
         {
              throw new NotImplementedException();
         }
+
+        internal override void SetImplicitReferencesToAutoReload()
+        {
+            throw new NotImplementedException();
+        }
     }
 }
