diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 709824fad7c..688b0e3f306 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1492,13 +1492,6 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                         }
                                     }
 
-                                    // Embed the source file
-                                    if (factory is IHasSourceFilePath factoryWithSourceFilePath &&
-                                        factoryWithSourceFilePath.SourceFilePath != null)
-                                    {
-                                        taskFactoryLoggingHost.LoggingContext.LogIncludeFile(factoryWithSourceFilePath.SourceFilePath);
-                                    }
-
                                     // Throw an error if the ITaskFactory did not set the TaskType property.  If the property is null, it can cause NullReferenceExceptions in our code
                                     if (initialized && factory.TaskType == null)
                                     {
@@ -1507,6 +1500,19 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                 }
                                 finally
                                 {
+                                    // Embed the source file
+                                    if (factory is IHasSourceFilePath factoryWithSourceFilePath &&
+                                        factoryWithSourceFilePath.SourceFilePath != null)
+                                    {
+                                        taskFactoryLoggingHost.LoggingContext.LogIncludeFile(factoryWithSourceFilePath.SourceFilePath);
+
+                                        if (factoryWithSourceFilePath.IsGeneratedSourceFile &&
+                                            factoryWithSourceFilePath.DeleteGeneratedSourceFile &&
+                                            FileSystems.Default.FileExists(factoryWithSourceFilePath.SourceFilePath))
+                                        {
+                                            File.Delete(factoryWithSourceFilePath.SourceFilePath);
+                                        }
+                                    }
 #if FEATURE_APPDOMAIN
                                     taskFactoryLoggingHost.MarkAsInactive();
 #endif
diff --git a/src/Framework/IHasSourceFilePath.cs b/src/Framework/IHasSourceFilePath.cs
index 07d3627c5df..15f0b933e4d 100644
--- a/src/Framework/IHasSourceFilePath.cs
+++ b/src/Framework/IHasSourceFilePath.cs
@@ -6,5 +6,9 @@ namespace Microsoft.Build.Framework
     internal interface IHasSourceFilePath
     {
         string? SourceFilePath { get; }
+
+        bool IsGeneratedSourceFile { get; }
+
+        bool DeleteGeneratedSourceFile { get; }
     }
 }
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 3684ebf8bec..58f6799ceab 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -1097,6 +1097,7 @@ public override bool Execute()
             Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result);
 
             result.ShouldBeTrue();
+            File.Exists(taskClass.Path).ShouldBeTrue();
 
             string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
             using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
@@ -1115,7 +1116,7 @@ public void EmbedsSourceFileInBinlogWhenFailsToCompile()
 
             using var env = TestEnvironment.Create();
             var folder = env.CreateFolder(createFolder: true);
-            var taskClass = env.CreateFile(folder, $"{taskName}.cs", $$"""
+            var classThatFailsToCompile = env.CreateFile(folder, $"{taskName}.cs", $$"""
                 namespace InlineTask
                 {
                     using Microsoft.Build.Utilities;
@@ -1132,7 +1133,7 @@ public class {{taskName}} : Task
                     TaskFactory="CodeTaskFactory"
                     AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
                     <Task>
-                      <Code Type="Class" Language="cs" Source="{taskClass.Path}">
+                      <Code Type="Class" Language="cs" Source="{classThatFailsToCompile.Path}">
                       </Code>
                     </Task>
                   </UsingTask>
@@ -1155,6 +1156,7 @@ public class {{taskName}} : Task
             Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result);
 
             result.ShouldBeFalse();
+            File.Exists(classThatFailsToCompile.Path).ShouldBeTrue();
 
             string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
             using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 6d31657b10f..40ee85812ab 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -692,6 +692,7 @@ public override bool Execute()
             string output = RunnerUtilities.ExecMSBuild($"{assemblyProj.Path} /t:{targetName} /bl:\"LogFile={binLogFile};ProjectImports=ZipFile\"", out bool success);
 
             success.ShouldBeTrue();
+            File.Exists(taskClass.Path).ShouldBeTrue();
 
             string projectImportsZipPath = Path.ChangeExtension(binLogFile, ".ProjectImports.zip");
             using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);
@@ -751,6 +752,7 @@ public override bool Execute()
             string output = RunnerUtilities.ExecMSBuild($"{assemblyProj.Path} /t:{targetName} /bl:\"LogFile={binLogFile};ProjectImports=ZipFile\"", out bool success);
 
             success.ShouldBeFalse();
+            File.Exists(classThatFailsToCompile.Path).ShouldBeTrue();
 
             string projectImportsZipPath = Path.ChangeExtension(binLogFile, ".ProjectImports.zip");
             using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index bb0efbe2181..e048b3ca618 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -163,6 +163,10 @@ private static Assembly CurrentDomainOnAssemblyResolve(object sender, ResolveEve
 
         public string SourceFilePath { get => _sourcePath; }
 
+        public bool IsGeneratedSourceFile { get; private set; }
+
+        public bool DeleteGeneratedSourceFile { get => true; }
+
         /// <summary>
         /// Get the type information for all task parameters.
         /// </summary>
@@ -232,6 +236,8 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> ta
                 {
                     _type = "Class";
                 }
+
+                IsGeneratedSourceFile = false;
             }
 
             _referencedAssemblies = ExtractReferencedAssemblies();
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index a969d1dc8de..d0d22a35a89 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -2513,6 +2513,9 @@
   <data name="CodeTaskFactory.FindSourceFileAt" xml:space="preserve">
     <value>The source file for this compilation can be found at: "{0}"</value>
   </data>
+  <data name="CodeTaskFactory.FindSourceFileInBinlogAt" xml:space="preserve">
+    <value>The source file for this compilation can be found embedded in binlog at: "{0}"</value>
+  </data>
   <data name="CodeTaskFactory.HaveReflectionOnlyAssembly" xml:space="preserve">
     <value>The reference assembly "{0}" is a metadata only assembly.</value>
   </data>
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index b4fc18d7e3f..ef82617989f 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: Pozdržené podepisování požaduje, aby byl určen alespoň veřejný klíč.  Zadejte veřejný klíč pomocí vlastnosti KeyFile nebo KeyContainer, nebo zakažte pozdržené podepisování.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: Hodnota {0} není nastavena nebo je prázdná. Pokud {1} má hodnotu false, nezapomeňte pro hodnotu {0} nastavit neprázdnou hodnotu.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index a185f1c58dc..56f3842d730 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: Für verzögertes Signieren muss mindestens ein öffentlicher Schlüssel angegeben werden.  Geben Sie entweder einen öffentlichen Schlüssel mithilfe der KeyFile- oder KeyContainer-Eigenschaft an, oder deaktivieren Sie verzögertes Signieren.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: „{0}“ ist nicht festgelegt oder leer. Wenn {1} falsch ist, legen Sie für „{0}“ auf keinen Fall einen leeren Wert fest.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index eef9d9a6a5e..f9ebccfaee3 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: La firma retardada requiere que se especifique al menos una clave pública.  Proporcione una clave pública mediante las propiedades KeyFile o KeyContainer, o deshabilite la firma retardada.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: "{0}" no se ha establecido o está vacío. Cuando {1} sea false, asegúrese de establecer un valor que no esté vacío para "{0}".</target>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index 0a38e39c972..475c908614a 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: La signature différée nécessite qu'au moins une clé publique soit spécifiée.  Indiquez une clé publique à l'aide des propriétés KeyFile ou KeyContainer, ou désactivez la signature différée.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: « {0} » n’est pas défini ou vide. Quand la valeur de {1} est false, veillez à définir une valeur non vide pour « {0} ».</target>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index 27b03e70d2e..2b7b256c01f 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: la firma ritardata richiede che sia specificata almeno una chiave pubblica. Fornire una chiave pubblica usando le proprietà KeyFile o KeyContainer oppure disabilitare la firma ritardata.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: '{0}' non è impostato o è vuoto. Quando {1} è false, assicurarsi di impostare un valore non vuoto per '{0}'.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index 855a8a09ef6..9390ac142f5 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: 遅延署名には、最低でも 1 つの公開キーを指定する必要があります。KeyFile または KeyContainer プロパティを使用して公開キーを提供するか、遅延署名を無効にしてください。</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: '{0}' が設定されていないか、空です。{1} が false の場合は、'{0}' に空でない値を設定してください。</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index 9e7d5d6eabc..9c8f0e94a92 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: 서명을 연기하려면 적어도 공개 키를 지정해야 합니다.  KeyFile 또는 KeyContainer 속성을 사용하여 공개 키를 제공하거나 서명 연기를 비활성화하세요.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: '{0}'이(가) 설정되지 않았거나 비어 있습니다. {1}이(가) false인 경우 '{0}'에 비어 있지 않은 값을 설정해야 합니다.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 6f0ed65f8bc..154b79c271b 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: Podpisywanie opóźnione wymaga określenia przynajmniej klucza publicznego.  Podaj klucz publiczny przy użyciu właściwości KeyFile lub KeyContainer albo wyłącz podpisywanie opóźnione.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: „{0}” nie jest ustawiony ani pusty. Jeśli {1} ma wartość false, ustaw wartość, która nie jest pusta dla „{0}”.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index d6bccad1740..b99774cd02f 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: A assinatura atrasada requer que pelo menos uma chave pública seja especificada.  Forneça uma chave pública usando as propriedades KeyFile ou KeyContainer ou desabilite a assinatura atrasada.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: '{0}' não está definido ou está vazio. Quando {1} for falso, certifique-se de definir um valor não vazio para '{0}'.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index 13636f628c9..5682fd0d169 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: для отложенного подписывания необходимо указать хотя бы один открытый ключ.  Укажите открытый ключ с помощью свойства KeyFile или KeyContainer либо отключите отложенное подписывание.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: "{0}" не настроено или пусто. Если для {1} присвоено значение false, настройте непустое значение для "{0}".</target>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 80e916c9578..f4f194dac8e 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: Gecikmeli imzalama, en azından bir ortak anahtar belirtilmesini gerektirir.  Lütfen KeyFile veya KeyContainer özelliklerini kullanarak bir ortak anahtar sağlayın veya gecikmeli imzalamayı devre dışı bırakın.</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: '{0}' ayarlanmamış veya boş. {1} yanlış olduğunda, '{0}' için boş olmayan bir değer ayarlandığından emin olun.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index fb45fb03527..1cfff57d959 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: 延迟签名要求至少指定一个公钥。请使用 KeyFile 或 KeyContainer 属性提供一个公钥，或者禁用延迟签名。</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: "{0}" 未设置或为空。如果 {1} 为 false，请确保为 "{0}" 设置非空值。</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index 1ce29e770f5..65fb1b7f0e8 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -121,6 +121,11 @@
         <target state="translated">MSB3654: 延遲簽署需要至少指定一個公開金鑰。請使用 KeyFile 或 KeyContainer 屬性提供公開金鑰，或停用延遲簽署。</target>
         <note>{StrBegin="MSB3654: "}</note>
       </trans-unit>
+      <trans-unit id="CodeTaskFactory.FindSourceFileInBinlogAt">
+        <source>The source file for this compilation can be found embedded in binlog at: "{0}"</source>
+        <target state="new">The source file for this compilation can be found embedded in binlog at: "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CombineTargetFrameworkInfoProperties.NotNullAndEmptyRootElementName">
         <source>MSB3991: '{0}' is not set or empty. When {1} is false, make sure to set a non-empty value for '{0}'.</source>
         <target state="translated">MSB3991: 未設定 '{0}' 或空白。當 {1} 為 false 時，請務必將 '{0}' 設定非空白值。</target>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index eb1de94d759..3e363da30cf 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -121,6 +121,10 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory, IHasSourceFilePath
 
         public string SourceFilePath { get; private set; }
 
+        public bool IsGeneratedSourceFile { get; private set; }
+
+        public bool DeleteGeneratedSourceFile { get; private set; }
+
         /// <inheritdoc cref="ITaskFactory.CleanupTask(ITask)"/>
         public void CleanupTask(ITask task)
         {
@@ -164,6 +168,7 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa
             }
 
             SourceFilePath = taskInfo.Source;
+            IsGeneratedSourceFile = taskInfo.Source != null ? false : true;
 
             // Attempt to compile an assembly (or get one from the cache)
             if (!TryCompileInMemoryAssembly(taskFactoryLoggingHost, taskInfo, out Assembly assembly))
@@ -686,13 +691,18 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
             // Delete the code file unless compilation failed or the environment variable MSBUILDLOGCODETASKFACTORYOUTPUT
             // is set (which allows for debugging problems)
-            bool deleteSourceCodeFile = Environment.GetEnvironmentVariable("MSBUILDLOGCODETASKFACTORYOUTPUT") == null;
+            DeleteGeneratedSourceFile = Environment.GetEnvironmentVariable("MSBUILDLOGCODETASKFACTORYOUTPUT") == null;
 
             try
             {
                 // Create the code
                 File.WriteAllText(sourceCodePath, taskInfo.SourceCode);
 
+                if (IsGeneratedSourceFile)
+                {
+                    SourceFilePath = sourceCodePath;
+                }
+
                 // Execute the compiler.  We re-use the existing build task by hosting it and giving it our IBuildEngine instance for logging
                 RoslynCodeTaskFactoryCompilerBase managedCompiler = null;
 
@@ -746,18 +756,21 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
                     if (!managedCompiler.Execute())
                     {
-                        deleteSourceCodeFile = false;
+                        DeleteGeneratedSourceFile = false;
 
                         _log.LogErrorWithCodeFromResources("CodeTaskFactory.FindSourceFileAt", sourceCodePath);
 
                         return false;
                     }
 
-                    if (!deleteSourceCodeFile)
+                    if (!DeleteGeneratedSourceFile)
                     {
                         // Log the location of the code file because MSBUILDLOGCODETASKFACTORYOUTPUT was set.
                         _log.LogMessageFromResources(MessageImportance.Low, "CodeTaskFactory.FindSourceFileAt", sourceCodePath);
                     }
+
+                    // Log the location of the code file in binlog
+                    _log.LogMessageFromResources(MessageImportance.Low, "CodeTaskFactory.FindSourceFileInBinlogAt", sourceCodePath);
                 }
 
                 // Return the assembly which is loaded into memory
@@ -779,11 +792,6 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
                 {
                     File.Delete(assemblyPath);
                 }
-
-                if (deleteSourceCodeFile && FileSystems.Default.FileExists(sourceCodePath))
-                {
-                    File.Delete(sourceCodePath);
-                }
             }
         }
     }
