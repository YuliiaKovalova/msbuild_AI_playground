diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 913b72d2100..5dbc02c4d50 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -256,12 +256,12 @@ void ITaskExecutionHost.InitializeForTask(IBuildEngine2 buildEngine, TargetLoggi
 
             TaskRequirements requirements = TaskRequirements.None;
 
-            if (_taskFactoryWrapper.TaskFactoryLoadedType.HasSTAThreadAttribute())
+            if (_taskFactoryWrapper.TaskFactoryLoadedType.HasSTAThreadAttribute)
             {
                 requirements |= TaskRequirements.RequireSTAThread;
             }
 
-            if (_taskFactoryWrapper.TaskFactoryLoadedType.HasLoadInSeparateAppDomainAttribute())
+            if (_taskFactoryWrapper.TaskFactoryLoadedType.HasLoadInSeparateAppDomainAttribute)
             {
                 requirements |= TaskRequirements.RequireSeparateAppDomain;
 
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 99c497dcfc3..2b0711373a3 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -436,7 +436,7 @@ ElementLocation elementLocation
                         targetLoggingContext.LogComment(MessageImportance.Low, "TaskFoundFromFactory", taskName, taskFactory.Name);
                     }
 
-                    if (taskFactory.TaskFactoryLoadedType.HasSTAThreadAttribute())
+                    if (taskFactory.TaskFactoryLoadedType.HasSTAThreadAttribute)
                     {
                         targetLoggingContext.LogComment(MessageImportance.Low, "TaskNeedsSTA", taskName);
                     }
@@ -1327,7 +1327,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                 }
 
                                 // Make sure we only look for task factory classes when loading based on the name
-                                loadedType = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo, false);
+                                loadedType = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo);
 
                                 if (loadedType == null)
                                 {
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index 58f41145ce0..560d96c4c30 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -201,7 +201,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 if (forwardingLogger)
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false);
+                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly);
 
                     if (loggerClass != null)
                     {
@@ -212,7 +212,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 else
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false);
+                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly);
 
                     if (loggerClass != null)
                     {
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index 5b4bd05d8a6..10655f84b09 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -133,7 +133,7 @@ IDictionary<string, TaskParameter> taskParams
             }
 
             OutOfProcTaskHostTaskResult taskResult;
-            if (taskType.HasSTAThreadAttribute())
+            if (taskType.HasSTAThreadAttribute)
             {
 #if FEATURE_APARTMENT_STATE
                 taskResult = InstantiateAndExecuteTaskInSTAThread(oopTaskHostNode, taskType, taskName, taskLocation, taskFile, taskLine, taskColumn,
diff --git a/src/Shared/LoadedType.cs b/src/Shared/LoadedType.cs
index 8ad7caaa940..fda8eeb8606 100644
--- a/src/Shared/LoadedType.cs
+++ b/src/Shared/LoadedType.cs
@@ -51,21 +51,38 @@ internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loade
             _assembly = assemblyLoadInfo;
             _loadedAssembly = loadedAssembly;
 
-            CheckForHardcodedSTARequirement();
-            _hasLoadInSeparateAppDomainAttribute = loadedAssembly is null ?
-                this.Type.GetTypeInfo().IsDefined(typeof(LoadInSeparateAppDomainAttribute), true /* inherited */) :
-#if NET35
-                false; // Should never reach here.
-#else
-                CustomAttributeData.GetCustomAttributes(type).Any(attr => attr.AttributeType.Name.Equals("LoadInSeparateAppDomainAttribute"));
-#endif
-            _hasSTAThreadAttribute ??= loadedAssembly is null ?
-                this.Type.GetTypeInfo().IsDefined(typeof(RunInSTAAttribute), true /* inherited */) :
-#if NET35
-                false; // Should never reach here.
-#else
-                CustomAttributeData.GetCustomAttributes(type).Any(attr => attr.AttributeType.Name.Equals("RunInSTAAttribute"));
+            HasSTAThreadAttribute = CheckForHardcodedSTARequirement();
+            if (loadedAssembly is null)
+            {
+                HasLoadInSeparateAppDomainAttribute = this.Type.GetTypeInfo().IsDefined(typeof(LoadInSeparateAppDomainAttribute), true /* inherited */);
+                HasSTAThreadAttribute = this.Type.GetTypeInfo().IsDefined(typeof(RunInSTAAttribute), true /* inherited */);
+                IsMarshalByRef = this.Type.GetTypeInfo().IsMarshalByRef;
+            }
+            else
+            {
+#if !NET35
+                Type t = type;
+                while (type is not null)
+                {
+                    if (CustomAttributeData.GetCustomAttributes(t).Any(attr => attr.AttributeType.Name.Equals("LoadInSeparateAppDomainAttribute")))
+                    {
+                        HasLoadInSeparateAppDomainAttribute = true;
+                    }
+
+                    if (CustomAttributeData.GetCustomAttributes(t).Any(attr => attr.AttributeType.Name.Equals("RunInSTAAttribute")))
+                    {
+                        HasSTAThreadAttribute = true;
+                    }
+
+                    if (t.IsMarshalByRef)
+                    {
+                        IsMarshalByRef = true;
+                    }
+
+                    t = t.BaseType;
+                }
 #endif
+            }
         }
 
 
@@ -74,30 +91,25 @@ internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loade
 #region Methods
         /// <summary>
         /// Gets whether there's a LoadInSeparateAppDomain attribute on this type.
-        /// Caches the result - since it can't change during the build.
         /// </summary>
-        /// <returns></returns>
-        public bool HasLoadInSeparateAppDomainAttribute()
-        {
-            return (bool)_hasLoadInSeparateAppDomainAttribute;
-        }
+        public bool HasLoadInSeparateAppDomainAttribute { get; }
 
         /// <summary>
         /// Gets whether there's a STAThread attribute on the Execute method of this type.
-        /// Caches the result - since it can't change during the build.
         /// </summary>
-        /// <returns></returns>
-        public bool HasSTAThreadAttribute()
-        {
-            return (bool)_hasSTAThreadAttribute;
-        }
+        public bool HasSTAThreadAttribute { get; }
+
+        /// <summary>
+        /// Gets whether this type implements MarshalByRefObject.
+        /// </summary>
+        public bool IsMarshalByRef { get; }
 
 #endregion
 
         /// <summary>
         /// Determines if the task has a hardcoded requirement for STA thread usage.
         /// </summary>
-        private void CheckForHardcodedSTARequirement()
+        private bool CheckForHardcodedSTARequirement()
         {
             // Special hard-coded attributes for certain legacy tasks which need to run as STA because they were written before
             // we changed to running all tasks in MTA.
@@ -109,10 +121,12 @@ private void CheckForHardcodedSTARequirement()
                 {
                     if (String.Equals(assemblyName.Name, "PresentationBuildTasks", StringComparison.OrdinalIgnoreCase))
                     {
-                        _hasSTAThreadAttribute = true;
+                        return true;
                     }
                 }
             }
+
+            return false;
         }
 
 #region Properties
@@ -160,12 +174,6 @@ internal AssemblyLoadInfo Assembly
         // the assembly the type was loaded from
         private AssemblyLoadInfo _assembly;
 
-        // whether the loadinseparateappdomain attribute is applied to this type
-        private bool? _hasLoadInSeparateAppDomainAttribute;
-
-        // whether the STAThread attribute is applied to this type
-        private bool? _hasSTAThreadAttribute;
-
         /// <summary>
         /// Assembly, if any, that we loaded for this type.
         /// We use this information to help created AppDomains to resolve types that it could not load successfully
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index 0ab62f70203..921194530ac 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -53,7 +53,7 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
             )
         {
 #if FEATURE_APPDOMAIN
-            bool separateAppDomain = loadedType.HasLoadInSeparateAppDomainAttribute();
+            bool separateAppDomain = loadedType.HasLoadInSeparateAppDomainAttribute;
             s_resolverLoadedType = null;
             taskAppDomain = null;
             ITask taskInstanceInOtherAppDomain = null;
@@ -64,7 +64,7 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
 #if FEATURE_APPDOMAIN
                 if (separateAppDomain)
                 {
-                    if (!loadedType.Type.GetTypeInfo().IsMarshalByRef)
+                    if (!loadedType.IsMarshalByRef)
                     {
                         logError
                         (
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 81bd0a76b7a..6b3d1135bd4 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -24,13 +24,6 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal class TypeLoader
     {
-#if FEATURE_ASSEMBLYLOADCONTEXT
-        /// <summary>
-        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
-        /// </summary>
-        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new CoreClrAssemblyLoader();
-#endif
-
         /// <summary>
         /// Cache to keep track of the assemblyLoadInfos based on a given type filter.
         /// </summary>
@@ -137,6 +130,60 @@ internal static bool IsPartialTypeNameMatch(string typeName1, string typeName2)
             return isPartialMatch;
         }
 
+        /// <summary>
+        /// Load an assembly given its AssemblyLoadInfo
+        /// </summary>
+        /// <param name="assemblyLoadInfo"></param>
+        /// <returns></returns>
+        private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
+        {
+            try
+            {
+                if (assemblyLoadInfo.AssemblyName != null)
+                {
+                    return Assembly.Load(assemblyLoadInfo.AssemblyName);
+                }
+                else
+                {
+                    return Assembly.UnsafeLoadFrom(assemblyLoadInfo.AssemblyFile);
+                }
+            }
+            catch (ArgumentException e)
+            {
+                // Assembly.Load() and Assembly.LoadFrom() will throw an ArgumentException if the assembly name is invalid
+                // convert to a FileNotFoundException because it's more meaningful
+                // NOTE: don't use ErrorUtilities.VerifyThrowFileExists() here because that will hit the disk again
+                throw new FileNotFoundException(null, assemblyLoadInfo.AssemblyLocation, e);
+            }
+        }
+
+        private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)
+        {
+            string path = assemblyLoadInfo.AssemblyFile;
+
+            if (path is null)
+            {
+#if NETFRAMEWORK
+                AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
+                setup.LoaderOptimization = LoaderOptimization.SingleDomain;
+                AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
+                path = appDomain.Load(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
+                AppDomain.Unload(appDomain);
+#else
+                AssemblyLoadContext alc = new("loadContextToFindPath", true);
+                path = alc.LoadFromAssemblyName(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
+                alc.Unload();
+#endif
+            }
+
+            string[] runtimePaths = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
+            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), "*.dll"));
+            localPaths.AddRange(runtimePaths);
+
+            MetadataLoadContext loadContext = new(new PathAssemblyResolver(localPaths));
+            return loadContext.LoadFromAssemblyPath(path);
+        }
+
         /// <summary>
         /// Loads the specified type if it exists in the given assembly. If the type name is fully qualified, then a match (if
         /// any) is unambiguous; otherwise, if there are multiple types with the same name in different namespaces, the first type
@@ -146,7 +193,7 @@ internal LoadedType Load
         (
             string typeName,
             AssemblyLoadInfo assembly,
-            bool useTaskHost
+            bool useTaskHost = false
         )
         {
             return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, useTaskHost);
@@ -322,73 +369,6 @@ private void ScanAssemblyForPublicTypes(bool useTaskHost)
                     }
                 }
             }
-
-            /// <summary>
-            /// Load an assembly given its AssemblyLoadInfo
-            /// </summary>
-            /// <param name="assemblyLoadInfo"></param>
-            /// <returns></returns>
-            private Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
-            {
-                try
-                {
-                    if (assemblyLoadInfo.AssemblyName != null)
-                    {
-#if !FEATURE_ASSEMBLYLOADCONTEXT
-                        return Assembly.Load(assemblyLoadInfo.AssemblyName);
-#else
-                    return Assembly.Load(new AssemblyName(assemblyLoadInfo.AssemblyName));
-#endif
-                    }
-                    else
-                    {
-#if !FEATURE_ASSEMBLYLOADCONTEXT
-                        return Assembly.UnsafeLoadFrom(assemblyLoadInfo.AssemblyFile);
-#else
-                    var baseDir = Path.GetDirectoryName(assemblyLoadInfo.AssemblyFile);
-                    s_coreClrAssemblyLoader.AddDependencyLocation(baseDir);
-                    return s_coreClrAssemblyLoader.LoadFromPath(assemblyLoadInfo.AssemblyFile);
-#endif
-                    }
-                }
-                catch (ArgumentException e)
-                {
-                    // Assembly.Load() and Assembly.LoadFrom() will throw an ArgumentException if the assembly name is invalid
-                    // convert to a FileNotFoundException because it's more meaningful
-                    // NOTE: don't use ErrorUtilities.VerifyThrowFileExists() here because that will hit the disk again
-                    throw new FileNotFoundException(null, assemblyLoadInfo.AssemblyLocation, e);
-                }
-            }
-
-            private Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)
-            {
-                string path = assemblyLoadInfo.AssemblyFile;
-
-                if (path is null)
-                {
-#if NETFRAMEWORK
-                    AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
-                    setup.LoaderOptimization = LoaderOptimization.SingleDomain;
-                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
-                    path = appDomain.Load(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
-                    AppDomain.Unload(appDomain);
-#else
-                    AssemblyLoadContext alc = new("loadContextToFindPath", true);
-                    path = alc.LoadFromAssemblyName(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
-                    alc.Unload();
-#endif
-                }
-
-                string[] runtimePaths = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
-                string msbuildLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
-                string[] msbuildPaths = Directory.GetFiles(msbuildLocation, "*.dll");
-                List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), "*.dll"));
-                localPaths.AddRange(msbuildPaths);
-                localPaths.AddRange(runtimePaths);
-
-                MetadataLoadContext loadContext = new(new PathAssemblyResolver(localPaths));
-                return loadContext.LoadFromAssemblyPath(path);
-            }
         }
     }
 }
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index 96c4a5d66d5..9fb112d8c03 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -200,13 +200,13 @@ public void Regress640476PartialName()
         {
             string forwardingLoggerLocation = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger).Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false);
+            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             string fileLoggerLocation = typeof(Microsoft.Build.Logging.FileLogger).Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation), false);
+            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -221,14 +221,14 @@ public void Regress640476FullyQualifiedName()
             Type forwardingLoggerType = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger);
             string forwardingLoggerLocation = forwardingLoggerType.Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false);
+            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             Type fileLoggerType = typeof(Microsoft.Build.Logging.FileLogger);
             string fileLoggerLocation = fileLoggerType.Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation), false);
+            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -248,7 +248,7 @@ public void NoTypeNamePicksFirstType()
             Type firstPublicType = FirstPublicDesiredType(forwardingLoggerfilter, forwardingLoggerAssemblyLocation);
 
             TypeLoader loader = new TypeLoader(forwardingLoggerfilter);
-            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation), false);
+            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
@@ -260,7 +260,7 @@ public void NoTypeNamePicksFirstType()
             firstPublicType = FirstPublicDesiredType(fileLoggerfilter, fileLoggerAssemblyLocation);
 
             loader = new TypeLoader(fileLoggerfilter);
-            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation), false);
+            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation));
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
