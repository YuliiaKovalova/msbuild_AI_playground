diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index e7ba2e13ff9..4a71ec2c804 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -474,34 +474,31 @@ internal MetadataSet(MatchOnMetadataOptions options, ImmutableList<string> metad
             {
                 foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
                 {
-                    this.Add(metadata.Select(m => referencedItem.Item.GetMetadataValue(m)));
+                    this.Add(metadata.Select(m => referencedItem.Item.GetMetadataValue(m)), comparer);
                 }
             }
         }
 
-        private MetadataSet(MatchOnMetadataOptions options)
+        private MetadataSet(StringComparer comparer)
         {
-            StringComparer comparer = options == MatchOnMetadataOptions.CaseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal;
             children = new Dictionary<string, MetadataSet<P, I>>(comparer);
-            this.options = options;
         }
 
         // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
-        private void Add(IEnumerable<string> metadata)
+        private void Add(IEnumerable<string> metadata, StringComparer comparer)
         {
+            Func<string, string> normalize = options == MatchOnMetadataOptions.PathLike ? FileUtilities.NormalizeForPathComparison : s => s;
             MetadataSet<P, I> current = this;
             foreach (string s in metadata)
             {
-                string normalizedString = options == MatchOnMetadataOptions.PathLike ?
-                    FileUtilities.NormalizeForPathComparison(s) :
-                    s;
+                string normalizedString = normalize(s);
                 if (current.children.TryGetValue(normalizedString, out MetadataSet<P, I> child))
                 {
                     current = child;
                 }
                 else
                 {
-                    current.children.Add(normalizedString, new MetadataSet<P, I>(current.options));
+                    current.children.Add(normalizedString, new MetadataSet<P, I>(comparer));
                     current = current.children[normalizedString];
                 }
             }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index e77bd9b79ba..d6512215ccd 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -73,7 +73,7 @@ private bool MatchesItemOnMetadata(I item)
                     metadataSet = new MetadataSet<P, I>(_matchOnMetadataOptions, _matchOnMetadata, _itemSpec);
                 }
 
-                return metadataSet.Contains(_matchOnMetadata.Select(m => (item.GetMetadata(m) as ProjectMetadata).EvaluatedValue));
+                return metadataSet.Contains(_matchOnMetadata.Select(m => item.GetMetadataValue(m)));
             }
 
             protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
