diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index a78e95a3f15..460f70e9f5f 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -214,6 +214,17 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 {
                     Console.WriteLine($"{e.ProjectFile} \x1b[1mcompleted\x1b[22m ({duration:F1}s)");
                 }
+
+                // Print diagnostic output under the Project -> Output line.
+                foreach ((BuildMessageSeverity severity, string message) in project.EnumerateBuildMessages())
+                {
+                    switch (severity)
+                    {
+                        case BuildMessageSeverity.Warning: Console.WriteLine($"\x1b[33;1m  \x26A0 {message}\x1b[m"); break;
+                        case BuildMessageSeverity.Error: Console.WriteLine($"\x1b[31;1m  \x26A0 {message}\x1b[m"); break;
+                    }
+                }
+
                 DisplayNodes();
             }
         }
@@ -312,17 +323,17 @@ private void TaskStarted(object sender, TaskStartedEventArgs e)
     private void MessageRaised(object sender, BuildMessageEventArgs e)
     {
         var buildEventContext = e.BuildEventContext;
-        if (buildEventContext is null || e.Message is null)
+        if (buildEventContext is null)
         {
             return;
         }
 
-        // Detect project output path by matching high-importance messages against the "$(MSBuildProjectName) -> ..."
-        // pattern used by the CopyFilesToOutputDirectory target.
-        string message = e.Message;
-        if (e.Importance == MessageImportance.High)
+        string? message = e.Message;
+        if (message is not null && e.Importance == MessageImportance.High)
         {
-            int index = e.Message.IndexOf(" -> ");
+            // Detect project output path by matching high-importance messages against the "$(MSBuildProjectName) -> ..."
+            // pattern used by the CopyFilesToOutputDirectory target.
+            int index = message.IndexOf(" -> ");
             if (index > 0)
             {
                 var projectFileName = Path.GetFileName(e.ProjectFile.AsSpan());
@@ -338,12 +349,20 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
 
     private void WarningRaised(object sender, BuildWarningEventArgs e)
     {
-        throw new NotImplementedException();
+        var buildEventContext = e.BuildEventContext;
+        if (buildEventContext is not null)
+        {
+            _notableProjects[new ProjectContext(buildEventContext)].AddBuildMessage(e);
+        }
     }
 
     private void ErrorRaised(object sender, BuildErrorEventArgs e)
     {
-        throw new NotImplementedException();
+        var buildEventContext = e.BuildEventContext;
+        if (buildEventContext is not null)
+        {
+            _notableProjects[new ProjectContext(buildEventContext)].AddBuildMessage(e);
+        }
     }
 
     public void Shutdown()
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index 8b8c655c3ac..9ab46487ca7 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -2,12 +2,55 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.CodeDom;
+using System.Collections.Generic;
 using System.Diagnostics;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Logging.LiveLogger;
 
 internal sealed class Project
 {
+    /// <summary>
+    /// A stopwatch to time the build of this project.
+    /// </summary>
     public Stopwatch Stopwatch { get; } = Stopwatch.StartNew();
+
+    /// <summary>
+    /// The full path to the primary output of the project, if known.
+    /// </summary>
     public ReadOnlyMemory<char>? OutputPath { get; set; }
+
+    /// <summary>
+    /// A lazily initialized list of build messages/warnings/errors raised during the build.
+    /// </summary>
+    private List<LazyFormattedBuildEventArgs>? BuildMessages { get; set; }
+
+    public void AddBuildMessage(LazyFormattedBuildEventArgs eventArgs)
+    {
+        BuildMessages ??= new List<LazyFormattedBuildEventArgs>();
+        BuildMessages.Add(eventArgs);
+    }
+
+    public IEnumerable<(BuildMessageSeverity, string)> EnumerateBuildMessages()
+    {
+        if (BuildMessages is not null)
+        {
+            foreach (LazyFormattedBuildEventArgs eventArgs in BuildMessages)
+            {
+                if (eventArgs.Message is not null)
+                {
+                    if (eventArgs is BuildWarningEventArgs warningEventArgs)
+                    {
+                        yield return (BuildMessageSeverity.Warning, EventArgsFormatting.FormatEventMessage(warningEventArgs, false));
+                    }
+                    else if (eventArgs is BuildErrorEventArgs errorEventArgs)
+                    {
+                        yield return (BuildMessageSeverity.Error, EventArgsFormatting.FormatEventMessage(errorEventArgs, false));
+                    }
+                }
+            }
+        }
+    }
 }
