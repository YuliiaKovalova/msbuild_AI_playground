diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
index b6d935f41a7..83035cd5042 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
@@ -85,13 +85,13 @@ public static IList<RMock> ExportCollection<T, RMock>(this ProjectCollectionLink
         }
 
 
-        public static IDictionary<key, T> ImportDictionary<key, T, RMock>(this ProjectCollectionLinker importer, IDictionary<key, RMock> source)
+        public static IDictionary<Key, T> ImportDictionary<Key, T, RMock>(this ProjectCollectionLinker importer, IDictionary<Key, RMock> source)
             where T : class
             where RMock : MockLinkRemoter<T>, new()
         {
             if (source == null) return null;
             // Just copy ...
-            Dictionary<key, T> result = new Dictionary<key, T>();
+            Dictionary<Key, T> result = new Dictionary<Key, T>();
             foreach (var sRemoter in source)
             {
                 var value = importer.Import<T, RMock>(sRemoter.Value);
@@ -101,13 +101,13 @@ public static IDictionary<key, T> ImportDictionary<key, T, RMock>(this ProjectCo
             return result;
         }
 
-        public static IDictionary<key, RMock> ExportDictionary<key, T, RMock>(this ProjectCollectionLinker exporter, IDictionary<key, T> source)
+        public static IDictionary<Key, RMock> ExportDictionary<Key, T, RMock>(this ProjectCollectionLinker exporter, IDictionary<Key, T> source)
             where T : class
             where RMock : MockLinkRemoter<T>, new()
         {
             if (source == null) return null;
             // Just copy ...
-            Dictionary<key, RMock> result = new Dictionary<key, RMock>();
+            Dictionary<Key, RMock> result = new Dictionary<Key, RMock>();
             foreach (var s in source)
             {
                 var valueRemoter = exporter.Export<T, RMock>(s.Value);
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index 8887b9cca2b..ddb164cb778 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -12,7 +12,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared.FileSystem;
-using error = Microsoft.Build.Shared.ErrorUtilities;
+using ErrorUtils = Microsoft.Build.Shared.ErrorUtilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
@@ -366,7 +366,7 @@ internal string ReadToolsets
             out string defaultOverrideToolsVersion
             )
         {
-            error.VerifyThrowArgumentNull(toolsets, "Toolsets");
+            ErrorUtils.VerifyThrowArgumentNull(toolsets, "Toolsets");
 
             ReadEachToolset(toolsets, globalProperties, initialProperties, accumulateProperties);
 
