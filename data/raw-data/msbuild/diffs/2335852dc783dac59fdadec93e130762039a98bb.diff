diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 3bde9771817..68f1a63b8fc 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -207,9 +207,9 @@ public void RoundtripTaskStartedEventArgs()
         }
 
         [Fact]
-        public void RoundtripExtendedEnvironmentVariableReadEventArgs()
+        public void RoundtripEnvironmentVariableReadEventArgs()
         {
-            ExtendedEnvironmentVariableReadEventArgs args = new("VarName", "VarValue", "file", 0, 0);
+            EnvironmentVariableReadEventArgs args = new("VarName", "VarValue", "file", 10, 20);
             args.BuildEventContext = new BuildEventContext(4, 5, 6, 7);
             Roundtrip(args,
                 e => e.Message,
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index ec70983c7fe..4e965d7c880 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -21,7 +21,6 @@
 using Microsoft.Build.Shared.FileSystem;
 using Shouldly;
 using Xunit;
-using Xunit.NetCore.Extensions;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
@@ -4701,7 +4700,7 @@ public void VerifyPropertyTrackingLoggingDefault()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4733,7 +4732,7 @@ public void VerifyPropertyTrackingLoggingPropertyReassignment()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4764,7 +4763,7 @@ public void VerifyPropertyTrackingLoggingNone()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4796,7 +4795,7 @@ public void VerifyPropertyTrackingLoggingPropertyInitialValue()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4848,12 +4847,12 @@ public void VerifyPropertyTrackingLoggingEnvironmentVariableRead()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldNotContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE");
 
                     logger
@@ -4882,7 +4881,7 @@ public void VerifyPropertyTrackingLoggingUninitializedPropertyRead()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldHaveSingleItem()
                         .EnvironmentVariableName
                         .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
@@ -4913,12 +4912,12 @@ public void VerifyPropertyTrackingLoggingAll()
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
-                        .OfType<ExtendedEnvironmentVariableReadEventArgs>()
+                        .OfType<EnvironmentVariableReadEventArgs>()
                         .ShouldNotContain(ev => ev.EnvironmentVariableName == "DEFINED_ENVIRONMENT_VARIABLE");
 
                     logger
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index 4b2d22c1647..3fb8f27b794 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -31,7 +31,7 @@ internal BuildCheckBuildEventHandler(
         {
             { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
             { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
-            { typeof(ExtendedEnvironmentVariableReadEventArgs), (BuildEventArgs e) => HandleEnvironmentVariableReadEvent((ExtendedEnvironmentVariableReadEventArgs)e) },
+            { typeof(EnvironmentVariableReadEventArgs), (BuildEventArgs e) => HandleEnvironmentVariableReadEvent((EnvironmentVariableReadEventArgs)e) },
             { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
             { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
             { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
@@ -102,7 +102,7 @@ private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eve
                 eventArgs.ToAnalyzerAcquisitionData(),
                 _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
 
-    private void HandleEnvironmentVariableReadEvent(ExtendedEnvironmentVariableReadEventArgs eventArgs)
+    private void HandleEnvironmentVariableReadEvent(EnvironmentVariableReadEventArgs eventArgs)
         => _buildCheckManager.ProcessEnvironmentVariableReadEventArgs(
                 _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)),
                 eventArgs);
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 125ff0252a3..0b68ae1d1f9 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -334,14 +334,14 @@ public void ProcessEvaluationFinishedEventArgs(
             => _buildEventsProcessor
                 .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);
 
-        public void ProcessEnvironmentVariableReadEventArgs(IAnalysisContext analysisContext, ExtendedEnvironmentVariableReadEventArgs projectEvaluationEventArgs)
+        public void ProcessEnvironmentVariableReadEventArgs(IAnalysisContext analysisContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
         {
-            if (projectEvaluationEventArgs is ExtendedEnvironmentVariableReadEventArgs evr)
+            if (projectEvaluationEventArgs is EnvironmentVariableReadEventArgs evr)
             {
                 _buildEventsProcessor.ProcessEnvironmentVariableReadEventArgs(
                     evr.EnvironmentVariableName,
                     evr.Message ?? string.Empty,
-                    evr.FileName,
+                    evr.File,
                     evr.LineNumber,
                     evr.ColumnNumber);
             }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 3f7a316bc0e..74e8868139e 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -41,7 +41,7 @@ void ProcessEvaluationFinishedEventArgs(
 
     void ProcessEnvironmentVariableReadEventArgs(
         IAnalysisContext analysisContext,
-        ExtendedEnvironmentVariableReadEventArgs envVariableReadEventArgs);
+        EnvironmentVariableReadEventArgs envVariableReadEventArgs);
 
     void ProcessTaskStartedEventArgs(
         IAnalysisContext analysisContext,
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 5361c41230a..23f7921a476 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -89,6 +89,6 @@ public void EndTaskInvocation(BuildCheckDataSource buildCheckDataSource, TaskFin
     public void ProcessTaskParameter(BuildCheckDataSource buildCheckDataSource, TaskParameterEventArgs eventArg)
     { }
 
-    public void ProcessEnvironmentVariableReadEventArgs(IAnalysisContext analysisContext, ExtendedEnvironmentVariableReadEventArgs projectEvaluationEventArgs)
+    public void ProcessEnvironmentVariableReadEventArgs(IAnalysisContext analysisContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
     { }
 }
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 61a8202f784..0385e196649 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -100,7 +100,7 @@ string IProperty.EvaluatedValueEscaped
             {
                 if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
                 {
-                    EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
+                    EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal, string.Empty, 0, 0);
                     args.BuildEventContext = loggingContext.BuildEventContext;
                     loggingContext.LogBuildEvent(args);
                     environmentProperty._loggedEnvProperty = true;
@@ -119,7 +119,7 @@ string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
         {
             if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
             {
-                ExtendedEnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal, location.File, location.Line, location.Column);
+                EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal, location.File, location.Line, location.Column);
                 args.BuildEventContext = loggingContext.BuildEventContext;
                 loggingContext.LogBuildEvent(args);
                 environmentProperty._loggedEnvProperty = true;
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 4b2cd613881..94832b4812f 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -213,7 +213,10 @@ private void TrackEnvironmentVariableRead(string name)
 
             var args = new EnvironmentVariableReadEventArgs(
                 name,
-                ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentVariableRead", name));
+                ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentVariableRead", name),
+                string.Empty,
+                0,
+                0);
             args.BuildEventContext = _evaluationLoggingContext.BuildEventContext;
 
             _evaluationLoggingContext.LogBuildEvent(args);
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index a84e2add49a..5177ba79fe3 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -96,7 +96,7 @@ string IProperty.EvaluatedValueEscaped
             {
                 if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
                 {
-                    EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
+                    EnvironmentVariableReadEventArgs args = new(Name, _escapedValue, string.Empty, 0, 0);
                     args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
                     envProperty.loggingContext.LogBuildEvent(args);
                     envProperty._loggedEnvProperty = true;
@@ -110,7 +110,7 @@ string IProperty.GetEvaluatedValueEscaped(IElementLocation location)
         {
             if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
             {
-                ExtendedEnvironmentVariableReadEventArgs args = new(Name, _escapedValue, location.File, location.Line, location.Column);
+                EnvironmentVariableReadEventArgs args = new(Name, _escapedValue, location.File, location.Line, location.Column);
                 args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
                 envProperty.loggingContext.LogBuildEvent(args);
                 envProperty._loggedEnvProperty = true;
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index ce1692b8979..22921695dea 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -40,6 +40,5 @@ public enum BinaryLogRecordKind
         TaskParameter,
         ResponseFileUsed,
         AssemblyLoad,
-        ExtendedEnvironmentVariableRead,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index c4e08d76a4b..fb21e16522d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -74,8 +74,7 @@ public sealed class BinaryLogger : ILogger
         // version 21:
         //   - TaskParameterEventArgs: Added ParameterName and PropertyName properties
         // version 22:
-        //    - new record kinds: ExtendedEnvironmentVariableRead that reports file and exact location where environment variable was used.
-        //      It substitutes the existing EnvironmentVariableRead.
+        //    - extend EnvironmentVariableRead with location where environment variable was used.
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
         internal const int ForwardCompatibilityMinimalVersion = 18;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 9d02a6df482..0acec68a4a0 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -311,7 +311,6 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.ProjectImported => ReadProjectImportedEventArgs(),
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
-                BinaryLogRecordKind.ExtendedEnvironmentVariableRead => ReadExtendedEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
@@ -1091,22 +1090,6 @@ private BuildEventArgs ReadCriticalBuildMessageEventArgs()
         }
 
         private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
-        {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
-            var environmentVariableName = ReadDeduplicatedString();
-
-            BuildEventArgs e = new EnvironmentVariableReadEventArgs(
-                    environmentVariableName,
-                    fields.Message,
-                    fields.HelpKeyword,
-                    fields.SenderName,
-                    fields.Importance);
-            SetCommonFields(e, fields);
-
-            return e;
-        }
-
-        private BuildEventArgs ReadExtendedEnvironmentVariableReadEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
 
@@ -1115,14 +1098,12 @@ private BuildEventArgs ReadExtendedEnvironmentVariableReadEventArgs()
             int column = ReadInt32();
             string? fileName = ReadDeduplicatedString();
 
-            BuildEventArgs e = new ExtendedEnvironmentVariableReadEventArgs(
+            BuildEventArgs e = new EnvironmentVariableReadEventArgs(
                     environmentVariableName ?? string.Empty,
                     fields.Message,
                     fileName ?? string.Empty,
                     line,
-                    column,
-                    fields.HelpKeyword,
-                    fields.SenderName);
+                    column);
             SetCommonFields(e, fields);
 
             return e;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 1b7d99ebba6..6ee4aff9d74 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -466,7 +466,6 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
                 case TaskCommandLineEventArgs taskCommandLine: return Write(taskCommandLine);
                 case UninitializedPropertyReadEventArgs uninitializedPropertyRead: return Write(uninitializedPropertyRead);
                 case EnvironmentVariableReadEventArgs environmentVariableRead: return Write(environmentVariableRead);
-                case ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentVariableRead: return Write(extendedEnvironmentVariableRead);
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: return Write(propertyInitialValueSet);
                 case CriticalBuildMessageEventArgs criticalBuildMessage: return Write(criticalBuildMessage);
                 case AssemblyLoadBuildEventArgs assemblyLoad: return Write(assemblyLoad);
@@ -545,22 +544,14 @@ private BinaryLogRecordKind Write(PropertyInitialValueSetEventArgs e)
         }
 
         private BinaryLogRecordKind Write(EnvironmentVariableReadEventArgs e)
-        {
-            WriteMessageFields(e, writeImportance: true);
-            WriteDeduplicatedString(e.EnvironmentVariableName);
-
-            return BinaryLogRecordKind.EnvironmentVariableRead;
-        }
-
-        private BinaryLogRecordKind Write(ExtendedEnvironmentVariableReadEventArgs e)
         {
             WriteMessageFields(e, writeImportance: false);
             WriteDeduplicatedString(e.EnvironmentVariableName);
             Write(e.LineNumber);
             Write(e.ColumnNumber);
-            WriteDeduplicatedString(e.FileName);
+            WriteDeduplicatedString(e.File);
 
-            return BinaryLogRecordKind.ExtendedEnvironmentVariableRead;
+            return BinaryLogRecordKind.EnvironmentVariableRead;
         }
 
         private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index c24986bd742..d59bbb81e46 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1247,9 +1247,9 @@ private void PrintMessage(BuildMessageEventArgs e, bool lightenText)
         {
             string nonNullMessage = null;
 
-            if (e is ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentPropertyReadEventArgs)
+            if (e is EnvironmentVariableReadEventArgs environmentPropertyReadEventArgs)
             {
-                nonNullMessage = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", extendedEnvironmentPropertyReadEventArgs.EnvironmentVariableName, e.Message);
+                nonNullMessage = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentPropertyReadEventArgs.EnvironmentVariableName, e.Message);
             }
 
             // Include file information if present.
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 3418aba5a99..49573c943fb 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -517,8 +517,8 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
                     setColor(ConsoleColor.DarkGray);
                 }
 
-                string nonNullMessage = e is ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentDerivedProperty
-                    ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", extendedEnvironmentDerivedProperty.EnvironmentVariableName, e.Message)
+                string nonNullMessage = e is EnvironmentVariableReadEventArgs environmentDerivedProperty
+                    ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentDerivedProperty.EnvironmentVariableName, e.Message)
                     : e.Message ?? String.Empty;
 
                 // Include file information if present.
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 909053be3c6..efce34bd6ef 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -33,15 +33,13 @@ public EndToEndTests(ITestOutputHelper output)
 
     [Theory]
     [InlineData(true, true)]
-    [InlineData(false, true)]
-    [InlineData(false, false)]
     public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProcessNode, bool analysisRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore" +
-            (analysisRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
+            (analysisRequested ? " -analyze" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 12000_000);
         _env.Output.WriteLine(output);
 
         success.ShouldBeTrue();
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index ca01f781d2f..7db9b4e85d7 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -215,6 +215,18 @@ public BuildMessageEventArgs(
             this.endColumnNumber = endColumnNumber;
         }
 
+        protected BuildMessageEventArgs(
+           string message,
+           string file,
+           int lineNumber,
+           int columnNumber)
+            : base(message, helpKeyword: null, senderName: null)
+        {
+            this.file = file;
+            this.lineNumber = lineNumber;
+            this.columnNumber = columnNumber;
+        }
+
         private MessageImportance importance;
 
         [OptionalField(VersionAdded = 2)]
@@ -311,7 +323,11 @@ public MessageImportance Importance
         /// <summary>
         /// File associated with event.
         /// </summary>
-        public string File => file;
+        public string File
+        {
+            get => file;
+            internal set => file = value;
+        }
 
         /// <summary>
         /// Line number of interest in associated file.
diff --git a/src/Framework/EnvironmentVariableReadEventArgs.cs b/src/Framework/EnvironmentVariableReadEventArgs.cs
index 3d246fb6c03..1af2357d866 100644
--- a/src/Framework/EnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/EnvironmentVariableReadEventArgs.cs
@@ -2,6 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
+using System.IO;
+using Microsoft.Build.Shared;
 
 #nullable disable
 
@@ -10,7 +13,6 @@ namespace Microsoft.Build.Framework
     /// <summary>
     /// Arguments for the environment variable read event.
     /// </summary>
-    [Serializable]
     public class EnvironmentVariableReadEventArgs : BuildMessageEventArgs
     {
         /// <summary>
@@ -33,14 +35,49 @@ public EnvironmentVariableReadEventArgs(
             string message,
             string helpKeyword = null,
             string senderName = null,
-            MessageImportance importance = MessageImportance.Low) : base(message, helpKeyword, senderName, importance)
-        {
-            this.EnvironmentVariableName = environmentVariableName;
-        }
+            MessageImportance importance = MessageImportance.Low)
+            : base(message, helpKeyword, senderName, importance) => EnvironmentVariableName = environmentVariableName;
+
+        /// <summary>
+        /// Initializes an instance of the EnvironmentVariableReadEventArgs class.
+        /// </summary>
+        /// <param name="environmentVarName">The name of the environment variable that was read.</param>
+        /// <param name="environmentVarValue">The value of the environment variable that was read.</param>
+        /// <param name="file">file associated with the event</param>
+        /// <param name="line">line number (0 if not applicable)</param>
+        /// <param name="column">column number (0 if not applicable)</param>
+        public EnvironmentVariableReadEventArgs(
+            string environmentVarName,
+            string environmentVarValue,
+            string file,
+            int line,
+            int column)
+            : base(environmentVarValue, file, line, column) => EnvironmentVariableName = environmentVarName;
 
         /// <summary>
         /// The name of the environment variable that was read.
         /// </summary>
         public string EnvironmentVariableName { get; set; }
+
+        // <summary>
+        // The file name where environment variable is used.
+        // </summary>
+        internal override void WriteToStream(BinaryWriter writer)
+        {
+            base.WriteToStream(writer);
+            writer.Write(EnvironmentVariableName);
+            writer.Write7BitEncodedInt(LineNumber);
+            writer.Write7BitEncodedInt(ColumnNumber);
+            writer.WriteOptionalString(File);
+        }
+
+        internal override void CreateFromStream(BinaryReader reader, int version)
+        {
+            base.CreateFromStream(reader, version);
+            EnvironmentVariableName = reader.ReadString();
+            LineNumber = reader.Read7BitEncodedInt();
+            ColumnNumber = reader.Read7BitEncodedInt();
+            File = reader.ReadOptionalString() ?? string.Empty;
+        }
     }
 }
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
deleted file mode 100644
index e8bd73664c7..00000000000
--- a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
+++ /dev/null
@@ -1,70 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-using System.Collections.Generic;
-using System.IO;
-using Microsoft.Build.Shared;
-
-namespace Microsoft.Build.Framework
-{
-    /// <summary>
-    /// Arguments for the environment variable read event.
-    /// </summary>
-    public sealed class ExtendedEnvironmentVariableReadEventArgs : BuildMessageEventArgs
-    {
-        public ExtendedEnvironmentVariableReadEventArgs() { }
-
-        /// <summary>
-        /// Initializes an instance of the ExtendedEnvironmentVariableReadEventArgs class.
-        /// </summary>
-        /// <param name="environmentVarName">The name of the environment variable that was read.</param>
-        /// <param name="environmentVarValue">The value of the environment variable that was read.</param>
-        /// <param name="file">file associated with the event</param>
-        /// <param name="line">line number (0 if not applicable)</param>
-        /// <param name="column">column number (0 if not applicable)</param>
-        /// <param name="helpKeyword">Help keyword.</param>
-        /// <param name="senderName">The name of the sender of the event.</param>
-        public ExtendedEnvironmentVariableReadEventArgs(
-            string environmentVarName,
-            string environmentVarValue,
-            string file,
-            int line,
-            int column,
-            string? helpKeyword = null,
-            string? senderName = null)
-            : base(environmentVarValue, helpKeyword, senderName, MessageImportance.Normal)
-        {
-            EnvironmentVariableName = environmentVarName;
-            FileName = file;
-            LineNumber = line;
-            ColumnNumber = column;
-        }
-
-        /// <summary>
-        /// The file name where environment variable is used.
-        /// </summary>
-        public string FileName { get; set; } = string.Empty;
-
-        /// <summary>
-        /// The environment variable name.
-        /// </summary>
-        public string EnvironmentVariableName { get; set; } = string.Empty;
-
-        internal override void WriteToStream(BinaryWriter writer)
-        {
-            base.WriteToStream(writer);
-            writer.Write(EnvironmentVariableName);
-            writer.Write7BitEncodedInt(LineNumber);
-            writer.Write7BitEncodedInt(ColumnNumber);
-            writer.WriteOptionalString(FileName);
-        }
-
-        internal override void CreateFromStream(BinaryReader reader, int version)
-        {
-            base.CreateFromStream(reader, version);
-            EnvironmentVariableName = reader.ReadString();
-            LineNumber = reader.Read7BitEncodedInt();
-            ColumnNumber = reader.Read7BitEncodedInt();
-            FileName = reader.ReadOptionalString() ?? string.Empty;
-        }
-    }
-}
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index a7bea630847..db9503bd9e5 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -40,10 +40,6 @@
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
-    <!-- EnvironmentVariableReadEventArgs shouldn't be used in TaskHosts, but it means we need fewer ifdefs. -->
-    <Compile Include="..\Framework\EnvironmentVariableReadEventArgs.cs">
-      <Link>EnvironmentVariableReadEventArgs.cs</Link>
-    </Compile>
     <Compile Include="..\Framework\BuildEnvironmentState.cs">
       <Link>BuildEnvironmentState.cs</Link>
     </Compile>
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 9159c648007..0205abee476 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -240,11 +240,6 @@ internal enum LoggingEventType : int
         /// Event is <see cref="BuildCheckAcquisitionEventArgs"/>
         /// </summary>
         BuildCheckAcquisitionEvent = 39,
-
-        /// <summary>
-        /// Event is <see cref="ExtendedEnvironmentVariableReadEvent"/>.
-        /// </summary>
-        ExtendedEnvironmentVariableReadEvent = 40
     }
     #endregion
 
@@ -294,7 +289,7 @@ internal abstract class LogMessagePacketBase : INodePacket
              { typeof(ExtendedBuildMessageEventArgs), LoggingEventType.ExtendedBuildMessageEvent },
              { typeof(CriticalBuildMessageEventArgs), LoggingEventType.CriticalBuildMessage },
              { typeof(ExtendedCriticalBuildMessageEventArgs), LoggingEventType.ExtendedCriticalBuildMessageEvent },
-             { typeof(ExtendedEnvironmentVariableReadEventArgs), LoggingEventType.ExtendedEnvironmentVariableReadEvent },
+             { typeof(EnvironmentVariableReadEventArgs), LoggingEventType.EnvironmentVariableReadEvent },
              { typeof(MetaprojectGeneratedEventArgs), LoggingEventType.MetaprojectGenerated },
              { typeof(PropertyInitialValueSetEventArgs), LoggingEventType.PropertyInitialValueSet },
              { typeof(PropertyReassignmentEventArgs), LoggingEventType.PropertyReassignment },
@@ -318,7 +313,6 @@ internal abstract class LogMessagePacketBase : INodePacket
              { typeof(BuildStartedEventArgs), LoggingEventType.BuildStartedEvent },
              { typeof(BuildWarningEventArgs), LoggingEventType.BuildWarningEvent },
              { typeof(BuildErrorEventArgs), LoggingEventType.BuildErrorEvent },
-             { typeof(EnvironmentVariableReadEventArgs), LoggingEventType.EnvironmentVariableReadEvent },
              { typeof(ResponseFileUsedEventArgs), LoggingEventType.ResponseFileUsedEvent },
         };
 
@@ -486,7 +480,6 @@ internal void WriteToStream(ITranslator translator)
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
                 if (_buildEvent is ProjectEvaluationStartedEventArgs
                     or ProjectEvaluationFinishedEventArgs
-                    or EnvironmentVariableReadEventArgs
                     or ResponseFileUsedEventArgs)
                 {
                     // switch to serialization methods that we provide in this file
@@ -674,7 +667,6 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskStartedEvent => new TaskStartedEventArgs(null, null, null, null, null),
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
-                LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
                 LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
 
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
@@ -690,7 +682,6 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.ExtendedBuildWarningEvent => new ExtendedBuildWarningEventArgs(),
                 LoggingEventType.ExtendedBuildMessageEvent => new ExtendedBuildMessageEventArgs(),
                 LoggingEventType.ExtendedCriticalBuildMessageEvent => new ExtendedCriticalBuildMessageEventArgs(),
-                LoggingEventType.ExtendedEnvironmentVariableReadEvent => new ExtendedEnvironmentVariableReadEventArgs(),
                 LoggingEventType.ExternalProjectStartedEvent => new ExternalProjectStartedEventArgs(null, null, null, null, null),
                 LoggingEventType.ExternalProjectFinishedEvent => new ExternalProjectFinishedEventArgs(null, null, null, null, false),
                 LoggingEventType.CriticalBuildMessage => new CriticalBuildMessageEventArgs(null, null, null, -1, -1, -1, -1, null, null, null),
@@ -704,6 +695,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.BuildCheckErrorEvent => new BuildCheckResultError(),
                 LoggingEventType.BuildCheckAcquisitionEvent => new BuildCheckAcquisitionEventArgs(),
                 LoggingEventType.BuildCheckTracingEvent => new BuildCheckTracingEventArgs(),
+                LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
 #endif
                 _ => throw new InternalErrorException("Should not get to the default of GetBuildEventArgFromId ID: " + _eventType)
             };
@@ -767,18 +759,20 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even
                 case LoggingEventType.BuildWarningEvent:
                     WriteBuildWarningEventToStream((BuildWarningEventArgs)buildEvent, translator);
                     break;
+#if !TASKHOST
                 case LoggingEventType.EnvironmentVariableReadEvent:
                     WriteEnvironmentVariableReadEventArgs((EnvironmentVariableReadEventArgs)buildEvent, translator);
                     break;
+#endif
                 default:
                     ErrorUtilities.ThrowInternalError("Not Supported LoggingEventType {0}", eventType.ToString());
                     break;
             }
         }
 
+#if !TASKHOST
         /// <summary>
-        /// Serializes EnvironmentVariableRead Event argument to the stream. Does not work properly on TaskHosts due to BuildEventContext serialization not being
-        /// enabled on TaskHosts, but that shouldn't matter, as this should never be called from a TaskHost anyway.
+        /// Serializes EnvironmentVariableRead Event argument to the stream.
         /// </summary>
         private void WriteEnvironmentVariableReadEventArgs(EnvironmentVariableReadEventArgs environmentVariableReadEventArgs, ITranslator translator)
         {
@@ -796,7 +790,7 @@ private void WriteEnvironmentVariableReadEventArgs(EnvironmentVariableReadEventA
             translator.Translate(ref context);
 #endif
         }
-
+#endif
         #region Writes to Stream
 
         /// <summary>
@@ -1129,11 +1123,14 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat
                 LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.ResponseFileUsedEvent => ReadResponseFileUsedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildWarningEvent => ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName),
+#if !TASKHOST
                 LoggingEventType.EnvironmentVariableReadEvent => ReadEnvironmentVariableReadEventFromStream(translator, message, helpKeyword, senderName),
+#endif
                 _ => null,
             };
         }
 
+#if !TASKHOST
         /// <summary>
         /// Read and reconstruct an EnvironmentVariableReadEventArgs from the stream. This message should never be called from a TaskHost, so although the context translation does not work, that's ok.
         /// </summary>
@@ -1157,6 +1154,7 @@ private EnvironmentVariableReadEventArgs ReadEnvironmentVariableReadEventFromStr
 #endif
             return args;
         }
+#endif
 
         /// <summary>
         /// Read and reconstruct a BuildWarningEventArgs from the stream
