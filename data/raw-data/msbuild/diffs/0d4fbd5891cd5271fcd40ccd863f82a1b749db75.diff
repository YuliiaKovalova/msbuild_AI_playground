diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.md b/.github/ISSUE_TEMPLATE/01_bugreport.md
index 58a8cb2c372..213ab15269b 100644
--- a/.github/ISSUE_TEMPLATE/01_bugreport.md
+++ b/.github/ISSUE_TEMPLATE/01_bugreport.md
@@ -20,6 +20,12 @@ labels: bug, needs-triage
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Expected Behavior
@@ -46,13 +52,3 @@ labels: bug, needs-triage
 * Post any other relevant configuration settings here.
 *   OS, architecture, etc.
 -->
-
-### Attach a binlog
-<!--
-* If providing us a project that reproduces the issue proves difficult, consider including a binlog.
-* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.
-* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.
-    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.
-
-*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.md b/.github/ISSUE_TEMPLATE/02_performanceissue.md
index 69ac8410706..d1e93dc9ea5 100644
--- a/.github/ISSUE_TEMPLATE/02_performanceissue.md
+++ b/.github/ISSUE_TEMPLATE/02_performanceissue.md
@@ -20,6 +20,12 @@ Include as much of the following if possible:
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Data
@@ -57,13 +63,3 @@ Post any other relevant configuration settings here.
 *   What version of MSBuild or VS were you using before the regression?
 *   What version of MSBuild or VS are you on now that you discovered the regression?
 -->
-
-### Attach a binlog
-<!--
-* If providing us a project that reproduces the issue proves difficult, consider including a binlog.
-* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.
-* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.
-    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.
-
-*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
index a873a40f1e4..b6980de5753 100644
--- a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
+++ b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
@@ -28,6 +28,12 @@ labels: needs-triage
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Expected Behavior
diff --git a/.github/ISSUE_TEMPLATE/05_unhandledexception.md b/.github/ISSUE_TEMPLATE/05_unhandledexception.md
new file mode 100644
index 00000000000..5d488251fb1
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/05_unhandledexception.md
@@ -0,0 +1,34 @@
+---
+name: 😱 Unhandled Exception
+about: Reporting holes in our bug reporting system
+title: ''
+labels: bug
+---
+
+<!-- This is a template that helps us provide quicker feedback.
+Use any relevant sections and delete what you don't need. -->
+
+### Issue Description
+<!--
+Include a stack trace if possible.
+If you do not see one, try looking in your temp folder for the most recently created file named
+MSBuild_pid-{pid}_{guid}.failure.txt
+-->
+
+### Steps to Reproduce
+<!--
+* Include as many of these as possible:
+* A minimal sample project that reproduces the issue
+* IDE or CLI steps that create the project and reproduce the issue
+* Your command line invocation
+-->
+
+### Analysis
+<!-- If you think you know what the problem is, please include that here. -->
+
+### System Configuration
+<!--
+What version of MSBuild are you using? (`msbuild --version` from a developer command prompt)
+What version of the tool invoking MSBuild are you using? (`dotnet --version`, accessing it from the Visual Studio Installer, etc.)
+OS version (or at least Windows/Mac/Linux), architecture, etc.
+-->
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index e902f62318d..bdbfe5b0367 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,7 +31,6 @@ artifacts/
 *.pdb
 *.pgc
 *.pgd
-*.rsp
 *.sbr
 *.tlb
 *.tli
@@ -136,12 +135,6 @@ csx/
 # Windows Store app package directory
 AppPackages/
 
-# Visual Studio cache files
-# files ending in .cache can be ignored
-*.[Cc]ache
-# but keep track of directories ending in .cache
-!*.[Cc]ache/
-
 # Others
 ClientBin/
 [Ss]tyle[Cc]op.*
@@ -220,5 +213,5 @@ Samples/MultiprocessBuild/PortableTask.dll
 stage1/
 .tools
 
-# ETL traces    
-*.etl.zip
\ No newline at end of file
+# ETL traces
+*.etl.zip
diff --git a/.vsts-dotnet-ci.yml b/.vsts-dotnet-ci.yml
index 83ea156bfaf..dce7ac92550 100644
--- a/.vsts-dotnet-ci.yml
+++ b/.vsts-dotnet-ci.yml
@@ -228,47 +228,6 @@ jobs:
     continueOnError: true
     condition: always()
 
-- job: MonoOnMac
-  # Mono CI disabled until it can parse C# 9 syntax: https://github.com/dotnet/msbuild/issues/6058
-  condition: eq(1,2)
-  displayName: "macOS Mono"
-  pool:
-    vmImage: 'macOS-10.14'
-  steps:
-  # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#mono
-  - bash: |
-      SYMLINK=6_4_2
-      MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
-      echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
-      echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
-      echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
-    displayName: Use Mono 6.4.2
-  - bash: 'eng/cibuild_bootstrapped_msbuild.sh --host_type mono /p:SuppressLicenseValidation=true'
-    displayName: CI Build
-  - task: PublishTestResults@2
-    displayName: Publish Mono Test Results
-    inputs:
-      testRunTitle: 'macOS Mono'
-      testRunner: XUnit
-      testResultsFiles: 'artifacts/TestResults/Debug-MONO/*UnitTests*.xml'
-      publishRunAttachments: true
-      mergeTestResults: true
-    continueOnError: true
-    condition: always()
-  - task: PublishBuildArtifacts@1
-    displayName: 'Publish Artifact: logs'
-    inputs:
-      PathtoPublish: 'artifacts/log'
-      ArtifactName: 'MonoOnMac build logs'
-    condition: always()
-  - task: PublishBuildArtifacts@1
-    displayName: 'Publish Artifact: TestResults'
-    inputs:
-      PathtoPublish: 'artifacts/TestResults'
-      ArtifactName: 'MonoOnMac test logs'
-    continueOnError: true
-    condition: always()
-
 - template: /eng/common/templates/job/source-build.yml
   parameters:
     platform:
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index c6ed508dfc8..145b6b67a88 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -100,7 +100,7 @@ stages:
       displayName: 'Install OptProf Plugin'
 
     # Required by MicroBuildBuildVSBootstrapper
-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
+    - task: MicroBuildSwixPlugin@4
       inputs:
         dropName: $(VisualStudio.DropName)
 
@@ -125,6 +125,9 @@ stages:
       displayName: Build
       condition: succeeded()
 
+    # Required by Microsoft policy
+    - template: eng\common\templates\steps\generate-sbom.yml
+
     # Publish OptProf configuration files
     - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0
       inputs:
@@ -138,7 +141,7 @@ stages:
 
     # Build VS bootstrapper
     # Generates $(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2
+    - task: MicroBuildBuildVSBootstrapper@2
       inputs:
         vsMajorVersion: $(VisualStudio.MajorVersion)
         channelName: $(VisualStudio.ChannelName)
@@ -253,7 +256,7 @@ stages:
         - Windows_NT
         - Source_Build_Managed
       pool:
-        vmImage: vs2017-win2016
+        vmImage: windows-latest
 
 - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
   - template: eng\common\templates\post-build\post-build.yml
diff --git a/Directory.Build.props b/Directory.Build.props
index 93150ee88bd..0df28a5b8b2 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -71,11 +71,10 @@
 
     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
   </PropertyGroup>
-  
-  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />
 
+  <!-- Enable SDK supplied netanalyzers for all target frameworks -->
   <PropertyGroup>
-    <EnableAnalyzers>true</EnableAnalyzers>
+    <EnableNETAnalyzers>true</EnableNETAnalyzers>
   </PropertyGroup>
   
 </Project>
diff --git a/Directory.Build.targets b/Directory.Build.targets
index 177373cd81e..3a0e383282a 100644
--- a/Directory.Build.targets
+++ b/Directory.Build.targets
@@ -1,13 +1,27 @@
 <Project>
 
   <PropertyGroup>
+    <PackageReadmeFile>README.md</PackageReadmeFile>
     <ThirdPartyNotice Condition=" '$(ThirdPartyNotice)' == '' ">$(RepoRoot)THIRDPARTYNOTICES.txt</ThirdPartyNotice>
     <AssemblyTitle>$(TargetFileName)</AssemblyTitle>
     <Description Condition="'$(Description)' == ''">$(TargetFileName)</Description>
   </PropertyGroup>
 
-  <ItemGroup>
-    <None Include="$(ThirdPartyNotice)" Pack="true" PackagePath="notices" Visible="false" Condition=" '$(IsPackable)' == 'true' " />
+  <ItemGroup Condition=" '$(IsPackable)' == 'true' ">
+    <None Include="$(ThirdPartyNotice)" Pack="true" PackagePath="notices" Visible="false" />
+    <None Include="README.md" Pack="true" PackagePath="\" />
+  </ItemGroup>
+
+  <!-- Global Analyzer Config -->
+  <ItemGroup Condition="'$(ProjectIsDeprecated)' != 'true'">
+    <!-- Include Common.globalconfig for non-deprecated projects-->
+    <EditorConfigFiles Include="$(MSBuildThisFileDirectory)eng/Common.globalconfig" />
+  </ItemGroup>
+
+  <!-- Test Project Global Analyzer Config -->
+  <ItemGroup Condition="'$(IsTestProject)' == 'true'">
+    <!-- Include Common.Test.globalconfig for Test projects-->
+    <EditorConfigFiles Include="$(MSBuildThisFileDirectory)eng/Common.Test.globalconfig" />
   </ItemGroup>
 
   <PropertyGroup>
@@ -19,7 +33,7 @@
   <Target Name="DeleteDevPackage" AfterTargets="GenerateNuspec">
     <!-- If package just built was already in global packages folder, delete it.  This helps support a local dev cycle where you are consuming
          a package from another repo without having to update the package version each time. -->
-    
+
     <PropertyGroup>
       <_PackageFolderInGlobalPackages>$(NuGetPackageRoot)$(PackageId.ToLowerInvariant())\$(PackageVersion)</_PackageFolderInGlobalPackages>
     </PropertyGroup>
diff --git a/MSBuild.lutconfig b/MSBuild.lutconfig
new file mode 100644
index 00000000000..35293b3ca5e
--- /dev/null
+++ b/MSBuild.lutconfig
@@ -0,0 +1,7 @@
+<LUTConfig Version="1.0">
+  <Repository />
+  <ParallelBuilds>true</ParallelBuilds>
+  <ParallelTestRuns>true</ParallelTestRuns>
+  <EnablePdbs>true</EnablePdbs>
+  <TestCaseTimeout>180000</TestCaseTimeout>
+</LUTConfig>
diff --git a/MSBuild.sln b/MSBuild.sln
index 74de884bad7..75b985cb7be 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -1,8 +1,8 @@
 ﻿
 Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio Version 16
-VisualStudioVersion = 16.0.30413.136
-MinimumVisualStudioVersion = 10.0.40219.1
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 17.0.31903.59
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{4900B3B8-4310-4D5B-B1F7-2FDF9199765F}"
 	ProjectSection(SolutionItems) = preProject
 		NuGet.Config = NuGet.Config
@@ -61,8 +61,6 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Localization", "src\Package
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "DevDivPackage", "src\Package\DevDivPackage\DevDivPackage.csproj", "{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}"
 EndProject
-Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.Engine.Corext", "src\Package\MSBuild.Engine.Corext\MSBuild.Engine.Corext.csproj", "{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}"
-EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.Bootstrap", "src\MSBuild.Bootstrap\MSBuild.Bootstrap.csproj", "{CEAEE4FE-9298-443B-AFC5-0F72472484B6}"
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools", "src\StringTools\StringTools.csproj", "{639C178E-368F-4384-869E-7C6D18B4CC1F}"
@@ -77,955 +75,1272 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ProjectCachePlugin", "src\S
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "StringTools.Benchmark", "src\StringTools.Benchmark\StringTools.Benchmark.csproj", "{65749C80-47E7-42FE-B441-7A86289D46AA}"
 EndProject
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "MSBuild.VSSetup.Arm64", "src\Package\MSBuild.VSSetup.Arm64\MSBuild.VSSetup.Arm64.csproj", "{71E59632-D644-491B-AF93-22BC93167C56}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
+		Debug|ARM64 = Debug|ARM64
 		Debug|x64 = Debug|x64
 		Debug|x86 = Debug|x86
 		Debug-MONO|Any CPU = Debug-MONO|Any CPU
+		Debug-MONO|ARM64 = Debug-MONO|ARM64
 		Debug-MONO|x64 = Debug-MONO|x64
 		Debug-MONO|x86 = Debug-MONO|x86
 		MachineIndependent|Any CPU = MachineIndependent|Any CPU
+		MachineIndependent|ARM64 = MachineIndependent|ARM64
 		MachineIndependent|x64 = MachineIndependent|x64
 		MachineIndependent|x86 = MachineIndependent|x86
 		Release|Any CPU = Release|Any CPU
+		Release|ARM64 = Release|ARM64
 		Release|x64 = Release|x64
 		Release|x86 = Release|x86
 		Release-MONO|Any CPU = Release-MONO|Any CPU
+		Release-MONO|ARM64 = Release-MONO|ARM64
 		Release-MONO|x64 = Release-MONO|x64
 		Release-MONO|x86 = Release-MONO|x86
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x64.ActiveCfg = Debug|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x64.Build.0 = Debug|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.Build.0 = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|Any CPU.Build.0 = Release|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|ARM64.Build.0 = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x64.ActiveCfg = Release|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x64.Build.0 = Release|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.ActiveCfg = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.Build.0 = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x64.ActiveCfg = Debug|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x64.Build.0 = Debug|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.Build.0 = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|ARM64.Build.0 = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x64.ActiveCfg = Release|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x64.Build.0 = Release|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.ActiveCfg = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.Build.0 = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x64.ActiveCfg = Debug|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x64.Build.0 = Debug|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.Build.0 = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|ARM64.Build.0 = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x64.ActiveCfg = Release|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x64.Build.0 = Release|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.ActiveCfg = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.Build.0 = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x64.ActiveCfg = Debug|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x64.Build.0 = Debug|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.Build.0 = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|Any CPU.Build.0 = Release|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|ARM64.Build.0 = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x64.ActiveCfg = Release|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x64.Build.0 = Release|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.ActiveCfg = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.Build.0 = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x64.ActiveCfg = Debug|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x64.Build.0 = Debug|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.Build.0 = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|ARM64.Build.0 = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x64.ActiveCfg = Release|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x64.Build.0 = Release|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.ActiveCfg = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.Build.0 = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|ARM64.ActiveCfg = Debug|ARM64
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|ARM64.Build.0 = Debug|ARM64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x64.ActiveCfg = Debug|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x64.Build.0 = Debug|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.Build.0 = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|ARM64.Build.0 = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x64.ActiveCfg = Release|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x64.Build.0 = Release|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.ActiveCfg = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.Build.0 = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x64.ActiveCfg = Debug|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x64.Build.0 = Debug|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.Build.0 = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|Any CPU.Build.0 = Release|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|ARM64.Build.0 = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x64.ActiveCfg = Release|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x64.Build.0 = Release|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.ActiveCfg = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.Build.0 = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x64.ActiveCfg = Debug|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x64.Build.0 = Debug|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.Build.0 = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|ARM64.Build.0 = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x64.ActiveCfg = Release|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x64.Build.0 = Release|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.ActiveCfg = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.Build.0 = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x64.ActiveCfg = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x64.Build.0 = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.Build.0 = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|ARM64.Build.0 = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x64.ActiveCfg = Release|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x64.Build.0 = Release|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.ActiveCfg = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.Build.0 = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x64.ActiveCfg = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x64.Build.0 = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.Build.0 = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|ARM64.Build.0 = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x64.ActiveCfg = Release|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x64.Build.0 = Release|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.ActiveCfg = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.Build.0 = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x64.ActiveCfg = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x64.Build.0 = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.Build.0 = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|Any CPU.Build.0 = Release|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|ARM64.Build.0 = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x64.ActiveCfg = Release|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x64.Build.0 = Release|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.ActiveCfg = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.Build.0 = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x64.ActiveCfg = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x64.Build.0 = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.Build.0 = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|ARM64.Build.0 = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x64.ActiveCfg = Release|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x64.Build.0 = Release|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.ActiveCfg = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.Build.0 = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x64.ActiveCfg = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x64.Build.0 = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.Build.0 = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|ARM64.Build.0 = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x64.ActiveCfg = Release|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x64.Build.0 = Release|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.ActiveCfg = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.Build.0 = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x64.ActiveCfg = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x64.Build.0 = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.Build.0 = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|ARM64.Build.0 = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x64.ActiveCfg = Release|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x64.Build.0 = Release|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.ActiveCfg = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.Build.0 = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x64.ActiveCfg = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x64.Build.0 = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.Build.0 = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|ARM64.Build.0 = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x64.ActiveCfg = Release|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x64.Build.0 = Release|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.ActiveCfg = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.Build.0 = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x64.ActiveCfg = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x64.Build.0 = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.Build.0 = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release|ARM64.Build.0 = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x64.ActiveCfg = Release|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x64.Build.0 = Release|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.ActiveCfg = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.Build.0 = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x64.ActiveCfg = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x64.Build.0 = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.Build.0 = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|Any CPU.Build.0 = Release|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|ARM64.Build.0 = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x64.ActiveCfg = Release|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x64.Build.0 = Release|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.ActiveCfg = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.Build.0 = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x64.ActiveCfg = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x64.Build.0 = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.Build.0 = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|ARM64.Build.0 = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x64.ActiveCfg = Release|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x64.Build.0 = Release|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.ActiveCfg = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.Build.0 = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x64.ActiveCfg = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x64.Build.0 = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.Build.0 = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|Any CPU.Build.0 = Release|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|ARM64.Build.0 = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x64.ActiveCfg = Release|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x64.Build.0 = Release|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.ActiveCfg = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.Build.0 = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x64.ActiveCfg = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x64.Build.0 = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.Build.0 = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|ARM64.Build.0 = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x64.ActiveCfg = Release|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x64.Build.0 = Release|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.ActiveCfg = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.Build.0 = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x64.ActiveCfg = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x64.Build.0 = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.Build.0 = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|ARM64.Build.0 = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x64.ActiveCfg = Release|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x64.Build.0 = Release|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.ActiveCfg = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.Build.0 = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x64.ActiveCfg = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x64.Build.0 = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.Build.0 = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|Any CPU.Build.0 = Release|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|ARM64.Build.0 = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x64.ActiveCfg = Release|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x64.Build.0 = Release|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.ActiveCfg = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.Build.0 = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x64.ActiveCfg = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x64.Build.0 = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.Build.0 = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|ARM64.Build.0 = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x64.ActiveCfg = Release|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x64.Build.0 = Release|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.ActiveCfg = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.Build.0 = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.ActiveCfg = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.Build.0 = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.ActiveCfg = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.Build.0 = Debug|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.Build.0 = Debug|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.Build.0 = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.ActiveCfg = Release|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.Build.0 = Release|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.ActiveCfg = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.Build.0 = Release|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.Build.0 = Release-MONO|x64
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.ActiveCfg = Debug|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.Build.0 = Debug|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|ARM64.Build.0 = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x64.ActiveCfg = Release|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x64.Build.0 = Release|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.ActiveCfg = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.Build.0 = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x64.ActiveCfg = Debug|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x64.Build.0 = Debug|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.Build.0 = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|ARM64.Build.0 = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x64.ActiveCfg = Release|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x64.Build.0 = Release|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.ActiveCfg = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.Build.0 = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x64.ActiveCfg = Debug|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x64.Build.0 = Debug|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.Build.0 = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|Any CPU.Build.0 = Release|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|ARM64.Build.0 = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x64.ActiveCfg = Release|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x64.Build.0 = Release|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.ActiveCfg = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.Build.0 = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x64.ActiveCfg = Debug|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x64.Build.0 = Debug|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.Build.0 = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|Any CPU.Build.0 = Release|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|ARM64.Build.0 = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x64.ActiveCfg = Release|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x64.Build.0 = Release|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.ActiveCfg = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.Build.0 = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.ActiveCfg = Debug|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.Build.0 = Debug|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.Build.0 = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.Build.0 = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.ActiveCfg = Release|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.Build.0 = Release|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.ActiveCfg = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.Build.0 = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x64.ActiveCfg = Debug|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x64.Build.0 = Debug|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|ARM64.Build.0 = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x64.ActiveCfg = Release|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x64.Build.0 = Release|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.ActiveCfg = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.Build.0 = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x64.ActiveCfg = Debug|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x64.Build.0 = Debug|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.Build.0 = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|ARM64.Build.0 = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x64.ActiveCfg = Release|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x64.Build.0 = Release|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.ActiveCfg = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.Build.0 = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|ARM64.ActiveCfg = Debug|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|ARM64.Build.0 = Debug|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x64.ActiveCfg = Debug|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x64.Build.0 = Debug|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug|x86.Build.0 = Debug|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|ARM64.Build.0 = Debug-MONO|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|ARM64.Build.0 = MachineIndependent|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|Any CPU.Build.0 = Release|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|ARM64.ActiveCfg = Release|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|ARM64.Build.0 = Release|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x64.ActiveCfg = Release|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x64.Build.0 = Release|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x86.ActiveCfg = Release|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release|x86.Build.0 = Release|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|ARM64.ActiveCfg = Release-MONO|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|ARM64.Build.0 = Release-MONO|arm64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x64.Build.0 = Release-MONO|x64
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
+		{71E59632-D644-491B-AF93-22BC93167C56}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
@@ -1041,9 +1356,9 @@ Global
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA} = {0AC7F677-AD87-48C8-A51C-008A68136929}
 		{16DBDF17-3E0E-4140-989A-B42638126A40} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
-		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943} = {760FF85D-8BEB-4992-8095-A9678F88FD47}
+		{71E59632-D644-491B-AF93-22BC93167C56} = {9BAD9352-DEFB-45E5-B8A4-4816B9B22A33}
 	EndGlobalSection
 	GlobalSection(ExtensibilityGlobals) = postSolution
 		SolutionGuid = {F948D667-14E3-4F98-BA50-3F3C948BF4C2}
diff --git a/README.md b/README.md
index 66ce222ad7e..d96c05bcda0 100644
--- a/README.md
+++ b/README.md
@@ -8,11 +8,15 @@ The [changelog](documentation/Changelog.md) has detailed information about chang
 
 ### Build Status
 
-The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.1 and a corresponding version of the .NET Core SDK.
+The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.2 and a corresponding version of the .NET Core SDK.
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=main)
 
-We have forked for MSBuild 17.0 in the branch [`vs17.0`](https://github.com/Microsoft/msbuild/tree/vs17.0). Changes to that branch need special approval.
+We have forked for MSBuild 17.2 in the branch [`vs17.2`](https://github.com/Microsoft/msbuild/tree/vs17.2). Changes to that branch need special approval.
+
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.2)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.2)
+
+17.0 builds from the branch [`vs17.0`](https://github.com/Microsoft/msbuild/tree/vs17.0). Only high-priority bugfixes will be considered for servicing 17.0.
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.0)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.0)
 
@@ -20,32 +24,28 @@ We have forked for MSBuild 17.0 in the branch [`vs17.0`](https://github.com/Micr
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.11)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.11)
 
-MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only high-priority bugfixes will be considered for servicing 16.9.
+MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only very-high-priority bugfixes will be considered for servicing 16.9.
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.9)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.9)
 
-MSBuild 16.7 builds from the branch [`vs16.7`](https://github.com/dotnet/msbuild/tree/vs16.7). Only high-priority bugfixes will be considered for servicing 16.7.
-
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.7)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.7)
-
 MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild/tree/vs15.9). Only very-high-priority bugfixes will be considered for servicing 15.9.
 
 ## Building
 
-### Building MSBuild with Visual Studio 2019 on Windows
+### Building MSBuild with Visual Studio 2022 on Windows
 
-For the full supported experience, you will need to have Visual Studio 2019 or higher.
+For the full supported experience, you will need to have Visual Studio 2022 or higher.
 
-To get started on **Visual Studio 2019**:
+To get started on **Visual Studio 2022**:
 
-1. [Install Visual Studio 2019](https://www.visualstudio.com/vs/).  Select the following Workloads:
+1. [Install Visual Studio 2022](https://www.visualstudio.com/vs/).  Select the following Workloads:
   - .NET desktop development
   - .NET Core cross-platform development
-2. Open a `Developer Command Prompt for VS 2019` prompt.
+2. Open a `Developer Command Prompt for VS 2022` prompt.
 3. Clone the source code: `git clone https://github.com/dotnet/msbuild`
   - You may have to [download Git](https://git-scm.com/downloads) first.
 4. Run `.\build.cmd` from the root of the repo to build the code. This also restores packages needed to open the projects in Visual Studio.
-5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2019.
+5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2022.
 
 Note: To create a usable MSBuild with your changes, run `.\build.cmd /p:CreateBootstrap=true`.
 To build release, add `-c Release`: `.\build.cmd -c Release /p:CreateBootstrap=true`.
@@ -71,7 +71,7 @@ Before you contribute, please read through the contributing and developer guides
 
 * See our [up for grabs issues](https://github.com/Microsoft/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs) for a list of issues we think are great to onboard new developers.
    - **Note:** Please leave a comment asking to be assigned the issue if you want to work on it.
-* See our [label documentation](documentation/wiki/labels.md) for descriptions of labels we use throughout the repo.
+* See our [label documentation](documentation/wiki/Labels.md) for descriptions of labels we use throughout the repo.
 
 ### Other ways to contribute
 We encourage any contributions you decide to make to the repo!
diff --git a/documentation/Contributions/MSBuild-overview.md b/documentation/Contributions/MSBuild-overview.md
new file mode 100644
index 00000000000..73e6079d632
--- /dev/null
+++ b/documentation/Contributions/MSBuild-overview.md
@@ -0,0 +1,60 @@
+- [Quick intro](#quick-intro)
+- [Language interpretation parts](#language-interpretation-parts)
+- [MSBuild APIs and components](#msbuild-apis-and-components)
+- [MSBuild execution modes](#msbuild-execution-modes)
+
+# Quick intro
+MSBuild implements an actual language (... MSBuildian?). For syntax it uses XML. The XML elements and attributes represent keywords, variable names, and expressions in the language. The language is interpreted.
+
+MSBuild has two data structures:
+- [properties](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties): single valued, scalars. Like `string foo` in C#
+- [items](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items): multi valued, arrays. Like `string[] foo` in C#. Except that each array has a name called an `item-type`, and each element may not only have a value, but also have associated key-value pairs known as metadata.
+
+Typewise, everything is a string in MSBuild.
+
+Executing logic is grouped in [Targets](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-targets). They are like functions in C#. Targets can contain a single type of statement, [Tasks](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-tasks). Targets form dependencies between themselves and are executed via a stack, similar to stack based function execution in other languages.
+
+Data structures (properties and items) can be declared either inside or outside targets. There is a single scope in MSBuild, you could call it the static scope. There's no automatic "target scopes". So if you declare a property or an item inside a target, it's still static and visible to the rest of the targets.
+
+# Language interpretation parts 
+
+The parser, which produces the AST: [ProjectParser](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/Evaluation/ProjectParser.cs#L125). The AST top node is the [ProjectRootElement](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/Construction/ProjectRootElement.cs#L44)
+
+Interpretation happens in two big separate phases.
+
+The first interpretation phase is called **project evaluation**. It's done by the msbuild [Evaluator](https://github.com/dotnet/msbuild/blob/main/src/Build/Evaluation/Evaluator.cs#L52). The result of evaluation is an object tree similar (but different) to the symbol trees done by [compilers](https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/get-started/semantic-analysis#understanding-compilations-and-symbols). The semantic top nodes are `ProjectInstance` and `Project`. You can sort of think of the `ProjectRootElement` as the syntax API and the `Project` / `ProjectInstance` as the semantic API. The big difference in MSBuild is that `ProjectInstance`/`Project` also contain the actual interpretation results of MSBuild's state (properties and items) that sits outside targets.
+
+Evaluation does not execute the targets in a project. It only interprets and stores the results of logic outside targets.
+
+The second phase of msbuild interpretation is target execution. This happens in the [TargetBuilder](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L100). The `TargetBuilder` uses a stack to execute targets. The initial state is the state contained inside a given `ProjectInstance`. So targets execute in a stack based manner and mutate the global state inside a `ProjectInstance`.
+
+What's the difference between `Project` and `ProjectInstance`? While both represent evaluated projects, they are intended for different use cases. `Project` objects are specialized in introspecting / analyzing MSBuild code and also in providing high level project editing operations. `ProjectInstance` objects are  read only. So the objects in the `Project` tree point back to their corresponding `ProjectRootElement` AST elements. The objects in the `ProjectInstance` tree do not point back to the `ProjectRootElement` elements (so they have a much smaller memory footprint). For example, the `Project` tree is used by Visual Studio to analyze msbuild projects, and to reflect UI changes all the way down to the XML elements. The `TargetBuilder` only works with the lighter weight `ProjectInstance` tree, since it only needs to read state.
+
+# MSBuild APIs and components
+- `Project` / `ProjectInstance`: entrypoint APIs for working with MSBuild evaluations.
+- `BuildManager`: entrypoint API for executing targets in MSBuild.
+  - - Project build stack: RequestBuilder -> TargetBuilder -> TaskBuilder. The RequestBuilder is responsible for evaluating and running targets on a project. The TargetBuilder is responsible for running the target execution stack. The TaskBuilder is responsible for running individual tasks.
+- MSBuild nodes
+  - MSBuild distributes work across multiple processes.
+  - All processes live on the same machine.
+  - Types of nodes:
+    - A main node, called the "BuildManager node" or the "Scheduler node". It contains BuildManager instances and its main role is to coordinate the entire build. It's a big state machine that decides when to create other nodes and on which nodes to build projects.
+    - Multiple worker nodes whose single responsibility is to build projects. A worker node builds only one project at a time (99% true).
+  - The process hosting the single BuildManager node can also host one worker node (called the "inproc node"). This is done for perf reasons, to avoid serialization costs. When the BuildManager node decides to spawn a new Worker node, it creates a new process for it. These are called out of process nodes, or "oop nodes". So Worker nodes can either be inproc nodes (a single one), or oop nodes (multiple).
+
+# MSBuild execution modes
+- Building from cmdline (type msbuild.exe)
+    - MSBuild is responsible for discovering project dependencies, and building them in a depth first search manner
+    - There is no static graph of project dependencies. MSBuild does not know ahead of time what work it needs to do. It does a Just In Time DFS descent over the project references.
+    - references form a DAG. A -> {B, C}, B -> {C, D}
+    - there's a convention on how to declare and build references
+      - documented here: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md
+      - mostly implemented here: https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.CurrentVersion.targets
+- Building from Visual Studio (VS) (pressing ctrl+shift+B, or the context menu `Build -> Build Solution`)
+    - VS implements an object model for an MSBuild dependency graph
+    - VS takes over the responsibility of handling the graph dependencies and constructs its own graph
+    - It bypasses MSBuild's scheduler and "orders" MSBuild to build a single project at a time, ignoring its references
+    - It builds the graph bottom up in reverse toposort order (starting from nodes without references and going up).
+    - Fast up to date checks:  VS hardcodes relevant project file inputs for each language SDK. (for example it knows that C# projects read global.json). It uses these hardcoded rules to skip building projects. (whereas quickbuild does this in a generic non hardcoded way by observing actual IO inputs and outputs)
+- Build from commandline with static graph (type msbuild.exe /graph)
+  - this works just like QB and VS: MSBuild uses its [static graph library](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md) to find the dependency graph then builds each project node from the graph in toposort order. Unlike QB, it does neither multi machine distribution nor caching
\ No newline at end of file
diff --git a/documentation/Contributions/README.md b/documentation/Contributions/README.md
new file mode 100644
index 00000000000..08307044761
--- /dev/null
+++ b/documentation/Contributions/README.md
@@ -0,0 +1,5 @@
+# Contributed documentation
+
+This directory has documentation that was contributed by developers or users that hasn't been fully vetted for accuracy and correctness.
+
+Explanations in this folder may be slightly or subtly wrong, but can still be very informative for developing an understanding of MSBuild or a specific problem.
diff --git a/documentation/Contributions/solution-parser.md b/documentation/Contributions/solution-parser.md
new file mode 100644
index 00000000000..fa22407e66c
--- /dev/null
+++ b/documentation/Contributions/solution-parser.md
@@ -0,0 +1,59 @@
+# Solution Parser
+
+## Expander
+
+The `Expander` class is used to expand a value from an expression, which can be a function invocation. These expressions (or embedded properties) have the form "$(Property)".
+
+`Expander` handles intrinsic functions, which is a list of built-in functions.
+
+MSBuild defines an initial set of properties like `MSBuildFrameworkToolsPath32`, `MSBuildFrameworkToolsPath`, etc.
+
+Tools configuration can come from configuration file, registry and current exe path.
+
+## Building
+
+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:
+- Attaches debugger;
+- Checks that the current build manager's state is idle;
+- Initializes the logging service;
+- Initializes caches;
+- Registers packet handlers.
+
+After this setup, `MSBuild` creates build request data from project files or project instances. Data for build requests are stored in `BuildRequestData` objects.
+
+After build data for a request have been prepared, `MSBuild` executes the build. It may execute restore and/or a graph build instead depending on the configuration. It executes the build in the `ExecuteBuild` function, which pends the build request, creating an instance of `BuildSubmission` that represents the build submission.
+
+All build submissions are stored in a dictionary in the `BuildManager` class. Then they are added to the work queue.
+
+## Execution
+
+The work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`
+creates `BuildRequestBlocker` (blocker) that’s handled in the `HandleNewRequest` function that handles new requests coming from nodes. This function iterates over all build requests in blocker and, for a solution build, loads the solution to the configuration.
+
+### Solution file parser
+
+Later, it parses the solution file to generate a solution wrapper using methods from the `SolutionFile` class. First, the parser parses the file header, which should only contain solution file format version.
+
+After that, it parses all remaining lines. Each such line should start with one of the following strings:
+- `Project(` - calls `ParseProject`
+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`
+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`
+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`
+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`
+
+`ParseProject` parses the first line containing the Project Type GUID, Project name, Relative Path, and Project GUID. Each project type is hardcoded (as defined in `SolutionFile`). Then it parses all project dependencies. After a project has been parsed, it’s added to the list of parsed projects.
+
+`GlobalSection(SolutionConfigurationPlatforms)` parses the global configuration, such as `Debug|Any CPU = Debug|Any CPU`. It adds these configurations to the solution configuration list.
+
+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as `GlobalSection(ProjectConfigurationPlatforms)`, but it's the global configuration for projects. It adds these configurations to the raw project configuration list.
+
+`GlobalSection(NestedProjects)` finds parent projects for each given project. It stores the parent GUID in nested projects.
+
+After parsing the solution file, MSBuild processes the project configuration section, updating the project configuration section parsed from a previous solution file.
+
+### Solution project generation
+
+Then `MSBuild` generates an MSBuild project file from the list of projects and dependencies collected from the solution file.
+
+While generating the MSBuild wrapper project for a solution file, `MSBuild` first collects an ordered list of actual projects then creates a traversal project instance and adds some XML to it. Then it emits a solution metaproject (if it was specified) from that traversal project. It does not write this project to disk unless specified. Finally, it builds the metaproject.
+
diff --git a/documentation/Home.md b/documentation/Home.md
new file mode 100644
index 00000000000..b7cf33e3e8b
--- /dev/null
+++ b/documentation/Home.md
@@ -0,0 +1,24 @@
+# Getting Started
+
+ * [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
+ * Building Testing and Debugging
+   * [Full Framework MSBuild](wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
+   * [.Net Core MSBuild](wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
+   * [Mono MSBuild](wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
+
+# Resources
+ * [MSBuild Resources](wiki/MSBuild-Resources.md)
+ * [Contributed documentation](Contributions/README.md)
+ * [MSBuild Tips & Tricks](wiki/MSBuild-Tips-&-Tricks.md)
+ * [Binary log](wiki/Binary-Log.md)
+ * [Providing Binary Logs for investigation](wiki/Providing-Binary-Logs.md)
+ * [Contributing Code](wiki/Contributing-Code.md)
+ * [Target Maps](wiki/Target-Maps.md)
+ * Tasks
+   * [ResolveAssemblyReference](wiki/ResolveAssemblyReference.md)
+ * Problems?
+   * [Rebuilding when nothing changed](wiki/Rebuilding-when-nothing-changed.md)
+   * [Something's wrong in my build](wiki/Something's-wrong-in-my-build.md)
+   * [Microsoft.Build.Framework](wiki/Microsoft.Build.Framework.md)
+     *  Some gotchas around the Microsoft.Build.Framework project/assembly.
+
diff --git a/documentation/MSBuild-Server.md b/documentation/MSBuild-Server.md
new file mode 100644
index 00000000000..355cd8e1383
--- /dev/null
+++ b/documentation/MSBuild-Server.md
@@ -0,0 +1,54 @@
+# MSBuild Server
+
+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.
+
+## Communication protocol
+
+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:
+
+1. Try to connect to server
+   - If server is not running, start new instance
+   - If server is busy, fallback to classic build 
+2. Initiate handshake
+2. Issue build command with `EntryNodeCommand` packet
+3. Read packets from pipe
+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring
+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code
+
+### Pipe name convention & handshake
+
+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.
+
+Handshake is a procedure ensuring that client is connecting to a compatible server instance. It uses same logic and security guarantees as current connection between entry node and worker nodes. Hash in the pipe name is basically hash of the handshake object.
+
+### Packets for client-server communication
+
+Server requires to introduce new packet types for IPC.
+
+`EntryNodeCommand` contains all of the information necessary for a server to run a build.
+
+| Property name            | Type                         | Description |
+|---|---|---|
+| CommandLine              | String                       | The MSBuild command line with arguments for build |
+| StartupDirectory         | String                       | The startup directory path |
+| BuildProcessEnvironment  | IDictionary<String, String>  | Environment variables for current build |
+| Culture                  | CultureInfo                  | The culture value for current build |
+| UICulture                | CultureInfo                  | The UI culture value for current build |
+
+`EntryNodeConsoleWrite` contains information for console output.
+
+| Property name            | Type          | Description |
+|---|---|---|
+| Text                     | String        | The text that is written to the output stream. It includes ANSI escape codes for formatting. |
+| OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |
+
+`EntryNodeResponse` informs about finished build.
+
+| Property name            | Type          | Description |
+|---|---|---|
+| ExitCode                 | Int32         | The exit code of the build |
+| ExitType                 | String        | The exit type of the build |
+
+`EntryNodeCancel` cancels the current build.
+
+This type is intentionally empty and properties for build cancelation could be added in future.
diff --git a/documentation/consuming-nuget-package.md b/documentation/consuming-nuget-package.md
index e611e2194d6..71712556105 100644
--- a/documentation/consuming-nuget-package.md
+++ b/documentation/consuming-nuget-package.md
@@ -1,8 +1,8 @@
 # Consuming MSBuild NuGet packages
 
-The MSBuild team currently publishes five NuGet packages.  Our packages are published to NuGet.org 
+The MSBuild team currently publishes five NuGet packages.  Our packages are published to NuGet.org
 
-| Package ID    | URL      | Status   |
+| Package ID    | URL      | Latest Version   |
 | ------------- |-------------| -----|
 | Microsoft.Build.Framework      | https://www.nuget.org/Packages/Microsoft.Build.Framework | [![Microsoft.Build.Framework package](https://img.shields.io/nuget/vpre/Microsoft.Build.Framework.svg)](https://www.nuget.org/Packages/Microsoft.Build.Framework) |
 | Microsoft.Build.Utilities.Core      | https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core | [![Microsoft.Build.Utilities.Core package](https://img.shields.io/nuget/vpre/Microsoft.Build.Utilities.Core.svg)](https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core) |
@@ -11,42 +11,42 @@ The MSBuild team currently publishes five NuGet packages.  Our packages are publ
 | Microsoft.Build.Runtime      | https://www.nuget.org/Packages/Microsoft.Build.Runtime | [![Microsoft.Build.Runtime package](https://img.shields.io/nuget/vpre/Microsoft.Build.Runtime.svg)](https://www.nuget.org/Packages/Microsoft.Build.Runtime) |
 
 ## Microsoft.Build.Framework
-This package contains the `Microsoft.Build.Framework.dll` assembly which makes available items in the [Microsoft.Build.Framework](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.aspx) namespace.
-The items in this namespace are primarily base-level classes and interfaces shared across MSBuild's object model.  MSBuild task developers can reference this package to implement interfaces such as
-[ITask](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.itask.aspx), [ILogger](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.ilogger.aspx), and
-[IForwardingLogger](https://msdn.microsoft.com/en-us/library/microsoft.build.framework.iforwardinglogger.aspx).
+
+This package contains `Microsoft.Build.Framework.dll`, which defines [fundamental types](https://docs.microsoft.com/dotnet/api/microsoft.build.framework) used in MSBuild's API and extensibility model.
 
 ## Microsoft.Build.Utilities.Core
-This package contains the `Microsoft.Build.Utilities.Core.dll` assembly which makes available items in the [Microsoft.Build.Utilities](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.aspx) namespace.
-The items in this namespace are used by MSBuild to implement utility classes which do things such as create command lines, implement ILogger, locate tools, and track dependencies.
 
-MSBuild task developers often reference this package to develop tasks that inherit from the base class [Task](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx).  This class is implements [ITask] 
-but also provides a logging helper which can reduce code required to develop an MSBuild task.  It also contains the [ToolTask](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.tooltask.aspx) class which
-should be used by tasks which wrap the execution of another tool.  It provides functionality to capture standard output and standard error as well as the exit code of the process.
+This package contains the `Microsoft.Build.Utilities.Core.dll` assembly which makes available items in the [Microsoft.Build.Utilities](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities) namespace.
 
 ## Microsoft.Build.Tasks.Core
-This package contains the `Microsoft.Build.Tasks.Core.dll` assembly which makes available items in the [Microsoft.Build.Tasks](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.aspx) namespace.
-The items in this namespace are MSBuild tasks that have been developed by the MSBuild team.  This includes [Copy](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.copy.aspx),
-[Csc](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.csc.aspx), and [Exec](https://msdn.microsoft.com/en-us/library/microsoft.build.tasks.exec.aspx).
 
-Most developers do not need to reference this package unless they want to extend a stock MSBuild task with custom functionality.  Alternatively, we recommend that MSBuild task developers reference the 
-`Microsoft.Build.Utilities.Core` package and implement the abstract class [Task](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx) or
-[ToolTask](https://msdn.microsoft.com/en-us/library/microsoft.build.utilities.tooltask.aspx).
+This package contains implementations of [commonly-used MSBuild
+tasks](https://docs.microsoft.com/visualstudio/msbuild/msbuild-task-reference)
+that ship with MSBuild itself.
+
+Most developers do not need to reference this package. We recommend that MSBuild
+task developers reference the `Microsoft.Build.Utilities.Core` package and
+implement the abstract class
+[`Task`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.task)
+or
+[`ToolTask`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.tooltask).
 
 ## Microsoft.Build
-This package contains the `Microsoft.Build.dll` assembly which makes available items in the [Microsoft.Build.Construction](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.aspx),
-[Microsoft.Build.Evaluation](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.aspx), and [Microsoft.Build.Execution](https://msdn.microsoft.com/en-us/library/microsoft.build.execution.aspx) namespaces.
-Developers should reference this package to create, edit, evaluate, or build MSBuild projects.
 
-To create or edit an MSBuild project, use the [Microsoft.Build.Construction.ProjectRootElement](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.aspx) class and call the 
-[Create](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.create.aspx) or
-[Open](https://msdn.microsoft.com/en-us/library/microsoft.build.construction.projectrootelement.open.aspx) method.
+This package contains the `Microsoft.Build.dll` assembly which makes available items in the [Microsoft.Build.Construction](https://msdn.microsoft.com/library/microsoft.build.construction.aspx),
+[Microsoft.Build.Evaluation](https://msdn.microsoft.com/library/microsoft.build.evaluation.aspx), and [Microsoft.Build.Execution](https://msdn.microsoft.com/library/microsoft.build.execution.aspx) namespaces.
 
-To evaluate or build an MSBuild project, use the [Microsoft.Build.Evaluation.Project](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.aspx) class by creating an instance of it with the
-appropriate parameters for your project.  To retrieve evaluated items, call methods such as  properties such as [GetItem](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.getitems.aspx)
-or [GetPropertyValue](https://msdn.microsoft.com/en-us/library/microsoft.build.evaluation.project.getpropertyvalue.aspx).
+Developers should reference this package to create, edit, evaluate, or build MSBuild projects.
 
 ## Microsoft.Build.Runtime
-This package contains the standard set of MSBuild projects which are imported by other projects such as CSharp and Visual Basic as well as the MSBuild executable.  Developers should reference this package if they want to
-redistribute the MSBuild runtime to evaluate or build MSBuild projects within their application.  This can be necessary because prior to MSBuild version 15, MSBuild was installed globally on a machine and universally
-available to all applications.  However, in MSBuild version 15 and forward, MSBuild is redistributed by each application that uses it and applications are unable to share other instances.  
+
+This package delivers a complete executable copy of MSBuild. Reference this
+package only if your application needs to load projects or execute in-process
+builds without requiring installation of MSBuild. Successfully evaluating
+projects using this package requires aggregating additional components (like the
+compilers) into an application directory.
+
+🗒️ NOTE: if you are building an application that wants to use MSBuild to
+evaluate or build projects, you will generally not need this package. Instead,
+use [MSBuildLocator](https://aka.ms/msbuild/locator) to use a complete toolset
+provided by the .NET SDK or Visual Studio.
diff --git a/documentation/specs/event-source.md b/documentation/specs/event-source.md
index 03b9e7d5087..664a32ac397 100644
--- a/documentation/specs/event-source.md
+++ b/documentation/specs/event-source.md
@@ -5,23 +5,41 @@
 ## EventSource in MSBuild
 EventSource is primarily used to profile code. For MSBuild specifically, a major goal is to reduce the time it takes to run, as measured (among other metrics) by the Regression Prevention System (RPS), i.e., running specific scenarios. To find which code segments were likely candidates for improvement, EventSources were added around a mix of code segments. Larger segments that encompass several steps within a build occur nearly every time MSBuild is run and take a long time. They generally run relatively few times. Smaller methods with well-defined purposes may occur numerous times. Profiling both types of events provides both broad strokes to identify large code segments that underperform and, more specifically, which parts of them. Profiled functions include:
 
-* MSBuildExe: Executes MSBuild from the command line.
-* Build: Sets up a BuildManager to receive build requests.
-* BuildProject: Builds a project file.
-* RequestThreadProc: A function to requesting a new builder thread.
-* LoadDocument: Loads an XMLDocumentWithLocation from a path.
-* RarRemoveReferencesMarkedForExclusion: Removes blacklisted references from the reference table, putting primary and dependency references in invalid file lists.
-* RarComputeClosure: Resolves references from, for example, properties to explicit values. Used in resolving assembly references (RAR).
-* EvaluateCondition: Checks whether a condition is true and removes false conditionals.
-* Parse: Parses an XML document into a ProjectRootElement.
-* Evaluate: Evaluates a project, running several other parts of MSBuild in the process.
-* GenerateResourceOverall: Uses resource APIs to transform resource files into strongly-typed resource classes.
-* ExpandGlob: Identifies a list of files that correspond to an item, potentially with a wildcard.
-* ApplyLazyItemOperations: Collects a set of items, mutates them in a specified way, and saves the results in a lazy way.
-* RarOverall: Initiates the process of resolving assembly references (RAR).
-* Save: Saves a project to the file system if dirty, creating directories as necessary.
-* Target: Executes a target.
-* RarLogResults: Logs the results from having resolved assembly references (RAR).
+| Event | Description |
+| ------| ------------|
+| ApplyLazyItemOperations | Collects a set of items, mutates them in a specified way, and saves the results in a lazy way. |
+| Build | Sets up a BuildManager to receive build requests. |
+| BuildProject | Builds a project file. |
+| CachedSdkResolverServiceResolveSdk | The caching SDK resolver service is resolving an SDK. |
+| CopyUpToDate | Checks whether the Copy task needs to execute. |
+| Evaluate | Evaluates a project, running several other parts of MSBuild in the process. |
+| EvaluateCondition | Checks whether a condition is true and removes false conditionals. |
+| ExecuteTask | Executes a task. |
+| ExecuteTaskReacquire | Requests to reacquire the node, often after the task has completed other work. |
+| ExecuteTaskYield | Requests to yield the node, often while the task completes other work. |
+| ExpandGlob | Identifies a list of files that correspond to an item, potentially with a wildcard. |
+| GenerateResourceOverall | Uses resource APIs to transform resource files into strongly-typed resource classes. |
+| LoadDocument | Loads an XMLDocumentWithLocation from a path.
+| MSBuildExe | Executes MSBuild from the command line. |
+| PacketReadSize | Reports the size of a packet sent between nodes. Note that this does not include time information. |
+| Parse | Parses an XML document into a ProjectRootElement. |
+| ProjectGraphConstruction | Constructs a dependency graph among projects. |
+| RarComputeClosure | Resolves references from, for example, properties to explicit values. Used in resolving assembly references (RAR). |
+| RarLogResults | Logs the results from having resolved assembly references (RAR). |
+| RarOverall | Initiates the process of resolving assembly references (RAR). |
+| RarRemoveReferencesMarkedForExclusion | Removes blacklisted references from the reference table, putting primary and dependency references in invalid file lists. |
+| RequestThreadProc | A function to requesting a new builder thread. |
+| ReusableStringBuilderFactory | Uses and resizes (if necessary) of ReusableStringBuilders. |
+| ReusableStringBuilderFactoryUnbalanced | Identifies improper usage from multiple threads or buggy code: multiple Gets were called without a Relase. |
+| Save | Saves a project to the file system if dirty, creating directories as necessary. |
+| SdkResolverResolveSdk | A single SDK resolver is called. |
+| SdkResolverServiceFindResolversManifests | Find all resolvers manifests. (Only appear under Changewave 17.4.) |
+| SdkResolverServiceInitialize | Initializes SDK resolvers. (Only appear before Changewave 17.4.) |
+| SdkResolverServiceLoadResolvers | Load resolvers given a resolver manifest. (Only appear under Changewave 17.4.) |
+| SdkResolverEvent | An SDK resolver logs an event. |
+| Target | Executes a target. |
+| TargetUpToDate | Checks whether a particular target needs to run or is up-to-date. |
+| WriteLinesToFile | Checks whether the WriteLinesToFile task needs to execute. |
 
 One can run MSBuild with eventing using the following command:
 
diff --git a/documentation/specs/low-priority-switch.md b/documentation/specs/low-priority-switch.md
new file mode 100644
index 00000000000..ba33826a89e
--- /dev/null
+++ b/documentation/specs/low-priority-switch.md
@@ -0,0 +1,35 @@
+
+# Low Priority Nodes in MSBuild and Visual Studio
+
+## Problem Summary
+
+When doing other work, it can be useful for builds (which often take a long time and consume a lot of resources) to happen in the background, allowing other work to happen in the interim. This is true for both command line builds and builds within Visual Studio.
+
+Visual Studio, on the other hand, should always run at normal priority. This ensures that users can continue to interact with its other features, most notably editing code and seeing intellisense and autocomplete pop up.
+
+## High Level Design
+
+### Requirements
+
+1. A long-lived process can execute a series of builds divided between Normal and BelowNormal priority.
+2. Transitions between a build at Normal priority and one at BelowNormal priority (and vice versa) are fairly efficient, at least on Windows but ideally on all operating systems.
+3. NodeReuse is still possible. That is, another process can (often) use nodes from the long-lived process if NodeReuse is true.
+4. Any reused nodes are at the priority they themselves specify. Normal priority nodes are actually at normal priority, and low priority nodes are actually at BelowNormal priority.
+5. All nodes are at the priority they should be when being used to build even if a normal priority process had connected to them as normal priority worker nodes, and they are now executing a low priority build.
+
+
+## Non-goals
+
+Perfect parity between windows and mac or linux. Windows permits processes to raise their own priority or that of another process, whereas other operating systems do not. This is very efficient, so we should use it. As we expect this feature to be used in Visual Studio, we anticipate it being less used on mac and linux, hence not being as high priority to make it just as efficient.
+
+## Details
+
+Each node (including worker nodes) initially takes its priority from its parent process. Since we now need the priority to align with what it is passed instead of its parent, attempt to adjust priority afterwards if necessary as part of node startup.
+
+BuildManager.cs remembers the priority of the previous build it had executed. If that was set to a value that differs from the priority of the current build:
+1. On windows or when decreasing the priority: lowers the priority of all connected nodes
+2. On linux and mac when increasing the priority: disconnects from all nodes.
+
+When a worker node disconnects from the entrypoint node, it should ensure that it is the priority that would be expected by nodes that successfully connect to it. That means that it should be normal priority if lowPriority is false and BelowNormal priority otherwise.
+
+For this reason, if we intend to reuse a node, we check its priority and adjust it to the expected value if possible. If it proves impossible to adjust to the correct priority, the node shuts down.
diff --git a/documentation/specs/sdk-resolvers-algorithm.md b/documentation/specs/sdk-resolvers-algorithm.md
new file mode 100644
index 00000000000..eb962ad2644
--- /dev/null
+++ b/documentation/specs/sdk-resolvers-algorithm.md
@@ -0,0 +1,28 @@
+## SDK Resolution Algorithm
+In 17.3 under ChangeWave 17.4 the sdk resolution algorithm is changed.
+
+### Reason for change
+Previously (before ChangeWave 17.4) all SDK resolvers were loaded and then ordered by priority. The resolvers are tried one after one until one of them succeeds. In order to decrease the number of assemblies to be load we change the behavior in 17.3 under ChangeWave 17.4.
+
+### New SDK Resolution Algorithm
+Under ChangeWave 17.4 all the resolvers divides into two groups:
+- Specific resolvers, i.e. resolvers with specified sdk name pattern `ResolvableSdkPattern`
+- General resolvers, i.e. resolvers without specified sdk name pattern `ResolvableSdkPattern`
+
+The resolving algorithm works in two passes. 
+- On the first pass all the specific resolvers that match the given sdk name would be loaded, ordered by priority and tried one after one. 
+- If the sdk is not found, on the second pass all general resolvers would be loaded, ordered by priority and tried one after one.
+
+By default the resolvers are general. To make all the resolvers from some dll specific, in the corresponding manifest (xml file) one need to specify the `ResolvableSdkPattern` using C# regex format:
+```
+<SdkResolver>
+  <Path>MySdkResolver.dll</Path>
+  <ResolvableSdkPattern>MySdk.*</ResolvableSdkPattern>
+</SdkResolver>
+```
+
+Note, that the manifest file, if exists, from ChangeWave 17.4 would have preference over the dll.
+The sdk discovery works according to the following algorithm:
+- First try locate the manifest file and use it. 
+- If it is not found, we try to locate the dll in the resolver's folder. 
+Both xml and dll name should match the following name pattern `...\SdkResolvers\(ResolverName)\(ResolverName).(xml/dll)`.
\ No newline at end of file
diff --git a/documentation/wiki/Binary-Log.md b/documentation/wiki/Binary-Log.md
index 7d3be80a19b..caaf9d52580 100644
--- a/documentation/wiki/Binary-Log.md
+++ b/documentation/wiki/Binary-Log.md
@@ -66,7 +66,10 @@ http://msbuildlog.com
 
 # Collecting binary logs from Visual Studio builds
 
-If you need to capture a binary log in Visual Studio, instead of the command line, you'll need a Visual Studio plugin: https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools
+If you need to capture a binary log in Visual Studio, instead of the command line, you'll need a Visual Studio plugin:
+
+- https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools for VS 2017 & 2019
+- https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools2022 for VS 2022
 
 After installing that, enable logging and run your build ([more details](https://github.com/dotnet/project-system-tools)).
 
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
index 741b3aa6b5f..20c962598de 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
@@ -4,7 +4,7 @@ These instructions refer to working with the `master` branch.
 
 ## Required Software
 
-**Latest Microsoft Visual Studio 2019**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
+**Latest Microsoft Visual Studio 2022**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
 
 All command lines should be executed from a Visual Studio developer command prompt.
 
diff --git a/documentation/wiki/ChangeWaves-Dev.md b/documentation/wiki/ChangeWaves-Dev.md
index a3cfdbcd93f..5158535340c 100644
--- a/documentation/wiki/ChangeWaves-Dev.md
+++ b/documentation/wiki/ChangeWaves-Dev.md
@@ -12,8 +12,11 @@ The opt-out comes in the form of setting the environment variable `MSBuildDisabl
 ## Choosing a Change Wave for a New Feature
 This is determined on a case by case basis and should be discussed with the MSBuild team. A safe bet would be to check our [currently active Change Waves](ChangeWaves.md#change-waves-&-associated-features) and pick the version after the latest MSBuild version. This version corresponds to the latest version of Visual Studio.
 
+### Change Wave Versioning
+Change Wave features should match the LTS version of VS they were released with. Any feature requiring a changewave during a non-LTS release of VS should use the **NEXT** version number.
+
 # Developing With Change Waves in Mind
-For the purpose of providing an example, the rest of this document assumes we're developing a feature for MSBuild version **17.4**.
+For the purpose of providing an example, the rest of this document assumes we're developing a feature for MSBuild version **17.3**.
 
 The Process:
 1. Develop your feature.
@@ -32,7 +35,7 @@ public static readonly Version Wave17_4 = new Version(17, 4);
 3. You may need to delete the lowest wave as new waves get added.
 4. Update the AllWaves array appropriately.
 ```c#
-public static readonly Version[] AllWaves = { Wave16_10, Wave17_0, Wave17_4 };
+public static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
 ```
 
 ## Condition Your Feature On A Change Wave
@@ -96,4 +99,4 @@ These features will eventually become standard functionality. When a change wave
 1. Start by deleting the readonly `Wave17_4` that was created in [Creating a Change Wave](#creating-a-change-wave).
 2. Remove `ChangeWave.AreFeaturesEnabled` or `[MSBuild]::AreFeaturesEnabled` conditions surrounding features that were assigned that change wave.
 3. Remove tests associated with ensuring features would not run if this wave were set.
-4. Clear all other issues that arose from deleting the version.
+4. Clear all other issues that arose from deleting the version.
\ No newline at end of file
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index b09e8a6d8d7..2158cd2a8a5 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -22,20 +22,34 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 # Change Waves & Associated Features
 
 ## Current Rotation of Change Waves
-### 16.10
-- [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)
-- [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)
-- [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)
-- [Fail restore operations when an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6430)
+
+### 17.4
+- [Respect deps.json when loading assemblies](https://github.com/dotnet/msbuild/pull/7520)
+- [Consider `Platform` as default during Platform Negotiation](https://github.com/dotnet/msbuild/pull/7511)
+- [Adding accepted SDK name match pattern to SDK manifests](https://github.com/dotnet/msbuild/pull/7597)
+
 ### 17.0
 - [Scheduler should honor BuildParameters.DisableInprocNode](https://github.com/dotnet/msbuild/pull/6400)
 - [Don't compile globbing regexes on .NET Framework](https://github.com/dotnet/msbuild/pull/6632)
 - [Default to transitively copying content items](https://github.com/dotnet/msbuild/pull/6622)
-- [Reference assemblies are now no longer placed in the `bin` directory by default](https://github.com/dotnet/msbuild/pull/6560)
+- [Reference assemblies are now no longer placed in the `bin` directory by default](https://github.com/dotnet/msbuild/pull/6560) (reverted [here](https://github.com/dotnet/msbuild/pull/6718) and brought back [here](https://github.com/dotnet/msbuild/pull/7075))
 - [Improve debugging experience: add global switch MSBuildDebugEngine; Inject binary logger from BuildManager; print static graph as .dot file](https://github.com/dotnet/msbuild/pull/6639)
+- [Fix deadlock in BuildManager vs LoggingService](https://github.com/dotnet/msbuild/pull/6837)
+- [Optimize diag level for file logger and console logger](https://github.com/dotnet/msbuild/pull/7026)
+- [Optimized immutable files up to date checks](https://github.com/dotnet/msbuild/pull/6974)
+- [Add Microsoft.IO.Redist for directory enumeration](https://github.com/dotnet/msbuild/pull/6771)
+- [Process-wide caching of ToolsetConfigurationSection](https://github.com/dotnet/msbuild/pull/6832)
+- [Normalize RAR output paths](https://github.com/dotnet/msbuild/pull/6533)
 
 ## Change Waves No Longer In Rotation
 ### 16.8
 - [Enable NoWarn](https://github.com/dotnet/msbuild/pull/5671)
 - [Truncate Target/Task skipped log messages to 1024 chars](https://github.com/dotnet/msbuild/pull/5553)
 - [Don't expand full drive globs with false condition](https://github.com/dotnet/msbuild/pull/5669)
+
+### 16.10
+- [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)
+- [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)
+- [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)
+- [Fail restore operations when an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6430)
+- [Optimize glob evaluation](https://github.com/dotnet/msbuild/pull/6151)
diff --git a/documentation/wiki/Home.md b/documentation/wiki/Home.md
deleted file mode 100644
index 9ffee5a2d62..00000000000
--- a/documentation/wiki/Home.md
+++ /dev/null
@@ -1,23 +0,0 @@
-# Getting Started
-
- * [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
- * Building Testing and Debugging
-   * [Full Framework MSBuild](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
-   * [.Net Core MSBuild](Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
-   * [Mono MSBuild](Building-Testing-and-Debugging-on-Mono-MSBuild.md)
-
-# Resources
- * [MSBuild Resources](MSBuild-Resources.md)
- * [MSBuild Tips & Tricks](MSBuild-Tips-&-Tricks.md)
- * [Binary log](Binary-Log.md)
- * [Providing Binary Logs for investigation](Providing-Binary-Logs.md)
- * [Contributing Code](Contributing-Code.md)
- * [Target Maps](Target-Maps.md)
- * Tasks
-   * [ResolveAssemblyReference](ResolveAssemblyReference.md)
- * Problems?
-   * [Rebuilding when nothing changed](Rebuilding-when-nothing-changed.md)
-   * [Something's wrong in my build](Something's-wrong-in-my-build.md)
-   * [Microsoft.Build.Framework](Microsoft.Build.Framework.md)
-     *  Some gotchas around the Microsoft.Build.Framework project/assembly.
-
diff --git a/documentation/wiki/MSBuild-Tips-&-Tricks.md b/documentation/wiki/MSBuild-Tips-&-Tricks.md
index 925930a747a..a66255a037e 100644
--- a/documentation/wiki/MSBuild-Tips-&-Tricks.md
+++ b/documentation/wiki/MSBuild-Tips-&-Tricks.md
@@ -39,7 +39,7 @@ See the [MSBuild Command-Line Reference](https://docs.microsoft.com/visualstudio
 If MSBuild.exe is passed properties on the command line, such as `/p:Platform=AnyCPU` then this value overrides whatever assignments you have to that property inside property groups. For instance, `<Platform>x86</Platform>` will be ignored. To make sure your local assignment to properties overrides whatever they pass on the command line, add the following at the top of your MSBuild project file:
 
 ```
-<Project TreatAsLocalProperty="Platform" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project TreatAsLocalProperty="Platform" DefaultTargets="Build">
 ```
 
 This will make sure that your local assignments to the `Platform` property are respected. You can specify multiple properties in `TreatAsLocalProperty` separated by semicolon.
@@ -59,11 +59,11 @@ Use this command-line to approximate what the design-time build does:
 See https://www.simple-talk.com/dotnet/.net-tools/extending-msbuild, "Extending all builds" section. Also read about [MSBuildUserExtensionsPath](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/Microsoft.Common.props,33), [CustomBeforeMicrosoftCommonProps](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/Microsoft.Common.props,68), [CustomBeforeMicrosoftCommonTargets](http://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.targets,71), and CustomAfterMicrosoftCommonProps/CustomAfterMicrosoftCommonTargets.
 
 Example:
-Create this file (Custom.props) in `C:\Users\username\AppData\Local\Microsoft\MSBuild\14.0\Microsoft.Common.targets\ImportAfter`:
+Create this file (Custom.props) in `C:\Users\username\AppData\Local\Microsoft\MSBuild\Current\Microsoft.Common.targets\ImportAfter`:
 
 ```
 <?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
   <PropertyGroup>
     <MyCustomProperty>Value!</MyCustomProperty>
   </PropertyGroup>
diff --git a/documentation/wiki/ResolveAssemblyReference.md b/documentation/wiki/ResolveAssemblyReference.md
index 723cc6d3507..27241f5dbd5 100644
--- a/documentation/wiki/ResolveAssemblyReference.md
+++ b/documentation/wiki/ResolveAssemblyReference.md
@@ -149,19 +149,19 @@ There were recent fixes made to RAR to alleviate the situation. You can control
 There are two ways to customize the list of paths RAR will search in attempting to locate an assembly. To fully customize the list, the property `AssemblySearchPaths` can be set ahead of time. Note that the order matters; if an assembly is in two locations, RAR will stop after it finds it at the first location.
 
 By default, there are ten locations RAR will search (four if using the .NET SDK), and each can be disabled by setting the relevant flag to false:
-1. Searching files from the current project is disabled by setting the `AssemblySearchPathUseCandidateAssemblyFiles` property to false.
-2. Searching the reference path property (from a .user file) is disabled by setting the `AssemblySearchPathUseReferencePath` property to false.
-3. Using the hint path from the item is disabled by setting the `AssemblySearchPathUseHintPathFromItem` property to false.
-4. Using the directory with MSBuild's target runtime is disabled by setting the `AssemblySearchPathUseTargetFrameworkDirectory` property to false.
-5. Searching assembly folders from AssemblyFolders.config is disabled by setting the `AssemblySearchPathUseAssemblyFoldersConfigFileSearchPath` property to false.
-6. Searching the registry is disabled by setting the `AssemblySearchPathUseRegistry` property to false.
-7. Searching legacy registered assembly folders is disabled by setting the `AssemblySearchPathUseAssemblyFolders` property to false.
-8. Looking in the GAC is disabled by setting the `AssemblySearchPathUseGAC` property to false.
-9. Treating the reference's Include as a real file name is disabled by setting the `AssemblySearchPathUseRawFileName` property to false.
-10. Checking the application's output folder is disabled by setting the `AssemblySearchPathUseOutDir` property to false.
+1. Searching files from the current project is disabled by setting the `AssemblySearchPath_UseCandidateAssemblyFiles` property to false.
+2. Searching the reference path property (from a .user file) is disabled by setting the `AssemblySearchPath_UseReferencePath` property to false.
+3. Using the hint path from the item is disabled by setting the `AssemblySearchPath_UseHintPathFromItem` property to false.
+4. Using the directory with MSBuild's target runtime is disabled by setting the `AssemblySearchPath_UseTargetFrameworkDirectory` property to false.
+5. Searching assembly folders from AssemblyFolders.config is disabled by setting the `AssemblySearchPath_UseAssemblyFoldersConfigFileSearchPath` property to false.
+6. Searching the registry is disabled by setting the `AssemblySearchPath_UseRegistry` property to false.
+7. Searching legacy registered assembly folders is disabled by setting the `AssemblySearchPath_UseAssemblyFolders` property to false.
+8. Looking in the GAC is disabled by setting the `AssemblySearchPath_UseGAC` property to false.
+9. Treating the reference's Include as a real file name is disabled by setting the `AssemblySearchPath_UseRawFileName` property to false.
+10. Checking the application's output folder is disabled by setting the `AssemblySearchPath_UseOutDir` property to false.
 
 ## There was a conflict
 
-A common situation is MSBuild gives a warning about different versions of the same assembly being used by different references. The solution often involves adding a binding redirect to the app.config file. 
+A common situation is MSBuild gives a warning about different versions of the same assembly being used by different references. The solution often involves adding a binding redirect to the app.config file.
 
 A useful way to investigate these conflicts is to search in MSBuild Structured Log Viewer for "There was a conflict". It will show you detailed information about which references needed which versions of the assembly in question.
diff --git a/eng/Analyzers.props b/eng/Analyzers.props
deleted file mode 100644
index 2a523c21b2c..00000000000
--- a/eng/Analyzers.props
+++ /dev/null
@@ -1,7 +0,0 @@
-<Project>
-  <PropertyGroup>
-    <CodeAnalysisRuleset>$(MSBuildThisFileDirectory)CodeAnalysis.ruleset</CodeAnalysisRuleset>
-    <!-- Disable analyzers in sourcebuild -->
-    <EnableAnalyzers Condition="'$(DotNetBuildFromSource)' == 'true'">false</EnableAnalyzers>
-  </PropertyGroup>
-</Project>
diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index 52c0b7ec043..288c062da35 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -8,7 +8,7 @@
 
   <PropertyGroup>
     <BootstrapDestination>$(ArtifactsBinDir)bootstrap\</BootstrapDestination>
-    <BootstrapDestination Condition="'$(Platform)' == 'x64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
+    <BootstrapDestination Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
     <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>
 
     <!-- TODO: Mono build should use BootstrapNetCore logic -->
@@ -21,7 +21,7 @@
 
   <Target Name="Bootstrap" DependsOnTargets="$(BootstrapDependsOn)"
           AfterTargets="AfterBuild"
-          Condition="'$(CreateBootstrap)' == 'true'"/>
+          Condition="'$(CreateBootstrap)' != 'false'"/>
 
   <Target Name="CleanBootstrapFolder">
     <!-- This sometimes fails so it might need be retried. -->
@@ -79,7 +79,8 @@
       <ShimTargets Include="Workflow.Targets" />
       <ShimTargets Include="Workflow.VisualBasic.Targets" />
 
-      <InstalledMicrosoftExtensions Include="$(MSBuildExtensionsPath)\Microsoft\**\*.*" />
+      <InstalledMicrosoftExtensions Include="$(MSBuildExtensionsPath)\Microsoft\**\*.*"
+                                    Exclude="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\NodeJs\**" />
 
       <InstalledNuGetFiles Include="$(MSBuildExtensionsPath)\Microsoft\NuGet\*" />
 
@@ -100,6 +101,13 @@
       <FreshlyBuiltBinariesx64 Include="$(MSBuildTaskHostX64BinPath)**\*.exe.config" />
       <FreshlyBuiltBinariesx64 Include="$(X64BinPath)**\*.dll.config" />
 
+      <FreshlyBuiltBinariesArm64 Include="$(X64BinPath)\Microsoft.Build.Tasks.Core.dll" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.exe" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.tlb" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.pdb" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.exe.config" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.dll.config" />
+
       <FreshlyBuiltRootProjects Include="$(OutputPath)Microsoft.Common.props" />
       <FreshlyBuiltRootProjects Include="$(OutputPath)Microsoft.VisualStudioVersion.*.Common.props" />
       <FreshlyBuiltProjects Include="$(OutputPath)**\*props" Exclude="@(FreshlyBuiltRootProjects)" />
@@ -155,6 +163,10 @@
      <Copy SourceFiles="@(FreshlyBuiltBinariesx64)"
           DestinationFiles="@(FreshlyBuiltBinariesx64 -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\amd64\%(RecursiveDir)%(Filename)%(Extension)')" />
 
+    <!-- Copy our binaries to the arm64 location. -->
+     <Copy SourceFiles="@(FreshlyBuiltBinariesArm64)"
+          DestinationFiles="@(FreshlyBuiltBinariesArm64 -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\arm64\%(RecursiveDir)%(Filename)%(Extension)')" />
+
     <!-- Copy our freshly-built props and targets, overwriting anything we copied from the machine -->
     <Copy SourceFiles="@(FreshlyBuiltRootProjects)"
           DestinationFiles="@(FreshlyBuiltRootProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\%(Filename)%(Extension)')" />
@@ -162,6 +174,8 @@
           DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\%(RecursiveDir)%(Filename)%(Extension)')" />
     <Copy SourceFiles="@(FreshlyBuiltProjects)"
           DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\amd64\%(RecursiveDir)%(Filename)%(Extension)')" />
+    <Copy SourceFiles="@(FreshlyBuiltProjects)"
+          DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\arm64\%(RecursiveDir)%(Filename)%(Extension)')" />
 
   </Target>
 
diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
deleted file mode 100644
index 2078c42fe6c..00000000000
--- a/eng/CodeAnalysis.ruleset
+++ /dev/null
@@ -1,389 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<RuleSet Name="Microsoft.Analyzers.ManagedCodeAnalysis" Description="Microsoft.Analyzers.ManagedCodeAnalysis" ToolsVersion="16.0">
-  <Rules AnalyzerId="Microsoft.DotNet.CodeAnalysis" RuleNamespace="Microsoft.DotNet.CodeAnalysis.Analyzers"> 
-    <Rule Id="BCL0001" Action="Warning" />         <!-- Ensure minimum API surface is respected --> 
-    <Rule Id="BCL0010" Action="Warning" />         <!-- AppContext default value expected to be true --> 
-    <Rule Id="BCL0011" Action="Warning" />         <!-- AppContext default value defined in if statement with incorrect pattern --> 
-    <Rule Id="BCL0012" Action="Warning" />         <!-- AppContext default value defined in if statement at root of switch case --> 
-    <Rule Id="BCL0015" Action="None" />            <!-- Invalid P/Invoke call --> 
-    <Rule Id="BCL0020" Action="Warning" />         <!-- Invalid SR.Format call --> 
-  </Rules> 
-  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers"> 
-    <Rule Id="CA1000" Action="None" />             <!-- Do not declare static members on generic types --> 
-    <Rule Id="CA1001" Action="None" />             <!-- Types that own disposable fields should be disposable --> 
-    <Rule Id="CA1002" Action="None" />             <!-- Do not expose generic lists --> 
-    <Rule Id="CA1003" Action="None" />             <!-- Use generic event handler instances --> 
-    <Rule Id="CA1005" Action="None" />             <!-- Avoid excessive parameters on generic types --> 
-    <Rule Id="CA1008" Action="None" />             <!-- Enums should have zero value --> 
-    <Rule Id="CA1010" Action="None" />             <!-- Generic interface should also be implemented --> 
-    <Rule Id="CA1012" Action="None" />             <!-- Abstract types should not have constructors --> 
-    <Rule Id="CA1014" Action="None" />             <!-- Mark assemblies with CLSCompliant --> 
-    <Rule Id="CA1016" Action="None" />             <!-- Mark assemblies with assembly version --> 
-    <Rule Id="CA1017" Action="None" />             <!-- Mark assemblies with ComVisible --> 
-    <Rule Id="CA1018" Action="Warning" />          <!-- Mark attributes with AttributeUsageAttribute --> 
-    <Rule Id="CA1019" Action="None" />             <!-- Define accessors for attribute arguments --> 
-    <Rule Id="CA1024" Action="None" />             <!-- Use properties where appropriate --> 
-    <Rule Id="CA1027" Action="None" />             <!-- Mark enums with FlagsAttribute --> 
-    <Rule Id="CA1028" Action="None" />             <!-- Enum Storage should be Int32 --> 
-    <Rule Id="CA1030" Action="None" />             <!-- Use events where appropriate --> 
-    <Rule Id="CA1031" Action="None" />             <!-- Do not catch general exception types --> 
-    <Rule Id="CA1032" Action="None" />
-    <Rule Id="CA1033" Action="None" />             <!-- Interface methods should be callable by child types --> 
-    <Rule Id="CA1034" Action="None" />
-    <Rule Id="CA1036" Action="None" />             <!-- Override methods on comparable types --> 
-    <Rule Id="CA1040" Action="None" />             <!-- Avoid empty interfaces --> 
-    <Rule Id="CA1041" Action="None" />             <!-- Provide ObsoleteAttribute message --> 
-    <Rule Id="CA1043" Action="None" />             <!-- Use Integral Or String Argument For Indexers --> 
-    <Rule Id="CA1044" Action="None" />             <!-- Properties should not be write only --> 
-    <Rule Id="CA1046" Action="None" />             <!-- Do not overload equality operator on reference types --> 
-    <Rule Id="CA1047" Action="Warning" />          <!-- Do not declare protected member in sealed type --> 
-    <Rule Id="CA1050" Action="Info" />             <!-- Declare types in namespaces --> 
-    <Rule Id="CA1051" Action="None" />             <!-- Do not declare visible instance fields --> 
-    <Rule Id="CA1052" Action="None" />             <!-- Static holder types should be Static or NotInheritable --> 
-    <Rule Id="CA1054" Action="None" />             <!-- Uri parameters should not be strings --> 
-    <Rule Id="CA1055" Action="None" />             <!-- Uri return values should not be strings --> 
-    <Rule Id="CA1056" Action="None" />             <!-- Uri properties should not be strings --> 
-    <Rule Id="CA1058" Action="None" />             <!-- Types should not extend certain base types --> 
-    <Rule Id="CA1061" Action="None" />             <!-- Do not hide base class methods --> 
-    <Rule Id="CA1062" Action="None" />             <!-- Validate arguments of public methods --> 
-    <Rule Id="CA1063" Action="None" />             <!-- Implement IDisposable Correctly --> 
-    <Rule Id="CA1064" Action="None" />             <!-- Exceptions should be public --> 
-    <Rule Id="CA1065" Action="None" />             <!-- Do not raise exceptions in unexpected locations --> 
-    <Rule Id="CA1066" Action="None" />             <!-- Implement IEquatable when overriding Object.Equals --> 
-    <Rule Id="CA1067" Action="None" />             <!-- Override Object.Equals(object) when implementing IEquatable<T> --> 
-    <Rule Id="CA1068" Action="None" />             <!-- CancellationToken parameters must come last --> 
-    <Rule Id="CA1069" Action="None" />             <!-- Enums values should not be duplicated --> 
-    <Rule Id="CA1070" Action="Info" />             <!-- Do not declare event fields as virtual --> 
-    <Rule Id="CA1200" Action="Info" />             <!-- Avoid using cref tags with a prefix --> 
-    <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters --> 
-    <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo --> 
-    <Rule Id="CA1305" Action="None" />             <!-- Specify IFormatProvider --> 
-    <Rule Id="CA1307" Action="None" />             <!-- Specify StringComparison --> 
-    <Rule Id="CA1308" Action="None" />             <!-- Normalize strings to uppercase --> 
-    <Rule Id="CA1309" Action="None" />             <!-- Use ordinal stringcomparison --> 
-    <Rule Id="CA1401" Action="Warning" />          <!-- P/Invokes should not be visible --> 
-    <Rule Id="CA1417" Action="Warning" />          <!-- Do not use 'OutAttribute' on string parameters for P/Invokes --> 
-    <Rule Id="CA1502" Action="None" />             <!-- Avoid excessive complexity --> 
-    <Rule Id="CA1505" Action="None" />             <!-- Avoid unmaintainable code --> 
-    <Rule Id="CA1506" Action="None" />             <!-- Avoid excessive class coupling --> 
-    <Rule Id="CA1507" Action="Info" />             <!-- Use nameof to express symbol names --> 
-    <Rule Id="CA1508" Action="None" />             <!-- Avoid dead conditional code --> 
-    <Rule Id="CA1509" Action="None" />             <!-- Invalid entry in code metrics rule specification file --> 
-    <Rule Id="CA1700" Action="None" />             <!-- Do not name enum values 'Reserved' --> 
-    <Rule Id="CA1707" Action="None" />
-    <Rule Id="CA1710" Action="None" />             <!-- Identifiers should have correct suffix --> 
-    <Rule Id="CA1711" Action="None" />             <!-- Identifiers should not have incorrect suffix --> 
-    <Rule Id="CA1712" Action="None" />             <!-- Do not prefix enum values with type name --> 
-    <Rule Id="CA1714" Action="None" />
-    <Rule Id="CA1715" Action="None" />             <!-- Identifiers should have correct prefix --> 
-    <Rule Id="CA1716" Action="None" />             <!-- Identifiers should not match keywords --> 
-    <Rule Id="CA1717" Action="None" />
-    <Rule Id="CA1720" Action="None" />             <!-- Identifier contains type name --> 
-    <Rule Id="CA1721" Action="None" />             <!-- Property names should not match get methods --> 
-    <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
-    <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
-    <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
-    <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
-    <Rule Id="CA1806" Action="None" />
-    <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
-    <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
-    <Rule Id="CA1814" Action="None" />
-    <Rule Id="CA1815" Action="None" />
-    <Rule Id="CA1816" Action="None" />             <!-- Dispose methods should call SuppressFinalize --> 
-    <Rule Id="CA1819" Action="None" />
-    <Rule Id="CA1820" Action="None" />             <!-- Test for empty strings using string length --> 
-    <Rule Id="CA1821" Action="Warning" />          <!-- Remove empty Finalizers --> 
-    <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
-    <Rule Id="CA1823" Action="Info" />             <!-- Avoid unused private fields --> 
-    <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
-    <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. --> 
-    <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
-    <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
-    <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available --> 
-    <Rule Id="CA1830" Action="Warning" />          <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder. --> 
-    <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
-    <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
-    <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
-    <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
-    <Rule Id="CA1835" Action="Info" />             <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
-    <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
-    <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
-    <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
-    <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
-    <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
-    <Rule Id="CA2007" Action="Info" />             <!-- Consider calling ConfigureAwait on the awaited task --> 
-    <Rule Id="CA2008" Action="Info" />             <!-- Do not create tasks without passing a TaskScheduler --> 
-    <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value --> 
-    <Rule Id="CA2011" Action="Warning" />          <!-- Avoid infinite recursion --> 
-    <Rule Id="CA2012" Action="Warning" />          <!-- Use ValueTasks correctly --> 
-    <Rule Id="CA2013" Action="Warning" />          <!-- Do not use ReferenceEquals with value types --> 
-    <Rule Id="CA2014" Action="Warning" />          <!-- Do not use stackalloc in loops. --> 
-    <Rule Id="CA2015" Action="Warning" />          <!-- Do not define finalizers for types derived from MemoryManager<T> --> 
-    <Rule Id="CA2016" Action="Info" />             <!-- Forward the 'CancellationToken' parameter to methods that take one --> 
-    <Rule Id="CA2100" Action="None" />             <!-- Review SQL queries for security vulnerabilities --> 
-    <Rule Id="CA2101" Action="None" />             <!-- Specify marshaling for P/Invoke string arguments --> 
-    <Rule Id="CA2109" Action="None" />             <!-- Review visible event handlers --> 
-    <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
-    <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
-    <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
-    <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly --> 
-    <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
-    <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
-    <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
-    <Rule Id="CA2216" Action="None" />             <!-- Disposable types should declare finalizer --> 
-    <Rule Id="CA2219" Action="None" />
-    <Rule Id="CA2224" Action="None" />             <!-- Override Equals on overloading operator equals --> 
-    <Rule Id="CA2225" Action="None" />             <!-- Operator overloads have named alternates --> 
-    <Rule Id="CA2226" Action="None" />             <!-- Operators should have symmetrical overloads --> 
-    <Rule Id="CA2227" Action="None" />             <!-- Collection properties should be read only --> 
-    <Rule Id="CA2231" Action="None" />             <!-- Overload operator equals on overriding value type Equals --> 
-    <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings --> 
-    <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields --> 
-    <Rule Id="CA2241" Action="Info" />             <!-- Provide correct arguments to formatting methods --> 
-    <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly --> 
-    <Rule Id="CA2243" Action="None" />             <!-- Attribute string literals should parse correctly --> 
-    <Rule Id="CA2244" Action="None" />             <!-- Do not duplicate indexed element initializations --> 
-    <Rule Id="CA2245" Action="Warning" />          <!-- Do not assign a property to itself. --> 
-    <Rule Id="CA2246" Action="None" />             <!-- Assigning symbol and its member in the same statement. --> 
-    <Rule Id="CA2247" Action="Warning" />          <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum. --> 
-    <Rule Id="CA2248" Action="Warning" />          <!-- Provide correct 'enum' argument to 'Enum.HasFlag' --> 
-    <Rule Id="CA2249" Action="Info" />             <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
-    <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter --> 
-    <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder --> 
-    <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize --> 
-    <Rule Id="CA2305" Action="None" />             <!-- Do not use insecure deserializer LosFormatter --> 
-    <Rule Id="CA2310" Action="None" />             <!-- Do not use insecure deserializer NetDataContractSerializer --> 
-    <Rule Id="CA2311" Action="None" />             <!-- Do not deserialize without first setting NetDataContractSerializer.Binder --> 
-    <Rule Id="CA2312" Action="None" />             <!-- Ensure NetDataContractSerializer.Binder is set before deserializing --> 
-    <Rule Id="CA2315" Action="None" />             <!-- Do not use insecure deserializer ObjectStateFormatter --> 
-    <Rule Id="CA2321" Action="None" />             <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver --> 
-    <Rule Id="CA2322" Action="None" />             <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing --> 
-    <Rule Id="CA2326" Action="None" />             <!-- Do not use TypeNameHandling values other than None --> 
-    <Rule Id="CA2350" Action="None" />             <!-- Do not use DataTable.ReadXml() with untrusted data --> 
-    <Rule Id="CA2351" Action="None" />             <!-- Do not use DataSet.ReadXml() with untrusted data --> 
-    <Rule Id="CA2352" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks --> 
-    <Rule Id="CA2353" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type --> 
-    <Rule Id="CA2354" Action="None" />             <!-- Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks --> 
-    <Rule Id="CA2355" Action="None" />             <!-- Unsafe DataSet or DataTable type found in deserializable object graph --> 
-    <Rule Id="CA2356" Action="None" />             <!-- Unsafe DataSet or DataTable type in web deserializable object graph --> 
-    <Rule Id="CA2361" Action="None" />             <!-- Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data --> 
-    <Rule Id="CA2362" Action="None" />             <!-- Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks --> 
-    <Rule Id="CA3001" Action="None" />             <!-- Review code for SQL injection vulnerabilities --> 
-    <Rule Id="CA3002" Action="None" />             <!-- Review code for XSS vulnerabilities --> 
-    <Rule Id="CA3003" Action="None" />             <!-- Review code for file path injection vulnerabilities --> 
-    <Rule Id="CA3004" Action="None" />             <!-- Review code for information disclosure vulnerabilities --> 
-    <Rule Id="CA3005" Action="None" />             <!-- Review code for LDAP injection vulnerabilities --> 
-    <Rule Id="CA3006" Action="None" />             <!-- Review code for process command injection vulnerabilities --> 
-    <Rule Id="CA3007" Action="None" />             <!-- Review code for open redirect vulnerabilities --> 
-    <Rule Id="CA3008" Action="None" />             <!-- Review code for XPath injection vulnerabilities --> 
-    <Rule Id="CA3009" Action="None" />             <!-- Review code for XML injection vulnerabilities --> 
-    <Rule Id="CA3010" Action="None" />             <!-- Review code for XAML injection vulnerabilities --> 
-    <Rule Id="CA3011" Action="None" />             <!-- Review code for DLL injection vulnerabilities --> 
-    <Rule Id="CA3012" Action="None" />             <!-- Review code for regex injection vulnerabilities --> 
-    <Rule Id="CA3061" Action="Warning" />          <!-- Do Not Add Schema By URL --> 
-    <Rule Id="CA3075" Action="Warning" />          <!-- Insecure DTD processing in XML --> 
-    <Rule Id="CA3076" Action="Warning" />          <!-- Insecure XSLT script processing. --> 
-    <Rule Id="CA3077" Action="Warning" />          <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader --> 
-    <Rule Id="CA3147" Action="Warning" />          <!-- Mark Verb Handlers With Validate Antiforgery Token --> 
-    <Rule Id="CA5350" Action="Warning" />          <!-- Do Not Use Weak Cryptographic Algorithms --> 
-    <Rule Id="CA5351" Action="Warning" />          <!-- Do Not Use Broken Cryptographic Algorithms --> 
-    <Rule Id="CA5358" Action="None" />             <!-- Review cipher mode usage with cryptography experts --> 
-    <Rule Id="CA5359" Action="Warning" />          <!-- Do Not Disable Certificate Validation --> 
-    <Rule Id="CA5360" Action="Warning" />          <!-- Do Not Call Dangerous Methods In Deserialization --> 
-    <Rule Id="CA5361" Action="Warning" />          <!-- Do Not Disable SChannel Use of Strong Crypto --> 
-    <Rule Id="CA5362" Action="None" />             <!-- Potential reference cycle in deserialized object graph --> 
-    <Rule Id="CA5363" Action="Warning" />          <!-- Do Not Disable Request Validation --> 
-    <Rule Id="CA5364" Action="Warning" />          <!-- Do Not Use Deprecated Security Protocols --> 
-    <Rule Id="CA5365" Action="Warning" />          <!-- Do Not Disable HTTP Header Checking --> 
-    <Rule Id="CA5366" Action="None" />             <!-- Use XmlReader For DataSet Read Xml --> 
-    <Rule Id="CA5367" Action="None" />             <!-- Do Not Serialize Types With Pointer Fields --> 
-    <Rule Id="CA5368" Action="Warning" />          <!-- Set ViewStateUserKey For Classes Derived From Page --> 
-    <Rule Id="CA5369" Action="None" />             <!-- Use XmlReader For Deserialize --> 
-    <Rule Id="CA5370" Action="Warning" />          <!-- Use XmlReader For Validating Reader --> 
-    <Rule Id="CA5371" Action="None" />             <!-- Use XmlReader For Schema Read --> 
-    <Rule Id="CA5372" Action="None" />             <!-- Use XmlReader For XPathDocument --> 
-    <Rule Id="CA5373" Action="Warning" />          <!-- Do not use obsolete key derivation function --> 
-    <Rule Id="CA5374" Action="Warning" />          <!-- Do Not Use XslTransform --> 
-    <Rule Id="CA5375" Action="None" />             <!-- Do Not Use Account Shared Access Signature --> 
-    <Rule Id="CA5376" Action="Warning" />          <!-- Use SharedAccessProtocol HttpsOnly --> 
-    <Rule Id="CA5377" Action="Warning" />          <!-- Use Container Level Access Policy --> 
-    <Rule Id="CA5378" Action="Warning" />          <!-- Do not disable ServicePointManagerSecurityProtocols --> 
-    <Rule Id="CA5379" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function Algorithm --> 
-    <Rule Id="CA5380" Action="Warning" />          <!-- Do Not Add Certificates To Root Store --> 
-    <Rule Id="CA5381" Action="Warning" />          <!-- Ensure Certificates Are Not Added To Root Store --> 
-    <Rule Id="CA5382" Action="None" />             <!-- Use Secure Cookies In ASP.Net Core --> 
-    <Rule Id="CA5383" Action="None" />             <!-- Ensure Use Secure Cookies In ASP.Net Core --> 
-    <Rule Id="CA5384" Action="Warning" />          <!-- Do Not Use Digital Signature Algorithm (DSA) --> 
-    <Rule Id="CA5385" Action="Warning" />          <!-- Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size --> 
-    <Rule Id="CA5386" Action="None" />             <!-- Avoid hardcoding SecurityProtocolType value --> 
-    <Rule Id="CA5387" Action="None" />             <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count --> 
-    <Rule Id="CA5388" Action="None" />             <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function --> 
-    <Rule Id="CA5389" Action="None" />             <!-- Do Not Add Archive Item's Path To The Target File System Path --> 
-    <Rule Id="CA5390" Action="None" />             <!-- Do not hard-code encryption key --> 
-    <Rule Id="CA5391" Action="None" />             <!-- Use antiforgery tokens in ASP.NET Core MVC controllers --> 
-    <Rule Id="CA5392" Action="None" />             <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes --> 
-    <Rule Id="CA5393" Action="None" />             <!-- Do not use unsafe DllImportSearchPath value --> 
-    <Rule Id="CA5394" Action="None" />             <!-- Do not use insecure randomness --> 
-    <Rule Id="CA5395" Action="None" />             <!-- Miss HttpVerb attribute for action methods --> 
-    <Rule Id="CA5396" Action="None" />             <!-- Set HttpOnly to true for HttpCookie --> 
-    <Rule Id="CA5397" Action="None" />             <!-- Do not use deprecated SslProtocols values --> 
-    <Rule Id="CA5398" Action="None" />             <!-- Avoid hardcoded SslProtocols values --> 
-    <Rule Id="CA5399" Action="None" />             <!-- HttpClients should enable certificate revocation list checks --> 
-    <Rule Id="CA5400" Action="None" />             <!-- Ensure HttpClient certificate revocation list check is not disabled --> 
-    <Rule Id="CA5401" Action="None" />             <!-- Do not use CreateEncryptor with non-default IV --> 
-    <Rule Id="CA5402" Action="None" />             <!-- Use CreateEncryptor with the default IV  --> 
-    <Rule Id="CA5403" Action="None" />             <!-- Do not hard-code certificate --> 
-    <Rule Id="IL3000" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
-    <Rule Id="IL3001" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
-  </Rules> 
-  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers"> 
-    <Rule Id="AD0001" Action="Info" /> <!-- Analyzer threw an exception --> 
-    <Rule Id="SA0001" Action="Info" /> <!-- XML comments --> 
-    <Rule Id="SA1000" Action="None" />
-    <Rule Id="SA1001" Action="None" />
-    <Rule Id="SA1002" Action="Info" /> <!-- Semicolons should not be preceded by a space --> 
-    <Rule Id="SA1003" Action="None" />
-    <Rule Id="SA1004" Action="Info" /> <!-- Documentation line should begin with a space --> 
-    <Rule Id="SA1005" Action="Info" /> <!-- Single line comment should begin with a space -->
-    <Rule Id="SA1006" Action="Info" /> <!-- Region should not be preceded by a space -->
-    <Rule Id="SA1008" Action="Info" /> <!-- Opening parenthesis should not be preceded by a space --> 
-    <Rule Id="SA1009" Action="Info" /> <!-- Closing parenthesis should not be followed by a space --> 
-    <Rule Id="SA1010" Action="Info" /> <!-- Opening square brackets should not be preceded by a space --> 
-    <Rule Id="SA1011" Action="Info" /> <!-- Closing square bracket should be followed by a space --> 
-    <Rule Id="SA1012" Action="Info" /> <!-- Opening brace should be followed by a space --> 
-    <Rule Id="SA1013" Action="Info" /> <!-- Closing brace should be preceded by a space --> 
-    <Rule Id="SA1015" Action="Info" /> <!-- Closing generic bracket should not be followed by a space --> 
-    <Rule Id="SA1019" Action="None" />
-    <Rule Id="SA1021" Action="Info" /> <!-- Negative sign should be preceded by a space --> 
-    <Rule Id="SA1023" Action="Info" /> <!-- Dereference symbol '*' should not be preceded by a space." --> 
-    <Rule Id="SA1024" Action="Info" /> <!-- Colon should be followed by a space --> 
-    <Rule Id="SA1025" Action="Info" /> <!-- Code should not contain multiple whitespace characters in a row --> 
-    <Rule Id="SA1026" Action="None" />
-    <Rule Id="SA1027" Action="None" />
-    <Rule Id="SA1028" Action="None" />
-    <Rule Id="SA1100" Action="Info" /> <!-- Do not prefix calls with base unless local implementation exists --> 
-    <Rule Id="SA1101" Action="None" />
-    <Rule Id="SA1102" Action="Info" />
-    <Rule Id="SA1106" Action="Info" /> <!-- Code should not contain empty statements --> 
-    <Rule Id="SA1107" Action="Info" /> <!-- Code should not contain multiple statements on one line --> 
-    <Rule Id="SA1108" Action="None" />
-    <Rule Id="SA1110" Action="Info" /> <!-- Opening parenthesis or bracket should be on declaration line --> 
-    <Rule Id="SA1111" Action="Info" /> <!-- Closing parenthesis should be on line of last parameter --> 
-    <Rule Id="SA1112" Action="None" />
-    <Rule Id="SA1113" Action="None" />
-    <Rule Id="SA1114" Action="Info" /> <!-- Parameter list should follow declaration --> 
-    <Rule Id="SA1115" Action="None" />
-    <Rule Id="SA1116" Action="Info" /> <!-- Split parameters should start on line after declaration --> 
-    <Rule Id="SA1117" Action="Info" /> <!-- Parameters should be on same line or separate lines --> 
-    <Rule Id="SA1118" Action="None" />
-    <Rule Id="SA1119" Action="None" />
-    <Rule Id="SA1120" Action="Info" /> <!-- Comments should contain text --> 
-    <Rule Id="SA1121" Action="None" />
-    <Rule Id="SA1122" Action="Info" /> <!-- Use string.Empty for empty strings --> 
-    <Rule Id="SA1123" Action="Info" /> <!-- Region should not be located within a code element --> 
-    <Rule Id="SA1124" Action="None" />
-    <Rule Id="SA1125" Action="Info" /> <!-- Use shorthand for nullable types --> 
-    <Rule Id="SA1127" Action="Info" /> <!-- Generic type constraints should be on their own line --> 
-    <Rule Id="SA1128" Action="Info" /> <!-- Put constructor initializers on their own line --> 
-    <Rule Id="SA1129" Action="None" />
-    <Rule Id="SA1130" Action="Info" /> <!-- Use lambda syntax --> 
-    <Rule Id="SA1131" Action="Info" /> <!-- Constant values should appear on the right-hand side of comparisons --> 
-    <Rule Id="SA1132" Action="Info" /> <!-- Do not combine fields --> 
-    <Rule Id="SA1133" Action="Info" /> <!-- Do not combine attributes --> 
-    <Rule Id="SA1134" Action="Info" /> <!-- Each attribute should be placed on its own line of code --> 
-    <Rule Id="SA1135" Action="Info" /> <!-- Using directive should be qualified --> 
-    <Rule Id="SA1136" Action="Info" /> <!-- Enum values should be on separate lines --> 
-    <Rule Id="SA1137" Action="Info" /> <!-- Elements should have the same indentation --> 
-    <Rule Id="SA1139" Action="None" />
-    <Rule Id="SA1200" Action="None" />
-    <Rule Id="SA1201" Action="Info" /> <!-- Elements should appear in the correct order --> 
-    <Rule Id="SA1202" Action="Info" /> <!-- Elements should be ordered by access --> 
-    <Rule Id="SA1203" Action="Info" /> <!-- Constants should appear before fields --> 
-    <Rule Id="SA1204" Action="Info" /> <!-- Static elements should appear before instance elements --> 
-    <Rule Id="SA1205" Action="None" />
-    <Rule Id="SA1206" Action="None" />
-    <Rule Id="SA1208" Action="Info" /> <!-- Using directive ordering --> 
-    <Rule Id="SA1209" Action="Info" /> <!-- Using alias directives should be placed after all using namespace directives --> 
-    <Rule Id="SA1210" Action="Info" /> <!-- Using directives should be ordered alphabetically by the namespaces --> 
-    <Rule Id="SA1211" Action="Info" /> <!-- Using alias directive ordering --> 
-    <Rule Id="SA1212" Action="None" />
-    <Rule Id="SA1214" Action="Info" /> <!-- Readonly fields should appear before non-readonly fields --> 
-    <Rule Id="SA1216" Action="Info" /> <!-- Using static directives should be placed at the correct location --> 
-    <Rule Id="SA1300" Action="Info" /> <!-- Element should begin with an uppercase letter --> 
-    <Rule Id="SA1303" Action="Info" /> <!-- Const field names should begin with upper-case letter --> 
-    <Rule Id="SA1304" Action="Info" /> <!-- Non-private readonly fields should begin with upper-case letter --> 
-    <Rule Id="SA1306" Action="Info" /> <!-- Field should begin with lower-case letter --> 
-    <Rule Id="SA1307" Action="None" />
-    <Rule Id="SA1308" Action="Info" /> <!-- Field should not begin with the prefix 's_' --> 
-    <Rule Id="SA1309" Action="None" />
-    <Rule Id="SA1310" Action="None" />
-    <Rule Id="SA1311" Action="Info" /> <!-- Static readonly fields should begin with upper-case letter --> 
-    <Rule Id="SA1312" Action="Info" /> <!-- Variable should begin with lower-case letter --> 
-    <Rule Id="SA1313" Action="Info" /> <!-- Parameter should begin with lower-case letter --> 
-    <Rule Id="SA1314" Action="None" />
-    <Rule Id="SA1316" Action="Info" /> <!-- Tuple element names should use correct casing --> 
-    <Rule Id="SA1400" Action="None" />
-    <Rule Id="SA1401" Action="Info" /> <!-- Fields should be private --> 
-    <Rule Id="SA1402" Action="Info" /> <!-- File may only contain a single type --> 
-    <Rule Id="SA1403" Action="Info" /> <!-- File may only contain a single namespace --> 
-    <Rule Id="SA1404" Action="Info" /> <!-- Code analysis suppression should have justification --> 
-    <Rule Id="SA1405" Action="Info" /> <!-- Debug.Assert should provide message text --> 
-    <Rule Id="SA1407" Action="Info" /> <!-- Arithmetic expressions should declare precedence --> 
-    <Rule Id="SA1408" Action="Info" /> <!-- Conditional expressions should declare precedence --> 
-    <Rule Id="SA1410" Action="None" />
-    <Rule Id="SA1411" Action="None" />
-    <Rule Id="SA1413" Action="Info" /> <!-- Use trailing comma in multi-line initializers --> 
-    <Rule Id="SA1414" Action="Info" /> <!-- Tuple types in signatures should have element names --> 
-    <Rule Id="SA1500" Action="Info" /> <!-- Braces for multi-line statements should not share line --> 
-    <Rule Id="SA1501" Action="Info" /> <!-- Statement should not be on a single line --> 
-    <Rule Id="SA1502" Action="Info" /> <!-- Element should not be on a single line --> 
-    <Rule Id="SA1503" Action="Info" /> <!-- Braces should not be omitted --> 
-    <Rule Id="SA1504" Action="Info" /> <!-- All accessors should be single-line or multi-line --> 
-    <Rule Id="SA1505" Action="Info" /> <!-- An opening brace should not be followed by a blank line --> 
-    <Rule Id="SA1506" Action="Info" /> <!-- Element documentation headers should not be followed by blank line --> 
-    <Rule Id="SA1507" Action="Info" /> <!-- Code should not contain multiple blank lines in a row --> 
-    <Rule Id="SA1508" Action="Info" /> <!-- A closing brace should not be preceded by a blank line --> 
-    <Rule Id="SA1509" Action="Info" /> <!-- Opening braces should not be preceded by blank line --> 
-    <Rule Id="SA1510" Action="Info" /> <!-- 'else' statement should not be preceded by a blank line --> 
-    <Rule Id="SA1512" Action="Info" /> <!-- Single-line comments should not be followed by blank line --> 
-    <Rule Id="SA1513" Action="Info" /> <!-- Closing brace should be followed by blank line --> 
-    <Rule Id="SA1514" Action="Info" /> <!-- Element documentation header should be preceded by blank line --> 
-    <Rule Id="SA1515" Action="Info" /> <!-- Single-line comment should be preceded by blank line --> 
-    <Rule Id="SA1516" Action="Info" /> <!-- Elements should be separated by blank line --> 
-    <Rule Id="SA1517" Action="None" />
-    <Rule Id="SA1518" Action="Info" /> <!-- Code should not contain blank lines at the end of the file -->
-    <Rule Id="SA1519" Action="Info" /> <!-- Braces should not be omitted from multi-line child statement --> 
-    <Rule Id="SA1520" Action="Info" /> <!-- Use braces consistently --> 
-    <Rule Id="SA1600" Action="None" />
-    <Rule Id="SA1601" Action="Info" /> <!-- Partial elements should be documented --> 
-    <Rule Id="SA1602" Action="Info" /> <!-- Enumeration items should be documented --> 
-    <Rule Id="SA1604" Action="Info" /> <!-- Element documentation should have summary --> 
-    <Rule Id="SA1605" Action="Info" /> <!-- Partial element documentation should have summary --> 
-    <Rule Id="SA1606" Action="Info" /> <!-- Element documentation should have summary text --> 
-    <Rule Id="SA1608" Action="Info" /> <!-- Element documentation should not have default summary --> 
-    <Rule Id="SA1610" Action="Info" /> <!-- Property documentation should have value text --> 
-    <Rule Id="SA1611" Action="Info" /> <!-- The documentation for parameter 'message' is missing --> 
-    <Rule Id="SA1612" Action="Info" /> <!-- The parameter documentation is at incorrect position --> 
-    <Rule Id="SA1614" Action="Info" /> <!-- Element parameter documentation should have text --> 
-    <Rule Id="SA1615" Action="None" />
-    <Rule Id="SA1616" Action="Info" /> <!-- Element return value documentation should have text --> 
-    <Rule Id="SA1617" Action="None" />
-    <Rule Id="SA1618" Action="Info" /> <!-- The documentation for type parameter is missing --> 
-    <Rule Id="SA1619" Action="Info" /> <!-- The documentation for type parameter is missing --> 
-    <Rule Id="SA1622" Action="Info" /> <!-- Generic type parameter documentation should have text --> 
-    <Rule Id="SA1623" Action="Info" /> <!-- Property documentation text --> 
-    <Rule Id="SA1624" Action="Info" /> <!-- Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets' --> 
-    <Rule Id="SA1625" Action="None" />
-    <Rule Id="SA1626" Action="Info" /> <!-- Single-line comments should not use documentation style slashes --> 
-    <Rule Id="SA1627" Action="Info" /> <!-- The documentation text within the \'exception\' tag should not be empty --> 
-    <Rule Id="SA1629" Action="Info" /> <!-- Documentation text should end with a period --> 
-    <Rule Id="SA1633" Action="Info" /> <!-- File should have header --> 
-    <Rule Id="SA1642" Action="Info" /> <!-- Constructor summary documentation should begin with standard text --> 
-    <Rule Id="SA1643" Action="Info" /> <!-- Destructor summary documentation should begin with standard text --> 
-    <Rule Id="SA1649" Action="Info" /> <!-- File name should match first type name --> 
-    <Rule Id="SA1652" Action="None" />
-  </Rules> 
-  <Rules AnalyzerId="xunit.analyzers" RuleNamespace="xunit.analyzers"> 
-    <Rule Id="xUnit2013" Action="None" /> <!-- Do not use equality check to check for collection size. --> 
-  </Rules> 
-</RuleSet> 
diff --git a/eng/Common.Test.globalconfig b/eng/Common.Test.globalconfig
new file mode 100644
index 00000000000..67bb2e5a4f8
--- /dev/null
+++ b/eng/Common.Test.globalconfig
@@ -0,0 +1,5 @@
+# Top level entry required to mark this as a global AnalyzerConfig file
+is_global = true
+
+# Element parameter documentation should have text
+dotnet_diagnostic.SA1614.severity = none
\ No newline at end of file
diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
new file mode 100644
index 00000000000..d0b65becdd1
--- /dev/null
+++ b/eng/Common.globalconfig
@@ -0,0 +1,1110 @@
+# Top level entry required to mark this as a global AnalyzerConfig file
+is_global = true
+
+# Set precedence one lower than default to allow subsets of projects to override values
+# from this file with more specific configurations
+global_level = 99
+
+# Microsoft.Analyzers.ManagedCodeAnalysis
+# Description: Microsoft.Analyzers.ManagedCodeAnalysis
+
+
+# Analyzer threw an exception
+dotnet_diagnostic.AD0001.severity = warning
+
+# Ensure minimum API surface is respected
+dotnet_diagnostic.BCL0001.severity = warning
+
+# AppContext default value expected to be true
+dotnet_diagnostic.BCL0010.severity = warning
+
+# AppContext default value defined in if statement with incorrect pattern
+dotnet_diagnostic.BCL0011.severity = warning
+
+# AppContext default value defined in if statement at root of switch case
+dotnet_diagnostic.BCL0012.severity = warning
+
+# Invalid P/Invoke call
+dotnet_diagnostic.BCL0015.severity = none
+
+# Invalid SR.Format call
+dotnet_diagnostic.BCL0020.severity = warning
+
+# Do not declare static members on generic types
+dotnet_diagnostic.CA1000.severity = none
+
+# Types that own disposable fields should be disposable
+dotnet_diagnostic.CA1001.severity = none
+
+# Do not expose generic lists
+dotnet_diagnostic.CA1002.severity = none
+
+# Use generic event handler instances
+dotnet_diagnostic.CA1003.severity = none
+
+# Avoid excessive parameters on generic types
+dotnet_diagnostic.CA1005.severity = none
+
+# Enums should have zero value
+dotnet_diagnostic.CA1008.severity = none
+
+# Generic interface should also be implemented
+dotnet_diagnostic.CA1010.severity = none
+
+# Abstract types should not have constructors
+dotnet_diagnostic.CA1012.severity = none
+
+# Mark assemblies with CLSCompliant
+dotnet_diagnostic.CA1014.severity = none
+
+# Mark assemblies with assembly version
+dotnet_diagnostic.CA1016.severity = none
+
+# Mark assemblies with ComVisible
+dotnet_diagnostic.CA1017.severity = none
+
+# Mark attributes with AttributeUsageAttribute
+dotnet_diagnostic.CA1018.severity = warning
+
+# Define accessors for attribute arguments
+dotnet_diagnostic.CA1019.severity = none
+
+# Use properties where appropriate
+dotnet_diagnostic.CA1024.severity = none
+
+# Mark enums with FlagsAttribute
+dotnet_diagnostic.CA1027.severity = none
+
+# Enum Storage should be Int32
+dotnet_diagnostic.CA1028.severity = none
+
+# Use events where appropriate
+dotnet_diagnostic.CA1030.severity = none
+
+# Do not catch general exception types
+dotnet_diagnostic.CA1031.severity = none
+
+dotnet_diagnostic.CA1032.severity = none
+
+# Interface methods should be callable by child types
+dotnet_diagnostic.CA1033.severity = none
+
+dotnet_diagnostic.CA1034.severity = none
+
+# Override methods on comparable types
+dotnet_diagnostic.CA1036.severity = none
+
+# Avoid empty interfaces
+dotnet_diagnostic.CA1040.severity = none
+
+# Provide ObsoleteAttribute message
+dotnet_diagnostic.CA1041.severity = none
+
+# Use Integral Or String Argument For Indexers
+dotnet_diagnostic.CA1043.severity = none
+
+# Properties should not be write only
+dotnet_diagnostic.CA1044.severity = none
+
+# Do not overload equality operator on reference types
+dotnet_diagnostic.CA1046.severity = none
+
+# Do not declare protected member in sealed type
+dotnet_diagnostic.CA1047.severity = warning
+
+# Declare types in namespaces
+dotnet_diagnostic.CA1050.severity = warning
+
+# Do not declare visible instance fields
+dotnet_diagnostic.CA1051.severity = none
+
+# Static holder types should be Static or NotInheritable
+dotnet_diagnostic.CA1052.severity = none
+
+# Uri parameters should not be strings
+dotnet_diagnostic.CA1054.severity = none
+
+# Uri return values should not be strings
+dotnet_diagnostic.CA1055.severity = none
+
+# Uri properties should not be strings
+dotnet_diagnostic.CA1056.severity = none
+
+# Types should not extend certain base types
+dotnet_diagnostic.CA1058.severity = none
+
+# Do not hide base class methods
+dotnet_diagnostic.CA1061.severity = none
+
+# Validate arguments of public methods
+dotnet_diagnostic.CA1062.severity = none
+
+# Implement IDisposable Correctly
+dotnet_diagnostic.CA1063.severity = none
+
+# Exceptions should be public
+dotnet_diagnostic.CA1064.severity = none
+
+# Do not raise exceptions in unexpected locations
+dotnet_diagnostic.CA1065.severity = none
+
+# Implement IEquatable when overriding Object.Equals
+dotnet_diagnostic.CA1066.severity = none
+
+# Override Object.Equals(object) when implementing IEquatable<T>
+dotnet_diagnostic.CA1067.severity = none
+
+# CancellationToken parameters must come last
+dotnet_diagnostic.CA1068.severity = none
+
+# Enums values should not be duplicated
+dotnet_diagnostic.CA1069.severity = none
+
+# Do not declare event fields as virtual
+dotnet_diagnostic.CA1070.severity = warning
+
+# Avoid using cref tags with a prefix
+dotnet_diagnostic.CA1200.severity = warning
+
+# Do not pass literals as localized parameters
+dotnet_diagnostic.CA1303.severity = none
+
+# Specify CultureInfo
+dotnet_diagnostic.CA1304.severity = none
+
+# Specify IFormatProvider
+dotnet_diagnostic.CA1305.severity = none
+
+# Specify StringComparison
+dotnet_diagnostic.CA1307.severity = none
+
+# Normalize strings to uppercase
+dotnet_diagnostic.CA1308.severity = none
+
+# Use ordinal stringcomparison
+dotnet_diagnostic.CA1309.severity = none
+
+# P/Invokes should not be visible
+dotnet_diagnostic.CA1401.severity = warning
+
+# Do not use 'OutAttribute' on string parameters for P/Invokes
+dotnet_diagnostic.CA1417.severity = warning
+
+# Avoid excessive complexity
+dotnet_diagnostic.CA1502.severity = none
+
+# Avoid unmaintainable code
+dotnet_diagnostic.CA1505.severity = none
+
+# Avoid excessive class coupling
+dotnet_diagnostic.CA1506.severity = none
+
+# Use nameof to express symbol names
+dotnet_diagnostic.CA1507.severity = warning
+
+# Avoid dead conditional code
+dotnet_diagnostic.CA1508.severity = none
+
+# Invalid entry in code metrics rule specification file
+dotnet_diagnostic.CA1509.severity = none
+
+# Do not name enum values 'Reserved'
+dotnet_diagnostic.CA1700.severity = none
+
+dotnet_diagnostic.CA1707.severity = none
+
+# Identifiers should have correct suffix
+dotnet_diagnostic.CA1710.severity = none
+
+# Identifiers should not have incorrect suffix
+dotnet_diagnostic.CA1711.severity = none
+
+# Do not prefix enum values with type name
+dotnet_diagnostic.CA1712.severity = none
+
+dotnet_diagnostic.CA1714.severity = none
+
+# Identifiers should have correct prefix
+dotnet_diagnostic.CA1715.severity = none
+
+# Identifiers should not match keywords
+dotnet_diagnostic.CA1716.severity = none
+
+dotnet_diagnostic.CA1717.severity = none
+
+# Identifier contains type name
+dotnet_diagnostic.CA1720.severity = none
+
+# Property names should not match get methods
+dotnet_diagnostic.CA1721.severity = none
+
+# Type names should not match namespaces
+dotnet_diagnostic.CA1724.severity = none
+
+# Review unused parameters
+dotnet_diagnostic.CA1801.severity = none
+
+# Use literals where appropriate
+dotnet_diagnostic.CA1802.severity = warning
+
+# Do not initialize unnecessarily
+dotnet_diagnostic.CA1805.severity = none
+
+dotnet_diagnostic.CA1806.severity = none
+
+# Initialize reference type static fields inline
+dotnet_diagnostic.CA1810.severity = warning
+
+# Avoid uninstantiated internal classes
+dotnet_diagnostic.CA1812.severity = none
+
+dotnet_diagnostic.CA1814.severity = none
+
+dotnet_diagnostic.CA1815.severity = none
+
+# Dispose methods should call SuppressFinalize
+dotnet_diagnostic.CA1816.severity = none
+
+dotnet_diagnostic.CA1819.severity = none
+
+# Test for empty strings using string length
+dotnet_diagnostic.CA1820.severity = none
+
+# Remove empty Finalizers
+dotnet_diagnostic.CA1821.severity = warning
+
+# Mark members as static
+dotnet_diagnostic.CA1822.severity = none
+
+# Avoid unused private fields
+dotnet_diagnostic.CA1823.severity = warning
+
+# Mark assemblies with NeutralResourcesLanguageAttribute
+dotnet_diagnostic.CA1824.severity = warning
+
+# Avoid zero-length array allocations.
+dotnet_diagnostic.CA1825.severity = warning
+
+# Do not use Count() or LongCount() when Any() can be used
+dotnet_diagnostic.CA1827.severity = warning
+
+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
+dotnet_diagnostic.CA1828.severity = warning
+
+# Use Length/Count property instead of Count() when available
+dotnet_diagnostic.CA1829.severity = warning
+
+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.
+dotnet_diagnostic.CA1830.severity = warning
+
+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate
+dotnet_diagnostic.CA1831.severity = warning
+
+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate
+dotnet_diagnostic.CA1832.severity = warning
+
+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate
+dotnet_diagnostic.CA1833.severity = warning
+
+# Consider using 'StringBuilder.Append(char)' when applicable.
+dotnet_diagnostic.CA1834.severity = warning
+
+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
+dotnet_diagnostic.CA1835.severity = warning
+
+# Prefer IsEmpty over Count
+dotnet_diagnostic.CA1836.severity = warning
+
+# Use 'Environment.ProcessId'
+dotnet_diagnostic.CA1837.severity = suggestion
+
+# Avoid 'StringBuilder' parameters for P/Invokes
+dotnet_diagnostic.CA1838.severity = warning
+
+# Dispose objects before losing scope
+dotnet_diagnostic.CA2000.severity = none
+
+# Do not lock on objects with weak identity
+dotnet_diagnostic.CA2002.severity = none
+
+# Consider calling ConfigureAwait on the awaited task
+dotnet_diagnostic.CA2007.severity = suggestion
+
+# Do not create tasks without passing a TaskScheduler
+dotnet_diagnostic.CA2008.severity = suggestion
+
+# Do not call ToImmutableCollection on an ImmutableCollection value
+dotnet_diagnostic.CA2009.severity = warning
+
+# Avoid infinite recursion
+dotnet_diagnostic.CA2011.severity = warning
+
+# Use ValueTasks correctly
+dotnet_diagnostic.CA2012.severity = warning
+
+# Do not use ReferenceEquals with value types
+dotnet_diagnostic.CA2013.severity = warning
+
+# Do not use stackalloc in loops.
+dotnet_diagnostic.CA2014.severity = warning
+
+# Do not define finalizers for types derived from MemoryManager<T>
+dotnet_diagnostic.CA2015.severity = warning
+
+# Forward the 'CancellationToken' parameter to methods that take one
+dotnet_diagnostic.CA2016.severity = warning
+
+# Review SQL queries for security vulnerabilities
+dotnet_diagnostic.CA2100.severity = none
+
+# Specify marshaling for P/Invoke string arguments
+dotnet_diagnostic.CA2101.severity = none
+
+# Review visible event handlers
+dotnet_diagnostic.CA2109.severity = none
+
+# Seal methods that satisfy private interfaces
+dotnet_diagnostic.CA2119.severity = none
+
+# Do Not Catch Corrupted State Exceptions
+dotnet_diagnostic.CA2153.severity = none
+
+# Do not raise reserved exception types
+dotnet_diagnostic.CA2201.severity = none
+
+# Instantiate argument exceptions correctly
+dotnet_diagnostic.CA2208.severity = suggestion
+
+# Non-constant fields should not be visible
+dotnet_diagnostic.CA2211.severity = none
+
+# Disposable fields should be disposed
+dotnet_diagnostic.CA2213.severity = none
+
+# Dispose methods should call base class dispose
+dotnet_diagnostic.CA2215.severity = none
+
+# Disposable types should declare finalizer
+dotnet_diagnostic.CA2216.severity = none
+
+dotnet_diagnostic.CA2219.severity = none
+
+# Override Equals on overloading operator equals
+dotnet_diagnostic.CA2224.severity = none
+
+# Operator overloads have named alternates
+dotnet_diagnostic.CA2225.severity = none
+
+# Operators should have symmetrical overloads
+dotnet_diagnostic.CA2226.severity = none
+
+# Collection properties should be read only
+dotnet_diagnostic.CA2227.severity = none
+
+# Overload operator equals on overriding value type Equals
+dotnet_diagnostic.CA2231.severity = none
+
+# Pass system uri objects instead of strings
+dotnet_diagnostic.CA2234.severity = none
+
+# Mark all non-serializable fields
+dotnet_diagnostic.CA2235.severity = none
+
+# Provide correct arguments to formatting methods
+dotnet_diagnostic.CA2241.severity = warning
+
+# Test for NaN correctly
+dotnet_diagnostic.CA2242.severity = warning
+
+# Attribute string literals should parse correctly
+dotnet_diagnostic.CA2243.severity = none
+
+# Do not duplicate indexed element initializations
+dotnet_diagnostic.CA2244.severity = none
+
+# Do not assign a property to itself.
+dotnet_diagnostic.CA2245.severity = warning
+
+# Assigning symbol and its member in the same statement.
+dotnet_diagnostic.CA2246.severity = none
+
+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.
+dotnet_diagnostic.CA2247.severity = warning
+
+# Provide correct 'enum' argument to 'Enum.HasFlag'
+dotnet_diagnostic.CA2248.severity = warning
+
+# Consider using 'string.Contains' instead of 'string.IndexOf'
+dotnet_diagnostic.CA2249.severity = suggestion
+
+# Do not use insecure deserializer BinaryFormatter
+dotnet_diagnostic.CA2300.severity = none
+
+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
+dotnet_diagnostic.CA2301.severity = none
+
+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
+dotnet_diagnostic.CA2302.severity = none
+
+# Do not use insecure deserializer LosFormatter
+dotnet_diagnostic.CA2305.severity = none
+
+# Do not use insecure deserializer NetDataContractSerializer
+dotnet_diagnostic.CA2310.severity = none
+
+# Do not deserialize without first setting NetDataContractSerializer.Binder
+dotnet_diagnostic.CA2311.severity = none
+
+# Ensure NetDataContractSerializer.Binder is set before deserializing
+dotnet_diagnostic.CA2312.severity = none
+
+# Do not use insecure deserializer ObjectStateFormatter
+dotnet_diagnostic.CA2315.severity = none
+
+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
+dotnet_diagnostic.CA2321.severity = none
+
+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
+dotnet_diagnostic.CA2322.severity = none
+
+# Do not use TypeNameHandling values other than None
+dotnet_diagnostic.CA2326.severity = none
+
+# Do not use DataTable.ReadXml() with untrusted data
+dotnet_diagnostic.CA2350.severity = none
+
+# Do not use DataSet.ReadXml() with untrusted data
+dotnet_diagnostic.CA2351.severity = none
+
+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
+dotnet_diagnostic.CA2352.severity = none
+
+# Unsafe DataSet or DataTable in serializable type
+dotnet_diagnostic.CA2353.severity = none
+
+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks
+dotnet_diagnostic.CA2354.severity = none
+
+# Unsafe DataSet or DataTable type found in deserializable object graph
+dotnet_diagnostic.CA2355.severity = none
+
+# Unsafe DataSet or DataTable type in web deserializable object graph
+dotnet_diagnostic.CA2356.severity = none
+
+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data
+dotnet_diagnostic.CA2361.severity = none
+
+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks
+dotnet_diagnostic.CA2362.severity = none
+
+# Review code for SQL injection vulnerabilities
+dotnet_diagnostic.CA3001.severity = none
+
+# Review code for XSS vulnerabilities
+dotnet_diagnostic.CA3002.severity = none
+
+# Review code for file path injection vulnerabilities
+dotnet_diagnostic.CA3003.severity = none
+
+# Review code for information disclosure vulnerabilities
+dotnet_diagnostic.CA3004.severity = none
+
+# Review code for LDAP injection vulnerabilities
+dotnet_diagnostic.CA3005.severity = none
+
+# Review code for process command injection vulnerabilities
+dotnet_diagnostic.CA3006.severity = none
+
+# Review code for open redirect vulnerabilities
+dotnet_diagnostic.CA3007.severity = none
+
+# Review code for XPath injection vulnerabilities
+dotnet_diagnostic.CA3008.severity = none
+
+# Review code for XML injection vulnerabilities
+dotnet_diagnostic.CA3009.severity = none
+
+# Review code for XAML injection vulnerabilities
+dotnet_diagnostic.CA3010.severity = none
+
+# Review code for DLL injection vulnerabilities
+dotnet_diagnostic.CA3011.severity = none
+
+# Review code for regex injection vulnerabilities
+dotnet_diagnostic.CA3012.severity = none
+
+# Do Not Add Schema By URL
+dotnet_diagnostic.CA3061.severity = warning
+
+# Insecure DTD processing in XML
+dotnet_diagnostic.CA3075.severity = suggestion
+
+# Insecure XSLT script processing.
+dotnet_diagnostic.CA3076.severity = suggestion
+
+# Insecure Processing in API Design, XmlDocument and XmlTextReader
+dotnet_diagnostic.CA3077.severity = suggestion
+
+# Mark Verb Handlers With Validate Antiforgery Token
+dotnet_diagnostic.CA3147.severity = warning
+
+# Do Not Use Weak Cryptographic Algorithms
+dotnet_diagnostic.CA5350.severity = warning
+
+# Do Not Use Broken Cryptographic Algorithms
+dotnet_diagnostic.CA5351.severity = warning
+
+# Review cipher mode usage with cryptography experts
+dotnet_diagnostic.CA5358.severity = none
+
+# Do Not Disable Certificate Validation
+dotnet_diagnostic.CA5359.severity = warning
+
+# Do Not Call Dangerous Methods In Deserialization
+dotnet_diagnostic.CA5360.severity = warning
+
+# Do Not Disable SChannel Use of Strong Crypto
+dotnet_diagnostic.CA5361.severity = warning
+
+# Potential reference cycle in deserialized object graph
+dotnet_diagnostic.CA5362.severity = none
+
+# Do Not Disable Request Validation
+dotnet_diagnostic.CA5363.severity = warning
+
+# Do Not Use Deprecated Security Protocols
+dotnet_diagnostic.CA5364.severity = warning
+
+# Do Not Disable HTTP Header Checking
+dotnet_diagnostic.CA5365.severity = warning
+
+# Use XmlReader For DataSet Read Xml
+dotnet_diagnostic.CA5366.severity = none
+
+# Do Not Serialize Types With Pointer Fields
+dotnet_diagnostic.CA5367.severity = none
+
+# Set ViewStateUserKey For Classes Derived From Page
+dotnet_diagnostic.CA5368.severity = warning
+
+# Use XmlReader For Deserialize
+dotnet_diagnostic.CA5369.severity = none
+
+# Use XmlReader For Validating Reader
+dotnet_diagnostic.CA5370.severity = warning
+
+# Use XmlReader For Schema Read
+dotnet_diagnostic.CA5371.severity = none
+
+# Use XmlReader For XPathDocument
+dotnet_diagnostic.CA5372.severity = none
+
+# Do not use obsolete key derivation function
+dotnet_diagnostic.CA5373.severity = warning
+
+# Do Not Use XslTransform
+dotnet_diagnostic.CA5374.severity = warning
+
+# Do Not Use Account Shared Access Signature
+dotnet_diagnostic.CA5375.severity = none
+
+# Use SharedAccessProtocol HttpsOnly
+dotnet_diagnostic.CA5376.severity = warning
+
+# Use Container Level Access Policy
+dotnet_diagnostic.CA5377.severity = warning
+
+# Do not disable ServicePointManagerSecurityProtocols
+dotnet_diagnostic.CA5378.severity = warning
+
+# Do Not Use Weak Key Derivation Function Algorithm
+dotnet_diagnostic.CA5379.severity = warning
+
+# Do Not Add Certificates To Root Store
+dotnet_diagnostic.CA5380.severity = warning
+
+# Ensure Certificates Are Not Added To Root Store
+dotnet_diagnostic.CA5381.severity = warning
+
+# Use Secure Cookies In ASP.Net Core
+dotnet_diagnostic.CA5382.severity = none
+
+# Ensure Use Secure Cookies In ASP.Net Core
+dotnet_diagnostic.CA5383.severity = none
+
+# Do Not Use Digital Signature Algorithm (DSA)
+dotnet_diagnostic.CA5384.severity = suggestion
+
+# Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size
+dotnet_diagnostic.CA5385.severity = warning
+
+# Avoid hardcoding SecurityProtocolType value
+dotnet_diagnostic.CA5386.severity = none
+
+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
+dotnet_diagnostic.CA5387.severity = none
+
+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
+dotnet_diagnostic.CA5388.severity = none
+
+# Do Not Add Archive Item's Path To The Target File System Path
+dotnet_diagnostic.CA5389.severity = none
+
+# Do not hard-code encryption key
+dotnet_diagnostic.CA5390.severity = none
+
+# Use antiforgery tokens in ASP.NET Core MVC controllers
+dotnet_diagnostic.CA5391.severity = none
+
+# Use DefaultDllImportSearchPaths attribute for P/Invokes
+dotnet_diagnostic.CA5392.severity = none
+
+# Do not use unsafe DllImportSearchPath value
+dotnet_diagnostic.CA5393.severity = none
+
+# Do not use insecure randomness
+dotnet_diagnostic.CA5394.severity = none
+
+# Miss HttpVerb attribute for action methods
+dotnet_diagnostic.CA5395.severity = none
+
+# Set HttpOnly to true for HttpCookie
+dotnet_diagnostic.CA5396.severity = none
+
+# Do not use deprecated SslProtocols values
+dotnet_diagnostic.CA5397.severity = none
+
+# Avoid hardcoded SslProtocols values
+dotnet_diagnostic.CA5398.severity = none
+
+# HttpClients should enable certificate revocation list checks
+dotnet_diagnostic.CA5399.severity = none
+
+# Ensure HttpClient certificate revocation list check is not disabled
+dotnet_diagnostic.CA5400.severity = none
+
+# Do not use CreateEncryptor with non-default IV
+dotnet_diagnostic.CA5401.severity = none
+
+# Use CreateEncryptor with the default IV
+dotnet_diagnostic.CA5402.severity = none
+
+# Do not hard-code certificate
+dotnet_diagnostic.CA5403.severity = none
+
+# Avoid using accessing Assembly file path when publishing as a single-file
+dotnet_diagnostic.IL3000.severity = none
+
+# Avoid using accessing Assembly file path when publishing as a single-file
+dotnet_diagnostic.IL3001.severity = none
+
+# XML comments
+dotnet_diagnostic.SA0001.severity = suggestion
+
+dotnet_diagnostic.SA1000.severity = none
+
+dotnet_diagnostic.SA1001.severity = none
+
+# Semicolons should not be preceded by a space
+dotnet_diagnostic.SA1002.severity = warning
+
+dotnet_diagnostic.SA1003.severity = none
+
+# Documentation line should begin with a space
+dotnet_diagnostic.SA1004.severity = warning
+
+# Single line comment should begin with a space
+dotnet_diagnostic.SA1005.severity = warning
+
+# Region should not be preceded by a space
+dotnet_diagnostic.SA1006.severity = warning
+
+# Opening parenthesis should not be preceded by a space
+dotnet_diagnostic.SA1008.severity = suggestion
+
+# Closing parenthesis should not be followed by a space
+dotnet_diagnostic.SA1009.severity = suggestion
+
+# Opening square brackets should not be preceded by a space
+dotnet_diagnostic.SA1010.severity = warning
+
+# Closing square bracket should be followed by a space
+dotnet_diagnostic.SA1011.severity = suggestion
+
+# Opening brace should be followed by a space
+dotnet_diagnostic.SA1012.severity = suggestion
+
+# Closing brace should be preceded by a space
+dotnet_diagnostic.SA1013.severity = suggestion
+
+# Opening generic brackets should not be preceded by a space
+dotnet_diagnostic.SA1014.severity = warning
+
+# Closing generic bracket should not be followed by a space
+dotnet_diagnostic.SA1015.severity = warning
+
+dotnet_diagnostic.SA1019.severity = none
+
+# Increment symbol '++' should not be preceded by a space
+dotnet_diagnostic.SA1020.severity = warning
+
+# Negative sign should be preceded by a space
+dotnet_diagnostic.SA1021.severity = suggestion
+
+# Dereference symbol '*' should not be preceded by a space.
+dotnet_diagnostic.SA1023.severity = warning
+
+# Colon should be followed by a space
+dotnet_diagnostic.SA1024.severity = warning
+
+# Code should not contain multiple whitespace characters in a row
+dotnet_diagnostic.SA1025.severity = suggestion
+
+dotnet_diagnostic.SA1026.severity = none
+
+dotnet_diagnostic.SA1027.severity = none
+
+dotnet_diagnostic.SA1028.severity = none
+
+# Do not prefix calls with base unless local implementation exists
+dotnet_diagnostic.SA1100.severity = suggestion
+
+dotnet_diagnostic.SA1101.severity = none
+
+dotnet_diagnostic.SA1102.severity = warning
+
+# Code should not contain empty statements
+dotnet_diagnostic.SA1106.severity = suggestion
+
+# Code should not contain multiple statements on one line
+dotnet_diagnostic.SA1107.severity = suggestion
+
+dotnet_diagnostic.SA1108.severity = none
+
+# Opening parenthesis or bracket should be on declaration line
+dotnet_diagnostic.SA1110.severity = suggestion
+
+# Closing parenthesis should be on line of last parameter
+dotnet_diagnostic.SA1111.severity = suggestion
+
+dotnet_diagnostic.SA1112.severity = none
+
+dotnet_diagnostic.SA1113.severity = none
+
+# Parameter list should follow declaration
+dotnet_diagnostic.SA1114.severity = suggestion
+
+dotnet_diagnostic.SA1115.severity = none
+
+# Split parameters should start on line after declaration
+dotnet_diagnostic.SA1116.severity = suggestion
+
+# Parameters should be on same line or separate lines
+dotnet_diagnostic.SA1117.severity = suggestion
+
+dotnet_diagnostic.SA1118.severity = none
+
+dotnet_diagnostic.SA1119.severity = none
+
+# Comments should contain text
+dotnet_diagnostic.SA1120.severity = suggestion
+
+dotnet_diagnostic.SA1121.severity = none
+
+# Use string.Empty for empty strings
+dotnet_diagnostic.SA1122.severity = none
+
+# Region should not be located within a code element
+dotnet_diagnostic.SA1123.severity = suggestion
+
+dotnet_diagnostic.SA1124.severity = none
+
+# Use shorthand for nullable types
+dotnet_diagnostic.SA1125.severity = warning
+
+# Generic type constraints should be on their own line
+dotnet_diagnostic.SA1127.severity = suggestion
+
+# Put constructor initializers on their own line
+dotnet_diagnostic.SA1128.severity = suggestion
+
+dotnet_diagnostic.SA1129.severity = none
+
+# Use lambda syntax
+dotnet_diagnostic.SA1130.severity = suggestion
+
+# Constant values should appear on the right-hand side of comparisons
+dotnet_diagnostic.SA1131.severity = suggestion
+
+# Do not combine fields
+dotnet_diagnostic.SA1132.severity = warning
+
+# Do not combine attributes
+dotnet_diagnostic.SA1133.severity = warning
+
+# Each attribute should be placed on its own line of code
+dotnet_diagnostic.SA1134.severity = warning
+
+# Using directive should be qualified
+dotnet_diagnostic.SA1135.severity = warning
+
+# Enum values should be on separate lines
+dotnet_diagnostic.SA1136.severity = suggestion
+
+# Elements should have the same indentation
+dotnet_diagnostic.SA1137.severity = suggestion
+
+dotnet_diagnostic.SA1139.severity = none
+
+dotnet_diagnostic.SA1200.severity = none
+
+# Elements should appear in the correct order
+dotnet_diagnostic.SA1201.severity = suggestion
+
+# Elements should be ordered by access
+dotnet_diagnostic.SA1202.severity = suggestion
+
+# Constants should appear before fields
+dotnet_diagnostic.SA1203.severity = suggestion
+
+# Static elements should appear before instance elements
+dotnet_diagnostic.SA1204.severity = suggestion
+
+dotnet_diagnostic.SA1205.severity = none
+
+dotnet_diagnostic.SA1206.severity = none
+
+# Using directive ordering
+dotnet_diagnostic.SA1208.severity = suggestion
+
+# Using alias directives should be placed after all using namespace directives
+dotnet_diagnostic.SA1209.severity = suggestion
+
+# Using directives should be ordered alphabetically by the namespaces
+dotnet_diagnostic.SA1210.severity = suggestion
+
+# Using alias directive ordering
+dotnet_diagnostic.SA1211.severity = suggestion
+
+dotnet_diagnostic.SA1212.severity = none
+
+# Readonly fields should appear before non-readonly fields
+dotnet_diagnostic.SA1214.severity = suggestion
+
+# Using static directives should be placed at the correct location
+dotnet_diagnostic.SA1216.severity = warning
+
+# The using static directives within a C# code file are not sorted alphabetically by full type name.
+dotnet_diagnostic.SA1217.severity = suggestion
+
+# Element should begin with an uppercase letter
+dotnet_diagnostic.SA1300.severity = suggestion
+
+# Interface names should begin with I
+dotnet_diagnostic.SA1302.severity = warning
+
+# Const field names should begin with upper-case letter
+dotnet_diagnostic.SA1303.severity = suggestion
+
+# Non-private readonly fields should begin with upper-case letter
+dotnet_diagnostic.SA1304.severity = suggestion
+
+# Field should begin with lower-case letter
+dotnet_diagnostic.SA1306.severity = suggestion
+
+dotnet_diagnostic.SA1307.severity = none
+
+# Field should not begin with the prefix 's_'
+dotnet_diagnostic.SA1308.severity = suggestion
+
+dotnet_diagnostic.SA1309.severity = none
+
+dotnet_diagnostic.SA1310.severity = none
+
+# Static readonly fields should begin with upper-case letter
+dotnet_diagnostic.SA1311.severity = suggestion
+
+# Variable should begin with lower-case letter
+dotnet_diagnostic.SA1312.severity = suggestion
+
+# Parameter should begin with lower-case letter
+dotnet_diagnostic.SA1313.severity = suggestion
+
+dotnet_diagnostic.SA1314.severity = none
+
+# Tuple element names should use correct casing
+dotnet_diagnostic.SA1316.severity = suggestion
+
+dotnet_diagnostic.SA1400.severity = none
+
+# Fields should be private
+dotnet_diagnostic.SA1401.severity = suggestion
+
+# File may only contain a single type
+dotnet_diagnostic.SA1402.severity = suggestion
+
+# File may only contain a single namespace
+dotnet_diagnostic.SA1403.severity = suggestion
+
+# Code analysis suppression should have justification
+dotnet_diagnostic.SA1404.severity = suggestion
+
+# Debug.Assert should provide message text
+dotnet_diagnostic.SA1405.severity = suggestion
+
+# Arithmetic expressions should declare precedence
+dotnet_diagnostic.SA1407.severity = suggestion
+
+# Conditional expressions should declare precedence
+dotnet_diagnostic.SA1408.severity = warning
+
+dotnet_diagnostic.SA1410.severity = none
+
+dotnet_diagnostic.SA1411.severity = none
+
+# Use trailing comma in multi-line initializers
+dotnet_diagnostic.SA1413.severity = suggestion
+
+# Tuple types in signatures should have element names
+dotnet_diagnostic.SA1414.severity = suggestion
+
+# Braces for multi-line statements should not share line
+dotnet_diagnostic.SA1500.severity = suggestion
+
+# Statement should not be on a single line
+dotnet_diagnostic.SA1501.severity = suggestion
+
+# Element should not be on a single line
+dotnet_diagnostic.SA1502.severity = suggestion
+
+# Braces should not be omitted
+dotnet_diagnostic.SA1503.severity = suggestion
+
+# All accessors should be single-line or multi-line
+dotnet_diagnostic.SA1504.severity = warning
+
+# An opening brace should not be followed by a blank line
+dotnet_diagnostic.SA1505.severity = suggestion
+
+# Element documentation headers should not be followed by blank line
+dotnet_diagnostic.SA1506.severity = warning
+
+# Code should not contain multiple blank lines in a row
+dotnet_diagnostic.SA1507.severity = suggestion
+
+# A closing brace should not be preceded by a blank line
+dotnet_diagnostic.SA1508.severity = warning
+
+# Opening braces should not be preceded by blank line
+dotnet_diagnostic.SA1509.severity = warning
+
+# 'else' statement should not be preceded by a blank line
+dotnet_diagnostic.SA1510.severity = warning
+
+# Single-line comments should not be followed by blank line
+dotnet_diagnostic.SA1512.severity = suggestion
+
+# Closing brace should be followed by blank line
+dotnet_diagnostic.SA1513.severity = suggestion
+
+# Element documentation header should be preceded by blank line
+dotnet_diagnostic.SA1514.severity = suggestion
+
+# Single-line comment should be preceded by blank line
+dotnet_diagnostic.SA1515.severity = suggestion
+
+# Elements should be separated by blank line
+dotnet_diagnostic.SA1516.severity = suggestion
+
+dotnet_diagnostic.SA1517.severity = none
+
+# Code should not contain blank lines at the end of the file
+dotnet_diagnostic.SA1518.severity = suggestion
+
+# Braces should not be omitted from multi-line child statement
+dotnet_diagnostic.SA1519.severity = warning
+
+# Use braces consistently
+dotnet_diagnostic.SA1520.severity = warning
+
+dotnet_diagnostic.SA1600.severity = none
+
+# Partial elements should be documented
+dotnet_diagnostic.SA1601.severity = suggestion
+
+# Enumeration items should be documented
+dotnet_diagnostic.SA1602.severity = suggestion
+
+# Element documentation should have summary
+dotnet_diagnostic.SA1604.severity = suggestion
+
+# Partial element documentation should have summary
+dotnet_diagnostic.SA1605.severity = suggestion
+
+# Element documentation should have summary text
+dotnet_diagnostic.SA1606.severity = suggestion
+
+# Element documentation should not have default summary
+dotnet_diagnostic.SA1608.severity = suggestion
+
+# Property documentation should have value text
+dotnet_diagnostic.SA1610.severity = suggestion
+
+# The documentation for parameter 'message' is missing
+dotnet_diagnostic.SA1611.severity = suggestion
+
+# The parameter documentation is at incorrect position
+dotnet_diagnostic.SA1612.severity = suggestion
+
+# Element parameter documentation should have text
+dotnet_diagnostic.SA1614.severity = suggestion
+
+dotnet_diagnostic.SA1615.severity = none
+
+# Element return value documentation should have text
+dotnet_diagnostic.SA1616.severity = suggestion
+
+dotnet_diagnostic.SA1617.severity = none
+
+# The documentation for type parameter is missing
+dotnet_diagnostic.SA1618.severity = suggestion
+
+# The documentation for type parameter is missing
+dotnet_diagnostic.SA1619.severity = suggestion
+
+# Generic type parameter documentation should have text
+dotnet_diagnostic.SA1622.severity = suggestion
+
+# Property documentation text
+dotnet_diagnostic.SA1623.severity = suggestion
+
+# Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets'
+dotnet_diagnostic.SA1624.severity = suggestion
+
+dotnet_diagnostic.SA1625.severity = none
+
+# Single-line comments should not use documentation style slashes
+dotnet_diagnostic.SA1626.severity = suggestion
+
+# The documentation text within the \'exception\' tag should not be empty
+dotnet_diagnostic.SA1627.severity = suggestion
+
+# Documentation text should end with a period
+dotnet_diagnostic.SA1629.severity = suggestion
+
+# File should have header
+dotnet_diagnostic.SA1633.severity = suggestion
+
+# Constructor summary documentation should begin with standard text
+dotnet_diagnostic.SA1642.severity = suggestion
+
+# Destructor summary documentation should begin with standard text
+dotnet_diagnostic.SA1643.severity = suggestion
+
+# File name should match first type name
+dotnet_diagnostic.SA1649.severity = suggestion
+
+dotnet_diagnostic.SA1652.severity = none
+
+# Do not use equality check to check for collection size.
+dotnet_diagnostic.xUnit2013.severity = none
\ No newline at end of file
diff --git a/eng/Packages.props b/eng/Packages.props
index b6e51805983..6511b043564 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -10,28 +10,24 @@
   <ItemGroup>
     <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="4.0.0-4.21379.20" />
+    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="4.2.0-1.22102.8" />
     <PackageReference Update="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
-    <PackageReference Update="Microsoft.IO.Redist" Version="6.0.0" />
+    <PackageReference Update="Microsoft.IO.Redist" Version="$(MicrosoftIORedistVersion)" />
     <PackageReference Update="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="Microsoft.Win32.Registry" Version="4.3.0" />
     <PackageReference Update="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
-    <PackageReference Update="System.CodeDom" Version="4.4.0" />
-    <PackageReference Update="System.Collections.Immutable" Version="5.0.0" />
-    <PackageReference Update="System.Configuration.ConfigurationManager" Version="4.7.0" />
+    <PackageReference Update="System.Collections.Immutable" Version="6.0.0" />
+    <PackageReference Update="System.Configuration.ConfigurationManager" Version="6.0.0" />
     <PackageReference Update="System.Net.Http" Version="4.3.4" />
-    <PackageReference Update="System.Memory" Version="4.5.4" />
-    <PackageReference Update="System.Reflection.Metadata" Version="1.6.0" />
+    <PackageReference Update="System.Memory" Version="4.5.5" />
+    <PackageReference Update="System.Reflection.Metadata" Version="6.0.0" />
     <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
-    <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
-    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="4.7.0" />
-    <PackageReference Update="System.Security.Cryptography.Xml" Version="4.7.0" />
-    <PackageReference Update="System.Security.Permissions" Version="4.7.0" />
-    <PackageReference Update="System.Security.Principal.Windows" Version="4.7.0" />
-    <PackageReference Update="System.Text.Encoding.CodePages" Version="4.0.1" />
-    <PackageReference Update="System.Text.Json" Version="6.0.0" />
-    <PackageReference Update="System.Threading.Tasks.Dataflow" Version="6.0.0" />
+    <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="$(SystemRuntimeCompilerServicesUnsafeVersion)" />
+    <PackageReference Update="System.Security.Permissions" Version="6.0.0" />
+    <PackageReference Update="System.Security.Principal.Windows" Version="5.0.0" />
+    <PackageReference Update="System.Text.Encoding.CodePages" Version="6.0.0" />
+    <PackageReference Update="System.Text.Json" Version="$(SystemTextJsonVersion)" />
+    <PackageReference Update="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
     <PackageReference Update="xunit.assert" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.console" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.core" Version="$(XUnitVersion)" />
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 966fea17b1e..7756215e8f6 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,22 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.21573.2">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22314.7">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>249a53452a198b19cf6d3ac90ad25265ee77ee59</Sha>
+      <Sha>fdd3a242bc813f371023adff4e4c05c0be705d2a</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-preview.1.62">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.2.0-rc.146">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>9187a50daec29061772a2057490697c6c0e4c354</Sha>
+      <Sha>b8a61266d9a6780cb7eb9c1942695cf813fdef0a</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-2.21605.2">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.2.0-4.22307.8">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>f8ef87e10cb633f07803b5b5abee1ceaa4efc2fb</Sha>
+      <Sha>9521db7e5f69e3e84bab147a138dbf5adf57aff9</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.21573.2">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22314.7">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>249a53452a198b19cf6d3ac90ad25265ee77ee59</Sha>
+      <Sha>fdd3a242bc813f371023adff4e4c05c0be705d2a</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index 11e6ece3772..4c92e1424a4 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,13 +2,13 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.1.0</VersionPrefix>
+    <VersionPrefix>17.3.0</VersionPrefix>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
     <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
     <!-- Workaround for https://github.com/dotnet/roslyn/issues/35793 -->
     <SemanticVersioningV1>true</SemanticVersioningV1>
-    <MicroBuildPluginsSwixBuildVersion>1.0.672</MicroBuildPluginsSwixBuildVersion>
+    <MicroBuildPluginsSwixBuildVersion>1.1.87</MicroBuildPluginsSwixBuildVersion>
     <MonoBuild Condition="'$(Configuration)' == 'Debug-MONO' or '$(Configuration)' == 'Release-MONO'">true</MonoBuild>
   </PropertyGroup>
   <!-- Repo Toolset Features -->
@@ -25,17 +25,21 @@
   </PropertyGroup>
   <!-- Production Dependencies -->
   <PropertyGroup>
-    <SystemResourcesExtensionsPackageVersion>4.6.0</SystemResourcesExtensionsPackageVersion>
+    <SystemResourcesExtensionsPackageVersion>6.0.0</SystemResourcesExtensionsPackageVersion>
   </PropertyGroup>
   <!-- Toolset Dependencies -->
   <PropertyGroup>
     <!-- DotNetCliVersion MUST match the dotnet version in global.json.
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21573.2</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22314.7</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.1.0-2.21605.2</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.1.0-preview.1.62</NuGetBuildTasksVersion>
+    <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.2.0-4.22307.8</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.2.0-rc.146</NuGetBuildTasksVersion>
+    <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
+    <SystemTextJsonVersion>6.0.0</SystemTextJsonVersion>
+    <SystemThreadingTasksDataflowVersion>6.0.0</SystemThreadingTasksDataflowVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 7c8162be341..b9c1cf4fe0c 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -26,23 +26,20 @@ function Stop-Processes() {
 }
 
 function KillProcessesFromRepo {
-  # Jenkins does not allow taskkill
-  if (-not $ci) {
-    # Kill compiler server and MSBuild node processes from bootstrapped MSBuild (otherwise a second build will fail to copy files in use)
-    foreach ($process in Get-Process | Where-Object {'msbuild', 'dotnet', 'vbcscompiler' -contains $_.Name})
+  # Kill compiler server and MSBuild node processes from bootstrapped MSBuild (otherwise a second build will fail to copy files in use)
+  foreach ($process in Get-Process | Where-Object {'msbuild', 'dotnet', 'vbcscompiler' -contains $_.Name})
+  {
+
+    if ([string]::IsNullOrEmpty($process.Path))
     {
+      Write-Host "Process $($process.Id) $($process.Name) does not have a Path. Skipping killing it."
+      continue
+    }
 
-      if ([string]::IsNullOrEmpty($process.Path))
-      {
-        Write-Host "Process $($process.Id) $($process.Name) does not have a Path. Skipping killing it."
-        continue
-      }
-
-      if ($process.Path.StartsWith($RepoRoot, [StringComparison]::InvariantCultureIgnoreCase))
-      {
-        Write-Host "Killing $($process.Name) from $($process.Path)"
-        taskkill /f /pid $process.Id
-      }
+    if ($process.Path.StartsWith($RepoRoot, [StringComparison]::InvariantCultureIgnoreCase))
+    {
+      Write-Host "Killing $($process.Name) from $($process.Path)"
+      taskkill /f /pid $process.Id
     }
   }
 }
@@ -63,10 +60,6 @@ if ($msbuildEngine -eq '')
 $msbuildToUse = "msbuild"
 
 try {
-
-  # turning off vbcscompiler.exe because it causes the move-item call below to fail
-  $env:UseSharedCompilation="false"
-
   KillProcessesFromRepo
 
   if ($buildStage1)
@@ -74,6 +67,8 @@ try {
     & $PSScriptRoot\Common\Build.ps1 -restore -build -ci -msbuildEngine $msbuildEngine /p:CreateBootstrap=true @properties
   }
 
+  KillProcessesFromRepo
+
   $bootstrapRoot = Join-Path $Stage1BinDir "bootstrap"
 
   # we need to do this to guarantee we have/know where dotnet.exe is installed
@@ -118,9 +113,6 @@ try {
   $buildTool = @{ Path = $buildToolPath; Command = $buildToolCommand; Tool = $msbuildEngine; Framework = $buildToolFramework }
   $global:_BuildTool = $buildTool
 
-  # turn vbcscompiler back on to save on time. It speeds up the build considerably
-  $env:UseSharedCompilation="true"
-
   # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.
   $env:MSBUILDDONOTLAUNCHDEBUGGER="true"
 
diff --git a/eng/common/generate-graph-files.ps1 b/eng/common/generate-graph-files.ps1
deleted file mode 100644
index 0728b1a8b57..00000000000
--- a/eng/common/generate-graph-files.ps1
+++ /dev/null
@@ -1,86 +0,0 @@
-Param(
-  [Parameter(Mandatory=$true)][string] $barToken,       # Token generated at https://maestro-prod.westus2.cloudapp.azure.com/Account/Tokens
-  [Parameter(Mandatory=$true)][string] $gitHubPat,      # GitHub personal access token from https://github.com/settings/tokens (no auth scopes needed)
-  [Parameter(Mandatory=$true)][string] $azdoPat,        # Azure Dev Ops tokens from https://dev.azure.com/dnceng/_details/security/tokens (code read scope needed)
-  [Parameter(Mandatory=$true)][string] $outputFolder,   # Where the graphviz.txt file will be created
-  [string] $darcVersion,                                # darc's version
-  [string] $graphvizVersion = '2.38',                   # GraphViz version
-  [switch] $includeToolset                              # Whether the graph should include toolset dependencies or not. i.e. arcade, optimization. For more about
-                                                        # toolset dependencies see https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#toolset-vs-product-dependencies
-)
-
-function CheckExitCode ([string]$stage)
-{
-  $exitCode = $LASTEXITCODE
-  if ($exitCode  -ne 0) {
-    Write-PipelineTelemetryError -Category 'Arcade' -Message "Something failed in stage: '$stage'. Check for errors above. Exiting now..."
-    ExitWithExitCode $exitCode
-  }
-}
-
-try {
-  $ErrorActionPreference = 'Stop'
-  . $PSScriptRoot\tools.ps1
-  
-  Import-Module -Name (Join-Path $PSScriptRoot 'native\CommonLibrary.psm1')
-
-  Push-Location $PSScriptRoot
-
-  Write-Host 'Installing darc...'
-  . .\darc-init.ps1 -darcVersion $darcVersion
-  CheckExitCode 'Running darc-init'
-
-  $engCommonBaseDir = Join-Path $PSScriptRoot 'native\'
-  $graphvizInstallDir = CommonLibrary\Get-NativeInstallDirectory
-  $nativeToolBaseUri = 'https://netcorenativeassets.blob.core.windows.net/resource-packages/external'
-  $installBin = Join-Path $graphvizInstallDir 'bin'
-
-  Write-Host 'Installing dot...'
-  .\native\install-tool.ps1 -ToolName graphviz -InstallPath $installBin -BaseUri $nativeToolBaseUri -CommonLibraryDirectory $engCommonBaseDir -Version $graphvizVersion -Verbose
-
-  $darcExe = "$env:USERPROFILE\.dotnet\tools"
-  $darcExe = Resolve-Path "$darcExe\darc.exe"
-
-  Create-Directory $outputFolder
-
-  # Generate 3 graph descriptions:
-  # 1. Flat with coherency information
-  # 2. Graphviz (dot) file
-  # 3. Standard dependency graph
-  $graphVizFilePath = "$outputFolder\graphviz.txt"
-  $graphVizImageFilePath = "$outputFolder\graph.png"
-  $normalGraphFilePath = "$outputFolder\graph-full.txt"
-  $flatGraphFilePath = "$outputFolder\graph-flat.txt"
-  $baseOptions = @( '--github-pat', "$gitHubPat", '--azdev-pat', "$azdoPat", '--password', "$barToken" )
-
-  if ($includeToolset) {
-    Write-Host 'Toolsets will be included in the graph...'
-    $baseOptions += @( '--include-toolset' )
-  }
-
-  Write-Host 'Generating standard dependency graph...'
-  & "$darcExe" get-dependency-graph @baseOptions --output-file $normalGraphFilePath
-  CheckExitCode 'Generating normal dependency graph'
-
-  Write-Host 'Generating flat dependency graph and graphviz file...'
-  & "$darcExe" get-dependency-graph @baseOptions --flat --coherency --graphviz $graphVizFilePath --output-file $flatGraphFilePath
-  CheckExitCode 'Generating flat and graphviz dependency graph'
-
-  Write-Host "Generating graph image $graphVizFilePath"
-  $dotFilePath = Join-Path $installBin "graphviz\$graphvizVersion\release\bin\dot.exe"
-  & "$dotFilePath" -Tpng -o"$graphVizImageFilePath" "$graphVizFilePath"
-  CheckExitCode 'Generating graphviz image'
-
-  Write-Host "'$graphVizFilePath', '$flatGraphFilePath', '$normalGraphFilePath' and '$graphVizImageFilePath' created!"
-}
-catch {
-  if (!$includeToolset) {
-    Write-Host 'This might be a toolset repo which includes only toolset dependencies. ' -NoNewline -ForegroundColor Yellow
-    Write-Host 'Since -includeToolset is not set there is no graph to create. Include -includeToolset and try again...' -ForegroundColor Yellow
-  }
-  Write-Host $_.ScriptStackTrace
-  Write-PipelineTelemetryError -Category 'Arcade' -Message $_
-  ExitWithExitCode 1
-} finally {
-  Pop-Location
-}
\ No newline at end of file
diff --git a/eng/common/generate-sbom-prep.ps1 b/eng/common/generate-sbom-prep.ps1
new file mode 100644
index 00000000000..a733a888582
--- /dev/null
+++ b/eng/common/generate-sbom-prep.ps1
@@ -0,0 +1,19 @@
+Param(
+    [Parameter(Mandatory=$true)][string] $ManifestDirPath    # Manifest directory where sbom will be placed
+)
+
+Write-Host "Creating dir $ManifestDirPath"
+# create directory for sbom manifest to be placed
+if (!(Test-Path -path $ManifestDirPath))
+{
+  New-Item -ItemType Directory -path $ManifestDirPath
+  Write-Host "Successfully created directory $ManifestDirPath"
+}
+else{
+  Write-PipelineTelemetryError -category 'Build'  "Unable to create sbom folder."
+}
+
+Write-Host "Updating artifact name"
+$artifact_name = "${env:SYSTEM_STAGENAME}_${env:AGENT_JOBNAME}_SBOM" -replace '["/:<>\\|?@*"() ]', '_'
+Write-Host "Artifact name $artifact_name"
+Write-Host "##vso[task.setvariable variable=ARTIFACT_NAME]$artifact_name"
diff --git a/eng/common/generate-sbom-prep.sh b/eng/common/generate-sbom-prep.sh
new file mode 100644
index 00000000000..f6c77453142
--- /dev/null
+++ b/eng/common/generate-sbom-prep.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+
+source="${BASH_SOURCE[0]}"
+
+manifest_dir=$1
+
+if [ ! -d "$manifest_dir" ] ; then
+  mkdir -p "$manifest_dir"
+  echo "Sbom directory created." $manifest_dir
+else
+  Write-PipelineTelemetryError -category 'Build'  "Unable to create sbom folder."
+fi
+
+artifact_name=$SYSTEM_STAGENAME"_"$AGENT_JOBNAME"_SBOM"
+echo "Artifact name before : "$artifact_name
+# replace all special characters with _, some builds use special characters like : in Agent.Jobname, that is not a permissible name while uploading artifacts.
+safe_artifact_name="${artifact_name//["/:<>\\|?@*$" ]/_}"
+echo "Artifact name after : "$safe_artifact_name
+export ARTIFACT_NAME=$safe_artifact_name
+echo "##vso[task.setvariable variable=ARTIFACT_NAME]$safe_artifact_name"
+
+exit 0
diff --git a/eng/common/post-build/publish-using-darc.ps1 b/eng/common/post-build/publish-using-darc.ps1
index 2427ca6b6ae..8508397d776 100644
--- a/eng/common/post-build/publish-using-darc.ps1
+++ b/eng/common/post-build/publish-using-darc.ps1
@@ -5,13 +5,8 @@ param(
   [Parameter(Mandatory=$true)][string] $MaestroToken,
   [Parameter(Mandatory=$false)][string] $MaestroApiEndPoint = 'https://maestro-prod.westus2.cloudapp.azure.com',
   [Parameter(Mandatory=$true)][string] $WaitPublishingFinish,
-  [Parameter(Mandatory=$false)][string] $EnableSourceLinkValidation,
-  [Parameter(Mandatory=$false)][string] $EnableSigningValidation,
-  [Parameter(Mandatory=$false)][string] $EnableNugetValidation,
-  [Parameter(Mandatory=$false)][string] $PublishInstallersAndChecksums,
   [Parameter(Mandatory=$false)][string] $ArtifactsPublishingAdditionalParameters,
-  [Parameter(Mandatory=$false)][string] $SymbolPublishingAdditionalParameters,
-  [Parameter(Mandatory=$false)][string] $SigningValidationAdditionalParameters
+  [Parameter(Mandatory=$false)][string] $SymbolPublishingAdditionalParameters
 )
 
 try {
@@ -35,27 +30,6 @@ try {
     $optionalParams.Add("--no-wait") | Out-Null
   }
 
-  if ("false" -ne $PublishInstallersAndChecksums) {
-    $optionalParams.Add("--publish-installers-and-checksums") | Out-Null
-  }
-
-  if ("true" -eq $EnableNugetValidation) {
-    $optionalParams.Add("--validate-nuget") | Out-Null
-  }
-
-  if ("true" -eq $EnableSourceLinkValidation) {
-    $optionalParams.Add("--validate-sourcelinkchecksums") | Out-Null
-  }
-
-  if ("true" -eq $EnableSigningValidation) {
-    $optionalParams.Add("--validate-signingchecksums") | Out-Null
-
-    if ("" -ne $SigningValidationAdditionalParameters) {
-      $optionalParams.Add("--signing-validation-parameters") | Out-Null
-      $optionalParams.Add($SigningValidationAdditionalParameters) | Out-Null
-    }
-  }
-
   & $darc add-build-to-channel `
   --id $buildId `
   --publishing-infra-version $PublishingInfraVersion `
diff --git a/eng/common/sdl/configure-sdl-tool.ps1 b/eng/common/sdl/configure-sdl-tool.ps1
index 4999c307088..adea8e8da2a 100644
--- a/eng/common/sdl/configure-sdl-tool.ps1
+++ b/eng/common/sdl/configure-sdl-tool.ps1
@@ -15,7 +15,9 @@ Param(
   # Optional: Additional params to add to any tool using CredScan.
   [string[]] $CrScanAdditionalRunConfigParams,
   # Optional: Additional params to add to any tool using PoliCheck.
-  [string[]] $PoliCheckAdditionalRunConfigParams
+  [string[]] $PoliCheckAdditionalRunConfigParams,
+  # Optional: Additional params to add to any tool using CodeQL/Semmle.
+  [string[]] $CodeQLAdditionalRunConfigParams
 )
 
 $ErrorActionPreference = 'Stop'
@@ -78,6 +80,11 @@ try {
         $tool.Args += "Target < $TargetDirectory"
       }
       $tool.Args += $PoliCheckAdditionalRunConfigParams
+    } elseif ($tool.Name -eq 'semmle' -or $tool.Name -eq 'codeql') {
+      if ($targetDirectory) {
+        $tool.Args += "`"SourceCodeDirectory < $TargetDirectory`""
+      }
+      $tool.Args += $CodeQLAdditionalRunConfigParams
     }
 
     # Create variable pointing to the args array directly so we can use splat syntax later.
diff --git a/eng/common/sdl/execute-all-sdl-tools.ps1 b/eng/common/sdl/execute-all-sdl-tools.ps1
index 1157151f486..b9fe7317964 100644
--- a/eng/common/sdl/execute-all-sdl-tools.ps1
+++ b/eng/common/sdl/execute-all-sdl-tools.ps1
@@ -34,6 +34,7 @@ Param(
   [string] $GuardianLoggerLevel='Standard',                                                      # Optional: the logger level for the Guardian CLI; options are Trace, Verbose, Standard, Warning, and Error
   [string[]] $CrScanAdditionalRunConfigParams,                                                   # Optional: Additional Params to custom build a CredScan run config in the format @("xyz:abc","sdf:1")
   [string[]] $PoliCheckAdditionalRunConfigParams,                                                # Optional: Additional Params to custom build a Policheck run config in the format @("xyz:abc","sdf:1")
+  [string[]] $CodeQLAdditionalRunConfigParams,                                                   # Optional: Additional Params to custom build a Semmle/CodeQL run config in the format @("xyz < abc","sdf < 1")
   [bool] $BreakOnFailure=$False                                                                  # Optional: Fail the build if there were errors during the run
 )
 
@@ -105,7 +106,8 @@ try {
           -AzureDevOpsAccessToken $AzureDevOpsAccessToken `
           -GuardianLoggerLevel $GuardianLoggerLevel `
           -CrScanAdditionalRunConfigParams $CrScanAdditionalRunConfigParams `
-          -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams
+          -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams `
+          -CodeQLAdditionalRunConfigParams $CodeQLAdditionalRunConfigParams
         if ($BreakOnFailure) {
           Exit-IfNZEC "Sdl"
         }
diff --git a/eng/common/sdl/packages.config b/eng/common/sdl/packages.config
index 3bd8b29ebd7..b7bcfe38caf 100644
--- a/eng/common/sdl/packages.config
+++ b/eng/common/sdl/packages.config
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <packages>
-  <package id="Microsoft.Guardian.Cli" version="0.53.3"/>
+  <package id="Microsoft.Guardian.Cli" version="0.110.1"/>
 </packages>
diff --git a/eng/common/templates/job/execute-sdl.yml b/eng/common/templates/job/execute-sdl.yml
index 4882dd93134..24cec0424e5 100644
--- a/eng/common/templates/job/execute-sdl.yml
+++ b/eng/common/templates/job/execute-sdl.yml
@@ -29,14 +29,6 @@ parameters:
   # Optional: download a list of pipeline artifacts. 'downloadArtifacts' controls build artifacts,
   # not pipeline artifacts, so doesn't affect the use of this parameter.
   pipelineArtifactNames: []
-  # Optional: location and ID of the AzDO build that the build/pipeline artifacts should be
-  # downloaded from. By default, uses runtime expressions to decide based on the variables set by
-  # the 'setupMaestroVars' dependency. Overriding this parameter is necessary if SDL tasks are
-  # running without Maestro++/BAR involved, or to download artifacts from a specific existing build
-  # to iterate quickly on SDL changes.
-  AzDOProjectName: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-  AzDOPipelineId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-  AzDOBuildId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
 
 jobs:
 - job: Run_SDL
@@ -51,24 +43,24 @@ jobs:
       value: ${{ parameters.AzDOPipelineId }}
     - name: AzDOBuildId
       value: ${{ parameters.AzDOBuildId }}
-    # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
-    # sync with the packages.config file.
-    - name: DefaultGuardianVersion
-      value: 0.53.3
+    - template: /eng/common/templates/variables/sdl-variables.yml
     - name: GuardianVersion
       value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
-    - name: GuardianPackagesConfigFile
-      value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
   pool:
-    # To extract archives (.tar.gz, .zip), we need access to "tar", added in Windows 10/2019.
-    ${{ if eq(parameters.extractArchiveArtifacts, 'false') }}:
-      vmImage: windows-2019
-    ${{ if ne(parameters.extractArchiveArtifacts, 'false') }}:
-      vmImage: windows-2019
+    # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+    ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+      name: VSEngSS-MicroBuild2022-1ES
+      demands: Cmd
+    # If it's not devdiv, it's dnceng
+    ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+      name: NetCore1ESPool-Internal
+      demands: ImageOverride -equals Build.Server.Amd64.VS2019
   steps:
   - checkout: self
     clean: true
 
+  - template: /eng/common/templates/post-build/setup-maestro-vars.yml
+
   - ${{ if ne(parameters.downloadArtifacts, 'false')}}:
     - ${{ if ne(parameters.artifactNames, '') }}:
       - ${{ each artifactName in parameters.artifactNames }}:
@@ -129,57 +121,11 @@ jobs:
       displayName: Extract Archive Artifacts
       continueOnError: ${{ parameters.sdlContinueOnError }}
   
-  - ${{ if ne(parameters.overrideGuardianVersion, '') }}:
-    - powershell: |
-        $content = Get-Content $(GuardianPackagesConfigFile)
-
-        Write-Host "packages.config content was:`n$content"
-
-        $content = $content.Replace('$(DefaultGuardianVersion)', '$(GuardianVersion)')
-        $content | Set-Content $(GuardianPackagesConfigFile)
-
-        Write-Host "packages.config content updated to:`n$content"
-      displayName: Use overridden Guardian version ${{ parameters.overrideGuardianVersion }}
-
-  - task: NuGetToolInstaller@1
-    displayName: 'Install NuGet.exe'
-  - task: NuGetCommand@2
-    displayName: 'Install Guardian'
-    inputs:
-      restoreSolution: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
-      feedsToUse: config
-      nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
-      externalFeedCredentials: GuardianConnect
-      restoreDirectory: $(Build.SourcesDirectory)\.packages
-
-  - ${{ if ne(parameters.overrideParameters, '') }}:
-    - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
-      displayName: Execute SDL
-      continueOnError: ${{ parameters.sdlContinueOnError }}
-  - ${{ if eq(parameters.overrideParameters, '') }}:
-    - powershell: ${{ parameters.executeAllSdlToolsScript }}
-        -GuardianPackageName Microsoft.Guardian.Cli.$(GuardianVersion)
-        -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
-        -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
-        ${{ parameters.additionalParameters }}
-      displayName: Execute SDL
-      continueOnError: ${{ parameters.sdlContinueOnError }}
-
-  - ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
-    # We want to publish the Guardian results and configuration for easy diagnosis. However, the
-    # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
-    # tooling files. Some of these files are large and aren't useful during an investigation, so
-    # exclude them by simply deleting them before publishing. (As of writing, there is no documented
-    # way to selectively exclude a dir from the pipeline artifact publish task.)
-    - task: DeleteFiles@1
-      displayName: Delete Guardian dependencies to avoid uploading
-      inputs:
-        SourceFolder: $(Agent.BuildDirectory)/.gdn
-        Contents: |
-          c
-          i
-      condition: succeededOrFailed()
-    - publish: $(Agent.BuildDirectory)/.gdn
-      artifact: GuardianConfiguration
-      displayName: Publish GuardianConfiguration
-      condition: succeededOrFailed()
+  - template: /eng/common/templates/steps/execute-sdl.yml
+    parameters:
+      overrideGuardianVersion: ${{ parameters.overrideGuardianVersion }}
+      executeAllSdlToolsScript: ${{ parameters.executeAllSdlToolsScript }}
+      overrideParameters: ${{ parameters.overrideParameters }}
+      additionalParameters: ${{ parameters.additionalParameters }}
+      publishGuardianDirectoryToPipeline: ${{ parameters.publishGuardianDirectoryToPipeline }}
+      sdlContinueOnError: ${{ parameters.sdlContinueOnError }}
diff --git a/eng/common/templates/job/generate-graph-files.yml b/eng/common/templates/job/generate-graph-files.yml
deleted file mode 100644
index e54ce956f90..00000000000
--- a/eng/common/templates/job/generate-graph-files.yml
+++ /dev/null
@@ -1,48 +0,0 @@
-parameters:
-  # Optional: dependencies of the job
-  dependsOn: ''
-
-  # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
-  pool: {}
-
-  # Optional: Include toolset dependencies in the generated graph files
-  includeToolset: false
-  
-jobs:
-- job: Generate_Graph_Files
-
-  dependsOn: ${{ parameters.dependsOn }}
-
-  displayName: Generate Graph Files
-
-  pool: ${{ parameters.pool }}
-
-  variables:
-    # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
-    # DotNet-AllOrgs-Darc-Pats provides: dn-bot-devdiv-dnceng-rw-code-pat
-    - group: Publish-Build-Assets
-    - group: DotNet-AllOrgs-Darc-Pats
-    - name: _GraphArguments
-      value: -gitHubPat $(BotAccount-dotnet-maestro-bot-PAT) 
-        -azdoPat $(dn-bot-devdiv-dnceng-rw-code-pat) 
-        -barToken $(MaestroAccessToken) 
-        -outputFolder '$(Build.StagingDirectory)/GraphFiles/'
-    - ${{ if ne(parameters.includeToolset, 'false') }}:
-      - name: _GraphArguments
-        value: ${{ variables._GraphArguments }} -includeToolset
-
-  steps:
-    - task: PowerShell@2
-      displayName: Generate Graph Files
-      inputs:
-        filePath: eng\common\generate-graph-files.ps1 
-        arguments: $(_GraphArguments)
-      continueOnError: true
-    - task: PublishBuildArtifacts@1
-      displayName: Publish Graph to Artifacts
-      inputs:
-        PathtoPublish: '$(Build.StagingDirectory)/GraphFiles'
-        PublishLocation: Container
-        ArtifactName: GraphFiles
-      continueOnError: true
-      condition: always()      
diff --git a/eng/common/templates/job/job.yml b/eng/common/templates/job/job.yml
index 37dceb1bab0..547d878da07 100644
--- a/eng/common/templates/job/job.yml
+++ b/eng/common/templates/job/job.yml
@@ -24,12 +24,17 @@ parameters:
   enablePublishBuildAssets: false
   enablePublishTestResults: false
   enablePublishUsingPipelines: false
+  disableComponentGovernance: false
   mergeTestResults: false
   testRunTitle: ''
   testResultsFormat: ''
   name: ''
   preSteps: []
   runAsPublic: false
+# Sbom related params
+  enableSbom: true
+  PackageVersion: 6.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
 
 jobs:
 - job: ${{ parameters.name }}
@@ -136,6 +141,10 @@ jobs:
         richNavLogOutputDirectory: $(Build.SourcesDirectory)/artifacts/bin
       continueOnError: true
 
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), ne(parameters.disableComponentGovernance, 'true')) }}:
+      - task: ComponentGovernanceComponentDetection@0
+        continueOnError: true
+
   - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
     - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
       - task: MicroBuildCleanup@1
@@ -242,3 +251,9 @@ jobs:
         ArtifactName: AssetManifests
       continueOnError: ${{ parameters.continueOnError }}
       condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(parameters.enableSbom, 'true')) }}:
+    - template: /eng/common/templates/steps/generate-sbom.yml
+      parameters:
+        PackageVersion: ${{ parameters.packageVersion}}
+        BuildDropPath: ${{ parameters.buildDropPath }}
diff --git a/eng/common/templates/job/onelocbuild.yml b/eng/common/templates/job/onelocbuild.yml
index 069098b0a06..9d1e3042d8a 100644
--- a/eng/common/templates/job/onelocbuild.yml
+++ b/eng/common/templates/job/onelocbuild.yml
@@ -3,9 +3,8 @@ parameters:
   dependsOn: ''
 
   # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
-  pool:
-    vmImage: windows-2019
-
+  pool: ''
+    
   CeapexPat: $(dn-bot-ceapex-package-r) # PAT for the loc AzDO instance https://dev.azure.com/ceapex
   GithubPat: $(BotAccount-dotnet-bot-repo-PAT)
 
@@ -31,7 +30,18 @@ jobs:
 
   displayName: OneLocBuild
 
-  pool: ${{ parameters.pool }}
+  ${{ if ne(parameters.pool, '') }}:
+    pool: ${{ parameters.pool }}
+  ${{ if eq(parameters.pool, '') }}:
+    pool:
+      # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+      ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+        name: VSEngSS-MicroBuild2022-1ES
+        demands: Cmd
+      # If it's not devdiv, it's dnceng
+      ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+        name: NetCore1ESPool-Internal
+        demands: ImageOverride -equals Build.Server.Amd64.VS2019
 
   variables:
     - group: OneLocBuildVariables # Contains the CeapexPat and GithubPat
diff --git a/eng/common/templates/job/publish-build-assets.yml b/eng/common/templates/job/publish-build-assets.yml
index fe9dfdf720c..d91bf914711 100644
--- a/eng/common/templates/job/publish-build-assets.yml
+++ b/eng/common/templates/job/publish-build-assets.yml
@@ -38,10 +38,6 @@ jobs:
       value: ${{ parameters.configuration }}
     - group: Publish-Build-Assets
     - group: AzureDevOps-Artifact-Feeds-Pats
-    # Skip component governance and codesign validation for SDL. These jobs
-    # create no content.
-    - name: skipComponentGovernanceDetection
-      value: true
     - name: runCodesignValidationInjection
       value: false
 
diff --git a/eng/common/templates/job/source-build.yml b/eng/common/templates/job/source-build.yml
index 5023d36dcb3..5cd5325d7b4 100644
--- a/eng/common/templates/job/source-build.yml
+++ b/eng/common/templates/job/source-build.yml
@@ -31,11 +31,6 @@ parameters:
   #   container and pool.
   platform: {}
 
-  # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
-  # source-build builds run in Docker, including the default managed platform.
-  defaultContainerHostPool:
-    vmImage: ubuntu-20.04
-
 jobs:
 - job: ${{ parameters.jobNamePrefix }}_${{ parameters.platform.name }}
   displayName: Source-Build (${{ parameters.platform.name }})
@@ -47,7 +42,15 @@ jobs:
     container: ${{ parameters.platform.container }}
 
   ${{ if eq(parameters.platform.pool, '') }}:
-    pool: ${{ parameters.defaultContainerHostPool }}
+    # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
+    # source-build builds run in Docker, including the default managed platform.
+    pool:
+      ${{ if eq(variables['System.TeamProject'], 'public') }}:
+        name: NetCore1ESPool-Public
+        demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open
+      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
+        name: NetCore1ESPool-Internal
+        demands: ImageOverride -equals Build.Ubuntu.1804.Amd64
   ${{ if ne(parameters.platform.pool, '') }}:
     pool: ${{ parameters.platform.pool }}
 
diff --git a/eng/common/templates/jobs/codeql-build.yml b/eng/common/templates/jobs/codeql-build.yml
new file mode 100644
index 00000000000..54c393af440
--- /dev/null
+++ b/eng/common/templates/jobs/codeql-build.yml
@@ -0,0 +1,31 @@
+parameters:
+  # See schema documentation in /Documentation/AzureDevOps/TemplateSchema.md
+  continueOnError: false
+  # Required: A collection of jobs to run - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
+  jobs: []
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+
+jobs:
+- template: /eng/common/templates/jobs/jobs.yml
+  parameters:
+    enableMicrobuild: false
+    enablePublishBuildArtifacts: false
+    enablePublishTestResults: false
+    enablePublishBuildAssets: false
+    enablePublishUsingPipelines: false
+    enableTelemetry: true
+
+    variables:
+      - group: Publish-Build-Assets
+      # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+      # sync with the packages.config file.
+      - name: DefaultGuardianVersion
+        value: 0.110.1
+      - name: GuardianPackagesConfigFile
+        value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
+      - name: GuardianVersion
+        value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
+  
+    jobs: ${{ parameters.jobs }}
+        
diff --git a/eng/common/templates/jobs/jobs.yml b/eng/common/templates/jobs/jobs.yml
index 90015a7e5ae..554e71cfc43 100644
--- a/eng/common/templates/jobs/jobs.yml
+++ b/eng/common/templates/jobs/jobs.yml
@@ -83,17 +83,15 @@ jobs:
         - ${{ if eq(parameters.enableSourceBuild, true) }}:
           - Source_Build_Complete
         pool:
-          vmImage: windows-2019
+          # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+          ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+            name: VSEngSS-MicroBuild2022-1ES
+            demands: Cmd
+          # If it's not devdiv, it's dnceng
+          ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+            name: NetCore1ESPool-Internal
+            demands: ImageOverride -equals Build.Server.Amd64.VS2019
+
         runAsPublic: ${{ parameters.runAsPublic }}
         publishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
         enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
-
-  - ${{ if eq(parameters.graphFileGeneration.enabled, true) }}:
-    - template: ../job/generate-graph-files.yml
-      parameters:
-        continueOnError: ${{ parameters.continueOnError }}
-        includeToolset: ${{ parameters.graphFileGeneration.includeToolset }}
-        dependsOn:
-          - Asset_Registry_Publish
-        pool:
-          vmImage: windows-2019
diff --git a/eng/common/templates/post-build/channels/generic-internal-channel.yml b/eng/common/templates/post-build/channels/generic-internal-channel.yml
deleted file mode 100644
index 8990dfc8c87..00000000000
--- a/eng/common/templates/post-build/channels/generic-internal-channel.yml
+++ /dev/null
@@ -1,190 +0,0 @@
-parameters:
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-  artifactsPublishingAdditionalParameters: ''
-  dependsOn:
-  - Validate
-  publishInstallersAndChecksums: true
-  symbolPublishingAdditionalParameters: ''
-  stageName: ''
-  channelName: ''
-  channelId: ''
-  transportFeed: ''
-  shippingFeed: ''
-  symbolsFeed: ''
-
-stages:
-- stage: ${{ parameters.stageName }}
-  dependsOn: ${{ parameters.dependsOn }}
-  variables:
-    - template: ../common-variables.yml
-  displayName: ${{ parameters.channelName }} Publishing
-  jobs:
-  - template: ../setup-maestro-vars.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-  - job: publish_symbols
-    displayName: Symbol Publishing
-    dependsOn: setupMaestroVars
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    variables:
-      - group: DotNet-Symbol-Server-Pats
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PdbArtifacts/**
-            BlobArtifacts/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
-      # otherwise it'll complain about accessing a private feed.
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet
-            /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
-            /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
-            /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
-            /p:Configuration=Release
-            /p:PublishToMSDL=false
-            ${{ parameters.symbolPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'SymbolPublishing'
-
-  - job: publish_assets
-    displayName: Publish Assets
-    dependsOn: setupMaestroVars
-    timeoutInMinutes: 120
-    variables:
-      - name: BARBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      - name: IsStableBuild
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.IsStableBuild'] ]
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PackageArtifacts/**
-            BlobArtifacts/**
-            AssetManifests/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      - task: NuGetToolInstaller@1
-        displayName: 'Install NuGet.exe'
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish Assets
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishArtifactsInManifest -restore -msbuildEngine dotnet
-            /p:PublishingInfraVersion=2
-            /p:IsStableBuild=$(IsStableBuild)
-            /p:IsInternalBuild=$(IsInternalBuild)
-            /p:RepositoryName=$(Build.Repository.Name)
-            /p:CommitSha=$(Build.SourceVersion)
-            /p:NugetPath=$(NuGetExeToolPath)
-            /p:AzdoTargetFeedPAT='$(dn-bot-dnceng-universal-packages-rw)'
-            /p:AzureStorageTargetFeedPAT='$(dotnetfeed-storage-access-key-1)'
-            /p:BARBuildId=$(BARBuildId)
-            /p:MaestroApiEndpoint='$(MaestroApiEndPoint)'
-            /p:BuildAssetRegistryToken='$(MaestroApiAccessToken)'
-            /p:ManifestsBasePath='$(Build.ArtifactStagingDirectory)/AssetManifests/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts/'
-            /p:Configuration=Release
-            /p:PublishInstallersAndChecksums=${{ parameters.publishInstallersAndChecksums }}
-            /p:ChecksumsTargetStaticFeed=$(InternalChecksumsBlobFeedUrl)
-            /p:ChecksumsAzureAccountKey=$(InternalChecksumsBlobFeedKey)
-            /p:InstallersTargetStaticFeed=$(InternalInstallersBlobFeedUrl)
-            /p:InstallersAzureAccountKey=$(InternalInstallersBlobFeedKey)
-            /p:AzureDevOpsStaticShippingFeed='${{ parameters.shippingFeed }}'
-            /p:AzureDevOpsStaticShippingFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticTransportFeed='${{ parameters.transportFeed }}'
-            /p:AzureDevOpsStaticTransportFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticSymbolsFeed='${{ parameters.symbolsFeed }}'
-            /p:AzureDevOpsStaticSymbolsFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:PublishToMSDL=false
-            ${{ parameters.artifactsPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'AssetsPublishing'
-
-      - template: ../../steps/add-build-to-channel.yml
-        parameters:
-          ChannelId: ${{ parameters.channelId }}
diff --git a/eng/common/templates/post-build/channels/generic-public-channel.yml b/eng/common/templates/post-build/channels/generic-public-channel.yml
deleted file mode 100644
index 3220c6a4f92..00000000000
--- a/eng/common/templates/post-build/channels/generic-public-channel.yml
+++ /dev/null
@@ -1,192 +0,0 @@
-parameters:
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-  artifactsPublishingAdditionalParameters: ''
-  dependsOn:
-  - Validate
-  publishInstallersAndChecksums: true
-  symbolPublishingAdditionalParameters: ''
-  stageName: ''
-  channelName: ''
-  channelId: ''
-  transportFeed: ''
-  shippingFeed: ''
-  symbolsFeed: ''
-  # If the channel name is empty, no links will be generated
-  akaMSChannelName: ''
-
-stages:
-- stage: ${{ parameters.stageName }}
-  dependsOn: ${{ parameters.dependsOn }}
-  variables:
-    - template: ../common-variables.yml
-  displayName: ${{ parameters.channelName }} Publishing
-  jobs:
-  - template: ../setup-maestro-vars.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-  - job: publish_symbols
-    displayName: Symbol Publishing
-    dependsOn: setupMaestroVars
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    variables:
-      - group: DotNet-Symbol-Server-Pats
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PdbArtifacts/**
-            BlobArtifacts/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
-      # otherwise it'll complain about accessing a private feed.
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet
-            /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
-            /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
-            /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
-            /p:Configuration=Release
-            ${{ parameters.symbolPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'SymbolPublishing'
-
-  - job: publish_assets
-    displayName: Publish Assets
-    dependsOn: setupMaestroVars
-    timeoutInMinutes: 120
-    variables:
-      - name: BARBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      - name: IsStableBuild
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.IsStableBuild'] ]
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-      - name: ArtifactsCategory
-        value: ${{ coalesce(variables._DotNetArtifactsCategory, '.NETCore') }}
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PackageArtifacts/**
-            BlobArtifacts/**
-            AssetManifests/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      - task: NuGetToolInstaller@1
-        displayName: 'Install NuGet.exe'
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish Assets
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishArtifactsInManifest -restore -msbuildEngine dotnet
-            /p:PublishingInfraVersion=2
-            /p:ArtifactsCategory=$(ArtifactsCategory)
-            /p:IsStableBuild=$(IsStableBuild)
-            /p:IsInternalBuild=$(IsInternalBuild)
-            /p:RepositoryName=$(Build.Repository.Name)
-            /p:CommitSha=$(Build.SourceVersion)
-            /p:NugetPath=$(NuGetExeToolPath)
-            /p:AzdoTargetFeedPAT='$(dn-bot-dnceng-universal-packages-rw)'
-            /p:AzureStorageTargetFeedPAT='$(dotnetfeed-storage-access-key-1)'
-            /p:BARBuildId=$(BARBuildId)
-            /p:MaestroApiEndpoint='$(MaestroApiEndPoint)'
-            /p:BuildAssetRegistryToken='$(MaestroApiAccessToken)'
-            /p:ManifestsBasePath='$(Build.ArtifactStagingDirectory)/AssetManifests/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts/'
-            /p:Configuration=Release
-            /p:PublishInstallersAndChecksums=${{ parameters.publishInstallersAndChecksums }}
-            /p:InstallersTargetStaticFeed=$(InstallersBlobFeedUrl)
-            /p:InstallersAzureAccountKey=$(dotnetcli-storage-key)
-            /p:ChecksumsTargetStaticFeed=$(ChecksumsBlobFeedUrl)
-            /p:ChecksumsAzureAccountKey=$(dotnetclichecksums-storage-key)
-            /p:AzureDevOpsStaticShippingFeed='${{ parameters.shippingFeed }}'
-            /p:AzureDevOpsStaticShippingFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticTransportFeed='${{ parameters.transportFeed }}'
-            /p:AzureDevOpsStaticTransportFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticSymbolsFeed='${{ parameters.symbolsFeed }}'
-            /p:AzureDevOpsStaticSymbolsFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:LatestLinkShortUrlPrefix=dotnet/'${{ parameters.akaMSChannelName }}'
-            /p:AkaMSClientId=$(akams-client-id)
-            /p:AkaMSClientSecret=$(akams-client-secret)
-            ${{ parameters.artifactsPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'AssetsPublishing'
-
-      - template: ../../steps/add-build-to-channel.yml
-        parameters:
-          ChannelId: ${{ parameters.channelId }}
diff --git a/eng/common/templates/post-build/common-variables.yml b/eng/common/templates/post-build/common-variables.yml
index c99fd750376..1ac7f49a43c 100644
--- a/eng/common/templates/post-build/common-variables.yml
+++ b/eng/common/templates/post-build/common-variables.yml
@@ -4,54 +4,6 @@ variables:
   - group: DotNet-DotNetCli-Storage
   - group: DotNet-MSRC-Storage
   - group: Publish-Build-Assets
-    
-  # .NET Core 3.1 Dev
-  - name: PublicDevRelease_31_Channel_Id
-    value: 128
-
-  # .NET 5 Dev
-  - name: Net_5_Dev_Channel_Id
-    value: 131
-
-  # .NET Eng - Validation
-  - name: Net_Eng_Validation_Channel_Id
-    value: 9
-
-  # .NET Eng - Latest
-  - name: Net_Eng_Latest_Channel_Id
-    value: 2
-
-  # .NET 3 Eng - Validation
-  - name: NET_3_Eng_Validation_Channel_Id
-    value: 390
-
-  # .NET 3 Eng
-  - name: NetCore_3_Tools_Channel_Id
-    value: 344
-
-  # .NET Core 3.0 Internal Servicing
-  - name: InternalServicing_30_Channel_Id
-    value: 184
-
-  # .NET Core 3.0 Release
-  - name: PublicRelease_30_Channel_Id
-    value: 19
-
-  # .NET Core 3.1 Release
-  - name: PublicRelease_31_Channel_Id
-    value: 129
-
-  # General Testing
-  - name: GeneralTesting_Channel_Id
-    value: 529
-
-  # .NET Core 3.1 Blazor Features
-  - name: NetCore_31_Blazor_Features_Channel_Id
-    value: 531
-
-  # .NET Core Experimental
-  - name: NetCore_Experimental_Channel_Id
-    value: 562
 
   # Whether the build is internal or not
   - name: IsInternalBuild
@@ -70,30 +22,5 @@ variables:
   - name: SymbolToolVersion
     value: 1.0.1
 
-  # Feed Configurations
-  # These should include the suffix "/index.json"
-
-  # Default locations for Installers and checksums
-  # Public Locations
-  - name: ChecksumsBlobFeedUrl
-    value: https://dotnetclichecksums.blob.core.windows.net/dotnet/index.json
-  - name: InstallersBlobFeedUrl
-    value: https://dotnetcli.blob.core.windows.net/dotnet/index.json
-
-  # Private Locations
-  - name: InternalChecksumsBlobFeedUrl
-    value: https://dotnetclichecksumsmsrc.blob.core.windows.net/dotnet/index.json
-  - name: InternalChecksumsBlobFeedKey
-    value: $(dotnetclichecksumsmsrc-storage-key)
-
-  - name: InternalInstallersBlobFeedUrl
-    value: https://dotnetclimsrc.blob.core.windows.net/dotnet/index.json
-  - name: InternalInstallersBlobFeedKey
-    value: $(dotnetclimsrc-access-key)
-
-  # Skip component governance and codesign validation for SDL. These jobs
-  # create no content.
-  - name: skipComponentGovernanceDetection
-    value: true
   - name: runCodesignValidationInjection
     value: false
diff --git a/eng/common/templates/post-build/post-build.yml b/eng/common/templates/post-build/post-build.yml
index 4f79cf0f337..24e92a275a4 100644
--- a/eng/common/templates/post-build/post-build.yml
+++ b/eng/common/templates/post-build/post-build.yml
@@ -1,113 +1,114 @@
 parameters:
- # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
-  # Publishing V2 accepts optionally outlining the publishing stages - default is inline.
-  # Publishing V3 DOES NOT accept inlining the publishing stages.
-  publishingInfraVersion: 2
-  # When set to true the publishing templates from the repo will be used
-  # otherwise Darc add-build-to-channel will be used to trigger the promotion pipeline
-  inline: true
-
-  # Only used if inline==false. When set to true will stall the current build until
-  # the Promotion Pipeline build finishes. Otherwise, the current build will continue 
-  # execution concurrently with the promotion build.
-  waitPublishingFinish: true
-
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-
-  enableSourceLinkValidation: false
-  enableSigningValidation: true
-  enableSymbolValidation: false
-  enableNugetValidation: true
-  publishInstallersAndChecksums: true
-  SDLValidationParameters:
-    enable: false
-    continueOnError: false
-    params: ''
-    artifactNames: ''
-    downloadArtifacts: true
+  # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
+  # Publishing V1 is no longer supported
+  # Publishing V2 is no longer supported
+  # Publishing V3 is the default
+  - name: publishingInfraVersion
+    displayName: Which version of publishing should be used to promote the build definition?
+    type: number
+    default: 3
+    values:
+    - 3
+
+  - name: BARBuildId
+    displayName: BAR Build Id
+    type: number
+    default: 0
+
+  - name: PromoteToChannelIds
+    displayName: Channel to promote BARBuildId to
+    type: string
+    default: ''
+
+  - name: enableSourceLinkValidation
+    displayName: Enable SourceLink validation
+    type: boolean
+    default: false
+
+  - name: enableSigningValidation
+    displayName: Enable signing validation
+    type: boolean
+    default: true
+
+  - name: enableSymbolValidation
+    displayName: Enable symbol validation
+    type: boolean
+    default: false
+
+  - name: enableNugetValidation
+    displayName: Enable NuGet validation
+    type: boolean
+    default: true
+    
+  - name: publishInstallersAndChecksums
+    displayName: Publish installers and checksums
+    type: boolean
+    default: true
+
+  - name: SDLValidationParameters
+    type: object
+    default:
+      enable: false
+      continueOnError: false
+      params: ''
+      artifactNames: ''
+      downloadArtifacts: true
 
   # These parameters let the user customize the call to sdk-task.ps1 for publishing
   # symbols & general artifacts as well as for signing validation
-  symbolPublishingAdditionalParameters: ''
-  artifactsPublishingAdditionalParameters: ''
-  signingValidationAdditionalParameters: ''
+  - name: symbolPublishingAdditionalParameters
+    displayName: Symbol publishing additional parameters
+    type: string
+    default: ''
+
+  - name: artifactsPublishingAdditionalParameters
+    displayName: Artifact publishing additional parameters
+    type: string
+    default: ''
+
+  - name: signingValidationAdditionalParameters
+    displayName: Signing validation additional parameters
+    type: string
+    default: ''
 
   # Which stages should finish execution before post-build stages start
-  validateDependsOn:
-  - build
-  publishDependsOn: 
-  - Validate
+  - name: validateDependsOn
+    type: object
+    default:
+    - build
 
-  # Channel ID's instantiated in this file.
-  # When adding a new channel implementation the call to `check-channel-consistency.ps1` 
-  # needs to be updated with the new channel ID
-  NetEngLatestChannelId: 2
-  NetEngValidationChannelId: 9
-  NetDev5ChannelId: 131
-  NetDev6ChannelId: 1296
-  GeneralTestingChannelId: 529
-  NETCoreToolingDevChannelId: 548
-  NETCoreToolingReleaseChannelId: 549
-  NETInternalToolingChannelId: 551
-  NETCoreExperimentalChannelId: 562
-  NetEngServicesIntChannelId: 678
-  NetEngServicesProdChannelId: 679
-  NetCoreSDK313xxChannelId: 759
-  NetCoreSDK313xxInternalChannelId: 760
-  NetCoreSDK314xxChannelId: 921
-  NetCoreSDK314xxInternalChannelId: 922
-  VS166ChannelId: 1010
-  VS167ChannelId: 1011
-  VS168ChannelId: 1154
-  VSMasterChannelId: 1012
-  VS169ChannelId: 1473
-  VS1610ChannelId: 1692
+  - name: publishDependsOn
+    type: object
+    default:
+    - Validate
 
 stages:
-- ${{ if or(and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')), eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+- ${{ if or(eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
   - stage: Validate
     dependsOn: ${{ parameters.validateDependsOn }}
     displayName: Validate Build Assets
     variables:
       - template: common-variables.yml
     jobs:
-    - template: setup-maestro-vars.yml
-      parameters:
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-    - ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
-      - job:
-        displayName: Post-build Checks
-        dependsOn: setupMaestroVars
-        variables:
-          - name: TargetChannels
-            value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'] ]
-        pool:
-          vmImage: 'windows-2019'
-        steps:
-          - task: PowerShell@2
-            displayName: Maestro Channels Consistency
-            inputs:
-              filePath: $(Build.SourcesDirectory)/eng/common/post-build/check-channel-consistency.ps1
-              arguments: -PromoteToChannels "$(TargetChannels)"
-                -AvailableChannelIds ${{parameters.NetEngLatestChannelId}},${{parameters.NetEngValidationChannelId}},${{parameters.NetDev5ChannelId}},${{parameters.NetDev6ChannelId}},${{parameters.GeneralTestingChannelId}},${{parameters.NETCoreToolingDevChannelId}},${{parameters.NETCoreToolingReleaseChannelId}},${{parameters.NETInternalToolingChannelId}},${{parameters.NETCoreExperimentalChannelId}},${{parameters.NetEngServicesIntChannelId}},${{parameters.NetEngServicesProdChannelId}},${{parameters.NetCoreSDK313xxChannelId}},${{parameters.NetCoreSDK313xxInternalChannelId}},${{parameters.NetCoreSDK314xxChannelId}},${{parameters.NetCoreSDK314xxInternalChannelId}},${{parameters.VS166ChannelId}},${{parameters.VS167ChannelId}},${{parameters.VS168ChannelId}},${{parameters.VSMasterChannelId}},${{parameters.VS169ChannelId}},${{parameters.VS1610ChannelId}}
-
     - job:
       displayName: NuGet Validation
-      dependsOn: setupMaestroVars
       condition: eq( ${{ parameters.enableNugetValidation }}, 'true')
       pool:
-        vmImage: 'windows-2019'
-      variables:
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
+
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Package Artifacts
           inputs:
@@ -128,19 +129,22 @@ stages:
 
     - job:
       displayName: Signing Validation
-      dependsOn: setupMaestroVars
       condition: and( eq( ${{ parameters.enableSigningValidation }}, 'true'), ne( variables['PostBuildSign'], 'true'))
-      variables:
-        - template: common-variables.yml
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
       pool:
-        vmImage: 'windows-2019'
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Package Artifacts
           inputs:
@@ -185,19 +189,22 @@ stages:
 
     - job:
       displayName: SourceLink Validation
-      dependsOn: setupMaestroVars
       condition: eq( ${{ parameters.enableSourceLinkValidation }}, 'true')
-      variables:
-        - template: common-variables.yml
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
       pool:
-        vmImage: 'windows-2019'
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Blob Artifacts
           inputs:
@@ -223,367 +230,46 @@ stages:
     - template: /eng/common/templates/job/execute-sdl.yml
       parameters:
         enable: ${{ parameters.SDLValidationParameters.enable }}
-        dependsOn: setupMaestroVars
         additionalParameters: ${{ parameters.SDLValidationParameters.params }}
         continueOnError: ${{ parameters.SDLValidationParameters.continueOnError }}
         artifactNames: ${{ parameters.SDLValidationParameters.artifactNames }}
         downloadArtifacts: ${{ parameters.SDLValidationParameters.downloadArtifacts }}
 
-- ${{ if or(ge(parameters.publishingInfraVersion, 3), eq(parameters.inline, 'false')) }}:
-  - stage: publish_using_darc
-    ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
-      dependsOn: ${{ parameters.publishDependsOn }}
-    ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
-      dependsOn: ${{ parameters.validateDependsOn }}
-    displayName: Publish using Darc
-    variables:
-      - template: common-variables.yml
-    jobs:
-    - template: setup-maestro-vars.yml
-      parameters:
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-    - job:
-      displayName: Publish Using Darc
-      dependsOn: setupMaestroVars
-      timeoutInMinutes: 120
-      variables:
-        - name: BARBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      pool:
-        vmImage: 'windows-2019'
-      steps:
-        - task: PowerShell@2
-          displayName: Publish Using Darc
-          inputs:
-            filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
-            arguments: -BuildId $(BARBuildId) 
-              -PublishingInfraVersion ${{ parameters.PublishingInfraVersion }}
-              -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
-              -MaestroToken '$(MaestroApiAccessToken)'
-              -WaitPublishingFinish ${{ parameters.waitPublishingFinish }}
-              -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
-              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
-              -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
-
-- ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NetCore_Dev5_Publish'
-      channelName: '.NET 5 Dev'
-      akaMSChannelName: 'net5/dev'
-      channelId: ${{ parameters.NetDev5ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NetCore_Dev6_Publish'
-      channelName: '.NET 6 Dev'
-      akaMSChannelName: 'net6/dev'
-      channelId: ${{ parameters.NetDev6ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Latest_Publish'
-      channelName: '.NET Eng - Latest'
-      akaMSChannelName: 'eng/daily'
-      channelId: ${{ parameters.NetEngLatestChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Validation_Publish'
-      channelName: '.NET Eng - Validation'
-      akaMSChannelName: 'eng/validation'
-      channelId: ${{ parameters.NetEngValidationChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'General_Testing_Publish'
-      channelName: 'General Testing'
-      akaMSChannelName: 'generaltesting'
-      channelId: ${{ parameters.GeneralTestingChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Tooling_Dev_Publishing'
-      channelName: '.NET Core Tooling Dev'
-      channelId: ${{ parameters.NETCoreToolingDevChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Tooling_Release_Publishing'
-      channelName: '.NET Core Tooling Release'
-      channelId: ${{ parameters.NETCoreToolingReleaseChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NET_Internal_Tooling_Publishing'
-      channelName: '.NET Internal Tooling'
-      channelId: ${{ parameters.NETInternalToolingChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Experimental_Publishing'
-      channelName: '.NET Core Experimental'
-      channelId: ${{ parameters.NETCoreExperimentalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Services_Int_Publish'
-      channelName: '.NET Eng Services - Int'
-      channelId: ${{ parameters.NetEngServicesIntChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Services_Prod_Publish'
-      channelName: '.NET Eng Services - Prod'
-      channelId: ${{ parameters.NetEngServicesProdChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_314xx_Publishing'
-      channelName: '.NET Core SDK 3.1.4xx'
-      channelId: ${{ parameters.NetCoreSDK314xxChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_314xx_Internal_Publishing'
-      channelName: '.NET Core SDK 3.1.4xx Internal'
-      channelId: ${{ parameters.NetCoreSDK314xxInternalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-symbols/nuget/v3/index.json' 
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_313xx_Publishing'
-      channelName: '.NET Core SDK 3.1.3xx'
-      channelId: ${{ parameters.NetCoreSDK313xxChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_313xx_Internal_Publishing'
-      channelName: '.NET Core SDK 3.1.3xx Internal'
-      channelId: ${{ parameters.NetCoreSDK313xxInternalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-symbols/nuget/v3/index.json' 
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_6_Publishing'
-      channelName: 'VS 16.6'
-      channelId: ${{ parameters.VS166ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_7_Publishing'
-      channelName: 'VS 16.7'
-      channelId: ${{ parameters.VS167ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-      
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_8_Publishing'
-      channelName: 'VS 16.8'
-      channelId: ${{ parameters.VS168ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_Master_Publishing'
-      channelName: 'VS Master'
-      channelId: ${{ parameters.VSMasterChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_16_9_Publishing'
-      channelName: 'VS 16.9'
-      channelId: ${{ parameters.VS169ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_16_10_Publishing'
-      channelName: 'VS 16.10'
-      channelId: ${{ parameters.VS1610ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
+- stage: publish_using_darc
+  ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+    dependsOn: ${{ parameters.publishDependsOn }}
+  ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
+    dependsOn: ${{ parameters.validateDependsOn }}
+  displayName: Publish using Darc
+  variables:
+    - template: common-variables.yml
+  jobs:
+  - job:
+    displayName: Publish Using Darc
+    timeoutInMinutes: 120
+    pool:
+      # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
+    steps:
+      - template: setup-maestro-vars.yml
+        parameters:
+          BARBuildId: ${{ parameters.BARBuildId }}
+          PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
+      - task: PowerShell@2
+        displayName: Publish Using Darc
+        inputs:
+          filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
+          arguments: -BuildId $(BARBuildId) 
+            -PublishingInfraVersion ${{ parameters.publishingInfraVersion }}
+            -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
+            -MaestroToken '$(MaestroApiAccessToken)'
+            -WaitPublishingFinish true
+            -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
+            -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
\ No newline at end of file
diff --git a/eng/common/templates/post-build/setup-maestro-vars.yml b/eng/common/templates/post-build/setup-maestro-vars.yml
index 4a22b2e6f6d..0c87f149a4a 100644
--- a/eng/common/templates/post-build/setup-maestro-vars.yml
+++ b/eng/common/templates/post-build/setup-maestro-vars.yml
@@ -2,77 +2,69 @@ parameters:
   BARBuildId: ''
   PromoteToChannelIds: ''
 
-jobs:
-- job: setupMaestroVars
-  displayName: Setup Maestro Vars
-  variables:
-    - template: common-variables.yml
-  pool:
-    vmImage: 'windows-2019'
-  steps:
-    - checkout: none
-
-    - ${{ if eq(coalesce(parameters.PromoteToChannelIds, 0), 0) }}:
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Release Configs
-        inputs:
-          buildType: current
-          artifactName: ReleaseConfigs
-          checkDownloadedFiles: true
-
-    - task: PowerShell@2
-      name: setReleaseVars
-      displayName: Set Release Configs Vars
+steps:
+  - ${{ if eq(coalesce(parameters.PromoteToChannelIds, 0), 0) }}:
+    - task: DownloadBuildArtifacts@0
+      displayName: Download Release Configs
       inputs:
-        targetType: inline
-        script: |
-          try {
-            if (!$Env:PromoteToMaestroChannels -or $Env:PromoteToMaestroChannels.Trim() -eq '') {
-              $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt
+        buildType: current
+        artifactName: ReleaseConfigs
+        checkDownloadedFiles: true
 
-              $BarId = $Content | Select -Index 0
-              $Channels = $Content | Select -Index 1             
-              $IsStableBuild = $Content | Select -Index 2
+  - task: PowerShell@2
+    name: setReleaseVars
+    displayName: Set Release Configs Vars
+    inputs:
+      targetType: inline
+      pwsh: true
+      script: |
+        try {
+          if (!$Env:PromoteToMaestroChannels -or $Env:PromoteToMaestroChannels.Trim() -eq '') {
+            $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt
 
-              $AzureDevOpsProject = $Env:System_TeamProject
-              $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
-              $AzureDevOpsBuildId = $Env:Build_BuildId
-            }
-            else {
-              $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"
+            $BarId = $Content | Select -Index 0
+            $Channels = $Content | Select -Index 1             
+            $IsStableBuild = $Content | Select -Index 2
 
-              $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
-              $apiHeaders.Add('Accept', 'application/json')
-              $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")
-
-              $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
-             
-              $BarId = $Env:BARBuildId
-              $Channels = $Env:PromoteToMaestroChannels -split ","
-              $Channels = $Channels -join "]["
-              $Channels = "[$Channels]"
+            $AzureDevOpsProject = $Env:System_TeamProject
+            $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
+            $AzureDevOpsBuildId = $Env:Build_BuildId
+          }
+          else {
+            $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"
 
-              $IsStableBuild = $buildInfo.stable
-              $AzureDevOpsProject = $buildInfo.azureDevOpsProject
-              $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
-              $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
-            }
+            $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
+            $apiHeaders.Add('Accept', 'application/json')
+            $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")
 
-            Write-Host "##vso[task.setvariable variable=BARBuildId;isOutput=true]$BarId"
-            Write-Host "##vso[task.setvariable variable=TargetChannels;isOutput=true]$Channels"
-            Write-Host "##vso[task.setvariable variable=IsStableBuild;isOutput=true]$IsStableBuild"
+            $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
+            
+            $BarId = $Env:BARBuildId
+            $Channels = $Env:PromoteToMaestroChannels -split ","
+            $Channels = $Channels -join "]["
+            $Channels = "[$Channels]"
 
-            Write-Host "##vso[task.setvariable variable=AzDOProjectName;isOutput=true]$AzureDevOpsProject"
-            Write-Host "##vso[task.setvariable variable=AzDOPipelineId;isOutput=true]$AzureDevOpsBuildDefinitionId"
-            Write-Host "##vso[task.setvariable variable=AzDOBuildId;isOutput=true]$AzureDevOpsBuildId"
+            $IsStableBuild = $buildInfo.stable
+            $AzureDevOpsProject = $buildInfo.azureDevOpsProject
+            $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
+            $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
           }
-          catch {
-            Write-Host $_
-            Write-Host $_.Exception
-            Write-Host $_.ScriptStackTrace
-            exit 1
-          }
-      env:
-        MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToMaestroChannels: ${{ parameters.PromoteToChannelIds }}
+
+          Write-Host "##vso[task.setvariable variable=BARBuildId]$BarId"
+          Write-Host "##vso[task.setvariable variable=TargetChannels]$Channels"
+          Write-Host "##vso[task.setvariable variable=IsStableBuild]$IsStableBuild"
+
+          Write-Host "##vso[task.setvariable variable=AzDOProjectName]$AzureDevOpsProject"
+          Write-Host "##vso[task.setvariable variable=AzDOPipelineId]$AzureDevOpsBuildDefinitionId"
+          Write-Host "##vso[task.setvariable variable=AzDOBuildId]$AzureDevOpsBuildId"
+        }
+        catch {
+          Write-Host $_
+          Write-Host $_.Exception
+          Write-Host $_.ScriptStackTrace
+          exit 1
+        }
+    env:
+      MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
+      BARBuildId: ${{ parameters.BARBuildId }}
+      PromoteToMaestroChannels: ${{ parameters.PromoteToChannelIds }}
diff --git a/eng/common/templates/steps/execute-codeql.yml b/eng/common/templates/steps/execute-codeql.yml
new file mode 100644
index 00000000000..3930b163021
--- /dev/null
+++ b/eng/common/templates/steps/execute-codeql.yml
@@ -0,0 +1,32 @@
+parameters:
+  # Language that should be analyzed. Defaults to csharp
+  language: csharp
+  # Build Commands
+  buildCommands: ''
+  overrideParameters: ''                                       # Optional: to override values for parameters.
+  additionalParameters: ''                                     # Optional: parameters that need user specific values eg: '-SourceToolsList @("abc","def") -ArtifactToolsList @("ghi","jkl")'
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+  # Optional: if true, publish the '.gdn' folder as a pipeline artifact. This can help with in-depth
+  # diagnosis of problems with specific tool configurations.
+  publishGuardianDirectoryToPipeline: false
+  # The script to run to execute all SDL tools. Use this if you want to use a script to define SDL
+  # parameters rather than relying on YAML. It may be better to use a local script, because you can
+  # reproduce results locally without piecing together a command based on the YAML.
+  executeAllSdlToolsScript: 'eng/common/sdl/execute-all-sdl-tools.ps1'
+  # There is some sort of bug (has been reported) in Azure DevOps where if this parameter is named
+  # 'continueOnError', the parameter value is not correctly picked up.
+  # This can also be remedied by the caller (post-build.yml) if it does not use a nested parameter
+  # optional: determines whether to continue the build if the step errors;
+  sdlContinueOnError: false
+
+steps:
+- template: /eng/common/templates/steps/execute-sdl.yml
+  parameters:
+    overrideGuardianVersion: ${{ parameters.overrideGuardianVersion }}
+    executeAllSdlToolsScript: ${{ parameters.executeAllSdlToolsScript }}
+    overrideParameters: ${{ parameters.overrideParameters }}
+    additionalParameters: '${{ parameters.additionalParameters }}
+      -CodeQLAdditionalRunConfigParams @("BuildCommands < ${{ parameters.buildCommands }}", "Language < ${{ parameters.language }}")'
+    publishGuardianDirectoryToPipeline: ${{ parameters.publishGuardianDirectoryToPipeline }}
+    sdlContinueOnError: ${{ parameters.sdlContinueOnError }}
\ No newline at end of file
diff --git a/eng/common/templates/steps/execute-sdl.yml b/eng/common/templates/steps/execute-sdl.yml
new file mode 100644
index 00000000000..7b8ee18a28d
--- /dev/null
+++ b/eng/common/templates/steps/execute-sdl.yml
@@ -0,0 +1,68 @@
+parameters:
+  overrideGuardianVersion: ''
+  executeAllSdlToolsScript: ''
+  overrideParameters: ''
+  additionalParameters: ''
+  publishGuardianDirectoryToPipeline: false
+  sdlContinueOnError: false
+  condition: ''
+
+steps:
+- ${{ if ne(parameters.overrideGuardianVersion, '') }}:
+  - powershell: |
+      $content = Get-Content $(GuardianPackagesConfigFile)
+
+      Write-Host "packages.config content was:`n$content"
+
+      $content = $content.Replace('$(DefaultGuardianVersion)', '$(GuardianVersion)')
+      $content | Set-Content $(GuardianPackagesConfigFile)
+
+      Write-Host "packages.config content updated to:`n$content"
+    displayName: Use overridden Guardian version ${{ parameters.overrideGuardianVersion }}
+
+- task: NuGetToolInstaller@1
+  displayName: 'Install NuGet.exe'
+  
+- task: NuGetCommand@2
+  displayName: 'Install Guardian'
+  inputs:
+    restoreSolution: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
+    feedsToUse: config
+    nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
+    externalFeedCredentials: GuardianConnect
+    restoreDirectory: $(Build.SourcesDirectory)\.packages
+
+- ${{ if ne(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
+    displayName: Execute SDL
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if eq(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }}
+      -GuardianPackageName Microsoft.Guardian.Cli.$(GuardianVersion)
+      -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
+      -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
+      ${{ parameters.additionalParameters }}
+    displayName: Execute SDL
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
+  # We want to publish the Guardian results and configuration for easy diagnosis. However, the
+  # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
+  # tooling files. Some of these files are large and aren't useful during an investigation, so
+  # exclude them by simply deleting them before publishing. (As of writing, there is no documented
+  # way to selectively exclude a dir from the pipeline artifact publish task.)
+  - task: DeleteFiles@1
+    displayName: Delete Guardian dependencies to avoid uploading
+    inputs:
+      SourceFolder: $(Agent.BuildDirectory)/.gdn
+      Contents: |
+        c
+        i
+    condition: succeededOrFailed()
+  - publish: $(Agent.BuildDirectory)/.gdn
+    artifact: GuardianConfiguration
+    displayName: Publish GuardianConfiguration
+    condition: succeededOrFailed()
\ No newline at end of file
diff --git a/eng/common/templates/steps/generate-sbom.yml b/eng/common/templates/steps/generate-sbom.yml
new file mode 100644
index 00000000000..f4d7937f379
--- /dev/null
+++ b/eng/common/templates/steps/generate-sbom.yml
@@ -0,0 +1,44 @@
+# BuildDropPath - The root folder of the drop directory for which the manifest file will be generated.
+# PackageName - The name of the package this SBOM represents.
+# PackageVersion - The version of the package this SBOM represents. 
+# ManifestDirPath - The path of the directory where the generated manifest files will be placed
+
+parameters:
+  PackageVersion: 6.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
+  PackageName: '.NET'
+  ManifestDirPath: $(Build.ArtifactStagingDirectory)/sbom
+  sbomContinueOnError: true
+
+steps:
+- task: PowerShell@2 
+  displayName: Prep for SBOM generation in (Non-linux)
+  condition: or(eq(variables['Agent.Os'], 'Windows_NT'), eq(variables['Agent.Os'], 'Darwin'))
+  inputs: 
+    filePath: ./eng/common/generate-sbom-prep.ps1
+    arguments: ${{parameters.manifestDirPath}}
+
+# Chmodding is a workaround for https://github.com/dotnet/arcade/issues/8461
+- script: |
+    chmod +x ./eng/common/generate-sbom-prep.sh
+    ./eng/common/generate-sbom-prep.sh ${{parameters.manifestDirPath}}
+  displayName: Prep for SBOM generation in (Linux)
+  condition: eq(variables['Agent.Os'], 'Linux')
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+
+- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
+  displayName: 'Generate SBOM manifest'
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+  inputs:
+      PackageName: ${{ parameters.packageName }}
+      BuildDropPath: ${{ parameters.buildDropPath }}
+      PackageVersion: ${{ parameters.packageVersion }}
+      ManifestDirPath: ${{ parameters.manifestDirPath }}
+
+- task: PublishPipelineArtifact@1
+  displayName: Publish SBOM manifest
+  continueOnError: ${{parameters.sbomContinueOnError}}
+  inputs:
+    targetPath: '${{parameters.manifestDirPath}}'
+    artifactName: $(ARTIFACT_NAME)
+
diff --git a/eng/common/templates/steps/source-build.yml b/eng/common/templates/steps/source-build.yml
index ba40dc82f14..abb1b2bcda4 100644
--- a/eng/common/templates/steps/source-build.yml
+++ b/eng/common/templates/steps/source-build.yml
@@ -43,8 +43,8 @@ steps:
     # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
     # in the default public locations.
     internalRuntimeDownloadArgs=
-    if [ '$(dotnetclimsrc-read-sas-token-base64)' != '$''(dotnetclimsrc-read-sas-token-base64)' ]; then
-      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64) --runtimesourcefeed https://dotnetclimsrc.blob.core.windows.net/dotnet --runtimesourcefeedkey $(dotnetclimsrc-read-sas-token-base64)'
+    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
+      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://dotnetbuilds.blob.core.windows.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
     fi
 
     buildConfig=Release
diff --git a/eng/common/templates/variables/sdl-variables.yml b/eng/common/templates/variables/sdl-variables.yml
new file mode 100644
index 00000000000..1a860bd0406
--- /dev/null
+++ b/eng/common/templates/variables/sdl-variables.yml
@@ -0,0 +1,7 @@
+variables:
+# The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+# sync with the packages.config file.
+- name: DefaultGuardianVersion
+  value: 0.110.1
+- name: GuardianPackagesConfigFile
+  value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
\ No newline at end of file
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index 3866762f1e3..06cf49477ed 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -11,17 +11,22 @@
     <PackageReference Update="BenchmarkDotNet" Version="0.13.1" />
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.3" />
-    <PackageReference Update="Microsoft.CodeQuality.Analyzers" Version="3.3.2" PrivateAssets="all" />
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" />
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4492" />
+    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.2.2146" PrivateAssets="All" />
+    <PackageReference Update="Microsoft.Win32.Registry" Version="5.0.0" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
-    <PackageReference Update="SourceLink.Create.CommandLine" Version="2.1.2" />
-    <PackageReference Update="StyleCop.Analyzers" Version="1.2.0-beta.164" PrivateAssets="all" />
+    <PackageReference Update="System.CodeDom" Version="6.0.0" />
+    <PackageReference Update="System.Private.Uri" Version="4.3.2" />
+    <PackageReference Update="System.Runtime" Version="4.3.1" />
+    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="6.0.1" />
+    <PackageReference Update="System.Security.Cryptography.Xml" Version="6.0.0" />
+    <PackageReference Update="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
+  <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'">
     <GlobalPackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.3" />
+    <GlobalPackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435" PrivateAssets="all"/>
   </ItemGroup>
 
   <ItemGroup>
diff --git a/global.json b/global.json
index 468291670b5..0ffd34ed01f 100644
--- a/global.json
+++ b/global.json
@@ -5,11 +5,11 @@
   "tools": {
     "dotnet": "6.0.301",
     "vs": {
-      "version": "16.0"
+      "version": "17.0"
     }
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.21573.2"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22314.7"
   }
 }
diff --git a/scripts/Deploy-MSBuild.ps1 b/scripts/Deploy-MSBuild.ps1
index 6bb58a189b1..ef1959fc3b6 100644
--- a/scripts/Deploy-MSBuild.ps1
+++ b/scripts/Deploy-MSBuild.ps1
@@ -4,8 +4,8 @@ Param(
   [string] $destination,
   [ValidateSet('Debug','Release')]
   [string] $configuration = "Debug",
-  [ValidateSet('Core','Desktop')]
-  [string] $runtime = "Desktop"
+  [ValidateSet('Core','Desktop', 'Detect', 'Full')]
+  [string] $runtime = "Detect"
 )
 
 Set-StrictMode -Version "Latest"
@@ -50,6 +50,22 @@ $BackupFolder = New-Item (Join-Path $destination -ChildPath "Backup-$(Get-Date -
 Write-Verbose "Copying $configuration MSBuild to $destination"
 Write-Host "Existing MSBuild assemblies backed up to $BackupFolder"
 
+if ($runtime -eq "Detect") {
+    if ($destination -like "*dotnet*sdk*") {
+        $runtime = "Core"
+        Write-Host "Detected path that looks like an sdk. Writing .NET Core assemblies."
+    }
+    else {
+        $runtime = "Desktop"
+        Write-Host "Detected path that does not look like an sdk. Writing .NET Framework assemblies."
+    }
+}
+else {
+    if ($runtime -eq "Full") {
+        $runtime = "Desktop"
+    }
+}
+
 if ($runtime -eq "Desktop") {
     $targetFramework = "net472"
 } else {
diff --git a/src/Build.OM.UnitTests/AssemblyResources.cs b/src/Build.OM.UnitTests/AssemblyResources.cs
index 962b5b0342f..baa3ffd33ba 100644
--- a/src/Build.OM.UnitTests/AssemblyResources.cs
+++ b/src/Build.OM.UnitTests/AssemblyResources.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index f3003665a5c..c6cd195c9d0 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -15,6 +15,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -935,7 +937,7 @@ public static IEnumerable<object[]> InsertMetadataElemenetBeforeSiblingsTestData
         [MemberData(nameof(InsertMetadataElemenetBeforeSiblingsTestData))]
         public void InsertMetadataElementBeforeSiblings(AddMetadata addMetadata, int position, string expectedItem)
         {
-            Action<ProjectItemElement, ProjectMetadataElement, ProjectMetadataElement> act = (i, c, r) => { i.InsertBeforeChild(c, r);};
+            Action<ProjectItemElement, ProjectMetadataElement, ProjectMetadataElement> act = (i, c, r) => { i.InsertBeforeChild(c, r); };
 
             AssertMetadataConstruction(addMetadata, position, expectedItem, act);
         }
diff --git a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
index 70387ca7c6c..c98ce34d856 100644
--- a/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ElementLocationPublic_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     /// <summary>
@@ -16,7 +18,7 @@ namespace Microsoft.Build.UnitTests.Construction
     public class ElementLocationPublic_Tests
     {
         /// <summary>
-        /// Check that we can get the file name off an element and attribute, even if 
+        /// Check that we can get the file name off an element and attribute, even if
         /// it wouldn't normally have got one because the project wasn't
         /// loaded from disk, or has been edited since.
         /// This is really a test of our XmlDocumentWithLocation.
@@ -82,7 +84,7 @@ public void XmlLocationsAreCached()
         public void LocationStringsMedley()
         {
             string content = @"
-            <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName='t' AssemblyName='a' Condition='true'/>
                     <UsingTask TaskName='t' AssemblyFile='a' Condition='true'/>
                     <ItemDefinitionGroup Condition='true' Label='l'>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
index b94af9ae152..741534ff364 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
@@ -13,6 +13,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -29,7 +31,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose X='Y'/>
                     </Project>
                 ";
@@ -48,7 +50,7 @@ public void ReadInvalidConditionAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose Condition='true'/>
                     </Project>
                 ";
@@ -66,7 +68,7 @@ public void ReadInvalidChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <X/>
                         </Choose>
@@ -86,7 +88,7 @@ public void ReadInvalidWhen()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When>
                                 <PropertyGroup><x/></PropertyGroup>
@@ -111,7 +113,7 @@ public void ReadInvalidOnlyOtherwise()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                         </Choose>
@@ -131,7 +133,7 @@ public void ReadInvalidTwoOtherwise()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                             <Otherwise/>
@@ -152,7 +154,7 @@ public void ReadInvalidOtherwiseBeforeWhen()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <Otherwise/>
                             <When Condition='c'/>
@@ -176,7 +178,7 @@ public void ReadInvalidEmptyChoose()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose/>
                     </Project>
                 ";
@@ -195,7 +197,7 @@ public void ReadInvalidEmptyChoose()
         public void ReadChooseOnlyWhen()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='c'/>
                         </Choose>
@@ -216,7 +218,7 @@ public void ReadChooseOnlyWhen()
         public void ReadChooseBothWhenOtherwise()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='c1'/>
                             <When Condition='c2'/>
@@ -252,7 +254,7 @@ public void ExcessivelyNestedChoose()
                     builder2.Append("</When></Choose>");
                 }
 
-                string content = "<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>";
+                string content = "<Project>";
                 content += builder1.ToString();
                 content += builder2.ToString();
                 content += @"</Project>";
@@ -268,13 +270,13 @@ public void ExcessivelyNestedChoose()
         public void SettingWhenConditionDirties()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Choose>
                             <When Condition='true'>
                               <PropertyGroup>
                                 <p>v1</p>
-                              </PropertyGroup> 
-                            </When>      
+                              </PropertyGroup>
+                            </When>
                         </Choose>
                     </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index 8c6f22b5837..31dd3783930 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -9,11 +9,12 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
-    // <summary>Tests for the ProjectExtensionsElement class.</summary>
-    /// Tests for the  class
+    /// Tests for the <see cref="ProjectExtensionsElement"/> class.
     /// </summary>
     public class ProjectExtensionsElement_Tests
     {
@@ -24,7 +25,7 @@ public class ProjectExtensionsElement_Tests
         public void Read()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a/>
                    </ProjectExtensions>
@@ -34,7 +35,7 @@ public void Read()
             ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
-            Assert.Equal(@"<a xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />", extensions.Content);
+            Assert.Equal(@"<a />", extensions.Content);
         }
 
         /// <summary>
@@ -46,7 +47,7 @@ public void ReadInvalidCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions Condition='c'/>
                  </Project>
                 ";
@@ -64,7 +65,7 @@ public void ReadInvalidDuplicate()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions/>
                    <Target Name='t'/>
                    <ProjectExtensions   />
@@ -86,7 +87,7 @@ public void SetValid()
 
             extensions.Content = "a<b/>c";
 
-            Assert.Equal(@"a<b xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />c", extensions.Content);
+            Assert.Equal(@"a<b />c", extensions.Content);
             Assert.True(extensions.ContainingProject.HasUnsavedChanges);
         }
 
@@ -105,13 +106,13 @@ public void SetInvalidNull()
            );
         }
         /// <summary>
-        /// Delete by ID 
+        /// Delete by ID
         /// </summary>
         [Fact]
         public void DeleteById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -130,13 +131,13 @@ public void DeleteById()
         }
 
         /// <summary>
-        /// Get by ID 
+        /// Get by ID
         /// </summary>
         [Fact]
         public void GetById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -161,7 +162,7 @@ public void GetById()
         public void SetById()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -183,7 +184,7 @@ public void SetById()
         public void SetByIdWhereItAlreadyExists()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions>
                      <a>x</a>
                      <b>y</b>
@@ -204,7 +205,7 @@ public void SetByIdWhereItAlreadyExists()
         private static ProjectExtensionsElement GetEmptyProjectExtensions()
         {
             string content = @"
-                 <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                 <Project>
                    <ProjectExtensions/>
                  </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
index 432f5b8072d..6c04b5ee80d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.OM.UnitTests.Construction
 {
     public class ProjectFormatting_Tests : IDisposable
@@ -69,7 +71,7 @@ public void ProjectCommentFormatting()
         [Fact]
         public void ProjectWhitespaceFormatting()
         {
-            //  Note that there are two spaces after the <ItemGroup> tag on the second line
+            // Note that there are two spaces after the <ItemGroup> tag on the second line
             string content = ObjectModelHelpers.CleanupFileContents(@"
 <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
   <ItemGroup>  
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index 13746b1eed6..d4c31dd57ef 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -13,6 +13,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -40,7 +42,7 @@ public void ReadInvalidMissingProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import/>
                     </Project>
                 ";
@@ -58,7 +60,7 @@ public void ReadInvalidEmptyProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project=''/>
                     </Project>
                 ";
@@ -76,7 +78,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='p' X='Y'/>
                     </Project>
                 ";
@@ -92,7 +94,7 @@ public void ReadInvalidAttribute()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                         <Import Project='i2.proj' Condition='c'/>
                     </Project>
@@ -115,7 +117,7 @@ public void ReadBasic()
         public void SetProjectValid()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                     </Project>
                 ";
@@ -137,7 +139,7 @@ public void SetProjectInvalidEmpty()
             Assert.Throws<ArgumentException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='i1.proj' />
                     </Project>
                 ";
@@ -173,7 +175,7 @@ public void SettingProjectDirties()
 
                 string content = String.Format
                     (
-    @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+    @"<Project>
     <Import Project='{0}'/>
 </Project>",
                     file1
@@ -213,7 +215,7 @@ public void SettingConditionDirties()
 
                 string content = String.Format
                     (
-    @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+    @"<Project>
     <Import Project='{0}'/>
 </Project>",
                     file
@@ -248,14 +250,14 @@ public void ImportWithRelativePath()
             string projectfileContent = String.Format
                 (
                 @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='{0}'/>
                     </Project>
                 ",
                  testTempPath + "\\..\\x.targets"
                  );
             string targetsfileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                     </Project>
                 ";
             try
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index 19989aba62d..3b2b05d094a 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -10,6 +10,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -25,7 +27,7 @@ public class ProjectImportGroupElement_Tests
         public void AddImportWhenNoImportGroupExists()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                     </Project>
                 ";
@@ -35,7 +37,7 @@ public void AddImportWhenNoImportGroupExists()
             project.AddImport("b.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <Import Project='b.proj' />
                     </Project>
@@ -52,7 +54,7 @@ public void AddImportWhenNoImportGroupExists()
         public void AddImportToLastImportGroupWithNoCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup>
                             <Import Project='b.proj' />
@@ -74,7 +76,7 @@ public void AddImportToLastImportGroupWithNoCondition()
             project.AddImport("e.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup>
                             <Import Project='b.proj' />
@@ -103,7 +105,7 @@ public void AddImportToLastImportGroupWithNoCondition()
         public void AddImportOnlyConditionedImportGroupsExist()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup Condition='c1'>
                             <Import Project='b.proj' />
@@ -119,7 +121,7 @@ public void AddImportOnlyConditionedImportGroupsExist()
             project.AddImport("d.proj");
 
             string expectedContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='a.proj' />
                         <ImportGroup Condition='c1'>
                             <Import Project='b.proj' />
@@ -152,7 +154,7 @@ public void ReadNone()
         public void ReadNoChild()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup />
                     </Project>
                 ";
@@ -174,7 +176,7 @@ public void ReadInvalidChildMissingProject()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import/>
                         </ImportGroup>
@@ -195,7 +197,7 @@ public void ReadInvalidChildType()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <PropertyGroup />
                         </ImportGroup>
@@ -216,7 +218,7 @@ public void ReadInvalidParentType()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <ImportGroup />
                         </PropertyGroup>
@@ -236,7 +238,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup X='Y'/>
                     </Project>
                 ";
@@ -252,7 +254,7 @@ public void ReadInvalidAttribute()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                             <Import Project='i2.proj' Condition='c'/>
@@ -280,7 +282,7 @@ public void ReadBasic()
         public void ReadMultipleImportGroups()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                             <Import Project='i2.proj' Condition='c'/>
@@ -315,7 +317,7 @@ public void ReadMultipleImportGroups()
         public void SetProjectValid()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                         </ImportGroup>
@@ -342,7 +344,7 @@ public void SetProjectInvalidEmpty()
             Assert.Throws<ArgumentException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ImportGroup>
                             <Import Project='i1.proj' />
                         </ImportGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
index 0389131d1ea..a7caaaff7f4 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Exceptions;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -22,7 +24,7 @@ public class ProjectItemDefinitionElement_Tests
         public void ReadNoChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i/>
                         </ItemDefinitionGroup>
@@ -43,7 +45,7 @@ public void ReadNoChildren()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m1>v1</m1>
@@ -73,7 +75,7 @@ public void ReadBasic()
         public void ReadBuiltInElementName()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <PropertyGroup/>
                         </ItemDefinitionGroup>
@@ -90,7 +92,7 @@ public void ReadBuiltInElementName()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1'>
                                 <m2 Condition='c'>v2</m2>
@@ -122,63 +124,63 @@ public void ReadMetadata()
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Include='inc' />
-                        </ItemDefinitionGroup> 
+                        </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Update='upd' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Remove='rem' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Exclude='excl' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i KeepMetadata='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i RemoveMetadata='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i KeepDuplicates='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i cOndiTion='true' />
                         </ItemDefinitionGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i LabeL='text' />
                         </ItemDefinitionGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index 197c94939e2..5b081f981f3 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -36,7 +38,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup X='Y'/>
                     </Project>
                 ";
@@ -52,7 +54,7 @@ public void ReadInvalidAttribute()
         public void ReadNoChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup/>
                     </Project>
                 ";
@@ -70,7 +72,7 @@ public void ReadNoChildren()
         public void ReadBasic()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup Condition='c'>
                             <i1/>
                         </ItemDefinitionGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index 9e3310ef8de..5228974a6e7 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -12,6 +12,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -20,7 +22,7 @@ namespace Microsoft.Build.UnitTests.OM.Construction
     public class ProjectItemElement_Tests
     {
         private const string RemoveInTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Remove='i'/>
@@ -30,21 +32,21 @@ public class ProjectItemElement_Tests
                 ";
 
         private const string RemoveOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                             <ItemGroup>
                                 <i Remove='i'/>
                             </ItemGroup>
                     </Project>
                 ";
         private const string IncludeOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i'/>
                         </ItemGroup>
                     </Project>
                 ";
         private const string IncludeInsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i'/>
@@ -53,14 +55,14 @@ public class ProjectItemElement_Tests
                     </Project>
                 ";
         private const string UpdateOutsideTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                             <ItemGroup>
                                 <i Update='i'/>
                             </ItemGroup>
                     </Project>
                 ";
         private const string UpdateInTarget = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Update='i'/>
@@ -87,15 +89,15 @@ public void ReadNoChildren(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i/>
                         </ItemGroup>
                     </Project>
                 ")]
         // https://github.com/dotnet/msbuild/issues/900
-        //[InlineData(@"
-        //            <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+        // [InlineData(@"
+        //            <Project>
         //                <Target Name='t'>
         //                    <ItemGroup>
         //                        <i/>
@@ -117,14 +119,14 @@ public void ReadInvalidNoInclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a'>error text</i>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='a'>error text</i>
@@ -146,14 +148,14 @@ public void ReadInvalidContainsText(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include=''/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include=''/>
@@ -175,14 +177,14 @@ public void ReadInvalidEmptyInclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <PropertyGroup Include='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <PropertyGroup Include='i1'/>
@@ -206,7 +208,7 @@ public void ReadInvalidReservedElementName(string project)
         public void ReadInvalidExcludeWithoutInclude()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1'/>
                         </ItemGroup>
@@ -217,10 +219,10 @@ public void ReadInvalidExcludeWithoutInclude()
                 Assert.Throws<InvalidProjectFileException>(
                     () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
                     );
-            
+
             Assert.Contains("Items that are outside Target elements must have one of the following operations: Include, Update, or Remove.", exception.Message);
         }
-        
+
         /// <summary>
         /// Read item with Exclude without Include under a target
         /// </summary>
@@ -228,7 +230,7 @@ public void ReadInvalidExcludeWithoutInclude()
         public void ReadInvalidExcludeWithoutIncludeUnderTarget()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1'/>
@@ -241,20 +243,20 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
                 Assert.Throws<InvalidProjectFileException>(
                     () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); }
                     );
-            
+
             Assert.Contains("The attribute \"Exclude\" in element <i> is unrecognized.", exception.Message);
         }
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i include='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i include='i1'/>
@@ -263,14 +265,14 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' exclude='i2' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' exclude='i2' />
@@ -292,7 +294,7 @@ public void ReadInvalidItemAttributeCasing(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                                 <m1>v1</m1>
@@ -304,7 +306,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -318,7 +320,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                             <i2 Include='i' Exclude='j' m2='v2' />
@@ -326,7 +328,7 @@ public void ReadInvalidItemAttributeCasing(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -338,7 +340,7 @@ public void ReadInvalidItemAttributeCasing(string project)
         public void ReadBasic(string project)
         {
             ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
-            ProjectItemGroupElement itemGroup = (ProjectItemGroupElement) projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
+            ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
 
@@ -364,7 +366,7 @@ public void ReadBasic(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                                 <m1>v1</m1>
@@ -375,7 +377,7 @@ public void ReadBasic(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -406,14 +408,14 @@ public void ReadMetadata(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Update='i2'/>
@@ -432,14 +434,14 @@ public void ReadInvalidUpdateWithInclude(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Exclude='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Exclude='i1' Update='i2'/>
@@ -458,14 +460,14 @@ public void ReadInvalidUpdateWithIncludeAndExclude(string project)
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1' Update='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1' Update='i2'/>
@@ -487,7 +489,7 @@ public void ReadInvalidUpdateWithExclude(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Remove='i1'>
                                     <m> </m>
@@ -496,7 +498,7 @@ public void ReadInvalidUpdateWithExclude(string project)
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Remove='i1'>
@@ -520,14 +522,14 @@ public void ReadInvalidRemoveWithMetadata(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Exclude='i1' Remove='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Exclude='i1' Remove='i1'/>
@@ -549,14 +551,14 @@ public void ReadInvalidExcludeAndRemove(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Remove='i1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Remove='i1'/>
@@ -604,14 +606,14 @@ public void ReadValidUpdate(string project)
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Exclude='i2'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i Include='i1' Exclude='i2'/>
@@ -829,7 +831,7 @@ public void SetInvalidExcludeWithRemove(string project)
             }
            );
         }
-        
+
         /// <summary>
         /// Set Update when Remove is present
         /// </summary>
@@ -847,7 +849,7 @@ public void SetInvalidUpdateWithRemove(string project)
            );
         }
 
-        /// 
+        ///
         /// <summary>
         /// Set the Update on an item
         /// </summary>
@@ -1036,4 +1038,4 @@ private static ProjectItemElement GetItemFromContent(string content)
             return Helpers.GetFirst(project.Items);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
index 9d4ddb0be13..05fa6347ad6 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Construction;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -32,7 +34,7 @@ public void ReadNoItemGroup()
         public void ReadEmptyItemGroup()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup/>
                     </Project>
                 ";
@@ -50,7 +52,7 @@ public void ReadEmptyItemGroup()
         public void ReadItemGroupTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                             <i Include='i2'/>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index 7c234adcd32..fc29f4d87da 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Evaluation;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -48,7 +50,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition='c' XX='YY'/>
@@ -70,7 +72,7 @@ public void ReadInvalidName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <" + "\u03A3" + @"/>
@@ -86,14 +88,14 @@ public void ReadInvalidName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' " + "\u03A3" + @"='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i " + "\u03A3" + @"='v1' />
                         </ItemDefinitionGroup>
@@ -117,7 +119,7 @@ public void ReadInvalidBuiltInName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <Filename/>
@@ -133,14 +135,14 @@ public void ReadInvalidBuiltInName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Filename='v1'/>
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i Filename='v1'/>
                         </ItemDefinitionGroup>
@@ -164,7 +166,7 @@ public void ReadInvalidBuiltInElementName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <PropertyGroup/>
@@ -183,14 +185,14 @@ public void ReadInvalidBuiltInElementName()
         /// </summary>
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' PropertyGroup='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i PropertyGroup='v1' />
                         </ItemDefinitionGroup>
@@ -288,14 +290,14 @@ public void SetExpressedAsAttributeIllegalName()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -324,7 +326,7 @@ public void AddMetadataAsAttributeIllegalName(string project)
         public void AddMetadataAsAttributeToItemDefinitionIllegalName()
         {
             string project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -381,7 +383,7 @@ public void ReadInvalidItemExpressionInMetadata()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m1>@(x)</m1>
@@ -401,7 +403,7 @@ public void ReadInvalidItemExpressionInMetadata()
         public void ReadValidItemExpressionInMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>@(x)</m1>
@@ -416,14 +418,14 @@ public void ReadValidItemExpressionInMetadata()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -451,7 +453,7 @@ public void ReadMetadataAsAttribute(string project)
         public void ReadMetadataAsAttributeOnItemDefinition()
         {
             string project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1' />
                         </ItemDefinitionGroup>
@@ -473,14 +475,14 @@ public void ReadMetadataAsAttributeOnItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='&lt;&amp;>""' />
                         </ItemGroup>
                     </Project>
                 ")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='&lt;&amp;>""' />
@@ -508,7 +510,7 @@ public void ReadMetadataAsAttributeWithSpecialCharacters(string project)
         public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
         {
             var project = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='&lt;&amp;>""' />
                         </ItemDefinitionGroup>
@@ -530,19 +532,19 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v2` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -550,7 +552,7 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v2` />
@@ -596,7 +598,7 @@ public void UpdateMetadataValueAsAttribute(string projectContents, string update
         public void UpdateMetadataValueAsAttributeOnItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -629,7 +631,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v2` />
                         </ItemDefinitionGroup>
@@ -639,25 +641,25 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
             VerifyAssertLineByLine(expected, actual);
         }
 
-        //  NOTE: When https://github.com/dotnet/msbuild/issues/362 is fixed, then the expected value in XML may be:
+        // NOTE: When https://github.com/dotnet/msbuild/issues/362 is fixed, then the expected value in XML may be:
         //      &lt;&amp;>"
         //  instead of:
         //      &lt;&amp;&gt;&quot;
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`&lt;&amp;&gt;&quot;` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -665,7 +667,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`&lt;&amp;&gt;&quot;` />
@@ -711,7 +713,7 @@ public void UpdateMetadataValueAsAttributeWithSpecialCharacters(string projectCo
         public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -744,7 +746,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`&lt;&amp;&gt;&quot;` />
                         </ItemDefinitionGroup>
@@ -756,7 +758,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'>
                               <m1>v1</m1>
@@ -764,25 +766,25 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i'><m1>v1</m1></i1>
                         </ItemGroup>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i'>
@@ -792,7 +794,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                         </Target>
                     </Project>",
                 @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -835,7 +837,7 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1>
                               <m1>v1</m1>
@@ -843,19 +845,19 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
                         </ItemDefinitionGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1><m1>v1</m1></i1>
                         </ItemDefinitionGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -896,13 +898,13 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' m1='v1' />
                         </ItemGroup>
                     </Project>",
                     @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i`>
                               <m1>v1</m1>
@@ -910,7 +912,7 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' m1='v1' />
@@ -918,7 +920,7 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
                         </Target>
                     </Project>",
                     @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i`>
@@ -965,7 +967,7 @@ public void ChangeAttributeToMetadata(string projectContents, string updatedProj
         public void ChangeAttributeToMetadataOnItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1='v1'/>
                         </ItemDefinitionGroup>
@@ -997,7 +999,7 @@ public void ChangeAttributeToMetadataOnItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                 ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1>
                               <m1>v1</m1>
@@ -1011,19 +1013,19 @@ public void ChangeAttributeToMetadataOnItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1` />
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -1031,7 +1033,7 @@ public void ChangeAttributeToMetadataOnItemDefinition()
                         </Target>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1` />
@@ -1073,7 +1075,7 @@ public void AddMetadataAsAttribute(string projectContents, string updatedProject
         public void AddMetadataAsAttributeToItemDefinition()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -1102,7 +1104,7 @@ public void AddMetadataAsAttributeToItemDefinition()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
@@ -1114,13 +1116,13 @@ public void AddMetadataAsAttributeToItemDefinition()
 
         [Theory]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i1 Include='i' />
                         </ItemGroup>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemGroup>
                             <i1 Include=`i` m1=`v1`>
                               <m2>v2</m2>
@@ -1128,7 +1130,7 @@ public void AddMetadataAsAttributeToItemDefinition()
                         </ItemGroup>
                     </Project>")]
         [InlineData(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup>
                                 <i1 Include='i' />
@@ -1136,7 +1138,7 @@ public void AddMetadataAsAttributeToItemDefinition()
                         </Target>
                     </Project>",
         @"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <Target Name=`t`>
                             <ItemGroup>
                                 <i1 Include=`i` m1=`v1`>
@@ -1187,7 +1189,7 @@ public void AddMetadataAsAttributeAndAsElement(string projectContents, string up
         public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
         {
             var projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1/>
                         </ItemDefinitionGroup>
@@ -1223,7 +1225,7 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
                               ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                    <Project>
                         <ItemDefinitionGroup>
                             <i1 m1=`v1`>
                               <m2>v2</m2>
@@ -1241,7 +1243,7 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
         private static ProjectMetadataElement GetMetadataXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition='c'>m1</m>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index 650d52c277b..1edfae8a76d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -10,6 +10,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -36,7 +38,7 @@ public void ReadTargetOnlyContainingOnError()
         public void ReadTargetTwoOnErrors()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1/>
                             <t2/>
@@ -69,7 +71,7 @@ public void ReadMissingExecuteTargets()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError/>
                         </Target>
@@ -96,7 +98,7 @@ public void ReadEmptyExecuteTargets()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets=''/>
                         </Target>
@@ -120,7 +122,7 @@ public void ReadInvalidUnexpectedAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t' XX='YY'/>
                         </Target>
@@ -140,7 +142,7 @@ public void ReadInvalidUnexpectedChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'>
                                 <X/>
@@ -162,7 +164,7 @@ public void ReadInvalidBeforeTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <t/>
@@ -183,7 +185,7 @@ public void ReadInvalidBeforePropertyGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <PropertyGroup/>
@@ -204,7 +206,7 @@ public void ReadInvalidBeforeItemGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t'/>
                             <ItemGroup/>
@@ -299,7 +301,7 @@ public void SetExecuteTargets()
         private static ProjectOnErrorElement GetOnError()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <OnError ExecuteTargets='t' Condition='c'/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index dc8164367fa..2a3bfb4a6c8 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -55,7 +57,7 @@ public void ReadInvalidOutputWithoutPropertyOrItem()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p'/>
@@ -78,7 +80,7 @@ public void ReadInvalidReservedOutputPropertyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' PropertyName='MSBuildProjectFile'/>
@@ -101,7 +103,7 @@ public void ReadInvalidOutputWithoutTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output ItemName='i'/>
@@ -124,7 +126,7 @@ public void ReadInvalidOutputWithEmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskName='' ItemName='i'/>
@@ -147,7 +149,7 @@ public void ReadInvalidOutputWithChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output ItemName='i' TaskParameter='x'>
@@ -172,7 +174,7 @@ public void ReadInvalidPropertyValueItemBlank()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='t' PropertyName='p' ItemName=''/>
@@ -195,7 +197,7 @@ public void ReadInvalidItemValuePropertyBlank()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='t' ItemName='i' PropertyName=''/>
@@ -285,7 +287,7 @@ public void SetOutputItemPropertyName()
         private static ProjectOutputElement GetOutputItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' ItemName='i1' />
@@ -307,7 +309,7 @@ private static ProjectOutputElement GetOutputItem()
         private static ProjectOutputElement GetOutputProperty()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' PropertyName='p1' />
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index 11b85ff1e23..8942470692d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -36,7 +38,7 @@ public void ReadProperty()
         public void ReadPropertyWithChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>A<B>C<D/></B>E</p>
                         </PropertyGroup>
@@ -48,7 +50,7 @@ public void ReadPropertyWithChildren()
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
 
             Assert.Equal("p", property.Name);
-            Assert.Equal(@"A<B xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">C<D /></B>E", property.Value);
+            Assert.Equal(@"A<B>C<D /></B>E", property.Value);
         }
 
         /// <summary>
@@ -60,7 +62,7 @@ public void ReadInvalidName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <" + "\u03A3" + @"/>
                         </PropertyGroup>
@@ -80,7 +82,7 @@ public void ReadInvalidReservedName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <PropertyGroup/>
                         </PropertyGroup>
@@ -100,7 +102,7 @@ public void ReadInvalidBuiltInName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <MSBuildProjectFile/>
                         </PropertyGroup>
@@ -120,7 +122,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p XX='YY'/>
                         </PropertyGroup>
@@ -140,7 +142,7 @@ public void ReadInvalidChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>
                                 <X/>
@@ -273,7 +275,7 @@ public void SetCondition()
         private static ProjectPropertyElement GetPropertyXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p Condition='c'>v</p>
                         </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
index 6342999cc94..ec569875fbb 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Construction;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index 3c88ebe1567..ba0defea01b 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -22,6 +22,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -214,7 +216,7 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath2()
         [Fact]
         public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         {
-            string content = "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n</Project>";
+            string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
             ProjectRootElement projectXml1 = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
 
@@ -231,7 +233,7 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         [Fact]
         public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath4()
         {
-            string content = "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n</Project>";
+            string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
             ProjectRootElement projectXml1 = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
 
@@ -290,7 +292,7 @@ public void InvalidRootTag()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <XXX xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>
+                    <XXX />
                 ";
 
                 ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
@@ -306,7 +308,7 @@ public void InvalidChildBelowRoot()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <XXX/>
                     </Project>
                 ";
@@ -392,7 +394,7 @@ public void ValidXmlInvalidSyntaxInChildElement()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
                         </ItemGroup>
@@ -413,7 +415,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
                         </ItemGroup>
@@ -453,10 +455,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
         [Trait("Category", "netcore-linux-failing")]
         public void ValidXmlXmlTextReaderNotCache()
         {
-            string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                    </Project>
-                ";
+            string content = @"<Project />";
 
             string path = null;
 
@@ -491,15 +490,9 @@ public void ValidXmlXmlTextReaderNotCache()
         [Fact]
         public void ValidXmlXmlReaderCache()
         {
-            string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                    </Project>
-                ";
+            string content = @"<Project />";
 
-            string content2 = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' DefaultTargets='t'>
-                    </Project>
-                ";
+            string content2 = @"<Project DefaultTargets='t' />";
 
             string path = null;
 
@@ -949,7 +942,7 @@ public void SolutionCanNotBeOpened()
         /// Build a project file that can't be accessed
         /// </summary>
         [Fact]
-        [PlatformSpecific (TestPlatforms.Windows)]
+        [PlatformSpecific(TestPlatforms.Windows)]
         // FileSecurity class is not supported on Unix
         public void ProjectCanNotBeOpened()
         {
@@ -1024,7 +1017,7 @@ public void SolutionCorrupt()
         /// Open lots of projects concurrently to try to trigger problems
         /// </summary>
         [Fact]
-        [PlatformSpecific(TestPlatforms.Windows)]  //This test is platform specific for Windows
+        [PlatformSpecific(TestPlatforms.Windows)]  // This test is platform specific for Windows
         public void ConcurrentProjectOpenAndCloseThroughProject()
         {
             int iterations = 500;
@@ -1718,7 +1711,7 @@ public void ReloadFromFileWhenProjectIsInMemorySetsProjectFile()
             AssertProjectFileAfterReload(
                 true,
                 false,
-                (initial, reload, actualFile) => { Assert.Equal(reload, actualFile);});
+                (initial, reload, actualFile) => { Assert.Equal(reload, actualFile); });
         }
 
         [Fact]
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
index c2680241ad3..eb7d71c2634 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -46,7 +48,7 @@ public void ReadNoTarget()
         public void ReadEmptyTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -164,7 +166,7 @@ public void ReadInvalidMissingName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target/>
                     </Project>
                 ";
@@ -182,7 +184,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target XX='YY'/>
                     </Project>
                 ";
@@ -308,7 +310,7 @@ public void SetKeepDuplicateOutputs()
 
         /// <summary>
         /// Set return value.  Verify that setting to the empty string and null are
-        /// both allowed and have distinct behaviour. 
+        /// both allowed and have distinct behaviour.
         /// </summary>
         [Fact]
         public void SetReturns()
@@ -343,7 +345,7 @@ public void SetReturns()
         private static ProjectTargetElement GetTargetXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t' Inputs='i' Outputs='o' DependsOnTargets='d' Condition='c'>
                             <t1/>
                             <t2/>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index 0f15baab37b..d469a8da1f8 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -23,7 +25,7 @@ public class ProjectTaskElement_Tests
         public void ReadNoParameters()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1/>
                         </Target>
@@ -45,7 +47,7 @@ public void ReadNoParameters()
         public void ReadContinueOnError()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 ContinueOnError='coe'/>
                         </Target>
@@ -64,7 +66,7 @@ public void ReadContinueOnError()
         public void ReadCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 Condition='c'/>
                         </Target>
@@ -85,7 +87,7 @@ public void ReadInvalidChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1>
                                 <X/>
@@ -100,14 +102,14 @@ public void ReadInvalidChild()
         }
         /// <summary>
         /// Read task with empty parameter.
-        /// Although MSBuild does not set these on tasks, they 
+        /// Although MSBuild does not set these on tasks, they
         /// are visible in the XML objects for editing purposes.
         /// </summary>
         [Fact]
         public void ReadEmptyParameter()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='' />
                         </Target>
@@ -128,7 +130,7 @@ public void ReadEmptyParameter()
         public void ReadParameters()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='v1' p2='v2' />
                         </Target>
@@ -314,7 +316,7 @@ private static ProjectTaskElement GetTaskFromContent(string content)
         private static ProjectTaskElement GetBasicTask()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             <t1 p1='v1' />
                         </Target>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index aa78c557e38..e9305ec49ae 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -10,6 +10,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -37,7 +39,7 @@ public void ReadInvalidMissingTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask AssemblyFile='af'/>
                     </Project>
                 ";
@@ -55,7 +57,7 @@ public void ReadInvalidEmptyTaskName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='' AssemblyFile='af'/>
                     </Project>
                 ";
@@ -73,7 +75,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile='af' X='Y'/>
                     </Project>
                 ";
@@ -91,7 +93,7 @@ public void ReadInvalidMissingAssemblyFileAssemblyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t'/>
                     </Project>
                 ";
@@ -109,7 +111,7 @@ public void ReadInvalidEmptyAssemblyFile()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile=''/>
                     </Project>
                 ";
@@ -127,7 +129,7 @@ public void ReadInvalidEmptyAssemblyFileAndAssemblyNameNotEmpty()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyFile='' AssemblyName='n'/>
                     </Project>
                 ";
@@ -145,7 +147,7 @@ public void ReadInvalidEmptyAssemblyNameAndAssemblyFileNotEmpty()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='' AssemblyFile='f'/>
                     </Project>
                 ";
@@ -163,7 +165,7 @@ public void ReadInvalidBothAssemblyFileAssemblyName()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='an' AssemblyFile='af'/>
                     </Project>
                 ";
@@ -181,7 +183,7 @@ public void ReadInvalidBothEmptyAssemblyFileEmptyAssemblyNameBoth()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t' AssemblyName='' AssemblyFile=''/>
                     </Project>
                 ";
@@ -359,7 +361,7 @@ public void DuplicateParameterGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <ParameterGroup/>
                             <ParameterGroup/>
@@ -380,7 +382,7 @@ public void DuplicateTaskGroup()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <Task/>
                             <Task/>
@@ -401,7 +403,7 @@ public void UnknownChild()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <IAMUNKNOWN/>
                         </UsingTask>
@@ -419,7 +421,7 @@ public void UnknownChild()
         public void WorksWithChildren()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory'>
                             <ParameterGroup>
                                <MyParameter/>
@@ -446,7 +448,7 @@ public void ExceptionWhenNoTaskFactoryAndHavePG()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'>
                             <ParameterGroup>
                                <MyParameter/>
@@ -470,7 +472,7 @@ public void ExceptionWhenNoTaskFactoryAndHaveTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'>
                             <Task/>
                         </UsingTask>
@@ -489,7 +491,7 @@ public void ExceptionWhenNoTaskFactoryAndHaveTask()
         private static ProjectUsingTaskElement GetUsingTaskFactoryRuntimeAndPlatform()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c' TaskFactory='AssemblyFactory' />
                     </Project>
                 ";
@@ -505,7 +507,7 @@ private static ProjectUsingTaskElement GetUsingTaskFactoryRuntimeAndPlatform()
         private static ProjectUsingTaskElement GetUsingTaskAssemblyFile()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t1' AssemblyFile='af' />
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'/>
                     </Project>
@@ -522,7 +524,7 @@ private static ProjectUsingTaskElement GetUsingTaskAssemblyFile()
         private static ProjectUsingTaskElement GetUsingTaskAssemblyName()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='t2' AssemblyName='an' Condition='c'/>
                     </Project>
                 ";
diff --git a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
index 483adcb954b..821da0c00f4 100644
--- a/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/SolutionFile_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     /// <summary>
@@ -18,72 +20,6 @@ namespace Microsoft.Build.UnitTests.Construction
     /// </summary>
     public class SolutionFile_Tests
     {
-        [Theory]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects2"": [
-                      ""src\\Build\\Microsoft.Build.csproj"",
-                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
-                      ""src\\MSBuild\\MSBuild.csproj"",
-                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
-                    ]
-                    }
-                }
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                [{
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      ""src\\Build\\Microsoft.Build.csproj"",
-                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
-                      ""src\\MSBuild\\MSBuild.csproj"",
-                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
-                    ]
-                    }
-                }]
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
-                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
-                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
-                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
-                    ]
-                    }
-                }
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath2\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
-                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
-                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
-                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
-                    ]
-                    }
-                }
-                ", "MSBuild.SolutionFilterMissingSolutionError")]
-        public void InvalidSolutionFilters(string slnfValue, string exceptionReason)
-        {
-            Assert.False(File.Exists("C:\\notAPath2\\MSBuild.Dev.sln"));
-            using (TestEnvironment testEnvironment = TestEnvironment.Create())
-            {
-                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
-                TransientTestFile sln = testEnvironment.CreateFile(folder, "Dev.sln");
-                TransientTestFile slnf = testEnvironment.CreateFile(folder, "Dev.slnf", slnfValue.Replace(@"C:\\notAPath\\MSBuild.Dev.sln", sln.Path.Replace("\\", "\\\\")));
-                InvalidProjectFileException e = Should.Throw<InvalidProjectFileException>(() => SolutionFile.Parse(slnf.Path));
-                e.HelpKeyword.ShouldBe(exceptionReason);
-            }
-        }
-
         /// <summary>
         /// Test that a project with the C++ project guid and an extension of vcproj is seen as invalid.
         /// </summary>
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index 443aaf127fd..3396ae04416 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -37,7 +39,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask AssemblyFile='af' TaskFactory='AssemblyFactory'>
                             <Task NotValidAttribute='OHI'/>
                        </UsingTask>
@@ -58,7 +60,7 @@ public void CreateBodyOutsideUsingTask()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Task>
                             Contents
                         </Task>
@@ -130,7 +132,7 @@ public void SetEvaluateAttributeToNull()
         private static ProjectUsingTaskBodyElement GetBodyXml()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                             <Task Evaluate='false'>Contents</Task>
                        </UsingTask>
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index 684c39aab1a..35b673f7e05 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -20,7 +22,7 @@ public class UsingTaskParameterElement_Tests
         /// Parameter element with all attributes set
         /// </summary>
         private static string s_contentAllAttributesSet = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter ParameterType='System.String' Output='true' Required='false'/>
@@ -33,7 +35,7 @@ public class UsingTaskParameterElement_Tests
         /// Parameter element with no attributes set
         /// </summary>
         private static string s_contentNoAttributesSet = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter/>
@@ -79,7 +81,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter Invaliid='System.String'/>
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index 7504f82a1a5..16d94683c80 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -9,6 +9,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
@@ -20,7 +22,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with no parameters inside
         /// </summary>
         private static string s_contentEmptyParameterGroup = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup/>
                        </UsingTask>
@@ -31,7 +33,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with duplicate child parameters
         /// </summary>
         private static string s_contentDuplicateParameters = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter/>
@@ -45,7 +47,7 @@ public class UsingTaskParameterGroup_Tests
         /// ParameterGroup with multiple parameters
         /// </summary>
         private static string s_contentMultipleParameters = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup>
                               <MyParameter1 ParameterType='System.String' Output='true' Required='false'/>
@@ -119,7 +121,7 @@ public void ReadInvalidAttribute()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <UsingTask TaskName='SuperTask' AssemblyFile='af' TaskFactory='AssemblyFactory'>
                            <ParameterGroup BadAttribute='Hello'/>
                        </UsingTask>
diff --git a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
index ea7e3549811..bdd6490ac91 100644
--- a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared;
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     public class WhitespacePreservation_Tests
diff --git a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
index fed092e5bdc..586b3cb9ecd 100644
--- a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -1154,7 +1156,7 @@ public void RenameItem_StillMatchesWildcard()
         [MemberData(nameof(ItemElementsWithGlobsThatRequireSplitting))]
         public void RenameThrowsWhenItemElementSplittingIsDisabled(string projectContents, int itemIndex, SetupProject setupProject)
         {
-            AssertDisabledItemSplitting(projectContents, itemIndex, setupProject, (p, i) => {i.Rename("foo");});
+            AssertDisabledItemSplitting(projectContents, itemIndex, setupProject, (p, i) => {i.Rename("foo"); });
         }
 
         /// <summary>
diff --git a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
index bb59d52bb6e..ec11160ae1c 100644
--- a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Evaluation;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -23,7 +25,7 @@ public class EditingElementsReferencedByOrReferences_Tests
         public void ChangeItemTypeInReferencedItem()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -34,7 +36,7 @@ public void ChangeItemTypeInReferencedItem()
             item.ItemType = "J";
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <J Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -57,7 +59,7 @@ public void ChangeItemTypeInReferencedItem()
         public void RemoveItemInList()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y;Z"" />
@@ -68,7 +70,7 @@ public void RemoveItemInList()
             project.RemoveItem(item);
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""X"" />
@@ -86,7 +88,7 @@ public void RemoveItemInList()
         public void RenameItemInList()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""@(I);Y"" />
@@ -97,7 +99,7 @@ public void RenameItemInList()
             item.Rename("Z");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""X"" />
     <I Include=""X"" />
@@ -115,7 +117,7 @@ public void RenameItemInList()
         public void RemoveMetadata1()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -141,7 +143,7 @@ public void RemoveMetadata1()
             item1.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -166,7 +168,7 @@ public void RemoveMetadata1()
         public void RemoveMetadata2()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -187,7 +189,7 @@ public void RemoveMetadata2()
             item1.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -218,7 +220,7 @@ public void RemoveMetadata2()
         public void RemoveMetadata3()
         {
             Project project = GetProject(
-        @"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+        @"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -243,7 +245,7 @@ public void RemoveMetadata3()
             item2.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemDefinitionGroup>
     <I>
       <M>A</M>
@@ -272,7 +274,7 @@ public void RemoveMetadata3()
         public void RemoveReferencedMetadata()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""i"">
       <M>m</M>
@@ -287,7 +289,7 @@ public void RemoveReferencedMetadata()
             item.RemoveMetadata("M");
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <ItemGroup>
     <I Include=""i"">
       <N>%(I.M)</N>
@@ -311,7 +313,7 @@ public void RemoveReferencedMetadata()
         public void RemoveProperty()
         {
             Project project = GetProject(
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <PropertyGroup>
     <P>A</P>
     <P>$(P)B</P>
@@ -322,7 +324,7 @@ public void RemoveProperty()
             project.RemoveProperty(property);
 
             string expected =
-@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+@"<Project>
   <PropertyGroup>
     <P>A</P>
   </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index f134be8dc9d..09360ffbded 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -16,6 +16,8 @@
 using Shouldly;
 using System.Reflection;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -80,7 +82,7 @@ public void AddProjectFromDisk()
         }
 
         /// <summary>
-        /// When an unnamed project is saved, it gets a name, and should be entered into 
+        /// When an unnamed project is saved, it gets a name, and should be entered into
         /// the appropriate project collection.
         /// </summary>
         [Fact]
@@ -109,7 +111,7 @@ public void AddProjectOnSave()
         }
 
         /// <summary>
-        /// When an unnamed project is saved, it gets a name, and should be entered into 
+        /// When an unnamed project is saved, it gets a name, and should be entered into
         /// the appropriate project collection.
         /// </summary>
         [Fact]
@@ -372,21 +374,21 @@ public void ErrorTwoProjectsEquivalentOneCollection()
         }
 
         /// <summary>
-        /// Validates that when loading two projects with nominally different global properties, but that match when we take 
-        /// into account the ProjectCollection's global properties, we get the pre-existing project if one exists. 
+        /// Validates that when loading two projects with nominally different global properties, but that match when we take
+        /// into account the ProjectCollection's global properties, we get the pre-existing project if one exists.
         /// </summary>
         [Fact]
         public void TwoProjectsEquivalentWhenOneInheritsFromProjectCollection()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
 
-            // now create a global properties dictionary to pass to a new project 
+            // now create a global properties dictionary to pass to a new project
             var globals = new Dictionary<string, string> { { "Configuration", "Debug" } };
 
             ProjectCollection.GlobalProjectCollection.LoadProject("c:\\1", globals, null);
@@ -430,15 +432,15 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly()
 
         /// <summary>
         /// Validates that we can correctly load two of the same project file with different global properties, even when
-        /// those global properties are applied to the project by the project collection (and then overridden in one case). 
+        /// those global properties are applied to the project by the project collection (and then overridden in one case).
         /// </summary>
         [Fact]
         public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProjectCollection()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
@@ -446,7 +448,7 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
             // Differentiate this project from the one below
             project.SetGlobalProperty("MyProperty", "MyValue");
 
-            // now create a global properties dictionary to pass to a new project 
+            // now create a global properties dictionary to pass to a new project
             var project2Globals =
                 new Dictionary<string, string> { { "Configuration", "Release" }, { "Platform", "Win32" } };
 
@@ -454,8 +456,8 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
 
             Assert.Equal("Release", project2.GlobalProperties["Configuration"]);
 
-            // Setting a global property on the project collection overrides all contained projects, 
-            // whether they were initially loaded with the global project collection's value or not. 
+            // Setting a global property on the project collection overrides all contained projects,
+            // whether they were initially loaded with the global project collection's value or not.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Platform", "X64");
             Assert.Equal("X64", project.GlobalProperties["Platform"]);
             Assert.Equal("X64", project2.GlobalProperties["Platform"]);
@@ -464,14 +466,14 @@ public void TwoProjectsDistinguishedByGlobalPropertiesOnly_ProjectOverridesProje
             project2.SetGlobalProperty("Platform", "Itanium");
             Assert.Equal("Itanium", project2.GlobalProperties["Platform"]);
 
-            // Now set global properties such that the two projects have an identical set.  
+            // Now set global properties such that the two projects have an identical set.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug2");
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Platform", "X86");
 
             bool exceptionCaught = false;
             try
             {
-                // This will make it identical, so we should get a throw here. 
+                // This will make it identical, so we should get a throw here.
                 ProjectCollection.GlobalProjectCollection.SetGlobalProperty("MyProperty", "MyValue2");
             }
             catch (InvalidOperationException)
@@ -510,14 +512,14 @@ public void TwoProjectsDistinguishedByToolsVersionOnly()
         }
 
         /// <summary>
-        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully 
-        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project. 
+        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully
+        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project.
         /// </summary>
         [Fact]
         public void ReloadProjectWithInvalidToolsVersionInFile()
         {
             const string content = @"
-                    <Project ToolsVersion='bogus' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='bogus'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -530,14 +532,14 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
         }
 
         /// <summary>
-        /// Make sure we can reload a project that has a ToolsVersion that doesn't match what it ends up getting 
-        /// forced to by default (current). 
+        /// Make sure we can reload a project that has a ToolsVersion that doesn't match what it ends up getting
+        /// forced to by default (current).
         /// </summary>
         [Fact]
         public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersion()
         {
             const string content = @"
-                    <Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='4.0'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -791,15 +793,15 @@ public void RenameProject()
         }
 
         /// <summary>
-        /// Validates that we don't somehow lose the ProjectCollection global properties when renaming the project. 
+        /// Validates that we don't somehow lose the ProjectCollection global properties when renaming the project.
         /// </summary>
         [Fact]
         public void RenameProjectAndVerifyStillContainsProjectCollectionGlobalProperties()
         {
             var project = new Project { FullPath = "c:\\1" };
 
-            // Set a global property on the project collection -- this should be passed on to all 
-            // loaded projects. 
+            // Set a global property on the project collection -- this should be passed on to all
+            // loaded projects.
             ProjectCollection.GlobalProjectCollection.SetGlobalProperty("Configuration", "Debug");
 
             Assert.Equal("Debug", project.GlobalProperties["Configuration"]);
@@ -1060,11 +1062,7 @@ public void DefaultToolsVersion()
             }
 
             var collection = new ProjectCollection();
-#if STANDALONEBUILD
             Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, collection.DefaultToolsVersion);
-#else
-            Assert.Equal("2.0", collection.DefaultToolsVersion);
-#endif
         }
 
         /// <summary>
@@ -1113,7 +1111,7 @@ public void SetDefaultToolsVersionNonexistentToolset()
         }
 
         /// <summary>
-        /// Set default tools version; subsequent projects should use it 
+        /// Set default tools version; subsequent projects should use it
         /// </summary>
         [Fact]
         public void SetDefaultToolsVersion()
@@ -1133,10 +1131,10 @@ public void SetDefaultToolsVersion()
 
             var project = new Project(XmlReader.Create(new StringReader(content)), null, null, collection);
 
-            // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way 
-            // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and 
-            // clearing some internal state to make sure that the update environment variable is picked up, so 
-            // there's not a good way of doing it from these deliberately public OM only tests. 
+            // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way
+            // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and
+            // clearing some internal state to make sure that the update environment variable is picked up, so
+            // there's not a good way of doing it from these deliberately public OM only tests.
             Assert.Equal(project.ToolsVersion, ObjectModelHelpers.MSBuildDefaultToolsVersion);
         }
 
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
index 3e75bf081c2..b6196db8d6a 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
@@ -14,6 +14,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 015e7429c55..e292037b857 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -7,14 +7,18 @@
 using System.Linq;
 using System.Xml;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Engine.UnitTests.Globbing;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Shouldly;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -23,14 +27,15 @@ namespace Microsoft.Build.UnitTests.OM.Definition
     public class ProjectItem_Tests : IDisposable
     {
         internal const string ItemWithIncludeAndExclude = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='{0}' Exclude='{1}'/>
                         </ItemGroup>
                     </Project>
                 ";
-        internal const string ItemWithIncludeUpdateAndRemove= @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+
+        internal const string ItemWithIncludeUpdateAndRemove = @"
+                    <Project>
                         <ItemGroup>
                             <i Include='{0}'>
                                <m>contents</m>
@@ -43,6 +48,12 @@ public class ProjectItem_Tests : IDisposable
                     </Project>
                 ";
 
+        internal const string ImportProjectElement = @"
+                    <Project>
+                        <Import Project='{0}'/>
+                    </Project>
+                ";
+
         protected TestEnvironment _env;
 
         public ProjectItem_Tests()
@@ -74,7 +85,7 @@ public void ProjectGetter()
         public void SingleItemWithNoMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                         </ItemGroup>
@@ -97,7 +108,7 @@ public void SingleItemWithNoMetadata()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -127,7 +138,7 @@ public void ReadMetadata()
         public void GetMetadataObjectsFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -164,7 +175,7 @@ public void GetMetadataObjectsFromDefinition()
         public void GetMetadataValuesFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -462,7 +473,7 @@ public void Exclude()
         public void ExcludeWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -489,7 +500,7 @@ public void ExcludeWithIncludeVector()
         public void ExcludeVectorWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -590,7 +601,7 @@ public void IncludeExcludeWithEscapedCharacters(string projectContents, string i
             @"a/b/foo::||bar;a/b/foo::||bar/;a/b/foo::||bar\;a/b\foo::||bar",
             @"a/b/foo::||bar",
             new string[0],
-            new [] { "a/b/foo::||bar/", @"a/b/foo::||bar\", @"a/b\foo::||bar" })]
+            new[] { "a/b/foo::||bar/", @"a/b/foo::||bar\", @"a/b\foo::||bar" })]
         public void IncludeExcludeWithNonPathContents(string projectContents, string includeString, string excludeString, string[] inputFiles, string[] expectedInclude)
         {
             TestIncludeExclude(projectContents, inputFiles, expectedInclude, includeString, excludeString, normalizeSlashes: false);
@@ -753,11 +764,226 @@ public void IncludeWithWildcardShouldNotPreserveUserSlashesInFixedDirectoryPart(
             TestIncludeExclude(projectContents, inputFiles, expectedInclude, includeString, "");
         }
 
+        /// <summary>
+        /// Project getter that renames an item to a drive enumerating wildcard that results in an exception.
+        /// </summary>
+        [Theory]
+        [InlineData(@"\**\*.log")]
+        [InlineData(@"$(empty)\**\*.log")]
+        [InlineData(@"\$(empty)**\*.log")]
+        [InlineData(@"\*$(empty)*\*.log")]
+        public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedInclude)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Setup
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+                    Project project = new Project();
+
+                    // Add item and verify
+                    Should.Throw<InvalidProjectFileException>(() => { _ = project.AddItem("i", unevaluatedInclude); });
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Project getter that renames an item to a drive enumerating wildcard that results in a logged warning.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**\*.log")]
+        [InlineData(@"z:$(empty)\**\*.log")]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\\**")]
+        [InlineData(@"z:\\\\\\\\**")]
+        [InlineData(@"z:\**\*.cs")]
+        public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"/**/*.log")]
+        [InlineData(@"$(empty)/**/*.log")]
+        [InlineData(@"/$(empty)**/*.log")]
+        [InlineData(@"/*$(empty)*/*.log")]
+        public void ProjectGetterResultsInUnixDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
+        }
+
+        private static void ProjectGetterResultsInDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Reset state
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                    // Setup
+                    ProjectCollection projectCollection = new ProjectCollection();
+                    MockLogger collectionLogger = new MockLogger();
+                    projectCollection.RegisterLogger(collectionLogger);
+                    Project project = new Project(projectCollection);
+
+                    // Add item
+                    _= project.AddItem("i", unevaluatedInclude);
+
+                    // Verify
+                    collectionLogger.WarningCount.ShouldBe(1);
+                    collectionLogger.AssertLogContains("MSB5029");
+                    projectCollection.UnregisterAllLoggers();
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Project instance created from a file that contains a drive enumerating wildcard results in a thrown exception.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"$(Microsoft_WindowsAzure_EngSys)\**")]
+        public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+            CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, true);
+        }
+
+        /// <summary>
+        /// Project instance created from a file that contains a drive enumerating wildcard results in a logged warning on the Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"z:\**\*.targets",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"z:\$(Microsoft_WindowsAzure_EngSys)**")]
+        public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+            CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"\**\*.targets",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"$(Microsoft_WindowsAzure_EngSys)\**")]
+        public void LogWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+                CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
+        }
+
+        private static void CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(string content, bool throwException)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // Clean file contents by replacing single quotes with double quotes, etc.
+                content = ObjectModelHelpers.CleanupFileContents(content);
+                var testProject = env.CreateTestProjectWithFiles(content.Cleanup());
+
+                // Setup and create project instance from file
+                CreateProjectInstanceFromFileWithDriveEnumeratingWildcard(env, testProject.ProjectFile, throwException);
+            }
+        }
+
+        private static void CreateProjectInstanceFromFileWithDriveEnumeratingWildcard(TestEnvironment env, string testProjectFile, bool throwException)
+        {
+            try
+            {
+                // Reset state 
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, throwException ? "1" : "0");
+
+                if (throwException)
+                {
+                    // Verify
+                    Should.Throw<InvalidProjectFileException>(() => { ProjectInstance.FromFile(testProjectFile, new ProjectOptions()); });
+                }
+                else
+                {
+                    // Setup
+                    MockLogger collectionLogger = new MockLogger();
+                    ProjectOptions options = new ProjectOptions();
+                    options.ProjectCollection = new ProjectCollection();
+                    options.ProjectCollection.RegisterLogger(collectionLogger);
+
+                    // Action
+                    ProjectInstance.FromFile(testProjectFile, options);
+
+                    // Verify
+                    collectionLogger.WarningCount.ShouldBe(1);
+                    collectionLogger.AssertLogContains("MSB5029");
+                    collectionLogger.AssertLogContains(testProjectFile);
+                    options.ProjectCollection.UnregisterAllLoggers();
+                }
+            }
+            finally
+            {
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
         private static void TestIncludeExcludeWithDifferentSlashes(string projectContents, string includeString, string excludeString, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false)
         {
             Action<string, string> runTest = (include, exclude) =>
             {
-                TestIncludeExclude(projectContents, inputFiles, expectedInclude, include, exclude, normalizeSlashes: true, makeExpectedIncludeAbsolute:makeExpectedIncludeAbsolute);
+                TestIncludeExclude(projectContents, inputFiles, expectedInclude, include, exclude, normalizeSlashes: true, makeExpectedIncludeAbsolute: makeExpectedIncludeAbsolute);
             };
 
             var includeWithForwardSlash = Helpers.ToForwardSlash(includeString);
@@ -779,12 +1005,12 @@ private static void TestIncludeExclude(string projectContents, string[] inputFil
         // exclude matches include; file is next to project file
         [InlineData(ItemWithIncludeAndExclude,
             @"a", // include item
-            @"", //path relative from projectFile. Empty string if current directory
+            @"", // path relative from projectFile. Empty string if current directory
 
-            @"a", //exclude item
-            "", //path relative from projectFile. Empty string if current directory
+            @"a", // exclude item
+            "", // path relative from projectFile. Empty string if current directory
 
-            new[] //files relative to this test's root directory. The project is one level deeper than the root.
+            new[] // files relative to this test's root directory. The project is one level deeper than the root.
             {
                 @"project\a",
             },
@@ -891,7 +1117,7 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
                     var formattedProject = string.Format(projectContents, include, exclude);
                     File.WriteAllText(projectFile, formattedProject);
 
-                    var expectedInclude = includeSurvivesExclude ? new[] { include } : new string[0];
+                    var expectedInclude = includeSurvivesExclude ? new[] { include } : Array.Empty<string>();
 
                     ObjectModelHelpers.AssertItems(expectedInclude, new Project(projectFile).Items.ToList());
                 }
@@ -909,7 +1135,7 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
             "**/*.cs", // exclude string
             new[] {"a.cs", "ProjectDir/b.cs"}, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] {"../a.cs"} // expected items
+            new[] { "../a.cs" } // expected items
             )]
         // exclude globbing cone below project level;
         [InlineData(
@@ -917,13 +1143,13 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
             "a/**/*.cs",
             new[] { "a.cs", "a/b.cs" },
             "",
-            new[] {"a.cs"}
+            new[] { "a.cs" }
             )]
         // exclude globbing above project level;
         [InlineData(
             "a.cs;../b.cs;../../c.cs",
             "../**/*.cs",
-            new[] { "a/ProjectDir/a.cs", "a/b.cs", "c.cs"},
+            new[] { "a/ProjectDir/a.cs", "a/b.cs", "c.cs" },
             "a/ProjectDir",
             new[] { "../../c.cs" }
             )]
@@ -934,7 +1160,7 @@ public void ExcludeWithMissmatchingGlobCones(string includeString, string exclud
             using (var env = TestEnvironment.Create())
             using (var projectCollection = new ProjectCollection())
             {
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, files,relativePathFromRootToProject);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, files, relativePathFromRootToProject);
                 ObjectModelHelpers.AssertItems(expectedInclude, new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection).Items.ToList());
             }
         }
@@ -943,9 +1169,9 @@ public void ExcludeWithMissmatchingGlobCones(string includeString, string exclud
         [InlineData(
             "../**/*.cs", // include string
             "a.cs", // exclude string
-            new[] {"ProjectDir/a.cs", "b.cs"}, // files to create relative to the test root dir
+            new[] { "ProjectDir/a.cs", "b.cs" }, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
-            new[] {"../b.cs"} // expected items
+            new[] { "../b.cs" } // expected items
             )]
         public void ExcludingRelativeItemToCurrentDirectoryShouldWorkWithAboveTheConeIncludes(string includeString, string excludeString, string[] files, string relativePathFromRootToProject, string[] expectedInclude)
         {
@@ -966,7 +1192,7 @@ public void ExcludingRelativeItemToCurrentDirectoryShouldWorkWithAboveTheConeInc
         public void CopyFromWithItemListExpressionClonesMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                           <i Include='i1'>
                             <m>m1</m>
@@ -1003,7 +1229,7 @@ public void CopyFromWithItemListExpressionClonesMetadata()
         public void CopyFromWithItemListExpressionDoesNotCloneDefinitionMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <m>m1</m>
@@ -1054,7 +1280,7 @@ public void CopyFromWithItemListExpressionDoesNotCloneDefinitionMetadata()
         public void CopyFromWithItemListExpressionClonesDefinitionMetadata_Variation()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <m>m1</m>
@@ -1104,7 +1330,7 @@ public void CopyFromWithItemListExpressionClonesDefinitionMetadata_Variation()
         public void CopyWithItemDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <l>l1</l>
@@ -1201,7 +1427,7 @@ public void CopyWithItemDefinition()
         public void CopyWithItemDefinition2()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                           <i>
                             <l>l1</l>
@@ -1294,7 +1520,7 @@ public void CopyWithItemDefinition2()
         public void MetadataReferringToMetadataAbove()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -1320,7 +1546,7 @@ public void MetadataReferringToMetadataAbove()
         public void BuiltInMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(Identity)</m>
@@ -1341,7 +1567,7 @@ public void BuiltInMetadataExpression()
         public void BuiltInQualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(i.Identity)</m>
@@ -1362,7 +1588,7 @@ public void BuiltInQualifiedMetadataExpression()
         public void BuiltInMisqualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(j.Identity)</m>
@@ -1383,7 +1609,7 @@ public void BuiltInMisqualifiedMetadataExpression()
         public void BuiltInMetadataInMetadataCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition=""'%(Identity)'=='i1'"">m1</m>
@@ -1408,7 +1634,7 @@ public void BuiltInMetadataInItemCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Condition=""'%(Identity)'=='i1'/>
                         </ItemGroup>
@@ -1426,7 +1652,7 @@ public void BuiltInMetadataInItemCondition()
         public void BuiltInMetadataTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1.cpp;" + (NativeMethodsShared.IsWindows ? @"c:\bar\i2.cpp" : "/bar/i2.cpp") + @"'>
                                 <m>%(Filename).obj</m>
@@ -1448,7 +1674,7 @@ public void BuiltInMetadataTwoItems()
         public void DifferentMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'>
                                 <m>m1</m>
@@ -1475,7 +1701,7 @@ public void DifferentMetadataItemsFromOtherList()
         public void DifferentBuiltInMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0.x'/>
                             <h Include='h1.y'/>
@@ -1500,7 +1726,7 @@ public void DifferentBuiltInMetadataItemsFromOtherList()
         public void BuiltInMetadataTransformInInclude()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1525,7 +1751,7 @@ public void BuiltInMetadataTransformInInclude()
         public void BuiltInMetadataTransformInMetadataValue()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1550,7 +1776,7 @@ public void BuiltInMetadataTransformInMetadataValue()
         public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -1575,7 +1801,7 @@ public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         public void MetadataValueReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -1598,7 +1824,7 @@ public void MetadataValueReferringToItems()
         public void MetadataConditionReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -1623,7 +1849,7 @@ public void MetadataConditionReferringToItems()
         public void MetadataConditionReferringToMetadataOnSameItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m0>0</m0>
@@ -1996,7 +2222,7 @@ public void SetDirectMetadataShouldAffectAllSiblingItems()
 
             using (var env = TestEnvironment.Create())
             {
-                var testProject = env.CreateTestProjectWithFiles(projectContents.Cleanup(), new[] {"a.cs"});
+                var testProject = env.CreateTestProjectWithFiles(projectContents.Cleanup(), new[] { "a.cs" });
 
                 var project = new Project(testProject.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, env.CreateProjectCollection().Collection);
 
@@ -2093,7 +2319,7 @@ public void SetDirectMetadataShouldUpdateAlreadyExistingDirectMetadata()
             }
         }
 
-        //  TODO: Should remove tests go in project item tests, project item instance tests, or both?
+        // TODO: Should remove tests go in project item tests, project item instance tests, or both?
         [Fact]
         public void Remove()
         {
@@ -2128,7 +2354,7 @@ public void RemoveGlob()
                 );
 
             Assert.Equal(2, items.Count);
-            Assert.Equal(@"a.txt;b.cs", string.Join(";", items.Select(i => i.EvaluatedInclude))); 
+            Assert.Equal(@"a.txt;b.cs", string.Join(";", items.Select(i => i.EvaluatedInclude)));
         }
 
         [Fact]
@@ -2141,7 +2367,7 @@ public void RemoveItemReference()
                 );
 
             Assert.Equal(2, items.Count);
-            Assert.Equal(@"a;c", string.Join(";", items.Select(i => i.EvaluatedInclude))); 
+            Assert.Equal(@"a;c", string.Join(";", items.Select(i => i.EvaluatedInclude)));
         }
 
         [Theory]
@@ -3268,7 +3494,7 @@ public void UpdateShouldBeAbleToContainItemReferences()
         public void UpdateShouldBeAbleToContainProperties()
         {
             var content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                            <P>a</P>
                         </PropertyGroup>
@@ -3336,7 +3562,6 @@ public void UpdateAndRemoveShouldUseCaseInsensitiveMatching()
         public static IEnumerable<Object[]> UpdateAndRemoveShouldWorkWithEscapedCharactersTestData
         {
             get
-
             {
                 var expectedMetadata = new[]
                 {
@@ -3423,7 +3648,7 @@ public static IEnumerable<Object[]> UpdateAndRemoveShouldWorkWithEscapedCharacte
         public void UpdateAndRemoveShouldWorkWithEscapedCharacters(string projectContents, string include, string update, string remove, string[] expectedInclude, Dictionary<string, string>[] expectedMetadata)
         {
             var formattedProjectContents = string.Format(projectContents, include, update, remove);
-            ObjectModelHelpers.AssertItemEvaluationFromProject(formattedProjectContents, new string[0], expectedInclude, expectedMetadata);
+            ObjectModelHelpers.AssertItemEvaluationFromProject(formattedProjectContents, Array.Empty<string>(), expectedInclude, expectedMetadata);
         }
 
         [Fact]
@@ -3452,11 +3677,11 @@ public void UpdateAndRemoveShouldNotUseGlobMatchingOnEscapedGlobsFromReferencedI
                     return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
                         .Items
                         .Where(i => i.ItemType.Equals("i"))
-                        .Select(i => (ObjectModelHelpers.TestItem) new ObjectModelHelpers.ProjectItemTestItemAdapter(i))
+                        .Select(i => (ObjectModelHelpers.ITestItem)new ObjectModelHelpers.ProjectItemTestItemAdapter(i))
                         .ToList();
                 },
                 project,
-                inputFiles: new string[0],
+                inputFiles: Array.Empty<string>(),
                 expectedInclude: new[] { "1.cs", "2.js" },
                 expectedMetadataPerItem: null
                 );
diff --git a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
index 92c322850cd..42e18a5c742 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
index bd72053898a..d2e0899334c 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -37,7 +39,7 @@ public void ProjectGetter()
         public void NoExpansion()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <p>v1</p>
                         </PropertyGroup>
@@ -59,7 +61,7 @@ public void NoExpansion()
         public void ExpandProperty()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <PropertyGroup>
                             <o>v1</o>
                             <p>$(o)</p>
@@ -233,7 +235,7 @@ public void SetPropertyWithPropertyExpression()
         /// <summary>
         /// Verify item expressions are not expanded in new property values.
         /// NOTE: They aren't expanded to "blank". It just seems like that, because
-        /// when you output them, item expansion happens after property expansion, and 
+        /// when you output them, item expansion happens after property expansion, and
         /// they may evaluate to blank then. (Unless items do exist at that point.)
         /// </summary>
         [Fact]
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index afaf6ecf8ab..4d856fb153d 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -28,6 +28,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -71,7 +73,7 @@ public void Dispose()
             ProjectCollection.GlobalProjectCollection.GlobalProperties.ShouldBeEmpty();
         }
 
-        private static readonly string ProjectWithItemGroup =
+        private const string ProjectWithItemGroup =
 @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
                   <ItemGroup>
 {0}
@@ -2052,7 +2054,7 @@ public void BuildDisabled()
 
             result.ShouldBeFalse();
 
-            mockLogger.Errors[0].Code.ShouldBe("MSB4112"); //                 "Security message about disabled targets need to have code MSB4112, because code in the VS Core project system depends on this.  See DesignTimeBuildFeedback.cpp."
+            mockLogger.Errors[0].Code.ShouldBe("MSB4112"); // "Security message about disabled targets need to have code MSB4112, because code in the VS Core project system depends on this.  See DesignTimeBuildFeedback.cpp."
         }
 
         /// <summary>
@@ -2107,10 +2109,6 @@ public void BuildEvaluationUsesCustomLoggers()
             {
                 result = project.Build(new ILogger[] { mockLogger });
             }
-            catch
-            {
-                throw;
-            }
             finally
             {
                 project.ProjectCollection.UnregisterAllLoggers();
@@ -2118,9 +2116,9 @@ public void BuildEvaluationUsesCustomLoggers()
 
             result.ShouldBeTrue();
 
-            mockLogger.WarningCount.ShouldBe(0); //                 "Log should not contain MSB4011 because the build logger will not receive evaluation messages."
+            mockLogger.WarningCount.ShouldBe(0); // "Log should not contain MSB4011 because the build logger will not receive evaluation messages."
 
-            collectionLogger.Warnings[0].Code.ShouldBe("MSB4011"); //                 "Log should contain MSB4011 because the project collection logger should have been used for evaluation."
+            collectionLogger.Warnings[0].Code.ShouldBe("MSB4011"); // "Log should contain MSB4011 because the project collection logger should have been used for evaluation."
         }
 
         /// <summary>
@@ -2284,7 +2282,7 @@ public void RemoveSeveralItemsOfVariousTypes()
 
             project.RemoveItems(list);
 
-            project.Items.Count().ShouldBe(2);
+            project.Items.Count.ShouldBe(2);
         }
 
         /// <summary>
@@ -2304,7 +2302,7 @@ public void RemoveSeveralItemsExpandExpression()
             Project project = new Project(XmlReader.Create(new StringReader(projectOriginalContents)));
 
             project.RemoveItems(project.GetItems("j").Take(2));
-            project.Items.Count().ShouldBe(3);
+            project.Items.Count.ShouldBe(3);
 
             StringWriter writer = new EncodingStringWriter();
             project.Save(writer);
@@ -3245,7 +3243,7 @@ public void GetItemProvenanceMatchesLiteralsWithNonCanonicPaths()
             using (var env = TestEnvironment.Create())
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0], "u/x");
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>(), "u/x");
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
                 var expected2Foo = new ProvenanceResultTupleList
@@ -3274,7 +3272,7 @@ public void GetItemProvenanceMatchesAbsoluteAndRelativePaths()
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
 
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
@@ -3319,7 +3317,7 @@ public void GetItemProvenanceShouldNotFailWithStringsExceedingMaxPath()
             var project =
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
                   <ItemGroup>
-                    <A Include=`" + longString +  @"`/>
+                    <A Include=`" + longString + @"`/>
                   </ItemGroup>
                 </Project>
                 ";
@@ -3517,7 +3515,7 @@ public void GetItemProvenanceShouldWorkWithUpdateElements()
             AssertProvenanceResult(expected, project, "1.foo");
         }
 
-		[Fact]
+        [Fact]
         public void GetItemProvenanceShouldWorkWithRemoveElements()
         {
             var project =
@@ -3566,12 +3564,12 @@ public void GetItemProvenanceShouldBeSensitiveToGlobbingCone(string includeGlob,
             using (var env = TestEnvironment.Create())
             using (var projectCollection = new ProjectCollection())
             {
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0], relativePathOfProjectFile);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>(), relativePathOfProjectFile);
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
                 ProvenanceResultTupleList expectedProvenance = null;
 
-                var provenanceKind = includeGlob.IndexOfAny(new[]{'*', '?'}) != -1  ? Provenance.Glob : Provenance.StringLiteral;
+                var provenanceKind = includeGlob.IndexOfAny(new[] { '*', '?' }) != -1 ? Provenance.Glob : Provenance.StringLiteral;
                 expectedProvenance = provenanceShouldFindAMatch
                     ? new ProvenanceResultTupleList
                     {
@@ -3681,25 +3679,25 @@ public void GetAllGlobsShouldFindAllExcludesAndRemoves()
         }
 
         [Theory]
-//        [InlineData(
+// [InlineData(
 //            @"
-//<A Include=`a;b*;c*;d*;e*;f*` Exclude=`c*;d*`/>
-//<A Remove=`e*;f*`/>
-//",
+// <A Include=`a;b*;c*;d*;e*;f*` Exclude=`c*;d*`/>
+// <A Remove=`e*;f*`/>
+// ",
 //        new[] {"ba"},
 //        new[] {"a", "ca", "da", "ea", "fa"}
 //        )]
 //        [InlineData(
 //            @"
-//<A Include=`a;b*;c*;d*;e*;f*` Exclude=`c*;d*`/>
-//",
+// <A Include=`a;b*;c*;d*;e*;f*` Exclude=`c*;d*`/>
+// ",
 //        new[] {"ba", "ea", "fa"},
 //        new[] {"a", "ca", "da"}
 //        )]
 //        [InlineData(
 //            @"
-//<A Include=`a;b*;c*;d*;e*;f*`/>
-//",
+// <A Include=`a;b*;c*;d*;e*;f*`/>
+// ",
 //        new[] {"ba", "ca", "da", "ea", "fa"},
 //        new[] {"a"}
 //        )]
@@ -3711,13 +3709,13 @@ public void GetAllGlobsShouldFindAllExcludesAndRemoves()
 <A Include=`a*;b*;c*` Exclude=`@(E)`/>
 <A Remove=`@(R)`/>
 ",
-        new[] {"aa", "bb", "cc"},
-        new[] {"b", "c"}
+        new[] { "aa", "bb", "cc" },
+        new[] { "b", "c" }
         )]
         [InlineData(
             @"<A Include=`ab*;b|c*;de*`/>",
-            new[] {"ab", "de"},
-            new[] {"bc", "b|c", "b", "c"}
+            new[] { "ab", "de" },
+            new[] { "bc", "b|c", "b", "c" }
             )]
         public void GetAllGlobsShouldProduceGlobThatMatches(string itemContents, string[] stringsThatShouldMatch, string[] stringsThatShouldNotMatch)
         {
@@ -3762,7 +3760,7 @@ public void GetAllGlobsShouldProduceGlobsThatMatchAbsolutePaths()
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
 
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
@@ -4255,7 +4253,7 @@ private static void AssertGlobResult(GlobResultList expected, string project)
 
         private static void AssertGlobResult(GlobResultList expected, string project, string itemType)
         {
-            var globs = ObjectModelHelpers.CreateInMemoryProject(project).GetAllGlobs(itemType) ;
+            var globs = ObjectModelHelpers.CreateInMemoryProject(project).GetAllGlobs(itemType);
             AssertGlobResultsEqual(expected, globs);
         }
 
@@ -4341,7 +4339,7 @@ private ProjectRootElement GetSampleProjectRootElement()
         private string GetSampleProjectContent()
         {
             string projectFileContent = ObjectModelHelpers.CleanupFileContents(@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='2.0' InitialTargets='it' DefaultTargets='dt'>
+                    <Project ToolsVersion='2.0' InitialTargets='it' DefaultTargets='dt'>
                         <PropertyGroup Condition=""'$(Configuration)'=='Foo'"">
                             <p>v1</p>
                         </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
index a269fca7c64..b5e2c942092 100644
--- a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Evaluation;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
@@ -84,7 +86,7 @@ public class ProtectImports_Tests : IDisposable
         public ProtectImports_Tests()
         {
             string importContents =
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                     <PropertyGroup>
                         <$propertyName>OldPropertyValue</$propertyName>
                     </PropertyGroup>
@@ -599,7 +601,7 @@ private ProjectMetadata GetOverridableMetadata(Project project)
         private Project GetProject()
         {
             string projectContents =
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                     <PropertyGroup>
                         <$propertyName>OldPropertyValueInProject</$propertyName>
                     </PropertyGroup>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index dc1e3cfdc23..9b9ea6ff098 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -16,6 +16,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -252,7 +254,7 @@ public void CloneProperties()
         public void ItemEvaluationCopiesMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>m1</m>
@@ -297,7 +299,7 @@ public void WildcardsInsideTargets()
                 string path = Path.Combine(directory, "*.exe");
 
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                           <ItemGroup>
                             <i Include='" + path + @"'/>
@@ -402,13 +404,13 @@ public void BuildProjectInstancesConsecutively()
         {
             ProjectInstance instance1 = new Project().CreateProjectInstance();
 
-            BuildRequestData buildRequestData1 = new BuildRequestData(instance1, new string[] { });
+            BuildRequestData buildRequestData1 = new BuildRequestData(instance1, Array.Empty<string>());
 
             BuildManager.DefaultBuildManager.Build(new BuildParameters(), buildRequestData1);
 
             new Project().CreateProjectInstance();
 
-            BuildRequestData buildRequestData2 = new BuildRequestData(instance1, new string[] { });
+            BuildRequestData buildRequestData2 = new BuildRequestData(instance1, Array.Empty<string>());
 
             BuildManager.DefaultBuildManager.Build(new BuildParameters(), buildRequestData2);
         }
@@ -527,8 +529,8 @@ public void DefiningProjectItemBuiltInMetadataFromWildcards()
         }
 
         /// <summary>
-        /// Validate that the DefiningProject* metadata is set to the correct project based on a variety 
-        /// of means of item creation. 
+        /// Validate that the DefiningProject* metadata is set to the correct project based on a variety
+        /// of means of item creation.
         /// </summary>
         [Fact]
         public void TestDefiningProjectMetadata()
@@ -572,7 +574,7 @@ public void TestDefiningProjectMetadata()
   </Target>
 
   <Target Name=`Validate` DependsOnTargets=`AddFromMainProject;AddFromImport`>
-    <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />    
+    <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />
     <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />
     <Warning Text=`C is wrong: EXPECTED: [b] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'b'` />
     <Warning Text=`D is wrong: EXPECTED: [b] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'b'` />
@@ -831,7 +833,7 @@ public void ImmutableProjectInstance_SetEvaluatedValueOnPropertyFromProject()
         }
 
         /// <summary>
-        /// Test operation fails on immutable project instance 
+        /// Test operation fails on immutable project instance
         /// </summary>
         [Fact]
         public void ImmutableProjectInstance_SetNewProperty()
@@ -993,7 +995,7 @@ public void ImmutableProjectInstance_CloneMutableFromMutable2()
         private static ProjectInstance GetSampleProjectInstance(bool isImmutable = false)
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                               <n>n1</n>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index e1ddcb897b8..c3316bb2267 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -7,6 +7,7 @@
 using System.Xml;
 
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -14,8 +15,11 @@
 
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using Shouldly;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -28,6 +32,39 @@ public class ProjectItemInstance_Tests
         /// </summary>
         public const int BuiltInMetadataCount = 15;
 
+        internal const string TargetItemWithInclude = @"
+            <Project>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{0}'/>
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
+        internal const string TargetItemWithIncludeAndExclude = @"
+            <Project>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{0}' Exclude='{1}'/>
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
+        internal const string TargetWithDefinedPropertyAndItemWithInclude = @"
+            <Project>
+                <PropertyGroup>
+                    <{0}>{1}</{0}>
+                </PropertyGroup>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{2}' />
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
         /// <summary>
         /// Basic ProjectItemInstance without metadata
         /// </summary>
@@ -146,8 +183,8 @@ public void SetMetadataEmptyString()
         }
 
         /// <summary>
-        /// Set metadata value to null value -- this is allowed, but 
-        /// internally converted to the empty string. 
+        /// Set metadata value to null value -- this is allowed, but
+        /// internally converted to the empty string.
         /// </summary>
         [Fact]
         public void SetNullMetadataValue()
@@ -205,7 +242,7 @@ public void CastToITaskItem()
         /// <summary>
         /// Creates a ProjectItemInstance and casts it to ITaskItem2; makes sure that all escaped information is
         /// maintained correctly.  Also creates a new Microsoft.Build.Utilities.TaskItem from the ProjectItemInstance
-        /// and verifies that none of the information is lost.  
+        /// and verifies that none of the information is lost.
         /// </summary>
         [Fact]
         public void ITaskItem2Operations()
@@ -307,7 +344,7 @@ public void CastToITaskItemNoMetadata()
         public void NoMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'/>
                         </ItemGroup>
@@ -330,7 +367,7 @@ public void NoMetadata()
         public void ReadMetadata()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -359,21 +396,21 @@ public void ReadMetadata()
         /// <summary>
         /// Create a new Microsoft.Build.Utilities.TaskItem from the ProjectItemInstance where the ProjectItemInstance
         /// has item definition metadata on it.
-        /// 
+        ///
         /// Verify the Utilities task item gets the expanded metadata from the ItemDefinitionGroup.
         /// </summary>
         [Fact]
         public void InstanceItemToUtilItemIDG()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
-                                <m0>;x86;</m0>                                
+                                <m0>;x86;</m0>
                                 <m1>%(FileName).extension</m1>
                                 <m2>;%(FileName).extension;</m2>
                                 <m3>v1</m3>
-                                <m4>%3bx86%3b</m4> 
+                                <m4>%3bx86%3b</m4>
                             </i>
                         </ItemDefinitionGroup>
                         <ItemGroup>
@@ -400,7 +437,7 @@ public void InstanceItemToUtilItemIDG()
         public void GetMetadataValuesFromDefinition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemDefinitionGroup>
                             <i>
                                 <m0>v0</m0>
@@ -433,7 +470,7 @@ public void GetMetadataValuesFromDefinition()
         public void ExcludeWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -460,7 +497,7 @@ public void ExcludeWithIncludeVector()
         public void ExcludeVectorWithIncludeVector()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='a;b;c'>
                             </i>
@@ -488,7 +525,7 @@ public void ExcludeVectorWithIncludeVector()
         public void MetadataReferringToMetadataAbove()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m1>v1</m1>
@@ -514,7 +551,7 @@ public void MetadataReferringToMetadataAbove()
         public void BuiltInMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(Identity)</m>
@@ -535,7 +572,7 @@ public void BuiltInMetadataExpression()
         public void BuiltInQualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(i.Identity)</m>
@@ -556,7 +593,7 @@ public void BuiltInQualifiedMetadataExpression()
         public void BuiltInMisqualifiedMetadataExpression()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m>%(j.Identity)</m>
@@ -571,13 +608,13 @@ public void BuiltInMisqualifiedMetadataExpression()
         }
 
         /// <summary>
-        /// Metadata condition should work correctly with built-in metadata 
+        /// Metadata condition should work correctly with built-in metadata
         /// </summary>
         [Fact]
         public void BuiltInMetadataInMetadataCondition()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m Condition=""'%(Identity)'=='i1'"">m1</m>
@@ -602,7 +639,7 @@ public void BuiltInMetadataInItemCondition()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1' Condition=""'%(Identity)'=='i1'/>
                         </ItemGroup>
@@ -620,7 +657,7 @@ public void BuiltInMetadataInItemCondition()
         public void BuiltInMetadataTwoItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1.cpp;" + (NativeMethodsShared.IsWindows ? @"c:\bar\i2.cpp" : "/bar/i2.cpp") + @"'>
                                 <m>%(Filename).obj</m>
@@ -642,7 +679,7 @@ public void BuiltInMetadataTwoItems()
         public void DifferentMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'>
                                 <m>m1</m>
@@ -669,7 +706,7 @@ public void DifferentMetadataItemsFromOtherList()
         public void DifferentBuiltInMetadataItemsFromOtherList()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0.x'/>
                             <h Include='h1.y'/>
@@ -694,7 +731,7 @@ public void DifferentBuiltInMetadataItemsFromOtherList()
         public void BuiltInMetadataTransformInInclude()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -719,7 +756,7 @@ public void BuiltInMetadataTransformInInclude()
         public void BuiltInMetadataTransformInMetadataValue()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -744,7 +781,7 @@ public void BuiltInMetadataTransformInMetadataValue()
         public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <h Include='h1'/>
@@ -769,7 +806,7 @@ public void BuiltInMetadataTransformInMetadataValueBareMetadataPresent()
         public void MetadataValueReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -792,7 +829,7 @@ public void MetadataValueReferringToItems()
         public void MetadataConditionReferringToItems()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <h Include='h0'/>
                             <i Include='i0'/>
@@ -817,7 +854,7 @@ public void MetadataConditionReferringToItems()
         public void MetadataConditionReferringToMetadataOnSameItem()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             <i Include='i1'>
                                 <m0>0</m0>
@@ -835,11 +872,167 @@ public void MetadataConditionReferringToMetadataOnSameItem()
             Assert.Equal(String.Empty, items[0].GetMetadataValue("m2"));
         }
 
+        /// <summary>
+        /// Fail build for drive enumerating wildcards that exist in projects on any platform.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb",
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            "$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"\")]
+        public void ThrowExceptionUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                string.Format(content, include, exclude) :
+                string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "1",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.FailWithError);
+        }
+
+        /// <summary>
+        /// Log warning for drive enumerating wildcards that exist in projects on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb",
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"z:\")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"z:")]
+        public void LogWindowsWarningUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                string.Format(content, include, exclude) :
+                string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithWarning);
+        }
+
+        /// <summary>
+        /// Log warning for drive enumerating wildcards that exist in projects on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"/")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*/*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"/*")]
+        public void LogUnixWarningUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                    string.Format(content, include, exclude) :
+                    string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                    content,
+                    "0",
+                    "TestTarget",
+                    Helpers.ExpectedBuildResult.SucceedWithWarning);
+        }
+
+        /// <summary>
+        /// Tests target item evaluation resulting in no build failures.
+        /// </summary>
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*.cs",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c:\*\")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"\$(Microsoft_WindowsAzure_EngSys)*\*.cs",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c:")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @":\$(Microsoft_WindowsAzure_EngSys)*\*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*\*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"\")]
+        public void NoErrorsAndWarningsUponBuildingProject(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                    string.Format(content, include, exclude) :
+                    string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithNoErrorsAndWarnings);
+        }
+
         [Fact]
         public void UpdateShouldRespectConditions()
         {
             string content = @"
-                      <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                      <Project>
                           <ItemGroup>
                               <i Include='a;b'>
                                   <m1>m1_contents</m1>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectMetadataInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectMetadataInstance_Tests.cs
index fa2a87e73a5..f716a9469c1 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectMetadataInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectMetadataInstance_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
index 9f7f440fc76..6804c09e7d0 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -33,7 +35,7 @@ public void Accessors()
         private static ProjectOnErrorInstance GetSampleOnErrorInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <OnError ExecuteTargets='et' Condition='c'/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
index 26363cbe96b..1f925217111 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectPropertyInstance_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
index cd8b717083a..02211ee3081 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -133,7 +135,7 @@ public void FileLocationAvailableEvenAfterEdits()
         private static ProjectTargetInstance GetSampleTargetInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t' Inputs='i' Outputs='o' Condition='c' DependsOnTargets='d' BeforeTargets='b' AfterTargets='a' KeepDuplicateOutputs='k' Returns='r'>
                             <t1/>
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
index 0ba22ec5eaf..2a7a9f6c73b 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -63,7 +65,7 @@ private static ProjectTaskInstance GetSampleTaskInstance()
         private static ProjectTaskInstance GetTaskInstance(string taskXmlString)
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'>
                             " + taskXmlString + @"
                         </Target>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
index 6d4906fe710..5afc11bd1b7 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -34,7 +36,7 @@ public void Accessors()
         private static ProjectTaskOutputItemInstance GetSampleTaskOutputInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' Condition='c' ItemName='i'/>
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
index 6c588126a63..a1f8045d634 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -34,7 +36,7 @@ public void Accessors()
         private static ProjectTaskOutputPropertyInstance GetSampleTaskOutputInstance()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                        <Target Name='t'>
                             <t1>
                                 <Output TaskParameter='p' Condition='c' PropertyName='p1'/>
diff --git a/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs b/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
index 493237ec52c..2940e3df2cf 100644
--- a/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
+++ b/src/Build.OM.UnitTests/LazyFormattedEventArgs_Tests.cs
@@ -4,6 +4,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Framework
 {
     /// <summary>
@@ -19,7 +21,7 @@ public class LazyFormattedEventArgs_Tests
         public void DoNotCrashOnInvalidFormatExpression()
         {
             string content = @"
- <Project DefaultTargets=`t` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+ <Project DefaultTargets=`t` ToolsVersion=`msbuilddefaulttoolsversion`>
    <UsingTask
      TaskName=`Crash`
      TaskFactory=`CodeTaskFactory`
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 00221821ec4..9760dcf7a92 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -31,11 +31,6 @@
     <Content Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(Configuration)' == 'Release'" Include="$(NuGetPackageRoot)\nuget.commandline\$(NuGetCommandLinePackageVersion)\tools\NuGet.exe" CopyToOutputDirectory="PreserveNewest" Link="nuget\NuGet.exe" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Compile Include="..\Shared\EncodingStringWriter.cs">
       <Link>EncodingStringWriter.cs</Link>
diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index 93d56ae6aaf..3c75c36b772 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -10,6 +10,8 @@
 #endif
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.OM.UnitTests
 {
     public sealed class NugetRestoreTests
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/TestCollectionGroup.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/TestCollectionGroup.cs
index 3e9fd6a872f..83ce92e4d30 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/TestCollectionGroup.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/TestCollectionGroup.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
index 8ebfe5804bb..100d0b6ae77 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.construction.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
index 3589801cb5b..4e1161c32ab 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
index fea0765bb61..ea46c70faa3 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/Helpers/ViewValidation.evaluation.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionModify_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionModify_Tests.cs
index 942348cb23d..2489f2b4687 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionModify_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionModify_Tests.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -778,4 +780,3 @@ public void ProjectOnErrorElementModify()
         }
     }
 }
-
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionReadOnly_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionReadOnly_Tests.cs
index 1222d6f9175..5c53201c0d8 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionReadOnly_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedConstructionReadOnly_Tests.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Linq;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
index 707c2fd8e66..d0f1b2125c9 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationModify_Tests.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -120,7 +122,7 @@ public void ProjectItemModify()
                 new KeyValuePair<string, string>("b", "bValue"),
             };
 
-            /// test AddItems
+            // test AddItems
             // add a new files in the view, ensure it is added correctly and also the real object will immediately reflect that add as well
             Assert.Null(pair.GetSingleItemWithVerify(ObjectType.View, "foo.cpp"));
             var fooView = pair.AddSingleItemWithVerify(ObjectType.View, "cpp", "foo.cpp");
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationReadOnly_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationReadOnly_Tests.cs
index a85eefbec89..5197936d9e4 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationReadOnly_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedEvaluationReadOnly_Tests.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Linq;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedProjectCollection_Tests.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedProjectCollection_Tests.cs
index 1860c67e314..89447997df1 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedProjectCollection_Tests.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedSpecialCasesScenarios.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedSpecialCasesScenarios.cs
index 8f1a864574a..62dba852a43 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedSpecialCasesScenarios.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/LinkedSpecialCasesScenarios.cs
@@ -1,5 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -169,8 +171,8 @@ private void CopyFromInternal(ProjectRootElement sourceProject)
             // children are not copied.
             Assert.Empty(newCopyFrom.View.Items);
             // but attributes are (even non standard)
-            //Assert.Equal("2", ProjectElementLink.GetAttributeValue(existingItemGroup, "FunnyAttribute", true));
-            //Assert.Equal("2", ProjectElementLink.GetAttributeValue(newCopyFrom.View, "FunnyAttribute", true));
+            // Assert.Equal("2", ProjectElementLink.GetAttributeValue(existingItemGroup, "FunnyAttribute", true));
+            // Assert.Equal("2", ProjectElementLink.GetAttributeValue(newCopyFrom.View, "FunnyAttribute", true));
             newCopyFrom.VerifyNotSame(ourGroup1);
 
 
@@ -186,7 +188,7 @@ private void CopyFromInternal(ProjectRootElement sourceProject)
             Assert.NotSame(realExistingItemGroup, newDeepCopy.Real);
             // TODO XmlLocation is (correctly) different for the items, need to find a way to bypass it.
             var context = new ValidationContext();
-            context.ValidateLocation = delegate (ElementLocation a, ElementLocation e) { return;};
+            context.ValidateLocation = delegate (ElementLocation a, ElementLocation e) { return; };
 
             ViewValidation.Verify(newDeepCopy.View, realExistingItemGroup, context);
             newDeepCopy.View.Label = "DeepCopyFrom";
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
index 3f0f13a0137..b6d935f41a7 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/CollectionsHelpers.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/InheritanceImplementationHelpers.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/InheritanceImplementationHelpers.cs
index 0c53fd5bed8..2dff6a546e7 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/InheritanceImplementationHelpers.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/InheritanceImplementationHelpers.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
index 9f302bece84..cd95fc66b3a 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectChooseElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
@@ -68,4 +70,3 @@ public MockProjectChooseElementLink(MockProjectChooseElementLinkRemoter proxy, I
         #endregion
     }
 }
-
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
index 26ea393decb..e4754f60d2c 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementContainerLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
index 41a79358295..40ee91d732b 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
index 1a38891169a..f4dadff9519 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectExtensionsElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
index daeeb6c9bd3..590b4f9dfe0 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
index 22a6ec3962e..98fe38f3e28 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectImportGroupElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
index 95c629b6f6c..2ebcdf29e14 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
index b8eb8f02601..324de0cd4ad 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemDefinitionGroupElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
index 19fe9b5f21a..387636a661a 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
index cf303dd364b..40c67b66ae4 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectItemGroupElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
index 93a45d29468..d4201a0e566 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectMetadataElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
index f0150fcb16f..670037f8ab9 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOnErrorElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
index 61d41fdb213..cf9ed5cfc73 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOtherwiseElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
index 71b51714734..e92c8bada54 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectOutputElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
index 8333d6cea58..171e9537b91 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
index 84df3d61166..aa4aa21be26 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectPropertyGroupElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
index 8e86f380dff..6b9da4a89be 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectRootElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
@@ -34,7 +36,7 @@ public override ProjectElement ImportImpl(ProjectCollectionLinker remote)
         public string DirectoryPath => this.ProjectXml.DirectoryPath;
         public string FullPath { get => this.ProjectXml.FullPath; set => this.ProjectXml.FullPath = value; }
         public ElementLocation ProjectFileLocation => this.ProjectXml.ProjectFileLocation;
-        public Encoding Encoding => this.ProjectXml.Encoding; //!! more complicated in reality when passing cross process.
+        public Encoding Encoding => this.ProjectXml.Encoding; // !! more complicated in reality when passing cross process.
         public string RawXml => this.ProjectXml.RawXml;
         public bool PreserveFormatting => this.ProjectXml.PreserveFormatting;
         public MockProjectChooseElementLinkRemoter CreateChooseElement()
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
index 42bd25eea51..e388f98a799 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectSdkElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
index fd3ead348d4..5f167256223 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTargetElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
index 4da84bb4ba6..0270ebd93f1 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectTaskElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
index 91946a3ed35..738ae4b419f 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskBodyElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
index 103ddf08fd5..6c712d6a783 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
index 3c5674aaa91..4a2ea57fc08 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectUsingTaskParameterElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
@@ -38,7 +40,7 @@ public MockProjectUsingTaskParameterElementLink(MockProjectUsingTaskParameterEle
         object ILinkMock.Remoter => this.Proxy;
         MockProjectElementLinkRemoter IProjectElementLinkHelper.ElementProxy => this.Proxy;
 
-        public override string Name { get => Proxy.Name ; set =>Proxy.Name = value; }
+        public override string Name { get => Proxy.Name; set =>Proxy.Name = value; }
         #region ProjectElementLink redirectors
         private IProjectElementLinkHelper EImpl => (IProjectElementLinkHelper)this;
         public override ProjectElementContainer Parent => EImpl.GetParent();
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
index b691aab8001..eab1585dd0b 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockProjectWhenElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
index 3a29f8fcb6c..7756a107763 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/MockUsingTaskParameterGroupElementLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
index 8ede445cd3e..6fba5806135 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ConstructionLinkMocks/ProjectElemetExportHelper.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -77,7 +79,7 @@ private static MockProjectElementLinkRemoter Export<RMock>(ProjectCollectionLink
             return exporter.Export<ProjectElement, RMock>(xml);
         }
 
-        private static bool IsOfType<T> (ProjectElement xml) { return xml is T; }
+        private static bool IsOfType<T>(ProjectElement xml) { return xml is T; }
 
         private static Dictionary<Type, ExporterFactory> knownTypes = new Dictionary<Type, ExporterFactory>();
 
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
index dd4dcf72f23..d09294c9ada 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/DirectlyRemotedClasses.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using Microsoft.Build.Construction;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
index 25b9fa61b9b..ae0dcaa1d05 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemDefinitionLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
@@ -15,8 +17,7 @@ public override ProjectItemDefinition CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        ///  ProjectItemDefinitionLink remoting
+        // ProjectItemDefinitionLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public string ItemType => this.Source.ItemType;
         public ICollection<MockProjectMetadataLinkRemoter> Metadata => this.OwningCollection.ExportCollection<ProjectMetadata, MockProjectMetadataLinkRemoter>(this.Source.Metadata);
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
index a4015cb2fb7..d9fc77084ea 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectItemLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System.Collections.Generic;
@@ -16,8 +18,7 @@ public override ProjectItem CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        ///  ProjectItemLink remoting
+        // ProjectItemLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public MockProjectItemElementLinkRemoter Xml => (MockProjectItemElementLinkRemoter)this.OwningCollection.ExportElement(this.Source.Xml);
         public string EvaluatedInclude => this.Source.EvaluatedInclude;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
index 324dcb6eb3f..2eaf1a6fa6f 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -22,8 +24,7 @@ public override Project CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        ///  ProjectLink remoting
+        // ProjectLink remoting
         public MockProjectElementLinkRemoter Xml => this.OwningCollection.ExportElement(this.Source.Xml);
 
         public bool ThrowInsteadOfSplittingItemElement { get => this.Source.ThrowInsteadOfSplittingItemElement; set => this.Source.ThrowInsteadOfSplittingItemElement = value; }
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
index dea676b3ea4..1399fb28746 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectMetadataLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using Microsoft.Build.Construction;
@@ -15,8 +17,7 @@ public override ProjectMetadata CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        ///  ProjectMetadataLink remoting
+        // ProjectMetadataLink remoting
         public object Parent
         {
             get
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
index 374f44d06bc..cea7656b893 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/EvaluationLinkMocks/MockProjectPropertyLink.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using Microsoft.Build.Construction;
@@ -15,8 +17,7 @@ public override ProjectProperty CreateLinkedObject(IImportHolder holder)
             return holder.Linker.LinkFactory.Create(link);
         }
 
-
-        ///  ProjectPropertyLink remoting
+        // ProjectPropertyLink remoting
         public MockProjectLinkRemoter Project => this.OwningCollection.Export<Project, MockProjectLinkRemoter>(this.Source.Project);
         public MockProjectPropertyElementLinkRemoter Xml => (MockProjectPropertyElementLinkRemoter)this.ExportElement(this.Source.Xml);
         public string Name => this.Source.Name;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
index 95a409f777e..1b7e3b67aee 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
@@ -99,7 +101,7 @@ internal interface IRemoterSource
     /// Base remoter object implementation.
     /// </summary>
     /// <typeparam name="T"></typeparam>
-    internal abstract class MockLinkRemoter<T> : ExportedLinksMap.LinkedObject<T> , IRemoterSource
+    internal abstract class MockLinkRemoter<T> : ExportedLinksMap.LinkedObject<T>, IRemoterSource
         where T : class
     {
         object IRemoterSource.RealObject => this.Source;
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
index b4a5223c125..da3a45fc598 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/LinkedObjectsMap.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.ObjectModelRemoting
 {
     using System;
diff --git a/src/Build.OM.UnitTests/TransientIO.cs b/src/Build.OM.UnitTests/TransientIO.cs
index a4baa8399ca..982474d02ea 100644
--- a/src/Build.OM.UnitTests/TransientIO.cs
+++ b/src/Build.OM.UnitTests/TransientIO.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     using System;
diff --git a/src/Build.UnitTests/BackEnd/AssemblyLoadContextTestTasks.cs b/src/Build.UnitTests/BackEnd/AssemblyLoadContextTestTasks.cs
index e3835a04268..3b1628e1def 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyLoadContextTestTasks.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyLoadContextTestTasks.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace AssemblyLoadContextTest
 {
     public class RegisterObject : Task
diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index 106e03beaf3..ffd6ed0068e 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -11,6 +11,9 @@
 using Microsoft.Build.Construction;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using Shouldly;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
@@ -255,8 +258,8 @@ public void VerifyGoodTaskInstantiation()
                     new AppDomainSetup(),
 #endif
                     false);
-                Assert.NotNull(createdTask);
-                Assert.False(createdTask is TaskHostTask);
+                createdTask.ShouldNotBeNull();
+                createdTask.ShouldNotBeOfType<TaskHostTask>();
             }
             finally
             {
diff --git a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
index bd728aee05e..e2602d1f7bd 100644
--- a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
@@ -16,6 +16,8 @@
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BatchingEngine_Tests
@@ -223,7 +225,7 @@ public void Regress_Mutation_DuplicateBatchingBucketsAreFoldedTogether()
         public void Simple()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <ItemGroup>
                         <AToB Include=""a;b""/>
@@ -254,7 +256,7 @@ public void Simple()
         public void Regress72803()
         {
             string content = @"
-                <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" DefaultTargets=""ReleaseBuild"">
+                <Project DefaultTargets=""ReleaseBuild"">
                     <ItemGroup>
                         <Environments Include=""dev"" />
                         <Environments Include=""prod"" />
@@ -295,7 +297,7 @@ public void Regress72803()
         public void BucketsWithEmptyListForBatchedItemList()
         {
             string content = @"
- <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+ <Project ToolsVersion=""msbuilddefaulttoolsversion"">
   <ItemGroup>
     <i Include=""b""/>
     <j Include=""a"">
@@ -324,7 +326,7 @@ public void BucketsWithEmptyListForBatchedItemList()
         public void BucketsWithEmptyListForTargetBatchedItemList()
         {
             string content = @"
-<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project ToolsVersion=""msbuilddefaulttoolsversion"">
     <ItemGroup>
         <a Include=""a1""/>
         <b Include=""b1""/>
@@ -349,7 +351,7 @@ public void BucketsWithEmptyListForTargetBatchedItemList()
         public void BatchOnEmptyOutput()
         {
             string content = @"
-         <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+         <Project ToolsVersion=""msbuilddefaulttoolsversion"">
             <ItemGroup>
               <File Include=""$(foo)"" />
             </ItemGroup>
@@ -375,7 +377,7 @@ public void BatchOnEmptyOutput()
         public void EachBatchGetsASeparateTaskObject()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include=""i1"">
                       <Code>high</Code>
@@ -404,7 +406,7 @@ public void EachBatchGetsASeparateTaskObject()
         public void BatcherPreservesItemOrderWithinASingleItemList()
         {
             string content = @"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <ItemGroup>
                         <AToZ Include=""a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z""/>
@@ -439,7 +441,7 @@ public void BatcherPreservesItemOrderWithinASingleItemList()
         public void UndefinedAndEmptyMetadataValues()
         {
             string content = @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <i Include='i1'/>
                         <i Include='i2'>
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 32e5a1a9ce1..c0d9aa78bbc 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -11,6 +11,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -125,7 +127,7 @@ public void TestSerializeString()
         [Fact]
         public void TestSerializeStringArray()
         {
-            HelperTestArray(new string[] { }, StringComparer.Ordinal);
+            HelperTestArray(Array.Empty<string>(), StringComparer.Ordinal);
             HelperTestArray(new string[] { "foo", "bar" }, StringComparer.Ordinal);
             HelperTestArray(null, StringComparer.Ordinal);
         }
diff --git a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
index 154780129ae..ff47a190984 100644
--- a/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildEventArgTransportSink_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index 466bce2536a..eae0afe3751 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -28,6 +28,8 @@
 using Xunit.Abstractions;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -193,7 +195,7 @@ private void SimpleP2PBuild(BuildParameters buildParameters)
                         .ProjectInstance.FullPath,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new string[0],
+                    Array.Empty<string>(),
                     null));
 
             result.OverallResult.ShouldBe(BuildResultCode.Success);
@@ -357,7 +359,7 @@ public void ShutdownNodesAfterParallelBuild(int numberOfParallelProjectsToBuild,
                 EnableNodeReuse = true,
                 DisableInProcNode = true,
                 SaveOperatingEnvironment = false,
-                Loggers = new List<ILogger> {new MockLogger(_output)}
+                Loggers = new List<ILogger> { new MockLogger(_output) }
             };
 
             // Tell the build manager to not disturb process wide state
@@ -444,7 +446,7 @@ private void RunOutOfProcBuild(Action<BuildParameters> buildParametersModifier)
 
             Project project = CreateProject(CleanupFileContents(contents), MSBuildDefaultToolsVersion, _projectCollection, false);
 
-            var data = new BuildRequestData(project.CreateProjectInstance(), new string[0], _projectCollection.HostServices);
+            var data = new BuildRequestData(project.CreateProjectInstance(), Array.Empty<string>(), _projectCollection.HostServices);
             var customparameters = new BuildParameters { EnableNodeReuse = false, Loggers = new ILogger[] { _logger } };
             buildParametersModifier(customparameters);
 
@@ -506,16 +508,16 @@ public void RequestedResultsAreSatisfied()
                     {"AnItem", null},
                     {"ItemWithMetadata", new List<string> {"Metadatum1"}},
                 },
-                PropertyFilters = new List<string> {"NewProperty", "RequestedProperty"},
+                PropertyFilters = new List<string> { "NewProperty", "RequestedProperty" },
             };
 
-            var data = new BuildRequestData(project.CreateProjectInstance(), new [] {"test", "other"},
+            var data = new BuildRequestData(project.CreateProjectInstance(), new[] { "test", "other" },
                 _projectCollection.HostServices, BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild, null,
                 requestedProjectState);
             var customparameters = new BuildParameters
             {
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger},
+                Loggers = new ILogger[] { _logger },
                 DisableInProcNode = true,
             };
 
@@ -655,7 +657,7 @@ public void MsBuildForwardAllPropertiesFromChildLaunchChildNode()
             _env.SetEnvironmentVariable("MsBuildForwardPropertiesFromChild", "Something");
 
             var project = CreateProject(contents, null, _projectCollection, false);
-            var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new string[] { }, null);
+            var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -711,7 +713,7 @@ public void OutOfProcNodeForwardCertainproperties()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -773,7 +775,7 @@ public void OutOfProcNodeForwardCertainpropertiesAlsoGetResultsFromCache()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -828,7 +830,7 @@ public void ForwardNoPropertiesLaunchChildNode()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
@@ -897,7 +899,7 @@ public override bool Execute()
 
             var project = CreateProject(contents, null, projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             var customParameters = new BuildParameters(projectCollection) { Loggers = new ILogger[] { _logger } };
             BuildResult result = _buildManager.Build(customParameters, data);
@@ -932,7 +934,7 @@ public void ForwardNoPropertiesLaunchChildNodeDefault()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
             _logger.AssertLogContains("[success]");
@@ -1098,7 +1100,7 @@ public void SimpleBuildWithFailureAndWarningOnlyLogCriticalEventsFalse()
         [Fact]
         public void BuildRequestWithoutBegin()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.BuildRequest(data));
         }
 
@@ -1108,7 +1110,7 @@ public void BuildRequestWithoutBegin()
         [Fact]
         public void GraphBuildRequestWithoutBegin()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.BuildRequest(data));
         }
 
@@ -1118,7 +1120,7 @@ public void GraphBuildRequestWithoutBegin()
         [Fact]
         public void PendBuildRequestWithoutBegin()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.PendBuildRequest(data));
         }
 
@@ -1128,7 +1130,7 @@ public void PendBuildRequestWithoutBegin()
         [Fact]
         public void PendGraphBuildRequestWithoutBegin()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.PendBuildRequest(data));
         }
 
@@ -1154,7 +1156,7 @@ public void DisposeAfterUse()
 ");
             var project = CreateProject(contents, null, _projectCollection, false);
             var globalProperties = new Dictionary<string, string>();
-            var targets = new string[0];
+            var targets = Array.Empty<string>();
             var brd = new BuildRequestData(project.FullPath, globalProperties, null, targets, new HostServices());
             using (var bm = new BuildManager())
             {
@@ -1218,7 +1220,7 @@ public void ExtraEnds()
         [Fact]
         public void PendBuildRequestAfterEnd()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             _buildManager.BeginBuild(new BuildParameters());
             _buildManager.EndBuild();
 
@@ -1231,7 +1233,7 @@ public void PendBuildRequestAfterEnd()
         [Fact]
         public void PendGraphBuildRequestAfterEnd()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             _buildManager.BeginBuild(new BuildParameters());
             _buildManager.EndBuild();
 
@@ -1247,7 +1249,7 @@ public void BuildDuringBuild()
             try
             {
                 BuildRequestData data =
-                    new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+                    new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
                 _buildManager.BeginBuild(new BuildParameters());
 
                 Assert.Throws<InvalidOperationException>(() => { _buildManager.Build(new BuildParameters(), data); });
@@ -1489,7 +1491,7 @@ public void EndWithUnexecutedSubmission()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             _buildManager.PendBuildRequest(data);
             _buildManager.EndBuild();
@@ -1509,7 +1511,7 @@ public void CancelledBuildWithUnexecutedSubmission()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             _buildManager.PendBuildRequest(data);
             _buildManager.CancelAllSubmissions();
@@ -1532,14 +1534,14 @@ public void CancelledBuild()
 </Project>
 ");
 
-            BuildParameters parameters = new ()
+            BuildParameters parameters = new()
             {
                 ShutdownInProcNodeOnBuildFinish = true,
                 Loggers = new ILogger[] { _logger, new MockLogger(printEventsToStdout: true) },
                 EnableNodeReuse = false
             };
 
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
 
             Console.WriteLine("CancelledBuild: beginning build");
             _buildManager.BeginBuild(_parameters);
@@ -1620,7 +1622,7 @@ public void CancelledBuildInTaskHostWithDelay20()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1657,7 +1659,7 @@ public void CancelledBuildWithDelay40()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1679,16 +1681,16 @@ public void CancelledBuildWithDelay40()
         [Fact]
         public void CancelledBuildInTaskHostWithDelay40()
         {
-            string contents = CleanupFileContents(@"
+            string contents = CleanupFileContents(@$"
 <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
  <UsingTask TaskName='Microsoft.Build.Tasks.Exec' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' TaskFactory='TaskHostFactory' />
  <Target Name='test'>
-    <Exec Command='" + Helpers.GetSleepCommand(TimeSpan.FromSeconds(10)) + @"'/>
+    <Exec Command='{Helpers.GetSleepCommand(TimeSpan.FromSeconds(10))}'/>
     <Message Text='[errormessage]'/>
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1725,8 +1727,8 @@ public void SequentialBuildsOfTheSameProjectAllowed()
             Project project = CreateProject(contents, MSBuildDefaultToolsVersion, _projectCollection, true);
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
-            BuildResult result1 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] {"target1"}));
-            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] {"target2"}));
+            BuildResult result1 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target1" }));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target2" }));
             _buildManager.EndBuild();
 
             Assert.Equal(BuildResultCode.Success, result1.OverallResult);
@@ -1757,9 +1759,9 @@ public void OverlappingBuildsOfTheSameProjectDifferentTargetsAreAllowed()
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
 
-            BuildSubmission submission =_buildManager.PendBuildRequest(new BuildRequestData(instance, new[] {"target1"}));
+            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] { "target1" }));
             submission.ExecuteAsync(null, null);
-            BuildResult result2 =_buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] {"target2"}));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] { "target2" }));
 
             submission.WaitHandle.WaitOne();
             var result1 = submission.BuildResult;
@@ -1792,9 +1794,9 @@ public void OverlappingBuildsOfTheSameProjectSameTargetsAreAllowed()
             ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
             _buildManager.BeginBuild(_parameters);
 
-            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] {"target1"}));
+            BuildSubmission submission = _buildManager.PendBuildRequest(new BuildRequestData(instance, new[] { "target1" }));
             submission.ExecuteAsync(null, null);
-            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] {"target1"}));
+            BuildResult result2 = _buildManager.BuildRequest(new BuildRequestData(project.CreateProjectInstance(), new[] { "target1" }));
             submission.WaitHandle.WaitOne();
             var result1 = submission.BuildResult;
 
@@ -1828,7 +1830,7 @@ public void OutOfProcNodeDoesntLockWorkingDirectory()
 
             File.WriteAllText(projectFile, contents);
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
-            var data = new BuildRequestData(projectFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new string[] { }, null);
+            var data = new BuildRequestData(projectFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             _buildManager.Build(_parameters, data);
         }
 
@@ -1983,7 +1985,7 @@ public void GhostProjectRootElementCache()
 
             // Create Project 1
             ProjectInstance projectInstance = CreateProjectInstance(contents1, null, _projectCollection, false);
-            var data = new BuildRequestData(projectInstance, new string[0]);
+            var data = new BuildRequestData(projectInstance, Array.Empty<string>());
 
             _logger.ClearLog();
 
@@ -2010,7 +2012,7 @@ public void GhostProjectRootElementCache()
 
             // Create a new build.
             ProjectInstance projectInstance2 = CreateProjectInstance(contents1, null, _projectCollection, false);
-            var data2 = new BuildRequestData(projectInstance2, new string[0]);
+            var data2 = new BuildRequestData(projectInstance2, Array.Empty<string>());
 
             // Build again.
             _parameters.ResetCaches = false;
@@ -2148,7 +2150,7 @@ public void Regress239661()
 
             string fileName = _env.CreateFile(".proj").Path;
             File.WriteAllText(fileName, contents);
-            var data = new BuildRequestData(fileName, _projectCollection.GlobalProperties, MSBuildDefaultToolsVersion, new string[0], null);
+            var data = new BuildRequestData(fileName, _projectCollection.GlobalProperties, MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             _parameters.DisableInProcNode = true;
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -2236,7 +2238,7 @@ public void ProjectInstanceTransfersToOOPNode()
                 }
             }
 
-            var data = new BuildRequestData(instance, new string[0]);
+            var data = new BuildRequestData(instance, Array.Empty<string>());
 
             // Force this to build out-of-proc
             _parameters.DisableInProcNode = true;
@@ -2280,7 +2282,7 @@ public void ProjectInstanceLimitedTransferToOOPNode()
             instance.SetProperty("VirtualProp", "overridden");
             instance.SetProperty("Unmodified", "changed");
 
-            var data = new BuildRequestData(instance, new string[0], null, BuildRequestDataFlags.None, new string[] { "VirtualProp" });
+            var data = new BuildRequestData(instance, Array.Empty<string>(), null, BuildRequestDataFlags.None, new string[] { "VirtualProp" });
 
             // Force this to build out-of-proc
             _parameters.DisableInProcNode = true;
@@ -2307,7 +2309,7 @@ public void CacheLifetime()
             // Do a build with one build manager.
             using (var outerBuildManager = new BuildManager())
             {
-                outerBuildCacheDirectory = BuildAndCheckCache(outerBuildManager, new string[] { });
+                outerBuildCacheDirectory = BuildAndCheckCache(outerBuildManager, Array.Empty<string>());
 
                 // Do another build with a second build manager while the first still exists.  Since both BuildManagers
                 // share a process-wide cache directory, we want to verify that they don't stomp on each other, either
@@ -2567,7 +2569,7 @@ public void Regress473114()
             var projD = _env.CreateFile(".proj").Path;
 
             string contentsA = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Build'>
   <ItemGroup>
     <ProjectReference Include='" + projD + @"' />
     <ProjectReference Include='" + projC + @"' />
@@ -2581,7 +2583,7 @@ public void Regress473114()
 ";
 
             string contentsB = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='CallsGenerateImpLib' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='CallsGenerateImpLib'>
   <Target Name='CallsGenerateImpLib'>
     <MSBuild Projects='" + projC + @"' Targets='GenerateImpLib' BuildInParallel='true' />
   </Target>
@@ -2590,7 +2592,7 @@ public void Regress473114()
 ";
 
             string contentsC = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Default' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Default'>
   <Target Name='Default' DependsOnTargets='ResolveReferences;BuildCompile'>
     <Message Text='Executed Default' />
   </Target>
@@ -2611,7 +2613,7 @@ public void Regress473114()
 ";
 
             string contentsD = @"<?xml version='1.0' encoding='utf-8'?>
-<Project ToolsVersion='4.0' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='4.0' DefaultTargets='Build'>
   <Target Name='Build'>
     <Message Text='In d.proj' />
   </Target>
@@ -2705,7 +2707,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_Simple()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -2806,7 +2808,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_OnErrorChain()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -2910,7 +2912,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_ErrorAndContinue()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -3000,7 +3002,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_AfterTargets()
             _parameters.EnableNodeReuse = false;
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
@@ -3069,7 +3071,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_DifferentEntrypoints()
 
             _buildManager.BeginBuild(_parameters);
             var data = new BuildRequestData(projA, new Dictionary<string, string>(), null,
-                new[] {"Build"}, new HostServices());
+                new[] { "Build" }, new HostServices());
             BuildResult result = _buildManager.PendBuildRequest(data).Execute();
 
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -3528,7 +3530,7 @@ private static Dictionary<string, string> ExtractProjectStartedPropertyList(IEnu
         {
             // Gather a sorted list of all the properties.
             return properties?.Cast<DictionaryEntry>()
-                .ToDictionary(prop => (string) prop.Key, prop => (string) prop.Value, StringComparer.OrdinalIgnoreCase);
+                .ToDictionary(prop => (string)prop.Key, prop => (string)prop.Value, StringComparer.OrdinalIgnoreCase);
         }
 
         /// <summary>
@@ -3607,7 +3609,7 @@ private static ProjectInstance GenerateDummyProjects(string shutdownProjectDirec
             // causes the projects to be built to be separate configs, which allows us to build the same project
             // a bunch of times in parallel.
             //
-            // <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>
+            // <Project/>
             //   <ItemGroup>
             //     <ProjectReference Include="RootProjectName.proj">
             //       <AdditionalProperties>p={incremented value}</AdditionalProperties>
@@ -3691,7 +3693,7 @@ public void ShouldBuildMutatedProjectInstanceWhoseProjectWasPreviouslyBuiltAsAP2
 
                     Assert.Empty(mainInstance.GlobalProperties);
 
-                    var request = new BuildRequestData(mainInstance, new[] {"BuildOther"});
+                    var request = new BuildRequestData(mainInstance, new[] { "BuildOther" });
 
                     var parameters = new BuildParameters
                     {
@@ -3720,7 +3722,7 @@ public void ShouldBuildMutatedProjectInstanceWhoseProjectWasPreviouslyBuiltAsAP2
 
                         p2pInstance.SetProperty("P", newPropertyValue);
 
-                        request = new BuildRequestData(p2pInstance, new[] {"Foo"});
+                        request = new BuildRequestData(p2pInstance, new[] { "Foo" });
                         submission = manager.PendBuildRequest(request);
                         results = submission.Execute();
 
@@ -3757,13 +3759,13 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
   </Target>
 
 </Project>";
-            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] {"main", "p2p"}, string.Empty);
+            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "p2p" }, string.Empty);
 
             var buildParameters = new BuildParameters(_projectCollection)
             {
                 DisableInProcNode = true,
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger}
+                Loggers = new ILogger[] { _logger }
             };
 
             _buildManager.BeginBuild(buildParameters);
@@ -3782,7 +3784,7 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
                     mainProjectPath,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new[] {"MainTarget"},
+                    new[] { "MainTarget" },
                     null
                 );
 
@@ -3800,9 +3802,12 @@ public void OutOfProcFileBasedP2PBuildSucceeds()
             }
         }
 
-        /// When a ProjectInstance based BuildRequestData is built out of proc, the node should
+        /// <summary>
+        /// When a <see cref="ProjectInstance"/> based <see cref="BuildRequestData"/> is built out of proc, the node should
         /// not reload it from disk but instead fully utilize the entire translate project instance state
-        /// to do the build
+        /// to do the build.
+        /// </summary>
+        /// <param name="shouldSerializeEntireState"><see langword="true"/> to serialize the entire project instance state; otherwise, <see langword="false"/>.</param>
         [Theory]
         [InlineData(false)]
         [InlineData(true)]
@@ -3823,7 +3828,7 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
   </Target>
 </Project>";
 
-            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] {"main", "import"}, string.Empty);
+            var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "import" }, string.Empty);
 
             var importPath = testFiles.CreatedFiles[1];
             File.WriteAllText(importPath, CleanupFileContents(importProject));
@@ -3841,13 +3846,13 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
 
             instance.TranslateEntireState = shouldSerializeEntireState;
 
-            var request = new BuildRequestData(instance, new[] {"Foo"});
+            var request = new BuildRequestData(instance, new[] { "Foo" });
 
             var parameters = new BuildParameters(_projectCollection)
             {
                 DisableInProcNode = true,
                 EnableNodeReuse = false,
-                Loggers = new ILogger[] {_logger}
+                Loggers = new ILogger[] { _logger }
             };
 
             _buildManager.BeginBuild(parameters);
@@ -3871,7 +3876,7 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
             // Building the stale project instance should still succeed when the entire state is translated: MSBuild should use the
             // in-memory state to build and not reload from disk.
             _buildManager.BeginBuild(parameters);
-            request = new BuildRequestData(instance, new[] {"Foo"}, null,
+            request = new BuildRequestData(instance, new[] { "Foo" }, null,
                 BuildRequestDataFlags.ReplaceExistingProjectInstance);
             submission = _buildManager.PendBuildRequest(request);
 
@@ -4026,7 +4031,7 @@ public void MultiProcReentrantProjectWithCallTargetDoesNotFail()
                     }
                 };
 
-                var buildRequestData = new BuildRequestData(entryFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new[]{ "EntryTarget" }, null);
+                var buildRequestData = new BuildRequestData(entryFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new[] { "EntryTarget" }, null);
 
                 var result = _buildManager.Build(buildParameters, buildRequestData);
 
@@ -4082,8 +4087,8 @@ handoff logging completion to the BuildManager.
                      * the request but does not simulate the ProjectStarted / ProjectEnded events. It also leaves logging completion to the
                      * BuildManager.
                      */
-                    var request1 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] {"Build"}, null);
-                    var request2 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] {"Build"}, null);
+                    var request1 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] { "Build" }, null);
+                    var request2 = new BuildRequestData(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, new[] { "Build" }, null);
 
                     /* During builds, msbuild changes the current directory.
                      * When this test fails, the build never finishes so the current directory never gets restored.
@@ -4315,7 +4320,7 @@ public void GraphBuildCircular()
         [Fact]
         public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
         {
-            var graph = Helpers.CreateProjectGraph(env: _env, dependencyEdges: new Dictionary<int, int[]> {{1, new[] {2, 3}}});
+            var graph = Helpers.CreateProjectGraph(env: _env, dependencyEdges: new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } });
 
             MockLogger logger = null;
 
@@ -4323,11 +4328,11 @@ public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
             {
                 var graphResult = buildSession.BuildGraphSubmission(
                     new GraphBuildRequestData(
-                        projectGraphEntryPoints: new[] {new ProjectGraphEntryPoint(graph.GraphRoots.First().ProjectInstance.FullPath)},
-                        targetsToBuild: new string[0],
+                        projectGraphEntryPoints: new[] { new ProjectGraphEntryPoint(graph.GraphRoots.First().ProjectInstance.FullPath) },
+                        targetsToBuild: Array.Empty<string>(),
                         hostServices: null,
                         flags: BuildRequestDataFlags.None,
-                        graphBuildOptions: new GraphBuildOptions {Build = false}));
+                        graphBuildOptions: new GraphBuildOptions { Build = false }));
 
                 graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
                 logger = buildSession.Logger;
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfigurationResponse_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfigurationResponse_Tests.cs
index ea11fb4ac01..c34403403be 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfigurationResponse_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfigurationResponse_Tests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 9ccf30da8e2..7d42cfe8206 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -18,6 +18,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildRequestConfiguration_Tests : IDisposable
@@ -39,7 +41,7 @@ public void TestConstructorNullFile()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
@@ -48,14 +50,14 @@ public void TestConstructorNullProps()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
         [Fact]
         public void TestConstructor1()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
         }
 
         [Fact]
@@ -63,7 +65,7 @@ public void TestConstructorInvalidConfigId()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(1, data, "2.0");
                 config1.ShallowCloneWithNewId(0);
             }
@@ -72,14 +74,14 @@ public void TestConstructorInvalidConfigId()
         [Fact]
         public void TestConstructor2PositiveConfigId()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             new BuildRequestConfiguration(1, config1, "2.0");
         }
 
         [Fact]
         public void TestConstructor2NegativeConfigId()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             new BuildRequestConfiguration(-1, config1, "2.0");
         }
 
@@ -88,7 +90,7 @@ public void TestConstructor2NullFile()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
@@ -98,22 +100,22 @@ public void TestConstructor2NullProps()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
         [Fact]
         public void TestWasGeneratedByNode()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data1, "2.0");
             Assert.True(config1.WasGeneratedByNode);
 
-            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data2, "2.0");
             Assert.False(config2.WasGeneratedByNode);
 
-            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(data3, "2.0");
             Assert.False(config3.WasGeneratedByNode);
         }
@@ -121,15 +123,15 @@ public void TestWasGeneratedByNode()
         [Fact]
         public void TestDefaultConfigurationId()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data1, "2.0");
             Assert.Equal(-1, config1.ConfigurationId);
 
-            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data2, "2.0");
             Assert.Equal(1, config2.ConfigurationId);
 
-            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(0, data3, "2.0");
             Assert.Equal(0, config3.ConfigurationId);
         }
@@ -139,7 +141,7 @@ public void TestSetConfigurationIdBad()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data, "2.0");
                 config1.ConfigurationId = -2;
             }
@@ -148,7 +150,7 @@ public void TestSetConfigurationIdBad()
         [Fact]
         public void TestSetConfigurationIdGood()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data, "2.0");
             Assert.Equal(0, config1.ConfigurationId);
             config1.ConfigurationId = 1;
@@ -158,7 +160,7 @@ public void TestSetConfigurationIdGood()
         [Fact]
         public void TestGetFileName()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data, "2.0");
             Assert.Equal(config1.ProjectFullPath, Path.GetFullPath("file"));
         }
@@ -166,7 +168,7 @@ public void TestGetFileName()
         [Fact]
         public void TestGetToolsVersion()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Equal("toolsVersion", config1.ToolsVersion);
         }
@@ -175,7 +177,7 @@ public void TestGetToolsVersion()
         public void TestGetProperties()
         {
             Dictionary<string, string> props = new Dictionary<string, string>();
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", props, "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", props, "toolsVersion", Array.Empty<string>(), null), "2.0");
 
             Assert.Equal(props.Count, Helpers.MakeList((IEnumerable<ProjectPropertyInstance>)(config1.GlobalProperties)).Count);
         }
@@ -183,7 +185,7 @@ public void TestGetProperties()
         [Fact]
         public void TestSetProjectGood()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Null(config1.Project);
             Project project = new Project(XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace' />"))));
@@ -196,7 +198,7 @@ public void TestSetProjectGood()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Equal(NodePacketType.BuildRequestConfiguration, config1.Type);
         }
@@ -204,11 +206,11 @@ public void TestPacketType()
         [Fact]
         public void TestGetHashCode()
         {
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("File", new Dictionary<string, string>(), "ToolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
-            BuildRequestConfiguration config5 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("File", new Dictionary<string, string>(), "ToolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config5 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
 
             Assert.Equal(config1.GetHashCode(), config2.GetHashCode());
             Assert.NotEqual(config1.GetHashCode(), config3.GetHashCode());
@@ -219,20 +221,20 @@ public void TestGetHashCode()
         [Fact]
         public void TestEquals()
         {
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.Equal(config1, config1);
-            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.Equal(config1, config2);
 
-            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.NotEqual(config1, config3);
 
-            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
+            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
             Assert.NotEqual(config1, config4);
 
             PropertyDictionary<ProjectPropertyInstance> props = new PropertyDictionary<ProjectPropertyInstance>();
             props.Set(ProjectPropertyInstance.Create("prop1", "value1"));
-            BuildRequestData data = new BuildRequestData("file", props.ToDictionary(), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", props.ToDictionary(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config5 = new BuildRequestConfiguration(data, "2.0");
             Assert.NotEqual(config1, config5);
 
@@ -247,7 +249,7 @@ public void TestTranslation()
             properties.Set(ProjectPropertyInstance.Create("this", "that"));
             properties.Set(ProjectPropertyInstance.Create("foo", "bar"));
 
-            BuildRequestData data = new BuildRequestData("file", properties.ToDictionary(), "4.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", properties.ToDictionary(), "4.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(data, "2.0");
 
             Assert.Equal(NodePacketType.BuildRequestConfiguration, config.Type);
@@ -288,7 +290,7 @@ public void TestTranslationWithEntireProjectState()
 
             instance.TranslateEntireState = true;
 
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
             configuration.ConfigurationId = 1;
 
             ((ITranslatable)configuration).Translate(TranslationHelpers.GetWriteTranslator());
@@ -308,7 +310,7 @@ public void TestTranslationWithEntireProjectState()
         [Fact]
         public void TestProperties()
         {
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData("path", new Dictionary<string, string>(), "2.0", new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData("path", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null), "2.0");
             Assert.True(configuration.IsCacheable);
             Assert.False(configuration.IsLoaded);
             Assert.False(configuration.IsCached);
@@ -361,7 +363,7 @@ public void TestCache()
                 new ProjectCollection());
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
             configuration.ConfigurationId = 1;
 
             string originalValue = Environment.GetEnvironmentVariable("MSBUILDCACHE");
@@ -462,7 +464,7 @@ public void TestCache2()
             Project project = new Project(XmlReader.Create(new StringReader(projectBody)), globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new ProjectCollection());
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
 
             string originalTmp = Environment.GetEnvironmentVariable("TMP");
             string originalTemp = Environment.GetEnvironmentVariable("TEMP");
@@ -562,7 +564,7 @@ private void TestSkipIsolationConstraints(string glob, string referencePath, boo
 
             var projectInstance = project.CreateProjectInstance();
 
-            var configuration = new BuildRequestConfiguration(new BuildRequestData(projectInstance, new string[] {}), MSBuildConstants.CurrentToolsVersion);
+            var configuration = new BuildRequestConfiguration(new BuildRequestData(projectInstance, Array.Empty<string>()), MSBuildConstants.CurrentToolsVersion);
 
             if (referencePath.Contains("$"))
             {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index bd2e1172fe5..3a464d3c342 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -15,6 +15,8 @@
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
@@ -331,7 +333,7 @@ private void ConfigureEngine(IBuildRequestEngine engine)
         [Fact]
         public void TestEngineShutdownWhileActive()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -359,7 +361,7 @@ public void TestEngineShutdownWhileActive()
         [Fact]
         public void TestSimpleBuildScenario()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -386,7 +388,7 @@ public void TestSimpleBuildScenario()
         [Fact]
         public void TestBuildWithChildren()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -439,13 +441,13 @@ public void TestBuildWithChildren()
         [Fact]
         public void TestBuildWithNewConfiguration()
         {
-            BuildRequestData data = new BuildRequestData(Path.GetFullPath("TestFile"), new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData(Path.GetFullPath("TestFile"), new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
             // Configure the builder to spawn build requests
             MockRequestBuilder builder = (MockRequestBuilder)_host.GetComponent(BuildComponentType.RequestBuilder);
-            BuildRequestData data2 = new BuildRequestData(Path.GetFullPath("OtherFile"), new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData(Path.GetFullPath("OtherFile"), new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration unresolvedConfig = new BuildRequestConfiguration(data2, "2.0");
             builder.NewRequests.Add(new FullyQualifiedBuildRequest[1] { new FullyQualifiedBuildRequest(unresolvedConfig, new string[1] { "requiredTarget1" }, true) });
 
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
index 00e27aeca13..d81ca32ecba 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Unittest;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildRequestEntry_Tests
@@ -20,8 +22,8 @@ public class BuildRequestEntry_Tests
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0] { });
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -43,7 +45,7 @@ public void TestSimpleStateProgression()
         {
             // Start in Ready
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
             Assert.Equal(entry.Request, request);
@@ -91,7 +93,7 @@ public void TestSimpleStateProgression()
         public void TestResolveConfiguration()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -113,7 +115,7 @@ public void TestResolveConfiguration()
         public void TestMultipleWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -143,7 +145,7 @@ public void TestMultipleWaitingRequests()
         public void TestMixedWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -180,7 +182,7 @@ public void TestNoReadyToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -197,7 +199,7 @@ public void TestNoReadyToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -215,7 +217,7 @@ public void TestNoWaitingToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -240,7 +242,7 @@ public void TestNoCompleteToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -261,7 +263,7 @@ public void TestNoCompleteToWaiting()
         public void TestResultsWithNoMatch1()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -272,7 +274,7 @@ public void TestResultsWithNoMatch1()
             entry.WaitForResult(waitingRequest1);
             Assert.Equal(BuildRequestEntryState.Waiting, entry.State);
 
-            BuildRequest randomRequest = CreateNewBuildRequest(3, new string[0]);
+            BuildRequest randomRequest = CreateNewBuildRequest(3, Array.Empty<string>());
             BuildResult requiredResult = new BuildResult(randomRequest);
             requiredResult.AddResultsForTarget("bar", BuildResultUtilities.GetEmptySucceedingTargetResult());
             entry.ReportResult(requiredResult);
diff --git a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
index 9cede0f7298..f4cd9d64cf0 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
@@ -2,13 +2,16 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Runtime.Versioning;
+
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildRequest_Tests
@@ -32,39 +35,39 @@ public void TestConstructorBad()
         [Fact]
         public void TestConstructorGood()
         {
-            CreateNewBuildRequest(0, new string[0] { });
+            CreateNewBuildRequest(0, Array.Empty<string>() );
         }
 
         [Fact]
         public void TestConfigurationId()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.Equal(0, request.ConfigurationId);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0] { });
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             Assert.Equal(1, request2.ConfigurationId);
 
-            BuildRequest request3 = CreateNewBuildRequest(-1, new string[0] { });
+            BuildRequest request3 = CreateNewBuildRequest(-1, Array.Empty<string>());
             Assert.Equal(-1, request3.ConfigurationId);
         }
 
         [Fact]
         public void TestConfigurationResolved()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.False(request.IsConfigurationResolved);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0] { });
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             Assert.True(request2.IsConfigurationResolved);
 
-            BuildRequest request3 = CreateNewBuildRequest(-1, new string[0] { });
+            BuildRequest request3 = CreateNewBuildRequest(-1, Array.Empty<string>());
             Assert.False(request3.IsConfigurationResolved);
         }
 
         [Fact]
         public void TestTargets()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.NotNull(request.Targets);
             Assert.Empty(request.Targets);
 
@@ -77,14 +80,14 @@ public void TestTargets()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.Equal(NodePacketType.BuildRequest, request.Type);
         }
 
         [Fact]
         public void TestResolveConfigurationGood()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             request.ResolveConfiguration(1);
             Assert.True(request.IsConfigurationResolved);
             Assert.Equal(1, request.ConfigurationId);
@@ -95,7 +98,7 @@ public void TestResolveConfigurationBad()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0] { });
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 request.ResolveConfiguration(2);
             }
            );
@@ -106,7 +109,7 @@ public void TestResolveConfigurationBad2()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+                BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
                 request.ResolveConfiguration(-1);
             }
            );
@@ -136,9 +139,9 @@ public void TestTranslation()
             }
         }
 
-#if FEATURE_COM_INTEROP
         [Fact]
-        [SkipOnMono("disable com tests on mono")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void TestTranslationRemoteHostObjects()
         {
             var stateInHostObject = 3;
@@ -178,7 +181,6 @@ public void TestTranslationRemoteHostObjects()
                 hostObject.GetState().ShouldBe(stateInHostObject);
             }
         }
-#endif
 
         [Fact]
         public void TestTranslationHostObjectsWhenEmpty()
diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index e46a84eb0e4..9901c21cbca 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -14,6 +14,8 @@
 using Xunit;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildResult_Tests
@@ -28,14 +30,14 @@ public BuildResult_Tests()
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request);
         }
 
         [Fact]
         public void Clone()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result1 = new BuildResult(request);
             result1.ResultsByTarget.Add("FOO", BuildResultUtilities.GetEmptySucceedingTargetResult());
             Assert.True(result1.ResultsByTarget.ContainsKey("foo")); // test comparer
@@ -68,11 +70,11 @@ public void TestConstructorBad()
         [Fact]
         public void TestConfigurationId()
         {
-            BuildRequest request = CreateNewBuildRequest(-1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(-1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(-1, result.ConfigurationId);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request2);
             Assert.Equal(1, result2.ConfigurationId);
         }
@@ -80,7 +82,7 @@ public void TestConfigurationId()
         [Fact]
         public void TestExceptionGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Null(result.Exception);
             AccessViolationException e = new AccessViolationException();
@@ -92,20 +94,20 @@ public void TestExceptionGood()
         [Fact]
         public void TestOverallResult()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
-            result.AddResultsForTarget("bar", new TargetResult(new TaskItem[0] { }, new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, new Exception())));
+            result.AddResultsForTarget("bar", new TargetResult(Array.Empty<TaskItem>(), new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, new Exception())));
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
-            result.AddResultsForTarget("baz", new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetStopWithErrorResult(new Exception())));
+            result.AddResultsForTarget("baz", new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult(new Exception())));
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
 
-            BuildRequest request2 = CreateNewBuildRequest(2, new string[0]);
+            BuildRequest request2 = CreateNewBuildRequest(2, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request2);
             result2.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             result2.AddResultsForTarget("bar", BuildResultUtilities.GetEmptyFailingTargetResult());
@@ -115,7 +117,7 @@ public void TestOverallResult()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(NodePacketType.BuildResult, ((INodePacket)result).Type);
         }
@@ -123,7 +125,7 @@ public void TestPacketType()
         [Fact]
         public void TestAddAndRetrieve()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             result.AddResultsForTarget("bar", BuildResultUtilities.GetEmptyFailingTargetResult());
@@ -137,7 +139,7 @@ public void TestIndexerBad1()
         {
             Assert.Throws<KeyNotFoundException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 ITargetResult targetResult = result["foo"];
             }
@@ -149,7 +151,7 @@ public void TestIndexerBad2()
         {
             Assert.Throws<KeyNotFoundException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
                 ITargetResult targetResult = result["bar"];
@@ -162,7 +164,7 @@ public void TestAddResultsInvalid1()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
             }
@@ -174,7 +176,7 @@ public void TestAddResultsInvalid2()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", null);
             }
@@ -186,7 +188,7 @@ public void TestAddResultsInvalid3()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
             }
@@ -195,7 +197,7 @@ public void TestAddResultsInvalid3()
         [Fact]
         public void TestMergeResults()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -222,7 +224,7 @@ public void TestMergeResultsBad1()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -236,11 +238,11 @@ public void TestMergeResultsBad3()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
-                BuildRequest request2 = CreateNewBuildRequest(2, new string[0]);
+                BuildRequest request2 = CreateNewBuildRequest(2, Array.Empty<string>());
                 BuildResult result2 = new BuildResult(request2);
                 result2.AddResultsForTarget("bar", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -251,7 +253,7 @@ public void TestMergeResultsBad3()
         [Fact]
         public void TestHasResultsForTarget()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -262,7 +264,7 @@ public void TestHasResultsForTarget()
         [Fact]
         public void TestEnumerator()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             int countFound = 0;
             foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
@@ -322,7 +324,7 @@ public void TestTranslation()
             result.DefaultTargets = new List<string> { "c", "d" };
 
             result.AddResultsForTarget("alpha", new TargetResult(new TaskItem[] { fooTaskItem }, BuildResultUtilities.GetSuccessResult()));
-            result.AddResultsForTarget("omega", new TargetResult(new TaskItem[] { }, BuildResultUtilities.GetStopWithErrorResult(new ArgumentException("The argument was invalid"))));
+            result.AddResultsForTarget("omega", new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult(new ArgumentException("The argument was invalid"))));
 
             Assert.Equal(NodePacketType.BuildResult, (result as INodePacket).Type);
             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());
diff --git a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
index 738978a9e07..0a55644bbf8 100644
--- a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using static Microsoft.Build.Unittest.BuildResultUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class CacheAggregator_Tests
diff --git a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
index 62f686d4657..76f0641c76d 100644
--- a/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CentralForwardingLogger_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
@@ -183,4 +185,4 @@ public void ForwardEvent(BuildEventArgs buildEvent)
             #endregion
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
index e3dc1ff11f7..7cfadc9a5e4 100644
--- a/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class ConfigCache_Tests
@@ -43,8 +45,8 @@ public static IEnumerable<object[]> CacheSerializationTestData
                     new BuildRequestData("path3", new Dictionary<string, string> { ["a3"] = "b3" }, Constants.defaultToolsVersion, new[] { "target3" }, null),
                     Constants.defaultToolsVersion);
 
-                brq3.ProjectDefaultTargets = new List<string>{"target3"};
-                brq3.ProjectInitialTargets = new List<string>{"targetInitial"};
+                brq3.ProjectDefaultTargets = new List<string> {"target3"};
+                brq3.ProjectInitialTargets = new List<string> {"targetInitial"};
 
                 var configCache3 = new ConfigCache();
                 configCache3.AddConfiguration(brq3.ShallowCloneWithNewId(3));
diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index 74b8c257d49..5cbdd3a1394 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -12,6 +12,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -59,7 +61,7 @@ public void TestConstructorNullProject()
         [Fact]
         public void TestValidConfiguration()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             ConfigurationMetadata metadata = new ConfigurationMetadata(config);
             Assert.Equal(data.ProjectFullPath, metadata.ProjectFullPath);
@@ -85,7 +87,7 @@ public void TestValidProject()
         [Fact]
         public void TestGetHashCode()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
 
             Project project = CreateProject();
@@ -101,7 +103,7 @@ public void TestGetHashCode()
         [Fact]
         public void TestEquals()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
 
             Project project = CreateProject();
@@ -110,12 +112,12 @@ public void TestEquals()
             ConfigurationMetadata metadata2 = new ConfigurationMetadata(project);
             Assert.True(metadata1.Equals(metadata2));
 
-            data = new BuildRequestData("file2", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            data = new BuildRequestData("file2", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
             ConfigurationMetadata metadata3 = new ConfigurationMetadata(config2);
             Assert.False(metadata1.Equals(metadata3));
 
-            data = new BuildRequestData("file", new Dictionary<string, string>(), "3.0", new string[0], null);
+            data = new BuildRequestData("file", new Dictionary<string, string>(), "3.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(1, data, "3.0");
             ConfigurationMetadata metadata4 = new ConfigurationMetadata(config3);
             Assert.False(metadata1.Equals(metadata4));
@@ -135,7 +137,7 @@ public void TestTranslation()
             copy.ProjectFullPath.ShouldBe(initial.ProjectFullPath);
             copy.ToolsVersion.ShouldBe(initial.ToolsVersion);
 
-            Assert.Equal(copy.GlobalProperties.GetCopyOnReadEnumerable(), initial.GlobalProperties.GetCopyOnReadEnumerable(), EqualityComparer<ProjectPropertyInstance>.Default);
+            Assert.Equal(copy.GlobalProperties, initial.GlobalProperties, EqualityComparer<ProjectPropertyInstance>.Default);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
index e6f05dff154..163716cb7fd 100644
--- a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
+++ b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class CustomLogAndReturnTask : Task
@@ -24,12 +26,12 @@ public class CustomLogAndReturnTask : Task
         /// </summary>
         public override bool Execute()
         {
-            if(!string.IsNullOrEmpty(WarningCode))
+            if (!string.IsNullOrEmpty(WarningCode))
             {
                 Log.LogWarning(null, WarningCode, null, null, 0, 0, 0, 0, "Warning Logged!", null);
             }
 
-            if(!string.IsNullOrEmpty(ErrorCode))
+            if (!string.IsNullOrEmpty(ErrorCode))
             {
                 Log.LogError(null, ErrorCode, null, null, 0, 0, 0, 0, "Error Logged!", null);
             }
diff --git a/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs b/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
index fc97d6fc91d..cc4575f5e70 100644
--- a/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
+++ b/src/Build.UnitTests/BackEnd/CustomTaskHelper.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
index 07c9c392b41..351d86a0d6a 100644
--- a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
+++ b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
@@ -8,6 +8,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class DebugUtils_Tests
diff --git a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
index 59580199847..ff207da4d88 100644
--- a/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventRedirectorToSink_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
@@ -95,4 +97,4 @@ public void TestForwardingNullEvent()
            );
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 8dc2e82dbdd..62ead33ff5e 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -10,6 +10,8 @@
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/FailingBuilderTask.cs b/src/Build.UnitTests/BackEnd/FailingBuilderTask.cs
index 7371e45ffd4..c8701f6beb4 100644
--- a/src/Build.UnitTests/BackEnd/FailingBuilderTask.cs
+++ b/src/Build.UnitTests/BackEnd/FailingBuilderTask.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public  class FailingBuilderTask : Task
diff --git a/src/Build.UnitTests/BackEnd/FailingTask.cs b/src/Build.UnitTests/BackEnd/FailingTask.cs
index 2060a8639c5..b2c784c90ab 100644
--- a/src/Build.UnitTests/BackEnd/FailingTask.cs
+++ b/src/Build.UnitTests/BackEnd/FailingTask.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class FailingTask : Task
diff --git a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
index 4901c0fe91b..576661b9af0 100644
--- a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class FullyQualifiedBuildRequest_Tests
@@ -14,13 +16,13 @@ public class FullyQualifiedBuildRequest_Tests
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
             FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[1] { "foo" }, true);
 
-            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[0] { }, true);
+            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), Array.Empty<string>(), true);
 
-            BuildRequestData data3 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
-            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[0] { }, false);
+            BuildRequestData data3 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
+            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), Array.Empty<string>(), false);
         }
 
         [Fact]
@@ -38,14 +40,14 @@ public void TestConstructorBad2()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null), "2.0"), null, true);
+                FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null), "2.0"), null, true);
             }
            );
         }
         [Fact]
         public void TestProperties()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(data, "2.0");
             FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(config, new string[1] { "foo" }, true);
             Assert.Equal(request.Config, config);
@@ -54,4 +56,4 @@ public void TestProperties()
             Assert.True(request.ResultsNeeded);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
index 5faa5279a03..4d3b8c7c06c 100644
--- a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
@@ -6,6 +6,8 @@
 using System.Reflection;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     sealed public class GenerateTemporaryTargetAssembly_Tests
diff --git a/src/Build.UnitTests/BackEnd/ITestTaskHost.cs b/src/Build.UnitTests/BackEnd/ITestTaskHost.cs
index 41206a64e15..bf139b239a1 100644
--- a/src/Build.UnitTests/BackEnd/ITestTaskHost.cs
+++ b/src/Build.UnitTests/BackEnd/ITestTaskHost.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/IntegrationTests.cs b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
index c9550165546..9a951727c87 100644
--- a/src/Build.UnitTests/BackEnd/IntegrationTests.cs
+++ b/src/Build.UnitTests/BackEnd/IntegrationTests.cs
@@ -1,4 +1,6 @@
-﻿namespace Microsoft.Build.Unittest.BackEnd
+﻿#nullable disable
+
+namespace Microsoft.Build.Unittest.BackEnd
 {
     class IntegrationTests
     {
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index a52b53f97f5..a22156f33f0 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -20,6 +20,8 @@
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class IntrinsicTask_Tests
@@ -2012,7 +2014,7 @@ public void RemoveWithMatchingMultipleMetadata()
             Lookup lookup = LookupHelpers.CreateEmptyLookup();
             ExecuteTask(task, lookup);
             ICollection<ProjectItemInstance> items = lookup.GetItems("I2");
-            items.Count().ShouldBe(3);
+            items.Count.ShouldBe(3);
             items.ElementAt(0).EvaluatedInclude.ShouldBe("a2");
             items.ElementAt(1).EvaluatedInclude.ShouldBe("c2");
             items.ElementAt(2).EvaluatedInclude.ShouldBe("d2");
@@ -3478,7 +3480,7 @@ public void PhoenixBatchingIssue()
             ProjectInstance instance = new ProjectInstance(xml);
             instance.Build();
 
-            Assert.Equal(2, instance.Items.Count());
+            Assert.Equal(2, instance.Items.Count);
             Assert.Equal("gen.obj", instance.GetItems("CppCompile").First().GetMetadataValue("ObjectFile"));
             Assert.Equal("def.obj", instance.GetItems("CppCompile").Last().GetMetadataValue("ObjectFile"));
         }
@@ -3879,7 +3881,7 @@ private static IntrinsicTask CreateIntrinsicTask(string content)
             ProjectTargetInstanceChild targetChild = projectInstance.Targets["t"].Children.First();
 
             NodeLoggingContext nodeContext = new NodeLoggingContext(new MockLoggingService(), 1, false);
-            BuildRequestEntry entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { "t" }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0"));
+            BuildRequestEntry entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { "t" }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0"));
             entry.RequestConfiguration.Project = projectInstance;
             IntrinsicTask task = IntrinsicTask.InstantiateTask(
                 targetChild,
@@ -3914,7 +3916,7 @@ internal static void AssertItemEvaluationFromTarget(string projectContents, stri
                     var targetChild = projectInstance.Targets["t"].Children.First();
 
                     var nodeContext = new NodeLoggingContext(new MockLoggingService(), 1, false);
-                    var entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { targetName }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0"));
+                    var entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { targetName }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0"));
                     entry.RequestConfiguration.Project = projectInstance;
                     var task = IntrinsicTask.InstantiateTask(
                         targetChild,
@@ -3925,7 +3927,7 @@ internal static void AssertItemEvaluationFromTarget(string projectContents, stri
                     var lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(), new PropertyDictionary<ProjectPropertyInstance>());
                     task.ExecuteTask(lookup);
 
-                    return lookup.GetItems(itemType).Select(i => (ObjectModelHelpers.TestItem)new ObjectModelHelpers.ProjectItemInstanceTestItemAdapter(i)).ToList();
+                    return lookup.GetItems(itemType).Select(i => (ObjectModelHelpers.ITestItem)new ObjectModelHelpers.ProjectItemInstanceTestItemAdapter(i)).ToList();
                 },
                 projectContents,
                 inputFiles,
diff --git a/src/Build.UnitTests/BackEnd/ItemCreationTask.cs b/src/Build.UnitTests/BackEnd/ItemCreationTask.cs
index 67d1764aa55..717cdb9812f 100644
--- a/src/Build.UnitTests/BackEnd/ItemCreationTask.cs
+++ b/src/Build.UnitTests/BackEnd/ItemCreationTask.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace ItemCreationTask
 {
     public class ItemCreationTask : Task
diff --git a/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
index 68439641529..8a372962d89 100644
--- a/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingContext_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
index 10cf7d2192a..d29d9623ecc 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
@@ -5,10 +5,12 @@
 using Microsoft.Build.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
-    ///Test the Factory to create components of the type LoggingService
+    /// Test the Factory to create components of the type LoggingService
     /// </summary>
     public class LoggingServiceFactory_Tests
     {
@@ -32,6 +34,7 @@ public void TestCreateAsynchronousLogger()
             LoggingServiceFactory factory = new LoggingServiceFactory(LoggerMode.Asynchronous, 1);
             LoggingService loggingService = (LoggingService)factory.CreateInstance(BuildComponentType.LoggingService);
             Assert.Equal(LoggerMode.Asynchronous, loggingService.LoggingMode); // "Expected to create an Asynchronous LoggingService"
+            loggingService.ShutdownComponent();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 4d84c33b60f..07e0760970e 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -19,6 +19,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
@@ -799,6 +801,18 @@ public void TreatWarningsAsErrorWhenAllSpecified(int loggerMode, int nodeId)
             logger.Errors.ShouldHaveSingleItem();
         }
 
+        [Fact]
+        public void VerifyWarningsPromotedToErrorsAreCounted()
+        {
+            ILoggingService ls = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
+            ls.WarningsAsErrors = new HashSet<string>();
+            ls.WarningsAsErrors.Add("FOR123");
+            BuildWarningEventArgs warningArgs = new("abc", "FOR123", "", 0, 0, 0, 0, "warning message", "keyword", "sender");
+            warningArgs.BuildEventContext = new BuildEventContext(1, 2, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidProjectContextId, 5, 6);
+            ls.LogBuildEvent(warningArgs);
+            ls.HasBuildSubmissionLoggedErrors(1).ShouldBeTrue();
+        }
+
         /// <summary>
         /// Verifies that a warning is logged as a low importance message when it's warning code is specified.
         /// </summary>
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index ebbec93cd53..c9964af9f2d 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -21,6 +21,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Logging
 {
     /// <summary>
@@ -457,14 +459,14 @@ public void VerifyErrorPostfixForInvalidProjectFileException()
             string targetsFile = Path.Combine(testTempPath, "x.targets");
             string projectfileContent =
                 @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Import Project='x.targets'/>
                     </Project>
                 ";
 
             string targetsfileContent = @"
-                 <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
-                   <UsingTask TaskName='RandomTask' AssemblyName='NotARealTaskLocaiton'/>    
+                 <Project DefaultTargets='Build'>
+                   <UsingTask TaskName='RandomTask' AssemblyName='NotARealTaskLocaiton'/>
                    <Target Name='Build'>
                        <RandomTask/>
                    </Target>
@@ -860,7 +862,7 @@ public void ProjectStartedEventTests(string projectFile, string targetNames)
             ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);
             ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);
 
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, "4.0");
             cache.AddConfiguration(config);
 
@@ -1097,6 +1099,7 @@ public void TestBuildFinishedWaitForEvents()
         {
             ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Asynchronous, 1);
             service.LogBuildFinished(true);
+            service.ShutdownComponent();
         }
 
         #endregion
@@ -1442,7 +1445,7 @@ private void TestProjectFinishedEvent(string projectFile, bool success)
 
             ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);
 
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, "4.0");
             cache.AddConfiguration(config);
 
@@ -1896,15 +1899,15 @@ public static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId,
             /// Override the method to log which event was processed so it can be verified in a test
             /// </summary>
             /// <param name="buildEvent">Build event which was asked to be processed</param>
-            internal override void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
+            internal override void ProcessLoggingEvent(object buildEvent)
             {
-                if (buildEvent is BuildEventArgs)
+                if (buildEvent is BuildEventArgs buildEventArgs)
                 {
-                    _processedBuildEvent = buildEvent as BuildEventArgs;
+                    _processedBuildEvent = buildEventArgs;
                 }
-                else if (buildEvent is KeyValuePair<int, BuildEventArgs>)
+                else if (buildEvent is KeyValuePair<int, BuildEventArgs> kvp)
                 {
-                    _processedBuildEvent = ((KeyValuePair<int, BuildEventArgs>)buildEvent).Value;
+                    _processedBuildEvent = kvp.Value;
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
index 82720f575ba..ae99bbcc52f 100644
--- a/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Lookup_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class Lookup_Tests
diff --git a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
index a6340ab95ef..55a1959e969 100644
--- a/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/MSBuild_Tests.cs
@@ -14,6 +14,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class MSBuildTask_Tests : IDisposable
diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index 1d787f19f91..dc4aaff843e 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Execution;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 9dfc0009db4..bed66bdaaf2 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -13,6 +13,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -159,6 +161,15 @@ public ISet<string> WarningsAsErrors
             set;
         }
 
+        /// <summary>
+        /// List of warnings to not treat as errors.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// List of warnings to treat as low importance messages.
         /// </summary>
@@ -238,6 +249,11 @@ public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string
             throw new NotImplementedException();
         }
 
+        public void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
+        {
+            throw new NotImplementedException();
+        }
+
         /// <summary>
         /// Registers a distributed logger.
         /// </summary>
@@ -607,6 +623,11 @@ public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
             throw new NotImplementedException();
         }
 
+        public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)
+        {
+            throw new NotImplementedException();
+        }
+
         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             throw new NotImplementedException();
diff --git a/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs b/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
index 726b692a6d8..4ce3b3498cf 100644
--- a/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
+++ b/src/Build.UnitTests/BackEnd/MockRemoteHostObject.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     internal class MockRemoteHostObject : ITaskHost, ITestRemoteHostObject
diff --git a/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs b/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
index 4e41ced5758..ce9ad201d0a 100644
--- a/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
+++ b/src/Build.UnitTests/BackEnd/MockRunningObjectTable.cs
@@ -6,6 +6,8 @@
 using System.Runtime.InteropServices;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     internal class MockRunningObjectTable : IRunningObjectTableWrapper
diff --git a/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs b/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
index c31322a43bf..b963f89756d 100644
--- a/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
+++ b/src/Build.UnitTests/BackEnd/MockSdkResolverService.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     internal class MockSdkResolverService : IBuildComponent, ISdkResolverService
diff --git a/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs b/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
index 8f5590fe5ae..4cdbfdaa711 100644
--- a/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
+++ b/src/Build.UnitTests/BackEnd/MockTaskBuilder.cs
@@ -11,6 +11,8 @@
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index 6791d729dd8..7b6a17d9d9d 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -12,6 +12,8 @@
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class NodeEndpointInProc_Tests
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index 78d73604056..98d9ffdd515 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -11,6 +11,8 @@
 using System.Collections.Generic;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -427,8 +429,8 @@ private void CompareLogMessagePackets(LogMessagePacket left, LogMessagePacket ri
                     Assert.Equal(leftTargetFinished.Succeeded, rightTargetFinished.Succeeded);
                     Assert.Equal(leftTargetFinished.TargetFile, rightTargetFinished.TargetFile);
                     Assert.Equal(leftTargetFinished.TargetName, rightTargetFinished.TargetName);
-                    //TODO: target output translation is a special case and is done in TranslateTargetFinishedEvent
-                    //Assert.Equal(leftTargetFinished.TargetOutputs, rightTargetFinished.TargetOutputs);
+                    // TODO: target output translation is a special case and is done in TranslateTargetFinishedEvent
+                    // Assert.Equal(leftTargetFinished.TargetOutputs, rightTargetFinished.TargetOutputs);
                     break;
 
                 case LoggingEventType.TargetStartedEvent:
diff --git a/src/Build.UnitTests/BackEnd/NullMetadataTask.cs b/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
index 844e68e8a7e..0a06cbdcbea 100644
--- a/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
+++ b/src/Build.UnitTests/BackEnd/NullMetadataTask.cs
@@ -6,6 +6,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace NullMetadataTask
 {
     public class NullMetadataTask : Task
diff --git a/src/Build.UnitTests/BackEnd/OnError_Tests.cs b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
index bbb9ada34e5..164bbd71800 100644
--- a/src/Build.UnitTests/BackEnd/OnError_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
@@ -13,6 +13,8 @@
 using Shouldly;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /*
diff --git a/src/Build.UnitTests/BackEnd/ProcessIdTask.cs b/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
index 18dee2718bb..ffc97d6f455 100644
--- a/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
+++ b/src/Build.UnitTests/BackEnd/ProcessIdTask.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 using System.Diagnostics;
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index 42ceffcef27..2abb906a34c 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -15,6 +15,8 @@
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
@@ -35,13 +37,13 @@ public class RequestBuilder_Tests : IDisposable
 
         private string _originalWorkingDirectory;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         public RequestBuilder_Tests()
         {
@@ -221,7 +223,7 @@ public void TestMissingProjectFile()
         {
             TestTargetBuilder targetBuilder = (TestTargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache configCache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("testName", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("testName", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             configCache.AddConfiguration(configuration);
 
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "target1" });
@@ -237,7 +239,7 @@ public void TestMissingProjectFile()
         private BuildRequestConfiguration CreateTestProject(int configId)
         {
             string projectFileContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <Compile Include=`b.cs` />
@@ -266,7 +268,7 @@ private BuildRequestConfiguration CreateTestProject(int configId)
                     projectFile,
                     new Dictionary<string, string>(),
                     ObjectModelHelpers.MSBuildDefaultToolsVersion,
-                    new string[0],
+                    Array.Empty<string>(),
                     null),
                 defaultToolsVersion);
             return config;
@@ -318,7 +320,7 @@ private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets
 
         private TargetResult GetEmptySuccessfulTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null));
+            return new TargetResult(Array.Empty<TaskItem>(), new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null));
         }
 
         private void WaitForEvent(WaitHandle evt, string eventName)
diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 781db5fb46a..63479f7c6c3 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -15,6 +15,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class ResultsCache_Tests
diff --git a/src/Build.UnitTests/BackEnd/ReturnFailureWithoutLoggingErrorTask.cs b/src/Build.UnitTests/BackEnd/ReturnFailureWithoutLoggingErrorTask.cs
index 5e2fb261506..f630dc546de 100644
--- a/src/Build.UnitTests/BackEnd/ReturnFailureWithoutLoggingErrorTask.cs
+++ b/src/Build.UnitTests/BackEnd/ReturnFailureWithoutLoggingErrorTask.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Utilities;
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 7386b34a91f..c6406b169b7 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -15,6 +15,8 @@
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     using Microsoft.Build.Unittest;
@@ -70,11 +72,11 @@ public Scheduler_Tests()
             _scheduler = new Scheduler();
             _scheduler.InitializeComponent(_host);
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             // Set up the scheduler with one node to start with.
             _scheduler.ReportNodesCreated(new NodeInfo[] { new NodeInfo(1, NodeProviderType.InProc) });
-            _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest }));
+            _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest }));
 
             _logger = new MockLogger();
             _parameters = new BuildParameters();
@@ -105,7 +107,7 @@ public void TestSimpleRequest()
         {
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1);
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -123,7 +125,7 @@ public void TestSimpleRequestWithCachedResultsSuccess()
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildResult result = CacheBuildResult(request, "foo", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -147,7 +149,7 @@ public void TestSimpleRequestWithCachedResultsFail()
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildResult result = CacheBuildResult(request, "foo", BuildResultUtilities.GetStopWithErrorResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -170,7 +172,7 @@ public void TestChildRequest()
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             CreateConfiguration(2, "bar.proj");
@@ -201,7 +203,7 @@ public void TestMultipleRequests()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -221,7 +223,7 @@ public void TestMultipleRequestsWithSomeResults()
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -244,7 +246,7 @@ public void TestMultipleRequestsWithAllResults()
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(3, response.Count);
@@ -272,7 +274,7 @@ public void TestOutOfProcNodeCreatedWhenAffinityIsOutOfProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -296,7 +298,7 @@ public void TestOutOfProcNodesCreatedWhenAffinityIsOutOfProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -323,7 +325,7 @@ public void TestNoNewNodesCreatedForMultipleRequestsWithSameConfiguration()
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 1, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -349,7 +351,7 @@ public void TestMaxNodeCountNotExceededWithRequestsOfAffinityAny()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -386,14 +388,14 @@ public void VerifyRequestOrderingDoesNotAffectNodeCreationCountWithInProcAndAnyR
             _buildManager = new BuildManager();
 
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.Any, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
 
-            List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
+            List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
             Assert.Single(response);
             Assert.Equal(ScheduleActionType.CreateNode, response[0].Action);
             Assert.Equal(NodeAffinity.InProc, response[0].RequiredNodeType);
@@ -427,7 +429,7 @@ public void TestMaxNodeCountOOPNodesCreatedForOOPAffinitizedRequests()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -457,7 +459,7 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests1()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -487,7 +489,7 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests2()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -520,7 +522,7 @@ public void TestTraversalAffinityIsInProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" }, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // There will be no request to create a new node, because both of the above requests are traversals,
@@ -544,7 +546,7 @@ public void TestProxyAffinityIsInProc()
 
             BuildRequest request1 = CreateProxyBuildRequest(1, 1, new ProxyTargets(new Dictionary<string, string> {{"foo", "bar"}}), null);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, new string[] { }, new[] { request1 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, Array.Empty<string>(), new[] { request1 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // There will be no request to create a new node, because both of the above requests are proxy build requests,
@@ -578,7 +580,7 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             _buildManager = new BuildManager();
 
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
@@ -587,7 +589,7 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             CreateConfiguration(3, "foo3.proj");
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
 
-            List<ScheduleResponse> responses = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
+            List<ScheduleResponse> responses = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
 
             int nextNodeId = 1;
             bool inProcNodeExists = false;
@@ -606,7 +608,7 @@ public void TestTwoRequestsWithFirstFailure()
             BuildResult result1 = CacheBuildResult(request1, "foo", BuildResultUtilities.GetStopWithErrorResult());
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -625,7 +627,7 @@ public void TestTwoRequestsWithSecondFailure()
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetStopWithErrorResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -645,7 +647,7 @@ public void TestThreeRequestsWithOneFailure()
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetStopWithErrorResult());
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "baz" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -661,7 +663,7 @@ public void TestResult()
         {
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1);
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             BuildResult result = CreateBuildResult(request, "foo", BuildResultUtilities.GetSuccessResult());
@@ -708,7 +710,7 @@ public void TestDetailedSummary()
         /// </summary>
         private void CreateConfiguration(int configId, string file)
         {
-            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", new string[] { }, null);
+            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(configId, data, "4.0");
             config.ProjectInitialTargets = new List<string>();
             config.ProjectDefaultTargets = new List<string>();
@@ -733,7 +735,7 @@ private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUn
         private BuildResult CreateBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)
         {
             BuildResult result = new BuildResult(request);
-            result.AddResultsForTarget(target, new TargetResult(new TaskItem[] { }, workUnitResult));
+            result.AddResultsForTarget(target, new TargetResult(Array.Empty<TaskItem>(), workUnitResult));
             return result;
         }
 
@@ -742,7 +744,7 @@ private BuildResult CreateBuildResult(BuildRequest request, string target, WorkU
         /// </summary>
         private BuildRequest CreateBuildRequest(int nodeRequestId, int configId)
         {
-            return CreateBuildRequest(nodeRequestId, configId, new string[] { });
+            return CreateBuildRequest(nodeRequestId, configId, Array.Empty<string>());
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index ac3317da212..e8b3812ab57 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -19,6 +19,8 @@
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public class SdkResolverLoader_Tests
@@ -44,7 +46,7 @@ public void AssertDefaultLoaderReturnsDefaultResolvers()
         {
             var loader = new SdkResolverLoader();
 
-            var resolvers = loader.LoadResolvers(_loggingContext, new MockElementLocation("file"));
+            var resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
 
             resolvers.Select(i => i.GetType().FullName).ShouldBe(new [] { typeof(DefaultSdkResolver).FullName });
             
@@ -86,6 +88,38 @@ public void VerifySdkResolverLoaderFileDiscoveryPattern()
             }
         }
 
+        [Fact]
+        public void SdkResolverLoaderPrefersManifestFile()
+        {
+            var root = FileUtilities.GetTemporaryDirectory();
+            try
+            {
+                var testFolder = Directory.CreateDirectory(Path.Combine(root, "MyTestResolver"));
+
+                var wrongResolverDll = Path.Combine(testFolder.FullName, "MyTestResolver.dll");
+                var resolverManifest = Path.Combine(testFolder.FullName, "MyTestResolver.xml");
+                var assemblyToLoad = Path.Combine(root, "SomeOtherResolver.dll");
+
+                File.WriteAllText(wrongResolverDll, string.Empty);
+                File.WriteAllText(assemblyToLoad, string.Empty);
+
+                File.WriteAllText(resolverManifest, $@"
+                    <SdkResolver>
+                      <Path>{assemblyToLoad}</Path>
+                    </SdkResolver>");
+
+                SdkResolverLoader loader = new SdkResolverLoader();
+                var resolversFound = loader.FindPotentialSdkResolvers(root, new MockElementLocation("file"));
+
+                resolversFound.Count.ShouldBe(1);
+                resolversFound.First().ShouldBe(assemblyToLoad);
+            }
+            finally
+            {
+                FileUtilities.DeleteDirectoryNoThrow(root, true);
+            }
+        }
+
         /// <summary>
         /// Verifies that if an SDK resolver throws while creating an instance that a warning is logged.
         /// </summary>
@@ -104,7 +138,7 @@ public void VerifyThrowsWhenResolverFailsToLoad()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver type \"{nameof(MockSdkResolverThatDoesNotLoad)}\" failed to load. A8BB8B3131D3475D881ACD3AF8D75BD6");
@@ -136,7 +170,7 @@ public void VerifyThrowsWhenResolverHasNoPublicConstructor()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldStartWith($"The SDK resolver type \"{nameof(MockSdkResolverNoPublicConstructor)}\" failed to load.");
@@ -167,7 +201,7 @@ public void VerifyWarningLoggedWhenResolverAssemblyCannotBeLoaded()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver assembly \"{assemblyPath}\" could not be loaded. {expectedMessage}");
@@ -205,6 +239,33 @@ public void SdkResolverLoaderReadsManifestFile()
             }
         }
 
+        [Fact]
+        public void SdkResolverLoaderReadsManifestFileWithResolvableSdkPattern()
+        {
+            using (var env = TestEnvironment.Create(_output))
+            {
+                var root = env.CreateFolder().Path;
+                var resolverPath = Path.Combine(root, "MyTestResolver");
+                var resolverManifest = Path.Combine(resolverPath, "MyTestResolver.xml");
+
+                var assemblyToLoad = env.CreateFile(".dll").Path;
+
+                Directory.CreateDirectory(resolverPath);
+                File.WriteAllText(resolverManifest, $@"
+                    <SdkResolver>
+                      <ResolvableSdkPattern>1&lt;.*</ResolvableSdkPattern>
+                      <Path>{assemblyToLoad}</Path>
+                    </SdkResolver>");
+
+                SdkResolverLoader loader = new SdkResolverLoader();
+                var resolversManifestsFound = loader.FindPotentialSdkResolversManifests(root, new MockElementLocation("file"));
+
+                resolversManifestsFound.Count.ShouldBe(1);
+                resolversManifestsFound.First().Path.ShouldBe(assemblyToLoad);
+                resolversManifestsFound.First().ResolvableSdkRegex.ToString().ShouldBe("1<.*");
+            }
+        }
+
         [Fact]
         public void SdkResolverLoaderErrorsWithInvalidManifestFile()
         {
@@ -285,7 +346,7 @@ public void SdkResolverLoaderHonorsIncludeDefaultEnvVar()
                             resolvers.Add(new MockSdkResolverWithAssemblyPath(resolverPath));
                         }
                     };
-                    IList<SdkResolverBase> resolvers = loader.LoadResolvers(_loggingContext, new MockElementLocation("file"));
+                    IList<SdkResolverBase> resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
 
                     resolvers.Count.ShouldBe(0);
                 }
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index cbfd97c5f83..87d3efd618d 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -17,6 +17,10 @@
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 using SdkResultImpl = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
+using Microsoft.Build.Shared;
+using System.Text.RegularExpressions;
+
+#nullable disable
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
@@ -37,9 +41,10 @@ public SdkResolverService_Tests()
         }
 
         [Fact]
+        // Scenario: Sdk is not resolved.
         public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
 
             SdkReference sdk = new SdkReference("notfound", "referencedVersion", "minimumVersion");
 
@@ -54,8 +59,10 @@ public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
 
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver2 running");
-            _logger.Errors.Select(i => i.Message).ShouldBe(new [] { "ERROR1", "ERROR2" });
-            _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING2" });
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern2 running");
+            _logger.Errors.Select(i => i.Message).ShouldBe(new [] { "ERROR4", "ERROR1", "ERROR2" });
+            _logger.Warnings.Select(i => i.Message).ShouldBe(new[] { "WARNING4", "WARNING2" });
         }
 
         [Fact]
@@ -97,7 +104,27 @@ public void AssertResolverThrows()
             e.Sdk.Name.ShouldBe("1sdkName");
         }
 
+
+        [Fact]
+        // Scenario: MockSdkResolverWithResolvableSdkPattern2 is a specific resolver (i.e. resolver with pattern)
+        // and it successfully resolves sdk.
+        public void AssertSecondResolverWithPatternCanResolve()
+        {
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
+
+            SdkReference sdk = new SdkReference("2sdkName", "referencedVersion", "minimumVersion");
+
+            var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
+
+            result.Path.ShouldBe("resolverpathwithresolvablesdkpattern2");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern2 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver2 running");
+        }
+
         [Fact]
+        // Scenario: MockSdkResolverWithResolvableSdkPattern1 is a specific resolver, it is loaded but did not resolve sdk.
+        // MockSdkResolver1 is a general resolver (i.e. resolver without pattern), it resolves sdk on a fallback. 
         public void AssertFirstResolverCanResolve()
         {
             SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
@@ -108,6 +135,46 @@ public void AssertFirstResolverCanResolve()
 
             result.Path.ShouldBe("resolverpath1");
             _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
+        }
+
+        [Fact]
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithResolvableSdkPattern1 and resolves sdk.
+        public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_4.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
+
+                SdkReference sdk = new SdkReference("1sdkName", "referencedVersion", "minimumVersion");
+
+                var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
+
+                result.Path.ShouldBe("resolverpath1");
+                _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolver1 running");
+                _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolverWithResolvableSdkPattern1 running");
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
+        [Fact]
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithResolvableSdkPattern1 but MockSdkResolverWithResolvableSdkPattern1 resolves sdk,
+        // becuase MockSdkResolver1 is general and MockSdkResolverWithResolvableSdkPattern1 is specific.
+        public void AssertFirstResolverWithPatternCanResolve()
+        {
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
+
+            SdkReference sdk = new SdkReference("11sdkName", "referencedVersion", "minimumVersion");
+
+            var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
+
+            result.Path.ShouldBe("resolverpathwithresolvablesdkpattern1");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldContain("MockSdkResolverWithResolvableSdkPattern1 running");
+            _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain("MockSdkResolver1 running");
         }
 
         [Fact]
@@ -244,7 +311,7 @@ private void ValidateExpectedPropertiesAndItems(bool includePropertiesAndItems,
                 result.PropertiesToAdd.Count.ShouldBe(1);
                 result.PropertiesToAdd["PropertyFromSdkResolver"].ShouldBe("ValueFromSdkResolver");
 
-                result.ItemsToAdd.Count().ShouldBe(1);
+                result.ItemsToAdd.Count.ShouldBe(1);
                 result.ItemsToAdd.Keys.Single().ShouldBe("ItemNameFromSdkResolver");
                 result.ItemsToAdd.Values.Single().ItemSpec.ShouldBe("ItemValueFromSdkResolver");
                 var metadata = result.ItemsToAdd.Values.Single().Metadata;
@@ -537,16 +604,27 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
 
         private class MockLoaderStrategy : SdkResolverLoader
         {
-            private readonly bool _includeErrorResolver;
+            private List<SdkResolver> _resolvers;
+            private List<(string ResolvableSdkPattern, SdkResolver Resolver)> _resolversWithPatterns;
 
-            public MockLoaderStrategy(bool includeErrorResolver = false)
+
+            public MockLoaderStrategy(bool includeErrorResolver = false, bool includeResolversWithPatterns = false) : this()
             {
-                _includeErrorResolver = includeErrorResolver;
+                if (includeErrorResolver)
+                {
+                    _resolvers.Add(new MockSdkResolverThrows());
+                }
+
+                if (includeResolversWithPatterns)
+                {
+                    _resolversWithPatterns.Add(("1.*", new MockSdkResolverWithResolvableSdkPattern1()));
+                    _resolversWithPatterns.Add((".*", new MockSdkResolverWithResolvableSdkPattern2()));
+                }
             }
 
-            internal override IList<SdkResolver> LoadResolvers(LoggingContext loggingContext, ElementLocation location)
+            private MockLoaderStrategy()
             {
-                List<SdkResolver> resolvers = new List<SdkResolver>
+                _resolvers = new List<SdkResolver>
                 {
                     new MockSdkResolver1(),
                     new MockSdkResolver2(),
@@ -554,12 +632,58 @@ internal override IList<SdkResolver> LoadResolvers(LoggingContext loggingContext
                     new MockSdkResolverWithState()
                 };
 
-                if (_includeErrorResolver)
+                _resolversWithPatterns = new List<(string ResolvableSdkPattern, SdkResolver Resolver)>();
+            }
+
+            internal override IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
+            {
+                return _resolvers.OrderBy(i => i.Priority).ToList();
+            }
+
+            internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
+            ElementLocation location)
+            {
+                var manifests = new List<SdkResolverManifest>();
+                foreach(SdkResolver resolver in _resolvers)
+                {
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(resolver.Name, null, null);
+                    manifests.Add(sdkResolverManifest);
+                }
+                foreach ((string ResolvableSdkPattern, SdkResolver Resolver) pair in _resolversWithPatterns)
+                {
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(
+                        pair.Resolver.Name,
+                        null,
+                        new Regex(pair.ResolvableSdkPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(500))
+                    );
+                    manifests.Add(sdkResolverManifest);
+                }
+                return manifests;
+            }
+
+            protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+            {
+                var resolvers = new List<SdkResolver>();
+                foreach (var resolver in _resolvers)
+                {
+                    if (resolver.Name == manifest.DisplayName)
+                    {
+                        resolvers.Add(resolver);
+                    }
+                }
+                foreach (var pair in _resolversWithPatterns)
                 {
-                    resolvers.Add(new MockSdkResolverThrows());
+                    if (pair.Resolver.Name == manifest.DisplayName)
+                    {
+                        resolvers.Add(pair.Resolver);
+                    }
                 }
+                return resolvers.OrderBy(t => t.Priority).ToList();
+            }
 
-                return resolvers.OrderBy(i => i.Priority).ToList();
+            internal override IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+            {
+                return new List<SdkResolver>();
             }
         }
 
@@ -585,7 +709,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
                 if (sdk.Name.StartsWith("1"))
                     return factory.IndicateSuccess("resolverpath1", "version1");
 
-                return factory.IndicateFailure(new[] {"ERROR1"});
+                return factory.IndicateFailure(new[] { "ERROR1" });
             }
         }
 
@@ -606,6 +730,40 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
             }
         }
 
+        private class MockSdkResolverWithResolvableSdkPattern1 : SdkResolver
+        {
+            public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern1);
+
+            public override int Priority => 2;
+
+            public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
+            {
+                resolverContext.Logger.LogMessage("MockSdkResolverWithResolvableSdkPattern1 running", MessageImportance.Normal);
+
+                if (sdk.Name.StartsWith("11"))
+                    return factory.IndicateSuccess("resolverpathwithresolvablesdkpattern1", "version3");
+
+                return factory.IndicateFailure(new[] { "ERROR3" });
+            }
+        }
+
+        private class MockSdkResolverWithResolvableSdkPattern2 : SdkResolver
+        {
+            public override string Name => nameof(MockSdkResolverWithResolvableSdkPattern2);
+
+            public override int Priority => 0;
+
+            public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase resolverContext, SdkResultFactoryBase factory)
+            {
+                resolverContext.Logger.LogMessage("MockSdkResolverWithResolvableSdkPattern2 running", MessageImportance.Normal);
+
+                if (sdk.Name.StartsWith("2"))
+                    return factory.IndicateSuccess("resolverpathwithresolvablesdkpattern2", "version4", new[] { "WARNING4" });
+
+                return factory.IndicateFailure(new[] { "ERROR4" }, new[] { "WARNING4" });
+            }
+        }
+
         private class MockSdkResolverWithState : SdkResolver
         {
             public const string Expected = "01713226A202458F97D9074168DF2618";
diff --git a/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
index 41e3db02aa5..20c76c5c493 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultItemComparison_Tests.cs
@@ -7,6 +7,8 @@
 using System.Collections.Generic;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public class SdkResultItemComparison_Tests
@@ -53,6 +55,5 @@ public void SdkResultItem_GetHashCode_Compare_MetadataIgnoreKeyOrder()
 
             hashSdkItem1.ShouldBe(hashSdkItem2);
         }
-
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
index 562ac26f280..55e51e5823b 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
@@ -19,6 +19,8 @@
 using Xunit.Abstractions;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class SdkResultOutOfProc_Tests : IDisposable
@@ -69,8 +71,8 @@ public SdkResultOutOfProc_Tests(ITestOutputHelper output)
             // Need to set this env variable to enable Process.GetCurrentProcess().Id in the project file.
             _env.SetEnvironmentVariable("MSBUILDENABLEALLPROPERTYFUNCTIONS", "1");
 
-            //  Set this if you need to debug the out of process build
-            //_env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
+            // Set this if you need to debug the out of process build
+            // _env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
         }
 
         public void Dispose()
@@ -125,7 +127,7 @@ public void RunOutOfProcBuild()
             ValidateResolverResults(result);
         }
 
-        //  Test scenario where using an SdkResolver in a project that hasn't been evaluated
+        // Test scenario where using an SdkResolver in a project that hasn't been evaluated
         //  in the main node (which is where the SdkResolver runs).  This validates that
         //  the SdkResult is correctly transferred between nodes.
         [Fact]
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 62674749d33..64682d0e709 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -23,6 +23,8 @@
 using Microsoft.Build.Engine.UnitTests.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -46,7 +48,7 @@ public class TargetBuilder_Tests : IRequestBuilderCallback, IDisposable
         /// </summary>
         private int _nodeRequestId;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         /// <summary>
         /// Callback used to receive exceptions from loggers.  Unused here.
@@ -56,7 +58,7 @@ public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         /// <summary>
         /// Sets up to run tests.  Creates the host object.
@@ -225,7 +227,7 @@ public void TestLoggingForSkippedTargetInputsAndOutputs()
 
                 var expected = @"
 Skipping target ""Build"" because all output files are up-to-date with respect to the input files.
-Input files: 
+Input files:
     a.txt
     b.txt
 Output files: c.txt
@@ -250,7 +252,7 @@ public void SkippedTargetsShouldOnlyInferOutputsOnce()
             string content = String.Format
                 (
 @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
 
   <Target Name='Build' DependsOnTargets='GFA;GFT;DFTA;GAFT'>
         <Message Text='Build: [@(Outs)]' />
@@ -336,7 +338,7 @@ public void TestLegacyCallTarget()
         public void TestBeforeTargetsMissing()
         {
             string content = @"
-<Project DefaultTargets='t' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='t'>
 
     <Target Name='t' BeforeTargets='x'>
         <Message Text='[t]' />
@@ -359,7 +361,7 @@ public void TestBeforeTargetsMissing()
         public void TestBeforeTargetsMissingRunsOthers()
         {
             string content = @"
-<Project DefaultTargets='a;c' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='a;c'>
 
     <Target Name='t' BeforeTargets='a;b;c'>
         <Message Text='[t]' />
@@ -391,7 +393,7 @@ public void TestBeforeTargetsMissingRunsOthers()
         public void TestAfterTargetsMissing()
         {
             string content = @"
-<Project DefaultTargets='t' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='t'>
 
     <Target Name='t' AfterTargets='x'>
         <Message Text='[t]' />
@@ -414,7 +416,7 @@ public void TestAfterTargetsMissing()
         public void TestAfterTargetsMissingRunsOthers()
         {
             string content = @"
-<Project DefaultTargets='a;c' xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets='a;c'>
 
     <Target Name='t' AfterTargets='a;b'>
         <Message Text='[t]' />
@@ -1271,7 +1273,7 @@ public void TestSkippingBeforeAndAfterTargets()
         public void TestCircularDependencyInCallTarget()
         {
             string projectContents = @"
-<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project>
     <Target Name=""t1"">
         <CallTarget Targets=""t3""/>
     </Target>
@@ -1294,7 +1296,7 @@ public void TestCircularDependencyInCallTarget()
         public void TestCircularDependencyTarget()
         {
             string projectContents = @"
-<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project>
     <Target Name=""TargetA"" AfterTargets=""Build"" DependsOnTargets=""TargetB"">
         <Message Text=""TargetA""></Message>
     </Target>
@@ -1521,7 +1523,7 @@ private ProjectInstance CreateTestProject()
 
                     <ItemGroup>
                         <Reference Include='System' />
-                    </ItemGroup>                    
+                    </ItemGroup>
 
                     <Target Name='Empty' />
 
@@ -1589,7 +1591,7 @@ private ProjectInstance CreateTestProject(string projectBodyContents)
         /// </summary>
         private ProjectInstance CreateTestProject(string projectBodyContents, string initialTargets, string defaultTargets)
         {
-            string projectFileContents = String.Format("<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' InitialTargets='{0}' DefaultTargets='{1}'>{2}</Project>", initialTargets, defaultTargets, projectBodyContents);
+            string projectFileContents = String.Format("<Project ToolsVersion='msbuilddefaulttoolsversion' InitialTargets='{0}' DefaultTargets='{1}'>{2}</Project>", initialTargets, defaultTargets, projectBodyContents);
 
             // retries to deal with occasional locking issues where the file can't be written to initially
             for (int retries = 0; retries < 5; retries++)
@@ -1599,24 +1601,15 @@ private ProjectInstance CreateTestProject(string projectBodyContents, string ini
                     File.Create("testProject.proj").Dispose();
                     break;
                 }
-                catch (Exception ex)
+                // If all the retries failed, fail with the actual problem instead of some difficult-to-understand issue later.
+                catch (Exception ex) when (retries < 4)
                 {
-                    if (retries < 4)
-                    {
-                        Console.WriteLine(ex.ToString());
-                    }
-                    else
-                    {
-                        // All the retries have failed. We will now fail with the
-                        // actual problem now instead of with some more difficult-to-understand
-                        // issue later.
-                        throw;
-                    }
+                    Console.WriteLine(ex.ToString());
                 }
             }
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             Project project = new Project(XmlReader.Create(new StringReader(projectFileContents)));
 
             config.Project = project.CreateProjectInstance();
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 3446700cae3..7a1c46263d2 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -20,6 +20,8 @@
 using Xunit;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -38,7 +40,7 @@ public class TargetEntry_Tests : ITargetBuilderCallback, IDisposable
         /// </summary>
         private int _nodeRequestId;
 
-        #pragma warning disable xUnit1013
+#pragma warning disable xUnit1013
 
         /// <summary>
         /// Handles exceptions from the logging system.
@@ -48,7 +50,7 @@ public void LoggingException(Exception e)
         {
         }
 
-        #pragma warning restore xUnit1013
+#pragma warning restore xUnit1013
 
         /// <summary>
         /// Called prior to each test.
@@ -78,7 +80,7 @@ public void TestConstructorNullTarget()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
                 TargetEntry entry = new TargetEntry(requestEntry, this, null, lookup, null, TargetBuiltReason.None, _host, false);
@@ -94,7 +96,7 @@ public void TestConstructorNullLookup()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification("Empty", null), null, null, TargetBuiltReason.None, _host, false);
             }
@@ -109,7 +111,7 @@ public void TestConstructorNullHost()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
 
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
@@ -379,8 +381,8 @@ public void TestGatherResults()
 
                 if (returnsEnabledForThisProject)
                 {
-                    // If returns are enabled, since this is a target with "Outputs", they won't 
-                    // be returned. 
+                    // If returns are enabled, since this is a target with "Outputs", they won't
+                    // be returned.
                     Assert.Empty(results.Items);
                 }
                 else
@@ -472,8 +474,8 @@ public void TestMultipleOutputs()
 
                 if (returnsEnabledForThisProject)
                 {
-                    // If returns are enabled, since this is a target with "Outputs", they won't 
-                    // be returned. 
+                    // If returns are enabled, since this is a target with "Outputs", they won't
+                    // be returned.
                     Assert.Empty(results.Items);
                 }
                 else
@@ -634,7 +636,7 @@ public void TestMetadataReferenceInTargetOutputs()
             foreach (bool returnsEnabledForThisProject in returnsEnabled)
             {
                 string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -681,7 +683,7 @@ public void TestTargetOutputsOnFinishedEvent()
                 foreach (bool returnsEnabledForThisProject in returnsEnabled)
                 {
                     string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -778,7 +780,7 @@ public void TestTargetOutputsOnFinishedEventNoVariableSet()
                 foreach (bool returnsEnabledForThisProject in returnsEnabled)
                 {
                     string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <ItemGroup>
         <SomeItem1 Include=`item1.cs`/>
         <SomeItem2 Include=`item2.cs`/>
@@ -833,13 +835,13 @@ public void TestTargetOutputsOnFinishedEventNoVariableSet()
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
         public void AfterTargetsShouldReportFailedBuild()
         {
-            // Since we're creating our own BuildManager, we need to make sure that the default 
+            // Since we're creating our own BuildManager, we need to make sure that the default
             // one has properly relinquished the inproc node
             NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
             nodeProviderInProc?.Dispose();
 
             string content = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build'>
 <Target Name='Build'>
  <Message Text='Hello'/>
 </Target>
@@ -876,7 +878,7 @@ public void AfterTargetsShouldReportFailedBuild()
                     project.FullPath,
                     new Dictionary<string, string>(),
                     ObjectModelHelpers.MSBuildDefaultToolsVersion,
-                    new string[] { },
+                    Array.Empty<string>(),
                     null);
                 manager = new BuildManager();
                 BuildResult result = manager.Build(parameters, data);
@@ -889,7 +891,7 @@ public void AfterTargetsShouldReportFailedBuild()
             }
             finally
             {
-                // and we should clean up after ourselves, too. 
+                // and we should clean up after ourselves, too.
                 if (manager != null)
                 {
                     NodeProviderInProc inProcNodeProvider = ((IBuildComponentHost)manager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
@@ -907,7 +909,7 @@ public void AfterTargetsShouldReportFailedBuild()
         public void TestTargetFinishedRaisedOnInvalidTarget()
         {
             string content = @"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
     <Target Name=`OnlyInputs` Inputs=`foo`>
         <Message Text=`This is an invalid target -- this text should never show.` />
     </Target>
@@ -1023,7 +1025,7 @@ private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets
         /// <returns>The new target entry</returns>
         private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string targetName)
         {
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             config.Project = project;
             BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
 
@@ -1041,7 +1043,7 @@ private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string ta
         /// <returns>The new target entry</returns>
         private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string target, TargetEntry baseEntry)
         {
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             config.Project = project;
             BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[1] { "foo" }), config);
             TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification(target, project.Targets[target].Location), baseEntry.Lookup, baseEntry, TargetBuiltReason.None, _host, false);
@@ -1057,7 +1059,7 @@ private ProjectInstance CreateTestProject(bool returnsAttributeEnabled)
             string returnsAttributeName = returnsAttributeEnabled ? "Returns" : "Outputs";
 
             string projectFileContents = @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
                     <ItemGroup>
                         <Compile Include='b.cs' />
@@ -1109,11 +1111,11 @@ private ProjectInstance CreateTestProject(bool returnsAttributeEnabled)
                     <Target Name='SkipCondition' Condition=""'true' == 'false'"" />
 
                     <Target Name='Error' >
-                        <ErrorTask1 ContinueOnError='True'/>                    
-                        <ErrorTask2 ContinueOnError='False'/>  
-                        <ErrorTask3 /> 
-                        <OnError ExecuteTargets='Foo'/>                  
-                        <OnError ExecuteTargets='Bar'/>                  
+                        <ErrorTask1 ContinueOnError='True'/>
+                        <ErrorTask2 ContinueOnError='False'/>
+                        <ErrorTask3 />
+                        <OnError ExecuteTargets='Foo'/>
+                        <OnError ExecuteTargets='Bar'/>
                     </Target>
 
                     <Target Name='Foo' Inputs='foo.cpp' Outputs='foo.o'>
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 67950cf5716..a4bcc061187 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 using Microsoft.Build.Engine.UnitTests.TestComparers;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -23,7 +25,7 @@ public class TargetResult_Tests
         [Fact]
         public void TestConstructorNoItems()
         {
-            TargetResult result = new TargetResult(new TaskItem[] { }, BuildResultUtilities.GetStopWithErrorResult());
+            TargetResult result = new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult());
             Assert.Empty(result.Items);
             Assert.Null(result.Exception);
             Assert.Equal(TargetResultCode.Failure, result.ResultCode);
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index 1c3da30e0c7..64b62861d6f 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -17,6 +17,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class TargetUpToDateChecker_Tests : IDisposable
@@ -1029,4 +1031,3 @@ private void SimpleSymlinkInputCheck(DateTime symlinkWriteTime, DateTime targetW
         }
     }
 }
-
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
index c0341747d64..7f390cdf98c 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
@@ -8,12 +8,14 @@
 using Microsoft.Build.Framework;
 using System.Reflection;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
     /// A task used for testing the TaskExecutionHost, which reports what the TaskExecutionHost does to it.
     /// </summary>
-    internal class TaskBuilderTestTask : IGeneratedTask
+    public class TaskBuilderTestTask : IGeneratedTask
     {
         /// <summary>
         /// The task host.
@@ -82,7 +84,7 @@ public bool BoolParam
             set
             {
                 _boolOutput = value;
-                _testTaskHost.ParameterSet("BoolParam", value);
+                _testTaskHost?.ParameterSet("BoolParam", value);
             }
         }
 
@@ -94,7 +96,7 @@ public bool[] BoolArrayParam
             set
             {
                 _boolArrayOutput = value;
-                _testTaskHost.ParameterSet("BoolArrayParam", value);
+                _testTaskHost?.ParameterSet("BoolArrayParam", value);
             }
         }
 
@@ -106,7 +108,7 @@ public int IntParam
             set
             {
                 _intOutput = value;
-                _testTaskHost.ParameterSet("IntParam", value);
+                _testTaskHost?.ParameterSet("IntParam", value);
             }
         }
 
@@ -118,7 +120,7 @@ public int[] IntArrayParam
             set
             {
                 _intArrayOutput = value;
-                _testTaskHost.ParameterSet("IntArrayParam", value);
+                _testTaskHost?.ParameterSet("IntArrayParam", value);
             }
         }
 
@@ -130,7 +132,7 @@ public string StringParam
             set
             {
                 _stringOutput = value;
-                _testTaskHost.ParameterSet("StringParam", value);
+                _testTaskHost?.ParameterSet("StringParam", value);
             }
         }
 
@@ -142,7 +144,7 @@ public string[] StringArrayParam
             set
             {
                 _stringArrayOutput = value;
-                _testTaskHost.ParameterSet("StringArrayParam", value);
+                _testTaskHost?.ParameterSet("StringArrayParam", value);
             }
         }
 
@@ -154,7 +156,7 @@ public ITaskItem ItemParam
             set
             {
                 _itemOutput = value;
-                _testTaskHost.ParameterSet("ItemParam", value);
+                _testTaskHost?.ParameterSet("ItemParam", value);
             }
         }
 
@@ -166,7 +168,7 @@ public ITaskItem[] ItemArrayParam
             set
             {
                 _itemArrayOutput = value;
-                _testTaskHost.ParameterSet("ItemArrayParam", value);
+                _testTaskHost?.ParameterSet("ItemArrayParam", value);
             }
         }
 
@@ -179,7 +181,7 @@ public bool ExecuteReturnParam
             set
             {
                 _executeReturnValue = value;
-                _testTaskHost.ParameterSet("ExecuteReturnParam", value);
+                _testTaskHost?.ParameterSet("ExecuteReturnParam", value);
             }
         }
 
@@ -191,7 +193,7 @@ public bool BoolOutput
         {
             get
             {
-                _testTaskHost.OutputRead("BoolOutput", _boolOutput);
+                _testTaskHost?.OutputRead("BoolOutput", _boolOutput);
                 return _boolOutput;
             }
         }
@@ -204,7 +206,7 @@ public bool[] BoolArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("BoolArrayOutput", _boolArrayOutput);
+                _testTaskHost?.OutputRead("BoolArrayOutput", _boolArrayOutput);
                 return _boolArrayOutput;
             }
         }
@@ -217,7 +219,7 @@ public int IntOutput
         {
             get
             {
-                _testTaskHost.OutputRead("IntOutput", _intOutput);
+                _testTaskHost?.OutputRead("IntOutput", _intOutput);
                 return _intOutput;
             }
         }
@@ -230,7 +232,7 @@ public int[] IntArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("IntArrayOutput", _intArrayOutput);
+                _testTaskHost?.OutputRead("IntArrayOutput", _intArrayOutput);
                 return _intArrayOutput;
             }
         }
@@ -243,7 +245,7 @@ public string StringOutput
         {
             get
             {
-                _testTaskHost.OutputRead("StringOutput", _stringOutput);
+                _testTaskHost?.OutputRead("StringOutput", _stringOutput);
                 return _stringOutput;
             }
         }
@@ -256,7 +258,7 @@ public string EmptyStringOutput
         {
             get
             {
-                _testTaskHost.OutputRead("EmptyStringOutput", null);
+                _testTaskHost?.OutputRead("EmptyStringOutput", null);
                 return String.Empty;
             }
         }
@@ -269,8 +271,8 @@ public string[] EmptyStringArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("EmptyStringArrayOutput", null);
-                return new string[0];
+                _testTaskHost?.OutputRead("EmptyStringArrayOutput", null);
+                return Array.Empty<string>();
             }
         }
 
@@ -282,7 +284,7 @@ public string NullStringOutput
         {
             get
             {
-                _testTaskHost.OutputRead("NullStringOutput", null);
+                _testTaskHost?.OutputRead("NullStringOutput", null);
                 return null;
             }
         }
@@ -295,7 +297,7 @@ public ITaskItem NullITaskItemOutput
         {
             get
             {
-                _testTaskHost.OutputRead("NullITaskItemOutput", null);
+                _testTaskHost?.OutputRead("NullITaskItemOutput", null);
                 return null;
             }
         }
@@ -308,7 +310,7 @@ public string[] NullStringArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("NullStringArrayOutput", null);
+                _testTaskHost?.OutputRead("NullStringArrayOutput", null);
                 return null;
             }
         }
@@ -321,7 +323,7 @@ public ITaskItem[] NullITaskItemArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("NullITaskItemArrayOutput", null);
+                _testTaskHost?.OutputRead("NullITaskItemArrayOutput", null);
                 return null;
             }
         }
@@ -334,7 +336,7 @@ public string[] StringArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("StringArrayOutput", _stringArrayOutput);
+                _testTaskHost?.OutputRead("StringArrayOutput", _stringArrayOutput);
                 return _stringArrayOutput;
             }
         }
@@ -347,7 +349,7 @@ public ITaskItem ItemOutput
         {
             get
             {
-                _testTaskHost.OutputRead("ItemOutput", _itemOutput);
+                _testTaskHost?.OutputRead("ItemOutput", _itemOutput);
                 return _itemOutput;
             }
         }
@@ -360,7 +362,7 @@ public ITaskItem[] ItemArrayOutput
         {
             get
             {
-                _testTaskHost.OutputRead("ItemArrayOutput", _itemArrayOutput);
+                _testTaskHost?.OutputRead("ItemArrayOutput", _itemArrayOutput);
                 return _itemArrayOutput;
             }
         }
@@ -373,52 +375,13 @@ public ITaskItem[] ItemArrayNullOutput
         {
             get
             {
-                _testTaskHost.OutputRead("ItemArrayNullOutput", _itemArrayOutput);
+                _testTaskHost?.OutputRead("ItemArrayNullOutput", _itemArrayOutput);
                 return null;
             }
         }
 
-        /// <summary>
-        /// An object output
-        /// </summary>
-        [Output]
-        public object ObjectOutput
-        {
-            get
-            {
-                object output = new object();
-                _testTaskHost.OutputRead("ObjectOutput", output);
-                return output;
-            }
-        }
-
-        /// <summary>
-        /// An object array output
-        /// </summary>
-        [Output]
-        public object[] ObjectArrayOutput
-        {
-            get
-            {
-                object[] output = new object[] { new object(), new object() };
-                _testTaskHost.OutputRead("ObjectArrayOutput", output);
-                return output;
-            }
-        }
-
-        /// <summary>
-        /// An arraylist output
-        /// </summary>
         [Output]
-        public ArrayList ArrayListOutput
-        {
-            get
-            {
-                ArrayList output = new ArrayList();
-                _testTaskHost.OutputRead("ArrayListOutput", output);
-                return output;
-            }
-        }
+        public TargetBuiltReason EnumOutput => TargetBuiltReason.BeforeTargets;
 
         #region ITask Members
 
@@ -550,8 +513,8 @@ public TaskPropertyInfo[] GetTaskParameters()
                     propertyInfos[i] = new TaskPropertyInfo(
                         infos[i].Name,
                         infos[i].PropertyType,
-                        infos[i].GetCustomAttributes(typeof(OutputAttribute), false).Count() > 0,
-                        infos[i].GetCustomAttributes(typeof(RequiredAttribute), false).Count() > 0);
+                        infos[i].GetCustomAttributes(typeof(OutputAttribute), false).Length > 0,
+                        infos[i].GetCustomAttributes(typeof(RequiredAttribute), false).Length > 0);
                 }
 
                 return propertyInfos;
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 7ba76a5b89d..94dd2b13b05 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -24,6 +24,8 @@
 using Xunit.Abstractions;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -54,9 +56,9 @@ public TaskBuilder_Tests(ITestOutputHelper output)
         }
 
         /*********************************************************************************
-         * 
+         *
          *                                  OUTPUT PARAMS
-         * 
+         *
          *********************************************************************************/
 
         /// <summary>
@@ -70,7 +72,7 @@ public void TasksAreDiscoveredWhenTaskConditionTrue()
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Target Name='t'>
                          <NonExistantTask Condition=""'1'=='1'""/>
-                         <Message Text='Made it'/>                    
+                         <Message Text='Made it'/>
                       </Target>
                       </Project>");
 
@@ -96,7 +98,7 @@ public void TasksNotDiscoveredWhenTaskConditionFalse()
                 @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Target Name='t'>
                          <NonExistantTask Condition=""'1'=='2'""/>
-                         <Message Text='Made it'/>                    
+                         <Message Text='Made it'/>
                       </Target>
                       </Project>");
 
@@ -117,7 +119,7 @@ public void CanceledTasksDoNotLogMSB4181()
                 ProjectCollection collection = new ProjectCollection();
 
                 string contents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion ='Current'>
+                    <Project ToolsVersion ='Current'>
                      <Target Name='test'>
                         <Exec Command='" + Helpers.GetSleepCommand(TimeSpan.FromSeconds(10)) + @"'/>
                      </Target>
@@ -190,7 +192,7 @@ public void OverridePropertiesInCreateProperty()
                                          Condition=""'%(LogicalName)' != '' "">
                              <Output TaskParameter=""Value"" PropertyName=""LinkSwitches""/>
                          </CreateProperty>
-                         <Message Text='final:[$(LinkSwitches)]'/>                    
+                         <Message Text='final:[$(LinkSwitches)]'/>
                       </Target>
                       </Project>");
 
@@ -221,7 +223,7 @@ public void OverridePropertiesInInferredCreateProperty()
                     @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <ItemGroup>
                         <i Include='" + files[0] + "'><output>" + files[1] + @"</output></i>
-                      </ItemGroup> 
+                      </ItemGroup>
                       <ItemGroup>
                          <EmbeddedResource Include='a.resx'>
                         <LogicalName>foo</LogicalName>
@@ -234,7 +236,7 @@ public void OverridePropertiesInInferredCreateProperty()
                         </EmbeddedResource>
                         </ItemGroup>
                       <Target Name='t2' DependsOnTargets='t'>
-                        <Message Text='final:[$(LinkSwitches)]'/>   
+                        <Message Text='final:[$(LinkSwitches)]'/>
                       </Target>
                       <Target Name='t' Inputs='%(i.Identity)' Outputs='%(i.Output)'>
                         <Message Text='start:[Hello]'/>
@@ -242,7 +244,7 @@ public void OverridePropertiesInInferredCreateProperty()
                                          Condition=""'%(LogicalName)' != '' "">
                              <Output TaskParameter=""Value"" PropertyName=""LinkSwitches""/>
                         </CreateProperty>
-                        <Message Text='end:[hello]'/>                    
+                        <Message Text='end:[hello]'/>
                     </Target>
                     </Project>");
 
@@ -286,17 +288,17 @@ public void TaskOutputBatching()
                     <Target Name='Build'>
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""Value"" PropertyName=""Property1""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='Property1=[$(Property1)]' />
 
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""%(TaskParameterItem.ParameterName)"" PropertyName=""Property2""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='Property2=[$(Property2)]' />
 
                         <CreateProperty Value=""@(TaskParameterItem)"">
                             <Output TaskParameter=""Value"" PropertyName=""%(TaskParameterItem.PropertyName)""/>
-                        </CreateProperty> 
+                        </CreateProperty>
                         <Message Text='MetadataProperty=[$(MetadataProperty)]' />
 
                         <CreateItem Include=""@(TaskParameterItem)"">
@@ -346,9 +348,9 @@ public void MSBuildLastTaskResult()
         <Copy SourceFiles='|' DestinationFolder='c:\' ContinueOnError='true' />
         <PropertyGroup>
            <p>$(MSBuildLastTaskResult)</p>
-        </PropertyGroup>                 
-        <Message Text='[1:$(MSBuildLastTaskResult)]'/> <!-- Should be false: propertygroup did not reset it -->   
-        <Message Text='[p:$(p)]'/> <!-- Should be false as stored earlier -->   
+        </PropertyGroup>
+        <Message Text='[1:$(MSBuildLastTaskResult)]'/> <!-- Should be false: propertygroup did not reset it -->
+        <Message Text='[p:$(p)]'/> <!-- Should be false as stored earlier -->
         <Message Text='[2:$(MSBuildLastTaskResult)]'/> <!-- Message succeeded, should now be true -->
     </Target>
     <Target Name='t2' DependsOnTargets='t'>
@@ -848,11 +850,11 @@ Task IRequestBuilderCallback.BlockOnTargetInProgress(int blockingRequestId, stri
 
         #endregion
 
-/*********************************************************************************
- * 
- *                                     Helpers
- * 
- *********************************************************************************/
+        /*********************************************************************************
+         *
+         *                                     Helpers
+         *
+         *********************************************************************************/
 
         /// <summary>
         /// Helper method for validating the setting of defining project metadata on items
@@ -869,7 +871,7 @@ private void ValidateDefiningProjectMetadataOnTaskOutputsHelper(string customTas
                     <Import Project=`b.proj` />
 
                     <Target Name=`Run`>
-                      <ItemCreationTask 
+                      <ItemCreationTask
                         InputItemsToPassThrough=`@(PassThrough)`
                         InputItemsToCopy=`@(Copy)`>
                           <Output TaskParameter=`OutputString` ItemName=`A` />
@@ -878,10 +880,10 @@ private void ValidateDefiningProjectMetadataOnTaskOutputsHelper(string customTas
                           <Output TaskParameter=`CopiedOutputItems` ItemName=`D` />
                       </ItemCreationTask>
 
-                      <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`C is wrong: EXPECTED: [a] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'a'` />    
-                      <Warning Text=`D is wrong: EXPECTED: [a] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'a'` />    
+                      <Warning Text=`A is wrong: EXPECTED: [a] ACTUAL: [%(A.DefiningProjectName)]` Condition=`'%(A.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`B is wrong: EXPECTED: [a] ACTUAL: [%(B.DefiningProjectName)]` Condition=`'%(B.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`C is wrong: EXPECTED: [a] ACTUAL: [%(C.DefiningProjectName)]` Condition=`'%(C.DefiningProjectName)' != 'a'` />
+                      <Warning Text=`D is wrong: EXPECTED: [a] ACTUAL: [%(D.DefiningProjectName)]` Condition=`'%(D.DefiningProjectName)' != 'a'` />
                     </Target>
                 </Project>
 ";
@@ -1003,6 +1005,7 @@ private string GenerateSTATask(bool requireSTA)
                 @"
 using System;
 using Microsoft.Build.Framework;
+
 namespace ClassLibrary2
 {" + (requireSTA ? "[RunInSTA]" : String.Empty) + @"
     public class ThreadTask : ITask
@@ -1089,11 +1092,11 @@ private ProjectInstance CreateTestProject()
                     <Target Name='Skip' Inputs='testProject.proj' Outputs='testProject.proj' />
 
                     <Target Name='Error' >
-                        <ErrorTask1 ContinueOnError='True'/>                    
-                        <ErrorTask2 ContinueOnError='False'/>  
-                        <ErrorTask3 /> 
-                        <OnError ExecuteTargets='Foo'/>                  
-                        <OnError ExecuteTargets='Bar'/>                  
+                        <ErrorTask1 ContinueOnError='True'/>
+                        <ErrorTask2 ContinueOnError='False'/>
+                        <ErrorTask3 />
+                        <OnError ExecuteTargets='Foo'/>
+                        <OnError ExecuteTargets='Bar'/>
                     </Target>
 
                     <Target Name='Foo' Inputs='foo.cpp' Outputs='foo.o'>
@@ -1131,7 +1134,7 @@ private ProjectInstance CreateTestProject()
                 ");
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testfile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testfile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             Project project = new Project(XmlReader.Create(new StringReader(projectFileContents)));
             config.Project = project.CreateProjectInstance();
             cache.AddConfiguration(config);
@@ -1144,7 +1147,7 @@ private ProjectInstance CreateTestProject()
         /// </summary>
         private class MockHost : MockLoggingService, IBuildComponentHost, IBuildComponent
         {
-#region IBuildComponentHost Members
+            #region IBuildComponentHost Members
 
             /// <summary>
             /// The config cache
@@ -1282,9 +1285,9 @@ public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelega
             {
             }
 
-#endregion
+            #endregion
 
-#region IBuildComponent Members
+            #region IBuildComponent Members
 
             /// <summary>
             /// Sets the component host
@@ -1303,7 +1306,7 @@ public void ShutdownComponent()
                 throw new NotImplementedException();
             }
 
-#endregion
+            #endregion
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 93abec24663..9f3cd6388b1 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -22,6 +22,8 @@
 using Xunit;
 using Microsoft.Build.Engine.UnitTests.TestComparers;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -897,7 +899,7 @@ public void TestOutputItemArrayToProperty()
         public void TestEmptyStringInStringArrayParameterIntoItemList()
         {
             SetTaskParameter("StringArrayParam", "");
-            ValidateOutputItems("StringArrayOutput", new ITaskItem[] { });
+            ValidateOutputItems("StringArrayOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -908,7 +910,7 @@ public void TestEmptyStringInStringArrayParameterIntoItemList()
         public void TestEmptyStringParameterIntoItemList()
         {
             SetTaskParameter("StringParam", "");
-            ValidateOutputItems("StringOutput", new ITaskItem[] { });
+            ValidateOutputItems("StringOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -917,7 +919,7 @@ public void TestEmptyStringParameterIntoItemList()
         [Fact]
         public void TestNullITaskItemArrayParameter()
         {
-            ValidateOutputItems("ItemArrayNullOutput", new ITaskItem[] { });
+            ValidateOutputItems("ItemArrayNullOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -928,7 +930,7 @@ public void TestArrayListParameter()
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ValidateOutputItems("ArrayListOutput", new ITaskItem[] { });
+                ValidateOutputItems("ArrayListOutput", Array.Empty<ITaskItem>());
             }
            );
         }
@@ -1135,11 +1137,7 @@ private static bool IsTaskFactoryClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetInterface("Microsoft.Build.Framework.ITaskFactory") != null);
-#else
-                type.GetInterfaces().Any(interfaceType => interfaceType.FullName == "Microsoft.Build.Framework.ITaskFactory");
-#endif
         }
 
         /// <summary>
@@ -1203,7 +1201,7 @@ private void InitializeHost(bool throwOnExecute)
             itemsByName.Add(item2);
             _twoItems = new ITaskItem[] { new TaskItem(item), new TaskItem(item2) };
 
-            _bucket = new ItemBucket(new string[0], new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);
+            _bucket = new ItemBucket(Array.Empty<string>(), new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);
             _host.FindTask(null);
             _host.InitializeForBatch(talc, _bucket, null);
             _parametersSetOnTask = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 94c7c23f23d..c885fbea105 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -16,6 +16,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -59,6 +61,7 @@ public void ConstructorWithNullName()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -94,6 +97,7 @@ public void ConstructorWithEmptyName()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -129,6 +133,7 @@ public void ConstructorWithNullLocation()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -166,6 +171,7 @@ public void ConstructorWithEmptyLocation()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -201,6 +207,7 @@ public void TestValidConstructors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
@@ -226,6 +233,7 @@ public void TestValidConstructors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
@@ -252,6 +260,7 @@ public void TestValidConstructors()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             IDictionary<string, object> parameters2 = new Dictionary<string, object>();
@@ -283,6 +292,7 @@ public void TestValidConstructors()
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             HashSet<string> WarningsAsErrors = new HashSet<string>();
@@ -314,6 +324,7 @@ public void TestValidConstructors()
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
         }
 
@@ -352,6 +363,7 @@ public void TestTranslationWithNullDictionary()
                 taskParameters: null,
                 globalParameters: expectedGlobalProperties,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -397,6 +409,7 @@ public void TestTranslationWithEmptyDictionary()
                 taskParameters: new Dictionary<string, object>(),
                 globalParameters: new Dictionary<string, string>(),
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -447,6 +460,7 @@ public void TestTranslationWithValueTypesInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -495,6 +509,7 @@ public void TestTranslationWithITaskItemInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -542,6 +557,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -596,6 +612,7 @@ public void TestTranslationWithWarningsAsErrors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -609,7 +626,6 @@ public void TestTranslationWithWarningsAsErrors()
 #endif
             Assert.NotNull(deserializedConfig.WarningsAsErrors);
             config.WarningsAsErrors.SequenceEqual(deserializedConfig.WarningsAsErrors, StringComparer.Ordinal).ShouldBeTrue();
-
         }
 
         /// <summary>
@@ -646,6 +662,7 @@ public void TestTranslationWithWarningsAsMessages()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: WarningsAsMessages);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
diff --git a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
index fa4146484e9..69c142d7712 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostFactory_Tests.cs
@@ -1,16 +1,28 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 using System;
 using System.Diagnostics;
 using Microsoft.Build.Execution;
 using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.BackEnd;
+
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
+
+#nullable disable
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
     public sealed class TaskHostFactory_Tests
     {
+        ITestOutputHelper _output;
+
+        public TaskHostFactory_Tests(ITestOutputHelper testOutputHelper)
+        {
+            _output = testOutputHelper;
+        }
+
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void TaskNodesDieAfterBuild()
@@ -27,7 +39,7 @@ public void TaskNodesDieAfterBuild()
     </Target>
 </Project>";
                 TransientTestFile project = env.CreateFile("testProject.csproj", pidTaskProject);
-                ProjectInstance projectInstance = new ProjectInstance(project.Path);
+                ProjectInstance projectInstance = new(project.Path);
                 projectInstance.Build().ShouldBeTrue();
                 string processId = projectInstance.GetPropertyValue("PID");
                 string.IsNullOrEmpty(processId).ShouldBeFalse();
@@ -45,5 +57,38 @@ public void TaskNodesDieAfterBuild()
                 }
             }
         }
+
+        [Fact]
+        public void VariousParameterTypesCanBeTransmittedToAndRecievedFromTaskHost()
+        {
+            using TestEnvironment env = TestEnvironment.Create(_output);
+
+            string projectContents = $@"
+<Project>
+    <UsingTask TaskName=""{nameof(TaskBuilderTestTask)}"" AssemblyFile=""{typeof(TaskBuilderTestTask).Assembly.Location}"" TaskFactory=""TaskHostFactory"" />
+    <Target Name='{nameof(VariousParameterTypesCanBeTransmittedToAndRecievedFromTaskHost)}'>
+        <{nameof(TaskBuilderTestTask)}
+            ExecuteReturnParam=""true""
+            BoolParam=""true""
+            BoolArrayParam=""false;true;false""
+            IntParam=""314""
+            IntArrayParam=""42;67;98""
+            StringParam=""stringParamInput""
+            StringArrayParam=""stringArrayParamInput1;stringArrayParamInput2;stringArrayParamInput3"">
+
+            <Output PropertyName=""BoolOutput"" TaskParameter=""BoolOutput"" />
+            <Output PropertyName=""BoolArrayOutput"" TaskParameter=""BoolArrayOutput"" />
+            <Output PropertyName=""IntOutput"" TaskParameter=""IntOutput"" />
+            <Output PropertyName=""IntArrayOutput"" TaskParameter=""IntArrayOutput"" />
+            <Output PropertyName=""EnumOutput"" TaskParameter=""EnumOutput"" />
+            <Output PropertyName=""StringOutput"" TaskParameter=""StringOutput"" />
+            <Output PropertyName=""StringArrayOutput"" TaskParameter=""StringArrayOutput"" />
+        </{nameof(TaskBuilderTestTask)}>
+    </Target>
+</Project>";
+            TransientTestProjectWithFiles project = env.CreateTestProjectWithFiles(projectContents);
+            ProjectInstance projectInstance = new(project.ProjectFile);
+            projectInstance.Build(new[] { new MockLogger(env.Output) }).ShouldBeTrue();
+            }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
index 60ad45a978d..df7e6dafa41 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskCancelled_Tests.cs
@@ -5,6 +5,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
index b6be946a836..1b46cfd3090 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
@@ -13,6 +13,8 @@
 using TaskHostPacketHelpers = Microsoft.Build.UnitTests.BackEnd.TaskHostConfiguration_Tests.TaskHostPacketHelpers;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index e45add12e09..7733f0aac37 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -17,6 +17,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -71,7 +73,7 @@ public TaskHost_Tests()
             _elementLocation = ElementLocation.Create("MockFile", 5, 5);
 
             BuildRequest buildRequest = new BuildRequest(1 /* submissionId */, 1, 1, new List<string>(), null, BuildEventContext.Invalid, null);
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("Nothing", new Dictionary<string, string>(), "4.0", new string[0], null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("Nothing", new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null), "2.0");
 
             configuration.Project = new ProjectInstance(ProjectRootElement.Create());
 
@@ -496,7 +498,7 @@ public void IsRunningMultipleNodes4Nodes()
         public void LogCustomAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -532,7 +534,7 @@ public void LogCustomAfterTaskIsDone()
         public void LogCommentAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -568,7 +570,7 @@ public void LogCommentAfterTaskIsDone()
         public void LogWarningAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -604,7 +606,7 @@ public void LogWarningAfterTaskIsDone()
         public void LogErrorAfterTaskIsDone()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='test' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
                             <Task>
                               <Using Namespace='System' />
@@ -973,7 +975,7 @@ internal string CustomMessage
         /// </summary>
         internal class MyCustomBuildEventArgsNotSerializable : CustomBuildEventArgs
         {
-            //  If binary serialization is not available, then we use a simple serializer which relies on a default constructor.  So to test
+            // If binary serialization is not available, then we use a simple serializer which relies on a default constructor.  So to test
             //  what happens for an event that's not serializable, don't include a default constructor.
             /// <summary>
             /// Default constructor
diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index ecdfc421d3c..7138a700b21 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -20,6 +20,9 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
@@ -72,17 +75,20 @@ public class TaskRegistry_Tests
         /// </summary>
         private readonly ElementLocation _elementLocation = ElementLocation.Create("c:\\project.proj", 0, 0);
 
+        private readonly ITestOutputHelper _output;
+
         /// <summary>
         /// Setup some logging services so we can see what is going on.
         /// </summary>
-        public TaskRegistry_Tests()
+        public TaskRegistry_Tests(ITestOutputHelper output)
         {
             _testTaskLocation = typeof(TaskRegistry_Tests).GetTypeInfo().Assembly.ManifestModule.FullyQualifiedName;
 
             _loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             _targetLoggingContext = new TargetLoggingContext(_loggingService, _loggerContext);
 
-            _loggingService.RegisterLogger(new MockLogger());
+            _output = output;
+            _loggingService.RegisterLogger(new MockLogger(_output));
         }
 
         #region UsingTaskTests
@@ -622,6 +628,96 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()
                 );
         }
 
+        [Theory]
+        [InlineData("x64","true","x86","", "x64")] // x64 wins
+        [InlineData("x64", "false", "x86", "true", "x86")] // x86 wins
+        public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, string secondArch, string secondOverride, string expectedArch)
+        {
+            Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
+
+            List<ProjectUsingTaskElement> elementList = new List<ProjectUsingTaskElement>();
+            ProjectRootElement project = ProjectRootElement.Create();
+
+            ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
+            element.Architecture = firstArch;
+            element.Override = firstOverride;
+            elementList.Add(element);
+
+            ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
+            secondElement.Architecture = secondArch;
+            secondElement.Override = secondOverride;
+            elementList.Add(secondElement);
+
+            TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
+
+            // no parameters
+            RetrieveAndValidateRegisteredTaskRecord
+                (
+                    registry,
+                    exactMatchRequired: false,
+                    runtime: null,
+                    architecture: null,
+                    shouldBeRetrieved: true,
+                    shouldBeRetrievedFromCache: false,
+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
+                    expectedArchitecture: expectedArch
+                );
+
+            // no parameters, fuzzy match
+            RetrieveAndValidateRegisteredTaskRecord
+                (
+                    registry,
+                    exactMatchRequired: false,
+                    runtime: null,
+                    architecture: null,
+                    shouldBeRetrieved: true,
+                    shouldBeRetrievedFromCache: false,
+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
+                    expectedArchitecture: expectedArch
+                );
+        }
+
+        [Fact]
+        public void OverriddenTask_MultipleOverridesCauseMSB4275()
+        {
+            string proj =
+                $"<Project>" +
+                    $"<Target Name='Bar'/>" +
+                    $"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task.dll' Override='true' Architecture='x64' />" +
+                    $"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task2.dll' Override='true' Architecture='x86'/>" +
+                $"</Project>";
+
+            MockLogger logger = new MockLogger(_output);
+            using (var env = TestEnvironment.Create(_output))
+            {
+                var testProject = env.CreateTestProjectWithFiles(ObjectModelHelpers.CleanupFileContents(proj));
+
+                using (var buildManager = new BuildManager())
+                {
+                    BuildParameters parameters = new BuildParameters()
+                    {
+                        Loggers = new[] { logger }
+                    };
+
+                    var request = new BuildRequestData(
+                        testProject.ProjectFile,
+                        new Dictionary<string, string>(),
+                        MSBuildConstants.CurrentToolsVersion,
+                        Array.Empty<string>(),
+                        null);
+
+                    var result = buildManager.Build(
+                        parameters,
+                        request);
+                    result.OverallResult.ShouldBe(BuildResultCode.Success);
+
+                    // We should see MSB4275: Multiple usingtask overrides with the same name
+                    logger.ErrorCount.ShouldBe(1);
+                    logger.AssertLogContains("MSB4275");
+                }
+            }
+        }
+
         /// <summary>
         /// Test retrieving a matching task record using various parameter combinations when allowing
         /// fuzzy matches.
diff --git a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
index a4f5a3c09e5..21dd0b7b1fe 100644
--- a/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
+++ b/src/Build.UnitTests/BackEnd/TranslationHelpers.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index d7e2b9b5d4b..4f11a043242 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -1,22 +1,25 @@
 ﻿using System;
 using System.Collections.Generic;
+using System.IO;
 using System.Text;
 
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
-
+using Microsoft.Build.UnitTests.Shared;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class BinaryLoggerTests : IDisposable
     {
         private const string s_testProject = @"
-         <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+         <Project>
             <PropertyGroup>
                <TestProperty>Test</TestProperty>
             </PropertyGroup>
@@ -136,6 +139,46 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()
             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);
         }
 
+        [Fact]
+        public void UnusedEnvironmentVariablesDoNotAppearInBinaryLog()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                env.SetEnvironmentVariable("MSBUILDONLYLOGUSEDENVIRONMENTVARIABLES", "1");
+                env.SetEnvironmentVariable("EnvVar1", "itsValue");
+                env.SetEnvironmentVariable("EnvVar2", "value2");
+                env.SetEnvironmentVariable("EnvVar3", "value3");
+                string contents = @"
+<Project DefaultTargets=""PrintEnvVar"">
+
+<PropertyGroup>
+<MyProp1>value</MyProp1>
+<MyProp2>$(EnvVar2)</MyProp2>
+</PropertyGroup>
+
+<Target Name=""PrintEnvVar"">
+<Message Text=""Environment variable EnvVar3 has value $(EnvVar3)"" Importance=""High"" />
+</Target>
+
+</Project>";
+                TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
+                TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
+                BinaryLogger logger = new();
+                logger.Parameters = _logFile;
+                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -bl:{logger.Parameters}", out bool success);
+                success.ShouldBeTrue();
+                RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
+                success.ShouldBeTrue();
+                string text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile.log"));
+                text.ShouldContain("EnvVar2");
+                text.ShouldContain("value2");
+                text.ShouldContain("EnvVar3");
+                text.ShouldContain("value3");
+                text.ShouldNotContain("EnvVar1");
+                text.ShouldNotContain("itsValue");
+            }
+        }
+
         [Fact]
         public void BinaryLoggerShouldNotThrowWhenMetadataCannotBeExpanded()
         {
diff --git a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
index c6f59eea74f..023b16eb686 100644
--- a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
+++ b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
@@ -5,6 +5,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     public class BuildEnvironmentHelper_Tests
@@ -367,10 +369,11 @@ public void BuildEnvironmentFindsAmd64()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
         {
-            using (var env = new EmptyStandaloneEnviroment(MSBuildExeName, writeFakeFiles:true, includeAmd64Folder:true))
+            using (var env = new EmptyStandaloneEnviroment(MSBuildExeName, writeFakeFiles: true, includeAmd64Folder: true))
             {
                 var msBuild64Exe = Path.Combine(env.BuildDirectory, "amd64", MSBuildExeName);
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly(() => msBuild64Exe, ReturnNull, ReturnNull,
@@ -384,6 +387,7 @@ public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64NoVS()
         {
@@ -399,6 +403,7 @@ public void BuildEnvironmentFindsAmd64NoVS()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64RunningInAmd64()
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 1d06b86c43b..9b9deeef04a 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class BuildEventArgsSerializationTests
@@ -22,30 +24,36 @@ public BuildEventArgsSerializationTests()
             _ = ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix;
         }
 
-        [Fact]
-        public void RoundtripBuildStartedEventArgs()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void RoundtripBuildStartedEventArgs(bool serializeAllEnvironmentVariables)
         {
-            var args = new BuildStartedEventArgs(
-                "Message",
-                "HelpKeyword",
-                DateTime.Parse("3/1/2017 11:11:56 AM"));
-            Roundtrip(args,
-                e => e.Message,
-                e => e.HelpKeyword,
-                e => e.Timestamp.ToString());
-
-            args = new BuildStartedEventArgs(
-                "M",
-                null,
-                new Dictionary<string, string>
-                {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                env.SetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES", serializeAllEnvironmentVariables ? "1" : null);
+                var args = new BuildStartedEventArgs(
+                    "Message",
+                    "HelpKeyword",
+                    DateTime.Parse("3/1/2017 11:11:56 AM"));
+                Roundtrip(args,
+                    e => e.Message,
+                    e => e.HelpKeyword,
+                    e => e.Timestamp.ToString());
+
+                args = new BuildStartedEventArgs(
+                    "M",
+                    null,
+                    new Dictionary<string, string>
+                    {
                     { "SampleName", "SampleValue" }
-                });
-            Roundtrip(args,
-                e => TranslationHelpers.ToString(e.BuildEnvironment),
-                e => e.HelpKeyword,
-                e => e.ThreadId.ToString(),
-                e => e.SenderName);
+                    });
+                Roundtrip(args,
+                    e => serializeAllEnvironmentVariables ? TranslationHelpers.ToString(e.BuildEnvironment) : null,
+                    e => e.HelpKeyword,
+                    e => e.ThreadId.ToString(),
+                    e => e.SenderName);
+            }
         }
 
         [Fact]
@@ -171,6 +179,17 @@ public void RoundtripTaskStartedEventArgs()
                 e => e.ColumnNumber.ToString());
         }
 
+        [Fact]
+        public void RoundtripEnvironmentVariableReadEventArgs()
+        {
+            EnvironmentVariableReadEventArgs args = new("VarName", "VarValue");
+            args.BuildEventContext = new BuildEventContext(4, 5, 6, 7);
+            Roundtrip(args,
+                e => e.Message,
+                e => e.EnvironmentVariableName,
+                e => e.BuildEventContext.ToString());
+        }
+
         [Fact]
         public void RoundtripTaskFinishedEventArgs()
         {
diff --git a/src/Build.UnitTests/BuildResultUtilities.cs b/src/Build.UnitTests/BuildResultUtilities.cs
index 244fee76119..b637deaee69 100644
--- a/src/Build.UnitTests/BuildResultUtilities.cs
+++ b/src/Build.UnitTests/BuildResultUtilities.cs
@@ -6,18 +6,20 @@
 using Microsoft.Build.Execution;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.Unittest
 {
     internal class BuildResultUtilities
     {
         public static TargetResult GetEmptyFailingTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetStopWithErrorResult());
+            return new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult());
         }
 
         public static TargetResult GetEmptySucceedingTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetSuccessResult());
+            return new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetSuccessResult());
         }
 
         public static TargetResult GetNonEmptySucceedingTargetResult()
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index 9b151a10fc7..dd4cd24501d 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -11,6 +11,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     sealed public class ChangeWaves_Tests
diff --git a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
index 5049533a341..59c625f5ddd 100644
--- a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
+++ b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
@@ -1,11 +1,13 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
+using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Collections
 {
     /// <summary>
@@ -13,63 +15,43 @@ namespace Microsoft.Build.UnitTests.OM.Collections
     /// </summary>
     public class CopyOnReadEnumerable_Tests
     {
-        /// <summary>
-        /// Verify basic case
-        /// </summary>
         [Fact]
-        public void NonCloneableBackingCollection()
+        public void EnumeratesBackingCollection()
         {
             List<int> values = new List<int>(new int[] { 1, 2, 3 });
 
-            CopyOnReadEnumerable<int> enumerable = new CopyOnReadEnumerable<int>(values, values);
+            CopyOnReadEnumerable<int, string> enumerable = new CopyOnReadEnumerable<int, string>(values, values, i => i.ToString());
 
             using (IEnumerator<int> enumerator = values.GetEnumerator())
             {
-                foreach (int i in enumerable)
+                foreach (string s in enumerable)
                 {
                     enumerator.MoveNext();
-                    Assert.Equal(i, enumerator.Current);
+                    enumerator.Current.ToString().ShouldBe(s);
                 }
+                enumerator.MoveNext().ShouldBeFalse();
             }
         }
 
-        /// <summary>
-        /// Verify cloning case
-        /// </summary>
         [Fact]
-        public void CloneableBackingCollection()
+        public void CopiesBackingCollection()
         {
-            List<Cloneable> values = new List<Cloneable>(new Cloneable[] { new Cloneable(), new Cloneable(), new Cloneable() });
+            List<string> values = new List<string>(new string[] { "a", "b", "c" });
 
-            CopyOnReadEnumerable<Cloneable> enumerable = new CopyOnReadEnumerable<Cloneable>(values, values);
+            CopyOnReadEnumerable<string, string> enumerable = new CopyOnReadEnumerable<string, string>(values, values, s => s);
 
-            using (IEnumerator<Cloneable> enumerator = values.GetEnumerator())
-            {
-                foreach (Cloneable i in enumerable)
-                {
-                    enumerator.MoveNext();
-                    Assert.False(Object.ReferenceEquals(i, enumerator.Current)); // "Enumerator copied references."
-                }
-            }
-        }
+            int expectedCount = values.Count;
+            var enumerator = enumerable.GetEnumerator();
 
-        /// <summary>
-        /// A class used for testing cloneable backing collections.
-        /// </summary>
-        private class Cloneable : IDeepCloneable<Cloneable>
-        {
-            #region IDeepCloneable<Cloneable> Members
+            // The list has been copied and adding to it has no effect on the enumerable.
+            values.Add("d");
 
-            /// <summary>
-            /// Clones the object.
-            /// </summary>
-            /// <returns>The new instance.</returns>
-            public Cloneable DeepClone()
+            int actualCount = 0;
+            while (enumerator.MoveNext())
             {
-                return new Cloneable();
+                actualCount++;
             }
-
-            #endregion
+            actualCount.ShouldBe(expectedCount);
         }
     }
 }
diff --git a/src/Build.UnitTests/Collections/CopyOnWritePropertyDictionary_Tests.cs b/src/Build.UnitTests/Collections/CopyOnWritePropertyDictionary_Tests.cs
index bdc7a99e972..6e287228194 100644
--- a/src/Build.UnitTests/Collections/CopyOnWritePropertyDictionary_Tests.cs
+++ b/src/Build.UnitTests/Collections/CopyOnWritePropertyDictionary_Tests.cs
@@ -61,7 +61,7 @@ public void Indexer()
             dic["b"].ShouldBeSameAs(b);
 
             // Cannot set a null value
-            Assert.ThrowsAny<Exception>(() => dic["a"] = null);
+            Assert.ThrowsAny<Exception>(() => dic["a"] = null!);
 
             // Value's key must match the specified key
             Assert.ThrowsAny<Exception>(() => dic["a"] = b);
@@ -206,7 +206,7 @@ private sealed class MockValue : IKeyed, IValued, IEquatable<MockValue>, IImmuta
 
             public string EscapedValue => Key;
 
-            public bool Equals(MockValue other)
+            public bool Equals(MockValue? other)
             {
                 return other != null && Key == other.Key;
             }
diff --git a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
index ca9c3f60b06..98458c643a6 100644
--- a/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
+++ b/src/Build.UnitTests/Collections/MSBuildNameIgnoreCaseComparer_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Collections
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs b/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
index 63d31dd25bf..ae9415481aa 100644
--- a/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
+++ b/src/Build.UnitTests/Collections/MultiDictionary_Tests.cs
@@ -6,6 +6,8 @@
 using System;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Collections
 {
     /// <summary>
@@ -162,4 +164,4 @@ public void Clear()
             Assert.Equal(0, dictionary.ValueCount);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/Collections/OMcollections_tests.cs b/src/Build.UnitTests/Collections/OMcollections_tests.cs
index 90a169b7a64..19b4c44ab26 100644
--- a/src/Build.UnitTests/Collections/OMcollections_tests.cs
+++ b/src/Build.UnitTests/Collections/OMcollections_tests.cs
@@ -16,6 +16,8 @@
 using Xunit;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Collections
 {
     /// <summary>
diff --git a/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs b/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
index 3698f90ed5d..3e17a8bf6ef 100644
--- a/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
+++ b/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ConfigureableForwardingLogger_Tests
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 353fadb719c..1a44ce8fdb0 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -21,6 +21,8 @@
 using Xunit.Abstractions;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ConsoleLoggerTest
@@ -31,7 +33,7 @@ public class ConsoleLoggerTest
         private Dictionary<string, string> _environment;
 
         private static string s_dummyProjectContents = @"
-         <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+         <Project>
             <Target Name='XXX'>
                <Message Text='[hee haw]'/>
             </Target>
@@ -101,7 +103,7 @@ internal void ResetColor()
                 _simulatedConsole.Append("<reset color>");
             }
 
-            public static implicit operator string (SimulatedConsole sc)
+            public static implicit operator string(SimulatedConsole sc)
             {
                 return sc.ToString();
             }
@@ -220,8 +222,8 @@ public void WarningMessage()
                 new BuildRequestData(p.CreateProjectInstance(), new[] { "Spawn" }));
 
             p.Build().ShouldBeTrue();
-            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 1 [" + project.ProjectFile + ":: Number=1]");
-            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 2 [" + project.ProjectFile + ":: Number=2]");
+            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 1 [" + project.ProjectFile + "::Number=1]");
+            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 2 [" + project.ProjectFile + "::Number=2]");
         }
 
         [Fact]
@@ -261,8 +263,8 @@ public void ErrorMessage()
                 new BuildRequestData(p.CreateProjectInstance(), new[] { "Spawn" }));
 
             p.Build().ShouldBeFalse();
-            sc.ToString().ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + ":: Number=1]");
-            sc.ToString().ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + ":: Number=2]");
+            sc.ToString().ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + "::Number=1]");
+            sc.ToString().ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2]");
         }
 
         [Theory]
@@ -287,7 +289,7 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
             <ItemGroup>
                 <P Include='$(MSBuildThisFileFullPath)' AdditionalProperties='Number=1' />
                 <P Include='$(MSBuildThisFileFullPath)' AdditionalProperties='Number=2' />
-    
+
                 <ProjectConfigurationDescription Include='Number=$(Number)' />
                 <ProjectConfigurationDescription Include='TargetFramework=$(TargetFramework)' />
             </ItemGroup>
@@ -314,8 +316,8 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
 
             p.Build().ShouldBeFalse();
             string output = sc.ToString();
-            output.ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + ":: Number=1 TargetFramework=netcoreapp2.1]");
-            output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + ":: Number=2 TargetFramework=netcoreapp2.1]");
+            output.ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + "::Number=1 TargetFramework=netcoreapp2.1]");
+            output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2 TargetFramework=netcoreapp2.1]");
         }
 
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6518")]
@@ -1205,7 +1207,7 @@ public void SingleLineFormatNoop()
 
             string ss = cl.IndentString(s, 0);
 
-            //should be a no-op
+            // should be a no-op
             ss.ShouldBe($"foo{Environment.NewLine}");
         }
 
@@ -1219,7 +1221,7 @@ public void MultilineFormatWindowsLineEndings()
 
             string ss = cl.IndentString(s, 4);
 
-            //should convert lines to system format
+            // should convert lines to system format
             ss.ShouldBe($"    foo{Environment.NewLine}    bar{Environment.NewLine}    baz{Environment.NewLine}    {Environment.NewLine}");
         }
 
@@ -1231,7 +1233,7 @@ public void MultilineFormatUnixLineEndings()
 
             string ss = cl.IndentString(s, 0);
 
-            //should convert lines to system format
+            // should convert lines to system format
             ss.ShouldBe($"foo{Environment.NewLine}bar{Environment.NewLine}baz{Environment.NewLine}{Environment.NewLine}");
         }
 
@@ -1245,7 +1247,7 @@ public void MultilineFormatMixedLineEndings()
 
             string ss = cl.IndentString(s, 0);
 
-            //should convert lines to system format
+            // should convert lines to system format
             ss.ShouldBe($"foo{Environment.NewLine}{Environment.NewLine}bar{Environment.NewLine}baz{Environment.NewLine}{Environment.NewLine}{Environment.NewLine}jazz{Environment.NewLine}razz{Environment.NewLine}{Environment.NewLine}matazz{Environment.NewLine}end{Environment.NewLine}");
         }
 
@@ -1260,7 +1262,7 @@ public void NestedProjectMinimal()
 
             es.Consume(new BuildStartedEventArgs("bs", null));
 
-            //Clear time dependent build started message
+            // Clear time dependent build started message
             sc.Clear();
 
             es.Consume(new ProjectStartedEventArgs("ps1", null, "fname1", "", null, null));
@@ -1301,7 +1303,7 @@ public void NestedProjectNormal()
             es.Consume(new BuildStartedEventArgs("bs", null));
 
 
-            //Clear time dependent build started message
+            // Clear time dependent build started message
             sc.Clear();
 
             es.Consume(new ProjectStartedEventArgs("ps1", null, "fname1", "", null, null));
@@ -1431,10 +1433,10 @@ private void WriteAndValidateProperties(BaseConsoleLogger cl, SimulatedConsole s
             string prop1;
             string prop2;
             string prop3;
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                var propertyList = ((SerialConsoleLogger)cl).ExtractPropertyList(properties);
-                ((SerialConsoleLogger)cl).WriteProperties(propertyList);
+                var propertyList = scl.ExtractPropertyList(properties);
+                scl.WriteProperties(propertyList);
                 prop1 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop1", "val1");
                 prop2 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop2", "val2");
                 prop3 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "pro(p3)", "va;%3b;l3");
@@ -1686,10 +1688,10 @@ private void WriteAndValidateItems(BaseConsoleLogger cl, SimulatedConsole sc, bo
             string item3spec;
             string item3metadatum = string.Empty;
 
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                ((SerialConsoleLogger)cl).WriteItems(itemList);
+                SortedList itemList = scl.ExtractItemList(items);
+                scl.WriteItems(itemList);
                 item1spec = "spec" + Environment.NewLine;
                 item2spec = "spec2" + Environment.NewLine;
                 item3spec = "(spec;3" + Environment.NewLine;
@@ -1768,10 +1770,10 @@ public void WriteItemsEmptyList()
                     cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
                 }
 
-                if (cl is SerialConsoleLogger)
+                if (cl is SerialConsoleLogger scl)
                 {
-                    SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                    ((SerialConsoleLogger)cl).WriteItems(itemList);
+                    SortedList itemList = scl.ExtractItemList(items);
+                    scl.WriteItems(itemList);
                 }
                 else
                 {
@@ -1939,7 +1941,7 @@ public void ResetConsoleLoggerStateTestBasic()
         {
             // Create an event source
             EventSourceSink es = new EventSourceSink();
-            //Create a simulated console
+            // Create a simulated console
             SimulatedConsole sc = new SimulatedConsole();
 
             // error and warning string for 1 error and 1 warning
@@ -2029,7 +2031,7 @@ public void ResetConsoleLoggerState_Initialize()
         {
             // Create an event source
             EventSourceSink es = new EventSourceSink();
-            //Create a simulated console
+            // Create a simulated console
             SimulatedConsole sc = new SimulatedConsole();
 
             // error and warning string for 1 error and 1 warning
@@ -2119,7 +2121,7 @@ public void ResetConsoleLoggerState_PerformanceCounters()
             for (int i = 1; i <= 2; i++)
             {
                 EventSourceSink es = new EventSourceSink();
-                //Create a simulated console
+                // Create a simulated console
                 SimulatedConsole sc = new SimulatedConsole();
                 // Create a ConsoleLogger with Normal verbosity
                 ConsoleLogger L = new ConsoleLogger(LoggerVerbosity.Normal, sc.Write, sc.SetColor, sc.ResetColor);
@@ -2135,7 +2137,7 @@ public void ResetConsoleLoggerState_PerformanceCounters()
 
                 // BuildStarted Event
                 es.Consume(new BuildStartedEventArgs("bs", null));
-                //Project Started Event
+                // Project Started Event
                 ProjectStartedEventArgs project1Started = new ProjectStartedEventArgs(1, null, null, "p", "t", null, null, new BuildEventContext(BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId));
                 project1Started.BuildEventContext = new BuildEventContext(1, 1, 1, 1);
                 es.Consume(project1Started);
@@ -2164,7 +2166,7 @@ public void ResetConsoleLoggerState_PerformanceCounters()
                 es.Consume(targetFinished1);
 
                 ProjectStartedEventArgs project2Started = new ProjectStartedEventArgs(2, null, null, "p2", "t2", null, null, project1Started.BuildEventContext);
-                //Project Started Event
+                // Project Started Event
                 project2Started.BuildEventContext = new BuildEventContext(2, 2, 2, 2);
                 es.Consume(project2Started);
                 TargetStartedEventArgs targetStarted2 = new TargetStartedEventArgs(null, null, "t2", null, null);
@@ -2244,7 +2246,7 @@ public void ResetConsoleLoggerState_PerformanceCounters()
         public void DeferredMessages()
         {
             EventSourceSink es = new EventSourceSink();
-            //Create a simulated console
+            // Create a simulated console
             SimulatedConsole sc = new SimulatedConsole();
             // Create a ConsoleLogger with Detailed verbosity
             ConsoleLogger L = new ConsoleLogger(LoggerVerbosity.Detailed, sc.Write, sc.SetColor, sc.ResetColor);
@@ -2296,11 +2298,11 @@ public void VerifyMPLoggerSwitch()
             for (int i = 0; i < 2; i++)
             {
                 EventSourceSink es = new EventSourceSink();
-                //Create a simulated console
+                // Create a simulated console
                 SimulatedConsole sc = new SimulatedConsole();
                 // Create a ConsoleLogger with Normal verbosity
                 ConsoleLogger L = new ConsoleLogger(LoggerVerbosity.Normal, sc.Write, sc.SetColor, sc.ResetColor);
-                //Make sure the MPLogger switch will property work on both Initialize methods
+                // Make sure the MPLogger switch will property work on both Initialize methods
                 L.Parameters = "EnableMPLogging";
                 if (i == 0)
                 {
@@ -2335,7 +2337,7 @@ public void VerifyMPLoggerSwitch()
         public void TestPrintTargetNamePerMessage()
         {
             EventSourceSink es = new EventSourceSink();
-            //Create a simulated console
+            // Create a simulated console
             SimulatedConsole sc = new SimulatedConsole();
             // Create a ConsoleLogger with Normal verbosity
             ConsoleLogger L = new ConsoleLogger(LoggerVerbosity.Normal, sc.Write, sc.SetColor, sc.ResetColor);
@@ -2389,7 +2391,7 @@ public void TestNewLineAfterProjectFinished()
 
 
                 EventSourceSink es = new EventSourceSink();
-                //Create a simulated console
+                // Create a simulated console
                 SimulatedConsole sc = new SimulatedConsole();
                 ConsoleLogger L = new ConsoleLogger(LoggerVerbosity.Normal, sc.Write, sc.SetColor, sc.ResetColor);
 
diff --git a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
index b0227c062a0..8c5db6c2e03 100644
--- a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
+++ b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using Microsoft.Build.BackEnd.Logging;
 using Shouldly;
@@ -21,7 +20,7 @@ public void IndentBiggerThanBuffer_IndentedAndNotAligned(string input, bool alig
             string indent = "    ";
             var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: aligned);
 
-            string output = aligner.AlignConsoleOutput(message:input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
+            string output = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: false, prefixWidth: indent.Length);
 
             output.ShouldBe(indent + input + Environment.NewLine);
         }
@@ -301,67 +300,67 @@ public void TabsMakesItJustOverLimit_IndentAndAlign(string prefix, string input,
         }
 
         [Theory]
-        //+----+----+---+---+---+---+---+---+
-        //| 1  | 2  | 3 | 4 | 5 | 6 | 7 | 8 |
-        //+----+----+---+---+---+---+---+---+
-        //| \t | .  | . | . | . | . | . | . |
-        //+----+----+---+---+---+---+---+---+
-        //| 1  |    |   |   |   |   |   |   |
-        //+----+----+---+---+---+---+---+---+
-        //| a  | \t | . | . | . | . | . | . |
-        //+----+----+---+---+---+---+---+---+
-        //| b  |    |   |   |   |   |   |   |
-        //+----+----+---+---+---+---+---+---+
+        // +----+----+---+---+---+---+---+---+
+        // | 1  | 2  | 3 | 4 | 5 | 6 | 7 | 8 |
+        // +----+----+---+---+---+---+---+---+
+        // | \t | .  | . | . | . | . | . | . |
+        // +----+----+---+---+---+---+---+---+
+        // | 1  |    |   |   |   |   |   |   |
+        // +----+----+---+---+---+---+---+---+
+        // | a  | \t | . | . | . | . | . | . |
+        // +----+----+---+---+---+---+---+---+
+        // | b  |    |   |   |   |   |   |   |
+        // +----+----+---+---+---+---+---+---+
         [InlineData("", "\t1\na\tb", "\t\n1\na\t\nb\n",  8, false)]
-        //+---+---+---+----+---+---+---+---+----+
-        //| 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  |
-        //+---+---+---+----+---+---+---+---+----+
-        //| 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | \t |
-        //+---+---+---+----+---+---+---+---+----+
-        //| a | b | c |    |   |   |   |   |    |
-        //+---+---+---+----+---+---+---+---+----+
-        //| d | e | f | \t | . | . | . | . | g  |
-        //+---+---+---+----+---+---+---+---+----+
+        // +---+---+---+----+---+---+---+---+----+
+        // | 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  |
+        // +---+---+---+----+---+---+---+---+----+
+        // | 1 | 2 | 3 | 4  | 5 | 6 | 7 | 8 | \t |
+        // +---+---+---+----+---+---+---+---+----+
+        // | a | b | c |    |   |   |   |   |    |
+        // +---+---+---+----+---+---+---+---+----+
+        // | d | e | f | \t | . | . | . | . | g  |
+        // +---+---+---+----+---+---+---+---+----+
         [InlineData("", "12345678\tabc\ndef\tg", "12345678\t\nabc\ndef\tg\n", 9, false)]
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| 1  | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| \t | . | . | .  | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | a  |
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| b  | c |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| d  | e | f | \t | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| h  | i |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | 1  | 2 | 3 | 4  | 5 | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | \t | . | . | .  | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | a  |
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | b  | c |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | d  | e | f | \t | . | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | h  | i |   |    |   |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +----+---+---+----+---+---+---+---+----+----+----+----+----+----+----+----+----+
         [InlineData("", "\t\tabc\ndef\t\tghi", "\t\ta\nbc\ndef\t\tg\nhi\n", 17, false)]
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| 1 | 2 | 3  | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | a | \t | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | c |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | d | e  | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | h | i  | 5 | 6  | 7 | 8 | 9  | 0 | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | 9 |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | 1 | 2 | 3  | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | a | \t | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | c |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | d | e  | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | h | i  | 5 | 6  | 7 | 8 | 9  | 0 | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | 9 |    |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +---+---+----+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
         [InlineData(" ", "a\t\tbc\ndef\t\tghi567890123456789", " a\t\tb\n c\n def\t\tg\n hi56789012345678\n 9\n", 17, false)]
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| 1 | 2  | 3 | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| a | \t | . | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | c  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | d  | e | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | h  | i | 5 | 6  | 7 | 8 | 9 | 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
-        //| _ | 9  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
-        //+---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | 1 | 2  | 3 | 4 | 5  | 6 | 7 | 8 | 9  | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | a | \t | . | . | .  | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | b  |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | c  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | d  | e | f | \t | . | . | . | \t | .  | .  | .  | .  | .  | .  | .  | g  |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | h  | i | 5 | 6  | 7 | 8 | 9 | 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
+        // | _ | 9  |   |   |    |   |   |   |    |    |    |    |    |    |    |    |    |
+        // +---+----+---+---+----+---+---+---+----+----+----+----+----+----+----+----+----+
         [InlineData(" ", "a\t\tbc\ndef\t\tghi567890123456789", "a\t\tb\n c\n def\t\tg\n hi56789012345678\n 9\n", 17, true)]
         public void MultiLinesOverLimit_IndentAndAlign(string prefix, string input, string expected, int bufferWidthWithoutNewLine, bool prefixAlreadyWritten)
         {
diff --git a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
index ae23198472c..1c797174b5c 100644
--- a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     /// <summary>
@@ -341,8 +343,6 @@ public void LocationStringsMedleyReadOnlyLoad()
             Helpers.VerifyAssertLineByLine(readWriteLoadLocations, readOnlyLoadLocations);
         }
 
-        // Without save to file, this becomes identical to SaveReadOnly4
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Save read only fails
         /// </summary>
@@ -358,7 +358,6 @@ public void SaveReadOnly1()
             }
            );
         }
-#endif
 
         /// <summary>
         /// Save read only fails
@@ -369,17 +368,7 @@ public void SaveReadOnly1()
         public void SaveReadOnly2()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings {DtdProcessing = DtdProcessing.Ignore}))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             Assert.Throws<InvalidOperationException>(() => {
                 doc.Save(new MemoryStream());
@@ -395,17 +384,7 @@ public void SaveReadOnly2()
         public void SaveReadOnly3()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             Assert.Throws<InvalidOperationException>(() =>
             {
@@ -422,17 +401,7 @@ public void SaveReadOnly3()
         public void SaveReadOnly4()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             using (XmlWriter wr = XmlWriter.Create(new FileStream(FileUtilities.GetTemporaryFile(), FileMode.Create)))
             {
@@ -455,17 +424,7 @@ private string GetLocations(string content, bool readOnly)
                 file = FileUtilities.GetTemporaryFile();
                 File.WriteAllText(file, content);
                 var doc = new XmlDocumentWithLocation(loadAsReadOnly: readOnly);
-#if FEATURE_XML_LOADPATH
                 doc.Load(file);
-#else
-                using (
-                    XmlReader xmlReader = XmlReader.Create(
-                        file,
-                        new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-                {
-                    doc.Load(xmlReader);
-                }
-#endif
                 Assert.Equal(readOnly, doc.IsReadOnly);
                 var allNodes = doc.SelectNodes("//*|//@*");
 
diff --git a/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
index 4450f83c458..0fcd05dc03b 100644
--- a/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -8,6 +8,8 @@
 using System.Linq;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     public class ProjectImportElement_Tests
diff --git a/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
index a7b25df1968..08b5820f23c 100644
--- a/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Construction;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     /// <summary>
@@ -67,7 +69,7 @@ public void ProjectLoadedPreservingCommentsAndWhiteSpaceIsNotReadOnly()
             {
                 // reset all hooks
                 XmlDocumentWithLocation.ClearReadOnlyFlags_UnitTestsOnly();
-                env.SetEnvironmentVariable("MSBUILDLOADALLFILESASREADONLY", null); //clear
+                env.SetEnvironmentVariable("MSBUILDLOADALLFILESASREADONLY", null); // clear
                 env.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", null); // clear
                 env.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", null); // clear
                 var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index 786305ab9c0..d2ab15a93eb 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -12,6 +12,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     public class SolutionFile_Tests
@@ -23,70 +25,6 @@ public SolutionFile_Tests(ITestOutputHelper testOutputHelper)
             TestOutputHelper = testOutputHelper;
         }
 
-        /// <summary>
-        /// Test that a solution filter file is parsed correctly, and it can accurately respond as to whether a project should be filtered out.
-        /// </summary>
-        [Fact]
-        public void ParseSolutionFilter()
-        {
-            using (TestEnvironment testEnvironment = TestEnvironment.Create())
-            {
-                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
-                TransientTestFolder src = testEnvironment.CreateFolder(Path.Combine(folder.Path, "src"), createFolder: true);
-                TransientTestFile microsoftBuild = testEnvironment.CreateFile(src, "Microsoft.Build.csproj");
-                TransientTestFile msbuild = testEnvironment.CreateFile(src, "MSBuild.csproj");
-                TransientTestFile commandLineUnitTests = testEnvironment.CreateFile(src, "Microsoft.Build.CommandLine.UnitTests.csproj");
-                TransientTestFile tasksUnitTests = testEnvironment.CreateFile(src, "Microsoft.Build.Tasks.UnitTests.csproj");
-                // The important part of this .sln is that it has references to each of the four projects we just created.
-                TransientTestFile sln = testEnvironment.CreateFile(folder, "Microsoft.Build.Dev.sln",
-                    @"
-                    Microsoft Visual Studio Solution File, Format Version 12.00
-                    # Visual Studio 15
-                    VisualStudioVersion = 15.0.27004.2009
-                    MinimumVisualStudioVersion = 10.0.40219.1
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build"", """ + Path.Combine("src", Path.GetFileName(microsoftBuild.Path)) + @""", ""{69BE05E2-CBDA-4D27-9733-44E12B0F5627}""
-                    EndProject
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""MSBuild"", """ + Path.Combine("src", Path.GetFileName(msbuild.Path)) + @""", ""{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}""
-                    EndProject
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build.CommandLine.UnitTests"", """ + Path.Combine("src", Path.GetFileName(commandLineUnitTests.Path)) + @""", ""{0ADDBC02-0076-4159-B351-2BF33FAA46B2}""
-                    EndProject
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build.Tasks.UnitTests"", """ + Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)) + @""", ""{CF999BDE-02B3-431B-95E6-E88D621D9CBF}""
-                    EndProject
-                    Global
-                        GlobalSection(SolutionConfigurationPlatforms) = preSolution
-                        EndGlobalSection
-                        GlobalSection(ProjectConfigurationPlatforms) = postSolution
-                    EndGlobalSection
-                    GlobalSection(SolutionProperties) = preSolution
-                        HideSolutionNode = FALSE
-                    EndGlobalSection
-                    GlobalSection(ExtensibilityGlobals) = postSolution
-                    EndGlobalSection
-                    EndGlobal
-                    ");
-                TransientTestFile slnf = testEnvironment.CreateFile(folder, "Dev.slnf",
-                    @"
-                    {
-                      ""solution"": {
-                        ""path"": """ + sln.Path.Replace("\\", "\\\\") + @""",
-                        ""projects"": [
-                          """ + Path.Combine("src", Path.GetFileName(microsoftBuild.Path)!).Replace("\\", "\\\\") + @""",
-                          """ + Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)!).Replace("\\", "\\\\") + @"""
-                        ]
-                        }
-                    }");
-                SolutionFile sp = SolutionFile.Parse(slnf.Path);
-                sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(microsoftBuild.Path)!)).ShouldBeTrue();
-                sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)!)).ShouldBeTrue();
-
-                
-                (sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(commandLineUnitTests.Path)!))
-                 || sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(msbuild.Path)!))
-                 || sp.ProjectShouldBuild(Path.Combine("src", "notAProject.csproj")))
-                    .ShouldBeFalse();
-            }
-        }
-
         /// <summary>
         /// Test just the most basic, plain vanilla first project line.
         /// </summary>
@@ -237,7 +175,7 @@ public void ParseEtpProject()
                             EndProjectSection
                         EndProject";
                 SolutionFile solution = ParseSolutionHelper(solutionFileContents);
-                //Project should get added to the solution
+                // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"ClassLibrary2.csproj");
             }
@@ -427,7 +365,7 @@ public void ParseNestedEtpProjectSingleLevel()
                         EndProject";
                 SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
-                //Project should get added to the solution
+                // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"someproj2.etp");
                 solution.ProjectsInOrder[2].RelativePath.ShouldBe(@"ClassLibrary1.csproj");
@@ -628,7 +566,7 @@ public void ParseNestedEtpProjectMultipleLevel()
                         </References>
                     </GENERAL>
                 </EFPROJECT>";
-                //Create the directory for the third project
+                // Create the directory for the third project
                 Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), "ETPProjUpgradeTest"));
                 File.WriteAllText(proj3Path, etpProjContent);
 
@@ -642,7 +580,7 @@ public void ParseNestedEtpProjectMultipleLevel()
                         EndProject";
                 SolutionFile solution = ParseSolutionHelper(solutionFileContents);
 
-                //Project should get added to the solution
+                // Project should get added to the solution
                 solution.ProjectsInOrder[0].RelativePath.ShouldBe(@"someproj.etp");
                 solution.ProjectsInOrder[1].RelativePath.ShouldBe(@"someproj2.etp");
                 solution.ProjectsInOrder[2].RelativePath.ShouldBe(@"ETPProjUpgradeTest\someproj3.etp");
diff --git a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
new file mode 100644
index 00000000000..400c3f6af52
--- /dev/null
+++ b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
@@ -0,0 +1,287 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Graph;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+
+namespace Microsoft.Build.Engine.UnitTests.Construction
+{
+    public class SolutionFilter_Tests : IDisposable
+    {
+        private readonly ITestOutputHelper output;
+
+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);
+
+        public SolutionFilter_Tests(ITestOutputHelper output)
+        {
+            this.output = output;
+        }
+
+        public void Dispose()
+        {
+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();
+        }
+
+        /// <summary>
+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.
+        /// </summary>
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void SolutionFilterFiltersProjects(bool graphBuild)
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, "ClassLibrary"), createFolder: true);
+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, "ClassLibrary"), createFolder: true);
+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, "ClassLibrary.csproj",
+                    @"<Project>
+                  <Target Name=""ClassLibraryTarget"">
+                      <Message Text=""ClassLibraryBuilt""/>
+                  </Target>
+                  </Project>
+                    ");
+
+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, "SimpleProject"), createFolder: true);
+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, "SimpleProject"), createFolder: true);
+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, "SimpleProject.csproj",
+                    @"<Project DefaultTargets=""SimpleProjectTarget"">
+                  <Target Name=""SimpleProjectTarget"">
+                      <Message Text=""SimpleProjectBuilt""/>
+                  </Target>
+                  </Project>
+                    ");
+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.
+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, "SimpleProject.sln",
+                    @"
+                    Microsoft Visual Studio Solution File, Format Version 12.00
+                    # Visual Studio Version 16
+                    VisualStudioVersion = 16.0.29326.124
+                    MinimumVisualStudioVersion = 10.0.40219.1
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""SimpleProject"", ""SimpleProject\SimpleProject.csproj"", ""{79B5EBA6-5D27-4976-BC31-14422245A59A}""
+                    EndProject
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""ClassLibrary"", ""..\ClassLibrary\ClassLibrary\ClassLibrary.csproj"", ""{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}""
+                    EndProject
+                    Global
+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution
+                            Debug|Any CPU = Debug|Any CPU
+                            Release|Any CPU = Release|Any CPU
+                            EndGlobalSection
+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution
+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU
+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU
+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU
+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU
+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU
+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU
+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU
+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU
+                        EndGlobalSection
+                        GlobalSection(SolutionProperties) = preSolution
+                            HideSolutionNode = FALSE
+                        EndGlobalSection
+                        GlobalSection(ExtensibilityGlobals) = postSolution
+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}
+                        EndGlobalSection
+                    EndGlobal
+                ");
+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, "solutionFilter.slnf",
+                    @"
+                {
+                  ""solution"": {
+                    // I'm a comment
+                    ""path"": "".\\SimpleProject\\SimpleProject.sln"",
+                    ""projects"": [
+                    /* ""..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj"", */
+                      ""SimpleProject\\SimpleProject.csproj"",
+                    ]
+                    }
+                }
+                ");
+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));
+                if (graphBuild)
+                {
+                    ProjectCollection projectCollection = testEnvironment.CreateProjectCollection().Collection;
+                    MockLogger logger = new();
+                    projectCollection.RegisterLogger(logger);
+                    ProjectGraphEntryPoint entryPoint = new(filterFile.Path, new Dictionary<string, string>());
+
+                    // We only need to construct the graph, since that tells us what would build if we were to build it.
+                    ProjectGraph graphFromSolution = new(entryPoint, projectCollection);
+                    logger.AssertNoErrors();
+                    graphFromSolution.ProjectNodes.ShouldHaveSingleItem();
+                    graphFromSolution.ProjectNodes.Single().ProjectInstance.ProjectFileLocation.LocationString.ShouldBe(simpleProject.Path);
+                }
+                else
+                {
+                    SolutionFile solution = SolutionFile.Parse(filterFile.Path);
+                    ILoggingService mockLogger = CreateMockLoggingService();
+                    ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);
+                    instances.ShouldHaveSingleItem();
+
+                    // Check that dependencies are built, and non-dependencies in the .sln are not.
+                    MockLogger logger = new(output);
+                    instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();
+                    logger.AssertLogContains(new string[] { "SimpleProjectBuilt" });
+                    logger.AssertLogDoesntContain("ClassLibraryBuilt");
+                }
+            }
+        }
+
+        [Theory]
+        [InlineData(@"
+                {
+                  ""solution"": {
+                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
+                    ""projects2"": [
+                      ""src\\Build\\Microsoft.Build.csproj"",
+                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
+                      ""src\\MSBuild\\MSBuild.csproj"",
+                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
+                    ]
+                    }
+                }
+                ", "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(@"
+                [{
+                  ""solution"": {
+                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
+                    ""projects"": [
+                      ""src\\Build\\Microsoft.Build.csproj"",
+                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
+                      ""src\\MSBuild\\MSBuild.csproj"",
+                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
+                    ]
+                    }
+                }]
+                ", "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(@"
+                {
+                  ""solution"": {
+                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
+                    ""projects"": [
+                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
+                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
+                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
+                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
+                    ]
+                    }
+                }
+                ", "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(@"
+                {
+                  ""solution"": {
+                    ""path"": ""C:\\notAPath2\\MSBuild.Dev.sln"",
+                    ""projects"": [
+                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
+                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
+                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
+                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
+                    ]
+                    }
+                }
+                ", "MSBuild.SolutionFilterMissingSolutionError")]
+        public void InvalidSolutionFilters(string slnfValue, string exceptionReason)
+        {
+            Assert.False(File.Exists("C:\\notAPath2\\MSBuild.Dev.sln"));
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFile sln = testEnvironment.CreateFile(folder, "Dev.sln");
+                TransientTestFile slnf = testEnvironment.CreateFile(folder, "Dev.slnf", slnfValue.Replace(@"C:\\notAPath\\MSBuild.Dev.sln", sln.Path.Replace("\\", "\\\\")));
+                InvalidProjectFileException e = Should.Throw<InvalidProjectFileException>(() => SolutionFile.Parse(slnf.Path));
+                e.HelpKeyword.ShouldBe(exceptionReason);
+            }
+        }
+
+        /// <summary>
+        /// Test that a solution filter file is parsed correctly, and it can accurately respond as to whether a project should be filtered out.
+        /// </summary>
+        [Fact]
+        public void ParseSolutionFilter()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder src = testEnvironment.CreateFolder(Path.Combine(folder.Path, "src"), createFolder: true);
+                TransientTestFile microsoftBuild = testEnvironment.CreateFile(src, "Microsoft.Build.csproj");
+                TransientTestFile msbuild = testEnvironment.CreateFile(src, "MSBuild.csproj");
+                TransientTestFile commandLineUnitTests = testEnvironment.CreateFile(src, "Microsoft.Build.CommandLine.UnitTests.csproj");
+                TransientTestFile tasksUnitTests = testEnvironment.CreateFile(src, "Microsoft.Build.Tasks.UnitTests.csproj");
+                // The important part of this .sln is that it has references to each of the four projects we just created.
+                TransientTestFile sln = testEnvironment.CreateFile(folder, "Microsoft.Build.Dev.sln",
+                    @"
+                    Microsoft Visual Studio Solution File, Format Version 12.00
+                    # Visual Studio 15
+                    VisualStudioVersion = 15.0.27004.2009
+                    MinimumVisualStudioVersion = 10.0.40219.1
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build"", """ + Path.Combine("src", Path.GetFileName(microsoftBuild.Path)) + @""", ""{69BE05E2-CBDA-4D27-9733-44E12B0F5627}""
+                    EndProject
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""MSBuild"", """ + Path.Combine("src", Path.GetFileName(msbuild.Path)) + @""", ""{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}""
+                    EndProject
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build.CommandLine.UnitTests"", """ + Path.Combine("src", Path.GetFileName(commandLineUnitTests.Path)) + @""", ""{0ADDBC02-0076-4159-B351-2BF33FAA46B2}""
+                    EndProject
+                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""Microsoft.Build.Tasks.UnitTests"", """ + Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)) + @""", ""{CF999BDE-02B3-431B-95E6-E88D621D9CBF}""
+                    EndProject
+                    Global
+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution
+                        EndGlobalSection
+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution
+                    EndGlobalSection
+                    GlobalSection(SolutionProperties) = preSolution
+                        HideSolutionNode = FALSE
+                    EndGlobalSection
+                    GlobalSection(ExtensibilityGlobals) = postSolution
+                    EndGlobalSection
+                    EndGlobal
+                    ");
+                TransientTestFile slnf = testEnvironment.CreateFile(folder, "Dev.slnf",
+                    @"
+                    {
+                      ""solution"": {
+                        ""path"": """ + sln.Path.Replace("\\", "\\\\") + @""",
+                        ""projects"": [
+                          """ + Path.Combine("src", Path.GetFileName(microsoftBuild.Path)!).Replace("\\", "\\\\") + @""",
+                          """ + Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)!).Replace("\\", "\\\\") + @"""
+                        ]
+                        }
+                    }");
+                SolutionFile sp = SolutionFile.Parse(slnf.Path);
+                sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(microsoftBuild.Path)!)).ShouldBeTrue();
+                sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(tasksUnitTests.Path)!)).ShouldBeTrue();
+
+
+                (sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(commandLineUnitTests.Path)!))
+                 || sp.ProjectShouldBuild(Path.Combine("src", Path.GetFileName(msbuild.Path)!))
+                 || sp.ProjectShouldBuild(Path.Combine("src", "notAProject.csproj")))
+                    .ShouldBeFalse();
+            }
+        }
+
+        private ILoggingService CreateMockLoggingService()
+        {
+            ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 0);
+            MockLogger logger = new(output);
+            loggingService.RegisterLogger(logger);
+            return loggingService;
+        }
+    }
+}
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 232aa1366ef..2b50c83925d 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -30,6 +30,8 @@
 using Shouldly;
 using Microsoft.Build.UnitTests.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     public class SolutionProjectGenerator_Tests : IDisposable
@@ -81,100 +83,6 @@ public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)
             }
         }
 
-        /// <summary>
-        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.
-        /// </summary>
-        [Fact]
-        public void SolutionFilterFiltersProjects()
-        {
-            using (TestEnvironment testEnvironment = TestEnvironment.Create())
-            {
-                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);              
-                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, "ClassLibrary"), createFolder: true);
-                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, "ClassLibrary"), createFolder: true);
-                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, "ClassLibrary.csproj",
-                    @"<Project>
-                  <Target Name=""ClassLibraryTarget"">
-                      <Message Text=""ClassLibraryBuilt""/>
-                  </Target>
-                  </Project>
-                    ");
-
-                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, "SimpleProject"), createFolder: true);
-                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, "SimpleProject"), createFolder: true);
-                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, "SimpleProject.csproj",
-                    @"<Project DefaultTargets=""SimpleProjectTarget"">
-                  <Target Name=""SimpleProjectTarget"">
-                      <Message Text=""SimpleProjectBuilt""/>
-                  </Target>
-                  </Project>
-                    ");
-
-                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.
-                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, "SimpleProject.sln",
-                    @"
-                    Microsoft Visual Studio Solution File, Format Version 12.00
-                    # Visual Studio Version 16
-                    VisualStudioVersion = 16.0.29326.124
-                    MinimumVisualStudioVersion = 10.0.40219.1
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""SimpleProject"", ""SimpleProject\SimpleProject.csproj"", ""{79B5EBA6-5D27-4976-BC31-14422245A59A}""
-                    EndProject
-                    Project(""{9A19103F-16F7-4668-BE54-9A1E7A4F7556}"") = ""ClassLibrary"", ""..\ClassLibrary\ClassLibrary\ClassLibrary.csproj"", ""{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}""
-                    EndProject
-                    Global
-                        GlobalSection(SolutionConfigurationPlatforms) = preSolution
-                            Debug|Any CPU = Debug|Any CPU
-                            Release|Any CPU = Release|Any CPU
-                            EndGlobalSection
-                        GlobalSection(ProjectConfigurationPlatforms) = postSolution
-                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU
-                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU
-                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU
-                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU
-                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU
-                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU
-                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU
-                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU
-                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU
-                        EndGlobalSection
-                        GlobalSection(SolutionProperties) = preSolution
-                            HideSolutionNode = FALSE
-                        EndGlobalSection
-                        GlobalSection(ExtensibilityGlobals) = postSolution
-                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}
-                        EndGlobalSection
-                    EndGlobal
-                ");
-                TransientTestFile filterFile = testEnvironment.CreateFile(folder, "solutionFilter.slnf",
-                    @"
-                {
-                  ""solution"": {
-                    // I'm a comment
-                    ""path"": "".\\SimpleProject\\SimpleProject.sln"",
-                    ""projects"": [
-                    /* ""..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj"", */
-                      ""SimpleProject\\SimpleProject.csproj"",
-                    ]
-                    }
-                }
-                ");
-                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));
-                SolutionFile solution = SolutionFile.Parse(filterFile.Path);
-                ILoggingService mockLogger = CreateMockLoggingService();
-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);
-                instances.ShouldHaveSingleItem();
-
-                // Check that dependencies are built, and non-dependencies in the .sln are not.
-                MockLogger logger = new MockLogger(output);
-                instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();
-                logger.AssertLogContains(new string[] { "SimpleProjectBuilt" });
-                logger.AssertLogDoesntContain("ClassLibraryBuilt");
-            }
-        }
-
         [Fact]
         public void BuildProjectAsTarget()
         {
@@ -341,8 +249,8 @@ public void EmitToolsVersionAttributeToInMemoryProject10()
         }
 
         /// <summary>
-        /// Test to make sure that if the solution file version doesn't map to a sub-toolset version, we won't try 
-        /// to force it to be used.  
+        /// Test to make sure that if the solution file version doesn't map to a sub-toolset version, we won't try
+        /// to force it to be used.
         /// </summary>
         [Fact(Skip = "Needs investigation")]
         public void DefaultSubToolsetIfSolutionVersionSubToolsetDoesntExist()
@@ -383,8 +291,8 @@ public void DefaultSubToolsetIfSolutionVersionSubToolsetDoesntExist()
         }
 
         /// <summary>
-        /// Test to make sure that if the solution version corresponds to an existing sub-toolset version, 
-        /// barring other factors that might override, the sub-toolset will be based on the solution version. 
+        /// Test to make sure that if the solution version corresponds to an existing sub-toolset version,
+        /// barring other factors that might override, the sub-toolset will be based on the solution version.
         /// </summary>
         [Fact]
         public void SubToolsetSetBySolutionVersion()
@@ -419,7 +327,7 @@ public void SubToolsetSetBySolutionVersion()
         }
 
         /// <summary>
-        /// Test to make sure that even if the solution version corresponds to an existing sub-toolset version, 
+        /// Test to make sure that even if the solution version corresponds to an existing sub-toolset version,
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -595,7 +503,7 @@ public void SolutionPassesSubToolsetToChildProjects2()
 
         /// <summary>
         /// Test to make sure that, when we're not TV 4.0 -- which even for Dev11 solutions we are not by default -- that we
-        /// do not pass VisualStudioVersion down to the child projects.  
+        /// do not pass VisualStudioVersion down to the child projects.
         /// </summary>
         [Fact(Skip = "Needs investigation")]
         public void SolutionDoesntPassSubToolsetToChildProjects()
@@ -604,7 +512,7 @@ public void SolutionDoesntPassSubToolsetToChildProjects()
             {
                 string classLibraryContents =
                     @"
-                        <Project ToolsVersion=""4.0"" DefaultTargets=""Build"" xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                        <Project ToolsVersion=""4.0"" DefaultTargets=""Build"">
                             <Target Name='Build'>
                                 <Message Text='.[$(VisualStudioVersion)].' />
                                 <Message Text='.[[$(MSBuildToolsVersion)]].' />
@@ -660,7 +568,7 @@ public void SolutionDoesntPassSubToolsetToChildProjects()
         }
 
         /// <summary>
-        /// Verify that we throw the appropriate error if the solution declares a dependency 
+        /// Verify that we throw the appropriate error if the solution declares a dependency
         /// on a project that doesn't exist.
         /// </summary>
         [Fact]
@@ -1284,7 +1192,7 @@ public void ToolsVersionOverrideShouldBeSpecifiedOnMSBuildTaskInvocations()
 
 #if FEATURE_MULTIPLE_TOOLSETS
         /// <summary>
-        /// Make sure that whatever the solution ToolsVersion is, it gets mapped to all its metaprojs, too. 
+        /// Make sure that whatever the solution ToolsVersion is, it gets mapped to all its metaprojs, too.
         /// </summary>
         [Fact]
         public void SolutionWithDependenciesHasCorrectToolsVersionInMetaprojs()
@@ -1331,22 +1239,22 @@ public void SolutionWithDependenciesHasCorrectToolsVersionInMetaprojs()
 
                 Assert.Equal(2, instances.Length);
 
-                // Solution metaproj 
+                // Solution metaproj
                 Assert.Equal(solutionToolsVersion, instances[0].ToolsVersion);
 
                 ICollection<ProjectItemInstance> projectReferences = instances[0].GetItems("ProjectReference");
 
                 foreach (ProjectItemInstance projectReference in projectReferences)
                 {
-                    // If this is the reference to the metaproj, its ToolsVersion metadata needs to match 
-                    // the solution ToolsVersion -- that's how the build knows which ToolsVersion to use. 
+                    // If this is the reference to the metaproj, its ToolsVersion metadata needs to match
+                    // the solution ToolsVersion -- that's how the build knows which ToolsVersion to use.
                     if (projectReference.EvaluatedInclude.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase))
                     {
                         Assert.Equal(solutionToolsVersion, projectReference.GetMetadataValue("ToolsVersion"));
                     }
                 }
 
-                // Project metaproj for project with dependencies 
+                // Project metaproj for project with dependencies
                 Assert.Equal(solutionToolsVersion, instances[1].ToolsVersion);
             }
         }
@@ -1385,7 +1293,7 @@ public void ToolsVersionOverrideCausesToolsetRedirect()
 
             try
             {
-                // SolutionProjectGenerator.Generate() is used at build-time, and creates evaluation- and 
+                // SolutionProjectGenerator.Generate() is used at build-time, and creates evaluation- and
                 // execution-model projects; as such it will throw if fed an explicitly invalid toolsversion
                 ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, "invalid", _buildEventContext, CreateMockLoggingService());
             }
@@ -1617,7 +1525,7 @@ public void VenusSolutionDefaultTargetFrameworkVersion()
             msbuildProject = CreateVenusSolutionProject("2.0");
             Assert.Equal("v2.0", msbuildProject.GetPropertyValue("TargetFrameworkVersion"));
 
-            // may be user defined 
+            // may be user defined
             IDictionary<string, string> globalProperties = new Dictionary<string, string>();
             globalProperties.Add("TargetFrameworkVersion", "userdefined");
             msbuildProject = CreateVenusSolutionProject(globalProperties);
@@ -1813,7 +1721,7 @@ public void SolutionGeneratorCanEmitSolutions()
         {
             string oldValueForMSBuildEmitSolution = Environment.GetEnvironmentVariable("MSBuildEmitSolution");
 
-            //  Clean up projects loaded by other tests
+            // Clean up projects loaded by other tests
             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();
 
             string solutionFileContents =
@@ -2007,7 +1915,7 @@ public void BadFrameworkMonkierExpectBuildToFail()
 
             try
             {
-                // Since we're creating our own BuildManager, we need to make sure that the default 
+                // Since we're creating our own BuildManager, we need to make sure that the default
                 // one has properly relinquished the inproc node
                 NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
                 nodeProviderInProc?.Dispose();
@@ -2024,7 +1932,7 @@ public void BadFrameworkMonkierExpectBuildToFail()
                 Dictionary<string, string> globalProperties = new Dictionary<string, string>();
                 globalProperties["Configuration"] = "Release";
 
-                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
                 BuildResult result = buildManager.Build(parameters, request);
                 Assert.Equal(BuildResultCode.Failure, result.OverallResult);
                 // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
@@ -2095,7 +2003,7 @@ public void BadFrameworkMonkierExpectBuildToFail2()
 
             try
             {
-                // Since we're creating our own BuildManager, we need to make sure that the default 
+                // Since we're creating our own BuildManager, we need to make sure that the default
                 // one has properly relinquished the inproc node
                 NodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;
                 nodeProviderInProc?.Dispose();
@@ -2112,7 +2020,7 @@ public void BadFrameworkMonkierExpectBuildToFail2()
                 Dictionary<string, string> globalProperties = new Dictionary<string, string>();
                 globalProperties["Configuration"] = "Release";
 
-                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
                 BuildResult result = buildManager.Build(parameters, request);
                 Assert.Equal(BuildResultCode.Failure, result.OverallResult);
                 // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
@@ -2443,7 +2351,7 @@ public void BeforeTargetsFromImportCanHookDynamicTarget()
                 projectInstance.Targets["MyTarget"].BeforeTargets.ShouldBe("DynamicTraversalTarget");
 
                 MockLogger mockLogger = new MockLogger(output);
-                projectInstance.Build(targetsToBuild, new List <ILogger> { mockLogger })
+                projectInstance.Build(targetsToBuild, new List<ILogger> { mockLogger })
                     .ShouldBeFalse("The solution build should have failed due to a missing project");
                 mockLogger.AssertLogContains("Message from MyTarget");
             }
@@ -2540,7 +2448,7 @@ public void DirectorySolutionPropsTest(string projectName, bool enable)
                 var solutionFile = SolutionFile.Parse(solutionFilePath);
 
                 ProjectInstance projectInstance = SolutionProjectGenerator.Generate(solutionFile, globalProperties, null, BuildEventContext.Invalid, CreateMockLoggingService(), new[] { "Build" }).FirstOrDefault();
-                
+
                 Assert.NotNull(projectInstance);
 
                 Assert.Equal(enable ? expectedPropertyValue : string.Empty, projectInstance.GetPropertyValue("PropertyA"));
@@ -2662,7 +2570,7 @@ private ILoggingService CreateMockLoggingService()
 
         /// <summary>
         /// Checks the provided project for a matching itemtype and include value.  If it
-        /// does not exist, asserts. 
+        /// does not exist, asserts.
         /// </summary>
         private void AssertProjectContainsItem(ProjectInstance msbuildProject, string itemType, string include)
         {
@@ -2681,7 +2589,7 @@ private void AssertProjectContainsItem(ProjectInstance msbuildProject, string it
         }
 
         /// <summary>
-        /// Counts the number of items with a particular itemtype in the provided project, and 
+        /// Counts the number of items with a particular itemtype in the provided project, and
         /// asserts if it doesn't match the provided count.
         /// </summary>
         private void AssertProjectItemNameCount(ProjectInstance msbuildProject, string itemType, int count)
diff --git a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
index 16878ee979c..703e0a5b7ee 100644
--- a/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/XmlReaderWithoutLocation_Tests.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Construction
 {
     public class XmlReaderWithoutLocation_Tests
@@ -155,7 +157,7 @@ public void CreateProjectWithoutLineInfo()
         {
             XmlReader reader = XmlReader.Create(new StringReader
                 (
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project>
                       <Target Name='foo'/>
                   </Project>"
                 ));
diff --git a/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
index b0699e3ab43..b1499384ed5 100644
--- a/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
@@ -7,6 +7,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Definition
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
index 55055c61a51..94626b132d4 100644
--- a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
@@ -16,6 +16,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
@@ -30,7 +32,7 @@ public class ItemDefinitionGroup_Tests
         public void ItemDefinitionGroupExistsInProject()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -51,7 +53,7 @@ public void ItemDefinitionGroupExistsInProject()
         public void MultipleItemDefinitionGroupExistsInProject()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -80,7 +82,7 @@ public void MultipleItemDefinitionGroupExistsInProject()
         public void EmptyItemsInheritValues()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -113,7 +115,7 @@ public void EmptyItemsInheritValues()
         public void ItemMetadataOverridesInheritedValues()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -158,7 +160,7 @@ public void ItemDefinitionDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -188,7 +190,7 @@ public void ItemDefinitionMetadataConditionDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -217,7 +219,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
             Assert.Throws<InvalidProjectFileException>(() =>
             {
                 Project p = new Project(XmlReader.Create(new StringReader(
-                @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemGroup>
                         <Compile Include='a.cs'>
                             <Foo>Bar</Foo>
@@ -245,7 +247,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
         public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First>1st</First>
@@ -283,7 +285,7 @@ public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         public void EmptyItemDefinitionGroup()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                     </ItemDefinitionGroup>
                     <ItemGroup>
@@ -300,7 +302,7 @@ public void EmptyItemDefinitionGroup()
         public void EmptyItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile />
                     </ItemDefinitionGroup>
@@ -321,7 +323,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinition()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -350,7 +352,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTarget()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -378,7 +380,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+   <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
       <CppCompile>
@@ -411,7 +413,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         public void ItemDefinitionGroupWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'!=''"">
                         <Compile>
                             <First>1st</First>
@@ -437,7 +439,7 @@ public void ItemDefinitionGroupWithFalseCondition()
         public void ItemDefinitionGroupWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'==''"">
                         <Compile>
                             <First>1st</First>
@@ -463,7 +465,7 @@ public void ItemDefinitionGroupWithTrueCondition()
         public void ItemDefinitionWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile  Condition=""'$(Foo)'!=''"">
                             <First>1st</First>
@@ -489,7 +491,7 @@ public void ItemDefinitionWithFalseCondition()
         public void ItemDefinitionWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile Condition=""'$(Foo)'==''"">
                             <First>1st</First>
@@ -515,7 +517,7 @@ public void ItemDefinitionWithTrueCondition()
         public void ItemDefinitionMetadataWithFalseCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First Condition=""'$(Foo)'!=''"">1st</First>
@@ -541,7 +543,7 @@ public void ItemDefinitionMetadataWithFalseCondition()
         public void ItemDefinitionMetadataWithTrueCondition()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
                             <First Condition=""'$(Foo)'==''"">1st</First>
@@ -567,7 +569,7 @@ public void ItemDefinitionMetadataWithTrueCondition()
         public void ItemDefinitionMetadataCopiedToTaskItem()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -602,7 +604,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem()
         public void ItemDefinitionMetadataCopiedToTaskItem2()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -640,7 +642,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem2()
         public void ItemDefinitionMetadataCopiedToTaskItem3()
         {
             Project p = new Project(XmlReader.Create(new StringReader(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
                         <MetaA>M-A(b)</MetaA>
@@ -683,7 +685,7 @@ public void BasicItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'/>
                   </ItemGroup>
@@ -691,7 +693,7 @@ public void BasicItemDefinitionInProject()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <CppCompile Include='b.cpp'/>
                   </ItemGroup>
@@ -710,7 +712,7 @@ public void EscapingInItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -718,7 +720,7 @@ public void EscapingInItemDefinitionInProject()
                     <i Condition=""'%24'=='$'"">
                       <m Condition=""'%24'=='$'"">%24(xyz)</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -735,7 +737,7 @@ public void ItemDefinitionForOtherItemType()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -743,7 +745,7 @@ public void ItemDefinitionForOtherItemType()
                     <j>
                       <m>m1</m>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -759,7 +761,7 @@ public void RedefinitionLastOneWins()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -768,13 +770,13 @@ public void RedefinitionLastOneWins()
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m>m2</m>
                       <o>o1</o>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)-%(i.n)-%(i.o)]""/>
                   </Target>
@@ -793,12 +795,12 @@ public void ItemExpressionInDefaultMetadataValueErrors()
                 // We don't allow item expressions on an ItemDefinitionGroup because there are no items when IDG is evaluated.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>@(x)</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
             ")));
                 p.Build("t", new ILogger[] { logger });
@@ -813,7 +815,7 @@ public void UnqualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 // We don't allow unqualified metadata on an ItemDefinitionGroup because we don't know what item type it refers to.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup Condition=""'%(m)'=='m1'""/>
                 </Project>
             ")));
@@ -830,7 +832,7 @@ public void QualifiedMetadataConditionOnItemDefinitionGroupErrors()
                 // We don't allow qualified metadata because it's not worth distinguishing from unqualified, when you can just move the condition to the child.
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup Condition=""'%(x.m)'=='m1'""/>
                 </Project>
             ")));
@@ -843,7 +845,7 @@ public void MetadataConditionOnItemDefinition()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                     <j Include='j1'/>
@@ -855,16 +857,16 @@ public void MetadataConditionOnItemDefinition()
                     <j>
                       <n>n1</n>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(m)'=='m1'"">
                       <m>m2</m>
                     </i>
                     <!-- verify j metadata is distinct -->
                     <j Condition=""'%(j.n)'=='n1' and '%(n)'=='n1'"">
-                      <n>n2</n>   
+                      <n>n2</n>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                     <Message Text=""[%(j.n)]""/>
@@ -881,7 +883,7 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -889,12 +891,12 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(i.m)'=='m1' and '%(m)'=='m1'"">
                       <m>m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -910,7 +912,7 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -918,12 +920,12 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(m)'=='m2' or '%(i.m)'!='m1'"">
                       <m>m3</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -939,7 +941,7 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -948,12 +950,12 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m Condition=""'%(m)'=='m1' and '%(n)'=='n1' and '%(i.m)'=='m1'"">m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -969,7 +971,7 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -978,7 +980,7 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i>
                       <m Condition=""'%(m)'=='m2' or !('%(n)'=='n1') or '%(i.m)' != 'm1'"">m3</m>
@@ -999,7 +1001,7 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1007,12 +1009,12 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemDefinitionGroup>
                     <i Condition=""'%(j.m)'=='' and '%(j.m)'!='x'"">
                       <m Condition=""'%(j.m)'=='' and '%(j.m)'!='x'"">m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)]""/>
                   </Target>
@@ -1025,8 +1027,8 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
 
         /// <summary>
         /// Make ItemDefinitionGroup inside a target produce a nice error.
-        /// It will normally produce an error due to the invalid child tag, but 
-        /// we want to error even if there's no child tag. This will make it 
+        /// It will normally produce an error due to the invalid child tag, but
+        /// we want to error even if there's no child tag. This will make it
         /// easier to support it inside targets in a future version.
         /// </summary>
         [Fact]
@@ -1036,7 +1038,7 @@ public void ItemDefinitionInTargetErrors()
             {
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <Target Name=""t"">
                     <ItemDefinitionGroup/>
                   </Target>
@@ -1054,7 +1056,7 @@ public void ItemDefinitionInTargetErrors()
         public void ItemDefinitionGroupTask()
         {
             MockLogger ml = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
-                    <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                    <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                         <UsingTask TaskName=""ItemDefinitionGroup"" AssemblyFile=""{0}""/>
                         <Target Name=""Build"">
                             <Microsoft.Build.UnitTests.Definition.ItemDefinitionGroup/>
@@ -1071,7 +1073,7 @@ public void MetadataOnItemWins()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
                       <Defines>RETAIL</Defines>
@@ -1082,7 +1084,7 @@ public void MetadataOnItemWins()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
@@ -1098,7 +1100,7 @@ public void MixtureOfItemAndDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
                       <WarningLevel>4</WarningLevel>
@@ -1108,7 +1110,7 @@ public void MixtureOfItemAndDefaultMetadata()
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.WarningLevel)]""/>
@@ -1125,7 +1127,7 @@ public void IntrinsicTaskModifyingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1133,7 +1135,7 @@ public void IntrinsicTaskModifyingDefaultMetadata()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i>
@@ -1154,7 +1156,7 @@ public void IntrinsicTaskConsumingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1162,7 +1164,7 @@ public void IntrinsicTaskConsumingDefaultMetadata()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i Condition=""'%(i.m)'=='m1'"">
@@ -1188,18 +1190,18 @@ public void DefinitionInImportedFile()
             {
                 importedFile = FileUtilities.GetTemporaryFile();
                 File.WriteAllText(importedFile, @"
-                <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project ToolsVersion='msbuilddefaulttoolsversion'>
                   <ItemDefinitionGroup>
                     <CppCompile>
                       <Defines>DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
             ");
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                    <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                    <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                       <ItemGroup>
-                        <CppCompile Include='a.cpp'/>                      
+                        <CppCompile Include='a.cpp'/>
                       </ItemGroup>
                       <Import Project='" + importedFile + @"'/>
                       <Target Name=""t"">
@@ -1225,12 +1227,12 @@ public void DefinitionInImportedFile()
         public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                 </Project>
                 ")));
 
@@ -1248,12 +1250,12 @@ public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         public void ProjectAddNewItemExistingGroupPicksUpProjectItemDefinitions()
         {
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include='i2'>
                       <m>m2</m>
@@ -1274,13 +1276,13 @@ public void ItemsEmittedByTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <CreateItem Include=""i1"" AdditionalMetadata=""n=n2"">
                       <Output ItemName=""i"" TaskParameter=""Include""/>
@@ -1300,13 +1302,13 @@ public void ItemsEmittedByIntrinsicTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <ItemGroup>
                       <i Include=""i1"">
@@ -1332,12 +1334,12 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_SourceDefaultMeta
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""i1""/>
                   </ItemGroup>
@@ -1363,12 +1365,12 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationExplic
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""i1""/>
                   </ItemGroup>
@@ -1401,7 +1403,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
@@ -1409,7 +1411,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
                     <j>
                       <m>m2</m>
                     </j>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""n1""/>
                     <j Include=""@(i)""/>
@@ -1441,7 +1443,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>im1</m>
@@ -1459,7 +1461,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
                       <q>kq4</q>
                       <r>kr4</r>
                     </k>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""1"">
                       <o>io2</o>
@@ -1533,7 +1535,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>im1</m>
@@ -1550,7 +1552,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
                       <m>km4</m>
                       <q>kq4</q>
                     </k>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <ItemGroup>
                     <i Include=""1"">
                       <o>io2</o>
@@ -1589,16 +1591,16 @@ public void MutualReferenceToDefinition1()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>~%(m)~</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
@@ -1615,16 +1617,16 @@ public void MutualReferenceToDefinition2()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>~%(n)~</m>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
@@ -1641,17 +1643,17 @@ public void MutualReferenceToDefinition3()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
                       <m>m1</m>
                       <n>%(i.m)</n>
                       <o>%(j.m)</o>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                     <ItemGroup>
                       <i Include=""i1""/>
-                    </ItemGroup>   
+                    </ItemGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(i.m)][%(i.n)][%(i.o)]""/>
                   </Target>
@@ -1668,7 +1670,7 @@ public void ProjectReevaluationReevaluatesItemDefinitions()
         {
             MockLogger logger = new MockLogger();
             Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <PropertyGroup>
                     <Defines>CODEANALYSIS</Defines>
                   </PropertyGroup>
@@ -1680,7 +1682,7 @@ public void ProjectReevaluationReevaluatesItemDefinitions()
                       <Defines Condition=""'$(BuildFlavor)'=='ret'"">$(Defines);RETAIL</Defines>
                       <Defines Condition=""'$(BuildFlavor)'=='chk'"">$(Defines);DEBUG</Defines>
                     </CppCompile>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
@@ -1709,7 +1711,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
             try
             {
                 otherProject = FileUtilities.GetTemporaryFile();
-                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1717,7 +1719,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                     <i>
                       <m>m2</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[CHILD:%(i.m)]""/>
                   </Target>
@@ -1730,7 +1732,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
 
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
                   </ItemGroup>
@@ -1738,7 +1740,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                     <i>
                       <m>m1</m>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"">
                     <Message Text=""[PARENT-before:%(i.m)]""/>
                     <MSBuild Projects=""" + otherProject + @"""/>
@@ -1765,7 +1767,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
             try
             {
                 otherProject = FileUtilities.GetTemporaryFile();
-                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string otherProjectContent = @"<Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'>
                        <m>m1</m>
@@ -1775,7 +1777,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
                     <i>
                       <n>n1</n>
                     </i>
-                  </ItemDefinitionGroup> 
+                  </ItemDefinitionGroup>
                   <Target Name=""t"" Outputs=""@(i)"">
                     <Message Text=""[CHILD:%(i.Identity):m=%(i.m),n=%(i.n)]""/>
                   </Target>
@@ -1788,7 +1790,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
 
                 MockLogger logger = new MockLogger();
                 Project p = new Project(XmlReader.Create(new StringReader(@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <Target Name=""t"">
                     <MSBuild Projects=""" + otherProject + @""">
                        <Output TaskParameter='TargetOutputs' ItemName='i'/>
diff --git a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
index 4605aa5827e..f542b837ee5 100644
--- a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
@@ -18,6 +18,8 @@
 using Xunit;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
@@ -789,6 +791,7 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
                         project.GetPropertyValue("p").ShouldBe("val");
                     }
                     else
+                    {
                         switch (policy)
                         {
                             case EvaluationContext.SharingPolicy.Shared:
@@ -800,6 +803,7 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo
                             default:
                                 throw new ArgumentOutOfRangeException(nameof(policy), policy, null);
                         }
+                    }
                 }
                 );
         }
diff --git a/src/Build.UnitTests/Definition/ProjectHelpers.cs b/src/Build.UnitTests/Definition/ProjectHelpers.cs
index f72243b4eb1..de7960e5361 100644
--- a/src/Build.UnitTests/Definition/ProjectHelpers.cs
+++ b/src/Build.UnitTests/Definition/ProjectHelpers.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     /// <summary>
@@ -21,7 +23,7 @@ internal static ProjectInstance CreateEmptyProjectInstance()
         {
             XmlReader reader = XmlReader.Create(new StringReader
                 (
-                @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                @"<Project>
                       <Target Name='foo'/>
                   </Project>"
                 ));
diff --git a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
index 65b62be1c52..6410e2474d2 100644
--- a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Construction;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
@@ -84,4 +86,4 @@ private static IList<ProjectItem> GetItems(string content)
             return item;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
index 66d5409729f..c2a03e57d20 100644
--- a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
+++ b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
@@ -11,15 +11,17 @@
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
-    /// Tests some manipulations of Project and ProjectCollection that require dealing with internal data. 
+    /// Tests some manipulations of Project and ProjectCollection that require dealing with internal data.
     /// </summary>
     public class Project_Internal_Tests
     {
         /// <summary>
-        /// Set default tools version; subsequent projects should use it 
+        /// Set default tools version; subsequent projects should use it
         /// </summary>
         [Fact]
         public void SetDefaultToolsVersion()
@@ -29,8 +31,8 @@ public void SetDefaultToolsVersion()
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -42,7 +44,7 @@ public void SetDefaultToolsVersion()
                 Assert.Equal("x", collection.DefaultToolsVersion);
 
                 string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -59,10 +61,10 @@ public void SetDefaultToolsVersion()
         }
 
         /// <summary>
-        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully 
-        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project. 
-        /// 
-        /// ... Make sure we can do this even if we're not using the "always default everything to current anyway" codepath. 
+        /// If the ToolsVersion in the project file is bogus, we'll default to the current ToolsVersion and successfully
+        /// load it.  Make sure we can RE-load it, too, and successfully pick up the correct copy of the loaded project.
+        ///
+        /// ... Make sure we can do this even if we're not using the "always default everything to current anyway" codepath.
         /// </summary>
         [Fact]
         public void ReloadProjectWithInvalidToolsVersionInFile()
@@ -72,13 +74,13 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
                 string content = @"
-                    <Project ToolsVersion='bogus' xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project ToolsVersion='bogus'>
                         <Target Name='t'/>
                     </Project>
                 ";
@@ -116,10 +118,10 @@ public void ProjectToolsVersion20Present()
 
             try
             {
-                // In the new world of figuring out the ToolsVersion to use, we completely ignore what 
+                // In the new world of figuring out the ToolsVersion to use, we completely ignore what
                 // is written in the project file.  However, this test explicitly depends on effectively
-                // modifying the "project file" (through the construction model OM), so we need to turn 
-                // that behavior off in order to verify that it still works.  
+                // modifying the "project file" (through the construction model OM), so we need to turn
+                // that behavior off in order to verify that it still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -167,10 +169,10 @@ public void MSBuildToolsVersionProperty()
 
             try
             {
-                // In the new world of figuring out the ToolsVersion to use, we completely ignore what 
+                // In the new world of figuring out the ToolsVersion to use, we completely ignore what
                 // is written in the project file.  However, this test explicitly depends on effectively
-                // modifying the "project file" (through the construction model OM), so we need to turn 
-                // that behavior off in order to verify that it still works.  
+                // modifying the "project file" (through the construction model OM), so we need to turn
+                // that behavior off in order to verify that it still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -200,13 +202,13 @@ public void MSBuildToolsVersionProperty()
         public void ProjectEvaluationShouldRespectConditionsIfProjectLoadSettingsSaysSo()
         {
             var projectContents = @"
-<Project>   
+<Project>
    <ItemDefinitionGroup Condition=`1 == 2`>
      <I>
        <m>v</m>
      </I>
    </ItemDefinitionGroup>
-   
+
    <PropertyGroup Condition=`1 == 2`>
      <P1>v</P1>
    </PropertyGroup>
diff --git a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
index f08106527a4..9d292500a86 100644
--- a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
@@ -19,6 +19,8 @@
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     public class ToolsetState_Tests
@@ -26,7 +28,7 @@ public class ToolsetState_Tests
         [Fact]
         public void OverrideTasksAreFoundInOverridePath()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection e = new ProjectCollection();
             string dir = NativeMethodsShared.IsWindows ? "c:\\directory1\\directory2" : "/directory1/directory2";
             string overrideDir = NativeMethodsShared.IsWindows ? "c:\\msbuildoverridetasks" : "/msbuildoverridetasks";
@@ -70,7 +72,7 @@ public void OverrideTasksAreFoundInOverridePath()
         [Fact]
         public void OverrideTaskPathIsRelative()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection e = new ProjectCollection();
             Toolset t = new Toolset("toolsversionname", "c:\\directory1\\directory2", new PropertyDictionary<ProjectPropertyInstance>(), new ProjectCollection(), new DirectoryGetFiles(this.getFiles), new LoadXmlFromPath(this.loadXmlFromPath), "msbuildoverridetasks", new DirectoryExists(this.directoryExists));
 
@@ -123,7 +125,7 @@ public void OverrideTaskPathHasTooLongOfAPath()
         [Fact]
         public void OverrideTaskPathIsNotFound()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection e = new ProjectCollection();
             Toolset t = new Toolset("toolsversionname", "c:\\directory1\\directory2", new PropertyDictionary<ProjectPropertyInstance>(), new ProjectCollection(), new DirectoryGetFiles(this.getFiles), new LoadXmlFromPath(this.loadXmlFromPath), "k:\\Thecatinthehat", new DirectoryExists(this.directoryExists));
 
@@ -141,7 +143,7 @@ public void OverrideTaskPathIsNotFound()
         [Fact]
         public void DefaultTasksAreFoundInToolsPath()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             Toolset t = new Toolset(
                 "toolsversionname",
                 NativeMethodsShared.IsWindows ? "c:\\directory1\\directory2" : "/directory1/directory2",
@@ -172,7 +174,7 @@ public void DefaultTasksAreFoundInToolsPath()
         [Fact]
         public void WarningLoggedIfNoDefaultTasksFound()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection p = new ProjectCollection();
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
@@ -195,7 +197,7 @@ public void WarningLoggedIfNoDefaultTasksFound()
         [Fact]
         public void InvalidToolPath()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection p = new ProjectCollection();
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
@@ -215,7 +217,7 @@ public void InvalidToolPath()
         [Fact]
         public void VerifyTasksFilesAreInSortedOrder()
         {
-            //Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
+            // Note Engine's BinPath is distinct from the ToolsVersion's ToolsPath
             ProjectCollection p = new ProjectCollection();
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
@@ -289,7 +291,7 @@ public void InvalidToolsVersionTooHighMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='98.6' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='98.6'>
                         <Target Name='Foo'>
                         </Target>
                        </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -324,7 +326,7 @@ public void InvalidToolsVersionMissingLowMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='0.1' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='0.1'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -357,7 +359,7 @@ public void InvalidToolsVersionMissingMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -385,7 +387,7 @@ public void InvalidToolsVersion()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, "goober", p);
@@ -416,7 +418,7 @@ public void ToolsVersionMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -444,7 +446,7 @@ public void CustomToolsVersionIsHonored()
             Environment.SetEnvironmentVariable("MSBUILDTREATALLTOOLSVERSIONSASCURRENT", String.Empty);
             try
             {
-                string content = @"<Project ToolsVersion=""14.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                string content = @"<Project ToolsVersion=""14.0"">
     <Target Name=""a"">
         <Message Text=""[$(MSBUILDTOOLSVERSION)]"" />
     </Target>
@@ -485,7 +487,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist()
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -520,7 +522,7 @@ public void ToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -557,7 +559,7 @@ public void InvalidToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -597,7 +599,7 @@ public void ToolsVersionMappedToCurrent_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -630,7 +632,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_CreateProjectI
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -666,7 +668,7 @@ public void ToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -706,7 +708,7 @@ public void InvalidToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -749,7 +751,7 @@ public void ToolsVersionMappedToCurrent_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -782,7 +784,7 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_ProjectInstanc
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+            Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -817,7 +819,7 @@ public void ToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -857,7 +859,7 @@ public void InvalidToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
                    </Project>")), null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
@@ -923,8 +925,8 @@ private string[] getFiles(string path, string pattern)
             string pathWithoutTrailingSlash = path.EndsWith(Path.DirectorySeparatorChar.ToString())
                                                   ? path.Substring(0, path.Length - 1)
                                                   : path;
-            //NOTE: the Replace calls below are a very minimal attempt to convert a basic, cmd.exe-style wildcard
-            //into something Regex.IsMatch will know how to use.
+            // NOTE: the Replace calls below are a very minimal attempt to convert a basic, cmd.exe-style wildcard
+            // into something Regex.IsMatch will know how to use.
             string finalPattern = "^" + pattern.Replace(".", "\\.").Replace("*", "[\\w\\W]*") + "$";
 
             List<string> matches = new List<string>(_defaultTasksFileMap.Keys);
@@ -954,7 +956,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\a.tasks"
                                          : "/directory1/directory2/a.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='a1' AssemblyName='a' />
                             <UsingTask TaskName='a2' AssemblyName='a' />
                             <UsingTask TaskName='a3' AssemblyName='a' />
@@ -963,37 +965,37 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\b.tasks"
                                          : "/directory1/directory2/b.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='b1' AssemblyName='b' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\c.tasksfile"
                                          : "/directory1/directory2/c.taskfile",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='c1' AssemblyName='c' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\directory3\\d.tasks"
                                          : "/directory1/directory2/directory3/d.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='d1' AssemblyName='d' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\e.tasks"
                                          : "/directory1/directory2/e.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='e1' AssemblyName='e' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "d:\\directory1\\directory2\\f.tasks"
                                          : "/d/directory1/directory2/f.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='f1' AssemblyName='f' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\directory1\\directory2\\g.custom.tasks"
                                          : "/directory1/directory2/g.custom.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='g1' AssemblyName='g' />
                             <UsingTask TaskName='g2' AssemblyName='g' />
                             <UsingTask TaskName='g3' AssemblyName='g' />
@@ -1001,7 +1003,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\somepath\\1.tasks"
                                          : "/somepath/1.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='11' AssemblyName='1' />
                             <UsingTask TaskName='12' AssemblyName='1' />
                             <UsingTask TaskName='13' AssemblyName='1' />
@@ -1009,13 +1011,13 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\somepath\\2.tasks"
                                          : "/somepath/2.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='21' AssemblyName='2' />
                        </Project>"),
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\inline\\inlinetasks.tasks"
                                          : "/inline/inlinetasks.tasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='t2' AssemblyName='an' Condition='true' TaskFactory='AssemblyFactory' Runtime='CLR2' Architecture='x86' RequiredRuntime='2.0' RequiredPlatform='x86'>
                                 <ParameterGroup>
                                    <MyParameter ParameterType='System.String' Output='true' Required='false'/>
@@ -1028,7 +1030,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\msbuildoverridetasks\\1.overridetasks"
                                          : "/msbuildoverridetasks/1.overridetasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='a1' AssemblyName='o' />
                             <UsingTask TaskName='oa1' AssemblyName='o' />
                             <UsingTask TaskName='oa2' AssemblyName='o' />
@@ -1037,7 +1039,7 @@ private XmlDocumentWithLocation loadXmlFromPath(string path)
                 new DefaultTasksFile(NativeMethodsShared.IsWindows
                                          ? "c:\\msbuildoverridetasks\\2.overridetasks"
                                          : "/msbuildoverridetasks/2.overridetasks",
-                      @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                      @"<Project>
                             <UsingTask TaskName='ooo' AssemblyName='o' />
                         </Project>")
 };
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
index 9299d5c6d87..3f71617095f 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReaderTestHelper.cs
@@ -8,6 +8,8 @@
 
 #pragma warning disable 436
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
index 6babb127ce7..e0a0f3dfeee 100644
--- a/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetConfigurationReader_Tests.cs
@@ -12,6 +12,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
@@ -596,7 +598,7 @@ private void CheckPathsTable(Dictionary<string, ProjectImportPathMatch> pathsTab
             var paths = pathsTable[kind];
             Assert.Equal(paths.SearchPaths.Count, expectedPaths.Length);
 
-            for (int i = 0; i < paths.SearchPaths.Count; i ++)
+            for (int i = 0; i < paths.SearchPaths.Count; i++)
             {
                 Assert.Equal(paths.SearchPaths[i], expectedPaths[i]);
             }
diff --git a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
index c90b546da38..07ab3ac1d6a 100644
--- a/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetReader_Tests.cs
@@ -21,6 +21,8 @@
 using InternalUtilities = Microsoft.Build.Internal.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
 #if FEATURE_REGISTRY_TOOLSETS
@@ -43,7 +45,7 @@ public class ToolsetReaderTests : IDisposable
         private const string testRegistryPath = @"msbuildUnitTests";
 
         /// <summary>
-        /// Store the value of the "VisualStudioVersion" environment variable here so that 
+        /// Store the value of the "VisualStudioVersion" environment variable here so that
         /// we can unset it for the duration of the test.
         /// </summary>
         private string _oldVisualStudioVersion;
@@ -122,7 +124,7 @@ public void GetToolsetDataFromConfiguration_SectionNotRegisteredInConfigFile()
         }
 #endif
 
-    #region "Reading from application configuration file tests"
+        #region "Reading from application configuration file tests"
 
 #if FEATURE_SYSTEM_CONFIGURATION
 
@@ -564,7 +566,7 @@ public void GetToolsetDataFromConfiguration_ToolsVersionIsEmptyString()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                //this should throw ...
+                // this should throw ...
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
@@ -627,7 +629,7 @@ public void BlankPropertyNameInConfigFile()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                //this should throw ...
+                // this should throw ...
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
@@ -667,7 +669,7 @@ public void BlankPropertyNameInRegistry()
            );
         }
         /// <summary>
-        /// Tests the case when a blank property name is specified in the registry in a 
+        /// Tests the case when a blank property name is specified in the registry in a
         /// sub-toolset.
         /// </summary>
         [Fact]
@@ -727,7 +729,7 @@ public void BlankPropertyValueInConfigFile()
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
 
-            //this should not throw ...
+            // this should not throw ...
             string msbuildOverrideTasksPath;
             string defaultOverrideToolsVersion;
             reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
@@ -821,7 +823,7 @@ public void InvalidPropertyNameInConfigFile()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                //this should throw ...
+                // this should throw ...
                 string msbuildOverrideTasksPath = null;
                 string defaultOverrideToolsVersion = null;
                 reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), true, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
@@ -955,7 +957,7 @@ public void GetToolsetDataFromConfiguration_PropertyValueIsEmptyString2()
 
         /// <summary>
         /// Tests that any escaped xml in config file, is treated well
-        /// Note that this comes for free with the current implementation using the 
+        /// Note that this comes for free with the current implementation using the
         /// framework api to access section in the config file
         /// </summary>
         [Fact]
@@ -986,9 +988,9 @@ public void GetToolsetDataFromConfiguration_XmlEscapedCharacters()
             Assert.Equal(@"some>value", values["2>.0"].Properties["foo"].EvaluatedValue);
         }
 #endif
-    #endregion
+        #endregion
 
-    #region "GetToolsetData tests"
+        #region "GetToolsetData tests"
 
         /// <summary>
         /// Tests the case where registry and config file contains different toolsVersion
@@ -1353,7 +1355,7 @@ public void PropertyInConfigurationFileReferencesRegistryLocation()
             key1.SetValue("TaskLocation", @"somePathToTasks");
             key1.SetValue("TargetsLocation", @"D:\somePathToTargets");
             key1.SetValue("SchemaLocation", @"Schemas");
-            key1.SetValue(null, @"D:\somePathToDefault");  //this sets the default value for this key
+            key1.SetValue(null, @"D:\somePathToDefault");  // this sets the default value for this key
 
 #if FEATURE_SYSTEM_CONFIGURATION
             ToolsetConfigurationReaderTestHelper.WriteConfigFile(@"
@@ -1405,7 +1407,7 @@ public void ToolsPathInRegistryHasInvalidPathChars()
 
                 Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
 
-                // should throw... 
+                // should throw...
                 ToolsetReader.ReadAllToolsets
                                                            (
                                                                values,
@@ -2004,9 +2006,9 @@ public void GetToolsetData_ConflictingPropertyValuesSameCase()
         }
 
         /// <summary>
-        /// Tests the case where application configuration file overrides a value already specified in the registry, 
-        /// where that registry value is bogus and would otherwise throw.  However, since the config file also 
-        /// contains an entry for that toolset, the registry toolset never gets read, and thus never throws.  
+        /// Tests the case where application configuration file overrides a value already specified in the registry,
+        /// where that registry value is bogus and would otherwise throw.  However, since the config file also
+        /// contains an entry for that toolset, the registry toolset never gets read, and thus never throws.
         /// </summary>
         [Fact]
         public void GetToolsetData_ConflictingPropertyValuesRegistryThrows()
@@ -2113,8 +2115,8 @@ public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSp
             try
             {
                 // In the new world of figuring out the ToolsVersion to use, we completely ignore the default
-                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying 
-                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.  
+                // ToolsVersion in the ProjectCollection.  However, this test explicitly depends on modifying
+                // that, so we need to turn the new defaulting behavior off in order to verify that this still works.
                 Environment.SetEnvironmentVariable("MSBUILDLEGACYDEFAULTTOOLSVERSION", "1");
                 InternalUtilities.RefreshInternalEnvironmentValues();
 
@@ -2124,7 +2126,7 @@ public void ToolsVersionAttributeNotSpecifiedOnProjectElementAndDefaultVersionSp
                 projectCollection.AddToolset(new Toolset("2.0", "20toolsPath", projectCollection, msbuildOverrideTasksPath));
                 projectCollection.AddToolset(new Toolset(ObjectModelHelpers.MSBuildDefaultToolsVersion, "120toolsPath", projectCollection, msbuildOverrideTasksPath));
 
-                string projectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("x.proj", @"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" />");
+                string projectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("x.proj", @"<Project />");
 
                 Project project = projectCollection.LoadProject(projectPath);
 
@@ -2186,8 +2188,8 @@ public void GetToolsetData_RegistryNotPresent()
 
         /// <summary>
         /// Test the case where nothing is specified in the config file
-        /// Note that config file not present is same as config file 
-        /// with no MSBuildToolsets Section 
+        /// Note that config file not present is same as config file
+        /// with no MSBuildToolsets Section
         /// </summary>
         [Fact]
         public void GetToolsetData_ConfigFileNotPresent()
@@ -2322,9 +2324,9 @@ public void GetToolsetData_ReadRegistryOpenSubKeyThrowsException()
             });
         }
 
-    #endregion
+        #endregion
 
-    #region "SetDefaultToolsetVersion tests"
+        #region "SetDefaultToolsetVersion tests"
 
         /// <summary>
         /// Tests that the default ToolsVersion is correctly resolved when specified
@@ -2835,7 +2837,7 @@ public void GlobalPropertiesInToolsetsAreExpandedButAreNotOverwritten()
             Assert.Equal("gv1", values["4.0"].Properties["p2"].EvaluatedValue);
         }
 
-    #endregion
+        #endregion
 
         private ToolsetRegistryReader GetStandardRegistryReader()
         {
@@ -2981,4 +2983,3 @@ public override RegistryKeyWrapper OpenSubKey(string name)
     }
 #endif
 }
-
diff --git a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
index 41e2d74ef72..5b15463db12 100644
--- a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
@@ -16,6 +16,8 @@
 
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     /// <summary>
@@ -100,7 +102,7 @@ public void DefaultValuesInRegistryCreatedBySetup()
             {
                 return; // "TODO: under Unix this runs out of stack. Investigate"
             }
-            ToolsetReader reader = new ToolsetRegistryReader(new ProjectCollection().EnvironmentProperties, new PropertyDictionary<ProjectPropertyInstance>());  //we don't use the test registry key because we want to verify the install
+            ToolsetReader reader = new ToolsetRegistryReader(new ProjectCollection().EnvironmentProperties, new PropertyDictionary<ProjectPropertyInstance>());  // we don't use the test registry key because we want to verify the install
 
             Dictionary<string, Toolset> values = new Dictionary<string, Toolset>(StringComparer.OrdinalIgnoreCase);
             string msbuildOverrideTasksPath;
@@ -591,12 +593,12 @@ public void ReadToolsets_NoBinPathOrToolsPath()
 
             string msbuildOverrideTasksPath;
             string defaultOverrideToolsVersion;
-            //should not throw
+            // should not throw
             reader.ReadToolsets(values, new PropertyDictionary<ProjectPropertyInstance>(), new PropertyDictionary<ProjectPropertyInstance>(), false, out msbuildOverrideTasksPath, out defaultOverrideToolsVersion);
 
             Assert.True(values.ContainsKey("tv1"));
 
-            //should not contain the second toolset because it does not define a tools/bin path
+            // should not contain the second toolset because it does not define a tools/bin path
             Assert.False(values.ContainsKey("tv2"));
 
             Assert.True(values.ContainsKey("tv3"));
diff --git a/src/Build.UnitTests/Definition/Toolset_Tests.cs b/src/Build.UnitTests/Definition/Toolset_Tests.cs
index 7c6230a9f7c..5e5a3260b5d 100644
--- a/src/Build.UnitTests/Definition/Toolset_Tests.cs
+++ b/src/Build.UnitTests/Definition/Toolset_Tests.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Definition
 {
     public class Toolset_Tests
diff --git a/src/Build.UnitTests/EndToEndCondition_Tests.cs b/src/Build.UnitTests/EndToEndCondition_Tests.cs
index 5e8e0d06c8b..22845c25d9f 100644
--- a/src/Build.UnitTests/EndToEndCondition_Tests.cs
+++ b/src/Build.UnitTests/EndToEndCondition_Tests.cs
@@ -7,6 +7,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class EndToEndCondition_Tests
diff --git a/src/Build.UnitTests/EscapingInProjects_Tests.cs b/src/Build.UnitTests/EscapingInProjects_Tests.cs
index edd37ea0144..5622f9e6bf6 100644
--- a/src/Build.UnitTests/EscapingInProjects_Tests.cs
+++ b/src/Build.UnitTests/EscapingInProjects_Tests.cs
@@ -5,7 +5,9 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+#if FEATURE_COMPILE_IN_TESTS
 using System.Reflection;
+#endif
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
@@ -13,15 +15,20 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
-
-
+#if FEATURE_COMPILE_IN_TESTS
 using EscapingUtilities = Microsoft.Build.Shared.EscapingUtilities;
+#endif
 using FileUtilities = Microsoft.Build.Shared.FileUtilities;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using ResourceUtilities = Microsoft.Build.Shared.ResourceUtilities;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+#if FEATURE_COMPILE_IN_TESTS
 using Microsoft.Build.Shared;
+#endif
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.EscapingInProjects_Tests
 {
@@ -82,7 +89,7 @@ public void Dispose()
         public void SemicolonInPropertyPassedIntoStringParam()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <MyPropertyWithSemicolons>abc %3b def %3b ghi</MyPropertyWithSemicolons>
                     </PropertyGroup>
@@ -104,7 +111,7 @@ public void SemicolonInPropertyPassedIntoStringParam()
         public void SemicolonInPropertyPassedIntoStringParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName=`Message` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` TaskFactory=`TaskHostFactory` />
                     <PropertyGroup>
                         <MyPropertyWithSemicolons>abc %3b def %3b ghi</MyPropertyWithSemicolons>
@@ -126,11 +133,11 @@ public void SemicolonInPropertyPassedIntoStringParam_UsingTaskHost()
         [Fact]
         public void SemicolonInPropertyPassedIntoITaskItemParam()
         {
-            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@$"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
-                    <UsingTask TaskName=`Microsoft.Build.UnitTests.EscapingInProjects_Tests.MyTestTask` AssemblyFile=`{0}` />
+                    <UsingTask TaskName=`Microsoft.Build.UnitTests.EscapingInProjects_Tests.MyTestTask` AssemblyFile=`{new Uri(Assembly.GetExecutingAssembly().EscapedCodeBase).LocalPath}` />
 
                     <PropertyGroup>
                         <MyPropertyWithSemicolons>abc %3b def %3b ghi</MyPropertyWithSemicolons>
@@ -142,7 +149,7 @@ public void SemicolonInPropertyPassedIntoITaskItemParam()
 
                 </Project>
 
-                ", new Uri(Assembly.GetExecutingAssembly().EscapedCodeBase).LocalPath),
+                ",
                 logger: new MockLogger(_output));
 
             logger.AssertLogContains("Received TaskItemParam: 123 abc ; def ; ghi 789");
@@ -158,7 +165,7 @@ public void SemicolonInPropertyPassedIntoITaskItemParam_UsingTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <UsingTask TaskName=`Microsoft.Build.UnitTests.EscapingInProjects_Tests.MyTestTask` AssemblyFile=`{0}` TaskFactory=`TaskHostFactory` />
 
@@ -191,7 +198,7 @@ public void AddNewItemWithSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -203,7 +210,7 @@ public void AddNewItemWithSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                         <MyWildCard Include=`foo;bar.weirdo`/>
@@ -229,7 +236,7 @@ public void AddNewItemWithPropertyContainingSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
                     </PropertyGroup>
@@ -244,7 +251,7 @@ public void AddNewItemWithPropertyContainingSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
                     </PropertyGroup>
@@ -274,7 +281,7 @@ public void ModifyItemIncludeSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -288,7 +295,7 @@ public void ModifyItemIncludeSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`a.weirdo` />
@@ -327,7 +334,7 @@ public void ModifyItemIncludeEscapedSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -341,7 +348,7 @@ public void ModifyItemIncludeEscapedSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
@@ -384,7 +391,7 @@ public void ModifyItemAddPropertyContainingSemicolon()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
@@ -402,7 +409,7 @@ public void ModifyItemAddPropertyContainingSemicolon()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <PropertyGroup>
                         <FilenameWithSemicolon>foo;bar</FilenameWithSemicolon>
@@ -445,7 +452,7 @@ public void AddNewItemThatMatchesWildcard1()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -457,7 +464,7 @@ public void AddNewItemThatMatchesWildcard1()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.weirdo`/>
                     </ItemGroup>
@@ -487,7 +494,7 @@ public void AddNewItemThatMatchesWildcard2()
             //               BEFORE
             // ************************************
             string projectOriginalContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.AAA%253bBBB`/>
                     </ItemGroup>
@@ -499,7 +506,7 @@ public void AddNewItemThatMatchesWildcard2()
             //               AFTER
             // ************************************
             string projectNewExpectedContents = @"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <MyWildCard Include=`*.AAA%253bBBB`/>
                     </ItemGroup>
@@ -536,7 +543,7 @@ public void InferEscapedOutputsFromTask()
 
                 MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(String.Format(@"
 
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <Target Name=`GenerateResources` Inputs=`{0}` Outputs=`{1}`>
                         <NonExistentTask OutputResources=`aaa%253bbbb.resx; ccc%253bddd.resx`>
@@ -571,7 +578,7 @@ public void ItemTransformContainingSemicolon()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <ItemGroup>
                         <TextFile Include=`X.txt`/>
                         <TextFile Include=`Y.txt`/>
@@ -597,7 +604,7 @@ public void ItemTransformContainingSemicolon_InTaskHost()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
 
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <UsingTask TaskName=`Message` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` TaskFactory=`TaskHostFactory` />
 
                     <ItemGroup>
@@ -658,7 +665,7 @@ public void GlobalPropertyWithEscapedCharacters()
         {
             MockLogger logger = new MockLogger();
             Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`Build`>
                         <Message Text=`MyGlobalProperty = '$(MyGlobalProperty)'` />
                     </Target>
@@ -687,7 +694,7 @@ public void EscapedWildcardsShouldNotBeExpanded()
                 // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.
                 EscapingInProjectsHelper.CreateThreeWeirdoFiles();
                 Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`t`>
                         <ItemGroup>
                             <type Include=`%2A` Exclude=``/>
@@ -715,14 +722,14 @@ public void EscapedWildcardsShouldNotBeExpanded()
         [Trait("Category", "mono-osx-failing")]
         public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()
         {
-            MockLogger logger = new MockLogger();
+            MockLogger logger = new();
 
             try
             {
                 // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.
                 EscapingInProjectsHelper.CreateThreeWeirdoFiles();
                 Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project>
                     <UsingTask TaskName=`Message` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` TaskFactory=`TaskHostFactory` />
 
                     <Target Name=`t`>
@@ -734,8 +741,7 @@ public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()
                 </Project>
                 ");
 
-                bool success = project.Build(logger);
-                Assert.True(success); // "Build failed.  See test output (Attachments in Azure Pipelines) for details"
+                project.Build(logger).ShouldBeTrue("Build failed.  See test output (Attachments in Azure Pipelines) for details");
                 logger.AssertLogContains("[*]");
             }
             finally
@@ -757,7 +763,7 @@ public void TargetNamesAlwaysUnescaped()
             try
             {
                 ObjectModelHelpers.CreateInMemoryProject(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Target Name=`%24` />
                 </Project>
                 ");
@@ -781,7 +787,7 @@ public void TargetNamesAlwaysUnescaped()
         public void TargetNamesAlwaysUnescaped_Override()
         {
             Project project = ObjectModelHelpers.CreateInMemoryProject(@"
-            <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project ToolsVersion=`msbuilddefaulttoolsversion`>
                 <Target Name=`%3B`>
                     <Message Text=`[WRONG]` />
                 </Target>
@@ -804,7 +810,7 @@ public void TargetNamesAlwaysUnescaped_Override()
         public void SpecialCharactersInMetadataValueConstruction()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <ItemGroup>
                         <None Include='MetadataTests'>
                             <EscapedSemicolon>%3B</EscapedSemicolon>
@@ -827,8 +833,8 @@ public void SpecialCharactersInMetadataValueEvaluation()
         {
             Project project = new Project();
             ProjectItem item = project.AddItem("None", "MetadataTests", new Dictionary<string, string> {
-                {"EscapedSemicolon", "%3B"}, //Microsoft.Build.Evaluation.ProjectCollection.Escape(";")
-                {"EscapedDollarSign", "%24"}, //Microsoft.Build.Evaluation.ProjectCollection.Escape("$")
+                {"EscapedSemicolon", "%3B"}, // Microsoft.Build.Evaluation.ProjectCollection.Escape(";")
+                {"EscapedDollarSign", "%24"}, // Microsoft.Build.Evaluation.ProjectCollection.Escape("$")
             }).Single();
 
             EscapingInProjectsHelper.SpecialCharactersInMetadataValueTests(item);
@@ -847,7 +853,7 @@ public void SpecialCharactersInMetadataValueEvaluation()
         public void CanGetCorrectListOfItemsWithSemicolonsInThem()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <PropertyGroup>
                         <MyUserMacro>foo%3bbar</MyUserMacro>
                     </PropertyGroup>
@@ -879,7 +885,7 @@ public void CanGetCorrectListOfItemsWithSemicolonsInThem()
         public void CanGetCorrectListOfItemsWithSemicolonsInThem2()
         {
             string projectString = @"
-                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"">
                     <PropertyGroup>
                         <MyUserMacro>foo;bar</MyUserMacro>
                     </PropertyGroup>
@@ -950,7 +956,7 @@ public void SemicolonInConfiguration()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1015,7 +1021,7 @@ public void SemicolonInConfiguration_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1080,7 +1086,7 @@ public void SemicolonInAssemblyName()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1140,7 +1146,7 @@ public void SemicolonInAssemblyName_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1200,7 +1206,7 @@ public void DollarSignInAssemblyName()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1260,7 +1266,7 @@ public void DollarSignInAssemblyName_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1320,7 +1326,7 @@ public void SemicolonInSourceCodeFilename()
             // Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1380,7 +1386,7 @@ public void SemicolonInSourceCodeFilename_UsingTaskHost()
                 // Foo.csproj
                 // ---------------------
                 ObjectModelHelpers.CreateFileInTempProjectDirectory("foo.csproj", $@"
-                <Project DefaultTargets=`Build` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
@@ -1452,7 +1458,7 @@ public void SolutionWithLotsaCrazyCharacters()
                 @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\Cons.ole;!@(foo)'^(Application1.csproj",
 
                 @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1529,7 +1535,7 @@ static void Main(string[] args)
                 @"SLN;!@(foo)'^1\Class;!@(foo)'^(Library1\Class;!@(foo)'^(Library1.csproj",
 
                 @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1591,7 +1597,7 @@ public class Class1
             MockLogger log = new MockLogger(_testOutput);
             ObjectModelHelpers.BuildTempProjectFileWithTargetsExpectSuccess(@"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1.sln", new string[] { targetForFirstProject }, null, log);
 
-            Assert.True(File.Exists(Path.Combine(ObjectModelHelpers.TempProjectDir, @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\bin\debug\Console;!@(foo)'^(Application1.exe"))); //                     @"Did not find expected file Console;!@(foo)'^(Application1.exe"
+            Assert.True(File.Exists(Path.Combine(ObjectModelHelpers.TempProjectDir, @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\bin\debug\Console;!@(foo)'^(Application1.exe"))); // @"Did not find expected file Console;!@(foo)'^(Application1.exe"
         }
 
         /// <summary>
@@ -1623,7 +1629,7 @@ public void SolutionWithLotsaCrazyCharacters_UsingTaskHost()
                     @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\Cons.ole;!@(foo)'^(Application1.csproj",
 
                     @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1700,7 +1706,7 @@ static void Main(string[] args)
                     @"SLN;!@(foo)'^1\Class;!@(foo)'^(Library1\Class;!@(foo)'^(Library1.csproj",
 
                     @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>
                         <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>
@@ -1762,7 +1768,7 @@ public class Class1
                 MockLogger log = new MockLogger(_testOutput);
                 ObjectModelHelpers.BuildTempProjectFileWithTargetsExpectSuccess(@"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1.sln", new string[] { targetForFirstProject }, null, log);
 
-                Assert.True(File.Exists(Path.Combine(ObjectModelHelpers.TempProjectDir, @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\bin\debug\Console;!@(foo)'^(Application1.exe"))); //                         @"Did not find expected file Console;!@(foo)'^(Application1.exe"
+                Assert.True(File.Exists(Path.Combine(ObjectModelHelpers.TempProjectDir, @"SLN;!@(foo)'^1\Console;!@(foo)'^(Application1\bin\debug\Console;!@(foo)'^(Application1.exe"))); // @"Did not find expected file Console;!@(foo)'^(Application1.exe"
             }
             finally
             {
diff --git a/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs b/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
index 67b0b745de8..3f8e86969ed 100644
--- a/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/EvaluationLogging_Tests.cs
@@ -10,6 +10,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 7a4f17f2686..51d649107b5 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -7,6 +7,7 @@
 using System.Linq;
 using System.Net;
 using System.Threading;
+using System.Threading.Tasks;
 using System.Xml;
 
 using Microsoft.Build.Collections;
@@ -22,6 +23,8 @@
 
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
@@ -1886,7 +1889,7 @@ public void AllEvaluatedItems()
 
                 Project project = new Project(XmlReader.Create(new StringReader(content)));
 
-                Assert.Equal(6, project.AllEvaluatedItems.Count());
+                Assert.Equal(6, project.AllEvaluatedItems.Count);
                 Assert.Equal("i1", project.AllEvaluatedItems.ElementAt(0).EvaluatedInclude);
                 Assert.Equal(String.Empty, project.AllEvaluatedItems.ElementAt(0).GetMetadataValue("m"));
                 Assert.Equal("j1", project.AllEvaluatedItems.ElementAt(1).EvaluatedInclude);
@@ -1902,12 +1905,12 @@ public void AllEvaluatedItems()
                 project.AddItem("i", "i7");
                 project.RemoveItem(project.AllEvaluatedItems.ElementAt(1));
 
-                Assert.Equal(6, project.AllEvaluatedItems.Count());
+                Assert.Equal(6, project.AllEvaluatedItems.Count);
 
                 project.MarkDirty();
                 project.ReevaluateIfNecessary();
 
-                Assert.Equal(7, project.AllEvaluatedItems.Count());
+                Assert.Equal(7, project.AllEvaluatedItems.Count);
             }
             finally
             {
@@ -2002,15 +2005,15 @@ public void AllEvaluatedPropertiesSetProperty()
 
             Project project = new Project(XmlReader.Create(new StringReader(content)));
 
-            int initial = project.AllEvaluatedProperties.Count();
+            int initial = project.AllEvaluatedProperties.Count;
 
             project.SetProperty("p", "1");
 
-            Assert.Equal(initial, project.AllEvaluatedProperties.Count());
+            Assert.Equal(initial, project.AllEvaluatedProperties.Count);
 
             project.ReevaluateIfNecessary();
 
-            Assert.Equal(initial + 1, project.AllEvaluatedProperties.Count());
+            Assert.Equal(initial + 1, project.AllEvaluatedProperties.Count);
         }
 
         /// <summary>
@@ -2038,13 +2041,13 @@ public void AllEvaluatedItemDefinitionMetadata()
 
             Project project = new Project(XmlReader.Create(new StringReader(content)));
 
-            Assert.Equal(4, project.AllEvaluatedItemDefinitionMetadata.Count());
+            Assert.Equal(4, project.AllEvaluatedItemDefinitionMetadata.Count);
 
             Assert.Equal("2", project.AllEvaluatedItemDefinitionMetadata.ElementAt(1).EvaluatedValue);
             Assert.Equal("1;2", project.AllEvaluatedItemDefinitionMetadata.ElementAt(3).EvaluatedValue);
 
             // Verify lists are cleared on reevaluation
-            Assert.Equal(4, project.AllEvaluatedItemDefinitionMetadata.Count());
+            Assert.Equal(4, project.AllEvaluatedItemDefinitionMetadata.Count);
         }
 
         /// <summary>
@@ -4241,7 +4244,8 @@ public void VerifyDTDProcessingIsDisabled()
         /// If DTD processing is disabled, the server should not receive any connection request.
         /// </summary>
         [Fact]
-        public void VerifyDTDProcessingIsDisabled2()
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7623")]
+        public async void VerifyDTDProcessingIsDisabled2()
         {
             string projectContents = ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-8""?>
                                 <!DOCTYPE Project [
@@ -4256,9 +4260,9 @@ public void VerifyDTDProcessingIsDisabled2()
                                     </Target>
                                 </Project>");
 
-            string projectDirectory = Path.Combine(Path.GetTempPath(), "VerifyDTDProcessingIsDisabled");
+            string projectDirectory = Path.Combine(Path.GetTempPath(), "VerifyDTDProcessingIsDisabled2");
 
-            Thread t = new Thread(HttpServerThread);
+            Thread t = new(HttpServerThread);
             t.IsBackground = true;
             t.Start();
 
@@ -4266,7 +4270,7 @@ public void VerifyDTDProcessingIsDisabled2()
             {
                 if (Directory.Exists(projectDirectory))
                 {
-                    FileUtilities.DeleteWithoutTrailingBackslash(projectDirectory, true /* recursive delete */);
+                    FileUtilities.DeleteWithoutTrailingBackslash(projectDirectory, recursive: true);
                 }
 
                 Directory.CreateDirectory(projectDirectory);
@@ -4275,18 +4279,20 @@ public void VerifyDTDProcessingIsDisabled2()
 
                 File.WriteAllText(projectFilename, projectContents);
 
-                Project project = new Project(projectFilename);
+                Project project = new(projectFilename);
 
-                MockLogger logger = new MockLogger();
+                MockLogger logger = new();
                 project.Build(logger);
             }
             finally
             {
-                Thread.Sleep(500);
+                await Task.Delay(500);
+                t.IsAlive.ShouldBeTrue();
+                t.Abort();
+                await Task.Delay(500);
 
                 // Expect server to be alive and hung up unless a request originating from DTD processing was sent
                 _httpListenerThreadException.ShouldBeNull();
-                t.IsAlive.ShouldBeTrue();
             }
         }
 #endif
@@ -4516,7 +4522,7 @@ public void VerifyMSBuildLogsAMessageWhenLocalPropertyCannotOverrideValueOfGloba
         [Fact]
         public void VerifyPropertyTrackingLoggingDefault()
         {
-            // Having nothing defined should default to nothing being logged.
+            // Having just environment variables defined should default to nothing being logged except one environment variable read.
             this.VerifyPropertyTrackingLoggingScenario(
                 null,
                 logger =>
@@ -4529,7 +4535,9 @@ public void VerifyPropertyTrackingLoggingDefault()
                     logger
                         .AllBuildEvents
                         .OfType<EnvironmentVariableReadEventArgs>()
-                        .ShouldBeEmpty();
+                        .ShouldHaveSingleItem()
+                        .EnvironmentVariableName
+                        .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
@@ -4558,7 +4566,9 @@ public void VerifyPropertyTrackingLoggingPropertyReassignment()
                     logger
                         .AllBuildEvents
                         .OfType<EnvironmentVariableReadEventArgs>()
-                        .ShouldBeEmpty();
+                        .ShouldHaveSingleItem()
+                        .EnvironmentVariableName
+                        .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
@@ -4587,7 +4597,9 @@ public void VerifyPropertyTrackingLoggingNone()
                     logger
                         .AllBuildEvents
                         .OfType<EnvironmentVariableReadEventArgs>()
-                        .ShouldBeEmpty();
+                        .ShouldHaveSingleItem()
+                        .EnvironmentVariableName
+                        .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
@@ -4616,7 +4628,9 @@ public void VerifyPropertyTrackingLoggingPropertyInitialValue()
                     logger
                         .AllBuildEvents
                         .OfType<EnvironmentVariableReadEventArgs>()
-                        .ShouldBeEmpty();
+                        .ShouldHaveSingleItem()
+                        .EnvironmentVariableName
+                        .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
@@ -4700,7 +4714,9 @@ public void VerifyPropertyTrackingLoggingUninitializedPropertyRead()
                     logger
                         .AllBuildEvents
                         .OfType<EnvironmentVariableReadEventArgs>()
-                        .ShouldBeEmpty();
+                        .ShouldHaveSingleItem()
+                        .EnvironmentVariableName
+                        .ShouldBe("DEFINED_ENVIRONMENT_VARIABLE2");
 
                     logger
                         .AllBuildEvents
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 76f7b71321f..e77a47e5ef4 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -7,6 +7,7 @@
 using System.IO;
 using System.Linq;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Xml;
 
@@ -32,6 +33,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     public class Expander_Tests
@@ -366,7 +369,7 @@ public void ExpandItemVectorFunctionsChained3()
         public void ExpandItemVectorFunctionsChainedProject1()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-<Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
     <ItemGroup>
         <Compile Include=`a.cpp`>
@@ -391,7 +394,7 @@ public void ExpandItemVectorFunctionsChainedProject1()
         </Compile>
     </ItemGroup>
 
-    <Target Name=`Build`>      
+    <Target Name=`Build`>
         <Message Text=`DirChain0: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct())`/>
         <Message Text=`DirChain1: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct(), '%(A)')`/>
         <Message Text=`DirChain2: @(Compile->'%(SomeMeta)'->'%(Directory)'->Distinct(), '%(A)%(B)')`/>
@@ -414,8 +417,8 @@ public void ExpandItemVectorFunctionsChainedProject1()
         public void ExpandItemVectorFunctionsCount1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -436,8 +439,8 @@ public void ExpandItemVectorFunctionsCount1()
         public void ExpandItemVectorFunctionsCount2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -459,8 +462,8 @@ public void ExpandItemVectorFunctionsCount2()
         public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -481,8 +484,8 @@ public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult1()
         public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -504,8 +507,8 @@ public void ExpandItemVectorFunctionsCountOperatingOnEmptyResult2()
         public void ExpandItemVectorFunctionsBuiltIn1()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -526,8 +529,8 @@ public void ExpandItemVectorFunctionsBuiltIn1()
         public void ExpandItemVectorFunctionsBuiltIn2()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar`/>
@@ -548,8 +551,8 @@ public void ExpandItemVectorFunctionsBuiltIn2()
         public void ExpandItemVectorFunctionsBuiltIn3()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar;foo;bar;foo`/>
@@ -570,8 +573,8 @@ public void ExpandItemVectorFunctionsBuiltIn3()
         public void ExpandItemVectorFunctionsBuiltIn4()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`foo;bar;foo;bar;foo`/>
@@ -593,8 +596,8 @@ public void ExpandItemVectorFunctionsBuiltIn4()
         public void ExpandItemVectorFunctionsBuiltIn_PathTooLongError()
         {
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo`/>
@@ -619,8 +622,8 @@ public void ExpandItemVectorFunctionsBuiltIn_InvalidCharsError()
             }
 
             string content = @"
- <Project DefaultTargets=`t` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
- 
+ <Project DefaultTargets=`t`>
+
         <Target Name=`t`>
             <ItemGroup>
                 <I Include=`aaa|||bbb\ccc.txt`/>
@@ -814,7 +817,7 @@ private Expander<ProjectPropertyInstance, ProjectItemInstance> CreateExpander()
         public void ZeroItemsInProjectExpandsToEmpty()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <Target Name=`Build` Condition=`'@(foo)'!=''` >
                         <Message Text=`This target should NOT run.`/>
@@ -826,7 +829,7 @@ public void ZeroItemsInProjectExpandsToEmpty()
             logger.AssertLogDoesntContain("This target should NOT run.");
 
             logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=`msbuilddefaulttoolsversion`>
 
                     <ItemGroup>
                         <foo Include=`abc` Condition=` '@(foo)' == '' ` />
@@ -846,7 +849,7 @@ public void ZeroItemsInProjectExpandsToEmpty()
         public void ItemIncludeContainsMultipleItemReferences()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-                <Project DefaultTarget=`ShowProps` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"" >
+                <Project DefaultTarget=`ShowProps` ToolsVersion=`msbuilddefaulttoolsversion` >
                     <PropertyGroup>
                         <OutputType>Library</OutputType>
                     </PropertyGroup>
@@ -878,7 +881,7 @@ public void ItemIncludeContainsMultipleItemReferences()
         public void InvalidPathAndMetadataItemFunctionPathTooLong()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -900,7 +903,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong()
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -919,7 +922,7 @@ public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars()
         public void InvalidMetadataName()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -940,7 +943,7 @@ public void InvalidMetadataName()
         public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -962,7 +965,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong2()
         public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -981,7 +984,7 @@ public void InvalidPathAndMetadataItemFunctionInvalidWindowsPathChars2()
         public void InvalidMetadataName2()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -1002,7 +1005,7 @@ public void InvalidMetadataName2()
         public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'/>
                     </ItemGroup>
@@ -1024,7 +1027,7 @@ public void InvalidPathAndMetadataItemFunctionPathTooLong3()
         public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + ":|?*" + @"'/>
                     </ItemGroup>
@@ -1042,7 +1045,7 @@ public void InvalidPathAndMetadataItemInvalidWindowsPathChars3()
         public void InvalidPathInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
-                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include=':|?*'>
                             <m>%(FullPath)</m>
@@ -1060,7 +1063,7 @@ public void InvalidPathInDirectMetadata()
         public void PathTooLongInDirectMetadata()
         {
             var logger = Helpers.BuildProjectContentUsingBuildManagerExpectResult(
-                @"<Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                @"<Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='" + new string('x', 250) + @"'>
                             <m>%(FullPath)</m>
@@ -1079,7 +1082,7 @@ public void PathTooLongInDirectMetadata()
         public void InvalidMetadataName3()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <ItemGroup>
                         <x Include='x'/>
                     </ItemGroup>
@@ -1098,7 +1101,7 @@ public void InvalidMetadataName3()
         public void HasMetadata()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
-<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
   <ItemGroup>
     <_Item Include=""One"">
@@ -1147,7 +1150,7 @@ public void DirectItemMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
                   </Target>
@@ -1176,7 +1179,7 @@ public void ItemDefinitionGroupMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
                   </Target>
@@ -1200,7 +1203,7 @@ public void WellKnownMetadataReferenceShouldBeCaseInsensitive()
                   <Target Name=`Build`>
                     <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.Identity)=%(Foo.FILENAME)`/>
                     <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.Identity)=%(Foo.FileName)`/>
-                    
+
                     <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.Identity)=%(FILENAME)`/>
                     <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.Identity)=%(FileName)`/>
                   </Target>
@@ -1222,7 +1225,7 @@ public void StaticMethodErrorMessageHaveMethodName()
             try
             {
                 Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <PropertyGroup>
                         <Function>$([System.IO.Path]::Combine(null,''))</Function>
                     </PropertyGroup>
@@ -1249,7 +1252,7 @@ public void StaticMethodErrorMessageHaveMethodName1()
             try
             {
                 Helpers.BuildProjectWithNewOMExpectFailure(@"
-                <Project DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                <Project DefaultTargets='Build'>
                     <PropertyGroup>
                         <Function>$(System.IO.Path::Combine('a','b'))</Function>
                     </PropertyGroup>
@@ -1513,7 +1516,7 @@ public void ExpandAllIntoStringTruncated()
             }
             var lookup = new Lookup(projectItemGroups, pg);
             lookup.EnterScope("x");
-            lookup.PopulateWithItems("ManySpacesItem", new []
+            lookup.PopulateWithItems("ManySpacesItem", new[]
             {
                 new ProjectItemInstance (project, "ManySpacesItem", "Foo", project.FullPath),
                 new ProjectItemInstance (project, "ManySpacesItem", manySpaces, project.FullPath),
@@ -1569,11 +1572,9 @@ public void ExpandAllIntoStringExpectIdenticalReference()
             xmlattribute.Value = "abc123" + new Random().Next();
             string expandedString = expander.ExpandIntoStringLeaveEscaped(xmlattribute.Value, ExpanderOptions.ExpandAll, MockElementLocation.Instance);
 
-#if FEATURE_STRING_INTERN
             // Verify neither string got interned, so that this test is meaningful
             Assert.Null(string.IsInterned(xmlattribute.Value));
             Assert.Null(string.IsInterned(expandedString));
-#endif
 
             // Finally verify Expander indeed didn't create a new string.
             Assert.True(Object.ReferenceEquals(xmlattribute.Value, expandedString));
@@ -1712,8 +1713,10 @@ public void RegistryPropertyInvalidPrefixError2()
             }
            );
         }
-#if FEATURE_WIN32_REGISTRY
+
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyString()
         {
             try
@@ -1735,6 +1738,8 @@ public void RegistryPropertyString()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyBinary()
         {
             try
@@ -1759,6 +1764,8 @@ public void RegistryPropertyBinary()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyDWord()
         {
             try
@@ -1780,6 +1787,8 @@ public void RegistryPropertyDWord()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyExpandString()
         {
             try
@@ -1802,6 +1811,8 @@ public void RegistryPropertyExpandString()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyQWord()
         {
             try
@@ -1823,6 +1834,8 @@ public void RegistryPropertyQWord()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void RegistryPropertyMultiString()
         {
             try
@@ -1842,13 +1855,12 @@ public void RegistryPropertyMultiString()
                 Registry.CurrentUser.DeleteSubKey(@"Software\Microsoft\MSBuild_test");
             }
         }
-#endif
 
         [Fact]
         public void TestItemSpecModiferEscaping()
         {
             string content = @"
- <Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+ <Project DefaultTargets=""Build"">
 
         <Target Name=""Build"">
             <WriteLinesToFile Overwrite=""true"" File=""unittest.%28msbuild%29.file"" Lines=""Nothing much here""/>
@@ -1882,7 +1894,7 @@ public void TestGetPathToReferenceAssembliesAsFunction()
             }
 
             string content = $@"
-                <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Project ToolsVersion=""msbuilddefaulttoolsversion"">
 
                     <PropertyGroup>
                         <TargetFrameworkIdentifier>.NETFramework</TargetFrameworkIdentifier>
@@ -2636,7 +2648,7 @@ public void PropertyFunctionStaticMethodQuoted1Spaces()
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
             string result = expander.ExpandIntoStringLeaveEscaped(@"$([System.IO.Path]::Combine(`" +
-                Path.Combine(s_rootPathPrefix, "foo goo")  + "`, `$(File)`))",
+                Path.Combine(s_rootPathPrefix, "foo goo") + "`, `$(File)`))",
                 ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
 
             Assert.Equal(Path.Combine(s_rootPathPrefix, "foo goo", "foo goo", "file.txt"), result);
@@ -2852,7 +2864,7 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e
         public void StringIndexOfTests(string propertyName, string properyValue, string propertyFunction, string expectedExpansion)
         {
             var pg = new PropertyDictionary<ProjectPropertyInstance>
-                {[propertyName] = ProjectPropertyInstance.Create(propertyName, properyValue)};
+            { [propertyName] = ProjectPropertyInstance.Create(propertyName, properyValue) };
 
             var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
@@ -2914,9 +2926,9 @@ public void PropertyFunctionVersionComparisons(string a, string b, int expectedS
             var pg = new PropertyDictionary<ProjectPropertyInstance>();
             var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
-            AssertSuccess(expander, expectedSign >  0, $"$([MSBuild]::VersionGreaterThan('{a}', '{b}'))");
+            AssertSuccess(expander, expectedSign > 0, $"$([MSBuild]::VersionGreaterThan('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign >= 0, $"$([MSBuild]::VersionGreaterThanOrEquals('{a}', '{b}'))");
-            AssertSuccess(expander, expectedSign <  0, $"$([MSBuild]::VersionLessThan('{a}', '{b}'))");
+            AssertSuccess(expander, expectedSign < 0, $"$([MSBuild]::VersionLessThan('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign <= 0, $"$([MSBuild]::VersionLessThanOrEquals('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign == 0, $"$([MSBuild]::VersionEquals('{a}', '{b}'))");
             AssertSuccess(expander, expectedSign != 0, $"$([MSBuild]::VersionNotEquals('{a}', '{b}'))");
@@ -3471,8 +3483,9 @@ public void PropertySimpleSpaced()
             Assert.Equal(String.Empty, result);
         }
 
-#if FEATURE_WIN32_REGISTRY
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegitryValue()
         {
             try
@@ -3496,6 +3509,8 @@ public void PropertyFunctionGetRegitryValue()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegitryValueDefault()
         {
             try
@@ -3519,6 +3534,8 @@ public void PropertyFunctionGetRegitryValueDefault()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegistryValueFromView1()
         {
             try
@@ -3542,6 +3559,8 @@ public void PropertyFunctionGetRegistryValueFromView1()
         }
 
         [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void PropertyFunctionGetRegistryValueFromView2()
         {
             try
@@ -3563,7 +3582,6 @@ public void PropertyFunctionGetRegistryValueFromView2()
                 Registry.CurrentUser.DeleteSubKey(@"Software\Microsoft\MSBuild_test");
             }
         }
-#endif
 
         /// <summary>
         /// Expand a property function that references item metadata
@@ -3646,6 +3664,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()
             }
         }
 
+        [Theory]
+        [InlineData("easycase")]
+        [InlineData("")]
+        [InlineData("\"\n()\tsdfIR$%#*;==")]
+        public void TestBase64Conversion(string testCase)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertToBase64('{testCase}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();
+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertFromBase64('{intermediate}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            original.ShouldBe(testCase);
+        }
+
+        [Theory]
+        [InlineData("easycase", "ZWFzeWNhc2U=")]
+        [InlineData("", "")]
+        [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
+        public void TestExplicitToBase64Conversion(string plaintext, string base64)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertToBase64('{plaintext}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            intermediate.ShouldBe(base64);
+        }
+
+        [Theory]
+        [InlineData("easycase", "ZWFzeWNhc2U=")]
+        [InlineData("", "")]
+        [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
+        public void TestExplicitFromBase64Conversion(string plaintext, string base64)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertFromBase64('{base64}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            original.ShouldBe(plaintext);
+        }
+
         /// <summary>
         /// A whole bunch error check tests
         /// </summary>
@@ -3725,7 +3781,7 @@ public void Medley()
                 new string[] {"$(Reg:AAA)", ""}
                                    };
 
-            var errorTests = new List<string>{
+            var errorTests = new List<string> {
             "$(input[)",
             "$(input.ToString()])",
             "$(input.ToString()[)",
@@ -3738,25 +3794,25 @@ public void Medley()
             "$(listofthings.Split(';')[-1])",
             "$([]::())",
                                                       @"
- 
+
 $(
- 
+
 $(
- 
+
 [System.IO]::Path.GetDirectory('c:\foo\bar\baz.txt')
- 
+
 ).Substring(
- 
+
 '$([System.IO]::Path.GetPathRoot(
- 
+
 '$([System.IO]::Path.GetDirectory('c:\foo\bar\baz.txt'))'
- 
+
 ).Length)'
- 
- 
- 
+
+
+
 )
- 
+
 ",
                 "$([Microsoft.VisualBasic.FileIO.FileSystem]::CurrentDirectory)", // not allowed
                 "$(e.Length..ToString())",
@@ -3863,18 +3919,16 @@ public void Medley()
             }
 #endif
 
-#if FEATURE_WIN32_REGISTRY
             if (NativeMethodsShared.IsWindows)
             {
                 errorTests.Add("$(Registry:X)");
             }
-#endif
 
             if (!NativeMethodsShared.IsWindows)
             {
                 // If no registry or not running on windows, this gets expanded to the empty string
                 // example: xplat build running on OSX
-                validTests.Add(new string[]{"$(Registry:X)", ""});
+                validTests.Add(new string[] { "$(Registry:X)", "" });
             }
 
             string result;
diff --git a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
index 653a01f2fd3..674cf217083 100644
--- a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
@@ -9,6 +9,8 @@
 using System.Text.RegularExpressions;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
@@ -441,7 +443,7 @@ private void VerifySplitSemiColonSeparatedList(string input, params string[] exp
             if (expected == null)
             {
                 // passing "null" means you expect an empty array back
-                expected = new string[] { };
+                expected = Array.Empty<string>();
             }
 
             Assert.Equal(actual, expected, StringComparer.Ordinal);
diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index bfcf5685dc2..df80473fc4e 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -12,6 +12,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
@@ -75,7 +77,7 @@ public void ImportFromExtensionsPathNotFound()
         public void ConditionalImportFromExtensionsPathNotFound()
         {
             string extnTargetsFileContentWithCondition = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FooBar</PropertyFromExtn1>
                     </PropertyGroup>
@@ -92,7 +94,8 @@ public void ConditionalImportFromExtensionsPathNotFound()
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir1, Path.Combine("tmp", "nonexistent") },
                                                             null,
-                                                            (p, l) => {
+                                                            (p, l) =>
+                                                            {
                                                                 Assert.True(p.Build());
 
                                                                 l.AssertLogContains("Running FromExtn");
@@ -104,7 +107,7 @@ public void ConditionalImportFromExtensionsPathNotFound()
         public void ImportFromExtensionsPathCircularImportError()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -113,7 +116,7 @@ public void ImportFromExtensionsPathCircularImportError()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn2'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -136,7 +139,7 @@ public void ImportFromExtensionsPathCircularImportError()
         public void ExtensionPathFallbackIsCaseInsensitive()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -145,7 +148,7 @@ public void ExtensionPathFallbackIsCaseInsensitive()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running {0}'/>
                     </Target>
@@ -173,7 +176,7 @@ public void ExtensionPathFallbackIsCaseInsensitive()
         public void ImportFromExtensionsPathWithWildCard()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -182,7 +185,7 @@ public void ImportFromExtensionsPathWithWildCard()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
                     </Target>
@@ -216,7 +219,7 @@ public void ImportFromExtensionsPathWithWildCard()
         public void ImportFromExtensionsPathWithWildCardAndSelfImport()
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main'>
                         <Message Text='Running Main'/>
                     </Target>
@@ -225,14 +228,14 @@ public void ImportFromExtensionsPathWithWildCardAndSelfImport()
                 </Project>";
 
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
                     </Target>
                 </Project>";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Import Project='$(MSBuildExtensionsPath)\circularwildcardtest\*.proj'/>
                     <Target Name='{0}'>
                         <Message Text='Running {0}'/>
@@ -269,7 +272,7 @@ public void ImportFromExtensionsPathWithWildCardAndSelfImport()
         public void ImportFromExtensionsPathWithWildCardNothingFound()
         {
             string extnTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -287,7 +290,7 @@ public void ImportFromExtensionsPathWithWildCardNothingFound()
         [Fact]
         public void ImportFromExtensionsPathInvalidFile()
         {
-            string extnTargetsFileContent = @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >";
+            string extnTargetsFileContent = @"<Project>";
 
             string extnDir1 = null;
             string mainProjectPath = null;
@@ -323,7 +326,7 @@ public void ImportFromExtensionsPathInvalidFile()
         public void ImportFromExtensionsPathSearchOrder()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromFirstFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -335,7 +338,7 @@ public void ImportFromExtensionsPathSearchOrder()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromSecondFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -355,7 +358,8 @@ public void ImportFromExtensionsPathSearchOrder()
 
             CreateAndBuildProjectForImportFromExtensionsPath(mainProjectPath, "MSBuildExtensionsPath", new string[] { extnDir2, Path.Combine("tmp", "nonexistent"), extnDir1 },
                                                             null,
-                                                            (p, l) => {
+                                                            (p, l) =>
+                                                            {
                                                                 Assert.True(p.Build());
 
                                                                 l.AssertLogContains("Running FromExtn");
@@ -367,7 +371,7 @@ public void ImportFromExtensionsPathSearchOrder()
         public void ImportFromExtensionsPathSearchOrder2()
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromFirstFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -379,7 +383,7 @@ public void ImportFromExtensionsPathSearchOrder2()
                 ";
 
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FromSecondFile</PropertyFromExtn1>
                     </PropertyGroup>
@@ -446,7 +450,7 @@ public void ImportOrderFromExtensionsPath64()
         public void ImportFromExtensionsPathAnd32And64()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn{0}' DependsOnTargets='{1}'>
                         <Message Text='Running FromExtn{0}'/>
                     </Target>
@@ -529,7 +533,7 @@ public void ImportFromExtensionsPathAnd32And64()
         public void ExpandExtensionsPathFallback()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -590,7 +594,7 @@ public void ExpandExtensionsPathFallback()
         public void ExpandExtensionsPathFallbackInErrorMessage()
         {
             string extnTargetsFileContentTemplate = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='FromExtn'>
                         <Message Text='Running FromExtn'/>
                     </Target>
@@ -652,7 +656,7 @@ public void ExpandExtensionsPathFallbackInErrorMessage()
         public void FallbackImportWithIndirectReference()
         {
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <PropertyGroup>
                        <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v99</VSToolsPath>
                    </PropertyGroup>
@@ -661,7 +665,7 @@ public void FallbackImportWithIndirectReference()
                </Project>";
 
             string extnTargetsFileContentTemplate = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Target Name='FromExtn'>
                        <Message Text='Running FromExtn'/>
                    </Target>
@@ -721,13 +725,13 @@ public void FallbackImportWithIndirectReference()
         public void FallbackImportWithUndefinedProperty()
         {
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Import Project='$(UndefinedProperty)\file.props' Condition=""Exists('$(UndefinedProperty)\file.props')"" />
                    <Target Name='Main' DependsOnTargets='FromExtn' />
                </Project>";
 
             string extnTargetsFileContentTemplate = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Target Name='FromExtn'>
                        <Message Text='Running FromExtn'/>
                    </Target>
@@ -786,7 +790,7 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
         {
             // Import something from $(UndefinedProperty)
             string mainTargetsFileContent = @"
-               <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+               <Project>
                    <Import Project='$(UndefinedProperty)\filenotfound.props' />
                    <Target Name='Main' DependsOnTargets='FromExtn' />
                </Project>";
@@ -965,7 +969,7 @@ string GetNewExtensionsPathAndCreateFile(string extnDirName, string relativeFile
         string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string mainTargetsFileContent = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Main' DependsOnTargets='FromExtn'>
                         <Message Text='PropertyFromExtn1: $(PropertyFromExtn1)'/>
                     </Target>
@@ -979,7 +983,7 @@ string GetMainTargetFileContent(string extensionsPathPropertyName = "MSBuildExte
         string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent1 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn1>FooBar</PropertyFromExtn1>
                     </PropertyGroup>
@@ -997,7 +1001,7 @@ string GetExtensionTargetsFileContent1(string extensionsPathPropertyName = "MSBu
         string GetExtensionTargetsFileContent2(string extensionsPathPropertyName = "MSBuildExtensionsPath")
         {
             string extnTargetsFileContent2 = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <PropertyGroup>
                         <PropertyFromExtn2>Abc</PropertyFromExtn2>
                     </PropertyGroup>
diff --git a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
index 1c9389c162f..378c4394b36 100644
--- a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
@@ -115,7 +117,7 @@ public void RemoveShouldPreserveIntermediaryReferences(string content)
             ObjectModelHelpers.AssertItems(new[] { "a", "b", "c" }, itemsForI, expectedMetadata);
 
             var itemsForI2 = items.Where(i => i.ItemType == "i2").ToList();
-            ObjectModelHelpers.AssertItems(new string[0], itemsForI2);
+            ObjectModelHelpers.AssertItems(Array.Empty<string>(), itemsForI2);
         }
 
         [Fact]
@@ -490,7 +492,7 @@ public void MultipleInterItemDependenciesOnSameItemOperation()
                 {"m", "i1"}
             };
 
-            //i1 items: i1_1; i1_3; i1_4; i1_6
+            // i1 items: i1_1; i1_3; i1_4; i1_6
             var i1Metadata = new Dictionary<string, string>[]
             {
                 i1BaseMetadata,
@@ -502,7 +504,7 @@ public void MultipleInterItemDependenciesOnSameItemOperation()
             var i1Items = items.Where(i => i.ItemType == "i1").ToList();
             ObjectModelHelpers.AssertItems(new[] { "i1_1", "i1_3", "i1_4", "i1_6" }, i1Items, i1Metadata);
 
-            //i2 items: i1_1; i1_2; i1_3
+            // i2 items: i1_1; i1_2; i1_3
             var i2Metadata = new Dictionary<string, string>[]
             {
                 new Dictionary<string, string>
@@ -516,7 +518,7 @@ public void MultipleInterItemDependenciesOnSameItemOperation()
             var i2Items = items.Where(i => i.ItemType == "i2").ToList();
             ObjectModelHelpers.AssertItems(new[] { "i1_1", "i1_2", "i1_3" }, i2Items, i2Metadata);
 
-            //i3 items: i1_1; i1_2; i1_4
+            // i3 items: i1_1; i1_2; i1_4
             var i3Items = items.Where(i => i.ItemType == "i3").ToList();
             ObjectModelHelpers.AssertItems(new[] { "i1_1", "i1_2", "i1_4" }, i3Items, i1BaseMetadata);
 
@@ -529,8 +531,8 @@ public void LongIncludeChain()
         {
             const int INCLUDE_COUNT = 10000;
 
-            //  This was about the minimum count needed to repro a StackOverflowException
-            //const int INCLUDE_COUNT = 4000;
+            // This was about the minimum count needed to repro a StackOverflowException
+            // const int INCLUDE_COUNT = 4000;
 
             StringBuilder content = new StringBuilder();
             for (int i = 0; i < INCLUDE_COUNT; i++)
diff --git a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
index f0564b0dcba..0923131def0 100644
--- a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
@@ -16,6 +16,8 @@
     Microsoft.Build.Evaluation.Expander<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance>;
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Evaluation
 {
     public class ItemSpec_Tests
diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index 3f42d9bd664..c8999cb6d79 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Framework;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Preprocessor
 {
     /// <summary>
@@ -984,7 +986,7 @@ public void SdkResolverItemsAndPropertiesAreInPreprocessedOutput()
 
                 string actual = writer.ToString();
 
-                //  File names for the projects including the properties and items from the SDK resolvers are based on a hash of
+                // File names for the projects including the properties and items from the SDK resolvers are based on a hash of
                 //  the values, so look up the filename here.
                 //  Sample filename: projectPath + ".SdkResolver.-171948414.proj"
                 var virtualImport = project.Imports.First(i => i.ImportedProject.FullPath.StartsWith(projectPath + ".SdkResolver"));
diff --git a/src/Build.UnitTests/Evaluation/ProjectCollection_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectCollection_Tests.cs
index db0b10e31c6..280ca20b09b 100644
--- a/src/Build.UnitTests/Evaluation/ProjectCollection_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectCollection_Tests.cs
@@ -2,6 +2,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     public class ProjectCollection_Tests
diff --git a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
index 94d96427465..7b82202bd2d 100644
--- a/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectRootElementCache_Tests.cs
@@ -12,6 +12,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Evaluation
 {
     /// <summary>
@@ -80,7 +82,7 @@ public void AddEntry()
         /// Tests that a strong reference is held to a single item
         /// </summary>
         [Fact]
-        //  This test fails on .NET Core and Mono: https://github.com/dotnet/msbuild/issues/282
+        // This test fails on .NET Core and Mono: https://github.com/dotnet/msbuild/issues/282
         [Trait("Category", "non-mono-tests")]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "https://github.com/dotnet/msbuild/issues/282")]
         public void AddEntryStrongReference()
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index a25dec785b1..59b589aa3d8 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -21,6 +21,8 @@
 using SdkResultFactory = Microsoft.Build.Framework.SdkResultFactory;
 using SdkReferencePropertyExpansionMode = Microsoft.Build.Framework.EscapeHatches.SdkReferencePropertyExpansionMode;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Construction
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
index dc5bca68248..ab9bfe05035 100644
--- a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Evaluation
 {
     /// <summary>
@@ -42,26 +44,11 @@ Item group content
                 ProjectStringCache cache = new ProjectStringCache();
                 XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
                 document1.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document1.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document1.Load(xmlReader);
-                }
-#endif
 
                 XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
                 document2.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document2.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document2.Load(xmlReader);
-                }
-#endif
 
                 XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
                 XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
@@ -107,26 +94,11 @@ Item group content
                 ProjectStringCache cache = new ProjectStringCache();
                 XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
                 document1.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document1.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document1.Load(xmlReader);
-                }
-#endif
 
                 XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
                 document2.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document2.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document2.Load(xmlReader);
-                }
-#endif
 
                 string outerXml1 = document1.OuterXml;
                 string outerXml2 = document2.OuterXml;
@@ -196,15 +168,7 @@ public void RemovingFilesRemovesEntries()
                 ProjectRootElement pre1 = ProjectRootElement.Create(collection);
                 pre1.XmlDocument.StringCache = cache;
                 pre1.FullPath = path;
-#if FEATURE_XML_LOADPATH
                 pre1.XmlDocument.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    pre1.XmlDocument.Load(xmlReader);
-                }
-#endif
 
                 entryCount = cache.Count;
                 Assert.True(entryCount > 0);
@@ -212,14 +176,7 @@ public void RemovingFilesRemovesEntries()
                 ProjectRootElement pre2 = ProjectRootElement.Create(collection);
                 pre2.XmlDocument.StringCache = cache;
                 pre2.FullPath = path;
-#if FEATURE_XML_LOADPATH
                 pre2.XmlDocument.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    pre2.XmlDocument.Load(xmlReader);
-                }
-#endif
 
                 // Entry count should not have changed
                 Assert.Equal(entryCount, cache.Count);
@@ -284,7 +241,7 @@ public void AddReturnsSameInstanceForSameDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
 
             string return2 = cache.Add(builder.ToString(), document);
 
@@ -318,7 +275,7 @@ public void AddReturnsSameInstanceForDifferentDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document2 = new XmlDocument();
 
             string return2 = cache.Add(builder.ToString(), document2);
@@ -360,7 +317,7 @@ public void RemoveLastInstanceDeallocatesEntry()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document2 = new XmlDocument();
 
             string return2 = cache.Add(builder.ToString(), document2);
@@ -397,7 +354,7 @@ public void RemoveOneInstance()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document3 = new XmlDocument();
 
             string return3 = cache.Add(builder.ToString(), document3);
@@ -432,7 +389,7 @@ public void DifferentStringsSameDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("2");
+            builder.Append('2');
             string return3 = cache.Add(builder.ToString(), document);
 
             // The new string should be the same as the other one already in the collection.
@@ -466,7 +423,7 @@ public void DifferentStringsDifferentDocuments()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("2");
+            builder.Append('2');
             XmlDocument document3 = new XmlDocument();
             string return3 = cache.Add(builder.ToString(), document3);
 
diff --git a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
index e40e6a6d93a..3584cd1a2b2 100644
--- a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
@@ -15,6 +15,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     public class SdkResultEvaluation_Tests : IDisposable
@@ -340,7 +342,7 @@ public void SdkResolverCanReturnMultiplePaths(bool includePropertiesAndItems)
             _logger.WarningCount.ShouldBe(0);
         }
 
-        //  When two different SdkResults (ie from the Sdk.props and Sdk.targets imports) return the same combination of items / properties:
+        // When two different SdkResults (ie from the Sdk.props and Sdk.targets imports) return the same combination of items / properties:
         //  - Test that there aren't warnings for duplicate imports
         //  - Test that items from resolver are duplicated in final evaluation result
         [Fact]
@@ -414,7 +416,7 @@ public void SdkResolverCanReturnTheSamePropertiesAndItemsMultipleTimes()
         [Fact]
         public void SdkResolverCanReturnSpecialCharacters()
         {
-            //  %3B - semicolon
+            // %3B - semicolon
             //  %24 - $
             //  %0A - LF
 
diff --git a/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs b/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
index 68334db169b..18442c49de2 100644
--- a/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SemiColonTokenizer_Tests.cs
@@ -6,6 +6,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     public class SemiColonTokenizer_Tests
diff --git a/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
index 28fd32be143..05ee16eecac 100644
--- a/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Evaluation
 {
     public class SimpleProjectRootElementCache_Tests : IDisposable
diff --git a/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs b/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
index 7c08340bcf3..55f05760f31 100644
--- a/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SimpleVersion_Tests.cs
@@ -9,6 +9,8 @@
 using System.Collections.Generic;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     public class SimpleVersion_Tests
diff --git a/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
index 298cf5ff37f..8c0126af739 100644
--- a/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
@@ -12,6 +12,8 @@
 using System.Collections.Generic;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Evaluation
 {
     /// <summary>
diff --git a/src/Build.UnitTests/EvaluationProfiler_Tests.cs b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
index 94dea5eccbd..68be0395890 100644
--- a/src/Build.UnitTests/EvaluationProfiler_Tests.cs
+++ b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
@@ -16,6 +16,8 @@
 using Xunit.Abstractions;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     /// <summary>
@@ -299,7 +301,7 @@ private ProfilerResult BuildAndGetProfilerResult(string projectContent, bool set
 
                 var buildRequestData = new BuildRequestData(
                     projectInstance,
-                    new string[]{},
+                    Array.Empty<string>(),
                     projectCollection.HostServices);
 
                 var result = _buildManager.Build(parameters, buildRequestData);
diff --git a/src/Build.UnitTests/EventArgsFormatting_Tests.cs b/src/Build.UnitTests/EventArgsFormatting_Tests.cs
index ad415d35bdd..6ab17518cfc 100644
--- a/src/Build.UnitTests/EventArgsFormatting_Tests.cs
+++ b/src/Build.UnitTests/EventArgsFormatting_Tests.cs
@@ -7,6 +7,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -133,7 +135,6 @@ public void NullMessage()
             EventArgsFormatting.FormatEventMessage("error", "CS",
                       null, "312", "source.cs", 233, 236, 4, 8, 0);
             // No exception was thrown
-
         }
     }
 }
diff --git a/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs b/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
index 6c0dd4d9db9..a065e5de133 100644
--- a/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
+++ b/src/Build.UnitTests/ExpressionTreeExpression_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ExpressionTest : IDisposable
diff --git a/src/Build.UnitTests/ExpressionTree_Tests.cs b/src/Build.UnitTests/ExpressionTree_Tests.cs
index 5124da86a6a..7ab7ee1b247 100644
--- a/src/Build.UnitTests/ExpressionTree_Tests.cs
+++ b/src/Build.UnitTests/ExpressionTree_Tests.cs
@@ -15,6 +15,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ExpressionTreeTest
diff --git a/src/Build.UnitTests/FileLogger_Tests.cs b/src/Build.UnitTests/FileLogger_Tests.cs
index 26ec4e89942..96a16735cad 100644
--- a/src/Build.UnitTests/FileLogger_Tests.cs
+++ b/src/Build.UnitTests/FileLogger_Tests.cs
@@ -13,6 +13,8 @@
 using Project = Microsoft.Build.Evaluation.Project;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class FileLogger_Tests
diff --git a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
index 5c8489fc7b6..463d10fb622 100644
--- a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
+++ b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
@@ -4,6 +4,8 @@
 using System.Text.RegularExpressions;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     public class FileUtilitiesRegex_Tests
@@ -11,7 +13,7 @@ public class FileUtilitiesRegex_Tests
         private string _directoryStart = new string(MSBuildConstants.BackslashChar[0], 2);
         private string _altDirectoryStart = new string(MSBuildConstants.ForwardSlash[0], 2);
 
-        //below are the legacy regex used before explcitly checking these patterns to reduce allocations
+        // below are the legacy regex used before explcitly checking these patterns to reduce allocations
 
         // regular expression used to match file-specs comprising exactly "<drive letter>:" (with no trailing characters)
         internal static readonly Regex DrivePattern = new Regex(@"^[A-Za-z]:$", RegexOptions.Compiled);
@@ -523,66 +525,19 @@ public void MatchLengthStartWithUncPatternNoShare()
         }
 
         [Fact]
-        public void UncPatternEmptyString_LegacyRegex()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            UncPattern.IsMatch(winDirectory).ShouldBe(false);
-            UncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void UncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.IsUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.IsUncPattern(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void StartWithUncPatternEmptyString_LegacyRegex()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            StartsWithUncPattern.IsMatch(winDirectory).ShouldBe(false);
-            StartsWithUncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void StartsWithUncPatternEmptyString()
+        public void PatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.StartsWithUncPattern(unixDirectory).ShouldBe(false);
+            UncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.Match(string.Empty).Success.ShouldBeFalse();
         }
 
         [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString_LegacyRegex()
+        public void PatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            var match = StartsWithUncPattern.Match(winDirectory);
-            match.Success.ShouldBeFalse();
-
-            match = StartsWithUncPattern.Match(unixDirectory);
-            match.Success.ShouldBeFalse();
-        }
-
-        [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(winDirectory).ShouldBe(-1);
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(unixDirectory).ShouldBe(-1);
+            FileUtilitiesRegex.IsUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPatternMatchLength(string.Empty).ShouldBe(-1);
         }
     }
 }
diff --git a/src/Build.UnitTests/FixPathOnUnix_Tests.cs b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
index ed0503e230c..01b2865b81e 100644
--- a/src/Build.UnitTests/FixPathOnUnix_Tests.cs
+++ b/src/Build.UnitTests/FixPathOnUnix_Tests.cs
@@ -4,23 +4,25 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     [PlatformSpecific(TestPlatforms.AnyUnix)]
-    public  class FixPathOnUnixTests
+    public class FixPathOnUnixTests
     {
         [Fact]
         public void TestPathFixupInMetadata()
         {
             string buildProjectContents = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <Target Name='Build'>
                         <MSBuild Projects='projectDirectory/main.proj' />
                     </Target>
                </Project>";
 
             string mainProjectContents = @"
-                <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                <Project>
                     <UsingTask TaskName='LogTaskPropertiesTask' AssemblyName='Microsoft.Build.Engine.UnitTests' />
                     <ItemGroup>
                         <Item0 Include='xyz'>
@@ -59,10 +61,10 @@ public override bool Execute()
             {
                 foreach (var item in Items)
                 {
-                    Log.LogMessage ($"Item: {item.ItemSpec}");
+                    Log.LogMessage($"Item: {item.ItemSpec}");
                     foreach (string name in item.MetadataNames)
                     {
-                        Log.LogMessage ($"ItemMetadata: {name} = {item.GetMetadata(name)}");
+                        Log.LogMessage($"ItemMetadata: {name} = {item.GetMetadata(name)}");
                     }
                 }
             }
diff --git a/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs b/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
index ca0efc0d850..c97598d2dcd 100644
--- a/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/CompositeGlob_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Globbing.Extensions;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Globbing
 {
     public class CompositeGlobTests
@@ -171,4 +173,4 @@ public void CreateShouldReturnNewCompositeWhenMultipleProvided()
             Assert.Equal(2, composite.Globs.Count());
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/Globbing/MSBuildGlobWithGaps_Tests.cs b/src/Build.UnitTests/Globbing/MSBuildGlobWithGaps_Tests.cs
index fd742516500..d943538c805 100644
--- a/src/Build.UnitTests/Globbing/MSBuildGlobWithGaps_Tests.cs
+++ b/src/Build.UnitTests/Globbing/MSBuildGlobWithGaps_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Globbing;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Globbing
 {
     public class MSBuildGlobWithGaps_Tests
@@ -34,4 +36,4 @@ public void GlobWithGapsShouldNotMatchIfGapsMatch()
             Assert.False(glob.IsMatch("ab"));
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
index c550d10b888..5cae35dbd70 100644
--- a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Globbing
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
new file mode 100644
index 00000000000..f1a31f7dbe6
--- /dev/null
+++ b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
@@ -0,0 +1,245 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Diagnostics;
+using System.IO;
+using System.Linq;
+using System.Text.RegularExpressions;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+using static Microsoft.Build.Graph.UnitTests.GraphTestingUtilities;
+using static Microsoft.Build.Graph.UnitTests.ProjectGraphTests;
+
+#nullable disable
+
+namespace Microsoft.Build.Graph.UnitTests
+{
+    /// <summary>
+    /// Performs SetPlatform negotiation for all project references when opted
+    /// in via the EnableDynamicPlatformResolution property.
+    /// 
+    /// The static graph mirrors the negotiation during build to determine plartform for each node.
+    /// These tests mirror GetCompatiblePlatform_Tests.cs in order to make sure they both are in sync.
+    /// </summary>
+    public class ProjectGraphSetPlatformTests
+    {
+
+        [Fact]
+        public void ValidateSetPlatformOverride()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x64</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                    <SetPlatform>platform=x86</SetPlatform>
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                        <PropertyGroup>
+                                                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                            <Platforms>x64;AnyCPU</Platforms>
+                                                        </PropertyGroup>
+                                                        <ItemGroup>
+                                                            <ProjectReference Include=""$(MSBuildThisFileDirectory)3.proj"" >
+                                                            </ProjectReference>
+                                                        </ItemGroup>
+                                                    </Project>");
+                var proj3 = env.CreateFile("3.proj", @"
+                                                    <Project>
+                                                        <PropertyGroup>
+                                                            <Platforms>AnyCPU;x86</Platforms>
+                                                        </PropertyGroup>
+                                                    </Project>");
+
+
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+                GetFirstNodeWithProjectNumber(graph, 3).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaPlatformLookupTable()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>win32</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;x86;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+                
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x64");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaProjectReferencesPlatformLookupTable()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>win32</Platform>
+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;x86;AnyCPU</Platforms>
+                                                        <PlatformLookupTable>win32=x86</PlatformLookupTable>
+                                                    </PropertyGroup>
+                                                    </Project>");
+               
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaAnyCPUDefault()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>AnyCPU=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("AnyCPU");
+            }
+        }
+
+        [Fact]
+        public void ResolvesViaSamePlatform()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>x86=AnyCPU</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <PlatformLookupTable></PlatformLookupTable>
+                                                        <Platforms>x86;x64;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+             
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties["Platform"].ShouldBe("x86");
+            }
+        }
+
+        [Fact]
+        public void FailsToResolve()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x86</Platform>
+                                                                                                <PlatformLookupTable>AnyCPU=x64</PlatformLookupTable>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <Platforms>x64</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+              
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                // Here we are checking if platform is defined. in this case it should not be since Platorm would be set to the value this project defaults as
+                // in order to avoid dual build errors we remove platform in order to avoid the edge case where a project has global platform set and does not have global platform set
+                // yet still default to the same platform.
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties.ContainsKey("Platform").ShouldBeFalse();
+            }
+        }
+
+        [Fact]
+        public void PlatformIsChosenAsDefault()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+
+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+                                                                                                <Platform>x64</Platform>
+                                                                                            </PropertyGroup>
+                                                                                            <ItemGroup>
+                                                                                                <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
+                                                                                                </ProjectReference>
+                                                                                            </ItemGroup>");
+                var proj2 = env.CreateFile("2.proj", @"
+                                                    <Project>
+                                                    <PropertyGroup>
+                                                        <platform>x64</platform>
+                                                        <Platforms>x86;AnyCPU</Platforms>
+                                                    </PropertyGroup>
+                                                    </Project>");
+              
+                ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue("Platform").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue("Platform"));
+            }
+        }
+    }
+}
diff --git a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
index bed09d043ec..592bec82908 100644
--- a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
+++ b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
@@ -17,6 +17,8 @@
 using static Microsoft.Build.Graph.UnitTests.GraphTestingUtilities;
 using static Microsoft.Build.UnitTests.Helpers;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph.UnitTests
 {
     public class GraphLoadedFromSolutionTests : IDisposable
@@ -260,7 +262,7 @@ public static IEnumerable<object[]> SolutionOnlyDependenciesData
             {
                 yield return new object[]
                 {
-                    new Dictionary<int, int[]> //graph nodes and ProjectReference edges
+                    new Dictionary<int, int[]> // graph nodes and ProjectReference edges
                     {
                         {1, null},
                         {2, null}
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 4bb00a27384..65b1b86965c 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -10,27 +10,29 @@
 using Microsoft.Build.UnitTests;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph.UnitTests
 {
     internal static class GraphTestingUtilities
     {
         public static readonly ImmutableDictionary<string, string> EmptyGlobalProperties = new Dictionary<string, string> {{PropertyNames.IsGraphBuild, "true"}}.ToImmutableDictionary();
 
-        public static readonly string InnerBuildPropertyName = "InnerBuild";
-        public static readonly string InnerBuildPropertiesName = "InnerBuildProperties";
+        public const string InnerBuildPropertyName = "InnerBuild";
+        public const string InnerBuildPropertiesName = "InnerBuildProperties";
 
-        public static readonly string MultitargetingSpecificationPropertyGroup = $@"<PropertyGroup>
+        public const string MultitargetingSpecificationPropertyGroup = $@"<PropertyGroup>
                                                                         <InnerBuildProperty>{InnerBuildPropertyName}</InnerBuildProperty>
                                                                         <InnerBuildPropertyValues>{InnerBuildPropertiesName}</InnerBuildPropertyValues>
                                                                         <{InnerBuildPropertiesName}>a;b</{InnerBuildPropertiesName}>
                                                                      </PropertyGroup>";
-        public static readonly string HardCodedInnerBuildWithMultitargetingSpecification = $@"<PropertyGroup>
+        public const string HardCodedInnerBuildWithMultitargetingSpecification = $@"<PropertyGroup>
                                                                         <InnerBuildProperty>{InnerBuildPropertyName}</InnerBuildProperty>
                                                                         <InnerBuildPropertyValues>{InnerBuildPropertiesName}</InnerBuildPropertyValues>
                                                                         <{InnerBuildPropertyName}>a</{InnerBuildPropertyName}>
                                                                      </PropertyGroup>";
 
-        public static readonly string EnableTransitiveProjectReferencesPropertyGroup = @"<PropertyGroup>
+        public const string EnableTransitiveProjectReferencesPropertyGroup = @"<PropertyGroup>
                                                                                             <AddTransitiveProjectReferencesInStaticGraph>true</AddTransitiveProjectReferencesInStaticGraph>
                                                                                          </PropertyGroup>";
 
diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index 60c0a3500c3..dbd8b9edae1 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph.UnitTests
 {
     public class IsolateProjectsTests : IDisposable
@@ -135,7 +137,7 @@ public IsolateProjectsTests(ITestOutputHelper testOutput)
             {
                 // OSX links /var into /private, which makes Path.GetTempPath() to return "/var..." but Directory.GetCurrentDirectory to return "/private/var..."
                 // this discrepancy fails the msbuild undeclared reference enforcements due to failed path equality checks
-                _env.SetTempPath(Path.Combine(Directory.GetCurrentDirectory(), Guid.NewGuid().ToString("N")), deleteTempDirectory:true);
+                _env.SetTempPath(Path.Combine(Directory.GetCurrentDirectory(), Guid.NewGuid().ToString("N")), deleteTempDirectory: true);
             }
 
             // todo investigate why out of proc builds fail on macos https://github.com/dotnet/msbuild/issues/3915
@@ -282,9 +284,9 @@ public void CacheEnforcementShouldAcceptPreviouslyBuiltReferences(string targetN
 
         [Theory]
         [InlineData(false, "BuildUndeclaredReference")]
-//        [InlineData(false, "BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
+// [InlineData(false, "BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
         [InlineData(true, "BuildUndeclaredReference")]
-//        [InlineData(true, "BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
+// [InlineData(true, "BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
         public void UndeclaredReferenceEnforcementShouldFailOnUndeclaredReference(bool addContinueOnError, string targetName)
         {
             AssertBuild(new[] { targetName },
@@ -301,7 +303,7 @@ public void UndeclaredReferenceEnforcementShouldFailOnUndeclaredReference(bool a
 
         [Theory]
         [InlineData("BuildUndeclaredReference")]
-//        [InlineData("BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
+// [InlineData("BuildUndeclaredReferenceViaTask")] https://github.com/dotnet/msbuild/issues/4385
         public void UndeclaredReferenceEnforcementShouldFailOnPreviouslyBuiltButUndeclaredReferences(string targetName)
         {
             AssertBuild(new[] { targetName },
diff --git a/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs b/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
index 5592f324956..f4251fcde21 100644
--- a/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
+++ b/src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs
@@ -6,6 +6,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph.UnitTests
 {
     public class ParallelWorkSet_Tests
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 94eda2f6168..9e443496105 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -11,12 +11,14 @@
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
-using static Microsoft.Build.Graph.UnitTests.GraphTestingUtilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using static Microsoft.Build.Graph.UnitTests.GraphTestingUtilities;
+
+#nullable disable
 
 namespace Microsoft.Build.Graph.UnitTests
 {
@@ -25,15 +27,15 @@ public class ProjectGraphTests : IDisposable
     {
         private TestEnvironment _env;
 
-        private static readonly string ProjectReferenceTargetsWithMultitargeting = @"<ItemGroup>
-                                                                                        <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
-                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
-                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
-                                                                                     </ItemGroup>";
+        private const string ProjectReferenceTargetsWithMultitargeting = @"<ItemGroup>
+                                                                               <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
+                                                                               <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
+                                                                               <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
+                                                                           </ItemGroup>";
         private static string[] NonOuterBuildTargets = {"AHelperOuter", "AHelperInner", "A"};
         private static string[] OuterBuildTargets = {"AHelperOuter"};
 
-        private static readonly string OuterBuildSpecificationWithProjectReferenceTargets = MultitargetingSpecificationPropertyGroup + ProjectReferenceTargetsWithMultitargeting;
+        private const string OuterBuildSpecificationWithProjectReferenceTargets = MultitargetingSpecificationPropertyGroup + ProjectReferenceTargetsWithMultitargeting;
 
         public ProjectGraphTests(ITestOutputHelper outputHelper)
         {
@@ -79,6 +81,17 @@ public void ConstructionMetricsAreAvailable()
             graph.ConstructionMetrics.EdgeCount.ShouldBe(2);
         }
 
+        [Fact]
+        public void CycleInGraphDoesNotThrowStackOverflowException()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                TransientTestFile entryProject = CreateProjectFile(env, 1, new[] { 2 });
+                CreateProjectFile(env, 2, new[] { 2 }, extraContent: @"<PropertyGroup><UsingMicrosoftNETSdk>true</UsingMicrosoftNETSdk></PropertyGroup>");
+                Should.Throw<CircularDependencyException>(() => new ProjectGraph(entryProject.Path));
+            }
+        }
+
         [Fact]
         public void ConstructWithSingleNodeWithProjectInstanceFactory()
         {
@@ -878,7 +891,7 @@ public void GetTargetListsUsesAllTargetsForNonMultitargetingNodes()
 
                 projectGraph.ProjectNodes.Count.ShouldBe(2);
 
-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string> {"A"});
                 targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
 
                 targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new[] { "A" });
@@ -919,7 +932,7 @@ public void GetTargetsListInnerBuildToInnerBuild()
 
                 projectGraph.ProjectNodes.Count.ShouldBe(2);
 
-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string> {"A"});
                 targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
 
                 targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new[] { "A" });
@@ -953,7 +966,7 @@ public void GetTargetListsFiltersTargetsForOuterAndInnerBuilds()
 
                 projectGraph.ProjectNodes.Count.ShouldBe(4);
 
-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string> {"A"});
 
                 targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
                 var root = GetFirstNodeWithProjectNumber(projectGraph, 1);
@@ -1125,7 +1138,7 @@ public void GetTargetListsForComplexMultitargetingGraph()
 
                 projectGraph.ProjectNodes.Count.ShouldBe(12);
 
-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string> {"A"});
 
                 targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
 
@@ -1711,7 +1724,7 @@ public void InnerBuildAsRootViaGlobalPropertyShouldNotPropagateInnerBuildPropert
             var root = CreateProjectFile(env: _env, projectNumber: 1, projectReferences: new[] {2}, projectReferenceTargets: null, defaultTargets: null, extraContent: MultitargetingSpecificationPropertyGroup).Path;
             CreateProjectFile(env: _env, projectNumber: 2);
 
-            var graph = new ProjectGraph(root, new Dictionary<string, string>{{InnerBuildPropertyName, "foo"}});
+            var graph = new ProjectGraph(root, new Dictionary<string, string> {{InnerBuildPropertyName, "foo"}});
 
             var dot = graph.ToDot();
 
@@ -1776,13 +1789,13 @@ public void InnerBuildsCanHaveSeparateReferences()
 
             innerBuildWithCommonReferences.ProjectReferences.Count.ShouldBe(4);
             var referenceNumbersSet = innerBuildWithCommonReferences.ProjectReferences.Select(r => Path.GetFileNameWithoutExtension(r.ProjectInstance.FullPath)).ToHashSet();
-            referenceNumbersSet.ShouldBeSameIgnoringOrder(new HashSet<string>{"2", "3"});
+            referenceNumbersSet.ShouldBeSameIgnoringOrder(new HashSet<string> {"2", "3"});
 
             var innerBuildWithAdditionalReferences = GetNodesWithProjectNumber(graph, 1).First(n => n.ProjectInstance.GlobalProperties.TryGetValue(InnerBuildPropertyName, out string p) && p == "b");
 
             innerBuildWithAdditionalReferences.ProjectReferences.Count.ShouldBe(8);
             referenceNumbersSet = innerBuildWithAdditionalReferences.ProjectReferences.Select(r => Path.GetFileNameWithoutExtension(r.ProjectInstance.FullPath)).ToHashSet();
-            referenceNumbersSet.ShouldBeSameIgnoringOrder(new HashSet<string>{"2", "3", "4", "5"});
+            referenceNumbersSet.ShouldBeSameIgnoringOrder(new HashSet<string> {"2", "3", "4", "5"});
         }
 
         [Fact]
@@ -1792,7 +1805,7 @@ public void InnerBuildProducedByOuterBuildCanBeReferencedByAnotherNode()
                                                <ProjectReference Include='1.proj' Properties='{InnerBuildPropertyName}=a'/>
                                            </ItemGroup>";
 
-            var additionalGlobalProperties = new Dictionary<string, string>{{"x", "y"}};
+            var additionalGlobalProperties = new Dictionary<string, string> {{"x", "y"}};
 
             var graph = new ProjectGraph(new []
             {
@@ -1831,7 +1844,7 @@ public void StandaloneInnerBuildsCanBeReferencedWithoutOuterBuilds()
             CreateProjectFile(env: _env, projectNumber: 2, projectReferences: new []{3}, projectReferenceTargets: null, defaultTargets: null, extraContent: MultitargetingSpecificationPropertyGroup + $"<PropertyGroup><{InnerBuildPropertyName}>a</{InnerBuildPropertyName}></PropertyGroup>");
             CreateProjectFile(env: _env, projectNumber: 3);
 
-            var additionalGlobalProperties = new Dictionary<string, string>{{"x", "y"}};
+            var additionalGlobalProperties = new Dictionary<string, string> {{"x", "y"}};
 
             var graph = new ProjectGraph(root, additionalGlobalProperties);
 
@@ -1858,7 +1871,7 @@ public void InnerBuildsProducedByOuterBuildsCanBeReferencedByOtherInnerBuilds()
                                                <ProjectReference Include='2.proj' Condition=`'$({InnerBuildPropertyName})' == 'a'` Properties='{InnerBuildPropertyName}=a'/>
                                            </ItemGroup>".Cleanup();
 
-            var additionalGlobalProperties = new Dictionary<string, string>{{"x", "y"}};
+            var additionalGlobalProperties = new Dictionary<string, string> {{"x", "y"}};
 
             var root = CreateProjectFile(
                 env: _env,
@@ -1911,7 +1924,7 @@ public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyDa
             {
                 var globalVariablesArray = new[]
                 {
-                    //todo add null
+                    // todo add null
                     new Dictionary<string, string>(),
                     new Dictionary<string, string>
                     {
@@ -1943,7 +1956,7 @@ public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyDa
                     yield return new object[]
                     {
                         new Dictionary<int, int[]>(),
-                        new int[] {},
+                        Array.Empty<int>(),
                         globalVariables
                     };
 
@@ -2078,7 +2091,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {1, new[] {2, 3, 4}},
                         {2, new[] {3}},
                         {3, new[] {4}},
-                        {4, new int[0]}
+                        {4, Array.Empty<int>()}
                     }
                 };
 
@@ -2143,7 +2156,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {3, new[] {4, 5, 6}},
                         {4, new[] {5}},
                         {5, new[] {6}},
-                        {6, new int[0]},
+                        {6, Array.Empty<int>()},
                     }
                 };
             }
@@ -2219,7 +2232,7 @@ public void TransitiveReferencesShouldNotBeAddedToOuterBuilds()
 
             GetFirstNodeWithProjectNumber(graph, 2).AssertReferencesIgnoringOrder(new []{3, 4, 4, 4, 5, 6, 6, 6});
 
-            GetOuterBuild(graph, 4).AssertReferencesIgnoringOrder(new int[0]);
+            GetOuterBuild(graph, 4).AssertReferencesIgnoringOrder(Array.Empty<int>());
 
             var innerBuilds4 = GetInnerBuilds(graph, 4);
             innerBuilds4.Count.ShouldBe(2);
diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index b5c742d2791..cb40be2fbad 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -20,6 +20,8 @@
 using ExpectedNodeBuildOutput = System.Collections.Generic.Dictionary<Microsoft.Build.Graph.ProjectGraphNode, string[]>;
 using OutputCacheDictionary = System.Collections.Generic.Dictionary<Microsoft.Build.Graph.ProjectGraphNode, string>;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph.UnitTests
 {
     public class ResultCacheBasedBuilds_Tests : IDisposable
diff --git a/src/Build.UnitTests/HashTableUtility_Tests.cs b/src/Build.UnitTests/HashTableUtility_Tests.cs
index db6888967d9..78bd02da31d 100644
--- a/src/Build.UnitTests/HashTableUtility_Tests.cs
+++ b/src/Build.UnitTests/HashTableUtility_Tests.cs
@@ -7,6 +7,8 @@
 
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class HashTableUtilityTests
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index 318d56ef351..f13eb9b32ab 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Xml;
 
 using Microsoft.Build.Evaluation;
@@ -13,6 +14,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -240,19 +243,18 @@ public void TestContradictoryAffinityCausesException_Any()
            );
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Test which ensures that setting an Any affinity for a project with a remote host object does not throws.
         /// </summary>
         [Fact]
-        [SkipOnMono("disable com tests on mono")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void TestNoContradictoryRemoteHostObjectAffinity()
         {
             HostServices hostServices = new HostServices();
             hostServices.RegisterHostObject("project", "target", "task", "moniker");
             hostServices.SetNodeAffinity("project", NodeAffinity.Any);
         }
-#endif
 
         /// <summary>
         /// Test which ensures that setting the InProc affinity for a project with a host object is allowed.
@@ -296,12 +298,12 @@ public void TestNonContraditcoryHostObjectAllowed_Any()
             Assert.Equal(NodeAffinity.InProc, hostServices.GetNodeAffinity("project"));
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Test which ensures the remote host object cannot affect a project which has the Any affinity specifically set.
         /// </summary>
         [Fact]
-        [SkipOnMono("disable com tests on mono")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void TestRegisterRemoteHostObjectNoAffect_Any2()
         {
             HostServices hostServices = new HostServices();
@@ -309,7 +311,6 @@ public void TestRegisterRemoteHostObjectNoAffect_Any2()
             hostServices.RegisterHostObject("project", "target", "task", "moniker");
             hostServices.GetNodeAffinity("project").ShouldBe(NodeAffinity.Any);
         }
-#endif
 
         /// <summary>
         /// Test which ensures the host object can be set for a project which has an out-of-proc affinity only because that affinity
@@ -336,12 +337,12 @@ public void TestNonContraditcoryHostObjectAllowed_InProc()
             hostServices.RegisterHostObject("project", "target", "task", hostObject);
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Test which ensures the affinity for a project can be changed once the in process host object is registered
         /// </summary>
         [Fact]
-        [SkipOnMono("disable com tests on mono")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void TestAffinityChangeAfterRegisterInprocessHostObject()
         {
             HostServices hostServices = new HostServices();
@@ -351,7 +352,6 @@ public void TestAffinityChangeAfterRegisterInprocessHostObject()
             hostServices.RegisterHostObject("project", "target", "task", hostObject);
             hostServices.GetNodeAffinity("project").ShouldBe(NodeAffinity.InProc);
         }
-#endif
 
         /// <summary>
         /// Test which ensures the affinity for a project can be changed once the host object is cleared.
@@ -398,10 +398,10 @@ public void TestProjectInstanceWithNonConflictingHostServices()
             HostServices hostServices = new HostServices();
             ProjectInstance project = CreateDummyProject("foo.proj");
 
-            BuildRequestData data = new BuildRequestData(project, new string[] { }, hostServices);
+            BuildRequestData data = new BuildRequestData(project, Array.Empty<string>(), hostServices);
 
             hostServices.SetNodeAffinity(project.FullPath, NodeAffinity.InProc);
-            BuildRequestData data2 = new BuildRequestData(project, new string[] { }, hostServices);
+            BuildRequestData data2 = new BuildRequestData(project, Array.Empty<string>(), hostServices);
         }
 
         /// <summary>
@@ -447,12 +447,12 @@ public void UnloadedProjectDiscardsHostServices()
             Assert.False(hostServices.HasInProcessHostObject(project2.FullPath));
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Tests that register overrides existing reigsted remote host object.
         /// </summary>
         [Fact]
-        [SkipOnMono("disable com tests on mono")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [SupportedOSPlatform("windows")]
         public void TestRegisterOverrideExistingRegisted()
         {
             var hostServices = new HostServices();
@@ -477,7 +477,6 @@ public void TestRegisterOverrideExistingRegisted()
 
             resultObject.GetState().ShouldBe(2);
         }
-#endif
 
         /// <summary>
         /// Creates a dummy project instance.
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index 6b294012cbb..49c9d3a4db5 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -19,6 +19,8 @@
 using Xunit.Abstractions;
 using static Microsoft.Build.Engine.UnitTests.TestComparers.ProjectInstanceModelTestComparers;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
@@ -42,7 +44,7 @@ public void GetTaskRegistrations()
             try
             {
                 string projectFileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='t0' AssemblyFile='af0'/>
                         <UsingTask TaskName='t1' AssemblyFile='af1a'/>
                         <ItemGroup>
@@ -52,7 +54,7 @@ public void GetTaskRegistrations()
                     </Project>";
 
                 string importContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='t1' AssemblyName='an1' Condition=""'$(p)'=='v'""/>
                         <UsingTask TaskName='t2' AssemblyName='an2' Condition=""'@(i)'=='i0'""/>
                         <UsingTask TaskName='t3' AssemblyFile='af' Condition='false'/>
@@ -89,19 +91,19 @@ public void InitialTargetsDefaultTargets()
             try
             {
                 string projectFileContent = @"
-                    <Project DefaultTargets='d0a;d0b' InitialTargets='i0a;i0b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d0a;d0b' InitialTargets='i0a;i0b'>
                         <Import Project='{0}'/>
                         <Import Project='{1}'/>
                     </Project>";
 
                 string import1Content = @"
-                    <Project DefaultTargets='d1a;d1b' InitialTargets='i1a;i1b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d1a;d1b' InitialTargets='i1a;i1b'>
                         <Import Project='{0}'/>
                     </Project>";
 
-                string import2Content = @"<Project DefaultTargets='d2a;2db' InitialTargets='i2a;i2b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>";
+                string import2Content = @"<Project DefaultTargets='d2a;2db' InitialTargets='i2a;i2b'/>";
 
-                string import3Content = @"<Project DefaultTargets='d3a;d3b' InitialTargets='i3a;i3b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>";
+                string import3Content = @"<Project DefaultTargets='d3a;d3b' InitialTargets='i3a;i3b'/>";
 
                 string import2Path = ObjectModelHelpers.CreateFileInTempProjectDirectory("import2.targets", import2Content);
                 string import3Path = ObjectModelHelpers.CreateFileInTempProjectDirectory("import3.targets", import3Content);
@@ -133,7 +135,7 @@ public void InitialTargetsDefaultTargetsEscaped()
             try
             {
                 string projectFileContent = @"
-                    <Project DefaultTargets='d0a%3bd0b' InitialTargets='i0a%3bi0b' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project DefaultTargets='d0a%3bd0b' InitialTargets='i0a%3bi0b'>
                     </Project>";
 
                 ProjectInstance project = new Project(ProjectRootElement.Create(XmlReader.Create(new StringReader(projectFileContent)))).CreateProjectInstance();
@@ -154,7 +156,7 @@ public void InitialTargetsDefaultTargetsEscaped()
         public void GetPropertyGroupUnderTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <PropertyGroup Condition='c1'>
                                 <p1 Condition='c2'>v1</p1>
@@ -186,12 +188,12 @@ public void GetPropertyGroupUnderTarget()
         public void GetItemGroupUnderTarget()
         {
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <Target Name='t'>
                             <ItemGroup Condition='c1'>
                                 <i Include='i1' Exclude='e1' Condition='c2'>
-                                    <m Condition='c3'>m1</m>    
-                                    <n>n1</n>                        
+                                    <m Condition='c3'>m1</m>
+                                    <n>n1</n>
                                 </i>
                                 <j Remove='r1'/>
                                 <k>
@@ -335,8 +337,8 @@ public void GetSubToolsetVersion()
         }
 
         /// <summary>
-        /// Test ProjectInstance's surfacing of the sub-toolset version when it is overridden by a value in the 
-        /// environment 
+        /// Test ProjectInstance's surfacing of the sub-toolset version when it is overridden by a value in the
+        /// environment
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -388,8 +390,8 @@ public void GetSubToolsetVersion_FromProjectGlobalProperties()
         }
 
         /// <summary>
-        /// Verify that if a sub-toolset version is passed to the constructor, it all other heuristic methods for 
-        /// getting the sub-toolset version. 
+        /// Verify that if a sub-toolset version is passed to the constructor, it all other heuristic methods for
+        /// getting the sub-toolset version.
         /// </summary>
         [Fact]
         public void GetSubToolsetVersion_FromConstructor()
@@ -400,7 +402,7 @@ public void GetSubToolsetVersion_FromConstructor()
             {
                 Environment.SetEnvironmentVariable("VisualStudioVersion", "ABC");
 
-                string projectContent = @"<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                string projectContent = @"<Project>
                         <Target Name='t'>
                             <Message Text='Hello'/>
                         </Target>
@@ -530,7 +532,7 @@ public void CloneToolsVersion()
 
             Assert.Equal(first.Toolset, second.Toolset);
         }
-        
+
         /// <summary>
         /// Cloning project copies toolsversion
         /// </summary>
@@ -557,7 +559,7 @@ public void Build()
             Directory.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
             string projectFileContent = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+                    <Project>
                         <UsingTask TaskName='Microsoft.Build.Tasks.Message' AssemblyFile='Microsoft.Build.Tasks.Core.dll'/>
                         <ItemGroup>
                             <i Include='i0'/>
@@ -681,7 +683,7 @@ public void ProjectInstanceCanSerializeEntireStateViaTranslator(string projectCo
 
             original.TranslateEntireState = true;
 
-            ((ITranslatable) original).Translate(TranslationHelpers.GetWriteTranslator());
+            ((ITranslatable)original).Translate(TranslationHelpers.GetWriteTranslator());
             var copy = ProjectInstance.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
             Assert.Equal(original, copy, new ProjectInstanceComparer());
@@ -890,7 +892,7 @@ private static ProjectInstance GetProjectInstance(string content, HostServices h
 
             if (globalProperties == null)
             {
-                // choose some interesting defaults if we weren't explicitly asked to use a set. 
+                // choose some interesting defaults if we weren't explicitly asked to use a set.
                 globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 globalProperties.Add("g1", "v1");
                 globalProperties.Add("g2", "v2");
@@ -926,7 +928,7 @@ private static ProjectInstance GetSampleProjectInstance(HostServices hostService
         {
             string toolsVersionSubstring = toolsVersion != null ? "ToolsVersion=\"" + toolsVersion + "\" " : String.Empty;
             string content = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' InitialTargets='it' DefaultTargets='dt' " + toolsVersionSubstring + @">
+                    <Project InitialTargets='it' DefaultTargets='dt' " + toolsVersionSubstring + @">
                         <PropertyGroup>
                             <p1>v1</p1>
                             <p2>v2</p2>
diff --git a/src/Build.UnitTests/Instance/ProjectItemGroupTaskItemInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectItemGroupTaskItemInstance_Internal_Tests.cs
index 3d93f0efdc5..2ce98e6f74d 100644
--- a/src/Build.UnitTests/Instance/ProjectItemGroupTaskItemInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectItemGroupTaskItemInstance_Internal_Tests.cs
@@ -10,6 +10,8 @@
 using static Microsoft.Build.Engine.UnitTests.TestComparers.ProjectInstanceModelTestComparers;
 using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Instance
 {
     public class ProjectItemGroupTaskItemInstance_Internal_Tests
diff --git a/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
index a887dfb4c42..98816c8f4c3 100644
--- a/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectMetadataInstance_Internal_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Instance/ProjectPropertyGroupTaskPropertyInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectPropertyGroupTaskPropertyInstance_Internal_Tests.cs
index 15128123a9e..3b7790a1104 100644
--- a/src/Build.UnitTests/Instance/ProjectPropertyGroupTaskPropertyInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectPropertyGroupTaskPropertyInstance_Internal_Tests.cs
@@ -9,6 +9,8 @@
 
 using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Instance
 {
     public class ProjectPropertyGroupTaskPropertyInstance_Internal_Tests
diff --git a/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
index fc286c5d9ca..97c471392b4 100644
--- a/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectPropertyInstance_Internal_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
     /// <summary>
diff --git a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
index df74f7c9cca..924d55be3f5 100644
--- a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
@@ -10,6 +10,8 @@
 using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 using static Microsoft.Build.Engine.UnitTests.TestComparers.ProjectInstanceModelTestComparers;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Instance
 {
     public class ProjectTargetInstance_Internal_Tests
@@ -26,8 +28,8 @@ public static IEnumerable<object[]> TargetChildrenTestData
 
                 yield return new object[]
                 {
-                    new ReadOnlyCollection<ProjectTargetInstanceChild>(new ProjectTargetInstanceChild[0]),
-                    new ReadOnlyCollection<ProjectOnErrorInstance>(new ProjectOnErrorInstance[0])
+                    new ReadOnlyCollection<ProjectTargetInstanceChild>(System.Array.Empty<ProjectTargetInstanceChild>()),
+                    new ReadOnlyCollection<ProjectOnErrorInstance>(System.Array.Empty<ProjectOnErrorInstance>())
                 };
 
                 yield return new object[]
diff --git a/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
index b500df91717..0c32202a0a8 100644
--- a/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTaskInstance_Internal_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using static Microsoft.Build.Engine.UnitTests.TestData.ProjectInstanceTestObjects;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Instance
 {
     public class ProjectTaskInstance_Internal_Tests
diff --git a/src/Build.UnitTests/Instance/TaskItem_Tests.cs b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
index 50b4dd3b487..0920d71c8df 100644
--- a/src/Build.UnitTests/Instance/TaskItem_Tests.cs
+++ b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
@@ -1,6 +1,7 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Construction;
@@ -9,8 +10,14 @@
 using System.Xml;
 using Microsoft.Build.Framework;
 using System.IO;
+using System.Linq;
 using Xunit;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
+using Shouldly;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.OM.Instance
 {
@@ -19,6 +26,25 @@ namespace Microsoft.Build.UnitTests.OM.Instance
     /// </summary>
     public class TaskItem_Tests
     {
+        internal static readonly string[] s_builtInMetadataNames =
+        {
+            "FullPath",
+            "RootDir",
+            "Filename",
+            "Extension",
+            "RelativeDir",
+            "Directory",
+            "RecursiveDir",
+            "Identity",
+            "ModifiedTime",
+            "CreatedTime",
+            "AccessedTime",
+            "DefiningProjectFullPath",
+            "DefiningProjectDirectory",
+            "DefiningProjectName",
+            "DefiningProjectExtension"
+        };
+
         /// <summary>
         /// Test serialization
         /// </summary>
@@ -59,7 +85,7 @@ public void TestEquivalence()
             TaskItem right = new TaskItem("foo", "bar.proj");
 
             Assert.Equal(left, right);
-            Assert.Equal(left, right);
+            Assert.Equal(right, left);
         }
 
         /// <summary>
@@ -74,7 +100,7 @@ public void TestEquivalenceWithCustomMetadata()
             right.SetMetadata("a", "b");
 
             Assert.Equal(left, right);
-            Assert.Equal(left, right);
+            Assert.Equal(right, left);
         }
 
         /// <summary>
@@ -89,7 +115,7 @@ public void TestInequivalenceWithDifferentCustomMetadataValues()
             right.SetMetadata("a", "c");
 
             Assert.NotEqual(left, right);
-            Assert.NotEqual(left, right);
+            Assert.NotEqual(right, left);
         }
 
         /// <summary>
@@ -104,7 +130,7 @@ public void TestInequivalenceWithDifferentCustomMetadataKeys()
             right.SetMetadata("b", "b");
 
             Assert.NotEqual(left, right);
-            Assert.NotEqual(left, right);
+            Assert.NotEqual(right, left);
         }
 
         /// <summary>
@@ -118,7 +144,7 @@ public void TestInequivalenceWithDifferentCustomMetadataCount()
             TaskItem right = new TaskItem("foo", "bar.proj");
 
             Assert.NotEqual(left, right);
-            Assert.NotEqual(left, right);
+            Assert.NotEqual(right, left);
         }
 
         /// <summary>
@@ -134,7 +160,7 @@ public void TestInequivalenceWithDifferentCustomMetadataCount2()
             right.SetMetadata("c", "d");
 
             Assert.NotEqual(left, right);
-            Assert.NotEqual(left, right);
+            Assert.NotEqual(right, left);
         }
 
         /// <summary>
@@ -149,9 +175,65 @@ public void TestDeepClone()
 
             TaskItem clone = parent.DeepClone();
             Assert.True(parent.Equals(clone)); // "The parent and the clone should be equal"
+            Assert.True(clone.Equals(parent)); // "The parent and the clone should be equal"
             Assert.False(object.ReferenceEquals(parent, clone)); // "The parent and the child should not be the same object"
         }
 
+        /// <summary>
+        /// Validate the presentation of metadata on a TaskItem, both of direct values and those inherited from
+        /// item definitions.
+        /// </summary>
+        [Fact]
+        public void Metadata()
+        {
+            TaskItem item = BuildItem(
+                definitions: new[] { ("a", "base"), ("b", "base") },
+                metadata: new[] { ("a", "override") });
+
+            item.MetadataNames.Cast<string>().ShouldBeSetEquivalentTo(new[] { "a", "b" }.Concat(s_builtInMetadataNames));
+            item.MetadataCount.ShouldBe(s_builtInMetadataNames.Length + 2);
+            item.DirectMetadataCount.ShouldBe(1);
+
+            CopyOnWritePropertyDictionary<ProjectMetadataInstance> metadata = item.MetadataCollection;
+            metadata.Count.ShouldBe(2);
+            metadata["a"].EvaluatedValue.ShouldBe("override");
+            metadata["b"].EvaluatedValue.ShouldBe("base");
+
+            item.EnumerateMetadata().ShouldBeSetEquivalentTo(new KeyValuePair<string, string>[] { new("a", "override"), new("b", "base") });
+
+            ((Dictionary<string, string>)item.CloneCustomMetadata()).ShouldBeSetEquivalentTo(new KeyValuePair<string, string>[] { new("a", "override"), new("b", "base") });
+
+            static TaskItem BuildItem(
+                IEnumerable<(string Name, string Value)> definitions = null,
+                IEnumerable<(string Name, string Value)> metadata = null)
+            {
+                List<ProjectItemDefinitionInstance> itemDefinitions = new();
+                if (definitions is not null)
+                {
+                    Project project = new();
+
+                    foreach ((string name, string value) in definitions)
+                    {
+                        ProjectItemDefinition projectItemDefinition = new ProjectItemDefinition(project, "MyItem");
+                        projectItemDefinition.SetMetadataValue(name, value);
+                        ProjectItemDefinitionInstance itemDefinition = new(projectItemDefinition);
+                        itemDefinitions.Add(itemDefinition);
+                    }
+                }
+
+                CopyOnWritePropertyDictionary<ProjectMetadataInstance> directMetadata = new();
+                if (metadata is not null)
+                {
+                    foreach ((string name, string value) in metadata)
+                    {
+                        directMetadata.Set(new(name, value));
+                    }
+                }
+
+                return new TaskItem("foo", "foo", directMetadata, itemDefinitions, "dir", immutable: false, "bar.proj");
+            }
+        }
+
         /// <summary>
         /// Flushing an item through a task should not mess up special characters on the metadata. 
         /// </summary>
@@ -196,7 +278,7 @@ public void Escaping1()
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
-            project.Build("Build", new ILogger[] { logger });
+            project.Build("Build", new ILogger[] { logger }).ShouldBeTrue();
 
             logger.AssertLogContains("[i1m1]");
             logger.AssertLogContains("[i1m2]");
@@ -253,7 +335,7 @@ public void Escaping2()
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
-            project.Build("Build", new ILogger[] { logger });
+            project.Build("Build", new ILogger[] { logger }).ShouldBeTrue();
 
             logger.AssertLogContains("[i1m1]");
             logger.AssertLogContains("[i1m2]");
@@ -291,7 +373,7 @@ public void Escaping3()
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
-            project.Build("Build", new ILogger[] { logger });
+            project.Build("Build", new ILogger[] { logger }).ShouldBeTrue();
 
             logger.AssertLogContains("i1%2ai2");
         }
diff --git a/src/Build.UnitTests/InternalEngineHelpers.cs b/src/Build.UnitTests/InternalEngineHelpers.cs
index aa0ae0c34be..92a24a8f03d 100644
--- a/src/Build.UnitTests/InternalEngineHelpers.cs
+++ b/src/Build.UnitTests/InternalEngineHelpers.cs
@@ -18,6 +18,8 @@
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 using SdkResultFactory = Microsoft.Build.Framework.SdkResultFactory;
 
+#nullable disable
+
 namespace Microsoft.Build.Unittest
 {
     internal static class SdkUtilities
diff --git a/src/Build.UnitTests/InvalidProjectFileException_Tests.cs b/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
index 9c302ec2efa..a5b3fd5652c 100644
--- a/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
+++ b/src/Build.UnitTests/InvalidProjectFileException_Tests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class InvalidProjectFileExceptionTests
diff --git a/src/Build.UnitTests/LogFormatter_Tests.cs b/src/Build.UnitTests/LogFormatter_Tests.cs
index 74d6744d2b0..612088969b8 100644
--- a/src/Build.UnitTests/LogFormatter_Tests.cs
+++ b/src/Build.UnitTests/LogFormatter_Tests.cs
@@ -6,6 +6,8 @@
 using System.Globalization;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class LogFormatterTest
diff --git a/src/Build.UnitTests/LoggerDescription_Tests.cs b/src/Build.UnitTests/LoggerDescription_Tests.cs
index ceae5ff707c..864522ae43c 100644
--- a/src/Build.UnitTests/LoggerDescription_Tests.cs
+++ b/src/Build.UnitTests/LoggerDescription_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Microsoft.Build.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class LoggerDescription_Tests
diff --git a/src/Build.UnitTests/LoggerException_Tests.cs b/src/Build.UnitTests/LoggerException_Tests.cs
index 79dafa6e0e3..1e66dff1800 100644
--- a/src/Build.UnitTests/LoggerException_Tests.cs
+++ b/src/Build.UnitTests/LoggerException_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using System.Runtime.Serialization.Formatters.Binary;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class InternalLoggerExceptionTests
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index 95001217b5d..8ddca6108ac 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -36,9 +36,9 @@
     <ProjectReference Include="..\Samples\TaskWithDependency\TaskWithDependency.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="TaskWithDependencyResolvedProjectReferencePath">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
-      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=netstandard2.0</SetTargetFramework>
+      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=net6.0</SetTargetFramework>
     </ProjectReference>
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" SetTargetFramework="TargetFramework=netstandard2.0" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" />
 
     <ProjectReference Include="..\Samples\ProjectCachePlugin\ProjectCachePlugin.csproj" Private="false" ReferenceOutputAssembly="false">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
diff --git a/src/Build.UnitTests/MockElementLocation.cs b/src/Build.UnitTests/MockElementLocation.cs
index 7ea1cd9825f..313a245c4c8 100644
--- a/src/Build.UnitTests/MockElementLocation.cs
+++ b/src/Build.UnitTests/MockElementLocation.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -66,4 +68,4 @@ internal static MockElementLocation Instance
             get { return s_instance; }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/MockLoggingContext.cs b/src/Build.UnitTests/MockLoggingContext.cs
index 4ce200fdc10..17fb2a448d4 100644
--- a/src/Build.UnitTests/MockLoggingContext.cs
+++ b/src/Build.UnitTests/MockLoggingContext.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     /// <summary>
diff --git a/src/Build.UnitTests/MockTask.cs b/src/Build.UnitTests/MockTask.cs
index 929243a2859..b09930be051 100644
--- a/src/Build.UnitTests/MockTask.cs
+++ b/src/Build.UnitTests/MockTask.cs
@@ -8,6 +8,8 @@
 
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     internal class MockTaskBase
diff --git a/src/Build.UnitTests/Parser_Tests.cs b/src/Build.UnitTests/Parser_Tests.cs
index 3c426bfb38c..bc7efd3b6ef 100644
--- a/src/Build.UnitTests/Parser_Tests.cs
+++ b/src/Build.UnitTests/Parser_Tests.cs
@@ -9,6 +9,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ParserTest
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index c994edab0ff..ed4766f5450 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
@@ -35,7 +34,7 @@ public ProjectCacheTests(ITestOutputHelper output)
             _env = TestEnvironment.Create(output);
 
             BuildManager.ProjectCacheItems.ShouldBeEmpty();
-            _env.WithInvariant(new CustomConditionInvariant(() => BuildManager.ProjectCacheItems.Count == 0));
+            _env.WithInvariant(new CustomConditionInvariant(() => BuildManager.ProjectCacheItems.IsEmpty));
         }
 
         public void Dispose()
@@ -43,7 +42,7 @@ public void Dispose()
             _env.Dispose();
         }
 
-        private static readonly string AssemblyMockCache = nameof(AssemblyMockCache);
+        private const string AssemblyMockCache = nameof(AssemblyMockCache);
 
         private static readonly Lazy<string> SamplePluginAssemblyPath =
             new Lazy<string>(
@@ -160,7 +159,7 @@ public CacheResult GetExpectedCacheResultForProjectNumber(int projectNumber)
 
             public override string ToString()
             {
-                //return base.ToString();
+                // return base.ToString();
                 return string.Join(
                     ", ",
                     GraphEdges.Select(e => $"{Node(e.Key)}->{FormatChildren(e.Value)}"));
@@ -306,7 +305,7 @@ public override async Task<CacheResult> GetCacheResultAsync(
 
                 if (_projectQuerySleepTime is not null)
                 {
-                    await Task.Delay(_projectQuerySleepTime.Value);
+                    await Task.Delay(_projectQuerySleepTime.Value, cancellationToken);
                 }
 
                 QueryStartStops.Enqueue(queryId);
@@ -481,7 +480,7 @@ public void ProjectCacheByBuildParametersAndGraphBuildWorks(GraphCacheResponse t
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Theory]
@@ -519,7 +518,7 @@ public void ProjectCacheByBuildParametersAndBottomUpBuildWorks(GraphCacheRespons
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, nodesToBuildResults);
+            AssertCacheBuild(graph, testData, mockCache, buildSession.Logger, nodesToBuildResults, targets: null);
         }
 
         [Theory]
@@ -538,7 +537,7 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
 
             graph.ShouldNotBeNull();
 
-            AssertCacheBuild(graph!, testData, null, logger, nodesToBuildResults);
+            AssertCacheBuild(graph!, testData, null, logger, nodesToBuildResults, targets: null);
         }
 
         [Fact]
@@ -660,7 +659,6 @@ public void ProjectCacheByVsWorkaroundShouldNotSupportSolutionOnlyDependencies()
                 if (assertBuildResults)
                 {
                     logger.FullLog.ShouldContain("Visual Studio Workaround based");
-                    logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
 
                     foreach (var node in graph.ProjectNodes)
                     {
@@ -837,7 +835,6 @@ public void RunningProxyBuildsOnOutOfProcNodesShouldIssueWarning(bool disableInp
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
             buildSession.Logger.AssertMessageCount("MSB4274", 1);
-
         }
 
         private void AssertCacheBuild(
@@ -845,7 +842,8 @@ private void AssertCacheBuild(
             GraphCacheResponse testData,
             InstanceMockCache? instanceMockCache,
             MockLogger mockLogger,
-            IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults)
+            IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults,
+            string? targets)
         {
             if (instanceMockCache != null)
             {
@@ -868,7 +866,14 @@ private void AssertCacheBuild(
             {
                 var expectedCacheResponse = testData.GetExpectedCacheResultForNode(node);
 
-                mockLogger.FullLog.ShouldContain($"====== Querying project cache for project {node.ProjectInstance.FullPath}");
+                if (string.IsNullOrEmpty(targets))
+                {
+                    mockLogger.FullLog.ShouldContain(string.Format(ResourceUtilities.GetResourceString("ProjectCacheQueryStartedWithDefaultTargets"), node.ProjectInstance.FullPath));
+                }
+                else
+                {
+                    mockLogger.FullLog.ShouldContain(string.Format(ResourceUtilities.GetResourceString("ProjectCacheQueryStartedWithTargetNames"), node.ProjectInstance.FullPath, targets));
+                }
 
                 if (instanceMockCache != null)
                 {
@@ -1011,7 +1016,7 @@ public void CacheViaBuildParametersCanDiscoverAndLoadPluginFromAssembly()
 
             buildSession.Logger.FullLog.ShouldContain("Explicit entry-point based");
 
-            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Fact]
@@ -1034,7 +1039,7 @@ public void GraphBuildCanDiscoverAndLoadPluginFromAssembly()
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
-            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode);
+            AssertCacheBuild(graph, testData, null, buildSession.Logger, graphResult.ResultsByNode, targets: "Build");
         }
 
         [Fact]
@@ -1296,8 +1301,8 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ErrorLocati
                 {
                     {1, new []{2}}
                 },
-                extraContentPerProjectNumber:null,
-                extraContentForAllNodes:@$"
+                extraContentPerProjectNumber: null,
+                extraContentForAllNodes: @$"
 <ItemGroup>
     <{ItemTypeNames.ProjectCachePlugin} Include=`{SamplePluginAssemblyPath.Value}` />
     <{ItemTypeNames.ProjectReferenceTargets} Include=`Build` Targets=`Build` />
@@ -1497,7 +1502,7 @@ Task<BuildResult> BuildProjectFileAsync(int projectNumber)
         [Theory]
         [InlineData(false, false)]
         // TODO: Reenable when this gets into the main branch.
-        //[InlineData(true, true)]
+        // [InlineData(true, true)]
         public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool disableInprocNode)
         {
             var currentBuildEnvironment = BuildEnvironmentHelper.Instance;
@@ -1569,7 +1574,6 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                 StringShouldContainSubstring(buildSession.Logger.FullLog, $"{AssemblyMockCache}: GetCacheResultAsync for", graph.ProjectNodes.Count);
 
                 buildSession.Logger.FullLog.ShouldContain("Visual Studio Workaround based");
-                buildSession.Logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
             }
             finally
             {
diff --git a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
index 93c1af36e9d..7a3b0875d84 100644
--- a/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
+++ b/src/Build.UnitTests/ProjectEvaluationFinishedEventArgs_Tests.cs
@@ -12,11 +12,13 @@
 using Microsoft.Build.UnitTests.BackEnd;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
-    //  Although this tests the ProfilerResult API from Microsoft.Build.Framework, it uses the
+    // Although this tests the ProfilerResult API from Microsoft.Build.Framework, it uses the
     //  construction APIs in Microsoft.Build in the test, so this test is in the Microsoft.Build tests
-    public class ProjectEvaluationFinishedEventArgs_Tests 
+    public class ProjectEvaluationFinishedEventArgs_Tests
     {
         /// <summary>
         /// Roundtrip serialization tests for <see cref="ProfilerResult"/>
@@ -50,7 +52,7 @@ public static IEnumerable<object[]> GetProfilerResults()
 
             var element = new ProjectRootElement(
                 XmlReader.Create(new MemoryStream(Encoding.UTF8.GetBytes(
-                    "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"/>"))),
+                    "<Project />"))),
                 new ProjectRootElementCache(false), false, false);
 
             yield return new object[] { new ProfilerResult(new Dictionary<EvaluationLocation, ProfiledLocation>
diff --git a/src/Build.UnitTests/Scanner_Tests.cs b/src/Build.UnitTests/Scanner_Tests.cs
index 8fb33e821cd..ae6880ac5bd 100644
--- a/src/Build.UnitTests/Scanner_Tests.cs
+++ b/src/Build.UnitTests/Scanner_Tests.cs
@@ -13,6 +13,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ScannerTest
@@ -131,24 +133,6 @@ public void SpaceInMiddleOfProperty(string pattern)
             lexer._errorState.ShouldBeFalse();
         }
 
-        [Fact]
-        public void SpacePropertyOptOutWave16_10()
-        {
-            using TestEnvironment env = TestEnvironment.Create();
-            ChangeWaves.ResetStateForTests();
-            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-            Scanner lexer = new Scanner("$(x )", ParserOptions.AllowProperties);
-            AdvanceToScannerError(lexer);
-            Assert.Null(lexer.UnexpectedlyFound);
-
-            lexer = new Scanner("$( x)", ParserOptions.AllowProperties);
-            AdvanceToScannerError(lexer);
-            Assert.Null(lexer.UnexpectedlyFound);
-            ChangeWaves.ResetStateForTests();
-        }
-
         /// <summary>
         /// Tests the special errors for "@(" and "@x" and similar cases.
         /// </summary>
@@ -446,7 +430,7 @@ public void ComplexTests1()
 
             lexer = new Scanner("'String with an embedded \\' in it'", ParserOptions.AllowAll);
             Assert.True(lexer.Advance() && lexer.IsNext(Token.TokenType.String));
-            //          Assert.AreEqual(String.Compare("String with an embedded ' in it", lexer.IsNextString()), 0);
+            // Assert.AreEqual(String.Compare("String with an embedded ' in it", lexer.IsNextString()), 0);
 
             lexer = new Scanner("'String with a $(Property) inside'", ParserOptions.AllowAll);
             Assert.True(lexer.Advance() && lexer.IsNext(Token.TokenType.String));
diff --git a/src/Build.UnitTests/SolutionFileBuilder.cs b/src/Build.UnitTests/SolutionFileBuilder.cs
index 2aa973078bd..19f04cfe9c3 100644
--- a/src/Build.UnitTests/SolutionFileBuilder.cs
+++ b/src/Build.UnitTests/SolutionFileBuilder.cs
@@ -20,6 +20,8 @@
 using Microsoft.Build.UnitTests;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     internal class SolutionFileBuilder
diff --git a/src/Build.UnitTests/TargetsFile_Test.cs b/src/Build.UnitTests/TargetsFile_Test.cs
index 4a7e4b27904..ea6002e5bcb 100644
--- a/src/Build.UnitTests/TargetsFile_Test.cs
+++ b/src/Build.UnitTests/TargetsFile_Test.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Evaluation;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs b/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
index a9ba7b26914..ef9e52db8b9 100644
--- a/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
+++ b/src/Build.UnitTests/TestComparers/ProjectInstanceModelTestComparers.cs
@@ -13,6 +13,8 @@
     Microsoft.Build.Evaluation.IEvaluatorData<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance,
         Microsoft.Build.Execution.ProjectMetadataInstance, Microsoft.Build.Execution.ProjectItemDefinitionInstance>;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.TestComparers
 {
     public static class ProjectInstanceModelTestComparers
diff --git a/src/Build.UnitTests/TestComparers/TaskItemComparer.cs b/src/Build.UnitTests/TestComparers/TaskItemComparer.cs
index cc089195da3..36b1da60309 100644
--- a/src/Build.UnitTests/TestComparers/TaskItemComparer.cs
+++ b/src/Build.UnitTests/TestComparers/TaskItemComparer.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.TestComparers
 {
     /// <summary>
diff --git a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
index 8d11cb21445..73492a83c4f 100644
--- a/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
+++ b/src/Build.UnitTests/TestComparers/TaskRegistryComparers.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.UnitTests;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.TestComparers
 {
     internal class TaskRegistryComparers
diff --git a/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs b/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
index 755ef004019..9f7435a781b 100644
--- a/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
+++ b/src/Build.UnitTests/TestData/ProjectInstanceTestObjects.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.UnitTests;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.TestData
 {
     internal static class ProjectInstanceTestObjects
diff --git a/src/Build.UnitTests/Utilities_Tests.cs b/src/Build.UnitTests/Utilities_Tests.cs
index 7f3f2601bf4..6159f3af2c1 100644
--- a/src/Build.UnitTests/Utilities_Tests.cs
+++ b/src/Build.UnitTests/Utilities_Tests.cs
@@ -22,6 +22,9 @@
 using System.Collections.Generic;
 using System.IO;
 using Xunit.Abstractions;
+using Shouldly;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
@@ -78,55 +81,41 @@ public UtilitiesTestReadOnlyLoad()
         [Fact]
         public void CommentsInPreprocessing()
         {
-            Microsoft.Build.Construction.XmlDocumentWithLocation.ClearReadOnlyFlags_UnitTestsOnly();
-
-            string input = FileUtilities.GetTemporaryFile();
-            string output = FileUtilities.GetTemporaryFile();
+            using TestEnvironment env = TestEnvironment.Create();
+            XmlDocumentWithLocation.ClearReadOnlyFlags_UnitTestsOnly();
 
-            string _initialLoadFilesWriteable = Environment.GetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE");
-            try
-            {
-                Environment.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
+            TransientTestFile inputFile = env.CreateFile("tempInput.tmp", ObjectModelHelpers.CleanupFileContents(@"
+<Project DefaultTargets='Build'>
+<Import Project='$(MSBuildToolsPath)\Microsoft.CSharp.targets'/>
+</Project>"));
+            TransientTestFile outputFile = env.CreateFile("tempOutput.tmp");
 
-                string content = ObjectModelHelpers.CleanupFileContents(@"
-<Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
-  <Import Project='$(MSBuildToolsPath)\Microsoft.CSharp.targets'/>
-</Project>");
-                File.WriteAllText(input, content);
+            env.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
 
 #if FEATURE_GET_COMMANDLINE
-                Assert.Equal(MSBuildApp.ExitType.Success, MSBuildApp.Execute(@"c:\bin\msbuild.exe """ + input +
-                    (NativeMethodsShared.IsUnixLike ? @""" -pp:""" : @""" /pp:""") + output + @""""));
+            MSBuildApp.Execute(@"c:\bin\msbuild.exe """ + inputFile.Path +
+                (NativeMethodsShared.IsUnixLike ? @""" -pp:""" : @""" /pp:""") + outputFile.Path + @"""")
+                .ShouldBe(MSBuildApp.ExitType.Success);
 #else
-                Assert.Equal(
-                    MSBuildApp.ExitType.Success,
-                    MSBuildApp.Execute(
-                        new[] { @"c:\bin\msbuild.exe", '"' + input + '"',
-                    '"' + (NativeMethodsShared.IsUnixLike ? "-pp:" : "/pp:") + output + '"'}));
+            Assert.Equal(
+                MSBuildApp.ExitType.Success,
+                MSBuildApp.Execute(
+                    new[] { @"c:\bin\msbuild.exe", '"' + inputFile.Path + '"',
+                '"' + (NativeMethodsShared.IsUnixLike ? "-pp:" : "/pp:") + outputFile.Path + '"'}));
 #endif
 
-                bool foundDoNotModify = false;
-                foreach (string line in File.ReadLines(output))
+            bool foundDoNotModify = false;
+            foreach (string line in File.ReadLines(outputFile.Path))
+            {
+                line.ShouldNotContain("<!---->", "This is what it will look like if we're loading read/only");
+
+                if (line.Contains("DO NOT MODIFY")) // this is in a comment in our targets
                 {
-                    if (line.Contains("<!---->")) // This is what it will look like if we're loading read/only
-                    {
-                        Assert.True(false);
-                    }
-
-                    if (line.Contains("DO NOT MODIFY")) // this is in a comment in our targets
-                    {
-                        foundDoNotModify = true;
-                    }
+                    foundDoNotModify = true;
                 }
-
-                Assert.True(foundDoNotModify);
-            }
-            finally
-            {
-                File.Delete(input);
-                File.Delete(output);
-                Environment.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", _initialLoadFilesWriteable);
             }
+
+            foundDoNotModify.ShouldBeTrue();
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 9b3f28df02f..ed6ef8fd68a 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -7,6 +7,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests
 {
     public sealed class WarningsAsMessagesAndErrorsTests
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index d1a29b8abaf..c4a9d2c9523 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -30,11 +30,13 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Utilities;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
 using Microsoft.NET.StringTools;
+using System.ComponentModel;
+
+#nullable disable
 
 namespace Microsoft.Build.Execution
 {
@@ -175,6 +177,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private int _nextBuildSubmissionId;
 
+        /// <summary>
+        /// The last BuildParameters used for building.
+        /// </summary>
+        private bool? _previousLowPriority = null;
+
         /// <summary>
         /// Mapping of unnamed project instances to the file names assigned to them.
         /// </summary>
@@ -295,7 +302,7 @@ public BuildManager(string hostName)
         }
 
         /// <summary>
-        /// Finalizer
+        /// Finalizes an instance of the <see cref="BuildManager"/> class.
         /// </summary>
         ~BuildManager()
         {
@@ -403,6 +410,15 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
             _deferredBuildMessages = null;
         }
 
+        private void UpdatePriority(Process p, ProcessPriorityClass priority)
+        {
+            try
+            {
+                p.PriorityClass = priority;
+            }
+            catch (Win32Exception) { }
+        }
+
         /// <summary>
         /// Prepares the BuildManager to receive build requests.
         /// </summary>
@@ -410,6 +426,41 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
         public void BeginBuild(BuildParameters parameters)
         {
+            if (_previousLowPriority != null)
+            {
+                if (parameters.LowPriority != _previousLowPriority)
+                {
+                    if (NativeMethodsShared.IsWindows || parameters.LowPriority)
+                    {
+                        ProcessPriorityClass priority = parameters.LowPriority ? ProcessPriorityClass.BelowNormal : ProcessPriorityClass.Normal;
+                        IEnumerable<Process> processes = _nodeManager?.GetProcesses();
+                        if (processes is not null)
+                        {
+                            foreach (Process p in processes)
+                            {
+                                UpdatePriority(p, priority);
+                            }
+                        }
+
+                        processes = _taskHostNodeManager?.GetProcesses();
+                        if (processes is not null)
+                        {
+                            foreach (Process p in processes)
+                            {
+                                UpdatePriority(p, priority);
+                            }
+                        }
+                    }
+                    else
+                    {
+                        _nodeManager?.ShutdownAllNodes();
+                        _taskHostNodeManager?.ShutdownAllNodes();
+                    }
+               }
+            }
+
+            _previousLowPriority = parameters.LowPriority;
+
             lock (_syncLock)
             {
                 AttachDebugger();
@@ -492,6 +543,7 @@ ILoggingService InitializeLoggingService()
                     AppendDebuggingLoggers(_buildParameters.Loggers),
                     _buildParameters.ForwardingLoggers,
                     _buildParameters.WarningsAsErrors,
+                    _buildParameters.WarningsNotAsErrors,
                     _buildParameters.WarningsAsMessages);
 
                 _nodeManager.RegisterPacketHandler(NodePacketType.LogMessage, LogMessagePacket.FactoryForDeserialization, loggingService as INodePacketHandler);
@@ -516,8 +568,6 @@ ILoggingService InitializeLoggingService()
                     throw;
                 }
 
-                MSBuildEventSource.Log.BuildStop();
-
                 return loggingService;
             }
 
@@ -909,7 +959,7 @@ public void EndBuild()
                     {
                         // Override the build success if the user specified /warnaserror and any errors were logged outside of a build submission.
                         if (exceptionsThrownInEndBuild ||
-                            _overallBuildSuccess && loggingService.HasBuildSubmissionLoggedErrors(BuildEventContext.InvalidSubmissionId))
+                            (_overallBuildSuccess && loggingService.HasBuildSubmissionLoggedErrors(BuildEventContext.InvalidSubmissionId)))
                         {
                             _overallBuildSuccess = false;
                         }
@@ -929,6 +979,8 @@ public void EndBuild()
                     Reset();
                     _buildManagerState = BuildManagerState.Idle;
 
+                    MSBuildEventSource.Log.BuildStop();
+
                     _threadException?.Throw();
 
                     if (BuildParameters.DumpOpportunisticInternStats)
@@ -1200,7 +1252,7 @@ bool ProjectCacheIsPresent()
 
         private static bool ProjectCachePresentViaVisualStudioWorkaround()
         {
-            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Count > 0;
+            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Any();
         }
 
         // Cache requests on configuration N do not block future build submissions depending on configuration N.
@@ -1259,7 +1311,7 @@ private ProjectCacheService GetProjectCacheService()
         private void AutomaticallyDetectAndInstantiateProjectCacheServiceForVisualStudio()
         {
             if (BuildEnvironmentHelper.Instance.RunningInVisualStudio &&
-                ProjectCacheItems.Count > 0 &&
+                ProjectCacheItems.Any() &&
                 _projectCacheService == null &&
                 _buildParameters.ProjectCacheDescriptor == null)
             {
@@ -1610,7 +1662,7 @@ private void WaitForAllLoggingServiceEventsToBeProcessed()
             // this has to be called out of the lock (_syncLock)
             // because processing events can callback to 'this' instance and cause deadlock
             Debug.Assert(!Monitor.IsEntered(_syncLock));
-            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForThreadToProcessEvents();
+            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForLoggingToProcessEvents();
         }
 
         /// <summary>
@@ -1725,10 +1777,9 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                         HandleNewRequest(Scheduler.VirtualNode, blocker);
                     }
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+                catch (Exception ex) when (IsInvalidProjectOrIORelatedException(ex))
                 {
-                    var projectException = ex as InvalidProjectFileException;
-                    if (projectException != null)
+                    if (ex is InvalidProjectFileException projectException)
                     {
                         if (!projectException.HasBeenLogged)
                         {
@@ -1737,10 +1788,6 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                             projectException.HasBeenLogged = true;
                         }
                     }
-                    else if ((ex is BuildAbortedException) || ExceptionHandling.NotExpectedException(ex))
-                    {
-                        throw;
-                    }
 
                     lock (_syncLock)
                     {
@@ -1750,7 +1797,7 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                             _legacyThreadingData.MainThreadSubmissionId = -1;
                         }
 
-                        if (projectException == null)
+                        if (ex is not InvalidProjectFileException)
                         {
                             var buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                             ((IBuildComponentHost)this).LoggingService.LogFatalBuildError(buildEventContext, ex, new BuildEventFileInfo(submission.BuildRequestData.ProjectFullPath));
@@ -1765,11 +1812,15 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                         ReportResultsToSubmission(new BuildResult(submission.BuildRequest, ex));
                         _overallBuildSuccess = false;
                     }
-
                 }
             }
         }
 
+        private bool IsInvalidProjectOrIORelatedException(Exception e)
+        {
+            return !ExceptionHandling.IsCriticalException(e) && !ExceptionHandling.NotExpectedException(e) && e is not BuildAbortedException;
+        }
+
         private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
         {
             try
@@ -1853,7 +1904,7 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                         submission.SubmissionId,
                         new ReadOnlyDictionary<ProjectGraphNode, BuildResult>(resultsPerNode ?? new Dictionary<ProjectGraphNode, BuildResult>())));
             }
-            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+            catch (Exception ex) when (IsInvalidProjectOrIORelatedException(ex))
             {
                 GraphBuildResult result = null;
 
@@ -1861,7 +1912,7 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                 if (ex is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException))
                 {
                     // Log each InvalidProjectFileException encountered during ProjectGraph creation
-                    foreach (var innerException in aggregateException.InnerExceptions)
+                    foreach (Exception innerException in aggregateException.InnerExceptions)
                     {
                         var projectException = (InvalidProjectFileException) innerException;
                         if (!projectException.HasBeenLogged)
@@ -1879,23 +1930,16 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                     BuildEventContext projectBuildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                     ((IBuildComponentHost)this).LoggingService.LogInvalidProjectFileError(projectBuildEventContext, new InvalidProjectFileException(ex.Message, ex));
                 }
-                else if (ex is BuildAbortedException || ExceptionHandling.NotExpectedException(ex))
-                {
-                    throw;
-                }
                 else
                 {
                     // Arbitrarily just choose the first entry point project's path
-                    var projectFile = submission.BuildRequestData.ProjectGraph?.EntryPointNodes.First().ProjectInstance.FullPath
+                    string projectFile = submission.BuildRequestData.ProjectGraph?.EntryPointNodes.First().ProjectInstance.FullPath
                         ?? submission.BuildRequestData.ProjectGraphEntryPoints?.First().ProjectFile;
                     BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                     ((IBuildComponentHost)this).LoggingService.LogFatalBuildError(buildEventContext, ex, new BuildEventFileInfo(projectFile));
                 }
 
-                if (result == null)
-                {
-                    result = new GraphBuildResult(submission.SubmissionId, ex);
-                }
+                result ??= new GraphBuildResult(submission.SubmissionId, ex);
 
                 ReportResultsToSubmission(result);
 
@@ -2608,26 +2652,20 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        var newNodes = new List<NodeInfo>();
+                        IList<NodeInfo> newNodes = _nodeManager.CreateNodes(GetNodeConfiguration(), response.RequiredNodeType, response.NumberOfNodesToCreate);
 
-                        for (int i = 0; i < response.NumberOfNodesToCreate; i++)
+                        if (newNodes?.Count != response.NumberOfNodesToCreate || newNodes.Any(n => n == null))
                         {
-                            NodeInfo createdNode = _nodeManager.CreateNode(GetNodeConfiguration(), response.RequiredNodeType);
+                            BuildEventContext buildEventContext = new BuildEventContext(0, Scheduler.VirtualNode, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+                            ((IBuildComponentHost)this).LoggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty), "UnableToCreateNode", response.RequiredNodeType.ToString("G"));
 
-                            if (createdNode != null)
-                            {
-                                _noNodesActiveEvent.Reset();
-                                _activeNodes.Add(createdNode.NodeId);
-                                newNodes.Add(createdNode);
-                                ErrorUtilities.VerifyThrow(_activeNodes.Count != 0, "Still 0 nodes after asking for a new node.  Build cannot proceed.");
-                            }
-                            else
-                            {
-                                BuildEventContext buildEventContext = new BuildEventContext(0, Scheduler.VirtualNode, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-                                ((IBuildComponentHost)this).LoggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty), "UnableToCreateNode", response.RequiredNodeType.ToString("G"));
+                            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnableToCreateNode", response.RequiredNodeType.ToString("G")));
+                        }
 
-                                throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnableToCreateNode", response.RequiredNodeType.ToString("G")));
-                            }
+                        foreach (var node in newNodes)
+                        {
+                            _noNodesActiveEvent.Reset();
+                            _activeNodes.Add(node.NodeId);
                         }
 
                         IEnumerable<ScheduleResponse> newResponses = _scheduler.ReportNodesCreated(newNodes);
@@ -2945,7 +2983,7 @@ void OnProjectStartedBody(ProjectStartedEventArgs e)
         /// <summary>
         /// Creates a logging service around the specified set of loggers.
         /// </summary>
-        private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> forwardingLoggers, ISet<string> warningsAsErrors, ISet<string> warningsAsMessages)
+        private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> forwardingLoggers, ISet<string> warningsAsErrors, ISet<string> warningsNotAsErrors, ISet<string> warningsAsMessages)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
@@ -2966,6 +3004,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
             loggingService.OnProjectStarted += _projectStartedEventHandler;
             loggingService.OnProjectFinished += _projectFinishedEventHandler;
             loggingService.WarningsAsErrors = warningsAsErrors;
+            loggingService.WarningsNotAsErrors = warningsNotAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
             try
@@ -2986,7 +3025,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
                         loggerClassName: typeof(ConfigurableForwardingLogger).FullName,
                         loggerAssemblyName: typeof(ConfigurableForwardingLogger).GetTypeInfo().Assembly.GetName().FullName,
                         loggerAssemblyFile: null,
-                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT",
+                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT;FORWARDPROJECTCONTEXTEVENTS",
                         verbosity: LoggerVerbosity.Quiet);
 
                     ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(new NullLogger(), forwardingLoggerDescription) };
@@ -3237,6 +3276,25 @@ public string Parameters
             /// </summary>
             public void Initialize(IEventSource eventSource)
             {
+                // The concrete type we get should always be our internal
+                // implementation and up-to-date, but we need to meet the
+                // external contract so can't specify that for the
+                // argument.
+
+                IEventSource4 eventSource4 = (IEventSource4)eventSource;
+
+                // Most checks in LoggingService are "does any attached logger
+                // specifically opt into this new behavior?". As such, the
+                // NullLogger shouldn't opt into them explicitly and should
+                // let other loggers opt in.
+
+                // IncludeEvaluationPropertiesAndItems is different though,
+                // because its check is "do ALL attached loggers opt into
+                // the new behavior?", since the new behavior removes
+                // information from old loggers. So the NullLogger must
+                // opt in to ensure it doesn't accidentally veto the new
+                // behavior.
+                eventSource4.IncludeEvaluationPropertiesAndItems();
             }
 
             /// <summary>
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 93d21956172..1fec6f1c510 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -18,9 +18,11 @@
 using Microsoft.Build.Shared.FileSystem;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
-    using Utilities = Internal.Utilities;
+    using Utilities = Microsoft.Build.Internal.Utilities;
 
     /// <summary>
     /// This class represents all of the settings which must be specified to start a build.
@@ -276,9 +278,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             _nodeExeLocation = other._nodeExeLocation;
             NodeId = other.NodeId;
             _onlyLogCriticalEvents = other._onlyLogCriticalEvents;
-#if FEATURE_THREAD_PRIORITY
             BuildThreadPriority = other.BuildThreadPriority;
-#endif
             _toolsetProvider = other._toolsetProvider;
             ToolsetDefinitionLocations = other.ToolsetDefinitionLocations;
             _toolsetProvider = other._toolsetProvider;
@@ -294,6 +294,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             _logTaskInputs = other._logTaskInputs;
             _logInitialPropertiesAndItems = other._logInitialPropertiesAndItems;
             WarningsAsErrors = other.WarningsAsErrors == null ? null : new HashSet<string>(other.WarningsAsErrors, StringComparer.OrdinalIgnoreCase);
+            WarningsNotAsErrors = other.WarningsNotAsErrors == null ? null : new HashSet<string>(other.WarningsNotAsErrors, StringComparer.OrdinalIgnoreCase);
             WarningsAsMessages = other.WarningsAsMessages == null ? null : new HashSet<string>(other.WarningsAsMessages, StringComparer.OrdinalIgnoreCase);
             _projectLoadSettings = other._projectLoadSettings;
             _interactive = other._interactive;
@@ -305,14 +306,11 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
 
-#if FEATURE_THREAD_PRIORITY
         /// <summary>
         /// Gets or sets the desired thread priority for building.
         /// </summary>
         public ThreadPriority BuildThreadPriority { get; set; } = ThreadPriority.Normal;
 
-#endif
-
         /// <summary>
         /// By default if the number of processes is set to 1 we will use Asynchronous logging. However if we want to use synchronous logging when the number of cpu's is set to 1
         /// this property needs to be set to true.
@@ -546,6 +544,11 @@ public bool OnlyLogCriticalEvents
         /// </summary>
         public ISet<string> WarningsAsErrors { get; set; }
 
+        /// <summary>
+        /// A list of warnings to not treat as errors. Only has any effect if WarningsAsErrors is empty.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors { get; set; }
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestData.cs b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
index 6f3a29a5765..0f90db80b49 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestData.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -218,7 +220,6 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
             ErrorUtilities.VerifyThrowArgumentNull(globalProperties, nameof(globalProperties));
 
             ProjectFullPath = FileUtilities.NormalizePath(projectFullPath);
-            TargetNames = (ICollection<string>)targetsToBuild.Clone();
             GlobalPropertiesDictionary = new PropertyDictionary<ProjectPropertyInstance>(globalProperties.Count);
             foreach (KeyValuePair<string, string> propertyPair in globalProperties)
             {
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 5b574b82b20..a6ee56f90ba 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/BuildManager/CacheAggregator.cs b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
index 7c4530234cb..104c59fa31b 100644
--- a/src/Build/BackEnd/BuildManager/CacheAggregator.cs
+++ b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     internal class CacheAggregator
diff --git a/src/Build/BackEnd/BuildManager/CacheSerialization.cs b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
index 8bce00b3a26..4c337378637 100644
--- a/src/Build/BackEnd/BuildManager/CacheSerialization.cs
+++ b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     internal static class CacheSerialization
@@ -25,7 +27,8 @@ public static string SerializeCaches(IConfigCache configCache, IResultsCache res
 
                 Directory.CreateDirectory(Path.GetDirectoryName(fullPath));
 
-                using (var fileStream = File.OpenWrite(fullPath))
+                // Use FileStream constructor (File.OpenWrite should not be used as it doesn't reset the length of the file!)
+                using (var fileStream = new FileStream(fullPath, FileMode.Create, FileAccess.Write, FileShare.None))
                 {
                     var translator = BinaryTranslator.GetWriteTranslator(fileStream);
 
diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index 34b563ae053..cb18ea93bb4 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -8,6 +8,8 @@
 using System.Collections.Generic;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
index 1df6a64b42b..f1aa79796a3 100644
--- a/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
+++ b/src/Build/BackEnd/BuildManager/RequestedProjectState.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index 05ea23f5425..0bf9cfd50e0 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
index c5fefa0a7cf..73596f26127 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 7fe3d19fcf0..3bb58aa36ab 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -14,9 +14,10 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Utilities;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index fec15006b64..5de7e1ed874 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -10,6 +10,8 @@
 
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -230,8 +232,7 @@ public bool ResolveConfigurationRequest(int unresolvedConfigId, int configId)
         {
             lock (GlobalLock)
             {
-                List<BuildRequest> requests = null;
-                if (_unresolvedConfigurations?.TryGetValue(unresolvedConfigId, out requests) != true)
+                if (_unresolvedConfigurations?.TryGetValue(unresolvedConfigId, out List<BuildRequest> requests) != true)
                 {
                     return false;
                 }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
index c7422949516..b415350f1e6 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/FullyQualifiedBuildRequest.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
index 13d40bd7c19..439c175fbb8 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/IBuildRequestEngine.cs
@@ -5,6 +5,8 @@
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     #region Delegates
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCache.cs b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
index 2e695a60aab..d2821aee570 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -118,8 +120,7 @@ public BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata
             ErrorUtilities.VerifyThrowArgumentNull(configMetadata, nameof(configMetadata));
             lock (_lockObject)
             {
-                int configId;
-                if (!_configurationIdsByMetadata.TryGetValue(configMetadata, out configId))
+                if (!_configurationIdsByMetadata.TryGetValue(configMetadata, out int configId))
                 {
                     return null;
                 }
@@ -214,10 +215,9 @@ public List<int> ClearNonExplicitlyLoadedConfigurations()
             {
                 foreach (KeyValuePair<ConfigurationMetadata, int> metadata in _configurationIdsByMetadata)
                 {
-                    BuildRequestConfiguration configuration;
                     int configId = metadata.Value;
 
-                    if (_configurations.TryGetValue(configId, out configuration))
+                    if (_configurations.TryGetValue(configId, out BuildRequestConfiguration configuration))
                     {
                         // We do not want to retain this configuration
                         if (!configuration.ExplicitlyLoaded)
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
index 12bc8de169f..4660a22db52 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     internal class ConfigCacheWithOverride : IConfigCache
diff --git a/src/Build/BackEnd/Components/Caching/IConfigCache.cs b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
index c60f95c6086..581474b8e12 100644
--- a/src/Build/BackEnd/Components/Caching/IConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Caching/IPropertyCache.cs b/src/Build/BackEnd/Components/Caching/IPropertyCache.cs
index fdbab85a251..054467b6782 100644
--- a/src/Build/BackEnd/Components/Caching/IPropertyCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IPropertyCache.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Caching/IRegisteredTaskObjectCache.cs b/src/Build/BackEnd/Components/Caching/IRegisteredTaskObjectCache.cs
index c2d6503c933..4bf05c0688c 100644
--- a/src/Build/BackEnd/Components/Caching/IRegisteredTaskObjectCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IRegisteredTaskObjectCache.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 #if BUILD_ENGINE
 namespace Microsoft.Build.BackEnd.Components.Caching
 #else
diff --git a/src/Build/BackEnd/Components/Caching/IResultsCache.cs b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
index e78d4e2909d..033ec80bed0 100644
--- a/src/Build/BackEnd/Components/Caching/IResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
@@ -5,6 +5,8 @@
 
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Caching/RegisteredTaskObjectCache.cs b/src/Build/BackEnd/Components/Caching/RegisteredTaskObjectCache.cs
index c277f88b83d..f005944f766 100644
--- a/src/Build/BackEnd/Components/Caching/RegisteredTaskObjectCache.cs
+++ b/src/Build/BackEnd/Components/Caching/RegisteredTaskObjectCache.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Components.Caching
 {
     /// <summary>
@@ -13,7 +15,7 @@ namespace Microsoft.Build.BackEnd.Components.Caching
     internal class RegisteredTaskObjectCache : RegisteredTaskObjectCacheBase, IBuildComponent, IRegisteredTaskObjectCache, IDisposable
     {
         /// <summary>
-        /// Finalizer
+        /// Finalizes an instance of the <see cref="RegisteredTaskObjectCache"/> class.
         /// </summary>
         ~RegisteredTaskObjectCache()
         {
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index ee236fac998..f932844178b 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -222,8 +224,7 @@ public void ClearResultsForConfiguration(int configurationId)
         {
             lock (_resultsByConfiguration)
             {
-                BuildResult removedResult;
-                _resultsByConfiguration.TryRemove(configurationId, out removedResult);
+                _resultsByConfiguration.TryRemove(configurationId, out BuildResult removedResult);
 
                 removedResult?.ClearCachedFiles();
             }
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
index 4cce5d68aae..63302b46b01 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheResponse.cs
@@ -6,6 +6,8 @@
 
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
index 66b1e17ccca..68e56285f86 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     internal class ResultsCacheWithOverride : IResultsCache
diff --git a/src/Build/BackEnd/Components/Communications/INodeManager.cs b/src/Build/BackEnd/Components/Communications/INodeManager.cs
index d08a101867f..f35f8cba087 100644
--- a/src/Build/BackEnd/Components/Communications/INodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/INodeManager.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System.Collections.Generic;
+using System.Diagnostics;
 using Microsoft.Build.Execution;
 
 namespace Microsoft.Build.BackEnd
@@ -19,11 +21,12 @@ internal interface INodeManager : IBuildComponent,
         /// </summary>
         /// <param name="configuration">The configuration to use to create the node.</param>
         /// <param name="affinity">The <see cref="NodeAffinity"/> to use.</param>
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused or created.</param>
         /// <returns>Information about the node created</returns>
         /// <remarks>
         /// Throws an exception if the node could not be created.
         /// </remarks>
-        NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity affinity);
+        IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity affinity, int numberOfNodesToCreate);
 
         /// <summary>
         /// Sends a data packet to a specific node
@@ -49,6 +52,8 @@ internal interface INodeManager : IBuildComponent,
         /// The node manager contains state which is not supposed to persist between builds, make sure this is cleared.
         /// </summary>
         void ClearPerBuildState();
+
+        IEnumerable<Process> GetProcesses();
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/INodeProvider.cs b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
index fc7faf679e0..0da32af6678 100644
--- a/src/Build/BackEnd/Components/Communications/INodeProvider.cs
+++ b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
@@ -1,6 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
+
+using System.Collections;
+using System.Collections.Generic;
+using System.Diagnostics;
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -55,14 +61,15 @@ int AvailableNodes
         /// <summary>
         /// Requests that a new node be created on the specified machine.
         /// </summary>
-        /// <param name="nodeId">The id to assign to the node.</param>
+        /// <param name="nextNodeId">The id to assign to the first created node. Resulting nodes ids will be in range [nextNodeId, nextNodeId + numberOfNodesToCreate - 1]</param>
         /// <param name="packetFactory">
         /// The packet factory used to create packets when data is
         /// received on this node.
         /// </param>
-        /// <param name="configuration">The configuration to use to create the remote node.</param>
-        /// <returns>True if the node was created, false otherwise.</returns>
-        bool CreateNode(int nodeId, INodePacketFactory packetFactory, NodeConfiguration configuration);
+        /// <param name="configurationFactory">NodeConfiguration factory of particular node</param>
+        /// <param name="numberOfNodesToCreate">Required number of nodes to create</param>
+        /// <returns>Array of NodeInfo of successfully created nodes</returns>
+        IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory packetFactory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate);
 
         /// <summary>
         /// Sends data to a specific node.
@@ -81,6 +88,8 @@ int AvailableNodes
         /// Shuts down all of the managed nodes.  This call will not return until all nodes are shut down.
         /// </summary>
         void ShutdownAllNodes();
+
+        IEnumerable<Process> GetProcesses();
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
index 1f8a521673e..31591eb8c6d 100644
--- a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
+++ b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
index 4c2b6d2b8eb..fe81fa4298d 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointInProc.cs
@@ -3,11 +3,15 @@
 
 using System;
 using System.Collections.Concurrent;
+#if !FEATURE_THREAD_CULTURE
+using System.Globalization;
+#endif
 using System.Threading;
 using Microsoft.Build.Shared;
 
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
-using System.Globalization;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -345,7 +349,7 @@ private void InitializeAsyncPacketThread()
 #if FEATURE_THREAD_CULTURE
                 _packetPump = new Thread(PacketPumpProc);
 #else
-                //  In .NET Core, we need to set the current culture from inside the new thread
+                // In .NET Core, we need to set the current culture from inside the new thread
                 CultureInfo culture = _componentHost.BuildParameters.Culture;
                 CultureInfo uiCulture = _componentHost.BuildParameters.UICulture;
                 _packetPump = new Thread(() =>
diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index 5f73ac08e8b..dce14e3d422 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -22,6 +24,8 @@ internal class NodeEndpointOutOfProc : NodeEndpointOutOfProcBase
 
         private readonly bool _lowPriority;
 
+        internal bool LowPriority { get { return _lowPriority; } }
+
         #endregion
 
         #region Constructors and Factories
@@ -52,7 +56,7 @@ internal NodeEndpointOutOfProc(
         /// </summary>
         protected override Handshake GetHandshake()
         {
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, is64Bit: EnvironmentUtilities.Is64BitProcess, nodeReuse: _enableReuse, lowPriority: _lowPriority));
+            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: _enableReuse, lowPriority: _lowPriority));
         }
 
         #region Structs
diff --git a/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs b/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
index 9d0c59a201b..237b58a810b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
@@ -7,6 +7,8 @@
 using System.Security.Permissions;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeInfo.cs b/src/Build/BackEnd/Components/Communications/NodeInfo.cs
index fda92dae71e..fbdf2efd3b7 100644
--- a/src/Build/BackEnd/Components/Communications/NodeInfo.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeInfo.cs
@@ -5,6 +5,8 @@
 
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index 5a533e05fbb..6d9f73590eb 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using System.Threading;
+using System.Diagnostics;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -14,30 +16,25 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal class NodeManager : INodeManager
     {
-        /// <summary>
-        /// The invalid node id
-        /// </summary>
-        private const int InvalidNodeId = 0;
-
         /// <summary>
         /// The node provider for the in-proc node.
         /// </summary>
-        private INodeProvider _inProcNodeProvider;
+        private INodeProvider? _inProcNodeProvider;
 
         /// <summary>
         /// The node provider for out-of-proc nodes.
         /// </summary> 
-        private INodeProvider _outOfProcNodeProvider;
+        private INodeProvider? _outOfProcNodeProvider;
 
         /// <summary>
         /// The build component host.
         /// </summary>
-        private IBuildComponentHost _componentHost;
+        private IBuildComponentHost? _componentHost;
 
         /// <summary>
         /// Mapping of manager-produced node IDs to the provider hosting the node.
         /// </summary>
-        private Dictionary<int, INodeProvider> _nodeIdToProvider;
+        private readonly Dictionary<int, INodeProvider> _nodeIdToProvider;
 
         /// <summary>
         /// The packet factory used to translate and route packets
@@ -90,32 +87,31 @@ private NodeManager()
         /// </summary>
         /// <param name="configuration">The configuration to use for the remote node.</param>
         /// <param name="nodeAffinity">The <see cref="NodeAffinity"/> to use.</param>
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused ot created.</param>
         /// <returns>A NodeInfo describing the node created, or null if none could be created.</returns>
-        public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAffinity)
+        public IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity nodeAffinity, int numberOfNodesToCreate)
         {
             // We will prefer to make nodes on the "closest" providers first; in-proc, then
             // out-of-proc, then remote.
             // When we support distributed build, we will also consider the remote provider.
-            int nodeId = InvalidNodeId;
-            if ((nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.InProc) && !_componentHost.BuildParameters.DisableInProcNode)
+            List<NodeInfo> nodes = new(numberOfNodesToCreate);
+            if ((nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.InProc) && !_componentHost!.BuildParameters.DisableInProcNode)
             {
-                nodeId = AttemptCreateNode(_inProcNodeProvider, configuration);
+                nodes.AddRange(AttemptCreateNode(_inProcNodeProvider!, configuration, numberOfNodesToCreate));
             }
 
-            if (nodeId == InvalidNodeId && (nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.OutOfProc))
+            if (nodes.Count < numberOfNodesToCreate && (nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.OutOfProc))
             {
-                nodeId = AttemptCreateNode(_outOfProcNodeProvider, configuration);
+                nodes.AddRange(AttemptCreateNode(_outOfProcNodeProvider!, configuration, numberOfNodesToCreate - nodes.Count));
             }
 
-            if (nodeId == InvalidNodeId)
+            // If we created a node, they should no longer be considered shut down.
+            if (nodes.Count > 0)
             {
-                return null;
+                _nodesShutdown = false;
             }
 
-            // If we created a node, they should no longer be considered shut down.
-            _nodesShutdown = false;
-
-            return new NodeInfo(nodeId, _nodeIdToProvider[nodeId].ProviderType);
+            return nodes;
         }
 
         /// <summary>
@@ -125,15 +121,14 @@ public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAff
         /// <param name="packet">The packet to send.</param>
         public void SendData(int node, INodePacket packet)
         {
-            // Look up the node provider for this node in the mapping.
-            INodeProvider provider;
-            if (!_nodeIdToProvider.TryGetValue(node, out provider))
+            if (!_nodeIdToProvider.TryGetValue(node, out INodeProvider? provider))
             {
                 ErrorUtilities.ThrowInternalError("Node {0} does not have a provider.", node);
             }
-
-            // Send the data.
-            provider.SendData(node, packet);
+            else
+            {
+                provider.SendData(node, packet);
+            }
         }
 
         /// <summary>
@@ -175,7 +170,7 @@ public void InitializeComponent(IBuildComponentHost host)
         {
             ErrorUtilities.VerifyThrow(_componentHost == null, "NodeManager already initialized.");
             ErrorUtilities.VerifyThrow(host != null, "We can't create a NodeManager with a null componentHost");
-            _componentHost = host;
+            _componentHost = host!;
 
             _inProcNodeProvider = _componentHost.GetComponent(BuildComponentType.InProcNodeProvider) as INodeProvider;
             _outOfProcNodeProvider = _componentHost.GetComponent(BuildComponentType.OutOfProcNodeProvider) as INodeProvider;
@@ -304,47 +299,57 @@ private void RemoveNodeFromMapping(int nodeId)
         /// </summary>
         /// <param name="nodeProvider">The provider used to create the node.</param>
         /// <param name="nodeConfiguration">The <see cref="NodeConfiguration"/> to use.</param>
-        /// <returns>The id of the node created.</returns>
-        private int AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration)
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused ot created.</param>
+        /// <returns>List of created nodes.</returns>
+        private IList<NodeInfo> AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration, int numberOfNodesToCreate)
         {
             // If no provider was passed in, we obviously can't create a node.
             if (nodeProvider == null)
             {
                 ErrorUtilities.ThrowInternalError("No node provider provided.");
-                return InvalidNodeId;
+                return new List<NodeInfo>();
             }
 
             // Are there any free slots on this provider?
             if (nodeProvider.AvailableNodes == 0)
             {
-                return InvalidNodeId;
+                return new List<NodeInfo>();
             }
 
             // Assign a global ID to the node we are about to create.
-            int nodeId;
+            int fromNodeId;
             if (nodeProvider is NodeProviderInProc)
             {
-                nodeId = _inprocNodeId;
+                fromNodeId = _inprocNodeId;
             }
             else
             {
-                nodeId = _nextNodeId;
-                _nextNodeId++;
+                // Reserve node numbers for all needed nodes.
+                fromNodeId = Interlocked.Add(ref _nextNodeId, numberOfNodesToCreate) - numberOfNodesToCreate;
             }
 
-            NodeConfiguration configToSend = nodeConfiguration.Clone();
-            configToSend.NodeId = nodeId;
 
             // Create the node and add it to our mapping.
-            bool createdNode = nodeProvider.CreateNode(nodeId, this, configToSend);
+            IList<NodeInfo> nodes = nodeProvider.CreateNodes(fromNodeId, this, AcquiredNodeConfigurationFactory, numberOfNodesToCreate);
+
+            foreach (NodeInfo node in nodes)
+            {
+                _nodeIdToProvider.Add(node.NodeId, nodeProvider);
+            }
+
+            return nodes;
 
-            if (!createdNode)
+            NodeConfiguration AcquiredNodeConfigurationFactory(NodeInfo nodeInfo)
             {
-                return InvalidNodeId;
+                var config = nodeConfiguration.Clone();
+                config.NodeId = nodeInfo.NodeId;
+                return config;
             }
+        }
 
-            _nodeIdToProvider.Add(nodeId, nodeProvider);
-            return nodeId;
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _outOfProcNodeProvider?.GetProcesses()!;
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 0081265b99c..88f5feea51b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.Threading;
 using Microsoft.Build.Internal;
@@ -10,6 +12,8 @@
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
 using NodeEngineShutdownReason = Microsoft.Build.Execution.NodeEngineShutdownReason;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -88,7 +92,7 @@ public NodeProviderInProc()
         #endregion
 
         /// <summary>
-        /// Finalizer
+        /// Finalizes an instance of the <see cref="NodeProviderInProc"/> class.
         /// </summary>
         ~NodeProviderInProc()
         {
@@ -182,13 +186,34 @@ public void ShutdownAllNodes()
             ShutdownConnectedNodes(false /* no node reuse */);
         }
 
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
+        {
+            var nodes = new List<NodeInfo>(numberOfNodesToCreate);
+
+            for (int i = 0; i < numberOfNodesToCreate; i++)
+            {
+                int nodeId = nextNodeId + i;
+
+                NodeInfo nodeInfo = new(nodeId, ProviderType);
+                if (!CreateNode(nodeId, factory, configurationFactory(nodeInfo)))
+                {
+                    // If it fails let it return what we have created so far so caller can somehow acquire missing nodes.
+                    break;
+                }
+
+                nodes.Add(nodeInfo);
+            }
+
+            return nodes;
+        }
+
         /// <summary>
         /// Requests that a node be created on the specified machine.
         /// </summary>
         /// <param name="nodeId">The id of the node to create.</param>
         /// <param name="factory">The factory to use to create packets from this node.</param>
         /// <param name="configuration">The configuration for the node.</param>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        private bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
         {
             ErrorUtilities.VerifyThrow(nodeId != InvalidInProcNodeId, "Cannot create in-proc node.");
 
@@ -437,6 +462,9 @@ private void Dispose(bool disposing)
             }
         }
 
+        // The process here is the same as in the main node.
+        public IEnumerable<Process> GetProcesses() => throw new NotImplementedException();
+
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index 12237b65bec..96ebeef27f9 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -1,14 +1,17 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
-
 using Microsoft.Build.Shared;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Utilities;
+using System.Linq;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -21,7 +24,7 @@ internal class NodeProviderOutOfProc : NodeProviderOutOfProcBase, INodeProvider
         /// <summary>
         /// A mapping of all the nodes managed by this provider.
         /// </summary>
-        private Dictionary<int, NodeContext> _nodeContexts;
+        private ConcurrentDictionary<int, NodeContext> _nodeContexts;
 
         /// <summary>
         /// Constructor.
@@ -67,48 +70,58 @@ public int AvailableNodes
         internal static Handshake GetHandshake(bool enableNodeReuse, bool enableLowPriority)
         {
             CommunicationsUtilities.Trace("MSBUILDNODEHANDSHAKESALT=\"{0}\", msbuildDirectory=\"{1}\", enableNodeReuse={2}, enableLowPriority={3}", Traits.MSBuildNodeHandshakeSalt, BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, enableNodeReuse, enableLowPriority);
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: enableNodeReuse, lowPriority: enableLowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess));
+            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: enableNodeReuse, lowPriority: enableLowPriority));
         }
 
         /// <summary>
-        /// Instantiates a new MSBuild process acting as a child node.
+        /// Instantiates a new MSBuild processes acting as a child nodes or connect to existing ones.
         /// </summary>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
         {
             ErrorUtilities.VerifyThrowArgumentNull(factory, nameof(factory));
 
-            if (_nodeContexts.Count >= ComponentHost.BuildParameters.MaxNodeCount)
+            // This can run concurrently. To be properly detect internal bug when we create more nodes than allowed
+            //   we add into _nodeContexts premise of future node and verify that it will not cross limits.
+            if (_nodeContexts.Count + numberOfNodesToCreate > ComponentHost.BuildParameters.MaxNodeCount)
             {
-                ErrorUtilities.ThrowInternalError("All allowable nodes already created ({0}).", _nodeContexts.Count);
-                return false;
+                ErrorUtilities.ThrowInternalError("Exceeded max node count of '{0}', current count is '{1}' ", ComponentHost.BuildParameters.MaxNodeCount, _nodeContexts.Count);
+                return new List<NodeInfo>();
             }
 
+            ConcurrentBag<NodeInfo> nodes = new();
+
             // Start the new process.  We pass in a node mode with a node number of 1, to indicate that we
             // want to start up just a standard MSBuild out-of-proc node.
             // Note: We need to always pass /nodeReuse to ensure the value for /nodeReuse from msbuild.rsp
             // (next to msbuild.exe) is ignored.
             string commandLineArgs = $"/nologo /nodemode:1 /nodeReuse:{ComponentHost.BuildParameters.EnableNodeReuse.ToString().ToLower()} /low:{ComponentHost.BuildParameters.LowPriority.ToString().ToLower()}";
 
-            // Make it here.
-            CommunicationsUtilities.Trace("Starting to acquire a new or existing node to establish node ID {0}...", nodeId);
+            CommunicationsUtilities.Trace("Starting to acquire {1} new or existing node(s) to establish nodes from ID {0} to {2}...", nextNodeId, numberOfNodesToCreate, nextNodeId + numberOfNodesToCreate - 1);
+
+            Handshake hostHandshake = new(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: ComponentHost.BuildParameters.EnableNodeReuse, lowPriority: ComponentHost.BuildParameters.LowPriority));
+            IList<NodeContext> nodeContexts = GetNodes(null, commandLineArgs, nextNodeId, factory, hostHandshake, NodeContextCreated, NodeContextTerminated, numberOfNodesToCreate);
+
+            if (nodeContexts.Count > 0)
+            {
+                return nodeContexts
+                    .Select(nc => new NodeInfo(nc.NodeId, ProviderType))
+                    .ToList();
+            }
 
-            Handshake hostHandshake = new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: ComponentHost.BuildParameters.EnableNodeReuse, lowPriority: ComponentHost.BuildParameters.LowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess));
-            NodeContext context = GetNode(null, commandLineArgs, nodeId, factory, hostHandshake, NodeContextTerminated);
+            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CouldNotConnectToMSBuildExe", ComponentHost.BuildParameters.NodeExeLocation));
 
-            if (context != null)
+            void NodeContextCreated(NodeContext context)
             {
-                _nodeContexts[nodeId] = context;
+                NodeInfo nodeInfo = new NodeInfo(context.NodeId, ProviderType);
+
+                _nodeContexts[context.NodeId] = context;
 
                 // Start the asynchronous read.
                 context.BeginAsyncPacketRead();
 
                 // Configure the node.
-                context.SendData(configuration);
-
-                return true;
+                context.SendData(configurationFactory(nodeInfo));
             }
-
-            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CouldNotConnectToMSBuildExe", ComponentHost.BuildParameters.NodeExeLocation));
         }
 
         /// <summary>
@@ -130,12 +143,7 @@ public void SendData(int nodeId, INodePacket packet)
         public void ShutdownConnectedNodes(bool enableReuse)
         {
             // Send the build completion message to the nodes, causing them to shutdown or reset.
-            List<NodeContext> contextsToShutDown;
-
-            lock (_nodeContexts)
-            {
-                contextsToShutDown = new List<NodeContext>(_nodeContexts.Values);
-            }
+            var contextsToShutDown = new List<NodeContext>(_nodeContexts.Values);
 
             ShutdownConnectedNodes(contextsToShutDown, enableReuse);
         }
@@ -169,7 +177,7 @@ public void ShutdownAllNodes()
         public void InitializeComponent(IBuildComponentHost host)
         {
             this.ComponentHost = host;
-            _nodeContexts = new Dictionary<int, NodeContext>();
+            _nodeContexts = new ConcurrentDictionary<int, NodeContext>();
         }
 
         /// <summary>
@@ -195,10 +203,12 @@ static internal IBuildComponent CreateComponent(BuildComponentType componentType
         /// </summary>
         private void NodeContextTerminated(int nodeId)
         {
-            lock (_nodeContexts)
-            {
-                _nodeContexts.Remove(nodeId);
-            }
+            _nodeContexts.TryRemove(nodeId, out _);
+        }
+
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _nodeContexts.Values.Select(context => context.Process);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 9d7adfb26a6..c681f417bb5 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -9,6 +9,7 @@
 using System.IO;
 using System.IO.Pipes;
 using System.Diagnostics;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using System.Runtime.InteropServices;
@@ -23,13 +24,13 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
-
 using BackendNativeMethods = Microsoft.Build.BackEnd.NativeMethods;
 using Task = System.Threading.Tasks.Task;
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -65,8 +66,15 @@ internal abstract class NodeProviderOutOfProcBase
 
         /// <summary>
         /// Keeps track of the processes we've already checked for nodes so we don't check them again.
+        /// We decided to use ConcurrentDictionary of(string, byte) as common implementation of ConcurrentHashSet.
         /// </summary>
-        private HashSet<string> _processesToIgnore = new HashSet<string>();
+        private readonly ConcurrentDictionary<string, byte /*void*/> _processesToIgnore = new();
+
+        /// <summary>
+        /// Delegate used to tell the node provider that a context has been created.
+        /// </summary>
+        /// <param name="context">The created node context.</param>
+        internal delegate void NodeContextCreatedDelegate(NodeContext context);
 
         /// <summary>
         /// Delegate used to tell the node provider that a context has terminated.
@@ -141,7 +149,7 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
             // INodePacketFactory
             INodePacketFactory factory = new NodePacketFactory();
 
-            List<Process> nodeProcesses = GetPossibleRunningNodes().nodeProcesses;
+            List<Process> nodeProcesses = GetPossibleRunningNodes().nodeProcesses.ToList();
 
             // Find proper MSBuildTaskHost executable name
             string msbuildtaskhostExeName = NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost;
@@ -176,10 +184,16 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
         }
 
         /// <summary>
-        /// Finds or creates a child process which can act as a node.
+        /// Finds or creates a child processes which can act as a node.
         /// </summary>
-        /// <returns>The pipe stream representing the node.</returns>
-        protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, int nodeId, INodePacketFactory factory, Handshake hostHandshake, NodeContextTerminateDelegate terminateNode)
+        protected IList<NodeContext> GetNodes(string msbuildLocation,
+            string commandLineArgs,
+            int nextNodeId,
+            INodePacketFactory factory,
+            Handshake hostHandshake,
+            NodeContextCreatedDelegate createNode,
+            NodeContextTerminateDelegate terminateNode,
+            int numberOfNodesToCreate)
         {
 #if DEBUG
             if (Execution.BuildManager.WaitForDebugger)
@@ -204,94 +218,169 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
                 }
             }
 
+            // Get all process of possible running node processes for reuse and put them into ConcurrentQueue.
+            // Processes from this queue will be concurrently consumed by TryReusePossibleRunningNodes while
+            //    trying to connect to them and reuse them. When queue is empty, no process to reuse left
+            //    new node process will be started.
+            string expectedProcessName = null;
+            ConcurrentQueue<Process> possibleRunningNodes = null;
 #if FEATURE_NODE_REUSE
             // Try to connect to idle nodes if node reuse is enabled.
             if (_componentHost.BuildParameters.EnableNodeReuse)
             {
-                (string expectedProcessName, List<Process> processes) runningNodesTuple = GetPossibleRunningNodes(msbuildLocation);
+                IList<Process> possibleRunningNodesList;
+                (expectedProcessName, possibleRunningNodesList) = GetPossibleRunningNodes(msbuildLocation);
+                possibleRunningNodes = new ConcurrentQueue<Process>(possibleRunningNodesList);
 
-                CommunicationsUtilities.Trace("Attempting to connect to each existing {1} process in turn to establish node {0}...", nodeId, runningNodesTuple.expectedProcessName);
-                foreach (Process nodeProcess in runningNodesTuple.processes)
+                if (possibleRunningNodesList.Count > 0)
+                {
+                    CommunicationsUtilities.Trace("Attempting to connect to {1} existing processes '{0}'...", expectedProcessName, possibleRunningNodesList.Count);
+                }
+            }
+#endif
+            ConcurrentQueue<NodeContext> nodeContexts = new();
+            ConcurrentQueue<Exception> exceptions = new();
+            Parallel.For(nextNodeId, nextNodeId + numberOfNodesToCreate, (nodeId) =>
+            {
+                try
                 {
-                    if (nodeProcess.Id == Process.GetCurrentProcess().Id)
+                    if (!TryReuseAnyFromPossibleRunningNodes(nodeId) && !StartNewNode(nodeId))
+                    {
+                        // We were unable to reuse or launch a node.
+                        CommunicationsUtilities.Trace("FAILED TO CONNECT TO A CHILD NODE");
+                    }
+                }
+                catch (Exception ex)
+                {
+                    // It will be rethrown as aggregate exception
+                    exceptions.Enqueue(ex);
+                }
+            });
+            if (!exceptions.IsEmpty)
+            {
+                ErrorUtilities.ThrowInternalError("Cannot acquire required number of nodes.", new AggregateException(exceptions.ToArray()));
+            }
+
+            return nodeContexts.ToList();
+
+            bool TryReuseAnyFromPossibleRunningNodes(int nodeId)
+            {
+                while (possibleRunningNodes != null && possibleRunningNodes.TryDequeue(out var nodeToReuse))
+                {
+                    CommunicationsUtilities.Trace("Trying to connect to existing process {2} with id {1} to establish node {0}...", nodeId, nodeToReuse.Id, nodeToReuse.ProcessName);
+                    if (nodeToReuse.Id == Process.GetCurrentProcess().Id)
                     {
                         continue;
                     }
 
                     // Get the full context of this inspection so that we can always skip this process when we have the same taskhost context
-                    string nodeLookupKey = GetProcessesToIgnoreKey(hostHandshake, nodeProcess.Id);
-                    if (_processesToIgnore.Contains(nodeLookupKey))
+                    string nodeLookupKey = GetProcessesToIgnoreKey(hostHandshake, nodeToReuse.Id);
+                    if (_processesToIgnore.ContainsKey(nodeLookupKey))
                     {
                         continue;
                     }
 
                     // We don't need to check this again
-                    _processesToIgnore.Add(nodeLookupKey);
+                    _processesToIgnore.TryAdd(nodeLookupKey, default);
 
                     // Attempt to connect to each process in turn.
-                    Stream nodeStream = TryConnectToProcess(nodeProcess.Id, 0 /* poll, don't wait for connections */, hostHandshake);
+                    Stream nodeStream = TryConnectToProcess(nodeToReuse.Id, 0 /* poll, don't wait for connections */, hostHandshake);
                     if (nodeStream != null)
                     {
                         // Connection successful, use this node.
-                        CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeProcess.Id);
-                        return new NodeContext(nodeId, nodeProcess, nodeStream, factory, terminateNode);
+                        CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeToReuse.Id);
+
+                        CreateNodeContext(nodeId, nodeToReuse, nodeStream);
+                        return true;
                     }
                 }
+
+                return false;
             }
-#endif
 
-            // None of the processes we tried to connect to allowed a connection, so create a new one.
-            // We try this in a loop because it is possible that there is another MSBuild multiproc
-            // host process running somewhere which is also trying to create nodes right now.  It might
-            // find our newly created node and connect to it before we get a chance.
-            CommunicationsUtilities.Trace("Could not connect to existing process, now creating a process...");
-            int retries = NodeCreationRetries;
-            while (retries-- > 0)
+            // Create a new node process.
+            bool StartNewNode(int nodeId)
             {
-#if FEATURE_NET35_TASKHOST
-                // We will also check to see if .NET 3.5 is installed in the case where we need to launch a CLR2 OOP TaskHost.
-                // Failure to detect this has been known to stall builds when Windows pops up a related dialog.
-                // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
-                // nodes because we should never be able to connect in this case.
-                string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
-                if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
+                CommunicationsUtilities.Trace("Could not connect to existing process, now creating a process...");
+
+                // We try this in a loop because it is possible that there is another MSBuild multiproc
+                // host process running somewhere which is also trying to create nodes right now.  It might
+                // find our newly created node and connect to it before we get a chance.
+                int retries = NodeCreationRetries;
+                while (retries-- > 0)
                 {
-                    if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
+#if FEATURE_NET35_TASKHOST
+                    // We will also check to see if .NET 3.5 is installed in the case where we need to launch a CLR2 OOP TaskHost.
+                    // Failure to detect this has been known to stall builds when Windows pops up a related dialog.
+                    // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
+                    // nodes because we should never be able to connect in this case.
+                    string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
+                    if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
                     {
-                        CommunicationsUtilities.Trace
+                        if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
+                        {
+                            CommunicationsUtilities.Trace
                             (
                                 "Failed to launch node from {0}. The required .NET Framework v3.5 is not installed or enabled. CommandLine: {1}",
                                 msbuildLocation,
                                 commandLineArgs
                             );
 
-                        string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
-                        throw new NodeFailedToLaunchException(null, nodeFailedToLaunchError);
+                            string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
+                            throw new NodeFailedToLaunchException(null, nodeFailedToLaunchError);
+                        }
                     }
-                }
 #endif
+                    // Create the node process
+                    Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
+                    _processesToIgnore.TryAdd(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id), default);
+
+                    // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
+                    // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
+                    // to the debugger process. Instead, use MSBUILDDEBUGONSTART=1
 
-                // Create the node process
-                Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
-                _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id));
+                    // Now try to connect to it.
+                    Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
+                    if (nodeStream != null)
+                    {
+                        // Connection successful, use this node.
+                        CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
 
-                // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
-                // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
-                // to the debugger process. Instead, use MSBUILDDEBUGONSTART=1
+                        CreateNodeContext(nodeId, msbuildProcess, nodeStream);
+                        return true;
+                    }
 
-                // Now try to connect to it.
-                Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
-                if (nodeStream != null)
-                {
-                    // Connection successful, use this node.
-                    CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
-                    return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);
+                    if (msbuildProcess.HasExited)
+                    {
+                        if (Traits.Instance.DebugNodeCommunication)
+                        {
+                            try
+                            {
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup", msbuildProcess.Id, msbuildProcess.ExitCode);
+                            }
+                            catch (InvalidOperationException)
+                            {
+                                // This case is common on Windows where we called CreateProcess and the Process object
+                                // can't get the exit code.
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup", msbuildProcess.Id);
+                            }
+                        }
+                    }
+                    else
+                    {
+                        CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node", msbuildProcess.Id);
+                    }
                 }
+
+                return false;
             }
 
-            // We were unable to launch a node.
-            CommunicationsUtilities.Trace("FAILED TO CONNECT TO A CHILD NODE");
-            return null;
+            void CreateNodeContext(int nodeId, Process nodeToReuse, Stream nodeStream)
+            {
+                NodeContext nodeContext = new(nodeId, nodeToReuse, nodeStream, factory, terminateNode);
+                nodeContexts.Enqueue(nodeContext);
+                createNode(nodeContext);
+            }
         }
 
         /// <summary>
@@ -300,9 +389,9 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
         /// <param name="msbuildLocation"></param>
         /// <returns>
         /// Item 1 is the name of the process being searched for.
-        /// Item 2 is the list of processes themselves.
+        /// Item 2 is the ConcurrentQueue of ordered processes themselves.
         /// </returns>
-        private (string expectedProcessName, List<Process> nodeProcesses) GetPossibleRunningNodes(string msbuildLocation = null)
+        private (string expectedProcessName, IList<Process> nodeProcesses) GetPossibleRunningNodes(string msbuildLocation = null)
         {
             if (String.IsNullOrEmpty(msbuildLocation))
             {
@@ -311,12 +400,10 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
 
             var expectedProcessName = Path.GetFileNameWithoutExtension(GetCurrentHost() ?? msbuildLocation);
 
-            List<Process> nodeProcesses = new List<Process>(Process.GetProcessesByName(expectedProcessName));
-
-            // Trivial sort to try to prefer most recently used nodes
-            nodeProcesses.Sort((left, right) => left.Id - right.Id);
+            var processes = Process.GetProcessesByName(expectedProcessName);
+            Array.Sort(processes, (left, right) => left.Id.CompareTo(right.Id));
 
-            return (expectedProcessName, nodeProcesses);
+            return (expectedProcessName, processes);
         }
 
         /// <summary>
@@ -329,7 +416,7 @@ private string GetProcessesToIgnoreKey(Handshake hostHandshake, int nodeProcessI
         }
 
 #if !FEATURE_PIPEOPTIONS_CURRENTUSERONLY
-        //  This code needs to be in a separate method so that we don't try (and fail) to load the Windows-only APIs when JIT-ing the code
+        // This code needs to be in a separate method so that we don't try (and fail) to load the Windows-only APIs when JIT-ing the code
         //  on non-Windows operating systems
         private void ValidateRemotePipeSecurityOnWindows(NamedPipeClientStream nodeStream)
         {
@@ -642,6 +729,8 @@ enum ExitPacketState
             /// </summary>
             private readonly Process _process;
 
+            internal Process Process { get { return _process; } }
+
             /// <summary>
             /// An array used to store the header byte for each packet when read.
             /// </summary>
@@ -705,6 +794,11 @@ public NodeContext(int nodeId, Process process,
                 _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
             }
 
+            /// <summary>
+            /// Id of node.
+            /// </summary>
+            public int NodeId => _nodeId;
+
             /// <summary>
             /// Starts a new asynchronous read operation for this node.
             /// </summary>
@@ -1055,7 +1149,7 @@ private bool ProcessBodyBytesRead(int bytesRead, int packetLength, NodePacketTyp
                 return true;
             }
 
-            private bool ReadAndRoutePacket(NodePacketType packetType, byte [] packetData, int packetLength)
+            private bool ReadAndRoutePacket(NodePacketType packetType, byte[] packetData, int packetLength)
             {
                 try
                 {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 5d6c5f8f2cc..b9a9d2a2f2f 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -9,6 +9,9 @@
 
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
+using System.Linq;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -35,6 +38,11 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_baseTaskHostPath64;
 
+        /// <summary>
+        /// Store the 64-bit path for MSBuild / MSBuildTaskHost so that we don't have to keep recalculating it.
+        /// </summary>
+        private static string s_baseTaskHostPathArm64;
+
         /// <summary>
         /// Store the path for the 32-bit MSBuildTaskHost so that we don't have to keep re-calculating it.
         /// </summary>
@@ -55,6 +63,11 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_pathToX64Clr4;
 
+        /// <summary>
+        /// Store the path for the 64-bit MSBuild so that we don't have to keep re-calculating it.
+        /// </summary>
+        private static string s_pathToArm64Clr4;
+
         /// <summary>
         /// Name for MSBuild.exe
         /// </summary>
@@ -149,7 +162,7 @@ internal static string TaskHostNameForClr2TaskHost
         /// <summary>
         /// Instantiates a new MSBuild process acting as a child node.
         /// </summary>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory packetFactory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
         {
             throw new NotImplementedException("Use the other overload of CreateNode instead");
         }
@@ -351,8 +364,10 @@ internal static void ClearCachedTaskHostPaths()
             s_pathToX32Clr4 = null;
             s_pathToX64Clr2 = null;
             s_pathToX64Clr4 = null;
+            s_pathToArm64Clr4 = null;
             s_baseTaskHostPath = null;
             s_baseTaskHostPath64 = null;
+            s_baseTaskHostPathArm64 = null;
         }
 
         /// <summary>
@@ -390,13 +405,20 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
         internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
-            string toolPath;
+            string toolPath = null;
 
             s_baseTaskHostPath = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
             s_baseTaskHostPath64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64;
+            s_baseTaskHostPathArm64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryArm64;
+
             ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);
 
-            if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            {
+                // Unsupported, throw.
+                ErrorUtilities.ThrowInternalError("ARM64 CLR2 task hosts are not supported.");
+            }
+            else if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
             {
                 if (s_pathToX64Clr2 == null)
                 {
@@ -432,6 +454,15 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
 
                 toolPath = s_pathToX64Clr4;
             }
+            else if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64)
+            {
+                if (s_pathToArm64Clr4 == null)
+                {
+                    s_pathToArm64Clr4 = s_baseTaskHostPathArm64;
+                }
+
+                toolPath = s_pathToArm64Clr4;
+            }
             else
             {
                 if (s_pathToX32Clr4 == null)
@@ -455,9 +486,8 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
         /// </summary>
         internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
         {
-            NodeContext context;
             bool nodeCreationSucceeded;
-            if (!_nodeContexts.TryGetValue(hostContext, out context))
+            if (!_nodeContexts.ContainsKey(hostContext))
             {
                 nodeCreationSucceeded = CreateNode(hostContext, factory, handler, configuration);
             }
@@ -469,7 +499,7 @@ internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFacto
 
             if (nodeCreationSucceeded)
             {
-                context = _nodeContexts[hostContext];
+                NodeContext context = _nodeContexts[hostContext];
                 _nodeIdToPacketFactory[(int)hostContext] = factory;
                 _nodeIdToPacketHandler[(int)hostContext] = handler;
 
@@ -508,7 +538,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
 
             // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
             // want to start up an MSBuild task host node.
-            string commandLineArgs = $" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} ";
+            string commandLineArgs = $" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} ";
 
             string msbuildLocation = GetMSBuildLocationFromHostContext(hostContext);
 
@@ -520,31 +550,36 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
 
             CommunicationsUtilities.Trace("For a host context of {0}, spawning executable from {1}.", hostContext.ToString(), msbuildLocation ?? "MSBuild.exe");
 
-            // Make it here.
-            NodeContext context = GetNode
-                                    (
-                                        msbuildLocation,
-                                        commandLineArgs,
-                                        (int)hostContext,
-                                        this,
-                                        new Handshake(hostContext),
-                                        NodeContextTerminated
-                                    );
-
-            if (context != null)
-            {
-                _nodeContexts[hostContext] = context;
+            // There is always one task host per host context so we always create just 1 one task host node here.
+            int nodeId = (int)hostContext;
+            IList<NodeContext> nodeContexts = GetNodes(
+                msbuildLocation,
+                commandLineArgs,
+                nodeId,
+                this,
+                new Handshake(hostContext),
+                NodeContextCreated,
+                NodeContextTerminated,
+                1);
+
+            return nodeContexts.Count == 1;
+        }
 
-                // Start the asynchronous read.
-                context.BeginAsyncPacketRead();
+        /// <summary>
+        /// Method called when a context created.
+        /// </summary>
+        private void NodeContextCreated(NodeContext context)
+        {
+            _nodeContexts[(HandshakeOptions)context.NodeId] = context;
 
-                _activeNodes.Add((int)hostContext);
-                _noNodesActiveEvent.Reset();
+            // Start the asynchronous read.
+            context.BeginAsyncPacketRead();
 
-                return true;
+            lock (_activeNodes)
+            {
+                _activeNodes.Add(context.NodeId);
             }
-
-            return false;
+            _noNodesActiveEvent.Reset();
         }
 
         /// <summary>
@@ -571,5 +606,10 @@ private void NodeContextTerminated(int nodeId)
                 }
             }
         }
+
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _nodeContexts.Values.Select(context => context.Process);
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
index e54ed7f2f70..2b2102095b8 100644
--- a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
@@ -4,6 +4,10 @@
 using System;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using System.Collections.Generic;
+using System.Diagnostics;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -40,14 +44,10 @@ private TaskHostNodeManager()
 
         /// <summary>
         /// Creates a node on an available NodeProvider, if any..
+        /// Not used - base class <see cref="NodeProviderOutOfProcBase"/> implementation is reused instead.
         /// </summary>
-        /// <param name="configuration">The configuration to use for the remote node.</param>
-        /// <param name="nodeAffinity">The <see cref="NodeAffinity"/> to use.</param>
-        /// <returns>A NodeInfo describing the node created, or null if none could be created.</returns>
-        public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAffinity)
-        {
-            throw new NotSupportedException("not used");
-        }
+        public IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity affinity, int numberOfNodesToCreate)
+            => throw new NotSupportedException("not used");
 
         /// <summary>
         /// Sends data to the specified node.
@@ -169,5 +169,10 @@ static internal IBuildComponent CreateComponent(BuildComponentType type)
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskHostNodeManager, "Cannot create component of type {0}", type);
             return new TaskHostNodeManager();
         }
+
+        IEnumerable<Process> INodeManager.GetProcesses()
+        {
+            return _outOfProcTaskHostNodeProvider.GetProcesses();
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
index f10fbf8dc50..cfd6c3a61da 100644
--- a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
+++ b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -83,15 +85,7 @@ public static T FactoryForDeserializingTypeWithName<T>(this ITranslator translat
                 t =>
                 {
                     ConstructorInfo constructor = null;
-#if FEATURE_TYPE_GETCONSTRUCTOR
                     constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
-#else
-                    constructor =
-                        type
-                            .GetTypeInfo()
-                            .GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic)
-                            .FirstOrDefault(c => c.GetParameters().Length == 0);
-#endif
                     ErrorUtilities.VerifyThrowInvalidOperation(
                         constructor != null,
                         $"{typeName} must have a private parameterless constructor");
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 4e57c5f2ae1..100571a029f 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -5,6 +5,8 @@
 using BuildParameters = Microsoft.Build.Execution.BuildParameters;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
index 57c0e51523e..db701c61150 100644
--- a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs b/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
index 239dccfaf33..aa2a8a9a3da 100644
--- a/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
index 02b143cdc40..4cd8e3abf0b 100644
--- a/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
+++ b/src/Build/BackEnd/Components/Logging/CentralForwardingLogger.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index db2e6aecb4f..c1fa3e463a7 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Components.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/EventRedirectorToSink.cs b/src/Build/BackEnd/Components/Logging/EventRedirectorToSink.cs
index b2817ca1b11..8219327f45b 100644
--- a/src/Build/BackEnd/Components/Logging/EventRedirectorToSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventRedirectorToSink.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index eb5e38969a2..5604021e28a 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -9,6 +9,8 @@
 
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/ForwardingLoggerRecord.cs b/src/Build/BackEnd/Components/Logging/ForwardingLoggerRecord.cs
index 09cc3138399..d2b9738db36 100644
--- a/src/Build/BackEnd/Components/Logging/ForwardingLoggerRecord.cs
+++ b/src/Build/BackEnd/Components/Logging/ForwardingLoggerRecord.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 85538f7baa4..c261563d0e7 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -12,6 +12,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     #region Delegates
@@ -161,6 +163,15 @@ ISet<string> WarningsAsErrors
             set;
         }
 
+        /// <summary>
+        /// Set of warnings to not treat as errors. Only has any effect if WarningsAsErrors is non-null but empty.
+        /// </summary>
+        ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
@@ -232,6 +243,13 @@ MessageImportance MinimumRequiredMessageImportance
         /// <param name="codes">The list of warning codes to treat as errors.</param>
         void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes);
 
+        /// <summary>
+        /// Adds a set of warning codes to not treat as errors for the specified project instance ID.
+        /// </summary>
+        /// <param name="buildEventContext">A <see cref="BuildEventContext"/> to associate with the list of warning codes.</param>
+        /// <param name="codes">The list of warning codes not to treat as errors.</param>
+        void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes);
+
         /// <summary>
         /// Determines if the specified submission has logged an errors.
         /// </summary>
@@ -240,17 +258,24 @@ MessageImportance MinimumRequiredMessageImportance
         bool HasBuildSubmissionLoggedErrors(int submissionId);
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
+        /// Get the warnings that will be promoted to errors for the specified context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>
+        /// <returns>A collection of warning codes that should be treated as errors.</returns>
         ICollection<string> GetWarningsAsErrors(BuildEventContext context);
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as messages for the specified project instance ID.
+        /// Get the warnings that will not be promoted to error for the specified context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will not be logged as errors.</param>
+        /// <returns>A collection of warning codes that should not be treated as errors.</returns>
+        ICollection<string> GetWarningsNotAsErrors(BuildEventContext context);
+
+        /// <summary>
+        /// Get the warnings that will be demoted to messages for the specified context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as messages.</returns>
+        /// <returns>A collection of warning codes that should be treated as messages.</returns>
         ICollection<string> GetWarningsAsMessages(BuildEventContext context);
 
         #region Register
@@ -267,7 +292,7 @@ MessageImportance MinimumRequiredMessageImportance
         /// Register an logger which expects all logging events from the system
         /// </summary>
         /// <param name="logger">The logger to register.</param>
-        ///<returns value="bool">True if the central was registered. False if the central logger was already registered</returns>
+        /// <returns value="bool">True if the central was registered. False if the central logger was already registered</returns>
         bool RegisterLogger(ILogger logger);
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index 5fd43fbbfb7..a81fd673b27 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 117f5195448..6d6a42d2d88 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -4,17 +4,17 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
 using System.Threading;
-using System.Threading.Tasks.Dataflow;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -101,7 +101,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <summary>
         /// The mapping of build request configuration ids to project file names.
         /// </summary>
-        private Dictionary<int, string> _projectFileMap;
+        private ConcurrentDictionary<int, string> _projectFileMap;
 
         /// <summary>
         /// The current state of the logging service
@@ -165,12 +165,12 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <summary>
         /// The next project ID to assign when a project evaluation started event is received.
         /// </summary>
-        private int _nextEvaluationId = 1;
+        private int _nextEvaluationId;
 
         /// <summary>
         /// The next project ID to assign when a project started event is received.
         /// </summary>
-        private int _nextProjectId = 1;
+        private int _nextProjectId;
 
         /// <summary>
         /// The next target ID to assign when a target started event is received.
@@ -218,6 +218,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// </summary>
         private IDictionary<int, ISet<string>> _warningsAsErrorsByProject;
 
+        /// <summary>
+        /// A list of warnings to not to be promoted to errors for an associated <see cref="BuildEventContext"/>.
+        /// </summary>
+        private IDictionary<int, ISet<string>> _warningsNotAsErrorsByProject;
+
         /// <summary>
         /// A list of warnings to treat as messages for an associated <see cref="BuildEventContext"/>.
         /// </summary>
@@ -232,14 +237,32 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         #region LoggingThread Data
 
         /// <summary>
-        /// The data flow buffer for logging events.
+        /// Queue for asynchronous event processing.
+        /// </summary>
+        private ConcurrentQueue<object> _eventQueue;
+
+        /// <summary>
+        /// Event set when message is consumed from queue.
+        /// </summary>
+        private ManualResetEventSlim _dequeueEvent;
+        /// <summary>
+        /// Event set when queue become empty.
+        /// </summary>
+        private ManualResetEventSlim _emptyQueueEvent;
+        /// <summary>
+        /// Even set when message is added into queue.
+        /// </summary>
+        private ManualResetEventSlim _enqueueEvent;
+
+        /// <summary>
+        /// CTS for stopping logging event processing.
         /// </summary>
-        private BufferBlock<object> _loggingQueue;
+        private CancellationTokenSource _loggingEventProcessingCancellation;
 
         /// <summary>
-        /// The data flow processor for logging events.
+        /// Task which pump/process messages from <see cref="_eventQueue"/>
         /// </summary>
-        private ActionBlock<object> _loggingQueueProcessor;
+        private Thread _loggingEventProcessingThread;
 
         /// <summary>
         /// The queue size above which the queue will close to messages from remote nodes.
@@ -269,7 +292,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <param name="nodeId">The node identifier.</param>
         protected LoggingService(LoggerMode loggerMode, int nodeId)
         {
-            _projectFileMap = new Dictionary<int, string>();
+            _projectFileMap = new ConcurrentDictionary<int, string>();
             _logMode = loggerMode;
             _loggers = new List<ILogger>();
             _loggerDescriptions = new List<LoggerDescription>();
@@ -284,8 +307,7 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
             string queueCapacityEnvironment = Environment.GetEnvironmentVariable("MSBUILDLOGGINGQUEUECAPACITY");
             if (!String.IsNullOrEmpty(queueCapacityEnvironment))
             {
-                uint localQueueCapacity;
-                if (UInt32.TryParse(queueCapacityEnvironment, out localQueueCapacity))
+                if (UInt32.TryParse(queueCapacityEnvironment, out uint localQueueCapacity))
                 {
                     _queueCapacity = localQueueCapacity;
                 }
@@ -295,7 +317,7 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
 
             if (_logMode == LoggerMode.Asynchronous)
             {
-                CreateLoggingEventQueue();
+                StartLoggingEventProcessing();
             }
 
             // Ensure the static constructor of ItemGroupLoggingHelper runs.
@@ -366,11 +388,8 @@ public int NextEvaluationId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextEvaluationId += MaxCPUCount + 2 /* We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)*/;
-                    return _nextEvaluationId;
-                }
+                // We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)
+                return Interlocked.Add(ref _nextEvaluationId, MaxCPUCount + 2);
             }
         }
 
@@ -382,11 +401,8 @@ public int NextProjectId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextProjectId += MaxCPUCount + 2 /* We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)*/;
-                    return _nextProjectId;
-                }
+                // We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)
+                return Interlocked.Add(ref _nextProjectId, MaxCPUCount + 2);
             }
         }
 
@@ -398,11 +414,7 @@ public int NextTargetId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextTargetId++;
-                    return _nextTargetId;
-                }
+                return Interlocked.Increment(ref _nextTargetId);
             }
         }
 
@@ -414,11 +426,7 @@ public int NextTaskId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextTaskId++;
-                    return _nextTaskId;
-                }
+                return Interlocked.Increment(ref _nextTaskId);
             }
         }
 
@@ -479,6 +487,15 @@ public ISet<string> WarningsAsErrors
             set;
         } = null;
 
+        /// <summary>
+        /// Get of warnings to not treat as errors. Only has any effect if WarningsAsErrors is empty but not null.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        } = null;
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
@@ -525,9 +542,17 @@ public bool IncludeEvaluationPropertiesAndItems
             {
                 if (_includeEvaluationPropertiesAndItems == null)
                 {
-                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();
-                    // .All() on an empty list defaults to true, we want to default to false
-                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);
+                    var escapeHatch = Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation;
+                    if (escapeHatch.HasValue)
+                    {
+                        _includeEvaluationPropertiesAndItems = escapeHatch.Value;
+                    }
+                    else
+                    {
+                        var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();
+                        // .All() on an empty list defaults to true, we want to default to false
+                        _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);
+                    }
                 }
 
                 return _includeEvaluationPropertiesAndItems ?? false;
@@ -554,105 +579,115 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         }
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors for the specified build context.
+        /// Returns a collection of warnings to be logged as errors for the specified build context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
         /// <returns>
         /// </returns>
         public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
         {
-            int key = GetWarningsAsErrorOrMessageKey(context);
-
-            if (_warningsAsErrorsByProject != null && _warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))
-            {
-                if (WarningsAsErrors != null)
-                {
-                    warningsAsErrors.UnionWith(WarningsAsErrors);
-                }
+            return GetWarningsForProject(context, _warningsAsErrorsByProject, WarningsAsErrors);
+        }
 
-                return warningsAsErrors;
-            }
-            else
-            {
-                return WarningsAsErrors;
-            }
+        /// <summary>
+        /// Returns a collection of warnings not to be logged as errors for the specified build context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be kept as warnings.</param>
+        /// <returns>
+        /// </returns>
+        public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)
+        {
+            return GetWarningsForProject(context, _warningsNotAsErrorsByProject, WarningsNotAsErrors);
         }
 
+        /// <summary>
+        /// Returns a collection of warnings to be demoted to messages for the specified build context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be logged as messages.</param>
+        /// <returns>
+        /// </returns>
         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
+        {
+            return GetWarningsForProject(context, _warningsAsMessagesByProject, WarningsAsMessages);
+        }
+
+        /// <summary>
+        /// Helper method that unifies the logic for GetWarningsAsErrors, GetWarningsNotAsErrors, and GetWarningsAsMessages.
+        /// Specifically, this method returns a collection of codes that, within the context of a particular project, should
+        /// be treated specially. These tend to come from setting the associated properties in the project file. These are
+        /// added to previously known codes as necessary.
+        /// </summary>
+        /// <param name="context">The specific context in which to consider special treatment for warnings.</param>
+        /// <param name="warningsByProject">A dictionary of all warnings to be treated special by for which projects.</param>
+        /// <param name="warnings">Warning codes we already know should be promoted, demoted, or not promoted as relevant.</param>
+        /// <returns></returns>
+        private ICollection<string> GetWarningsForProject(BuildEventContext context, IDictionary<int, ISet<string>> warningsByProject, ISet<string> warnings)
         {
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            if (_warningsAsMessagesByProject != null && _warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))
+            if (warningsByProject != null && warningsByProject.TryGetValue(key, out ISet<string> newWarnings))
             {
-                if (WarningsAsMessages != null)
+                if (warnings != null)
                 {
-                    warningsAsMessages.UnionWith(WarningsAsMessages);
+                    newWarnings.UnionWith(warnings);
                 }
 
-                return warningsAsMessages;
+                return newWarnings;
             }
             else
             {
-                return WarningsAsMessages;
+                return warnings;
             }
         }
 
+        /// <summary>
+        /// Adds warning codes that should be treated as errors to the known set.
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider possible warnings to be promoted.</param>
+        /// <param name="codes">Codes to promote</param>
         public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
         {
-            lock (_lockObject)
-            {
-                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
-
-                if (_warningsAsErrorsByProject == null)
-                {
-                    _warningsAsErrorsByProject = new ConcurrentDictionary<int, ISet<string>>();
-                }
+            AddWarningsAsMessagesOrErrors(ref _warningsAsErrorsByProject, buildEventContext, codes);
+        }
 
-                if (!_warningsAsErrorsByProject.ContainsKey(key))
-                {
-                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
-                    _warningsAsErrorsByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
-                }
-            }
+        /// <summary>
+        /// Adds warning codes that should not be treated as errors even if WarnAsError is empty (specifying that all warnings should be promoted).
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider warnings not to be promoted.</param>
+        /// <param name="codes">Codes not to promote</param>
+        public void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
+        {
+            AddWarningsAsMessagesOrErrors(ref _warningsNotAsErrorsByProject, buildEventContext, codes);
         }
 
+        /// <summary>
+        /// Adds warning codes that should be treated as messages.
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider warnings to be demoted.</param>
+        /// <param name="codes">Codes to demote</param>
         public void AddWarningsAsMessages(BuildEventContext buildEventContext, ISet<string> codes)
         {
-            lock (_lockObject)
-            {
-                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
-
-                if (_warningsAsMessagesByProject == null)
-                {
-                    _warningsAsMessagesByProject = new ConcurrentDictionary<int, ISet<string>>();
-                }
-
-                if (!_warningsAsMessagesByProject.ContainsKey(key))
-                {
-                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
-                    _warningsAsMessagesByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
-                }
-            }
+            AddWarningsAsMessagesOrErrors(ref _warningsAsMessagesByProject, buildEventContext, codes);
         }
 
         /// <summary>
-        /// Return whether or not the LoggingQueue has any events left in it
+        /// Adds warning codes to be treated or not treated as warnings or errors to the set of project-specific codes.
         /// </summary>
-        public bool LoggingQueueHasEvents
+        /// <param name="warningsByProject">Dictionary with what warnings are currently known (by project) that we will add to.</param>
+        /// <param name="buildEventContext">Context for the project to be added</param>
+        /// <param name="codes">Codes to add</param>
+        private void AddWarningsAsMessagesOrErrors(ref IDictionary<int, ISet<string>> warningsByProject, BuildEventContext buildEventContext, ISet<string> codes)
         {
-            get
+            lock (_lockObject)
             {
-                lock (_lockObject)
+                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
+
+                warningsByProject ??= new ConcurrentDictionary<int, ISet<string>>();
+
+                if (!warningsByProject.ContainsKey(key))
                 {
-                    if (_loggingQueue != null)
-                    {
-                        return _loggingQueue.Count > 0;
-                    }
-                    else
-                    {
-                        ErrorUtilities.ThrowInternalError("loggingQueue is null");
-                        return false;
-                    }
+                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
+                    warningsByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
                 }
             }
         }
@@ -806,7 +841,7 @@ public void ShutdownComponent()
                         // 2. Terminate the logging event queue
                         if (_logMode == LoggerMode.Asynchronous)
                         {
-                            TerminateLoggingEventQueue();
+                            TerminateLoggingEventProcessing();
                         }
                     }
 
@@ -830,12 +865,7 @@ public void ShutdownComponent()
                     // sink for the central loggers.
                     _centralForwardingLoggerSinkId = -1;
 
-                    // Clean up anything related to the asynchronous logging
-                    if (_logMode == LoggerMode.Asynchronous)
-                    {
-                        _loggingQueue = null;
-                        _loggingQueueProcessor = null;
-                    }
+                    CleanLoggingEventProcessing();
 
                     _loggers = new List<ILogger>();
                     _loggerDescriptions = null;
@@ -869,7 +899,7 @@ public void PacketReceived(int node, INodePacket packet)
 
             LogMessagePacket loggingPacket = (LogMessagePacket)packet;
             InjectNonSerializedData(loggingPacket);
-            ProcessLoggingEvent(loggingPacket.NodeBuildEvent, allowThrottling: true);
+            ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
         }
 
         /// <summary>
@@ -1095,46 +1125,43 @@ public void InitializeNodeLoggers(ICollection<LoggerDescription> descriptions, I
         /// <exception cref="InternalErrorException">buildEvent is null</exception>
         public void LogBuildEvent(BuildEventArgs buildEvent)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
+            ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
 
-                BuildWarningEventArgs warningEvent = null;
-                BuildErrorEventArgs errorEvent = null;
-                BuildMessageEventArgs messageEvent = null;
+            BuildWarningEventArgs warningEvent = null;
+            BuildErrorEventArgs errorEvent = null;
+            BuildMessageEventArgs messageEvent = null;
 
-                if ((warningEvent = buildEvent as BuildWarningEventArgs) != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    warningEvent.ProjectFile = GetAndVerifyProjectFileFromContext(warningEvent.BuildEventContext);
-                }
-                else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null && errorEvent.BuildEventContext != null && errorEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    errorEvent.ProjectFile = GetAndVerifyProjectFileFromContext(errorEvent.BuildEventContext);
-                }
-                else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null && messageEvent.BuildEventContext != null && messageEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    messageEvent.ProjectFile = GetAndVerifyProjectFileFromContext(messageEvent.BuildEventContext);
-                }
+            if ((warningEvent = buildEvent as BuildWarningEventArgs) != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                warningEvent.ProjectFile = GetAndVerifyProjectFileFromContext(warningEvent.BuildEventContext);
+            }
+            else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null && errorEvent.BuildEventContext != null && errorEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                errorEvent.ProjectFile = GetAndVerifyProjectFileFromContext(errorEvent.BuildEventContext);
+            }
+            else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null && messageEvent.BuildEventContext != null && messageEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                messageEvent.ProjectFile = GetAndVerifyProjectFileFromContext(messageEvent.BuildEventContext);
+            }
 
-                if (OnlyLogCriticalEvents)
-                {
-                    // Only log certain events if OnlyLogCriticalEvents is true
-                    if (
-                        (warningEvent != null)
-                        || (errorEvent != null)
-                        || (buildEvent is CustomBuildEventArgs)
-                        || (buildEvent is CriticalBuildMessageEventArgs)
-                       )
-                    {
-                        ProcessLoggingEvent(buildEvent);
-                    }
-                }
-                else
+            if (OnlyLogCriticalEvents)
+            {
+                // Only log certain events if OnlyLogCriticalEvents is true
+                if (
+                    (warningEvent != null)
+                    || (errorEvent != null)
+                    || (buildEvent is CustomBuildEventArgs)
+                    || (buildEvent is CriticalBuildMessageEventArgs)
+                   )
                 {
-                    // Log all events if OnlyLogCriticalEvents is false
                     ProcessLoggingEvent(buildEvent);
                 }
             }
+            else
+            {
+                // Log all events if OnlyLogCriticalEvents is false
+                ProcessLoggingEvent(buildEvent);
+            }
         }
 
         #endregion
@@ -1147,20 +1174,22 @@ public void LogBuildEvent(BuildEventArgs buildEvent)
         /// In Synchronous mode the event should be routed to the correct sink or logger right away
         /// </summary>
         /// <param name="buildEvent">BuildEventArgs to process</param>
-        /// <param name="allowThrottling"><code>true</code> to allow throttling, otherwise <code>false</code>.</param>
         /// <exception cref="InternalErrorException">buildEvent is null</exception>
-        internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
+        internal virtual void ProcessLoggingEvent(object buildEvent)
         {
             ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
             if (_logMode == LoggerMode.Asynchronous)
             {
-                // If the queue is at capacity, this call will block - the task returned by SendAsync only completes 
-                // when the message is actually consumed or rejected (permanently) by the buffer.
-                var task = _loggingQueue.SendAsync(buildEvent);
-                if (allowThrottling)
+                // Block until queue is not full.
+                while (_eventQueue.Count >= _queueCapacity)
                 {
-                    task.Wait();
+                    // Block and wait for dequeue event.
+                    _dequeueEvent.Wait();
+                    _dequeueEvent.Reset();
                 }
+
+                _eventQueue.Enqueue(buildEvent);
+                _enqueueEvent.Set();
             }
             else
             {
@@ -1172,41 +1201,21 @@ internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottlin
         }
 
         /// <summary>
-        /// Wait for the logging messages in the logging queue to be completly processed.
+        /// Wait for the logging messages in the logging queue to be completely processed.
         /// This is required because for Logging build finished or when the component is to shutdown
         /// we need to make sure we process all of the events before the build finished event is raised
         /// and we need to make sure we process all of the logging events before we shutdown the component.
         /// </summary>
-        internal void WaitForThreadToProcessEvents()
+        public void WaitForLoggingToProcessEvents()
         {
-            // This method may be called in the shutdown submission callback, this callback may be called after the logging service has 
-            // shutdown and nulled out the events we were going to wait on.
-            if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
+            while (_eventQueue?.IsEmpty == false)
             {
-                BufferBlock<object> loggingQueue = null;
-                ActionBlock<object> loggingQueueProcessor = null;
-
-                lock (_lockObject)
-                {
-                    loggingQueue = _loggingQueue;
-                    loggingQueueProcessor = _loggingQueueProcessor;
-
-                    // Replaces _loggingQueue and _loggingQueueProcessor with new one, this will assure that
-                    // no further messages could possibly be trying to be added into queue we are about to drain
-                    CreateLoggingEventQueue();
-                }
-
-                // Drain queue.
-                // This shall not be locked to avoid possible deadlock caused by
-                // event handlers to reenter 'this' instance while trying to log something.
-                if (loggingQueue != null)
-                {
-                    Debug.Assert(!Monitor.IsEntered(_lockObject));
-
-                    loggingQueue.Complete();
-                    loggingQueueProcessor.Completion.Wait();
-                }
+                _emptyQueueEvent?.Wait();
             }
+            // To avoid race condition when last message has been removed from queue but
+            //   not yet fully processed (handled by loggers), we need to make sure _emptyQueueEvent
+            //   is set as it is guaranteed to be in set state no sooner than after event has been processed.
+            _emptyQueueEvent?.Wait();
         }
 
         /// <summary>
@@ -1250,55 +1259,81 @@ private static int GetWarningsAsErrorOrMessageKey(BuildEventArgs buildEventArgs)
         }
 
         /// <summary>
-        /// Create a logging thread to process the logging queue
+        /// Create a logging thread to process the logging queue.
         /// </summary>
-        private void CreateLoggingEventQueue()
+        private void StartLoggingEventProcessing()
         {
-            // We are creating a two-node dataflow graph here.  The first node is a buffer, which will hold up to the number of
-            // logging events we have specified as the queueCapacity.  The second node is the processor which will actually process each message.
-            // When the capacity of the buffer is reached, further attempts to send messages to it will block.
-            // The reason we can't just set the BoundedCapacity on the processing block is that ActionBlock has some weird behavior
-            // when the queue capacity is reached.  Specifically, it will block new messages from being processed until it has
-            // entirely drained its input queue, as opposed to letting new ones in as old ones are processed.  This is logged as 
-            // a perf bug (305575) against Dataflow.  If they choose to fix it, we can eliminate the buffer node from the graph.
-            var dataBlockOptions = new DataflowBlockOptions
+            _eventQueue = new ConcurrentQueue<object>();
+            _dequeueEvent = new ManualResetEventSlim(false);
+            _emptyQueueEvent = new ManualResetEventSlim(false);
+            _enqueueEvent = new ManualResetEventSlim(false);
+            _loggingEventProcessingCancellation = new CancellationTokenSource();
+
+            _loggingEventProcessingThread = new Thread(LoggingEventProc);
+            _loggingEventProcessingThread.Name = $"MSBuild LoggingService events queue pump: {this.GetHashCode()}";
+            _loggingEventProcessingThread.IsBackground = true;
+            _loggingEventProcessingThread.Start();
+
+            void LoggingEventProc()
             {
-                BoundedCapacity = Convert.ToInt32(_queueCapacity)
-            };
-
-            var loggingQueue = new BufferBlock<object>(dataBlockOptions);
+                var completeAdding = _loggingEventProcessingCancellation.Token;
+                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent.WaitHandle };
 
-            var executionDataBlockOptions = new ExecutionDataflowBlockOptions
-            {
-                BoundedCapacity = 1
-            };
-
-            var loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
+                do
+                {
+                    if (_eventQueue.TryDequeue(out object ev))
+                    {
+                        LoggingEventProcessor(ev);
+                        _dequeueEvent.Set();
+                    }
+                    else
+                    {
+                        _emptyQueueEvent.Set();
 
-            var dataLinkOptions = new DataflowLinkOptions
-            {
-                PropagateCompletion = true
-            };
+                        // Wait for next event, or finish.
+                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)
+                        {
+                            WaitHandle.WaitAny(waitHandlesForNextEvent);
+                        }
 
-            loggingQueue.LinkTo(loggingQueueProcessor, dataLinkOptions);
+                        _enqueueEvent.Reset();
+                        _emptyQueueEvent.Reset();
+                    }
+                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);
 
-            lock (_lockObject)
-            {
-                _loggingQueue = loggingQueue;
-                _loggingQueueProcessor = loggingQueueProcessor;
+                _emptyQueueEvent.Set();
             }
         }
 
+
         /// <summary>
-        /// Wait for the logginQueue to empty and then terminate the logging thread
+        /// Clean resources used for logging event processing queue.
         /// </summary>
-        private void TerminateLoggingEventQueue()
+        private void CleanLoggingEventProcessing()
         {
-            // Dont accept any more items from other threads.
-            _loggingQueue.Complete();
+            _loggingEventProcessingCancellation?.Cancel();
+            _dequeueEvent?.Dispose();
+            _enqueueEvent?.Dispose();
+            _emptyQueueEvent?.Dispose();
+            _loggingEventProcessingCancellation?.Dispose();
+
+            _eventQueue = null;
+            _dequeueEvent = null;
+            _enqueueEvent = null;
+            _emptyQueueEvent = null;
+            _loggingEventProcessingCancellation = null;
+            _loggingEventProcessingThread = null;
+        }
 
-            // Wait for completion
-            _loggingQueueProcessor.Completion.Wait();
+        /// <summary>
+        /// Create a logging thread to process the logging queue
+        /// </summary>
+        private void TerminateLoggingEventProcessing()
+        {
+            // Capture pump task in local variable as cancelling event processing is nulling _loggingEventProcessingThread.
+            var pumpTask = _loggingEventProcessingThread;
+            _loggingEventProcessingCancellation.Cancel();
+            pumpTask.Join();
         }
 
         /// <summary>
@@ -1315,17 +1350,8 @@ private void ShutdownLogger(ILogger logger)
             {
                 logger?.Shutdown();
             }
-            catch (LoggerException)
-            {
-                throw;
-            }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e) && e is not LoggerException)
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 InternalLoggerException.Throw(e, null, "FatalErrorDuringLoggerShutdown", false, logger.GetType().Name);
             }
         }
@@ -1405,20 +1431,8 @@ private void LoggingEventProcessor(object loggingEvent)
         /// </summary>
         private void RouteBuildEvent(object loggingEvent)
         {
-            BuildEventArgs buildEventArgs = null;
-
-            if (loggingEvent is BuildEventArgs)
-            {
-                buildEventArgs = (BuildEventArgs)loggingEvent;
-            }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
-            {
-                buildEventArgs = ((KeyValuePair<int, BuildEventArgs>)loggingEvent).Value;
-            }
-            else
-            {
-                ErrorUtilities.ThrowInternalError("Unknown logging item in queue:" + loggingEvent.GetType().FullName);
-            }
+            BuildEventArgs buildEventArgs = loggingEvent as BuildEventArgs ?? (loggingEvent as KeyValuePair<int, BuildEventArgs>?)?.Value;
+            ErrorUtilities.VerifyThrow(buildEventArgs is not null, "Unknown logging item in queue:" + loggingEvent.GetType().FullName);
 
             if (buildEventArgs is BuildWarningEventArgs warningEvent)
             {
@@ -1471,17 +1485,19 @@ private void RouteBuildEvent(object loggingEvent)
 
             if (loggingEvent is ProjectFinishedEventArgs projectFinishedEvent && projectFinishedEvent.BuildEventContext != null)
             {
-                _warningsAsErrorsByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
-                _warningsAsMessagesByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
+                int key = GetWarningsAsErrorOrMessageKey(projectFinishedEvent);
+                _warningsAsErrorsByProject?.Remove(key);
+                _warningsNotAsErrorsByProject?.Remove(key);
+                _warningsAsMessagesByProject?.Remove(key);
             }
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs loggingEventBuildArgs)
             {
-                RouteBuildEvent((BuildEventArgs)loggingEvent);
+                RouteBuildEvent(loggingEventBuildArgs);
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> loggingEventKeyValuePair)
             {
-                RouteBuildEvent((KeyValuePair<int, BuildEventArgs>)loggingEvent);
+                RouteBuildEvent(loggingEventKeyValuePair);
             }
         }
 
@@ -1493,8 +1509,7 @@ private void RouteBuildEvent(KeyValuePair<int, BuildEventArgs> nodeEvent)
             TryRaiseProjectStartedEvent(nodeEvent.Value);
 
             // Get the sink which will handle the build event, then send the event to that sink
-            IBuildEventSink sink;
-            bool gotSink = _eventSinkDictionary.TryGetValue(nodeEvent.Key, out sink);
+            bool gotSink = _eventSinkDictionary.TryGetValue(nodeEvent.Key, out IBuildEventSink sink);
             if (gotSink && sink != null)
             {
                 // Sinks in the eventSinkDictionary are expected to not be null.
@@ -1513,7 +1528,7 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
             TryRaiseProjectStartedEvent(eventArg);
 
             // The event has not been through a filter yet. All events must go through a filter before they make it to a logger
-            if (_filterEventSource != null)   // Loggers may not be registered
+            if (_filterEventSource != null) // Loggers may not be registered
             {
                 // Send the event to the filter, the Consume will not return until all of the loggers which have registered to the event have process
                 // them.
@@ -1534,7 +1549,7 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
                         {
                             if (!sink.HaveLoggedBuildStartedEvent)
                             {
-                                sink.Consume(eventArg, (int)pair.Key);
+                                sink.Consume(eventArg, pair.Key);
                             }
 
                             // Reset the HaveLoggedBuildStarted event because no one else will be sending a build started event to any loggers at this time.
@@ -1586,17 +1601,8 @@ private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
                     logger.Initialize(sourceForLogger);
                 }
             }
-            catch (LoggerException)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e) && e is not LoggerException)
             {
-                throw;
-            }
-            catch (Exception e)
-            {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 InternalLoggerException.Throw(e, null, "FatalErrorWhileInitializingLogger", true, logger.GetType().Name);
             }
 
@@ -1722,14 +1728,12 @@ private string GetAndVerifyProjectFileFromContext(BuildEventContext context)
         private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
         {
             // This only applies if the user specified /nowarn at the command-line or added the warning code through the object model
-            //
             if (WarningsAsMessages?.Contains(warningEvent.Code) == true)
             {
                 return true;
             }
 
             // This only applies if the user specified <MSBuildWarningsAsMessages /> and there is a valid ProjectInstanceId
-            //
             if (_warningsAsMessagesByProject != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 if (_warningsAsMessagesByProject.TryGetValue(GetWarningsAsErrorOrMessageKey(warningEvent), out ISet<string> codesByProject))
@@ -1741,6 +1745,13 @@ private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
             return false;
         }
 
+        private bool WarningAsErrorNotOverriden(BuildWarningEventArgs warningEvent)
+        {
+            int key = GetWarningsAsErrorOrMessageKey(warningEvent);
+
+            return WarningsNotAsErrors?.Contains(warningEvent.Code) != true && !(_warningsNotAsErrorsByProject?.TryGetValue(key, out ISet<string> notToError) == true && notToError.Contains(warningEvent.Code));
+        }
+
         /// <summary>
         /// Determines if the specified warning should be treated as an error.
         /// </summary>
@@ -1749,12 +1760,10 @@ private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
         private bool ShouldTreatWarningAsError(BuildWarningEventArgs warningEvent)
         {
             // This only applies if the user specified /warnaserror from the command-line or added an empty set through the object model
-            //
             if (WarningsAsErrors != null)
             {
                 // Global warnings as errors apply to all projects.  If the list is empty or contains the code, the warning should be treated as an error
-                //
-                if (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningEvent.Code))
+                if ((WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningEvent)) || WarningsAsErrors.Contains(warningEvent.Code))
                 {
                     return true;
                 }
@@ -1762,17 +1771,19 @@ private bool ShouldTreatWarningAsError(BuildWarningEventArgs warningEvent)
 
             // This only applies if the user specified <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors or <MSBuildWarningsAsErrors />
             // and there is a valid ProjectInstanceId for the warning.
-            //
             if (_warningsAsErrorsByProject != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 // Attempt to get the list of warnings to treat as errors for the current project
-                //
-                if (_warningsAsErrorsByProject.TryGetValue(GetWarningsAsErrorOrMessageKey(warningEvent), out ISet<string> codesByProject))
+                int key = GetWarningsAsErrorOrMessageKey(warningEvent);
+                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> codesByProject))
                 {
                     // We create an empty set if all warnings should be treated as errors so that should be checked first.
                     // If the set is not empty, check the specific code.
-                    //
-                    return codesByProject != null && (codesByProject.Count == 0 || codesByProject.Contains(warningEvent.Code));
+                    ISet<string> codesToIgnoreByProject = null;
+                    _warningsNotAsErrorsByProject?.TryGetValue(key, out codesToIgnoreByProject);
+                    return codesByProject != null &&
+                        ((codesByProject.Count == 0 && (codesToIgnoreByProject is null || !codesToIgnoreByProject.Contains(warningEvent.Code)))
+                        || codesByProject.Contains(warningEvent.Code));
                 }
             }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
index dcc4e2f8074..d75e7a12a6a 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceFactory.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index dcc79a8efcd..b9348623878 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.IO;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -12,6 +11,8 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -32,14 +33,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogComment(BuildEventContext buildEventContext, MessageImportance importance, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for comment message.");
+                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for comment message.");
 
-                    LogCommentFromText(buildEventContext, importance, ResourceUtilities.GetResourceString(messageResourceName), messageArgs);
-                }
+                LogCommentFromText(buildEventContext, importance, ResourceUtilities.GetResourceString(messageResourceName), messageArgs);
             }
         }
 
@@ -54,10 +52,7 @@ public void LogComment(BuildEventContext buildEventContext, MessageImportance im
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message)
         {
-            lock (_lockObject)
-            {
-                this.LogCommentFromText(buildEventContext, importance, message, messageArgs: null);
-            }
+            this.LogCommentFromText(buildEventContext, importance, message, messageArgs: null);
         }
 
         /// <summary>
@@ -72,25 +67,22 @@ public void LogCommentFromText(BuildEventContext buildEventContext, MessageImpor
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object[] messageArgs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
-                    ErrorUtilities.VerifyThrow(message != null, "message was null");
-
-                    BuildMessageEventArgs buildEvent = new BuildMessageEventArgs
-                        (
-                            message,
-                            helpKeyword: null,
-                            senderName: "MSBuild",
-                            importance,
-                            DateTime.UtcNow,
-                            messageArgs
-                        );
-                    buildEvent.BuildEventContext = buildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
+                ErrorUtilities.VerifyThrow(message != null, "message was null");
+
+                BuildMessageEventArgs buildEvent = new BuildMessageEventArgs
+                    (
+                        message,
+                        helpKeyword: null,
+                        senderName: "MSBuild",
+                        importance,
+                        DateTime.UtcNow,
+                        messageArgs
+                    );
+                buildEvent.BuildEventContext = buildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
         #endregion
@@ -112,10 +104,7 @@ public void LogCommentFromText(BuildEventContext buildEventContext, MessageImpor
         /// <param name="messageArgs">Arguments for the string resource</param>
         public void LogError(BuildEventContext location, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                LogError(location, null, file, messageResourceName, messageArgs);
-            }
+            LogError(location, null, file, messageResourceName, messageArgs);
         }
 
         /// <summary>
@@ -129,16 +118,11 @@ public void LogError(BuildEventContext location, BuildEventFileInfo file, string
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogError(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
 
-                string errorCode;
-                string helpKeyword;
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, messageResourceName, messageArgs);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
 
-                LogErrorFromText(buildEventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
-            }
+            LogErrorFromText(buildEventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -154,45 +138,41 @@ public void LogError(BuildEventContext buildEventContext, string subcategoryReso
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogErrorFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "Must specify the buildEventContext");
-                ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
-                ErrorUtilities.VerifyThrow(message != null, "Need error message.");
-
-                string subcategory = null;
-
-                if (subcategoryResourceName != null)
-                {
-                    subcategory = AssemblyResources.GetString(subcategoryResourceName);
-                }
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "Must specify the buildEventContext");
+            ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
+            ErrorUtilities.VerifyThrow(message != null, "Need error message.");
 
-                BuildErrorEventArgs buildEvent =
-                new BuildErrorEventArgs
-                (
-                    subcategory,
-                    errorCode,
-                    file.File,
-                    file.Line,
-                    file.Column,
-                    file.EndLine,
-                    file.EndColumn,
-                    message,
-                    helpKeyword,
-                    "MSBuild"
-                );
+            string subcategory = null;
 
-                buildEvent.BuildEventContext = buildEventContext;
-                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    string projectFile;
-                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out projectFile);
-                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                    buildEvent.ProjectFile = projectFile;
-                }
+            if (subcategoryResourceName != null)
+            {
+                subcategory = AssemblyResources.GetString(subcategoryResourceName);
+            }
 
-                ProcessLoggingEvent(buildEvent);
+            BuildErrorEventArgs buildEvent =
+            new BuildErrorEventArgs
+            (
+                subcategory,
+                errorCode,
+                file.File,
+                file.Line,
+                file.Column,
+                file.EndLine,
+                file.EndColumn,
+                message,
+                helpKeyword,
+                "MSBuild"
+            );
+
+            buildEvent.BuildEventContext = buildEventContext;
+            if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                buildEvent.ProjectFile = projectFile;
             }
+
+            ProcessLoggingEvent(buildEvent);
         }
 
         /// <summary>
@@ -206,40 +186,36 @@ public void LogErrorFromText(BuildEventContext buildEventContext, string subcate
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(invalidProjectFileException != null, "Need exception context.");
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext is null");
+            ErrorUtilities.VerifyThrow(invalidProjectFileException != null, "Need exception context.");
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext is null");
 
-                // Don't log the exception more than once.
-                if (!invalidProjectFileException.HasBeenLogged)
+            // Don't log the exception more than once.
+            if (!invalidProjectFileException.HasBeenLogged)
+            {
+                BuildErrorEventArgs buildEvent =
+                    new BuildErrorEventArgs
+                    (
+                        invalidProjectFileException.ErrorSubcategory,
+                        invalidProjectFileException.ErrorCode,
+                        invalidProjectFileException.ProjectFile,
+                        invalidProjectFileException.LineNumber,
+                        invalidProjectFileException.ColumnNumber,
+                        invalidProjectFileException.EndLineNumber,
+                        invalidProjectFileException.EndColumnNumber,
+                        invalidProjectFileException.BaseMessage,
+                        invalidProjectFileException.HelpKeyword,
+                        "MSBuild"
+                    );
+                buildEvent.BuildEventContext = buildEventContext;
+                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
                 {
-                    BuildErrorEventArgs buildEvent =
-                        new BuildErrorEventArgs
-                        (
-                            invalidProjectFileException.ErrorSubcategory,
-                            invalidProjectFileException.ErrorCode,
-                            invalidProjectFileException.ProjectFile,
-                            invalidProjectFileException.LineNumber,
-                            invalidProjectFileException.ColumnNumber,
-                            invalidProjectFileException.EndLineNumber,
-                            invalidProjectFileException.EndColumnNumber,
-                            invalidProjectFileException.BaseMessage,
-                            invalidProjectFileException.HelpKeyword,
-                            "MSBuild"
-                        );
-                    buildEvent.BuildEventContext = buildEventContext;
-                    if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                    {
-                        string projectFile;
-                        _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out projectFile);
-                        ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                        buildEvent.ProjectFile = projectFile;
-                    }
-
-                    ProcessLoggingEvent(buildEvent);
-                    invalidProjectFileException.HasBeenLogged = true;
+                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                    buildEvent.ProjectFile = projectFile;
                 }
+
+                ProcessLoggingEvent(buildEvent);
+                invalidProjectFileException.HasBeenLogged = true;
             }
         }
 
@@ -252,10 +228,7 @@ public void LogInvalidProjectFileError(BuildEventContext buildEventContext, Inva
         /// <param name="file">Provides file information about where the build error happened</param>
         public void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file)
         {
-            lock (_lockObject)
-            {
-                LogFatalError(buildEventContext, exception, file, "FatalBuildError");
-            }
+            LogFatalError(buildEventContext, exception, file, "FatalBuildError");
         }
 
         /// <summary>
@@ -269,12 +242,9 @@ public void LogFatalBuildError(BuildEventContext buildEventContext, Exception ex
         /// <exception cref="InternalErrorException">TaskName is null</exception>
         public void LogFatalTaskError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
+            ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
 
-                LogFatalError(buildEventContext, exception, file, "FatalTaskError", taskName);
-            }
+            LogFatalError(buildEventContext, exception, file, "FatalTaskError", taskName);
         }
 
         /// <summary>
@@ -289,23 +259,18 @@ public void LogFatalTaskError(BuildEventContext buildEventContext, Exception exc
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogFatalError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
 
-                string errorCode;
-                string helpKeyword;
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, messageResourceName, messageArgs);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
 #if DEBUG
-                message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
+            message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
 #endif
-                if (exception != null)
-                {
-                    message += Environment.NewLine + exception.ToString();
-                }
-
-                LogErrorFromText(buildEventContext, null, errorCode, helpKeyword, file, message);
+            if (exception != null)
+            {
+                message += Environment.NewLine + exception.ToString();
             }
+
+            LogErrorFromText(buildEventContext, null, errorCode, helpKeyword, file, message);
         }
 
         #endregion
@@ -328,24 +293,19 @@ public void LogFatalError(BuildEventContext buildEventContext, Exception excepti
         /// <param name="taskName">Name of the task which the warning is being raised from</param>
         public void LogTaskWarningFromException(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(taskName), "Must specify the name of the task that failed.");
+            ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(taskName), "Must specify the name of the task that failed.");
 
-                string warningCode;
-                string helpKeyword;
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out warningCode, out helpKeyword, "FatalTaskError", taskName);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, "FatalTaskError", taskName);
 #if DEBUG
-                message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
+            message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
 #endif
 
-                if (exception != null)
-                {
-                    message += Environment.NewLine + exception.ToString();
-                }
-
-                LogWarningFromText(buildEventContext, null, warningCode, helpKeyword, file, message);
+            if (exception != null)
+            {
+                message += Environment.NewLine + exception.ToString();
             }
+
+            LogWarningFromText(buildEventContext, null, warningCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -358,15 +318,10 @@ public void LogTaskWarningFromException(BuildEventContext buildEventContext, Exc
         /// <param name="messageArgs">Arguments for messageResourceName</param>
         public void LogWarning(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for warning message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for warning message.");
 
-                string warningCode;
-                string helpKeyword;
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out warningCode, out helpKeyword, messageResourceName, messageArgs);
-                LogWarningFromText(buildEventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
-            }
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, messageResourceName, messageArgs);
+            LogWarningFromText(buildEventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -380,44 +335,40 @@ public void LogWarning(BuildEventContext buildEventContext, string subcategoryRe
         /// <param name="message">Warning message to log</param>
         public void LogWarningFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
-                ErrorUtilities.VerifyThrow(message != null, "Need warning message.");
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "Need a BuildEventContext");
+            ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
+            ErrorUtilities.VerifyThrow(message != null, "Need warning message.");
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "Need a BuildEventContext");
 
-                string subcategory = null;
+            string subcategory = null;
 
-                if (!string.IsNullOrWhiteSpace(subcategoryResourceName))
-                {
-                    subcategory = AssemblyResources.GetString(subcategoryResourceName);
-                }
-
-                BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
-                    (
-                        subcategory,
-                        warningCode,
-                        file.File,
-                        file.Line,
-                        file.Column,
-                        file.EndLine,
-                        file.EndColumn,
-                        message,
-                        helpKeyword,
-                        "MSBuild"
-                    );
+            if (!string.IsNullOrWhiteSpace(subcategoryResourceName))
+            {
+                subcategory = AssemblyResources.GetString(subcategoryResourceName);
+            }
 
-                buildEvent.BuildEventContext = buildEventContext;
-                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    string projectFile;
-                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out projectFile);
-                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                    buildEvent.ProjectFile = projectFile;
-                }
+            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
+                (
+                    subcategory,
+                    warningCode,
+                    file.File,
+                    file.Line,
+                    file.Column,
+                    file.EndLine,
+                    file.EndColumn,
+                    message,
+                    helpKeyword,
+                    "MSBuild"
+                );
 
-                ProcessLoggingEvent(buildEvent);
+            buildEvent.BuildEventContext = buildEventContext;
+            if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                buildEvent.ProjectFile = projectFile;
             }
+
+            ProcessLoggingEvent(buildEvent);
         }
 
         #endregion
@@ -429,31 +380,25 @@ public void LogWarningFromText(BuildEventContext buildEventContext, string subca
         /// </summary>
         public void LogBuildStarted()
         {
-            lock (_lockObject)
+            // If we're only logging critical events, don't risk causing all the resources to load by formatting
+            // a string that won't get emitted anyway.
+            string message = String.Empty;
+            if (!OnlyLogCriticalEvents)
             {
-                // If we're only logging critical events, don't risk causing all the resources to load by formatting
-                // a string that won't get emitted anyway.
-                string message = String.Empty;
-                if (!OnlyLogCriticalEvents)
-                {
-                    message = ResourceUtilities.GetResourceString("BuildStarted");
-                }
+                message = ResourceUtilities.GetResourceString("BuildStarted");
+            }
 
-                IDictionary<string, string> environmentProperties = null;
+            IDictionary<string, string> environmentProperties = _componentHost?.BuildParameters != null && Traits.Instance.LogAllEnvironmentVariables ?
+                _componentHost.BuildParameters.BuildProcessEnvironment
+                : null;
 
-                if (_componentHost?.BuildParameters != null)
-                {
-                    environmentProperties = _componentHost.BuildParameters.BuildProcessEnvironment;
-                }
-
-                BuildStartedEventArgs buildEvent = new BuildStartedEventArgs(message, null /* no help keyword */, environmentProperties);
+            BuildStartedEventArgs buildEvent = new(message, helpKeyword: null, environmentProperties);
 
-                // Raise the event with the filters
-                ProcessLoggingEvent(buildEvent);
-            }
+            // Raise the event with the filters
+            ProcessLoggingEvent(buildEvent);
 
             // Make sure we process this event before going any further
-            WaitForThreadToProcessEvents();
+            WaitForLoggingToProcessEvents();
         }
 
         /// <summary>
@@ -462,23 +407,20 @@ public void LogBuildStarted()
         /// <param name="success">Did the build pass or fail</param>
         public void LogBuildFinished(bool success)
         {
-            lock (_lockObject)
+            // If we're only logging critical events, don't risk causing all the resources to load by formatting
+            // a string that won't get emitted anyway.
+            string message = String.Empty;
+            if (!OnlyLogCriticalEvents)
             {
-                // If we're only logging critical events, don't risk causing all the resources to load by formatting
-                // a string that won't get emitted anyway.
-                string message = String.Empty;
-                if (!OnlyLogCriticalEvents)
-                {
-                    message = ResourceUtilities.GetResourceString(success ? "BuildFinishedSuccess" : "BuildFinishedFailure");
-                }
+                message = ResourceUtilities.GetResourceString(success ? "BuildFinishedSuccess" : "BuildFinishedFailure");
+            }
 
-                BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
+            BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
 
-                ProcessLoggingEvent(buildEvent);
-            }
+            ProcessLoggingEvent(buildEvent);
 
             // Make sure we process this event before going any further
-            WaitForThreadToProcessEvents();
+            WaitForLoggingToProcessEvents();
         }
 
         /// <inheritdoc />
@@ -492,36 +434,30 @@ public BuildEventContext CreateProjectCacheBuildEventContext(
             int projectInstanceId,
             string projectFile)
         {
-            lock (_lockObject)
-            {
-                int projectContextId = NextProjectId;
+            int projectContextId = NextProjectId;
 
-                // In the future if some LogProjectCacheStarted event is created, move this there to align with evaluation and build execution.
-                _projectFileMap[projectContextId] = projectFile;
+            // In the future if some LogProjectCacheStarted event is created, move this there to align with evaluation and build execution.
+            _projectFileMap[projectContextId] = projectFile;
 
-                // Because the project cache runs in the BuildManager, it makes some sense to associate logging with the in-proc node.
-                // If a invalid node id is used the messages become deferred in the console logger and spit out at the end.
-                int nodeId = Scheduler.InProcNodeId;
+            // Because the project cache runs in the BuildManager, it makes some sense to associate logging with the in-proc node.
+            // If a invalid node id is used the messages become deferred in the console logger and spit out at the end.
+            int nodeId = Scheduler.InProcNodeId;
 
-                return new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-            }
+            return new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
         }
 
         /// <inheritdoc />
         public void LogProjectEvaluationStarted(BuildEventContext projectEvaluationEventContext, string projectFile)
         {
-            lock (_lockObject)
-            {
-                ProjectEvaluationStartedEventArgs evaluationEvent =
-                    new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
-                        projectFile)
-                    {
-                        BuildEventContext = projectEvaluationEventContext,
-                        ProjectFile = projectFile
-                    };
+            ProjectEvaluationStartedEventArgs evaluationEvent =
+                new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
+                    projectFile)
+                {
+                    BuildEventContext = projectEvaluationEventContext,
+                    ProjectFile = projectFile
+                };
 
-                ProcessLoggingEvent(evaluationEvent);
-            }
+            ProcessLoggingEvent(evaluationEvent);
         }
 
         /// <summary>
@@ -542,22 +478,19 @@ public void LogProjectEvaluationFinished(
             IEnumerable items,
             ProfilerResult? profilerResult)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(projectEvaluationEventContext != null, "projectBuildEventContext");
+            ErrorUtilities.VerifyThrow(projectEvaluationEventContext != null, "projectBuildEventContext");
 
-                ProjectEvaluationFinishedEventArgs buildEvent =
-                    new ProjectEvaluationFinishedEventArgs(ResourceUtilities.GetResourceString("EvaluationFinished"), projectFile)
-                    {
-                        BuildEventContext = projectEvaluationEventContext,
-                        ProjectFile = projectFile,
-                        ProfilerResult = profilerResult,
-                        GlobalProperties = globalProperties,
-                        Properties = properties,
-                        Items = items
-                    };
-                ProcessLoggingEvent(buildEvent);
-            }
+            ProjectEvaluationFinishedEventArgs buildEvent =
+                new ProjectEvaluationFinishedEventArgs(ResourceUtilities.GetResourceString("EvaluationFinished"), projectFile)
+                {
+                    BuildEventContext = projectEvaluationEventContext,
+                    ProjectFile = projectFile,
+                    ProfilerResult = profilerResult,
+                    GlobalProperties = globalProperties,
+                    Properties = properties,
+                    Items = items
+                };
+            ProcessLoggingEvent(buildEvent);
         }
 
         /// <summary>
@@ -588,76 +521,73 @@ public BuildEventContext LogProjectStarted(
             int evaluationId = BuildEventContext.InvalidEvaluationId,
             int projectContextId = BuildEventContext.InvalidProjectContextId)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(nodeBuildEventContext != null, "Need a nodeBuildEventContext");
+
+            if (projectContextId == BuildEventContext.InvalidProjectContextId)
             {
-                ErrorUtilities.VerifyThrow(nodeBuildEventContext != null, "Need a nodeBuildEventContext");
+                projectContextId = NextProjectId;
 
-                if (projectContextId == BuildEventContext.InvalidProjectContextId)
+                // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
+                if (_projectFileMap.ContainsKey(projectContextId))
                 {
-                    projectContextId = NextProjectId;
+                    ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should not already be in the ID-to-file mapping!", projectContextId, projectFile);
+                }
 
-                    // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-                    if (_projectFileMap.ContainsKey(projectContextId))
+                _projectFileMap[projectContextId] = projectFile;
+            }
+            else
+            {
+                // A projectContextId was provided, so use it with some sanity checks
+                if (_projectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
+                {
+                    if (!projectFile.Equals(existingProjectFile, StringComparison.OrdinalIgnoreCase))
                     {
-                        ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should not already be in the ID-to-file mapping!", projectContextId, projectFile);
+                        ErrorUtilities.ThrowInternalError("ContextID {0} was already in the ID-to-project file mapping but the project file {1} did not match the provided one {2}!", projectContextId, existingProjectFile, projectFile);
                     }
-
-                    _projectFileMap[projectContextId] = projectFile;
                 }
                 else
                 {
-                    // A projectContextId was provided, so use it with some sanity checks
-                    if (_projectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
+                    // Currently, an existing projectContextId can only be provided in the project cache scenario, which runs on the in-proc node.
+                    // If there was a cache miss and the build was scheduled on a worker node, it may not have seen this projectContextId yet.
+                    // So we only need this sanity check for the in-proc node.
+                    if (nodeBuildEventContext.NodeId == Scheduler.InProcNodeId)
                     {
-                        if (!projectFile.Equals(existingProjectFile, StringComparison.OrdinalIgnoreCase))
-                        {
-                            ErrorUtilities.ThrowInternalError("ContextID {0} was already in the ID-to-project file mapping but the project file {1} did not match the provided one {2}!", projectContextId, existingProjectFile, projectFile);
-                        }
-                    }
-                    else
-                    {
-                        // Currently, an existing projectContextId can only be provided in the project cache scenario, which runs on the in-proc node.
-                        // If there was a cache miss and the build was scheduled on a worker node, it may not have seen this projectContextId yet.
-                        // So we only need this sanity check for the in-proc node.
-                        if (nodeBuildEventContext.NodeId == Scheduler.InProcNodeId)
-                        {
-                            ErrorUtilities.ThrowInternalError("ContextID {0} should have been in the ID-to-project file mapping but wasn't!", projectContextId);
-                        }
-
-                        _projectFileMap[projectContextId] = projectFile;
+                        ErrorUtilities.ThrowInternalError("ContextID {0} should have been in the ID-to-project file mapping but wasn't!", projectContextId);
                     }
+
+                    _projectFileMap[projectContextId] = projectFile;
                 }
+            }
 
-                BuildEventContext projectBuildEventContext = new BuildEventContext(submissionId, nodeBuildEventContext.NodeId, evaluationId, configurationId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+            BuildEventContext projectBuildEventContext = new BuildEventContext(submissionId, nodeBuildEventContext.NodeId, evaluationId, configurationId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
 
-                ErrorUtilities.VerifyThrow(parentBuildEventContext != null, "Need a parentBuildEventContext");
+            ErrorUtilities.VerifyThrow(parentBuildEventContext != null, "Need a parentBuildEventContext");
 
-                ErrorUtilities.VerifyThrow(_configCache.Value.HasConfiguration(configurationId), "Cannot find the project configuration while injecting non-serialized data from out-of-proc node.");
-                var buildRequestConfiguration = _configCache.Value[configurationId];
+            ErrorUtilities.VerifyThrow(_configCache.Value.HasConfiguration(configurationId), "Cannot find the project configuration while injecting non-serialized data from out-of-proc node.");
+            var buildRequestConfiguration = _configCache.Value[configurationId];
 
-                // Always log GlobalProperties on ProjectStarted
-                // See https://github.com/dotnet/msbuild/issues/6341 for details
-                IDictionary<string, string> globalProperties = buildRequestConfiguration.GlobalProperties.ToDictionary();
+            // Always log GlobalProperties on ProjectStarted
+            // See https://github.com/dotnet/msbuild/issues/6341 for details
+            IDictionary<string, string> globalProperties = buildRequestConfiguration.GlobalProperties.ToDictionary();
 
-                var buildEvent = new ProjectStartedEventArgs
-                    (
-                        configurationId,
-                        message: null,
-                        helpKeyword: null,
-                        projectFile,
-                        targetNames,
-                        properties,
-                        items,
-                        parentBuildEventContext,
-                        globalProperties,
-                        buildRequestConfiguration.ToolsVersion
-                    );
-                buildEvent.BuildEventContext = projectBuildEventContext;
+            var buildEvent = new ProjectStartedEventArgs
+                (
+                    configurationId,
+                    message: null,
+                    helpKeyword: null,
+                    projectFile,
+                    targetNames,
+                    properties,
+                    items,
+                    parentBuildEventContext,
+                    globalProperties,
+                    buildRequestConfiguration.ToolsVersion
+                );
+            buildEvent.BuildEventContext = projectBuildEventContext;
 
-                ProcessLoggingEvent(buildEvent);
+            ProcessLoggingEvent(buildEvent);
 
-                return projectBuildEventContext;
-            }
+            return projectBuildEventContext;
         }
 
         /// <summary>
@@ -669,25 +599,22 @@ public BuildEventContext LogProjectStarted(
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
+            ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
 
-                ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs
-                    (
-                        message: null,
-                        helpKeyword: null,
-                        projectFile,
-                        success
-                    );
-                buildEvent.BuildEventContext = projectBuildEventContext;
-                ProcessLoggingEvent(buildEvent);
+            ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs
+                (
+                    message: null,
+                    helpKeyword: null,
+                    projectFile,
+                    success
+                );
+            buildEvent.BuildEventContext = projectBuildEventContext;
+            ProcessLoggingEvent(buildEvent);
 
-                // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-                if (!_projectFileMap.Remove(projectBuildEventContext.ProjectContextId))
-                {
-                    ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should be in the ID-to-file mapping!", projectBuildEventContext.ProjectContextId, projectFile);
-                }
+            // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
+            if (!_projectFileMap.TryRemove(projectBuildEventContext.ProjectContextId, out _))
+            {
+                ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should be in the ID-to-file mapping!", projectBuildEventContext.ProjectContextId, projectFile);
             }
         }
 
@@ -704,38 +631,35 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, string parentTargetName, TargetBuiltReason buildReason)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext is null");
+            BuildEventContext targetBuildEventContext = new BuildEventContext
+                (
+                    projectBuildEventContext.SubmissionId,
+                    projectBuildEventContext.NodeId,
+                    projectBuildEventContext.ProjectInstanceId,
+                    projectBuildEventContext.ProjectContextId,
+                    NextTargetId,
+                    BuildEventContext.InvalidTaskId
+                );
+
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext is null");
-                BuildEventContext targetBuildEventContext = new BuildEventContext
+                TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
                     (
-                        projectBuildEventContext.SubmissionId,
-                        projectBuildEventContext.NodeId,
-                        projectBuildEventContext.ProjectInstanceId,
-                        projectBuildEventContext.ProjectContextId,
-                        NextTargetId,
-                        BuildEventContext.InvalidTaskId
+                        message: null,
+                        helpKeyword: null,
+                        targetName,
+                        projectFile,
+                        projectFileOfTargetElement,
+                        parentTargetName,
+                        buildReason,
+                        DateTime.UtcNow
                     );
-
-                if (!OnlyLogCriticalEvents)
-                {
-                    TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            targetName,
-                            projectFile,
-                            projectFileOfTargetElement,
-                            parentTargetName,
-                            buildReason,
-                            DateTime.UtcNow
-                        );
-                    buildEvent.BuildEventContext = targetBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
-
-                return targetBuildEventContext;
+                buildEvent.BuildEventContext = targetBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
+
+            return targetBuildEventContext;
         }
 
         /// <summary>
@@ -750,26 +674,23 @@ public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventCon
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTargetFinished(BuildEventContext targetBuildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, bool success, IEnumerable<TaskItem> targetOutputs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
-
-                    TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            targetName,
-                            projectFile,
-                            projectFileOfTargetElement,
-                            success,
-                            targetOutputs
-                        );
-
-                    buildEvent.BuildEventContext = targetBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
+
+                TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        targetName,
+                        projectFile,
+                        projectFileOfTargetElement,
+                        success,
+                        targetOutputs
+                    );
+
+                buildEvent.BuildEventContext = targetBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -783,22 +704,19 @@ public void LogTargetFinished(BuildEventContext targetBuildEventContext, string
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
-                if (!OnlyLogCriticalEvents)
-                {
-                    TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName
+                    );
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -815,37 +733,34 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
+            BuildEventContext taskBuildEventContext = new BuildEventContext
+                (
+                    targetBuildEventContext.SubmissionId,
+                    targetBuildEventContext.NodeId,
+                    targetBuildEventContext.ProjectInstanceId,
+                    targetBuildEventContext.ProjectContextId,
+                    targetBuildEventContext.TargetId,
+                    NextTaskId
+                );
+
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
-                BuildEventContext taskBuildEventContext = new BuildEventContext
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
                     (
-                        targetBuildEventContext.SubmissionId,
-                        targetBuildEventContext.NodeId,
-                        targetBuildEventContext.ProjectInstanceId,
-                        targetBuildEventContext.ProjectContextId,
-                        targetBuildEventContext.TargetId,
-                        NextTaskId
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName
                     );
-
-                if (!OnlyLogCriticalEvents)
-                {
-                    TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    buildEvent.LineNumber = line;
-                    buildEvent.ColumnNumber = column;
-                    ProcessLoggingEvent(buildEvent);
-                }
-
-                return taskBuildEventContext;
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                buildEvent.LineNumber = line;
+                buildEvent.ColumnNumber = column;
+                ProcessLoggingEvent(buildEvent);
             }
+
+            return taskBuildEventContext;
         }
 
         /// <summary>
@@ -859,24 +774,21 @@ public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventConte
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTaskFinished(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, bool success)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "taskBuildEventContext is null");
-
-                    TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName,
-                            success
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "taskBuildEventContext is null");
+
+                TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName,
+                        success
+                    );
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -892,19 +804,16 @@ public void LogTaskFinished(BuildEventContext taskBuildEventContext, string task
         /// <param name="properties">The list of properties assocated with the event.</param>
         public void LogTelemetry(BuildEventContext buildEventContext, string eventName, IDictionary<string, string> properties)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(eventName != null, "eventName is null");
+            ErrorUtilities.VerifyThrow(eventName != null, "eventName is null");
 
-                TelemetryEventArgs telemetryEvent = new TelemetryEventArgs
-                {
-                    BuildEventContext = buildEventContext,
-                    EventName = eventName,
-                    Properties = properties == null ? new Dictionary<string, string>() : new Dictionary<string, string>(properties)
-                };
+            TelemetryEventArgs telemetryEvent = new TelemetryEventArgs
+            {
+                BuildEventContext = buildEventContext,
+                EventName = eventName,
+                Properties = properties == null ? new Dictionary<string, string>() : new Dictionary<string, string>(properties)
+            };
 
-                ProcessLoggingEvent(telemetryEvent);
-            }
+            ProcessLoggingEvent(telemetryEvent);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
index 870e358c69d..019090a8efd 100644
--- a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 30ffe92df56..b7f2fcf4bc2 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
@@ -9,8 +8,11 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using static Microsoft.Build.Execution.ProjectPropertyInstance;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -70,6 +72,17 @@ internal ProjectLoggingContext(
         {
         }
 
+        private IEnumerable<DictionaryEntry> FilterEnvironmentDerivedProperties(PropertyDictionary<ProjectPropertyInstance> properties)
+        {
+            foreach (ProjectPropertyInstance property in properties)
+            {
+                if (property is not EnvironmentDerivedProjectPropertyInstance)
+                {
+                    yield return new DictionaryEntry(property.Name, property.EvaluatedValue);
+                }
+            }
+        }
+
         /// <summary>
         /// Constructs a project logging contexts.
         /// </summary>
@@ -89,11 +102,8 @@ private ProjectLoggingContext(
         {
             _projectFullPath = projectFullPath;
 
-            ProjectPropertyInstanceEnumeratorProxy properties = null;
-            ProjectItemInstanceEnumeratorProxy items = null;
-
-            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Enumerable.Empty<ProjectPropertyInstance>() : null;
-            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Enumerable.Empty<ProjectItemInstance>() : null;
+            IEnumerable<DictionaryEntry> properties = null;
+            IEnumerable<DictionaryEntry> items = null;
 
             string[] propertiesToSerialize = LoggingService.PropertiesToSerialize;
 
@@ -102,18 +112,20 @@ private ProjectLoggingContext(
                 !LoggingService.IncludeEvaluationPropertiesAndItems &&
                 (!LoggingService.RunningOnRemoteNode || LoggingService.SerializeAllProperties))
             {
-                if (projectProperties != null)
+                if (projectProperties is null)
                 {
-                    projectPropertiesEnumerator = projectProperties.GetCopyOnReadEnumerable();
+                    properties = Enumerable.Empty<DictionaryEntry>();
                 }
-
-                if (projectItems != null)
+                else if (Traits.Instance.LogAllEnvironmentVariables)
                 {
-                    projectItemsEnumerator = projectItems.GetCopyOnReadEnumerable();
+                    properties = projectProperties.GetCopyOnReadEnumerable(property => new DictionaryEntry(property.Name, property.EvaluatedValue));
+                }
+                else
+                {
+                    properties = FilterEnvironmentDerivedProperties(projectProperties);
                 }
 
-                properties = new ProjectPropertyInstanceEnumeratorProxy(projectPropertiesEnumerator);
-                items = new ProjectItemInstanceEnumeratorProxy(projectItemsEnumerator);
+                items = projectItems?.GetCopyOnReadEnumerable(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Enumerable.Empty<DictionaryEntry>();
             }
 
             if (projectProperties != null &&
@@ -133,7 +145,7 @@ private ProjectLoggingContext(
                     }
                 }
 
-                properties = new ProjectPropertyInstanceEnumeratorProxy(projectPropertiesToSerialize);
+                properties = projectPropertiesToSerialize.Select((ProjectPropertyInstance property) => new DictionaryEntry(property.Name, property.EvaluatedValue));
             }
 
             this.BuildEventContext = LoggingService.LogProjectStarted
@@ -178,105 +190,5 @@ internal TargetLoggingContext LogTargetBatchStarted(string projectFullPath, Proj
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
             return new TargetLoggingContext(this, projectFullPath, target, parentTargetName, buildReason);
         }
-
-        /// <summary>
-        /// An enumerable wrapper for items that clones items as they are requested,
-        /// so that writes have no effect on the items.
-        /// </summary>
-        /// <remarks>
-        /// This class is designed to be passed to loggers.
-        /// The expense of copying items is only incurred if and when
-        /// a logger chooses to enumerate over it.
-        /// The type of the items enumerated over is imposed by backwards compatibility for ProjectStartedEvent.
-        /// </remarks>
-        private class ProjectItemInstanceEnumeratorProxy : IEnumerable<DictionaryEntry>
-        {
-            /// <summary>
-            /// Enumerable that this proxies
-            /// </summary>
-            private IEnumerable<ProjectItemInstance> _backingItems;
-
-            /// <summary>
-            /// Constructor
-            /// </summary>
-            /// <param name="backingItems">Enumerator this class should proxy</param>
-            internal ProjectItemInstanceEnumeratorProxy(IEnumerable<ProjectItemInstance> backingItems)
-            {
-                _backingItems = backingItems;
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the items
-            /// in the backing store.
-            /// Each dictionary entry has key of the item type and value of an ITaskItem.
-            /// Type of the enumerator is imposed by backwards compatibility for ProjectStartedEvent.
-            /// </summary>
-            public IEnumerator<DictionaryEntry> GetEnumerator()
-            {
-                foreach (ProjectItemInstance item in _backingItems)
-                {
-                    yield return new DictionaryEntry(item.ItemType, new TaskItem(item));
-                }
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the items
-            /// in the backing store.
-            /// </summary>
-            IEnumerator IEnumerable.GetEnumerator()
-            {
-                return (IEnumerator)GetEnumerator();
-            }
-        }
-
-        /// <summary>
-        /// An enumerable wrapper for properties that clones properties as they are requested,
-        /// so that writes have no effect on the properties.
-        /// </summary>
-        /// <remarks>
-        /// This class is designed to be passed to loggers.
-        /// The expense of copying items is only incurred if and when
-        /// a logger chooses to enumerate over it.
-        /// The type of the items enumerated over is imposed by backwards compatibility for ProjectStartedEvent.
-        /// </remarks>
-        private class ProjectPropertyInstanceEnumeratorProxy : IEnumerable<DictionaryEntry>
-        {
-            /// <summary>
-            /// Enumerable that this proxies
-            /// </summary>
-            private IEnumerable<ProjectPropertyInstance> _backingProperties;
-
-            /// <summary>
-            /// Constructor
-            /// </summary>
-            /// <param name="backingProperties">Enumerator this class should proxy</param>
-            internal ProjectPropertyInstanceEnumeratorProxy(IEnumerable<ProjectPropertyInstance> backingProperties)
-            {
-                _backingProperties = backingProperties;
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the properties
-            /// in the backing store.
-            /// Each DictionaryEntry has key of the property name and value of the property value.
-            /// Type of the enumerator is imposed by backwards compatibility for ProjectStartedEvent.
-            /// </summary>
-            public IEnumerator<DictionaryEntry> GetEnumerator()
-            {
-                foreach (ProjectPropertyInstance property in _backingProperties)
-                {
-                    yield return new DictionaryEntry(property.Name, property.EvaluatedValue);
-                }
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the properties
-            /// in the backing store.
-            /// </summary>
-            IEnumerator IEnumerable.GetEnumerator()
-            {
-                return (IEnumerator)GetEnumerator();
-            }
-        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
index efde35dd8af..8e434303492 100644
--- a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
@@ -9,6 +9,8 @@
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index 51c266e6485..5b8955d74b0 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -7,6 +7,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -153,6 +155,11 @@ internal ICollection<string> GetWarningsAsErrors()
             return LoggingService.GetWarningsAsErrors(BuildEventContext);
         }
 
+        internal ICollection<string> GetWarningsNotAsErrors()
+        {
+            return LoggingService.GetWarningsNotAsErrors(BuildEventContext);
+        }
+
         internal ICollection<string> GetWarningsAsMessages()
         {
             return LoggingService.GetWarningsAsMessages(BuildEventContext);
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
index bc7354b9a90..eaa9d5e05ce 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheContext.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System.Collections.Generic;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Graph;
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
index 50ac573159f..3423453f19c 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Generic;
 using System.Linq;
diff --git a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
index d6159906e8b..a9a13d0dc6e 100644
--- a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.ProjectCache
diff --git a/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs b/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
index 7afe81169c0..7e1801e783a 100644
--- a/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/PluginTargetResult.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System.Collections.Generic;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
index 10c97621ef5..6ac1b6b6b2a 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheDescriptor.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.Graph;
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index 994c9da77a8..1ae508340be 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Experimental.ProjectCache
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheItem.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheItem.cs
index b1d781b1ca2..2982c7508d9 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheItem.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheItem.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Generic;
 using System.Linq;
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
index 5cf28808582..79d10b72864 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 1b69d9e04ba..4bbb3ae656d 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -1,10 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Linq;
 using System.Reflection;
 using System.Threading;
@@ -13,6 +11,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
@@ -46,6 +45,7 @@ internal class ProjectCacheService
         private readonly ProjectCacheDescriptor _projectCacheDescriptor;
         private readonly CancellationToken _cancellationToken;
         private readonly ProjectCachePluginBase _projectCachePlugin;
+        private readonly string _projectCachePluginTypeName;
         private ProjectCacheServiceState _serviceState = ProjectCacheServiceState.NotInitialized;
 
         /// <summary>
@@ -63,6 +63,7 @@ private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
 
         private ProjectCacheService(
             ProjectCachePluginBase projectCachePlugin,
+            string pluginTypeName,
             BuildManager buildManager,
             ILoggingService loggingService,
             ProjectCacheDescriptor projectCacheDescriptor,
@@ -70,6 +71,7 @@ CancellationToken cancellationToken
         )
         {
             _projectCachePlugin = projectCachePlugin;
+            _projectCachePluginTypeName = pluginTypeName;
             _buildManager = buildManager;
             _loggingService = loggingService;
             _projectCacheDescriptor = projectCacheDescriptor;
@@ -82,10 +84,10 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
             ILoggingService loggingService,
             CancellationToken cancellationToken)
         {
-            var plugin = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
+            (ProjectCachePluginBase plugin, string pluginTypeName) = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
                 .ConfigureAwait(false);
 
-            var service = new ProjectCacheService(plugin, buildManager, loggingService, pluginDescriptor, cancellationToken);
+            var service = new ProjectCacheService(plugin, pluginTypeName, buildManager, loggingService, pluginDescriptor, cancellationToken);
 
             // TODO: remove the if after we change VS to set the cache descriptor via build parameters and always call BeginBuildAsync in FromDescriptorAsync.
             // When running under VS we can't initialize the plugin until we evaluate a project (any project) and extract
@@ -101,63 +103,63 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.
         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)
         {
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            BuildEventContext buildEventContext = BuildEventContext.Invalid;
+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
-                BuildEventContext.Invalid,
-                BuildEventFileInfo.Empty);
+                buildEventContext,
+                buildEventFileInfo);
+            ProjectCacheDescriptor projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
 
             try
             {
                 SetState(ProjectCacheServiceState.BeginBuildStarted);
+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheBeginBuild");
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStart(_projectCachePluginTypeName);
 
-                logger.LogMessage("Initializing project cache plugin", MessageImportance.Low);
-                var timer = Stopwatch.StartNew();
-
-                if (_projectCacheDescriptor.VsWorkaround)
-                {
-                    logger.LogMessage("Running project cache with Visual Studio workaround");
-                }
-
-                var projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;
                 await _projectCachePlugin.BeginBuildAsync(
                     new CacheContext(
                         projectDescriptor.PluginSettings,
                         new DefaultMSBuildFileSystem(),
                         projectDescriptor.ProjectGraph,
                         projectDescriptor.EntryPoints),
-                    logger,
+                    pluginLogger,
                     _cancellationToken);
-
-                timer.Stop();
-                logger.LogMessage($"Finished initializing project cache plugin in {timer.Elapsed.TotalMilliseconds} ms", MessageImportance.Low);
-
-                SetState(ProjectCacheServiceState.BeginBuildFinished);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.BeginBuildAsync));
             }
+            finally
+            {
+                MSBuildEventSource.Log.ProjectCacheBeginBuildStop(_projectCachePluginTypeName);
+                SetState(ProjectCacheServiceState.BeginBuildFinished);
+            }
 
-            if (logger.HasLoggedErrors)
+            if (pluginLogger.HasLoggedErrors)
             {
                 ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheInitializationFailed");
             }
         }
 
-        private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
+        private static (ProjectCachePluginBase PluginInstance, string PluginTypeName) GetPluginInstance(ProjectCacheDescriptor pluginDescriptor)
         {
             if (pluginDescriptor.PluginInstance != null)
             {
-                return pluginDescriptor.PluginInstance;
+                return (pluginDescriptor.PluginInstance, pluginDescriptor.PluginInstance.GetType().Name);
             }
+
             if (pluginDescriptor.PluginAssemblyPath != null)
             {
-                return GetPluginInstanceFromType(GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath));
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStart(pluginDescriptor.PluginAssemblyPath);
+                Type pluginType = GetTypeFromAssemblyPath(pluginDescriptor.PluginAssemblyPath);
+                ProjectCachePluginBase pluginInstance = GetPluginInstanceFromType(pluginType);
+                MSBuildEventSource.Log.ProjectCacheCreatePluginInstanceStop(pluginDescriptor.PluginAssemblyPath, pluginType.Name);
+                return (pluginInstance, pluginType.Name);
             }
 
             ErrorUtilities.ThrowInternalErrorUnreachable();
-
-            return null!;
+            return (null!, null!); // Unreachable
         }
 
         private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
@@ -169,9 +171,8 @@ private static ProjectCachePluginBase GetPluginInstanceFromType(Type pluginType)
             catch (TargetInvocationException e) when (e.InnerException != null)
             {
                 HandlePluginException(e.InnerException, "Constructor");
+                return null!; // Unreachable
             }
-
-            return null!;
         }
 
         private static Type GetTypeFromAssemblyPath(string pluginAssemblyPath)
@@ -283,7 +284,7 @@ public void PostCacheRequest(CacheRequest cacheRequest)
 
                 ErrorUtilities.VerifyThrowInternalError(
                     LateInitializationForVSWorkaroundCompleted is null ||
-                    _projectCacheDescriptor.VsWorkaround && LateInitializationForVSWorkaroundCompleted.Task.IsCompleted,
+                    (_projectCacheDescriptor.VsWorkaround && LateInitializationForVSWorkaroundCompleted.Task.IsCompleted),
                     "Completion source should be null when this is not the VS workaround");
 
                 BuildRequestData buildRequest = new BuildRequestData(
@@ -298,7 +299,7 @@ LateInitializationForVSWorkaroundCompleted is null ||
                 CacheResult cacheResult;
                 try
                 {
-                    cacheResult = await GetCacheResultAsync(buildRequest, buildEventContext);
+                    cacheResult = await GetCacheResultAsync(buildRequest, cacheRequest.Configuration, buildEventContext);
                 }
                 catch (Exception ex)
                 {
@@ -315,7 +316,7 @@ static bool IsDesignTimeBuild(ProjectInstance project)
                 var buildingProject = project.GlobalPropertiesDictionary[DesignTimeProperties.BuildingProject]?.EvaluatedValue;
 
                 return MSBuildStringIsTrue(designTimeBuild) ||
-                       buildingProject != null && !MSBuildStringIsTrue(buildingProject);
+                       (buildingProject != null && !MSBuildStringIsTrue(buildingProject));
             }
 
             void EvaluateProjectIfNecessary(CacheRequest request)
@@ -465,7 +466,7 @@ static bool MSBuildStringIsTrue(string msbuildString) =>
                 ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
         }
 
-        private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest, BuildEventContext buildEventContext)
+        private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest, BuildRequestConfiguration buildRequestConfiguration, BuildEventContext buildEventContext)
         {
             lock (this)
             {
@@ -480,79 +481,124 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
 
             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));
 
-            var queryDescription = $"{buildRequest.ProjectFullPath}" +
-                                   $"\n\tTargets:[{string.Join(", ", buildRequest.TargetNames)}]" +
-                                   $"\n\tGlobal Properties: {{{string.Join(",", buildRequest.GlobalProperties.Select(kvp => $"{kvp.Name}={kvp.EvaluatedValue}"))}}}";
-
             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
                 buildEventContext,
                 buildEventFileInfo);
 
-            logger.LogMessage(
-                "\n====== Querying project cache for project " + queryDescription,
-                MessageImportance.High);
+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0
+                ? string.Join(", ", buildRequest.TargetNames)
+                : null;
+            if (string.IsNullOrEmpty(targetNames))
+            {
+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheQueryStartedWithDefaultTargets", buildRequest.ProjectFullPath);
+            }
+            else
+            {
+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheQueryStartedWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+            }
 
-            CacheResult cacheResult = null!;
+            CacheResult? cacheResult = null;
             try
             {
-                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);
+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames);
+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, pluginLogger, _cancellationToken);
             }
             catch (Exception e)
             {
                 HandlePluginException(e, nameof(ProjectCachePluginBase.GetCacheResultAsync));
+                return null!; // Unreachable
             }
-
-            if (logger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
+            finally
             {
-                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheQueryFailed", queryDescription);
+                if (MSBuildEventSource.Log.IsEnabled())
+                {
+                    string cacheResultType = cacheResult?.ResultType.ToString() ?? nameof(CacheResultType.None);
+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStop(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames, cacheResultType);
+                }
             }
 
-            var message = $"------  Plugin result: {cacheResult.ResultType}.";
+            if (pluginLogger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)
+            {
+                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheQueryFailed", buildRequest.ProjectFullPath);
+            }
 
             switch (cacheResult.ResultType)
             {
                 case CacheResultType.CacheHit:
-                    message += " Skipping project.";
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheHitWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheHitWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
+                    // Similar to CopyFilesToOutputDirectory from Microsoft.Common.CurrentVersion.targets, so that progress can be seen.
+                    // TODO: This should be indented by the console logger. That requires making these log events structured.
+                    if (!buildRequestConfiguration.IsTraversal)
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.High, "ProjectCacheHitWithOutputs", buildRequest.ProjectInstance.GetPropertyValue(ReservedPropertyNames.projectName));
+                    }
+
                     break;
                 case CacheResultType.CacheMiss:
-                case CacheResultType.CacheNotApplicable:
-                    message += " Building project.";
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheMissWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheMissWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
                     break;
-                case CacheResultType.None:
+                case CacheResultType.CacheNotApplicable:
+                    if (string.IsNullOrEmpty(targetNames))
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheNotApplicableWithDefaultTargets", buildRequest.ProjectFullPath);
+                    }
+                    else
+                    {
+                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "ProjectCacheNotApplicableWithTargetNames", buildRequest.ProjectFullPath, targetNames);
+                    }
+
                     break;
+                case CacheResultType.None: // Should not get here based on the throw above
                 default:
                     throw new ArgumentOutOfRangeException();
             }
 
-            logger.LogMessage(
-                message,
-                MessageImportance.High);
-
             return cacheResult;
         }
 
         public async Task ShutDown()
         {
-            var logger = new LoggingServiceToPluginLoggerAdapter(
+            bool shouldInitiateShutdownState = _serviceState != ProjectCacheServiceState.ShutdownStarted && _serviceState != ProjectCacheServiceState.ShutdownFinished;
+
+            if (!shouldInitiateShutdownState)
+            {
+                return;
+            }
+
+            BuildEventContext buildEventContext = BuildEventContext.Invalid;
+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;
+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
                 BuildEventContext.Invalid,
                 BuildEventFileInfo.Empty);
-
+            
             try
             {
                 SetState(ProjectCacheServiceState.ShutdownStarted);
+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, "ProjectCacheEndBuild");
+                MSBuildEventSource.Log.ProjectCacheEndBuildStart(_projectCachePluginTypeName);
 
-                logger.LogMessage("Shutting down project cache plugin", MessageImportance.Low);
-                var timer = Stopwatch.StartNew();
+                await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);
 
-                await _projectCachePlugin.EndBuildAsync(logger, _cancellationToken);
-
-                timer.Stop();
-                logger.LogMessage($"Finished shutting down project cache plugin in {timer.Elapsed.TotalMilliseconds} ms", MessageImportance.Low);
-
-                if (logger.HasLoggedErrors)
+                if (pluginLogger.HasLoggedErrors)
                 {
                     ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache("ProjectCacheShutdownFailed");
                 }
@@ -563,6 +609,7 @@ public async Task ShutDown()
             }
             finally
             {
+                MSBuildEventSource.Log.ProjectCacheEndBuildStop(_projectCachePluginTypeName);
                 SetState(ProjectCacheServiceState.ShutdownFinished);
             }
         }
@@ -658,9 +705,9 @@ public override void LogWarning(string warning)
             {
                 _loggingService.LogWarningFromText(
                     _buildEventContext,
-                    null,
-                    null,
-                    null,
+                    subcategoryResourceName: null,
+                    warningCode: null,
+                    helpKeyword: null,
                     _buildEventFileInfo,
                     warning);
             }
@@ -671,10 +718,10 @@ public override void LogError(string error)
 
                 _loggingService.LogErrorFromText(
                     _buildEventContext,
-                    null,
-                    null,
-                    null,
-                    BuildEventFileInfo.Empty,
+                    subcategoryResourceName: null,
+                    errorCode: null,
+                    helpKeyword: null,
+                    _buildEventFileInfo,
                     error);
             }
         }
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
index 6b83993c148..2379042fe5f 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Generic;
 using System.Linq;
@@ -19,7 +18,7 @@ namespace Microsoft.Build.Experimental.ProjectCache
     ///     The proxy targets are left in the build result (i.e., both GetTargetPath and Build will appear in the build result).
     ///     Real targets can be committed in which case msbuild only keeps the proxy target in the build result.
     /// </summary>
-    public class ProxyTargets: ITranslatable
+    public class ProxyTargets : ITranslatable
     {
         private Dictionary<string, string> _proxyTargetToRealTargetMap = null!;
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
index 3fde04be279..363e9eaebc7 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/FullTracking.cs b/src/Build/BackEnd/Components/RequestBuilder/FullTracking.cs
index 6d5d8f7d72a..505fa0ed693 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/FullTracking.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/FullTracking.cs
@@ -9,6 +9,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilder.cs
index 5db9a001e46..503da08ff64 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilder.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Execution;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
index 386db137259..8f9b3188292 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Collections;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
index 97bd307200d..5b88ab5db9e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd.Logging;
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
index dbbc7c2c585..5d114eb00fd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilderCallback.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Execution;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ITaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/ITaskBuilder.cs
index 15522204ed6..8507f540064 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ITaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ITaskBuilder.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Execution;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
index 304989547d4..9fb80539f26 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.BackEnd.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
index cd25ccc91c4..676a9d98c24 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/CallTarget.cs
@@ -8,6 +8,8 @@
 
 // This CallTarget intrinsic task replaces the one on Microsoft.Build.Tasks, which is now deprecated.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <remarks>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/IntrinsicTaskFactory.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/IntrinsicTaskFactory.cs
index 0c9b0baec23..7d73eb5ae7c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/IntrinsicTaskFactory.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/IntrinsicTaskFactory.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 885ccfa24b3..32b7c6b1b1a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -15,6 +15,9 @@
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
 using EngineFileUtilities = Microsoft.Build.Internal.EngineFileUtilities;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
+using Microsoft.Build.BackEnd.Logging;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -81,7 +84,7 @@ internal override void ExecuteTask(Lookup lookup)
 
                             if (!String.IsNullOrEmpty(child.KeepMetadata))
                             {
-                                var keepMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.KeepMetadata, ExpanderOptions.ExpandAll, child.KeepMetadataLocation).ToList();
+                                var keepMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.KeepMetadata, ExpanderOptions.ExpandAll, child.KeepMetadataLocation, LoggingContext).ToList();
                                 if (keepMetadataEvaluated.Count > 0)
                                 {
                                     keepMetadata = new HashSet<string>(keepMetadataEvaluated);
@@ -90,7 +93,7 @@ internal override void ExecuteTask(Lookup lookup)
 
                             if (!String.IsNullOrEmpty(child.RemoveMetadata))
                             {
-                                var removeMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.RemoveMetadata, ExpanderOptions.ExpandAll, child.RemoveMetadataLocation).ToList();
+                                var removeMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.RemoveMetadata, ExpanderOptions.ExpandAll, child.RemoveMetadataLocation, LoggingContext).ToList();
                                 if (removeMetadataEvaluated.Count > 0)
                                 {
                                     removeMetadata = new HashSet<string>(removeMetadataEvaluated);
@@ -99,7 +102,7 @@ internal override void ExecuteTask(Lookup lookup)
 
                             if (!String.IsNullOrEmpty(child.MatchOnMetadata))
                             {
-                                var matchOnMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.MatchOnMetadata, ExpanderOptions.ExpandAll, child.MatchOnMetadataLocation).ToList();
+                                var matchOnMetadataEvaluated = bucket.Expander.ExpandIntoStringListLeaveEscaped(child.MatchOnMetadata, ExpanderOptions.ExpandAll, child.MatchOnMetadataLocation, LoggingContext).ToList();
                                 if (matchOnMetadataEvaluated.Count > 0)
                                 {
                                     matchOnMetadata = new HashSet<string>(matchOnMetadataEvaluated);
@@ -112,7 +115,7 @@ internal override void ExecuteTask(Lookup lookup)
                                 (child.Exclude.Length != 0))
                             {
                                 // It's an item -- we're "adding" items to the world
-                                ExecuteAdd(child, bucket, keepMetadata, removeMetadata);
+                                ExecuteAdd(child, bucket, keepMetadata, removeMetadata, LoggingContext);
                             }
                             else if (child.Remove.Length != 0)
                             {
@@ -122,7 +125,7 @@ internal override void ExecuteTask(Lookup lookup)
                             else
                             {
                                 // It's a modify -- changing existing items
-                                ExecuteModify(child, bucket, keepMetadata, removeMetadata);
+                                ExecuteModify(child, bucket, keepMetadata, removeMetadata, LoggingContext);
                             }
                         }
                     }
@@ -148,7 +151,8 @@ internal override void ExecuteTask(Lookup lookup)
         /// <param name="bucket">The batching bucket.</param>
         /// <param name="keepMetadata">An <see cref="ISet{String}"/> of metadata names to keep.</param>
         /// <param name="removeMetadata">An <see cref="ISet{String}"/> of metadata names to remove.</param>
-        private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucket, ISet<string> keepMetadata, ISet<string> removeMetadata)
+        /// <param name="loggingContext">Context for logging</param>
+        private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucket, ISet<string> keepMetadata, ISet<string> removeMetadata, LoggingContext loggingContext = null)
         {
             // First, collect up the appropriate metadata collections.  We need the one from the item definition, if any, and
             // the one we are using for this batching bucket.
@@ -162,7 +166,7 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
             bucket.Expander.Metadata = metadataTable;
 
             // Second, expand the item include and exclude, and filter existing metadata as appropriate.
-            List<ProjectItemInstance> itemsToAdd = ExpandItemIntoItems(child, bucket.Expander, keepMetadata, removeMetadata);
+            List<ProjectItemInstance> itemsToAdd = ExpandItemIntoItems(child, bucket.Expander, keepMetadata, removeMetadata, loggingContext);
 
             // Third, expand the metadata.           
             foreach (ProjectItemGroupTaskMetadataInstance metadataInstance in child.Metadata)
@@ -177,11 +181,12 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
                     metadataInstance.Location,
                     LoggingContext.LoggingService,
                     LoggingContext.BuildEventContext,
-                    FileSystems.Default);
+                    FileSystems.Default,
+                    loggingContext: loggingContext);
 
                 if (condition)
                 {
-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location);
+                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);
 
                     // This both stores the metadata so we can add it to all the items we just created later, and 
                     // exposes this metadata to further metadata evaluations in subsequent loop iterations.
@@ -243,7 +248,7 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             List<ProjectItemInstance> itemsToRemove;
             if (matchOnMetadata == null)
             {
-                itemsToRemove = FindItemsMatchingSpecification(group, child.Remove, child.RemoveLocation, bucket.Expander);
+                itemsToRemove = FindItemsMatchingSpecification(group, child.Remove, child.RemoveLocation, bucket.Expander, LoggingContext);
             }
             else
             {
@@ -275,7 +280,8 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
         /// <param name="bucket">The batching bucket.</param>
         /// <param name="keepMetadata">An <see cref="ISet{String}"/> of metadata names to keep.</param>
         /// <param name="removeMetadata">An <see cref="ISet{String}"/> of metadata names to remove.</param>
-        private void ExecuteModify(ProjectItemGroupTaskItemInstance child, ItemBucket bucket, ISet<string> keepMetadata, ISet<string> removeMetadata)
+        /// <param name="loggingContext">Context for this operation.</param>
+        private void ExecuteModify(ProjectItemGroupTaskItemInstance child, ItemBucket bucket, ISet<string> keepMetadata, ISet<string> removeMetadata, LoggingContext loggingContext = null)
         {
             ICollection<ProjectItemInstance> group = bucket.Lookup.GetItems(child.ItemType);
             if (group == null || group.Count == 0)
@@ -315,11 +321,12 @@ private void ExecuteModify(ProjectItemGroupTaskItemInstance child, ItemBucket bu
                     metadataInstance.ConditionLocation,
                     LoggingContext.LoggingService,
                     LoggingContext.BuildEventContext,
-                    FileSystems.Default);
+                    FileSystems.Default,
+                    loggingContext: loggingContext);
 
                 if (condition)
                 {
-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location);
+                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);
                     metadataToSet[metadataInstance.Name] = Lookup.MetadataModification.CreateFromNewValue(evaluatedValue);
                 }
             }
@@ -355,6 +362,7 @@ private void GetBatchableValuesFromBuildItemGroupChild(List<string> parameterVal
         /// <param name="expander">The expander to use.</param>
         /// <param name="keepMetadata">An <see cref="ISet{String}"/> of metadata names to keep.</param>
         /// <param name="removeMetadata">An <see cref="ISet{String}"/> of metadata names to remove.</param>
+        /// <param name="loggingContext">Context for logging</param>
         /// <remarks>
         /// This code is very close to that which exists in the Evaluator.EvaluateItemXml method.  However, because
         /// it invokes type constructors, and those constructors take arguments of fundamentally different types, it has not
@@ -366,16 +374,16 @@ private List<ProjectItemInstance> ExpandItemIntoItems
             ProjectItemGroupTaskItemInstance originalItem,
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
             ISet<string> keepMetadata,
-            ISet<string> removeMetadata
+            ISet<string> removeMetadata,
+            LoggingContext loggingContext = null
         )
         {
-            //todo this is duplicated logic with the item computation logic from evaluation (in LazyIncludeOperation.SelectItems)
-
+            // todo this is duplicated logic with the item computation logic from evaluation (in LazyIncludeOperation.SelectItems)
             ProjectErrorUtilities.VerifyThrowInvalidProject(!(keepMetadata != null && removeMetadata != null), originalItem.KeepMetadataLocation, "KeepAndRemoveMetadataMutuallyExclusive");
             List<ProjectItemInstance> items = new List<ProjectItemInstance>();
 
             // Expand properties and metadata in Include
-            string evaluatedInclude = expander.ExpandIntoStringLeaveEscaped(originalItem.Include, ExpanderOptions.ExpandPropertiesAndMetadata, originalItem.IncludeLocation);
+            string evaluatedInclude = expander.ExpandIntoStringLeaveEscaped(originalItem.Include, ExpanderOptions.ExpandPropertiesAndMetadata, originalItem.IncludeLocation, loggingContext);
 
             if (evaluatedInclude.Length == 0)
             {
@@ -386,7 +394,7 @@ ISet<string> removeMetadata
             var excludes = ImmutableList<string>.Empty.ToBuilder();
             if (originalItem.Exclude.Length > 0)
             {
-                string evaluatedExclude = expander.ExpandIntoStringLeaveEscaped(originalItem.Exclude, ExpanderOptions.ExpandAll, originalItem.ExcludeLocation);
+                string evaluatedExclude = expander.ExpandIntoStringLeaveEscaped(originalItem.Exclude, ExpanderOptions.ExpandAll, originalItem.ExcludeLocation, loggingContext);
 
                 if (evaluatedExclude.Length > 0)
                 {
@@ -431,7 +439,11 @@ ISet<string> removeMetadata
                     string[] includeSplitFiles = EngineFileUtilities.GetFileListEscaped(
                         Project.Directory,
                         includeSplit,
-                        excludes);
+                        excludes,
+                        loggingMechanism: LoggingContext,
+                        includeLocation: originalItem.IncludeLocation,
+                        excludeLocation: originalItem.ExcludeLocation,
+                        disableExcludeDriveEnumerationWarning: true);
 
                     foreach (string includeSplitFile in includeSplitFiles)
                     {
@@ -452,7 +464,11 @@ ISet<string> removeMetadata
 
             foreach (string excludeSplit in excludes)
             {
-                string[] excludeSplitFiles = EngineFileUtilities.GetFileListUnescaped(Project.Directory, excludeSplit);
+                string[] excludeSplitFiles = EngineFileUtilities.GetFileListUnescaped(
+                    Project.Directory,
+                    excludeSplit,
+                    loggingMechanism: LoggingContext,
+                    excludeLocation: originalItem.ExcludeLocation);
 
                 foreach (string excludeSplitFile in excludeSplitFiles)
                 {
@@ -507,13 +523,15 @@ ISet<string> removeMetadata
         /// <param name="specification">The specification to match against the items.</param>
         /// <param name="specificationLocation">The specification to match against the provided items</param>
         /// <param name="expander">The expander to use</param>
+        /// <param name="loggingContext">Context for logging</param>
         /// <returns>A list of matching items</returns>
         private List<ProjectItemInstance> FindItemsMatchingSpecification
             (
             ICollection<ProjectItemInstance> items,
             string specification,
             ElementLocation specificationLocation,
-            Expander<ProjectPropertyInstance, ProjectItemInstance> expander
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander,
+            LoggingContext loggingContext = null
             )
         {
             if (items.Count == 0 || specification.Length == 0)
@@ -526,7 +544,7 @@ Expander<ProjectPropertyInstance, ProjectItemInstance> expander
             HashSet<string> specificationsToFind = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
 
             // Split by semicolons
-            var specificationPieces = expander.ExpandIntoStringListLeaveEscaped(specification, ExpanderOptions.ExpandAll, specificationLocation);
+            var specificationPieces = expander.ExpandIntoStringListLeaveEscaped(specification, ExpanderOptions.ExpandAll, specificationLocation, loggingContext);
 
             foreach (string piece in specificationPieces)
             {
@@ -537,7 +555,12 @@ Expander<ProjectPropertyInstance, ProjectItemInstance> expander
                 // Don't unescape wildcards just yet - if there were any escaped, the caller wants to treat them
                 // as literals. Everything else is safe to unescape at this point, since we're only matching
                 // against the file system.
-                string[] fileList = EngineFileUtilities.GetFileListEscaped(Project.Directory, piece);
+                string[] fileList = EngineFileUtilities.GetFileListEscaped(
+                    Project.Directory,
+                    piece,
+                    loggingMechanism: LoggingContext,
+                    includeLocation: specificationLocation,
+                    excludeLocation: specificationLocation);
 
                 foreach (string file in fileList)
                 {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index da174cbb259..4f67ed79862 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -5,12 +5,15 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Globalization;
+#if FEATURE_APPDOMAIN
 using System.Runtime.Remoting;
+#endif
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -41,7 +44,9 @@ internal static class ItemGroupLoggingHelper
         /// to materialize the Message as that's a declaration assembly. We inject the logic
         /// here.
         /// </summary>
+#pragma warning disable CA1810 // Initialize reference type static fields inline
         static ItemGroupLoggingHelper()
+#pragma warning restore CA1810 // Initialize reference type static fields inline
         {
             BuildEventArgs.ResourceStringFormatter = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword;
             TaskParameterEventArgs.MessageGetter = GetTaskParameterText;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index 6e0ba6a0d5f..e05113ea688 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -13,6 +13,8 @@
 // NOTE: This is nearly identical to the MSBuild task in Microsoft.Build.Tasks.  We are deprecating that task,
 // so this is the governing implementation.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <remarks>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index 14feb6aa094..cc58134235c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -10,6 +10,8 @@
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
index 1779d6ba70f..c15cee3f250 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ItemBucket.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
index 71141924280..3aefd150c03 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
@@ -12,10 +12,12 @@
 
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
-    using ItemsMetadataUpdateDictionary = Dictionary<ProjectItemInstance, Lookup.MetadataModifications>;
-    using ItemTypeToItemsMetadataUpdateDictionary = Dictionary<string, Dictionary<ProjectItemInstance, Lookup.MetadataModifications>>;
+    using ItemsMetadataUpdateDictionary = System.Collections.Generic.Dictionary<Microsoft.Build.Execution.ProjectItemInstance, Microsoft.Build.BackEnd.Lookup.MetadataModifications>;
+    using ItemTypeToItemsMetadataUpdateDictionary = System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<Microsoft.Build.Execution.ProjectItemInstance, Microsoft.Build.BackEnd.Lookup.MetadataModifications>>;
 
     /// <summary>
     /// Contains a list of item and property collections, optimized to allow
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 7204146c1cd..d95771ae3cd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -21,6 +21,8 @@
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using ProjectLoggingContext = Microsoft.Build.BackEnd.Logging.ProjectLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -236,7 +238,7 @@ public void ContinueRequestWithResources(ResourceResponse response)
         {
             ErrorUtilities.VerifyThrow(HasActiveBuildRequest, "Request not building");
             ErrorUtilities.VerifyThrow(!_terminateEvent.WaitOne(0), "Request already terminated");
-            ErrorUtilities.VerifyThrow(!_pendingResourceRequests.IsEmpty, "No pending resource requests");
+            ErrorUtilities.VerifyThrow(_pendingResourceRequests.Any(), "No pending resource requests");
             VerifyEntryInActiveOrWaitingState();
 
             _pendingResourceRequests.Dequeue()(response);
@@ -288,19 +290,10 @@ public void WaitForCancelCompletion()
                 {
                     taskCleanedUp = _requestTask.Wait(BuildParameters.RequestBuilderShutdownTimeout);
                 }
-                catch (AggregateException e)
+                catch (AggregateException e) when (InnerExceptionsAreAllCancelledExceptions(e))
                 {
-                    AggregateException flattenedException = e.Flatten();
-
-                    if (flattenedException.InnerExceptions.All(ex => (ex is TaskCanceledException || ex is OperationCanceledException)))
-                    {
-                        // ignore -- just indicates that the task finished cancelling before we got a chance to wait on it.  
-                        taskCleanedUp = true;
-                    }
-                    else
-                    {
-                        throw;
-                    }
+                    // ignore -- just indicates that the task finished cancelling before we got a chance to wait on it.  
+                    taskCleanedUp = true;
                 }
 
                 if (!taskCleanedUp)
@@ -314,6 +307,11 @@ public void WaitForCancelCompletion()
             _isZombie = true;
         }
 
+        private bool InnerExceptionsAreAllCancelledExceptions(AggregateException e)
+        {
+            return e.Flatten().InnerExceptions.All(ex => ex is TaskCanceledException || ex is OperationCanceledException);
+        }
+
         #region IRequestBuilderCallback Members
 
         /// <summary>
@@ -716,9 +714,7 @@ private void SetCommonWorkerThreadParameters()
             CultureInfo.CurrentCulture = _componentHost.BuildParameters.Culture;
             CultureInfo.CurrentUICulture = _componentHost.BuildParameters.UICulture;
 
-#if FEATURE_THREAD_PRIORITY
             Thread.CurrentThread.Priority = _componentHost.BuildParameters.BuildThreadPriority;
-#endif
             Thread.CurrentThread.IsBackground = true;
 
             // NOTE: This is safe to do because we have specified long-running so we get our own new thread.
@@ -824,19 +820,21 @@ private async Task BuildAndReport()
 
                 thrownException = ex;
             }
-            catch (LoggerException ex)
-            {
-                // Polite logger failure
-                thrownException = ex;
-            }
-            catch (InternalLoggerException ex)
-            {
-                // Logger threw arbitrary exception
-                thrownException = ex;
-            }
             catch (Exception ex)
             {
                 thrownException = ex;
+                if (ex is BuildAbortedException)
+                {
+                    // The build was likely cancelled. We do not need to log an error in this case.
+                }
+                else if (_projectLoggingContext is null)
+                {
+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, "UnhandledMSBuildError", ex.ToString());
+                }
+                else
+                {
+                    _projectLoggingContext.LogError(BuildEventFileInfo.Empty, "UnhandledMSBuildError", ex.ToString());
+                }
 
                 if (ExceptionHandling.IsCriticalException(ex))
                 {
@@ -874,13 +872,8 @@ private void ReportResultAndCleanUp(BuildResult result)
                 {
                     _projectLoggingContext.LogProjectFinished(result.OverallResult == BuildResultCode.Success);
                 }
-                catch (Exception ex)
+                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                 {
-                    if (ExceptionHandling.IsCriticalException(ex))
-                    {
-                        throw;
-                    }
-
                     if (result.Exception == null)
                     {
                         result.Exception = ex;
@@ -1323,19 +1316,16 @@ private void VerifyIsNotZombie()
         private void ConfigureWarningsAsErrorsAndMessages()
         {
             // Gather needed objects
-            //
             ProjectInstance project = _requestEntry?.RequestConfiguration?.Project;
             BuildEventContext buildEventContext = _projectLoggingContext?.BuildEventContext;
             ILoggingService loggingService = _projectLoggingContext?.LoggingService;
 
             // Ensure everything that is required is available at this time
-            //
             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 if (String.Equals(project.GetPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
                 {
                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors
-                    //
                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());
                 }
                 else
@@ -1348,6 +1338,13 @@ private void ConfigureWarningsAsErrorsAndMessages()
                     }
                 }
 
+                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetPropertyValue(MSBuildConstants.WarningsNotAsErrors));
+
+                if (warningsNotAsErrors?.Count > 0)
+                {
+                    loggingService.AddWarningsNotAsErrors(buildEventContext, warningsNotAsErrors);
+                }
+
                 ISet<string> warningsAsMessages = ParseWarningCodes(project.GetPropertyValue(MSBuildConstants.WarningsAsMessages));
 
                 if (warningsAsMessages?.Count > 0)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 6b4b24dfa81..87604dfba2e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -15,6 +15,9 @@
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
+using System.Linq;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -403,7 +406,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)
                 (
                 !_cancellationToken.IsCancellationRequested &&
                 !stopProcessingStack &&
-                !_targetsToBuild.IsEmpty
+                _targetsToBuild.Any()
                 )
             {
                 TargetEntry currentTargetEntry = _targetsToBuild.Peek();
@@ -611,7 +614,7 @@ private void PopDependencyTargetsOnTargetFailure(TargetEntry topEntry, TargetRes
                 // Pop down to our parent, since any other dependencies our parent had should no longer
                 // execute.  If we encounter an error target on the way down, also stop since the failure
                 // of one error target in a set declared in OnError should not cause the others to stop running.
-                while ((!_targetsToBuild.IsEmpty) && (_targetsToBuild.Peek() != topEntry.ParentEntry) && !_targetsToBuild.Peek().ErrorTarget)
+                while ((_targetsToBuild.Any()) && (_targetsToBuild.Peek() != topEntry.ParentEntry) && !_targetsToBuild.Peek().ErrorTarget)
                 {
                     TargetEntry entry = _targetsToBuild.Pop();
                     entry.LeaveLegacyCallTargetScopes();
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index d3a925b34a8..e1479768ff2 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -22,6 +22,8 @@
 #if MSBUILDENABLEVSPROFILING 
 using Microsoft.VisualStudio.Profiler;
 #endif
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -351,7 +353,8 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
                 _target.ConditionLocation,
                 projectLoggingContext.LoggingService,
                 projectLoggingContext.BuildEventContext,
-                FileSystems.Default);
+                FileSystems.Default,
+                loggingContext: projectLoggingContext);
 
             if (!condition)
             {
@@ -390,7 +393,7 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
                 return new List<TargetSpecification>();
             }
 
-            var dependencies = _expander.ExpandIntoStringListLeaveEscaped(_target.DependsOnTargets, ExpanderOptions.ExpandPropertiesAndItems, _target.DependsOnTargetsLocation);
+            var dependencies = _expander.ExpandIntoStringListLeaveEscaped(_target.DependsOnTargets, ExpanderOptions.ExpandPropertiesAndItems, _target.DependsOnTargetsLocation, projectLoggingContext);
             List<TargetSpecification> dependencyTargets = new List<TargetSpecification>();
             foreach (string escapedDependency in dependencies)
             {
@@ -408,13 +411,6 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
         /// </summary>
         internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)
         {
-#if MSBUILDENABLEVSPROFILING 
-            try
-            {
-                string beginTargetBuild = String.Format(CultureInfo.CurrentCulture, "Build Target {0} in Project {1} - Start", this.Name, projectFullPath);
-                DataCollection.CommentMarkProfile(8800, beginTargetBuild);
-#endif 
-
             try
             {
                 VerifyState(_state, TargetEntryState.Execution);
@@ -666,14 +662,6 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
             {
                 _isExecuting = false;
             }
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                string endTargetBuild = String.Format(CultureInfo.CurrentCulture, "Build Target {0} in Project {1} - End", this.Name, projectFullPath);
-                DataCollection.CommentMarkProfile(8801, endTargetBuild);
-            }
-#endif
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
index 4da4b2f8aba..cc55c5c90d3 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index 9013bc11272..e9b35b6b330 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -15,6 +15,8 @@
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
@@ -26,8 +28,8 @@ namespace Microsoft.Build.BackEnd
     // For instance, if items were generated from an expression @(Foo->'%(Filename).obj'), then
     // the inner dictionary would have a key of "@(Foo->'%(Filename).obj')", in which would be 
     // contained a list of the items which were created/transformed using that pattern.    
-    using ItemVectorPartitionCollection = Dictionary<string, Dictionary<string, IList<ProjectItemInstance>>>;
-    using ItemVectorPartition = Dictionary<string, IList<ProjectItemInstance>>;
+    using ItemVectorPartitionCollection = System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>>;
+    using ItemVectorPartition = System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>;
 
     /// <summary>
     /// Enumeration of the results of target dependency analysis.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index efe47bf3381..4835778b4c1 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -3,10 +3,14 @@
 
 using System;
 using System.Collections.Generic;
+#if FEATURE_APARTMENT_STATE
 using System.Diagnostics.CodeAnalysis;
+#endif
 using System.Linq;
 using System.Reflection;
+#if FEATURE_APARTMENT_STATE
 using System.Runtime.ExceptionServices;
+#endif
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Collections;
@@ -23,6 +27,8 @@
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using TaskLoggingContext = Microsoft.Build.BackEnd.Logging.TaskLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -375,7 +381,8 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                 _targetChildInstance.ConditionLocation,
                 _targetLoggingContext.LoggingService,
                 _targetLoggingContext.BuildEventContext,
-                FileSystems.Default);
+                FileSystems.Default,
+                loggingContext: _targetLoggingContext);
 
             if (!condition)
             {
@@ -393,8 +400,19 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
             // If this is an Intrinsic task, it gets handled in a special fashion.
             if (_taskNode == null)
             {
-                ExecuteIntrinsicTask(bucket);
-                taskResult = new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null);
+                try
+                {
+                    ExecuteIntrinsicTask(bucket);
+                    taskResult = new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null);
+                }
+                catch (InvalidProjectFileException e)
+                {
+                    // Make sure the Invalid Project error gets logged *before* TaskFinished.  Otherwise,
+                    // the log is confusing.
+                    _targetLoggingContext.LogInvalidProjectFileError(e);
+                    _continueOnError = ContinueOnError.ErrorAndStop;
+                    taskResult = new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, e);
+                }
             }
             else
             {
@@ -455,6 +473,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                             // the log is confusing.
                             taskLoggingContext.LogInvalidProjectFileError(e);
                             _continueOnError = ContinueOnError.ErrorAndStop;
+                            taskResult = new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, e);
                         }
                         finally
                         {
@@ -605,7 +624,7 @@ private void LogSkippedTask(ItemBucket bucket, TaskExecutionMode howToExecuteTas
                     if (!_targetLoggingContext.LoggingService.OnlyLogCriticalEvents)
                     {
                         // Expand the expression for the Log.  Since we know the condition evaluated to false, leave unexpandable properties in the condition so as not to cause an error
-                        string expanded = bucket.Expander.ExpandIntoStringAndUnescape(_targetChildInstance.Condition, ExpanderOptions.ExpandAll | ExpanderOptions.LeavePropertiesUnexpandedOnError | ExpanderOptions.Truncate, _targetChildInstance.ConditionLocation);
+                        string expanded = bucket.Expander.ExpandIntoStringAndUnescape(_targetChildInstance.Condition, ExpanderOptions.ExpandAll | ExpanderOptions.LeavePropertiesUnexpandedOnError | ExpanderOptions.Truncate, _targetChildInstance.ConditionLocation, loggingContext: _targetLoggingContext);
 
                         // Whilst we are within the processing of the task, we haven't actually started executing it, so
                         // our skip task message needs to be in the context of the target. However any errors should be reported
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 0c07dae6d6f..49f5a15b5ed 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -22,7 +22,8 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using System.Reflection;
 using Microsoft.Build.Eventing;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -703,7 +704,7 @@ private ICollection<string> WarningsAsErrors
             get
             {
                 // Test compatibility
-                if(_taskLoggingContext == null)
+                if (_taskLoggingContext == null)
                 {
                     return null;
                 }
@@ -712,6 +713,26 @@ private ICollection<string> WarningsAsErrors
             }
         }
 
+        private ICollection<string> _warningsNotAsErrors;
+
+        /// <summary>
+        /// Contains all warnings that should be logged as errors.
+        /// Non-null empty set when all warnings should be treated as errors.
+        /// </summary>
+        private ICollection<string> WarningsNotAsErrors
+        {
+            get
+            {
+                // Test compatibility
+                if (_taskLoggingContext == null)
+                {
+                    return null;
+                }
+
+                return _warningsNotAsErrors ??= _taskLoggingContext.GetWarningsNotAsErrors();
+            }
+        }
+
         private ICollection<string> _warningsAsMessages;
 
         /// <summary>
@@ -746,7 +767,12 @@ public bool ShouldTreatWarningAsError(string warningCode)
             }
 
             // An empty set means all warnings are errors.
-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);
+            return (WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningCode)) || WarningsAsErrors.Contains(warningCode);
+        }
+
+        private bool WarningAsErrorNotOverriden(string warningCode)
+        {
+            return WarningsNotAsErrors?.Contains(warningCode) != true;
         }
 
         #endregion
@@ -901,7 +927,6 @@ public override bool LogsMessagesOfImportance(MessageImportance importance)
 #endif
                 MessageImportance minimumImportance = _taskHost._taskLoggingContext?.LoggingService.MinimumRequiredMessageImportance ?? MessageImportance.Low;
                 return importance <= minimumImportance;
-
             }
 
             /// <inheritdoc/>
diff --git a/src/Build/BackEnd/Components/Scheduler/IScheduler.cs b/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
index cb704e70981..f0b32acb722 100644
--- a/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
@@ -5,6 +5,8 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
index 994f3b155e9..a3d17131919 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulableRequest.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/ScheduleResponse.cs b/src/Build/BackEnd/Components/Scheduler/ScheduleResponse.cs
index 955e5e070e5..8e514e01dc6 100644
--- a/src/Build/BackEnd/Components/Scheduler/ScheduleResponse.cs
+++ b/src/Build/BackEnd/Components/Scheduler/ScheduleResponse.cs
@@ -5,6 +5,8 @@
 using System.Globalization;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/ScheduleTimeRecord.cs b/src/Build/BackEnd/Components/Scheduler/ScheduleTimeRecord.cs
index d17fe5734e2..b274c9fdd3b 100644
--- a/src/Build/BackEnd/Components/Scheduler/ScheduleTimeRecord.cs
+++ b/src/Build/BackEnd/Components/Scheduler/ScheduleTimeRecord.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index baa4c5b1a44..e3804e0bb28 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -20,6 +20,8 @@
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulerCircularDependencyException.cs b/src/Build/BackEnd/Components/Scheduler/SchedulerCircularDependencyException.cs
index 43d90a092bf..4da80ca7d92 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulerCircularDependencyException.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulerCircularDependencyException.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
index 9aeb9009c80..7888b1a6679 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingData.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
index b8546bbe1b6..9fdc4c5f8bc 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index 23c505ff896..4ec872e6718 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -11,9 +11,11 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
-    internal sealed class CachingSdkResolverService: SdkResolverService
+    internal sealed class CachingSdkResolverService : SdkResolverService
     {
         /// <summary>
         /// Stores the cache in a set of concurrent dictionaries.  The main dictionary is by build submission ID and the inner dictionary contains a case-insensitive SDK name and the cached <see cref="SdkResult"/>.
@@ -36,10 +38,12 @@ public override void ClearCaches()
 
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
-
             SdkResult result;
 
+            bool wasResultCached = true;
+
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
+
             if (Traits.Instance.EscapeHatches.DisableSdkResolutionCache)
             {
                 result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
@@ -57,7 +61,12 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                  */
                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(
                     sdk.Name,
-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));
+                    key => new Lazy<SdkResult>(() =>
+                    {
+                        wasResultCached = false;
+
+                        return base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                    }));
 
                 // Get the lazy value which will block all waiting threads until the SDK is resolved at least once while subsequent calls get cached results.
                 result = resultLazy.Value;
@@ -71,7 +80,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, result.Version, result.ElementLocation, sdk.Version);
             }
 
-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success, wasResultCached);
 
             return result;
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs b/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
index b73baa44200..ef3e569dd06 100644
--- a/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs
@@ -10,6 +10,8 @@
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs b/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
index fc2d03a2079..46edc4f4a4d 100644
--- a/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/HostedSdkResolverServiceBase.cs
@@ -7,6 +7,8 @@
 using System;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
index 2aeed6fe132..f2f4544ccd1 100644
--- a/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
index d0ba73f4f8d..6e1e26c4258 100644
--- a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
@@ -7,16 +7,15 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
-using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Threading;
-using System.Threading.Tasks;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
     /// An implementation of <see cref="ISdkResolverService"/> that is hosted in the main node for multi-proc builds.  This instance of the service
-    /// listens for requests from out-of-proc nodes so that SDK resolution is handled in a central location.  This instance is registered in <see cref="BuildComponentFactoryCollection.RegisterDefaultFactories"/>
+    /// handles requests from out-of-proc nodes so that SDK resolution is handled in a central location.  This instance is registered in <see cref="BuildComponentFactoryCollection.RegisterDefaultFactories"/>
     /// and can be overridden for different contexts.  This service calls the <see cref="SdkResolverService"/> to do any actual SDK resolution
     /// because the <see cref="SdkResolverService"/> is used for stand-alone evaluations where there is no build context available so caching
     /// is not an option.
@@ -26,26 +25,6 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal sealed class MainNodeSdkResolverService : HostedSdkResolverServiceBase
     {
-        /// <summary>
-        /// An object used for locking in this class instance.
-        /// </summary>
-        private readonly object _lockObject = new object();
-
-        /// <summary>
-        /// A <see cref="Task"/> running in the background which handles requests from remote nodes.
-        /// </summary>
-        private Task _requestHandler;
-
-        /// <summary>
-        /// An event which is signaled when a request is received from a remote host.
-        /// </summary>
-        private ManualResetEvent _requestReceivedEvent;
-
-        /// <summary>
-        /// A list of requests from remote hosts which need to be processed.
-        /// </summary>
-        private ConcurrentQueue<SdkResolverRequest> _requests;
-
         private readonly ISdkResolverService _cachedSdkResolver = new CachingSdkResolverService();
 
         /// <summary>
@@ -53,10 +32,12 @@ internal sealed class MainNodeSdkResolverService : HostedSdkResolverServiceBase
         /// </summary>
         public static IBuildComponent CreateComponent(BuildComponentType type)
         {
+            ErrorUtilities.VerifyThrowArgumentOutOfRange(type == BuildComponentType.SdkResolverService, nameof(type));
+
             return new MainNodeSdkResolverService();
         }
 
-        //  Test hook
+        // Test hook
         internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
         {
             ((CachingSdkResolverService)_cachedSdkResolver).InitializeForTests(resolverLoader, resolvers);
@@ -76,148 +57,51 @@ public override void ClearCaches()
         /// <inheritdoc cref="INodePacketHandler.PacketReceived"/>
         public override void PacketReceived(int node, INodePacket packet)
         {
-            switch (packet.Type)
-            {
-                case NodePacketType.ResolveSdkRequest:
-                    HandleRequest(node, packet as SdkResolverRequest);
-                    break;
-            }
-        }
-
-        /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
-        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
-        {
-            ErrorUtilities.VerifyThrowInternalNull(sdk, nameof(sdk));
-            ErrorUtilities.VerifyThrowInternalNull(loggingContext, nameof(loggingContext));
-            ErrorUtilities.VerifyThrowInternalNull(sdkReferenceLocation, nameof(sdkReferenceLocation));
-            ErrorUtilities.VerifyThrowInternalLength(projectPath, nameof(projectPath));
-
-            return _cachedSdkResolver.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-        }
-
-        /// <summary>
-        /// Handles a request from a remote node.
-        /// </summary>
-        /// <param name="node">The ID of the remote node.</param>
-        /// <param name="request">The <see cref="SdkResolverRequest"/> containing information about the SDK to resolve.</param>
-        /// <remarks>This method must not directly handle requests because it would block requests from other nodes.  Instead, it simply
-        /// adds requests to a queue which are processed by a background thread.</remarks>
-        private void HandleRequest(int node, SdkResolverRequest request)
-        {
-            if (_requestHandler == null)
+            if (packet is not SdkResolverRequest request)
             {
-                // Start the background thread which will process queued requests if it has not already been started.
-                lock (_lockObject)
-                {
-                    if (_requestHandler == null)
-                    {
-                        // Create the event used to signal that a request was received
-                        _requestReceivedEvent = new ManualResetEvent(initialState: false);
-
-                        // Create the queue used to store requests that need to be processed
-                        _requests = new ConcurrentQueue<SdkResolverRequest>();
-
-                        // Create the thread which processes requests
-                        _requestHandler = Task.Factory.StartNew(RequestHandlerPumpProc, TaskCreationOptions.LongRunning);
-                    }
-                }
+                return;
             }
 
             // Associate the node with the request
             request.NodeId = node;
 
-            _requests.Enqueue(request);
+            SdkResult response = null;
 
-            // Signal that one or more requests have been received
-            _requestReceivedEvent.Set();
-        }
+            // Create an SdkReference from the request; the SdkReference constructor below never throws.
+            SdkReference sdkReference = new SdkReference(request.Name, request.Version, request.MinimumVersion);
+            try
+            {
+                ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
 
-        /// <summary>
-        /// Processes all requests that are currently in the queue.
-        /// </summary>
-        private void ProcessRequests()
-        {
-            // Store a list of threads which are resolving SDKs
-            List<Task> tasks = new List<Task>(_requests.Count);
+                // This call is usually cached so is very fast but can take longer for a new SDK that is downloaded.  Other queued threads for different SDKs will complete sooner and continue on which unblocks evaluations
+                response = ResolveSdk(request.SubmissionId, sdkReference, new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath), request.ElementLocation, request.SolutionPath, request.ProjectPath, request.Interactive, request.IsRunningInVisualStudio);
+            }
+            catch (Exception e)
+            {
+                ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
 
-            SdkResolverRequest item;
+                EvaluationLoggingContext loggingContext = new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath);
 
-            while (_requests.TryDequeue(out item))
-            {
-                SdkResolverRequest request = item;
-
-                // Start a thread to resolve an SDK and add it to the list of threads
-                tasks.Add(Task.Run(() =>
-                {
-                    SdkResult response = null;
-                    try
-                    {
-                        // Create an SdkReference from the request
-                        SdkReference sdkReference = new SdkReference(request.Name, request.Version, request.MinimumVersion);
-
-                        ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-
-                        // This call is usually cached so is very fast but can take longer for a new SDK that is downloaded.  Other queued threads for different SDKs will complete sooner and continue on which unblocks evaluations
-                        response = ResolveSdk(request.SubmissionId, sdkReference, new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath), request.ElementLocation, request.SolutionPath, request.ProjectPath, request.Interactive, request.IsRunningInVisualStudio);
-                    }
-                    catch (Exception e)
-                    {
-                        ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-
-                        EvaluationLoggingContext loggingContext = new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath);
-
-                        loggingService.LogFatalBuildError(loggingContext.BuildEventContext, e, new BuildEventFileInfo(request.ElementLocation));
-                    }
-                    finally
-                    {
-                        // Get the node manager and send the response back to the node that requested the SDK
-                        INodeManager nodeManager = Host.GetComponent(BuildComponentType.NodeManager) as INodeManager;
-
-                        nodeManager.SendData(request.NodeId, response);
-                    }
-                }));
+                loggingService.LogFatalBuildError(loggingContext.BuildEventContext, e, new BuildEventFileInfo(request.ElementLocation));
             }
+            finally
+            {
+                // Get the node manager and send the response back to the node that requested the SDK
+                INodeManager nodeManager = Host.GetComponent(BuildComponentType.NodeManager) as INodeManager;
 
-            // Wait for all tasks to complete
-            Task.WaitAll(tasks.ToArray());
+                nodeManager.SendData(request.NodeId, response ?? new SdkResult(sdkReference, null, null));
+            }
         }
 
-        /// <summary>
-        /// A background thread that waits for requests to be received.
-        /// </summary>
-        private void RequestHandlerPumpProc()
+        /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
+        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            try
-            {
-                Thread.CurrentThread.Name = "MSBuild SDK Resolver";
-
-                while (true)
-                {
-                    WaitHandle[] handles = new WaitHandle[] { ShutdownEvent, _requestReceivedEvent };
-
-                    int waitId = WaitHandle.WaitAny(handles);
-                    switch (waitId)
-                    {
-                        case 0:
-                            return;
-
-                        case 1:
-                            _requestReceivedEvent.Reset();
-
-                            ProcessRequests();
-                            break;
+            ErrorUtilities.VerifyThrowInternalNull(sdk, nameof(sdk));
+            ErrorUtilities.VerifyThrowInternalNull(loggingContext, nameof(loggingContext));
+            ErrorUtilities.VerifyThrowInternalNull(sdkReferenceLocation, nameof(sdkReferenceLocation));
+            ErrorUtilities.VerifyThrowInternalLength(projectPath, nameof(projectPath));
 
-                        default:
-                            ErrorUtilities.ThrowInternalError("waitId {0} out of range.", waitId);
-                            break;
-                    }
-                }
-            }
-            catch (Exception e)
-            {
-                ExceptionHandling.DumpExceptionToFile(e);
-                throw;
-            }
+            return _cachedSdkResolver.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
index 6ae4a89268e..9db962d2a21 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
@@ -4,12 +4,15 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
 using System.Collections.Concurrent;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
@@ -26,7 +29,7 @@ internal sealed class OutOfProcNodeSdkResolverService : HostedSdkResolverService
         /// <summary>
         /// The cache of responses which is cleared between builds.
         /// </summary>
-        private readonly ConcurrentDictionary<string, SdkResult> _responseCache = new ConcurrentDictionary<string, SdkResult>(MSBuildNameIgnoreCaseComparer.Default);
+        private readonly ConcurrentDictionary<string, Lazy<SdkResult>> _responseCache = new ConcurrentDictionary<string, Lazy<SdkResult>>(MSBuildNameIgnoreCaseComparer.Default);
 
         /// <summary>
         /// An event to signal when a response has been received.
@@ -63,14 +66,21 @@ public override void PacketReceived(int node, INodePacket packet)
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
+            bool wasResultCached = true;
+
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);
+
             // Get a cached response if possible, otherwise send the request
-            var sdkResult = _responseCache.GetOrAdd(
+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(
                 sdk.Name,
-                key =>
+                key => new Lazy<SdkResult>(() =>
                 {
-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-                    return result;
-                });
+                    wasResultCached = false;
+
+                    return RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                }));
+
+            SdkResult sdkResult = sdkResultLazy.Value;
 
             if (sdkResult.Version != null && !SdkResolverService.IsReferenceSameVersion(sdk, sdkResult.Version))
             {
@@ -78,6 +88,8 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, sdkResult.Version, sdkResult.ElementLocation, sdk.Version);
             }
 
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(submissionId, sdk.Name, solutionPath, projectPath, _lastResponse.Success, wasResultCached);
+
             return sdkResult;
         }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverServiceFactory.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverServiceFactory.cs
index 80a1536e05f..95e380153f1 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverServiceFactory.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverServiceFactory.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs b/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
index 182cda8da52..a08ba96dc43 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
@@ -6,6 +6,8 @@
 
 using SdkLoggerBase = Microsoft.Build.Framework.SdkLogger;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverCachingWrapper.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverCachingWrapper.cs
index 39cc6820930..962ed5b4b5a 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverCachingWrapper.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverCachingWrapper.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs
index 438557c97ed..7c846f8decb 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs
@@ -5,6 +5,8 @@
 
 using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs
index d4f5b35a3d7..505f3d40275 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 9c2fca19031..0ccdd796da6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     internal class SdkResolverLoader
@@ -22,7 +24,7 @@ internal class SdkResolverLoader
 
         private readonly string IncludeDefaultResolver = Environment.GetEnvironmentVariable("MSBUILDINCLUDEDEFAULTSDKRESOLVER");
 
-        //  Test hook for loading SDK Resolvers from additional folders.  Support runtime-specific test hook environment variables,
+        // Test hook for loading SDK Resolvers from additional folders.  Support runtime-specific test hook environment variables,
         //  as an SDK resolver built for .NET Framework probably won't work on .NET Core, and vice versa.
         private readonly string AdditionalResolversFolder = Environment.GetEnvironmentVariable(
 #if NETFRAMEWORK
@@ -32,7 +34,16 @@ internal class SdkResolverLoader
 #endif
             ) ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
 
-        internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
+        internal virtual IList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+        {
+            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
+                new List<SdkResolver> {new DefaultSdkResolver()}
+                : new List<SdkResolver>();
+
+            return resolvers;
+        }
+
+        internal virtual IList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext,
             ElementLocation location)
         {
             var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
@@ -55,6 +66,13 @@ internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
 
+        internal virtual IList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
+            ElementLocation location)
+        {
+            return FindPotentialSdkResolversManifests(
+                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot, "SdkResolvers"), location);
+        }
+
         /// <summary>
         ///     Find all files that are to be considered SDK Resolvers. Pattern will match
         ///     Root\SdkResolver\(ResolverName)\(ResolverName).dll.
@@ -64,24 +82,44 @@ internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
         /// <returns></returns>
         internal virtual IList<string> FindPotentialSdkResolvers(string rootFolder, ElementLocation location)
         {
-            var assembliesList = new List<string>();
+            var manifestsList = FindPotentialSdkResolversManifests(rootFolder, location);
+
+            return manifestsList.Select(manifest => manifest.Path).ToList();
+        }
+
+        internal virtual IList<SdkResolverManifest> FindPotentialSdkResolversManifests(string rootFolder, ElementLocation location)
+        {
+            List<SdkResolverManifest> manifestsList = new List<SdkResolverManifest>();
 
             if ((string.IsNullOrEmpty(rootFolder) || !FileUtilities.DirectoryExistsNoThrow(rootFolder)) && AdditionalResolversFolder == null)
             {
-                return assembliesList;
+                return manifestsList;
             }
 
             DirectoryInfo[] subfolders = GetSubfolders(rootFolder, AdditionalResolversFolder);
 
             foreach (var subfolder in subfolders)
             {
-                var assembly = Path.Combine(subfolder.FullName, $"{subfolder.Name}.dll");
                 var manifest = Path.Combine(subfolder.FullName, $"{subfolder.Name}.xml");
+                var assembly = Path.Combine(subfolder.FullName, $"{subfolder.Name}.dll");
+                bool assemblyAdded = false;
 
-                var assemblyAdded = TryAddAssembly(assembly, assembliesList);
-                if (!assemblyAdded)
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                 {
-                    assemblyAdded = TryAddAssemblyFromManifest(manifest, subfolder.FullName, assembliesList, location);
+                    // Prefer manifest over the assembly. Try to read the xml first, and if not found then look for an assembly.
+                    assemblyAdded = TryAddAssemblyManifestFromXml(manifest, subfolder.FullName, manifestsList, location);
+                    if (!assemblyAdded)
+                    {
+                        assemblyAdded = TryAddAssemblyManifestFromDll(assembly, manifestsList);
+                    }
+                }
+                else
+                {
+                    assemblyAdded = TryAddAssemblyManifestFromDll(assembly, manifestsList);
+                    if (!assemblyAdded)
+                    {
+                        assemblyAdded = TryAddAssemblyManifestFromXml(manifest, subfolder.FullName, manifestsList, location);
+                    }
                 }
 
                 if (!assemblyAdded)
@@ -90,7 +128,7 @@ internal virtual IList<string> FindPotentialSdkResolvers(string rootFolder, Elem
                 }
             }
 
-            return assembliesList;
+            return manifestsList;
         }
 
         private DirectoryInfo[] GetSubfolders(string rootFolder, string additionalResolversFolder)
@@ -131,25 +169,25 @@ public int GetHashCode(DirectoryInfo value)
             }
         }
 
-        private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFolder, List<string> assembliesList, ElementLocation location)
+        private bool TryAddAssemblyManifestFromXml(string pathToManifest, string manifestFolder, List<SdkResolverManifest> manifestsList, ElementLocation location)
         {
             if (!string.IsNullOrEmpty(pathToManifest) && !FileUtilities.FileExistsNoThrow(pathToManifest)) return false;
 
-            string path = null;
-
+            SdkResolverManifest manifest = null;
             try
             {
                 // <SdkResolver>
                 //   <Path>...</Path>
+                //   <ResolvableSdkPattern>(Optional field)</ResolvableSdkPattern>
                 // </SdkResolver>
-                var manifest = SdkResolverManifest.Load(pathToManifest);
+                manifest = SdkResolverManifest.Load(pathToManifest);
 
                 if (manifest == null || string.IsNullOrEmpty(manifest.Path))
                 {
                     ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, string.Empty);
                 }
 
-                path = FileUtilities.FixFilePath(manifest.Path);
+                manifest.Path = FileUtilities.FixFilePath(manifest.Path);
             }
             catch (XmlException e)
             {
@@ -157,25 +195,27 @@ private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFo
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), e, "SdkResolverManifestInvalid", pathToManifest, e.Message);
             }
 
-            if (!Path.IsPathRooted(path))
+            if (!Path.IsPathRooted(manifest.Path))
             {
-                path = Path.Combine(manifestFolder, path);
-                path = Path.GetFullPath(path);
+                manifest.Path = Path.Combine(manifestFolder, manifest.Path);
+                manifest.Path = Path.GetFullPath(manifest.Path);
             }
 
-            if (!TryAddAssembly(path, assembliesList))
+            if (string.IsNullOrEmpty(manifest.Path) || !FileUtilities.FileExistsNoThrow(manifest.Path))
             {
-                ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, path);
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(location), "SdkResolverDllInManifestMissing", pathToManifest, manifest.Path);
             }
 
+            manifestsList.Add(manifest);
+
             return true;
         }
 
-        private bool TryAddAssembly(string assemblyPath, List<string> assembliesList)
+        private bool TryAddAssemblyManifestFromDll(string assemblyPath, List<SdkResolverManifest> manifestsList)
         {
             if (string.IsNullOrEmpty(assemblyPath) || !FileUtilities.FileExistsNoThrow(assemblyPath)) return false;
 
-            assembliesList.Add(assemblyPath);
+            manifestsList.Add(new SdkResolverManifest(DisplayName: assemblyPath, Path: assemblyPath, ResolvableSdkRegex: null));
             return true;
         }
 
@@ -196,6 +236,13 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #endif
         }
 
+        protected internal virtual IList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+        {
+            var resolvers = new List<SdkResolver>();
+            LoadResolvers(manifest.Path, loggingContext, location, resolvers);
+            return resolvers;
+        }
+
         protected virtual void LoadResolvers(string resolverPath, LoggingContext loggingContext, ElementLocation location, List<SdkResolver> resolvers)
         {
             Assembly assembly;
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index dd0ca202dc1..f8d0baf5e71 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -1,7 +1,11 @@
 ﻿using Microsoft.Build.Shared;
+using System;
 using System.IO;
+using System.Text.RegularExpressions;
 using System.Xml;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
@@ -9,7 +13,43 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal class SdkResolverManifest
     {
-        internal string Path { get; set; }
+        private SdkResolverManifest()
+        {
+        }
+
+        public SdkResolverManifest(string DisplayName, string Path, Regex ResolvableSdkRegex)
+        {
+            this.DisplayName = DisplayName;
+            this.Path = Path;
+            this.ResolvableSdkRegex = ResolvableSdkRegex;
+        }
+
+        /// <summary>
+        /// Sdk resolver manifest display name.
+        /// </summary>
+        /// <remarks>
+        /// This field should be used only for logging purposes. Do not use for any actual processing, unless that are tests.
+        /// </remarks>
+        public string DisplayName { get; set; }
+
+        /// <summary>
+        /// Path for resolvers dll location.
+        /// </summary>
+        public string Path { get; set; }
+
+        /// <summary>
+        /// Regex which matches all the sdk names that could be resolved by the resolvers associated with given manifest.  
+        /// </summary>
+        public Regex ResolvableSdkRegex { get; set; }
+
+        /// <summary>
+        /// The time-out interval for the name pattern regex in milliseconds.
+        /// </summary>
+        /// <remarks>
+        /// This number should notify us when the name matching regex executes unreasonable amount of time (for example, have an infinite recursive regex expression).
+        /// One should avoid to put such a regex into a resolver's xml and we want to catch this situation early. Half a second seems to be a reasonable time in which regex should finish.
+        /// </remarks>
+        private const int SdkResolverPatternRegexTimeoutMsc = 500;
 
         /// <summary>
         /// Deserialize the file into an SdkResolverManifest.
@@ -33,7 +73,7 @@ internal static SdkResolverManifest Load(string filePath)
                 {
                     if (reader.NodeType == XmlNodeType.Element && reader.Name == "SdkResolver")
                     {
-                        return ParseSdkResolverElement(reader);
+                        return ParseSdkResolverElement(reader, filePath);
                     }
                     else
                     {
@@ -45,22 +85,43 @@ internal static SdkResolverManifest Load(string filePath)
             return null;
         }
 
-        private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
+        // This parsing code is very specific and not forward compatible, but since resolvers generally ship in the same release vehicle as MSBuild itself, only backward compatibility is required.
+        private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader, string filePath)
         {
             SdkResolverManifest manifest = new SdkResolverManifest();
+            manifest.DisplayName = filePath;
 
-            while (reader.Read())
+            reader.Read();
+            while (!reader.EOF)
             {
                 switch (reader.NodeType)
                 {
                     case XmlNodeType.Element:
                         {
-                            manifest.Path = reader.Name switch
+                            switch (reader.Name)
                             {
-                                "Path" => reader.ReadElementContentAsString(),
-                                _ => throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name)),
-                            };
+                                case "Path":
+                                    manifest.Path = reader.ReadElementContentAsString();
+                                    break;
+                                case "ResolvableSdkPattern":
+                                    string pattern = reader.ReadElementContentAsString();
+                                    try
+                                    {
+                                        manifest.ResolvableSdkRegex = new Regex(pattern, RegexOptions.Compiled | RegexOptions.CultureInvariant, TimeSpan.FromMilliseconds(SdkResolverPatternRegexTimeoutMsc));
+                                    }
+                                    catch (ArgumentException ex)
+                                    {
+                                        ErrorUtilities.ThrowInternalError("A regular expression parsing error occurred while parsing {0}.", ex, filePath);
+                                    }
+                                    break;
+                                default:
+                                    throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
+                            }
+                            break;
                         }
+
+                    case XmlNodeType.EndElement:
+                        reader.Read();
                         break;
 
                     default:
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
index a89cd605234..89c54eff53a 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index ff98112817b..c38afed1d3b 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -12,6 +12,10 @@
 using System.Collections.Generic;
 using System.Reflection;
 using Microsoft.Build.Eventing;
+using System.Linq;
+using System.Text.RegularExpressions;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
@@ -39,7 +43,25 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// Stores the list of SDK resolvers which were loaded.
         /// </summary>
-        private IList<SdkResolver> _resolvers;
+        /// <remarks>
+        /// Need it for supporting the ChangeWave less than <see cref="ChangeWaves.Wave17_4"/>. Remove when move out Wave17_4.
+        /// </remarks>
+        private IList<SdkResolver> _resolversList;
+
+        /// <summary>
+        /// Stores the loaded SDK resolvers, mapped to the manifest from which they came.
+        /// </summary>
+        private Dictionary<SdkResolverManifest, IList<SdkResolver>> _manifestToResolvers;
+
+        /// <summary>
+        /// Stores the list of manifests of specific SDK resolvers which could be loaded.
+        /// </summary>
+        private IList<SdkResolverManifest> _specificResolversManifestsRegistry;
+
+        /// <summary>
+        /// Stores the list of manifests of general SDK resolvers which could be loaded.
+        /// </summary>
+        private IList<SdkResolverManifest> _generalResolversManifestsRegistry;
 
         /// <summary>
         /// Stores an <see cref="SdkResolverLoader"/> which can load registered SDK resolvers.
@@ -90,12 +112,147 @@ public virtual void ClearCaches()
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            // Lazy initialize the SDK resolvers
-            if (_resolvers == null)
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+            }
+            else
+            {
+                return ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+            }
+        }
+
+        /// <remarks>
+        /// Resolves the sdk in two passes. First pass consists of all specific resolvers (i.e. resolvers with pattern), which match the sdk name.
+        /// The resolvers are ordered by the priority in first pass and are tried until one of them succeeds.
+        /// If the first pass is unsuccessful, on the second pass all the general resolvers (i.e. resolvers without pattern), ordered by their priority, are tried one after one.
+        /// After that, if the second pass is unsuccessful, sdk resolution is unsuccessful.
+        /// </remarks>
+        private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
+        {
+            if (_specificResolversManifestsRegistry == null || _generalResolversManifestsRegistry == null)
+            {
+                RegisterResolversManifests(loggingContext, sdkReferenceLocation);
+            }
+
+            // Pick up the matching specific resolvers from the list of resolvers.
+            List<SdkResolverManifest> matchingResolversManifests = new();
+            foreach (SdkResolverManifest manifest in _specificResolversManifestsRegistry)
+            {
+                try
+                {
+                    if (manifest.ResolvableSdkRegex.IsMatch(sdk.Name))
+                    {
+                        matchingResolversManifests.Add(manifest);
+                    }
+                }
+                catch (RegexMatchTimeoutException ex)
+                {
+                    ErrorUtilities.ThrowInternalError("Timeout exceeded matching sdk \"{0}\" to <ResolvableSdkPattern> from sdk resolver manifest {1}.", ex, sdk.Name, manifest.DisplayName);
+                }
+            }
+
+            List<SdkResolver> resolvers;
+            SdkResult sdkResult;
+            if (matchingResolversManifests.Count != 0)
+            {
+                // First pass.
+                resolvers = GetResolvers(matchingResolversManifests, loggingContext, sdkReferenceLocation);
+
+                if (TryResolveSdkUsingSpecifiedResolvers(
+                    resolvers,
+                    submissionId,
+                    sdk,
+                    loggingContext,
+                    sdkReferenceLocation,
+                    solutionPath,
+                    projectPath,
+                    interactive,
+                    isRunningInVisualStudio,
+                    out sdkResult))
+                {
+                    return sdkResult;
+                }
+            }
+
+            // Second pass: fallback to general resolvers. 
+            resolvers = GetResolvers(
+                _generalResolversManifestsRegistry,
+                loggingContext,
+                sdkReferenceLocation).ToList();
+
+            if (TryResolveSdkUsingSpecifiedResolvers(
+                resolvers,
+                submissionId,
+                sdk,
+                loggingContext,
+                sdkReferenceLocation,
+                solutionPath,
+                projectPath,
+                interactive,
+                isRunningInVisualStudio,
+                out sdkResult))
+            {
+                return sdkResult;
+            }
+
+            // No resolvers resolved the sdk.
+            return new SdkResult(sdk, null, null);
+        }
+
+        private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManifests, LoggingContext loggingContext, ElementLocation sdkReferenceLocation)
+        {
+            // Create a sorted by priority list of resolvers. Load them if needed.
+            List<SdkResolver> resolvers = new List<SdkResolver>();
+            foreach (var resolverManifest in resolversManifests)
+            {
+                if (!_manifestToResolvers.TryGetValue(resolverManifest, out IList<SdkResolver> newResolvers))
+                {
+                    lock (_lockObject)
+                    {
+                        if (!_manifestToResolvers.TryGetValue(resolverManifest, out newResolvers))
+                        {
+                            // Loading of the needed resolvers.
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
+                            newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);
+                            _manifestToResolvers[resolverManifest] = newResolvers;
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName, newResolvers.Count);
+                        }
+                    }
+                }
+
+                resolvers.AddRange(newResolvers);
+            }
+
+            resolvers.Sort((l, r) => l.Priority.CompareTo(r.Priority));
+            return resolvers;
+        }
+
+        private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
+        {
+            // Lazy initialize all SDK resolvers
+            if (_resolversList == null)
             {
                 Initialize(loggingContext, sdkReferenceLocation);
             }
 
+            TryResolveSdkUsingSpecifiedResolvers(
+                _resolversList,
+                submissionId,
+                sdk,
+                loggingContext,
+                sdkReferenceLocation,
+                solutionPath,
+                projectPath,
+                interactive,
+                isRunningInVisualStudio,
+                out SdkResult sdkResult);
+
+            return sdkResult;
+        }
+
+        private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers, int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, out SdkResult sdkResult)
+        {
             List<SdkResult> results = new List<SdkResult>();
 
             // Loop through resolvers which have already been sorted by priority, returning the first result that was successful
@@ -103,7 +260,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
 
             loggingContext.LogComment(MessageImportance.Low, "SdkResolving", sdk.ToString());
 
-            foreach (SdkResolver sdkResolver in _resolvers)
+            foreach (SdkResolver sdkResolver in resolvers)
             {
                 SdkResolverContext context = new SdkResolverContext(buildEngineLogger, projectPath, solutionPath, ProjectCollection.Version, interactive, isRunningInVisualStudio)
                 {
@@ -155,7 +312,8 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
                     // Associate the element location of the resolved SDK reference
                     result.ElementLocation = sdkReferenceLocation;
 
-                    return result;
+                    sdkResult = result;
+                    return true;
                 }
 
                 results.Add(result);
@@ -174,7 +332,8 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
                 }
             }
 
-            return new SdkResult(sdk, null, null);
+            sdkResult = new SdkResult(sdk, null, null);
+            return false;
         }
 
         /// <summary>
@@ -189,7 +348,28 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
                 _sdkResolverLoader = resolverLoader;
             }
 
-            _resolvers = resolvers;
+            _specificResolversManifestsRegistry = null;
+            _generalResolversManifestsRegistry = null;
+            _manifestToResolvers = null;
+            _resolversList = null;
+
+            if (resolvers != null)
+            {
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+                {
+                    _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
+                    _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
+                    _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
+
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(DisplayName: "TestResolversManifest", Path: null, ResolvableSdkRegex: null);
+                    _generalResolversManifestsRegistry.Add(sdkResolverManifest);
+                    _manifestToResolvers[sdkResolverManifest] = resolvers;
+                }
+                else
+                {
+                    _resolversList = resolvers;
+                }
+            }
         }
 
         private static void LogWarnings(LoggingContext loggingContext, ElementLocation location, SdkResult result)
@@ -230,16 +410,59 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
         {
             lock (_lockObject)
             {
-                if (_resolvers != null)
+                if (_resolversList != null)
                 {
                     return;
                 }
 
                 MSBuildEventSource.Log.SdkResolverServiceInitializeStart();
-                _resolvers = _sdkResolverLoader.LoadResolvers(loggingContext, location);
-                MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolvers.Count);
+                _resolversList = _sdkResolverLoader.LoadAllResolvers(loggingContext, location);
+                MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolversList.Count);
             }
+        }
+
+        private void RegisterResolversManifests(LoggingContext loggingContext, ElementLocation location)
+        {
+            lock (_lockObject)
+            {
+                if (_specificResolversManifestsRegistry != null && _generalResolversManifestsRegistry != null)
+                {
+                    return;
+                }
+
+                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
+                var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
+
+                _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
 
+                // Load and add the manifest for the default resolvers, located directly in this dll.
+                IList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
+                if (defaultResolvers.Count > 0)
+                {
+                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
+                    SdkResolverManifest sdkDefaultResolversManifest = new SdkResolverManifest(DisplayName: "DefaultResolversManifest", Path: null, ResolvableSdkRegex: null);
+                    allResolversManifests.Add(sdkDefaultResolversManifest);
+                    _manifestToResolvers[sdkDefaultResolversManifest] = defaultResolvers;
+                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.DisplayName, defaultResolvers.Count);
+                }
+
+                MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
+
+                // Break the list of all resolvers manifests into two parts: manifests with specific and general resolvers.
+                _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
+                _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
+                foreach (SdkResolverManifest manifest in allResolversManifests)
+                {
+                    if (manifest.ResolvableSdkRegex == null)
+                    {
+                        _generalResolversManifestsRegistry.Add(manifest);
+                    }
+                    else
+                    {
+                        _specificResolversManifestsRegistry.Add(manifest);
+                    }
+                }
+            }
         }
 
         private void SetResolverState(int submissionId, SdkResolver resolver, object state)
@@ -249,7 +472,9 @@ private void SetResolverState(int submissionId, SdkResolver resolver, object sta
             {
                 ConcurrentDictionary<SdkResolver, object> resolverState = _resolverStateBySubmission.GetOrAdd(
                     submissionId,
-                    _ => new ConcurrentDictionary<SdkResolver, object>(NativeMethodsShared.GetLogicalCoreCount(), _resolvers.Count));
+                    _ => new ConcurrentDictionary<SdkResolver, object>(
+                        NativeMethodsShared.GetLogicalCoreCount(),
+                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _specificResolversManifestsRegistry.Count + _generalResolversManifestsRegistry.Count : _resolversList.Count));
 
                 resolverState.AddOrUpdate(resolver, state, (sdkResolver, obj) => state);
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
index 3f02bac8abc..9bf0dddb0a6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
@@ -8,6 +8,8 @@
 using SdkReference = Microsoft.Build.Framework.SdkReference;
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
@@ -64,7 +66,7 @@ public SdkResult(SdkReference sdkReference, IEnumerable<string> paths, string ve
 
             Version = version;
 
-            //  Note: these dictionaries should use StringComparison.OrdinalIgnoreCase
+            // Note: these dictionaries should use StringComparison.OrdinalIgnoreCase
             PropertiesToAdd = propertiesToAdd;
             ItemsToAdd = itemsToAdd;
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
index 9744bc0bbb2..082ee42c97a 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResultFactory.cs
@@ -8,6 +8,8 @@
 using SdkResultBase = Microsoft.Build.Framework.SdkResult;
 using SdkResultFactoryBase = Microsoft.Build.Framework.SdkResultFactory;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
index 37ba6eb79d9..586db964fec 100644
--- a/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/TranslationHelpers.cs
@@ -2,6 +2,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
     static class SdkResultTranslationHelpers
diff --git a/src/Build/BackEnd/Node/INode.cs b/src/Build/BackEnd/Node/INode.cs
index ccd9fd075ef..1eff91490df 100644
--- a/src/Build/BackEnd/Node/INode.cs
+++ b/src/Build/BackEnd/Node/INode.cs
@@ -3,9 +3,11 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
-    using NodeEngineShutdownReason = Execution.NodeEngineShutdownReason;
+    using NodeEngineShutdownReason = Microsoft.Build.Execution.NodeEngineShutdownReason;
 
     #region Delegates
     /// <summary>
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index 81b4ab63279..8d00119a2f5 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -14,6 +14,8 @@
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
 using Microsoft.Build.BackEnd.Components.Caching;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -309,13 +311,8 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)
                     _buildRequestEngine.CleanupForBuild();
                 }
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
             {
-                if (ExceptionHandling.IsCriticalException(ex))
-                {
-                    throw;
-                }
-
                 // If we had some issue shutting down, don't reuse the node because we may be in some weird state.
                 if (_shutdownReason == NodeEngineShutdownReason.BuildCompleteReuse)
                 {
diff --git a/src/Build/BackEnd/Node/LoggingNodeConfiguration.cs b/src/Build/BackEnd/Node/LoggingNodeConfiguration.cs
index 2c7a47703c0..ba9dfbfff31 100644
--- a/src/Build/BackEnd/Node/LoggingNodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/LoggingNodeConfiguration.cs
@@ -5,6 +5,8 @@
 // <summary>A packet which contains information needed for a node to configure itself for build.</summary>
 //-----------------------------------------------------------------------
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     internal sealed class LoggingNodeConfiguration : ITranslatable
diff --git a/src/Build/BackEnd/Node/NativeMethods.cs b/src/Build/BackEnd/Node/NativeMethods.cs
index 7695757e2ab..66eb9b8f702 100644
--- a/src/Build/BackEnd/Node/NativeMethods.cs
+++ b/src/Build/BackEnd/Node/NativeMethods.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index 029b1814605..52f8dfc21db 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -1,11 +1,15 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if FEATURE_APPDOMAIN
 using System;
+#endif
 using System.Diagnostics;
 
 using Microsoft.Build.Execution;
 using Microsoft.Build.Logging;
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index ae59a7b50af..60838dd3f20 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections.Generic;
 using System.Collections.Concurrent;
-using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Globalization;
@@ -18,6 +17,9 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.SdkResolution;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
+using System.Diagnostics;
+
+#nullable disable
 
 namespace Microsoft.Build.Execution
 {
@@ -758,13 +760,8 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
                     _loggingService.InitializeNodeLoggers(configuration.LoggerDescriptions, sink, configuration.NodeId);
                 }
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
             {
-                if (ExceptionHandling.IsCriticalException(ex))
-                {
-                    throw;
-                }
-
                 OnEngineException(ex);
             }
 
@@ -813,6 +810,32 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
         private void HandleNodeBuildComplete(NodeBuildComplete buildComplete)
         {
             _shutdownReason = buildComplete.PrepareForReuse ? NodeEngineShutdownReason.BuildCompleteReuse : NodeEngineShutdownReason.BuildComplete;
+            if (_shutdownReason == NodeEngineShutdownReason.BuildCompleteReuse)
+            {
+                ProcessPriorityClass priorityClass = Process.GetCurrentProcess().PriorityClass;
+                if (priorityClass != ProcessPriorityClass.Normal && priorityClass != ProcessPriorityClass.BelowNormal)
+                {
+                    // This isn't a priority class known by MSBuild. We should avoid connecting to this node.
+                    _shutdownReason = NodeEngineShutdownReason.BuildComplete;
+                }
+                else
+                {
+                    bool lowPriority = priorityClass == ProcessPriorityClass.BelowNormal;
+                    if (_nodeEndpoint.LowPriority != lowPriority)
+                    {
+                        if (!lowPriority || NativeMethodsShared.IsWindows)
+                        {
+                            Process.GetCurrentProcess().PriorityClass = lowPriority ? ProcessPriorityClass.Normal : ProcessPriorityClass.BelowNormal;
+                        }
+                        else
+                        {
+                            // On *nix, we can't adjust the priority up, so to avoid using this node at the wrong priority, we should not be reused.
+                            _shutdownReason = NodeEngineShutdownReason.BuildComplete;
+                        }
+                    }
+                }
+            }
+            
             _shutdownEvent.Set();
         }
     }
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index 03a595879bd..e86a747c6b5 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -8,6 +8,8 @@
 #endif
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index 9f43e5b804b..d0ffa213952 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -95,7 +97,6 @@ internal class BuildRequest : INodePacket
         /// </summary>
         public BuildRequest()
         {
-
         }
 
         private BuildRequest(
diff --git a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
index 672034caece..a694cb56329 100644
--- a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 6d55273c55c..b0b4f1204e3 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -121,7 +123,7 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// </summary>
         private int _resultsNodeId = Scheduler.InvalidNodeId;
 
-        ///<summary>
+        /// <summary>
         /// Holds a snapshot of the environment at the time we blocked.
         /// </summary>
         private Dictionary<string, string> _savedEnvironmentVariables;
@@ -1005,14 +1007,9 @@ private ITranslator GetConfigurationTranslator(TranslationDirection direction)
                     return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), null);
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (e is DirectoryNotFoundException || e is UnauthorizedAccessException)
             {
-                if (e is DirectoryNotFoundException || e is UnauthorizedAccessException)
-                {
-                    ErrorUtilities.ThrowInvalidOperation("CacheFileInaccessible", cacheFile, e);
-                }
-
-                // UNREACHABLE
+                ErrorUtilities.ThrowInvalidOperation("CacheFileInaccessible", cacheFile, e);
                 throw;
             }
         }
diff --git a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
index 49403b5f032..b3419d0e869 100644
--- a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
@@ -6,6 +6,8 @@
 
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 67138103af8..97b64d603a3 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/CircularDependencyException.cs b/src/Build/BackEnd/Shared/CircularDependencyException.cs
index d8765b2e968..a2e1910b3ec 100644
--- a/src/Build/BackEnd/Shared/CircularDependencyException.cs
+++ b/src/Build/BackEnd/Shared/CircularDependencyException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index ef92495c45a..83b3218f3fe 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -56,6 +58,12 @@ public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectP
             _toolsVersion = MSBuildConstants.CurrentToolsVersion;
             _globalProperties = globalProperties;
         }
+        public ConfigurationMetadata(string projectFullPath, PropertyDictionary<ProjectPropertyInstance> globalProperties, string previousPlatform, string previousPlatformLookupTable, bool isSetPlatformHardCoded) : this(projectFullPath, globalProperties)
+        {
+            PreviousPlatform = previousPlatform;
+            PreviousPlatformLookupTable = previousPlatformLookupTable;
+            IsSetPlatformHardCoded = isSetPlatformHardCoded;
+        }
 
         public ConfigurationMetadata(ITranslator translator)
         {
@@ -79,6 +87,11 @@ public ConfigurationMetadata(ITranslator translator)
         /// </summary>
         public string ToolsVersion => _toolsVersion;
 
+        public string PreviousPlatform { get; } = "";
+
+        public string PreviousPlatformLookupTable { get; } = "";
+        public bool IsSetPlatformHardCoded { get; } = false;
+
         private PropertyDictionary<ProjectPropertyInstance> _globalProperties;
 
         /// <summary>
@@ -165,7 +178,9 @@ private bool InternalEquals(ConfigurationMetadata other)
 
             return ProjectFullPath.Equals(other.ProjectFullPath, StringComparison.OrdinalIgnoreCase) &&
                    ToolsVersion.Equals(other.ToolsVersion, StringComparison.OrdinalIgnoreCase) &&
-                   GlobalProperties.Equals(other.GlobalProperties);
+                   GlobalProperties.Equals(other.GlobalProperties) &&
+                   PreviousPlatform.Equals(other.PreviousPlatform, StringComparison.OrdinalIgnoreCase) &&
+                   PreviousPlatformLookupTable.Equals(other.PreviousPlatformLookupTable, StringComparison.OrdinalIgnoreCase);
         }
 
         private string DebugString()
diff --git a/src/Build/BackEnd/Shared/IBuildResults.cs b/src/Build/BackEnd/Shared/IBuildResults.cs
index 0004b23ccc7..28fe90b842c 100644
--- a/src/Build/BackEnd/Shared/IBuildResults.cs
+++ b/src/Build/BackEnd/Shared/IBuildResults.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/ITargetResult.cs b/src/Build/BackEnd/Shared/ITargetResult.cs
index 2ba2185c2c4..8fd59e071c7 100644
--- a/src/Build/BackEnd/Shared/ITargetResult.cs
+++ b/src/Build/BackEnd/Shared/ITargetResult.cs
@@ -5,6 +5,8 @@
 using System.Diagnostics.CodeAnalysis;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/ResourceRequest.cs b/src/Build/BackEnd/Shared/ResourceRequest.cs
index 815eedb9200..0dfe5c9d808 100644
--- a/src/Build/BackEnd/Shared/ResourceRequest.cs
+++ b/src/Build/BackEnd/Shared/ResourceRequest.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/ResourceResponse.cs b/src/Build/BackEnd/Shared/ResourceResponse.cs
index 22fcefef30f..a1cc63c18fc 100644
--- a/src/Build/BackEnd/Shared/ResourceResponse.cs
+++ b/src/Build/BackEnd/Shared/ResourceResponse.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index d94d59beda8..26d41241e41 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Shared/WorkUnitResult.cs b/src/Build/BackEnd/Shared/WorkUnitResult.cs
index cb77c22c216..fdf1b3c909f 100644
--- a/src/Build/BackEnd/Shared/WorkUnitResult.cs
+++ b/src/Build/BackEnd/Shared/WorkUnitResult.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/TaskExecutionHost/AddInParts/ITaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/AddInParts/ITaskExecutionHost.cs
index b591daf469c..b882915f83c 100644
--- a/src/Build/BackEnd/TaskExecutionHost/AddInParts/ITaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/AddInParts/ITaskExecutionHost.cs
@@ -10,6 +10,8 @@
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using TaskLoggingContext = Microsoft.Build.BackEnd.Logging.TaskLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 77497354b7b..bfbe4b83f41 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -20,11 +20,12 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 using Task = System.Threading.Tasks.Task;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -159,7 +160,7 @@ internal TaskExecutionHost()
         }
 
         /// <summary>
-        /// Finalizer
+        /// Finalizes an instance of the <see cref="TaskExecutionHost"/> class.
         /// </summary>
         ~TaskExecutionHost()
         {
@@ -342,13 +343,8 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
                 {
                     success = SetTaskParameter(parameter.Key, parameter.Value.Item1, parameter.Value.Item2, requiredParameters.ContainsKey(parameter.Key), out taskParameterSet);
                 }
-                catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
                 {
-                    if (ExceptionHandling.NotExpectedReflectionException(e))
-                    {
-                        throw;
-                    }
-
                     // Reflection related exception
                     _taskLoggingContext.LogError(new BuildEventFileInfo(_taskLocation), "TaskParametersError", _taskName, e.Message);
 
@@ -489,14 +485,8 @@ bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation
                     e.InnerException?.Message
                 );
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
             {
-                // Catching Exception, but rethrowing unless it's a well-known exception.
-                if (ExceptionHandling.NotExpectedReflectionException(e))
-                {
-                    throw;
-                }
-
                 ProjectErrorUtilities.ThrowInvalidProject
                 (
                     parameterLocation,
@@ -640,36 +630,24 @@ private void Cancel()
                 {
                     cancellableTask.Cancel();
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     try
                     {
                         _taskLoggingContext.LogFatalTaskError(e, new BuildEventFileInfo(_taskLocation), ((ProjectTaskInstance)_taskLoggingContext.Task).Name);
                     }
-                    catch (InternalErrorException)
+
+                    // If this fails it could be due to the task logging context no longer being valid due to a race condition where the task completes while we
+                    // are in this method.  In that case we simply ignore the exception and carry on since we can't log anything anyhow.
+                    catch (InternalErrorException) when (!_taskLoggingContext.IsValid)
                     {
-                        // If this fails it could be due to the task logging context no longer being valid due to a race condition where the task completes while we
-                        // are in this method.  In that case we simply ignore the exception and carry on since we can't log anything anyhow.
-                        if (_taskLoggingContext.IsValid)
-                        {
-                            throw;
-                        }
                     }
                 }
             }
 
             // Let the task finish now.  If cancellation worked, hopefully it finishes sooner than it would have otherwise.
             // If the task builder crashed, this could have already been disposed
-#if FEATURE_HANDLE_SAFEWAITHANDLE
             if (!_taskExecutionIdle.SafeWaitHandle.IsClosed)
-#else
-            if (!_taskExecutionIdle.GetSafeWaitHandle().IsClosed)
-#endif
             {
                 // Kick off a task to log the message so that we don't block the calling thread.
                 Task.Run(async delegate
@@ -996,13 +974,8 @@ private ITask InstantiateTask(IDictionary<string, string> taskIdentityParameters
                     Environment.NewLine + e.InnerException
                 );
             }
-            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 // Reflection related exception
                 _taskLoggingContext.LogError
                 (
@@ -1201,7 +1174,7 @@ out bool taskParameterSet
                 else
                 {
                     // Expand out all the metadata, properties, and item vectors in the string.
-                    string expandedParameterValue = _batchBucket.Expander.ExpandIntoStringAndUnescape(parameterValue, ExpanderOptions.ExpandAll, parameterLocation);
+                    string expandedParameterValue = _batchBucket.Expander.ExpandIntoStringAndUnescape(parameterValue, ExpanderOptions.ExpandAll, parameterLocation, _targetLoggingContext);
 
                     if (expandedParameterValue.Length == 0)
                     {
@@ -1369,17 +1342,6 @@ object parameterValue
                 _taskFactoryWrapper.SetPropertyValue(TaskInstance, parameter, parameterValue);
                 success = true;
             }
-            catch (LoggerException)
-            {
-                // if a logger has failed, abort immediately
-                // Polite logger failure
-                throw;
-            }
-            catch (InternalLoggerException)
-            {
-                // Logger threw arbitrary exception
-                throw;
-            }
             catch (TargetInvocationException e)
             {
                 // handle any exception thrown by the task's setter itself
@@ -1395,14 +1357,10 @@ object parameterValue
                     new BuildEventFileInfo(_taskLocation),
                     _taskName);
             }
-            catch (Exception e)
+            // If a logger has failed, abort immediately. This is the polite LoggerException.
+            // InternalLoggerException is an arbitrary logger exception.
+            catch (Exception e) when (e is not LoggerException && e is not InternalLoggerException && !ExceptionHandling.NotExpectedReflectionException(e))
             {
-                // Catching Exception, but rethrowing unless it's a well-known exception.
-                if (ExceptionHandling.NotExpectedReflectionException(e))
-                {
-                    throw;
-                }
-
                 _taskLoggingContext.LogFatalTaskError
                 (
                     e,
@@ -1614,13 +1572,8 @@ private IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute()
             {
                 requiredParameters = _taskFactoryWrapper.GetNamesOfPropertiesWithRequiredAttribute;
             }
-            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
             {
-                if (ExceptionHandling.NotExpectedReflectionException(e))
-                {
-                    throw;
-                }
-
                 // Reflection related exception
                 _targetLoggingContext.LogError(new BuildEventFileInfo(_taskLocation), "AttributeTypeLoadError", _taskName, e.Message);
 
@@ -1640,14 +1593,10 @@ private void DisplayCancelWaitMessage()
             {
                 _taskLoggingContext.LogWarningFromText(null, warningCode, helpKeyword, new BuildEventFileInfo(_taskLocation), message);
             }
-            catch (InternalErrorException) // BUGBUG, should never catch this
+            catch (InternalErrorException) when (!_taskLoggingContext.IsValid)
             {
                 // We can get an exception from this when we encounter a race between a task finishing and a cancel occurring.  In this situation
                 // if the task logging context is no longer valid, we choose to eat the exception because we can't log the message anyway.
-                if (_taskLoggingContext.IsValid)
-                {
-                    throw;
-                }
             }
         }
     }
diff --git a/src/Build/Collections/ArrayDictionary.cs b/src/Build/Collections/ArrayDictionary.cs
index 01e883f6058..8eea6dead68 100644
--- a/src/Build/Collections/ArrayDictionary.cs
+++ b/src/Build/Collections/ArrayDictionary.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -262,4 +264,4 @@ public void Reset()
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Collections/ConcurrentQueueExtensions.cs b/src/Build/Collections/ConcurrentQueueExtensions.cs
index cf9d278a48f..6160e4605a9 100644
--- a/src/Build/Collections/ConcurrentQueueExtensions.cs
+++ b/src/Build/Collections/ConcurrentQueueExtensions.cs
@@ -4,6 +4,8 @@
 using System.Collections.Concurrent;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/ConcurrentStackExtensions.cs b/src/Build/Collections/ConcurrentStackExtensions.cs
index 2e1fa1d97f3..e4a552676d9 100644
--- a/src/Build/Collections/ConcurrentStackExtensions.cs
+++ b/src/Build/Collections/ConcurrentStackExtensions.cs
@@ -4,6 +4,8 @@
 using System.Collections.Concurrent;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/ConvertingEnumerable.cs b/src/Build/Collections/ConvertingEnumerable.cs
index 0c994599c42..d7d8980bb20 100644
--- a/src/Build/Collections/ConvertingEnumerable.cs
+++ b/src/Build/Collections/ConvertingEnumerable.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/CopyOnReadEnumerable.cs b/src/Build/Collections/CopyOnReadEnumerable.cs
index 16bde74dd11..437d417df30 100644
--- a/src/Build/Collections/CopyOnReadEnumerable.cs
+++ b/src/Build/Collections/CopyOnReadEnumerable.cs
@@ -1,45 +1,55 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
-    /// A class which implements IEnumerable by creating an optionally-deep copy of the backing collection.
+    /// A class which implements IEnumerable by creating a copy of the backing collection.
     /// </summary>
     /// <remarks>
-    /// If the type contained in the collection implements IDeepCloneable then the copies will be deep clones instead
-    /// of mere reference copies.
     /// <see cref="GetEnumerator()"/> is thread safe for concurrent access.
     /// </remarks>
-    /// <typeparam name="T">The type contained in the backing collection.</typeparam>
-    internal class CopyOnReadEnumerable<T> : IEnumerable<T>
+    /// <typeparam name="TSource">The type contained in the backing collection.</typeparam>
+    /// <typeparam name="TResult">The type of items being enumerated.</typeparam>
+    internal class CopyOnReadEnumerable<TSource, TResult> : IEnumerable<TResult>
     {
         /// <summary>
         /// The backing collection.
         /// </summary>
-        private readonly IEnumerable<T> _backingEnumerable;
+        private readonly IEnumerable<TSource> _backingEnumerable;
 
         /// <summary>
         /// The object used to synchronize access for copying.
         /// </summary>
         private readonly object _syncRoot;
 
+        /// <summary>
+        /// The function to translate items in the backing collection to the resulting type.
+        /// </summary>
+        private readonly Func<TSource, TResult> _selector;
+
         /// <summary>
         /// Constructor.
         /// </summary>
         /// <param name="backingEnumerable">The collection which serves as a source for enumeration.</param>
         /// <param name="syncRoot">The object used to synchronize access for copying.</param>
-        public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)
+        /// <param name="selector">function to translate items in the backing collection to the resulting type.</param>
+        public CopyOnReadEnumerable(IEnumerable<TSource> backingEnumerable, object syncRoot, Func<TSource, TResult> selector)
         {
             ErrorUtilities.VerifyThrowArgumentNull(backingEnumerable, nameof(backingEnumerable));
             ErrorUtilities.VerifyThrowArgumentNull(syncRoot, nameof(syncRoot));
 
             _backingEnumerable = backingEnumerable;
             _syncRoot = syncRoot;
+            _selector = selector;
         }
 
         #region IEnumerable<T> Members
@@ -48,37 +58,28 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)
         /// Returns an enumerator over the collection.
         /// </summary>
         /// <returns>The enumerator.</returns>
-        public IEnumerator<T> GetEnumerator()
+        public IEnumerator<TResult> GetEnumerator()
         {
-            List<T> list;
+            List<TResult> list;
+
+#if NETCOREAPP
+            if (_backingEnumerable.TryGetNonEnumeratedCount(out int count))
+            {
+#else
             if (_backingEnumerable is ICollection backingCollection)
             {
-                list = new List<T>(backingCollection.Count);
+                int count = backingCollection.Count;
+#endif
+                list = new List<TResult>(count);
             }
             else
             {
-                list = new List<T>();
+                list = new List<TResult>();
             }
 
-            bool isCloneable = false;
-            bool checkForCloneable = true;
             lock (_syncRoot)
             {
-                foreach (T item in _backingEnumerable)
-                {
-                    if (checkForCloneable)
-                    {
-                        if (item is IDeepCloneable<T>)
-                        {
-                            isCloneable = true;
-                        }
-
-                        checkForCloneable = false;
-                    }
-
-                    T copiedItem = isCloneable ? (item as IDeepCloneable<T>).DeepClone() : item;
-                    list.Add(copiedItem);
-                }
+                list.AddRange(_backingEnumerable.Select(_selector));
             }
 
             return list.GetEnumerator();
@@ -94,7 +95,7 @@ public IEnumerator<T> GetEnumerator()
         /// <returns>The enumerator.</returns>
         IEnumerator IEnumerable.GetEnumerator()
         {
-            return ((IEnumerable<T>)this).GetEnumerator();
+            return ((IEnumerable<TResult>)this).GetEnumerator();
         }
 
         #endregion
diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index 59bb01163fe..5454b4ae4dc 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/HashTableUtility.cs b/src/Build/Collections/HashTableUtility.cs
index 7807b336c45..74dfee37ef8 100644
--- a/src/Build/Collections/HashTableUtility.cs
+++ b/src/Build/Collections/HashTableUtility.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/IDeepCloneable.cs b/src/Build/Collections/IDeepCloneable.cs
deleted file mode 100644
index 7842e447788..00000000000
--- a/src/Build/Collections/IDeepCloneable.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-namespace Microsoft.Build.Collections
-{
-    /// <summary>
-    /// An interface representing an item which can clone itself.
-    /// </summary>
-    /// <typeparam name="T">The type returned by the clone operation.</typeparam>
-    internal interface IDeepCloneable<out T>
-    {
-        /// <summary>
-        /// Creates a clone of the item where no data references are shared.  Changes made to the clone
-        /// do not affect the original item.
-        /// </summary>
-        /// <returns>The cloned item.</returns>
-        T DeepClone();
-    }
-}
diff --git a/src/Build/Collections/IImmutable.cs b/src/Build/Collections/IImmutable.cs
index b499ca29f90..012cfaf1948 100644
--- a/src/Build/Collections/IImmutable.cs
+++ b/src/Build/Collections/IImmutable.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/IValued.cs b/src/Build/Collections/IValued.cs
index 9e1ee5a5740..966d5497d31 100644
--- a/src/Build/Collections/IValued.cs
+++ b/src/Build/Collections/IValued.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/ItemDictionary.cs b/src/Build/Collections/ItemDictionary.cs
index b0e1ab517ef..6f4bd864bda 100644
--- a/src/Build/Collections/ItemDictionary.cs
+++ b/src/Build/Collections/ItemDictionary.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -146,9 +148,9 @@ public void Clear()
         /// <summary>
         /// Returns an enumerable which copies the underlying data on read.
         /// </summary>
-        public IEnumerable<T> GetCopyOnReadEnumerable()
+        public IEnumerable<TResult> GetCopyOnReadEnumerable<TResult>(Func<T, TResult> selector)
         {
-            return new CopyOnReadEnumerable<T>(this, _itemLists);
+            return new CopyOnReadEnumerable<T, TResult>(this, _itemLists, selector);
         }
 
         /// <summary>
@@ -383,7 +385,7 @@ internal bool HasEmptyMarker(string itemType)
         /// All items of a type are returned consecutively in their correct order.
         /// However the order in which item types are returned is not defined.
         /// </summary>
-        private sealed class Enumerator : IEnumerator<T>, IDisposable
+        private sealed class Enumerator : IEnumerator<T>
         {
             /// <summary>
             /// Enumerator over lists
@@ -405,14 +407,6 @@ internal Enumerator(IEnumerable<ICollection<T>> listEnumerable)
                 _itemEnumerator = GetNextItemEnumerator();
             }
 
-            /// <summary>
-            /// Finalizer
-            /// </summary>
-            ~Enumerator()
-            {
-                Dispose(false);
-            }
-
             /// <summary>
             /// Get the current item
             /// </summary>
@@ -464,28 +458,16 @@ public void Reset()
             /// </summary>
             public void Dispose()
             {
-                Dispose(true);
-                GC.SuppressFinalize(this);
-            }
-
-            /// <summary>
-            /// The real disposer.
-            /// </summary>
-            private void Dispose(bool disposing)
-            {
-                if (disposing)
+                if (_listEnumerator != null)
                 {
-                    if (_listEnumerator != null)
+                    if (_itemEnumerator != null)
                     {
-                        if (_itemEnumerator != null)
-                        {
-                            _itemEnumerator.Dispose();
-                            _itemEnumerator = null;
-                        }
-
-                        _listEnumerator.Dispose();
-                        _listEnumerator = null;
+                        _itemEnumerator.Dispose();
+                        _itemEnumerator = null;
                     }
+
+                    _listEnumerator.Dispose();
+                    _listEnumerator = null;
                 }
             }
 
diff --git a/src/Build/Collections/LookasideStringInterner.cs b/src/Build/Collections/LookasideStringInterner.cs
index 01f8a0928ab..c0f5e1d3142 100644
--- a/src/Build/Collections/LookasideStringInterner.cs
+++ b/src/Build/Collections/LookasideStringInterner.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/MultiDictionary.cs b/src/Build/Collections/MultiDictionary.cs
index 468fd98a4f6..1f34c6009bb 100644
--- a/src/Build/Collections/MultiDictionary.cs
+++ b/src/Build/Collections/MultiDictionary.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index e1929f7ca58..875be364ea0 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Evaluation;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -203,12 +205,11 @@ internal T this[string name]
         }
 
         /// <summary>
-        /// Returns an enumerable which clones the properties 
+        /// Returns an enumerable which copies the underlying data on read.
         /// </summary>
-        /// <returns>Returns a cloning enumerable.</returns>
-        public IEnumerable<T> GetCopyOnReadEnumerable()
+        public IEnumerable<TResult> GetCopyOnReadEnumerable<TResult>(Func<T, TResult> selector)
         {
-            return new CopyOnReadEnumerable<T>(this, _properties);
+            return new CopyOnReadEnumerable<T, TResult>(this, _properties, selector);
         }
 
         /// <summary>
diff --git a/src/Build/Collections/ReadOnlyConvertingDictionary.cs b/src/Build/Collections/ReadOnlyConvertingDictionary.cs
index 33bfb114787..d14ed476c1c 100644
--- a/src/Build/Collections/ReadOnlyConvertingDictionary.cs
+++ b/src/Build/Collections/ReadOnlyConvertingDictionary.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/BitHelper.cs b/src/Build/Collections/RetrievableEntryHashSet/BitHelper.cs
index bcef8af6fa0..8099a4d75ac 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/BitHelper.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/BitHelper.cs
@@ -3,6 +3,8 @@
 
 using System.Security;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs b/src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs
index 5db12d82c2e..735c08b2a37 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs
@@ -9,6 +9,8 @@
 #endif
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index 001c7b87f69..e5c1677ee6a 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -39,11 +39,13 @@ nor unit test it directly.
     ==================================================================================================================
 */
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
     /// Implementation notes:
-    /// This uses an array-based implementation similar to <see cref="T:Dictionary{T}" />, using a buckets array
+    /// This uses an array-based implementation similar to <see cref="Dictionary{TKey, TValue}" />, using a buckets array
     /// to map hash values to the Slots array. Items in the Slots array that hash to the same value
     /// are chained together through the "next" indices. 
     /// 
@@ -91,8 +93,10 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
     {
         // store lower 31 bits of hash code
         private const int Lower31BitMask = 0x7FFFFFFF;
+#if NEVER
         // cutoff point, above which we won't do stackallocs. This corresponds to 100 integers.
         private const int StackAllocThreshold = 100;
+#endif
         // when constructing a hashset from an existing collection, it may contain duplicates, 
         // so this is used as the max acceptable excess ratio of capacity to count. Note that
         // this is only used on the ctor and not to automatically shrink if the hashset has, e.g,
@@ -119,7 +123,7 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
         // temporary variable needed during deserialization
         private SerializationInfo _siInfo;
 
-        #region Constructors
+#region Constructors
 
         public RetrievableEntryHashSet(IEqualityComparer<string> comparer)
         {
@@ -202,7 +206,7 @@ protected RetrievableEntryHashSet(SerializationInfo info, StreamingContext conte
             _siInfo = info;
         }
 
-        #endregion
+#endregion
 
         // Convenience to minimise change to callers used to dictionaries
         public ICollection<string> Keys
@@ -228,7 +232,7 @@ public ICollection<T> Values
             get { return this; }
         }
 
-        #region ICollection<T> methods
+#region ICollection<T> methods
 
         // Convenience to minimise change to callers used to dictionaries
         internal T this[string name]
@@ -479,9 +483,9 @@ internal void MakeReadOnly()
             _readOnly = true;
         }
 
-        #endregion
+#endregion
 
-        #region IEnumerable methods
+#region IEnumerable methods
 
         public Enumerator GetEnumerator()
         {
@@ -506,9 +510,9 @@ IEnumerator IEnumerable.GetEnumerator()
             return new Enumerator(this);
         }
 
-        #endregion
+#endregion
 
-        #region ISerializable methods
+#region ISerializable methods
 
         // [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
         [SecurityCritical]
@@ -531,9 +535,9 @@ public virtual void GetObjectData(SerializationInfo info, StreamingContext conte
             }
         }
 
-        #endregion
+#endregion
 
-        #region IDeserializationCallback methods
+#region IDeserializationCallback methods
 
         public virtual void OnDeserialization(Object sender)
         {
@@ -578,9 +582,9 @@ public virtual void OnDeserialization(Object sender)
             _siInfo = null;
         }
 
-        #endregion
+#endregion
 
-        #region HashSet methods
+#region HashSet methods
 
         /// <summary>
         /// Add item to this HashSet. 
@@ -628,7 +632,7 @@ public void UnionWith(IEnumerable<T> other)
             }
         }
 
-#if NEVER 
+#if NEVER
                                                                                                                                                         /// <summary>
                                                                                                                                                         /// Takes the intersection of this set with other. Modifies this set.
                                                                                                                                                         /// 
@@ -1150,9 +1154,9 @@ public static IEqualityComparer<RetrievableEntryHashSet<T>> CreateSetComparer()
 #endif
 #endif
 
-        #endregion
+#endregion
 
-        #region Helper methods
+#region Helper methods
 
         /// <summary>
         /// Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
@@ -1721,7 +1725,7 @@ private int InternalGetHashCode(string item)
             return _comparer.GetHashCode(item) & Lower31BitMask;
         }
 
-        #endregion
+#endregion
 
         // used for set checking operations (using enumerables) that rely on counting
         internal struct ElementCount
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSetDebugView.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSetDebugView.cs
index 45e69ec57ac..b4cd58a485b 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSetDebugView.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSetDebugView.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/Originals/BitHelper.cs b/src/Build/Collections/RetrievableEntryHashSet/Originals/BitHelper.cs
index de0a9bedfd0..bfd9c45d47c 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/Originals/BitHelper.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/Originals/BitHelper.cs
@@ -2,6 +2,8 @@
 using System.Collections;
 using System.Text;
 
+#nullable disable
+
 namespace System.Collections.Generic {
 
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashHelpers.cs b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashHelpers.cs
index 1b1d758aa18..b637621ae4a 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashHelpers.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashHelpers.cs
@@ -7,6 +7,8 @@
 #endif
 using System.Text;
 
+#nullable disable
+
 namespace System.Collections.Generic {
 
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSet.cs
index 05307d55329..41c90e2f090 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSet.cs
@@ -8,6 +8,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Security;
 
+#nullable disable
+
 namespace System.Collections.Generic {
 
     /// <summary>
diff --git a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSetDebugView.cs b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSetDebugView.cs
index e409ed204fe..5fd5651ac32 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSetDebugView.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/Originals/HashSetDebugView.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics;
 using System.Text;
 
+#nullable disable
+
 namespace System.Collections.Generic {
 
     /// <summary>
diff --git a/src/Build/Collections/WeakValueDictionary.cs b/src/Build/Collections/WeakValueDictionary.cs
index 6193363093d..5b2f1e62e56 100644
--- a/src/Build/Collections/WeakValueDictionary.cs
+++ b/src/Build/Collections/WeakValueDictionary.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Build/Construction/ImplicitImportLocation.cs b/src/Build/Construction/ImplicitImportLocation.cs
index 8f6ad0af683..c6bf445e366 100644
--- a/src/Build/Construction/ImplicitImportLocation.cs
+++ b/src/Build/Construction/ImplicitImportLocation.cs
@@ -1,6 +1,8 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -21,4 +23,4 @@ public enum ImplicitImportLocation
         /// </summary>
         Bottom
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Construction/ProjectChooseElement.cs b/src/Build/Construction/ProjectChooseElement.cs
index def7d686cff..e89bfe3aa96 100644
--- a/src/Build/Construction/ProjectChooseElement.cs
+++ b/src/Build/Construction/ProjectChooseElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 8327feda09e..0b8916d5f2b 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 3c4c0d6f269..3de6bee0c32 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -29,7 +31,7 @@ public abstract class ProjectElementContainer : ProjectElement
         /// External projects support
         /// </summary>
         internal ProjectElementContainer(ProjectElementContainerLink link)
-            :base(link)
+            : base(link)
         {
         }
 
@@ -95,7 +97,7 @@ public ICollection<ProjectElement> ChildrenReversed
         /// <summary>
         /// Number of children of any kind
         /// </summary>
-        public int Count { get => Link != null ? ContainerLink.Count : _count ; private set => _count = value; }
+        public int Count { get => Link != null ? ContainerLink.Count : _count; private set => _count = value; }
 
         /// <summary>
         /// First child, if any, otherwise null.
@@ -316,7 +318,7 @@ public void RemoveChild(ProjectElement child)
         /// </summary>
         /// <remarks>
         /// It is safe to modify the children in this way
-        /// during enumeration. See <see cref="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
+        /// during enumeration. See <see cref="ProjectElementContainer.RemoveChild(ProjectElement)"/>.
         /// </remarks>
         public void RemoveAllChildren()
         {
@@ -421,7 +423,7 @@ private void SetElementAsAttributeValue(ProjectElement child)
         {
             ErrorUtilities.VerifyThrow(Link == null, "External project");
 
-            //  Assumes that child.ExpressedAsAttribute is true
+            // Assumes that child.ExpressedAsAttribute is true
             Debug.Assert(child.ExpressedAsAttribute, nameof(SetElementAsAttributeValue) + " method requires that " +
                 nameof(child.ExpressedAsAttribute) + " property of child is true");
 
@@ -462,7 +464,7 @@ internal void AddToXml(ProjectElement child)
                 // todo children represented as attributes need to be placed in order too
                 //  Assume that the name of the child has already been validated to conform with rules in XmlUtilities.VerifyThrowArgumentValidElementName
 
-                //  Make sure we're not trying to add multiple attributes with the same name
+                // Make sure we're not trying to add multiple attributes with the same name
                 ProjectErrorUtilities.VerifyThrowInvalidProject(!XmlElement.HasAttribute(child.XmlElement.Name),
                     XmlElement.Location, "InvalidChildElementDueToDuplication", child.XmlElement.Name, ElementName);
 
@@ -470,7 +472,7 @@ internal void AddToXml(ProjectElement child)
             }
             else
             {
-                //  We want to add the XmlElement to the same position in the child list as the corresponding ProjectElement.
+                // We want to add the XmlElement to the same position in the child list as the corresponding ProjectElement.
                 //  Depending on whether the child ProjectElement has a PreviousSibling or a NextSibling, we may need to
                 //  use the InsertAfter, InsertBefore, or AppendChild methods to add it in the right place.
                 //
@@ -485,11 +487,11 @@ internal void AddToXml(ProjectElement child)
 
                 if (TrySearchLeftSiblings(child.PreviousSibling, SiblingIsExplicitElement, out ProjectElement referenceSibling))
                 {
-                    //  Add after previous sibling
+                    // Add after previous sibling
                     XmlElement.InsertAfter(child.XmlElement, referenceSibling.XmlElement);
                     if (XmlDocument.PreserveWhitespace)
                     {
-                        //  Try to match the surrounding formatting by checking the whitespace that precedes the node we inserted
+                        // Try to match the surrounding formatting by checking the whitespace that precedes the node we inserted
                         //  after, and inserting the same whitespace between the previous node and the one we added
                         if (referenceSibling.XmlElement.PreviousSibling?.NodeType == XmlNodeType.Whitespace)
                         {
@@ -500,12 +502,12 @@ internal void AddToXml(ProjectElement child)
                 }
                 else if (TrySearchRightSiblings(child.NextSibling, SiblingIsExplicitElement, out referenceSibling))
                 {
-                    //  Add as first child
+                    // Add as first child
                     XmlElement.InsertBefore(child.XmlElement, referenceSibling.XmlElement);
 
                     if (XmlDocument.PreserveWhitespace)
                     {
-                        //  Try to match the surrounding formatting by checking the whitespace that precedes where we inserted
+                        // Try to match the surrounding formatting by checking the whitespace that precedes where we inserted
                         //  the new node, and inserting the same whitespace between the node we added and the one after it.
                         if (child.XmlElement.PreviousSibling?.NodeType == XmlNodeType.Whitespace)
                         {
@@ -516,12 +518,12 @@ internal void AddToXml(ProjectElement child)
                 }
                 else
                 {
-                    //  Add as only child
+                    // Add as only child
                     XmlElement.AppendChild(child.XmlElement);
 
                     if (XmlDocument.PreserveWhitespace)
                     {
-                        //  If the empty parent has whitespace in it, delete it
+                        // If the empty parent has whitespace in it, delete it
                         if (XmlElement.FirstChild.NodeType == XmlNodeType.Whitespace)
                         {
                             XmlElement.RemoveChild(XmlElement.FirstChild);
@@ -575,14 +577,14 @@ internal void RemoveFromXml(ProjectElement child)
 
                 if (XmlDocument.PreserveWhitespace)
                 {
-                    //  If we are trying to preserve formatting of the file, then also remove any whitespace
+                    // If we are trying to preserve formatting of the file, then also remove any whitespace
                     //  that came before the node we removed.
                     if (previousSibling?.NodeType == XmlNodeType.Whitespace)
                     {
                         XmlElement.RemoveChild(previousSibling);
                     }
 
-                    //  If we removed the last non-whitespace child node, set IsEmpty to true so that we get:
+                    // If we removed the last non-whitespace child node, set IsEmpty to true so that we get:
                     //      <ItemName />
                     //  instead of:
                     //      <ItemName>
diff --git a/src/Build/Construction/ProjectExtensionsElement.cs b/src/Build/Construction/ProjectExtensionsElement.cs
index 26bb1f9d0f0..ae667ee6675 100644
--- a/src/Build/Construction/ProjectExtensionsElement.cs
+++ b/src/Build/Construction/ProjectExtensionsElement.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectImportElement.cs b/src/Build/Construction/ProjectImportElement.cs
index 0260a1eae46..36ba393d7be 100644
--- a/src/Build/Construction/ProjectImportElement.cs
+++ b/src/Build/Construction/ProjectImportElement.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectImportGroupElement.cs b/src/Build/Construction/ProjectImportGroupElement.cs
index 0a726c4f0e1..62337399feb 100644
--- a/src/Build/Construction/ProjectImportGroupElement.cs
+++ b/src/Build/Construction/ProjectImportGroupElement.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectItemDefinitionElement.cs b/src/Build/Construction/ProjectItemDefinitionElement.cs
index 2f93312bc32..1d9eacd9309 100644
--- a/src/Build/Construction/ProjectItemDefinitionElement.cs
+++ b/src/Build/Construction/ProjectItemDefinitionElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
index 15bca1819c1..29627027867 100644
--- a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
+++ b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectItemElement.cs b/src/Build/Construction/ProjectItemElement.cs
index dd7f7f6ea6c..3bf4639787c 100644
--- a/src/Build/Construction/ProjectItemElement.cs
+++ b/src/Build/Construction/ProjectItemElement.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectItemGroupElement.cs b/src/Build/Construction/ProjectItemGroupElement.cs
index 6af68278575..58418960335 100644
--- a/src/Build/Construction/ProjectItemGroupElement.cs
+++ b/src/Build/Construction/ProjectItemGroupElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectMetadataElement.cs b/src/Build/Construction/ProjectMetadataElement.cs
index 9657cc1a647..2acd6b83299 100644
--- a/src/Build/Construction/ProjectMetadataElement.cs
+++ b/src/Build/Construction/ProjectMetadataElement.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -49,7 +51,7 @@ public string Name
             set => ChangeName(value);
         }
 
-        //  Add a new property with the same name here because this attribute should be public for ProjectMetadataElement,
+        // Add a new property with the same name here because this attribute should be public for ProjectMetadataElement,
         //  but internal for ProjectElement, because we don't want it to be settable for arbitrary elements.
         /// <summary>
         /// Gets or sets whether this piece of metadata is expressed as an attribute.
diff --git a/src/Build/Construction/ProjectOnErrorElement.cs b/src/Build/Construction/ProjectOnErrorElement.cs
index 0dbced91dab..a1564143564 100644
--- a/src/Build/Construction/ProjectOnErrorElement.cs
+++ b/src/Build/Construction/ProjectOnErrorElement.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectOtherwiseElement.cs b/src/Build/Construction/ProjectOtherwiseElement.cs
index ba469217ab6..f41d862b1fe 100644
--- a/src/Build/Construction/ProjectOtherwiseElement.cs
+++ b/src/Build/Construction/ProjectOtherwiseElement.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectOutputElement.cs b/src/Build/Construction/ProjectOutputElement.cs
index 0df9620ec98..92c23bd1274 100644
--- a/src/Build/Construction/ProjectOutputElement.cs
+++ b/src/Build/Construction/ProjectOutputElement.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectPropertyElement.cs b/src/Build/Construction/ProjectPropertyElement.cs
index 43414b08260..1cac5075d00 100644
--- a/src/Build/Construction/ProjectPropertyElement.cs
+++ b/src/Build/Construction/ProjectPropertyElement.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectPropertyGroupElement.cs b/src/Build/Construction/ProjectPropertyGroupElement.cs
index 0ed94cb9a27..e211c892f6e 100644
--- a/src/Build/Construction/ProjectPropertyGroupElement.cs
+++ b/src/Build/Construction/ProjectPropertyGroupElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index cb08aee7b3e..3463e872980 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -23,6 +23,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -43,7 +45,7 @@ namespace Microsoft.Build.Construction
     [DebuggerDisplay("{FullPath} #Children={Count} DefaultTargets={DefaultTargets} ToolsVersion={ToolsVersion} InitialTargets={InitialTargets} ExplicitlyLoaded={IsExplicitlyLoaded}")]
     public class ProjectRootElement : ProjectElementContainer
     {
-        /// Constants for default (empty) project file.
+        // Constants for default (empty) project file.
         private const string EmptyProjectFileContent = "{0}<Project{1}{2}>\r\n</Project>";
         private const string EmptyProjectFileXmlDeclaration = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n";
         private const string EmptyProjectFileToolsVersion = " ToolsVersion=\"" + MSBuildConstants.CurrentToolsVersion + "\"";
@@ -250,7 +252,7 @@ private ProjectRootElement(XmlDocumentWithLocation document, ProjectRootElementC
 
         /// <summary>
         /// Initialize a ProjectRootElement instance from an existing document.
-        /// Helper constructor for the <see cref="ReloadFrom(string,bool,System.Nullable{bool})"/>> mehtod which needs to check if the document parses
+        /// Helper constructor for the <see cref="ReloadFrom(string,bool,bool?)"/>> mehtod which needs to check if the document parses
         /// </summary>
         /// <remarks>
         /// Do not make public: we do not wish to expose particular XML API's.
@@ -2082,13 +2084,8 @@ private XmlDocumentWithLocation LoadDocument(string fullPath, bool preserveForma
                     StreamTimeUtc = null;
                 }
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.NotExpectedIoOrXmlException(ex))
             {
-                if (ExceptionHandling.NotExpectedIoOrXmlException(ex))
-                {
-                    throw;
-                }
-
                 BuildEventFileInfo fileInfo = ex is XmlException xmlException
                     ? new BuildEventFileInfo(fullPath, xmlException)
                     : new BuildEventFileInfo(fullPath);
diff --git a/src/Build/Construction/ProjectSdkElement.cs b/src/Build/Construction/ProjectSdkElement.cs
index e95d8ea5b12..751a1c80a39 100644
--- a/src/Build/Construction/ProjectSdkElement.cs
+++ b/src/Build/Construction/ProjectSdkElement.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectTargetElement.cs b/src/Build/Construction/ProjectTargetElement.cs
index 3b167544c55..5865039ceff 100644
--- a/src/Build/Construction/ProjectTargetElement.cs
+++ b/src/Build/Construction/ProjectTargetElement.cs
@@ -12,6 +12,8 @@
 
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectTaskElement.cs b/src/Build/Construction/ProjectTaskElement.cs
index 40fa75fb6d2..f599e4d6f71 100644
--- a/src/Build/Construction/ProjectTaskElement.cs
+++ b/src/Build/Construction/ProjectTaskElement.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectUsingTaskBodyElement.cs b/src/Build/Construction/ProjectUsingTaskBodyElement.cs
index 82da24ff8b6..02f37cebceb 100644
--- a/src/Build/Construction/ProjectUsingTaskBodyElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskBodyElement.cs
@@ -7,6 +7,8 @@
 
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectUsingTaskElement.cs b/src/Build/Construction/ProjectUsingTaskElement.cs
index 4d8b2358194..22a741e4370 100644
--- a/src/Build/Construction/ProjectUsingTaskElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskElement.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -127,6 +129,19 @@ public string Architecture
             }
         }
 
+        /// <summary>
+        /// Gets and sets the value of the Architecture attribute.
+        /// </summary>
+        public string Override
+        {
+            get => GetAttributeValue(XMakeAttributes.overrideUsingTask);
+
+            set
+            {
+                SetOrRemoveAttribute(XMakeAttributes.overrideUsingTask, value, "Set usingtask Override {0}", value);
+            }
+        }
+
         /// <summary>
         /// Get any contained TaskElement.
         /// </summary>
@@ -181,6 +196,11 @@ public UsingTaskParameterGroupElement ParameterGroup
         /// </summary>
         public ElementLocation TaskFactoryLocation => GetAttributeLocation(XMakeAttributes.taskFactory);
 
+        /// <summary>
+        /// Location of the Override attribute, if any
+        /// </summary>
+        public ElementLocation OverrideLocation => GetAttributeLocation(XMakeAttributes.overrideUsingTask);
+
         /// <summary>
         /// Convenience method that picks a location based on a heuristic:
         ///     Adds a new ParameterGroup to the using task to the end of the using task element
diff --git a/src/Build/Construction/ProjectUsingTaskParameterElement.cs b/src/Build/Construction/ProjectUsingTaskParameterElement.cs
index bde3344cdfb..77ff6bc1893 100644
--- a/src/Build/Construction/ProjectUsingTaskParameterElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskParameterElement.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/ProjectWhenElement.cs b/src/Build/Construction/ProjectWhenElement.cs
index 69c31e4655f..105aa19ad69 100644
--- a/src/Build/Construction/ProjectWhenElement.cs
+++ b/src/Build/Construction/ProjectWhenElement.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/Solution/ProjectConfigurationInSolution.cs b/src/Build/Construction/Solution/ProjectConfigurationInSolution.cs
index 0700c134ddb..6f3507e19c3 100644
--- a/src/Build/Construction/Solution/ProjectConfigurationInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectConfigurationInSolution.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index a0ec7d24e57..46581a81688 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -19,6 +19,8 @@
 using System.Collections.ObjectModel;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <remarks>
@@ -45,7 +47,7 @@ public enum SolutionProjectType
         /// <summary>
         /// Web Deployment (.wdproj) projects
         /// </summary>
-        WebDeploymentProject, //  MSBuildFormat, but Whidbey-era ones specify ProjectReferences differently
+        WebDeploymentProject, // MSBuildFormat, but Whidbey-era ones specify ProjectReferences differently
         /// <summary>
         /// Project inside an Enterprise Template project
         /// </summary>
@@ -148,7 +150,11 @@ internal ProjectInSolution(SolutionFile solution)
         /// </summary>
         public string RelativePath
         {
-            get { return _relativePath; }
+            get
+            {
+                return _relativePath;
+            }
+
             internal set
             {
 #if NETFRAMEWORK && !MONO
diff --git a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
index e35d36a9330..7518fc26980 100644
--- a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
+++ b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index e0e9059c984..ce67004e11c 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -22,6 +22,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <remarks>
@@ -497,10 +499,9 @@ internal void ParseSolutionFile()
                 SolutionReader = new StreamReader(fileStream, Encoding.GetEncoding(0)); // HIGHCHAR: If solution files have no byte-order marks, then assume ANSI rather than ASCII.
                 ParseSolution();
             }
-            catch (Exception e)
+            catch (Exception e) when (ExceptionUtilities.IsIoRelatedException(e))
             {
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(!ExceptionUtilities.IsIoRelatedException(e), new BuildEventFileInfo(_solutionFile), "InvalidProjectFile", e.Message);
-                throw;
+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(new BuildEventFileInfo(_solutionFile), "InvalidProjectFile", e.Message);
             }
             finally
             {
@@ -1228,9 +1229,9 @@ string propertyValue
                 }
                 else if (String.Equals(propertyName, "TargetFrameworkMoniker", StringComparison.OrdinalIgnoreCase))
                 {
-                    //Website project need to back support 3.5 msbuild parser for the Blend (it is not move to .Net4.0 yet.)
-                    //However, 3.5 version of Solution parser can't handle a equal sign in the value.  
-                    //The "=" in targetframeworkMoniker was escaped to "%3D" for Orcas
+                    // Website project need to back support 3.5 msbuild parser for the Blend (it is not move to .Net4.0 yet.)
+                    // However, 3.5 version of Solution parser can't handle a equal sign in the value.  
+                    // The "=" in targetframeworkMoniker was escaped to "%3D" for Orcas
                     string targetFrameworkMoniker = TrimQuotes(propertyValue);
                     proj.TargetFrameworkMoniker = Shared.EscapingUtilities.UnescapeAll(targetFrameworkMoniker);
                 }
@@ -1420,7 +1421,7 @@ internal void ParseSolutionConfigurations()
 
                 string fullConfigurationName = configurationNames[0].Trim();
 
-                //Fixing bug 555577: Solution file can have description information, in which case we ignore.
+                // Fixing bug 555577: Solution file can have description information, in which case we ignore.
                 if (String.Equals(fullConfigurationName, "DESCRIPTION", StringComparison.OrdinalIgnoreCase))
                 {
                     continue;
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 43318152844..f29666fd7a3 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -2,7 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+#if FEATURE_ASPNET_COMPILER
 using System.Collections;
+#endif
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Collections.ObjectModel;
@@ -24,12 +26,15 @@
 using Constants = Microsoft.Build.Internal.Constants;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 
+#if FEATURE_ASPNET_COMPILER
 using FrameworkName = System.Runtime.Versioning.FrameworkName;
+#endif
 using Microsoft.Build.Execution;
-using Microsoft.Build.Utilities;
 
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -1777,7 +1782,7 @@ private string ComputeTargetConditionForWebProject(ProjectInSolution project)
                     {
                         condition.Append(" or (");
                         condition.Append(GetConditionStringForConfiguration(solutionConfiguration));
-                        condition.Append(")");
+                        condition.Append(')');
                     }
                 }
                 else if (String.Equals(solutionConfiguration.ConfigurationName, "Release", StringComparison.OrdinalIgnoreCase) ||
@@ -1788,7 +1793,7 @@ private string ComputeTargetConditionForWebProject(ProjectInSolution project)
                     // so these should be available in the solution project
                     condition.Append(" or (");
                     condition.Append(GetConditionStringForConfiguration(solutionConfiguration));
-                    condition.Append(")");
+                    condition.Append(')');
                 }
             }
 
@@ -1974,9 +1979,9 @@ private void AddValidateProjectsTarget(ProjectInstance traversalProject, List<Pr
             }
         }
 
-        ///<summary>
+        /// <summary>
         /// Creates the target used to build all of the references in the traversal project.
-        ///</summary>
+        /// </summary>
         private static void AddTraversalReferencesTarget(ProjectInstance traversalProject, string targetName, string outputItem)
         {
             string outputItemAsItem = null;
@@ -2191,14 +2196,8 @@ private void ScanProjectDependencies(string childProjectToolsVersion, string ful
                             AddDependencyByGuid(project, referencedWebProjectGuid);
                         }
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.IsCriticalException(e)) // We don't want any problems scanning the project file to result in aborting the build.
                     {
-                        // We don't want any problems scanning the project file to result in aborting the build.
-                        if (ExceptionHandling.IsCriticalException(e))
-                        {
-                            throw;
-                        }
-
                         _loggingService.LogWarning
                             (
                             _projectBuildEventContext,
diff --git a/src/Build/Construction/UsingTaskParameterGroupElement.cs b/src/Build/Construction/UsingTaskParameterGroupElement.cs
index a2bfc6c7a66..0f52d672ff0 100644
--- a/src/Build/Construction/UsingTaskParameterGroupElement.cs
+++ b/src/Build/Construction/UsingTaskParameterGroupElement.cs
@@ -11,6 +11,8 @@
 
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Definition/BuiltInMetadata.cs b/src/Build/Definition/BuiltInMetadata.cs
index 6f9a3b9ee82..dd325c8a458 100644
--- a/src/Build/Definition/BuiltInMetadata.cs
+++ b/src/Build/Definition/BuiltInMetadata.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/NewProjectFileOptions.cs b/src/Build/Definition/NewProjectFileOptions.cs
index 4cf0db07107..12e32de1a01 100644
--- a/src/Build/Definition/NewProjectFileOptions.cs
+++ b/src/Build/Definition/NewProjectFileOptions.cs
@@ -1,5 +1,7 @@
 ﻿using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -33,4 +35,4 @@ public enum NewProjectFileOptions
         /// </summary>
         IncludeAllOptions = ~0
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index df1d8ed8eb4..294b523e07e 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -23,20 +23,21 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
 using System.Globalization;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.ObjectModelRemoting;
-using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 using EvaluationItemSpec = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
 using EvaluationItemExpressionFragment = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>.ItemExpressionFragment;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 using Microsoft.Build.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
-    using Utilities = Internal.Utilities;
+    using Utilities = Microsoft.Build.Internal.Utilities;
 
     /// <summary>
     /// Represents an evaluated project with design time semantics.
@@ -470,17 +471,14 @@ private Project(string projectFile, IDictionary<string, string> globalProperties
             {
                 defaultImplementation.Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings, evaluationContext);
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
             {
                 // If possible, clear out the XML we just loaded into the XML cache:
                 // if we had loaded the XML from disk into the cache within this constructor,
                 // and then are are bailing out because there is a typo in the XML such that
                 // evaluation failed, we don't want to leave the bad XML in the cache;
                 // the user wouldn't be able to fix the XML file and try again.
-                if (!ExceptionHandling.IsCriticalException(ex))
-                {
-                    projectCollection.TryUnloadProject(Xml);
-                }
+                projectCollection.TryUnloadProject(Xml);
 
                 throw;
             }
@@ -855,38 +853,48 @@ public static string GetEvaluatedItemIncludeEscaped(ProjectItemDefinition item)
         /// <example>
         ///
         /// <code>
-        ///<P>*.txt</P>
+        /// <![CDATA[
+        /// <P>*.txt</P>
         ///
-        ///<Bar Include="bar"/> (both outside and inside project cone)
-        ///<Zar Include="C:\**\*.foo"/> (both outside and inside project cone)
-        ///<Foo Include="*.a;*.b" Exclude="3.a"/>
-        ///<Foo Remove="2.a" />
-        ///<Foo Include="**\*.b" Exclude="1.b;**\obj\*.b;**\bar\*.b"/>
-        ///<Foo Include="$(P)"/>
-        ///<Foo Include="*.a;@(Bar);3.a"/> (If Bar has globs, they will have been included when querying Bar ProjectItems for globs)
-        ///<Foo Include="*.cs" Exclude="@(Bar)"/>
-        ///</code>
+        /// <Bar Include="bar"/> (both outside and inside project cone)
+        /// <Zar Include="C:\**\*.foo"/> (both outside and inside project cone)
+        /// <Foo Include="*.a;*.b" Exclude="3.a"/>
+        /// <Foo Remove="2.a" />
+        /// <Foo Include="**\*.b" Exclude="1.b;**\obj\*.b;**\bar\*.b"/>
+        /// <Foo Include="$(P)"/>
+        /// <Foo Include="*.a;@(Bar);3.a"/> (If Bar has globs, they will have been included when querying Bar ProjectItems for globs)
+        /// <Foo Include="*.cs" Exclude="@(Bar)"/>
+        /// ]]>
+        /// </code>
         ///
-        ///Example result:
-        ///[
-        ///GlobResult(glob: "C:\**\*.foo", exclude: []),
-        ///GlobResult(glob: ["*.a", "*.b"], exclude=["3.a"], remove=["2.a"]),
-        ///GlobResult(glob: "**\*.b", exclude=["1.b, **\obj\*.b", **\bar\*.b"]),
-        ///GlobResult(glob: "*.txt", exclude=[]),
-        ///GlobResult(glob: "*.a", exclude=[]),
-        ///GlobResult(glob: "*.cs", exclude=["bar"])
-        ///].
+        /// Example result:
+        /// <code>
+        /// <![CDATA[
+        /// [
+        /// GlobResult(glob: "C:\**\*.foo", exclude: []),
+        /// GlobResult(glob: ["*.a", "*.b"], exclude=["3.a"], remove=["2.a"]),
+        /// GlobResult(glob: "**\*.b", exclude=["1.b, **\obj\*.b", **\bar\*.b"]),
+        /// GlobResult(glob: "*.txt", exclude=[]),
+        /// GlobResult(glob: "*.a", exclude=[]),
+        /// GlobResult(glob: "*.cs", exclude=["bar"])
+        /// ].
+        /// ]]>
+        /// </code>
         /// </example>
         /// <remarks>
+        /// <para>
         /// <see cref="GlobResult.MsBuildGlob"/> is a <see cref="IMSBuildGlob"/> that combines all globs in the include element and ignores
         /// all the fragments in the exclude attribute and all the fragments in all Remove elements that apply to the include element.
+        /// </para>
         ///
         /// Users can construct a composite glob that incorporates all the globs in the Project:
         /// <code>
+        /// <![CDATA[
         /// var uberGlob = new CompositeGlob(project.GetAllGlobs().Select(r => r.MSBuildGlob).ToArray());
         /// uberGlob.IsMatch("foo.cs");
+        /// ]]>
         /// </code>
-        ///
+        /// 
         /// </remarks>
         /// <returns>
         /// List of <see cref="GlobResult"/>.
@@ -2916,7 +2924,7 @@ public override bool SetGlobalProperty(string name, string escapedValue)
                     string originalValue = (existing == null) ? String.Empty : ((IProperty)existing).EvaluatedValueEscaped;
 
                     _data.GlobalPropertiesDictionary.Set(ProjectPropertyInstance.Create(name, escapedValue));
-                    _data.Properties.Set(ProjectProperty.Create(Owner, name, escapedValue, true /* is global */, false /* may not be reserved name */));
+                    _data.Properties.Set(ProjectProperty.Create(Owner, name, escapedValue, isGlobalProperty: true, mayBeReserved: false, loggingContext: null));
 
                     ProjectCollection.AfterUpdateLoadedProjectGlobalProperties(Owner);
                     MarkDirty();
@@ -3280,6 +3288,10 @@ public override bool Build(string[] targets, IEnumerable<ILogger> loggers, IEnum
                 if (!IsBuildEnabled)
                 {
                     LoggingService.LogError(s_buildEventContext, new BuildEventFileInfo(FullPath), "SecurityProjectBuildDisabled");
+                    if (LoggingService is LoggingService defaultLoggingService)
+                    {
+                        defaultLoggingService.WaitForLoggingToProcessEvents();
+                    }
                     return false;
                 }
 
@@ -3470,7 +3482,15 @@ public string ExpandItemIncludeBestEffortLeaveEscaped(ProjectItemElement renamed
 
                 var itemFactory = new ProjectItemFactory(Owner, renamedItemElement);
 
-                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(DirectoryPath, renamedItemElement, itemFactory, renamedItemElement.Include, _data.Expander);
+                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(
+                    DirectoryPath,
+                    renamedItemElement,
+                    itemFactory,
+                    renamedItemElement.Include,
+                    _data.Expander,
+                    LoggingService,
+                    FullPath,
+                    s_buildEventContext);
 
                 if (items.Count != 1)
                 {
@@ -3530,7 +3550,15 @@ private List<ProjectItem> AddItemHelper(ProjectItemElement itemElement, string u
             {
                 var itemFactory = new ProjectItemFactory(Owner, itemElement);
 
-                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(DirectoryPath, itemElement, itemFactory, unevaluatedInclude, _data.Expander);
+                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(
+                    DirectoryPath,
+                    itemElement,
+                    itemFactory,
+                    unevaluatedInclude,
+                    _data.Expander,
+                    LoggingService,
+                    FullPath,
+                    s_buildEventContext);
 
                 foreach (ProjectItem item in items)
                 {
@@ -4366,9 +4394,9 @@ public IItemDefinition<ProjectMetadata> GetItemDefinition(string itemType)
             /// <summary>
             /// Sets a property which is not derived from Xml.
             /// </summary>
-            public ProjectProperty SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false)
+            public ProjectProperty SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, BackEnd.Logging.LoggingContext loggingContext = null)
             {
-                ProjectProperty property = ProjectProperty.Create(Project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved);
+                ProjectProperty property = ProjectProperty.Create(Project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext);
                 Properties.Set(property);
 
                 AddToAllEvaluatedPropertiesList(property);
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 8629bd94317..32f9b37fe68 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -19,7 +19,6 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Utilities;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
@@ -27,9 +26,11 @@
 using LoggerMode = Microsoft.Build.BackEnd.Logging.LoggerMode;
 using ObjectModel = System.Collections.ObjectModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
-    using Utilities = Internal.Utilities;
+    using Utilities = Microsoft.Build.Internal.Utilities;
 
     /// <summary>
     /// Flags for controlling the toolset initialization.
@@ -224,6 +225,12 @@ public void Dispose()
         /// </summary>
         private int _maxNodeCount;
 
+        /// <summary>
+        /// LoggingService Logger mode.
+        /// If Asynchronous mode is used
+        /// </summary>
+        private LoggerMode _loggerMode;
+
         /// <summary>
         /// Instantiates a project collection with no global properties or loggers that reads toolset
         /// information from the configuration file and registry.
@@ -301,6 +308,27 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
         /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
         /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
         public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly)
+            : this(globalProperties, loggers, remoteLoggers, toolsetDefinitionLocations, maxNodeCount, onlyLogCriticalEvents, loadProjectsReadOnly, useAsynchronousLogging: false)
+        {
+        }
+
+
+        /// <summary>
+        /// Instantiates a project collection with specified global properties and loggers and using the
+        /// specified toolset locations, node count, and setting of onlyLogCriticalEvents.
+        /// Global properties and loggers may be null.
+        /// Throws InvalidProjectFileException if any of the global properties are reserved.
+        /// May throw InvalidToolsetDefinitionException.
+        /// </summary>
+        /// <param name="globalProperties">The default global properties to use. May be null.</param>
+        /// <param name="loggers">The loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="remoteLoggers">Any remote loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="toolsetDefinitionLocations">The locations from which to load toolsets.</param>
+        /// <param name="maxNodeCount">The maximum number of nodes to use for building.</param>
+        /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
+        /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
+        /// <param name="useAsynchronousLogging">If set to true, asynchronous logging will be used. <see cref="ProjectCollection.Dispose()"/> has to called to clear resources used by async logging.</param>
+        internal ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly, bool useAsynchronousLogging)
         {
             _loadedProjects = new LoadedProjectCollection();
             ToolsetLocations = toolsetDefinitionLocations;
@@ -318,6 +346,7 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
 
             try
             {
+                _loggerMode = useAsynchronousLogging ? LoggerMode.Asynchronous : LoggerMode.Synchronous;
                 CreateLoggingService(maxNodeCount, onlyLogCriticalEvents);
 
                 RegisterLoggers(loggers);
@@ -417,8 +446,14 @@ public static ProjectCollection GlobalProjectCollection
                 {
                     // Take care to ensure that there is never more than one value observed
                     // from this property even in the case of race conditions while lazily initializing.
-                    var local = new ProjectCollection();
-                    Interlocked.CompareExchange(ref s_globalProjectCollection, local, null);
+                    var local = new ProjectCollection(null, null, null, ToolsetDefinitionLocations.Default,
+                        maxNodeCount: 1, onlyLogCriticalEvents: false, loadProjectsReadOnly: false, useAsynchronousLogging: true);
+
+                    if (Interlocked.CompareExchange(ref s_globalProjectCollection, local, null) != null)
+                    {
+                        // Other thread beat us to it; dispose of this project collection
+                        local.Dispose();
+                    }
                 }
 
                 return s_globalProjectCollection;
@@ -432,7 +467,7 @@ public static ProjectCollection GlobalProjectCollection
         /// This is the Windows file version (specifically the value of the FileVersion
         /// resource), not necessarily the assembly version.
         /// If you want the assembly version, use Constants.AssemblyVersion.
-        /// This is not the <see cref="ToolsetsVersion">ToolsetCollectionVersion</see>.
+        /// This is not the <see cref="Toolset.ToolsVersion"/>.
         /// </remarks>
         public static Version Version
         {
@@ -1723,7 +1758,7 @@ private void ShutDownLoggingService()
         /// </summary>
         private void CreateLoggingService(int maxCPUCount, bool onlyLogCriticalEvents)
         {
-            _loggingService = BackEnd.Logging.LoggingService.CreateLoggingService(LoggerMode.Synchronous, 0 /*Evaluation can be done as if it was on node "0"*/);
+            _loggingService = BackEnd.Logging.LoggingService.CreateLoggingService(_loggerMode, 0 /*Evaluation can be done as if it was on node "0"*/);
             _loggingService.MaxCPUCount = maxCPUCount;
             _loggingService.OnlyLogCriticalEvents = onlyLogCriticalEvents;
         }
@@ -1733,7 +1768,7 @@ private void CreateLoggingService(int maxCPUCount, bool onlyLogCriticalEvents)
         /// </summary>
         internal void ResetToolsetsForTests(ToolsetConfigurationReader configurationReaderForTestsOnly)
         {
-            InitializeToolsetCollection(configReader:configurationReaderForTestsOnly);
+            InitializeToolsetCollection(configReader: configurationReaderForTestsOnly);
         }
 
 #if FEATURE_WIN32_REGISTRY
@@ -1742,7 +1777,7 @@ internal void ResetToolsetsForTests(ToolsetConfigurationReader configurationRead
         /// </summary>
         internal void ResetToolsetsForTests(ToolsetRegistryReader registryReaderForTestsOnly)
         {
-            InitializeToolsetCollection(registryReader:registryReaderForTestsOnly);
+            InitializeToolsetCollection(registryReader: registryReaderForTestsOnly);
         }
 #endif
 
diff --git a/src/Build/Definition/ProjectCollectionChangedEventArgs.cs b/src/Build/Definition/ProjectCollectionChangedEventArgs.cs
index ffee5a19f7c..2b7f7d5f927 100644
--- a/src/Build/Definition/ProjectCollectionChangedEventArgs.cs
+++ b/src/Build/Definition/ProjectCollectionChangedEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectImportPathMatch.cs b/src/Build/Definition/ProjectImportPathMatch.cs
index 1c670eb06a4..f793dda52fd 100644
--- a/src/Build/Definition/ProjectImportPathMatch.cs
+++ b/src/Build/Definition/ProjectImportPathMatch.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 0b3c28e1562..6dd0d58102c 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -12,6 +12,8 @@
 using System.Linq;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -182,8 +184,14 @@ public string UnevaluatedInclude
         {
             [DebuggerStepThrough]
             get
-            { return _xml.Include; }
-            set { Rename(value); }
+            {
+                return _xml.Include;
+            }
+
+            set
+            {
+                Rename(value);
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Definition/ProjectItemDefinition.cs b/src/Build/Definition/ProjectItemDefinition.cs
index 35fc50b2d08..3dac87761bb 100644
--- a/src/Build/Definition/ProjectItemDefinition.cs
+++ b/src/Build/Definition/ProjectItemDefinition.cs
@@ -11,6 +11,8 @@
 using System;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectLoadSettings.cs b/src/Build/Definition/ProjectLoadSettings.cs
index ef51122eca5..9f767d1bf47 100644
--- a/src/Build/Definition/ProjectLoadSettings.cs
+++ b/src/Build/Definition/ProjectLoadSettings.cs
@@ -1,6 +1,8 @@
 ﻿using System;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectMetadata.cs b/src/Build/Definition/ProjectMetadata.cs
index 2e5f4c958ae..198c8231ac8 100644
--- a/src/Build/Definition/ProjectMetadata.cs
+++ b/src/Build/Definition/ProjectMetadata.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectOptions.cs b/src/Build/Definition/ProjectOptions.cs
index fadfe73a6e3..6cdbc750dbd 100644
--- a/src/Build/Definition/ProjectOptions.cs
+++ b/src/Build/Definition/ProjectOptions.cs
@@ -3,6 +3,8 @@
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Definition
 {
     /// <summary>
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 518babfb2d6..157fc4366ec 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -3,12 +3,16 @@
 
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -92,7 +96,18 @@ public string EvaluatedValue
         string IProperty.EvaluatedValueEscaped
         {
             [DebuggerStepThrough]
-            get => EvaluatedValueEscapedInternal;
+            get
+            {
+                if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty)
+                {
+                    EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
+                    args.BuildEventContext = loggingContext.BuildEventContext;
+                    loggingContext.LogBuildEvent(args);
+                    environmentProperty._loggedEnvProperty = true;
+                }
+
+                return EvaluatedValueEscapedInternal;
+            }
         }
 
         /// <summary>
@@ -235,9 +250,10 @@ bool IEquatable<ProjectProperty>.Equals(ProjectProperty other)
         /// This is ONLY to be used by the Evaluator (and Project.SetGlobalProperty) and ONLY for Global, Environment, and Built-in properties.
         /// All other properties originate in XML, and should have a backing XML object.
         /// </summary>
-        internal static ProjectProperty Create(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved)
+        internal static ProjectProperty Create(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext = null)
         {
-            return new ProjectPropertyNotXmlBacked(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved);
+            return !isGlobalProperty && !mayBeReserved ? new EnvironmentDerivedProjectProperty(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext) :
+                new ProjectPropertyNotXmlBacked(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved);
         }
 
         /// <summary>
@@ -626,5 +642,18 @@ public override bool IsImported
                 get { return false; }
             }
         }
+
+        private class EnvironmentDerivedProjectProperty : ProjectPropertyNotXmlBacked
+        {
+            internal bool _loggedEnvProperty = false;
+            internal LoggingContext loggingContext;
+
+            internal EnvironmentDerivedProjectProperty(
+                Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext)
+                : base(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved)
+            {
+                this.loggingContext = loggingContext;
+            }
+        }
     }
 }
diff --git a/src/Build/Definition/ResolvedImport.cs b/src/Build/Definition/ResolvedImport.cs
index 5b9111f5bdb..378b6546baa 100644
--- a/src/Build/Definition/ResolvedImport.cs
+++ b/src/Build/Definition/ResolvedImport.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/SubToolset.cs b/src/Build/Definition/SubToolset.cs
index 3f27dc905ac..af5f8e9ffa2 100644
--- a/src/Build/Definition/SubToolset.cs
+++ b/src/Build/Definition/SubToolset.cs
@@ -11,6 +11,8 @@
 
 using ObjectModel = System.Collections.ObjectModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -93,4 +95,4 @@ internal static SubToolset FactoryForDeserialization(ITranslator translator)
             return subToolset;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index b623fed7040..aed480e2f4e 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -17,11 +17,15 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+#if FEATURE_WIN32_REGISTRY
 using Microsoft.Win32;
+#endif
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using ObjectModel = System.Collections.ObjectModel;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -568,13 +572,8 @@ internal static bool Dev10IsInstalled
                             s_dev10IsInstalled = false;
                         }
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.NotExpectedRegistryException(e))
                     {
-                        if (ExceptionHandling.NotExpectedRegistryException(e))
-                        {
-                            throw;
-                        }
-
                         // if it's a registry exception, just shrug, eat it, and move on with life on the assumption that whatever
                         // went wrong, it's pretty clear that Dev10 probably isn't installed.
                         s_dev10IsInstalled = false;
@@ -922,7 +921,7 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
 
                     reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,
 #if RUNTIME_TYPE_NETCORE
-                        "Core",
+                        Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core",
 #elif MONO
                         NativeMethodsShared.IsMono ? "Mono" : "Full");
 #else
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index e2df26e70dd..8d8f3251768 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -15,6 +15,8 @@
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -241,7 +243,7 @@ private Dictionary<string, ProjectImportPathMatch> ComputeDistinctListOfSearchPa
                     continue;
                 }
 
-                //FIXME: handle ; in path on Unix
+                // FIXME: handle ; in path on Unix
                 var paths = property.Value
                     .Split(s_separatorForExtensionsPathSearchPaths, StringSplitOptions.RemoveEmptyEntries)
                     .Distinct()
diff --git a/src/Build/Definition/ToolsetLocalReader.cs b/src/Build/Definition/ToolsetLocalReader.cs
index 9669ae466b9..ce17fd8ffb1 100644
--- a/src/Build/Definition/ToolsetLocalReader.cs
+++ b/src/Build/Definition/ToolsetLocalReader.cs
@@ -8,6 +8,8 @@
 using System.Collections.Generic;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal class ToolsetLocalReader : ToolsetReader
diff --git a/src/Build/Definition/ToolsetPropertyDefinition.cs b/src/Build/Definition/ToolsetPropertyDefinition.cs
index b21273d5aa1..01e4a01bc6c 100644
--- a/src/Build/Definition/ToolsetPropertyDefinition.cs
+++ b/src/Build/Definition/ToolsetPropertyDefinition.cs
@@ -6,6 +6,8 @@
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index eb0e6c3a064..3f8499f4264 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -17,6 +17,8 @@
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -426,7 +428,7 @@ bool accumulateProperties
                     // Register toolset paths into list of immutable directories
                     //   example: C:\Windows\Microsoft.NET\Framework\v4.0.30319\
                     FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
-                    //   example:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
+                    // example:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
                     FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
 
                     if (toolset != null)
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index d49b10b1cf2..f049808eaea 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -17,6 +17,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Internal;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 3b5a286956a..e0cc6e95fcc 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -7,6 +7,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/ElementLocation/RegistryLocation.cs b/src/Build/ElementLocation/RegistryLocation.cs
index d6577196d97..598b72a853c 100644
--- a/src/Build/ElementLocation/RegistryLocation.cs
+++ b/src/Build/ElementLocation/RegistryLocation.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.BackEnd;
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/ElementLocation/XmlAttributeWithLocation.cs b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
index 2a8ad231e60..8aa000ccfab 100644
--- a/src/Build/ElementLocation/XmlAttributeWithLocation.cs
+++ b/src/Build/ElementLocation/XmlAttributeWithLocation.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/ElementLocation/XmlDocumentWithLocation.cs b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
index 1b3de4bb5e0..9b8b04e1736 100644
--- a/src/Build/ElementLocation/XmlDocumentWithLocation.cs
+++ b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -163,7 +165,6 @@ public override void Load(XmlReader reader)
             _reader = null;
         }
 
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Grab the path to the file, for use in our location information.
         /// </summary>
@@ -178,7 +179,6 @@ public override void Load(string fullPath)
                 this.Load(xtr.Reader);
             }
         }
-#endif
 
         /// <summary>
         /// Called during load, to add an element.
@@ -279,7 +279,6 @@ public override void Save(Stream outStream)
             base.Save(outStream);
         }
 
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Override Save to verify file was not loaded as readonly
         /// </summary>
@@ -288,7 +287,6 @@ public override void Save(string filename)
             VerifyThrowNotReadOnly();
             base.Save(filename);
         }
-#endif
 
         /// <summary>
         /// Override Save to verify file was not loaded as readonly
diff --git a/src/Build/ElementLocation/XmlElementWithLocation.cs b/src/Build/ElementLocation/XmlElementWithLocation.cs
index 47446943860..726bf84df57 100644
--- a/src/Build/ElementLocation/XmlElementWithLocation.cs
+++ b/src/Build/ElementLocation/XmlElementWithLocation.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using Microsoft.Build.ObjectModelRemoting;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/ElementLocation/XmlNameTableThreadSafe.cs b/src/Build/ElementLocation/XmlNameTableThreadSafe.cs
index ac593ced2b8..a5f068becf4 100644
--- a/src/Build/ElementLocation/XmlNameTableThreadSafe.cs
+++ b/src/Build/ElementLocation/XmlNameTableThreadSafe.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Xml;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Errors/InternalLoggerException.cs b/src/Build/Errors/InternalLoggerException.cs
index 56016a76d82..7acb0b4603d 100644
--- a/src/Build/Errors/InternalLoggerException.cs
+++ b/src/Build/Errors/InternalLoggerException.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index 6588acce0b8..a947dd83005 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/Errors/InvalidToolsetDefinitionException.cs b/src/Build/Errors/InvalidToolsetDefinitionException.cs
index 79354ecd57d..3d516446388 100644
--- a/src/Build/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Build/Errors/InvalidToolsetDefinitionException.cs
@@ -9,6 +9,8 @@
 using System.Security.Permissions;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/Errors/RegistryException.cs b/src/Build/Errors/RegistryException.cs
index d1b86501d33..4e3cb2e25ac 100644
--- a/src/Build/Errors/RegistryException.cs
+++ b/src/Build/Errors/RegistryException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Exceptions
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index 8eb493e6398..183ce5117d6 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -7,6 +7,8 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
@@ -15,6 +17,7 @@ namespace Microsoft.Build.Evaluation
     using ElementLocation = Microsoft.Build.Construction.ElementLocation;
     using Microsoft.Build.Shared;
     using Microsoft.Build.Shared.FileSystem;
+    using Microsoft.Build.BackEnd.Logging;
 
     internal static class ConditionEvaluator
     {
@@ -179,7 +182,8 @@ internal static bool EvaluateCondition<P, I>
             ILoggingService loggingServices,
             BuildEventContext buildEventContext,
             IFileSystem fileSystem,
-            ProjectRootElementCacheBase projectRootElementCache = null)
+            ProjectRootElementCacheBase projectRootElementCache = null,
+            LoggingContext loggingContext = null)
             where P : class, IProperty
             where I : class, IItem
         {
@@ -194,7 +198,8 @@ internal static bool EvaluateCondition<P, I>
                 loggingServices,
                 buildEventContext,
                 fileSystem,
-                projectRootElementCache);
+                projectRootElementCache,
+                loggingContext);
         }
 
         /// <summary>
@@ -216,7 +221,8 @@ internal static bool EvaluateConditionCollectingConditionedProperties<P, I>
             ILoggingService loggingServices,
             BuildEventContext buildEventContext,
             IFileSystem fileSystem,
-            ProjectRootElementCacheBase projectRootElementCache = null
+            ProjectRootElementCacheBase projectRootElementCache = null,
+            LoggingContext loggingContext = null
         )
             where P : class, IProperty
             where I : class, IItem
@@ -277,7 +283,7 @@ internal static bool EvaluateConditionCollectingConditionedProperties<P, I>
             {
                 try
                 {
-                    result = parsedExpression.Evaluate(state);
+                    result = parsedExpression.Evaluate(state, loggingContext);
                 }
                 finally
                 {
@@ -351,7 +357,7 @@ internal interface IConditionEvaluationState
             ///     May return null if the expression would expand to non-empty and it broke out early.
             ///     Otherwise, returns the correctly expanded expression.
             /// </summary>
-            string ExpandIntoStringBreakEarly(string expression);
+            string ExpandIntoStringBreakEarly(string expression, LoggingContext loggingContext = null);
 
             /// <summary>
             ///     Expands the specified expression into a list of TaskItem's.
@@ -361,7 +367,7 @@ internal interface IConditionEvaluationState
             /// <summary>
             ///     Expands the specified expression into a string.
             /// </summary>
-            string ExpandIntoString(string expression);
+            string ExpandIntoString(string expression, LoggingContext loggingContext = null);
 
             /// <summary>
             ///     PRE cache
@@ -438,11 +444,11 @@ internal ConditionEvaluationState
             /// May return null if the expression would expand to non-empty and it broke out early.
             /// Otherwise, returns the correctly expanded expression.
             /// </summary>
-            public string ExpandIntoStringBreakEarly(string expression)
+            public string ExpandIntoStringBreakEarly(string expression, LoggingContext loggingContext = null)
             {
                 var originalValue = _expander.WarnForUninitializedProperties;
 
-                expression = _expander.ExpandIntoStringAndUnescape(expression, _expanderOptions | ExpanderOptions.BreakOnNotEmpty, ElementLocation);
+                expression = _expander.ExpandIntoStringAndUnescape(expression, _expanderOptions | ExpanderOptions.BreakOnNotEmpty, ElementLocation, loggingContext);
 
                 _expander.WarnForUninitializedProperties = originalValue;
 
@@ -469,12 +475,13 @@ public IList<TaskItem> ExpandIntoTaskItems(string expression)
             /// Expands the specified expression into a string.
             /// </summary>
             /// <param name="expression">The expression to expand.</param>
+            /// <param name="loggingContext"></param>
             /// <returns>The expanded string.</returns>
-            public string ExpandIntoString(string expression)
+            public string ExpandIntoString(string expression, LoggingContext loggingContext = null)
             {
                 var originalValue = _expander.WarnForUninitializedProperties;
 
-                expression = _expander.ExpandIntoStringAndUnescape(expression, _expanderOptions, ElementLocation);
+                expression = _expander.ExpandIntoStringAndUnescape(expression, _expanderOptions, ElementLocation, loggingContext);
 
                 _expander.WarnForUninitializedProperties = originalValue;
 
diff --git a/src/Build/Evaluation/Conditionals/AndExpressionNode.cs b/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
index 69df786fb83..47481c625c3 100644
--- a/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/AndExpressionNode.cs
@@ -1,9 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -16,9 +19,9 @@ internal sealed class AndExpressionNode : OperatorExpressionNode
         /// <summary>
         /// Evaluate as boolean
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
-            if (!LeftChild.TryBoolEvaluate(state, out bool leftBool))
+            if (!LeftChild.TryBoolEvaluate(state, out bool leftBool, loggingContext))
             {
                 ProjectErrorUtilities.ThrowInvalidProject(
                      state.ElementLocation,
@@ -35,7 +38,7 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
             }
             else
             {
-                if (!RightChild.TryBoolEvaluate(state, out bool rightBool))
+                if (!RightChild.TryBoolEvaluate(state, out bool rightBool, loggingContext))
                 {
                     ProjectErrorUtilities.ThrowInvalidProject(
                          state.ElementLocation,
diff --git a/src/Build/Evaluation/Conditionals/CharacterUtilities.cs b/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
index 277036eac9d..9eb85cf6b6d 100644
--- a/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
+++ b/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal static class CharacterUtilities
diff --git a/src/Build/Evaluation/Conditionals/EqualExpressionNode.cs b/src/Build/Evaluation/Conditionals/EqualExpressionNode.cs
index 190a880068e..939493a148f 100644
--- a/src/Build/Evaluation/Conditionals/EqualExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/EqualExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
index d1ffa2a8248..4ec222243fd 100644
--- a/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs
@@ -4,10 +4,13 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -27,7 +30,7 @@ internal FunctionCallExpressionNode(string functionName, List<GenericExpressionN
         /// <summary>
         /// Evaluate node as boolean
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             if (String.Equals(_functionName, "exists", StringComparison.OrdinalIgnoreCase))
             {
diff --git a/src/Build/Evaluation/Conditionals/GenericExpressionNode.cs b/src/Build/Evaluation/Conditionals/GenericExpressionNode.cs
index c85b95e088d..50efb172cf7 100644
--- a/src/Build/Evaluation/Conditionals/GenericExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/GenericExpressionNode.cs
@@ -2,9 +2,11 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -12,9 +14,9 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal abstract class GenericExpressionNode
     {
-        internal abstract bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result);
-        internal abstract bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result);
-        internal abstract bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result);
+        internal abstract bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result, LoggingContext loggingContext = null);
+        internal abstract bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result, LoggingContext loggingContext = null);
+        internal abstract bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result, LoggingContext loggingContext = null);
 
         /// <summary>
         /// Returns true if this node evaluates to an empty string,
@@ -23,7 +25,7 @@ internal abstract class GenericExpressionNode
         /// to empty than to fully evaluate it.)
         /// Implementations should cache the result so that calls after the first are free.
         /// </summary>
-        internal virtual bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationState state)
+        internal virtual bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             return false;
         }
@@ -32,7 +34,7 @@ internal virtual bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationSt
         /// Value after any item and property expressions are expanded
         /// </summary>
         /// <returns></returns>
-        internal abstract string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state);
+        internal abstract string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null);
 
         /// <summary>
         /// Value before any item and property expressions are expanded
@@ -50,16 +52,17 @@ internal virtual bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationSt
         /// The main evaluate entry point for expression trees
         /// </summary>
         /// <param name="state"></param>
+        /// <param name="loggingContext"></param>
         /// <returns></returns>
-        internal bool Evaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal bool Evaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
-            if (!TryBoolEvaluate(state, out bool boolValue))
+            if (!TryBoolEvaluate(state, out bool boolValue, loggingContext))
             {
                 ProjectErrorUtilities.ThrowInvalidProject(
                     state.ElementLocation,
                     "ConditionNotBooleanDetail",
                     state.Condition,
-                    GetExpandedValue(state));
+                    GetExpandedValue(state, loggingContext));
             }
 
             return boolValue;
diff --git a/src/Build/Evaluation/Conditionals/GreaterThanExpressionNode.cs b/src/Build/Evaluation/Conditionals/GreaterThanExpressionNode.cs
index 6749b70b166..0639c92cf4f 100644
--- a/src/Build/Evaluation/Conditionals/GreaterThanExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/GreaterThanExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/GreaterThanOrEqualExpressionNode.cs b/src/Build/Evaluation/Conditionals/GreaterThanOrEqualExpressionNode.cs
index 1f743d9e657..74a3e162ce4 100644
--- a/src/Build/Evaluation/Conditionals/GreaterThanOrEqualExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/GreaterThanOrEqualExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/IItem.cs b/src/Build/Evaluation/Conditionals/IItem.cs
index 000aacf9c0a..e26b0b3e567 100644
--- a/src/Build/Evaluation/Conditionals/IItem.cs
+++ b/src/Build/Evaluation/Conditionals/IItem.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/LessThanExpressionNode.cs b/src/Build/Evaluation/Conditionals/LessThanExpressionNode.cs
index 0b3ba717d50..a7cf6dcff1e 100644
--- a/src/Build/Evaluation/Conditionals/LessThanExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/LessThanExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/LessThanOrEqualExpressionNode.cs b/src/Build/Evaluation/Conditionals/LessThanOrEqualExpressionNode.cs
index 8701e50e6d6..19de29eccf6 100644
--- a/src/Build/Evaluation/Conditionals/LessThanOrEqualExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/LessThanOrEqualExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
index 18e1caad924..1ef13748bdc 100644
--- a/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs
@@ -1,8 +1,11 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -34,7 +37,7 @@ internal abstract class MultipleComparisonNode : OperatorExpressionNode
         /// Order in which comparisons are attempted is numeric, boolean, then string.
         /// Updates conditioned properties table.
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext)
         {
             ProjectErrorUtilities.VerifyThrowInvalidProject
                 (LeftChild != null && RightChild != null,
@@ -48,8 +51,8 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
             // and we know which do, then we already have enough information to evaluate this expression.
             // That means we don't have to fully expand a condition like " '@(X)' == '' " 
             // which is a performance advantage if @(X) is a huge item list.
-            bool leftEmpty = LeftChild.EvaluatesToEmpty(state);
-            bool rightEmpty = RightChild.EvaluatesToEmpty(state);
+            bool leftEmpty = LeftChild.EvaluatesToEmpty(state, loggingContext);
+            bool rightEmpty = RightChild.EvaluatesToEmpty(state, loggingContext);
             if (leftEmpty || rightEmpty)
             {
                 UpdateConditionedProperties(state);
@@ -66,13 +69,13 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
                 // is 17.0).
                 return Compare(leftNumericValue, rightNumericValue);
             }
-            else if (LeftChild.TryBoolEvaluate(state, out bool leftBoolValue) && RightChild.TryBoolEvaluate(state, out bool rightBoolValue))
+            else if (LeftChild.TryBoolEvaluate(state, out bool leftBoolValue, loggingContext) && RightChild.TryBoolEvaluate(state, out bool rightBoolValue, loggingContext))
             {
                 return Compare(leftBoolValue, rightBoolValue);
             }
 
-            string leftExpandedValue = LeftChild.GetExpandedValue(state);
-            string rightExpandedValue = RightChild.GetExpandedValue(state);
+            string leftExpandedValue = LeftChild.GetExpandedValue(state, loggingContext);
+            string rightExpandedValue = RightChild.GetExpandedValue(state, loggingContext);
 
             ProjectErrorUtilities.VerifyThrowInvalidProject
                 (leftExpandedValue != null && rightExpandedValue != null,
diff --git a/src/Build/Evaluation/Conditionals/NotEqualExpressionNode.cs b/src/Build/Evaluation/Conditionals/NotEqualExpressionNode.cs
index a8cf898793d..34aedc61d6c 100644
--- a/src/Build/Evaluation/Conditionals/NotEqualExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/NotEqualExpressionNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Conditionals/NotExpressionNode.cs b/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
index 2f5dd07d112..1d2e1d6311e 100644
--- a/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/NotExpressionNode.cs
@@ -1,9 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -16,9 +19,9 @@ internal sealed class NotExpressionNode : OperatorExpressionNode
         /// <summary>
         /// Evaluate as boolean
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
-            if (!LeftChild.TryBoolEvaluate(state, out bool boolValue))
+            if (!LeftChild.TryBoolEvaluate(state, out bool boolValue, loggingContext))
             {
                 ProjectErrorUtilities.ThrowInvalidProject(
                     state.ElementLocation,
@@ -42,9 +45,9 @@ internal override string GetUnexpandedValue(ConditionEvaluator.IConditionEvaluat
         /// <summary>
         /// Returns expanded value with '!' prepended. Useful for error messages.
         /// </summary>
-        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state)
+        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
-            return "!" + LeftChild.GetExpandedValue(state);
+            return "!" + LeftChild.GetExpandedValue(state, loggingContext);
         }
 
         internal override string DebuggerDisplay => $"(not {LeftChild.DebuggerDisplay})";
diff --git a/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs b/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs
index a86a3031bb3..f161ad5d18b 100644
--- a/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs
@@ -2,9 +2,11 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -36,7 +38,7 @@ internal abstract class NumericComparisonExpressionNode : OperatorExpressionNode
         /// <summary>
         /// Evaluate as boolean
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             bool isLeftNum = LeftChild.TryNumericEvaluate(state, out double leftNum);
             bool isLeftVersion = LeftChild.TryVersionEvaluate(state, out Version leftVersion);
@@ -51,7 +53,7 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
                     state.Condition,
                     /* helpfully display unexpanded token and expanded result in error message */
                     isLeftNum ? RightChild.GetUnexpandedValue(state) : LeftChild.GetUnexpandedValue(state),
-                    isLeftNum ? RightChild.GetExpandedValue(state) : LeftChild.GetExpandedValue(state));
+                    isLeftNum ? RightChild.GetExpandedValue(state, loggingContext) : LeftChild.GetExpandedValue(state, loggingContext));
             }
 
             return (isLeftNum, isLeftVersion, isRightNum, isRightVersion) switch
diff --git a/src/Build/Evaluation/Conditionals/NumericExpressionNode.cs b/src/Build/Evaluation/Conditionals/NumericExpressionNode.cs
index fe21a15a1ad..7725d9962dc 100644
--- a/src/Build/Evaluation/Conditionals/NumericExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/NumericExpressionNode.cs
@@ -3,9 +3,11 @@
 
 using System;
 using System.Diagnostics;
-
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -21,18 +23,18 @@ internal NumericExpressionNode(string value)
             _value = value;
         }
 
-        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result)
+        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result, LoggingContext loggingContext = null)
         {
             result = default;
             return false;
         }
 
-        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result)
+        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result, LoggingContext loggingContext = null)
         {
             return ConversionUtilities.TryConvertDecimalOrHexToDouble(_value, out result);
         }
 
-        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result)
+        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result, LoggingContext loggingContext = null)
         {
             return Version.TryParse(_value, out result);
         }
@@ -48,7 +50,7 @@ internal override string GetUnexpandedValue(ConditionEvaluator.IConditionEvaluat
         /// <summary>
         /// Get the expanded value
         /// </summary>
-        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state)
+        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             return _value;
         }
diff --git a/src/Build/Evaluation/Conditionals/OperandExpressionNode.cs b/src/Build/Evaluation/Conditionals/OperandExpressionNode.cs
index 35ecbb065f4..1dfbc5ecba4 100644
--- a/src/Build/Evaluation/Conditionals/OperandExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/OperandExpressionNode.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -22,4 +24,4 @@ internal override bool DetectOr()
         #endregion
 
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Evaluation/Conditionals/OperatorExpressionNode.cs b/src/Build/Evaluation/Conditionals/OperatorExpressionNode.cs
index 92609fd763e..a3f76ff20ff 100644
--- a/src/Build/Evaluation/Conditionals/OperatorExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/OperatorExpressionNode.cs
@@ -2,6 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using Microsoft.Build.BackEnd.Logging;
+
+#nullable disable
 
 namespace Microsoft.Build.Evaluation
 {
@@ -10,21 +13,21 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal abstract class OperatorExpressionNode : GenericExpressionNode
     {
-        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result)
+        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result, LoggingContext loggingContext = null)
         {
-            result = BoolEvaluate(state);
+            result = BoolEvaluate(state, loggingContext);
             return true;
         }
 
-        internal abstract bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state);
+        internal abstract bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null);
 
-        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result)
+        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result, LoggingContext loggingContext = null)
         {
             result = default;
             return false;
         }
 
-        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result)
+        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result, LoggingContext loggingContext = null)
         {
             result = default;
             return false;
@@ -34,7 +37,7 @@ internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluatio
         /// Value after any item and property expressions are expanded
         /// </summary>
         /// <returns></returns>
-        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state)
+        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             return null;
         }
diff --git a/src/Build/Evaluation/Conditionals/OrExpressionNode.cs b/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
index 1ac1713a5aa..fa1816c2e1d 100644
--- a/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/OrExpressionNode.cs
@@ -1,9 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -16,15 +19,15 @@ internal sealed class OrExpressionNode : OperatorExpressionNode
         /// <summary>
         /// Evaluate as boolean
         /// </summary>
-        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
-            if (!LeftChild.TryBoolEvaluate(state, out bool leftBool))
+            if (!LeftChild.TryBoolEvaluate(state, out bool leftBool, loggingContext))
             {
                 ProjectErrorUtilities.ThrowInvalidProject(
                     state.ElementLocation,
                     "ExpressionDoesNotEvaluateToBoolean",
                     LeftChild.GetUnexpandedValue(state),
-                    LeftChild.GetExpandedValue(state),
+                    LeftChild.GetExpandedValue(state, loggingContext),
                     state.Condition);
             }
 
@@ -35,7 +38,7 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState
             }
             else
             {
-                if (!RightChild.TryBoolEvaluate(state, out bool rightBool))
+                if (!RightChild.TryBoolEvaluate(state, out bool rightBool, loggingContext))
                 {
                     ProjectErrorUtilities.ThrowInvalidProject(
                         state.ElementLocation,
diff --git a/src/Build/Evaluation/Conditionals/Parser.cs b/src/Build/Evaluation/Conditionals/Parser.cs
index 292226a5ed8..3496e8f3b8b 100644
--- a/src/Build/Evaluation/Conditionals/Parser.cs
+++ b/src/Build/Evaluation/Conditionals/Parser.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
@@ -301,7 +303,9 @@ private GenericExpressionNode Factor(string expression)
             {
                 GenericExpressionNode child = Expr(expression);
                 if (Same(expression, Token.TokenType.RightParenthesis))
+                {
                     return child;
+                }
                 else
                 {
                     errorPosition = _lexer.GetErrorPosition();
diff --git a/src/Build/Evaluation/Conditionals/Scanner.cs b/src/Build/Evaluation/Conditionals/Scanner.cs
index 04af6a1a016..645181ce8f7 100644
--- a/src/Build/Evaluation/Conditionals/Scanner.cs
+++ b/src/Build/Evaluation/Conditionals/Scanner.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -364,7 +366,7 @@ private static bool ScanForPropertyExpressionEnd(string expression, int index, o
                         // If it is not then the calling code will determine that
                         if (nestLevel == 0)
                         {
-                            if (whitespaceFound && !nonIdentifierCharacterFound && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
+                            if (whitespaceFound && !nonIdentifierCharacterFound)
                             {
                                 return false;
                             }
diff --git a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
index f87cd766ca5..43dd324e7a8 100644
--- a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
@@ -3,8 +3,11 @@
 
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -28,34 +31,34 @@ internal StringExpressionNode(string value, bool expandable)
             _expandable = expandable;
         }
 
-        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result)
+        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result, LoggingContext loggingContext = null)
         {
-            return ConversionUtilities.TryConvertStringToBool(GetExpandedValue(state), out result);
+            return ConversionUtilities.TryConvertStringToBool(GetExpandedValue(state, loggingContext), out result);
         }
 
-        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result)
+        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result, LoggingContext loggingContext = null)
         {
-            if (ShouldBeTreatedAsVisualStudioVersion(state))
+            if (ShouldBeTreatedAsVisualStudioVersion(state, loggingContext))
             {
                 result = ConversionUtilities.ConvertDecimalOrHexToDouble(MSBuildConstants.CurrentVisualStudioVersion);
                 return true;
             }
             else
             {
-                return ConversionUtilities.TryConvertDecimalOrHexToDouble(GetExpandedValue(state), out result);
+                return ConversionUtilities.TryConvertDecimalOrHexToDouble(GetExpandedValue(state, loggingContext), out result);
             }
         }
 
-        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result)
+        internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluationState state, out Version result, LoggingContext loggingContext = null)
         {
-            if (ShouldBeTreatedAsVisualStudioVersion(state))
+            if (ShouldBeTreatedAsVisualStudioVersion(state, loggingContext))
             {
                 result = Version.Parse(MSBuildConstants.CurrentVisualStudioVersion);
                 return true;
             }
             else
             {
-                return Version.TryParse(GetExpandedValue(state), out result);
+                return Version.TryParse(GetExpandedValue(state, loggingContext), out result);
             }
         }
 
@@ -66,7 +69,7 @@ internal override bool TryVersionEvaluate(ConditionEvaluator.IConditionEvaluatio
         /// to empty than to fully evaluate it.
         /// Implementations should cache the result so that calls after the first are free.
         /// </summary>
-        internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationState state)
+        internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             if (_cachedExpandedValue == null)
             {
@@ -91,7 +94,7 @@ internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationS
                             break;
                     }
 
-                    string expandBreakEarly = state.ExpandIntoStringBreakEarly(_value);
+                    string expandBreakEarly = state.ExpandIntoStringBreakEarly(_value, loggingContext);
 
                     if (expandBreakEarly == null)
                     {
@@ -127,13 +130,13 @@ internal override string GetUnexpandedValue(ConditionEvaluator.IConditionEvaluat
         /// Value after any item and property expressions are expanded
         /// </summary>
         /// <returns></returns>
-        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state)
+        internal override string GetExpandedValue(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             if (_cachedExpandedValue == null)
             {
                 if (_expandable)
                 {
-                    _cachedExpandedValue = state.ExpandIntoString(_value);
+                    _cachedExpandedValue = state.ExpandIntoString(_value, loggingContext);
                 }
                 else
                 {
@@ -166,7 +169,7 @@ internal override void ResetState()
         /// but now cause the project to throw InvalidProjectException when
         /// ToolsVersion is "Current". https://github.com/dotnet/msbuild/issues/4150
         /// </remarks>
-        private bool ShouldBeTreatedAsVisualStudioVersion(ConditionEvaluator.IConditionEvaluationState state)
+        private bool ShouldBeTreatedAsVisualStudioVersion(ConditionEvaluator.IConditionEvaluationState state, LoggingContext loggingContext = null)
         {
             if (!_shouldBeTreatedAsVisualStudioVersion.HasValue)
             {
@@ -174,7 +177,7 @@ private bool ShouldBeTreatedAsVisualStudioVersion(ConditionEvaluator.IConditionE
 
                 // Do this check first, because if it's not (common) we can early-out and the next
                 // expansion will be cheap because this will populate the cached expanded value.
-                if (string.Equals(GetExpandedValue(state), MSBuildConstants.CurrentToolsVersion, StringComparison.Ordinal))
+                if (string.Equals(GetExpandedValue(state, loggingContext), MSBuildConstants.CurrentToolsVersion, StringComparison.Ordinal))
                 {
                     // and it is just an expansion of MSBuildToolsVersion
                     _shouldBeTreatedAsVisualStudioVersion = string.Equals(_value, "$(MSBuildToolsVersion)", StringComparison.OrdinalIgnoreCase);
diff --git a/src/Build/Evaluation/Conditionals/Token.cs b/src/Build/Evaluation/Conditionals/Token.cs
index 4ff4196dc1c..d26adca0462 100644
--- a/src/Build/Evaluation/Conditionals/Token.cs
+++ b/src/Build/Evaluation/Conditionals/Token.cs
@@ -3,6 +3,8 @@
 
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -32,13 +34,31 @@ internal sealed class Token
         /// </summary>
         internal enum TokenType
         {
-            Comma, LeftParenthesis, RightParenthesis,
-            LessThan, GreaterThan, LessThanOrEqualTo, GreaterThanOrEqualTo,
-            And, Or,
-            EqualTo, NotEqualTo, Not,
-            Property, String, Numeric, ItemList, ItemMetadata, Function,
-            EndOfInput
-        };
+            Comma,
+            LeftParenthesis,
+            RightParenthesis,
+
+            LessThan,
+            GreaterThan,
+            LessThanOrEqualTo,
+            GreaterThanOrEqualTo,
+
+            And,
+            Or,
+
+            EqualTo,
+            NotEqualTo,
+            Not,
+
+            Property,
+            String,
+            Numeric,
+            ItemList,
+            ItemMetadata,
+            Function,
+
+            EndOfInput,
+        }
 
         private TokenType _tokenType;
         private string _tokenString;
@@ -154,4 +174,4 @@ internal string String
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 19510f6d663..7d9b891a484 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation.Context
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index ae7efd6e832..ebce24983ad 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using ObjectModel = System.Collections.ObjectModel;
 using System.Diagnostics;
 using System.Globalization;
 using System.IO;
@@ -25,14 +24,17 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
-using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
-using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using static Microsoft.Build.Execution.ProjectPropertyInstance;
 using Constants = Microsoft.Build.Internal.Constants;
 using EngineFileUtilities = Microsoft.Build.Internal.EngineFileUtilities;
+using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
+using ObjectModel = System.Collections.ObjectModel;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 using SdkReferencePropertyExpansionMode = Microsoft.Build.Framework.EscapeHatches.SdkReferencePropertyExpansionMode;
+using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
+
+#nullable disable
 
 namespace Microsoft.Build.Evaluation
 {
@@ -340,7 +342,7 @@ internal static void Evaluate(
         /// Helper that creates a list of ProjectItem's given an unevaluated Include and a ProjectRootElement.
         /// Used by both Evaluator.EvaluateItemElement and by Project.AddItem.
         /// </summary>
-        internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItemElement itemElement, IItemFactory<I, I> itemFactory, string unevaluatedIncludeEscaped, Expander<P, I> expander)
+        internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItemElement itemElement, IItemFactory<I, I> itemFactory, string unevaluatedIncludeEscaped, Expander<P, I> expander, ILoggingService loggingService, string buildEventFileInfoFullPath, BuildEventContext buildEventContext)
         {
             ErrorUtilities.VerifyThrowArgumentLength(unevaluatedIncludeEscaped, nameof(unevaluatedIncludeEscaped));
 
@@ -372,7 +374,16 @@ internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItem
                     else
                     {
                         // The expression is not of the form "@(X)". Treat as string
-                        string[] includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(rootDirectory, includeSplitEscaped, excludeSpecsEscaped: null, forceEvaluate: false, fileMatcher: expander.EvaluationContext?.FileMatcher);
+                        string[] includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                            rootDirectory,
+                            includeSplitEscaped,
+                            excludeSpecsEscaped: null,
+                            forceEvaluate: false,
+                            fileMatcher: expander.EvaluationContext?.FileMatcher,
+                            loggingMechanism: loggingService,
+                            includeLocation: itemElement.IncludeLocation,
+                            buildEventFileInfoFullPath: buildEventFileInfoFullPath,
+                            buildEventContext: buildEventContext);
 
                         if (includeSplitFilesEscaped.Length > 0)
                         {
@@ -801,13 +812,30 @@ private void Evaluate()
             if (this._evaluationLoggingContext.LoggingService.IncludeEvaluationPropertiesAndItems)
             {
                 globalProperties = _data.GlobalPropertiesDictionary;
-                properties = _data.Properties;
+                properties = Traits.Instance.LogAllEnvironmentVariables ? _data.Properties : FilterOutEnvironmentDerivedProperties(_data.Properties);
                 items = _data.Items;
             }
 
             _evaluationLoggingContext.LogProjectEvaluationFinished(globalProperties, properties, items, _evaluationProfiler.ProfiledResult);
         }
 
+        private IEnumerable FilterOutEnvironmentDerivedProperties(PropertyDictionary<P> dictionary)
+        {
+            List<P> list = new(dictionary.Count);
+            foreach (P p in dictionary)
+            {
+                if (p is EnvironmentDerivedProjectPropertyInstance ||
+                    (p is ProjectProperty pp && pp.IsEnvironmentProperty))
+                {
+                    continue;
+                }
+
+                list.Add(p);
+            }
+
+            return list;
+        }
+
         private void CollectProjectCachePlugins()
         {
             foreach (var item in _data.GetItems(ItemTypeNames.ProjectCachePlugin))
@@ -1041,8 +1069,8 @@ private void ReadTargetElement(ProjectTargetElement targetElement, LinkedList<Pr
         /// </summary>
         private void AddBeforeAndAfterTargetMappings(ProjectTargetElement targetElement, Dictionary<string, LinkedListNode<ProjectTargetElement>> activeTargets, Dictionary<string, List<TargetSpecification>> targetsWhichRunBeforeByTarget, Dictionary<string, List<TargetSpecification>> targetsWhichRunAfterByTarget)
         {
-            var beforeTargets = _expander.ExpandIntoStringListLeaveEscaped(targetElement.BeforeTargets, ExpanderOptions.ExpandPropertiesAndItems, targetElement.BeforeTargetsLocation);
-            var afterTargets = _expander.ExpandIntoStringListLeaveEscaped(targetElement.AfterTargets, ExpanderOptions.ExpandPropertiesAndItems, targetElement.AfterTargetsLocation);
+            var beforeTargets = _expander.ExpandIntoStringListLeaveEscaped(targetElement.BeforeTargets, ExpanderOptions.ExpandPropertiesAndItems, targetElement.BeforeTargetsLocation, _evaluationLoggingContext);
+            var afterTargets = _expander.ExpandIntoStringListLeaveEscaped(targetElement.AfterTargets, ExpanderOptions.ExpandPropertiesAndItems, targetElement.AfterTargetsLocation, _evaluationLoggingContext);
 
             foreach (string beforeTarget in beforeTargets)
             {
@@ -1138,7 +1166,8 @@ private void AddBuiltInProperties()
             }
 
 #if RUNTIME_TYPE_NETCORE
-            SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType, "Core");
+            SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
+                Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core");
 #elif MONO
             SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
                                                         NativeMethodsShared.IsMono ? "Mono" : "Full");
@@ -1186,7 +1215,7 @@ private void AddEnvironmentProperties()
         {
             foreach (ProjectPropertyInstance environmentProperty in _environmentProperties)
             {
-                _data.SetProperty(environmentProperty.Name, ((IProperty)environmentProperty).EvaluatedValueEscaped, isGlobalProperty: false, mayBeReserved: false, isEnvironmentVariable: true);
+                _data.SetProperty(environmentProperty.Name, ((IProperty)environmentProperty).EvaluatedValueEscaped, isGlobalProperty: false, mayBeReserved: false, isEnvironmentVariable: true, loggingContext: _evaluationLoggingContext);
             }
         }
 
@@ -1227,7 +1256,6 @@ private void AddToolsetProperties()
                     }
                 }
             }
-
         }
 
         /// <summary>
@@ -1288,7 +1316,7 @@ private void EvaluatePropertyElement(ProjectPropertyElement propertyElement)
                 // it is the same as what we are setting the value on. Note: This needs to be set before we expand the property we are currently setting.
                 _expander.UsedUninitializedProperties.CurrentlyEvaluatingPropertyElementName = propertyElement.Name;
 
-                string evaluatedValue = _expander.ExpandIntoStringLeaveEscaped(propertyElement.Value, ExpanderOptions.ExpandProperties, propertyElement.Location);
+                string evaluatedValue = _expander.ExpandIntoStringLeaveEscaped(propertyElement.Value, ExpanderOptions.ExpandProperties, propertyElement.Location, _evaluationLoggingContext);
 
                 // If we are going to set a property to a value other than null or empty we need to check to see if it has been used
                 // during evaluation.
@@ -1823,7 +1851,7 @@ static string EvaluateProperty(string value, IElementLocation location,
 
                 if (!sdkResult.Success)
                 {
-                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) || !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk)))
+                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk))
                     {
                         ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                             importElement.Location.Line,
@@ -1878,7 +1906,7 @@ static string EvaluateProperty(string value, IElementLocation location,
                 {
                     projectList ??= new List<ProjectRootElement>();
 
-                    //  Inserting at the beginning will mean that the properties or items from the SdkResult will be evaluated before
+                    // Inserting at the beginning will mean that the properties or items from the SdkResult will be evaluated before
                     //  any projects from paths returned by the SDK Resolver.
                     projectList.Insert(0, CreateProjectForSdkResult(sdkResult));
                 }
@@ -1892,7 +1920,7 @@ static string EvaluateProperty(string value, IElementLocation location,
             }
         }
 
-        //  Creates a project to set the properties and include the items from an SdkResult
+        // Creates a project to set the properties and include the items from an SdkResult
         private ProjectRootElement CreateProjectForSdkResult(SdkResult sdkResult)
         {
             int propertiesAndItemsHash;
@@ -1935,7 +1963,7 @@ private ProjectRootElement CreateProjectForSdkResult(SdkResult sdkResult)
             propertiesAndItemsHash = hash.ToHashCode();
 #endif
 
-            //  Generate a unique filename for the generated project for each unique set of properties and items.
+            // Generate a unique filename for the generated project for each unique set of properties and items.
             string projectPath = _projectRootElement.FullPath + ".SdkResolver." + propertiesAndItemsHash + ".proj";
 
             ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
@@ -1993,7 +2021,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
         {
             imports = null;
 
-            string importExpressionEscaped = _expander.ExpandIntoStringLeaveEscaped(unescapedExpression, ExpanderOptions.ExpandProperties, importElement.ProjectLocation);
+            string importExpressionEscaped = _expander.ExpandIntoStringLeaveEscaped(unescapedExpression, ExpanderOptions.ExpandProperties, importElement.ProjectLocation, _evaluationLoggingContext);
             ElementLocation importLocationInProject = importElement.Location;
 
             if (String.IsNullOrWhiteSpace(importExpressionEscaped))
@@ -2042,7 +2070,13 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                     }
 
                     // Expand the wildcards and provide an alphabetical order list of import statements.
-                    importFilesEscaped = EngineFileUtilities.GetFileListEscaped(directoryOfImportingFile, importExpressionEscapedItem, forceEvaluate: true, fileMatcher: _evaluationContext.FileMatcher);
+                    importFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                        directoryOfImportingFile,
+                        importExpressionEscapedItem,
+                        forceEvaluate: true,
+                        fileMatcher: _evaluationContext.FileMatcher,
+                        loggingMechanism: _evaluationLoggingContext,
+                        importLocation: importLocationInProject);
                 }
                 catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))
                 {
@@ -2157,11 +2191,7 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                         // clearing the weak cache (and therefore setting explicitload=false) for projects the project system never
                         // was directly interested in (i.e. the ones that were reached for purposes of building a P2P.)
                         bool explicitlyLoaded = importElement.ContainingProject.IsExplicitlyLoaded;
-                        importedProjectElement = _projectRootElementCache.Get(
-                            importFileUnescaped,
-                            (p, c) =>
-                            {
-                                return ProjectRootElement.OpenProjectOrSolution(
+                        importedProjectElement = ProjectRootElement.OpenProjectOrSolution(
                                     importFileUnescaped,
                                     new ReadOnlyConvertingDictionary<string, ProjectPropertyInstance, string>(
                                         _data.GlobalPropertiesDictionary,
@@ -2169,10 +2199,6 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                                     _data.ExplicitToolsVersion,
                                     _projectRootElementCache,
                                     explicitlyLoaded);
-                            },
-                            explicitlyLoaded,
-                            // don't care about formatting, reuse whatever is there
-                            preserveFormatting: null);
 
                         if (duplicateImport)
                         {
@@ -2420,7 +2446,8 @@ private bool EvaluateCondition(ProjectElement element, string condition, Expande
                     element.ConditionLocation,
                     _evaluationLoggingContext.LoggingService,
                     _evaluationLoggingContext.BuildEventContext,
-                    _evaluationContext.FileSystem
+                    _evaluationContext.FileSystem,
+                    loggingContext: _evaluationLoggingContext
                     );
 
                 return result;
diff --git a/src/Build/Evaluation/EvaluatorMetadataTable.cs b/src/Build/Evaluation/EvaluatorMetadataTable.cs
index caab55331b3..686f524e965 100644
--- a/src/Build/Evaluation/EvaluatorMetadataTable.cs
+++ b/src/Build/Evaluation/EvaluatorMetadataTable.cs
@@ -9,6 +9,8 @@
 
 using EscapingUtilities = Microsoft.Build.Shared.EscapingUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 6e7151fcc60..88e5fea6c1b 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -19,7 +19,6 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using AvailableStaticMethods = Microsoft.Build.Internal.AvailableStaticMethods;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
@@ -27,6 +26,9 @@
 using TaskItemFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.TaskItemFactory;
 
 using Microsoft.NET.StringTools;
+using Microsoft.Build.BackEnd.Logging;
+
+#nullable disable
 
 namespace Microsoft.Build.Evaluation
 {
@@ -417,9 +419,9 @@ internal static bool ExpressionContainsItemVector(string expression)
         ///
         /// If ExpanderOptions.BreakOnNotEmpty was passed, expression was going to be non-empty, and it broke out early, returns null. Otherwise the result can be trusted.
         /// </summary>
-        internal string ExpandIntoStringAndUnescape(string expression, ExpanderOptions options, IElementLocation elementLocation)
+        internal string ExpandIntoStringAndUnescape(string expression, ExpanderOptions options, IElementLocation elementLocation, LoggingContext loggingContext = null)
         {
-            string result = ExpandIntoStringLeaveEscaped(expression, options, elementLocation);
+            string result = ExpandIntoStringLeaveEscaped(expression, options, elementLocation, loggingContext);
 
             return (result == null) ? null : EscapingUtilities.UnescapeAll(result);
         }
@@ -431,7 +433,7 @@ internal string ExpandIntoStringAndUnescape(string expression, ExpanderOptions o
         ///
         /// If ExpanderOptions.BreakOnNotEmpty was passed, expression was going to be non-empty, and it broke out early, returns null. Otherwise the result can be trusted.
         /// </summary>
-        internal string ExpandIntoStringLeaveEscaped(string expression, ExpanderOptions options, IElementLocation elementLocation)
+        internal string ExpandIntoStringLeaveEscaped(string expression, ExpanderOptions options, IElementLocation elementLocation, LoggingContext loggingContext = null)
         {
             if (expression.Length == 0)
             {
@@ -441,7 +443,7 @@ internal string ExpandIntoStringLeaveEscaped(string expression, ExpanderOptions
             ErrorUtilities.VerifyThrowInternalNull(elementLocation, nameof(elementLocation));
 
             string result = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options, elementLocation);
-            result = PropertyExpander<P>.ExpandPropertiesLeaveEscaped(result, _properties, options, elementLocation, _usedUninitializedProperties, _fileSystem);
+            result = PropertyExpander<P>.ExpandPropertiesLeaveEscaped(result, _properties, options, elementLocation, _usedUninitializedProperties, _fileSystem, loggingContext);
             result = ItemExpander.ExpandItemVectorsIntoString<I>(this, result, _items, options, elementLocation);
             result = FileUtilities.MaybeAdjustFilePath(result);
 
@@ -471,11 +473,11 @@ internal object ExpandPropertiesLeaveTypedAndEscaped(string expression, Expander
         /// Use this form when the result is going to be processed further, for example by matching against the file system,
         /// so literals must be distinguished, and you promise to unescape after that.
         /// </summary>
-        internal SemiColonTokenizer ExpandIntoStringListLeaveEscaped(string expression, ExpanderOptions options, IElementLocation elementLocation)
+        internal SemiColonTokenizer ExpandIntoStringListLeaveEscaped(string expression, ExpanderOptions options, IElementLocation elementLocation, LoggingContext loggingContext = null)
         {
             ErrorUtilities.VerifyThrow((options & ExpanderOptions.BreakOnNotEmpty) == 0, "not supported");
 
-            return ExpressionShredder.SplitSemiColonSeparatedList(ExpandIntoStringLeaveEscaped(expression, options, elementLocation));
+            return ExpressionShredder.SplitSemiColonSeparatedList(ExpandIntoStringLeaveEscaped(expression, options, elementLocation, loggingContext));
         }
 
         /// <summary>
@@ -1075,7 +1077,8 @@ internal static string ExpandPropertiesLeaveEscaped(
                 ExpanderOptions options,
                 IElementLocation elementLocation,
                 UsedUninitializedProperties usedUninitializedProperties,
-                IFileSystem fileSystem)
+                IFileSystem fileSystem,
+                LoggingContext loggingContext = null)
             {
                 return
                     ConvertToString(
@@ -1085,7 +1088,8 @@ internal static string ExpandPropertiesLeaveEscaped(
                             options,
                             elementLocation,
                             usedUninitializedProperties,
-                            fileSystem));
+                            fileSystem,
+                            loggingContext));
             }
 
             /// <summary>
@@ -1111,7 +1115,8 @@ internal static object ExpandPropertiesLeaveTypedAndEscaped(
                 ExpanderOptions options,
                 IElementLocation elementLocation,
                 UsedUninitializedProperties usedUninitializedProperties,
-                IFileSystem fileSystem)
+                IFileSystem fileSystem,
+                LoggingContext loggingContext = null)
             {
                 if (((options & ExpanderOptions.ExpandProperties) == 0) || String.IsNullOrEmpty(expression))
                 {
@@ -1187,12 +1192,11 @@ internal static object ExpandPropertiesLeaveTypedAndEscaped(
                         }
                         else if ((expression.Length - (propertyStartIndex + 2)) > 9 && tryExtractRegistryFunction && s_invariantCompareInfo.IndexOf(expression, "Registry:", propertyStartIndex + 2, 9, CompareOptions.OrdinalIgnoreCase) == propertyStartIndex + 2)
                         {
-                            // if FEATURE_WIN32_REGISTRY is off, treat the property value as if there's no Registry value at that location, rather than fail
                             propertyBody = expression.Substring(propertyStartIndex + 2, propertyEndIndex - propertyStartIndex - 2);
 
                             // If the property body starts with any of our special objects, then deal with them
                             // This is a registry reference, like $(Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation)
-                            propertyValue = ExpandRegistryValue(propertyBody, elementLocation); // This func returns an empty string if not FEATURE_WIN32_REGISTRY
+                            propertyValue = ExpandRegistryValue(propertyBody, elementLocation); // This func returns an empty string if not on Windows
                         }
 
                         // Compat hack: as a special case, $(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\VSTSDB@VSTSDBDirectory) should return String.Empty
@@ -1226,7 +1230,7 @@ internal static object ExpandPropertiesLeaveTypedAndEscaped(
                         }
                         else // This is a regular property
                         {
-                            propertyValue = LookupProperty(properties, expression, propertyStartIndex + 2, propertyEndIndex - 1, elementLocation, usedUninitializedProperties);
+                            propertyValue = LookupProperty(properties, expression, propertyStartIndex + 2, propertyEndIndex - 1, elementLocation, usedUninitializedProperties, loggingContext);
                         }
 
                         if (propertyValue != null)
@@ -1464,7 +1468,7 @@ private static object LookupProperty(IPropertyProvider<T> properties, string pro
             /// <summary>
             /// Look up a simple property reference by the name of the property, e.g. "Foo" when expanding $(Foo).
             /// </summary>
-            private static object LookupProperty(IPropertyProvider<T> properties, string propertyName, int startIndex, int endIndex, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)
+            private static object LookupProperty(IPropertyProvider<T> properties, string propertyName, int startIndex, int endIndex, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, LoggingContext loggingContext = null)
             {
                 T property = properties.GetProperty(propertyName, startIndex, endIndex);
 
@@ -1509,6 +1513,11 @@ private static object LookupProperty(IPropertyProvider<T> properties, string pro
                 }
                 else
                 {
+                    if (property is ProjectPropertyInstance.EnvironmentDerivedProjectPropertyInstance environmentDerivedProperty)
+                    {
+                        environmentDerivedProperty.loggingContext = loggingContext;
+                    }
+
                     propertyValue = property.EvaluatedValueEscaped;
                 }
 
@@ -1568,7 +1577,6 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen
                 return value;
             }
 
-#if FEATURE_WIN32_REGISTRY
             /// <summary>
             /// Given a string like "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation", return the value at that location
             /// in the registry. If the value isn't found, returns String.Empty.
@@ -1579,6 +1587,16 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen
             /// </summary>
             private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)
             {
+#if RUNTIME_TYPE_NETCORE
+                // .NET Core MSBuild used to always return empty, so match that behavior
+                // on non-Windows (no registry), and with a changewave (in case someone
+                // had a registry property and it breaks when it lights up).
+                if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+                {
+                    return string.Empty;
+                }
+#endif
+
                 // Remove "Registry:" prefix
                 string registryLocation = registryExpression.Substring(9);
 
@@ -1644,28 +1662,14 @@ private static string ExpandRegistryValue(string registryExpression, IElementLoc
                             result = String.Empty;
                         }
                     }
-                    catch (Exception ex)
+                    catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
                     {
-                        if (ExceptionHandling.NotExpectedRegistryException(ex))
-                        {
-                            throw;
-                        }
-
                         ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidRegistryPropertyExpression", "$(" + registryExpression + ")", ex.Message);
                     }
                 }
 
                 return result;
             }
-#else
-            /// <summary>
-            /// Given a string like "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation", returns String.Empty, as FEATURE_WIN32_REGISTRY is off.
-            /// </summary>
-            private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)
-            {
-                return String.Empty;
-            }
-#endif
         }
 
         /// <summary>
@@ -2213,7 +2217,7 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation
                             }
                             catch (ArgumentException)
                             {
-                                //  Prior to porting to .NET Core, this code was passing false as the throwOnBindFailure parameter to Delegate.CreateDelegate.
+                                // Prior to porting to .NET Core, this code was passing false as the throwOnBindFailure parameter to Delegate.CreateDelegate.
                                 //  Since MethodInfo.CreateDelegate doesn't have this option, we catch the ArgumentException to preserve the previous behavior
                                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "UnknownItemFunction", functionName);
                             }
@@ -2243,8 +2247,7 @@ internal static IEnumerable<Pair<string, S>> GetItemPairEnumerable(IEnumerable<S
                     {
                         if (Traits.Instance.UseLazyWildCardEvaluation)
                         {
-                            foreach (
-                                var resultantItem in
+                            foreach (var resultantItem in
                                 EngineFileUtilities.GetFileListEscaped(
                                     item.ProjectDirectory,
                                     item.EvaluatedIncludeEscaped,
@@ -2297,15 +2300,10 @@ internal static IEnumerable<Pair<string, S>> ItemSpecModifierFunction(Expander<P
 
                             result = FileUtilities.ItemSpecModifiers.GetItemSpecModifier(directoryToUse, item.Key, definingProjectEscaped, functionName);
                         }
-                        catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                        // InvalidOperationException is how GetItemSpecModifier communicates invalid conditions upwards, so
+                        // we do not want to rethrow in that case.
+                        catch (Exception e) when (!ExceptionHandling.NotExpectedException(e) || e is InvalidOperationException)
                         {
-                            // InvalidOperationException is how GetItemSpecModifier communicates invalid conditions upwards, so
-                            // we do not want to rethrow in that case.
-                            if (ExceptionHandling.NotExpectedException(e) && !(e is InvalidOperationException))
-                            {
-                                throw;
-                            }
-
                             ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidItemFunctionExpression", functionName, item.Key, e.Message);
                         }
 
@@ -3392,9 +3390,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                         // The object that we're about to call methods on may have escaped characters
                         // in it, we want to operate on the unescaped string in the function, just as we
                         // want to pass arguments that are unescaped (see below)
-                        if (objectInstance is string)
+                        if (objectInstance is string objectInstanceString)
                         {
-                            objectInstance = EscapingUtilities.UnescapeAll((string)objectInstance);
+                            objectInstance = EscapingUtilities.UnescapeAll(objectInstanceString);
                         }
                     }
 
@@ -3504,33 +3502,26 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                                 // First use InvokeMember using the standard binder - this will match and coerce as needed
                                 functionResult = _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture);
                             }
-                            catch (MissingMethodException ex) // Don't catch and retry on any other exception
+                            // If we're invoking a method, then there are deeper attempts that can be made to invoke the method.
+                            // If not, we were asked to get a property or field but found that we cannot locate it. No further argument coersion is possible, so throw.
+                            catch (MissingMethodException ex) when ((_bindingFlags & BindingFlags.InvokeMethod) == BindingFlags.InvokeMethod)
                             {
-                                // If we're invoking a method, then there are deeper attempts that
-                                // can be made to invoke the method
-                                if ((_bindingFlags & BindingFlags.InvokeMethod) == BindingFlags.InvokeMethod)
-                                {
-                                    // The standard binder failed, so do our best to coerce types into the arguments for the function
-                                    // This may happen if the types need coercion, but it may also happen if the object represents a type that contains open type parameters, that is, ContainsGenericParameters returns true.
-                                    functionResult = LateBindExecute(ex, _bindingFlags, objectInstance, args, false /* is not constructor */);
-                                }
-                                else
-                                {
-                                    // We were asked to get a property or field, and we found that we cannot
-                                    // locate it. Since there is no further argument coersion possible
-                                    // we'll throw right now.
-                                    throw;
-                                }
+                                // The standard binder failed, so do our best to coerce types into the arguments for the function
+                                // This may happen if the types need coercion, but it may also happen if the object represents a type that contains open type parameters, that is, ContainsGenericParameters returns true.
+                                functionResult = LateBindExecute(ex, _bindingFlags, objectInstance, args, false /* is not constructor */);
                             }
                         }
                     }
 
                     // If the result of the function call is a string, then we need to escape the result
                     // so that we maintain the "engine contains escaped data" state.
-                    // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape
-                    if (functionResult is string && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                    // The exception is that the user is explicitly calling MSBuild::Unescape, MSBuild::Escape, or ConvertFromBase64
+                    if (functionResult is string functionResultString &&
+                        !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) &&
+                        !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase) &&
+                        !String.Equals("ConvertFromBase64", _methodMethodName, StringComparison.OrdinalIgnoreCase))
                     {
-                        functionResult = EscapingUtilities.Escape((string)functionResult);
+                        functionResult = EscapingUtilities.Escape(functionResultString);
                     }
 
                     // We have nothing left to parse, so we'll return what we have
@@ -3565,13 +3556,8 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                 }
 
                 // Any other exception was thrown by trying to call it
-                catch (Exception ex)
+                catch (Exception ex) when (!ExceptionHandling.NotExpectedFunctionException(ex))
                 {
-                    if (ExceptionHandling.NotExpectedFunctionException(ex))
-                    {
-                        throw;
-                    }
-
                     // If there's a :: in the expression, they were probably trying for a static function
                     // invocation. Give them some more relevant info in that case
                     if (s_invariantCompareInfo.IndexOf(_expression, "::", CompareOptions.OrdinalIgnoreCase) > -1)
@@ -3785,9 +3771,8 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                     }
                 }
-                else if (objectInstance is string[])
+                else if (objectInstance is string[] stringArray)
                 {
-                    string[] stringArray = (string[])objectInstance;
                     if (string.Equals(_methodMethodName, "GetValue", StringComparison.OrdinalIgnoreCase))
                     {
                         if (TryGetArg(args, out int index))
@@ -4098,6 +4083,22 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                                 return true;
                             }
                         }
+                        else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.ConvertToBase64), StringComparison.OrdinalIgnoreCase))
+                        {
+                            if (TryGetArg(args, out string arg0))
+                            {
+                                returnVal = IntrinsicFunctions.ConvertToBase64(arg0);
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.ConvertFromBase64), StringComparison.OrdinalIgnoreCase))
+                        {
+                            if (TryGetArg(args, out string arg0))
+                            {
+                                returnVal = IntrinsicFunctions.ConvertFromBase64(arg0);
+                                return true;
+                            }
+                        }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.StableStringHash), StringComparison.OrdinalIgnoreCase))
                         {
                             if (TryGetArg(args, out string arg0))
diff --git a/src/Build/Evaluation/ExpressionShredder.cs b/src/Build/Evaluation/ExpressionShredder.cs
index 1ea8786cf67..79d4de04eb6 100644
--- a/src/Build/Evaluation/ExpressionShredder.cs
+++ b/src/Build/Evaluation/ExpressionShredder.cs
@@ -9,6 +9,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IEvaluatorData.cs b/src/Build/Evaluation/IEvaluatorData.cs
index 7e2c9c5c85c..497207e7024 100644
--- a/src/Build/Evaluation/IEvaluatorData.cs
+++ b/src/Build/Evaluation/IEvaluatorData.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Evaluation.Context;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -265,7 +267,7 @@ List<ProjectItemElement> EvaluatedItemElements
         /// <summary>
         /// Sets a property which does not come from the Xml.
         /// </summary>
-        P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false);
+        P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, BackEnd.Logging.LoggingContext loggingContext = null);
 
         /// <summary>
         /// Sets a property which comes from the Xml.
diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index 197cd8389e6..63ee0e41e3e 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IItemDefinition.cs b/src/Build/Evaluation/IItemDefinition.cs
index c9d41bf5453..a1be67f9a98 100644
--- a/src/Build/Evaluation/IItemDefinition.cs
+++ b/src/Build/Evaluation/IItemDefinition.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IItemFactory.cs b/src/Build/Evaluation/IItemFactory.cs
index bcd3b91211f..e888059ee97 100644
--- a/src/Build/Evaluation/IItemFactory.cs
+++ b/src/Build/Evaluation/IItemFactory.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IItemProvider.cs b/src/Build/Evaluation/IItemProvider.cs
index 2bd826a481a..cba344f2553 100644
--- a/src/Build/Evaluation/IItemProvider.cs
+++ b/src/Build/Evaluation/IItemProvider.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IMetadataTable.cs b/src/Build/Evaluation/IMetadataTable.cs
index 5f95f3a8f08..8dbc16dc63a 100644
--- a/src/Build/Evaluation/IMetadataTable.cs
+++ b/src/Build/Evaluation/IMetadataTable.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IMetadatum.cs b/src/Build/Evaluation/IMetadatum.cs
index 5521a562ea6..2c7618c22d1 100644
--- a/src/Build/Evaluation/IMetadatum.cs
+++ b/src/Build/Evaluation/IMetadatum.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IProjectMetadataParent.cs b/src/Build/Evaluation/IProjectMetadataParent.cs
index ef432656ff8..74c4ad1e2d8 100644
--- a/src/Build/Evaluation/IProjectMetadataParent.cs
+++ b/src/Build/Evaluation/IProjectMetadataParent.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IProperty.cs b/src/Build/Evaluation/IProperty.cs
index bdaedfcaff7..ed57eef4ea3 100644
--- a/src/Build/Evaluation/IProperty.cs
+++ b/src/Build/Evaluation/IProperty.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IPropertyProvider.cs b/src/Build/Evaluation/IPropertyProvider.cs
index 6b293c4c108..715cf119a36 100644
--- a/src/Build/Evaluation/IPropertyProvider.cs
+++ b/src/Build/Evaluation/IPropertyProvider.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IToolsetProvider.cs b/src/Build/Evaluation/IToolsetProvider.cs
index 46bbb505063..1b9e76836a4 100644
--- a/src/Build/Evaluation/IToolsetProvider.cs
+++ b/src/Build/Evaluation/IToolsetProvider.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 479d5578559..ce0f37bbd56 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
+using System.Text;
 using System.Text.RegularExpressions;
 
 using Microsoft.Build.Framework;
@@ -17,6 +19,8 @@
 // Needed for DoesTaskHostExistForParameters
 using NodeProviderOutOfProcTaskHost = Microsoft.Build.BackEnd.NodeProviderOutOfProcTaskHost;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -25,11 +29,11 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal static class IntrinsicFunctions
     {
-#if FEATURE_WIN32_REGISTRY
+#pragma warning disable CA1416 // Platform compatibility: we'll only use this on Windows
         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };
+#pragma warning restore CA1416
 
         private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@"^HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v(\d+\.\d+)$", RegexOptions.IgnoreCase));
-#endif // FEATURE_WIN32_REGISTRY
 
         private static readonly Lazy<NuGetFrameworkWrapper> NuGetFramework = new Lazy<NuGetFrameworkWrapper>(() => new NuGetFrameworkWrapper());
 
@@ -161,12 +165,20 @@ internal static int BitwiseNot(int first)
             return ~first;
         }
 
-#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Get the value of the registry key and value, default value is null
         /// </summary>
         internal static object GetRegistryValue(string keyName, string valueName)
         {
+#if RUNTIME_TYPE_NETCORE
+            // .NET Core MSBuild used to always return empty, so match that behavior
+            // on non-Windows (no registry), and with a changewave (in case someone
+            // had a registry property and it breaks when it lights up).
+            if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                return null;
+            }
+#endif
             return Registry.GetValue(keyName, valueName, null /* null to match the $(Regsitry:XYZ@ZBC) behaviour */);
         }
 
@@ -175,11 +187,30 @@ internal static object GetRegistryValue(string keyName, string valueName)
         /// </summary>
         internal static object GetRegistryValue(string keyName, string valueName, object defaultValue)
         {
+#if RUNTIME_TYPE_NETCORE
+            // .NET Core MSBuild used to always return empty, so match that behavior
+            // on non-Windows (no registry), and with a changewave (in case someone
+            // had a registry property and it breaks when it lights up).
+            if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                return defaultValue;
+            }
+#endif
             return Registry.GetValue(keyName, valueName, defaultValue);
         }
 
         internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)
         {
+#if RUNTIME_TYPE_NETCORE
+            // .NET Core MSBuild used to always return empty, so match that behavior
+            // on non-Windows (no registry), and with a changewave (in case someone
+            // had a registry property and it breaks when it lights up).
+            if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                return defaultValue;
+            }
+#endif
+
             if (views == null || views.Length == 0)
             {
                 views = DefaultRegistryViews;
@@ -193,6 +224,16 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
         /// </summary>
         internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, ArraySegment<object> views)
         {
+#if RUNTIME_TYPE_NETCORE
+            // .NET Core MSBuild used to always return empty, so match that behavior
+            // on non-Windows (no registry), and with a changewave (in case someone
+            // had a registry property and it breaks when it lights up).
+            if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                return defaultValue;
+            }
+#endif
+
             // We will take on handing of default value
             // A we need to act on the null return from the GetValue call below
             // so we can keep searching other registry views
@@ -260,33 +301,6 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
             return result;
         }
 
-#else // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors
-
-        /// <summary>
-        /// Get the value of the registry key and value, default value is null
-        /// </summary>
-        internal static object GetRegistryValue(string keyName, string valueName)
-        {
-            return null; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors
-        }
-
-        /// <summary>
-        /// Get the value of the registry key and value
-        /// </summary>
-        internal static object GetRegistryValue(string keyName, string valueName, object defaultValue)
-        {
-            return defaultValue; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors
-        }
-
-        /// <summary>
-        /// Get the value of the registry key from one of the RegistryView's specified
-        /// </summary>
-        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)
-        {
-            return defaultValue; // FEATURE_WIN32_REGISTRY is off, need to mock the function names to let scrips call these property functions and get NULLs rather than fail with errors
-        }
-#endif
-
         /// <summary>
         /// Given the absolute location of a file, and a disc location, returns relative file path to that disk location.
         /// Throws UriFormatException.
@@ -348,7 +362,27 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue
             }
         }
 
-        ///<summary>
+        /// <summary>
+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
+        /// </summary>
+        /// <param name="toEncode">String to encode in base 64.</param>
+        /// <returns>The encoded string.</returns>
+        internal static string ConvertToBase64(string toEncode)
+        {
+            return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));
+        }
+
+        /// <summary>
+        /// Returns the string after converting from base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
+        /// </summary>
+        /// <param name="toDecode">The string to decode.</param>
+        /// <returns>The decoded string.</returns>
+        internal static string ConvertFromBase64(string toDecode)
+        {
+            return Encoding.UTF8.GetString(Convert.FromBase64String(toDecode));
+        }
+
+        /// <summary>
         /// Hash the string independent of bitness and target framework.
         /// </summary>
         internal static int StableStringHash(string toHash)
@@ -572,7 +606,6 @@ internal static List<string> __GetListTest()
 
 #endregion
 
-#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Following function will parse a keyName and returns the basekey for it.
         /// It will also store the subkey name in the out parameter.
@@ -580,6 +613,7 @@ internal static List<string> __GetListTest()
         /// The return value shouldn't be null.
         /// Taken from: \ndp\clr\src\BCL\Microsoft\Win32\Registry.cs
         /// </summary>
+        [SupportedOSPlatform("windows")]
         private static RegistryKey GetBaseKeyFromKeyName(string keyName, RegistryView view, out string subKeyName)
         {
             if (keyName == null)
@@ -641,6 +675,5 @@ private static RegistryKey GetBaseKeyFromKeyName(string keyName, RegistryView vi
 
             return basekey;
         }
-#endif
     }
 }
diff --git a/src/Build/Evaluation/ItemDataCollectionValue.cs b/src/Build/Evaluation/ItemDataCollectionValue.cs
index 15807cc996d..5671a9d96ca 100644
--- a/src/Build/Evaluation/ItemDataCollectionValue.cs
+++ b/src/Build/Evaluation/ItemDataCollectionValue.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 5cd47ea797b..d7f58c8088a 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -4,10 +4,13 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -154,23 +157,25 @@ private bool InitReferencedItemsIfNecessary()
         /// <param name="itemSpecLocation">The xml location the itemspec comes from</param>
         /// <param name="projectDirectory">The directory that the project is in.</param>
         /// <param name="expandProperties">Expand properties before breaking down fragments. Defaults to true</param>
+        /// <param name="loggingContext">Context in which to log</param>
         public ItemSpec(
             string itemSpec,
             Expander<P, I> expander,
             IElementLocation itemSpecLocation,
             string projectDirectory,
-            bool expandProperties = true)
+            bool expandProperties = true,
+            LoggingContext loggingContext = null)
         {
             ItemSpecString = itemSpec;
             Expander = expander;
             ItemSpecLocation = itemSpecLocation;
 
-            Fragments = BuildItemFragments(itemSpecLocation, projectDirectory, expandProperties);
+            Fragments = BuildItemFragments(itemSpecLocation, projectDirectory, expandProperties, loggingContext);
         }
 
-        private List<ItemSpecFragment> BuildItemFragments(IElementLocation itemSpecLocation, string projectDirectory, bool expandProperties)
+        private List<ItemSpecFragment> BuildItemFragments(IElementLocation itemSpecLocation, string projectDirectory, bool expandProperties, LoggingContext loggingContext)
         {
-            //  Code corresponds to Evaluator.CreateItemsFromInclude
+            // Code corresponds to Evaluator.CreateItemsFromInclude
             var evaluatedItemspecEscaped = ItemSpecString;
 
             if (string.IsNullOrEmpty(evaluatedItemspecEscaped))
@@ -184,7 +189,8 @@ private List<ItemSpecFragment> BuildItemFragments(IElementLocation itemSpecLocat
                 evaluatedItemspecEscaped = Expander.ExpandIntoStringLeaveEscaped(
                     ItemSpecString,
                     ExpanderOptions.ExpandProperties,
-                    itemSpecLocation);
+                    itemSpecLocation,
+                    loggingContext);
             }
 
             var semicolonCount = 0;
@@ -221,7 +227,7 @@ private List<ItemSpecFragment> BuildItemFragments(IElementLocation itemSpecLocat
                     {
                         // The expression is not of the form "@(X)". Treat as string
 
-                        //  Code corresponds to EngineFileUtilities.GetFileList
+                        // Code corresponds to EngineFileUtilities.GetFileList
                         if (!FileMatcher.HasWildcards(splitEscaped))
                         {
                             // No real wildcards means we just return the original string.  Don't even bother
@@ -259,7 +265,7 @@ private ItemExpressionFragment ProcessItemExpression(
         {
             isItemListExpression = false;
 
-            //  Code corresponds to Expander.ExpandSingleItemVectorExpressionIntoItems
+            // Code corresponds to Expander.ExpandSingleItemVectorExpressionIntoItems
             if (expression.Length == 0)
             {
                 return null;
diff --git a/src/Build/Evaluation/ItemsAndMetadataPair.cs b/src/Build/Evaluation/ItemsAndMetadataPair.cs
index 5e9841d34e1..9385d06ddd7 100644
--- a/src/Build/Evaluation/ItemsAndMetadataPair.cs
+++ b/src/Build/Evaluation/ItemsAndMetadataPair.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -67,4 +69,4 @@ internal Dictionary<string, MetadataReference> Metadata
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
index c493969feb5..ecae588cd20 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
@@ -9,6 +9,9 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Execution;
+using Microsoft.Build.BackEnd.Logging;
+
+#nullable disable
 
 namespace Microsoft.Build.Evaluation
 {
@@ -305,11 +308,10 @@ public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedVal
                 return _wrappedData.SetProperty(propertyElement, evaluatedValueEscaped);
             }
 
-            public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false)
+            public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, LoggingContext loggingContext = null)
             {
-                return _wrappedData.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved);
+                return _wrappedData.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext: loggingContext);
             }
         }
     }
-    
 }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
index 40ee16b1d88..7d9b469564a 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Immutable;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index c67b057ae9e..ce0dc977426 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -13,6 +13,8 @@
 using System.Collections.Immutable;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
@@ -109,15 +111,19 @@ protected override ImmutableList<I> SelectItems(OrderedItemDataCollection.Builde
                             {
                                 MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory, glob, string.Join(", ", excludePatternsForGlobs));
                             }
+
                             using (_lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
                             {
                                 includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
                                     _rootDirectory,
                                     glob,
                                     excludePatternsForGlobs,
-                                    fileMatcher: FileMatcher
-                                );
+                                    fileMatcher: FileMatcher,
+                                    loggingMechanism: _lazyEvaluator._loggingContext,
+                                    includeLocation: _itemElement.IncludeLocation,
+                                    excludeLocation: _itemElement.ExcludeLocation);
                             }
+
                             if (MSBuildEventSource.Log.IsEnabled())
                             {
                                 MSBuildEventSource.Log.ExpandGlobStop(_rootDirectory, glob, string.Join(", ", excludePatternsForGlobs));
diff --git a/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs b/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
index 779491c3049..9bda1d32cdf 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.ItemFactoryWrapper.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index e574a4567f2..f0c19a5c681 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -11,6 +11,8 @@
 using System.Diagnostics;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
@@ -27,7 +29,7 @@ private abstract class LazyItemOperation : IItemOperation
             protected readonly Expander<P, I> _expander;
             protected readonly bool _conditionResult;
 
-            //  This is used only when evaluating an expression, which instantiates
+            // This is used only when evaluating an expression, which instantiates
             //  the items and then removes them
             protected readonly IItemFactory<I, I> _itemFactory;
             internal ItemSpec<P, I> Spec => _itemSpec;
@@ -260,7 +262,7 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                                 continue;
                             }
 
-                            string evaluatedValue = _expander.ExpandIntoStringLeaveEscaped(metadataElement.Value, metadataExpansionOptions, metadataElement.Location);
+                            string evaluatedValue = _expander.ExpandIntoStringLeaveEscaped(metadataElement.Value, metadataExpansionOptions, metadataElement.Location, _lazyEvaluator._loggingContext);
                             evaluatedValue = FileUtilities.MaybeAdjustFilePath(evaluatedValue, metadataElement.ContainingProject.DirectoryPath);
 
                             metadataTable.SetValue(metadataElement, evaluatedValue);
diff --git a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
index e56334b81a7..9459e49067d 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Collections.Immutable;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
@@ -50,7 +52,11 @@ internal Builder(ImmutableList<ItemData>.Builder listBuilder)
 
                 public ItemData this[int index]
                 {
-                    get { return _listBuilder[index]; }
+                    get
+                    {
+                        return _listBuilder[index];
+                    }
+
                     set
                     {
                         // Update the dictionary if it exists.
@@ -76,7 +82,6 @@ public ItemData this[int index]
                                 ItemDataCollectionValue<I> newDictionaryEntry = _dictionaryBuilder[newNormalizedValue];
                                 newDictionaryEntry.Add(value.Item);
                                 _dictionaryBuilder[newNormalizedValue] = newDictionaryEntry;
-
                             }
                             else
                             {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 5604b9b96b0..b742bb23311 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -9,6 +9,8 @@
 using System.Collections.Immutable;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
@@ -28,7 +30,7 @@ public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M
                     new BuildEventFileInfo(string.Empty),
                     "OM_MatchOnMetadataIsRestrictedToReferencedItems");
 
-                if (!_matchOnMetadata.IsEmpty)
+                if (_matchOnMetadata.Any())
                 {
                     _metadataSet = new MetadataTrie<P, I>(builder.MatchOnMetadataOptions, _matchOnMetadata, _itemSpec);
                 }
@@ -47,7 +49,7 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                     return;
                 }
 
-                bool matchingOnMetadata = !_matchOnMetadata.IsEmpty;
+                bool matchingOnMetadata = _matchOnMetadata.Any();
                 if (!matchingOnMetadata)
                 {
                     if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 349a561c231..612c1a8d9d1 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -9,6 +9,8 @@
 using System.Linq;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 99dc789d996..871ad820e6a 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -18,6 +18,8 @@
 using System.Linq;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
@@ -97,7 +99,8 @@ LazyItemEvaluator<P, I, M, D> lazyEvaluator
                     element.ConditionLocation,
                     lazyEvaluator._loggingContext.LoggingService,
                     lazyEvaluator._loggingContext.BuildEventContext,
-                    lazyEvaluator.FileSystem
+                    lazyEvaluator.FileSystem,
+                    loggingContext: lazyEvaluator._loggingContext
                     );
                 MSBuildEventSource.Log.EvaluateConditionStop(condition, result);
 
@@ -341,7 +344,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI
                         break;
                     }
 
-                    //  If this is a remove operation, then add any globs that will be removed
+                    // If this is a remove operation, then add any globs that will be removed
                     //  to a list of globs to ignore in previous operations
                     if (currentList._memoizedOperation.Operation is RemoveOperation removeOperation)
                     {
@@ -369,7 +372,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI
                 Dictionary<string, UpdateOperation> itemsWithNoWildcards = new Dictionary<string, UpdateOperation>(StringComparer.OrdinalIgnoreCase);
                 bool addedToBatch = false;
 
-                //  Walk back down the stack of item lists applying operations
+                // Walk back down the stack of item lists applying operations
                 while (itemListStack.Count > 0)
                 {
                     var currentList = itemListStack.Pop();
@@ -422,7 +425,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI
                         ProcessNonWildCardItemUpdates(itemsWithNoWildcards, items);
                     }
 
-                    //  If this is a remove operation, then it could modify the globs to ignore, so pop the potentially
+                    // If this is a remove operation, then it could modify the globs to ignore, so pop the potentially
                     //  modified entry off the stack of globs to ignore
                     if (currentList._memoizedOperation.Operation is RemoveOperation)
                     {
@@ -448,7 +451,8 @@ private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOpera
                 {
                     for (int i = 0; i < items.Count; i++)
                     {
-                        if (itemsWithNoWildcards.TryGetValue(FileUtilities.GetFullPath(items[i].Item.EvaluatedInclude, items[i].Item.ProjectDirectory), out UpdateOperation op))
+                        string fullPath = FileUtilities.GetFullPath(items[i].Item.EvaluatedIncludeEscaped, items[i].Item.ProjectDirectory);
+                        if (itemsWithNoWildcards.TryGetValue(fullPath, out UpdateOperation op))
                         {
                             items[i] = op.UpdateItem(items[i]);
                         }
@@ -558,12 +562,12 @@ private IncludeOperation BuildIncludeOperation(string rootDirectory, ProjectItem
             // Process include
             ProcessItemSpec(rootDirectory, itemElement.Include, itemElement.IncludeLocation, operationBuilder);
 
-            //  Code corresponds to Evaluator.EvaluateItemElement
+            // Code corresponds to Evaluator.EvaluateItemElement
 
             // Process exclude (STEP 4: Evaluate, split, expand and subtract any Exclude)
             if (itemElement.Exclude.Length > 0)
             {
-                //  Expand properties here, because a property may have a value which is an item reference (ie "@(Bar)"), and
+                // Expand properties here, because a property may have a value which is an item reference (ie "@(Bar)"), and
                 //  if so we need to add the right item reference
                 string evaluatedExclude = _expander.ExpandIntoStringLeaveEscaped(itemElement.Exclude, ExpanderOptions.ExpandProperties, itemElement.ExcludeLocation);
 
@@ -621,7 +625,7 @@ private RemoveOperation BuildRemoveOperation(string rootDirectory, ProjectItemEl
 
         private void ProcessItemSpec(string rootDirectory, string itemSpec, IElementLocation itemSpecLocation, OperationBuilder builder)
         {
-            builder.ItemSpec = new ItemSpec<P, I>(itemSpec, _outerExpander, itemSpecLocation, rootDirectory);
+            builder.ItemSpec = new ItemSpec<P, I>(itemSpec, _outerExpander, itemSpecLocation, rootDirectory, loggingContext: _loggingContext);
 
             foreach (ItemSpecFragment fragment in builder.ItemSpec.Fragments)
             {
@@ -632,7 +636,7 @@ private void ProcessItemSpec(string rootDirectory, string itemSpec, IElementLoca
             }
         }
 
-        private static IEnumerable<string> GetExpandedMetadataValuesAndConditions(ICollection<ProjectMetadataElement> metadata, Expander<P, I> expander)
+        private static IEnumerable<string> GetExpandedMetadataValuesAndConditions(ICollection<ProjectMetadataElement> metadata, Expander<P, I> expander, LoggingContext loggingContext = null)
         {
             // Since we're just attempting to expand properties in order to find referenced items and not expanding metadata,
             // unexpected errors may occur when evaluating property functions on unexpanded metadata. Just ignore them if that happens.
@@ -646,7 +650,8 @@ private static IEnumerable<string> GetExpandedMetadataValuesAndConditions(IColle
                 yield return expander.ExpandIntoStringLeaveEscaped(
                     metadatumElement.Value,
                     expanderOptions,
-                    metadatumElement.Location);
+                    metadatumElement.Location,
+                    loggingContext);
 
                 yield return expander.ExpandIntoStringLeaveEscaped(
                     metadatumElement.Condition,
@@ -661,7 +666,7 @@ private void ProcessMetadataElements(ProjectItemElement itemElement, OperationBu
             {
                 operationBuilder.Metadata.AddRange(itemElement.Metadata);
 
-                var itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(GetExpandedMetadataValuesAndConditions(itemElement.Metadata, _expander));
+                var itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(GetExpandedMetadataValuesAndConditions(itemElement.Metadata, _expander, _loggingContext));
                 if (itemsAndMetadataFound.Items != null)
                 {
                     foreach (var itemType in itemsAndMetadataFound.Items)
diff --git a/src/Build/Evaluation/MetadataReference.cs b/src/Build/Evaluation/MetadataReference.cs
index 0bb7ce0fbf0..c0cf9b33319 100644
--- a/src/Build/Evaluation/MetadataReference.cs
+++ b/src/Build/Evaluation/MetadataReference.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Preprocessor.cs b/src/Build/Evaluation/Preprocessor.cs
index 104bcba8a2c..7655b5b0faa 100644
--- a/src/Build/Evaluation/Preprocessor.cs
+++ b/src/Build/Evaluation/Preprocessor.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Profiler/EvaluationLocationMarkdownPrettyPrinter.cs b/src/Build/Evaluation/Profiler/EvaluationLocationMarkdownPrettyPrinter.cs
index bc91a1b1ea8..bdb57bf9566 100644
--- a/src/Build/Evaluation/Profiler/EvaluationLocationMarkdownPrettyPrinter.cs
+++ b/src/Build/Evaluation/Profiler/EvaluationLocationMarkdownPrettyPrinter.cs
@@ -5,6 +5,8 @@
 using System.Text;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Profiler/EvaluationLocationPrettyPrinterBase.cs b/src/Build/Evaluation/Profiler/EvaluationLocationPrettyPrinterBase.cs
index 32701f72fbe..6a849a6a95d 100644
--- a/src/Build/Evaluation/Profiler/EvaluationLocationPrettyPrinterBase.cs
+++ b/src/Build/Evaluation/Profiler/EvaluationLocationPrettyPrinterBase.cs
@@ -5,6 +5,8 @@
 using System.Text;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Profiler/EvaluationLocationTabSeparatedPrettyPrinter.cs b/src/Build/Evaluation/Profiler/EvaluationLocationTabSeparatedPrettyPrinter.cs
index 555aef21810..71ee33974d9 100644
--- a/src/Build/Evaluation/Profiler/EvaluationLocationTabSeparatedPrettyPrinter.cs
+++ b/src/Build/Evaluation/Profiler/EvaluationLocationTabSeparatedPrettyPrinter.cs
@@ -5,6 +5,8 @@
 using System.Text;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/Profiler/EvaluationProfiler.cs b/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
index 1082b9e2876..bc7adaf312e 100644
--- a/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
+++ b/src/Build/Evaluation/Profiler/EvaluationProfiler.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -138,7 +140,7 @@ public void Dispose()
                     _evaluationProfiler._evaluationStack.Peek()._exclusiveTime.Start();
                 }
 
-                //  Add elapsed times to evaluation counter dictionaries
+                // Add elapsed times to evaluation counter dictionaries
                 if (!_evaluationProfiler.ProfiledResult.Value.ProfiledLocations.TryGetValue(Location, out var previousTimeSpent))
                 {
                     previousTimeSpent = new ProfiledLocation(TimeSpan.Zero, TimeSpan.Zero, 0);
diff --git a/src/Build/Evaluation/Profiler/ProfilerResultPrettyPrinter.cs b/src/Build/Evaluation/Profiler/ProfilerResultPrettyPrinter.cs
index 43bd34b27f6..bdc3a95ee28 100644
--- a/src/Build/Evaluation/Profiler/ProfilerResultPrettyPrinter.cs
+++ b/src/Build/Evaluation/Profiler/ProfilerResultPrettyPrinter.cs
@@ -7,6 +7,8 @@
 using System.Text;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ProjectChangedEventArgs.cs b/src/Build/Evaluation/ProjectChangedEventArgs.cs
index 7683617b1bb..943697e432f 100644
--- a/src/Build/Evaluation/ProjectChangedEventArgs.cs
+++ b/src/Build/Evaluation/ProjectChangedEventArgs.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index 186ed1ddf4c..3b8c3f99a6f 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -11,6 +11,8 @@
 using ProjectXmlUtilities = Microsoft.Build.Internal.ProjectXmlUtilities;
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -46,7 +48,7 @@ internal class ProjectParser
         /// <summary>
         /// Valid attributes on usingtask element
         /// </summary>
-        private static readonly HashSet<string> ValidAttributesOnUsingTask = new HashSet<string> { XMakeAttributes.condition, XMakeAttributes.label, XMakeAttributes.taskName, XMakeAttributes.assemblyFile, XMakeAttributes.assemblyName, XMakeAttributes.taskFactory, XMakeAttributes.architecture, XMakeAttributes.runtime, XMakeAttributes.requiredPlatform, XMakeAttributes.requiredRuntime };
+        private static readonly HashSet<string> ValidAttributesOnUsingTask = new HashSet<string> { XMakeAttributes.condition, XMakeAttributes.label, XMakeAttributes.taskName, XMakeAttributes.assemblyFile, XMakeAttributes.assemblyName, XMakeAttributes.taskFactory, XMakeAttributes.architecture, XMakeAttributes.runtime, XMakeAttributes.requiredPlatform, XMakeAttributes.requiredRuntime, XMakeAttributes.overrideUsingTask };
 
         /// <summary>
         /// Valid attributes on target element
@@ -282,7 +284,7 @@ private ProjectItemElement ParseProjectItemElement(XmlElementWithLocation elemen
                 exclusiveItemOperation = XMakeAttributes.update;
             }
 
-            //  At most one of the include, remove, or update attributes may be specified
+            // At most one of the include, remove, or update attributes may be specified
             if (exclusiveAttributeCount > 1)
             {
                 XmlAttributeWithLocation errorAttribute = remove.Length > 0 ? (XmlAttributeWithLocation)element.Attributes[XMakeAttributes.remove] : (XmlAttributeWithLocation)element.Attributes[XMakeAttributes.update];
@@ -357,7 +359,7 @@ internal static void CheckMetadataAsAttributeName(string name, out bool isReserv
                 return;
             }
 
-            //  Case insensitive comparison so that mis-capitalizing an attribute like Include or Exclude results in an easy to understand
+            // Case insensitive comparison so that mis-capitalizing an attribute like Include or Exclude results in an easy to understand
             //  error instead of unexpected behavior
             if (KnownAttributesOnItemIgnoreCase.Contains(name))
             {
@@ -366,7 +368,7 @@ internal static void CheckMetadataAsAttributeName(string name, out bool isReserv
                 return;
             }
 
-            //  Reserve attributes starting with underscores in case we need to add more built-in attributes later
+            // Reserve attributes starting with underscores in case we need to add more built-in attributes later
             if (name[0] == '_')
             {
                 isReservedAttributeName = false;
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index a526ce4540b..17ecae43227 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -15,6 +15,8 @@
 using Microsoft.Build.Internal;
 using OutOfProcNode = Microsoft.Build.Execution.OutOfProcNode;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -69,12 +71,13 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// If this number is increased much higher, the datastructure may
         /// need to be changed from a linked list, since it's currently O(n).
         /// </remarks>
-        private static readonly int s_maximumStrongCacheSize = 200;
+        private static readonly int s_maximumStrongCacheSize =
+            int.TryParse(Environment.GetEnvironmentVariable("MSBUILDPROJECTROOTELEMENTCACHESIZE"), out int cacheSize) ? cacheSize : 200;
 
         /// <summary>
         /// Whether the cache should log activity to the Debug.Out stream
         /// </summary>
-        private static bool s_debugLogCacheActivity;
+        private static bool s_debugLogCacheActivity = Environment.GetEnvironmentVariable("MSBUILDDEBUGXMLCACHE") == "1";
 
         /// <summary>
         /// Whether the cache should check file content for cache entry invalidation.
@@ -82,7 +85,16 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// <remarks>
         /// Value shall be true only in case of testing. Outside QA tests it shall be false.
         /// </remarks>
-        private static bool s_сheckFileContent;
+        private static bool s_сheckFileContent = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDCACHECHECKFILECONTENT"));
+
+#if DEBUG
+        /// <summary>
+        /// Number of entries into Get function of the ProjectRootElementCache.
+        /// Shall be always 0 or 1. Reentrance to the Get function (value > 1) could lead to race condition.
+        /// </summary>
+        [ThreadStatic]
+        private static int s_getEntriesNumber = 0;
+#endif
 
         /// <summary>
         /// The map of weakly-held ProjectRootElement's
@@ -110,24 +122,6 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// </summary>
         private Object _locker = new Object();
 
-        /// <summary>
-        /// Static constructor to choose cache size.
-        /// </summary>
-        static ProjectRootElementCache()
-        {
-            // Configurable in case a customer has related perf problems after shipping and so that
-            // we can measure different values for perf easily.
-            string userSpecifiedSize = Environment.GetEnvironmentVariable("MSBUILDPROJECTROOTELEMENTCACHESIZE");
-            if (!String.IsNullOrEmpty(userSpecifiedSize))
-            {
-                // Not catching as this is an undocumented setting
-                s_maximumStrongCacheSize = Convert.ToInt32(userSpecifiedSize, NumberFormatInfo.InvariantInfo);
-            }
-
-            s_debugLogCacheActivity = Environment.GetEnvironmentVariable("MSBUILDDEBUGXMLCACHE") == "1";
-            s_сheckFileContent = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDCACHECHECKFILECONTENT"));
-        }
-
         /// <summary>
         /// Creates an empty cache.
         /// </summary>
@@ -209,92 +203,115 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl
         /// If item is found, boosts it to the top of the strong cache.
         /// </remarks>
         /// <param name="projectFile">The project file which contains the ProjectRootElement.  Must be a full path.</param>
-        /// <param name="openProjectRootElement">The delegate to use to load if necessary. May be null. Must not update the cache.</param>
+        /// <param name="loadProjectRootElement">The delegate to use to load if necessary. May be null. Must not update the cache.</param>
         /// <param name="isExplicitlyLoaded"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>
         /// <param name="preserveFormatting"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>
         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>
-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,
+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,
             bool? preserveFormatting)
         {
-            // Should already have been canonicalized
-            ErrorUtilities.VerifyThrowInternalRooted(projectFile);
+#if DEBUG
+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().
+            s_getEntriesNumber++;
+            ErrorUtilities.VerifyThrow(
+                s_getEntriesNumber == 1,
+                "Reentrance to the ProjectRootElementCache.Get function detected."
+            );
+
+            try {
+#endif
+                // Should already have been canonicalized
+                ErrorUtilities.VerifyThrowInternalRooted(projectFile);
+
+                ProjectRootElement projectRootElement;
+                lock (_locker)
+                {
+                    _weakCache.TryGetValue(projectFile, out projectRootElement);
 
-            ProjectRootElement projectRootElement;
-            lock (_locker)
-            {
-                _weakCache.TryGetValue(projectFile, out projectRootElement);
+                    if (projectRootElement != null)
+                    {
+                        BoostEntryInStrongCache(projectRootElement);
 
-                if (projectRootElement != null)
-                {
-                    BoostEntryInStrongCache(projectRootElement);
+                        // An implicit load will never reset the explicit flag.
+                        if (isExplicitlyLoaded)
+                        {
+                            projectRootElement.MarkAsExplicitlyLoaded();
+                        }
+                    }
+                    else
+                    {
+                        DebugTraceCache("Not found in cache: ", projectFile);
+                    }
 
-                    // An implicit load will never reset the explicit flag.
-                    if (isExplicitlyLoaded)
+                    if (preserveFormatting != null && projectRootElement != null && projectRootElement.XmlDocument.PreserveWhitespace != preserveFormatting)
                     {
-                        projectRootElement.MarkAsExplicitlyLoaded();
+                        // Cached project doesn't match preserveFormatting setting, so reload it
+                        projectRootElement.Reload(true, preserveFormatting);
                     }
                 }
-                else
+
+                bool projectRootElementIsInvalid = IsInvalidEntry(projectFile, projectRootElement);
+                if (projectRootElementIsInvalid)
                 {
-                    DebugTraceCache("Not found in cache: ", projectFile);
+                    DebugTraceCache("Not satisfied from cache: ", projectFile);
+                    ForgetEntryIfExists(projectRootElement);
                 }
 
-                if (preserveFormatting != null && projectRootElement != null && projectRootElement.XmlDocument.PreserveWhitespace != preserveFormatting)
+                if (loadProjectRootElement == null)
                 {
-                    //  Cached project doesn't match preserveFormatting setting, so reload it
-                    projectRootElement.Reload(true, preserveFormatting);
+                    if (projectRootElement == null || projectRootElementIsInvalid)
+                    {
+                        return null;
+                    }
+                    else
+                    {
+                        DebugTraceCache("Satisfied from XML cache: ", projectFile);
+                        return projectRootElement;
+                    }
                 }
-            }
 
-            bool projectRootElementIsInvalid = IsInvalidEntry(projectFile, projectRootElement);
-            if (projectRootElementIsInvalid)
-            {
-                DebugTraceCache("Not satisfied from cache: ", projectFile);
-                ForgetEntryIfExists(projectRootElement);
-            }
-
-            if (openProjectRootElement == null)
-            {
+                // Use openProjectRootElement to reload the element if the cache element does not exist or need to be reloaded.
                 if (projectRootElement == null || projectRootElementIsInvalid)
                 {
-                    return null;
+                    // We do not lock loading with common _locker of the cache, to avoid lock contention.
+                    // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplication, as
+                    // it is not likely that two threads would use Get function for the same project simultaneously and it is not a big deal if in some cases we load the same project twice.
+
+                    projectRootElement = loadProjectRootElement(projectFile, this);
+                    ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
+                    ErrorUtilities.VerifyThrow(
+                        projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase),
+                        "Got project back with incorrect path. Expected path: {0}, received path: {1}.",
+                        projectFile,
+                        projectRootElement.FullPath
+                    );
+
+                    // An implicit load will never reset the explicit flag.
+                    if (isExplicitlyLoaded)
+                    {
+                        projectRootElement.MarkAsExplicitlyLoaded();
+                    }
+
+                    // Update cache element.
+                    // It is unlikely, but it might be that while without the lock, the projectRootElement in cache was updated by another thread.
+                    // And here its entry will be replaced with the loaded projectRootElement. This is fine:
+                    // if loaded projectRootElement is out of date (so, it changed since the time we loaded it), it will be updated the next time some thread calls Get function.
+                    AddEntry(projectRootElement);
                 }
                 else
                 {
                     DebugTraceCache("Satisfied from XML cache: ", projectFile);
-                    return projectRootElement;
                 }
-            }
 
-            // Use openProjectRootElement to reload the element if the cache element does not exist or need to be reloaded.
-            if (projectRootElement == null || projectRootElementIsInvalid)
-            {
-                // We do not lock loading with common _locker of the cache, to avoid lock contention.
-                // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplication, as
-                // it is not likely that two threads would use Get function for the same project simulteniously and it is not a big deal if in some cases we load the same project twice.
-
-                projectRootElement = openProjectRootElement(projectFile, this);
-                ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
-                ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, "Got project back with incorrect path");
-
-                // An implicit load will never reset the explicit flag.
-                if (isExplicitlyLoaded)
-                {
-                    projectRootElement.MarkAsExplicitlyLoaded();
-                }
 
-                // Update cache element.
-                // It is unlikely, but it might be that while without the lock, the projectRootElement in cache was updated by another thread.
-                // And here its entry will be replaced with the loaded projectRootElement. This is fine:
-                // if loaded projectRootElement is out of date (so, it changed since the time we loaded it), it will be updated the next time some thread calls Get function.
-                AddEntry(projectRootElement);
+                return projectRootElement;
+#if DEBUG
             }
-            else
+            finally
             {
-                DebugTraceCache("Satisfied from XML cache: ", projectFile);
+                s_getEntriesNumber--;
             }
-
-            return projectRootElement;
+#endif
         }
 
         /// <summary>
@@ -340,7 +357,7 @@ internal override ProjectRootElement TryGet(string projectFile, bool? preserveFo
         {
             ProjectRootElement result = Get(
                 projectFile,
-                openProjectRootElement: null, // no delegate to load it
+                loadProjectRootElement: null, // no delegate to load it
                 isExplicitlyLoaded: false, // Since we are not creating a PRE this can be true or false
                 preserveFormatting: preserveFormatting);
 
diff --git a/src/Build/Evaluation/ProjectRootElementCacheBase.cs b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
index 5ac30a2b20e..69f0fe3137c 100644
--- a/src/Build/Evaluation/ProjectRootElementCacheBase.cs
+++ b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     internal abstract class ProjectRootElementCacheBase
@@ -45,7 +47,7 @@ internal abstract class ProjectRootElementCacheBase
         /// </summary>
         internal event EventHandler<ProjectChangedEventArgs> ProjectDirtied;
 
-        internal abstract ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement,
+        internal abstract ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement,
             bool isExplicitlyLoaded,
             bool? preserveFormatting);
 
diff --git a/src/Build/Evaluation/ProjectStringCache.cs b/src/Build/Evaluation/ProjectStringCache.cs
index 32277f91fec..ee61fc8fd4d 100644
--- a/src/Build/Evaluation/ProjectStringCache.cs
+++ b/src/Build/Evaluation/ProjectStringCache.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ProjectXmlChangedEventArgs.cs b/src/Build/Evaluation/ProjectXmlChangedEventArgs.cs
index 529c07069be..135c97beb40 100644
--- a/src/Build/Evaluation/ProjectXmlChangedEventArgs.cs
+++ b/src/Build/Evaluation/ProjectXmlChangedEventArgs.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 54effc239c5..b113e73a6ec 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Shared;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -77,10 +79,10 @@ public P GetProperty(string name, int startIndex, int endIndex)
         /// <summary>
         /// Sets a property which does not come from the Xml.
         /// </summary>
-        public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false)
+        public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, BackEnd.Logging.LoggingContext loggingContext = null)
         {
             P originalProperty = _wrapped.GetProperty(name);
-            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, isEnvironmentVariable);
+            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, isEnvironmentVariable, loggingContext);
 
             this.TrackPropertyWrite(
                 originalProperty,
diff --git a/src/Build/Evaluation/SemiColonTokenizer.cs b/src/Build/Evaluation/SemiColonTokenizer.cs
index 625f2ae0487..b5e9eadba70 100644
--- a/src/Build/Evaluation/SemiColonTokenizer.cs
+++ b/src/Build/Evaluation/SemiColonTokenizer.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index 7e7700d1467..a5cb9278e33 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -33,16 +35,16 @@ internal SimpleProjectRootElementCache()
 
         internal override ProjectRootElement Get(
             string projectFile,
-            OpenProjectRootElement openProjectRootElement,
+            OpenProjectRootElement loadProjectRootElement,
             bool isExplicitlyLoaded,
             bool? preserveFormatting)
         {
             // Should already have been canonicalized
             ErrorUtilities.VerifyThrowInternalRooted(projectFile);
 
-            return openProjectRootElement == null
+            return loadProjectRootElement == null
                 ? GetFromCache(projectFile)
-                : GetFromOrAddToCache(projectFile, openProjectRootElement);
+                : GetFromOrAddToCache(projectFile, loadProjectRootElement);
         }
 
         private ProjectRootElement GetFromCache(string projectFile)
@@ -55,14 +57,18 @@ private ProjectRootElement GetFromCache(string projectFile)
             return null;
         }
 
-        private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRootElement openFunc)
+        private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRootElement loadFunc)
         {
             return _cache.GetOrAdd(projectFile, key =>
             {
-                ProjectRootElement rootElement = openFunc(key, this);
+                ProjectRootElement rootElement = loadFunc(key, this);
                 ErrorUtilities.VerifyThrowInternalNull(rootElement, "projectRootElement");
-                ErrorUtilities.VerifyThrow(rootElement.FullPath.Equals(key, StringComparison.OrdinalIgnoreCase),
-                    "Got project back with incorrect path");
+                ErrorUtilities.VerifyThrow(
+                    rootElement.FullPath.Equals(key, StringComparison.OrdinalIgnoreCase),
+                    "Got project back with incorrect path. Expected path: {0}, received path: {1}.",
+                    key,
+                    rootElement.FullPath
+                );
 
                 AddEntry(rootElement);
 
diff --git a/src/Build/Evaluation/StringMetadataTable.cs b/src/Build/Evaluation/StringMetadataTable.cs
index 0064888281c..0b2001450ea 100644
--- a/src/Build/Evaluation/StringMetadataTable.cs
+++ b/src/Build/Evaluation/StringMetadataTable.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/Evaluation/ToolsetProvider.cs b/src/Build/Evaluation/ToolsetProvider.cs
index c45a4d25034..a9d1ad339e6 100644
--- a/src/Build/Evaluation/ToolsetProvider.cs
+++ b/src/Build/Evaluation/ToolsetProvider.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
diff --git a/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs b/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
index 84c24fb02cc..a88d36f224c 100644
--- a/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
+++ b/src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs
@@ -12,6 +12,8 @@
 using Path = Microsoft.IO.Path;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.FileSystem
 {
     internal class DirectoryCacheFileSystemWrapper : IFileSystem
diff --git a/src/Build/FileSystem/IDirectoryCache.cs b/src/Build/FileSystem/IDirectoryCache.cs
index fb6e62c1b6a..428cd3159e0 100644
--- a/src/Build/FileSystem/IDirectoryCache.cs
+++ b/src/Build/FileSystem/IDirectoryCache.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.FileSystem
 {
     /// <summary>
diff --git a/src/Build/FileSystem/MSBuildFileSystemBase.cs b/src/Build/FileSystem/MSBuildFileSystemBase.cs
index 8855cd50da4..d007f600c23 100644
--- a/src/Build/FileSystem/MSBuildFileSystemBase.cs
+++ b/src/Build/FileSystem/MSBuildFileSystemBase.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.FileSystem
 {
     /// <summary>
diff --git a/src/Build/Globbing/CompositeGlob.cs b/src/Build/Globbing/CompositeGlob.cs
index 4be643c1695..b1dabb12741 100644
--- a/src/Build/Globbing/CompositeGlob.cs
+++ b/src/Build/Globbing/CompositeGlob.cs
@@ -7,6 +7,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing
 {
     /// <summary>
@@ -60,7 +62,7 @@ private CompositeGlob(ImmutableArray<IMSBuildGlob> globs)
         public bool IsMatch(string stringToMatch)
         {
             // Threadpools are a scarce resource in Visual Studio, do not use them.
-            //return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));
+            // return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));
 
             return _globs.Any(static (glob, str) => glob.IsMatch(str), stringToMatch);
         }
diff --git a/src/Build/Globbing/Extensions/MSBuildGlobExtensions.cs b/src/Build/Globbing/Extensions/MSBuildGlobExtensions.cs
index 949e35a2ef4..28623b14545 100644
--- a/src/Build/Globbing/Extensions/MSBuildGlobExtensions.cs
+++ b/src/Build/Globbing/Extensions/MSBuildGlobExtensions.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Globbing.Visitor;
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing.Extensions
 {
     /// <summary>
@@ -24,4 +26,4 @@ public static IEnumerable<MSBuildGlob> GetParsedGlobs(this IMSBuildGlob glob)
             return parsedGlobVisitor.CollectedGlobs;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Globbing/IMSBuildGlob.cs b/src/Build/Globbing/IMSBuildGlob.cs
index c6b9279ab50..59a683ace91 100644
--- a/src/Build/Globbing/IMSBuildGlob.cs
+++ b/src/Build/Globbing/IMSBuildGlob.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing
 {
     /// <summary>
@@ -21,4 +23,4 @@ public interface IMSBuildGlob
         /// <returns></returns>
         bool IsMatch(string stringToMatch);
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Globbing/MSBuildGlob.cs b/src/Build/Globbing/MSBuildGlob.cs
index 706933b8c43..ce624d60323 100644
--- a/src/Build/Globbing/MSBuildGlob.cs
+++ b/src/Build/Globbing/MSBuildGlob.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing
 {
     /// <summary>
diff --git a/src/Build/Globbing/MSBuildGlobWithGaps.cs b/src/Build/Globbing/MSBuildGlobWithGaps.cs
index fd6cf67baf4..5126a13744c 100644
--- a/src/Build/Globbing/MSBuildGlobWithGaps.cs
+++ b/src/Build/Globbing/MSBuildGlobWithGaps.cs
@@ -5,6 +5,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing
 {
     /// <summary>
@@ -74,4 +76,4 @@ public bool IsMatch(string stringToMatch)
             return MainGlob.IsMatch(stringToMatch) && !Gaps.IsMatch(stringToMatch);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Globbing/Visitor/GlobVisitor.cs b/src/Build/Globbing/Visitor/GlobVisitor.cs
index 972af2443ad..aaae9a6d5c9 100644
--- a/src/Build/Globbing/Visitor/GlobVisitor.cs
+++ b/src/Build/Globbing/Visitor/GlobVisitor.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing.Visitor
 {
     internal abstract class GlobVisitor
@@ -42,4 +44,4 @@ protected virtual void VisitMSBuildGlob(MSBuildGlob msbuildGlob)
         {
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Globbing/Visitor/ParsedGlobCollector.cs b/src/Build/Globbing/Visitor/ParsedGlobCollector.cs
index da3db642dd4..76f85bb2d9c 100644
--- a/src/Build/Globbing/Visitor/ParsedGlobCollector.cs
+++ b/src/Build/Globbing/Visitor/ParsedGlobCollector.cs
@@ -1,5 +1,7 @@
 using System.Collections.Immutable;
 
+#nullable disable
+
 namespace Microsoft.Build.Globbing.Visitor
 {
     internal class ParsedGlobCollector : GlobVisitor
@@ -12,4 +14,4 @@ protected override void VisitMSBuildGlob(MSBuildGlob msbuildGlob)
             _collectedGlobs.Add(msbuildGlob);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Graph/GraphBuildRequestData.cs b/src/Build/Graph/GraphBuildRequestData.cs
index 0a1e008820b..1477b097b63 100644
--- a/src/Build/Graph/GraphBuildRequestData.cs
+++ b/src/Build/Graph/GraphBuildRequestData.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     public record GraphBuildOptions
diff --git a/src/Build/Graph/GraphBuildResult.cs b/src/Build/Graph/GraphBuildResult.cs
index c7c2007a605..a37dd86dd1f 100644
--- a/src/Build/Graph/GraphBuildResult.cs
+++ b/src/Build/Graph/GraphBuildResult.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Execution;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     public sealed class GraphBuildResult
diff --git a/src/Build/Graph/GraphBuildSubmission.cs b/src/Build/Graph/GraphBuildSubmission.cs
index 02b68d8835e..9da8e4e97bb 100644
--- a/src/Build/Graph/GraphBuildSubmission.cs
+++ b/src/Build/Graph/GraphBuildSubmission.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 4f9c7d0879c..28387389e8c 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -16,11 +16,17 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     internal class GraphBuilder
     {
-        internal static readonly string SolutionItemReference = "_SolutionReference";
+        private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
+        private const string PlatformMetadataName = "Platform";
+        private const string PlatformsMetadataName = "Platforms";
+        private const string EnableDynamicPlatformResolutionMetadataName = "EnableDynamicPlatformResolution";
+        internal const string SolutionItemReference = "_SolutionReference";
         
         /// <summary>
         /// The thread calling BuildGraph() will act as an implicit worker
@@ -46,6 +52,8 @@ internal class GraphBuilder
         private readonly ProjectGraph.ProjectInstanceFactoryFunc _projectInstanceFactory;
         private IReadOnlyDictionary<string, IReadOnlyCollection<string>> _solutionDependencies;
 
+        private bool PlatformNegotiationEnabled = false;
+
         public GraphBuilder(
             IEnumerable<ProjectGraphEntryPoint> entryPoints,
             ProjectCollection projectCollection,
@@ -124,7 +132,7 @@ private void AddEdges(Dictionary<ConfigurationMetadata, ParsedProject> allParsed
 
         private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata, ParsedProject> allParsedProjects, GraphEdges edges)
         {
-            var transitiveReferenceCache = new Dictionary<ProjectGraphNode, HashSet<ProjectGraphNode>>(allParsedProjects.Count);
+            Dictionary<ProjectGraphNode, HashSet<ProjectGraphNode>> transitiveReferenceCache = new(allParsedProjects.Count);
 
             foreach (var parsedProject in allParsedProjects)
             {
@@ -162,28 +170,30 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,
 
             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)
             {
-                if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))
+                if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> transitiveReferences))
                 {
-                    return cachedTransitiveReferences;
+                    return transitiveReferences;
                 }
-                else
-                {
-                    var transitiveReferences = new HashSet<ProjectGraphNode>();
 
-                    foreach (var referenceInfo in parsedProject.ReferenceInfos)
-                    {
-                        transitiveReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode);
+                transitiveReferences = new();
 
-                        foreach (var transitiveReference in GetTransitiveProjectReferencesExcludingSelf(allParsedProjects[referenceInfo.ReferenceConfiguration]))
-                        {
-                            transitiveReferences.Add(transitiveReference);
-                        }
-                    }
+                // Add the results to the cache early, even though it'll be incomplete until the loop below finishes. This helps handle cycles by not allowing them to recurse infinitely.
+                // Note that this makes transitive references incomplete in the case of a cycle, but direct dependencies are always added so a cycle will still be detected and an exception will still be thrown.
+                transitiveReferenceCache[parsedProject.GraphNode] = transitiveReferences;
 
-                    transitiveReferenceCache.Add(parsedProject.GraphNode, transitiveReferences);
+                foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)
+                {
+                    ParsedProject reference = allParsedProjects[referenceInfo.ReferenceConfiguration];
+                    transitiveReferences.Add(reference.GraphNode);
 
-                    return transitiveReferences;
+                    // Perf note: avoiding UnionWith to avoid boxing the HashSet enumerator.
+                    foreach (ProjectGraphNode transitiveReference in GetTransitiveProjectReferencesExcludingSelf(reference))
+                    {
+                        transitiveReferences.Add(transitiveReference);
+                    }
                 }
+
+                return transitiveReferences;
             }
         }
 
@@ -257,7 +267,7 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada
                 valueComparer: StringComparer.OrdinalIgnoreCase,
                 items: solutionEntryPoint.GlobalProperties ?? ImmutableDictionary<string, string>.Empty);
 
-            var solution = SolutionFile.Parse(FileUtilities.NormalizePath(solutionEntryPoint.ProjectFile));
+            var solution = SolutionFile.Parse(solutionEntryPoint.ProjectFile);
 
             if (solution.SolutionParserWarnings.Count != 0 || solution.SolutionParserErrorCodes.Count != 0)
             {
@@ -302,7 +312,7 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada
 
             IReadOnlyCollection<ProjectInSolution> GetBuildableProjects(SolutionFile solutionFile)
             {
-                return solutionFile.ProjectsInOrder.Where(p => p.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat).ToImmutableArray();
+                return solutionFile.ProjectsInOrder.Where(p => p.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat && solutionFile.ProjectShouldBuild(p.RelativePath)).ToImmutableArray();
             }
 
             SolutionConfigurationInSolution SelectSolutionConfiguration(SolutionFile solutionFile, ImmutableDictionary<string, string> globalProperties)
@@ -384,7 +394,7 @@ private static List<ConfigurationMetadata> AddGraphBuildPropertyToEntryPoints(IE
 
                     AddGraphBuildGlobalVariable(globalPropertyDictionary);
 
-                    var configurationMetadata = new ConfigurationMetadata(FileUtilities.NormalizePath(entryPoint.ProjectFile), globalPropertyDictionary);
+                    var configurationMetadata = new ConfigurationMetadata(entryPoint.ProjectFile, globalPropertyDictionary);
                     entryPointConfigurationMetadata.Add(configurationMetadata);
                 }
 
@@ -495,18 +505,44 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
         {
             // TODO: ProjectInstance just converts the dictionary back to a PropertyDictionary, so find a way to directly provide it.
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
+            ProjectGraphNode graphNode;
+            ProjectInstance projectInstance;
+            var negotiatePlatform = PlatformNegotiationEnabled && !configurationMetadata.IsSetPlatformHardCoded;
+
+            projectInstance = _projectInstanceFactory(
+                                configurationMetadata.ProjectFullPath,
+                                negotiatePlatform ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
+                                _projectCollection);
 
-            var projectInstance = _projectInstanceFactory(
-                configurationMetadata.ProjectFullPath,
-                globalProperties,
-                _projectCollection);
+            if (ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)))
+            {
+                PlatformNegotiationEnabled = true;
+            }
 
             if (projectInstance == null)
             {
                 throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
             }
 
-            var graphNode = new ProjectGraphNode(projectInstance);
+            if (negotiatePlatform)
+            {
+                var selectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), configurationMetadata.PreviousPlatformLookupTable, projectInstance.FullPath, configurationMetadata.PreviousPlatform);
+
+                if (selectedPlatform.Equals(String.Empty))
+                {
+                    globalProperties.Remove(PlatformMetadataName);
+                }
+                else
+                {
+                    globalProperties[PlatformMetadataName] = selectedPlatform;
+                }
+                projectInstance = _projectInstanceFactory(
+                                configurationMetadata.ProjectFullPath,
+                                globalProperties,
+                                _projectCollection);           
+            }
+
+            graphNode = new ProjectGraphNode(projectInstance);
 
             var referenceInfos = ParseReferences(graphNode);
 
diff --git a/src/Build/Graph/ParallelWorkSet.cs b/src/Build/Graph/ParallelWorkSet.cs
index 488d33e0173..15010e607b6 100644
--- a/src/Build/Graph/ParallelWorkSet.cs
+++ b/src/Build/Graph/ParallelWorkSet.cs
@@ -7,6 +7,8 @@
 using System.Threading;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 40cf6aee0ed..0605d41feae 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -18,6 +18,8 @@
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
@@ -60,7 +62,7 @@ public delegate ProjectInstance ProjectInstanceFactoryFunc(
 
         internal GraphBuilder.GraphEdges TestOnly_Edges => Edges;
 
-        public GraphConstructionMetrics ConstructionMetrics { get; private set;}
+        public GraphConstructionMetrics ConstructionMetrics { get; private set; }
 
         /// <summary>
         /// Various metrics on graph construction.
@@ -351,7 +353,7 @@ public ProjectGraph(
         ///     on <see cref="ProjectInstanceFactoryFunc" /> for other scenarios.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="CancellationToken"/> to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
@@ -395,7 +397,7 @@ public ProjectGraph(
         ///     Number of threads to participate in building the project graph.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="CancellationToken"/> to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
@@ -522,7 +524,7 @@ internal string ToDot(
                 }
             }
 
-            sb.Append("}");
+            sb.Append('}');
 
             return sb.ToString();
 
diff --git a/src/Build/Graph/ProjectGraphEntryPoint.cs b/src/Build/Graph/ProjectGraphEntryPoint.cs
index 576bbcf0ff9..6cda6173ac7 100644
--- a/src/Build/Graph/ProjectGraphEntryPoint.cs
+++ b/src/Build/Graph/ProjectGraphEntryPoint.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
@@ -29,12 +31,12 @@ public ProjectGraphEntryPoint(string projectFile, IDictionary<string, string> gl
         {
             ErrorUtilities.VerifyThrowArgumentLength(projectFile, nameof(projectFile));
 
-            ProjectFile = projectFile;
+            ProjectFile = FileUtilities.NormalizePath(projectFile);
             GlobalProperties = globalProperties;
         }
 
         /// <summary>
-        /// Gets the project file to use for this entry point.
+        /// Gets the full path to the project file to use for this entry point.
         /// </summary>
         public string ProjectFile { get; }
 
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 0a2280a1758..40e4a2b451e 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     /// <summary>
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 99362abab30..a838844f160 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -13,6 +13,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Graph
 {
     internal sealed class ProjectInterpretation
@@ -36,11 +38,13 @@ private ProjectInterpretation()
         {
         }
 
-        private static readonly ImmutableList<GlobalPropertiesModifier> ModifierForNonMultitargetingNodes = new[] {(GlobalPropertiesModifier) ProjectReferenceGlobalPropertiesModifier}.ToImmutableList();
+        private static readonly ImmutableList<GlobalPropertiesModifier> ModifierForNonMultitargetingNodes = new[] { (GlobalPropertiesModifier)ProjectReferenceGlobalPropertiesModifier }.ToImmutableList();
 
         internal enum ProjectType
         {
-            OuterBuild, InnerBuild, NonMultitargeting
+            OuterBuild,
+            InnerBuild,
+            NonMultitargeting,
         }
 
         internal readonly struct ReferenceInfo
@@ -94,7 +98,16 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
 
                 var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, globalPropertiesModifiers);
 
-                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties);
+                var requesterPlatform = "";
+                var requesterPlatformLookupTable = "";
+
+                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue("EnableDynamicPlatformResolution")))
+                {
+                    requesterPlatform = requesterInstance.GetPropertyValue("Platform");
+                    requesterPlatformLookupTable = requesterInstance.GetPropertyValue("PlatformLookupTable");
+                }
+
+                var referenceConfig = new ConfigurationMetadata(projectReferenceFullPath, referenceGlobalProperties, requesterPlatform, requesterPlatformLookupTable, projectReferenceItem.HasMetadata("SetPlatform"));
 
                 yield return new ReferenceInfo(referenceConfig, projectReferenceItem);
             }
@@ -192,7 +205,7 @@ private static IEnumerable<ProjectItemInstance> ConstructInnerBuildReferences(Pr
                     project: outerBuild,
                     itemType: InnerBuildReferenceItemName,
                     includeEscaped: outerBuild.FullPath,
-                    directMetadata: new[] {new KeyValuePair<string, string>(ItemMetadataNames.PropertiesMetadataName, $"{globalPropertyName}={globalPropertyValue}")},
+                    directMetadata: new[] { new KeyValuePair<string, string>(ItemMetadataNames.PropertiesMetadataName, $"{globalPropertyName}={globalPropertyValue}") },
                     definingFileEscaped: outerBuild.FullPath);
             }
         }
diff --git a/src/Build/Instance/HostObjectException.cs b/src/Build/Instance/HostObjectException.cs
index 5b669ae06de..14f8fecb9d6 100644
--- a/src/Build/Instance/HostObjectException.cs
+++ b/src/Build/Instance/HostObjectException.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     [Serializable]
diff --git a/src/Build/Instance/HostServices.cs b/src/Build/Instance/HostServices.cs
index a27e5787cfb..76a28c6c8fd 100644
--- a/src/Build/Instance/HostServices.cs
+++ b/src/Build/Instance/HostServices.cs
@@ -9,6 +9,9 @@
 using System.Runtime.InteropServices;
 using System.Linq;
 using Microsoft.Build.BackEnd;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Execution
 {
@@ -54,9 +57,7 @@ public class HostServices : ITranslatable
         /// </summary>
         private Dictionary<string, NodeAffinity> _projectAffinities;
 
-#if FEATURE_COM_INTEROP
         private Lazy<IRunningObjectTableWrapper> _runningObjectTable = new Lazy<IRunningObjectTableWrapper>(() => new RunningObjectTable());
-#endif
 
         /// <summary>
         /// Gets any host object applicable to this task name
@@ -86,25 +87,27 @@ public ITaskHost GetHostObject(string projectFile, string targetName, string tas
             {
                 if (monikerNameOrITaskHost.IsMoniker)
                 {
-#if FEATURE_COM_INTEROP
-
-                    try
+                    if (NativeMethodsShared.IsWindows)
                     {
-                        object objectFromRunningObjectTable =
-                            _runningObjectTable.Value.GetObject(monikerNameOrITaskHost.MonikerName);
-                        return (ITaskHost)objectFromRunningObjectTable;
+                        try
+                        {
+                            object objectFromRunningObjectTable =
+                                _runningObjectTable.Value.GetObject(monikerNameOrITaskHost.MonikerName);
+                            return (ITaskHost)objectFromRunningObjectTable;
+                        }
+                        catch (Exception ex) when (ex is COMException || ex is InvalidCastException)
+                        {
+                            throw new HostObjectException(projectFile, targetName, taskName, ex);
+                        }
                     }
-                    catch (Exception ex) when (ex is COMException || ex is InvalidCastException)
+                    else
                     {
-                        throw new HostObjectException(projectFile, targetName, taskName, ex);
+                        throw new HostObjectException(
+                            projectFile,
+                            targetName,
+                            taskName,
+                            "COM Monikers can only be used on Windows");
                     }
-#else
-                    throw new HostObjectException(
-                        projectFile,
-                        targetName,
-                        taskName,
-                        "FEATURE_COM_INTEROP is disabled (non full framework). Host object can only be ITaskHost");
-#endif
                 }
                 else
                 {
@@ -144,7 +147,6 @@ public void RegisterHostObject(string projectFile, string targetName, string tas
             hostObjects.RegisterHostObject(targetName, taskName, hostObject);
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Register a remote host object for a particular task/target pair.
         /// The remote host object require registered in Running Object Table(ROT) already.
@@ -159,6 +161,7 @@ public void RegisterHostObject(string projectFile, string targetName, string tas
         /// <param name="targetName">target name</param>
         /// <param name="taskName">task name</param>
         /// <param name="monikerName">the Moniker used to register host object in ROT</param>
+        [SupportedOSPlatform("windows")]
         public void RegisterHostObject(string projectFile, string targetName, string taskName, string monikerName)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectFile, nameof(projectFile));
@@ -172,7 +175,6 @@ public void RegisterHostObject(string projectFile, string targetName, string tas
 
             hostObjects.RegisterHostObject(targetName, taskName, monikerName);
         }
-#endif
 
         /// <summary>
         /// Unregister the project's host objects, if any and remove any node affinities associated with it.
@@ -369,16 +371,15 @@ void ITranslatable.Translate(ITranslator translator)
             }
         }
 
-#if FEATURE_COM_INTEROP
         /// <summary>
         /// Test only
         /// </summary>
         /// <param name="runningObjectTable"></param>
+        [SupportedOSPlatform("windows")]
         internal void SetTestRunningObjectTable(IRunningObjectTableWrapper runningObjectTable)
         {
             _runningObjectTable = new Lazy<IRunningObjectTableWrapper>(() => runningObjectTable);
         }
-#endif
 
         internal class MonikerNameOrITaskHost
         {
@@ -444,10 +445,10 @@ internal void RegisterHostObject(string targetName, string taskName, ITaskHost h
                 }
             }
 
-#if FEATURE_COM_INTEROP
             /// <summary>
             /// Registers a host object for this project file
             /// </summary>
+            [SupportedOSPlatform("windows")]
             internal void RegisterHostObject(string targetName, string taskName, string monikerName)
             {
                 if (monikerName == null)
@@ -459,7 +460,6 @@ internal void RegisterHostObject(string targetName, string taskName, string moni
                     _hostObjects[new TargetTaskKey(targetName, taskName)] = new MonikerNameOrITaskHost(monikerName);
                 }
             }
-#endif
 
             /// <summary>
             /// Gets any host object for this project file matching the task and target names specified.
diff --git a/src/Build/Instance/IRunningObjectTableWrapper.cs b/src/Build/Instance/IRunningObjectTableWrapper.cs
index 5a3929bb13e..8007fa47c4a 100644
--- a/src/Build/Instance/IRunningObjectTableWrapper.cs
+++ b/src/Build/Instance/IRunningObjectTableWrapper.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     internal interface IRunningObjectTableWrapper
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index c3430ba548e..0237d7f0ad8 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -29,6 +29,8 @@
 using ProjectItemInstanceFactory = Microsoft.Build.Execution.ProjectItemInstance.TaskItem.ProjectItemInstanceFactory;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     using Utilities = Microsoft.Build.Internal.Utilities;
@@ -964,8 +966,14 @@ TaskRegistry IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return TaskRegistry; }
-            set { TaskRegistry = value; }
+            {
+                return TaskRegistry;
+            }
+
+            set
+            {
+                TaskRegistry = value;
+            }
         }
 
         /// <summary>
@@ -1072,8 +1080,14 @@ List<string> IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return InitialTargets; }
-            set { InitialTargets = value; }
+            {
+                return InitialTargets;
+            }
+
+            set
+            {
+                InitialTargets = value;
+            }
         }
 
         /// <summary>
@@ -1084,8 +1098,14 @@ List<string> IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, Projec
         {
             [DebuggerStepThrough]
             get
-            { return DefaultTargets; }
-            set { DefaultTargets = value; }
+            {
+                return DefaultTargets;
+            }
+
+            set
+            {
+                DefaultTargets = value;
+            }
         }
 
         /// <summary>
@@ -1455,10 +1475,10 @@ IItemDefinition<ProjectMetadataInstance> IEvaluatorData<ProjectPropertyInstance,
         /// immutable if we are immutable.
         /// Only called during evaluation, so does not check for immutability.
         /// </summary>
-        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable)
+        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable, LoggingContext loggingContext)
         {
             // Mutability not verified as this is being populated during evaluation
-            ProjectPropertyInstance property = ProjectPropertyInstance.Create(name, evaluatedValueEscaped, mayBeReserved, _isImmutable);
+            ProjectPropertyInstance property = ProjectPropertyInstance.Create(name, evaluatedValueEscaped, mayBeReserved, _isImmutable, isEnvironmentVariable, loggingContext);
             _properties.Set(property);
             return property;
         }
@@ -2577,19 +2597,8 @@ private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM
                         clearedVariables.Add(environmentVariable);
                     }
                 }
-#if (!STANDALONEBUILD)
-                wrapperProjectXml = Microsoft.Build.BuildEngine.SolutionWrapperProject.Generate(projectFile, toolsVersion, projectBuildEventContext);
-#else
                 wrapperProjectXml = "";
-#endif
-            }
-#if (!STANDALONEBUILD)
-            catch (Microsoft.Build.BuildEngine.InvalidProjectFileException ex)
-            {
-                // Whenever calling the old engine, we must translate its exception types into ours
-                throw new InvalidProjectFileException(ex.ProjectFile, ex.LineNumber, ex.ColumnNumber, ex.EndLineNumber, ex.EndColumnNumber, ex.Message, ex.ErrorSubcategory, ex.ErrorCode, ex.HelpKeyword, ex.InnerException);
             }
-#endif
             finally
             {
                 // Set the cleared environment variables back to what they were.
@@ -2957,7 +2966,7 @@ private void CreatePropertiesSnapshot(ICollection<ProjectProperty> properties, b
             {
                 // Allow reserved property names, since this is how they are added to the project instance. 
                 // The caller has prevented users setting them themselves.
-                ProjectPropertyInstance instance = ProjectPropertyInstance.Create(property.Name, ((IProperty)property).EvaluatedValueEscaped, true /* MAY be reserved name */, isImmutable);
+                ProjectPropertyInstance instance = ProjectPropertyInstance.Create(property.Name, ((IProperty)property).EvaluatedValueEscaped, true /* MAY be reserved name */, isImmutable, property.IsEnvironmentProperty);
                 _properties.Set(instance);
             }
         }
diff --git a/src/Build/Instance/ProjectItemDefinitionInstance.cs b/src/Build/Instance/ProjectItemDefinitionInstance.cs
index fcf5f799431..8c9c1f0f26c 100644
--- a/src/Build/Instance/ProjectItemDefinitionInstance.cs
+++ b/src/Build/Instance/ProjectItemDefinitionInstance.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectItemGroupTaskInstance.cs b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
index d22ea579d84..8473f7559b5 100644
--- a/src/Build/Instance/ProjectItemGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskInstance.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
index 2ba9a93a0e4..2a984755992 100644
--- a/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskItemInstance.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -16,7 +18,7 @@ namespace Microsoft.Build.Execution
     /// Immutable.
     /// </summary>
     [DebuggerDisplay("{_itemType} Include={_include} Exclude={_exclude} Remove={_remove} Condition={_condition}")]
-    public class ProjectItemGroupTaskItemInstance: ITranslatable
+    public class ProjectItemGroupTaskItemInstance : ITranslatable
     {
         /// <summary>
         /// Item type, for example "Compile"
@@ -195,7 +197,6 @@ List<ProjectItemGroupTaskMetadataInstance> metadata
 
         private ProjectItemGroupTaskItemInstance()
         {
-
         }
 
         /// <summary>
diff --git a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
index f414ad75367..4ee2e3a30a0 100644
--- a/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
+++ b/src/Build/Instance/ProjectItemGroupTaskMetadataInstance.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index db613c1a7aa..4d5d9804805 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -17,6 +17,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -32,7 +34,6 @@ public class ProjectItemInstance :
         ITaskItem2,
         IMetadataTable,
         ITranslatable,
-        IDeepCloneable<ProjectItemInstance>,
         IMetadataContainer
     {
         /// <summary>
@@ -580,19 +581,6 @@ void ITranslatable.Translate(ITranslator translator)
 
         #endregion
 
-        #region IDeepCloneable<T>
-
-        /// <summary>
-        /// Deep clone the item.
-        /// Any metadata inherited from item definitions are also copied.
-        /// </summary>
-        ProjectItemInstance IDeepCloneable<ProjectItemInstance>.DeepClone()
-        {
-            return DeepClone();
-        }
-
-        #endregion
-
         /// <summary>
         /// Set all the supplied metadata on all the supplied items.
         /// </summary>
@@ -794,7 +782,7 @@ internal sealed class TaskItem :
             /// Creates an instance of this class given the item-spec.
             /// </summary>
             internal TaskItem(string includeEscaped, string definingFileEscaped)
-                : this(includeEscaped, includeEscaped, null, null, null, /* mutable */ false, definingFileEscaped)
+                : this(includeEscaped, includeEscaped, null, null, null, immutable: false, definingFileEscaped)
             {
             }
 
@@ -833,13 +821,6 @@ internal TaskItem(ProjectItemInstance item)
             {
             }
 
-            /// <summary>
-            /// Constructor for deserialization only.
-            /// </summary>
-            private TaskItem()
-            {
-            }
-
             /// <summary>
             /// Creates an instance of this class given the backing item.
             /// Does not copy immutability, since there is no connection with the original.
@@ -928,13 +909,17 @@ public ICollection MetadataNames
             {
                 get
                 {
-                    List<string> names = new List<string>((List<string>)CustomMetadataNames);
+                    CopyOnWritePropertyDictionary<ProjectMetadataInstance> metadataCollection = MetadataCollection;
 
-                    foreach (string name in FileUtilities.ItemSpecModifiers.All)
+                    List<string> names = new List<string>(capacity: metadataCollection.Count + FileUtilities.ItemSpecModifiers.All.Length);
+
+                    foreach (ProjectMetadataInstance metadatum in metadataCollection)
                     {
-                        names.Add(name);
+                        names.Add(metadatum.Name);
                     }
 
+                    names.AddRange(FileUtilities.ItemSpecModifiers.All);
+
                     return names;
                 }
             }
@@ -948,37 +933,6 @@ public int MetadataCount
                 get { return MetadataNames.Count; }
             }
 
-            /// <summary>
-            /// Gets the names of custom metadata on the item.
-            /// If there is none, returns an empty collection.
-            /// Does not include built-in metadata.
-            /// Computed, not necessarily fast.
-            /// </summary>
-            public ICollection CustomMetadataNames
-            {
-                get
-                {
-                    List<string> names = new List<string>();
-
-                    foreach (ProjectMetadataInstance metadatum in MetadataCollection)
-                    {
-                        names.Add(metadatum.Name);
-                    }
-
-                    return names;
-                }
-            }
-
-            /// <summary>
-            /// Gets the number of custom metadata set on the item.
-            /// Does not include built-in metadata.
-            /// Computed, not necessarily fast.
-            /// </summary>
-            public int CustomMetadataCount
-            {
-                get { return CustomMetadataNames.Count; }
-            }
-
             /// <summary>
             /// Gets the evaluated include for this item, unescaped.
             /// </summary>
@@ -1156,7 +1110,7 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti
                             }
                             else
                             {
-                                Debug.Fail($"metadatum from {_itemDefinitions[i]} is null, see https://github.com/microsoft/msbuild/issues/5267");
+                                Debug.Fail($"metadatum from {_itemDefinitions[i]} is null, see https://github.com/dotnet/msbuild/issues/5267");
                             }
                         }
                     }
@@ -1172,7 +1126,7 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti
                             }
                             else
                             {
-                                Debug.Fail("metadatum in _directMetadata is null, see https://github.com/microsoft/msbuild/issues/5267");
+                                Debug.Fail("metadatum in _directMetadata is null, see https://github.com/dotnet/msbuild/issues/5267");
                             }
                         }
                     }
@@ -1574,9 +1528,8 @@ public bool Equals(TaskItem other)
                     return true;
                 }
 
-                // Since both sides are this class, we know both sides support ITaskItem2.
-                ITaskItem2 thisAsITaskItem2 = this as ITaskItem2;
-                ITaskItem2 otherAsITaskItem2 = other as ITaskItem2;
+                ITaskItem2 thisAsITaskItem2 = this;
+                ITaskItem2 otherAsITaskItem2 = other;
 
                 // This is case-insensitive. See GetHashCode().
                 if (!MSBuildNameIgnoreCaseComparer.Default.Equals(thisAsITaskItem2.EvaluatedIncludeEscaped, otherAsITaskItem2.EvaluatedIncludeEscaped))
@@ -1584,13 +1537,45 @@ public bool Equals(TaskItem other)
                     return false;
                 }
 
-                if (this.CustomMetadataCount != other.CustomMetadataCount)
+                // Metadata can come from both item definitions and direct values, and they must
+                // be applied in order, with later values overriding newer ones. Here we determine
+                // the set of metadata names on 'this', to avoid computing the full metadata collection
+                // of both 'this' and 'other'. Once we have the names for 'this', we enumerate 'other'
+                // and ensure the names we see there are set-equal to the names we produce here.
+                var thisNames = new HashSet<string>(MSBuildNameIgnoreCaseComparer.Default);
+
+                if (_itemDefinitions is not null)
+                {
+                    foreach (ProjectItemDefinitionInstance itemDefinition in _itemDefinitions)
+                    {
+                        thisNames.UnionWith(itemDefinition.MetadataNames);
+                    }
+                }
+
+                if (_directMetadata is not null)
+                {
+                    foreach (ProjectMetadataInstance metadatum in _directMetadata)
+                    {
+                        thisNames.Add(metadatum.Name);
+                    }
+                }
+
+                CopyOnWritePropertyDictionary<ProjectMetadataInstance> otherMetadata = other.MetadataCollection;
+
+                if (otherMetadata.Count != thisNames.Count)
                 {
                     return false;
                 }
 
-                foreach (string name in this.CustomMetadataNames)
+                foreach (ProjectMetadataInstance metadatum in otherMetadata)
                 {
+                    string name = metadatum.Name;
+
+                    if (!thisNames.Remove(name))
+                    {
+                        return false;
+                    }
+
                     // This is case-insensitive, so that for example "en-US" and "en-us" match and are bucketed together.
                     // In this respect, therefore, we have to consider item metadata value case as not significant.
                     if (!String.Equals
@@ -1606,7 +1591,7 @@ public bool Equals(TaskItem other)
                 }
 
                 // Do not consider mutability for equality comparison
-                return true;
+                return thisNames.Count == 0;
             }
 
 #endregion
diff --git a/src/Build/Instance/ProjectMetadataInstance.cs b/src/Build/Instance/ProjectMetadataInstance.cs
index 6f9367bed45..b60c69b1cf0 100644
--- a/src/Build/Instance/ProjectMetadataInstance.cs
+++ b/src/Build/Instance/ProjectMetadataInstance.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -16,7 +18,7 @@ namespace Microsoft.Build.Execution
     /// IMMUTABLE OBJECT.
     /// </summary>
     [DebuggerDisplay("{_name}={EvaluatedValue}")]
-    public class ProjectMetadataInstance : IEquatable<ProjectMetadataInstance>, ITranslatable, IMetadatum, IDeepCloneable<ProjectMetadataInstance>, IImmutable
+    public class ProjectMetadataInstance : IEquatable<ProjectMetadataInstance>, ITranslatable, IMetadatum, IImmutable
     {
         /// <summary>
         /// Name of the metadatum
diff --git a/src/Build/Instance/ProjectOnErrorInstance.cs b/src/Build/Instance/ProjectOnErrorInstance.cs
index 778da933f1f..2b2a9f39147 100644
--- a/src/Build/Instance/ProjectOnErrorInstance.cs
+++ b/src/Build/Instance/ProjectOnErrorInstance.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
index d899bf7eeb8..77a2b30e416 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskInstance.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
index 33e254f876c..9fd8e974939 100644
--- a/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyGroupTaskPropertyInstance.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 037cdac44a2..c6fd6293e5d 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -10,6 +10,10 @@
 using Microsoft.Build.BackEnd;
 
 using ReservedPropertyNames = Microsoft.Build.Internal.ReservedPropertyNames;
+using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
+
+#nullable disable
 
 namespace Microsoft.Build.Execution
 {
@@ -18,7 +22,7 @@ namespace Microsoft.Build.Execution
     /// Added and removed via methods on the ProjectInstance object.
     /// </summary>
     [DebuggerDisplay("{_name}={_escapedValue}")]
-    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable, IDeepCloneable<ProjectPropertyInstance>
+    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable
     {
         /// <summary>
         /// Name of the property
@@ -82,8 +86,21 @@ public string EvaluatedValue
         /// Setter assumes caller has protected global properties, if necessary.
         /// </summary>
         [DebuggerBrowsable(DebuggerBrowsableState.Never)]
-        string IProperty.EvaluatedValueEscaped => _escapedValue;
-
+        string IProperty.EvaluatedValueEscaped
+        {
+            get
+            {
+                if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty)
+                {
+                    EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
+                    args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
+                    envProperty.loggingContext.LogBuildEvent(args);
+                    envProperty._loggedEnvProperty = true;
+                }
+
+                return _escapedValue;
+            }
+        }
         /// <summary>
         /// Implementation of IKeyed exposing the property name
         /// </summary>
@@ -138,18 +155,6 @@ void ITranslatable.Translate(ITranslator translator)
 
         #endregion
 
-        #region IDeepCloneable<T>
-
-        /// <summary>
-        /// Performs a deep clone
-        /// </summary>
-        ProjectPropertyInstance IDeepCloneable<ProjectPropertyInstance>.DeepClone()
-        {
-            return DeepClone();
-        }
-
-        #endregion
-
         /// <summary>
         /// String representation handy for tracing
         /// </summary>
@@ -192,9 +197,9 @@ internal static ProjectPropertyInstance Create(string name, string escapedValue,
         /// This flags should ONLY be set by the evaluator or by cloning; after the ProjectInstance is created, they must be illegal.
         /// If name is invalid or reserved, throws ArgumentException.
         /// </summary>
-        internal static ProjectPropertyInstance Create(string name, string escapedValue, bool mayBeReserved, bool isImmutable)
+        internal static ProjectPropertyInstance Create(string name, string escapedValue, bool mayBeReserved, bool isImmutable, bool isEnvironmentProperty = false, LoggingContext loggingContext = null)
         {
-            return Create(name, escapedValue, mayBeReserved, null, isImmutable);
+            return Create(name, escapedValue, mayBeReserved, null, isImmutable, isEnvironmentProperty, loggingContext);
         }
 
         /// <summary>
@@ -222,7 +227,7 @@ internal static ProjectPropertyInstance Create(string name, string escapedValue,
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable, that is EnvironmentDerivedProjectPropertyInstance);
         }
 
         /// <summary>
@@ -231,7 +236,7 @@ internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that, bool isImmutable)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable, that is EnvironmentDerivedProjectPropertyInstance);
         }
 
         /// <summary>
@@ -288,7 +293,7 @@ internal ProjectPropertyElement ToProjectPropertyElement(ProjectElementContainer
         /// as it should never be needed for any subsequent messages, and is just extra bulk.
         /// Inherits mutability from project if any.
         /// </summary>
-        private static ProjectPropertyInstance Create(string name, string escapedValue, bool mayBeReserved, ElementLocation location, bool isImmutable)
+        private static ProjectPropertyInstance Create(string name, string escapedValue, bool mayBeReserved, ElementLocation location, bool isImmutable, bool isEnvironmentProperty = false, LoggingContext loggingContext = null)
         {
             // Does not check immutability as this is only called during build (which is already protected) or evaluation
             ErrorUtilities.VerifyThrowArgumentNull(escapedValue, nameof(escapedValue));
@@ -305,11 +310,10 @@ private static ProjectPropertyInstance Create(string name, string escapedValue,
                 XmlUtilities.VerifyThrowProjectValidElementName(name, location);
             }
 
-            if (isImmutable)
-            {
-                return new ProjectPropertyInstanceImmutable(name, escapedValue);
-            }
-            return new ProjectPropertyInstance(name, escapedValue);
+            ProjectPropertyInstance instance = isEnvironmentProperty ? new EnvironmentDerivedProjectPropertyInstance(name, escapedValue, loggingContext) :
+                isImmutable ? new ProjectPropertyInstanceImmutable(name, escapedValue) :
+                new ProjectPropertyInstance(name, escapedValue);
+            return instance;
         }
 
         /// <summary>
@@ -337,5 +341,27 @@ internal ProjectPropertyInstanceImmutable(string name, string escapedValue)
             /// </remarks>
             public override bool IsImmutable => true;
         }
+
+        internal class EnvironmentDerivedProjectPropertyInstance : ProjectPropertyInstance
+        {
+            internal EnvironmentDerivedProjectPropertyInstance(string name, string escapedValue, LoggingContext loggingContext)
+                : base(name, escapedValue)
+            {
+                this.loggingContext = loggingContext;
+            }
+
+            /// <summary>
+            /// Whether this object can be changed. An immutable object cannot be made mutable.
+            /// </summary>
+            /// <remarks>
+            /// The environment is captured at the start of the build, so environment-derived
+            /// properties can't change.
+            /// </remarks>
+            public override bool IsImmutable => true;
+
+            internal bool _loggedEnvProperty = false;
+
+            internal LoggingContext loggingContext;
+        }
     }
 }
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index dd3dffc3cc5..a10cb8456fb 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using ObjectModel = System.Collections.ObjectModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -491,14 +493,12 @@ internal ProjectTargetElement ToProjectTargetElement(ProjectRootElement rootElem
 
                 foreach (ProjectTaskInstanceChild outputInstance in taskInstance.Outputs)
                 {
-                    if (outputInstance is ProjectTaskOutputItemInstance)
+                    if (outputInstance is ProjectTaskOutputItemInstance outputItemInstance)
                     {
-                        ProjectTaskOutputItemInstance outputItemInstance = outputInstance as ProjectTaskOutputItemInstance;
                         taskElement.AddOutputItem(outputItemInstance.TaskParameter, outputItemInstance.ItemType, outputItemInstance.Condition);
                     }
-                    else if (outputInstance is ProjectTaskOutputPropertyInstance)
+                    else if (outputInstance is ProjectTaskOutputPropertyInstance outputPropertyInstance)
                     {
-                        ProjectTaskOutputPropertyInstance outputPropertyInstance = outputInstance as ProjectTaskOutputPropertyInstance;
                         taskElement.AddOutputItem(outputPropertyInstance.TaskParameter, outputPropertyInstance.PropertyName, outputPropertyInstance.Condition);
                     }
                 }
diff --git a/src/Build/Instance/ProjectTargetInstanceChild.cs b/src/Build/Instance/ProjectTargetInstanceChild.cs
index 8c4a36af614..9721855e030 100644
--- a/src/Build/Instance/ProjectTargetInstanceChild.cs
+++ b/src/Build/Instance/ProjectTargetInstanceChild.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectTaskInstance.cs b/src/Build/Instance/ProjectTaskInstance.cs
index 5df87bb29bb..541e5c1ada4 100644
--- a/src/Build/Instance/ProjectTaskInstance.cs
+++ b/src/Build/Instance/ProjectTaskInstance.cs
@@ -9,6 +9,8 @@
 using System;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectTaskInstanceChild.cs b/src/Build/Instance/ProjectTaskInstanceChild.cs
index e832eddaa9f..cfd33563367 100644
--- a/src/Build/Instance/ProjectTaskInstanceChild.cs
+++ b/src/Build/Instance/ProjectTaskInstanceChild.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectTaskOutputItemInstance.cs b/src/Build/Instance/ProjectTaskOutputItemInstance.cs
index c979bcbca24..e1648addda9 100644
--- a/src/Build/Instance/ProjectTaskOutputItemInstance.cs
+++ b/src/Build/Instance/ProjectTaskOutputItemInstance.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs b/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
index 2017af40368..21bf266530d 100644
--- a/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
+++ b/src/Build/Instance/ProjectTaskOutputPropertyInstance.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index 93e9594b6ed..571ba866933 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/RunningObjectTable.cs b/src/Build/Instance/RunningObjectTable.cs
index 976ccde9eb0..bec9632885e 100644
--- a/src/Build/Instance/RunningObjectTable.cs
+++ b/src/Build/Instance/RunningObjectTable.cs
@@ -3,12 +3,14 @@
 
 using System.Runtime.InteropServices;
 using System.Runtime.InteropServices.ComTypes;
+using System.Runtime.Versioning;
 using System.Threading;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
-#if FEATURE_COM_INTEROP
     /// <summary>
     /// Wrapper for the COM Running Object Table.
     /// </summary>
@@ -21,6 +23,11 @@ internal class RunningObjectTable : IRunningObjectTableWrapper
 
         public RunningObjectTable()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                return;
+            }
+
             if (Thread.CurrentThread.GetApartmentState() == ApartmentState.MTA)
             {
                 Ole32.GetRunningObjectTable(0, out var rot);
@@ -33,7 +40,9 @@ public RunningObjectTable()
                 _rotTask =
                 Task.Run(() =>
                     {
+#pragma warning disable CA1416 // Validate platform compatibility: we checked above but the analyzer misses it
                         Ole32.GetRunningObjectTable(0, out var rot);
+#pragma warning restore CA1416 // Validate platform compatibility
                         return rot;
                     });
             }
@@ -42,6 +51,7 @@ public RunningObjectTable()
         /// <summary>
         /// Attempts to retrieve an item from the ROT.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         public object GetObject(string itemName)
         {
             var rot = _rotTask.GetAwaiter().GetResult();
@@ -73,6 +83,7 @@ public object GetObject(string itemName)
             return obj;
         }
 
+        [SupportedOSPlatform("windows")]
         private static class Ole32
         {
             [DllImport(nameof(Ole32))]
@@ -87,5 +98,4 @@ public static extern void GetRunningObjectTable(
                 out IRunningObjectTable pprot);
         }
     }
-#endif
 }
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 4596be57f52..37433613a00 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -4,7 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Reflection;
+#if FEATURE_APPDOMAIN
 using System.Threading.Tasks;
+#endif
 
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -14,6 +16,8 @@
 using TargetLoggingContext = Microsoft.Build.BackEnd.Logging.TargetLoggingContext;
 using TaskLoggingContext = Microsoft.Build.BackEnd.Logging.TaskLoggingContext;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -302,13 +306,8 @@ string taskProjectFile
                 // taskName may be null
                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, e.Message);
             }
-            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
             {
-                if (ExceptionHandling.NotExpectedReflectionException(e))
-                {
-                    throw;
-                }
-
                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, e.Message);
             }
 
@@ -440,13 +439,8 @@ internal bool TaskNameCreatableByFactory(string taskName, IDictionary<string, st
                 // taskName may be null
                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskLoadFailure", taskName, _loadedType.Assembly.AssemblyLocation, e.Message);
             }
-            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
             {
-                if (ExceptionHandling.NotExpectedReflectionException(e))
-                {
-                    throw;
-                }
-
                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskLoadFailure", taskName, _loadedType.Assembly.AssemblyLocation, e.Message);
             }
 
@@ -572,10 +566,8 @@ private static IDictionary<string, string> MergeTaskFactoryParameterSets(IDictio
             {
                 mergedParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
-                string taskRuntime;
-                taskIdentityParameters.TryGetValue(XMakeAttributes.runtime, out taskRuntime);
-                string usingTaskRuntime;
-                factoryIdentityParameters.TryGetValue(XMakeAttributes.runtime, out usingTaskRuntime);
+                taskIdentityParameters.TryGetValue(XMakeAttributes.runtime, out string taskRuntime);
+                factoryIdentityParameters.TryGetValue(XMakeAttributes.runtime, out string usingTaskRuntime);
 
                 if (!XMakeAttributes.TryMergeRuntimeValues(taskRuntime, usingTaskRuntime, out mergedRuntime))
                 {
@@ -586,10 +578,8 @@ private static IDictionary<string, string> MergeTaskFactoryParameterSets(IDictio
                     mergedParameters.Add(XMakeAttributes.runtime, mergedRuntime);
                 }
 
-                string taskArchitecture;
-                taskIdentityParameters.TryGetValue(XMakeAttributes.architecture, out taskArchitecture);
-                string usingTaskArchitecture;
-                factoryIdentityParameters.TryGetValue(XMakeAttributes.architecture, out usingTaskArchitecture);
+                taskIdentityParameters.TryGetValue(XMakeAttributes.architecture, out string taskArchitecture);
+                factoryIdentityParameters.TryGetValue(XMakeAttributes.architecture, out string usingTaskArchitecture);
 
                 if (!XMakeAttributes.TryMergeArchitectureValues(taskArchitecture, usingTaskArchitecture, out mergedArchitecture))
                 {
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 99bc7663895..e8d2bfb9ebd 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -14,6 +14,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -201,9 +203,9 @@ public object GetPropertyValue(TaskPropertyInfo property)
             {
                 // If we returned an exception, then we want to throw it when we 
                 // do the get.  
-                if (value is Exception)
+                if (value is Exception ex)
                 {
-                    throw (Exception)value;
+                    throw ex;
                 }
 
                 return value;
@@ -272,6 +274,7 @@ public bool Execute()
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
                         _taskLoggingContext.GetWarningsAsErrors(),
+                        _taskLoggingContext.GetWarningsNotAsErrors(),
                         _taskLoggingContext.GetWarningsAsMessages()
                         
                     );
@@ -518,21 +521,21 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
 
                     // "Custom events" in terms of the communications infrastructure can also be, e.g. custom error events, 
                     // in which case they need to be dealt with in the same way as their base type of event. 
-                    if (buildEvent is BuildErrorEventArgs)
+                    if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        this.BuildEngine.LogErrorEvent((BuildErrorEventArgs)buildEvent);
+                        this.BuildEngine.LogErrorEvent(buildErrorEventArgs);
                     }
-                    else if (buildEvent is BuildWarningEventArgs)
+                    else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        this.BuildEngine.LogWarningEvent((BuildWarningEventArgs)buildEvent);
+                        this.BuildEngine.LogWarningEvent(buildWarningEventArgs);
                     }
-                    else if (buildEvent is BuildMessageEventArgs)
+                    else if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
                     {
-                        this.BuildEngine.LogMessageEvent((BuildMessageEventArgs)buildEvent);
+                        this.BuildEngine.LogMessageEvent(buildMessageEventArgs);
                     }
-                    else if (buildEvent is CustomBuildEventArgs)
+                    else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
                     {
-                        this.BuildEngine.LogCustomEvent((CustomBuildEventArgs)buildEvent);
+                        this.BuildEngine.LogCustomEvent(customBuildEventArgs);
                     }
                     else
                     {
diff --git a/src/Build/Instance/TaskFactoryLoggingHost.cs b/src/Build/Instance/TaskFactoryLoggingHost.cs
index 945fe1a875f..ead6db61dc9 100644
--- a/src/Build/Instance/TaskFactoryLoggingHost.cs
+++ b/src/Build/Instance/TaskFactoryLoggingHost.cs
@@ -13,6 +13,8 @@
 using System.Reflection;
 using Microsoft.Build.BackEnd.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index f097932a8e6..72bf3ec5624 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index a44626cccae..c7169a09dad 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -23,6 +23,8 @@
 
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -377,6 +379,7 @@ IFileSystem fileSystem
             Dictionary<string, string> taskFactoryParameters = null;
             string runtime = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Runtime, expanderOptions, projectUsingTaskXml.RuntimeLocation);
             string architecture = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Architecture, expanderOptions, projectUsingTaskXml.ArchitectureLocation);
+            string overrideUsingTask = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Override, expanderOptions, projectUsingTaskXml.OverrideLocation);
 
             if ((runtime != String.Empty) || (architecture != String.Empty))
             {
@@ -386,7 +389,7 @@ IFileSystem fileSystem
                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);
             }
 
-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);
+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, ConversionUtilities.ValidBooleanTrue(overrideUsingTask));
         }
 
         private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(int? initialCount = null)
@@ -411,10 +414,9 @@ ElementLocation elementLocation
         )
         {
             TaskFactoryWrapper taskFactory = null;
-            bool retrievedFromCache;
-
+            
             // If there are no usingtask tags in the project don't bother caching or looking for tasks locally
-            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);
+            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out bool retrievedFromCache);
 
             if (record != null)
             {
@@ -471,6 +473,23 @@ out bool retrievedFromCache
             retrievedFromCache = false;
             RegisteredTaskIdentity taskIdentity = new RegisteredTaskIdentity(taskName, taskIdentityParameters);
 
+            // Project-level override tasks are keyed by task name (unqualified).
+            // Because Foo.Bar and Baz.Bar are both valid, they are stored
+            // in a dictionary keyed as `Bar` because most tasks are called unqualified
+            if (overriddenTasks.TryGetValue(taskName, out List<RegisteredTaskRecord> recs))
+            {
+                // When we determine this task was overridden, search all task records
+                // to find the most correct registration. Search with the fully qualified name (if applicable)
+                // Behavior is intended to be "first one wins"
+                foreach (RegisteredTaskRecord rec in recs)
+                {
+                    if (RegisteredTaskIdentity.RegisteredTaskIdentityComparer.IsPartialMatch(taskIdentity, rec.TaskIdentity))
+                    {
+                        return rec;
+                    }
+                }
+            }
+
             // Try the override task registry first
             if (_toolset != null)
             {
@@ -635,11 +654,26 @@ private Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> GetReleva
             return relevantTaskRegistrations;
         }
 
+        // Create another set containing architecture-specific task entries.
+        // Then when we look for them, check if the name exists in that.
+        Dictionary<string, List<RegisteredTaskRecord>> overriddenTasks = new Dictionary<string, List<RegisteredTaskRecord>>();
+
         /// <summary>
         /// Registers an evaluated using task tag for future
         /// consultation
         /// </summary>
-        private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, string taskFactory, Dictionary<string, string> taskFactoryParameters, RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord)
+        private void RegisterTask
+        (
+            string taskName,
+            AssemblyLoadInfo assemblyLoadInfo,
+            string taskFactory,
+            Dictionary<string, string> taskFactoryParameters,
+            RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord,
+            ILoggingService loggingService,
+            BuildEventContext context,
+            ProjectUsingTaskElement projectUsingTaskInXml,
+            bool overrideTask = false
+        )
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo, nameof(assemblyLoadInfo));
@@ -660,7 +694,39 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st
                 _taskRegistrations[taskIdentity] = registeredTaskEntries;
             }
 
-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));
+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);
+
+            if (overrideTask)
+            {
+                // Key the dictionary based on Unqualified task names
+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar
+                string[] nameComponents = taskName.Split('.');
+                string unqualifiedTaskName = nameComponents[nameComponents.Length - 1];
+
+                // Is the task already registered?
+                if (overriddenTasks.TryGetValue(unqualifiedTaskName, out List<RegisteredTaskRecord> recs))
+                {
+                    foreach (RegisteredTaskRecord rec in recs)
+                    {
+                        if (rec.RegisteredName.Equals(taskIdentity.Name, StringComparison.OrdinalIgnoreCase))
+                        {
+                            loggingService.LogError(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), "DuplicateOverrideUsingTaskElement", taskName);
+                            break;
+                        }
+                    }
+                    recs.Add(newRecord);
+                }
+                else
+                {
+                    // New record's name may be fully qualified. Use it anyway to account for partial matches.
+                    List<RegisteredTaskRecord> unqualifiedTaskNameMatches = new();
+                    unqualifiedTaskNameMatches.Add(newRecord);
+                    overriddenTasks.Add(unqualifiedTaskName, unqualifiedTaskNameMatches);
+                    loggingService.LogComment(context, MessageImportance.Low, "OverrideUsingTaskElementCreated", taskName, projectUsingTaskInXml.OverrideLocation);
+                }
+            }
+
+            registeredTaskEntries.Add(newRecord);
         }
 
         private static Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> CreateRegisteredTaskDictionary(int? capacity = null)
@@ -1234,19 +1300,14 @@ internal bool CanTaskBeCreatedByFactory(string taskName, string taskProjectFile,
                                         creatableByFactory = null;
                                     }
                                 }
-                                catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                                 {
-                                    if (ExceptionHandling.IsCriticalException(e))
-                                    {
-                                        throw;
-                                    }
-
                                     // Log e.ToString to give as much information about the failure of a "third party" call as possible.
-                                    string message = String.Empty;
+                                    string message =
 #if DEBUG
-                                    message += UnhandledFactoryError;
+                                    UnhandledFactoryError +
 #endif
-                                    message += e.ToString();
+                                    e.ToString();
                                     ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskLoadFailure", taskName, _taskFactoryWrapperInstance.Name, message);
                                 }
                             }
@@ -1360,13 +1421,8 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
 
                                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskFactoryLoadFailure", TaskFactoryAttributeName, taskFactoryLoadInfo.AssemblyLocation, e.Message);
                             }
-                            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                            catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
                             {
-                                if (ExceptionHandling.NotExpectedReflectionException(e))
-                                {
-                                    throw;
-                                }
-
                                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskFactoryLoadFailure", TaskFactoryAttributeName, taskFactoryLoadInfo.AssemblyLocation, e.Message);
                             }
 
@@ -1447,18 +1503,13 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
 
                                 return false;
                             }
-                            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.
+                            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                             {
-                                if (ExceptionHandling.IsCriticalException(e))
-                                {
-                                    throw;
-                                }
-
-                                string message = String.Empty;
+                                string message =
 #if DEBUG
-                                message += UnhandledFactoryError;
+                                UnhandledFactoryError +
 #endif
-                                message += e.Message;
+                                e.Message;
 
                                 ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "TaskFactoryLoadFailure", TaskFactoryAttributeName, taskFactoryLoadInfo.AssemblyLocation, message);
                             }
@@ -1615,34 +1666,41 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                         // Cannot have a null or empty name for the type after expansion.
                         ProjectErrorUtilities.VerifyThrowInvalidProject
                         (
-                        !String.IsNullOrEmpty(expandedType),
-                        parameter.ParameterTypeLocation,
-                        "InvalidEvaluatedAttributeValue",
-                        expandedType,
-                        parameter.ParameterType,
-                        XMakeAttributes.parameterType,
-                        XMakeElements.usingTaskParameter
+                            !String.IsNullOrEmpty(expandedType),
+                            parameter.ParameterTypeLocation,
+                            "InvalidEvaluatedAttributeValue",
+                            expandedType,
+                            parameter.ParameterType,
+                            XMakeAttributes.parameterType,
+                            XMakeElements.usingTaskParameter
                         );
 
-                        // Try and get the type directly 
-                        Type paramType = Type.GetType(expandedType);
-
-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.
-                        if (paramType == null)
+                        Type paramType;
+                        if (expandedType.StartsWith("Microsoft.Build.Framework.", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(","))
+                        {
+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821
+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it 
+                            // which cause InvalidProjectFileException with "UnsupportedTaskParameterTypeError" message.
+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.
+                            paramType = Type.GetType(expandedType + "," + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??
+                                        Type.GetType(expandedType);
+                        }
+                        else
                         {
-                            paramType = Type.GetType(expandedType + "," + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);
+                            paramType = Type.GetType(expandedType) ??
+                                        Type.GetType(expandedType + "," + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);
+                        }
 
-                            ProjectErrorUtilities.VerifyThrowInvalidProject
-                            (
-                             paramType != null,
-                             parameter.ParameterTypeLocation,
-                             "InvalidEvaluatedAttributeValue",
-                             expandedType,
-                             parameter.ParameterType,
-                             XMakeAttributes.parameterType,
+                        ProjectErrorUtilities.VerifyThrowInvalidProject
+                        (
+                            paramType != null,
+                            parameter.ParameterTypeLocation,
+                            "InvalidEvaluatedAttributeValue",
+                            expandedType,
+                            parameter.ParameterType,
+                            XMakeAttributes.parameterType,
                             XMakeElements.usingTaskParameter
-                            );
-                        }
+                        );
 
                         bool output;
                         string expandedOutput = expander.ExpandIntoStringLeaveEscaped(parameter.Output, expanderOptions, parameter.OutputLocation);
@@ -1651,19 +1709,19 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                         {
                             ProjectErrorUtilities.ThrowInvalidProject
                             (
-                             parameter.OutputLocation,
-                             "InvalidEvaluatedAttributeValue",
-                             expandedOutput,
-                             parameter.Output,
-                             XMakeAttributes.output,
-                             XMakeElements.usingTaskParameter
+                                parameter.OutputLocation,
+                                "InvalidEvaluatedAttributeValue",
+                                expandedOutput,
+                                parameter.Output,
+                                XMakeAttributes.output,
+                                XMakeElements.usingTaskParameter
                             );
                         }
 
                         if (
                             (!output && (!TaskParameterTypeVerifier.IsValidInputParameter(paramType))) ||
                             (output && !TaskParameterTypeVerifier.IsValidOutputParameter(paramType))
-                           )
+                        )
                         {
                             ProjectErrorUtilities.ThrowInvalidProject
                             (
@@ -1672,7 +1730,7 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                                 paramType.FullName,
                                 parameter.ParameterType,
                                 parameter.Name
-                             );
+                            );
                         }
 
                         bool required;
@@ -1682,12 +1740,12 @@ private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupEl
                         {
                             ProjectErrorUtilities.ThrowInvalidProject
                             (
-                             parameter.RequiredLocation,
-                             "InvalidEvaluatedAttributeValue",
-                             expandedRequired,
-                             parameter.Required,
-                             XMakeAttributes.required,
-                             XMakeElements.usingTaskParameter
+                                parameter.RequiredLocation,
+                                "InvalidEvaluatedAttributeValue",
+                                expandedRequired,
+                                parameter.Required,
+                                XMakeAttributes.required,
+                                XMakeElements.usingTaskParameter
                             );
                         }
 
@@ -1779,13 +1837,13 @@ public void Translate(ITranslator translator)
             }
         }
 
-        //todo make nested after C# 7
+        // todo make nested after C# 7
         void TranslateTaskRegistrationKey(ITranslator translator, ref RegisteredTaskIdentity taskIdentity)
         {
             translator.Translate(ref taskIdentity);
         }
 
-        //todo make nested after C# 7
+        // todo make nested after C# 7
         void TranslateTaskRegistrationValue(ITranslator translator, ref List<RegisteredTaskRecord> taskRecords)
         {
             translator.Translate(ref taskRecords, RegisteredTaskRecord.FactoryForDeserialization);
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 1f7480ffc0c..ea87f587b70 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -18,6 +18,8 @@
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     #region Delegates
@@ -439,7 +441,7 @@ internal static void ResetColorAnsi()
         /// <param name="background">current background</param>
         internal static ConsoleColor TransformColor(ConsoleColor foreground, ConsoleColor background)
         {
-            ConsoleColor result = foreground; //typically do nothing ...
+            ConsoleColor result = foreground; // typically do nothing ...
 
             if (foreground == background)
             {
@@ -825,7 +827,11 @@ internal PerformanceCounter(string scopeName)
             /// </summary>
             internal bool InScope
             {
-                get { return inScope; }
+                get
+                {
+                    return inScope;
+                }
+
                 set
                 {
                     if (!reenteredScope)
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index dcb22fc4979..5ea0941cde1 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -1,4 +1,6 @@
-﻿namespace Microsoft.Build.Logging
+﻿#nullable disable
+
+namespace Microsoft.Build.Logging
 {
     internal enum BinaryLogRecordKind
     {
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index e4dc9c80b9c..62f72ae2917 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index dac426db8b4..7fbddddf7ee 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -89,19 +91,20 @@ public enum ProjectImportsCollectionMode
 
         private string FilePath { get; set; }
 
-        /// <summary>
+        /// <summary> Gets or sets the verbosity level.</summary>
+        /// <remarks>
         /// The binary logger Verbosity is always maximum (Diagnostic). It tries to capture as much
         /// information as possible.
-        /// </summary>
+        /// </remarks>
         public LoggerVerbosity Verbosity { get; set; } = LoggerVerbosity.Diagnostic;
 
         /// <summary>
-        /// The only supported parameter is the output log file path (e.g. "msbuild.binlog") 
+        /// Gets or sets the parameters. The only supported parameter is the output log file path (for example, "msbuild.binlog"). 
         /// </summary>
         public string Parameters { get; set; }
 
         /// <summary>
-        /// Initializes the logger by subscribing to events of IEventSource
+        /// Initializes the logger by subscribing to events of the specified event source.
         /// </summary>
         public void Initialize(IEventSource eventSource)
         {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
index acccfd531d6..bfb588a0275 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
@@ -1,5 +1,7 @@
 ﻿using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -85,57 +87,57 @@ public class EventArgsDispatcher : IEventSource
         /// </summary>
         public void Dispatch(BuildEventArgs buildEvent)
         {
-            if (buildEvent is BuildMessageEventArgs)
+            if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
-                MessageRaised?.Invoke(null, (BuildMessageEventArgs)buildEvent);
+                MessageRaised?.Invoke(null, buildMessageEventArgs);
             }
-            else if (buildEvent is TaskStartedEventArgs)
+            else if (buildEvent is TaskStartedEventArgs taskStartedEventArgs)
             {
-                TaskStarted?.Invoke(null, (TaskStartedEventArgs)buildEvent);
+                TaskStarted?.Invoke(null, taskStartedEventArgs);
             }
-            else if (buildEvent is TaskFinishedEventArgs)
+            else if (buildEvent is TaskFinishedEventArgs taskFinishedEventArgs)
             {
-                TaskFinished?.Invoke(null, (TaskFinishedEventArgs)buildEvent);
+                TaskFinished?.Invoke(null, taskFinishedEventArgs);
             }
-            else if (buildEvent is TargetStartedEventArgs)
+            else if (buildEvent is TargetStartedEventArgs targetStartedEventArgs)
             {
-                TargetStarted?.Invoke(null, (TargetStartedEventArgs)buildEvent);
+                TargetStarted?.Invoke(null, targetStartedEventArgs);
             }
-            else if (buildEvent is TargetFinishedEventArgs)
+            else if (buildEvent is TargetFinishedEventArgs targetFinishedEventArgs)
             {
-                TargetFinished?.Invoke(null, (TargetFinishedEventArgs)buildEvent);
+                TargetFinished?.Invoke(null, targetFinishedEventArgs);
             }
-            else if (buildEvent is ProjectStartedEventArgs)
+            else if (buildEvent is ProjectStartedEventArgs projectStartedEventArgs)
             {
-                ProjectStarted?.Invoke(null, (ProjectStartedEventArgs)buildEvent);
+                ProjectStarted?.Invoke(null, projectStartedEventArgs);
             }
-            else if (buildEvent is ProjectFinishedEventArgs)
+            else if (buildEvent is ProjectFinishedEventArgs projectFinishedEventArgs)
             {
-                ProjectFinished?.Invoke(null, (ProjectFinishedEventArgs)buildEvent);
+                ProjectFinished?.Invoke(null, projectFinishedEventArgs);
             }
-            else if (buildEvent is BuildStartedEventArgs)
+            else if (buildEvent is BuildStartedEventArgs buildStartedEventArgs)
             {
-                BuildStarted?.Invoke(null, (BuildStartedEventArgs)buildEvent);
+                BuildStarted?.Invoke(null, buildStartedEventArgs);
             }
-            else if (buildEvent is BuildFinishedEventArgs)
+            else if (buildEvent is BuildFinishedEventArgs buildFinishedEventArgs)
             {
-                BuildFinished?.Invoke(null, (BuildFinishedEventArgs)buildEvent);
+                BuildFinished?.Invoke(null, buildFinishedEventArgs);
             }
-            else if (buildEvent is CustomBuildEventArgs)
+            else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
             {
-                CustomEventRaised?.Invoke(null, (CustomBuildEventArgs)buildEvent);
+                CustomEventRaised?.Invoke(null, customBuildEventArgs);
             }
-            else if (buildEvent is BuildStatusEventArgs)
+            else if (buildEvent is BuildStatusEventArgs buildStatusEventArgs)
             {
-                StatusEventRaised?.Invoke(null, (BuildStatusEventArgs)buildEvent);
+                StatusEventRaised?.Invoke(null, buildStatusEventArgs);
             }
-            else if (buildEvent is BuildWarningEventArgs)
+            else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
             {
-                WarningRaised?.Invoke(null, (BuildWarningEventArgs)buildEvent);
+                WarningRaised?.Invoke(null, buildWarningEventArgs);
             }
-            else if (buildEvent is BuildErrorEventArgs)
+            else if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
             {
-                ErrorRaised?.Invoke(null, (BuildErrorEventArgs)buildEvent);
+                ErrorRaised?.Invoke(null, buildErrorEventArgs);
             }
 
             AnyEventRaised?.Invoke(null, buildEvent);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
index a9f311ad1fd..9e9d1a9cd0f 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
@@ -1,5 +1,7 @@
 ﻿using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
index be6bfe622a5..898ea06c5ca 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
@@ -1,6 +1,8 @@
 ﻿using System;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index c6be1d59db3..64a26269a78 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -53,9 +55,9 @@ public class BuildEventArgsReader : IDisposable
             typeof(BuildEventArgs).GetField("senderName", BindingFlags.Instance | BindingFlags.NonPublic);
 
         /// <summary>
-        /// Initializes a new instance of BuildEventArgsReader using a BinaryReader instance
+        /// Initializes a new instance of <see cref="BuildEventArgsReader"/> using a <see cref="BinaryReader"/> instance.
         /// </summary>
-        /// <param name="binaryReader">The BinaryReader to read BuildEventArgs from</param>
+        /// <param name="binaryReader">The <see cref="BinaryReader"/> to read <see cref="BuildEventArgs"/> from.</param>
         /// <param name="fileFormatVersion">The file format version of the log file being read.</param>
         public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)
         {
@@ -79,8 +81,12 @@ public void Dispose()
         internal event Action<BinaryLogRecordKind, byte[]> OnBlobRead;
 
         /// <summary>
-        /// Reads the next log record from the binary reader. If there are no more records, returns null.
+        /// Reads the next log record from the <see cref="BinaryReader"/>.
         /// </summary>
+        /// <returns>
+        /// The next <see cref="BuildEventArgs"/>.
+        /// If there are no more records, returns <see langword="null"/>.
+        /// </returns>
         public BuildEventArgs Read()
         {
             BinaryLogRecordKind recordKind = (BinaryLogRecordKind)ReadInt32();
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 20583b991b0..1089888ff12 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -4,20 +4,18 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.IO;
-using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
-using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -249,7 +247,14 @@ private void Write(BuildStartedEventArgs e)
         {
             Write(BinaryLogRecordKind.BuildStarted);
             WriteBuildEventArgsFields(e);
-            Write(e.BuildEnvironment);
+            if (Traits.Instance.LogAllEnvironmentVariables)
+            {
+                Write(e.BuildEnvironment);
+            }
+            else
+            {
+                Write(0);
+            }
         }
 
         private void Write(BuildFinishedEventArgs e)
@@ -516,6 +521,10 @@ private void Write(TaskParameterEventArgs e)
             Write((int)e.Kind);
             WriteDeduplicatedString(e.ItemType);
             WriteTaskItemList(e.Items, e.LogItemMetadata);
+            if (e.Kind == TaskParameterMessageKind.AddItem)
+            {
+                CheckForFilesToEmbed(e.ItemType, e.Items);
+            }
         }
 
         private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true, bool writeLineAndColumn = false)
@@ -917,10 +926,10 @@ private void Write(ITaskItem item, bool writeMetadata = true)
 
             // Don't sort metadata because we want the binary log to be fully roundtrippable
             // and we need to preserve the original order.
-            //if (nameValueListBuffer.Count > 1)
-            //{
+            // if (nameValueListBuffer.Count > 1)
+            // {
             //    nameValueListBuffer.Sort((l, r) => StringComparer.OrdinalIgnoreCase.Compare(l.Key, r.Key));
-            //}
+            // }
 
             WriteNameValueList();
 
diff --git a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
index 59553953c79..e56f4750920 100644
--- a/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
+++ b/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs
@@ -5,6 +5,8 @@
 using System.Text;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index c6358a9badb..543667811bf 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -10,6 +10,8 @@
 using SerialConsoleLogger = Microsoft.Build.BackEnd.Logging.SerialConsoleLogger;
 using ParallelConsoleLogger = Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     #region Delegates
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 83c2499aefa..0d97dd41083 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -112,12 +114,21 @@ private void ParseParameters()
                     }
                 }
                 // Setting events to forward on the commandline will override the verbosity and other switches such as
-                // showPerfSummand and ShowSummary
+                // showPerfSummary and ShowSummary
                 if (_forwardingSetFromParameters)
                 {
                     _showPerfSummary = false;
                     _showSummary = true;
                 }
+
+                if (_forwardProjectContext)
+                {
+                    // We can't know whether the project items needed to find ForwardProjectContextDescription
+                    // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know
+                    // all of the other loggers that will be attached. So turn both on.
+                    _forwardingTable[ProjectStartedEventDescription] = 1;
+                    _forwardingTable[ProjectEvaluationFinishedEventDescription] = 1;
+                }
             }
         }
 
@@ -149,6 +160,10 @@ private void ApplyParameter(string parameterName)
             {
                 _showCommandLine = true;
             }
+            else if (string.Equals(parameterName, ForwardProjectContextDescription, StringComparison.OrdinalIgnoreCase))
+            {
+                _forwardProjectContext = true;
+            }
         }
 
         /// <summary>
@@ -543,6 +558,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         private const string PerformanceSummaryDescription = "PERFORMANCESUMMARY";
         private const string NoSummaryDescription = "NOSUMMARY";
         private const string ShowCommandLineDescription = "SHOWCOMMANDLINE";
+        private const string ForwardProjectContextDescription = "FORWARDPROJECTCONTEXTEVENTS";
 
         #region Per-build Members
 
@@ -564,6 +580,12 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// </summary>
         private bool _forwardingSetFromParameters;
 
+        /// <summary>
+        /// Indicates if the events to forward should include project context events, if not
+        /// overridden by individual-event forwarding in <see cref="_forwardingSetFromParameters"/>.
+        /// </summary>
+        private bool _forwardProjectContext = false;
+
         /// <summary>
         /// Console logger should show error and warning summary at the end of build?
         /// </summary>
diff --git a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
index 72f225241d3..7318a086b81 100644
--- a/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/EvaluationLocationIdAgnosticComparer.cs b/src/Build/Logging/EvaluationLocationIdAgnosticComparer.cs
index 7160c103006..c5bcc3c61ad 100644
--- a/src/Build/Logging/EvaluationLocationIdAgnosticComparer.cs
+++ b/src/Build/Logging/EvaluationLocationIdAgnosticComparer.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/FileLogger.cs b/src/Build/Logging/FileLogger.cs
index 96732da2b2d..100370273f7 100644
--- a/src/Build/Logging/FileLogger.cs
+++ b/src/Build/Logging/FileLogger.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/LogFormatter.cs b/src/Build/Logging/LogFormatter.cs
index 85d9e4dc31c..5dfc1207455 100644
--- a/src/Build/Logging/LogFormatter.cs
+++ b/src/Build/Logging/LogFormatter.cs
@@ -5,6 +5,8 @@
 using System.Diagnostics;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index f50a53d0e68..560d96c4c30 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -10,7 +10,8 @@
 using Microsoft.Build.BackEnd;
 
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
-using System.Linq;
+
+#nullable disable
 
 namespace Microsoft.Build.Logging
 {
@@ -167,22 +168,10 @@ internal IForwardingLogger CreateForwardingLogger()
                     InternalLoggerException.Throw(null, null, "LoggerNotFoundError", true, this.Name);
                 }
             }
-            catch (Exception e /* Wrap all other exceptions in a more meaningful exception*/)
+            catch (Exception e) // Wrap other exceptions in a more meaningful exception. LoggerException and InternalLoggerException are already meaningful.
+            when (!(e is LoggerException /* Polite logger Failure*/ || e is InternalLoggerException /* LoggerClass not found*/ || ExceptionHandling.IsCriticalException(e)))
             {
-                // Two of the possible exceptions are already in reasonable exception types
-                if (e is LoggerException /* Polite logger Failure*/ || e is InternalLoggerException /* LoggerClass not found*/)
-                {
-                    throw;
-                }
-                else
-                {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
-                    InternalLoggerException.Throw(e, null, "LoggerCreationError", true, Name);
-                }
+                InternalLoggerException.Throw(e, null, "LoggerCreationError", true, Name);
             }
 
             return forwardingLogger;
@@ -238,25 +227,15 @@ private ILogger CreateLogger(bool forwardingLogger)
                 string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword("LoggerInstantiationFailureErrorInvalidCast", _loggerClassName, _loggerAssembly.AssemblyLocation, e.Message);
                 throw new LoggerException(message, e.InnerException);
             }
-            catch (TargetInvocationException e)
+            catch (TargetInvocationException e) when (e.InnerException is LoggerException le)
             {
                 // At this point, the interesting stack is the internal exception;
                 // the outer exception is System.Reflection stuff that says nothing
                 // about the nature of the logger failure.
-                Exception innerException = e.InnerException;
-
-                if (innerException is LoggerException)
-                {
-                    // Logger failed politely during construction. In order to preserve
-                    // the stack trace at which the error occurred we wrap the original
-                    // exception instead of throwing.
-                    LoggerException l = ((LoggerException)innerException);
-                    throw new LoggerException(l.Message, innerException, l.ErrorCode, l.HelpKeyword);
-                }
-                else
-                {
-                    throw;
-                }
+                // Logger failed politely during construction. In order to preserve
+                // the stack trace at which the error occurred we wrap the original
+                // exception instead of throwing.
+                throw new LoggerException(le.Message, le, le.ErrorCode, le.HelpKeyword);
             }
 
             return logger;
@@ -281,11 +260,7 @@ private static bool IsForwardingLoggerClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetTypeInfo().GetInterface("IForwardingLogger") != null);
-#else
-                (type.GetInterfaces().Any(interfaceType => interfaceType.Name == "IForwardingLogger"));
-#endif
         }
 
         /// <summary>
@@ -297,11 +272,7 @@ private static bool IsLoggerClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass &&
                 !type.GetTypeInfo().IsAbstract &&
-#if FEATURE_TYPE_GETINTERFACE
                 (type.GetTypeInfo().GetInterface("ILogger") != null);
-#else
-                (type.GetInterfaces().Any(interfaceType => interfaceType.Name == "ILogger"));
-#endif
         }
 
         /// <summary>
diff --git a/src/Build/Logging/NullCentralLogger.cs b/src/Build/Logging/NullCentralLogger.cs
index de64da650a1..5946cb57a13 100644
--- a/src/Build/Logging/NullCentralLogger.cs
+++ b/src/Build/Logging/NullCentralLogger.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index 9f839cfff5f..84c2508d8e1 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Diagnostics;
 using System.Text;
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index a68b477bfdc..4c147958cb5 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -13,6 +13,8 @@
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -81,7 +83,6 @@ private void CheckIfOutputSupportsAlignment()
             // If forceNoAlign is set there is no point getting the console width as there will be no aligning of the text
             if (!_forceNoAlign)
             {
-#if FEATURE_CONSOLE_BUFFERWIDTH
                 if (runningWithCharacterFileType)
                 {
                     // Get the size of the console buffer so messages can be formatted to the console width
@@ -98,7 +99,6 @@ private void CheckIfOutputSupportsAlignment()
                     }
                 }
                 else
-#endif
                 {
                     _alignMessages = false;
                 }
@@ -472,13 +472,13 @@ private void ShowErrorWarningSummary(IEnumerable<BuildEventArgs> listToProcess)
                 // Print out all of the errors under the ProjectEntryPoint / target
                 foreach (BuildEventArgs errorWarningEvent in valuePair.Value)
                 {
-                    if (errorWarningEvent is BuildErrorEventArgs)
+                    if (errorWarningEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
-                    else if (errorWarningEvent is BuildWarningEventArgs)
+                    else if (errorWarningEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
                 }
                 WriteNewLine();
@@ -573,6 +573,7 @@ private string ReadProjectConfigurationDescription(IEnumerable items)
             }
 
             ReuseableStringBuilder projectConfigurationDescription = null;
+            bool descriptionEmpty = true;
 
             Internal.Utilities.EnumerateItems(items, item =>
             {
@@ -592,7 +593,14 @@ private string ReadProjectConfigurationDescription(IEnumerable items)
                     };
 
                     // Add the item value to the string to be printed in error/warning messages.
-                    projectConfigurationDescription.Append(" ").Append(itemSpec);
+                    if (!descriptionEmpty)
+                    {
+                        projectConfigurationDescription.Append(" "); 
+                    }
+
+                    projectConfigurationDescription.Append(itemSpec);
+
+                    descriptionEmpty = false;
                 }
             });
 
@@ -653,7 +661,7 @@ public override void ProjectFinishedHandler(object sender, ProjectFinishedEventA
                         // should be shown
                         string targets = startedEvent.TargetNames;
                         string projectName = startedEvent.ProjectFile ?? string.Empty;
-                        
+
                         // Show which targets were built as part of this project
                         if (string.IsNullOrEmpty(targets))
                         {
@@ -1196,16 +1204,21 @@ private void DisplayDeferredStartedEvents(BuildEventContext e)
         /// </summary>
         private void PrintMessage(BuildMessageEventArgs e, bool lightenText)
         {
-            string nonNullMessage;
+            string nonNullMessage = null;
+
+            if (e is EnvironmentVariableReadEventArgs environmentPropertyReadEventArgs)
+            {
+                nonNullMessage = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentPropertyReadEventArgs.EnvironmentVariableName, e.Message);
+            }
 
             // Include file information if present.
             if (e.File != null)
             {
-                nonNullMessage = EventArgsFormatting.FormatEventMessage(e, showProjectFile, FindLogOutputProperties(e));
+                nonNullMessage = EventArgsFormatting.FormatEventMessage(e, showProjectFile, FindLogOutputProperties(e), nonNullMessage);
             }
             else
             {
-                nonNullMessage = e.Message ?? string.Empty;
+                nonNullMessage ??= e.Message ?? string.Empty;
             }
 
             int prefixAdjustment = 0;
@@ -1378,7 +1391,7 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
                         }
                         else
                         {
-                            //there is not enough room just print the message out and let the console do the formatting
+                            // there is not enough room just print the message out and let the console do the formatting
                             WriteBasedOnPrefix(nonNullMessage, prefixAlreadyWritten, adjustedPrefixWidth);
                         }
                     }
@@ -1686,7 +1699,7 @@ internal MPPerformanceCounter(string scopeName)
             /// </summary>
             internal void AddEventStarted(string projectTargetNames, BuildEventContext buildEventContext, DateTime eventTimeStamp, IEqualityComparer<BuildEventContext> comparer)
             {
-                //If the projectTargetNames are set then we should be a project started event
+                // If the projectTargetNames are set then we should be a project started event
                 if (!string.IsNullOrEmpty(projectTargetNames))
                 {
                     // Create a new performance counter for the project entry point to calculate how much time and how many calls
@@ -1779,10 +1792,10 @@ internal override void PrintCounterMessage(WriteLinePrettyFromResourceDelegate W
         #endregion
 
         #region Per-build Members
-        //Holds messages that were going to be shown before the project started event, buffer them until the project started event is shown
+        // Holds messages that were going to be shown before the project started event, buffer them until the project started event is shown
         private Dictionary<BuildEventContext, List<BuildMessageEventArgs>> _deferredMessages;
         private BuildEventManager _buildEventManager;
-        //  Has the build started
+        // Has the build started
         private bool _hasBuildStarted;
         private bool? _showCommandLine;
         private bool _showTimeStamp;
diff --git a/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs b/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
index 8b9c74e5085..5603b9480f1 100644
--- a/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -38,7 +40,7 @@ internal BuildEventManager()
         ///  Adds a new project to the list of project started events which have been fired
         /// </summary>
         internal void AddProjectStartedEvent(ProjectStartedEventArgs e, bool requireTimestamp)
-        {   //Parent event can be null if this is the root project
+        {   // Parent event can be null if this is the root project
             ProjectStartedEventMinimumFields parentEvent = GetProjectStartedEvent(e.ParentProjectBuildEventContext);
             lock (_projectStartedEvents)
             {
@@ -100,7 +102,7 @@ internal List<ProjectStartedEventMinimumFields> GetProjectCallStack(BuildEventCo
             // from the engine itself
             if (currentKey != null)
             {
-                //Add the event where the stack should start
+                // Add the event where the stack should start
                 stackTrace.Add(currentKey);
 
                 // Loop through the call tree until the root project started event has been found
diff --git a/src/Build/Logging/ProfilerLogger.cs b/src/Build/Logging/ProfilerLogger.cs
index 5d0ed444b07..a2338b8f051 100644
--- a/src/Build/Logging/ProfilerLogger.cs
+++ b/src/Build/Logging/ProfilerLogger.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging
 {
     /// <summary>
@@ -51,12 +53,15 @@ internal static ProfilerLogger CreateForTesting()
         }
 
         /// <summary>
-        /// Verbosity is ignored by this logger
+        /// Gets or sets the verbosity level.
         /// </summary>
+        /// <remarks>
+        /// Verbosity is ignored by this logger.
+        /// </remarks>
         public LoggerVerbosity Verbosity { get; set; }
 
         /// <summary>
-        /// No specific parameters are used by this logger
+        /// No specific parameters are used by this logger.
         /// </summary>
         public string Parameters { get; set; }
 
@@ -74,7 +79,7 @@ public void Initialize(IEventSource eventSource)
         }
 
         /// <summary>
-        /// On shutdown, the profiler report is written to disk
+        /// On shutdown, the profiler report is written to disk.
         /// </summary>
         public void Shutdown()
         {
@@ -103,13 +108,13 @@ private void ProjectEvaluationFinishedRaised(object sender, BuildEventArgs e)
         }
 
         /// <summary>
-        /// Returns the result of aggregating all profiled projects across a build
+        /// Returns the result of aggregating all profiled projects across a build.
         /// </summary>
         /// <param name="pruneSmallItems">Whether small items should be pruned. This is called with false on some tests since the result may vary depending on the evaluator speed</param>
         /// <remarks>
         /// Not thread safe. After this method is called, the assumption is that no new ProjectEvaluationFinishedEventArgs will arrive.
         /// In the regular code path, this method is called only once per build. But some test cases may call it multiple times to validate 
-        /// the aggregated data
+        /// the aggregated data.
         /// </remarks>
         internal ProfilerResult GetAggregatedResult(bool pruneSmallItems = true)
         {
@@ -129,7 +134,7 @@ internal ProfilerResult GetAggregatedResult(bool pruneSmallItems = true)
             // So keeping that map here
             var originalLocations = new Dictionary<EvaluationLocation, EvaluationLocation>(EvaluationLocationIdAgnosticComparer.Singleton);
 
-            while (!_profiledResults.IsEmpty)
+            while (_profiledResults.Any())
             {
                 ProfilerResult profiledResult;
                 var result = _profiledResults.TryDequeue(out profiledResult);
@@ -230,7 +235,7 @@ private static Dictionary<EvaluationLocation, ProfiledLocation> PruneSmallItems(
         }
 
         /// <summary>
-        /// Finds the first ancestor of parentId (which could be itself) that is either an evaluation pass location or a big enough profiled data
+        /// Finds the first ancestor of parentId (which could be itself) that is either an evaluation pass location or a big enough profiled data.
         /// </summary>
         private static long? FindBigEnoughParentId(IDictionary<long, Pair<EvaluationLocation, ProfiledLocation>> idTable,
             long? parentId)
@@ -271,11 +276,11 @@ private static ProfiledLocation AggregateProfiledLocation(ProfiledLocation locat
         }
 
         /// <summary>
-        /// Pretty prints the aggregated results and saves it to disk
+        /// Pretty prints the aggregated results and saves it to disk.
         /// </summary>
         /// <remarks>
         /// If the extension of the file to log is 'md', markdown content is generated. Otherwise, it falls 
-        /// back to a tab separated format
+        /// back to a tab separated format.
         /// </remarks>
         private void GenerateProfilerReport()
         {
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 4784c183001..4404357b05e 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -12,6 +12,8 @@
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     internal class SerialConsoleLogger : BaseConsoleLogger
@@ -509,18 +511,15 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
                     setColor(ConsoleColor.DarkGray);
                 }
 
-                string nonNullMessage;
+                string nonNullMessage = e is EnvironmentVariableReadEventArgs environmentDerivedProperty ?
+                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("EnvironmentDerivedPropertyRead", environmentDerivedProperty.EnvironmentVariableName, e.Message)
+                    : e.Message ?? String.Empty;
 
                 // Include file information if present.
                 if (e.File != null)
                 {
                     nonNullMessage = EventArgsFormatting.FormatEventMessage(e, showProjectFile);
                 }
-                else
-                {
-                    // null messages are ok -- treat as blank line
-                    nonNullMessage = e.Message ?? String.Empty;
-                }
 
                 WriteLinePretty(nonNullMessage);
 
@@ -591,7 +590,7 @@ internal void WriteProjectStarted()
         {
             this.VerifyStack(!contextStack.IsEmpty(), "Bad project stack");
 
-            //Pop the current project
+            // Pop the current project
             Frame outerMost = contextStack.Pop();
 
             this.VerifyStack(!outerMost.displayed, "Bad project stack on {0}", outerMost.ID);
@@ -725,9 +724,9 @@ private void ShowDeferredMessages()
 
                 ShowDeferredMessages();
 
-                //push now, so that the stack is in a good state
-                //for WriteProjectStarted() and WriteLinePretty()
-                //because we use the stack to control indenting
+                // push now, so that the stack is in a good state
+                // for WriteProjectStarted() and WriteLinePretty()
+                // because we use the stack to control indenting
                 contextStack.Push(f);
 
                 switch (f.type)
@@ -820,7 +819,7 @@ internal enum FrameType
         internal struct Frame
         {
             /// <summary>
-            /// Creates a new instance of frame with all fields specified.
+            /// Initializes a new instance of the <see cref="Frame"/> struct with all fields specified.
             /// </summary>
             /// <param name="t">the type of the this frame</param>
             /// <param name="d">display state. true indicates this frame has been displayed to the user</param>
@@ -905,14 +904,14 @@ internal class FrameStack
             /// The frames member is contained by FrameStack and does
             /// all the heavy lifting for FrameStack.
             /// </summary>
-            private System.Collections.Stack _frames;
+            private readonly Stack<Frame> _frames;
 
             /// <summary>
-            /// Create a new, empty, FrameStack.
+            /// Initializes a new instance of the <see cref="FrameStack"/> class.
             /// </summary>
             internal FrameStack()
             {
-                _frames = new System.Collections.Stack();
+                _frames = new Stack<Frame>();
             }
 
             /// <summary>
@@ -921,7 +920,7 @@ internal FrameStack()
             /// <exception cref="InvalidOperationException">Thrown when stack is empty.</exception>
             internal Frame Pop()
             {
-                return (Frame)(_frames.Pop());
+                return _frames.Pop();
             }
 
             /// <summary>
@@ -929,7 +928,7 @@ internal Frame Pop()
             /// </summary>
             internal Frame Peek()
             {
-                return (Frame)(_frames.Peek());
+                return _frames.Peek();
             }
 
             /// <summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 19c39093f3f..30c38da91e5 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -4,8 +4,7 @@
   <Import Project="..\Shared\DebuggingSources.proj" />
 
   <PropertyGroup>
-    <TargetFrameworks>net6.0</TargetFrameworks>
-    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net6.0</TargetFrameworks>
+    <TargetFrameworks>$(FullFrameworkTFM);net6.0</TargetFrameworks>
     <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <RootNamespace>Microsoft.Build</RootNamespace>
     <AssemblyName>Microsoft.Build</AssemblyName>
@@ -40,8 +39,10 @@
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <Reference Include="System.IO.Compression" />
     <PackageReference Include="System.Memory" />
   </ItemGroup>
@@ -50,8 +51,6 @@
     <PackageReference Include="System.Reflection.Metadata" />
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="System.Text.Encoding.CodePages" />
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
 
   <ItemGroup>
@@ -121,6 +120,10 @@
     <Compile Include="..\Shared\NodeShutdown.cs" />
     <Compile Include="..\Shared\NamedPipeUtil.cs" />
     <Compile Include="..\Shared\ProcessExtensions.cs" />
+    <Compile Include="..\Shared\PlatformNegotiation.cs">
+      <Link>PlatformNegotiation.cs</Link>
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
     <Compile Include="..\Shared\TaskLoggingHelper.cs">
       <Link>BackEnd\Components\RequestBuilder\IntrinsicTasks\TaskLoggingHelper.cs</Link>
       <ExcludeFromStyleCop>True</ExcludeFromStyleCop>
@@ -356,7 +359,6 @@
       <Link>Collections\CopyOnWriteDictionary.cs</Link>
     </Compile>
     <Compile Include="Collections\CopyOnWritePropertyDictionary.cs" />
-    <Compile Include="Collections\IDeepCloneable.cs" />
     <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs" />
     <Compile Include="Collections\HashTableUtility.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementContainerLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementContainerLink.cs
index 3d5af435468..680ab19717c 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementContainerLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementContainerLink.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
index 8994636ccef..4a244d9e504 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectElementLink.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectExtensionsElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectExtensionsElementLink.cs
index b02191f7523..73aa5b17d8f 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectExtensionsElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectExtensionsElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectImportElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectImportElementLink.cs
index da868640171..2f86d8d8722 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectImportElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectImportElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectItemElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectItemElementLink.cs
index fadc6bba638..42e6a9220e6 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectItemElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectItemElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectMetadataElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectMetadataElementLink.cs
index 1b9f8247f30..61acf75ae4b 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectMetadataElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectMetadataElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectPropertyElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectPropertyElementLink.cs
index 484c0cac626..6350b741c79 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectPropertyElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectPropertyElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectRootElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectRootElementLink.cs
index c99cbd978e9..1408fbfe666 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectRootElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectRootElementLink.cs
@@ -7,6 +7,8 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTargetElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTargetElementLink.cs
index e1b7156316c..5e1e0b7e430 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTargetElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTargetElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTaskElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTaskElementLink.cs
index 2ebe6e8feb6..eb51368004b 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTaskElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectTaskElementLink.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskBodyElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskBodyElementLink.cs
index 982ff434471..3d8a20ff82b 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskBodyElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskBodyElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskParameterElementLink.cs b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskParameterElementLink.cs
index c016f12551f..21dd119b625 100644
--- a/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskParameterElementLink.cs
+++ b/src/Build/ObjectModelRemoting/ConstructionObjectLinks/ProjectUsingTaskParameterElementLink.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
index 83cad7f28fe..7c24d5e39b7 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemDefinitionLink.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Evaluation;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
index 3c7fa86178f..d19126d1c41 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectItemLink.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Evaluation;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
index c89d4ee4323..68e3609784b 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectMetadataLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectMetadataLink.cs
index 0de0274f582..b26bdcf2f47 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectMetadataLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectMetadataLink.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectPropertyLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectPropertyLink.cs
index 74fac4edbe2..a51ba9ad286 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectPropertyLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectPropertyLink.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/ExternalProjectsProvider.cs b/src/Build/ObjectModelRemoting/ExternalProjectsProvider.cs
index 9b35ad1f429..745c21994a2 100644
--- a/src/Build/ObjectModelRemoting/ExternalProjectsProvider.cs
+++ b/src/Build/ObjectModelRemoting/ExternalProjectsProvider.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Evaluation;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
diff --git a/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs b/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
index 2312e0d8be1..b6b534637e0 100644
--- a/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
+++ b/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.ObjectModelRemoting
 {
     /// <summary>
@@ -312,5 +314,4 @@ public override string UnevaluatedValue
         }
         #endregion
     }
-
 }
diff --git a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
index 027d79e6239..a4ec0aaf92d 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
@@ -528,6 +528,9 @@ Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFileLocation.get ->
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.set -> void
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyNameLocation.get -> Microsoft.Build.Construction.ElementLocation
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.get -> string
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.set -> void
+Microsoft.Build.Construction.ProjectUsingTaskElement.OverrideLocation.get -> Microsoft.Build.Construction.ElementLocation
 Microsoft.Build.Construction.ProjectUsingTaskElement.ParameterGroup.get -> Microsoft.Build.Construction.UsingTaskParameterGroupElement
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.set -> void
@@ -578,6 +581,8 @@ Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string name, string output, string required, string parameterType) -> Microsoft.Build.Construction.ProjectUsingTaskParameterElement
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.Parameters.get -> System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectUsingTaskParameterElement>
 Microsoft.Build.Definition.ProjectOptions
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.get -> Microsoft.Build.Evaluation.Context.EvaluationContext
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.set -> void
 Microsoft.Build.Definition.ProjectOptions.GlobalProperties.get -> System.Collections.Generic.IDictionary<string, string>
@@ -1029,6 +1034,8 @@ Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.get -> System.Collect
 Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.set -> void
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.set -> void
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
 Microsoft.Build.Execution.BuildRequestData
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild) -> void
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild, Microsoft.Build.Execution.HostServices hostServices) -> void
@@ -1320,6 +1327,7 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
@@ -1341,6 +1349,15 @@ Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.ProjectCachePlu
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) -> void
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargetToRealTargetMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
+Microsoft.Build.FileSystem.FindPredicate
+Microsoft.Build.FileSystem.FindTransform<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache
+Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
 Microsoft.Build.FileSystem.MSBuildFileSystemBase
 Microsoft.Build.FileSystem.MSBuildFileSystemBase.MSBuildFileSystemBase() -> void
 Microsoft.Build.Globbing.CompositeGlob
@@ -1771,6 +1788,7 @@ static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateCacheHit(Sy
 static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateNonCacheHit(Microsoft.Build.Experimental.ProjectCache.CacheResultType resultType) -> Microsoft.Build.Experimental.ProjectCache.CacheResult
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
 static Microsoft.Build.Globbing.Extensions.MSBuildGlobExtensions.GetParsedGlobs(this Microsoft.Build.Globbing.IMSBuildGlob glob) -> System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.MSBuildGlob>
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string globRoot, string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
@@ -1818,4 +1836,4 @@ virtual Microsoft.Build.Logging.ConfigurableForwardingLogger.Shutdown() -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Shutdown() -> void
-virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
+virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
\ No newline at end of file
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 9281b0c3cf8..e69de29bb2d 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,13 +0,0 @@
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
-Microsoft.Build.FileSystem.FindPredicate
-Microsoft.Build.FileSystem.FindTransform<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache
-Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
index b2b3f82f392..ecaad75bd4e 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -528,6 +528,9 @@ Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFileLocation.get ->
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.set -> void
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyNameLocation.get -> Microsoft.Build.Construction.ElementLocation
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.get -> string
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.set -> void
+Microsoft.Build.Construction.ProjectUsingTaskElement.OverrideLocation.get -> Microsoft.Build.Construction.ElementLocation
 Microsoft.Build.Construction.ProjectUsingTaskElement.ParameterGroup.get -> Microsoft.Build.Construction.UsingTaskParameterGroupElement
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.set -> void
@@ -578,6 +581,8 @@ Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string name, string output, string required, string parameterType) -> Microsoft.Build.Construction.ProjectUsingTaskParameterElement
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.Parameters.get -> System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectUsingTaskParameterElement>
 Microsoft.Build.Definition.ProjectOptions
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.get -> Microsoft.Build.Evaluation.Context.EvaluationContext
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.set -> void
 Microsoft.Build.Definition.ProjectOptions.GlobalProperties.get -> System.Collections.Generic.IDictionary<string, string>
@@ -959,6 +964,8 @@ Microsoft.Build.Execution.BuildParameters.AllowFailureWithoutError.set -> void
 Microsoft.Build.Execution.BuildParameters.BuildParameters() -> void
 Microsoft.Build.Execution.BuildParameters.BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectCollection) -> void
 Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment.get -> System.Collections.Generic.IDictionary<string, string>
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.get -> System.Threading.ThreadPriority
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.set -> void
 Microsoft.Build.Execution.BuildParameters.Clone() -> Microsoft.Build.Execution.BuildParameters
 Microsoft.Build.Execution.BuildParameters.Culture.get -> System.Globalization.CultureInfo
 Microsoft.Build.Execution.BuildParameters.Culture.set -> void
@@ -1027,6 +1034,8 @@ Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.get -> System.Collect
 Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.set -> void
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.set -> void
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
 Microsoft.Build.Execution.BuildRequestData
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild) -> void
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild, Microsoft.Build.Execution.HostServices hostServices) -> void
@@ -1317,6 +1326,7 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
@@ -1338,6 +1348,15 @@ Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.ProjectCachePlu
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) -> void
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargetToRealTargetMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
+Microsoft.Build.FileSystem.FindPredicate
+Microsoft.Build.FileSystem.FindTransform<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache
+Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
 Microsoft.Build.FileSystem.MSBuildFileSystemBase
 Microsoft.Build.FileSystem.MSBuildFileSystemBase.MSBuildFileSystemBase() -> void
 Microsoft.Build.Globbing.CompositeGlob
@@ -1768,6 +1787,7 @@ static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateCacheHit(Sy
 static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateNonCacheHit(Microsoft.Build.Experimental.ProjectCache.CacheResultType resultType) -> Microsoft.Build.Experimental.ProjectCache.CacheResult
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
 static Microsoft.Build.Globbing.Extensions.MSBuildGlobExtensions.GetParsedGlobs(this Microsoft.Build.Globbing.IMSBuildGlob glob) -> System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.MSBuildGlob>
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string globRoot, string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 218e7d4593d..e610ce450ea 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,13 +1 @@
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
-Microsoft.Build.FileSystem.FindPredicate
-Microsoft.Build.FileSystem.FindTransform<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache
-Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
\ No newline at end of file
+Microsoft.Build.Execution.HostServices.RegisterHostObject(string projectFile, string targetName, string taskName, string monikerName) -> void
diff --git a/src/Build/README.md b/src/Build/README.md
new file mode 100644
index 00000000000..a5cf66a7d77
--- /dev/null
+++ b/src/Build/README.md
@@ -0,0 +1,17 @@
+# Microsoft.Build
+
+This package contains `Microsoft.Build.dll`, which defines MSBuild's API, including
+
+* [`Microsoft.Build.Evaluation`](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation) for evaluating MSBuild projects,
+* [`Microsoft.Build.Construction`](https://docs.microsoft.com/dotnet/api/microsoft.build.construction) for creating new MSBuild projects, and
+* [`Microsoft.Build.Execution`](https://docs.microsoft.com/dotnet/api/microsoft.build.execution) for building MSBuild projects.
+
+Developers should reference this package to write applications that create, edit, evaluate, or build MSBuild projects.
+
+To create or edit an MSBuild project, use the [Microsoft.Build.Construction.ProjectRootElement](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement) class and call the
+[Create](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement.create) or
+[Open](https://docs.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement.open) method.
+
+To evaluate or build an MSBuild project, use the [Microsoft.Build.Evaluation.Project](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project) class by creating an instance of it with the
+appropriate parameters for your project.  To retrieve evaluated items, call methods such as  properties such as [GetItems](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project.getitems)
+or [GetPropertyValue](https://docs.microsoft.com/dotnet/api/microsoft.build.evaluation.project.getpropertyvalue).
diff --git a/src/Build/Resources/AssemblyResources.cs b/src/Build/Resources/AssemblyResources.cs
index a4a5c050267..76db7b0f1b2 100644
--- a/src/Build/Resources/AssemblyResources.cs
+++ b/src/Build/Resources/AssemblyResources.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index a327906f7ef..211f8cd00fa 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
@@ -299,39 +301,23 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Environment::GetFolderPath", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::GetLogicalDrives", environmentType);
 
-// All the following properties only have getters
-#if FEATURE_GET_COMMANDLINE
+                        // All the following properties only have getters
                         availableStaticMethods.TryAdd("System.Environment::CommandLine", environmentType);
-#endif
-#if FEATURE_64BIT_ENVIRONMENT_QUERY
                         availableStaticMethods.TryAdd("System.Environment::Is64BitOperatingSystem", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::Is64BitProcess", environmentType);
-#endif
-
                         availableStaticMethods.TryAdd("System.Environment::MachineName", environmentType);
-#if FEATURE_OSVERSION
+                        availableStaticMethods.TryAdd("System.Environment::NewLine", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::OSVersion", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::ProcessorCount", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::StackTrace", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::SystemDirectory", environmentType);
-#if FEATURE_SYSTEMPAGESIZE
                         availableStaticMethods.TryAdd("System.Environment::SystemPageSize", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::TickCount", environmentType);
-#if FEATURE_USERDOMAINNAME
                         availableStaticMethods.TryAdd("System.Environment::UserDomainName", environmentType);
-#endif
-#if FEATURE_USERINTERACTIVE
                         availableStaticMethods.TryAdd("System.Environment::UserInteractive", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::UserName", environmentType);
-#if FEATURE_DOTNETVERSION
                         availableStaticMethods.TryAdd("System.Environment::Version", environmentType);
-#endif
-#if FEATURE_WORKINGSET
                         availableStaticMethods.TryAdd("System.Environment::WorkingSet", environmentType);
-#endif
 
                         availableStaticMethods.TryAdd("System.IO.Directory::GetDirectories", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetFiles", directoryType);
@@ -345,9 +331,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.IO.File::GetLastWriteTime", fileType);
                         availableStaticMethods.TryAdd("System.IO.File::ReadAllText", fileType);
 
-#if FEATURE_CULTUREINFO_GETCULTUREINFO
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::GetCultureInfo", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
-#endif
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::new", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::CurrentUICulture", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
 
@@ -357,6 +341,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Char", new Tuple<string, Type>(null, typeof(Char)));
                         availableStaticMethods.TryAdd("System.Convert", new Tuple<string, Type>(null, typeof(Convert)));
                         availableStaticMethods.TryAdd("System.DateTime", new Tuple<string, Type>(null, typeof(DateTime)));
+                        availableStaticMethods.TryAdd("System.DateTimeOffset", new Tuple<string, Type>(null, typeof(DateTimeOffset)));
                         availableStaticMethods.TryAdd("System.Decimal", new Tuple<string, Type>(null, typeof(Decimal)));
                         availableStaticMethods.TryAdd("System.Double", new Tuple<string, Type>(null, typeof(Double)));
                         availableStaticMethods.TryAdd("System.Enum", new Tuple<string, Type>(null, typeof(Enum)));
diff --git a/src/Build/Resources/MSBuildAssemblyFileVersion.cs b/src/Build/Resources/MSBuildAssemblyFileVersion.cs
index 18581de0d1b..be8d883559e 100644
--- a/src/Build/Resources/MSBuildAssemblyFileVersion.cs
+++ b/src/Build/Resources/MSBuildAssemblyFileVersion.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Reflection;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index db27d0712c8..db8651cce57 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -142,6 +142,9 @@
   <data name="WaitingForEndOfBuild" xml:space="preserve">
     <value>The operation cannot be completed because EndBuild has already been called but existing submissions have not yet completed.</value>
   </data>
+  <data name="EnvironmentDerivedPropertyRead">
+    <value>Property '{0}' with value '{1}' expanded from the environment.</value>
+  </data>
   <data name="SubmissionAlreadyComplete" xml:space="preserve">
     <value>The operation cannot be completed because the submission has already been executed.</value>
   </data>
@@ -332,6 +335,13 @@
   <data name="TryingExtensionsPath" xml:space="preserve">
     <value>Trying to import {0} using extensions path {1}</value>
   </data>
+  <data name="DuplicateOverrideUsingTaskElement" xml:space="preserve">
+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>
+    <comment>{StrBegin="MSB4275: "}</comment>
+  </data>
+  <data name="OverrideUsingTaskElementCreated" xml:space="preserve">
+    <value>Created an override using task: {0} at {1}</value>
+  </data>
   <data name="OverrideTasksFileFailure" xml:space="preserve">
     <value>MSB4194: The override tasks file could not be successfully loaded. {0}</value>
     <comment>
@@ -463,6 +473,10 @@
     <value>MSB4187: Failed to receive a response from the task thread in the timeout period "{0}" ms. Shutting down.</value>
     <comment>{StrBegin="MSB4187: "}</comment>
   </data>
+  <data name="UnhandledMSBuildError" xml:space="preserve">
+    <value>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</value>
+  </data>
   <data name="IllFormedCondition" xml:space="preserve">
     <value>MSB4088: Condition "{0}" is improperly constructed.</value>
     <comment>{StrBegin="MSB4088: "}</comment>
@@ -1542,7 +1556,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
     <value>Project has not been given a path to save to.</value>
   </data>
   <data name="OM_MustSetRecordDuplicateInputs" xml:space="preserve">
-    <value>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</value>
+    <value>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</value>
   </data>
   <data name="OM_CannotSaveFileLoadedAsReadOnly" xml:space="preserve">
     <value>Project or targets file "{0}" was loaded in read-only mode, and cannot be saved.</value>
@@ -1899,4 +1913,64 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="ProxyRequestNotScheduledOnInprocNode" xml:space="preserve">
     <value>MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</value>
   </data>
+  <data name="ProjectCacheBeginBuild" xml:space="preserve">
+    <value>Initializing project cache plugin.</value>
+  </data>
+  <data name="ProjectCacheEndBuild" xml:space="preserve">
+    <value>Shutting down project cache plugin.</value>
+  </data>
+  <data name="ProjectCacheQueryStartedWithDefaultTargets" xml:space="preserve">
+    <value>Querying project cache for "{0}" (default targets):</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheQueryStartedWithTargetNames" xml:space="preserve">
+    <value>Querying project cache for "{0}" (targets: {1}):</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithDefaultTargets" xml:space="preserve">
+    <value>Project cache hit for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithTargetNames" xml:space="preserve">
+    <value>Project cache hit for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheHitWithOutputs" xml:space="preserve">
+    <value>{0} -> Cache Hit</value>
+    <comment>
+      {StrBegin="{0} -> "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </comment>
+  </data>
+  <data name="ProjectCacheMissWithDefaultTargets" xml:space="preserve">
+    <value>Project cache miss for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheMissWithTargetNames" xml:space="preserve">
+    <value>Project cache miss for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
+  <data name="ProjectCacheNotApplicableWithDefaultTargets" xml:space="preserve">
+    <value>Project cache not applicable for "{0}" (default targets).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path.
+    </comment>
+  </data>
+  <data name="ProjectCacheNotApplicableWithTargetNames" xml:space="preserve">
+    <value>Project cache not applicable for "{0}" ({1} target(s)).</value>
+    <comment>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </comment>
+  </data>
 </root>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index bdf7ebe0340..295e744c203 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Došlo k pokusu o vytvoření více přepsání stejné úlohy: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Zadaný výstupní soubor mezipaměti pro výsledky je prázdný.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Číst proměnnou prostředí {0}</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: Musí se zadat jeden modul plug-in mezipaměti projektu, ale našlo se jich více: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Vytvořilo se přepsání pomocí úlohy: {0} v {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Inicializuje se modul plug-in mezipaměti projektu.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Vypíná se modul plug-in mezipaměti projektu.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Mezipaměť projektu vyvolala neošetřenou výjimku z metody {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Přístup do mezipaměti projektu pro „{0}“ (výchozí cíle).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; Přístup do mezipaměti</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Přístup do mezipaměti projektu pro „{0}“ ({1} cíl(e/ů)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Nepovedlo se inicializovat mezipaměť projektu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Neúspěšný přístup do mezipaměti projektu pro „{0}“ (výchozí cíle).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Neúspěšný přístup do mezipaměti projektu pro „{0}“ ({1} cíl(e/ů)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Přístup do mezipaměti nepoužitelný pro „{0}“ (výchozí cíle).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Přístup do mezipaměti nepoužitelný pro „{0}“ ({1} cíl(e/ů)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Při dotazování na následující projekt selhala jeho mezipaměť: {0}. Na mezipaměť se dotazy posílají paralelně pro několik projektů, takže tento konkrétní projekt nemusí být příčinou.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Dotazování mezipaměti projektu pro „{0}“ (výchozí cíle):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Dotazování mezipaměti projektu pro „{0}“ (cíle: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Mezipaměť projektu se nepovedlo správně vypnout.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Jedná se o neošetřenou výjimku v MSBuildu – HLASUJTE PROSÍM PRO EXISTUJÍCÍ PROBLÉM NEBO VYTVOŘTE NOVÝ NA https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Číst neinicializovanou vlastnost {0}</target>
@@ -2079,8 +2174,8 @@ Využití:          Průměrné využití {0}: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Projekt nebyl načten s příznakem ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Projekt nebyl načten s příznakem ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 189016ff8b6..354bbd025b6 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Es wurde versucht, mehrere Außerkraftsetzungen derselben Aufgabe zu erstellen: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Die angegebene Cachedatei für Ausgabeergebnisse ist leer.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Umgebungsvariable "{0}" lesen</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: Ein einzelnes Projektcache-Plug-In muss angegeben werden, es wurden jedoch mehrere gefunden: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Außerkraftsetzung mit Task erstellt: {0} bei {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Das Projektcache-Plug-in wird initialisiert.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Das Projektcache-Plug-in wird heruntergefahren.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Der Projektcache hat über die Methode {0} eine unbehandelte Ausnahme ausgelöst.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Projektcachetreffer für „{0}“ (Standardziele).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; Cachetreffer</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Projektcachetreffer für „{0}“ ( Ziel[e]: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Fehler beim Initialisieren des Projektcache.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Projektcachefehler für „{0}“ (Standardziele).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Projektcachetreffer für „{0}“ (Ziel[e]: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Der Projektcache ist für „{0}“ (Standardziele) nicht anwendbar.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Der Projektcache ist für „{0}“ (Ziel[e]: {1}) nicht anwendbar.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Fehler beim Abfragen des Projektcache für das folgende Projekt: {0}. Der Cache wird für mehrere Projekte parallel abgefragt, sodass dieses spezifische Projekt möglicherweise nicht die Ursache darstellt.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Projektcachefehler für „{0}“ (Standardziele) wird abgefragt:</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Projektcachefehler für „{0}“ (Ziele: {1}) wird abgefragt:</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Der Projektcache konnte nicht ordnungsgemäß heruntergefahren werden.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Dies ist eine nicht behandelte Ausnahme in MSBuild. RUFEN SIE EIN VORHANDENES PROBLEM AUF, ODER ERSTELLEN SIE EIN NEUES UNTER https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Nicht initialisierte Eigenschaft "{0}" lesen</target>
@@ -2079,8 +2174,8 @@ Auslastung:          {0} Durchschnittliche Auslastung: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Das Projekt wurde nicht mit dem ProjectLoadSettings.RecordDuplicateImports-Flag geladen.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Project wurde nicht mit dem Flag ProjectLoadSettings.RecordDuplicateButNotCircularImports geladen.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.en.xlf b/src/Build/Resources/xlf/Strings.en.xlf
index cff665d540f..349396675f0 100644
--- a/src/Build/Resources/xlf/Strings.en.xlf
+++ b/src/Build/Resources/xlf/Strings.en.xlf
@@ -2169,8 +2169,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 01daa41d62b..0ff85f2cfc1 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Se intentaron crear varias invalidaciones de la misma tarea: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: El archivo de caché de resultados de salida especificado está vacío.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Leer la variable de entorno "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: Debe especificarse un solo complemento de caché de proyectos, pero se encontraron varios: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Se creó una invalidación mediante la tarea: {0} en {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Inicializando complemento de caché de proyecto.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Cerrando complemento de caché de proyecto.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: la caché del proyecto inició una excepción no controlada desde el método {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Acierto de caché de proyecto para "{0}" (destinos predeterminados).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; acierto de caché</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Acierto de caché del proyecto para "{0}" ({1} destino(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: No se pudo inicializar la caché de proyectos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Error de caché de proyecto para "{0}" (destinos predeterminados).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Error de caché de proyecto para "{0}" ({1} destino(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">La memoria caché del proyecto no es aplicable para "{0}" (destinos predeterminados).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">La memoria caché del proyecto no es aplicable para "{0}" ({1} destino(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Error de la memoria caché de proyectos al consultar el proyecto siguiente: {0}. La memoria caché se consulta en paralelo para varios proyectos, por lo que puede que este proyecto específico no sea la causa.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Consultando la memoria caché del proyecto para "{0}" (destinos predeterminados):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Consultando caché de proyecto para "{0}" (destinos: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: La memoria caché de proyectos no se cerró correctamente.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Esta es una excepción no controlada en MSBuild. VOTE POR UN PROBLEMA EXISTENTE O PRESENTE UNO NUEVO EN https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Leer la propiedad no inicializada "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilización:          Utilización media de {0}: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">El proyecto no se cargó con la marca ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">El proyecto no se cargó con la marca ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 84593fc74d6..bd86334a1d6 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Tentative de création de plusieurs remplacements de la même tâche : {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Le fichier cache des résultats de sortie spécifié est vide.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Lire la variable d'environnement "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: un seul plug-in de cache de projet doit être spécifié, mais plusieurs plug-ins ont été trouvés : {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Remplacement créé à l’aide de la tâche : {0} au {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Initialisation du plug-in du cache de projet.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Arrêt du plug-in du cache de projet.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: le cache de projet a levé une exception non gérée à partir de la méthode {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Le cache de projet a été atteint pour « {0} » (cibles par défaut).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; accès au cache</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Le cache de projet a été atteint pour « {0} » ({1} cible(s) ).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: échec de l'initialisation du cache de projet.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Absence du cache de projet pour « {0} » (cibles par défaut).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Absence du cache de projet pour « {0} » ({1} cible(s) ).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Cache de projet non applicable pour « {0} » (cibles par défaut).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Cache de projet non applicable pour « {0} » (cible(s){1} ).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: échec du cache de projet au moment où il a été interrogé pour le projet suivant : {0}. Dans la mesure où le cache est interrogé en parallèle pour plusieurs projets, ce projet spécifique n'est peut-être pas à l'origine du problème.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Interrogation du cache de projet pour « {0} » (cibles par défaut) :</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Interrogation du cache de projet pour « {0} » (cibles : {1}) :</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: le cache de projet ne s'est pas arrêté correctement.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Il s’agit d’une exception non gérée dans MSBuild -- VOTEZ POUR UN PROBLÈME EXISTANT OU ENTREZ UN NOUVEAU FICHIER À https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Lire la propriété non initialisée "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilisation :          {0} Utilisation moyenne : {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Le projet n'a pas été chargé avec l'indicateur ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Le projet n'a pas été chargé avec l'indicateur ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index a3c2a92531e..b3ffd7d5a8f 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: tentativo di creare più sostituzioni della stessa attività: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: il file della cache dei risultati di output specificato è vuoto.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Legge la variabile di ambiente "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: è necessario specificare un singolo plug-in della cache del progetto, ma ne sono trovati più di uno: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">È stata creata una sostituzione con l'attività: {0} in {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Inizializzazione del plug-in della cache del progetto.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Arresto del plug-in della cache del progetto.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: la cache del progetto ha generato un'eccezione non gestita dal metodo {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Riscontro nella cache del progetto per "{0}" (destinazioni predefinite).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; riscontro nella cache</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Riscontro nella cache del progetto per "{0}" ({1} destinazioni).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: non è stato possibile inizializzare la cache del progetto.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Mancato riscontro nella cache del progetto per "{0}" (destinazioni predefinite).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Mancato riscontro nella cache del progetto per "{0}" ({1} destinazioni).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Cache del progetto non applicabile per "{0}" (destinazioni predefinite).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Cache del progetto non applicabile per "{0}" ({1} destinazioni).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: si è verificato un errore nella cache del progetto durante l'esecuzione della query relativa al progetto seguente: {0}. La query sulla cache viene eseguita in parallelo per più progetti, di conseguenza l'errore potrebbe non dipendere dal progetto specifico.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Query nella cache del progetto per "{0}" (destinazioni predefinite):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Query nella cache del progetto per "{0}" (destinazioni: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: non è stato possibile arrestare correttamente la cache del progetto.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Si tratta di un'eccezione non gestita in MSBuild-- ESEGUIRE L'UPVOTE DI UN PROBLEMA ESISTENTE O DI UN FILE NUOVO IN https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Legge la proprietà non inizializzata "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilizzo:          {0} Utilizzo medio: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Progetto non caricato con il flag ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Progetto non caricato con il flag ProjectLoadSettings.RecordDuplicateButNotCircularImports.flag.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 66e3a864ded..20194a207f9 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 同じタスクの複数のオーバーライドを作成しようとしました: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定された出力結果キャッシュ ファイルは空です。</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">環境変数 "{0}" の読み取り</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: 単一のプロジェクト キャッシュ プラグインを指定する必要がありますが、複数指定されています。{0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">タスクを使用してオーバーライドを作成しました: {1} の {0}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">プロジェクト キャッシュ プラグインを初期化しています。</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">プロジェクト キャッシュ プラグインをシャットダウンしています。</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: プロジェクト キャッシュが {0} メソッドで処理されていない例外が返されました。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">"{0}" のプロジェクト キャッシュ ヒット (既定のターゲット)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; キャッシュ ヒット</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" (ターゲット{1}) のプロジェクト キャッシュ ヒット。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: プロジェクト キャッシュを初期化できませんでした。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">"{0}" のプロジェクト キャッシュ ミス (既定のターゲット)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" (ターゲット{1} ) のプロジェクト キャッシュ ミス。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">プロジェクト キャッシュは "{0}" (既定のターゲット) には適用されません。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">プロジェクト キャッシュは"{0}" ({1} ターゲット) には適用されません。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: プロジェクト キャッシュは、プロジェクト {0} に対してクエリを実行しているときに失敗しました。このキャッシュでは複数のプロジェクトについて並列でクエリが実行されるため、この特定のプロジェクトが原因ではない可能性があります。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">"{0}" のプロジェクト キャッシュを照会しています (既定のターゲット):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">"{0}" のプロジェクト キャッシュを照会しています (ターゲット: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: プロジェクト キャッシュは正常にシャットダウンできませんでした。</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">これは MSBuild でハンドルされない例外です -- 既存の問題に賛成票を投じるか、https://aka.ms/msbuild/unhandled で新しい問題を提起してください。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">初期化されていないプロパティ "{0}" の読み取り</target>
@@ -2079,8 +2174,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">プロジェクトが ProjectLoadSettings.RecordDuplicateImports フラグで読み込まれていません。</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">プロジェクトが ProjectLoadSettings.RecordDuplicateButNotCircularImports フラグで読み込まれていません。</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index a7d18597b51..64edef66ee4 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 동일한 작업의 여러 재정의를 만들려고 했습니다. {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 지정한 출력 결과 캐시 파일이 비어 있습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">환경 변수 "{0}" 읽기</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: 단일 프로젝트 캐시 플러그 인이 지정되어야 하지만, {0}에서 여러 개를 찾았습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">다음 작업을 사용하여 재정의를 만들었습니다. {1}의 {0}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">프로젝트 캐시 플러그인을 초기화 중입니다.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">프로젝트 캐시 플러그인을 종료합니다.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: 프로젝트 캐시는 {0} 메서드에서 처리되지 않은 예외를 발생시켰습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">"{0}"(기본 대상)에 대한 프로젝트 캐시 적중입니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; 캐시 적중</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}"({1} 대상)에 대한 프로젝트 캐시 적중입니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: 프로젝트 캐시를 초기화하지 못했습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">"{0}"(기본 대상)에 대한 프로젝트 캐시 누락입니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}"({1}개 대상)에 대한 프로젝트 캐시 누락입니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">프로젝트 캐시는 "{0}"(기본 대상)에 적용할 수 없습니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">프로젝트 캐시는 "{0}"({1} 대상)에 적용할 수 없습니다.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: {0} 프로젝트에 대해 쿼리되는 동안 프로젝트 캐시가 실패했습니다. 캐시는 여러 프로젝트에 대해 병렬로 쿼리되므로 이 특정 프로젝트가 원인이 아닐 수 있습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">"{0}"(기본 대상)에 대한 프로젝트 캐시 쿼리 중:</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">"{0}"에 대한 프로젝트 캐시 쿼리(대상: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: 프로젝트 캐시가 제대로 종료되지 않았습니다.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">MSBuild에서 처리되지 않은 예외입니다. https://aka.ms/msbuild/unhandled에서 기존 문제에 찬성 투표하거나 새 문제를 제출하세요.
+ {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">초기화되지 않은 속성 "{0}" 읽기</target>
@@ -2079,8 +2174,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">프로젝트가 ProjectLoadSettings.RecordDuplicateImports 플래그가 지정된 상태에서 로드되지 않았습니다.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">ProjectLoadSettings.RecordDuplicateButNotCircularImports 플래그와 함께 프로젝트가 로드되지 않았습니다.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 7430b42c9b1..ef425e1af33 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Podjęto próbę utworzenia wielu zastąpień tego samego zadania: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Określony plik wyjściowej pamięci podręcznej wyników jest pusty.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Odczytaj zmienną środowiskową „{0}”</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: należy określić jedną wtyczkę pamięci podręcznej projektu, ale znaleziono ich wiele: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Utworzono zastąpienie przy użyciu zadania: {0} o {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Inicjowanie wtyczki pamięci podręcznej projektu.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Zamykanie wtyczki pamięci podręcznej projektu.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: pamięć podręczna projektu zgłosiła nieobsługiwany wyjątek z metody {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Trafienie pamięci podręcznej projektu dla „{0}” (domyślne elementy docelowe).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; Trafienia w pamięci podręcznej</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Trafienie w pamięci podręcznej projektu dla „{0}” ({1} elementów docelowych).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: nie można zainicjować pamięci podręcznej projektu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Chybienia w pamięci podręcznej projektu dla „{0}” (domyślne elementy docelowe).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Chybienia w pamięci podręcznej projektu dla „{0}” (domyślne elementy docelowe: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Pamięć podręczna projektu nie ma zastosowania do „{0}” (domyślne elementy docelowe).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Pamięć podręczna projektu nie ma zastosowania do „{0}” (domyślne elementy docelowe: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: w pamięci podręcznej projektu wystąpił błąd podczas wykonywania zapytania dotyczącego następującego projektu: {0}. Względem pamięci podręcznej równolegle są wykonywane zapytania o wiele projektów, dlatego ten konkretny projekt może nie być przyczyną.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Badanie pamięci podręcznej projektu dla „{0}” (domyślne elementy docelowe):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Badanie pamięci podręcznej projektu dla „{0}” (domyślne elementy docelowe: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: nie można poprawnie zamknąć pamięci podręcznej projektu.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">To jest nieobsługiwany wyjątek w programie MSBuild — POPRZYJ ISTNIEJĄCY PROBLEM LUB ZAREJESTRUJ NOWY NA https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Odczytaj niezainicjowaną właściwość „{0}”</target>
@@ -2079,8 +2174,8 @@ Wykorzystanie:          Średnie wykorzystanie {0}: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Projekt nie został załadowany przy użyciu flagi ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Nie załadowano projektu z flagą ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 511d8aa41d5..57edd51b8b6 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: tentativa de criar várias substituições da mesma tarefa: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: o arquivo de cache do resultado de saída especificado está vazio.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Ler a variável de ambiente "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: é necessário especificar só um plug-in de cache do projeto, mas foram encontrados vários: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Criou uma substituição usando a tarefa: {0} em {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Inicializando o plugin de cache do projeto.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Desligando o plug-in de cache do projeto.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: O cache do projeto lançou uma exceção sem tratamento do método {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Acerto de cache do projeto para "{0}" (destinos padrão).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; de Cache</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Acerto de cache do projeto para "{0}" ({1} destino(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: falha ao inicializar o cache do projeto.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Falta de cache do projeto para "{0}" (destinos padrão).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Falta de cache do projeto para "{0}" ({1} alvo(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Cache do projeto não aplicável para "{0}" (destinos padrão).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Cache do projeto não aplicável para "{0}" ({1} alvo(s)).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: falha no cache do projeto durante a consulta do seguinte projeto: {0}. O cache é consultado em paralelo quanto a vários projetos, portanto, esse projeto específico pode não ser a causa.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Consultando o cache do projeto para "{0}" (destinos padrão):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Consultando o cache do projeto para "{0}" (destinos: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: falha ao desligar o cache do projeto corretamente.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Esta é uma exceção sem tratamento no MSBuild -- VOTE A FAVOR DE UM PROBLEMA EXISTENTE OU REGISTRE UM NOVO EM https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Ler a propriedade não inicializada "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilização:          {0} Utilização Média: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">O projeto não foi carregado com o sinalizador ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">O projeto não foi carregado com o sinalizador ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index f19945c2240..9355b218d8e 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: попытка создать несколько переопределений одной задачи: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: указанный выходной файл кэша результатов пустой.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">Чтение переменной среды "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: должен быть указан один подключаемый модуль кэша проектов, но найдено несколько: {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Создано переопределение с помощью задачи {0} в {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Инициализация подключаемого модуля кэша проекта.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Завершение работы подключаемого модуля кэша проекта.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: в кэше проектов возникло необработанное исключение из метода {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">Попадание в кэше проекта для "{0}" (целевые объекты по умолчанию).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; Попадание в кэше</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">Попадание в кэше проекта для "{0}" (целевые объекты: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: не удалось инициализировать кэш проектов.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">Промах кэша проекта для "{0}" (целевые объекты по умолчанию).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">Промах кэша проекта для "{0}" (целевые объекты: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">Кэш проекта не применим для "{0}" (целевые объекты по умолчанию).</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">Кэш проекта не применим для "{0}" (целевые объекты: {1}).</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: произошел сбой кэша при выполнении запроса к следующему проекту: {0}. К кэшу выполнены параллельные запросы к нескольким проектам, поэтому, возможно, причина не в указанном проекте.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">Запрос кэша проекта для "{0}" (целевые объекты по умолчанию):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">Запрос кэша проекта для "{0}" (целевые объекты: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: не удалось правильно завершить работу кэша проектов.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Это необработанное исключение в MSBuild — ПРОГОЛОСУЙТЕ ЗА СУЩЕСТВУЮЩУЮ ПРОБЛЕМУ ИЛИ СОЗДАЙТЕ НОВУЮ на сайте https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Чтение неинициализированного свойства "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Проект не был загружен с флагом ProjectLoadSettings.RecordDuplicateImports.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Проект не был загружен с флагом ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 6ba8540f344..439af5cefad 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Aynı {0} görevi için birden çok geçersiz kılma işlemi oluşturulmaya çalışıldı</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Belirtilen çıkış sonucu önbellek dosyası boş.</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">"{0}" ortam değişkenini oku</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: Tek bir proje önbellek eklentisi belirtilmelidir ancak birden çok eklenti bulundu: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">{0} görevi kullanılarak geçersiz kılma işlemi oluşturuldu, saat: {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">Proje önbellek eklentisi başlatılıyor.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">Proje önbellek eklentisi kapatılıyor.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: Proje önbelleği {0} yönteminden yakalanamayan özel durum oluşturdu.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">"{0}" (varsayılan hedefler) için proje önbelleği isabeti.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; İsabetli Önbellek</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" ({1} hedefi) için proje önbelleği isabeti.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: Proje önbelleği başlatılamadı.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">"{0}" (varsayılan hedefler) için proje önbelleği eksik.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" ({1} hedefi) için proje önbelleği eksik.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">"{0}" (varsayılan hedefler) için proje önbelleği geçerli değil.</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" ({1} hedefleri) için proje önbelleği geçerli değil.</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: Proje önbelleği, {0} projesi için sorgulanırken başarısız oldu. Önbellek birden çok proje için paralel olarak sorgulandığından sorunun nedeni bu proje olmayabilir.</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">"{0}" (varsayılan hedefler) için proje önbelleği sorgulanıyor:</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">"{0}" (varsayılan hedefler: {1}) için proje önbelleği sorgulanıyor:</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: Proje önbelleği düzgün bir şekilde kapatılamadı.</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Bu, MSBuild'de işlenmeyen bir özel durumdur -- LÜTFEN MEVCUT BIR SORUNA DESTEK OYU VERIN VEYA MEVCUT BIR SORUNU BİLDİRİN: https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">"{0}" başlatılmamış özelliğini oku</target>
@@ -2079,8 +2174,8 @@ Kullanım:             {0} Ortalama Kullanım: {1:###.0}</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">Proje ProjectLoadSettings.RecordDuplicateImports bayrağıyla yüklenmedi.</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">Proje, ProjectLoadSettings.RecordDuplicateButNotCircularImports bayrağıyla yüklenmedi.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.xlf b/src/Build/Resources/xlf/Strings.xlf
index dc05e114848..81058c29480 100644
--- a/src/Build/Resources/xlf/Strings.xlf
+++ b/src/Build/Resources/xlf/Strings.xlf
@@ -1420,7 +1420,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index bed465c1a19..ca550fb5c8d 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 已尝试创建同一任务的多个重写: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定的输出结果缓存文件为空。</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">读取环境变量“{0}”</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: 必须指定单个项目缓存插件，但找到多个位置: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">已使用任务创建替代: {0} 位于 {1}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">正在初始化项目缓存插件。</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">正在关闭项目缓存插件。</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: 项目缓存从 {0} 方法引发了未经处理的异常。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">项目缓存命中 "{0}" (默认目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; 缓存命中</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">项目缓存命中 "{0}" ({1} 个目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: 未能初始化项目缓存。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">项目缓存未命中 "{0}" (默认目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">项目缓存未命中 "{0}" ({1} 目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">项目缓存不适用于 "{0}" (默认目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">项目缓存不适用于 "{0}" ({1} 目标)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: 查询以下项目时，项目缓存失败: {0}。并行查询了多个项目的缓存，因此这一项目可能不是导致此问题的原因。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">正在查询 "{0}" 的项目缓存(默认目标):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">正在查询 "{0}" 的项目缓存(目标: {1}):</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: 项目缓存未能正确关闭。</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">这是 MSBuild 中未经处理的异常 -- 请对现有问题投赞成票或在 https://aka.ms/msbuild/unhandled 上提交新问题。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">读取未初始化的属性“{0}”</target>
@@ -2079,8 +2174,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">加载项目时未使用 ProjectLoadSettings.RecordDuplicateImports 标记。</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">加载项目时未使用 ProjectLoadSettings.RecordDuplicateButNotCircularImports 标记。</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index fa8a07b3ae3..f1f0c28e519 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -92,11 +92,21 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 已嘗試建立相同工作的多個覆寫: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定的輸出結果快取檔案是空的。</target>
         <note />
       </trans-unit>
+      <trans-unit id="EnvironmentDerivedPropertyRead">
+        <source>Property '{0}' with value '{1}' expanded from the environment.</source>
+        <target state="new">Property '{0}' with value '{1}' expanded from the environment.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="EnvironmentVariableRead">
         <source>Read environment variable "{0}"</source>
         <target state="translated">讀取環境變數 "{0}"</target>
@@ -219,21 +229,99 @@
         <target state="translated">MSB4265: 只可指定單一專案快取外掛程式，但發現多個指定項目: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">已使用下列工作建立覆寫: 於 {1} 的 {0}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheBeginBuild">
+        <source>Initializing project cache plugin.</source>
+        <target state="translated">正在初始化專案快取外掛程式。</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="ProjectCacheEndBuild">
+        <source>Shutting down project cache plugin.</source>
+        <target state="translated">正在關閉專案快取外掛程式。</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheException">
         <source>MSB4273: The project cache threw an unhandled exception from the {0} method.</source>
         <target state="translated">MSB4273: 專案快取從 {0} 方法擲回未處理的例外狀況。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheHitWithDefaultTargets">
+        <source>Project cache hit for "{0}" (default targets).</source>
+        <target state="translated">"{0}" 的專案快取命中 (預設目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithOutputs">
+        <source>{0} -&gt; Cache Hit</source>
+        <target state="translated">{0} -&gt; 快取命中</target>
+        <note>
+      {StrBegin="{0} -&gt; "}LOCALIZATION: This string is used to indicate progress and matches the format for a log message from Microsoft.Common.CurrentVersion.targets. {0} is a project name.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheHitWithTargetNames">
+        <source>Project cache hit for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" 的專案快取命中 ({1} 個目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheInitializationFailed">
         <source>MSB4266: Failed to initialize the project cache.</source>
         <target state="translated">MSB4266: 無法將專案快取初始化。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheMissWithDefaultTargets">
+        <source>Project cache miss for "{0}" (default targets).</source>
+        <target state="translated">"{0}" 的專案快取遺漏 (預設目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheMissWithTargetNames">
+        <source>Project cache miss for "{0}" ({1} target(s)).</source>
+        <target state="translated">"{0}" 的專案快取遺漏 ({1} 個目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithDefaultTargets">
+        <source>Project cache not applicable for "{0}" (default targets).</source>
+        <target state="translated">不適用於 "{0}" 的專案快取 (預設目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheNotApplicableWithTargetNames">
+        <source>Project cache not applicable for "{0}" ({1} target(s)).</source>
+        <target state="translated">不適用於 "{0}" 的專案快取 ({1} 個目標)。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheQueryFailed">
         <source>MSB4267: The project cache failed while being queried for the following project: {0}. The cache is queried in parallel for multiple projects so this specific project might not be the cause.</source>
         <target state="translated">MSB4267: 查詢下列專案時，專案快取失敗: {0}。查詢多個專案時，會平行查詢快取，因此這個特定專案可能不是失敗原因。</target>
         <note />
       </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithDefaultTargets">
+        <source>Querying project cache for "{0}" (default targets):</source>
+        <target state="translated">"{0}" 的查詢專案快取 (預設目標):</target>
+        <note>
+      LOCALIZATION: {0} is a file path.
+    </note>
+      </trans-unit>
+      <trans-unit id="ProjectCacheQueryStartedWithTargetNames">
+        <source>Querying project cache for "{0}" (targets: {1}):</source>
+        <target state="translated">"{0}" 的查詢專案快取 (目標: {1})。</target>
+        <note>
+      LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names
+    </note>
+      </trans-unit>
       <trans-unit id="ProjectCacheShutdownFailed">
         <source>MSB4268: The project cache failed to shut down properly.</source>
         <target state="translated">MSB4268: 無法正確關閉專案快取。</target>
@@ -346,6 +434,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">這是 MSBuild 中未處理的例外狀況 -- 請針對現有的問題附議，或在 https://aka.ms/msbuild/unhandled 提交新的問題。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">讀取未初始化的屬性 "{0}"</target>
@@ -2079,8 +2174,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <note />
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
-        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateImports flag.</source>
-        <target state="translated">專案並未以 ProjectLoadSettings.RecordDuplicateImports 旗標載入。</target>
+        <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
+        <target state="translated">專案並未和 ProjectLoadSettings.RecordDuplicateImports 旗標一起載入。</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 81948ee46eb..fbe306e3632 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -6,15 +6,20 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using Microsoft.Build.BackEnd.Components.Logging;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.Internal
 {
     internal static class EngineFileUtilities
     {
+        private const string DriveEnumeratingWildcardMessageResourceName = "WildcardResultsInDriveEnumeration";
+
         // Regexes for wildcard filespecs that should not get expanded
         // By default all wildcards are expanded.
         private static List<Regex> s_lazyWildCardExpansionRegexes;
@@ -45,15 +50,27 @@ internal static void CaptureLazyWildcardRegexes()
         /// </summary>
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
         /// <returns>Array of file paths, unescaped.</returns>
         internal static string[] GetFileListUnescaped
             (
             string directoryEscaped,
-            string filespecEscaped
+            string filespecEscaped,
+            object loggingMechanism = null,
+            IElementLocation excludeLocation = null
             )
-
         {
-            return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: false, forceEvaluateWildCards: false, excludeSpecsEscaped: null, fileMatcher: FileMatcher.Default);
+            return GetFileList(
+                directoryEscaped,
+                filespecEscaped,
+                returnEscaped: false,
+                forceEvaluateWildCards: false,
+                excludeSpecsEscaped: null,
+                fileMatcher: FileMatcher.Default,
+                loggingMechanism: loggingMechanism,
+                excludeLocation: excludeLocation);
         }
 
         /// <summary>
@@ -69,8 +86,18 @@ string filespecEscaped
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
         /// <param name="excludeSpecsEscaped">Filespecs to exclude, escaped.</param>
-        /// <param name="forceEvaluate">Whether to force file glob expansion when eager expansion is turned off</param>
-        /// <param name="fileMatcher"></param>
+        /// <param name="forceEvaluate">Whether to force file glob expansion when eager expansion is turned off.</param>
+        /// <param name="fileMatcher">Class that contains functions for matching filenames with patterns.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="includeLocation">Location of Include element in file, used after drive enumeration detection.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
+        /// <param name="importLocation">Location of Import element in file, used after drive enumeration detection.</param>
+        /// <param name="buildEventContext">Context to log a warning, used after drive enumeration detection.</param>
+        /// <param name="buildEventFileInfoFullPath">Full path to project file to create BuildEventFileInfo,
+        /// used after drive enumeration detection.</param>
+        /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
+        /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths, escaped.</returns>
         internal static string[] GetFileListEscaped
             (
@@ -78,10 +105,30 @@ internal static string[] GetFileListEscaped
             string filespecEscaped,
             IEnumerable<string> excludeSpecsEscaped = null,
             bool forceEvaluate = false,
-            FileMatcher fileMatcher = null
+            FileMatcher fileMatcher = null,
+            object loggingMechanism = null,
+            IElementLocation includeLocation = null,
+            IElementLocation excludeLocation = null,
+            IElementLocation importLocation = null,
+            BuildEventContext buildEventContext = null,
+            string buildEventFileInfoFullPath = null,
+            bool disableExcludeDriveEnumerationWarning = false
             )
         {
-            return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: true, forceEvaluate, excludeSpecsEscaped, fileMatcher ?? FileMatcher.Default);
+            return GetFileList(
+                directoryEscaped,
+                filespecEscaped,
+                returnEscaped: true,
+                forceEvaluate,
+                excludeSpecsEscaped,
+                fileMatcher ?? FileMatcher.Default,
+                loggingMechanism: loggingMechanism,
+                includeLocation: includeLocation,
+                excludeLocation: excludeLocation,
+                importLocation: importLocation,
+                buildEventFileInfoFullPath: buildEventFileInfoFullPath,
+                buildEventContext: buildEventContext,
+                disableExcludeDriveEnumerationWarning: disableExcludeDriveEnumerationWarning);
         }
 
         internal static bool FilespecHasWildcards(string filespecEscaped)
@@ -111,9 +158,19 @@ internal static bool FilespecHasWildcards(string filespecEscaped)
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
         /// <param name="returnEscaped"><code>true</code> to return escaped specs.</param>
-        /// <param name="forceEvaluateWildCards">Whether to force file glob expansion when eager expansion is turned off</param>
+        /// <param name="forceEvaluateWildCards">Whether to force file glob expansion when eager expansion is turned off.</param>
         /// <param name="excludeSpecsEscaped">The exclude specification, escaped.</param>
-        /// <param name="fileMatcher"></param>
+        /// <param name="fileMatcher">Class that contains functions for matching filenames with patterns.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="includeLocation">Location of Include element in file, used after drive enumeration detection.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
+        /// <param name="importLocation">Location of Import element in file, used after drive enumeration detection.</param>
+        /// <param name="buildEventContext">Context to log a warning, used after drive enumeration detection.</param>
+        /// <param name="buildEventFileInfoFullPath">Full path to project file to create BuildEventFileInfo,
+        /// used after drive enumeration detection.</param>
+        /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
+        /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths.</returns>
         private static string[] GetFileList
             (
@@ -122,13 +179,24 @@ private static string[] GetFileList
             bool returnEscaped,
             bool forceEvaluateWildCards,
             IEnumerable<string> excludeSpecsEscaped,
-            FileMatcher fileMatcher
+            FileMatcher fileMatcher,
+            object loggingMechanism = null,
+            IElementLocation includeLocation = null,
+            IElementLocation excludeLocation = null,
+            IElementLocation importLocation = null,
+            BuildEventContext buildEventContext = null,
+            string buildEventFileInfoFullPath = null,
+            bool disableExcludeDriveEnumerationWarning = false
             )
         {
             ErrorUtilities.VerifyThrowInternalLength(filespecEscaped, nameof(filespecEscaped));
 
             string[] fileList;
 
+            // Used to properly detect and log drive enumerating wildcards when applicable.
+            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;
+            string excludeFileSpec = string.Empty;
+
             if (!FilespecHasWildcards(filespecEscaped) ||
                 FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards))
             {
@@ -151,8 +219,102 @@ FileMatcher fileMatcher
                 // the list into a string array.  If the filespec started out
                 // as a relative path, we will get back a bunch of relative paths.
                 // If the filespec started out as an absolute path, we will get
-                // back a bunch of absolute paths.
-                fileList = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+                // back a bunch of absolute paths. Also retrieves the search action
+                // and relevant Exclude filespec for drive enumerating wildcard detection.
+                (fileList, action, excludeFileSpec) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+
+                // Determines whether Exclude filespec or passed in file spec should be
+                // used in drive enumeration warning or exception.
+                bool excludeFileSpecIsEmpty = string.IsNullOrWhiteSpace(excludeFileSpec);
+                string fileSpec = excludeFileSpecIsEmpty ? filespecUnescaped : excludeFileSpec;
+
+                switch (action)
+                {
+                    case (FileMatcher.SearchAction.LogDriveEnumeratingWildcard):
+                        switch (loggingMechanism)
+                        {
+                            // Logging mechanism received from ItemGroupIntrinsicTask.
+                            case TargetLoggingContext targetLoggingContext:
+                                LogDriveEnumerationWarningWithTargetLoggingContext(
+                                    targetLoggingContext,
+                                    includeLocation,
+                                    excludeLocation,
+                                    excludeFileSpecIsEmpty,
+                                    disableExcludeDriveEnumerationWarning,                                
+                                    fileSpec);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator.
+                            case ILoggingService loggingService:
+                                LogDriveEnumerationWarningWithLoggingService(
+                                    loggingService,
+                                    includeLocation,
+                                    buildEventContext,
+                                    buildEventFileInfoFullPath,
+                                    filespecUnescaped);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                            case EvaluationLoggingContext evaluationLoggingContext:
+                                LogDriveEnumerationWarningWithEvaluationLoggingContext(
+                                    evaluationLoggingContext,
+                                    importLocation,
+                                    includeLocation,
+                                    excludeLocation,
+                                    excludeFileSpecIsEmpty,
+                                    filespecUnescaped,
+                                    fileSpec);
+
+                                break;
+
+                            default:
+                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                        }
+
+                        break;
+
+                    case (FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard):
+                        switch (loggingMechanism)
+                        {
+                            // Logging mechanism received from ItemGroupIntrinsicTask.
+                            case TargetLoggingContext targetLoggingContext:
+                                ThrowDriveEnumerationExceptionWithTargetLoggingContext(
+                                    includeLocation,
+                                    excludeLocation,
+                                    excludeFileSpecIsEmpty,
+                                    filespecUnescaped,
+                                    fileSpec);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator.
+                            case ILoggingService loggingService:
+                                ThrowDriveEnumerationExceptionWithLoggingService(includeLocation, filespecUnescaped);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                            case EvaluationLoggingContext evaluationLoggingContext:
+                                ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(
+                                    importLocation,
+                                    includeLocation,
+                                    excludeLocation,
+                                    filespecUnescaped,
+                                    fileSpec,
+                                    excludeFileSpecIsEmpty);
+
+                                break;
+
+                            default:
+                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                        }
+
+                        break;
+
+                    default: break;
+                }
 
                 ErrorUtilities.VerifyThrow(fileList != null, "We must have a list of files here, even if it's empty.");
 
@@ -178,6 +340,164 @@ FileMatcher fileMatcher
             return fileList;
         }
 
+        private static void LogDriveEnumerationWarningWithTargetLoggingContext(TargetLoggingContext targetLoggingContext, IElementLocation includeLocation, IElementLocation excludeLocation, bool excludeFileSpecIsEmpty, bool disableExcludeDriveEnumerationWarning, string fileSpec)
+        {
+            // Both condition lines are necessary to skip for the first GetFileListEscaped call
+            // and reach for the GetFileListUnescaped call when the wildcarded Exclude attribute results
+            // in a drive enumeration. Since we only want to check for the Exclude
+            // attribute here, we want to ensure that includeLocation is null - otherwise,
+            // Include wildcard attributes for the GetFileListEscaped calls would falsely appear
+            // with the Exclude attribute in the logged warning.
+            if (((!excludeFileSpecIsEmpty) && (!disableExcludeDriveEnumerationWarning)) ||
+                ((includeLocation == null) && (excludeLocation != null)))
+            {
+                targetLoggingContext.LogWarning(
+                        DriveEnumeratingWildcardMessageResourceName,
+                        fileSpec,
+                        XMakeAttributes.exclude,
+                        XMakeElements.itemGroup,
+                        excludeLocation.LocationString);
+            }
+
+            // Both conditions are necessary to reach for both GetFileListEscaped calls
+            // and skip for the GetFileListUnescaped call when the wildcarded Include attribute
+            // results in drive enumeration.
+            else if (excludeFileSpecIsEmpty && (includeLocation != null))
+            {
+                targetLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup,
+                    includeLocation.LocationString);
+            }
+        }
+
+        private static void LogDriveEnumerationWarningWithLoggingService(ILoggingService loggingService, IElementLocation includeLocation, BuildEventContext buildEventContext, string buildEventFileInfoFullPath, string filespecUnescaped)
+        {
+            if (buildEventContext != null && includeLocation != null)
+            {
+                loggingService.LogWarning(
+                    buildEventContext,
+                    string.Empty,
+                    new BuildEventFileInfo(buildEventFileInfoFullPath),
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup,
+                    includeLocation.LocationString);
+            }
+        }
+
+        private static void LogDriveEnumerationWarningWithEvaluationLoggingContext(EvaluationLoggingContext evaluationLoggingContext, IElementLocation importLocation, IElementLocation includeLocation, IElementLocation excludeLocation, bool excludeFileSpecIsEmpty, string filespecUnescaped, string fileSpec)
+        {
+            if (importLocation != null)
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.project,
+                    XMakeElements.import,
+                    importLocation.LocationString);
+            }
+            else if (excludeFileSpecIsEmpty && includeLocation != null)
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup,
+                    includeLocation.LocationString);
+            }
+            else if (excludeLocation != null)
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.exclude,
+                    XMakeElements.itemGroup,
+                    excludeLocation.LocationString);
+            }
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithTargetLoggingContext(IElementLocation includeLocation, IElementLocation excludeLocation, bool excludeFileSpecIsEmpty, string filespecUnescaped, string fileSpec)
+        {
+            // The first condition is necessary to reach for both GetFileListEscaped calls
+            // whenever the wildcarded Include attribute results in drive enumeration, and
+            // the second condition is necessary to skip for the GetFileListUnescaped call
+            // whenever the wildcarded Exclude attribute results in drive enumeration.
+            if (excludeFileSpecIsEmpty && (includeLocation != null))
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    includeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup,
+                    includeLocation.LocationString);
+            }
+
+            // The first condition is necessary to reach for both GetFileListEscaped calls
+            // whenever the wildcarded Exclude attribute results in drive enumeration, and
+            // the second condition is necessary to reach for the GetFileListUnescaped call
+            // (also when the wildcarded Exclude attribute results in drive enumeration).
+            else if (((!excludeFileSpecIsEmpty) || (includeLocation == null)) && (excludeLocation != null))
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                        excludeLocation,
+                        DriveEnumeratingWildcardMessageResourceName,
+                        fileSpec,
+                        XMakeAttributes.exclude,
+                        XMakeElements.itemGroup,
+                        excludeLocation.LocationString);
+            }
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithLoggingService(IElementLocation includeLocation, string filespecUnescaped)
+        {
+            ProjectErrorUtilities.ThrowInvalidProject(
+                includeLocation,
+                DriveEnumeratingWildcardMessageResourceName,
+                filespecUnescaped,
+                XMakeAttributes.include,
+                XMakeElements.itemGroup,
+                includeLocation.LocationString);
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(IElementLocation importLocation, IElementLocation includeLocation, IElementLocation excludeLocation, string filespecUnescaped, string fileSpec, bool excludeFileSpecIsEmpty)
+        {
+            if (importLocation != null)
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    importLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.project,
+                    XMakeElements.import,
+                    importLocation.LocationString);
+            }
+            else if (excludeFileSpecIsEmpty && includeLocation != null)
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    includeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup,
+                    includeLocation.LocationString);
+            }
+            else if (excludeLocation != null)
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    excludeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.exclude,
+                    XMakeElements.itemGroup,
+                    excludeLocation.LocationString);
+            }
+        }
+
         private static bool FilespecMatchesLazyWildcard(string filespecEscaped, bool forceEvaluateWildCards)
         {
             return Traits.Instance.UseLazyWildCardEvaluation && !forceEvaluateWildCards && MatchesLazyWildcard(filespecEscaped);
@@ -225,9 +545,14 @@ private static bool MatchesLazyWildcard(string fileSpec)
             return _regexMatchCache.Value.GetOrAdd(fileSpec, file => s_lazyWildCardExpansionRegexes.Any(regex => regex.IsMatch(fileSpec)));
         }
 
-        /// Returns a Func that will return true IFF its argument matches any of the specified filespecs
-        /// Assumes filespec may be escaped, so it unescapes it
+        /// <summary>
+        /// Returns a Func that will return true IFF its argument matches any of the specified filespecs.
+        /// Assumes filespec may be escaped, so it unescapes it.
         /// The returned function makes no escaping assumptions or escaping operations. Its callers should control escaping.
+        /// </summary>
+        /// <param name="filespecsEscaped"></param>
+        /// <param name="currentDirectory"></param>
+        /// <returns>A Func that will return true IFF its argument matches any of the specified filespecs.</returns>
         internal static Func<string, bool> GetFileSpecMatchTester(IList<string> filespecsEscaped, string currentDirectory)
         {
             var matchers = filespecsEscaped
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index 281b0278888..f3c56d13061 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     internal readonly struct FileSpecMatcherTester
diff --git a/src/Build/Utilities/ImmutableCollectionsExtensions.cs b/src/Build/Utilities/ImmutableCollectionsExtensions.cs
index 242c5248400..6857e5c48eb 100644
--- a/src/Build/Utilities/ImmutableCollectionsExtensions.cs
+++ b/src/Build/Utilities/ImmutableCollectionsExtensions.cs
@@ -7,6 +7,8 @@
 // provided by Linq. The immutable collections library includes ImmutableArrayExtensions
 // which is also in this namespace.
 
+#nullable disable
+
 namespace System.Linq
 {
     internal static class ImmutableCollectionsExtensions
diff --git a/src/Build/Utilities/NuGetFrameworkWrapper.cs b/src/Build/Utilities/NuGetFrameworkWrapper.cs
index a318ddb8117..9d3546fcf37 100644
--- a/src/Build/Utilities/NuGetFrameworkWrapper.cs
+++ b/src/Build/Utilities/NuGetFrameworkWrapper.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -40,7 +42,7 @@ public NuGetFrameworkWrapper()
                 var NuGetFrameworkDefaultCompatibilityProvider = NuGetAssembly.GetType("NuGet.Frameworks.DefaultCompatibilityProvider");
                 ParseMethod = NuGetFramework.GetMethod("Parse", new Type[] { typeof(string) });
                 IsCompatibleMethod = NuGetFrameworkCompatibilityProvider.GetMethod("IsCompatible");
-                DefaultCompatibilityProvider = NuGetFrameworkDefaultCompatibilityProvider.GetMethod("get_Instance").Invoke(null, new object[] { });
+                DefaultCompatibilityProvider = NuGetFrameworkDefaultCompatibilityProvider.GetMethod("get_Instance").Invoke(null, Array.Empty<object>());
                 FrameworkProperty = NuGetFramework.GetProperty("Framework");
                 VersionProperty = NuGetFramework.GetProperty("Version");
                 PlatformProperty = NuGetFramework.GetProperty("Platform");
@@ -86,7 +88,7 @@ public bool IsCompatible(string target, string candidate)
 
         private string GetNonZeroVersionParts(Version version, int minVersionPartCount)
         {
-            var nonZeroVersionParts = version.Revision == 0 ? version.Build == 0 ? version.Minor == 0 ? 1 : 2 : 3: 4;
+            var nonZeroVersionParts = version.Revision == 0 ? version.Build == 0 ? version.Minor == 0 ? 1 : 2 : 3 : 4;
             return version.ToString(Math.Max(nonZeroVersionParts, minVersionPartCount));
         }
     }
diff --git a/src/Build/Utilities/RegistryKeyWrapper.cs b/src/Build/Utilities/RegistryKeyWrapper.cs
index c1503c698ef..e8f386c6f61 100644
--- a/src/Build/Utilities/RegistryKeyWrapper.cs
+++ b/src/Build/Utilities/RegistryKeyWrapper.cs
@@ -8,6 +8,8 @@
 using Microsoft.Win32;
 using RegistryException = Microsoft.Build.Exceptions.RegistryException;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
@@ -81,11 +83,8 @@ public virtual string Name
                 {
                     return Exists() ? WrappedKey.Name : string.Empty;
                 }
-                catch (Exception ex)
+                catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
                 {
-                    if (ExceptionHandling.NotExpectedRegistryException(ex))
-                        throw;
-
                     throw new RegistryException(ex.Message, ex);
                 }
             }
@@ -114,11 +113,8 @@ public virtual object GetValue(string name)
             {
                 return Exists() ? WrappedKey.GetValue(name) : null;
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
             {
-                if (ExceptionHandling.NotExpectedRegistryException(ex))
-                    throw;
-
                 throw new RegistryException(ex.Message, Name + "@" + name, ex);
             }
         }
@@ -133,11 +129,8 @@ public virtual string[] GetValueNames()
             {
                 return Exists() ? WrappedKey.GetValueNames() : Array.Empty<string>();
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
             {
-                if (ExceptionHandling.NotExpectedRegistryException(ex))
-                    throw;
-
                 throw new RegistryException(ex.Message, Name, ex);
             }
         }
@@ -152,11 +145,8 @@ public virtual string[] GetSubKeyNames()
             {
                 return Exists() ? WrappedKey.GetSubKeyNames() : Array.Empty<string>();
             }
-            catch (Exception ex)
+            catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
             {
-                if (ExceptionHandling.NotExpectedRegistryException(ex))
-                    throw;
-
                 throw new RegistryException(ex.Message, Name, ex);
             }
         }
@@ -217,11 +207,8 @@ private RegistryKey WrappedKey
                     {
                         _wrappedKey = _registryHive.OpenSubKey(_registryKeyPath);
                     }
-                    catch (Exception ex)
+                    catch (Exception ex) when (!ExceptionHandling.NotExpectedRegistryException(ex))
                     {
-                        if (ExceptionHandling.NotExpectedRegistryException(ex))
-                            throw;
-
                         throw new RegistryException(ex.Message, _wrappedKey == null ? string.Empty : Name, ex);
                     }
                     finally
diff --git a/src/Build/Utilities/SimpleVersion.cs b/src/Build/Utilities/SimpleVersion.cs
index e277165f314..052add40c0a 100644
--- a/src/Build/Utilities/SimpleVersion.cs
+++ b/src/Build/Utilities/SimpleVersion.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 325dc50740a..188c93e2bc9 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -17,6 +17,8 @@
 using Toolset = Microsoft.Build.Evaluation.Toolset;
 using XmlElementWithLocation = Microsoft.Build.Construction.XmlElementWithLocation;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
diff --git a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
index c139c1366fd..022027b249a 100644
--- a/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.XmlElementChildIterator.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Construction;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     partial class ProjectXmlUtilities
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index 3c1528a3064..7dec7be9239 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
diff --git a/src/Build/Xml/XmlReaderExtension.cs b/src/Build/Xml/XmlReaderExtension.cs
index aa8e186f838..8cfd9b6497e 100644
--- a/src/Build/Xml/XmlReaderExtension.cs
+++ b/src/Build/Xml/XmlReaderExtension.cs
@@ -4,6 +4,8 @@
 using System.Xml;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
@@ -38,6 +40,12 @@ private XmlReaderExtension(string file, bool loadAsReadOnly)
                 _streamReader = new StreamReader(_stream, s_utf8NoBom, detectEncodingFromByteOrderMarks: true);
                 Encoding detectedEncoding;
 
+#if RUNTIME_TYPE_NETCORE
+                // Ensure that all Windows codepages are available.
+                // Safe to call multiple times per https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.registerprovider
+                Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
+#endif
+
                 // The XmlDocumentWithWithLocation class relies on the reader's BaseURI property to be set,
                 // thus we pass the document's file path to the appropriate xml reader constructor.
                 Reader = GetXmlReader(file, _streamReader, loadAsReadOnly, out detectedEncoding);
diff --git a/src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj b/src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj
index 57e9ef80921..58ad5723984 100644
--- a/src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj
+++ b/src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj
@@ -1,4 +1,4 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <AssemblyName>Microsoft.Build.Conversion.Core</AssemblyName>
     <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
@@ -8,6 +8,7 @@
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which contains logic for converting projects.  NOTE: This assembly is deprecated.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
     <NoWarn>$(NoWarn);1570;1572;1573;1587</NoWarn>
+    <Nullable>disable</Nullable>
   </PropertyGroup>
   <ItemGroup>
     <!-- Source Files -->
diff --git a/src/Deprecated/Conversion/README.md b/src/Deprecated/Conversion/README.md
new file mode 100644
index 00000000000..3e39338920b
--- /dev/null
+++ b/src/Deprecated/Conversion/README.md
@@ -0,0 +1,5 @@
+# Microsoft.Build.Conversion.Core
+
+⚠️ This package is **deprecated** and should not be referenced. It will be removed in a future version of MSBuild.
+
+Contains `Microsoft.Build.Conversion.Core.dll`, which is provided with MSBuild for compatibility purposes.
diff --git a/src/Deprecated/Directory.Build.props b/src/Deprecated/Directory.Build.props
new file mode 100644
index 00000000000..18fa095b5f7
--- /dev/null
+++ b/src/Deprecated/Directory.Build.props
@@ -0,0 +1,7 @@
+<Project>
+  <!-- Import the repo root props -->
+  <Import Project="..\Directory.Build.props"/>
+  <PropertyGroup>
+    <ProjectIsDeprecated>true</ProjectIsDeprecated>
+  </PropertyGroup>
+</Project>
\ No newline at end of file
diff --git a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
index acfe28f7bdc..557447e9cda 100644
--- a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
@@ -401,7 +401,7 @@ public void DistributedFileLoggerParameters()
                 }
                 finally
                 {
-                    if(Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
+                    if (Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
                     {
                         File.Delete(Path.Combine(Environment.CurrentDirectory, "tempura\\mylogfile1.log"));
                         Directory.Delete(Path.Combine(Environment.CurrentDirectory, "tempura"));
diff --git a/src/Deprecated/Engine.UnitTests/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
index 1144ce87b6f..ad705831690 100644
--- a/src/Deprecated/Engine.UnitTests/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
@@ -4641,7 +4641,7 @@ public void MSBuildExtensionsPathDefault()
             Project myProject = new Project(myEngine);
 
             string expectedValue = null;
-            if(Environment.Is64BitOperatingSystem)
+            if (Environment.Is64BitOperatingSystem)
             {
                 expectedValue = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
             }
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 9ca7eca684f..57fc959a2fc 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -174,7 +174,7 @@ public Object this[Object key]
             {
                 lock (sharedLock)
                 {
-                    if(writeableData != null)
+                    if (writeableData != null)
                     {
                         writeableData[key] = value;
                     }
diff --git a/src/Deprecated/Engine/Engine/Engine.cs b/src/Deprecated/Engine/Engine/Engine.cs
index fa138a85c81..e0bd956d1c4 100644
--- a/src/Deprecated/Engine/Engine/Engine.cs
+++ b/src/Deprecated/Engine/Engine/Engine.cs
@@ -11,13 +11,6 @@
 using System.Globalization;
 using System.Threading;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
-#endif
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
 
@@ -200,7 +193,7 @@ public class Engine
         // this seed is used to generate unique logger ids for each distributed logger
         private int lastUsedLoggerId;
 
-        // this boolean is true if central logging is enabled 
+        // this boolean is true if central logging is enabled
         private bool enabledCentralLogging;
 
         // The class used to observe engine operation to collect data and detect errors
@@ -212,7 +205,7 @@ public class Engine
         // Number of CPUs this engine is instantiated with
         private int numberOfCpus;
 
-        // The current directory at the time the Engine was constructed -- 
+        // The current directory at the time the Engine was constructed --
         // if msbuild.exe is hosting, this is the current directory when
         // msbuild.exe was started
         private string startupDirectory;
@@ -350,7 +343,7 @@ internal Engine
             ToolsetDefinitionLocations locations
         )
         {
-            // No need to check whether locations parameter 
+            // No need to check whether locations parameter
             // is null, because it is a value type
 
             this.startupDirectory = Environment.CurrentDirectory;
@@ -908,8 +901,8 @@ internal void AddToolset(Toolset toolset)
                 // It already exists: replace it with the new toolset
                 toolsetStateMap[toolset.ToolsVersion] = new ToolsetState(this, toolset);
 
-                // We must be sure to notify all of the loaded projects with this 
-                // tools version that they are dirty so they will later pick up any changes 
+                // We must be sure to notify all of the loaded projects with this
+                // tools version that they are dirty so they will later pick up any changes
                 // to the ToolsetState.
                 DirtyProjectsUsingToolsVersion(toolset.ToolsVersion);
             }
@@ -982,7 +975,7 @@ internal void PopulateToolsetStateMap(ToolsetDefinitionLocations locations)
                     if (pathTo20Framework == null)
                     {
                         // We have been given no default, so we want to choose 2.0, but .NET 2.0 is not installed.
-                        // In general we do not verify that MSBuildToolsPath's point to a valid location, 
+                        // In general we do not verify that MSBuildToolsPath's point to a valid location,
                         // so failing here would be inconsistent. The build might not even use this toolset.
                         // Instead, synthesize what would be the path to the .NET 2.0 install location.
                         // If the build tries to use the default toolset, the problem will be discovered then.
@@ -1126,7 +1119,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
             lastUsedLoggerId++;
             forwardingLogger.LoggerId = loggerId;
 
-            //Create and configure the local node logger 
+            //Create and configure the local node logger
             IForwardingLogger localForwardingLogger = null;
             try
             {
@@ -1136,7 +1129,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
                 {
                     InternalLoggerException.Throw(null, null, "LoggerNotFoundError", true, forwardingLogger.Name);
                 }
-                // Configure the object 
+                // Configure the object
                 EventRedirector newRedirector = new EventRedirector(forwardingLogger.LoggerId, primaryLoggingServices);
                 localForwardingLogger.BuildEventRedirector = newRedirector;
                 localForwardingLogger.Parameters = forwardingLogger.LoggerSwitchParameters;
@@ -1163,7 +1156,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
             // Register the local forwarding logger to listen for all local events
             RegisterLoggerInternal(localForwardingLogger, eventSourceForForwarding, true);
 
-            //Register this logger's node logger with the node manager so that all 
+            //Register this logger's node logger with the node manager so that all
             //the nodes instantiate this node logger and forward the events
             nodeManager.RegisterNodeLogger(forwardingLogger);
 
@@ -1279,7 +1272,7 @@ internal void EndingEngineExecution(bool buildResult, bool exitedDueToError)
                     // Post the event to old style loggers and forwarding loggers on parent node
                     LoggingServices.LogBuildFinished(buildResult);
 
-                    // Cause the forwarding loggers to process BuildFinished event and whatever other events 
+                    // Cause the forwarding loggers to process BuildFinished event and whatever other events
                     // were in the queue (on the child the event are flushed to the level of the outofproc logging service)
                     LoggingServices.ProcessPostedLoggingEvents();
 
@@ -1296,15 +1289,15 @@ internal void EndingEngineExecution(bool buildResult, bool exitedDueToError)
                 // For each of the projects that the host has actually loaded (and holding on to),
                 // remove all projects with that same fullpath from the ProjectManager.  There are
                 // a couple of reasons for this:
-                // 1.   Because the host is hanging on to this projects, during design-time the host 
+                // 1.   Because the host is hanging on to this projects, during design-time the host
                 //      might decide to change the GlobalProperties on one of these projects.  He might
                 //      change the GlobalProperties such that they now are equivalent to the GlobalProperties
-                //      for one of the projects in the ProjectManager.  That would get weird because 
+                //      for one of the projects in the ProjectManager.  That would get weird because
                 //      we'd end up with two projects with the same fullpath and same GlobalProperties,
                 //      and we wouldn't know which one to choose (on the next build).
-                // 2.   Because the host is hanging on to the projects, it may decide to make in-memory 
+                // 2.   Because the host is hanging on to the projects, it may decide to make in-memory
                 //      changes to the project.  On next build, we need to take those changes into
-                //      account, and any instances of Project in the ProjectManager won't have those 
+                //      account, and any instances of Project in the ProjectManager won't have those
                 //      changes.
                 this.cacheOfBuildingProjects.RemoveProjects(loadedProjectFullPath);
             }
@@ -1376,7 +1369,7 @@ Project project
 
             // Host is mucking with this project.  Remove the cached versions of
             // all projects with this same full path.  Over aggressively getting rid
-            // of stuff from the cache is better than accidentally leaving crud in 
+            // of stuff from the cache is better than accidentally leaving crud in
             // there.
             UnloadProject(project, true /* Unload all versions */);
         }
@@ -1433,7 +1426,7 @@ string newFullFileName
 
                 // Host is mucking with this project.  Remove the cached versions of
                 // all projects with this same full path.  Over aggressively getting rid
-                // of stuff from the cache is better than accidentally leaving crud in 
+                // of stuff from the cache is better than accidentally leaving crud in
                 // there.
                 this.cacheOfBuildingProjects.RemoveProjects(oldFullFileName);
             }
@@ -1454,7 +1447,7 @@ string newFullFileName
 
                 // Host is mucking with this project.  Remove the cached versions of
                 // all projects with this same full path.  Over aggressively getting rid
-                // of stuff from the cache is better than accidentally leaving crud in 
+                // of stuff from the cache is better than accidentally leaving crud in
                 // there.
                 this.cacheOfBuildingProjects.RemoveProjects(newFullFileName);
             }
@@ -1463,7 +1456,7 @@ string newFullFileName
             {
                 // MSBuild projects keep track of PropertyGroups that are imported from other
                 // files.  It does this tracking by using the project file name of the imported
-                // file.  So when a project gets renamed, as is being done here, we need 
+                // file.  So when a project gets renamed, as is being done here, we need
                 // to go update all those imported PropertyGroup records with the new filename.
 
                 // Loop through every loaded project, and inform it about the newly named
@@ -1632,7 +1625,7 @@ internal BuildResult EngineBuildLoop(BuildRequest terminatingBuildRequest)
             {
                 int eventType;
 
-                // See if we have anything to do without waiting on the handles which is expensive 
+                // See if we have anything to do without waiting on the handles which is expensive
                 // for kernel mode objects.
                 if (this.engineAbortCachedValue)
                 {
@@ -1693,7 +1686,7 @@ internal BuildResult EngineBuildLoop(BuildRequest terminatingBuildRequest)
                     // Execute the command
                     engineCommand.Execute(this);
 
-                    // Don't consider node status request to be activity 
+                    // Don't consider node status request to be activity
                     if (!(engineCommand is RequestStatusEngineCommand))
                     {
                         lastLoopActivity = DateTime.Now.Ticks;
@@ -1863,14 +1856,6 @@ bool initialCall
                 SetBuildItemCurrentDirectory(project);
                 if (initialCall)
                 {
-#if (!STANDALONEBUILD)
-                    CodeMarkers.Instance.CodeMarker(CodeMarkerEvent.perfMSBuildEngineBuildProjectBegin);
-#endif
-#if MSBUILDENABLEVSPROFILING 
-                    string beginProjectBuild = String.Format(CultureInfo.CurrentCulture, "Build Project {0} Using Old OM - Start", project.FullFileName);
-                    DataCollection.CommentMarkProfile(8802, beginProjectBuild);
-#endif 
-
                     // Make sure we were passed in a project object.
                     error.VerifyThrowArgument(project != null, "MissingProject", "Project");
 
@@ -1941,13 +1926,6 @@ bool initialCall
 
                 if (buildRequest?.BuildCompleted == true || exitedDueToError)
                 {
-#if (!STANDALONEBUILD)
-                    CodeMarkers.Instance.CodeMarker(CodeMarkerEvent.perfMSBuildEngineBuildProjectEnd);
-#endif
-#if MSBUILDENABLEVSPROFILING 
-                    string endProjectBuild = String.Format(CultureInfo.CurrentCulture, "Build Project {0} Using Old OM - End", project.FullFileName);
-                    DataCollection.CommentMarkProfile(8803, endProjectBuild);
-#endif 
                 }
             }
         }
@@ -2088,7 +2066,7 @@ private void StartRootProjectBuild(BuildRequest buildRequest, Project project)
 
             if (0 == (buildRequest.BuildSettings & BuildSettings.DoNotResetPreviouslyBuiltTargets))
             {
-                // Reset the build state for all projects that are still cached from the 
+                // Reset the build state for all projects that are still cached from the
                 // last build and the currently loaded projects that we just added to
                 // the ProjectManager.
                 this.cacheOfBuildingProjects.ResetBuildStatusForAllProjects();
@@ -2353,7 +2331,7 @@ string [] toolVersions
             Hashtable[] targetOutputsWorkingCopy = new Hashtable[buildRequests.Length];
             for (int i = 0; i < buildRequests.Length; i++)
             {
-                // if the caller wants to retrieve target outputs, create a working copy to avoid clobbering 
+                // if the caller wants to retrieve target outputs, create a working copy to avoid clobbering
                 // other data in the hashtable
                 if (targetOutputsPerProject[i] != null)
                 {
@@ -2421,10 +2399,10 @@ string [] toolVersions
             {
                 // Post build finished event if the finally is not being executed due to an exception
                 EndingEngineExecution(overallResult, exitedDueToError);
-                // Reset the current directory to the value before this 
+                // Reset the current directory to the value before this
                 // project built
                 Environment.CurrentDirectory = currentDirectory;
-                // We reset the path back to the original value in case the 
+                // We reset the path back to the original value in case the
                 // host is depending on the current directory to find projects
                 Project.PerThreadProjectDirectory = currentPerThreadProjectDirectory;
             }
@@ -2452,7 +2430,7 @@ private BuildRequest CreateLocalBuildRequest(BuildEventContext buildEventContext
             buildRequest.ProjectToBuild = project;
             // Set the request build flags
             buildRequest.BuildSettings = buildFlags;
-            // Set the boolean requesting the project start/finish events 
+            // Set the boolean requesting the project start/finish events
             buildRequest.FireProjectStartedFinishedEvents = true;
             // Set the dictionary to return target outputs in, if any
             buildRequest.OutputsByTarget = targetOutputs;
@@ -2503,7 +2481,7 @@ BuildRequest buildRequest
                 ArrayList actuallyBuiltTargets;
 
                 // If the tools version is empty take a quick peek at the project file to determine if it has a tools version defined
-                if(String.IsNullOrEmpty(buildRequest.ToolsetVersion))
+                if (String.IsNullOrEmpty(buildRequest.ToolsetVersion))
                 {
                     buildRequest.ToolsetVersion = XmlUtilities.GetAttributeValueForElementFromFile(buildRequest.ProjectFileName, XMakeAttributes.project, XMakeAttributes.toolsVersion);
                     buildRequest.ToolsVersionPeekedFromProjectFile = true;
@@ -2521,7 +2499,7 @@ BuildRequest buildRequest
                 {
                     // There's no cached result: we have to build it. Figure out which node to build it on.
                     Project matchingProjectCurrentlyLoaded = null;
-                    
+
                     // See if we have a project loaded by the host already that matches the full path, in the
                     // list of projects which were loaded at the beginning of the build.
                     Project projectCurrentlyLoaded = (Project)this.projectsLoadedByHost[projectFileInfo.FullName];
@@ -2594,7 +2572,7 @@ BuildRequest buildRequest
 
                     if (evaluationNode != EngineCallback.inProcNode)
                     {
-                        // The project will be evaluated remotely so add a record 
+                        // The project will be evaluated remotely so add a record
                         // indicating where this project is being evaluated
                         if (evaluationNode != EngineCallback.parentNode)
                         {
@@ -2617,7 +2595,7 @@ BuildRequest buildRequest
                     }
                     else
                     {
-                        // Increment number of projects in progress 
+                        // Increment number of projects in progress
                         if (!buildRequest.IsGeneratedRequest)
                         {
                             IncrementProjectsInProgress();
@@ -2759,7 +2737,7 @@ bool toolsVersionPeekedFromProjectFile
                         // If a user customized his build process and is explicitly passing in Properties to the
                         // <MSBuild> task, then we would be entering this codepath for a totally legitimate
                         // scenario, so we don't want to disallow it.  We just want to know about it if it happens
-                        // to anyone before we ship, just so we can investigate to see if there may be a bug 
+                        // to anyone before we ship, just so we can investigate to see if there may be a bug
                         // somewhere.
                         if (this.projectsLoadedByHost.Count > 1)
                         {
@@ -3070,7 +3048,7 @@ internal void PostNodeStatus(int postingNodeId, NodeStatus nodeStatus)
         /// </summary>
         internal void ResetPerBuildDataStructures()
         {
-            // Reset the build state for all projects that are still cached from the 
+            // Reset the build state for all projects that are still cached from the
             // last build and the currently loaded projects that we just added to
             // the ProjectManager.
             this.cacheOfBuildingProjects.ResetBuildStatusForAllProjects();
diff --git a/src/Deprecated/Engine/Engine/EngineProxy.cs b/src/Deprecated/Engine/Engine/EngineProxy.cs
index 9ce4307122e..afc4259b5be 100644
--- a/src/Deprecated/Engine/Engine/EngineProxy.cs
+++ b/src/Deprecated/Engine/Engine/EngineProxy.cs
@@ -176,7 +176,7 @@ public void LogErrorEvent(BuildErrorEventArgs e)
             }
             else
             {
-                if(e.GetType().Equals(BuildErrorEventArgsType))
+                if (e.GetType().Equals(BuildErrorEventArgsType))
                 {
                     // We'd like to add the project file to the subcategory, but since this property
                     // is read-only on the BuildErrorEventArgs type, this requires creating a new
@@ -264,7 +264,7 @@ private static string GetUpdatedMessage(string file, string message, string pare
             }
 
             // Don't bother adding the project file path if it's already in the file part
-            if(String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
+            if (String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
             {
                 return message;
             }
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index fa38a06859d..45327c63a75 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -10,12 +10,6 @@
 using System.IO;
 using System.Text;
 using System.Globalization;
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
-#endif
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
@@ -344,14 +338,6 @@ public Project
             string toolsVersion
         )
         {
-#if MSBUILDENABLEVSPROFILING 
-            try
-            {
-                DataCollection.CommentMarkProfile(8808, "Construct Project Using Old OM - Start");
-#endif 
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectConstructBegin, CodeMarkerEvent.perfMSBuildProjectConstructEnd))
-#endif
             {
                 if (engine == null)
                 {
@@ -438,13 +424,6 @@ string toolsVersion
                 this.GlobalProperties = this.parentEngine.GlobalProperties;
                 this.EnvironmentProperties = this.parentEngine.EnvironmentProperties;
             }
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                DataCollection.CommentMarkProfile(8809, "Construct Project Using Old OM - End");
-            }
-#endif
         }
 
         /// <summary>
@@ -1779,18 +1758,11 @@ ProjectLoadSettings projectLoadSettings
             ErrorUtilities.VerifyThrowArgument(projectFileName.Length > 0, "EmptyProjectFileName");
             ErrorUtilities.VerifyThrowArgument(File.Exists(projectFileName), "ProjectFileNotFound", projectFileName);
 
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectLoadFromFileBegin, CodeMarkerEvent.perfMSBuildProjectLoadFromFileEnd))
-#endif
             {
                 string projectFullFileName = Path.GetFullPath(projectFileName);
 
                 try
                 {
-#if MSBUILDENABLEVSPROFILING 
-                string beginProjectLoad = String.Format(CultureInfo.CurrentCulture, "Load Project {0} Using Old OM - Start", projectFullFileName);
-                DataCollection.CommentMarkProfile(8806, beginProjectLoad);
-#endif
                     XmlDocument projectDocument = null;
                     if (IsSolutionFilename(projectFileName))
                     {
@@ -1892,9 +1864,6 @@ ProjectLoadSettings projectLoadSettings
                 {
                     // Flush the logging queue
                     ParentEngine.LoggingServices.ProcessPostedLoggingEvents();
-#if MSBUILDENABLEVSPROFILING 
-                DataCollection.CommentMarkProfile(8807, "Load Project Using Old OM - End");
-#endif
                 }
             }
         }
@@ -2116,17 +2085,7 @@ public void Save
             Encoding encoding
             )
         {
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectSaveToFileBegin, CodeMarkerEvent.perfMSBuildProjectSaveToFileEnd))
-#endif
-            {
-#if MSBUILDENABLEVSPROFILING 
-            try
             {
-                string beginProjectSave = String.Format(CultureInfo.CurrentCulture, "Save Project {0} Using Old OM - Start", projectFileName);
-                DataCollection.CommentMarkProfile(8810, beginProjectSave);
-#endif
-
                 // HIGHCHAR: Project.SaveToFileWithEncoding accepts encoding from caller.
                 using (ProjectWriter projectWriter = new ProjectWriter(projectFileName, encoding))
                 {
@@ -2143,14 +2102,6 @@ Encoding encoding
 
                 // reset the dirty flag
                 dirtyNeedToSaveProjectFile = false;
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                string endProjectSave = String.Format(CultureInfo.CurrentCulture, "Save Project {0} Using Old OM - End", projectFileName);
-                DataCollection.CommentMarkProfile(8810, endProjectSave);
-            }
-#endif
             }
         }
 
@@ -4268,16 +4219,7 @@ internal void OnRenameOfImportedFile(string oldFileName, string newFileName)
         /// <owner>RGoel</owner>
         private void EvaluateProject(bool currentlyLoading)
         {
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectEvaluateBegin, CodeMarkerEvent.perfMSBuildProjectEvaluateEnd))
-#endif
             {
-#if MSBUILDENABLEVSPROFILING 
-                try
-                {
-                    string beginProjectEvaluate = String.Format(CultureInfo.CurrentCulture, "Evaluate Project {0} Using Old OM - Start", this.FullFileName);
-                    DataCollection.CommentMarkProfile(8812, beginProjectEvaluate);
-#endif
                 string currentPerThreadProjectDirectory = Project.PerThreadProjectDirectory;
 
                 try
@@ -4333,14 +4275,6 @@ private void EvaluateProject(bool currentlyLoading)
                     // host is depending on the current directory to find projects
                     Project.PerThreadProjectDirectory = currentPerThreadProjectDirectory;
                 }
-#if MSBUILDENABLEVSPROFILING 
-                }
-                finally
-                {
-                    string beginProjectEvaluate = String.Format(CultureInfo.CurrentCulture, "Evaluate Project {0} Using Old OM - End", this.FullFileName);
-                    DataCollection.CommentMarkProfile(8813, beginProjectEvaluate);
-                }
-#endif
             }
         }
 
diff --git a/src/Deprecated/Engine/Engine/TargetCollection.cs b/src/Deprecated/Engine/Engine/TargetCollection.cs
index bed5d8f9b23..3db0507014b 100644
--- a/src/Deprecated/Engine/Engine/TargetCollection.cs
+++ b/src/Deprecated/Engine/Engine/TargetCollection.cs
@@ -5,10 +5,6 @@
 using System.Xml;
 using System.Collections;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
-
 using Microsoft.Build.BuildEngine.Shared;
 
 using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
diff --git a/src/Deprecated/Engine/Engine/ToolsetReader.cs b/src/Deprecated/Engine/Engine/ToolsetReader.cs
index ba52d9732a2..c952cf4bb5c 100644
--- a/src/Deprecated/Engine/Engine/ToolsetReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetReader.cs
@@ -343,7 +343,7 @@ private Toolset ReadToolset(PropertyDefinition toolsVersion,
                         );
                     }
                 }
-                else if(ReservedPropertyNames.IsReservedProperty(property.Name))
+                else if (ReservedPropertyNames.IsReservedProperty(property.Name))
                 {
                     // We don't allow toolsets to define reserved properties
                     string baseMessage = ResourceUtilities.FormatResourceString("CannotModifyReservedProperty", property.Name);
diff --git a/src/Deprecated/Engine/Items/BuildItem.cs b/src/Deprecated/Engine/Items/BuildItem.cs
index 00d9a385ae0..b6f4df29c36 100644
--- a/src/Deprecated/Engine/Items/BuildItem.cs
+++ b/src/Deprecated/Engine/Items/BuildItem.cs
@@ -8,9 +8,6 @@
 using System.Collections.Generic;
 using System.IO;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Logging/ConsoleLogger.cs b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
index e772b01690a..c82db95717a 100644
--- a/src/Deprecated/Engine/Logging/ConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
@@ -137,7 +137,7 @@ private void InitializeBaseConsoleLogger()
                     consoleLogger = new ParallelConsoleLogger(verbosity, write, colorSet, colorReset);
                 }
 
-                if(!string.IsNullOrEmpty(parameters))
+                if (!string.IsNullOrEmpty(parameters))
                 {
                     consoleLogger.Parameters = parameters;
                     parameters = null;
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
index 7955a4fed44..5bcd93e943b 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -65,7 +65,7 @@ private void ApplyFileLoggerParameter(string parameterName, string parameterValu
         {
             if (String.Equals("LOGFILE", parameterName, StringComparison.OrdinalIgnoreCase))
             {
-                if(string.IsNullOrEmpty(parameterValue))
+                if (string.IsNullOrEmpty(parameterValue))
                 {
                     string message = ResourceUtilities.FormatResourceString("InvalidFileLoggerFile", string.Empty, ResourceUtilities.FormatResourceString("logfilePathNullOrEmpty"));
                     throw new LoggerException(message);
diff --git a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
index 909942a9425..051c7517343 100644
--- a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
+++ b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
@@ -1,4 +1,4 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
     <NoWarn>$(NoWarn);618</NoWarn>
@@ -8,12 +8,12 @@
     <AdditionalTlbExpAsmPaths>$(XMakeRefPath)</AdditionalTlbExpAsmPaths>
     <PublishTlbPath>$(XMakeRefPath)</PublishTlbPath>
     <GenerateAssemblyRefs>true</GenerateAssemblyRefs>
-    <DefineConstants Condition="'$(MSBUILDENABLEVSPROFILING)' != ''">$(DefineConstants);MSBUILDENABLEVSPROFILING</DefineConstants>
     <CopyToSuiteBin>true</CopyToSuiteBin>
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which contains the legacy compatibility shim for the MSBuild engine.  NOTE: This assembly is deprecated.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
     <NoWarn>$(NoWarn);1570;1572;1573;1587</NoWarn>
+    <Nullable>disable</Nullable>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/src/Deprecated/Engine/README.md b/src/Deprecated/Engine/README.md
new file mode 100644
index 00000000000..50dbb26a4cf
--- /dev/null
+++ b/src/Deprecated/Engine/README.md
@@ -0,0 +1,5 @@
+# Microsoft.Build.Engine
+
+⚠️ This package is **deprecated** and should not be referenced. It will be removed in a future version of MSBuild.
+
+Contains `Microsoft.Build.Engine.dll`, which is provided with MSBuild for compatibility purposes.
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index 929f6333d22..a86d5e08b5a 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -330,7 +330,7 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
                 {
                     if (String.Equals(modifier, ItemSpecModifiers.FullPath, StringComparison.OrdinalIgnoreCase))
                     {
-                        if(currentDirectory == null)
+                        if (currentDirectory == null)
                         {
                             currentDirectory = String.Empty;
                         }
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index bf0b4845cec..20c1c45cb27 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -401,7 +401,7 @@ private static string GenerateReferenceAssemblyDirectory(string versionPrefix)
             string programFilesReferenceAssemblyDirectory = Path.Combine(programFilesReferenceAssemblyLocation, versionPrefix);
             string referenceAssemblyDirectory = null;
 
-            if(Directory.Exists(programFilesReferenceAssemblyDirectory))
+            if (Directory.Exists(programFilesReferenceAssemblyDirectory))
             {
                 referenceAssemblyDirectory = programFilesReferenceAssemblyDirectory;
             }
diff --git a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
index aaa477d46f1..d8345c8d90d 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
@@ -321,7 +321,7 @@ internal void AssertLogContains(string contains)
             // If we do not contain this string than pass it to
             // MockLogger. Since MockLogger is also registered as
             // a logger it may have this string.
-            if(!upperLog.Contains
+            if (!upperLog.Contains
                 (
                     contains.ToUpperInvariant()
                 )
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index cb6fabf4c0d..6696e3861ba 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -11,42 +11,27 @@
   </PropertyGroup>
 
   <PropertyGroup>
-    <DefineConstants>$(DefineConstants);STANDALONEBUILD</DefineConstants>
-
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_DEBUG_LAUNCH</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="$(TargetFramework.StartsWith('net4')) Or $(TargetFramework.StartsWith('net3'))">
-    <DefineConstants>$(DefineConstants);FEATURE_64BIT_ENVIRONMENT_QUERY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_APARTMENT_STATE</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_APM</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN</DefineConstants>
     <FeatureAppDomain>true</FeatureAppDomain>
-    <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ASPNET_COMPILER</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_LOCATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_GETENTRYASSEMBLY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLYNAME_CLONE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_TYPE_GETCONSTRUCTOR</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_COM_INTEROP</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILED_XSL</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILE_IN_TESTS</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CONSOLE_BUFFERWIDTH</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CONSTRAINED_EXECUTION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CHARSET_AUTO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_CONSOLE_FALLBACK</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTUREINFO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_DOTNETVERSION</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_GAC</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_GET_COMMANDLINE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_HANDLE_SAFEWAITHANDLE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_HANDLEREF</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HTTP_LISTENER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_INSTALLED_MSBUILD</DefineConstants>
     <!-- Directory.GetCurrentDirectory The pre .Net 4.6.2 implementation of Directory.GetCurrentDirectory is slow and creates strings in its work. -->
@@ -54,7 +39,6 @@
     <!-- Path.GetFullPath The pre .Net 4.6.2 implementation of Path.GetFullPath is slow and creates strings in its work. -->
     <DefineConstants>$(DefineConstants);FEATURE_LEGACY_GETFULLPATH</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_OSVERSION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PERFORMANCE_COUNTERS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PIPE_SECURITY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PFX_SIGNING</DefineConstants>
@@ -65,40 +49,26 @@
     <DefineConstants>$(DefineConstants);FEATURE_RESGEN</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESGENCACHE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESOURCE_EXPOSURE</DefineConstants>
-    <!-- System.Resources.ResourceManager.GetResourceSet() method is currently only in full framework -->
-    <DefineConstants>$(DefineConstants);FEATURE_RESOURCEMANAGER_GETRESOURCESET</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESXREADER_LIVEDESERIALIZATION</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_RTLMOVEMEMORY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RUN_EXE_IN_TESTS</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' == 'true'">$(DefineConstants);USE_MSBUILD_DLL_EXTN</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_SECURITY_PERMISSIONS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SECURITY_PRINCIPAL_WINDOWS</DefineConstants>
-    <FeatureSpecialFolders>true</FeatureSpecialFolders>
-    <DefineConstants>$(DefineConstants);FEATURE_STRING_INTERN</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_STRONG_NAMES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SYSTEM_CONFIGURATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_SYSTEMPAGESIZE</DefineConstants>
     <FeatureSystemConfiguration>true</FeatureSystemConfiguration>
     <DefineConstants>$(DefineConstants);FEATURE_TASK_GENERATERESOURCES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_THREAD_ABORT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_THREAD_CULTURE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_THREAD_PRIORITY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MULTIPLE_TOOLSETS</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NODE_REUSE</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NET35_TASKHOST</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_TYPE_GETINTERFACE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_USERINTERACTIVE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_USERDOMAINNAME</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAML_TYPES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAMLTASKFACTORY</DefineConstants>
     <FeatureXamlTypes>true</FeatureXamlTypes>
-    <DefineConstants>$(DefineConstants);FEATURE_XML_SOURCE_URI</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_XML_LOADPATH</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_XML_SCHEMA_VALIDATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_DEBUGGER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_WIN32_REGISTRY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_WORKINGSET</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
+    <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5' and '$(DotNetBuildFromSource)' != 'true'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MSCOREE</DefineConstants>
   </PropertyGroup>
 
@@ -111,13 +81,12 @@
 
   <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard')">
     <NetCoreBuild>true</NetCoreBuild>
-    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE</DefineConstants>
+    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE;FEATURE_FASTSPAN</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(NetCoreBuild)'=='true'">
     <CompilerToolsDir>$([System.IO.Path]::Combine($(ToolPackagesDir)Microsoft.Net.Compilers, $(CompilerToolsVersion), "tools"))$([System.IO.Path]::DirectorySeparatorChar)</CompilerToolsDir>
     <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLYLOADCONTEXT</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_PROCESSSTARTINFO_ENVIRONMENT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RUNTIMEINFORMATION</DefineConstants>
     <DefineConstants>$(DefineConstants);USE_MSBUILD_DLL_EXTN</DefineConstants>
     <DefineConstants>$(DefineConstants);WORKAROUND_COREFX_19110</DefineConstants>
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index 43f1e87e983..ccffd9b5c05 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -1,9 +1,10 @@
-﻿<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+﻿<Project DefaultTargets="Build">
   <!-- Import the repo root props -->
   <Import Project="..\Directory.Build.props"/>
 
   <PropertyGroup>
       <LangVersion>latest</LangVersion>
+      <Nullable>enable</Nullable>
       <DiscoverEditorConfigFiles>true</DiscoverEditorConfigFiles>
   </PropertyGroup>
 
@@ -14,6 +15,9 @@
     <!-- Ensure that compiler errors emit full paths so that files
          can be correctly annotated in GitHub. -->
     <GenerateFullPaths>true</GenerateFullPaths>
+    
+    <!-- https://github.com/NuGet/Home/issues/8684 -->
+    <NoWarn>$(NoWarn);NU5131</NoWarn>
 
     <!-- Do not mangle paths for test assemblies, because Shoudly assertions want actual on-disk paths. -->
     <DeterministicSourcePaths Condition="'$(IsTestProject)' == 'true'">false</DeterministicSourcePaths>
@@ -23,17 +27,17 @@
     <!-- Set up BeforeCommon.targets -->
     <CustomBeforeMicrosoftCommonTargets>$(MSBuildThisFileDirectory)Directory.BeforeCommon.targets</CustomBeforeMicrosoftCommonTargets>
 
-    <Platforms>AnyCPU;x64</Platforms>
+    <Platforms>AnyCPU;x64;arm64</Platforms>
 
     <!-- Defaults for target frameworks and architecture -->
-    <LibraryTargetFrameworks>$(FullFrameworkTFM);netstandard2.0</LibraryTargetFrameworks>
-    <LibraryTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">netstandard2.0</LibraryTargetFrameworks>
-    <LibraryTargetFrameworks Condition="'$(MonoBuild)'=='true'">$(FullFrameworkTFM)</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks>$(FullFrameworkTFM);net6.0;netstandard2.0</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">net6.0;netstandard2.0</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks Condition="'$(MonoBuild)'=='true'">$(FullFrameworkTFM);netstandard2.0</LibraryTargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
 
     <!-- Target frameworks for Exe and unit test projects (ie projects with runtime output) -->
     <RuntimeOutputTargetFrameworks>net6.0</RuntimeOutputTargetFrameworks>
-    <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows')) and '$(DotNetBuildFromSource)' != 'true'">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
+    <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
     <RuntimeOutputTargetFrameworks Condition="'$(MonoBuild)' == 'true'">$(FullFrameworkTFM)</RuntimeOutputTargetFrameworks>
 
     <!-- Don't automatically append target framework to output path, since we want to put the Platform Target beforehand, if it's not AnyCPU -->
@@ -71,4 +75,34 @@
     <!-- When targeting .NET Core, Exe and unit tests projects always use AnyCPU architecture -->
     <RuntimeOutputPlatformTarget>AnyCPU</RuntimeOutputPlatformTarget>
   </PropertyGroup>
+
+  <PropertyGroup>
+    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificContentInPackage);ShipRefAssembliesToNuGetPackage</TargetsForTfmSpecificBuildOutput>
+  </PropertyGroup>
+
+  <!-- Produce ONLY reference assemblies and SKIP roslyn analyzers for netstandard2.0 builds. -->
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0' and '$(MSBuildProjectFile)' != 'PortableTask.csproj'">
+    <!-- ProduceOnlyReferenceAssembly and ProduceReferenceAssembly are mutually exclusive compiler flags. -->
+    <ProduceOnlyReferenceAssembly>true</ProduceOnlyReferenceAssembly>
+    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
+    <RunAnalyzers>false</RunAnalyzers>
+    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificContentInPackage);ShipRefAssembliesToNuGetPackage</TargetsForTfmSpecificBuildOutput>
+    <IncludeBuildOutput>false</IncludeBuildOutput>
+    <!-- pdb publishing fails builds for reference-only assemblies. -->
+    <!-- https://github.com/dotnet/msbuild/pull/6148. -->
+    <PublishWindowsPdb>false</PublishWindowsPdb>
+  </PropertyGroup>
+
+  <!-- Ensure ref assemblies are placed under `ref/$(TargetFramework)` in the NuGet package -->
+  <Target Name="ShipRefAssembliesToNuGetPackage" BeforeTargets="Pack" Condition="$(IsInnerBuild) == true">
+    <ItemGroup>
+      <TfmSpecificPackageFile Include="$(TargetRefPath);@(FinalDocFile)">
+          <PackagePath>ref\$(TargetFramework)</PackagePath>
+      </TfmSpecificPackageFile>
+      <!-- ns2.0 builds use `BuiltProjectOutputGroupOutput` for output ref assemblies -->
+      <TfmSpecificPackageFile Include="@(BuiltProjectOutputGroupOutput)" Condition="'$(TargetFramework)' == 'netstandard2.0'">
+          <PackagePath>ref\$(TargetFramework)</PackagePath>
+      </TfmSpecificPackageFile>
+    </ItemGroup>
+  </Target>
 </Project>
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index bff6cc9053f..de6fe3137d5 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -1,4 +1,4 @@
-﻿<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+﻿<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
@@ -55,6 +55,10 @@
     <PackageReference Include="xunit.core" />
     <PackageReference Include="xunit.assert" />
 
+    <!-- Force updated reference to this package because xunit and shouldly
+         are netstandard1.6 and transitively bring in an old reference -->
+    <PackageReference Include="System.Security.Cryptography.X509Certificates" />
+
     <PackageReference Include="Microsoft.DotNet.XUnitExtensions" />
 
     <!-- Don't localize unit test projects -->
diff --git a/src/Framework.UnitTests/Attribute_Tests.cs b/src/Framework.UnitTests/Attribute_Tests.cs
index 7e30539fb15..f4badad23d1 100644
--- a/src/Framework.UnitTests/Attribute_Tests.cs
+++ b/src/Framework.UnitTests/Attribute_Tests.cs
@@ -7,6 +7,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class AttributeTests
@@ -65,9 +67,3 @@ internal static bool TestValue2
         }
     }
 }
-
-
-
-
-
-
diff --git a/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs b/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
index 55015b677ef..cdbbb599b85 100644
--- a/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildErrorEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
index c1ec13f0f6c..eca867cd1cc 100644
--- a/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildFinishedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -25,7 +27,7 @@ public void EventArgsCtors()
             buildFinishedEvent = new BuildFinishedEventArgs("{0}", "HelpKeyword", true, new DateTime(), "Message");
             buildFinishedEvent = new BuildFinishedEventArgs(null, null, true);
             buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime());
-            buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime(), null);
+            buildFinishedEvent = new BuildFinishedEventArgs(null, null, true, new DateTime(), messageArgs: null);
         }
 
         /// <summary>
diff --git a/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs b/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
index 79c1ec3a544..7ae7d967b34 100644
--- a/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildMessageEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs b/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
index 1b09d862187..1d3afacb3ba 100644
--- a/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildStartedEventArgs_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -56,4 +58,4 @@ public BuildStartedEventArgs2()
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs b/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
index ecb02ac6e2c..ceadce87f69 100644
--- a/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildWarningEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs b/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
index 5a040878d73..8f6cf3d8a76 100644
--- a/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/CriticalBuildMessageEventArgs_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
index b8893caabde..d2af49af234 100644
--- a/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
+++ b/src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs
@@ -10,6 +10,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class CustomEventArgSerialization_Tests : IDisposable
@@ -25,7 +27,7 @@ string senderName
         )
                 : base(message, helpKeyword, senderName)
             {
-                //Do Nothing
+                // Do Nothing
             }
         }
 
@@ -441,7 +443,7 @@ public void TestBuildWarningEventArgs()
             genericEvent.WriteToStream(_writer);
             long streamWriteEndPosition = _stream.Position;
 
-            //Deserialize and Verify
+            // Deserialize and Verify
             _stream.Position = 0;
             BuildWarningEventArgs newGenericEvent = new BuildWarningEventArgs(null, null, null, -1, -1, -1, -1, null, null, null);
             newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
@@ -458,7 +460,7 @@ public void TestBuildWarningEventArgs()
             genericEvent.WriteToStream(_writer);
             streamWriteEndPosition = _stream.Position;
 
-            //Deserialize and Verify
+            // Deserialize and Verify
             _stream.Position = 0;
             newGenericEvent = new BuildWarningEventArgs(null, null, null, -1, -1, -1, -1, null, null, null);
             newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
@@ -471,11 +473,11 @@ public void TestBuildWarningEventArgs()
             genericEvent = new BuildWarningEventArgs(null, null, null, 1, 2, 3, 4, null, null, null);
             genericEvent.BuildEventContext = null;
 
-            //Serialize
+            // Serialize
             genericEvent.WriteToStream(_writer);
             streamWriteEndPosition = _stream.Position;
 
-            //Deserialize and Verify
+            // Deserialize and Verify
             _stream.Position = 0;
             newGenericEvent = new BuildWarningEventArgs("Something", "SomeThing", "SomeThing", -1, -1, -1, -1, "Something", "SomeThing", "Something");
             newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
@@ -732,7 +734,7 @@ public void TestTargetStartedEventArgs()
             VerifyGenericEventArg(genericEvent, newGenericEvent);
             VerifyTargetStarted(genericEvent, newGenericEvent);
 
-            //Test using Empty strings
+            // Test using Empty strings
             _stream.Position = 0;
             // Make sure empty strings are passed correctly
             genericEvent = new TargetStartedEventArgs(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, TargetBuiltReason.AfterTargets, DateTime.Now);
@@ -755,10 +757,10 @@ public void TestTargetStartedEventArgs()
             // Make sure null string are passed correctly
             genericEvent = new TargetStartedEventArgs(null, null, null, null, null, null, TargetBuiltReason.AfterTargets, DateTime.Now);
             genericEvent.BuildEventContext = null;
-            //Serialize
+            // Serialize
             genericEvent.WriteToStream(_writer);
             streamWriteEndPosition = _stream.Position;
-            //Deserialize and Verify
+            // Deserialize and Verify
             _stream.Position = 0;
             newGenericEvent = new TargetStartedEventArgs("Something", "Something", "Something", "Something", "Something", "Something", TargetBuiltReason.AfterTargets, DateTime.Now);
             newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
@@ -820,10 +822,10 @@ public void TestTargetFinishedEventArgs()
             // Make sure null string are passed correctly
             genericEvent = new TargetFinishedEventArgs(null, null, null, null, null, true);
             genericEvent.BuildEventContext = null;
-            //Serialize
+            // Serialize
             genericEvent.WriteToStream(_writer);
             streamWriteEndPosition = _stream.Position;
-            //Deserialize and Verify
+            // Deserialize and Verify
             _stream.Position = 0;
             newGenericEvent = new TargetFinishedEventArgs("Something", "Something", "Something", "Something", "Something", false);
             newGenericEvent.CreateFromStream(_reader, _eventArgVersion);
@@ -927,7 +929,7 @@ public void TestTaskFinishedEventArgs()
             VerifyGenericEventArg(genericEvent, newGenericEvent);
             VerifyTaskFinished(genericEvent, newGenericEvent);
 
-            //Test using empty strings
+            // Test using empty strings
             _stream.Position = 0;
             // Make sure empty strings are passed correctly
             genericEvent = new TaskFinishedEventArgs(string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, true);
@@ -945,7 +947,7 @@ public void TestTaskFinishedEventArgs()
             VerifyGenericEventArg(genericEvent, newGenericEvent);
             VerifyTaskFinished(genericEvent, newGenericEvent);
 
-            //Test using null strings
+            // Test using null strings
             _stream.Position = 0;
             // Make sure null string are passed correctly
             genericEvent = new TaskFinishedEventArgs(null, null, null, null, null, true);
diff --git a/src/Framework.UnitTests/EventArgs_Tests.cs b/src/Framework.UnitTests/EventArgs_Tests.cs
index 69d90df50b3..aeab16776af 100644
--- a/src/Framework.UnitTests/EventArgs_Tests.cs
+++ b/src/Framework.UnitTests/EventArgs_Tests.cs
@@ -8,6 +8,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
index 16c0ae5a682..d9cfee51e0c 100644
--- a/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ExternalProjectFinishedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs b/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
index 85ac7a761d3..9f94de41320 100644
--- a/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ExternalProjectStartedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/FileClassifier_Tests.cs b/src/Framework.UnitTests/FileClassifier_Tests.cs
index 1a48973a067..de8585434e0 100644
--- a/src/Framework.UnitTests/FileClassifier_Tests.cs
+++ b/src/Framework.UnitTests/FileClassifier_Tests.cs
@@ -6,6 +6,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.UnitTests
 {
     public class FileClassifierTests
diff --git a/src/Framework.UnitTests/LoggerException_Tests.cs b/src/Framework.UnitTests/LoggerException_Tests.cs
index f6fbce644a2..f7f9b9023ea 100644
--- a/src/Framework.UnitTests/LoggerException_Tests.cs
+++ b/src/Framework.UnitTests/LoggerException_Tests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class LoggerExceptionTests
diff --git a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
index da03486b433..b66f3a66b80 100644
--- a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
+++ b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
@@ -23,11 +23,6 @@
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
   </ItemGroup>
diff --git a/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
index cfbe2cdaf2c..94a52973afb 100644
--- a/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ProjectFinishedEventArgs_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
index fff513a82c6..309efaccb98 100644
--- a/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ProjectStartedEventArgs_Tests.cs
@@ -8,6 +8,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -89,4 +91,4 @@ public ProjectStartedEventArgs2()
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework.UnitTests/SdkReference_Tests.cs b/src/Framework.UnitTests/SdkReference_Tests.cs
index a6d9238c30a..dbcb6a68f7e 100644
--- a/src/Framework.UnitTests/SdkReference_Tests.cs
+++ b/src/Framework.UnitTests/SdkReference_Tests.cs
@@ -4,6 +4,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.UnitTests
 {
     public class SdkReference_Tests
diff --git a/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
index 3c353898831..c69a345484f 100644
--- a/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TargetFinishedEventArgs_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs b/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
index bd74d35ae0e..3706d0eb554 100644
--- a/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TargetStartedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs b/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
index 5ab233457da..12cbc45dd39 100644
--- a/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskCommandLineEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -40,4 +42,4 @@ public TaskCommandLineEventArgs2() : base()
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs b/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
index fa817280573..2c528d3ea90 100644
--- a/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskFinishedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs b/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
index 81bb4709fc1..6bdd960c208 100644
--- a/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/TaskStartedEventArgs_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Framework/AssemblyUtilities.cs b/src/Framework/AssemblyUtilities.cs
index cc87eb6448a..32948ee3d39 100644
--- a/src/Framework/AssemblyUtilities.cs
+++ b/src/Framework/AssemblyUtilities.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 
 // Declare this to get init properties. See https://github.com/dotnet/roslyn/issues/45510#issuecomment-694977239
+#nullable disable
+
 namespace System.Runtime.CompilerServices
 {
     internal static class IsExternalInit { }
@@ -145,15 +147,7 @@ private static void Initialize()
 
         private static Assembly GetEntryAssembly()
         {
-#if FEATURE_ASSEMBLY_GETENTRYASSEMBLY
             return System.Reflection.Assembly.GetEntryAssembly();
-#else
-            var getEntryAssembly = typeof(Assembly).GetMethod("GetEntryAssembly");
-
-            FrameworkErrorUtilities.VerifyThrowInternalNull(getEntryAssembly, "Assembly does not have the method GetEntryAssembly");
-
-            return (Assembly) getEntryAssembly.Invoke(null, Array.Empty<object>());
-#endif
         }
 
 #if !FEATURE_CULTUREINFO_GETCULTURES
diff --git a/src/Framework/BuildEngineResult.cs b/src/Framework/BuildEngineResult.cs
index 3035212b8cc..7d1af72ffaa 100644
--- a/src/Framework/BuildEngineResult.cs
+++ b/src/Framework/BuildEngineResult.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/BuildEnvironmentState.cs b/src/Framework/BuildEnvironmentState.cs
index fae6127700e..9743b2a5eab 100644
--- a/src/Framework/BuildEnvironmentState.cs
+++ b/src/Framework/BuildEnvironmentState.cs
@@ -1,6 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/BuildErrorEventArgs.cs b/src/Framework/BuildErrorEventArgs.cs
index 4cbbb4106d6..c8b9e23f432 100644
--- a/src/Framework/BuildErrorEventArgs.cs
+++ b/src/Framework/BuildErrorEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index 0aaa6f0baaf..e949eafe240 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -7,6 +7,8 @@
 using System.Text;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -288,14 +290,14 @@ private void SetBuildEventContextDefaultAfterSerialization(StreamingContext sc)
         {
             var sb = new StringBuilder();
             sb.Append(resourceName);
-            sb.Append("(");
+            sb.Append('(');
 
             bool notFirst = false;
             foreach (var argument in arguments)
             {
                 if (notFirst)
                 {
-                    sb.Append(",");
+                    sb.Append(',');
                 }
                 else
                 {
@@ -305,7 +307,7 @@ private void SetBuildEventContextDefaultAfterSerialization(StreamingContext sc)
                 sb.Append(argument);
             }
 
-            sb.Append(")");
+            sb.Append(')');
             return sb.ToString();
         };
 
diff --git a/src/Framework/BuildEventContext.cs b/src/Framework/BuildEventContext.cs
index 0cda93d76c6..94672522efb 100644
--- a/src/Framework/BuildEventContext.cs
+++ b/src/Framework/BuildEventContext.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -25,7 +27,7 @@ public class BuildEventContext
         private readonly int _targetId;
 
         /// <summary>
-        ///The node-unique project request context the event was in
+        /// The node-unique project request context the event was in
         /// </summary>
         private readonly int _projectContextId;
 
@@ -95,7 +97,7 @@ public BuildEventContext
             int targetId,
             int taskId
         )
-            :this(submissionId, nodeId, InvalidEvaluationId, projectInstanceId, projectContextId, targetId, taskId)
+            : this(submissionId, nodeId, InvalidEvaluationId, projectInstanceId, projectContextId, targetId, taskId)
         {
         }
 
@@ -215,7 +217,7 @@ public override int GetHashCode()
         {
             var hash = 17;
             // submission ID does not contribute to equality
-            //hash = hash * 31 + _submissionId;
+            // hash = hash * 31 + _submissionId;
             hash = (hash * 31) + _nodeId;
             hash = (hash * 31) + _evaluationId;
             hash = (hash * 31) + _targetId;
diff --git a/src/Framework/BuildFinishedEventArgs.cs b/src/Framework/BuildFinishedEventArgs.cs
index 198b7df2034..1647591416c 100644
--- a/src/Framework/BuildFinishedEventArgs.cs
+++ b/src/Framework/BuildFinishedEventArgs.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index e84c9ed6c02..e65cf09bb59 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -6,6 +6,8 @@
 using System.Runtime.Serialization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -283,7 +285,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             base.CreateFromStream(reader, version);
             importance = (MessageImportance)reader.ReadInt32();
 
-            //The data in the stream beyond this point are new to 4.0
+            // The data in the stream beyond this point are new to 4.0
             if (version > 20)
             {
                 subcategory = reader.ReadByte() == 0 ? null : reader.ReadString();
diff --git a/src/Framework/BuildStartedEventArgs.cs b/src/Framework/BuildStartedEventArgs.cs
index 8297879a12c..9d35298dc83 100644
--- a/src/Framework/BuildStartedEventArgs.cs
+++ b/src/Framework/BuildStartedEventArgs.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/BuildStatusEventArgs.cs b/src/Framework/BuildStatusEventArgs.cs
index c8c3b1d35e1..ef6146a6c6b 100644
--- a/src/Framework/BuildStatusEventArgs.cs
+++ b/src/Framework/BuildStatusEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary> 
@@ -88,4 +90,3 @@ params object[] messageArgs
         }
     }
 }
-
diff --git a/src/Framework/BuildWarningEventArgs.cs b/src/Framework/BuildWarningEventArgs.cs
index f78f7716bff..ea8d963afc3 100644
--- a/src/Framework/BuildWarningEventArgs.cs
+++ b/src/Framework/BuildWarningEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 90eed3b8aad..ca49aaf226a 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     internal enum ChangeWaveConversionState
@@ -22,9 +24,10 @@ internal enum ChangeWaveConversionState
     /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md
     internal class ChangeWaves
     {
-        internal static readonly Version Wave16_10 = new Version(16, 10);
         internal static readonly Version Wave17_0 = new Version(17, 0);
-        internal static readonly Version[] AllWaves = { Wave16_10, Wave17_0 };
+        internal static readonly Version Wave17_2 = new Version(17, 2);
+        internal static readonly Version Wave17_4 = new Version(17, 4);
+        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
diff --git a/src/Framework/CriticalBuildMessageEventArgs.cs b/src/Framework/CriticalBuildMessageEventArgs.cs
index 0aad4046ada..9fe9544de38 100644
--- a/src/Framework/CriticalBuildMessageEventArgs.cs
+++ b/src/Framework/CriticalBuildMessageEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/CustomBuildEventArgs.cs b/src/Framework/CustomBuildEventArgs.cs
index cba045ebb3e..69523a573b3 100644
--- a/src/Framework/CustomBuildEventArgs.cs
+++ b/src/Framework/CustomBuildEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Debugging/CommonWriter.cs b/src/Framework/Debugging/CommonWriter.cs
index 4a0b29a4348..db17705ce15 100644
--- a/src/Framework/Debugging/CommonWriter.cs
+++ b/src/Framework/Debugging/CommonWriter.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Debugging
 {
     internal class CommonWriter
diff --git a/src/Framework/EnvironmentVariableReadEventArgs.cs b/src/Framework/EnvironmentVariableReadEventArgs.cs
index 809a1b097fd..83391fe7def 100644
--- a/src/Framework/EnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/EnvironmentVariableReadEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ErrorUtilities.cs b/src/Framework/ErrorUtilities.cs
index 8611d41a549..20792056fb0 100644
--- a/src/Framework/ErrorUtilities.cs
+++ b/src/Framework/ErrorUtilities.cs
@@ -7,6 +7,8 @@
 using System.Text;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     // TODO: this should be unified with Shared\ErrorUtilities.cs, but it is hard to untangle everything
diff --git a/src/Framework/ExternalProjectFinishedEventArgs.cs b/src/Framework/ExternalProjectFinishedEventArgs.cs
index d09c6f56df1..94d5b7da698 100644
--- a/src/Framework/ExternalProjectFinishedEventArgs.cs
+++ b/src/Framework/ExternalProjectFinishedEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ExternalProjectStartedEventArgs.cs b/src/Framework/ExternalProjectStartedEventArgs.cs
index 2073ee505d6..6828ae736a9 100644
--- a/src/Framework/ExternalProjectStartedEventArgs.cs
+++ b/src/Framework/ExternalProjectStartedEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index e459dd8fc3b..5cd5303e605 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
diff --git a/src/Framework/IBuildEngine.cs b/src/Framework/IBuildEngine.cs
index d14aada27ed..68aac5eea4f 100644
--- a/src/Framework/IBuildEngine.cs
+++ b/src/Framework/IBuildEngine.cs
@@ -3,6 +3,8 @@
 
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine10.cs b/src/Framework/IBuildEngine10.cs
index 7a7805d9791..e8ac6071e21 100644
--- a/src/Framework/IBuildEngine10.cs
+++ b/src/Framework/IBuildEngine10.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine2.cs b/src/Framework/IBuildEngine2.cs
index 9bfb2949460..169c1a8f7ba 100644
--- a/src/Framework/IBuildEngine2.cs
+++ b/src/Framework/IBuildEngine2.cs
@@ -3,6 +3,8 @@
 
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine3.cs b/src/Framework/IBuildEngine3.cs
index cdcd50ef9ac..0ab02ddaafc 100644
--- a/src/Framework/IBuildEngine3.cs
+++ b/src/Framework/IBuildEngine3.cs
@@ -4,6 +4,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine4.cs b/src/Framework/IBuildEngine4.cs
index 685d6bc7dca..09fa5277ba0 100644
--- a/src/Framework/IBuildEngine4.cs
+++ b/src/Framework/IBuildEngine4.cs
@@ -3,6 +3,8 @@
 
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine5.cs b/src/Framework/IBuildEngine5.cs
index 642c121997a..3bb99e30e6e 100644
--- a/src/Framework/IBuildEngine5.cs
+++ b/src/Framework/IBuildEngine5.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -17,4 +19,4 @@ public interface IBuildEngine5 : IBuildEngine4
         /// <param name="properties">The event properties.</param>
         void LogTelemetry(string eventName, IDictionary<string, string> properties);
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework/IBuildEngine6.cs b/src/Framework/IBuildEngine6.cs
index a8b7f70a673..4a0fdf41710 100644
--- a/src/Framework/IBuildEngine6.cs
+++ b/src/Framework/IBuildEngine6.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine7.cs b/src/Framework/IBuildEngine7.cs
index 7f9200da1ab..d08af94fc04 100644
--- a/src/Framework/IBuildEngine7.cs
+++ b/src/Framework/IBuildEngine7.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
index 0caaad46678..f337b27694a 100644
--- a/src/Framework/IBuildEngine8.cs
+++ b/src/Framework/IBuildEngine8.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IBuildEngine9.cs b/src/Framework/IBuildEngine9.cs
index 6e44be92834..aac0cc87141 100644
--- a/src/Framework/IBuildEngine9.cs
+++ b/src/Framework/IBuildEngine9.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ICancelableTask.cs b/src/Framework/ICancelableTask.cs
index d714acb8704..e91d51ecd78 100644
--- a/src/Framework/ICancelableTask.cs
+++ b/src/Framework/ICancelableTask.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IEventRedirector.cs b/src/Framework/IEventRedirector.cs
index 9be0bce4c63..4b385c39c69 100644
--- a/src/Framework/IEventRedirector.cs
+++ b/src/Framework/IEventRedirector.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index f0cea1f1ea4..8f49eccf2d1 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IEventSource2.cs b/src/Framework/IEventSource2.cs
index 9c289611c0c..32be40c2abd 100644
--- a/src/Framework/IEventSource2.cs
+++ b/src/Framework/IEventSource2.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IEventSource3.cs b/src/Framework/IEventSource3.cs
index d50edf28105..e461ed4865d 100644
--- a/src/Framework/IEventSource3.cs
+++ b/src/Framework/IEventSource3.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IEventSource4.cs b/src/Framework/IEventSource4.cs
index 3b6cc009be4..b16ec11ee9a 100644
--- a/src/Framework/IEventSource4.cs
+++ b/src/Framework/IEventSource4.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IForwardingLogger.cs b/src/Framework/IForwardingLogger.cs
index 801e5b36012..95550550dad 100644
--- a/src/Framework/IForwardingLogger.cs
+++ b/src/Framework/IForwardingLogger.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IGeneratedTask.cs b/src/Framework/IGeneratedTask.cs
index 8bb038dc415..3629d679b70 100644
--- a/src/Framework/IGeneratedTask.cs
+++ b/src/Framework/IGeneratedTask.cs
@@ -3,6 +3,8 @@
 
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ILogger.cs b/src/Framework/ILogger.cs
index 938ea0bd890..873677cc9cb 100644
--- a/src/Framework/ILogger.cs
+++ b/src/Framework/ILogger.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -24,7 +26,6 @@ namespace Microsoft.Build.Framework
     // WARNING: VS Automation code for the Tools/Options MSBuild build verbosity setting will be broken
     // by changes to this enum (not to mention existing MSBuild clients and vsproject code). 
     // Please make sure to talk to automation devs before changing it.
-
     [ComVisible(true)]
     public enum LoggerVerbosity
     {
diff --git a/src/Framework/IMetadataContainer.cs b/src/Framework/IMetadataContainer.cs
index 169130cdef3..eacb445c576 100644
--- a/src/Framework/IMetadataContainer.cs
+++ b/src/Framework/IMetadataContainer.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/INodeLogger.cs b/src/Framework/INodeLogger.cs
index 38faed17575..fabcbc70ec9 100644
--- a/src/Framework/INodeLogger.cs
+++ b/src/Framework/INodeLogger.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/IProjectElement.cs b/src/Framework/IProjectElement.cs
index 9c2dff5336f..913f06b0e51 100644
--- a/src/Framework/IProjectElement.cs
+++ b/src/Framework/IProjectElement.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITask.cs b/src/Framework/ITask.cs
index de05943b10a..f4cc8979a6c 100644
--- a/src/Framework/ITask.cs
+++ b/src/Framework/ITask.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITaskFactory.cs b/src/Framework/ITaskFactory.cs
index 4c8c97bb209..a7b07159679 100644
--- a/src/Framework/ITaskFactory.cs
+++ b/src/Framework/ITaskFactory.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITaskFactory2.cs b/src/Framework/ITaskFactory2.cs
index 948e4dfca45..c498b989789 100644
--- a/src/Framework/ITaskFactory2.cs
+++ b/src/Framework/ITaskFactory2.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -58,4 +60,4 @@ public interface ITaskFactory2 : ITaskFactory
         /// </returns>
         ITask CreateTask(IBuildEngine taskFactoryLoggingHost, IDictionary<string, string> taskIdentityParameters);
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework/ITaskHost.cs b/src/Framework/ITaskHost.cs
index 112ea50e0e2..cbad16b9efe 100644
--- a/src/Framework/ITaskHost.cs
+++ b/src/Framework/ITaskHost.cs
@@ -4,6 +4,8 @@
 using System.Runtime.InteropServices;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITaskItem.cs b/src/Framework/ITaskItem.cs
index 31a909036e2..b1de1f3bf4f 100644
--- a/src/Framework/ITaskItem.cs
+++ b/src/Framework/ITaskItem.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITaskItem2.cs b/src/Framework/ITaskItem2.cs
index ef4c557a5bd..f55467b85e9 100644
--- a/src/Framework/ITaskItem2.cs
+++ b/src/Framework/ITaskItem2.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ITaskItemExtensions.cs b/src/Framework/ITaskItemExtensions.cs
index 53a5e0d5b42..090a95eeb07 100644
--- a/src/Framework/ITaskItemExtensions.cs
+++ b/src/Framework/ITaskItemExtensions.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     internal static class ITaskItemExtensions
@@ -62,4 +64,4 @@ public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this I
             return list;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework/ImmutableFilesTimestampCache.cs b/src/Framework/ImmutableFilesTimestampCache.cs
index 5836e44d281..c20b768b74f 100644
--- a/src/Framework/ImmutableFilesTimestampCache.cs
+++ b/src/Framework/ImmutableFilesTimestampCache.cs
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using System;
 using System.Collections.Concurrent;
 
diff --git a/src/Framework/InternalErrorException.cs b/src/Framework/InternalErrorException.cs
index 7c6f9a27d21..b87f1a32a6d 100644
--- a/src/Framework/InternalErrorException.cs
+++ b/src/Framework/InternalErrorException.cs
@@ -5,6 +5,8 @@
 using System.Diagnostics;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/LazyFormattedBuildEventArgs.cs b/src/Framework/LazyFormattedBuildEventArgs.cs
index 9f0e8aded43..6a9ff54e92b 100644
--- a/src/Framework/LazyFormattedBuildEventArgs.cs
+++ b/src/Framework/LazyFormattedBuildEventArgs.cs
@@ -5,6 +5,8 @@
 using System.Globalization;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -34,17 +36,6 @@ private protected override string FormattedMessage
             get => (argumentsOrFormattedMessage is string formattedMessage) ? formattedMessage : base.FormattedMessage;
         }
 
-        /// <summary>
-        /// Stores the original culture for String.Format.
-        /// </summary>
-        private string originalCultureName;
-
-        /// <summary>
-        /// Non-serializable CultureInfo object
-        /// </summary>
-        [NonSerialized]
-        private volatile CultureInfo originalCultureInfo;
-
         /// <summary>
         /// This constructor allows all event data to be initialized.
         /// </summary>
@@ -80,8 +71,6 @@ params object[] messageArgs
             : base(message, helpKeyword, senderName, eventTimestamp)
         {
             argumentsOrFormattedMessage = messageArgs;
-            originalCultureName = CultureInfo.CurrentCulture.Name;
-            originalCultureInfo = CultureInfo.CurrentCulture;
         }
 
         /// <summary>
@@ -107,12 +96,7 @@ public override string Message
 
                 if (argsOrMessage is object[] arguments && arguments.Length > 0)
                 {
-                    if (originalCultureInfo == null)
-                    {
-                        originalCultureInfo = new CultureInfo(originalCultureName);
-                    }
-
-                    formattedMessage = FormatString(originalCultureInfo, base.Message, arguments);
+                    formattedMessage = FormatString(base.Message, arguments);
                     argumentsOrFormattedMessage = formattedMessage;
                     return formattedMessage;
                 }
@@ -145,8 +129,6 @@ internal override void WriteToStream(BinaryWriter writer)
                 base.WriteToStreamWithExplicitMessage(writer, (argsOrMessage is string formattedMessage) ? formattedMessage : base.Message);
                 writer.Write(-1);
             }
-
-            writer.Write(originalCultureName);
         }
 
         /// <summary>
@@ -174,8 +156,6 @@ internal override void CreateFromStream(BinaryReader reader, Int32 version)
                 }
 
                 argumentsOrFormattedMessage = messageArgs;
-
-                originalCultureName = reader.ReadString();
             }
         }
 
@@ -186,11 +166,10 @@ internal override void CreateFromStream(BinaryReader reader, Int32 version)
         /// the array of arguments -- do not call this method repeatedly in performance-critical scenarios
         /// </summary>
         /// <remarks>This method is thread-safe.</remarks>
-        /// <param name="culture">The culture info for formatting the message.</param>
         /// <param name="unformatted">The string to format.</param>
         /// <param name="args">Optional arguments for formatting the given string.</param>
         /// <returns>The formatted string.</returns>
-        private static string FormatString(CultureInfo culture, string unformatted, params object[] args)
+        private static string FormatString(string unformatted, params object[] args)
         {
             // Based on the one in Shared/ResourceUtilities.
             string formatted = unformatted;
@@ -208,7 +187,7 @@ private static string FormatString(CultureInfo culture, string unformatted, para
                     // another one, add it here.
                     if (param != null && param.ToString() == param.GetType().FullName)
                     {
-                        throw new InvalidOperationException(String.Format(CultureInfo.CurrentCulture, "Invalid type for message formatting argument, was {0}", param.GetType().FullName));
+                        throw new InvalidOperationException(string.Format("Invalid type for message formatting argument, was {0}", param.GetType().FullName));
                     }
                 }
 #endif
@@ -216,7 +195,7 @@ private static string FormatString(CultureInfo culture, string unformatted, para
                 // NOTE: all String methods are thread-safe
                 try
                 {
-                    formatted = String.Format(culture, unformatted, args);
+                    formatted = string.Format(unformatted, args);
                 }
                 catch (FormatException ex)
                 {
@@ -228,12 +207,12 @@ private static string FormatString(CultureInfo culture, string unformatted, para
                     //       Task "Crash"
                     //          (16,14):  error : "This message logged from a task {1} has too few formatting parameters."
                     //             at System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
-                    //             at System.String.Format(IFormatProvider provider, String format, Object[] args)
-                    //             at Microsoft.Build.Framework.LazyFormattedBuildEventArgs.FormatString(CultureInfo culture, String unformatted, Object[] args) in d:\W8T_Refactor\src\vsproject\xmake\Framework\LazyFormattedBuildEventArgs.cs:line 263
+                    //             at System.String.Format(String format, Object[] args)
+                    //             at Microsoft.Build.Framework.LazyFormattedBuildEventArgs.FormatString(String unformatted, Object[] args) in d:\W8T_Refactor\src\vsproject\xmake\Framework\LazyFormattedBuildEventArgs.cs:line 263
                     //          Done executing task "Crash".
                     //
                     // T
-                    formatted = String.Format(CultureInfo.CurrentCulture, "\"{0}\"\n{1}", unformatted, ex.ToString());
+                    formatted = string.Format("\"{0}\"\n{1}", unformatted, ex.ToString());
                 }
             }
 
diff --git a/src/Framework/LoadInSeparateAppDomainAttribute.cs b/src/Framework/LoadInSeparateAppDomainAttribute.cs
index c464b35a413..9a26afec1f4 100644
--- a/src/Framework/LoadInSeparateAppDomainAttribute.cs
+++ b/src/Framework/LoadInSeparateAppDomainAttribute.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/LoggerException.cs b/src/Framework/LoggerException.cs
index 63ed9ea7606..f99fab5d903 100644
--- a/src/Framework/LoggerException.cs
+++ b/src/Framework/LoggerException.cs
@@ -7,6 +7,8 @@
 using System.Security.Permissions; // for SecurityPermissionAttribute
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index f8587c129c4..f2f4cc9070f 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -1,16 +1,36 @@
 ﻿using System.Diagnostics.Tracing;
 
+#nullable disable
+
 namespace Microsoft.Build.Eventing
 {
     /// <summary>
     /// This captures information of how various key methods of building with MSBuild ran.
     /// </summary>
+    /// <remarks>
+    /// Changes to existing event method signatures will not be reflected unless you update the <see cref="EventAttribute.Version" /> property or assign a new event ID.
+    /// </remarks>
     [EventSource(Name = "Microsoft-Build")]
     internal sealed class MSBuildEventSource : EventSource
     {
         public static class Keywords
         {
+            /// <summary>
+            /// Keyword applied to all MSBuild events.
+            /// </summary>
+            /// <remarks>
+            /// Literally every event should define this.
+            /// </remarks>
             public const EventKeywords All = (EventKeywords)0x1;
+
+            /// <summary>
+            /// Keyword for events that should go in the text performance log when turned on.
+            /// </summary>
+            /// <remarks>
+            /// This keyword should be applied only to events that are low-volume
+            /// and likely to be useful to diagnose perf issues using the
+            /// <see href="https://github.com/dotnet/msbuild/pull/5861">text perf log</see>.
+            /// </remarks>
             public const EventKeywords PerformanceLog = (EventKeywords)0x2;
         }
 
@@ -484,10 +504,10 @@ public void CachedSdkResolverServiceResolveSdkStart(string sdkName, string solut
             WriteEvent(66, sdkName, solutionPath, projectPath);
         }
 
-        [Event(67, Keywords = Keywords.All)]
-        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success)
+        [Event(67, Keywords = Keywords.All, Version = 2)]
+        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
         {
-            WriteEvent(67, sdkName, solutionPath, projectPath, success);
+            WriteEvent(67, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
         /// <remarks>
@@ -519,6 +539,90 @@ public void ReusableStringBuilderFactoryUnbalanced(int oldHash, int newHash)
             WriteEvent(70, oldHash, newHash);
         }
 
-#endregion
+        [Event(71, Keywords = Keywords.All)]
+        public void ProjectCacheCreatePluginInstanceStart(string pluginAssemblyPath)
+        {
+            WriteEvent(71, pluginAssemblyPath);
+        }
+
+        [Event(72, Keywords = Keywords.All)]
+        public void ProjectCacheCreatePluginInstanceStop(string pluginAssemblyPath, string pluginTypeName)
+        {
+            WriteEvent(72, pluginAssemblyPath, pluginTypeName);
+        }
+
+        [Event(73, Keywords = Keywords.All)]
+        public void ProjectCacheBeginBuildStart(string pluginTypeName)
+        {
+            WriteEvent(73, pluginTypeName);
+        }
+
+        [Event(74, Keywords = Keywords.All)]
+        public void ProjectCacheBeginBuildStop(string pluginTypeName)
+        {
+            WriteEvent(74, pluginTypeName);
+        }
+
+        [Event(75, Keywords = Keywords.All)]
+        public void ProjectCacheGetCacheResultStart(string pluginTypeName, string projectPath, string targets)
+        {
+            WriteEvent(75, pluginTypeName, projectPath, targets);
+        }
+
+        [Event(76, Keywords = Keywords.All)]
+        public void ProjectCacheGetCacheResultStop(string pluginTypeName, string projectPath, string targets, string cacheResultType)
+        {
+            WriteEvent(76, pluginTypeName, projectPath, targets, cacheResultType);
+        }
+
+        [Event(77, Keywords = Keywords.All)]
+        public void ProjectCacheEndBuildStart(string pluginTypeName)
+        {
+            WriteEvent(77, pluginTypeName);
+        }
+
+        [Event(78, Keywords = Keywords.All)]
+        public void ProjectCacheEndBuildStop(string pluginTypeName)
+        {
+            WriteEvent(78, pluginTypeName);
+        }
+
+        [Event(79, Keywords = Keywords.All)]
+        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(int submissionId, string sdkName, string solutionPath, string projectPath)
+        {
+            WriteEvent(79, submissionId, sdkName, solutionPath, projectPath);
+        }
+
+        [Event(80, Keywords = Keywords.All)]
+        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submissionId, string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
+        {
+            WriteEvent(80, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
+        }
+
+        [Event(81, Keywords = Keywords.All)]
+        public void SdkResolverServiceFindResolversManifestsStart()
+        {
+            WriteEvent(81);
+        }
+
+        [Event(82, Keywords = Keywords.All)]
+        public void SdkResolverServiceFindResolversManifestsStop(int resolverManifestCount)
+        {
+            WriteEvent(82, resolverManifestCount);
+        }
+
+        [Event(83, Keywords = Keywords.All)]
+        public void SdkResolverServiceLoadResolversStart()
+        {
+            WriteEvent(83);
+        }
+
+        [Event(84, Keywords = Keywords.All)]
+        public void SdkResolverServiceLoadResolversStop(string manifestName, int resolverCount)
+        {
+            WriteEvent(84, manifestName, resolverCount);
+        }
+
+        #endregion
     }
 }
diff --git a/src/Framework/MetaProjectGeneratedEventArgs.cs b/src/Framework/MetaProjectGeneratedEventArgs.cs
index d690e9aa215..fa03336cf0b 100644
--- a/src/Framework/MetaProjectGeneratedEventArgs.cs
+++ b/src/Framework/MetaProjectGeneratedEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index df75564473e..e24a13ff151 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -8,14 +8,6 @@
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
     <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
-
-    <!--
-      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections
-      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from
-      an imported package. This suppression should be removed if/when the project is migrated to enable nullable
-      reference types.
-    -->
-    <NoWarn>$(NoWarn),CS8632</NoWarn>
   </PropertyGroup>
 
   <ItemGroup>
@@ -24,8 +16,6 @@
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <PackageReference Include="System.Security.Permissions" />
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 8f92cf66d93..9e68fc71c4e 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -7,9 +7,9 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
-using System.Linq;
 using System.Reflection;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Threading;
 
@@ -19,10 +19,13 @@
 
 using FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework;
+
 internal static class NativeMethods
 {
-    #region Constants
+#region Constants
 
     internal const uint ERROR_INSUFFICIENT_BUFFER = 0x8007007A;
     internal const uint STARTUP_LOADER_SAFEMODE = 0x10;
@@ -47,16 +50,13 @@ internal static class NativeMethods
     internal const int MAX_PATH = 260;
 
     private const string kernel32Dll = "kernel32.dll";
-    private const string mscoreeDLL = "mscoree.dll";
 
     private const string WINDOWS_FILE_SYSTEM_REGISTRY_KEY = @"SYSTEM\CurrentControlSet\Control\FileSystem";
     private const string WINDOWS_LONG_PATHS_ENABLED_VALUE_NAME = "LongPathsEnabled";
 
     internal static DateTime MinFileDate { get; } = DateTime.FromFileTimeUtc(0);
 
-#if FEATURE_HANDLEREF
     internal static HandleRef NullHandleRef = new HandleRef(null, IntPtr.Zero);
-#endif
 
     internal static IntPtr NullIntPtr = new IntPtr(0);
 
@@ -72,15 +72,9 @@ internal static class NativeMethods
     internal const uint WAIT_OBJECT_0 = 0x00000000;
     internal const uint WAIT_TIMEOUT = 0x00000102;
 
-#if FEATURE_CHARSET_AUTO
-    internal const CharSet AutoOrUnicode = CharSet.Auto;
-#else
-        internal const CharSet AutoOrUnicode = CharSet.Unicode;
-#endif
+#endregion
 
-    #endregion
-
-    #region Enums
+#region Enums
 
     private enum PROCESSINFOCLASS : int
     {
@@ -205,9 +199,9 @@ internal enum ProcessorArchitectures
         Unknown
     }
 
-    #endregion
+#endregion
 
-    #region Structs
+#region Structs
 
     /// <summary>
     /// Structure that contain information about the system on which we are running
@@ -252,11 +246,11 @@ protected override bool ReleaseHandle()
     /// <summary>
     /// Contains information about the current state of both physical and virtual memory, including extended memory
     /// </summary>
-    [StructLayout(LayoutKind.Sequential, CharSet = AutoOrUnicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
     internal class MemoryStatus
     {
         /// <summary>
-        /// Initializes a new instance of the <see cref="T:MemoryStatus"/> class.
+        /// Initializes a new instance of the <see cref="MemoryStatus"/> class.
         /// </summary>
         public MemoryStatus()
         {
@@ -575,9 +569,9 @@ private unsafe static int GetLogicalCoreCountOnWindows()
         return -1;
     }
 
-    #endregion
+#endregion
 
-    #region Member data
+#region Member data
 
     internal static bool HasMaxPath => MaxPath == MAX_PATH;
 
@@ -630,9 +624,7 @@ internal static bool IsMaxPathLegacyWindows()
         }
     }
 
-    // CA1416 warns about code that can only run on Windows, but we verified we're running on Windows before this.
-    // This is the most reasonable way to resolve this part because other ways would require ifdef'ing on NET472.
-#pragma warning disable CA1416
+    [SupportedOSPlatform("windows")]
     private static bool IsLongPathsEnabledRegistry()
     {
         using (RegistryKey fileSystemKey = Registry.LocalMachine.OpenSubKey(WINDOWS_FILE_SYSTEM_REGISTRY_KEY))
@@ -641,7 +633,6 @@ private static bool IsLongPathsEnabledRegistry()
             return fileSystemKey != null && Convert.ToInt32(longPathsEnabledValue) == 1;
         }
     }
-#pragma warning restore CA1416
 
     /// <summary>
     /// Cached value for IsUnixLike (this method is called frequently during evaluation).
@@ -716,10 +707,10 @@ internal static bool IsMono
 #if !CLR2COMPATIBILITY
     private static bool? _isWindows;
 #endif
-
     /// <summary>
     /// Gets a flag indicating if we are running under some version of Windows
     /// </summary>
+    [SupportedOSPlatformGuard("windows")]
     internal static bool IsWindows
     {
 #if CLR2COMPATIBILITY
@@ -874,9 +865,9 @@ private static SystemInformationData SystemInformation
     /// </summary>
     internal static ProcessorArchitectures ProcessorArchitectureNative => SystemInformation.ProcessorArchitectureTypeNative;
 
-    #endregion
+#endregion
 
-    #region Wrapper methods
+#region Wrapper methods
 
     /// <summary>
     /// Really truly non pumping wait.
@@ -957,13 +948,13 @@ internal static string GetShortFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetShortPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer, 0, length);
                     path = fullPath;
                 }
             }
@@ -996,13 +987,13 @@ internal static string GetLongFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetLongPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer, 0, length);
                     path = fullPath;
                 }
             }
@@ -1091,7 +1082,7 @@ DateTime LastWriteFileUtcTime(string path)
 
                 if (success && (data.fileAttributes & NativeMethods.FILE_ATTRIBUTE_DIRECTORY) == 0)
                 {
-                    long dt = ((long) (data.ftLastWriteTimeHigh) << 32) | ((long) data.ftLastWriteTimeLow);
+                    long dt = ((long)(data.ftLastWriteTimeHigh) << 32) | ((long)data.ftLastWriteTimeLow);
                     fileModifiedTime = DateTime.FromFileTimeUtc(dt);
 
                     // If file is a symlink _and_ we're not instructed to do the wrong thing, get a more accurate timestamp.
@@ -1225,14 +1216,10 @@ internal static void KillTree(int processIdToKill)
                     // Kill this process, so that no further children can be created.
                     thisProcess.Kill();
                 }
-                catch (Win32Exception e)
+                catch (Win32Exception e) when (e.NativeErrorCode == ERROR_ACCESS_DENIED)
                 {
                     // Access denied is potentially expected -- it happens when the process that
                     // we're attempting to kill is already dead.  So just ignore in that case.
-                    if (e.NativeErrorCode != ERROR_ACCESS_DENIED)
-                    {
-                        throw;
-                    }
                 }
 
                 // Now enumerate our children.  Children of this process are any process which has this process id as its parent
@@ -1462,9 +1449,9 @@ internal static void VerifyThrowWin32Result(int result)
         }
     }
 
-    #endregion
+#endregion
 
-    #region PInvoke
+#region PInvoke
 
     /// <summary>
     /// Gets the current OEM code page which is used by console apps
@@ -1479,17 +1466,6 @@ internal static void VerifyThrowWin32Result(int result)
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
 
-    [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    private static extern uint SearchPath
-    (
-        string path,
-        string fileName,
-        string extension,
-        int numBufferChars,
-        [Out] StringBuilder buffer,
-        int[] filePart
-    );
-
     [DllImport("kernel32.dll", PreserveSig = true, SetLastError = true)]
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool FreeLibrary([In] IntPtr module);
@@ -1500,30 +1476,14 @@ int[] filePart
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true)]
     internal static extern IntPtr LoadLibrary(string fileName);
 
-    [DllImport(mscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-    internal static extern uint GetRequestedRuntimeInfo(String pExe,
-                                            String pwszVersion,
-                                            String pConfigurationFile,
-                                            uint startupFlags,
-                                            uint runtimeInfoFlags,
-                                            [Out] StringBuilder pDirectory,
-                                            int dwDirectory,
-                                            out uint dwDirectoryLength,
-                                            [Out] StringBuilder pVersion,
-                                            int cchBuffer,
-                                            out uint dwlength);
-
     /// <summary>
-    /// Gets the fully qualified filename of the currently executing .exe
+    /// Gets the fully qualified filename of the currently executing .exe.
     /// </summary>
+    /// <param name="hModule"><see cref="HandleRef"/> of the module for which we are finding the file name.</param>
+    /// <param name="buffer">The character buffer used to return the file name.</param>
+    /// <param name="length">The length of the buffer.</param>
     [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    internal static extern int GetModuleFileName(
-#if FEATURE_HANDLEREF
-            HandleRef hModule,
-#else
-            IntPtr hModule,
-#endif
-            [Out] StringBuilder buffer, int length);
+    internal static extern int GetModuleFileName(HandleRef hModule, [Out] char[] buffer, int length);
 
     [DllImport("kernel32.dll")]
     internal static extern IntPtr GetStdHandle(int nStdHandle);
@@ -1568,19 +1528,19 @@ internal static bool SetCurrentDirectory(string path)
     private static extern int NtQueryInformationProcess(SafeProcessHandle hProcess, PROCESSINFOCLASS pic, ref PROCESS_BASIC_INFORMATION pbi, uint cb, ref int pSize);
 
     [return: MarshalAs(UnmanagedType.Bool)]
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     private static extern bool GlobalMemoryStatusEx([In, Out] MemoryStatus lpBuffer);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetShortPathName(string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetShortPathName(string path, [Out] char[] fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetLongPathName([In] string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetLongPathName([In] string path, [Out] char[] fullpath, [In] int length);
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     internal static extern bool CreatePipe(out SafeFileHandle hReadPipe, out SafeFileHandle hWritePipe, SecurityAttributes lpPipeAttributes, int nSize);
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     internal static extern bool ReadFile(SafeFileHandle hFile, byte[] lpBuffer, uint nNumberOfBytesToRead, out uint lpNumberOfBytesRead, IntPtr lpOverlapped);
 
     /// <summary>
@@ -1597,7 +1557,7 @@ internal static bool SetCurrentDirectory(string path)
     internal const uint FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
     internal const uint OPEN_EXISTING = 3;
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, CallingConvention = CallingConvention.StdCall,
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall,
         SetLastError = true)]
     internal static extern SafeFileHandle CreateFile(
         string lpFileName,
@@ -1624,9 +1584,9 @@ out FILETIME lpLastWriteTime
     [DllImport("kernel32.dll", SetLastError = true)]
     internal static extern bool SetThreadErrorMode(int newMode, out int oldMode);
 
-    #endregion
+#endregion
 
-    #region Extensions
+#region Extensions
 
     /// <summary>
     /// Waits while pumping APC messages.  This is important if the waiting thread is an STA thread which is potentially
@@ -1658,24 +1618,20 @@ internal static bool MsgWaitOne(this WaitHandle handle, int timeout)
         // VS needs this in order to allow the in-proc compilers to properly initialize, since they will make calls from the
         // build thread which the main thread (blocked on BuildSubmission.Execute) must service.
         int waitIndex;
-#if FEATURE_HANDLE_SAFEWAITHANDLE
         IntPtr handlePtr = handle.SafeWaitHandle.DangerousGetHandle();
-#else
-            IntPtr handlePtr = handle.GetSafeWaitHandle().DangerousGetHandle();
-#endif
         int returnValue = CoWaitForMultipleHandles(COWAIT_FLAGS.COWAIT_NONE, timeout, 1, new IntPtr[] { handlePtr }, out waitIndex);
 
         if (!(returnValue == 0 || ((uint)returnValue == RPC_S_CALLPENDING && timeout != Timeout.Infinite)))
         {
-           throw new InternalErrorException($"Received {returnValue} from CoWaitForMultipleHandles, but expected 0 (S_OK)");
+            throw new InternalErrorException($"Received {returnValue} from CoWaitForMultipleHandles, but expected 0 (S_OK)");
         }
 
         return returnValue == 0;
     }
 
-    #endregion
+#endregion
 
-    #region helper methods
+#region helper methods
 
     internal static bool DirectoryExists(string fullPath)
     {
@@ -1718,6 +1674,6 @@ internal static bool FileOrDirectoryExistsWindows(string path)
         return GetFileAttributesEx(path, 0, ref data);
     }
 
-    #endregion
+#endregion
 
 }
diff --git a/src/Framework/NullableAttributes.cs b/src/Framework/NullableAttributes.cs
index 826ecacee10..86145426936 100644
--- a/src/Framework/NullableAttributes.cs
+++ b/src/Framework/NullableAttributes.cs
@@ -4,6 +4,8 @@
 // This was copied from https://github.com/dotnet/runtime/blob/39b9607807f29e48cae4652cd74735182b31182e/src/libraries/System.Private.CoreLib/src/System/Diagnostics/CodeAnalysis/NullableAttributes.cs
 // and updated to have the scope of the attributes be internal.
 
+#nullable disable
+
 namespace System.Diagnostics.CodeAnalysis
 {
 #if !NETCOREAPP
diff --git a/src/Framework/OutputAttribute.cs b/src/Framework/OutputAttribute.cs
index 84125a0eb1b..0a1166b8654 100644
--- a/src/Framework/OutputAttribute.cs
+++ b/src/Framework/OutputAttribute.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Profiler/EvaluationIdProvider.cs b/src/Framework/Profiler/EvaluationIdProvider.cs
index a348f793a94..0b0f8f491a2 100644
--- a/src/Framework/Profiler/EvaluationIdProvider.cs
+++ b/src/Framework/Profiler/EvaluationIdProvider.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.Profiler
 {
     /// <summary>
diff --git a/src/Framework/Profiler/EvaluationLocation.cs b/src/Framework/Profiler/EvaluationLocation.cs
index 61ff4933c84..f37093e78a0 100644
--- a/src/Framework/Profiler/EvaluationLocation.cs
+++ b/src/Framework/Profiler/EvaluationLocation.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.Profiler
 {
     /// <summary>
@@ -227,9 +229,8 @@ public EvaluationLocation WithGlob(string globDescription)
         /// <nodoc/>
         public override bool Equals(object obj)
         {
-            if (obj is EvaluationLocation)
+            if (obj is EvaluationLocation other)
             {
-                var other = (EvaluationLocation) obj;
                 return
                     Id == other.Id &&
                     ParentId == other.ParentId &&
diff --git a/src/Framework/Profiler/ProfilerResult.cs b/src/Framework/Profiler/ProfilerResult.cs
index 43cf2d62331..70bd4ebed95 100644
--- a/src/Framework/Profiler/ProfilerResult.cs
+++ b/src/Framework/Profiler/ProfilerResult.cs
@@ -6,6 +6,8 @@
 using System.Collections.ObjectModel;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.Profiler
 {
     /// <summary>
@@ -26,13 +28,11 @@ public ProfilerResult(IDictionary<EvaluationLocation, ProfiledLocation> profiled
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfilerResult))
+            if (!(obj is ProfilerResult result))
             {
                 return false;
             }
 
-            var result = (ProfilerResult)obj;
-
             return (ProfiledLocations == result.ProfiledLocations) ||
                    (ProfiledLocations.Count == result.ProfiledLocations.Count &&
                     !ProfiledLocations.Except(result.ProfiledLocations).Any());
@@ -71,13 +71,8 @@ public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numb
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfiledLocation))
-            {
-                return false;
-            }
-
-            var location = (ProfiledLocation)obj;
-            return InclusiveTime.Equals(location.InclusiveTime) &&
+            return obj is ProfiledLocation location &&
+                   InclusiveTime.Equals(location.InclusiveTime) &&
                    ExclusiveTime.Equals(location.ExclusiveTime) &&
                    NumberOfHits == location.NumberOfHits;
         }
diff --git a/src/Framework/ProjectEvaluationFinishedEventArgs.cs b/src/Framework/ProjectEvaluationFinishedEventArgs.cs
index 88073ecf3ac..530c52f09fd 100644
--- a/src/Framework/ProjectEvaluationFinishedEventArgs.cs
+++ b/src/Framework/ProjectEvaluationFinishedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using Microsoft.Build.Framework.Profiler;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ProjectEvaluationStartedEventArgs.cs b/src/Framework/ProjectEvaluationStartedEventArgs.cs
index 14100183747..8f64d5c305d 100644
--- a/src/Framework/ProjectEvaluationStartedEventArgs.cs
+++ b/src/Framework/ProjectEvaluationStartedEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index 77cedfe049d..030eddb3e7c 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ProjectImportedEventArgs.cs b/src/Framework/ProjectImportedEventArgs.cs
index b9c5a7a6cae..a77e1344052 100644
--- a/src/Framework/ProjectImportedEventArgs.cs
+++ b/src/Framework/ProjectImportedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ProjectStartedEventArgs.cs b/src/Framework/ProjectStartedEventArgs.cs
index 230d0629058..6601476f8e7 100644
--- a/src/Framework/ProjectStartedEventArgs.cs
+++ b/src/Framework/ProjectStartedEventArgs.cs
@@ -9,6 +9,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Properties/AssemblyInfo.cs b/src/Framework/Properties/AssemblyInfo.cs
index 79b1e377c75..c4ac04d7e43 100644
--- a/src/Framework/Properties/AssemblyInfo.cs
+++ b/src/Framework/Properties/AssemblyInfo.cs
@@ -70,4 +70,3 @@
 
 [assembly: ComVisible(false)]
 [assembly: CLSCompliant(true)]
-
diff --git a/src/Framework/PropertyInitialValueSetEventArgs.cs b/src/Framework/PropertyInitialValueSetEventArgs.cs
index d73247be932..050d0c80272 100644
--- a/src/Framework/PropertyInitialValueSetEventArgs.cs
+++ b/src/Framework/PropertyInitialValueSetEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/PropertyReassignmentEventArgs.cs b/src/Framework/PropertyReassignmentEventArgs.cs
index 8820254215f..fa709c7789c 100644
--- a/src/Framework/PropertyReassignmentEventArgs.cs
+++ b/src/Framework/PropertyReassignmentEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
index 4ba35aaf1b9..ec298ae0076 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
@@ -916,4 +916,4 @@ virtual Microsoft.Build.Framework.SdkResult.Version.set -> void
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(string path, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
 virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.BeginInit() -> void
-virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit() -> void
+virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit() -> void
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 49f59b81603..fa0dac7c7ef 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -629,4 +629,4 @@ virtual Microsoft.Build.Framework.SdkResult.Success.set -> void
 virtual Microsoft.Build.Framework.SdkResult.Version.get -> string
 virtual Microsoft.Build.Framework.SdkResult.Version.set -> void
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(string path, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
-virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
+virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
\ No newline at end of file
diff --git a/src/Framework/README.md b/src/Framework/README.md
new file mode 100644
index 00000000000..1b72454f526
--- /dev/null
+++ b/src/Framework/README.md
@@ -0,0 +1,11 @@
+# Microsoft.Build.Framework
+
+This package contains `Microsoft.Build.Framework.dll`, which defines [fundamental types](https://docs.microsoft.com/dotnet/api/microsoft.build.framework) used in MSBuild's API and extensibility model.
+
+The items in this namespace are primarily base-level classes and interfaces shared across MSBuild's object model.  MSBuild task or extension developers can reference this package to implement interfaces such as
+[`ITask`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.itask), and [`ILogger`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.ilogger).
+
+### netstandard2.0 target
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net6.0` or `net472`. Please use the `net6.0`-targeted assemblies for .NET Core 6+ scenarios.
+
+For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Framework/RequiredAttribute.cs b/src/Framework/RequiredAttribute.cs
index 5971f488767..91e4a6afa36 100644
--- a/src/Framework/RequiredAttribute.cs
+++ b/src/Framework/RequiredAttribute.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/RequiredRuntimeAttribute.cs b/src/Framework/RequiredRuntimeAttribute.cs
index 0e343be56af..3848003a021 100644
--- a/src/Framework/RequiredRuntimeAttribute.cs
+++ b/src/Framework/RequiredRuntimeAttribute.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/ReuseableStringBuilder.cs b/src/Framework/ReuseableStringBuilder.cs
index 18457bee6f6..924fb0e0071 100644
--- a/src/Framework/ReuseableStringBuilder.cs
+++ b/src/Framework/ReuseableStringBuilder.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
 using System.Text;
 using System.Threading;
 using Microsoft.Build.Eventing;
@@ -49,7 +50,11 @@ internal sealed class ReuseableStringBuilder : IDisposable
         /// </summary>
         public int Length
         {
-            get { return _borrowedBuilder?.Length ?? 0; }
+            get
+            {
+                return _borrowedBuilder?.Length ?? 0;
+            }
+
             set
             {
                 LazyPrepare();
@@ -113,6 +118,28 @@ internal ReuseableStringBuilder Append(string value, int startIndex, int count)
             return this;
         }
 
+        /// <inheritdoc cref="StringBuilder.AppendFormat(IFormatProvider, string, object[])"/>
+        internal ReuseableStringBuilder AppendFormat(
+            CultureInfo currentCulture,
+            string format,
+            params object[] args)
+        {
+            LazyPrepare();
+            _borrowedBuilder.AppendFormat(
+                currentCulture,
+                format,
+                args);
+            return this;
+        }
+
+        /// <inheritdoc cref="StringBuilder.AppendLine()"/>
+        internal ReuseableStringBuilder AppendLine()
+        {
+            LazyPrepare();
+            _borrowedBuilder.AppendLine();
+            return this;
+        }
+
         public ReuseableStringBuilder AppendSeparated(char separator, ICollection<string> strings)
         {
             LazyPrepare();
@@ -236,7 +263,7 @@ internal static StringBuilder Get(int capacity)
                     // If user wants bigger capacity than maximum capacity, respect it.
                     returned = new StringBuilder(SelectBracketedCapacity(capacity));
 #if DEBUG
-                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: returned.GetHashCode(), newCapacity:capacity, oldCapacity:0, type:"miss");
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStart(hash: returned.GetHashCode(), newCapacity: capacity, oldCapacity: 0, type: "miss");
 #endif
                 }
                 else if (returned.Capacity < capacity)
diff --git a/src/Framework/RunInMTAAttribute.cs b/src/Framework/RunInMTAAttribute.cs
index e6b782a08b8..293694f7365 100644
--- a/src/Framework/RunInMTAAttribute.cs
+++ b/src/Framework/RunInMTAAttribute.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -21,4 +23,4 @@ public RunInMTAAttribute()
             // do nothing
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework/RunInSTAAttribute.cs b/src/Framework/RunInSTAAttribute.cs
index 8bd83eb026e..ad0653e8248 100644
--- a/src/Framework/RunInSTAAttribute.cs
+++ b/src/Framework/RunInSTAAttribute.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -21,4 +23,4 @@ public RunInSTAAttribute()
             // do nothing
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Framework/Sdk/SdkLogger.cs b/src/Framework/Sdk/SdkLogger.cs
index 883ddb109dd..cbf47f81245 100644
--- a/src/Framework/Sdk/SdkLogger.cs
+++ b/src/Framework/Sdk/SdkLogger.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Sdk/SdkReference.cs b/src/Framework/Sdk/SdkReference.cs
index f48c8444bbc..6b64974f348 100644
--- a/src/Framework/Sdk/SdkReference.cs
+++ b/src/Framework/Sdk/SdkReference.cs
@@ -6,6 +6,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -44,10 +46,11 @@ public SdkReference(string name, string version, string minimumVersion)
         /// </summary>
         public string MinimumVersion { get; }
 
-        /// <summary>
-        /// </summary>
-        /// <param name="other"></param>
-        /// <returns></returns>
+        /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
+        /// <param name="other">An object to compare with this object.</param>
+        /// <returns>
+        ///   <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.
+        /// </returns>
         public bool Equals(SdkReference other)
         {
             if (other is null) return false;
diff --git a/src/Framework/Sdk/SdkResolver.cs b/src/Framework/Sdk/SdkResolver.cs
index 9280c30af24..753cc5a0116 100644
--- a/src/Framework/Sdk/SdkResolver.cs
+++ b/src/Framework/Sdk/SdkResolver.cs
@@ -1,40 +1,43 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    ///     An abstract interface for classes that can resolve a Software Development Kit (SDK).
+    /// An abstract interface for classes that can resolve a Software Development Kit (SDK).
     /// </summary>
     public abstract class SdkResolver
     {
         /// <summary>
-        ///     Name of the SDK resolver to be displayed in build output log.
+        /// Gets the name of the <see cref="SdkResolver"/> to be displayed in build output log.
         /// </summary>
         public abstract string Name { get; }
 
         /// <summary>
-        ///     Gets the self-described resolution priority order. MSBuild will sort resolvers
-        ///     by this value.
+        /// Gets the self-described resolution priority order. MSBuild will sort resolvers
+        /// by this value.
         /// </summary>
         public abstract int Priority { get; }
 
         /// <summary>
-        ///     Resolves the specified SDK reference.
+        /// Resolves the specified SDK reference.
         /// </summary>
         /// <param name="sdkReference">A <see cref="SdkReference" /> containing the referenced SDKs be resolved.</param>
         /// <param name="resolverContext">Context for resolving the SDK.</param>
         /// <param name="factory">Factory class to create an <see cref="SdkResult" /></param>
         /// <returns>
-        ///     An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
-        ///     the SDK could not be resolved.  Return <code>null</code> if the resolver is not
-        ///     applicable for a particular <see cref="SdkReference"/>.
-        ///  </returns>   
-        ///  <remarks>
-        ///    Note: You must use <see cref="Microsoft.Build.Framework.SdkResultFactory"/> to return a result.
+        /// An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
+        /// the SDK could not be resolved.  Return <see langword="null"/> if the resolver is not
+        /// applicable for a particular <see cref="SdkReference"/>.
+        /// </returns>   
+        /// <remarks>
+        ///  Note: You must use <see cref="SdkResultFactory"/> to return a result.
         ///  </remarks>
         /// 
-        public abstract SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext,
-            SdkResultFactory factory);
+        public abstract SdkResult Resolve(SdkReference sdkReference,
+                                          SdkResolverContext resolverContext,
+                                          SdkResultFactory factory);
     }
 }
diff --git a/src/Framework/Sdk/SdkResolverContext.cs b/src/Framework/Sdk/SdkResolverContext.cs
index 63e2f48482d..5a1e58e0942 100644
--- a/src/Framework/Sdk/SdkResolverContext.cs
+++ b/src/Framework/Sdk/SdkResolverContext.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -39,8 +41,11 @@ public abstract class SdkResolverContext
         ///     Version of MSBuild currently running.
         /// </summary>
         /// <remarks>
-        ///     File version based on commit height from our public git repository. This is informational
-        ///     and not equal to the assembly version.
+        ///    <format type="text/markdown"><![CDATA[
+        /// ## Remarks
+        ///     
+        /// File version is informational and not equal to the assembly version.
+        /// ]]></format>
         /// </remarks>
         public virtual Version MSBuildVersion { get; protected set; }
 
diff --git a/src/Framework/Sdk/SdkResult.cs b/src/Framework/Sdk/SdkResult.cs
index 29c201f24b8..52f4157b6fe 100644
--- a/src/Framework/Sdk/SdkResult.cs
+++ b/src/Framework/Sdk/SdkResult.cs
@@ -3,17 +3,23 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
     ///     An abstract interface class to indicate SDK resolver success or failure.
     /// </summary>
     /// <remarks>
-    ///   Note: Use <see cref="Microsoft.Build.Framework.SdkResultFactory"/> to create instances of this class. Do not inherit from this class.
+    ///    <format type="text/markdown"><![CDATA[
+    /// ## Remarks
+    /// > [!NOTE]
+    /// > Use <xref:Microsoft.Build.Framework.SdkResultFactory> to create instances of this class. Do not inherit from this class.
+    /// ]]></format>
     /// </remarks>
     public abstract class SdkResult
     {
-        //  Explicit backing fields so that implementation in Microsoft.Build.dll can use them for translation
+        // Explicit backing fields so that implementation in Microsoft.Build.dll can use them for translation
         private protected bool _success;
         private protected string _path;
         private protected string _version;
diff --git a/src/Framework/Sdk/SdkResultFactory.cs b/src/Framework/Sdk/SdkResultFactory.cs
index 70f672cd62e..aac55e6833f 100644
--- a/src/Framework/Sdk/SdkResultFactory.cs
+++ b/src/Framework/Sdk/SdkResultFactory.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/Sdk/SdkResultItem.cs b/src/Framework/Sdk/SdkResultItem.cs
index baaa023f4f3..febbbeffabc 100644
--- a/src/Framework/Sdk/SdkResultItem.cs
+++ b/src/Framework/Sdk/SdkResultItem.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.Framework
     public class SdkResultItem
     {
         public string ItemSpec { get; set; }
-        public Dictionary<string, string>? Metadata { get;}
+        public Dictionary<string, string>? Metadata { get; }
 
         public SdkResultItem()
         {
@@ -36,7 +36,7 @@ public SdkResultItem(string itemSpec, Dictionary<string, string>? metadata)
             Metadata = metadata;
         }
 
-        public override bool Equals(object obj)
+        public override bool Equals(object? obj)
         {
             if (obj is SdkResultItem item &&
                    ItemSpec == item.ItemSpec &&
diff --git a/src/Framework/StringBuilderCache.cs b/src/Framework/StringBuilderCache.cs
index abf23d07ff4..e8b0ebb30cb 100644
--- a/src/Framework/StringBuilderCache.cs
+++ b/src/Framework/StringBuilderCache.cs
@@ -1,36 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-/*============================================================
-**
-**
-** Purpose: provide a cached reusable instance of StringBuilder
-**          per thread  it's an optimization that reduces the
-**          number of instances constructed and collected.
-**
-**  Acquire - is used to get a string builder to use of a
-**            particular size.  It can be called any number of
-**            times, if a StringBuilder is in the cache then
-**            it will be returned and the cache emptied.
-**            subsequent calls will return a new StringBuilder.
-**
-**            A StringBuilder instance is cached in
-**            Thread Local Storage and so there is one per thread
-**
-**  Release - Place the specified builder in the cache if it is
-**            not too big.
-**            The StringBuilder should not be used after it has
-**            been released.
-**            Unbalanced Releases are perfectly acceptable.  It
-**            will merely cause the runtime to create a new
-**            StringBuilder next time Acquire is called.
-**
-**  GetStringAndRelease
-**          - ToString() the StringBuilder, Release it to the
-**            cache and return the resulting string
-**
-===========================================================*/
-
 using System;
 using System.Diagnostics;
 using System.Text;
@@ -38,8 +8,16 @@
 using Microsoft.Build.Eventing;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
+    /// <summary>
+    /// A cached reusable instance of StringBuilder.
+    /// </summary>
+    /// <remarks>
+    /// An optimization that reduces the number of instances of <see cref="StringBuilder"/> constructed and collected.
+    /// </remarks>
     internal static class StringBuilderCache
     {
         // The value 512 was chosen empirically as 95% percentile of returning string length.
@@ -48,6 +26,17 @@ internal static class StringBuilderCache
         [ThreadStatic]
         private static StringBuilder t_cachedInstance;
 
+        /// <summary>
+        /// Get a <see cref="StringBuilder"/> of at least the specified capacity.
+        /// </summary>
+        /// <param name="capacity">The suggested starting size of this instance.</param>
+        /// <returns>A <see cref="StringBuilder"/> that may or may not be reused.</returns>
+        /// <remarks>
+        /// It can be called any number of times; if a <see cref="StringBuilder"/> is in the cache then
+        /// it will be returned and the cache emptied. Subsequent calls will return a new <see cref="StringBuilder"/>.
+        ///
+        /// <para>The <see cref="StringBuilder"/> instance is cached in Thread Local Storage and so there is one per thread.</para>
+        /// </remarks>
         public static StringBuilder Acquire(int capacity = 16 /*StringBuilder.DefaultCapacity*/)
         {
             if (capacity <= MAX_BUILDER_SIZE)
@@ -76,6 +65,24 @@ public static StringBuilder Acquire(int capacity = 16 /*StringBuilder.DefaultCap
             return stringBuilder;
         }
 
+        /// <summary>
+        /// Place the specified builder in the cache if it is not too big. Unbalanced Releases are acceptable.
+        /// The StringBuilder should not be used after it has
+        ///            been released.
+        ///            Unbalanced Releases are perfectly acceptable.It
+        /// will merely cause the runtime to create a new
+        /// StringBuilder next time Acquire is called.
+        /// </summary>
+        /// <param name="sb">The <see cref="StringBuilder"/> to cache. Likely returned from <see cref="Acquire(int)"/>.</param>
+        /// <remarks>
+        /// The StringBuilder should not be used after it has been released.
+        ///
+        /// <para>
+        /// Unbalanced Releases are perfectly acceptable.It
+        /// will merely cause the runtime to create a new
+        /// StringBuilder next time Acquire is called.
+        /// </para>
+        /// </remarks>
         public static void Release(StringBuilder sb)
         {
             if (sb.Capacity <= MAX_BUILDER_SIZE)
@@ -90,6 +97,14 @@ public static void Release(StringBuilder sb)
 #endif
         }
 
+        /// <summary>
+        /// Get a string and return its builder to the cache.
+        /// </summary>
+        /// <param name="sb">Builder to cache (if it's not too big).</param>
+        /// <returns>The <see langword="string"/> equivalent to <paramref name="sb"/>'s contents.</returns>
+        /// <remarks>
+        /// Convenience method equivalent to calling <see cref="StringBuilder.ToString()"/> followed by <see cref="Release"/>.
+        /// </remarks>
         public static string GetStringAndRelease(StringBuilder sb)
         {
             string result = sb.ToString();
diff --git a/src/Framework/SupportedOSPlatform.cs b/src/Framework/SupportedOSPlatform.cs
new file mode 100644
index 00000000000..8a50d7c82f0
--- /dev/null
+++ b/src/Framework/SupportedOSPlatform.cs
@@ -0,0 +1,27 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if !NET6_0_OR_GREATER
+namespace System.Runtime.Versioning
+{
+    /// <summary>
+    /// SupportedOSPlatform is a net5.0+ Attribute.
+    /// Create the same type only in full-framework and netstandard2.0 builds
+    /// to prevent many #if RUNTIME_TYPE_NETCORE checks.
+    /// </summary>
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)]
+    internal class SupportedOSPlatformGuard : Attribute
+    {
+        internal SupportedOSPlatformGuard(string platformName)
+        {
+        }
+    }
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class)]
+    internal class SupportedOSPlatform : Attribute
+    {
+        internal SupportedOSPlatform(string platformName)
+        {
+        }
+    }
+}
+#endif
diff --git a/src/Framework/TargetBuiltReason.cs b/src/Framework/TargetBuiltReason.cs
index d318a515819..5f271125003 100644
--- a/src/Framework/TargetBuiltReason.cs
+++ b/src/Framework/TargetBuiltReason.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TargetFinishedEventArgs.cs b/src/Framework/TargetFinishedEventArgs.cs
index fceebc108da..5398fd557a3 100644
--- a/src/Framework/TargetFinishedEventArgs.cs
+++ b/src/Framework/TargetFinishedEventArgs.cs
@@ -6,6 +6,8 @@
 using System.Collections;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TargetSkippedEventArgs.cs b/src/Framework/TargetSkippedEventArgs.cs
index 61580ae92b5..05177c0c594 100644
--- a/src/Framework/TargetSkippedEventArgs.cs
+++ b/src/Framework/TargetSkippedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TargetStartedEventArgs.cs b/src/Framework/TargetStartedEventArgs.cs
index c4a44a744b0..2a51fddd380 100644
--- a/src/Framework/TargetStartedEventArgs.cs
+++ b/src/Framework/TargetStartedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TaskCommandLineEventArgs.cs b/src/Framework/TaskCommandLineEventArgs.cs
index 4a6f1af686e..2e80c7ddc0e 100644
--- a/src/Framework/TaskCommandLineEventArgs.cs
+++ b/src/Framework/TaskCommandLineEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TaskFinishedEventArgs.cs b/src/Framework/TaskFinishedEventArgs.cs
index def68d090d9..3b282a9afac 100644
--- a/src/Framework/TaskFinishedEventArgs.cs
+++ b/src/Framework/TaskFinishedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TaskItemData.cs b/src/Framework/TaskItemData.cs
index e32f20416f5..6f35859a355 100644
--- a/src/Framework/TaskItemData.cs
+++ b/src/Framework/TaskItemData.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index 1ca1a55f7ad..c4ae14f03ca 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -4,11 +4,12 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.IO;
 using System.Text;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     public enum TaskParameterMessageKind
diff --git a/src/Framework/TaskPropertyInfo.cs b/src/Framework/TaskPropertyInfo.cs
index 7180c722eed..449354b5e43 100644
--- a/src/Framework/TaskPropertyInfo.cs
+++ b/src/Framework/TaskPropertyInfo.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index 55e6ca69998..eafeb579b5d 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TelemetryEventArgs.cs b/src/Framework/TelemetryEventArgs.cs
index 3557981135e..4edc7d0a626 100644
--- a/src/Framework/TelemetryEventArgs.cs
+++ b/src/Framework/TelemetryEventArgs.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/TestInfo.cs b/src/Framework/TestInfo.cs
index 1d2ebbb32bb..45efb41040b 100644
--- a/src/Framework/TestInfo.cs
+++ b/src/Framework/TestInfo.cs
@@ -1,11 +1,13 @@
-﻿namespace Microsoft.Build.Framework
+﻿#nullable disable
+
+namespace Microsoft.Build.Framework
 {
-    //  This is a central place to keep track of whether tests are running or not.  Test startup code
+    // This is a central place to keep track of whether tests are running or not.  Test startup code
     //  will set this to true.  It is consumed in BuildEnvironmentHelper.  However, since that class
     //  is compiled into each project separately, it's not possible for the test startup code to
     //  interact directly with the BuildEnvironmentHelper class - hence this central location.
 
-    //  This class is accessed via reflection, because adding the InternalsVisibleTo attributes which
+    // This class is accessed via reflection, because adding the InternalsVisibleTo attributes which
     //  would be required to access it statically causes errors due to other shared internal classes
     //  which are compiled into multiple projects.
     internal static class TestInfo
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 95903c15c94..23735453ed0 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -2,7 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using Microsoft.Build.Framework;
+
+#nullable disable
 
 namespace Microsoft.Build.Framework
 {
@@ -41,6 +42,7 @@ public Traits()
         /// </summary>
         public readonly bool UseLazyWildCardEvaluation = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MsBuildSkipEagerWildCardEvaluationRegexes"));
         public readonly bool LogExpandedWildcards = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGEXPANDEDWILDCARDS"));
+        public readonly bool ThrowOnDriveEnumeratingWildcard = Environment.GetEnvironmentVariable("MSBUILDFAILONDRIVEENUMERATINGWILDCARD") == "1";
 
         /// <summary>
         /// Cache file existence for the entire process
@@ -66,6 +68,11 @@ public Traits()
         /// </summary>
         public static readonly string MSBuildNodeHandshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
 
+        /// <summary>
+        /// Override property "MSBuildRuntimeType" to "Full", ignoring the actual runtime type of MSBuild.
+        /// </summary>
+        public readonly bool ForceEvaluateAsFullFramework = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MsBuildForceEvaluateAsFullFramework"));
+
         /// <summary>
         /// Setting the associated environment variable to 1 restores the pre-15.8 single
         /// threaded (slower) copy behavior. Zero implies Int32.MaxValue, less than zero
@@ -84,6 +91,15 @@ public Traits()
         /// </summary>
         public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
 
+        /// <summary>
+        /// Log all environment variables whether or not they are used in a build in the binary log.
+        /// </summary>
+        public bool LogAllEnvironmentVariables => string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDONLYLOGUSEDENVIRONMENTVARIABLES"))
+#if !TASKHOST
+            && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4)
+#endif
+            ;
+
         /// <summary>
         /// Log property tracking information.
         /// </summary>
@@ -439,7 +455,6 @@ public enum SdkReferencePropertyExpansionMode
         /// <remarks>
         /// Clone from ErrorUtilities which isn't (yet?) available in Framework.
         /// </remarks>
-
         private static readonly bool s_throwExceptions = String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDDONOTTHROWINTERNAL"));
 
         /// <summary>
diff --git a/src/Framework/UninitializedPropertyReadEventArgs.cs b/src/Framework/UninitializedPropertyReadEventArgs.cs
index fa11b3c8f89..954cc5e43ca 100644
--- a/src/Framework/UninitializedPropertyReadEventArgs.cs
+++ b/src/Framework/UninitializedPropertyReadEventArgs.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
diff --git a/src/Framework/VisualStudioLocationHelper.cs b/src/Framework/VisualStudioLocationHelper.cs
index 54d57493b1f..4ec70063990 100644
--- a/src/Framework/VisualStudioLocationHelper.cs
+++ b/src/Framework/VisualStudioLocationHelper.cs
@@ -5,6 +5,8 @@
 using Microsoft.VisualStudio.Setup.Configuration;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/Argument.cs b/src/Framework/XamlTypes/Argument.cs
index 8620f4305b1..bc69f83a709 100644
--- a/src/Framework/XamlTypes/Argument.cs
+++ b/src/Framework/XamlTypes/Argument.cs
@@ -4,6 +4,8 @@
 using System;
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/BaseProperty.cs b/src/Framework/XamlTypes/BaseProperty.cs
index 52ca96c0024..4587cd8ab93 100644
--- a/src/Framework/XamlTypes/BaseProperty.cs
+++ b/src/Framework/XamlTypes/BaseProperty.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/BoolProperty.cs b/src/Framework/XamlTypes/BoolProperty.cs
index 84e49ddf2a7..d1db3eac06b 100644
--- a/src/Framework/XamlTypes/BoolProperty.cs
+++ b/src/Framework/XamlTypes/BoolProperty.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/Category.cs b/src/Framework/XamlTypes/Category.cs
index b67ff735563..5756483902e 100644
--- a/src/Framework/XamlTypes/Category.cs
+++ b/src/Framework/XamlTypes/Category.cs
@@ -3,6 +3,8 @@
 
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/CategorySchema.cs b/src/Framework/XamlTypes/CategorySchema.cs
index 4f684ba7f4c..72b2fe6bf46 100644
--- a/src/Framework/XamlTypes/CategorySchema.cs
+++ b/src/Framework/XamlTypes/CategorySchema.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/ContentType.cs b/src/Framework/XamlTypes/ContentType.cs
index 0fe304b22fc..93d6298362c 100644
--- a/src/Framework/XamlTypes/ContentType.cs
+++ b/src/Framework/XamlTypes/ContentType.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/DataSource.cs b/src/Framework/XamlTypes/DataSource.cs
index 52248fedf67..bd1e559d682 100644
--- a/src/Framework/XamlTypes/DataSource.cs
+++ b/src/Framework/XamlTypes/DataSource.cs
@@ -4,6 +4,8 @@
 using System;
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/DynamicEnumProperty.cs b/src/Framework/XamlTypes/DynamicEnumProperty.cs
index 3e090dd3ac4..f4e1655abb2 100644
--- a/src/Framework/XamlTypes/DynamicEnumProperty.cs
+++ b/src/Framework/XamlTypes/DynamicEnumProperty.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/EnumProperty.cs b/src/Framework/XamlTypes/EnumProperty.cs
index 2cae0dedb63..d07d9eba886 100644
--- a/src/Framework/XamlTypes/EnumProperty.cs
+++ b/src/Framework/XamlTypes/EnumProperty.cs
@@ -5,6 +5,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/EnumValue.cs b/src/Framework/XamlTypes/EnumValue.cs
index 8db8e5991d5..014262e8bf0 100644
--- a/src/Framework/XamlTypes/EnumValue.cs
+++ b/src/Framework/XamlTypes/EnumValue.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/FileExtension.cs b/src/Framework/XamlTypes/FileExtension.cs
index a9eda03f02e..a1368b9abf4 100644
--- a/src/Framework/XamlTypes/FileExtension.cs
+++ b/src/Framework/XamlTypes/FileExtension.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/IProjectSchemaNode.cs b/src/Framework/XamlTypes/IProjectSchemaNode.cs
index e7423da3336..879e9bc3cd1 100644
--- a/src/Framework/XamlTypes/IProjectSchemaNode.cs
+++ b/src/Framework/XamlTypes/IProjectSchemaNode.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/IntProperty.cs b/src/Framework/XamlTypes/IntProperty.cs
index 68828b3fcef..eb8d77a669a 100644
--- a/src/Framework/XamlTypes/IntProperty.cs
+++ b/src/Framework/XamlTypes/IntProperty.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/ItemType.cs b/src/Framework/XamlTypes/ItemType.cs
index c83c628f4b0..e6696f3b2d6 100644
--- a/src/Framework/XamlTypes/ItemType.cs
+++ b/src/Framework/XamlTypes/ItemType.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/NameValuePair.cs b/src/Framework/XamlTypes/NameValuePair.cs
index 3822dd7c7df..f180244d508 100644
--- a/src/Framework/XamlTypes/NameValuePair.cs
+++ b/src/Framework/XamlTypes/NameValuePair.cs
@@ -3,6 +3,8 @@
 
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs b/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
index 55d41ffa8e0..353136c50e8 100644
--- a/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
+++ b/src/Framework/XamlTypes/ProjectSchemaDefinitions.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/Rule.cs b/src/Framework/XamlTypes/Rule.cs
index 5893a27acf7..7c07bbfcd0a 100644
--- a/src/Framework/XamlTypes/Rule.cs
+++ b/src/Framework/XamlTypes/Rule.cs
@@ -10,6 +10,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     // DEV11DESIGNISSUE (pavana): Once the de-serialization is complete, seal the type so
diff --git a/src/Framework/XamlTypes/RuleBag.cs b/src/Framework/XamlTypes/RuleBag.cs
index e1e5ff5aede..1831443deeb 100644
--- a/src/Framework/XamlTypes/RuleBag.cs
+++ b/src/Framework/XamlTypes/RuleBag.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/RuleSchema.cs b/src/Framework/XamlTypes/RuleSchema.cs
index a4369541ea9..7ce3572062c 100644
--- a/src/Framework/XamlTypes/RuleSchema.cs
+++ b/src/Framework/XamlTypes/RuleSchema.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/StringListProperty.cs b/src/Framework/XamlTypes/StringListProperty.cs
index d3c6a74b503..91298c04a18 100644
--- a/src/Framework/XamlTypes/StringListProperty.cs
+++ b/src/Framework/XamlTypes/StringListProperty.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/StringProperty.cs b/src/Framework/XamlTypes/StringProperty.cs
index 47704a9b24f..e2b61544f1b 100644
--- a/src/Framework/XamlTypes/StringProperty.cs
+++ b/src/Framework/XamlTypes/StringProperty.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/Framework/XamlTypes/ValueEditor.cs b/src/Framework/XamlTypes/ValueEditor.cs
index 9e7be2f3944..e58c6e236a4 100644
--- a/src/Framework/XamlTypes/ValueEditor.cs
+++ b/src/Framework/XamlTypes/ValueEditor.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Windows.Markup;
 
+#nullable disable
+
 namespace Microsoft.Build.Framework.XamlTypes
 {
     /// <summary>
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index 8220910cf74..9bb2da04989 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -48,6 +48,7 @@
   </Target>
 
   <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>
+  <Import Project="..\Package\GetBinPaths.Arm64.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>
 
   <Import Project="$(RepoRoot)eng\BootStrapMSBuild.targets" />
 
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index bd04dfc4a6f..7de79854e86 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -16,6 +16,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class CommandLineSwitchesTests
@@ -293,6 +295,22 @@ public void PropertySwitchIdentificationTests(string property)
             unquoteParameters.ShouldBeTrue();
         }
 
+        [Theory]
+        [InlineData("restoreproperty")]
+        [InlineData("RESTOREPROPERTY")]
+        [InlineData("RestoreProperty")]
+        [InlineData("rp")]
+        [InlineData("RP")]
+        public void RestorePropertySwitchIdentificationTests(string property)
+        {
+            CommandLineSwitches.IsParameterizedSwitch(property, out CommandLineSwitches.ParameterizedSwitch parameterizedSwitch, out string duplicateSwitchErrorMessage, out bool multipleParametersAllowed, out string missingParametersErrorMessage, out bool unquoteParameters, out bool emptyParametersAllowed).ShouldBeTrue();
+            parameterizedSwitch.ShouldBe(CommandLineSwitches.ParameterizedSwitch.RestoreProperty);
+            duplicateSwitchErrorMessage.ShouldBeNull();
+            multipleParametersAllowed.ShouldBeTrue();
+            missingParametersErrorMessage.ShouldBe("MissingPropertyError");
+            unquoteParameters.ShouldBeTrue();
+        }
+
         [Theory]
         [InlineData("logger")]
         [InlineData("LOGGER")]
@@ -546,7 +564,7 @@ public void GraphBuildSwitchCanHaveParameters()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            MSBuildApp.GatherCommandLineSwitches(new List<string>{ "/graph", "/graph:true;  NoBuild  ;;  ;", "/graph:foo"}, switches);
+            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph", "/graph:true;  NoBuild  ;;  ;", "/graph:foo"}, switches);
 
             switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(new[] {"true", "  NoBuild  ", "  ", "foo"});
 
@@ -558,9 +576,9 @@ public void GraphBuildSwitchCanBeParameterless()
         {
             CommandLineSwitches switches = new CommandLineSwitches();
 
-            MSBuildApp.GatherCommandLineSwitches(new List<string>{ "/graph" }, switches);
+            MSBuildApp.GatherCommandLineSwitches(new List<string> { "/graph" }, switches);
 
-            switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(new string[0]);
+            switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(Array.Empty<string>());
 
             switches.HaveErrors().ShouldBeFalse();
         }
@@ -981,9 +999,9 @@ public void InvalidToolsVersionErrors()
                                         "ScoobyDoo",
                                         new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase),
                                         new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase),
-                                        new ILogger[] { },
+                                        Array.Empty<ILogger>(),
                                         LoggerVerbosity.Normal,
-                                        new DistributedLoggerRecord[] { },
+                                        Array.Empty<DistributedLoggerRecord>(),
 #if FEATURE_XML_SCHEMA_VALIDATION
                                         false,
                                         null,
@@ -994,6 +1012,7 @@ public void InvalidToolsVersionErrors()
                                         new StringWriter(),
                                         false,
                                         warningsAsErrors: null,
+                                        warningsNotAsErrors: null,
                                         warningsAsMessages: null,
                                         enableRestore: false,
                                         profilerLogger: null,
@@ -1003,7 +1022,8 @@ public void InvalidToolsVersionErrors()
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         inputResultsCaches: null,
-                                        outputResultsCache: null
+                                        outputResultsCache: null,
+                                        commandLine: null
                         );
                 }
                 finally
@@ -1176,11 +1196,36 @@ public void ProcessWarnAsMessageSwitchEmpty()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/warnasmessage" }), commandLineSwitches);
+            // Set "expanded" content to match the placeholder so the verify can use the exact resource string as "expected."
+            string command = "{0}";
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/warnasmessage" }), commandLineSwitches, command);
 
             VerifySwitchError(commandLineSwitches, "/warnasmessage", AssemblyResources.GetString("MissingWarnAsMessageParameterError"));
         }
 
+        /// <summary>
+        /// Verify that environment variables cannot be passed in as command line switches.
+        /// Also verifies that the full command line is properly passed when a switch error occurs.
+        /// </summary>
+        [Fact]
+        public void ProcessEnvironmentVariableSwitch()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                env.SetEnvironmentVariable("ENVIRONMENTVARIABLE", string.Empty);
+
+                CommandLineSwitches commandLineSwitches = new();
+                string fullCommandLine = "msbuild validProject.csproj %ENVIRONMENTVARIABLE%";
+                MSBuildApp.GatherCommandLineSwitches(new List<string>() { "validProject.csproj", "%ENVIRONMENTVARIABLE%" }, commandLineSwitches, fullCommandLine);
+                VerifySwitchError(commandLineSwitches, "%ENVIRONMENTVARIABLE%", String.Format(AssemblyResources.GetString("EnvironmentVariableAsSwitch"), fullCommandLine));
+
+                commandLineSwitches = new();
+                fullCommandLine = "msbuild %ENVIRONMENTVARIABLE% validProject.csproj";
+                MSBuildApp.GatherCommandLineSwitches(new List<string>() { "%ENVIRONMENTVARIABLE%", "validProject.csproj" }, commandLineSwitches, fullCommandLine);
+                VerifySwitchError(commandLineSwitches, "%ENVIRONMENTVARIABLE%", String.Format(AssemblyResources.GetString("EnvironmentVariableAsSwitch"), fullCommandLine));
+            }
+        }
+
         /// <summary>
         /// Verifies that the /warnasmessage switch is parsed properly when codes are specified.
         /// </summary>
@@ -1223,9 +1268,9 @@ public void ProcessProfileEvaluationEmpty()
         [Fact]
         public void ProcessBooleanSwitchTest()
         {
-            MSBuildApp.ProcessBooleanSwitch(new string[0], defaultValue: true, resourceName: null).ShouldBeTrue();
+            MSBuildApp.ProcessBooleanSwitch(Array.Empty<string>(), defaultValue: true, resourceName: null).ShouldBeTrue();
 
-            MSBuildApp.ProcessBooleanSwitch(new string[0], defaultValue: false, resourceName: null).ShouldBeFalse();
+            MSBuildApp.ProcessBooleanSwitch(Array.Empty<string>(), defaultValue: false, resourceName: null).ShouldBeFalse();
 
             MSBuildApp.ProcessBooleanSwitch(new [] { "true" }, defaultValue: false, resourceName: null).ShouldBeTrue();
 
@@ -1239,7 +1284,7 @@ public static IEnumerable<object[]> ProcessGraphBuildSwitchData()
             var emptyOptions = new GraphBuildOptions();
             var noBuildOptions = new GraphBuildOptions {Build = false};
 
-            yield return new object[] {new string[0], emptyOptions, null};
+            yield return new object[] {Array.Empty<string>(), emptyOptions, null};
 
             yield return new object[] {new[] {"true"}, emptyOptions, null};
 
@@ -1315,7 +1360,6 @@ public static IEnumerable<object[]> GetInvalidFilenames()
             yield return new object[] { $"C:\\a_path\\with{Path.GetInvalidPathChars().First()}invalid\\chars" };
         }
 
-#if FEATURE_RESOURCEMANAGER_GETRESOURCESET
         /// <summary>
         /// Verifies that help messages are correctly formed with the right width and leading spaces.
         /// </summary>
@@ -1379,7 +1423,6 @@ public void HelpMessagesAreValid()
                 }
             }
         }
-#endif
 
         /// <summary>
         /// Verifies that a switch collection has an error registered for the given command line arg.
diff --git a/src/MSBuild.UnitTests/PerfLog_Tests.cs b/src/MSBuild.UnitTests/PerfLog_Tests.cs
index be18d7b6a47..a167de8abad 100644
--- a/src/MSBuild.UnitTests/PerfLog_Tests.cs
+++ b/src/MSBuild.UnitTests/PerfLog_Tests.cs
@@ -1,35 +1,19 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-using System.Collections;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.Globalization;
 using System.IO;
-using System.Linq;
-using System.Threading;
 
-using Microsoft.Build.CommandLine;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.Shared;
 using Xunit;
 using Xunit.Abstractions;
 using Shouldly;
-using System.IO.Compression;
-using System.Reflection;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
     public class PerfLogTests
     {
-#if USE_MSBUILD_DLL_EXTN
-        private const string MSBuildExeName = "MSBuild.dll";
-#else
-        private const string MSBuildExeName = "MSBuild.exe";
-#endif
-
         private readonly ITestOutputHelper _output;
 
         public PerfLogTests(ITestOutputHelper output)
diff --git a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
index ae0e0d671f2..31985adeda6 100644
--- a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
+++ b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ProjectSchemaValidationHandlerTest
@@ -26,13 +28,12 @@ public class ProjectSchemaValidationHandlerTest
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyInvalidProjectSchema
-            (
-            )
+        public void VerifyInvalidProjectSchema()
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -58,6 +59,7 @@ public void VerifyInvalidProjectSchema
                 if (projectFilename != null) File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -66,13 +68,12 @@ public void VerifyInvalidProjectSchema
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself1
-            (
-            )
+        public void VerifyInvalidSchemaItself1()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -97,6 +98,7 @@ public void VerifyInvalidSchemaItself1
                 if (projectFilename != null) File.Delete(projectFilename);
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -105,13 +107,12 @@ public void VerifyInvalidSchemaItself1
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself2
-            (
-            )
+        public void VerifyInvalidSchemaItself2()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 
             try
             {
@@ -149,6 +150,7 @@ public void VerifyInvalidSchemaItself2
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 if (projectFilename != null) File.Delete(projectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -161,11 +163,10 @@ public void VerifyInvalidSchemaItself2
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyValidProjectSchema
-            (
-            )
+        public void VerifyValidProjectSchema()
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
                         <Target Name=`Build` />
@@ -184,7 +185,7 @@ public void VerifyValidProjectSchema
 
                 Assert.Equal(MSBuildApp.ExitType.Success, MSBuildApp.Execute(@"c:\foo\msbuild.exe " + quotedProjectFile + " /validate:\"" + msbuildTempXsdFilenames[0] + "\""));
 
-                //ProjectSchemaValidationHandler.VerifyProjectSchema
+                // ProjectSchemaValidationHandler.VerifyProjectSchema
                 //    (
                 //    projectFilename, 
                 //    msbuildTempXsdFilenames[0],
@@ -196,6 +197,7 @@ public void VerifyValidProjectSchema
                 File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -205,11 +207,10 @@ public void VerifyValidProjectSchema
         /// should not be caught by the schema
         /// </summary>
         [Fact]
-        public void VerifyInvalidImportNotCaughtBySchema
-            (
-            )
+        public void VerifyInvalidImportNotCaughtBySchema()
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
 
             string importedProjectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
@@ -237,7 +238,7 @@ public void VerifyInvalidImportNotCaughtBySchema
 
                 Assert.Equal(MSBuildApp.ExitType.Success, MSBuildApp.Execute(@"c:\foo\msbuild.exe " + quotedProjectFile + " /validate:\"" + msbuildTempXsdFilenames[0] + "\""));
 
-                //ProjectSchemaValidationHandler.VerifyProjectSchema
+                // ProjectSchemaValidationHandler.VerifyProjectSchema
                 //    (
                 //    projectFilename,
                 //    msbuildTempXsdFilenames[0],
@@ -250,6 +251,7 @@ public void VerifyInvalidImportNotCaughtBySchema
                 File.Delete(projectFilename);
                 File.Delete(importedProjectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
diff --git a/src/MSBuild.UnitTests/ValidateAssemblyLoadContext.cs b/src/MSBuild.UnitTests/ValidateAssemblyLoadContext.cs
index fec7f8d4654..249571a1802 100644
--- a/src/MSBuild.UnitTests/ValidateAssemblyLoadContext.cs
+++ b/src/MSBuild.UnitTests/ValidateAssemblyLoadContext.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Utilities;
 using System.Runtime.Loader;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ValidateAssemblyLoadContext : Task
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index e44fe59257f..5849fb8f3c8 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
@@ -20,6 +19,9 @@
 using System.IO.Compression;
 using System.Reflection;
 using Microsoft.Build.Utilities;
+using Microsoft.Build.Logging;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
@@ -449,7 +451,7 @@ public void ExtractSwitchParametersTest()
             MSBuildApp.ExtractSwitchParameters(commandLineArg, unquotedCommandLineArg, doubleQuotesRemovedFromArg, "p", unquotedCommandLineArg.IndexOf(':'), 1).ShouldBe(":\"foo foo\"=\"bar bar\";\"baz=onga\"");
             doubleQuotesRemovedFromArg.ShouldBe(6);
         }
-        
+
         [Fact]
         public void ExtractSwitchParametersTestDoubleDash()
         {
@@ -487,7 +489,7 @@ public void ExtractSwitchParametersTestDoubleDash()
             unquotedCommandLineArg = QuotingUtilities.Unquote(commandLineArg, out doubleQuotesRemovedFromArg);
             MSBuildApp.ExtractSwitchParameters(commandLineArg, unquotedCommandLineArg, doubleQuotesRemovedFromArg, "p", unquotedCommandLineArg.IndexOf(':'), 2).ShouldBe(":\"foo foo\"=\"bar bar\";\"baz=onga\"");
             doubleQuotesRemovedFromArg.ShouldBe(6);
-        }        
+        }
 
         [Fact]
         public void GetLengthOfSwitchIndicatorTest()
@@ -524,6 +526,7 @@ public void Help(string indicator)
         [Fact]
         public void ErrorCommandLine()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 #if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe -junk").ShouldBe(MSBuildApp.ExitType.SwitchError);
 
@@ -537,6 +540,7 @@ public void ErrorCommandLine()
 
             MSBuildApp.Execute(new[] { @"msbuild.exe", "@bogus.rsp" }).ShouldBe(MSBuildApp.ExitType.InitializationError);
 #endif
+            Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
         }
 
         [Fact]
@@ -602,7 +606,6 @@ public void InvalidMaxCPUCountSwitch3()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "foo" });
             }
            );
@@ -613,12 +616,12 @@ public void InvalidMaxCPUCountSwitch4()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
+                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1025" });
             }
            );
         }
 
-#if FEATURE_CULTUREINFO_CONSOLE_FALLBACK
         /// <summary>
         /// Regression test for bug where the MSBuild.exe command-line app
         /// would sometimes set the UI culture to just "en" which is considered a "neutral" UI
@@ -644,7 +647,6 @@ public void SetConsoleUICulture()
             // Restore the current UI culture back to the way it was at the beginning of this unit test.
             thisThread.CurrentUICulture = originalUICulture;
         }
-#endif
 
 #if FEATURE_SYSTEM_CONFIGURATION
         /// <summary>
@@ -693,7 +695,7 @@ public void ConfigurationInvalid()
                 var pathToProjectFile = Path.Combine(startDirectory, "foo.proj");
                 string projectString =
                    "<?xml version='1.0' encoding='utf-8'?>" +
-                    "<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='X'>" +
+                    "<Project ToolsVersion='X'>" +
                     "<Target Name='t'></Target>" +
                     "</Project>";
                 File.WriteAllText(pathToProjectFile, projectString);
@@ -730,7 +732,6 @@ public void ConfigurationInvalid()
             // If there's a space in the %TEMP% path, the config file is read in the static constructor by the URI class and we catch there;
             // if there's not, we will catch when we try to read the toolsets. Either is fine; we just want to not crash.
             (output.Contains("MSB1043") || output.Contains("MSB4136")).ShouldBeTrue("Output should contain 'MSB1043' or 'MSB4136'");
-
         }
 #endif
 
@@ -768,7 +769,7 @@ private void RobustDelete(string path)
         /// Tests that the environment gets passed on to the node during build.
         /// </summary>
         [Fact]
-        public void TestEnvironment()
+        public void TestEnvironmentTest()
         {
             string projectString = ObjectModelHelpers.CleanupFileContents(
                    @"<?xml version=""1.0"" encoding=""utf-8""?>
@@ -786,7 +787,7 @@ public void TestEnvironment()
                 {
                     sw.WriteLine(projectString);
                 }
-                //Should pass
+                // Should pass
 #if FEATURE_GET_COMMANDLINE
                 MSBuildApp.Execute(@"c:\bin\msbuild.exe " + quotedProjectFileName).ShouldBe(MSBuildApp.ExitType.Success);
 #else
@@ -803,9 +804,10 @@ public void TestEnvironment()
         [Fact]
         public void MSBuildEngineLogger()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string projectString =
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
-                    "<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">" +
+                    "<Project ToolsVersion=\"4.0\">" +
                     "<Target Name=\"t\"><Message Text=\"[Hello]\"/></Target>" +
                     "</Project>";
             string tempdir = Path.GetTempPath();
@@ -820,11 +822,11 @@ public void MSBuildEngineLogger()
                     sw.WriteLine(projectString);
                 }
 #if FEATURE_GET_COMMANDLINE
-                //Should pass
+                // Should pass
                 MSBuildApp.Execute(@$"c:\bin\msbuild.exe /logger:FileLogger,""Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"";""LogFile={logFile}"" /verbosity:detailed " + quotedProjectFileName).ShouldBe(MSBuildApp.ExitType.Success);
 
 #else
-                //Should pass
+                // Should pass
                 MSBuildApp.Execute(
                     new[]
                         {
@@ -849,6 +851,7 @@ public void MSBuildEngineLogger()
             {
                 File.Delete(projectFileName);
                 File.Delete(logFile);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -865,7 +868,7 @@ public void GetCommandLine()
             var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
             File.Exists(_pathToArbitraryBogusFile).ShouldBeTrue();
 
-            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -888,7 +891,7 @@ public void GetCommandLineQuotedExe()
                 pathToMSBuildExe = "\"" + pathToMSBuildExe + "\"";
             }
 
-            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out var successfulExit, outputHelper: _output);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -909,7 +912,7 @@ public void GetCommandLineQuotedExeOnPath()
 
                 var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
 
-                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeFalse();
             }
             finally
@@ -940,12 +943,31 @@ public void ResponseFileInProjectDirectoryFoundImplicitly()
             // Find the project in the current directory
             _env.SetCurrentDirectory(directory);
 
-            string output = RunnerUtilities.ExecMSBuild(string.Empty, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(string.Empty, out var successfulExit, _output);
             successfulExit.ShouldBeTrue();
 
             output.ShouldContain("[A=1]");
         }
 
+        [Fact]
+        public void ResponseFileSwitchesAppearInCommandLine()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                TransientTestFile autoRspFile = env.CreateFile(folder, AutoResponseFileName, "-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                TransientTestFile projectFile = env.CreateFile(folder, "project.proj", "<Project><Target Name=\"T\"><Message Text=\"Text\"/></Target></Project>");
+                TransientTestFile rpsFile = env.CreateFile(folder, "myRsp.rsp", "-nr:false -m:2");
+                env.SetCurrentDirectory(folder.Path);
+                string output = RunnerUtilities.ExecMSBuild("project.proj -nologo", out bool success, _output);
+                success.ShouldBeFalse();
+                output.ShouldContain("-nr:false -m:2");
+                output.ShouldContain("-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                output.ShouldContain("project.proj -nologo");
+                output.ShouldContain(": %NONEXISTENTENVIRONMENTVARIABLE%");
+            }
+        }
+
         /// <summary>
         /// Any msbuild.rsp in the directory of the specified project/solution should be read, and should
         /// take priority over any other response files.
@@ -969,7 +991,7 @@ public void ResponseFileInProjectDirectoryExplicit()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=1]");
@@ -1004,7 +1026,7 @@ public void ResponseFileInProjectDirectoryRandomName()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1040,7 +1062,7 @@ public void ResponseFileInProjectDirectoryCommandLineWins()
 
                 var msbuildParameters = "\"" + projectPath + "\"" + " /p:A=2";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=2]");
@@ -1153,7 +1175,7 @@ public void ResponseFileInProjectDirectoryItselfWithNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeFalse();
 
                 output.ShouldContain("MSB1027"); // msbuild.rsp cannot have /noautoresponse in it
@@ -1188,7 +1210,7 @@ public void ResponseFileInProjectDirectoryButCommandLineNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\" /noautoresponse";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1220,7 +1242,7 @@ public void ResponseFileInProjectDirectoryNullCase()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1248,7 +1270,7 @@ public void ResponseFileSupportsThisFileDirectory()
 
             var msbuildParameters = "\"" + projectPath + "\"";
 
-            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
             successfulExit.ShouldBeTrue();
 
             output.ShouldContain($"[A={directory.Path}{Path.DirectorySeparatorChar}]");
@@ -1277,10 +1299,10 @@ public void NormalPriorityBuild()
 
         private void RunPriorityBuildTest(ProcessPriorityClass expectedPrority, params string[] arguments)
         {
-            string[] aggregateArguments = arguments.Union(new[] { " /nr:false /v:diag "}).ToArray();
+            string[] aggregateArguments = arguments.Union(new[] { " /nr:false /v:diag " }).ToArray();
 
             string contents = ObjectModelHelpers.CleanupFileContents(@"
-<Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+<Project DefaultTargets=""Build"">
  <Target Name=""Build"">
     <Message Text=""Task priority is '$([System.Diagnostics.Process]::GetCurrentProcess().PriorityClass)'""/>
  </Target>
@@ -1330,7 +1352,7 @@ public void TestProcessProjectSwitchOneProjNotFoundExtension()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = { ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1342,7 +1364,7 @@ public void TestTwoIdenticalExtensionsToIgnore()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = { ".phantomextension", ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1354,10 +1376,10 @@ public void TestProcessProjectSwitchNullandEmptyProjectsToIgnore()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = null;
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
 
-            extensionsToIgnore = new string[] { };
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            extensionsToIgnore = Array.Empty<string>();
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1371,7 +1393,7 @@ public void TestProcessProjectSwitchNullInList()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".phantomextension", null };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1387,7 +1409,7 @@ public void TestProcessProjectSwitchEmptyInList()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".phantomextension", string.Empty };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1402,7 +1424,7 @@ public void TestProcessProjectSwitchExtensionWithoutDot()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { "phantomextension" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
             }
            );
         }
@@ -1417,7 +1439,7 @@ public void TestProcessProjectSwitchMalformed()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".C:\\boocatmoo.a" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1432,7 +1454,7 @@ public void TestProcessProjectSwitchWildcards()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".proj*", ".nativeproj?" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1442,52 +1464,52 @@ public void TestProcessProjectSwitch()
             string[] projects = { "test.nativeproj", "test.vcproj" };
             string[] extensionsToIgnore = { ".phantomextension", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
             projects = new[] { "test.nativeproj", "test.vcproj", "test.proj" };
             extensionsToIgnore = new[] { ".phantomextension", ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.nativeproj", "test.vcproj" };
             extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
             projects = new[] { "test.proj", "test.sln" };
             extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.proj", "test.sln", "test.proj~", "test.sln~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.proj" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.proj", "test.proj~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.sln" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.sln", "test.sln~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.sln~", "test.sln" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
         }
 
         /// <summary>
@@ -1499,7 +1521,7 @@ public void TestProcessProjectSwitchReplicateBuildingDFLKG()
             string[] projects = { "test.proj", "test.sln", "Foo.vcproj" };
             string[] extensionsToIgnore = { ".sln", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
         }
 
         /// <summary>
@@ -1513,7 +1535,7 @@ public void TestProcessProjectSwitchRemovedAllprojects()
                 var projects = new[] { "test.nativeproj", "test.vcproj" };
                 var extensionsToIgnore = new[] { ".nativeproj", ".vcproj" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1528,7 +1550,7 @@ public void TestProcessProjectSwitchSlnProjDifferentNames()
                 string[] projects = { "test.proj", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1543,7 +1565,7 @@ public void TestProcessProjectSwitchTwoProj()
                 string[] projects = { "test.proj", "Different.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1558,7 +1580,7 @@ public void TestProcessProjectSwitchTwoNative()
                 string[] projects = { "test.nativeproj", "Different.nativeproj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1573,7 +1595,7 @@ public void TestProcessProjectSwitchTwoSolutions()
                 string[] projects = { "test.sln", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1588,7 +1610,7 @@ public void TestProcessProjectSwitchMoreThenTwoProj()
                 string[] projects = { "test.nativeproj", "Different.csproj", "Another.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1600,10 +1622,10 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = { };
+                string[] projects = Array.Empty<string>();
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1705,9 +1727,9 @@ public void TestProcessProjectSwitchDirectoryMultipleProjects()
                 RobustDelete(projectDirectory);
             }
         }
-#endregion
+        #endregion
 
-#region ProcessFileLoggerSwitches
+        #region ProcessFileLoggerSwitches
         /// <summary>
         /// Test the case where no file logger switches are given, should be no file loggers attached
         /// </summary>
@@ -1950,9 +1972,9 @@ public void TestProcessFileLoggerSwitch5()
             distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
             loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
         }
-#endregion
+        #endregion
 
-#region ProcessConsoleLoggerSwitches
+        #region ProcessConsoleLoggerSwitches
         [Fact]
         public void ProcessConsoleLoggerSwitches()
         {
@@ -1970,8 +1992,8 @@ public void ProcessConsoleLoggerSwitches()
                            1,
                            loggers
                        );
-            loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
-            distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
+            loggers.ShouldBeEmpty("Expected no central loggers to be attached");
+            distributedLoggerRecords.ShouldBeEmpty("Expected no distributed loggers to be attached");
 
             MSBuildApp.ProcessConsoleLoggerSwitch
                        (
@@ -1982,8 +2004,12 @@ public void ProcessConsoleLoggerSwitches()
                            1,
                            loggers
                        );
-            loggers.Count.ShouldBe(1); // "Expected a central loggers to be attached"
-            loggers[0].Parameters.ShouldBe("EnableMPLogging;SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameters passed in"
+            loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
+            loggers[0].ShouldBeOfType<ConsoleLogger>();
+            loggers[0].Parameters.ShouldBe(
+                "EnableMPLogging;SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter",
+                "Expected parameter in logger to match parameters passed in",
+                StringCompareShould.IgnoreCase);
 
             MSBuildApp.ProcessConsoleLoggerSwitch
                        (
@@ -1994,20 +2020,27 @@ public void ProcessConsoleLoggerSwitches()
                           2,
                           loggers
                       );
-            loggers.Count.ShouldBe(1); // "Expected a central loggers to be attached"
-            distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
+            loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
+            distributedLoggerRecords.ShouldHaveSingleItem("Expected a distributed logger to be attached");
             DistributedLoggerRecord distributedLogger = distributedLoggerRecords[0];
-            distributedLogger.CentralLogger.Parameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameters passed in"
-            distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
+            distributedLogger.CentralLogger.ShouldBeOfType<ConsoleLogger>();
+            distributedLogger.CentralLogger.Parameters.ShouldBe(
+                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter",
+                "Expected parameter in logger to match parameters passed in",
+                StringCompareShould.IgnoreCase);
+            distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe(
+                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter;FORWARDPROJECTCONTEXTEVENTS",
+                "Expected parameter in logger to match parameter passed in + FORWARDPROJECTCONTEXTEVENTS",
+                StringCompareShould.IgnoreCase);
         }
-#endregion
+        #endregion
 
         [Fact]
         public void RestoreFirstReevaluatesImportGraph()
         {
             string guid = Guid.NewGuid().ToString("N");
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{Guid.NewGuid():N}.props</RestoreFirstProps>
@@ -2022,7 +2055,7 @@ public void RestoreFirstReevaluatesImportGraph()
 
   <Target Name=""Restore"">
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2042,7 +2075,7 @@ public void RestoreFirstClearsProjectRootElementCache()
             string guid2 = Guid.NewGuid().ToString("N");
             string restoreFirstProps = $"{Guid.NewGuid():N}.props";
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
@@ -2058,7 +2091,7 @@ public void RestoreFirstClearsProjectRootElementCache()
   <Target Name=""Restore"">
     <Message Text=""PropertyA's value is &quot;$(PropertyA)&quot;"" />
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2068,7 +2101,7 @@ public void RestoreFirstClearsProjectRootElementCache()
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
             {
-                { restoreFirstProps, $@"<Project ToolsVersion=""Current"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                { restoreFirstProps, $@"<Project ToolsVersion=""Current"">
   <PropertyGroup>
     <PropertyA>{guid1}</PropertyA>
   </PropertyGroup>
@@ -2089,7 +2122,7 @@ public void RestoreIgnoresMissingImports()
             string guid2 = Guid.NewGuid().ToString("N");
             string restoreFirstProps = $"{Guid.NewGuid():N}.props";
 
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
 
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
@@ -2105,7 +2138,7 @@ public void RestoreIgnoresMissingImports()
   <Target Name=""Restore"">
     <Message Text=""PropertyA's value is &quot;$(PropertyA)&quot;"" />
     <ItemGroup>
-      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
+      <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
 
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
@@ -2115,7 +2148,7 @@ public void RestoreIgnoresMissingImports()
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
             {
-                { restoreFirstProps, $@"<Project ToolsVersion=""Current"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                { restoreFirstProps, $@"<Project ToolsVersion=""Current"">
   <PropertyGroup>
     <PropertyA>{guid1}</PropertyA>
   </PropertyGroup>
@@ -2179,7 +2212,7 @@ public void RestoreRunsInitialTargets()
         [Fact]
         public void MultipleTargetsDoesNotCrash()
         {
-            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents($@"<Project>
   <Target Name=""Target1"">
     <Message Text=""7514CB1641A948D0A3930C5EC2DC1940"" />
   </Target>
@@ -2224,7 +2257,7 @@ public void MissingOptionalLoggersAreIgnored(string logger)
         [InlineData("/interactive /p:NuGetInteractive=true")]
         public void InteractiveSetsBuiltInProperty(string arguments)
         {
-            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
 
   <Target Name=""Build"">
     <Message Text=""MSBuildInteractive = [$(MSBuildInteractive)]"" />
@@ -2244,7 +2277,7 @@ public void InteractiveSetsBuiltInProperty(string arguments)
         public void BinaryLogContainsImportedFiles()
         {
             var testProject = _env.CreateFile("Importer.proj", ObjectModelHelpers.CleanupFileContents(@"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
                 <Import Project=""TestProject.proj"" />
 
                 <Target Name=""Build"">
@@ -2253,7 +2286,7 @@ public void BinaryLogContainsImportedFiles()
             </Project>"));
 
             _env.CreateFile("TestProject.proj", @"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
               <Target Name=""Build"">
                 <Message Text=""Hello from TestProject!"" />
               </Target>
@@ -2272,22 +2305,33 @@ public void BinaryLogContainsImportedFiles()
             archive.Entries.ShouldContain(e => e.FullName.EndsWith(".proj", StringComparison.OrdinalIgnoreCase), 2);
         }
 
-        [Fact]
-        public void EndToEndWarnAsErrors()
-        {
-            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
-
+        [Theory]
+        [InlineData("-warnaserror", "", "", false)]
+        [InlineData("-warnaserror -warnnotaserror:FOR123", "", "", true)]
+        [InlineData("-err: -warnnotaserror:FOR1234", "", "", false)]
+        [InlineData("-warnaserror", "", "FOR123", true)]
+        [InlineData("-warnaserror:FOR123", "", "FOR123", false)]
+        [InlineData("", "FOR123", "FOR123", false)]
+        [InlineData("", "", "FOR123", true)]
+        [InlineData("-warnaserror:FOR1234 -warnnotaserror:FOR123", "", "", false)] // The task should fire as a warning, but this should fail for having warnnotaserror used incorrectly.
+        public void EndToEndWarnAsErrors(string switches, string errorCodes, string notErrorCodes, bool expectedSuccess)
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@$"<Project>
+<PropertyGroup>
+<MSBuildWarningsAsErrors>{errorCodes}</MSBuildWarningsAsErrors>
+<MSBuildWarningsNotAsErrors>{notErrorCodes}</MSBuildWarningsNotAsErrors>
+</PropertyGroup>
   <Target Name=""IssueWarning"">
-    <Warning Text=""Warning!"" />
+    <Warning Text=""Warning!"" Code=""FOR123"" />
   </Target>
 
 </Project>");
 
             TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents);
 
-            RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" -warnaserror", out bool success, _output);
+            RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" {switches} ", out bool success, _output);
 
-            success.ShouldBeFalse();
+            success.ShouldBe(expectedSuccess);
         }
 
         [Trait("Category", "netcore-osx-failing")]
@@ -2316,7 +2360,7 @@ public void BuildSlnOutOfProc()
 
             string testMessage = "Hello from TestProject!";
             _env.CreateFile("TestProject.proj", @$"
-            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+            <Project>
               <Target Name=""Build"">
                 <Message Text=""{testMessage}"" />
               </Target>
@@ -2465,7 +2509,7 @@ private string CopyMSBuild()
             }
         }
 
-        private string ExecuteMSBuildExeExpectSuccess(string projectContents, IDictionary<string, string> filesToCreate = null,  IDictionary<string, string> envsToCreate = null, params string[] arguments)
+        private string ExecuteMSBuildExeExpectSuccess(string projectContents, IDictionary<string, string> filesToCreate = null, IDictionary<string, string> envsToCreate = null, params string[] arguments)
         {
             (bool result, string output) = ExecuteMSBuildExe(projectContents, filesToCreate, envsToCreate, arguments);
 
@@ -2485,7 +2529,7 @@ private string ExecuteMSBuildExeExpectFailure(string projectContents, IDictionar
 
         private (bool result, string output) ExecuteMSBuildExe(string projectContents, IDictionary<string, string> filesToCreate = null, IDictionary<string, string> envsToCreate = null, params string[] arguments)
         {
-            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents, new string[0]);
+            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
             if (filesToCreate != null)
             {
diff --git a/src/MSBuild/AssemblyResources.cs b/src/MSBuild/AssemblyResources.cs
index 516724288ac..ed9431764ac 100644
--- a/src/MSBuild/AssemblyResources.cs
+++ b/src/MSBuild/AssemblyResources.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/MSBuild/CommandLineSwitchException.cs b/src/MSBuild/CommandLineSwitchException.cs
index eeafb59adcf..d5a4b8bb7a6 100644
--- a/src/MSBuild/CommandLineSwitchException.cs
+++ b/src/MSBuild/CommandLineSwitchException.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -54,7 +56,6 @@ private CommandLineSwitchException
             StreamingContext context
         ) :
             base(info, context)
-
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index e1e53cbb1f5..e99faefea4b 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -5,8 +5,12 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Text;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -42,9 +46,6 @@ internal enum ParameterlessSwitch
             FileLogger7,
             FileLogger8,
             FileLogger9,
-#if (!STANDALONEBUILD)
-            OldOM,
-#endif
             DistributedFileLogger,
 #if DEBUG
             WaitForDebugger,
@@ -92,6 +93,7 @@ internal enum ParameterizedSwitch
             Preprocess,
             Targets,
             WarningsAsErrors,
+            WarningsNotAsErrors,
             WarningsAsMessages,
             BinaryLogger,
             Restore,
@@ -217,9 +219,6 @@ bool emptyParametersAllowed
             new ParameterlessSwitchInfo(  new string[] { "filelogger7", "fl7" },            ParameterlessSwitch.FileLogger7,           null),
             new ParameterlessSwitchInfo(  new string[] { "filelogger8", "fl8" },            ParameterlessSwitch.FileLogger8,           null),
             new ParameterlessSwitchInfo(  new string[] { "filelogger9", "fl9" },            ParameterlessSwitch.FileLogger9,           null),
-#if (!STANDALONEBUILD)
-            new ParameterlessSwitchInfo(  new string[] { "oldom" },                         ParameterlessSwitch.OldOM,                 null),
-#endif
             new ParameterlessSwitchInfo(  new string[] { "distributedfilelogger", "dfl" },  ParameterlessSwitch.DistributedFileLogger, null),
 #if DEBUG
             new ParameterlessSwitchInfo(  new string[] { "waitfordebugger", "wfd" },        ParameterlessSwitch.WaitForDebugger,       null),
@@ -261,11 +260,12 @@ bool emptyParametersAllowed
             new ParameterizedSwitchInfo(  new string[] { "preprocess", "pp" },                  ParameterizedSwitch.Preprocess,                 null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "targets", "ts" },                     ParameterizedSwitch.Targets,                    null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "warnaserror", "err" },                ParameterizedSwitch.WarningsAsErrors,           null,                           true,           null,                                  true,   true   ),
+            new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false  ),
-            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingRestorePropertyError",         true,   false  ),
+            new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "interactive" },                       ParameterizedSwitch.Interactive,                null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "isolateprojects", "isolate" },        ParameterizedSwitch.IsolateProjects,            null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "graphbuild", "graph" },               ParameterizedSwitch.GraphBuild,                 null,                           true,           null,                                  true,   false  ),
@@ -398,6 +398,8 @@ private struct DetectedParameterizedSwitch
         private DetectedParameterizedSwitch[] _parameterizedSwitches;
         // NOTE: the above arrays are instance members because this class is not required to be a singleton
 
+        internal static List<(string path, string contents)> SwitchesFromResponseFiles = new();
+
         /// <summary>
         /// Default constructor.
         /// </summary>
@@ -597,7 +599,7 @@ internal bool IsParameterizedSwitchSet(ParameterizedSwitch parameterizedSwitch)
         }
 
         // used to indicate a null parameter list for a switch
-        private static readonly string[] s_noParameters = { };
+        private static readonly string[] s_noParameters = Array.Empty<string>();
 
         /// <summary>
         /// Gets the parameters (if any) detected on the command line for the given parameterized switch.
@@ -712,18 +714,18 @@ internal bool HaveAnySwitchesBeenSet()
         /// Called to flag an error when an unrecognized switch is detected on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnknownSwitchError(string badCommandLineArgValue)
+        internal void SetUnknownSwitchError(string badCommandLineArgValue, string commandLine = "")
         {
-            SetSwitchError("UnknownSwitchError", badCommandLineArgValue);
+            SetSwitchError("UnknownSwitchError", badCommandLineArgValue, commandLine);
         }
 
         /// <summary>
         /// Called to flag an error when a switch that doesn't take parameters is found with parameters on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnexpectedParametersError(string badCommandLineArgValue)
+        internal void SetUnexpectedParametersError(string badCommandLineArgValue, string commandLine = "")
         {
-            SetSwitchError("UnexpectedParametersError", badCommandLineArgValue);
+            SetSwitchError("UnexpectedParametersError", badCommandLineArgValue, commandLine);
         }
 
         // information about last flagged error
@@ -732,15 +734,16 @@ internal void SetUnexpectedParametersError(string badCommandLineArgValue)
         private string _badCommandLineArg;
         private Exception _innerException;
         private bool _isParameterError;
+        private string _commandLine;
 
         /// <summary>
         /// Used to flag/store switch errors.
         /// </summary>
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
-        internal void SetSwitchError(string messageResourceNameValue, string badCommandLineArgValue)
+        internal void SetSwitchError(string messageResourceNameValue, string badCommandLineArgValue, string commandLine)
         {
-            SetError(messageResourceNameValue, badCommandLineArgValue, null, false);
+            SetError(messageResourceNameValue, badCommandLineArgValue, null, false, commandLine);
         }
 
         /// <summary>
@@ -748,9 +751,9 @@ internal void SetSwitchError(string messageResourceNameValue, string badCommandL
         /// </summary>
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
-        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue)
+        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, string commandLine)
         {
-            SetParameterError(messageResourceNameValue, badCommandLineArgValue, null);
+            SetParameterError(messageResourceNameValue, badCommandLineArgValue, null, commandLine);
         }
 
         /// <summary>
@@ -759,9 +762,9 @@ internal void SetParameterError(string messageResourceNameValue, string badComma
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
         /// <param name="innerException"></param>
-        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue)
+        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, string commandLine)
         {
-            SetError(messageResourceNameValue, badCommandLineArgValue, innerExceptionValue, true);
+            SetError(messageResourceNameValue, badCommandLineArgValue, innerExceptionValue, true, commandLine);
         }
 
         /// <summary>
@@ -771,7 +774,7 @@ internal void SetParameterError(string messageResourceNameValue, string badComma
         /// <param name="badCommandLineArg"></param>
         /// <param name="innerException"></param>
         /// <param name="isParameterError"></param>
-        private void SetError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, bool isParameterErrorValue)
+        private void SetError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, bool isParameterErrorValue, string commandLine)
         {
             if (!HaveErrors())
             {
@@ -779,6 +782,7 @@ private void SetError(string messageResourceNameValue, string badCommandLineArgV
                 _badCommandLineArg = badCommandLineArgValue;
                 _innerException = innerExceptionValue;
                 _isParameterError = isParameterErrorValue;
+                _commandLine = commandLine;
             }
         }
 
@@ -804,7 +808,12 @@ internal void ThrowErrors()
                 }
                 else
                 {
-                    CommandLineSwitchException.Throw(_errorMessage, _badCommandLineArg);
+                    StringBuilder sb = StringBuilderCache.Acquire();
+                    foreach ((string path, string contents) in SwitchesFromResponseFiles)
+                    {
+                        sb.Append($"\n{ResourceUtilities.FormatResourceStringStripCodeAndKeyword("ResponseFileSwitchFromLocation", contents, path)}");
+                    }
+                    CommandLineSwitchException.Throw("SwitchErrorWithArguments", _badCommandLineArg, ResourceUtilities.GetResourceString(_errorMessage), _commandLine, StringBuilderCache.GetStringAndRelease(sb));
                 }
             }
         }
@@ -818,7 +827,7 @@ internal void ThrowErrors()
         /// considered to be on the "left", and the switches being appended are on the "right".
         /// </remarks>
         /// <param name="switchesToAppend"></param>
-        internal void Append(CommandLineSwitches switchesToAppend)
+        internal void Append(CommandLineSwitches switchesToAppend, string commandLine = "")
         {
             // if this collection doesn't already have an error registered, but the collection being appended does
             if (!HaveErrors() && switchesToAppend.HaveErrors())
@@ -831,6 +840,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                 _badCommandLineArg = switchesToAppend._badCommandLineArg;
                 _innerException = switchesToAppend._innerException;
                 _isParameterError = switchesToAppend._isParameterError;
+                _commandLine = commandLine;
             }
 
             // NOTE: we might run into some duplicate switch errors below, but if we've already registered the error from the
@@ -851,7 +861,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                     else
                     {
                         SetSwitchError(s_parameterlessSwitchesMap[i].duplicateSwitchErrorMessage,
-                            switchesToAppend.GetParameterlessSwitchCommandLineArg((ParameterlessSwitch)i));
+                            switchesToAppend.GetParameterlessSwitchCommandLineArg((ParameterlessSwitch)i), commandLine);
                     }
                 }
             }
@@ -875,7 +885,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                     else
                     {
                         SetSwitchError(s_parameterizedSwitchesMap[j].duplicateSwitchErrorMessage,
-                            switchesToAppend.GetParameterizedSwitchCommandLineArg((ParameterizedSwitch)j));
+                            switchesToAppend.GetParameterizedSwitchCommandLineArg((ParameterizedSwitch)j), commandLine);
                     }
                 }
             }
diff --git a/src/MSBuild/DistributedLoggerRecord.cs b/src/MSBuild/DistributedLoggerRecord.cs
index e644cc4076d..695b2834563 100644
--- a/src/MSBuild/DistributedLoggerRecord.cs
+++ b/src/MSBuild/DistributedLoggerRecord.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
diff --git a/src/MSBuild/InitializationException.cs b/src/MSBuild/InitializationException.cs
index 7fefa686647..deb2a93f11c 100644
--- a/src/MSBuild/InitializationException.cs
+++ b/src/MSBuild/InitializationException.cs
@@ -10,6 +10,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -59,7 +61,6 @@ private InitializationException
             StreamingContext context
         ) :
             base(info, context)
-
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
diff --git a/src/MSBuild/LogMessagePacket.cs b/src/MSBuild/LogMessagePacket.cs
index 54ec464146b..2e69e1f1e36 100644
--- a/src/MSBuild/LogMessagePacket.cs
+++ b/src/MSBuild/LogMessagePacket.cs
@@ -10,6 +10,8 @@
 using TaskEngineAssemblyResolver = Microsoft.Build.BackEnd.Logging.TaskEngineAssemblyResolver;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -45,4 +47,4 @@ static internal INodePacket FactoryForDeserialization(ITranslator translator)
             return new LogMessagePacket(translator);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 99a71a59e11..9ea8cc2fcf8 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -7,6 +7,9 @@
     <OutputType>Exe</OutputType>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+    <!-- MSBuild.exe needs to be architecture specific, the rest of the .dlls can be AnyCPU. -->
+    <PlatformTarget Condition="'$(Platform)' == 'arm64'">arm64</PlatformTarget>
+
     <!-- MSBuild.csproj no longer uses apphost. This fixes an issue where certain tests would find
          MSBuild.exe AND MSBuild.dll when they should only find MSBuild.dll. -->
     <UseAppHost>false</UseAppHost>
@@ -30,7 +33,7 @@
     <!-- Temporary solution for
          https://github.com/dotnet/msbuild/issues/834 Long term
          two files should be generated from a single source. -->
-    <AppConfig Condition="'$(Platform)' == 'x64'">app.amd64.config</AppConfig>
+    <AppConfig Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">app.amd64.config</AppConfig>
     <!-- Disable binding redirect generation: we want to be deliberate
          about the redirects we expose plugins to, and we explicitly
          redirect ValueTuple _down_ to match VS. -->
@@ -211,6 +214,13 @@
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
     <PackageReference Include="System.Configuration.ConfigurationManager" />
   </ItemGroup>
+    <!-- Manually download this library for RoslynCodeTaskFactory.
+           See target AddRefAssemblies below. -->
+    <ItemGroup>
+      <PackageDownload Include="netstandard.library">
+        <Version>[2.0.3]</Version>
+      </PackageDownload>
+    </ItemGroup>
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <!-- File for Assemblies we depend on -->
     <Reference Include="System" />
@@ -219,8 +229,9 @@
     <PackageReference Include="LargeAddressAware" PrivateAssets="All" />
   </ItemGroup>
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
+    <!-- Bump these to the latest version despite transitive references to older -->
+    <PackageReference Include="System.Private.Uri" />
+    <PackageReference Include="System.Runtime" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
@@ -330,4 +341,16 @@
 
   </Target>
 
+  <!-- Note: Keep the `AssemblyFile=` usage here instead of using `AssemblyName`. It acts as a regression test for folks who have been using it this way,
+             which has been in the official docs for some time. -->
+  <UsingTask TaskName="ValidateMSBuildPackageDependencyVersions" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
+    <Task>
+      <Code Source="ValidateMSBuildPackageDependencyVersions.cs" Language="cs" />
+    </Task>
+  </UsingTask>
+
+  <Target Name="ValidateMSBuildPackageDependencyVersions" BeforeTargets="AfterBuild" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" >
+    <ValidateMSBuildPackageDependencyVersions AppConfig="@(AppConfigWithTargetPath)" AssemblyPath="$(OutputPath)" />
+  </Target>
+
 </Project>
diff --git a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
index 870998c8d61..132326e7230 100644
--- a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -207,6 +207,13 @@ elementFormDefault="qualified">
                   </xs:documentation>
                 </xs:annotation>
               </xs:element>
+              <xs:element name="GeneratePathProperty">
+                <xs:annotation>
+                  <xs:documentation>
+                    <!-- _locID_text="PackageReference_GeneratePathProperty" _locComment="" -->Set to true to generate a Pkg* property that points to the restored location of the NuGet package contents. If unset, does not create the property.
+                  </xs:documentation>
+                </xs:annotation>
+              </xs:element>
             </xs:choice>
           </xs:sequence>
           <xs:attribute name="Include" type="xs:string">
@@ -251,6 +258,13 @@ elementFormDefault="qualified">
               </xs:documentation>
             </xs:annotation>
           </xs:attribute>
+          <xs:attribute name="GeneratePathProperty" type="xs:string" use="optional">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="PackageReference_Attribute_GeneratePathProperty" _locComment="" -->Set to true to generate a Pkg* property that points to the restored location of the NuGet package contents
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
         </xs:extension>
       </xs:complexContent>
     </xs:complexType>
@@ -1677,7 +1691,7 @@ elementFormDefault="qualified">
     <xs:element name="DeployDirSuffix" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="DisableFastUpToDateCheck" type="msb:boolean" substitutionGroup="msb:Property">
         <xs:annotation>
-            <xs:documentation><!-- _locID_text="DisableFastUpToDateCheck" _locComment="" -->Whether Visual Studio should do its own faster up-to-date check before Building, rather than invoke MSBuild to do a possibly more accurate one. You would set this to false if you have a heavily customized build process and builds in Visual Studio are not occurring when they should.</xs:documentation>
+            <xs:documentation><!-- _locID_text="DisableFastUpToDateCheck" _locComment="" -->Whether Visual Studio should do its own faster up-to-date check before Building, rather than invoke MSBuild to do a possibly more accurate one. You would set this to true if you have a heavily customized build process and builds in Visual Studio are not occurring when they should.</xs:documentation>
         </xs:annotation>
     </xs:element>
     <xs:element name="DocumentationFile" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
@@ -3187,25 +3201,25 @@ elementFormDefault="qualified">
             </xs:documentation>
         </xs:annotation>
     </xs:element>
-    <xs:element name="AssemblySearchPathUseCandidateAssemblyFiles" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseCandidateAssemblyFiles" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseReferencePath" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseReferencePath" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseHintPathFromItem" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseHintPathFromItem" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseTargetFrameworkDirectory" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseTargetFrameworkDirectory" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseAssemblyFoldersConfigFileSearchPath" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseAssemblyFoldersConfigFileSearchPath" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseRegistry" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseRegistry" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseAssemblyFolders" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseAssemblyFolders" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseGAC" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseGAC" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseRawFileName" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseRawFileName" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
-    <xs:element name="AssemblySearchPathUseOutDir" type="msb:boolean" substitutionGroup="msb:Property">
+    <xs:element name="AssemblySearchPath_UseOutDir" type="msb:boolean" substitutionGroup="msb:Property">
     </xs:element>
     <xs:element name="ResolveAssemblyReference" substitutionGroup="msb:Task">
         <xs:complexType>
@@ -3372,6 +3386,9 @@ elementFormDefault="qualified">
                     <xs:attribute name="CertificateThumbprint" use="required" />
                     <xs:attribute name="SigningTarget" use="required" />
                     <xs:attribute name="TimestampUrl" />
+                    <xs:attribute name="TargetFrameworkIdentifier" />
+                    <xs:attribute name="TargetFrameworkVersion" />
+                    <xs:attribute name="DisallowMansignTimestampFallback" />
                 </xs:extension>
             </xs:complexContent>
         </xs:complexType>
@@ -5367,6 +5384,81 @@ elementFormDefault="qualified">
         </xs:complexType>
     </xs:element>
 
+    <!-- ============================ -->
+    <!-- Fast up-to-date check items. -->
+    <!-- ============================ -->
+
+    <xs:element name="UpToDateCheckInput" substitutionGroup="msb:Item">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="UpToDateCheckInputDescription" _locComment="" -->Defines an item to be considered an input to the project for the fast up-to-date check.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+            <xs:complexContent>
+                <xs:extension base="msb:SimpleItemType">
+                    <xs:attribute name="Set">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckInput_Set" _locComment="" -->Optional group(s) of inputs and outputs that should be considered in isolation during build. Useful when a build involves multiple discrete compilation/transpilation steps. Semicolon-delimited when multiple sets are required.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                    <xs:attribute name="Kind">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckInput_Kind" _locComment="" -->Optional identifier for this item that allows it to be omitted from the fast up-to-date check via a global property.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                </xs:extension>
+            </xs:complexContent>
+        </xs:complexType>
+    </xs:element>
+
+    <xs:element name="UpToDateCheckOutput" substitutionGroup="msb:Item">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="UpToDateCheckOutputDescription" _locComment="" -->Defines an item to be considered an output of the project for the fast up-to-date check.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+            <xs:complexContent>
+                <xs:extension base="msb:SimpleItemType">
+                    <xs:attribute name="Set">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckOutput_Set" _locComment="" -->Optional group(s) of inputs and outputs that should be considered in isolation during build. Useful when a build involves multiple discrete compilation/transpilation steps. Semicolon-delimited when multiple sets are required.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                    <xs:attribute name="Kind">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckOutput_Kind" _locComment="" -->Optional identifier for this item that allows it to be omitted from the fast up-to-date check via a global property.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                </xs:extension>
+            </xs:complexContent>
+        </xs:complexType>
+    </xs:element>
+
+    <xs:element name="UpToDateCheckBuilt" substitutionGroup="msb:Item">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="UpToDateCheckBuiltDescription" _locComment="" -->Defines an item to be considered an output of the project for the fast up-to-date check, with optional corresponding input via 'Original' metadata. When 'Original' metadata is specified, the input and output are considered in isolation. Useful when a single file will be copied (and potentially transformed in doing so) during build.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+            <xs:complexContent>
+                <xs:extension base="msb:SimpleItemType">
+                    <xs:attribute name="Set">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckBuilt_Set" _locComment="" -->Optional group(s) of inputs and outputs that should be considered in isolation during build. Useful when a build involves multiple discrete compilation/transpilation steps. Semicolon-delimited when multiple sets are required.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                    <xs:attribute name="Kind">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckBuilt_Kind" _locComment="" -->Optional identifier for this item that allows it to be omitted from the fast up-to-date check via a global property.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                    <xs:attribute name="Original">
+                        <xs:annotation>
+                            <xs:documentation><!-- _locID_text="UpToDateCheckBuilt_Original" _locComment="" -->Optional location of the input item that produces this output. Useful when a file is copied (and potentially transformed in doing so) during build. If multiple inputs and/or outputs are involved, use 'Set' metadata instead.</xs:documentation>
+                        </xs:annotation>
+                    </xs:attribute>
+                </xs:extension>
+            </xs:complexContent>
+        </xs:complexType>
+    </xs:element>
+
     <!-- ================ -->
     <!-- Packaging tasks. -->
     <!-- ================ -->
@@ -5986,6 +6078,7 @@ elementFormDefault="qualified">
                     <xs:attribute name="RetryDelayMilliseconds" />
                     <xs:attribute name="SkipUnchangedFiles" />
                     <xs:attribute name="SourceUrl" use="required" />
+                    <xs:attribute name="Timeout" />
                 </xs:extension>
             </xs:complexContent>
         </xs:complexType>
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index 1714165cad1..36ea494b383 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Internal;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapper.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapper.cs
index 1a971a16b76..2812e8b48de 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapper.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapper.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index b1f085e2da1..adb4e7931cc 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -3,16 +3,16 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
+#if FEATURE_APPDOMAIN
 using System.Threading;
+#endif
 using System.Reflection;
 
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-#if FEATURE_APPDOMAIN
-using System.Runtime.Remoting;
-#endif
+
+#nullable disable
 
 namespace Microsoft.Build.CommandLine
 {
@@ -117,29 +117,19 @@ IDictionary<string, TaskParameter> taskParams
                 TypeLoader typeLoader = new TypeLoader(TaskLoader.IsTaskClass);
                 taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation));
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
-                Exception exceptionToReturn = e;
-
                 // If it's a TargetInvocationException, we only care about the contents of the inner exception, 
-                // so just save that instead. 
-                if (e is TargetInvocationException)
-                {
-                    exceptionToReturn = e.InnerException;
-                }
+                // so just save that instead.
+                Exception exceptionToReturn = e is TargetInvocationException ? e.InnerException : e;
 
                 return new OutOfProcTaskHostTaskResult
-                                (
-                                    TaskCompleteType.CrashedDuringInitialization,
-                                    exceptionToReturn,
-                                    "TaskInstantiationFailureError",
-                                    new string[] { taskName, taskLocation, String.Empty }
-                                );
+                            (
+                                TaskCompleteType.CrashedDuringInitialization,
+                                exceptionToReturn,
+                                "TaskInstantiationFailureError",
+                                new string[] { taskName, taskLocation, String.Empty }
+                            );
             }
 
             OutOfProcTaskHostTaskResult taskResult;
@@ -239,13 +229,8 @@ IDictionary<string, TaskParameter> taskParams
                                                 taskParams
                                             );
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                     {
-                        if (ExceptionHandling.IsCriticalException(e))
-                        {
-                            throw;
-                        }
-
                         exceptionFromExecution = e;
                     }
                     finally
@@ -321,13 +306,8 @@ IDictionary<string, TaskParameter> taskParams
 
                 wrappedTask.BuildEngine = oopTaskHostNode;
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Exception exceptionToReturn = e;
 
                 // If it's a TargetInvocationException, we only care about the contents of the inner exception, 
@@ -353,29 +333,16 @@ IDictionary<string, TaskParameter> taskParams
                     PropertyInfo paramInfo = wrappedTask.GetType().GetProperty(param.Key, BindingFlags.Instance | BindingFlags.Public);
                     paramInfo.SetValue(wrappedTask, param.Value?.WrappedParameter, null);
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
-                    Exception exceptionToReturn = e;
-
-                    // If it's a TargetInvocationException, we only care about the contents of the inner exception, 
-                    // so just save that instead. 
-                    if (e is TargetInvocationException)
-                    {
-                        exceptionToReturn = e.InnerException;
-                    }
-
                     return new OutOfProcTaskHostTaskResult
-                                    (
-                                        TaskCompleteType.CrashedDuringInitialization,
-                                        exceptionToReturn,
-                                        "InvalidTaskAttributeError",
-                                        new string[] { param.Key, param.Value.ToString(), taskName }
-                                    );
+                            (
+                                TaskCompleteType.CrashedDuringInitialization,
+                                // If it's a TargetInvocationException, we only care about the contents of the inner exception, so save that instead.
+                                e is TargetInvocationException ? e.InnerException : e,
+                                "InvalidTaskAttributeError",
+                                new string[] { param.Key, param.Value.ToString(), taskName }
+                            );
                 }
             }
 
@@ -390,13 +357,8 @@ IDictionary<string, TaskParameter> taskParams
                 // If it didn't crash and return before now, we're clear to go ahead and execute here. 
                 success = wrappedTask.Execute();
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 return new OutOfProcTaskHostTaskResult(TaskCompleteType.CrashedDuringExecution, e);
             }
 
@@ -406,19 +368,14 @@ IDictionary<string, TaskParameter> taskParams
             foreach (PropertyInfo value in finalPropertyValues)
             {
                 // only record outputs
-                if (value.GetCustomAttributes(typeof(OutputAttribute), true).Count() > 0)
+                if (value.GetCustomAttributes(typeof(OutputAttribute), true).Length > 0)
                 {
                     try
                     {
                         finalParameterValues[value.Name] = value.GetValue(wrappedTask, null);
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                     {
-                        if (ExceptionHandling.IsCriticalException(e))
-                        {
-                            throw;
-                        }
-
                         // If it's not a critical exception, we assume there's some sort of problem in the parameter getter -- 
                         // so save the exception, and we'll re-throw once we're back on the main node side of the 
                         // communications pipe.  
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index e747dbcc9a3..9ec5f525074 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -19,6 +19,8 @@
 using System.Runtime.Remoting;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -278,6 +280,8 @@ public bool IsRunningMultipleNodes
         /// </summary>
         private ICollection<string> WarningsAsErrors { get; set; }
 
+        private ICollection<string> WarningsNotAsErrors { get; set; }
+
         private ICollection<string> WarningsAsMessages { get; set; }
 
         public bool ShouldTreatWarningAsError(string warningCode)
@@ -288,7 +292,12 @@ public bool ShouldTreatWarningAsError(string warningCode)
                 return false;
             }
 
-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);
+            return (WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningCode)) || WarningsAsMessages.Contains(warningCode);
+        }
+
+        private bool WarningAsErrorNotOverriden(string warningCode)
+        {
+            return WarningsNotAsErrors?.Contains(warningCode) != true;
         }
         #endregion
 
@@ -866,6 +875,7 @@ private void RunTask(object state)
             _updateEnvironment = !taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostDoNotUpdateEnvironment", "1", StringComparison.OrdinalIgnoreCase);
             _updateEnvironmentAndLog = taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostUpdateEnvironmentAndLog", "1", StringComparison.OrdinalIgnoreCase);
             WarningsAsErrors = taskConfiguration.WarningsAsErrors;
+            WarningsNotAsErrors = taskConfiguration.WarningsNotAsErrors;
             WarningsAsMessages = taskConfiguration.WarningsAsMessages;
             try
             {
@@ -905,22 +915,14 @@ private void RunTask(object state)
                     taskParams
                 );
             }
-            catch (Exception e)
+            catch (ThreadAbortException)
             {
-                if (e is ThreadAbortException)
-                {
-                    // This thread was aborted as part of Cancellation, we will return a failure task result
-                    taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
-                }
-                else
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-                else
-                {
-                    taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.CrashedDuringExecution, e);
-                }
+                // This thread was aborted as part of Cancellation, we will return a failure task result
+                taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
+            }
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
+            {
+                taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.CrashedDuringExecution, e);
             }
             finally
             {
@@ -931,10 +933,7 @@ private void RunTask(object state)
                     IDictionary<string, string> currentEnvironment = CommunicationsUtilities.GetEnvironmentVariables();
                     currentEnvironment = UpdateEnvironmentForMainNode(currentEnvironment);
 
-                    if (taskResult == null)
-                    {
-                        taskResult = new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
-                    }
+                    taskResult ??= new OutOfProcTaskHostTaskResult(TaskCompleteType.Failure);
 
                     lock (_taskCompleteLock)
                     {
diff --git a/src/MSBuild/PerformanceLogEventListener.cs b/src/MSBuild/PerformanceLogEventListener.cs
index b3857fd50f4..3e08da0d512 100644
--- a/src/MSBuild/PerformanceLogEventListener.cs
+++ b/src/MSBuild/PerformanceLogEventListener.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     internal sealed class PerformanceLogEventListener : EventListener
diff --git a/src/MSBuild/ProjectSchemaValidationHandler.cs b/src/MSBuild/ProjectSchemaValidationHandler.cs
index 8620083844b..3f6b1cce5f7 100644
--- a/src/MSBuild/ProjectSchemaValidationHandler.cs
+++ b/src/MSBuild/ProjectSchemaValidationHandler.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -303,4 +305,4 @@ private void OnSchemaValidationError(object sender, ValidationEventArgs args)
         #endregion // Event Handlers
     }
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/src/MSBuild/README.md b/src/MSBuild/README.md
new file mode 100644
index 00000000000..615053b15e9
--- /dev/null
+++ b/src/MSBuild/README.md
@@ -0,0 +1,12 @@
+﻿# Microsoft.Build.Runtime
+
+This package delivers a complete executable copy of MSBuild. Reference this
+package only if your application needs to load projects or execute in-process
+builds without requiring installation of MSBuild. Successfully evaluating
+projects using this package requires aggregating additional components (like the
+compilers) into an application directory.
+
+🗒️ NOTE: if you are building an application that wants to use MSBuild to
+evaluate or build projects, you will generally not need this package. Instead,
+use [MSBuildLocator](https://aka.ms/msbuild/locator) to use a complete toolset
+provided by the .NET SDK or Visual Studio.
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index 61b9471ba63..8bf7155cbac 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -86,10 +86,8 @@
     <value>MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</value>
     <comment>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</comment>
   </data>
-  <data name="CopyrightMessage" UESanitized="true" Visibility="Public">
-    <value>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</value>
+  <data name="MSBuildVersionMessage" UESanitized="true" Visibility="Public">
+    <value>MSBuild version {0} for {1}</value>
     <comment>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</comment>
   </data>
   <data name="DuplicateProjectSwitchError" UESanitized="true" Visibility="Public">
@@ -824,6 +822,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
+  <data name="HelpMessage_40_WarnNotAsErrorSwitch" Visibility="Public">
+    <value>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </value>
+    <comment>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </comment>
+  </data>
   <data name="InvalidConfigurationFile" Visibility="Public">
     <value>MSBUILD : Configuration error MSB1043: The application could not start. {0}</value>
     <comment>
@@ -1258,6 +1272,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
+  <data name="MissingWarnNotAsErrorParameterError" UESanitized="true" Visibility="Public">
+    <value>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</value>
+    <comment>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </comment>
+  </data>
   <data name="InvalidProfilerValue" xml:space="preserve">
     <value>MSBUILD : error MSB1053: Provided filename is not valid. {0}</value>
   </data>
@@ -1276,6 +1298,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       logger could not be created -- this message comes from the CLR/FX and is localized.
     </comment>
   </data>
+  <data name="EnvironmentVariableAsSwitch" Visibility="Public">
+    <value>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</value>
+    <comment>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </comment>
+  </data>
   <data name="Process" UESanitized="true" Visibility="Public">
     <value>Process = "{0}"</value>
   </data>
@@ -1290,11 +1320,29 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </data>
   <data name="MSBVersion" UESanitized="true" Visibility="Public">
     <value>MSBuild version = "{0}"</value>
+  </data>
+  <data name="MSBuildDebugPath" Visibility="Public">
+    <value>MSBuild logs and debug information will be at "{0}"</value>
+  </data>
+  <data name="SwitchErrorWithArguments" Visibility="Public">
+    <value>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</value>
+  </data>
+  <data name="ResponseFileSwitchFromLocation" Visibility="Public">
+    <value>'{0}' came from '{1}'</value>
+    <comment>
+      These are response file switches with the location of the response file on disk.
+    </comment>
+  </data>
+  <data name="NotWarnAsErrorWithoutWarnAsError" Visibility="Public">
+    <value>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</value>
+    <comment>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</comment>
   </data>
     <!--
         The command line message bucket is: MSB1001 - MSB1999
 
-        Next error code should be MSB1060.
+        Next error code should be MSB1063.
 
         Don't forget to update this comment after using the new code.
   -->
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 3391a53a640..6119ea4e085 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: Přepínač -noAutoResponse nelze zadat v souboru automatických odpovědí MSBuild.rsp ani v žádném jiném souboru odpovědí, na který se v souboru automatických odpovědí odkazuje.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine verze {0} pro {1}
-Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Nedefinovaná proměnná prostředí předaná jako přepínač.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Seznam kódů upozornění, které se nemají považovat za chyby.
+                     Pomocí středníku nebo čárky oddělte
+                     více kódů upozornění. Nemá žádný vliv, pokud přepínač -warnaserror
+                     není nastavený.
+
+                     Příklad:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1141,6 +1172,11 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
         <target state="translated">Verze MSBuild = {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Protokoly MSBuild a informace o ladění budou dostupné v „{0}“</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Zadejte protokolovací nástroj.</target>
@@ -1211,6 +1247,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Při použití přepínače -warnNotAsError zadejte jeden nebo více kódů upozornění.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1221,6 +1266,11 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Přepínač -warnnotaserror nelze zadat, pokud není zadán také přepínač -warnaserror a není prázdný.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Zadaný protokolovací nástroj nebylo možné vytvořit a nebude se používat. {0}</target>
@@ -1283,6 +1333,13 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">{0} přišla z {1}</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1311,6 +1368,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Úplný příkazový řádek:{1}
+  Přepínače připojené pomocí souborů odpovědí:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Cíle se nepovedlo vypsat. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 63493f136ce..2b6914c41b7 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: Der Schalter "-noAutoResponse" kann weder in der automatischen Antwortdatei "MSBuild.rsp" noch in einer anderen Antwortdatei verwendet werden, auf die die automatische Antwortdatei verweist.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R)-Build-Engine, Version {0} für {1}
-Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Nicht definierte Umgebungsvariable, die als Switch übergeben wurde.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Liste der Warnungscodes, die nicht als Fehler behandelt werden sollen.
+                     Semikolon oder Komma zum Trennen verwenden
+                     mehrere Warnungscodes. Hat keine Auswirkungen, wenn der -warnaserror
+                     Switch nicht festgelegt ist.
+
+Beispiel:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
         <target state="translated">MSBuild-Version = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild-Protokolle und Debuginformationen befinden sich auf "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Geben Sie eine Protokollierung an.</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Geben Sie mindestens einen Warnungscode an, wenn Sie den „-warnNotAsError“-Switch verwenden.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Der „-warnnotaserror“-Switch kann nur angegeben werden, wenn auch der „-warnaserror“-Switch angegeben wurde und leer gelassen wird.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Die angegebene Protokollierung konnte nicht erstellt werden und wird nicht verwendet. {0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">„{0}“ stammt aus „{1}“</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Vollständige Befehlszeile: „{1}“
+  Switches, die von Antwortdateien angefügt werden:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Ziele konnten nicht ausgegeben werden. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index 956059968ba..e0d7c14e8ad 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: El modificador -noAutoResponse no puede especificarse en el archivo de respuesta automática MSBuild.rsp ni en ningún archivo de respuesta al que el archivo de respuesta automática haga referencia.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine versión {0} para {1}
-Copyright (C) Microsoft Corporation. Todos los derechos reservados.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Variable de entorno no definida pasada como modificador.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Lista de códigos de advertencia para que no se traten como errores.
+                     Use un punto y coma o una coma para separar
+                     varios códigos de advertencia. No tiene efecto si el modificador -warnaserror
+                     no se ha establecido.
+
+                     Ejemplo:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1142,6 +1173,11 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
         <target state="translated">Versión de MSBuild: "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Los registros de MSBuild y la información de depuración estarán en "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Especifique un registrador.</target>
@@ -1212,6 +1248,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Especifique uno o varios códigos de advertencia al usar el modificador -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1222,6 +1267,11 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: No se puede especificar el modificador -warnnotaserror a menos que también se especifique el modificador -warnaserror y se deje vacío.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">No se pudo crear el registrador especificado y no se usará. {0}</target>
@@ -1284,6 +1334,13 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' procedía de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1312,6 +1369,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Línea de comandos completa: '{1}'
+  Modificadores anexados por archivos de respuesta: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: No se pudieron imprimir los destinos. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index a0aa66f7a84..0372c4900f0 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: Impossible de spécifier le commutateur -noAutoResponse dans le fichier réponse automatique MSBuild.rsp, ni dans aucun autre fichier réponse référencé par le fichier réponse automatique.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine version {0} pour {1}
-Copyright (C) Microsoft Corporation. Tous droits réservés.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variable d’environnement non définie passée en tant que commutateur.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+     -warnNotAsError[:code[;code2]]
+                     Liste des codes d’avertissement à traiter non comme des erreurs.
+                     Utiliser un point-virgule ou une virgule pour séparer
+                     plusieurs codes d’avertissement. N’a aucun effet si -warnaserror
+                     n’est pas défini.
+
+                     Exemple:
+                       -warnNotAsError:MSB3026
+   </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
         <target state="translated">Version de MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Les journaux MSBuild et les informations de débogage seront au "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Spécifiez un journal.</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Spécifiez un ou plusieurs codes d’avertissement lors de l’utilisation du commutateur -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Impossible de spécifier le commutateur -warnnotaserror, sauf si le commutateur -warnaserror est également spécifié et laissé vide.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Le journaliseur spécifié n'a pas pu être créé et ne sera pas utilisé. {0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' provient de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+ ligne de commande complète : «{1}»
+ Commutateurs ajoutés par les fichiers réponse :{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: les cibles n'ont pas pu être imprimées. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index 200a7a77dae..4721ca9afcb 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: non è possibile specificare l'opzione -noAutoResponse nel file di risposta automatica MSBuild.rsp o in file di risposta a cui il file di risposta automatica fa riferimento.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine versione {0} per {1}
-Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variabile di ambiente non definita passata come opzione.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -255,6 +260,32 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Elenco di codici di avviso da non considerare come errori.
+                     Usare un punto e virgola o una virgola per separare
+                     più codici di avviso. Non ha alcun effetto se l’opzione -warnaserror
+                     non è impostata.
+
+Esempio:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1155,6 +1186,11 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
         <target state="translated">Versione di MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">I log e le informazioni di debug di MSBuild sono contenuti in "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: specificare un logger.</target>
@@ -1225,6 +1261,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: specificare uno o più codici di avviso quando si usa l'opzione -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1235,6 +1280,11 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: non è possibile specificare l'opzione -warnnotaserror a meno che non venga specificata e lasciata vuota anche l'opzione -warnaserror.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Non è stato possibile creare il logger specificato, che quindi non verrà usato. {0}</target>
@@ -1297,6 +1347,13 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' proviene da '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1325,6 +1382,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Riga di comando completa: '{1}'
+  Opzioni accodate da file di risposta:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: non è stato possibile stampare le destinazioni. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index 453bbc44766..e3fd2d55895 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: MSBuild.rsp 自動応答ファイルや、自動応答ファイルによって参照される応答ファイルに -noAutoResponse スイッチを指定することはできません。</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">{1} 向け Microsoft (R) Build Engine バージョン {0}
-Copyright (C) Microsoft Corporation.All rights reserved.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 未定義の環境変数が切り替えとして渡されました。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     エラーとして扱わない警告コードのリスト.
+                     セミコロンまたはコンマを使用して、複数の警告コード
+                     区切ります。-warnaserror スイッチが設定されていない場合
+                     効果はありません。
+
+                     例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation.All rights reserved.
         <target state="translated">MSBuild バージョン = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild のログとデバッグ情報は、"{0}" にあります。</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Logger を指定してください。</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError スイッチを使用する場合は、1 つ以上の警告コードを指定してください。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -war nullerror スイッチも指定され、空のままにしない限り、-warnnotaserror スイッチを指定できません。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">指定されたロガーを作成できなかったため、使用されません。{0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation.All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">`{0}`からの `{1}`</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完全なコマンド ライン: `{1}`
+ 応答ファイルによって追加されたスイッチ:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: ターゲットを出力できませんでした。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index e57ed62661a..c15244ecb8c 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: MSBuild.rsp 자동 지시 파일과 자동 지시 파일에서 참조하는 모든 지시 파일에는 -noAutoResponse 스위치를 지정할 수 없습니다.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">{1}용 Microsoft (R) Build Engine 버전 {0}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 정의되지 않은 환경 변수가 스위치로 전달되었습니다.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+       -warnNotAsError[:code[;code2]]
+                     오류로 처리하지 않을 경고 코드 목록입니다.
+                     세미콜론이나 쉼표를 사용하여 구분하세요.
+                     여러 경고 코드. -warnaserror
+ 스위치가 설정되어 있지 않으면 효과가 없습니다.
+
+                     예:
+                     -warnNotAsError:MSB3026
+   </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">MSBuild 버전 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 로그 및 디버그 정보는 "{0}"에 있습니다.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 로거를 지정하십시오.</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError 스위치를 사용할 때 하나 이상의 경고 코드를 지정하세요.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -warnaserror 스위치도 지정하고 비어 있지 않으면 -warnnotaserror 스위치를 지정할 수 없습니다.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">지정된 로거를 만들 수 없어 지정된 로거가 사용되지 않습니다. {0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}'은(는) '{1}'에서 제공되었습니다.</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+   전체 명령줄: '{1}'
+  응답 파일에 의해 추가된 스위치:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 대상을 출력할 수 없습니다. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index c1e63e21afe..b170f13dc44 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: przełącznika -noAutoResponse nie można określić w pliku autoodpowiedzi MSBuild.rsp ani w żadnym pliku odpowiedzi, do którego odwołuje się plik autoodpowiedzi.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine {0} dla platformy {1}
-Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Niezdefiniowana zmienna środowiskowa przekazana jako przełącznik.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -255,6 +260,32 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+ -warnNotAsError[:code[;code2]]
+ Lista kodów ostrzeżeń, które mają być traktowane jako błędy. 
+ Rozdziel średnik lub przecinek
+ wiele kodów ostrzeżeń. Nie ma żadnego efektu, jeśli przełącznik -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1147,6 +1178,11 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
         <target state="translated">Wersja programu MSBuild = „{0}”</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Dzienniki i informacje debugowania programu MSBuild będą znajdować się w lokalizacji „{0}”</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: określ rejestrator.</target>
@@ -1217,6 +1253,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Określ co najmniej jeden kod ostrzeżenia podczas korzystania z przełącznika –warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1227,6 +1272,11 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Nie można określić przełącznika –warnnotaserror, chyba że przełącznik –warnaserror również jest określony i pozostanie pusty.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Nie można utworzyć określonego rejestratora i nie zostanie on użyty. {0}</target>
@@ -1289,6 +1339,13 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">Element „{0}“ pochodzi z „{1}“</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1317,6 +1374,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+ Pełny wiersz polecenia: „{1}“
+ Przełączniki dołączane przez pliki odpowiedzi: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Nie można wydrukować elementów docelowych. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index e8293005192..0d41ea796de 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: A opção /noAutoResponse não pode ser especificada no arquivo de resposta automática MSBuild.rsp nem em qualquer arquivo de resposta usado como referência para o arquivo de resposta automática.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft(R) Build Engine versão {0} para {1} 
-Copyright (C) Microsoft Corporation. Todos os direitos reservados.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. Todos os direitos reservados.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variável de ambiente indefinida passada como comutador.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -249,6 +254,32 @@ isoladamente.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Lista de códigos de aviso para tratar e não tratar como erros.
+                     Use ponto e vírgula ou vírgula para separar
+                     vários códigos de aviso. Não tem efeito se o -warnaserror
+                     interruptor não está definido.
+
+                     Examplo:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1134,6 +1165,11 @@ isoladamente.
         <target state="translated">Versão do MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Os logs e as informações de depuração do MSBuild estarão no "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Especificar um agente de log.</target>
@@ -1204,6 +1240,15 @@ isoladamente.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: especifique um ou mais códigos de aviso ao usar a opção -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1214,6 +1259,11 @@ isoladamente.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: A opção -warnnotaserror não pode ser especificada, a menos que a opção -warnaserror também seja especificada e deixada em branco.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Não foi possível criar o agente especificado e ele não será usado. {0}</target>
@@ -1276,6 +1326,13 @@ isoladamente.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' proveniente de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1304,6 +1361,15 @@ isoladamente.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Linha de comando completa: '{1}'
+  Comutadores acrescentados por arquivos de resposta:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: não foi possível imprimir destinos. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index d5f02251680..9f729cfd401 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: ключ noAutoResponse не может быть указан в файле автоответа MSBuild.rsp или в любом другом файле ответа, на который файл автоответа ссылается.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine версии {0} для {1}
-(C) Корпорация Майкрософт (Microsoft Corporation). Все права защищены.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: в качестве параметра передана неопределенная переменная среды.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -247,6 +252,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Список кодов предупреждений, которые не будут рассматриваться как ошибки.
+                     Используйте точку с запятой или запятую для разделения
+                     нескольких кодов предупреждения. Не действует, если параметр -warnaserror
+                     не задан.
+
+                     Пример:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1132,6 +1163,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">Версия MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Журналы MSBuild и отладочные сведения будут доступны по адресу "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: укажите журнал.</target>
@@ -1202,6 +1238,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: укажите один или несколько кодов предупреждений при использовании параметра -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1212,6 +1257,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: невозможно задать параметр -warnnotaserror, если параметр -warnaserror также не задан и не оставлен пустым.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Указанное средство ведения журнала не может быть создано и не будет использоваться. {0}</target>
@@ -1274,6 +1324,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">\"{0}\" получен из \"{1}\"</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1302,6 +1359,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Полная командная строка: '{1}'
+  Параметры, добавленные файлами откликов:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: не удалось вывести целевые объекты. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index 06ed57c5523..9d761e71fdf 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: -noAutoResponse anahtarı, MSBuild.rsp otomatik yanıt dosyasında ve bu dosyanın başvuruda bulunduğu herhangi bir yanıt dosyasında belirtilemez.</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">{1} için Microsoft (R) Build Engine sürüm {0}
-Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Tanımlanmamış ortam değişkeni anahtar olarak geçirildi.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+-warnNotAsError[:code[;code2]]
+                     Hata olarak kabul edilmeyen uyarı kodlarının listesi.
+                     Ayırmak için noktalı virgül veya virgül kullanın
+                    çoklu uyarı kodları -warnaserror ise hiçbir etkisi yoktur
+                     anahtarı ayarlanmadı.
+
+Örnek:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1137,6 +1168,11 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
         <target state="translated">MSBuild sürümü = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild günlükleri ve hata ayıklama bilgileri "{0}" yolunda olacak</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Günlükçü belirtin.</target>
@@ -1207,6 +1243,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError anahtarını kullanırken bir veya daha fazla uyarı kodu belirtin.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1217,6 +1262,11 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -warnnotaserror anahtarı, -warnaserror anahtarı da belirtilmedikçe ve boş bırakılmadıkça belirtilemez.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Belirtilen günlükçü oluşturulamadığından kullanılamıyor. {0}</target>
@@ -1279,6 +1329,13 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}', '{1}' kaynağından geldi</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1307,6 +1364,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Tam komut satırı: '{1}'
+  Yanıt dosyaları tarafından eklenen anahtarlar:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Hedefler yazdırılamadı. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.xlf b/src/MSBuild/Resources/xlf/Strings.xlf
index c9f006f4aba..a16ca1ca45e 100644
--- a/src/MSBuild/Resources/xlf/Strings.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.xlf
@@ -21,10 +21,8 @@
         <source>MSBUILD : error MSB1027: The /noautoresponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</source>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "/noautoresponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="DuplicateProjectSwitchError">
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 3a68a4c3a6b..98030b258e3 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: 不能在 MSBuild.rsp 自动响应文件中或由该自动响应文件引用的任何响应文件中指定 -noAutoResponse 开关。</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">用于 {1} 的 Microsoft (R) 生成引擎版本 {0}
-版权所有(C) Microsoft Corporation。保留所有权利。
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 未定义的环境变量作为开关传入。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     不视为错误的警告代码列表.
+                     使用分号或逗号分隔
+                     多个警告代码。如果未设置 -warnaserror
+                     开关，则不会产生任何影响。
+
+                     示例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">MSBuild 版本 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 日志和调试信息将位于"{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 请指定记录器。</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 使用 -warnNotAsError 开关时指定一个或多个警告代码。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: 除非还指定了 -warnaserror 开关并将其留空，否则无法指定 -warnnotaserror 开关。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">无法创建指定的记录器，将不会使用它。{0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">“{0}”来自“{1}”</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完整命令行:“{1}”
+  响应文件追加的开关: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 无法打印目标。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index 5992ad480da..1ea6492f634 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -28,13 +28,9 @@
         <target state="translated">MSBUILD : error MSB1027: -noAutoResponse 參數不能在 MSBuild.rsp 自動回應檔中指定，也不能在自動回應檔所參考的任何回應檔中指定。</target>
         <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
       </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="translated">Microsoft (R) Build Engine for {1} {0} 版
-Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
-</target>
+      <trans-unit id="MSBuildVersionMessage">
+        <source>MSBuild version {0} for {1}</source>
+        <target state="new">MSBuild version {0} for {1}</target>
         <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
       </trans-unit>
       <trans-unit id="CurrentDirectory">
@@ -54,6 +50,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 以切換參數傳入未定義的環境變數。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +253,32 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     要視為不視為錯誤的警告碼清單。
+                     使用分號或逗號分隔
+                     多個警告碼。如果 -warnaserror 沒有作用
+                     未設定切換參數。
+
+範例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1164,11 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
         <target state="translated">MSBuild 版本 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 記錄和偵錯工具資訊將位於 "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 指定記錄器。</target>
@@ -1203,6 +1239,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 使用 -warnNotAsError 切換參數時，請指定一或多個警告碼。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1258,11 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: 除非同時指定 -warnaserror 切換參數且保留空白，否則無法指定 -warnnotaserror 切換參數。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">無法建立指定的記錄器，且不會使用。{0}</target>
@@ -1275,6 +1325,13 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' 來自 '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1360,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完整命令列: '{1}'
+  回應檔案附加的切換參數:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 無法列印目標。{0}</target>
diff --git a/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
new file mode 100644
index 00000000000..6834799b28b
--- /dev/null
+++ b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
@@ -0,0 +1,64 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+using System;
+using System.IO;
+using System.Linq;
+using System.Reflection;
+using System.Xml;
+namespace MSBuild
+{
+    public class ValidateMSBuildPackageDependencyVersions : Task
+    {
+        [Required]
+        public string AppConfig { get; set; }
+        [Required]
+        public string AssemblyPath { get; set; }
+
+        // Microsoft.Build.Conversion.Core and Microsoft.Build.Engine are deprecated, but they're still used in VS for now. This project doesn't directly reference them, so they don't appear in its output directory.
+        // Microsoft.NET.StringTools uses API not available in net35, but since we need it to work for TaskHosts as well, there are simpler versions implemented for that. Ensure it's the right version.
+        // Microsoft.Activities.Build and XamlBuildTask are loaded within an AppDomain in the XamlBuildTask after having been loaded from the GAC elsewhere. See https://github.com/dotnet/msbuild/pull/856
+        private string[] assembliesToIgnore = { "Microsoft.Build.Conversion.Core", "Microsoft.NET.StringTools.net35", "Microsoft.Build.Engine", "Microsoft.Activities.Build", "XamlBuildTask" };
+
+        public override bool Execute()
+        {
+            XmlDocument doc = new XmlDocument();
+            doc.Load(AppConfig);
+            XmlNamespaceManager namespaceManager = new(doc.NameTable);
+            namespaceManager.AddNamespace("asm", "urn:schemas-microsoft-com:asm.v1");
+            bool foundSystemValueTuple = false;
+            foreach (XmlElement dependentAssemblyElement in doc.DocumentElement.SelectNodes("/configuration/runtime/asm:assemblyBinding/asm:dependentAssembly[asm:assemblyIdentity][asm:bindingRedirect]", namespaceManager))
+            {
+                string name = (dependentAssemblyElement.SelectSingleNode("asm:assemblyIdentity", namespaceManager) as XmlElement).GetAttribute("name");
+                string version = (dependentAssemblyElement.SelectSingleNode("asm:bindingRedirect", namespaceManager) as XmlElement).GetAttribute("newVersion");
+                if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version) && !assembliesToIgnore.Contains(name, StringComparer.OrdinalIgnoreCase))
+                {
+                    string path = Path.Combine(AssemblyPath, name + ".dll");
+                    string assemblyVersion = AssemblyName.GetAssemblyName(path).Version.ToString();
+                    if (!version.Equals(assemblyVersion))
+                    {
+                        // Ensure that the binding redirect is to the GAC version, but
+                        // we still ship the version we explicitly reference to let
+                        // API consumers bind to it at runtime.
+                        // See https://github.com/dotnet/msbuild/issues/6976.
+                        if (String.Equals(name, "System.ValueTuple", StringComparison.OrdinalIgnoreCase) && String.Equals(version, "4.0.0.0") && String.Equals(assemblyVersion, "4.0.3.0"))
+                        {
+                            foundSystemValueTuple = true;
+                        }
+                        else
+                        {
+                            Log.LogError($"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).");
+                        }
+                    }
+                }
+            }
+            if (!foundSystemValueTuple)
+            {
+                Log.LogError("Binding redirect for 'System.ValueTuple' missing.");
+            }
+            return !Log.HasLoggedErrors;
+        }
+    }
+}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index ae95d608193..c5f21d2b46d 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4,7 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
+#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
+#endif
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
@@ -26,19 +28,15 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
 
 using FileLogger = Microsoft.Build.Logging.FileLogger;
 using ConsoleLogger = Microsoft.Build.Logging.ConsoleLogger;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
+using Microsoft.Build.Shared.Debugging;
+
+#nullable disable
 
 namespace Microsoft.Build.CommandLine
 {
@@ -124,7 +122,9 @@ public enum ExitType
         /// <summary>
         /// Static constructor
         /// </summary>
+#pragma warning disable CA1810 // Initialize reference type static fields inline
         static MSBuildApp()
+#pragma warning restore CA1810 // Initialize reference type static fields inline
         {
             try
             {
@@ -137,17 +137,12 @@ static MSBuildApp()
 
                 s_initialized = true;
             }
-            catch (TypeInitializationException ex)
-            {
-                if (ex.InnerException == null
-#if !FEATURE_SYSTEM_CONFIGURATION
-                )
-#else
-                    || ex.InnerException.GetType() != typeof(ConfigurationErrorsException))
+            catch (TypeInitializationException ex) when (ex.InnerException is not null
+#if FEATURE_SYSTEM_CONFIGURATION
+            && ex.InnerException is ConfigurationErrorsException
 #endif
-                {
-                    throw;
-                }
+            )
+            {
                 HandleConfigurationException(ex);
             }
 #if FEATURE_SYSTEM_CONFIGURATION
@@ -185,9 +180,9 @@ private static void HandleConfigurationException(Exception ex)
                 // One of the exceptions is missing a period!
                 if (message[message.Length - 1] != '.')
                 {
-                    builder.Append(".");
+                    builder.Append('.');
                 }
-                builder.Append(" ");
+                builder.Append(' ');
 
                 exception = exception.InnerException;
             }
@@ -210,7 +205,7 @@ private static void HandleConfigurationException(Exception ex)
         [MTAThread]
         public static int Main(
 #if !FEATURE_GET_COMMANDLINE
-            string [] args
+            string[] args
 #endif
             )
         {
@@ -286,7 +281,7 @@ private static void AppendOutputFile(string path, long elapsedTime)
         /// Also, the strings are not localized.
         /// Before execution, this is called with initialize only, causing counters to get called with NextValue() to
         /// initialize them.
-        /// </comments>         
+        /// </comments>
         private static void DumpCounters(bool initializeOnly)
         {
             Process currentProcess = Process.GetCurrentProcess();
@@ -311,7 +306,7 @@ private static void DumpCounters(bool initializeOnly)
             // Generally, the instance names, such as "msbuild" and "msbuild#2" are non deterministic; we want this process.
             // Don't use the "ID Process" counter out of the "Process" category, as it doesn't use the same naming scheme
             // as the .NET counters. However, the "Process ID" counter out of the ".NET CLR Memory" category apparently uses
-            // the same scheme as the other .NET categories.            
+            // the same scheme as the other .NET categories.
             string currentInstance = null;
             PerformanceCounterCategory processCategory = new PerformanceCounterCategory("Process");
             foreach (string instance in processCategory.GetInstanceNames())
@@ -340,7 +335,7 @@ private static void DumpCounters(bool initializeOnly)
 #if FEATURE_PERFORMANCE_COUNTERS
         /// <summary>
         /// Dumps all counters in the category
-        /// </summary>        
+        /// </summary>
         private static void DumpAllInCategory(string currentInstance, PerformanceCounterCategory category, bool initializeOnly)
         {
             if (category.CategoryName.IndexOf("remoting", StringComparison.OrdinalIgnoreCase) != -1) // not interesting
@@ -377,7 +372,7 @@ private static void DumpAllInCategory(string currentInstance, PerformanceCounter
 
         /// <summary>
         /// Dumps one counter
-        /// </summary>          
+        /// </summary>
         private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
         {
             try
@@ -392,7 +387,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
                 if (!initializeOnly)
                 {
                     string friendlyCounterType = GetFriendlyCounterType(counter.CounterType, counter.CounterName);
-                    
+
                     // At least some (such as % in GC; maybe all) "%" counters are already multiplied by 100. So we don't do that here.
 
                     // Show decimal places if meaningful
@@ -410,7 +405,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
 
         /// <summary>
         /// Gets a friendly representation of the counter units
-        /// </summary>        
+        /// </summary>
         private static string GetFriendlyCounterType(PerformanceCounterType type, string name)
         {
             if (name.IndexOf("bytes", StringComparison.OrdinalIgnoreCase) != -1)
@@ -480,7 +475,7 @@ public static ExitType Execute(
 #if FEATURE_GET_COMMANDLINE
             string commandLine
 #else
-            string [] commandLine
+            string[] commandLine
 #endif
             )
         {
@@ -509,9 +504,7 @@ string [] commandLine
             ErrorUtilities.VerifyThrowArgumentLength(commandLine, nameof(commandLine));
 #endif
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
             AppDomain.CurrentDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
-#endif
 
             ExitType exitType = ExitType.Success;
 
@@ -539,11 +532,11 @@ string [] commandLine
                 // process the detected command line switches -- gather build information, take action on non-build switches, and
                 // check for non-trivial errors
                 string projectFile = null;
-                string[] targets = { };
+                string[] targets = Array.Empty<string>();
                 string toolsVersion = null;
                 Dictionary<string, string> globalProperties = null;
                 Dictionary<string, string> restoreProperties = null;
-                ILogger[] loggers = { };
+                ILogger[] loggers = Array.Empty<ILogger>();
                 LoggerVerbosity verbosity = LoggerVerbosity.Normal;
                 List<DistributedLoggerRecord> distributedLoggerRecords = null;
 #if FEATURE_XML_SCHEMA_VALIDATION
@@ -560,6 +553,7 @@ string [] commandLine
                 TextWriter targetsWriter = null;
                 bool detailedSummary = false;
                 ISet<string> warningsAsErrors = null;
+                ISet<string> warningsNotAsErrors = null;
                 ISet<string> warningsAsMessages = null;
                 bool enableRestore = Traits.Instance.EnableRestoreFirst;
                 ProfilerLogger profilerLogger = null;
@@ -570,42 +564,53 @@ string [] commandLine
                 bool lowPriority = false;
                 string[] inputResultsCaches = null;
                 string outputResultsCache = null;
+                CommandLineSwitches.SwitchesFromResponseFiles ??= new();
 
                 GatherAllSwitches(commandLine, out var switchesFromAutoResponseFile, out var switchesNotFromAutoResponseFile);
 
-                if (ProcessCommandLineSwitches(
-                        switchesFromAutoResponseFile,
-                        switchesNotFromAutoResponseFile,
-                        ref projectFile,
-                        ref targets,
-                        ref toolsVersion,
-                        ref globalProperties,
-                        ref loggers,
-                        ref verbosity,
-                        ref distributedLoggerRecords,
+                bool buildCanBeInvoked = ProcessCommandLineSwitches(
+                                            switchesFromAutoResponseFile,
+                                            switchesNotFromAutoResponseFile,
+                                            ref projectFile,
+                                            ref targets,
+                                            ref toolsVersion,
+                                            ref globalProperties,
+                                            ref loggers,
+                                            ref verbosity,
+                                            ref distributedLoggerRecords,
 #if FEATURE_XML_SCHEMA_VALIDATION
-                        ref needToValidateProject,
-                        ref schemaFile,
+                                            ref needToValidateProject,
+                                            ref schemaFile,
+#endif
+                                            ref cpuCount,
+                                            ref enableNodeReuse,
+                                            ref preprocessWriter,
+                                            ref targetsWriter,
+                                            ref detailedSummary,
+                                            ref warningsAsErrors,
+                                            ref warningsNotAsErrors,
+                                            ref warningsAsMessages,
+                                            ref enableRestore,
+                                            ref interactive,
+                                            ref profilerLogger,
+                                            ref enableProfiler,
+                                            ref restoreProperties,
+                                            ref isolateProjects,
+                                            ref graphBuildOptions,
+                                            ref inputResultsCaches,
+                                            ref outputResultsCache,
+                                            ref lowPriority,
+                                            recursing: false,
+#if FEATURE_GET_COMMANDLINE
+                                            commandLine
+#else
+                                            string.Join(' ', commandLine)
 #endif
-                        ref cpuCount,
-                        ref enableNodeReuse,
-                        ref preprocessWriter,
-                        ref targetsWriter,
-                        ref detailedSummary,
-                        ref warningsAsErrors,
-                        ref warningsAsMessages,
-                        ref enableRestore,
-                        ref interactive,
-                        ref profilerLogger,
-                        ref enableProfiler,
-                        ref restoreProperties,
-                        ref isolateProjects,
-                        ref graphBuildOptions,
-                        ref inputResultsCaches,
-                        ref outputResultsCache,
-                        ref lowPriority,
-                        recursing: false
-                        ))
+                );
+
+                CommandLineSwitches.SwitchesFromResponseFiles = null;
+
+                if (buildCanBeInvoked)
                 {
                     // Unfortunately /m isn't the default, and we are not yet brave enough to make it the default.
                     // However we want to give a hint to anyone who is building single proc without realizing it that there
@@ -619,25 +624,11 @@ string [] commandLine
                     }
                     if (preprocessWriter != null && !BuildEnvironmentHelper.Instance.RunningTests)
                     {
-                        // Indicate to the engine that it can NOT toss extraneous file content: we want to 
+                        // Indicate to the engine that it can NOT toss extraneous file content: we want to
                         // see that in preprocessing/debugging
                         Environment.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
                     }
 
-                    // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit
-                    // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.
-                    try
-                    {
-                        if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle)
-                        {
-                            Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal;
-                        }
-                    }
-                    // We avoid increasing priority because that causes failures on mac/linux, but there is no good way to
-                    // verify that a particular priority is lower than "BelowNormal." If the error appears, ignore it and
-                    // leave priority where it was.
-                    catch (Win32Exception) { }
-
                     DateTime t1 = DateTime.Now;
 
                     // If the primary file passed to MSBuild is a .binlog file, play it back into passed loggers
@@ -648,23 +639,19 @@ string [] commandLine
                     }
                     else // regular build
                     {
-#if !STANDALONEBUILD
-                    if (Environment.GetEnvironmentVariable("MSBUILDOLDOM") != "1")
-#endif
-                        {
-                            // if everything checks out, and sufficient information is available to start building
-                            if (
-                                !BuildProject(
-                                    projectFile,
-                                    targets,
-                                    toolsVersion,
-                                    globalProperties,
-                                    restoreProperties,
-                                    loggers,
-                                    verbosity,
-                                    distributedLoggerRecords.ToArray(),
+                        // if everything checks out, and sufficient information is available to start building
+                        if (
+                            !BuildProject(
+                                projectFile,
+                                targets,
+                                toolsVersion,
+                                globalProperties,
+                                restoreProperties,
+                                loggers,
+                                verbosity,
+                                distributedLoggerRecords.ToArray(),
 #if FEATURE_XML_SCHEMA_VALIDATION
-                                    needToValidateProject, schemaFile,
+                                needToValidateProject, schemaFile,
 #endif
                                     cpuCount,
                                     enableNodeReuse,
@@ -672,6 +659,7 @@ string [] commandLine
                                     targetsWriter,
                                     detailedSummary,
                                     warningsAsErrors,
+                                    warningsNotAsErrors,
                                     warningsAsMessages,
                                     enableRestore,
                                     profilerLogger,
@@ -681,17 +669,11 @@ string [] commandLine
                                     graphBuildOptions,
                                     lowPriority,
                                     inputResultsCaches,
-                                    outputResultsCache))
+                                    outputResultsCache,
+                                    commandLine))
                             {
                                 exitType = ExitType.BuildError;
                             }
-                        }
-#if !STANDALONEBUILD
-                    else
-                    {
-                        exitType = OldOMBuildProject(exitType, projectFile, targets, toolsVersion, globalProperties, loggers, verbosity, needToValidateProject, schemaFile, cpuCount);
-                    }
-#endif
                     } // end of build
 
                     DateTime t2 = DateTime.Now;
@@ -854,35 +836,6 @@ string [] commandLine
             return exitType;
         }
 
-#if (!STANDALONEBUILD)
-        /// <summary>
-        /// Use the Orcas Engine to build the project
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </summary>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static ExitType OldOMBuildProject(ExitType exitType, string projectFile, string[] targets, string toolsVersion, Dictionary<string, string> globalProperties, ILogger[] loggers, LoggerVerbosity verbosity, bool needToValidateProject, string schemaFile, int cpuCount)
-        {
-            // Log something to avoid confusion caused by errant environment variable sending us down here
-            Console.WriteLine(AssemblyResources.GetString("Using35Engine"));
-
-            Microsoft.Build.BuildEngine.BuildPropertyGroup oldGlobalProps = new Microsoft.Build.BuildEngine.BuildPropertyGroup();
-            // Copy over the global properties to the old OM
-            foreach (KeyValuePair<string, string> globalProp in globalProperties)
-            {
-                oldGlobalProps.SetProperty(globalProp.Key, globalProp.Value);
-            }
-
-            if (!BuildProjectWithOldOM(projectFile, targets, toolsVersion, oldGlobalProps, loggers, verbosity, null, needToValidateProject, schemaFile, cpuCount))
-            {
-                exitType = ExitType.BuildError;
-            }
-            return exitType;
-        }
-#endif
         /// <summary>
         /// Handler for when CTRL-C or CTRL-BREAK is called.
         /// CTRL-BREAK means "die immediately"
@@ -910,7 +863,7 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
             // The OS takes a lock in
             // kernel32.dll!_SetConsoleCtrlHandler, so if a task
             // waits for that lock somehow before quitting, it would hang
-            // because we're in it here. One way a task can end up here is 
+            // because we're in it here. One way a task can end up here is
             // by calling Microsoft.Win32.SystemEvents.Initialize.
             // So do our work asynchronously so we can return immediately.
             // We're already on a threadpool thread anyway.
@@ -999,6 +952,7 @@ internal static bool BuildProject
             TextWriter targetsWriter,
             bool detailedSummary,
             ISet<string> warningsAsErrors,
+            ISet<string> warningsNotAsErrors,
             ISet<string> warningsAsMessages,
             bool enableRestore,
             ProfilerLogger profilerLogger,
@@ -1008,7 +962,12 @@ internal static bool BuildProject
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             string[] inputResultsCaches,
-            string outputResultsCache
+            string outputResultsCache,
+#if FEATURE_GET_COMMANDLINE
+            string commandLine
+#else
+            string[] commandLine
+#endif
         )
         {
             if (FileUtilities.IsVCProjFilename(projectFile) || FileUtilities.IsDspFilename(projectFile))
@@ -1111,7 +1070,7 @@ string outputResultsCache
                 }
 
 #if FEATURE_XML_SCHEMA_VALIDATION
-                // If the user has requested that the schema be validated, do that here. 
+                // If the user has requested that the schema be validated, do that here.
                 if (needToValidateProject && !FileUtilities.IsSolutionFilename(projectFile))
                 {
                     Microsoft.Build.Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
@@ -1125,7 +1084,7 @@ string outputResultsCache
                     ProjectSchemaValidationHandler.VerifyProjectSchema(projectFile, schemaFile, toolset.ToolsPath);
 
                     // If there are schema validation errors, an InitializationException is thrown, so if we get here,
-                    // we can safely assume that the project successfully validated. 
+                    // we can safely assume that the project successfully validated.
                     projectCollection.UnloadProject(project);
                 }
 #endif
@@ -1170,6 +1129,7 @@ string outputResultsCache
                     parameters.DetailedSummary = detailedSummary;
                     parameters.LogTaskInputs = logTaskInputs;
                     parameters.WarningsAsErrors = warningsAsErrors;
+                    parameters.WarningsNotAsErrors = warningsNotAsErrors;
                     parameters.WarningsAsMessages = warningsAsMessages;
                     parameters.Interactive = interactive;
                     parameters.IsolateProjects = isolateProjects;
@@ -1193,7 +1153,7 @@ string outputResultsCache
                     {
                         parameters.MemoryUseLimit = Convert.ToInt32(memoryUseLimit, CultureInfo.InvariantCulture);
 
-                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a 
+                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a
                         // positive value - otherwise setting it too low will result in a zero, which will enable only the default cache behavior
                         // which is not what is intended by using this environment variable.
                         if (parameters.MemoryUseLimit < parameters.MaxNodeCount)
@@ -1204,14 +1164,19 @@ string outputResultsCache
 
                     BuildManager buildManager = BuildManager.DefaultBuildManager;
 
-#if MSBUILDENABLEVSPROFILING
-                    DataCollection.CommentMarkProfile(8800, "Pending Build Request from MSBuild.exe");
-#endif
                     BuildResultCode? result = null;
 
-                    var messagesToLogInBuildLoggers = Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager
-                        ? null
-                        : GetMessagesToLogInBuildLoggers();
+                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
+                    if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
+                    {
+                        var commandLineString =
+#if FEATURE_GET_COMMANDLINE
+                            commandLine;
+#else
+                            string.Join(" ", commandLine);
+#endif
+                        messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);
+                    }
 
                     buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);
 
@@ -1302,7 +1267,7 @@ string outputResultsCache
                             }
                             else
                             {
-                                // After throwing again below the stack will be reset. Make certain we log everything we 
+                                // After throwing again below the stack will be reset. Make certain we log everything we
                                 // can now
                                 Console.WriteLine(AssemblyResources.GetString("FatalError"));
 #if DEBUG
@@ -1357,9 +1322,9 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
             }
         }
 
-        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers()
+        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers(string commandLineString)
         {
-            return new[]
+            List<BuildManager.DeferredBuildMessage> messages = new()
             {
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
@@ -1374,7 +1339,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "CommandLine",
-                        Environment.CommandLine),
+                        commandLineString),
                     MessageImportance.Low),
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
@@ -1385,8 +1350,20 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "MSBVersion",
                         ProjectCollection.DisplayVersion),
-                    MessageImportance.Low)
+                    MessageImportance.Low),
             };
+
+            if (Traits.Instance.DebugEngine)
+            {
+                messages.Add(
+                    new BuildManager.DeferredBuildMessage(
+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                        "MSBuildDebugPath",
+                        DebugUtils.DebugPath),
+                        MessageImportance.High));
+            }
+
+            return messages;
         }
 
         private static (BuildResultCode result, Exception exception) ExecuteBuild(BuildManager buildManager, BuildRequestData request)
@@ -1457,103 +1434,21 @@ private static (BuildResultCode result, Exception exception) ExecuteRestore(stri
             return ExecuteBuild(buildManager, restoreRequest);
         }
 
-#if (!STANDALONEBUILD)
-        /// <summary>
-        /// Initializes the build engine, and starts the project build.
-        /// Uses the Whidbey/Orcas object model.
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </summary>
-        /// <returns>true, if build succeeds</returns>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static bool BuildProjectWithOldOM(string projectFile, string[] targets, string toolsVersion, Microsoft.Build.BuildEngine.BuildPropertyGroup propertyBag, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, bool needToValidateProject, string schemaFile, int cpuCount)
-        {
-            string msbuildLocation = Path.GetDirectoryName(Assembly.GetAssembly(typeof(MSBuildApp)).Location);
-            string localNodeProviderParameters = "msbuildlocation=" + msbuildLocation; /*This assembly is the exe*/ ;
-
-            localNodeProviderParameters += ";nodereuse=false";
-
-            Microsoft.Build.BuildEngine.Engine engine = new Microsoft.Build.BuildEngine.Engine(propertyBag, Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.ConfigurationFile | Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.Registry, cpuCount, localNodeProviderParameters);
-            bool success = false;
-
-            try
-            {
-                foreach (ILogger logger in loggers)
-                {
-                    engine.RegisterLogger(logger);
-                }
-
-                // Targeted perf optimization for the case where we only have our own parallel console logger, and verbosity is quiet. In such a case
-                // we know we won't emit any messages except for errors and warnings, so the engine should not bother even logging them.
-                // If we're using the original serial console logger we can't do this, as it shows project started/finished context
-                // around errors and warnings.
-                // Telling the engine to not bother logging non-critical messages means that typically it can avoid loading any resources in the successful
-                // build case.
-                if (loggers.Length == 1 &&
-                    verbosity == LoggerVerbosity.Quiet &&
-                    loggers[0].Parameters.IndexOf("ENABLEMPLOGGING", StringComparison.OrdinalIgnoreCase) != -1 &&
-                    loggers[0].Parameters.IndexOf("DISABLEMPLOGGING", StringComparison.OrdinalIgnoreCase) == -1 &&
-                    loggers[0].Parameters.IndexOf("V=", StringComparison.OrdinalIgnoreCase) == -1 &&                // Console logger could have had a verbosity
-                    loggers[0].Parameters.IndexOf("VERBOSITY=", StringComparison.OrdinalIgnoreCase) == -1)          // override with the /clp switch
-                {
-                    // Must be exactly the console logger, not a derived type like the file logger.
-                    Type t1 = loggers[0].GetType();
-                    Type t2 = typeof(ConsoleLogger);
-                    if (t1 == t2)
-                    {
-                        engine.OnlyLogCriticalEvents = true;
-                    }
-                }
-
-                Microsoft.Build.BuildEngine.Project project = null;
-
-                try
-                {
-                    project = new Microsoft.Build.BuildEngine.Project(engine, toolsVersion);
-                }
-                catch (InvalidOperationException e)
-                {
-                    InitializationException.Throw("InvalidToolsVersionError", toolsVersion, e, false /*no stack*/);
-                }
-
-                project.IsValidated = needToValidateProject;
-                project.SchemaFile = schemaFile;
 
-                project.Load(projectFile);
-
-                success = engine.BuildProject(project, targets);
-            }
-            // handle project file errors
-            catch (InvalidProjectFileException)
-            {
-                // just eat the exception because it has already been logged
-            }
-            finally
-            {
-                // Unregister loggers and finish with engine
-                engine.Shutdown();
-            }
-            return success;
-        }
-#endif
         /// <summary>
         /// Verifies that the code is running on a supported operating system.
         /// </summary>
         private static void VerifyThrowSupportedOS()
         {
-#if FEATURE_OSVERSION
-            if (Environment.OSVersion.Platform != PlatformID.Win32NT ||
-                Environment.OSVersion.Version.Major < 6 ||
-                (Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor < 1)) // Windows 7 is minimum
+            if (NativeMethodsShared.IsWindows &&
+                (Environment.OSVersion.Platform != PlatformID.Win32NT ||
+                 Environment.OSVersion.Version.Major < 6 ||
+                 (Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor < 1))) // Windows 7 is minimum
             {
                 // If we're running on any of the unsupported OS's, fail immediately.  This way,
                 // we don't run into some obscure error down the line, totally confusing the user.
                 InitializationException.Throw("UnsupportedOS", null, null, false);
             }
-#endif
         }
 
         /// <summary>
@@ -1561,7 +1456,6 @@ private static void VerifyThrowSupportedOS()
         /// </summary>
         internal static void SetConsoleUI()
         {
-#if FEATURE_CULTUREINFO_CONSOLE_FALLBACK
             Thread thisThread = Thread.CurrentThread;
 
             // Eliminate the complex script cultures from the language selection.
@@ -1592,7 +1486,6 @@ internal static void SetConsoleUI()
                 thisThread.CurrentUICulture = new CultureInfo("en-US");
                 return;
             }
-#endif
 #if RUNTIME_TYPE_NETCORE
             // https://github.com/dotnet/roslyn/issues/10785#issuecomment-238940601
             // by default, .NET Core doesn't have all code pages needed for Console apps.
@@ -1613,7 +1506,7 @@ private static void GatherAllSwitches(
 #if FEATURE_GET_COMMANDLINE
             string commandLine,
 #else
-            string [] commandLine,
+            string[] commandLine,
 #endif
             out CommandLineSwitches switchesFromAutoResponseFile, out CommandLineSwitches switchesNotFromAutoResponseFile)
         {
@@ -1641,16 +1534,22 @@ private static void GatherAllSwitches(
             // discard the first piece, because that's the path to the executable -- the rest are args
             commandLineArgs.RemoveAt(0);
 
+#if FEATURE_GET_COMMANDLINE
+            string fullCommandLine = $"'{commandLine}'";
+#else
+            string fullCommandLine = $"'{string.Join(' ', commandLine)}'";
+#endif
+
             // parse the command line, and flag syntax errors and obvious switch errors
             switchesNotFromAutoResponseFile = new CommandLineSwitches();
-            GatherCommandLineSwitches(commandLineArgs, switchesNotFromAutoResponseFile);
+            GatherCommandLineSwitches(commandLineArgs, switchesNotFromAutoResponseFile, fullCommandLine);
 
             // parse the auto-response file (if "/noautoresponse" is not specified), and combine those switches with the
             // switches on the command line
             switchesFromAutoResponseFile = new CommandLineSwitches();
             if (!switchesNotFromAutoResponseFile[CommandLineSwitches.ParameterlessSwitch.NoAutoResponse])
             {
-                GatherAutoResponseFileSwitches(s_exePath, switchesFromAutoResponseFile);
+                GatherAutoResponseFileSwitches(s_exePath, switchesFromAutoResponseFile, fullCommandLine);
             }
         }
 
@@ -1661,7 +1560,7 @@ private static void GatherAllSwitches(
         /// <remarks>
         /// Internal for unit testing only.
         /// </remarks>
-        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches)
+        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches, string commandLine = "")
         {
             foreach (string commandLineArg in commandLineArgs)
             {
@@ -1672,7 +1571,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
                     // response file switch starts with @
                     if (unquotedCommandLineArg.StartsWith("@", StringComparison.Ordinal))
                     {
-                        GatherResponseFileSwitch(unquotedCommandLineArg, commandLineSwitches);
+                        GatherResponseFileSwitch(unquotedCommandLineArg, commandLineSwitches, commandLine);
                     }
                     else
                     {
@@ -1711,7 +1610,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
 
                         // Special case: for the switches "/m" (or "/maxCpuCount") and "/bl" (or "/binarylogger") we wish to pretend we saw a default argument
                         // This allows a subsequent /m:n on the command line to override it.
-                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case. 
+                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case.
                         // Note that if no "/m" or "/maxCpuCount" switch -- either with or without parameters -- is present, then we still default to 1 cpu
                         // for backwards compatibility.
                         if (string.IsNullOrEmpty(switchParameters))
@@ -1738,15 +1637,15 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
 
                         if (CommandLineSwitches.IsParameterlessSwitch(switchName, out var parameterlessSwitch, out var duplicateSwitchErrorMessage))
                         {
-                            GatherParameterlessCommandLineSwitch(commandLineSwitches, parameterlessSwitch, switchParameters, duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                            GatherParameterlessCommandLineSwitch(commandLineSwitches, parameterlessSwitch, switchParameters, duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                         }
                         else if (CommandLineSwitches.IsParameterizedSwitch(switchName, out var parameterizedSwitch, out duplicateSwitchErrorMessage, out var multipleParametersAllowed, out var missingParametersErrorMessage, out var unquoteParameters, out var allowEmptyParameters))
                         {
-                            GatherParameterizedCommandLineSwitch(commandLineSwitches, parameterizedSwitch, switchParameters, duplicateSwitchErrorMessage, multipleParametersAllowed, missingParametersErrorMessage, unquoteParameters, unquotedCommandLineArg, allowEmptyParameters);
+                            GatherParameterizedCommandLineSwitch(commandLineSwitches, parameterizedSwitch, switchParameters, duplicateSwitchErrorMessage, multipleParametersAllowed, missingParametersErrorMessage, unquoteParameters, unquotedCommandLineArg, allowEmptyParameters, commandLine);
                         }
                         else
                         {
-                            commandLineSwitches.SetUnknownSwitchError(unquotedCommandLineArg);
+                            commandLineSwitches.SetUnknownSwitchError(unquotedCommandLineArg, commandLine);
                         }
                     }
                 }
@@ -1834,7 +1733,7 @@ int switchIndicatorsLength
         /// </summary>
         /// <param name="unquotedCommandLineArg"></param>
         /// <param name="commandLineSwitches"></param>
-        private static void GatherResponseFileSwitch(string unquotedCommandLineArg, CommandLineSwitches commandLineSwitches)
+        private static void GatherResponseFileSwitch(string unquotedCommandLineArg, CommandLineSwitches commandLineSwitches, string commandLine)
         {
             try
             {
@@ -1842,11 +1741,11 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
 
                 if (responseFile.Length == 0)
                 {
-                    commandLineSwitches.SetSwitchError("MissingResponseFileError", unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError("MissingResponseFileError", unquotedCommandLineArg, commandLine);
                 }
                 else if (!FileSystems.Default.FileExists(responseFile))
                 {
-                    commandLineSwitches.SetParameterError("ResponseFileNotFoundError", unquotedCommandLineArg);
+                    commandLineSwitches.SetParameterError("ResponseFileNotFoundError", unquotedCommandLineArg, commandLine);
                 }
                 else
                 {
@@ -1860,7 +1759,7 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
                     {
                         if (string.Equals(responseFile, includedResponseFile, StringComparison.OrdinalIgnoreCase))
                         {
-                            commandLineSwitches.SetParameterError("RepeatedResponseFileError", unquotedCommandLineArg);
+                            commandLineSwitches.SetParameterError("RepeatedResponseFileError", unquotedCommandLineArg, commandLine);
                             isRepeatedResponseFile = true;
                             break;
                         }
@@ -1899,25 +1798,27 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
                             }
                         }
 
-                        GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches);
+                        CommandLineSwitches.SwitchesFromResponseFiles.Add((responseFile, string.Join(" ", argsFromResponseFile)));
+
+                        GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches, commandLine);
                     }
                 }
             }
             catch (NotSupportedException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (SecurityException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (UnauthorizedAccessException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (IOException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
         }
 
@@ -1935,7 +1836,8 @@ private static void GatherParameterlessCommandLineSwitch
             CommandLineSwitches.ParameterlessSwitch parameterlessSwitch,
             string switchParameters,
             string duplicateSwitchErrorMessage,
-            string unquotedCommandLineArg
+            string unquotedCommandLineArg,
+            string commandLine
         )
         {
             // switch should not have any parameters
@@ -1949,12 +1851,12 @@ string unquotedCommandLineArg
                 }
                 else
                 {
-                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                 }
             }
             else
             {
-                commandLineSwitches.SetUnexpectedParametersError(unquotedCommandLineArg);
+                commandLineSwitches.SetUnexpectedParametersError(unquotedCommandLineArg, commandLine);
             }
         }
 
@@ -1980,7 +1882,8 @@ private static void GatherParameterizedCommandLineSwitch
             string missingParametersErrorMessage,
             bool unquoteParameters,
             string unquotedCommandLineArg,
-            bool allowEmptyParameters
+            bool allowEmptyParameters,
+            string commandLine
         )
         {
             if (// switch must have parameters
@@ -1988,37 +1891,54 @@ bool allowEmptyParameters
                 // unless the parameters are optional
                 (missingParametersErrorMessage == null))
             {
+                // skip the parameter indicator (if any)
+                if (switchParameters.Length > 0)
+                {
+                    switchParameters = switchParameters.Substring(1);
+                }
+
+                if (parameterizedSwitch == CommandLineSwitches.ParameterizedSwitch.Project && IsEnvironmentVariable(switchParameters))
+                {
+                    commandLineSwitches.SetSwitchError("EnvironmentVariableAsSwitch", unquotedCommandLineArg, commandLine);
+                }
+
                 // check if switch is duplicated, and if that's allowed
                 if (!commandLineSwitches.IsParameterizedSwitchSet(parameterizedSwitch) ||
                     (duplicateSwitchErrorMessage == null))
                 {
-                    // skip the parameter indicator (if any)
-                    if (switchParameters.Length > 0)
-                    {
-                        switchParameters = switchParameters.Substring(1);
-                    }
-
                     // save the parameters after unquoting and splitting them if necessary
                     if (!commandLineSwitches.SetParameterizedSwitch(parameterizedSwitch, unquotedCommandLineArg, switchParameters, multipleParametersAllowed, unquoteParameters, allowEmptyParameters))
                     {
                         // if parsing revealed there were no real parameters, flag an error, unless the parameters are optional
                         if (missingParametersErrorMessage != null)
                         {
-                            commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg);
+                            commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg, commandLine);
                         }
                     }
                 }
                 else
                 {
-                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                 }
             }
             else
             {
-                commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg);
+                commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg, commandLine);
             }
         }
 
+        /// <summary>
+        /// Checks whether envVar is an environment variable. MSBuild uses
+        /// Environment.ExpandEnvironmentVariables(string), which only
+        /// considers %-delimited variables.
+        /// </summary>
+        /// <param name="envVar">A possible environment variable</param>
+        /// <returns>Whether envVar is an environment variable</returns>
+        private static bool IsEnvironmentVariable(string envVar)
+        {
+            return envVar.StartsWith("%") && envVar.EndsWith("%") && envVar.Length > 1;
+        }
+
         /// <summary>
         /// The name of the auto-response file.
         /// </summary>
@@ -2044,13 +1964,13 @@ bool allowEmptyParameters
         /// switches from the auto-response file with the switches passed in.
         /// Returns true if the response file was found.
         /// </summary>
-        private static bool GatherAutoResponseFileSwitches(string path, CommandLineSwitches switchesFromAutoResponseFile)
+        private static bool GatherAutoResponseFileSwitches(string path, CommandLineSwitches switchesFromAutoResponseFile, string commandLine)
         {
             string autoResponseFile = Path.Combine(path, autoResponseFileName);
-            return GatherAutoResponseFileSwitchesFromFullPath(autoResponseFile, switchesFromAutoResponseFile);
+            return GatherAutoResponseFileSwitchesFromFullPath(autoResponseFile, switchesFromAutoResponseFile, commandLine);
         }
 
-        private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoResponseFile, CommandLineSwitches switchesFromAutoResponseFile)
+        private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoResponseFile, CommandLineSwitches switchesFromAutoResponseFile, string commandLine)
         {
             bool found = false;
 
@@ -2058,13 +1978,13 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon
             if (FileSystems.Default.FileExists(autoResponseFile))
             {
                 found = true;
-                GatherResponseFileSwitch($"@{autoResponseFile}", switchesFromAutoResponseFile);
+                GatherResponseFileSwitch($"@{autoResponseFile}", switchesFromAutoResponseFile, commandLine);
 
                 // if the "/noautoresponse" switch was set in the auto-response file, flag an error
                 if (switchesFromAutoResponseFile[CommandLineSwitches.ParameterlessSwitch.NoAutoResponse])
                 {
                     switchesFromAutoResponseFile.SetSwitchError("CannotAutoDisableAutoResponseFile",
-                        switchesFromAutoResponseFile.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoAutoResponse));
+                        switchesFromAutoResponseFile.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoAutoResponse), commandLine);
                 }
 
                 if (switchesFromAutoResponseFile.HaveAnySwitchesBeenSet())
@@ -2106,6 +2026,7 @@ private static bool ProcessCommandLineSwitches
             ref TextWriter targetsWriter,
             ref bool detailedSummary,
             ref ISet<string> warningsAsErrors,
+            ref ISet<string> warningsNotAsErrors,
             ref ISet<string> warningsAsMessages,
             ref bool enableRestore,
             ref bool interactive,
@@ -2117,7 +2038,8 @@ private static bool ProcessCommandLineSwitches
             ref string[] inputResultsCaches,
             ref string outputResultsCache,
             ref bool lowPriority,
-            bool recursing
+            bool recursing,
+            string commandLine
         )
         {
             bool invokeBuild = false;
@@ -2128,8 +2050,8 @@ bool recursing
             // (1) switches from the msbuild.rsp file/s, including recursively included response files
             // (2) switches from the command line, including recursively included response file switches inserted at the point they are declared with their "@" symbol
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
-            commandLineSwitches.Append(switchesFromAutoResponseFile);    // lowest precedence
-            commandLineSwitches.Append(switchesNotFromAutoResponseFile);
+            commandLineSwitches.Append(switchesFromAutoResponseFile, commandLine);    // lowest precedence
+            commandLineSwitches.Append(switchesNotFromAutoResponseFile, commandLine);
 
 #if DEBUG
             if (commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.WaitForDebugger])
@@ -2152,8 +2074,29 @@ bool recursing
             // NOTE: we heed the nologo switch even if there are switch errors
             if (!recursing && !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] && !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess))
             {
-                DisplayCopyrightMessage();
+                DisplayVersionMessage();
+            }
+
+
+            // Idle priority would prevent the build from proceeding as the user does normal actions.
+            // This switch is processed early to capture both the command line case (main node should
+            // also be low priority) and the Visual Studio case in which the main node starts and stays
+            // at normal priority (not through XMake.cs) but worker nodes still need to honor this switch.
+            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.LowPriority))
+            {
+                lowPriority = ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority], defaultValue: true, resourceName: "InvalidLowPriorityValue");
             }
+            try
+            {
+                if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle)
+                {
+                    Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal;
+                }
+            }
+            // We avoid increasing priority because that causes failures on mac/linux, but there is no good way to
+            // verify that a particular priority is lower than "BelowNormal." If the error appears, ignore it and
+            // leave priority where it was.
+            catch (Win32Exception) { }
 
             // if help switch is set (regardless of switch errors), show the help message and ignore the other switches
             if (commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.Help])
@@ -2162,7 +2105,7 @@ bool recursing
             }
             else if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.NodeMode))
             {
-                StartLocalNode(commandLineSwitches);
+                StartLocalNode(commandLineSwitches, lowPriority);
             }
             else
             {
@@ -2187,13 +2130,13 @@ bool recursing
                         // gather any switches from the first Directory.Build.rsp found in the project directory or above
                         string directoryResponseFile = FileUtilities.GetPathOfFileAbove(directoryResponseFileName, projectDirectory);
 
-                        bool found = !string.IsNullOrWhiteSpace(directoryResponseFile) && GatherAutoResponseFileSwitchesFromFullPath(directoryResponseFile, switchesFromAutoResponseFile);
+                        bool found = !string.IsNullOrWhiteSpace(directoryResponseFile) && GatherAutoResponseFileSwitchesFromFullPath(directoryResponseFile, switchesFromAutoResponseFile, commandLine);
 
                         // Don't look for more response files if it's only in the same place we already looked (next to the exe)
                         if (!string.Equals(projectDirectory, s_exePath, StringComparison.OrdinalIgnoreCase))
                         {
                             // this combines any found, with higher precedence, with the switches from the original auto response file switches
-                            found |= GatherAutoResponseFileSwitches(projectDirectory, switchesFromAutoResponseFile);
+                            found |= GatherAutoResponseFileSwitches(projectDirectory, switchesFromAutoResponseFile, commandLine);
                         }
 
                         if (found)
@@ -2223,6 +2166,7 @@ bool recursing
                                                                ref targetsWriter,
                                                                ref detailedSummary,
                                                                ref warningsAsErrors,
+                                                               ref warningsNotAsErrors,
                                                                ref warningsAsMessages,
                                                                ref enableRestore,
                                                                ref interactive,
@@ -2234,7 +2178,8 @@ bool recursing
                                                                ref inputResultsCaches,
                                                                ref outputResultsCache,
                                                                ref lowPriority,
-                                                               recursing: true
+                                                               recursing: true,
+                                                               commandLine
                                                              );
                         }
                     }
@@ -2274,6 +2219,8 @@ bool recursing
 
                     warningsAsErrors = ProcessWarnAsErrorSwitch(commandLineSwitches);
 
+                    warningsNotAsErrors = ProcessWarnNotAsErrorSwitch(commandLineSwitches);
+
                     warningsAsMessages = ProcessWarnAsMessageSwitch(commandLineSwitches);
 
                     if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Restore))
@@ -2296,11 +2243,6 @@ bool recursing
                         graphBuild = ProcessGraphBuildSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GraphBuild]);
                     }
 
-                    if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.LowPriority))
-                    {
-                        lowPriority = ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority], defaultValue: true, resourceName: "InvalidLowPriorityValue");
-                    }
-
                     inputResultsCaches = ProcessInputResultsCaches(commandLineSwitches);
 
                     outputResultsCache = ProcessOutputResultsCache(commandLineSwitches);
@@ -2357,6 +2299,15 @@ out enableProfiler
                     schemaFile = ProcessValidateSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Validate]);
 #endif
                     invokeBuild = true;
+
+                    if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors) &&
+                        !WarningsAsErrorsSwitchIsEmpty(commandLineSwitches)!)
+                    {
+                        commandLineSwitches.SetSwitchError("NotWarnAsErrorWithoutWarnAsError",
+                        commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors),
+                        commandLine);
+                        commandLineSwitches.ThrowErrors();
+                    }
                 }
             }
 
@@ -2365,6 +2316,18 @@ out enableProfiler
             return invokeBuild;
         }
 
+        private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLineSwitches)
+        {
+            string val = commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors);
+            if (val is null)
+            {
+                return false;
+            }
+
+            int indexOfColon = val.IndexOf(":");
+            return indexOfColon < 0 || indexOfColon == val.Length - 1;
+        }
+
         internal static GraphBuildOptions ProcessGraphBuildSwitch(string[] parameters)
         {
             var options = new GraphBuildOptions();
@@ -2447,7 +2410,7 @@ internal static bool ProcessNodeReuseSwitch(string[] parameters)
             }
 
 #if !FEATURE_NODE_REUSE
-            if(enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
+            if (enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
                 CommandLineSwitchException.Throw("InvalidNodeReuseTrueValue", parameters[parameters.Length - 1]);
 #endif
 
@@ -2496,18 +2459,16 @@ internal static TextWriter ProcessTargetsSwitch(string[] parameters)
             return writer;
         }
 
-        internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)
+        private static ISet<string> ProcessWarningRelatedSwitch(CommandLineSwitches commandLineSwitches, CommandLineSwitches.ParameterizedSwitch warningSwitch)
         {
-            // TODO: Parse an environment variable as well?
-
-            if (!commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors))
+            if (!commandLineSwitches.IsParameterizedSwitchSet(warningSwitch))
             {
                 return null;
             }
 
-            string[] parameters = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors];
+            string[] parameters = commandLineSwitches[warningSwitch];
 
-            ISet<string> warningsAsErrors = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+            ISet<string> warningSwitches = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
 
             foreach (string code in parameters
                 .SelectMany(parameter => parameter?.Split(s_commaSemicolon, StringSplitOptions.RemoveEmptyEntries) ?? new string[] { null }))
@@ -2516,37 +2477,30 @@ internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches comman
                 {
                     // An empty /warnaserror is added as "null".  In this case, the list is cleared
                     // so that all warnings are treated errors
-                    warningsAsErrors.Clear();
+                    warningSwitches.Clear();
                 }
                 else if (!string.IsNullOrWhiteSpace(code))
                 {
-                    warningsAsErrors.Add(code.Trim());
+                    warningSwitches.Add(code.Trim());
                 }
             }
 
-            return warningsAsErrors;
+            return warningSwitches;
         }
 
-        internal static ISet<string> ProcessWarnAsMessageSwitch(CommandLineSwitches commandLineSwitches)
+        internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)
         {
-            if (!commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages))
-            {
-                return null;
-            }
-
-            string[] parameters = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages];
-
-            ISet<string> warningsAsMessages = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors);
+        }
 
-            foreach (string code in parameters
-                .SelectMany(parameter => parameter?.Split(s_commaSemicolon, StringSplitOptions.RemoveEmptyEntries))
-                .Where(i => !string.IsNullOrWhiteSpace(i))
-                .Select(i => i.Trim()))
-            {
-                warningsAsMessages.Add(code);
-            }
+        internal static ISet<string> ProcessWarnAsMessageSwitch(CommandLineSwitches commandLineSwitches)
+        {
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages);
+        }
 
-            return warningsAsMessages;
+        internal static ISet<string> ProcessWarnNotAsErrorSwitch(CommandLineSwitches commandLineSwitches)
+        {
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors);
         }
 
         internal static bool ProcessBooleanSwitch(string[] parameters, bool defaultValue, string resourceName)
@@ -2628,7 +2582,7 @@ internal static ProfilerLogger ProcessProfileEvaluationSwitch(string[] parameter
         /// Uses the input from thinNodeMode switch to start a local node server
         /// </summary>
         /// <param name="commandLineSwitches"></param>
-        private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
+        private static void StartLocalNode(CommandLineSwitches commandLineSwitches, bool lowpriority)
         {
             string[] input = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeMode];
             int nodeModeNumber = 0;
@@ -2651,77 +2605,48 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                 CommandLineSwitchException.VerifyThrow(nodeModeNumber >= 0, "InvalidNodeNumberValueIsNegative", input[0]);
             }
 
-#if !STANDALONEBUILD
-            if (!commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.OldOM])
-#endif
+            bool restart = true;
+            while (restart)
             {
-                bool restart = true;
-                while (restart)
-                {
-                    Exception nodeException = null;
-                    NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;
-                    // normal OOP node case
-                    if (nodeModeNumber == 1)
-                    {
-                        OutOfProcNode node = new OutOfProcNode();
-
-                        // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False
-                        bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);
-                        string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
-                        bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals("true");
+                Exception nodeException = null;
+                NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;
 
-                        shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
+                // normal OOP node case
+                if (nodeModeNumber == 1)
+                {
+                    // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False
+                    bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);
+                    OutOfProcNode node = new OutOfProcNode();
+                    shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
 
-                        FileUtilities.ClearCacheDirectory();
-                    }
-                    else if (nodeModeNumber == 2)
-                    {
-                        OutOfProcTaskHostNode node = new OutOfProcTaskHostNode();
-                        shutdownReason = node.Run(out nodeException);
-                    }
-                    else
-                    {
-                        CommandLineSwitchException.Throw("InvalidNodeNumberValue", nodeModeNumber.ToString());
-                    }
+                    FileUtilities.ClearCacheDirectory();
+                }
+                else if (nodeModeNumber == 2)
+                {
+                    // TaskHost nodes don't need to worry about node reuse or low priority. Node reuse is always off, and TaskHosts
+                    // receive a connection immediately after being launched and shut down as soon as their work is over, so
+                    // whatever our priority is is correct.
+                    OutOfProcTaskHostNode node = new OutOfProcTaskHostNode();
+                    shutdownReason = node.Run(out nodeException);
+                }
+                else
+                {
+                    CommandLineSwitchException.Throw("InvalidNodeNumberValue", nodeModeNumber.ToString());
+                }
 
-                    if (shutdownReason == NodeEngineShutdownReason.Error)
-                    {
-                        Debug.WriteLine("An error has happened, throwing an exception");
-                        throw nodeException;
-                    }
+                if (shutdownReason == NodeEngineShutdownReason.Error)
+                {
+                    Debug.WriteLine("An error has happened, throwing an exception");
+                    throw nodeException;
+                }
 
-                    if (shutdownReason != NodeEngineShutdownReason.BuildCompleteReuse)
-                    {
-                        restart = false;
-                    }
+                if (shutdownReason != NodeEngineShutdownReason.BuildCompleteReuse)
+                {
+                    restart = false;
                 }
             }
-#if !STANDALONEBUILD
-            else
-            {
-                StartLocalNodeOldOM(nodeModeNumber);
-            }
-#endif
         }
 
-#if !STANDALONEBUILD
-        /// <summary>
-        /// Start an old-OM local node
-        /// </summary>
-        /// <remarks>
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </remarks>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static void StartLocalNodeOldOM(int nodeNumber)
-        {
-            Microsoft.Build.BuildEngine.LocalNode.StartLocalNodeServer(nodeNumber);
-        }
-#endif
-
         /// <summary>
         /// Process the /m: switch giving the CPU count
         /// </summary>
@@ -2974,7 +2899,7 @@ private static string[] ProcessTargetSwitch(string[] parameters)
         private static readonly char[] s_propertyValueSeparator = MSBuildConstants.EqualsChar;
 
         /// <summary>
-        /// This is a set of wildcard chars which can cause a file extension to be invalid 
+        /// This is a set of wildcard chars which can cause a file extension to be invalid
         /// </summary>
         private static readonly char[] s_wildcards = MSBuildConstants.WildcardChars;
 
@@ -2988,7 +2913,7 @@ private static string ProcessToolsVersionSwitch(string[] parameters)
         {
             if (parameters.Length > 0)
             {
-                // We don't do any validation on the value of the ToolsVersion here, since we don't 
+                // We don't do any validation on the value of the ToolsVersion here, since we don't
                 // know what a valid value looks like.  The engine will take care of this later.
                 return parameters[parameters.Length - 1];
             }
@@ -3080,7 +3005,7 @@ out bool enableProfiler
         /// Parameters for a particular logger may be passed in fragments that we have to aggregate: for example,
         ///   /flp:foo=bar;baz=biz /flp:boz=bez becomes "foo=bar;baz=biz;boz=bez"
         /// We are going to aggregate the LoggerParameters into one LoggerParameters string
-        /// to do this we must first trim off the ; from the start and the end of the strings as 
+        /// to do this we must first trim off the ; from the start and the end of the strings as
         /// this would interfere with the use of string.Join by possibly having ;; at the beginning or end of a
         /// logger parameter
         /// </summary>
@@ -3112,7 +3037,7 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
 
                 string fileParameters = "SHOWPROJECTFILE=TRUE;";
                 // Use a default log file name of "msbuild.log", "msbuild1.log", "msbuild2.log", etc; put this first on the parameter
-                // list so that any supplied log file parameter will override it 
+                // list so that any supplied log file parameter will override it
                 if (i == 0)
                 {
                     fileParameters += "logfile=msbuild.log;";
@@ -3190,7 +3115,7 @@ List<ILogger> loggers
             // the console logger is always active, unless specifically disabled
             if (!noConsoleLogger)
             {
-                // A central logger will be created for single proc and multiproc 
+                // A central logger will be created for single proc and multiproc
                 ConsoleLogger logger = new ConsoleLogger(verbosity);
                 string consoleParameters = "SHOWPROJECTFILE=TRUE;";
 
@@ -3222,7 +3147,7 @@ List<ILogger> loggers
         }
 
         /// <summary>
-        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger. 
+        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger.
         /// Looks at the logger's parameters for any verbosity parameter in order to make sure it is setting up the ConfigurableForwardingLogger
         /// with the verbosity level that the logger will actually use.
         /// </summary>
@@ -3238,7 +3163,12 @@ private static DistributedLoggerRecord CreateForwardingLoggerRecord(ILogger logg
                 effectiveVerbosity = ProcessVerbositySwitch(verbosityValue);
             }
 
-            //Gets the currently loaded assembly in which the specified class is defined
+            // Ensure that the forwarding logger is passed evaluation-finished
+            // and project-started events unless the user has specified individual
+            // events of interest.
+            loggerParameters += ";FORWARDPROJECTCONTEXTEVENTS";
+
+            // Gets the currently loaded assembly in which the specified class is defined
             Assembly engineAssembly = typeof(ProjectCollection).GetTypeInfo().Assembly;
             string loggerClassName = "Microsoft.Build.Logging.ConfigurableForwardingLogger";
             string loggerAssemblyName = engineAssembly.GetName().FullName;
@@ -3301,7 +3231,7 @@ int cpuCount
                     fileParameters += $"logFile={Path.Combine(Directory.GetCurrentDirectory(), msbuildLogFileName)}";
                 }
 
-                //Gets the currently loaded assembly in which the specified class is defined
+                // Gets the currently loaded assembly in which the specified class is defined
                 Assembly engineAssembly = typeof(ProjectCollection).GetTypeInfo().Assembly;
                 string loggerClassName = "Microsoft.Build.Logging.DistributedFileLogger";
                 string loggerAssemblyName = engineAssembly.GetName().FullName;
@@ -3362,7 +3292,7 @@ private static string ExtractAnyParameterValue(string parameter)
         /// </summary>
         /// <remarks>
         /// Internal for unit testing only
-        /// </remarks> 
+        /// </remarks>
         /// <param name="value"></param>
         /// <returns>The logger verbosity level.</returns>
         internal static LoggerVerbosity ProcessVerbositySwitch(string value)
@@ -3705,7 +3635,7 @@ private static string ProcessValidateSwitch(string[] parameters)
         }
 
         /// <summary>
-        /// Given an invalid ToolsVersion string and the collection of valid toolsets, 
+        /// Given an invalid ToolsVersion string and the collection of valid toolsets,
         /// throws an InitializationException with the appropriate message.
         /// </summary>
         private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<Toolset> toolsets, string toolsVersion)
@@ -3734,9 +3664,9 @@ private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<
         }
 
         /// <summary>
-        /// Displays the application copyright message/logo.
+        /// Displays the application version message/logo.
         /// </summary>
-        private static void DisplayCopyrightMessage()
+        private static void DisplayVersionMessage()
         {
 #if RUNTIME_TYPE_NETCORE
             const string frameworkName = ".NET";
@@ -3746,7 +3676,7 @@ private static void DisplayCopyrightMessage()
             const string frameworkName = ".NET Framework";
 #endif
 
-            Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CopyrightMessage", ProjectCollection.DisplayVersion, frameworkName));
+            Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("MSBuildVersionMessage", ProjectCollection.DisplayVersion, frameworkName));
         }
 
         /// <summary>
@@ -3774,6 +3704,7 @@ private static void ShowHelpMessage()
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_11_LoggerSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_30_BinaryLoggerSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_28_WarnAsErrorSwitch"));
+            Console.WriteLine(AssemblyResources.GetString("HelpMessage_40_WarnNotAsErrorSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_29_WarnAsMessageSwitch"));
 #if FEATURE_XML_SCHEMA_VALIDATION
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_15_ValidateSwitch"));
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index c44189ed7f9..941490997b3 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -26,10 +26,6 @@
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
           <codeBase version="15.1.0.0" href="..\Microsoft.Build.dll"/>
         </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.Conversion.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
-        </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Build.Tasks.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
@@ -51,60 +47,79 @@
           <codeBase version="15.1.0.0" href="..\Microsoft.Build.Conversion.Core.dll"/>
         </dependentAssembly>
 
+        <dependentAssembly>
+          <assemblyIdentity name="Microsoft.IO.Redist" culture="neutral" publicKeyToken="cc7b13ffcd2ddd51" />
+          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\Microsoft.IO.Redist.dll"/>
+        </dependentAssembly>
+
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <codeBase version="1.0.0.0" href="..\Microsoft.NET.StringTools.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools.net35" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <codeBase version="1.0.0.0" href="..\Microsoft.NET.StringTools.net35.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
+          <codeBase version="4.0.3.0" href="..\System.Buffers.dll"/>
         </dependentAssembly>
 
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Collections.Immutable.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.1.1" newVersion="4.0.1.1" />
+          <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
+          <codeBase version="4.0.1.2" href="..\System.Memory.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.1.4.0" newVersion="4.1.4.0" />
+          <codeBase version="4.1.4.0" href="..\System.Numerics.Vectors.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Resources.Extensions.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Runtime.CompilerServices.Unsafe.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Text.Encodings.Web.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Text.Json.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Threading.Tasks.Dataflow.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
+          <codeBase version="4.2.0.1" href="..\System.Threading.Tasks.Extensions.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
@@ -112,6 +127,7 @@
                to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file
                and makes that resolution faster. -->
           <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.0.0" />
+          <codeBase version="4.0.3.0" href="..\System.ValueTuple.dll"/>
         </dependentAssembly>
 
         <!-- Redirects for components dropped by Visual Studio -->
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 96ee3eb038b..ad07688b88f 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -21,10 +21,6 @@
           <assemblyIdentity name="Microsoft.Build" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
         </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.Conversion.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
-        </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Build.Tasks.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
@@ -45,7 +41,7 @@
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -62,11 +58,11 @@
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.1.1" newVersion="4.0.1.1" />
+          <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -74,7 +70,7 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
diff --git a/src/MSBuild/msbuild.suitebin.config b/src/MSBuild/msbuild.suitebin.config
deleted file mode 100644
index 848032d0dce..00000000000
--- a/src/MSBuild/msbuild.suitebin.config
+++ /dev/null
@@ -1,31 +0,0 @@
-﻿<?xml version ="1.0"?>
-<configuration>
-    <configSections>
-        <section name="msbuildToolsets" type="Microsoft.Build.BuildEngine.ToolsetConfigurationSection, Microsoft.Build.Engine, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /> 
-    </configSections>
-    <startup useLegacyV2RuntimeActivationPolicy="true">
-        <supportedRuntime version="v4.0"/>
-    </startup>
-    <runtime>
-        <generatePublisherEvidence enabled="false" />
-        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.Build.Framework" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="4.0.0.0"/>
-            </dependentAssembly>
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.Build.Engine" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="4.0.0.0"/>
-            </dependentAssembly>
-            <dependentAssembly>
-                <assemblyIdentity name="Microsoft.CompactFramework.Build.Tasks" publicKeyToken="b03f5f7f11d50a3a" culture="neutral"/>
-                <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="9.0.0.0"/>
-            </dependentAssembly>
-        </assemblyBinding>
-    </runtime>
-    <msbuildToolsets>
-       <toolset toolsVersion="suitebin_toolset">
-          <property name="MSBuildBinPath" value="."/>
-       </toolset>
-    </msbuildToolsets>
-</configuration>
diff --git a/src/MSBuild/msbuild_rascal.manifest b/src/MSBuild/msbuild_rascal.manifest
deleted file mode 100644
index 64db722f8f4..00000000000
--- a/src/MSBuild/msbuild_rascal.manifest
+++ /dev/null
@@ -1,9 +0,0 @@
-﻿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
-<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
-    <dependency>
-        <dependentAssembly>
-            <assemblyIdentity type="win32" name="mscoree.tlb" processorArchitecture="X86" version="1.0.0.0">
-            </assemblyIdentity>
-        </dependentAssembly>
-    </dependency>
-</assembly>
diff --git a/src/MSBuild/xclpupdate.bat b/src/MSBuild/xclpupdate.bat
deleted file mode 100644
index 512cb096bc6..00000000000
--- a/src/MSBuild/xclpupdate.bat
+++ /dev/null
@@ -1,36 +0,0 @@
-﻿@if "%_echo%"=="" echo off
-
-::@echo ... Starting msbuild.exe (only) pupdate ...
-echo Starting msbuild.exe (only) update...
-setlocal
-
-if exist xpupdate.log del xpupdate.log
-
-
-for /f %%i in ('dir /b /ad /on %windir%\microsoft.net\framework\v4.*') do set fxpath=%windir%\microsoft.net\framework\%%i
-
-call :Doit copy %_NTTREE%\bin\i386\msbuild.??? %fxpath% /y
-call :Doit copy %_NTTREE%\bin\i386\msbuild.urt.config %fxpath%\msbuild.exe.config /y
-
-@echo Now kicking off async refresh of native images ...
-
-setlocal
-set complus_installroot=
-set complus_version=
-
- start "update native image for msbuildexe" /low /min %fxpath%\ngen install "%_NTTREE%\bin\i386\msbuild.exe"
-
-endlocal
-
-
-goto :eof
-
-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
-:doit
-echo %* >> xpupdate.log
-%* >> xpupdate.log 2>&1 2>con
-if errorlevel 1 echo Error running command "%*" >> xpupdate.log > con
-goto :eof
-
-
diff --git a/src/MSBuildTaskHost/AssemblyResources.cs b/src/MSBuildTaskHost/AssemblyResources.cs
index a35961b2946..a43269ecd9c 100644
--- a/src/MSBuildTaskHost/AssemblyResources.cs
+++ b/src/MSBuildTaskHost/AssemblyResources.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs b/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
index 76a126450a7..a27b5f6dbba 100644
--- a/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
+++ b/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
@@ -3,6 +3,8 @@
 using System.Diagnostics;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Concurrent
 {
     // The following class is back-ported from .NET 4.X CoreFX library because
@@ -267,14 +269,14 @@ private static void ThrowKeyNullException()
         /// if the key does not already exist.
         /// </summary>
         /// <param name="key">The key of the element to add.</param>
-        /// <param name="valueFactory">The function used to generate a value for the key</param>
-        /// <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
+        /// <param name="valueFactory">The function used to generate a value for the key.</param>
+        /// <exception cref="ArgumentNullException"><paramref name="key"/> is a null reference
         /// (Nothing in Visual Basic).</exception>
-        /// <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
+        /// <exception cref="ArgumentNullException"><paramref name="valueFactory"/> is a null reference
         /// (Nothing in Visual Basic).</exception>
-        /// <exception cref="T:System.OverflowException">The dictionary contains too many
+        /// <exception cref="OverflowException">The dictionary contains too many
         /// elements.</exception>
-        /// <returns>The value for the key.  This will be either the existing value for the key if the
+        /// <returns>The value for the key. This will be either the existing value for the key if the
         /// key is already in the dictionary, or the new value for the key as returned by valueFactory
         /// if the key was not in the dictionary.</returns>
         public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
diff --git a/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs b/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
index 6bda6d306e2..ef6cca48ce1 100644
--- a/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
+++ b/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
@@ -3,6 +3,8 @@
 using System.Runtime.InteropServices;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Concurrent
 {
     // The following class is back-ported from .NET 4.X CoreFX library because
@@ -547,12 +549,16 @@ internal struct Slot
             }
         }
     }
+
     /// <summary>Padded head and tail indices, to avoid false sharing between producers and consumers.</summary>
     [DebuggerDisplay("Head = {Head}, Tail = {Tail}")]
     [StructLayout(LayoutKind.Explicit, Size = 192)] // padding before/between/after fields based on typical cache line size of 64
     internal struct PaddedHeadAndTail
     {
-        [FieldOffset(64)] public int Head;
-        [FieldOffset(128)] public int Tail;
+        [FieldOffset(64)]
+        public int Head;
+
+        [FieldOffset(128)]
+        public int Tail;
     }
 }
diff --git a/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
index 14949660eac..18a19d1c85f 100644
--- a/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
+++ b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
index 6ed1e6755d5..f3eb19e6dc1 100644
--- a/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
+++ b/src/MSBuildTaskHost/Immutable/ImmutableDictionary.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using System.Linq;
 
+#nullable disable
+
 namespace System.Collections.Immutable
 {
     static class ImmutableExtensions
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index cc9f10fdb27..ec7f04055ae 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -39,6 +39,10 @@
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
     </Compile>
+    <!-- EnvironmentVariableReadEventArgs shouldn't be used in TaskHosts, but it means we need fewer ifdefs. -->
+    <Compile Include="..\Framework\EnvironmentVariableReadEventArgs.cs">
+      <Link>EnvironmentVariableReadEventArgs.cs</Link>
+    </Compile>
     <Compile Include="..\Framework\BuildEnvironmentState.cs">
       <Link>BuildEnvironmentState.cs</Link>
     </Compile>
@@ -142,6 +146,9 @@
     <Compile Include="..\Framework\StringBuilderCache.cs">
       <Link>StringBuilderCache.cs</Link>
     </Compile>
+    <Compile Include="..\Framework\SupportedOSPlatform.cs">
+      <Link>SupportedOSPlatform.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\TaskEngineAssemblyResolver.cs">
       <Link>TaskEngineAssemblyResolver.cs</Link>
     </Compile>
@@ -210,11 +217,6 @@
   <ItemGroup>
     <!-- Disabled PdbGit because of warnings; it could/should be brought back.
     <PackageReference Include="PdbGit" /> -->
-    <PackageReference Include="SourceLink.Create.CommandLine" />
     <PackageReference Include="LargeAddressAware" PrivateAssets="All" />
   </ItemGroup>
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
 </Project>
diff --git a/src/MSBuildTaskHost/OutOfProcTaskAppDomainWrapper.cs b/src/MSBuildTaskHost/OutOfProcTaskAppDomainWrapper.cs
index 9ad2624a492..9cc9e2b7796 100644
--- a/src/MSBuildTaskHost/OutOfProcTaskAppDomainWrapper.cs
+++ b/src/MSBuildTaskHost/OutOfProcTaskAppDomainWrapper.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
diff --git a/src/MSBuildTaskHost/OutOfProcTaskHost.cs b/src/MSBuildTaskHost/OutOfProcTaskHost.cs
index 48f3dce2cde..4f4b2ab02da 100644
--- a/src/MSBuildTaskHost/OutOfProcTaskHost.cs
+++ b/src/MSBuildTaskHost/OutOfProcTaskHost.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.CommandLine
 {
     /// <summary>
@@ -66,7 +68,7 @@ internal enum ExitType
         [MTAThread]
         public static int Main()
         {
-            int exitCode = (Execute() == ExitType.Success ? 0 : 1);
+            int exitCode = Execute() == ExitType.Success ? 0 : 1;
             return exitCode;
         }
 
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 59579d98cac..5b4833472c4 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -7,6 +7,8 @@
 using System.Collections.Generic;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Package/GetBinPaths.Arm64.targets b/src/Package/GetBinPaths.Arm64.targets
new file mode 100644
index 00000000000..c5ad5e64b8f
--- /dev/null
+++ b/src/Package/GetBinPaths.Arm64.targets
@@ -0,0 +1,36 @@
+﻿<Project>
+
+  <ItemGroup>
+    <!-- Set up items to build projects where the Platform is set to x64, when we need the x64 versions of the files.
+         We have to treat these separately from normal project references, as the AssignProjectConfiguration task would overwrite
+         the SetPlatform item metadata if they were ProjectReferences.
+    -->
+    <Arm64ProjectReference Include="$(MSBuildThisFileDirectory)\..\MSBuild\MSBuild.csproj"
+                         SetPlatform="Platform=arm64"
+                         SetTargetFramework="TargetFramework=$(FullFrameworkTFM)"
+                         OutputItemType="MSBuildArm64ResolvedProjectReferencePath" />
+
+    <ProjectReference Include="$(MSBuildThisFileDirectory)\..\Framework\Microsoft.Build.Framework.csproj"
+                      Private="false"
+                      ReferenceOutputAssembly="false"
+                      OutputItemType="FrameworkResolvedProjectReferencePath" />
+  </ItemGroup>
+
+  <Target Name="SetBinPathsArm64" DependsOnTargets="ResolveProjectReferences">
+    <MSBuild
+        Projects="@(Arm64ProjectReference)"
+        BuildInParallel="$(BuildInParallel)"
+        Properties="Configuration=$(Configuration); %(Arm64ProjectReference.SetPlatform); %(Arm64ProjectReference.SetTargetFramework)"
+        RemoveProperties="%(Arm64ProjectReference.GlobalPropertiesToRemove)">
+
+      <Output TaskParameter="TargetOutputs" ItemName="%(Arm64ProjectReference.OutputItemType)" />
+    </MSBuild>
+    
+    <PropertyGroup>
+      <FrameworkBinPath>@(FrameworkResolvedProjectReferencePath->'%(RootDir)%(Directory)')</FrameworkBinPath>
+      <Arm64BinPath>@(MSBuildArm64ResolvedProjectReferencePath->'%(RootDir)%(Directory)')</Arm64BinPath>
+    </PropertyGroup>
+  </Target>
+
+
+</Project>
diff --git a/src/Package/GetBinPaths.targets b/src/Package/GetBinPaths.targets
index f3b734eceb9..dc99cabb70d 100644
--- a/src/Package/GetBinPaths.targets
+++ b/src/Package/GetBinPaths.targets
@@ -36,7 +36,6 @@
                          SetPlatform="Platform=x64"
                          OutputItemType="MSBuildTaskHostX64ResolvedProjectReferencePath"
                          GlobalPropertiesToRemove="TargetFramework" />
-
   </ItemGroup>
 
   <Target Name="SetBinPaths" DependsOnTargets="ResolveProjectReferences">
diff --git a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj b/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj
deleted file mode 100644
index 5e0ca03263a..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.csproj
+++ /dev/null
@@ -1,34 +0,0 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
-  <!-- Don't try to build this package if building for Mono, using .NET Core, or building on non-Windows -->
-  <PropertyGroup>
-    <DisableProject Condition="'$(MonoBuild)' == 'true'">true</DisableProject>
-    <DisableProject Condition="'$(MSBuildRuntimeType)' == 'Core'">true</DisableProject>
-    <DisableProject Condition="! $([MSBuild]::IsOSPlatform('windows'))">true</DisableProject>
-  </PropertyGroup>
-  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="'$(DisableProject)' == 'true'" />
-
-  <PropertyGroup>
-    <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
-    <NuspecFile>MSBuild.Engine.Corext.nuspec</NuspecFile>
-    <PlatformTarget>x86</PlatformTarget>
-
-    <IsShipping>false</IsShipping>
-    <NoPackageAnalysis>true</NoPackageAnalysis>
-    <NuspecProperties>$(NuspecProperties);repoRoot=$(RepoRoot.TrimEnd('\\/'))</NuspecProperties>
-    <DisableSemVer2>true</DisableSemVer2>
-    <IsVisualStudioInsertionPackage>true</IsVisualStudioInsertionPackage>
-  </PropertyGroup>
-
-  <Import Project="..\NuspecProject.targets"  Condition="'$(DisableProject)' != 'true'" />
-  <Import Project="..\GetBinPaths.targets" Condition="'$(DisableProject)' != 'true'" />
-
-  <Target Name="SetNuspecBinPathProperties" DependsOnTargets="SetBinPaths" BeforeTargets="SetNuspecProperties">
-    <PropertyGroup>
-      <NuspecProperties>$(NuspecProperties);X86BinPath=$(X86BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);X64BinPath=$(X64BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);TaskHostBinPath=$(MSBuildTaskHostBinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);TaskHostX64BinPath=$(MSBuildTaskHostX64BinPath.TrimEnd('\\/'))</NuspecProperties>
-      <NuspecProperties>$(NuspecProperties);MSBuildConversionBinPath=$(MSBuildConversionBinPath.TrimEnd('\\/'))</NuspecProperties>
-    </PropertyGroup>
-  </Target>
-</Project>
diff --git a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec b/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec
deleted file mode 100644
index c457e5ab711..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MSBuild.Engine.Corext.cxspec
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0"?>
-<package>
-  <aggregate id="MsBuild.Corext" version="15.0"/>
-</package>
\ No newline at end of file
diff --git a/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec b/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec
deleted file mode 100644
index 04a42dbfce4..00000000000
--- a/src/Package/MSBuild.Engine.Corext/MsBuild.Engine.Corext.nuspec
+++ /dev/null
@@ -1,137 +0,0 @@
-﻿<?xml version="1.0"?>
-<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
-  <metadata>
-    <id>MsBuild.Engine.Corext</id>
-    <summary>Aggregate of MsBuild.Corext with the latest MSBuild team deliverables</summary>
-    <description>Use this package to update your existing MsBuild.Corext package to the latest MSBuild binaries and core build files.</description>
-    <projectUrl>$projectUrl$</projectUrl>
-    <license type="expression">$licenseExpression$</license>
-    <requireLicenseAcceptance>false</requireLicenseAcceptance>
-    <authors>Microsoft</authors>
-    <copyright>© Microsoft Corporation. All rights reserved.</copyright>
-    <version>$version$</version>
-  </metadata>
-
-  <files>
-    <file src="$repoRoot$\src\Package\MsBuild.Engine.Corext\MsBuild.Engine.Corext.cxspec" target=""/>
-    <file src="$repoRoot$/src/Package/MsBuild.Engine.Corext/README.md" target=""/>
-    <file src="$repoRoot$/THIRDPARTYNOTICES.txt" target="v15.0/bin/THIRDPARTYNOTICES.txt" />
-    <file src="$X86BinPath$/Microsoft.Common.props" target="\Extensions\15.0" />
-    <file src="$X86BinPath$/Microsoft.Common.props" target="\Extensions\Current" />
-    <file src="$X86BinPath$/Microsoft.VisualStudioVersion.v15.Common.props" target="\Extensions\15.0" />
-
-    <!-- x86 -->
-
-    <file src="$X86BinPath$/MSBuild.exe" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/MSBuildTaskHost.exe" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/MSBuildTaskHost.exe.config" target="v15.0/bin" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Conversion.Core.dll" target="v15.0/bin" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Engine.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Framework.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Tasks.Core.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Build.Utilities.Core.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.IO.Redist.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Collections.Immutable.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Memory.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Text.Json.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Bcl.AsyncInterfaces.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Buffers.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Text.Encodings.Web.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Extensions.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.ValueTuple.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Numerics.Vectors.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Resources.Extensions.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Runtime.CompilerServices.Unsafe.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Dataflow.dll" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NET.StringTools.dll" target="v15.0/bin" />
-    <file src="$TaskHostBinPath$/Microsoft.NET.StringTools.net35.dll" target="v15.0/bin" />
-
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.Core.xsd" target="v15.0/bin/MSBuild" />
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.CommonTypes.xsd" target="v15.0/bin/MSBuild" />
-    <file src="$X86BinPath$/MSBuild.rsp" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.Before.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Managed.After.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.overridetasks" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Common.tasks" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Data.Entity.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.ServiceModel.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CrossTargeting.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.WinFx.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.WorkflowBuildExtensions.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Xaml.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Workflow.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Workflow.VisualBasic.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.Net.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.targets" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.props" target="v15.0/bin" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.targets" target="v15.0/bin" />
-
-    <!-- x64 -->
-
-    <file src="$X64BinPath$/MSBuild.exe" target="v15.0/bin/amd64" />
-    <file src="$TaskHostX64BinPath$/MSBuildTaskHost.exe" target="v15.0/bin/amd64" />
-    <file src="$TaskHostX64BinPath$/MSBuildTaskHost.exe.config" target="v15.0/bin/amd64" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Conversion.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$MSBuildConversionBinPath$/Microsoft.Build.Engine.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Framework.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Tasks.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Build.Utilities.Core.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.IO.Redist.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Collections.Immutable.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Memory.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Text.Json.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Bcl.AsyncInterfaces.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Buffers.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Text.Encodings.Web.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Extensions.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.ValueTuple.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Numerics.Vectors.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Resources.Extensions.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Runtime.CompilerServices.Unsafe.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/System.Threading.Tasks.Dataflow.dll" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NET.StringTools.dll" target="v15.0/bin/amd64" />
-    <file src="$TaskHostBinPath$/Microsoft.NET.StringTools.net35.dll" target="v15.0/bin/amd64" />
-
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.Core.xsd" target="v15.0/bin/amd64/MSBuild" />
-    <file src="$X86BinPath$/MSBuild/Microsoft.Build.CommonTypes.xsd" target="v15.0/bin/amd64/MSBuild" />
-    <file src="$X86BinPath$/MSBuild.rsp" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.Before.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Managed.After.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.overridetasks" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Common.tasks" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.CSharp.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Data.Entity.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.ServiceModel.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CrossTargeting.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.VisualBasic.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.WinFx.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.WorkflowBuildExtensions.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Xaml.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Workflow.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Workflow.VisualBasic.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.Net.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.CurrentVersion.targets" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.props" target="v15.0/bin/amd64" />
-    <file src="$X86BinPath$/Microsoft.NetFramework.targets" target="v15.0/bin/amd64" />
-  </files>
-</package>
diff --git a/src/Package/MSBuild.Engine.Corext/README.md b/src/Package/MSBuild.Engine.Corext/README.md
deleted file mode 100644
index c3d066fc458..00000000000
--- a/src/Package/MSBuild.Engine.Corext/README.md
+++ /dev/null
@@ -1,10 +0,0 @@
-# MSBuild.Engine.Corext
-
-This package is useful only inside Microsoft. It includes the files that MSBuild ships into Visual Studio via its `.vsix` in a different format that is used internally.
-Paths are adjusted to match the preexisting CoreXT package MsBuild.Corext.
-
-Files in the MSBuild VSIX which are not in this package:
-
-- msbuild satellite assemblies (no translation needed for internal developer scenarios)
-- MSBuild.exe.config (MsBuild.Corext has manual edits to this file)
-- *pkgdef (VS specific)
diff --git a/src/Package/MSBuild.Engine.Corext/TestBuild.cmd b/src/Package/MSBuild.Engine.Corext/TestBuild.cmd
deleted file mode 100644
index 3b5562f0424..00000000000
--- a/src/Package/MSBuild.Engine.Corext/TestBuild.cmd
+++ /dev/null
@@ -1,17 +0,0 @@
-
-set repoRoot=%~dp0..\..\
-
-pushd %repoRoot%
-set repoRoot=%CD%
-popd
-
-set X86BinPath=%repoRoot%\bin\Release\x86\Windows_NT\Output
-set X64BinPath=%repoRoot%\bin\Release\x64\Windows_NT\Output
-
-set version=0.0.0.0
-
-if not "%1" == "" (
-    set version=%1
-)
-
-nuget pack -noPackageAnalysis -Properties "version=%version%;repoRoot=%repoRoot%;X86BinPath=%X86BinPath%;X64BinPath=%X64BinPath%"
diff --git a/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj b/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj
new file mode 100644
index 00000000000..297958b416d
--- /dev/null
+++ b/src/Package/MSBuild.VSSetup.Arm64/MSBuild.VSSetup.Arm64.csproj
@@ -0,0 +1,36 @@
+﻿<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
+    <!-- VS Insertion -->
+    <TargetVsixContainerName>Microsoft.Build.Arm64.vsix</TargetVsixContainerName>
+    <VisualStudioInsertionComponent>Microsoft.Build.Arm64</VisualStudioInsertionComponent>
+    <ShouldSkipProject>false</ShouldSkipProject>
+    <ShouldSkipProject Condition="'$(MonoBuild)' == 'true' or '$(MSBuildRuntimeType)' != 'Full'">true</ShouldSkipProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\..\Build\Microsoft.Build.csproj" PrivateAssets="All" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <SwrProperty Include="ThirdPartyNotice=$(ThirdPartyNotice)" />
+    <SwrProperty Include="SourceDir=$(RepoRoot)\src\" />
+
+    <!-- Only add the swr file when building on full framework msbuild, otherwise,
+    this triggers a build of the swixproj, which is not supported in core msbuild. -->
+    <SwrFile Include="files.arm64.swr" Condition=" '$(MSBuildRuntimeType)' == 'Full' " />
+  </ItemGroup>
+
+  <Import Project="..\GetBinPaths.Arm64.targets" Condition="!$(ShouldSkipProject)" />
+
+  <Target Name="SetVsixProperties" BeforeTargets="Build" DependsOnTargets="SetBinPathsArm64" Condition="!$(ShouldSkipProject)">
+    <ItemGroup>
+      <SwrProperty Include="Version=$(VsixVersion)" />
+      <SwrProperty Include="FrameworkBinPath=$(FrameworkBinPath)" />
+      <SwrProperty Include="Arm64BinPath=$(Arm64BinPath)" />
+    </ItemGroup>
+  </Target>
+
+  <Import Project="$(RepoRoot)eng\ProducesNoOutput.Settings.props" Condition="$(ShouldSkipProject)" />
+</Project>
diff --git a/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr b/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr
new file mode 100644
index 00000000000..37d86a19b97
--- /dev/null
+++ b/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr
@@ -0,0 +1,74 @@
+use vs
+
+package name=Microsoft.Build.Arm64
+        version=$(Version)
+        vs.package.machineArch=arm64
+        vs.package.language=neutral
+
+vs.relatedProcessFiles
+  vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\arm64\Microsoft.Build.Tasks.Core.dll"
+
+folder InstallDir:\MSBuild\Current\Bin\arm64
+  file source=$(Arm64BinPath)MSBuild.exe vs.file.ngenArchitecture=all
+  file source=$(Arm64BinPath)MSBuild.exe.config
+
+  file source=$(FrameworkBinPath)x64\Microsoft.Build.Framework.tlb
+  file source=$(Arm64BinPath)Microsoft.Build.Tasks.Core.dll vs.file.ngenArchitecture=all
+  file source=$(Arm64BinPath)Microsoft.Common.CurrentVersion.targets
+  file source=$(Arm64BinPath)Microsoft.Common.CrossTargeting.targets
+  file source=$(Arm64BinPath)Microsoft.Common.overridetasks
+  file source=$(Arm64BinPath)Microsoft.Common.targets
+  file source=$(Arm64BinPath)Microsoft.Common.tasks
+  file source=$(Arm64BinPath)Microsoft.Managed.targets
+  file source=$(Arm64BinPath)Microsoft.Managed.Before.targets
+  file source=$(Arm64BinPath)Microsoft.Managed.After.targets
+  file source=$(Arm64BinPath)Microsoft.CSharp.CurrentVersion.targets
+  file source=$(Arm64BinPath)Microsoft.CSharp.CrossTargeting.targets
+  file source=$(Arm64BinPath)Microsoft.CSharp.targets
+  file source=$(Arm64BinPath)Microsoft.Net.props
+  file source=$(Arm64BinPath)Microsoft.NetFramework.CurrentVersion.props
+  file source=$(Arm64BinPath)Microsoft.NetFramework.CurrentVersion.targets
+  file source=$(Arm64BinPath)Microsoft.NetFramework.props
+  file source=$(Arm64BinPath)Microsoft.NetFramework.targets
+  file source=$(Arm64BinPath)Microsoft.VisualBasic.CurrentVersion.targets
+  file source=$(Arm64BinPath)Microsoft.VisualBasic.CrossTargeting.targets
+  file source=$(Arm64BinPath)Microsoft.VisualBasic.targets
+  file source=$(Arm64BinPath)MSBuild.rsp
+  file source=$(Arm64BinPath)Workflow.targets
+  file source=$(Arm64BinPath)Workflow.VisualBasic.targets
+  file source=$(Arm64BinPath)Microsoft.Xaml.targets
+  file source=$(Arm64BinPath)Microsoft.Data.Entity.targets
+  file source=$(Arm64BinPath)Microsoft.ServiceModel.targets
+  file source=$(Arm64BinPath)Microsoft.WinFx.targets
+  file source=$(Arm64BinPath)Microsoft.WorkflowBuildExtensions.targets
+
+folder InstallDir:\MSBuild\Current\Bin\arm64\MSBuild
+  file source=$(Arm64BinPath)\MSBuild\Microsoft.Build.Core.xsd
+  file source=$(Arm64BinPath)\MSBuild\Microsoft.Build.CommonTypes.xsd
+
+folder InstallDir:\MSBuild\Current\Bin\arm64\cs
+  file source=$(Arm64BinPath)cs\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\de
+  file source=$(Arm64BinPath)de\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\es
+  file source=$(Arm64BinPath)es\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\fr
+  file source=$(Arm64BinPath)fr\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\it
+  file source=$(Arm64BinPath)it\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ja
+  file source=$(Arm64BinPath)ja\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ko
+  file source=$(Arm64BinPath)ko\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\pl
+  file source=$(Arm64BinPath)pl\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\pt-BR
+  file source=$(Arm64BinPath)pt-BR\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ru
+  file source=$(Arm64BinPath)ru\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\tr
+  file source=$(Arm64BinPath)tr\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\zh-Hans
+  file source=$(Arm64BinPath)zh-Hans\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\zh-Hant
+  file source=$(Arm64BinPath)zh-Hant\MSBuild.resources.dll vs.file.ngenArchitecture=all
\ No newline at end of file
diff --git a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
index ed375f4b0e7..f3b3f9d2431 100644
--- a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
+++ b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
@@ -1,4 +1,4 @@
-﻿<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
+<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFramework>$(FullFrameworkTFM)</TargetFramework>
@@ -20,7 +20,7 @@
 
     <!-- Only add the swr file when building on full framework msbuild, otherwise,
     this triggers a build of the swixproj, which is not supported in core msbuild. -->
-    <SwrFile Include="*.swr" Condition=" '$(MSBuildRuntimeType)' == 'Full' " />
+    <SwrFile Include="files.swr" Condition=" '$(MSBuildRuntimeType)' == 'Full' " />
   </ItemGroup>
 
   <!-- GetBinPaths depends on GetBuildVersion which does not get imported if ProducesNoOutput.Settings.props is imported-->
diff --git a/src/Package/MSBuild.VSSetup/files.swr b/src/Package/MSBuild.VSSetup/files.swr
index 8de7164fde5..793a3d5be1c 100644
--- a/src/Package/MSBuild.VSSetup/files.swr
+++ b/src/Package/MSBuild.VSSetup/files.swr
@@ -7,6 +7,7 @@ package name=Microsoft.Build
 
 vs.dependencies
   vs.dependency id=Microsoft.Build.UnGAC
+  vs.dependency id=Microsoft.Build.Arm64
   vs.dependency id=Microsoft.VisualStudio.PackageGroup.NuGet
 
 vs.relatedProcessFiles
diff --git a/src/Package/Microsoft.Build.UnGAC/NativeMethods.cs b/src/Package/Microsoft.Build.UnGAC/NativeMethods.cs
index f468942cf12..1272101e50c 100644
--- a/src/Package/Microsoft.Build.UnGAC/NativeMethods.cs
+++ b/src/Package/Microsoft.Build.UnGAC/NativeMethods.cs
@@ -4,10 +4,14 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.UnGAC
 {
     // See: https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/fusion/iassemblycache-interface
-    [ComImport, Guid("E707DCDE-D1CD-11D2-BAB9-00C04F8ECEAE"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [ComImport]
+    [Guid("E707DCDE-D1CD-11D2-BAB9-00C04F8ECEAE")]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
     internal interface IAssemblyCache
     {
         [PreserveSig]
diff --git a/src/Package/Microsoft.Build.UnGAC/Program.cs b/src/Package/Microsoft.Build.UnGAC/Program.cs
index c5b5caa710d..3515f1781a2 100644
--- a/src/Package/Microsoft.Build.UnGAC/Program.cs
+++ b/src/Package/Microsoft.Build.UnGAC/Program.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.UnGAC
 {
     /// <summary>
diff --git a/src/Packages.dgml b/src/Packages.dgml
deleted file mode 100644
index 5a754cb5bb3..00000000000
--- a/src/Packages.dgml
+++ /dev/null
@@ -1,20 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<DirectedGraph GraphDirection="LeftToRight" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
-  <Nodes>
-    <Node Id="Microsoft.Build.Framework" Label="Microsoft.Build.Framework" Category="Project" />
-    <Node Id="Microsoft.Tpl.Dataflow 4.5.24" Label="Microsoft.Tpl.Dataflow 4.5.24" Category="Package" />
-  </Nodes>
-  <Links>
-    <Link Source="Microsoft.Build.Framework" Target="Microsoft.Tpl.Dataflow 4.5.24" Category="Installed Package" />
-  </Links>
-  <Categories>
-    <Category Id="Project" />
-    <Category Id="Package" />
-  </Categories>
-  <Styles>
-    <Style TargetType="Node" GroupLabel="Project" ValueLabel="True">
-      <Condition Expression="HasCategory('Project')" />
-      <Setter Property="Background" Value="Blue" />
-    </Style>
-  </Styles>
-</DirectedGraph>
\ No newline at end of file
diff --git a/src/Samples/Dependency/Alpha.cs b/src/Samples/Dependency/Alpha.cs
index 61ad4b52b6a..409caee5360 100644
--- a/src/Samples/Dependency/Alpha.cs
+++ b/src/Samples/Dependency/Alpha.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Dependency
 {
     public class Alpha
diff --git a/src/Samples/Directory.Build.props b/src/Samples/Directory.Build.props
index 6b9d6cd9f29..317ef14a6bb 100644
--- a/src/Samples/Directory.Build.props
+++ b/src/Samples/Directory.Build.props
@@ -8,6 +8,7 @@
     <EnableCentralPackageVersions>false</EnableCentralPackageVersions>
 
     <IsShipping>false</IsShipping>
+    <ExcludeFromSourceBuild>true</ExcludeFromSourceBuild>
   </PropertyGroup>
 
   <!-- Import parent props -->
diff --git a/src/Samples/MultiprocessBuild/1.csproj b/src/Samples/MultiprocessBuild/1.csproj
index 969ebd61564..fbd4c35b5c5 100644
--- a/src/Samples/MultiprocessBuild/1.csproj
+++ b/src/Samples/MultiprocessBuild/1.csproj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
diff --git a/src/Samples/MultiprocessBuild/2.csproj b/src/Samples/MultiprocessBuild/2.csproj
index 41b58f20011..96117ad4cbc 100644
--- a/src/Samples/MultiprocessBuild/2.csproj
+++ b/src/Samples/MultiprocessBuild/2.csproj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
@@ -8,4 +8,4 @@
     <Sleep Seconds="3" />
      <Message Importance="high" Text="## finishing 2 ##"/>
   </Target>
-</Project> 
\ No newline at end of file
+</Project>
\ No newline at end of file
diff --git a/src/Samples/MultiprocessBuild/root.proj b/src/Samples/MultiprocessBuild/root.proj
index 0b092a78802..523c4e7109d 100644
--- a/src/Samples/MultiprocessBuild/root.proj
+++ b/src/Samples/MultiprocessBuild/root.proj
@@ -1,4 +1,4 @@
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
+<Project>
   <Target Name="t">
     <Message Importance="high" Text="## in root building children ##"/>
     <MSBuild Projects="1.csproj;2.csproj" BuildInParallel="true"/>
diff --git a/src/Samples/PortableTask/PortableTask.csproj b/src/Samples/PortableTask/PortableTask.csproj
index 6a4541787a1..a497a305fb2 100644
--- a/src/Samples/PortableTask/PortableTask.csproj
+++ b/src/Samples/PortableTask/PortableTask.csproj
@@ -3,7 +3,7 @@
     <UseProductOutputPath>true</UseProductOutputPath>
     <CopyNuGetImplementations>false</CopyNuGetImplementations>
     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
-    <TargetFrameworks>netstandard2.0</TargetFrameworks>
+    <TargetFramework>netstandard2.0</TargetFramework>
   </PropertyGroup>
   <ItemGroup>
     <Content Include="portableTaskTest.proj">
diff --git a/src/Samples/PortableTask/ShowItems.cs b/src/Samples/PortableTask/ShowItems.cs
index b3fb7747824..10e53fa21fa 100644
--- a/src/Samples/PortableTask/ShowItems.cs
+++ b/src/Samples/PortableTask/ShowItems.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using System.Reflection;
 
+#nullable disable
+
 namespace PortableTask
 {
     public class ShowItems : Microsoft.Build.Utilities.Task
diff --git a/src/Samples/PortableTask/Sleep.cs b/src/Samples/PortableTask/Sleep.cs
index 19c1c1663bd..ea11d4d1685 100644
--- a/src/Samples/PortableTask/Sleep.cs
+++ b/src/Samples/PortableTask/Sleep.cs
@@ -1,6 +1,8 @@
 ﻿using System;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace PortableTask
 {
     public class Sleep : Microsoft.Build.Utilities.Task
diff --git a/src/Samples/PortableTask/portableTaskTest.proj b/src/Samples/PortableTask/portableTaskTest.proj
index 7ba2ebcf48d..e2d00979f2a 100644
--- a/src/Samples/PortableTask/portableTaskTest.proj
+++ b/src/Samples/PortableTask/portableTaskTest.proj
@@ -1,9 +1,9 @@
-<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  
+<Project ToolsVersion="12.0" DefaultTargets="Build">
+
   <PropertyGroup>
     <AssemblyPath Condition="'$(AssemblyPath)' == ''">PortableTask.dll</AssemblyPath>
   </PropertyGroup>
-  
+
   <UsingTask TaskName="ShowItems" AssemblyFile="$(AssemblyPath)"/>
   <ItemGroup>
     <TestItems Include="$(MSBuildBinPath)\**\Microsoft.Build.*.dll"/>
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index 4277bdad314..4d9b3f345b1 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Graph;
 using Shouldly;
 
+#nullable disable
+
 namespace MockCacheFromAssembly
 {
     public class AssemblyMockCache : ProjectCachePluginBase
diff --git a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
index 4ed1dbcb9b0..001357401f6 100644
--- a/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
+++ b/src/Samples/TaskUsageLogger/TaskUsageLogger.cs
@@ -15,6 +15,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace TaskUsageLogger
 {
     /// <summary>
diff --git a/src/Samples/TaskWithDependency/LogStringFromDependency.cs b/src/Samples/TaskWithDependency/LogStringFromDependency.cs
index b1c902ff02b..8bd5ab1b1e4 100644
--- a/src/Samples/TaskWithDependency/LogStringFromDependency.cs
+++ b/src/Samples/TaskWithDependency/LogStringFromDependency.cs
@@ -3,6 +3,8 @@
 
 using Dependency;
 
+#nullable disable
+
 namespace TaskWithDependency
 {
     public class LogStringFromDependency : Microsoft.Build.Utilities.Task
diff --git a/src/Samples/XmlFileLogger/ILogNode.cs b/src/Samples/XmlFileLogger/ILogNode.cs
index 569b7534685..bedae997a3f 100644
--- a/src/Samples/XmlFileLogger/ILogNode.cs
+++ b/src/Samples/XmlFileLogger/ILogNode.cs
@@ -3,6 +3,8 @@
 
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ItemGroupParser.cs b/src/Samples/XmlFileLogger/ItemGroupParser.cs
index 25928e3e40b..c17ab8bfac4 100644
--- a/src/Samples/XmlFileLogger/ItemGroupParser.cs
+++ b/src/Samples/XmlFileLogger/ItemGroupParser.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     internal static class ItemGroupParser
diff --git a/src/Samples/XmlFileLogger/LogProcessNode.cs b/src/Samples/XmlFileLogger/LogProcessNode.cs
index 4982128eba6..086c98a1534 100644
--- a/src/Samples/XmlFileLogger/LogProcessNode.cs
+++ b/src/Samples/XmlFileLogger/LogProcessNode.cs
@@ -6,6 +6,8 @@
 using System.Linq;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Build.cs b/src/Samples/XmlFileLogger/ObjectModel/Build.cs
index 639fb441a70..80b274e93c4 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Build.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Build.cs
@@ -6,6 +6,8 @@
 using System.Xml.Linq;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs b/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
index 2b305ce6e6a..6787d9381c8 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/InputParameter.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Item.cs b/src/Samples/XmlFileLogger/ObjectModel/Item.cs
index 7b3bbd31dfb..2a8620187c3 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Item.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Item.cs
@@ -5,6 +5,8 @@
 using System.Linq;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs b/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
index 17acc9b3bd2..568c56e3635 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/ItemGroup.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Message.cs b/src/Samples/XmlFileLogger/ObjectModel/Message.cs
index c96f680d1e4..b893987b08c 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Message.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Message.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs b/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
index 0ab46bb6910..159226a674f 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/OutputItem.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs b/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
index 7e5b86489b3..0654cd4b583 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/OutputProperty.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Project.cs b/src/Samples/XmlFileLogger/ObjectModel/Project.cs
index fbe8d847cee..1ce36edaf9a 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Project.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Project.cs
@@ -8,6 +8,8 @@
 using System.Xml.Linq;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Target.cs b/src/Samples/XmlFileLogger/ObjectModel/Target.cs
index 062ecc4c5c9..a92d2013f16 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Target.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Target.cs
@@ -5,6 +5,8 @@
 using System.Xml.Linq;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/Task.cs b/src/Samples/XmlFileLogger/ObjectModel/Task.cs
index 10042b2b97d..3d276a28cb8 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/Task.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/Task.cs
@@ -4,6 +4,8 @@
 using System.Xml.Linq;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs b/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
index 4e28d5136f1..464d10c5d19 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
@@ -5,6 +5,8 @@
 using System.Linq;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/PropertyBag.cs b/src/Samples/XmlFileLogger/PropertyBag.cs
index b70c9300fac..9f5b6f00fde 100644
--- a/src/Samples/XmlFileLogger/PropertyBag.cs
+++ b/src/Samples/XmlFileLogger/PropertyBag.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs b/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
index 93053bd8d9c..b2aec3d718a 100644
--- a/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
+++ b/src/Samples/XmlFileLogger/UnknownTaskParameterPrefixException.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     internal class UnknownTaskParameterPrefixException : Exception
diff --git a/src/Samples/XmlFileLogger/XmlFileLogger.cs b/src/Samples/XmlFileLogger/XmlFileLogger.cs
index 5663da5cd74..e5ab9109723 100644
--- a/src/Samples/XmlFileLogger/XmlFileLogger.cs
+++ b/src/Samples/XmlFileLogger/XmlFileLogger.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Logging.StructuredLogger
 {
     /// <summary>
diff --git a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
index da266d8220e..6df2b6a307f 100644
--- a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
+++ b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
@@ -1,15 +1,16 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using Microsoft.Build.Tasks;
+using System.Runtime.Versioning;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -39,6 +40,7 @@ namespace Microsoft.Build.Shared
     ///     {AssemblyFoldersSuffix} = [ PocketPC | SmartPhone | WindowsCE]\AssemblyFoldersEx
     ///
     /// </summary>
+    [SupportedOSPlatform("windows")]
     internal class AssemblyFoldersEx : IEnumerable<AssemblyFoldersExInfo>
     {
         /// <summary>
@@ -496,4 +498,3 @@ internal IEnumerable<string> UniqueDirectoryPaths
         }
     }
 }
-#endif
diff --git a/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs b/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
index de37122792b..bb50bfa5800 100644
--- a/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
+++ b/src/Shared/AssemblyFolders/AssemblyFoldersFromConfig.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Utilities;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.AssemblyFoldersFromConfig
 {
     internal class AssemblyFoldersFromConfig : IEnumerable<AssemblyFoldersFromConfigInfo>
@@ -78,7 +80,6 @@ private static List<AssemblyFolderItem> GatherVersionStrings(string targetRuntim
                 (from folder in collection.AssemblyFolders
                  let targetVersion = VersionUtilities.ConvertToVersion(targetRuntimeVersion)
                  let replacementVersion = GetFrameworkVersion(folder.FrameworkVersion)
-                 
                  where targetVersion != null && targetVersion >= replacementVersion
                  orderby folder.FrameworkVersion descending 
                  select folder).ToList();
diff --git a/src/Shared/AssemblyFolders/Serialization/AssemblyFolderCollection.cs b/src/Shared/AssemblyFolders/Serialization/AssemblyFolderCollection.cs
index 20b19a423e1..30583b8abbe 100644
--- a/src/Shared/AssemblyFolders/Serialization/AssemblyFolderCollection.cs
+++ b/src/Shared/AssemblyFolders/Serialization/AssemblyFolderCollection.cs
@@ -4,6 +4,8 @@
 using System.Xml;
 
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.AssemblyFoldersFromConfig
 {
     [DataContract(Name = "AssemblyFoldersConfig", Namespace = "")]
diff --git a/src/Shared/AssemblyFolders/Serialization/AssemblyFolderItem.cs b/src/Shared/AssemblyFolders/Serialization/AssemblyFolderItem.cs
index ba2973e27ce..5151c1ff447 100644
--- a/src/Shared/AssemblyFolders/Serialization/AssemblyFolderItem.cs
+++ b/src/Shared/AssemblyFolders/Serialization/AssemblyFolderItem.cs
@@ -1,6 +1,8 @@
 ﻿using System.Diagnostics;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.AssemblyFoldersFromConfig
 {
     [DataContract(Name="AssemblyFolder", Namespace = "")]
@@ -19,4 +21,4 @@ internal class AssemblyFolderItem
         [DataMember(IsRequired = false, Order = 4)]
         internal string Platform { get; set; }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Shared/AssemblyLoadInfo.cs b/src/Shared/AssemblyLoadInfo.cs
index 014d7d411df..271a077efaa 100644
--- a/src/Shared/AssemblyLoadInfo.cs
+++ b/src/Shared/AssemblyLoadInfo.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/AssemblyNameComparer.cs b/src/Shared/AssemblyNameComparer.cs
index 389de34083b..1855a039164 100644
--- a/src/Shared/AssemblyNameComparer.cs
+++ b/src/Shared/AssemblyNameComparer.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 99db41274e3..90d1c081d5c 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -15,6 +15,8 @@
 using System.Reflection.Metadata;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -187,59 +189,22 @@ internal AssemblyNameExtension(ITranslator translator) : this()
         /// <returns></returns>
         internal static AssemblyNameExtension GetAssemblyNameEx(string path)
         {
-            AssemblyName assemblyName = null;
-#if !FEATURE_ASSEMBLYLOADCONTEXT
             try
             {
-                assemblyName = AssemblyName.GetAssemblyName(path);
+                return new AssemblyNameExtension(AssemblyName.GetAssemblyName(path));
             }
             catch (FileLoadException)
             {
                 // Its pretty hard to get here, you need an assembly that contains a valid reference
                 // to a dependent assembly that, in turn, throws a FileLoadException during GetAssemblyName.
                 // Still it happened once, with an older version of the CLR. 
-
-                // ...falling through and relying on the assemblyName == null behavior below...
             }
             catch (FileNotFoundException)
             {
                 // Its pretty hard to get here, also since we do a file existence check right before calling this method so it can only happen if the file got deleted between that check and this call.
             }
-#else
-            using (var stream = File.OpenRead(path))
-            using (var peFile = new PEReader(stream))
-            {
-                bool hasMetadata = false;
-                try
-                {
-                    // This can throw if the stream is too small, which means
-                    // the assembly doesn't have metadata.
-                    hasMetadata = peFile.HasMetadata;
-                }
-                finally
-                {
-                    // If the file does not contain PE metadata, throw BadImageFormatException to preserve
-                    // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.
-                    if (!hasMetadata)
-                    {
-                        throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,
-                            AssemblyResources.GetString("ResolveAssemblyReference.AssemblyDoesNotContainPEMetadata"),
-                            path));
-                    }
-                }
-
-                var metadataReader = peFile.GetMetadataReader();
-                var entry = metadataReader.GetAssemblyDefinition();
 
-                assemblyName = new AssemblyName();
-                assemblyName.Name = metadataReader.GetString(entry.Name);
-                assemblyName.Version = entry.Version;
-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);
-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));
-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;
-            }
-#endif
-            return assemblyName == null ? null : new AssemblyNameExtension(assemblyName);
+            return null;
         }
 
         /// <summary>
@@ -820,11 +785,15 @@ internal static bool ComparePublicKeyTokens(byte[] aPKT, byte[] bPKT)
             // Some assemblies (real case was interop assembly) may have null PKTs.
             if (aPKT == null)
             {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                 aPKT = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
             }
             if (bPKT == null)
             {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                 bPKT = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
             }
 
             if (aPKT.Length != bPKT.Length)
diff --git a/src/Shared/AssemblyNameReverseVersionComparer.cs b/src/Shared/AssemblyNameReverseVersionComparer.cs
index 2d664afaf4f..6e8eb62be81 100644
--- a/src/Shared/AssemblyNameReverseVersionComparer.cs
+++ b/src/Shared/AssemblyNameReverseVersionComparer.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/AwaitExtensions.cs b/src/Shared/AwaitExtensions.cs
index b47da420b1f..3767e5f8c63 100644
--- a/src/Shared/AwaitExtensions.cs
+++ b/src/Shared/AwaitExtensions.cs
@@ -7,6 +7,8 @@
 using System.Threading;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/BinaryReaderExtensions.cs b/src/Shared/BinaryReaderExtensions.cs
index f1a1c16c587..ec48e932739 100644
--- a/src/Shared/BinaryReaderExtensions.cs
+++ b/src/Shared/BinaryReaderExtensions.cs
@@ -6,6 +6,8 @@
 using System.Runtime.CompilerServices;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     internal static class BinaryReaderExtensions
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 56a1b1f3803..73888fa88a0 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -11,6 +11,8 @@
 using System.Globalization;
 using System.Reflection;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -147,6 +149,26 @@ public void Translate(ref int value)
                 value = _reader.ReadInt32();
             }
 
+            /// <summary>
+            /// Translates an <see langword="int"/> array.
+            /// </summary>
+            /// <param name="array">The array to be translated.</param>
+            public void Translate(ref int[] array)
+            {
+                if (!TranslateNullable(array))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                array = new int[count];
+
+                for (int i = 0; i < count; i++)
+                {
+                    array[i] = _reader.ReadInt32();
+                }
+            }
+
             /// <summary>
             /// Translates a long.
             /// </summary>
@@ -197,7 +219,9 @@ public void Translate(ref byte[] byteArray)
                 }
                 else
                 {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                     byteArray = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
                 }
             }
 
@@ -807,6 +831,26 @@ public void Translate(ref int value)
                 _writer.Write(value);
             }
 
+            /// <summary>
+            /// Translates an <see langword="int"/> array.
+            /// </summary>
+            /// <param name="array">The array to be translated.</param>
+            public void Translate(ref int[] array)
+            {
+                if (!TranslateNullable(array))
+                {
+                    return;
+                }
+
+                int count = array.Length;
+                _writer.Write(count);
+
+                for (int i = 0; i < count; i++)
+                {
+                    _writer.Write(array[i]);
+                }
+            }
+
             /// <summary>
             /// Translates a long.
             /// </summary>
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 946eb483eaa..70d750aa883 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -6,6 +6,8 @@
 using System.Runtime.CompilerServices;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     internal static class BinaryWriterExtensions
diff --git a/src/Shared/BufferedReadStream.cs b/src/Shared/BufferedReadStream.cs
index f3f9b6906b3..6aaf31e792b 100644
--- a/src/Shared/BufferedReadStream.cs
+++ b/src/Shared/BufferedReadStream.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     internal class BufferedReadStream : Stream
@@ -13,7 +15,7 @@ internal class BufferedReadStream : Stream
         Stream _innerStream;
         byte[] _buffer;
 
-        //  The number of bytes in the buffer that have been read from the underlying stream but not read by consumers of this stream
+        // The number of bytes in the buffer that have been read from the underlying stream but not read by consumers of this stream
         int _currentlyBufferedByteCount;
 
         int _currentIndexInBuffer;
@@ -56,7 +58,7 @@ public override int ReadByte()
             }
             else
             {
-                //  Let the base class handle it, which will end up calling the Read() method
+                // Let the base class handle it, which will end up calling the Read() method
                 return base.ReadByte();
             }
         }
@@ -65,7 +67,7 @@ public override int Read(byte[] buffer, int offset, int count)
         {
             if (count > BUFFER_SIZE)
             {
-                //  Trying to read more data than the buffer can hold
+                // Trying to read more data than the buffer can hold
                 int alreadyCopied = 0;
                 if (_currentlyBufferedByteCount > 0)
                 {
@@ -79,7 +81,7 @@ public override int Read(byte[] buffer, int offset, int count)
             }
             else if (count <= _currentlyBufferedByteCount)
             {
-                //  Enough data buffered to satisfy read request
+                // Enough data buffered to satisfy read request
                 Array.Copy(_buffer, _currentIndexInBuffer, buffer, offset, count);
                 _currentIndexInBuffer += count;
                 _currentlyBufferedByteCount -= count;
@@ -87,7 +89,7 @@ public override int Read(byte[] buffer, int offset, int count)
             }
             else
             {
-                //  Need to read more data
+                // Need to read more data
                 int alreadyCopied = 0;
                 if (_currentlyBufferedByteCount > 0)
                 {
@@ -144,6 +146,5 @@ protected override void Dispose(bool disposing)
 
             base.Dispose(disposing);
         }
-        
     }
 }
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 6586362640f..b2579ae8610 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -10,6 +10,9 @@
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
+using System.Reflection;
+
+#nullable disable
 
 namespace Microsoft.Build.Shared
 {
@@ -235,7 +238,7 @@ private static BuildEnvironment TryFromDevConsole()
         {
             if (s_runningTests())
             {
-                //  If running unit tests, then don't try to get the build environment from MSBuild installed on the machine
+                // If running unit tests, then don't try to get the build environment from MSBuild installed on the machine
                 //  (we should be using the locally built MSBuild instead)
                 return null;
             }
@@ -259,7 +262,7 @@ private static BuildEnvironment TryFromSetupApi()
         {
             if (s_runningTests())
             {
-                //  If running unit tests, then don't try to get the build environment from MSBuild installed on the machine
+                // If running unit tests, then don't try to get the build environment from MSBuild installed on the machine
                 //  (we should be using the locally built MSBuild instead)
                 return null;
             }
@@ -318,9 +321,10 @@ private static BuildEnvironment TryFromStandaloneMSBuildExe(string msBuildExePat
 
         private static string GetVsRootFromMSBuildAssembly(string msBuildAssembly)
         {
+            string directory = Path.GetDirectoryName(msBuildAssembly);
             return FileUtilities.GetFolderAbove(msBuildAssembly,
-                Path.GetDirectoryName(msBuildAssembly)
-                  .EndsWith(@"\amd64", StringComparison.OrdinalIgnoreCase)
+                directory.EndsWith(@"\amd64", StringComparison.OrdinalIgnoreCase) ||
+                directory.EndsWith(@"\arm64", StringComparison.OrdinalIgnoreCase)
                     ? 5
                     : 4);
         }
@@ -332,7 +336,8 @@ private static string GetMSBuildExeFromVsRoot(string visualStudioRoot)
                 "MSBuild",
                 CurrentToolsVersion,
                 "Bin",
-                IntPtr.Size == 8 ? "amd64" : string.Empty,
+                NativeMethodsShared.ProcessorArchitecture == Framework.NativeMethods.ProcessorArchitectures.X64 ? "amd64" :
+                NativeMethodsShared.ProcessorArchitecture == Framework.NativeMethods.ProcessorArchitectures.ARM64 ? "arm64" : string.Empty,
                 "MSBuild.exe");
         }
 
@@ -353,7 +358,7 @@ private static bool CheckIfRunningTests()
                     return _runningTests.Value;
                 }
 
-                //  Check if running tests via the TestInfo class in Microsoft.Build.Framework.
+                // Check if running tests via the TestInfo class in Microsoft.Build.Framework.
                 //  See the comments on the TestInfo class for an explanation of why it works this way.
                 var frameworkAssembly = typeof(Framework.ITask).Assembly;
                 var testInfoType = frameworkAssembly.GetType("Microsoft.Build.Framework.TestInfo");
@@ -434,7 +439,7 @@ internal static void ResetInstance_ForUnitTestsOnly(Func<string> getProcessFromR
             s_getVisualStudioInstances = getVisualStudioInstances ?? VisualStudioLocationHelper.GetInstances;
             s_getEnvironmentVariable = getEnvironmentVariable ?? GetEnvironmentVariable;
 
-            //  Tests which specifically test the BuildEnvironmentHelper need it to be able to act as if it is not running tests
+            // Tests which specifically test the BuildEnvironmentHelper need it to be able to act as if it is not running tests
             s_runningTests = runningTests ?? CheckIfRunningTests;
 
             BuildEnvironmentHelperSingleton.s_instance = Initialize();
@@ -457,8 +462,8 @@ internal static void ResetInstance_ForUnitTestsOnly(BuildEnvironment buildEnviro
 
         private static class BuildEnvironmentHelperSingleton
         {
-            // Explicit static constructor to tell C# compiler
-            // not to mark type as beforefieldinit
+            // Explicit static constructor to tell C# compiler
+            // not to mark type as beforefieldinit
             static BuildEnvironmentHelperSingleton()
             { }
 
@@ -521,40 +526,45 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
                 CurrentMSBuildConfigurationFile = string.Concat(currentMSBuildExePath, ".config");
                 MSBuildToolsDirectory32 = CurrentMSBuildToolsDirectory;
                 MSBuildToolsDirectory64 = CurrentMSBuildToolsDirectory;
+                MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;
             }
 
             // We can't detect an environment, don't try to set other paths.
             if (mode == BuildEnvironmentMode.None || currentMSBuildExeFile == null || currentToolsDirectory == null)
                 return;
 
-            // Check to see if our current folder is 'amd64'
-            bool runningInAmd64 = string.Equals(currentToolsDirectory.Name, "amd64", StringComparison.OrdinalIgnoreCase);
-
             var msBuildExeName = currentMSBuildExeFile.Name;
-            var folderAbove = currentToolsDirectory.Parent?.FullName;
 
-            if (folderAbove != null)
+            if (mode == BuildEnvironmentMode.VisualStudio)
+            {
+                // In Visual Studio, the entry-point MSBuild.exe is often from an arch-specific subfolder
+                MSBuildToolsDirectoryRoot = NativeMethodsShared.ProcessorArchitecture switch
+                {
+                    NativeMethodsShared.ProcessorArchitectures.X86 => CurrentMSBuildToolsDirectory,
+                    NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorArchitectures.ARM64
+                        => currentToolsDirectory.Parent?.FullName,
+                    _ => throw new InternalErrorException("Unknown processor architecture " + NativeMethodsShared.ProcessorArchitecture),
+                };
+            }
+            else
+            {
+                // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.
+                MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;
+            }
+
+            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)
             {
                 // Calculate potential paths to other architecture MSBuild.exe
-                var potentialAmd64FromX86 = FileUtilities.CombinePaths(CurrentMSBuildToolsDirectory, "amd64", msBuildExeName);
-                var potentialX86FromAmd64 = Path.Combine(folderAbove, msBuildExeName);
+                var potentialAmd64FromX86 = FileUtilities.CombinePaths(MSBuildToolsDirectoryRoot, "amd64", msBuildExeName);
+                var potentialARM64FromX86 = FileUtilities.CombinePaths(MSBuildToolsDirectoryRoot, "arm64", msBuildExeName);
 
                 // Check for existence of an MSBuild file. Note this is not necessary in a VS installation where we always want to
                 // assume the correct layout.
                 var existsCheck = mode == BuildEnvironmentMode.VisualStudio ? new Func<string, bool>(_ => true) : File.Exists;
 
-                // Running in amd64 folder and the X86 path is valid
-                if (runningInAmd64 && existsCheck(potentialX86FromAmd64))
-                {
-                    MSBuildToolsDirectory32 = folderAbove;
-                    MSBuildToolsDirectory64 = CurrentMSBuildToolsDirectory;
-                }
-                // Not running in amd64 folder and the amd64 path is valid
-                else if (!runningInAmd64 && existsCheck(potentialAmd64FromX86))
-                {
-                    MSBuildToolsDirectory32 = CurrentMSBuildToolsDirectory;
-                    MSBuildToolsDirectory64 = Path.Combine(CurrentMSBuildToolsDirectory, "amd64");
-                }
+                MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;
+                MSBuildToolsDirectory64 = Path.Combine(MSBuildToolsDirectoryRoot, "amd64");
+                MSBuildToolsDirectoryArm64 = File.Exists(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, "arm64") : null;
             }
 
             MSBuildExtensionsPath = mode == BuildEnvironmentMode.VisualStudio
@@ -574,6 +584,11 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
         /// </summary>
         internal bool RunningInVisualStudio { get; }
 
+        /// <summary>
+        /// Path to the root of the MSBuild folder (in VS scenarios, <c>MSBuild\Current\bin</c>).
+        /// </summary>
+        internal string MSBuildToolsDirectoryRoot { get; }
+
         /// <summary>
         /// Path to the MSBuild 32-bit tools directory.
         /// </summary>
@@ -584,6 +599,12 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
         /// </summary>
         internal string MSBuildToolsDirectory64 { get; }
 
+        /// <summary>
+        /// Path to the ARM64 tools directory.
+        /// <see langword="null" /> if ARM64 tools are not installed.
+        /// </summary>
+        internal string MSBuildToolsDirectoryArm64 { get; }
+
         /// <summary>
         /// Path to the Sdks folder for this MSBuild instance.
         /// </summary>
diff --git a/src/Shared/BuildEventFileInfo.cs b/src/Shared/BuildEventFileInfo.cs
index 7f2225e9fb4..ab15bb7a088 100644
--- a/src/Shared/BuildEventFileInfo.cs
+++ b/src/Shared/BuildEventFileInfo.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -83,11 +85,7 @@ internal BuildEventFileInfo(string file, int line, int column, int endLine, int
         internal BuildEventFileInfo(XmlException e)
         {
             ErrorUtilities.VerifyThrow(e != null, "Need exception context.");
-#if FEATURE_XML_SOURCE_URI
             _file = (e.SourceUri.Length == 0) ? String.Empty : new Uri(e.SourceUri).LocalPath;
-#else
-            _file = String.Empty;
-#endif
             _line = e.LineNumber;
             _column = e.LinePosition;
             _endLine = 0;
diff --git a/src/Shared/CanonicalError.cs b/src/Shared/CanonicalError.cs
index 6b8377e6531..406784dfeab 100644
--- a/src/Shared/CanonicalError.cs
+++ b/src/Shared/CanonicalError.cs
@@ -5,6 +5,8 @@
 using System.Globalization;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/CollectionHelpers.cs b/src/Shared/CollectionHelpers.cs
index 8d66f374154..18d052ed39e 100644
--- a/src/Shared/CollectionHelpers.cs
+++ b/src/Shared/CollectionHelpers.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 487080a3dff..73dcf6f5a93 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -22,6 +22,8 @@
 using System.Threading.Tasks;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
@@ -66,6 +68,11 @@ internal enum HandshakeOptions
         /// Using the .NET Core/.NET 5.0+ runtime
         /// </summary>
         NET = 64,
+
+        /// <summary>
+        /// ARM64 process
+        /// </summary>
+        Arm64 = 128,
     }
 
     internal readonly struct Handshake
@@ -80,13 +87,17 @@ internal readonly struct Handshake
 
         internal Handshake(HandshakeOptions nodeType)
         {
+            const int handshakeVersion = (int)CommunicationsUtilities.handshakeVersion;
+
             // We currently use 7 bits of this 32-bit integer. Very old builds will instantly reject any handshake that does not start with F5 or 06; slightly old builds always lead with 00.
             // This indicates in the first byte that we are a modern build.
-            options = (int)nodeType | (((int)CommunicationsUtilities.handshakeVersion) << 24);
+            options = (int)nodeType | (handshakeVersion << 24);
+            CommunicationsUtilities.Trace("Building handshake for node type {0}, (version {1}): options {2}.", nodeType, handshakeVersion, options);
+
             string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
             CommunicationsUtilities.Trace("Handshake salt is " + handshakeSalt);
-            string toolsDirectory = (nodeType & HandshakeOptions.X64) == HandshakeOptions.X64 ? BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64 : BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
-            CommunicationsUtilities.Trace("Tools directory is " + toolsDirectory);
+            string toolsDirectory = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
+            CommunicationsUtilities.Trace("Tools directory root is " + toolsDirectory);
             salt = CommunicationsUtilities.GetHashCode(handshakeSalt + toolsDirectory);
             Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
             fileVersionMajor = fileVersion.Major;
@@ -142,6 +153,11 @@ static internal class CommunicationsUtilities
         /// </summary>
         private static bool s_trace = Traits.Instance.DebugNodeCommunication;
 
+        /// <summary>
+        /// Lock trace to ensure we are logging in serial fashion.
+        /// </summary>
+        private static readonly object s_traceLock = new();
+
         /// <summary>
         /// Place to dump trace
         /// </summary>
@@ -463,7 +479,7 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
             int totalBytesRead = 0;
             while (totalBytesRead < bytesToRead)
             {
-                int bytesRead = await stream.ReadAsync(buffer, totalBytesRead, bytesToRead - totalBytesRead);
+                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None);
                 if (bytesRead == 0)
                 {
                     return totalBytesRead;
@@ -477,22 +493,22 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
         /// <summary>
         /// Given the appropriate information, return the equivalent HandshakeOptions.
         /// </summary>
-        internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit = false, bool nodeReuse = false, bool lowPriority = false, IDictionary<string, string> taskHostParameters = null)
+        internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string architectureFlagToSet = null, bool nodeReuse = false, bool lowPriority = false, IDictionary<string, string> taskHostParameters = null)
         {
             HandshakeOptions context = taskHost ? HandshakeOptions.TaskHost : HandshakeOptions.None;
 
             int clrVersion = 0;
 
-            // We don't know about the TaskHost. Figure it out.
+            // We don't know about the TaskHost.
             if (taskHost)
             {
-                // Take the current TaskHost context
+                // No parameters given, default to current
                 if (taskHostParameters == null)
                 {
                     clrVersion = typeof(bool).GetTypeInfo().Assembly.GetName().Version.Major;
-                    is64Bit = XMakeAttributes.GetCurrentMSBuildArchitecture().Equals(XMakeAttributes.MSBuildArchitectureValues.x64);
+                    architectureFlagToSet = XMakeAttributes.GetCurrentMSBuildArchitecture();
                 }
-                else
+                else // Figure out flags based on parameters given
                 {
                     ErrorUtilities.VerifyThrow(taskHostParameters.TryGetValue(XMakeAttributes.runtime, out string runtimeVersion), "Should always have an explicit runtime when we call this method.");
                     ErrorUtilities.VerifyThrow(taskHostParameters.TryGetValue(XMakeAttributes.architecture, out string architecture), "Should always have an explicit architecture when we call this method.");
@@ -500,7 +516,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit
                     if (runtimeVersion.Equals(XMakeAttributes.MSBuildRuntimeValues.clr2, StringComparison.OrdinalIgnoreCase))
                     {
                         clrVersion = 2;
-                    } 
+                    }
                     else if (runtimeVersion.Equals(XMakeAttributes.MSBuildRuntimeValues.clr4, StringComparison.OrdinalIgnoreCase))
                     {
                         clrVersion = 4;
@@ -514,13 +530,20 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit
                         ErrorUtilities.ThrowInternalErrorUnreachable();
                     }
 
-                    is64Bit = architecture.Equals(XMakeAttributes.MSBuildArchitectureValues.x64);
+                    architectureFlagToSet = architecture;
                 }
             }
 
-            if (is64Bit)
+            if (!string.IsNullOrEmpty(architectureFlagToSet))
             {
-                context |= HandshakeOptions.X64;
+                if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.x64, StringComparison.OrdinalIgnoreCase))
+                {
+                    context |= HandshakeOptions.X64;
+                }
+                else if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.arm64, StringComparison.OrdinalIgnoreCase))
+                {
+                    context |= HandshakeOptions.Arm64;
+                }
             }
 
             switch (clrVersion)
@@ -598,9 +621,11 @@ internal static void Trace(int nodeId, string format, params object[] args)
         {
             if (s_trace)
             {
-                if (s_debugDumpPath == null)
+                lock (s_traceLock)
                 {
-                    s_debugDumpPath =
+                    if (s_debugDumpPath == null)
+                    {
+                        s_debugDumpPath =
 #if CLR2COMPATIBILITY
                         Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #else
@@ -609,39 +634,43 @@ internal static void Trace(int nodeId, string format, params object[] args)
                             : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #endif
 
-                    if (String.IsNullOrEmpty(s_debugDumpPath))
-                    {
-                        s_debugDumpPath = Path.GetTempPath();
-                    }
-                    else
-                    {
-                        Directory.CreateDirectory(s_debugDumpPath);
+                        if (String.IsNullOrEmpty(s_debugDumpPath))
+                        {
+                            s_debugDumpPath = Path.GetTempPath();
+                        }
+                        else
+                        {
+                            Directory.CreateDirectory(s_debugDumpPath);
+                        }
                     }
-                }
 
-                try
-                {
-                    string fileName = @"MSBuild_CommTrace_PID_{0}";
-                    if (nodeId != -1)
+                    try
                     {
-                        fileName += "_node_" + nodeId;
-                    }
+                        string fileName = @"MSBuild_CommTrace_PID_{0}";
+                        if (nodeId != -1)
+                        {
+                            fileName += "_node_" + nodeId;
+                        }
 
-                    fileName += ".txt";
+                        fileName += ".txt";
 
-                    using (StreamWriter file = FileUtilities.OpenWrite(String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
+                        using (StreamWriter file =
+                               FileUtilities.OpenWrite(String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId),
+                                   append: true))
+                        {
+                            string message = String.Format(CultureInfo.CurrentCulture, format, args);
+                            long now = DateTime.UtcNow.Ticks;
+                            float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
+                            s_lastLoggedTicks = now;
+                            file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog,
+                                message);
+                        }
+                    }
+                    catch (IOException)
                     {
-                        string message = String.Format(CultureInfo.CurrentCulture, format, args);
-                        long now = DateTime.UtcNow.Ticks;
-                        float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
-                        s_lastLoggedTicks = now;
-                        file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
+                        // Ignore
                     }
                 }
-                catch (IOException)
-                {
-                    // Ignore
-                }
             }
         }
 
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 9a36fc1816e..4a59448c172 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -36,6 +38,11 @@ internal static class MSBuildConstants
         /// </summary>
         internal const string WarningsAsErrors = "MSBuildWarningsAsErrors";
 
+        /// <summary>
+        /// Name of the property that indicates a list of warnings to not treat as errors.
+        /// </summary>
+        internal const string WarningsNotAsErrors = "MSBuildWarningsNotAsErrors";
+
         /// <summary>
         /// Name of the property that indicates the list of warnings to treat as messages.
         /// </summary>
diff --git a/src/Shared/ConversionUtilities.cs b/src/Shared/ConversionUtilities.cs
index a6febc5c973..4489d33a43b 100644
--- a/src/Shared/ConversionUtilities.cs
+++ b/src/Shared/ConversionUtilities.cs
@@ -6,6 +6,8 @@
 using System.Text;
 using Error = Microsoft.Build.Shared.ErrorUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -92,7 +94,7 @@ internal static bool CanConvertStringToBool(string parameterValue)
         /// Returns true if the string represents a valid MSBuild boolean true value,
         /// such as "on", "!false", "yes"
         /// </summary>
-        private static bool ValidBooleanTrue(string parameterValue)
+        internal static bool ValidBooleanTrue(string parameterValue)
         {
             return String.Equals(parameterValue, "true", StringComparison.OrdinalIgnoreCase) ||
                    String.Equals(parameterValue, "on", StringComparison.OrdinalIgnoreCase) ||
diff --git a/src/Shared/CopyOnWriteDictionary.cs b/src/Shared/CopyOnWriteDictionary.cs
index a452d24a321..ec869150afb 100644
--- a/src/Shared/CopyOnWriteDictionary.cs
+++ b/src/Shared/CopyOnWriteDictionary.cs
@@ -9,8 +9,6 @@
 using System.Linq;
 using System.Runtime.Serialization;
 
-#nullable enable
-
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -187,21 +185,20 @@ public V this[string key]
             }
         }
 
-#nullable disable
         /// <summary>
         /// IDictionary implementation
         /// </summary>
-        object IDictionary.this[object key]
+        object? IDictionary.this[object key]
         {
             get
             {
-                TryGetValue((string) key, out V val);
+                TryGetValue((string) key, out V? val);
                 return val;
             }
-
+#nullable disable
             set => this[(string)key] = (V)value;
+#nullable enable
         }
-#nullable restore
 
         /// <summary>
         /// Adds a value to the dictionary.
@@ -243,6 +240,7 @@ public bool Remove(string key)
             return initial != _backing; // whether the removal occured
         }
 
+#nullable disable
         /// <summary>
         /// Attempts to find the value for the specified key in the dictionary.
         /// </summary>
@@ -250,6 +248,7 @@ public bool TryGetValue(string key, out V value)
         {
             return _backing.TryGetValue(key, out value);
         }
+#nullable restore
 
         /// <summary>
         /// Adds an item to the collection.
@@ -311,6 +310,7 @@ IEnumerator IEnumerable.GetEnumerator()
             return ((IEnumerable<KeyValuePair<string, V>>)this).GetEnumerator();
         }
 
+#nullable disable
         /// <summary>
         /// IDictionary implementation.
         /// </summary>
@@ -318,6 +318,7 @@ void IDictionary.Add(object key, object value)
         {
             Add((string)key, (V)value);
         }
+#nullable enable
 
         /// <summary>
         /// IDictionary implementation.
diff --git a/src/Shared/CoreCLRAssemblyLoader.cs b/src/Shared/CoreCLRAssemblyLoader.cs
index cd02dba6528..71af8039f57 100644
--- a/src/Shared/CoreCLRAssemblyLoader.cs
+++ b/src/Shared/CoreCLRAssemblyLoader.cs
@@ -10,6 +10,8 @@
 using System.Reflection;
 using System.Runtime.Loader;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -165,10 +167,12 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb
                     }
 
                     AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
-                    if (candidateAssemblyName.Version >= assemblyName.Version)
+                    if (candidateAssemblyName.Version != assemblyName.Version)
                     {
-                        return LoadAndCache(context, candidatePath);
+                        continue;
                     }
+
+                    return LoadAndCache(context, candidatePath);
                 }
             }
 
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index 0ba09dac396..74a3a7b9e79 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -5,8 +5,11 @@
 using System;
 using System.Diagnostics;
 using System.IO;
+using System.Security;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Debugging
 {
     internal static class DebugUtils
@@ -20,12 +23,23 @@ private enum NodeMode
 
         static DebugUtils()
         {
-            string environmentDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
-            var debugDirectory = environmentDebugPath;
+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH"));
+            string debugDirectory = environmentDebugPath;
 
             if (Traits.Instance.DebugEngine)
             {
-                debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs");
+                if (!string.IsNullOrWhiteSpace(debugDirectory) && FileUtilities.CanWriteToDirectory(debugDirectory))
+                {
+                    // Debug directory is writable; no need for fallbacks
+                }
+                else if (FileUtilities.CanWriteToDirectory(Directory.GetCurrentDirectory()))
+                {
+                    debugDirectory = Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs");
+                }
+                else
+                {
+                    debugDirectory = Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
+                }
 
                 // Out of proc nodes do not know the startup directory so set the environment variable for them.
                 if (string.IsNullOrWhiteSpace(environmentDebugPath))
diff --git a/src/Shared/Debugging/PrintLineDebugger.cs b/src/Shared/Debugging/PrintLineDebugger.cs
index 28fe6c8587a..7584322ff2b 100644
--- a/src/Shared/Debugging/PrintLineDebugger.cs
+++ b/src/Shared/Debugging/PrintLineDebugger.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Framework;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Debugging
 {
     /// <summary>
diff --git a/src/Shared/Debugging/PrintLineDebuggerWriters.cs b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
index a5c33dca011..c95ad539ff2 100644
--- a/src/Shared/Debugging/PrintLineDebuggerWriters.cs
+++ b/src/Shared/Debugging/PrintLineDebuggerWriters.cs
@@ -7,6 +7,8 @@
 using System.Linq;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.Debugging
 {
     /// <summary>
diff --git a/src/Shared/EncodingStringWriter.cs b/src/Shared/EncodingStringWriter.cs
index 18465774860..fcbcb254b7d 100644
--- a/src/Shared/EncodingStringWriter.cs
+++ b/src/Shared/EncodingStringWriter.cs
@@ -2,6 +2,8 @@
 using System.IO;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/EncodingUtilities.cs b/src/Shared/EncodingUtilities.cs
index a938dce103e..40ae3a34e5b 100644
--- a/src/Shared/EncodingUtilities.cs
+++ b/src/Shared/EncodingUtilities.cs
@@ -7,6 +7,8 @@
 using System.Linq;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index 0167e5aa721..01cf349f2f8 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -11,11 +11,6 @@ internal static partial class EnvironmentUtilities
         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;
 
         public static bool Is64BitOperatingSystem =>
-#if FEATURE_64BIT_ENVIRONMENT_QUERY
             Environment.Is64BitOperatingSystem;
-#else
-            RuntimeInformation.OSArchitecture == Architecture.Arm64 ||
-            RuntimeInformation.OSArchitecture == Architecture.X64;
-#endif
     }
 }
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index ec9ea9a668c..7b9017f4701 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -10,6 +10,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 #if BUILDINGAPPXTASKS
 namespace Microsoft.Build.AppxPackage.Shared
 #else
diff --git a/src/Shared/EscapingUtilities.cs b/src/Shared/EscapingUtilities.cs
index 723a4df0139..51a9e9465d2 100644
--- a/src/Shared/EscapingUtilities.cs
+++ b/src/Shared/EscapingUtilities.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/EventArgsFormatting.cs b/src/Shared/EventArgsFormatting.cs
index 77de4f84fc0..7c0db803f70 100644
--- a/src/Shared/EventArgsFormatting.cs
+++ b/src/Shared/EventArgsFormatting.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -51,10 +53,11 @@ internal static string FormatEventMessage(BuildWarningEventArgs e, bool showProj
         /// <param name="e">Message to format</param>
         /// <param name="showProjectFile"><code>true</code> to show the project file which issued the event, otherwise <code>false</code>.</param>
         /// <param name="projectConfigurationDescription">Properties to Print along with message</param>
+        /// <param name="nonNullMessage">The complete message (including property name) for an environment-derived property</param>
         /// <returns>The formatted message string.</returns>
-        internal static string FormatEventMessage(BuildMessageEventArgs e, bool showProjectFile, string projectConfigurationDescription)
+        internal static string FormatEventMessage(BuildMessageEventArgs e, bool showProjectFile, string projectConfigurationDescription, string nonNullMessage = null)
         {
-            return FormatEventMessage("message", e.Subcategory, e.Message,
+            return FormatEventMessage("message", e.Subcategory, nonNullMessage ?? e.Message,
                             e.Code, e.File, showProjectFile ? e.ProjectFile : null, e.LineNumber, e.EndLineNumber,
                             e.ColumnNumber, e.EndColumnNumber, e.ThreadId, projectConfigurationDescription);
         }
@@ -142,13 +145,14 @@ internal static string FormatEventMessage(BuildMessageEventArgs e)
         /// </summary>
         /// <param name="e">Message to format</param>
         /// <param name="showProjectFile">Show project file or not</param>
+        /// <param name="nonNullMessage">For an EnvironmentVariableReadEventArgs, adds an explanatory note and the name of the variable.</param>
         /// <returns>The formatted message string.</returns>
-        internal static string FormatEventMessage(BuildMessageEventArgs e, bool showProjectFile)
+        internal static string FormatEventMessage(BuildMessageEventArgs e, bool showProjectFile, string nonNullMessage = null)
         {
             ErrorUtilities.VerifyThrowArgumentNull(e, nameof(e));
 
             // "message" should not be localized
-            return FormatEventMessage("message", e.Subcategory, e.Message,
+            return FormatEventMessage("message", e.Subcategory, nonNullMessage ?? e.Message,
                 e.Code, e.File, showProjectFile ? e.ProjectFile : null, e.LineNumber, e.EndLineNumber, e.ColumnNumber, e.EndColumnNumber, e.ThreadId, null);
         }
 
@@ -217,7 +221,9 @@ internal static string FormatEventMessage
             string logOutputProperties
         )
         {
-            StringBuilder format = new StringBuilder();
+            // capacity is the longest possible path through the below
+            // to avoid reallocating while constructing the string
+            using ReuseableStringBuilder format = new(51);
 
             // Uncomment these lines to show show the processor, if present.
             /*
@@ -306,15 +312,30 @@ string logOutputProperties
 
             // If the project file was specified, tack that onto the very end.
             // Check for additional properties that should be output with project file
-            if (projectFile != null && !String.Equals(projectFile, file))
+            if (projectFile != null)
             {
-                if (logOutputProperties?.Length > 0)
+                // If the project file was specified, tack that onto the very end.
+                if (!string.Equals(projectFile, file))
                 {
-                    format.Append(" [{10}::{11}]");
+                    // Check for additional properties that should be output with project file
+                    if (logOutputProperties?.Length > 0)
+                    {
+                        format.Append(" [{10}::{11}]");
+                    }
+                    else
+                    {
+                        format.Append(" [{10}]");
+                    }
                 }
                 else
                 {
-                    format.Append(" [{10}]");
+                    // If the file location of the error _was_ the project file, append only the
+                    // additional output properties
+
+                    if (logOutputProperties?.Length > 0)
+                    {
+                        format.Append(" [{11}]");
+                    }
                 }
             }
 
@@ -326,9 +347,11 @@ string logOutputProperties
 
             string finalFormat = format.ToString();
 
+            // Reuse the string builder to create the final message
+            ReuseableStringBuilder formattedMessage = format.Clear();
+
             // If there are multiple lines, show each line as a separate message.
             string[] lines = SplitStringOnNewLines(message);
-            StringBuilder formattedMessage = new StringBuilder();
 
             for (int i = 0; i < lines.Length; i++)
             {
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index f359e71a71d..ffbf64c1033 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 #if BUILDINGAPPXTASKS
 namespace Microsoft.Build.AppxPackage.Shared
 #else
@@ -19,7 +21,7 @@ namespace Microsoft.Build.AppxPackage.Shared
 using Microsoft.Build.Shared.FileSystem;
 using System.Xml.Schema;
 using System.Runtime.Serialization;
-#if !CLR2COMPATIBILITY
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
 using Microsoft.Build.Shared.Debugging;
 #endif
 using Microsoft.Build.Framework;
@@ -32,12 +34,7 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class ExceptionHandling
     {
-        private static readonly string s_debugDumpPath;
-
-        static ExceptionHandling()
-        {
-            s_debugDumpPath = GetDebugDumpPath();
-        }
+        private static readonly string s_debugDumpPath = GetDebugDumpPath();
 
         /// <summary>
         /// Gets the location of the directory used for diagnostic log files.
@@ -300,7 +297,6 @@ internal static bool NotExpectedFunctionException(Exception e)
             return true;
         }
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
         /// <summary>
         /// Dump any unhandled exceptions to a file so they can be diagnosed
         /// </summary>
@@ -310,14 +306,13 @@ internal static void UnhandledExceptionHandler(object sender, UnhandledException
             Exception ex = (Exception)e.ExceptionObject;
             DumpExceptionToFile(ex);
         }
-#endif
 
         /// <summary>
         /// Dump the exception information to a file
         /// </summary>
         internal static void DumpExceptionToFile(Exception ex)
         {
-            //  Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because
+            // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because
             //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when
             //  applied to a static method.
             lock (typeof(ExceptionHandling))
@@ -371,7 +366,7 @@ internal static string ReadAnyExceptionFromFile(DateTime fromTimeUtc)
                 {
                     builder.Append(Environment.NewLine);
                     builder.Append(file);
-                    builder.Append(":");
+                    builder.Append(':');
                     builder.Append(Environment.NewLine);
                     builder.Append(File.ReadAllText(file));
                     builder.Append(Environment.NewLine);
diff --git a/src/Shared/ExtensionFoldersRegistryKey.cs b/src/Shared/ExtensionFoldersRegistryKey.cs
index bcfaa8c37de..a4eab36a425 100644
--- a/src/Shared/ExtensionFoldersRegistryKey.cs
+++ b/src/Shared/ExtensionFoldersRegistryKey.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/FileDelegates.cs b/src/Shared/FileDelegates.cs
index bbe0c8e39a4..f4f972ec636 100644
--- a/src/Shared/FileDelegates.cs
+++ b/src/Shared/FileDelegates.cs
@@ -3,6 +3,8 @@
 
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -53,4 +55,4 @@ namespace Microsoft.Build.Shared
     /// </summary>
     /// <param name="path">The path to create.</param>
     internal delegate FileStream FileCreate(string path);
-}
\ No newline at end of file
+}
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 6f089b3e8ad..1fb4dd23850 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -12,7 +12,8 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.Shared
 {
@@ -113,49 +114,28 @@ internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemE
                 ? getFileSystemEntries
                 : (type, path, pattern, directory, stripProjectDirectory) =>
                 {
-                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
-                    {
-                        // New behavior:
-                        // Always hit the filesystem with "*" pattern, cache the results, and do the filtering here.
-                        string cacheKey = type switch
-                        {
-                            FileSystemEntity.Files => "F",
-                            FileSystemEntity.Directories => "D",
-                            FileSystemEntity.FilesAndDirectories => "A",
-                            _ => throw new NotImplementedException()
-                        } + ";" + path;
-                        IReadOnlyList<string> allEntriesForPath = getFileSystemDirectoryEntriesCache.GetOrAdd(
-                                cacheKey,
-                                s => getFileSystemEntries(
-                                    type,
-                                    path,
-                                    "*",
-                                    directory,
-                                    false));
-                        IEnumerable<string> filteredEntriesForPath = (pattern != null && !IsAllFilesWildcard(pattern))
-                            ? allEntriesForPath.Where(o => IsFileNameMatch(o, pattern))
-                            : allEntriesForPath;
-                        return stripProjectDirectory
-                            ? RemoveProjectDirectory(filteredEntriesForPath, directory).ToArray()
-                            : filteredEntriesForPath.ToArray();
-                    }
-                    else
+                    // Always hit the filesystem with "*" pattern, cache the results, and do the filtering here.
+                    string cacheKey = type switch
                     {
-                        // Legacy behavior:
-                        // Cache only directories, for files we won't hit the cache because the file name patterns tend to be unique
-                        if (type == FileSystemEntity.Directories)
-                        {
-                            return getFileSystemDirectoryEntriesCache.GetOrAdd(
-                                $"D;{path};{pattern ?? "*"}",
-                                s => getFileSystemEntries(
-                                    type,
-                                    path,
-                                    pattern,
-                                    directory,
-                                    stripProjectDirectory).ToArray());
-                        }
-                    }
-                    return getFileSystemEntries(type, path, pattern, directory, stripProjectDirectory);
+                        FileSystemEntity.Files => "F",
+                        FileSystemEntity.Directories => "D",
+                        FileSystemEntity.FilesAndDirectories => "A",
+                        _ => throw new NotImplementedException()
+                    } + ";" + path;
+                    IReadOnlyList<string> allEntriesForPath = getFileSystemDirectoryEntriesCache.GetOrAdd(
+                            cacheKey,
+                            s => getFileSystemEntries(
+                                type,
+                                path,
+                                "*",
+                                directory,
+                                false));
+                    IEnumerable<string> filteredEntriesForPath = (pattern != null && !IsAllFilesWildcard(pattern))
+                        ? allEntriesForPath.Where(o => IsFileNameMatch(o, pattern))
+                        : allEntriesForPath;
+                    return stripProjectDirectory
+                        ? RemoveProjectDirectory(filteredEntriesForPath, directory).ToArray()
+                        : filteredEntriesForPath.ToArray();
                 };
         }
 
@@ -747,7 +727,7 @@ string projectDirectory
                     // If the project directory did not end in a slash we need to check to see if the next char in the path is a slash
                     if (!directoryLastCharIsSeparator)
                     {
-                        //If the next char after the project directory is not a slash, skip this path
+                        // If the next char after the project directory is not a slash, skip this path
                         if (path.Length <= projectDirectory.Length || !IsDirectorySeparator(path[projectDirectory.Length]))
                         {
                             yield return path;
@@ -856,7 +836,7 @@ private void GetFilesRecursive(
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,
             TaskOptions taskOptions)
         {
-            ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec== null) || (recursionState.SearchData.RegexFileMatch == null),
+            ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec == null) || (recursionState.SearchData.RegexFileMatch == null),
                 "File-spec overrides the regular expression -- pass null for file-spec if you want to use the regular expression.");
 
             ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec != null) || (recursionState.SearchData.RegexFileMatch != null),
@@ -865,7 +845,7 @@ private void GetFilesRecursive(
             ErrorUtilities.VerifyThrow(recursionState.RemainingWildcardDirectory != null, "Expected non-null remaning wildcard directory.");
 
             RecursiveStepResult[] excludeNextSteps = null;
-            //  Determine if any of searchesToExclude is necessarily a superset of the results that will be returned.
+            // Determine if any of searchesToExclude is necessarily a superset of the results that will be returned.
             //  This means all results will be excluded and we should bail out now.
             if (searchesToExclude != null)
             {
@@ -873,25 +853,25 @@ private void GetFilesRecursive(
                 for (int i = 0; i < searchesToExclude.Count; i++)
                 {
                     RecursionState searchToExclude = searchesToExclude[i];
-                    //  The BaseDirectory of all the exclude searches should be the same as the include one
+                    // The BaseDirectory of all the exclude searches should be the same as the include one
                     Debug.Assert(FileUtilities.PathsEqual(searchToExclude.BaseDirectory, recursionState.BaseDirectory), "Expected exclude search base directory to match include search base directory");
 
                     excludeNextSteps[i] = GetFilesRecursiveStep(searchesToExclude[i]);
 
-                    //  We can exclude all results in this folder if:
+                    // We can exclude all results in this folder if:
                     if (
-                        //  We are not looking for a directory matching the pattern given in SearchData.DirectoryPattern
+                        // We are not looking for a directory matching the pattern given in SearchData.DirectoryPattern
                         !searchToExclude.IsLookingForMatchingDirectory &&
-                        //  We are matching files based on a filespec and not a regular expression
+                        // We are matching files based on a filespec and not a regular expression
                         searchToExclude.SearchData.Filespec != null &&
-                        //  The wildcard path portion of the excluded search matches the include search
+                        // The wildcard path portion of the excluded search matches the include search
                         searchToExclude.RemainingWildcardDirectory == recursionState.RemainingWildcardDirectory &&
-                        //  The exclude search will match ALL filenames OR
+                        // The exclude search will match ALL filenames OR
                         (IsAllFilesWildcard(searchToExclude.SearchData.Filespec) ||
-                            //  The exclude search filename pattern matches the include search's pattern
+                            // The exclude search filename pattern matches the include search's pattern
                             searchToExclude.SearchData.Filespec == recursionState.SearchData.Filespec))
                     {
-                        //  We won't get any results from this search that we would end up keeping
+                        // We won't get any results from this search that we would end up keeping
                         return;
                     }
                 }
@@ -936,7 +916,7 @@ private void GetFilesRecursive(
 
             Action<string> processSubdirectory = subdir =>
             {
-                //  RecursionState is a struct so this copies it
+                // RecursionState is a struct so this copies it
                 var newRecursionState = recursionState;
 
                 newRecursionState.BaseDirectory = subdir;
@@ -978,7 +958,7 @@ private void GetFilesRecursive(
 
                     if (searchesToExcludeInSubdirs.TryGetValue(subdir, out searchesForSubdir))
                     {
-                        //  We've found the base directory that these exclusions apply to.  So now add them as normal searches
+                        // We've found the base directory that these exclusions apply to.  So now add them as normal searches
                         if (newSearchesToExclude == null)
                         {
                             newSearchesToExclude = new List<RecursionState>();
@@ -1033,7 +1013,7 @@ private void GetFilesRecursive(
             {
                 Parallel.ForEach(
                     _getFileSystemEntries(FileSystemEntity.Directories, recursionState.BaseDirectory, nextStep.DirectoryPattern, null, false),
-                    new ParallelOptions {MaxDegreeOfParallelism = dop},
+                    new ParallelOptions { MaxDegreeOfParallelism = dop },
                     processSubdirectory);
             }
             if (dop <= 0)
@@ -1940,8 +1920,8 @@ public TaskOptions(int maxTasks)
         /// <param name="projectDirectoryUnescaped">The project directory.</param>
         /// <param name="filespecUnescaped">Get files that match the given file spec.</param>
         /// <param name="excludeSpecsUnescaped">Exclude files that match this file spec.</param>
-        /// <returns>The array of files.</returns>
-        internal string[] GetFiles
+        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>
+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles
             (
             string projectDirectoryUnescaped,
             string filespecUnescaped,
@@ -1951,7 +1931,7 @@ internal string[] GetFiles
             // For performance. Short-circuit iff there is no wildcard.
             if (!HasWildcards(filespecUnescaped))
             {
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), SearchAction.None, string.Empty);
             }
 
             if (_cachedGlobExpansions == null)
@@ -1965,6 +1945,9 @@ internal string[] GetFiles
             var enumerationKey = ComputeFileEnumerationCacheKey(projectDirectoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
 
             IReadOnlyList<string> files;
+            string[] fileList;
+            SearchAction action = SearchAction.None;
+            string excludeFileSpec = string.Empty;
             if (!_cachedGlobExpansions.TryGetValue(enumerationKey, out files))
             {
                 // avoid parallel evaluations of the same wildcard by using a unique lock for each wildcard
@@ -1973,14 +1956,17 @@ internal string[] GetFiles
                 {
                     if (!_cachedGlobExpansions.TryGetValue(enumerationKey, out files))
                     {
-                        files =
-                            _cachedGlobExpansions.GetOrAdd(
+                        files = _cachedGlobExpansions.GetOrAdd(
                                 enumerationKey,
                                 (_) =>
-                                    GetFilesImplementation(
+                                {
+                                    (fileList, action, excludeFileSpec) = GetFilesImplementation(
                                         projectDirectoryUnescaped,
                                         filespecUnescaped,
-                                        excludeSpecsUnescaped));
+                                        excludeSpecsUnescaped);
+
+                                    return fileList;
+                                });
                     }
                 }
             }
@@ -1988,7 +1974,7 @@ internal string[] GetFiles
             // Copy the file enumerations to prevent outside modifications of the cache (e.g. sorting, escaping) and to maintain the original method contract that a new array is created on each call.
             var filesToReturn = files.ToArray();
 
-            return filesToReturn;
+            return (filesToReturn, action, excludeFileSpec);
         }
 
         private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnescaped, string filespecUnescaped, List<string> excludes)
@@ -2036,10 +2022,10 @@ private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnes
 
                     // increase the chance of cache hits when multiple relative globs refer to the same base directory
                     // todo https://github.com/dotnet/msbuild/issues/3889
-                    //if (FileUtilities.ContainsRelativePathSegments(filespecUnescaped))
-                    //{
+                    // if (FileUtilities.ContainsRelativePathSegments(filespecUnescaped))
+                    // {
                     //    filespecUnescaped = FileUtilities.GetFullPathNoThrow(filespecUnescaped);
-                    //}
+                    // }
                 }
                 catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                 {
@@ -2066,11 +2052,14 @@ private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnes
             }
         }
 
-        enum SearchAction
+        public enum SearchAction
         {
+            None,
             RunSearch,
             ReturnFileSpec,
             ReturnEmptyList,
+            FailOnDriveEnumeratingWildcard,
+            LogDriveEnumeratingWildcard
         }
 
         private SearchAction GetFileSearchData(
@@ -2134,6 +2123,16 @@ out bool isLegalFileSpec
                 return SearchAction.ReturnEmptyList;
             }
 
+            /*
+             * If a drive enumerating wildcard pattern is detected with the fixed directory and wildcard parts, then
+             * this should either be logged or an exception should be thrown.
+             */
+            bool logDriveEnumeratingWildcard = IsDriveEnumeratingWildcardPattern(fixedDirectoryPart, wildcardDirectoryPart);
+            if (logDriveEnumeratingWildcard && Traits.Instance.ThrowOnDriveEnumeratingWildcard)
+            {
+                return SearchAction.FailOnDriveEnumeratingWildcard;
+            }
+
             string directoryPattern = null;
             if (wildcardDirectoryPart.Length > 0)
             {
@@ -2142,6 +2141,7 @@ out bool isLegalFileSpec
                 // "**/.*/**" for example, and is worth special-casing so it doesn't fall into the slow regex logic.
                 string wildcard = wildcardDirectoryPart.TrimTrailingSlashes();
                 int wildcardLength = wildcard.Length;
+
                 if (wildcardLength > 6 &&
                     wildcard[0] == '*' &&
                     wildcard[1] == '*' &&
@@ -2181,6 +2181,11 @@ out bool isLegalFileSpec
             result.BaseDirectory = Normalize(fixedDirectoryPart);
             result.RemainingWildcardDirectory = Normalize(wildcardDirectoryPart);
 
+            if (logDriveEnumeratingWildcard)
+            {
+                return SearchAction.LogDriveEnumeratingWildcard;
+            }
+
             return SearchAction.RunSearch;
         }
 
@@ -2226,7 +2231,7 @@ internal static string Normalize(string aString)
             }
             else if (aString.StartsWith(@"\", StringComparison.Ordinal))
             {
-                sb.Append(@"\");
+                sb.Append('\\');
                 index = SkipSlashes(aString, 1);
             }
 
@@ -2257,6 +2262,76 @@ internal static string Normalize(string aString)
             return sb.ToString();
         }
 
+        /// <summary>
+        /// Returns true if drive enumerating wildcard patterns are detected using the directory and wildcard parts.
+        /// </summary>
+        /// <param name="directoryPart">Fixed directory string, portion of file spec info.</param>
+        /// <param name="wildcardPart">Wildcard string, portion of file spec info.</param>
+        internal static bool IsDriveEnumeratingWildcardPattern(string directoryPart, string wildcardPart)
+        {
+            int directoryPartLength = directoryPart.Length;
+            int wildcardPartLength = wildcardPart.Length;
+
+            // Handles detection of <drive letter>:<slashes>** pattern for Windows.
+            if (NativeMethodsShared.IsWindows &&
+                directoryPartLength >= 3 &&
+                wildcardPartLength >= 2 &&
+                IsDrivePatternWithoutSlash(directoryPart[0], directoryPart[1]))
+            {
+                return IsFullFileSystemScan(2, directoryPartLength, directoryPart, wildcardPart);
+            }
+
+            // Handles detection of <slashes>** pattern for any platform.
+            else if (directoryPartLength >= 1 &&
+                     wildcardPartLength >= 2)
+            {
+                return IsFullFileSystemScan(0, directoryPartLength, directoryPart, wildcardPart);
+            }
+
+            return false;
+        }
+
+        /// <summary>
+        /// Returns true if given characters follow a drive pattern without the slash (ex: C:).
+        /// </summary>
+        /// <param name="firstValue">First char from directory part of file spec string.</param>
+        /// <param name="secondValue">Second char from directory part of file spec string.</param>
+        private static bool IsDrivePatternWithoutSlash(char firstValue, char secondValue)
+        {
+            return IsValidDriveChar(firstValue) && (secondValue == ':');
+        }
+
+        /// <summary>
+        /// Returns true if selected characters from the fixed directory and wildcard pattern make up the "{any number of slashes}**" pattern.
+        /// </summary>
+        /// <param name="directoryPartIndex">Starting index to begin detecting slashes in directory part of file spec string.</param>
+        /// <param name="directoryPartLength">Length of directory part of file spec string.</param>
+        /// <param name="directoryPart">Fixed directory string, portion of file spec info.</param>
+        /// <param name="wildcardPart">Wildcard string, portion of file spec info.</param>
+        private static bool IsFullFileSystemScan(int directoryPartIndex, int directoryPartLength, string directoryPart, string wildcardPart)
+        {
+            for (int i = directoryPartIndex; i < directoryPartLength; i++)
+            {
+                if (!FileUtilities.IsAnySlash(directoryPart[i]))
+                {
+                    return false;
+                }
+            }
+
+            return (wildcardPart[0] == '*') && (wildcardPart[1] == '*');
+        }
+
+        /// <summary>
+        /// Returns true if the given character is a valid drive letter.
+        /// </summary>
+        /// <remarks>
+        /// Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/PathInternal.Windows.cs#L77-L83
+        /// </remarks>
+        private static bool IsValidDriveChar(char value)
+        {
+            return (value >= 'A' && value <= 'Z') || (value >= 'a' && value <= 'z');
+        }
+
         /// <summary>
         /// Skips slash characters in a string.
         /// </summary>
@@ -2275,15 +2350,6 @@ private static int SkipSlashes(string aString, int startingIndex)
             return index;
         }
 
-        // copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/PathInternal.Windows.cs#L77-L83
-        /// <summary>
-        /// Returns true if the given character is a valid drive letter
-        /// </summary>
-        private static bool IsValidDriveChar(char value)
-        {
-            return (value >= 'A' && value <= 'Z') || (value >= 'a' && value <= 'z');
-        }
-
         private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUnescaped, List<string> excludeSpecsUnescaped)
         {
             if (excludeSpecsUnescaped != null)
@@ -2316,8 +2382,8 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn
         /// <param name="projectDirectoryUnescaped">The project directory.</param>
         /// <param name="filespecUnescaped">Get files that match the given file spec.</param>
         /// <param name="excludeSpecsUnescaped">Exclude files that match this file spec.</param>
-        /// <returns>The array of files.</returns>
-        private string[] GetFilesImplementation(
+        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>
+        private (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFilesImplementation(
             string projectDirectoryUnescaped,
             string filespecUnescaped,
             List<string> excludeSpecsUnescaped)
@@ -2332,31 +2398,39 @@ private string[] GetFilesImplementation(
 
             if (action == SearchAction.ReturnEmptyList)
             {
-                return Array.Empty<string>();
+                return (Array.Empty<string>(), action, string.Empty);
             }
             else if (action == SearchAction.ReturnFileSpec)
             {
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), action, string.Empty);
+            }
+            else if (action == SearchAction.FailOnDriveEnumeratingWildcard)
+            {
+                return (Array.Empty<string>(), action, string.Empty);
             }
-            else if (action != SearchAction.RunSearch)
+            else if ((action != SearchAction.RunSearch) && (action != SearchAction.LogDriveEnumeratingWildcard))
             {
-                //  This means the enum value wasn't valid (or a new one was added without updating code correctly)
+                // This means the enum value wasn't valid (or a new one was added without updating code correctly)
                 throw new NotSupportedException(action.ToString());
             }
 
             List<RecursionState> searchesToExclude = null;
 
-            //  Exclude searches which will become active when the recursive search reaches their BaseDirectory.
+            // Exclude searches which will become active when the recursive search reaches their BaseDirectory.
             //  The BaseDirectory of the exclude search is the key for this dictionary.
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs = null;
 
+            // Track the search action and exclude file spec for proper detection and logging of drive enumerating wildcards.
+            SearchAction trackSearchAction = action;
+            string trackExcludeFileSpec = string.Empty;
+
             HashSet<string> resultsToExclude = null;
             if (excludeSpecsUnescaped != null)
             {
                 searchesToExclude = new List<RecursionState>();
                 foreach (string excludeSpec in excludeSpecsUnescaped)
                 {
-                    //  This is ignored, we always use the include pattern's value for stripProjectDirectory
+                    // This is ignored, we always use the include pattern's value for stripProjectDirectory
                     var excludeAction = GetFileSearchData(projectDirectoryUnescaped, excludeSpec,
                         out _, out RecursionState excludeState);
 
@@ -2372,12 +2446,21 @@ private string[] GetFilesImplementation(
                     }
                     else if (excludeAction == SearchAction.ReturnEmptyList)
                     {
-                        //  Nothing to do
+                        // Nothing to do
                         continue;
                     }
-                    else if (excludeAction != SearchAction.RunSearch)
+                    else if (excludeAction == SearchAction.FailOnDriveEnumeratingWildcard)
                     {
-                        //  This means the enum value wasn't valid (or a new one was added without updating code correctly)
+                        return (Array.Empty<string>(), excludeAction, excludeSpec);
+                    }
+                    else if (excludeAction == SearchAction.LogDriveEnumeratingWildcard)
+                    {
+                        trackSearchAction = excludeAction;
+                        trackExcludeFileSpec = excludeSpec;
+                    }
+                    else if ((excludeAction != SearchAction.RunSearch) && (excludeAction != SearchAction.LogDriveEnumeratingWildcard))
+                    {
+                        // This means the enum value wasn't valid (or a new one was added without updating code correctly)
                         throw new NotSupportedException(excludeAction.ToString());
                     }
 
@@ -2386,25 +2469,25 @@ private string[] GetFilesImplementation(
 
                     if (!string.Equals(excludeBaseDirectory, includeBaseDirectory, StringComparison.OrdinalIgnoreCase))
                     {
-                        //  What to do if the BaseDirectory for the exclude search doesn't match the one for inclusion?
+                        // What to do if the BaseDirectory for the exclude search doesn't match the one for inclusion?
                         //  - If paths don't match (one isn't a prefix of the other), then ignore the exclude search.  Examples:
                         //      - c:\Foo\ - c:\Bar\
                         //      - c:\Foo\Bar\ - C:\Foo\Baz\
                         //      - c:\Foo\ - c:\Foo2\
                         if (excludeBaseDirectory.Length == includeBaseDirectory.Length)
                         {
-                            //  Same length, but different paths.  Ignore this exclude search
+                            // Same length, but different paths.  Ignore this exclude search
                             continue;
                         }
                         else if (excludeBaseDirectory.Length > includeBaseDirectory.Length)
                         {
                             if (!IsSubdirectoryOf(excludeBaseDirectory, includeBaseDirectory))
                             {
-                                //  Exclude path is longer, but doesn't start with include path.  So ignore it.
+                                // Exclude path is longer, but doesn't start with include path.  So ignore it.
                                 continue;
                             }
 
-                            //  - The exclude BaseDirectory is somewhere under the include BaseDirectory. So
+                            // - The exclude BaseDirectory is somewhere under the include BaseDirectory. So
                             //    keep the exclude search, but don't do any processing on it while recursing until the baseDirectory
                             //    in the recursion matches the exclude BaseDirectory.  Examples:
                             //      - Include - Exclude
@@ -2426,25 +2509,25 @@ private string[] GetFilesImplementation(
                         }
                         else
                         {
-                            //  Exclude base directory length is less than include base directory length.
+                            // Exclude base directory length is less than include base directory length.
                             if (!IsSubdirectoryOf(state.BaseDirectory, excludeState.BaseDirectory))
                             {
-                                //  Include path is longer, but doesn't start with the exclude path.  So ignore exclude path
+                                // Include path is longer, but doesn't start with the exclude path.  So ignore exclude path
                                 //  (since it won't match anything under the include path)
                                 continue;
                             }
 
-                            //  Now check the wildcard part
+                            // Now check the wildcard part
                             if (excludeState.RemainingWildcardDirectory.Length == 0)
                             {
-                                //  The wildcard part is empty, so ignore the exclude search, as it's looking for files non-recursively
+                                // The wildcard part is empty, so ignore the exclude search, as it's looking for files non-recursively
                                 //  in a folder higher up than the include baseDirectory.
                                 //  Example: include="c:\git\msbuild\src\Framework\**\*.cs" exclude="c:\git\msbuild\*.cs"
                                 continue;
                             }
                             else if (IsRecursiveDirectoryMatch(excludeState.RemainingWildcardDirectory))
                             {
-                                //  The wildcard part is exactly "**\", so the exclude pattern will apply to everything in the include
+                                // The wildcard part is exactly "**\", so the exclude pattern will apply to everything in the include
                                 //  pattern, so simply update the exclude's BaseDirectory to be the same as the include baseDirectory
                                 //  Example: include="c:\git\msbuild\src\Framework\**\*.*" exclude="c:\git\msbuild\**\*.bak"
                                 excludeState.BaseDirectory = state.BaseDirectory;
@@ -2452,7 +2535,7 @@ private string[] GetFilesImplementation(
                             }
                             else
                             {
-                                //  The wildcard part is non-empty and not "**\", so we will need to match it with a Regex.  Fortunately
+                                // The wildcard part is non-empty and not "**\", so we will need to match it with a Regex.  Fortunately
                                 //  these conditions mean that it needs to be matched with a Regex anyway, so here we will update the
                                 //  BaseDirectory to be the same as the exclude BaseDirectory, and change the wildcard part to be "**\"
                                 //  because we don't know where the different parts of the exclude wildcard part would be matched.
@@ -2527,19 +2610,19 @@ private string[] GetFilesImplementation(
                     taskOptions);
             }
             // Catch exceptions that are thrown inside the Parallel.ForEach
-            catch (AggregateException ex)
+            catch (AggregateException ex) when (InnerExceptionsAreAllIoRelated(ex))
             {
                 // Flatten to get exceptions than are thrown inside a nested Parallel.ForEach
                 if (ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException))
                 {
-                    return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                    return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);
                 }
                 throw;
             }
             catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))
             {
                 // Assume it's not meant to be a path
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);
             }
 
             /*
@@ -2549,7 +2632,12 @@ private string[] GetFilesImplementation(
                 ? listOfFiles.SelectMany(list => list).Where(f => !resultsToExclude.Contains(f)).ToArray()
                 : listOfFiles.SelectMany(list => list).ToArray();
 
-            return files;
+            return (files, trackSearchAction, trackExcludeFileSpec);
+        }
+
+        private bool InnerExceptionsAreAllIoRelated(AggregateException ex)
+        {
+            return ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException);
         }
 
         private static bool IsSubdirectoryOf(string possibleChild, string possibleParent)
diff --git a/src/Shared/FileSystem/CachingFileSystemWrapper.cs b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
index b541f1b44f7..7dc859b7a61 100644
--- a/src/Shared/FileSystem/CachingFileSystemWrapper.cs
+++ b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     internal class CachingFileSystemWrapper : IFileSystem
diff --git a/src/Shared/FileSystem/FileSystems.cs b/src/Shared/FileSystem/FileSystems.cs
index 15b6b43bb2b..8a072f89e62 100644
--- a/src/Shared/FileSystem/FileSystems.cs
+++ b/src/Shared/FileSystem/FileSystems.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileSystem/IFileSystem.cs b/src/Shared/FileSystem/IFileSystem.cs
index c5e32373eec..52d37af1d08 100644
--- a/src/Shared/FileSystem/IFileSystem.cs
+++ b/src/Shared/FileSystem/IFileSystem.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
 
@@ -14,7 +16,7 @@ namespace Microsoft.Build.Shared.FileSystem
      * Any new code should depend on MSBuildFileSystemBase instead of IFileSystem, if possible.
      *
      * MSBuild uses IFileSystem internally and adapts MSBuildFileSystemBase instances received from the outside to IFileSystem.
-     * Ideally there should be only one, public interface. However, such an interface would need to be put into the 
+     * Ideally there should be only one, public interface. However, such an interface would need to be put into the
      * Microsoft.Build.Framework assembly, but that assembly cannot take new types because it breaks some old version of Nuget.exe.
      * IFileSystem cannot be deleted for the same reason.
      */
diff --git a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
index e0be3971d7a..3dd41850342 100644
--- a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
+++ b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index 982a7d97273..894249cbd64 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
@@ -22,7 +24,7 @@ private static bool ShouldUseMicrosoftIO
             get
             {
 #if !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0);
+                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0) && NativeMethodsShared.IsWindows;
 #else
                 // We need to mock usage of ChangeWaves class,
                 // because Microsoft.Build.Engine.OM.UnitTests should not have access to internals of Microsoft.Build.Framework.
diff --git a/src/Shared/FileSystem/NativeWin32Exception.cs b/src/Shared/FileSystem/NativeWin32Exception.cs
index b431c5cd2fa..e013be4f15d 100644
--- a/src/Shared/FileSystem/NativeWin32Exception.cs
+++ b/src/Shared/FileSystem/NativeWin32Exception.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileSystem/SafeFileHandle.cs b/src/Shared/FileSystem/SafeFileHandle.cs
index 9f6a0d7c767..e24195c838a 100644
--- a/src/Shared/FileSystem/SafeFileHandle.cs
+++ b/src/Shared/FileSystem/SafeFileHandle.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Win32.SafeHandles;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileSystem/WindowsFileSystem.cs b/src/Shared/FileSystem/WindowsFileSystem.cs
index 60b7d8ececa..03c739e6710 100644
--- a/src/Shared/FileSystem/WindowsFileSystem.cs
+++ b/src/Shared/FileSystem/WindowsFileSystem.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileSystem/WindowsNative.cs b/src/Shared/FileSystem/WindowsNative.cs
index 416e91a5a16..6ff01bc882c 100644
--- a/src/Shared/FileSystem/WindowsNative.cs
+++ b/src/Shared/FileSystem/WindowsNative.cs
@@ -8,6 +8,8 @@
 using System.IO;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.FileSystem
 {
     /// <summary>
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 940bcd46ce9..9628a41db61 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -20,6 +20,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -163,6 +165,30 @@ internal static int GetPathsHash(IEnumerable<string> assemblyPaths)
             return builder.ToString().GetHashCode();
         }
 
+        /// <summary>
+        /// Returns whether MSBuild can write to the given directory. Throws for PathTooLongExceptions
+        /// but not other exceptions.
+        /// </summary>
+        internal static bool CanWriteToDirectory(string directory)
+        {
+            try
+            {
+                string testFilePath = Path.Combine(directory, $"MSBuild_{Guid.NewGuid().ToString("N")}_testFile.txt");
+                File.WriteAllText(testFilePath, $"MSBuild process {Process.GetCurrentProcess().Id} successfully wrote to file.");
+                File.Delete(testFilePath);
+                return true;
+            }
+            catch (PathTooLongException)
+            {
+                ErrorUtilities.ThrowArgument("DebugPathTooLong", directory);
+                return false; // Should never reach here.
+            }
+            catch (Exception)
+            {
+                return false;
+            }
+        }
+
         /// <summary>
         /// Clears the MSBuild runtime cache
         /// </summary>
@@ -241,6 +267,58 @@ internal static string EnsureNoTrailingSlash(string path)
             return path;
         }
 
+        /// <summary>
+        /// Ensures the path is enclosed within single quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureSingleQuotes(string path)
+        {
+            return EnsureQuotes(path);
+        }
+
+        /// <summary>
+        /// Ensures the path is enclosed within double quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureDoubleQuotes(string path)
+        {
+            return EnsureQuotes(path, isSingleQuote: false);
+        }
+
+        /// <summary>
+        /// Ensures the path is enclosed within quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <param name="isSingleQuote">Indicates if single or double quotes should be used</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)
+        {
+            path = FixFilePath(path);
+
+            const char singleQuote = '\'';
+            const char doubleQuote = '\"';
+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;
+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;
+
+            if (!string.IsNullOrEmpty(path))
+            {
+                // Special case: convert the quotes.
+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)
+                {
+                    path = $"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}";
+                }
+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.
+                else if (path.Length == 1 || path[0] != targetQuote || path[path.Length - 1] != targetQuote)
+                {
+                    path = $"{targetQuote}{path}{targetQuote}";
+                }
+            }
+
+            return path;
+        }
+
         /// <summary>
         /// Indicates if the given file-spec ends with a slash.
         /// </summary>
@@ -268,6 +346,11 @@ internal static bool IsSlash(char c)
         /// </summary>
         internal static string TrimAndStripAnyQuotes(string path)
         {
+            if (path is null)
+            {
+                return path;
+            }
+
             // Trim returns the same string if trimming isn't needed
             path = path.Trim();
             path = path.Trim(new char[] { '"' });
@@ -285,7 +368,7 @@ internal static String GetDirectoryNameOfFullPath(String fullPath)
             if (fullPath != null)
             {
                 int i = fullPath.Length;
-                while (i > 0 && fullPath[--i] != Path.DirectorySeparatorChar && fullPath[i] != Path.AltDirectorySeparatorChar) ;
+                while (i > 0 && fullPath[--i] != Path.DirectorySeparatorChar && fullPath[i] != Path.AltDirectorySeparatorChar);
                 return FixFilePath(fullPath.Substring(0, i));
             }
             return null;
@@ -447,7 +530,7 @@ From Path.cs in the CLR
 
         internal static string FixFilePath(string path)
         {
-            return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/');//.Replace("//", "/");
+            return string.IsNullOrEmpty(path) || Path.DirectorySeparatorChar == '\\' ? path : path.Replace('\\', '/'); // .Replace("//", "/");
         }
 
 #if !CLR2COMPATIBILITY
@@ -822,7 +905,7 @@ internal static void DeleteDirectoryNoThrow(string path, bool recursive, int ret
         /// </remarks>
         internal static void DeleteWithoutTrailingBackslash(string path, bool recursive = false)
         {
-            //  Some tests (such as FileMatcher and Evaluation tests) were failing with an UnauthorizedAccessException or directory not empty.
+            // Some tests (such as FileMatcher and Evaluation tests) were failing with an UnauthorizedAccessException or directory not empty.
             //  This retry logic works around that issue.
             const int NUM_TRIES = 3;
             for (int i = 0; i < NUM_TRIES; i++)
@@ -831,17 +914,17 @@ internal static void DeleteWithoutTrailingBackslash(string path, bool recursive
                 {
                     Directory.Delete(EnsureNoTrailingSlash(path), recursive);
 
-                    //  If we got here, the directory was successfully deleted
+                    // If we got here, the directory was successfully deleted
                     return;
                 }
                 catch (Exception ex) when (ex is IOException || ex is UnauthorizedAccessException)
                 {
                     if (i == NUM_TRIES - 1)
                     {
-                        //var files = Directory.GetFiles(path, "*.*", SearchOption.AllDirectories);
-                        //string fileString = string.Join(Environment.NewLine, files);
-                        //string message = $"Unable to delete directory '{path}'.  Contents:" + Environment.NewLine + fileString;
-                        //throw new IOException(message, ex);
+                        // var files = Directory.GetFiles(path, "*.*", SearchOption.AllDirectories);
+                        // string fileString = string.Join(Environment.NewLine, files);
+                        // string message = $"Unable to delete directory '{path}'.  Contents:" + Environment.NewLine + fileString;
+                        // throw new IOException(message, ex);
                         throw;
                     }
                 }
@@ -1087,27 +1170,6 @@ internal static string MakeRelative(string basePath, string path)
             return StringBuilderCache.GetStringAndRelease(sb);
         }
 
-        /// <summary>
-        /// Helper function to create an Uri object from path.
-        /// </summary>
-        /// <param name="path">path string</param>
-        /// <returns>uri object</returns>
-        private static Uri CreateUriFromPath(string path)
-        {
-            ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
-
-            Uri pathUri;
-
-            // Try absolute first, then fall back on relative, otherwise it
-            // makes some absolute UNC paths like (\\foo\bar) relative ...
-            if (!Uri.TryCreate(path, UriKind.Absolute, out pathUri))
-            {
-                pathUri = new Uri(path, UriKind.Relative);
-            }
-
-            return pathUri;
-        }
-
         /// <summary>
         /// Normalizes the path if and only if it is longer than max path,
         /// or would be if rooted by the current directory.
diff --git a/src/Shared/FileUtilitiesRegex.cs b/src/Shared/FileUtilitiesRegex.cs
index d3e3b97af5f..de492cc69ac 100644
--- a/src/Shared/FileUtilitiesRegex.cs
+++ b/src/Shared/FileUtilitiesRegex.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.CompilerServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -13,8 +15,8 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class FileUtilitiesRegex
     {
-        private static readonly char _backSlash = '\\';
-        private static readonly char _forwardSlash = '/';
+        private const char _backSlash = '\\';
+        private const char _forwardSlash = '/';
 
         /// <summary>
         /// Indicates whether the specified string follows the pattern drive pattern (for example "C:", "D:").
@@ -77,7 +79,7 @@ internal static bool StartsWithDrivePatternWithSlash(string pattern)
         /// <returns>true if comprises UNC pattern.</returns>
         internal static bool IsUncPattern(string pattern)
         {
-            //Return value == pattern.length means:
+            // Return value == pattern.length means:
             //  meets minimum unc requirements
             //  pattern does not end in a '/' or '\'
             //  if a subfolder were found the value returned would be length up to that subfolder, therefore no subfolder exists
@@ -91,7 +93,7 @@ internal static bool IsUncPattern(string pattern)
         /// <returns>true if starts with UNC pattern.</returns>
         internal static bool StartsWithUncPattern(string pattern)
         {
-            //Any non -1 value returned means there was a match, therefore is begins with the pattern.
+            // Any non -1 value returned means there was a match, therefore is begins with the pattern.
             return StartsWithUncPatternMatchLength(pattern) != -1;
         }
 
@@ -112,17 +114,17 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
 
             for (int i = 2; i < pattern.Length; i++)
             {
-                //Real UNC paths should only contain backslashes. However, the previous
+                // Real UNC paths should only contain backslashes. However, the previous
                 // regex pattern accepted both so functionality will be retained.
                 if (pattern[i] == _backSlash ||
                     pattern[i] == _forwardSlash)
                 {
                     if (prevCharWasSlash)
                     {
-                        //We get here in the case of an extra slash.
+                        // We get here in the case of an extra slash.
                         return -1;
                     }
-                    else if(hasShare)
+                    else if (hasShare)
                     {
                         return i;
                     }
@@ -136,9 +138,9 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
                 }
             }
 
-            if(!hasShare)
+            if (!hasShare)
             {
-                //no subfolder means no unc pattern. string is something like "\\abc" in this case
+                // no subfolder means no unc pattern. string is something like "\\abc" in this case
                 return -1;
             }
 
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index 42237dde8c9..01ff320cf7d 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -11,6 +11,8 @@
 
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -31,7 +33,7 @@ internal enum DotNetFrameworkArchitecture
         /// <summary>
         /// Indicates the 64-bit .NET Framework
         /// </summary>
-        Bitness64 = 2
+        Bitness64 = 2,
     }
 
     /// <summary>
@@ -70,7 +72,7 @@ internal static class FrameworkLocationHelper
         internal static readonly Version visualStudioVersion170 = new Version(17, 0);
 
         // keep this up-to-date; always point to the latest visual studio version.
-        internal static readonly Version visualStudioVersionLatest = visualStudioVersion160;
+        internal static readonly Version visualStudioVersionLatest = visualStudioVersion170;
 
         private const string dotNetFrameworkRegistryPath = "SOFTWARE\\Microsoft\\.NETFramework";
         private const string dotNetFrameworkSetupRegistryPath = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP";
@@ -143,7 +145,7 @@ internal static class FrameworkLocationHelper
         /// <summary>
         /// List the supported .net versions.
         /// </summary>
-        private static readonly DotNetFrameworkSpec[] s_dotNetFrameworkSpecs =
+        private static DotNetFrameworkSpec[] DotNetFrameworkSpecs() => new DotNetFrameworkSpec[]
         {
             // v1.1
             new DotNetFrameworkSpecLegacy(
@@ -223,7 +225,7 @@ internal static class FrameworkLocationHelper
         /// <remarks>
         /// The items must be ordered by the version, because some methods depend on that fact to find the previous visual studio version.
         /// </remarks>
-        private static readonly VisualStudioSpec[] s_visualStudioSpecs =
+        private static readonly Lazy<VisualStudioSpec[]> VisualStudioSpecs = new(() => new VisualStudioSpec[]
         {
             // VS10
             new VisualStudioSpec(visualStudioVersion100, "Windows\\v7.0A", null, null, new []
@@ -253,7 +255,7 @@ internal static class FrameworkLocationHelper
                 dotNetFrameworkVersion40,
                 dotNetFrameworkVersion45,
                 dotNetFrameworkVersion451,
-                dotNetFrameworkVersion452
+                dotNetFrameworkVersion452,
             }),
 
             // VS14
@@ -267,7 +269,7 @@ internal static class FrameworkLocationHelper
                 dotNetFrameworkVersion451,
                 dotNetFrameworkVersion452,
                 dotNetFrameworkVersion46,
-                dotNetFrameworkVersion461
+                dotNetFrameworkVersion461,
             }),
 
             // VS15
@@ -326,7 +328,7 @@ internal static class FrameworkLocationHelper
                 dotNetFrameworkVersion472,
                 dotNetFrameworkVersion48,
             }),
-        };
+        });
 
 #if FEATURE_WIN32_REGISTRY
         /// <summary>
@@ -371,20 +373,14 @@ private static readonly (Version, Version)[,] s_explicitFallbackRulesForPathToDo
             { (dotNetFrameworkVersion471, visualStudioVersion160), (dotNetFrameworkVersion47, visualStudioVersion160) },
             { (dotNetFrameworkVersion472, visualStudioVersion160), (dotNetFrameworkVersion471, visualStudioVersion160) },
             { (dotNetFrameworkVersion48, visualStudioVersion160), (dotNetFrameworkVersion472, visualStudioVersion160) },
-       };
+        };
 #endif // FEATURE_WIN32_REGISTRY
 
-        private static readonly IReadOnlyDictionary<Version, DotNetFrameworkSpec> s_dotNetFrameworkSpecDict;
-        private static readonly IReadOnlyDictionary<Version, VisualStudioSpec> s_visualStudioSpecDict;
+        private static readonly Lazy<IReadOnlyDictionary<Version, DotNetFrameworkSpec>> DotNetFrameworkSpecDict = new(() => DotNetFrameworkSpecs().ToDictionary(spec => spec.Version));
+        private static readonly Lazy<IReadOnlyDictionary<Version, VisualStudioSpec>> VisualStudioSpecDict = new(() => VisualStudioSpecs.Value.ToDictionary(spec => spec.Version));
 
 #endregion // Static member variables
 
-        static FrameworkLocationHelper()
-        {
-            s_dotNetFrameworkSpecDict = s_dotNetFrameworkSpecs.ToDictionary(spec => spec.Version);
-            s_visualStudioSpecDict = s_visualStudioSpecs.ToDictionary(spec => spec.Version);
-        }
-
 #region Static properties
 
         internal static string PathToDotNetFrameworkV11
@@ -1116,13 +1112,13 @@ private static string FindRegistryValueUnderKey
 
         private static VisualStudioSpec GetVisualStudioSpec(Version version)
         {
-            ErrorUtilities.VerifyThrowArgument(s_visualStudioSpecDict.TryGetValue(version, out VisualStudioSpec spec), "FrameworkLocationHelper.UnsupportedVisualStudioVersion", version);
+            ErrorUtilities.VerifyThrowArgument(VisualStudioSpecDict.Value.TryGetValue(version, out VisualStudioSpec spec), "FrameworkLocationHelper.UnsupportedVisualStudioVersion", version);
             return spec;
         }
 
         private static DotNetFrameworkSpec GetDotNetFrameworkSpec(Version version)
         {
-            ErrorUtilities.VerifyThrowArgument(s_dotNetFrameworkSpecDict.TryGetValue(version, out DotNetFrameworkSpec spec), "FrameworkLocationHelper.UnsupportedFrameworkVersion", version);
+            ErrorUtilities.VerifyThrowArgument(DotNetFrameworkSpecDict.Value.TryGetValue(version, out DotNetFrameworkSpec spec), "FrameworkLocationHelper.UnsupportedFrameworkVersion", version);
             return spec;
         }
 
@@ -1471,11 +1467,11 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
                         // i.e. fallback to v110 if the current visual studio version is v120.
                         if (!foundExplicitRule)
                         {
-                            int index = Array.IndexOf(s_visualStudioSpecs, visualStudioSpec);
+                            int index = Array.IndexOf(VisualStudioSpecs.Value, visualStudioSpec);
                             if (index > 0)
                             {
                                 // The items in the array "visualStudioSpecs" must be ordered by version. That would allow us to fallback to the previous visual studio version easily.
-                                VisualStudioSpec fallbackVisualStudioSpec = s_visualStudioSpecs[index - 1];
+                                VisualStudioSpec fallbackVisualStudioSpec = VisualStudioSpecs.Value[index - 1];
                                 generatedPathToDotNetFrameworkSdkTools = FallbackToPathToDotNetFrameworkSdkToolsInPreviousVersion(
                                     this.Version,
                                     fallbackVisualStudioSpec.Version);
@@ -1568,10 +1564,8 @@ public virtual string GetPathToWindowsSdk()
 #if FEATURE_WIN32_REGISTRY
             private static string FallbackToPathToDotNetFrameworkSdkToolsInPreviousVersion(Version dotNetFrameworkVersion, Version visualStudioVersion)
             {
-                VisualStudioSpec visualStudioSpec;
-                DotNetFrameworkSpec dotNetFrameworkSpec;
-                if (s_visualStudioSpecDict.TryGetValue(visualStudioVersion, out visualStudioSpec)
-                    && s_dotNetFrameworkSpecDict.TryGetValue(dotNetFrameworkVersion, out dotNetFrameworkSpec)
+                if (VisualStudioSpecDict.Value.TryGetValue(visualStudioVersion, out VisualStudioSpec visualStudioSpec)
+                    && DotNetFrameworkSpecDict.Value.TryGetValue(dotNetFrameworkVersion, out DotNetFrameworkSpec dotNetFrameworkSpec)
                     && visualStudioSpec.SupportedDotNetFrameworkVersions.Contains(dotNetFrameworkVersion))
                 {
                     return dotNetFrameworkSpec.GetPathToDotNetFrameworkSdkTools(visualStudioSpec);
diff --git a/src/Shared/IConstrainedEqualityComparer.cs b/src/Shared/IConstrainedEqualityComparer.cs
index 50f1bf44d99..bedd0146be9 100644
--- a/src/Shared/IConstrainedEqualityComparer.cs
+++ b/src/Shared/IConstrainedEqualityComparer.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Shared/IElementLocation.cs b/src/Shared/IElementLocation.cs
index b9b26cfd74b..fb1d1d25849 100644
--- a/src/Shared/IElementLocation.cs
+++ b/src/Shared/IElementLocation.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/IKeyed.cs b/src/Shared/IKeyed.cs
index 43457411506..c3798db36f4 100644
--- a/src/Shared/IKeyed.cs
+++ b/src/Shared/IKeyed.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -19,4 +21,4 @@ string Key
             get;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Shared/INodeEndpoint.cs b/src/Shared/INodeEndpoint.cs
index a7dca856dd6..cb8ce4a4c0a 100644
--- a/src/Shared/INodeEndpoint.cs
+++ b/src/Shared/INodeEndpoint.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     #region Delegates
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 501402c8756..481a99bfce9 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     #region Enums
diff --git a/src/Shared/INodePacketFactory.cs b/src/Shared/INodePacketFactory.cs
index 6b94bf0ef1c..9449c2aa021 100644
--- a/src/Shared/INodePacketFactory.cs
+++ b/src/Shared/INodePacketFactory.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/INodePacketHandler.cs b/src/Shared/INodePacketHandler.cs
index 2b37942271e..c8e3a6c77c4 100644
--- a/src/Shared/INodePacketHandler.cs
+++ b/src/Shared/INodePacketHandler.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/ITranslatable.cs b/src/Shared/ITranslatable.cs
index a235e30aa2e..7492f801260 100644
--- a/src/Shared/ITranslatable.cs
+++ b/src/Shared/ITranslatable.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index c3360d19224..42274c2da1d 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -126,6 +128,12 @@ BinaryWriter Writer
         /// <param name="value">The value to be translated.</param>
         void Translate(ref int value);
 
+        /// <summary>
+        /// Translates an <see langword="int"/> array.
+        /// </summary>
+        /// <param name="array">The array to be translated.</param>
+        void Translate(ref int[] array);
+
         /// <summary>
         /// Translates a long.
         /// </summary>
diff --git a/src/Shared/InprocTrackingNativeMethods.cs b/src/Shared/InprocTrackingNativeMethods.cs
index 03d583703f6..80da8f6abff 100644
--- a/src/Shared/InprocTrackingNativeMethods.cs
+++ b/src/Shared/InprocTrackingNativeMethods.cs
@@ -18,6 +18,8 @@
 using System.Runtime.Versioning;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index 389450a2242..7f186597527 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -15,6 +15,8 @@
 
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build
 {
     /// <summary>
diff --git a/src/Shared/LanguageParser/CSharptokenCharReader.cs b/src/Shared/LanguageParser/CSharptokenCharReader.cs
index 38f35bfd895..7dad4a3c123 100644
--- a/src/Shared/LanguageParser/CSharptokenCharReader.cs
+++ b/src/Shared/LanguageParser/CSharptokenCharReader.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
@@ -131,4 +133,3 @@ internal bool SinkMultipleWhiteSpace()
         }
     }
 }
-
diff --git a/src/Shared/LanguageParser/CSharptokenEnumerator.cs b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
index d3d01f4c042..6cd1204c112 100644
--- a/src/Shared/LanguageParser/CSharptokenEnumerator.cs
+++ b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LanguageParser/CSharptokenizer.cs b/src/Shared/LanguageParser/CSharptokenizer.cs
index 0f0ea0983b7..eedeedd05a8 100644
--- a/src/Shared/LanguageParser/CSharptokenizer.cs
+++ b/src/Shared/LanguageParser/CSharptokenizer.cs
@@ -4,6 +4,8 @@
 using System.IO;
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LanguageParser/StreamMappedString.cs b/src/Shared/LanguageParser/StreamMappedString.cs
index a5e11f905ad..f8fda805458 100644
--- a/src/Shared/LanguageParser/StreamMappedString.cs
+++ b/src/Shared/LanguageParser/StreamMappedString.cs
@@ -5,6 +5,8 @@
 using System.IO;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /// <summary>
diff --git a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
index f409167ce25..4686976eee1 100644
--- a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
@@ -253,4 +255,3 @@ internal bool SinkTypeCharacter()
         }
     }
 }
-
diff --git a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
index e0304216852..3fbc3b0ed4b 100644
--- a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LanguageParser/VisualBasictokenizer.cs b/src/Shared/LanguageParser/VisualBasictokenizer.cs
index ee2a0699596..3dfff889a24 100644
--- a/src/Shared/LanguageParser/VisualBasictokenizer.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenizer.cs
@@ -4,6 +4,8 @@
 using System.IO;
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LanguageParser/token.cs b/src/Shared/LanguageParser/token.cs
index 495d648099d..2322048c796 100644
--- a/src/Shared/LanguageParser/token.cs
+++ b/src/Shared/LanguageParser/token.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LanguageParser/tokenChar.cs b/src/Shared/LanguageParser/tokenChar.cs
index 98c179f63e1..fc1c21907e3 100644
--- a/src/Shared/LanguageParser/tokenChar.cs
+++ b/src/Shared/LanguageParser/tokenChar.cs
@@ -3,6 +3,8 @@
 
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /// <summary>
@@ -171,4 +173,3 @@ static internal bool IsOctalDigit(char c)
         }
     }
 }
-
diff --git a/src/Shared/LanguageParser/tokenCharReader.cs b/src/Shared/LanguageParser/tokenCharReader.cs
index 3f326e75c3b..ddd8b1d91a4 100644
--- a/src/Shared/LanguageParser/tokenCharReader.cs
+++ b/src/Shared/LanguageParser/tokenCharReader.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
@@ -351,4 +353,3 @@ internal bool SinkMultipleDecimalDigits()
         }
     }
 }
-
diff --git a/src/Shared/LanguageParser/tokenEnumerator.cs b/src/Shared/LanguageParser/tokenEnumerator.cs
index 8863c3529f7..8c691dcb8b8 100644
--- a/src/Shared/LanguageParser/tokenEnumerator.cs
+++ b/src/Shared/LanguageParser/tokenEnumerator.cs
@@ -3,6 +3,8 @@
 
 using System.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared.LanguageParser
 {
     /*
diff --git a/src/Shared/LoadedType.cs b/src/Shared/LoadedType.cs
index b1cdebf4649..eeae7eb79ab 100644
--- a/src/Shared/LoadedType.cs
+++ b/src/Shared/LoadedType.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index c398d3304a5..bd010ed294f 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -2,26 +2,26 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.IO;
-using System.Linq;
 using System.Reflection;
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 
-#if !TASKHOST
-using Microsoft.Build.Evaluation;
+#if !TASKHOST && !MSBUILDENTRYPOINTEXE
+using Microsoft.Build.Collections;
 using Microsoft.Build.Framework.Profiler;
-using Microsoft.Build.Execution;
+using System.Collections;
+using System.Linq;
 #endif
 
 #if FEATURE_APPDOMAIN
 using TaskEngineAssemblyResolver = Microsoft.Build.BackEnd.Logging.TaskEngineAssemblyResolver;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     #region Enumerations
@@ -130,6 +130,11 @@ internal enum LoggingEventType : int
         /// Event is a TelemetryEventArgs
         /// </summary>
         Telemetry = 18,
+
+        /// <summary>
+        /// Event is an EnvironmentVariableReadEventArgs
+        /// </summary>
+        EnvironmentVariableReadEvent = 19,
     }
     #endregion
 
@@ -141,21 +146,10 @@ internal enum LoggingEventType : int
     /// </summary>
     internal abstract class LogMessagePacketBase : INodePacket
     {
-#if FEATURE_DOTNETVERSION
         /// <summary>
         /// The packet version, which is based on the CLR version. Cached because querying Environment.Version each time becomes an allocation bottleneck.
         /// </summary>
         private static readonly int s_defaultPacketVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
-#else
-        private static readonly int s_defaultPacketVersion = GetDefaultPacketVersion();
-
-        private static int GetDefaultPacketVersion()
-        {
-            Assembly coreAssembly = typeof(object).GetTypeInfo().Assembly;
-            Version coreAssemblyVersion = coreAssembly.GetName().Version;
-            return 1000 + (coreAssemblyVersion.Major * 10) + coreAssemblyVersion.Minor;
-        }
-#endif
 
         /// <summary>
         /// Dictionary of methods used to read BuildEventArgs.
@@ -334,7 +328,8 @@ internal void WriteToStream(ITranslator translator)
 
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
                 if (_buildEvent is ProjectEvaluationStartedEventArgs ||
-                    _buildEvent is ProjectEvaluationFinishedEventArgs)
+                    _buildEvent is ProjectEvaluationFinishedEventArgs ||
+                    _buildEvent is EnvironmentVariableReadEventArgs)
                 {
                     // switch to serialization methods that we provide in this file
                     // and don't use the WriteToStream inherited from LazyFormattedBuildEventArgs
@@ -414,6 +409,7 @@ internal void ReadFromStream(ITranslator translator)
                 else
                 {
                     _buildEvent = ReadEventFromStream(_eventType, translator);
+                    ErrorUtilities.VerifyThrow(_buildEvent is not null, "Not Supported LoggingEventType {0}", _eventType.ToString());
                 }
             }
             else
@@ -488,17 +484,13 @@ private static Delegate CreateDelegateRobust(Type type, Object firstArgument, Me
                     delegateMethod = methodInfo.CreateDelegate(type, firstArgument);
 #endif
                 }
-                catch (FileLoadException)
+                catch (FileLoadException) when (i < 5)
                 {
                     // Sometimes, in 64-bit processes, the fusion load of Microsoft.Build.Framework.dll
-                    // spontaneously fails when trying to bind to the delegate.  However, it seems to 
-                    // not repeat on additional tries -- so we'll try again a few times.  However, if 
-                    // it keeps happening, it's probably a real problem, so we want to go ahead and 
-                    // throw to let the user know what's up.  
-                    if (i == 5)
-                    {
-                        throw;
-                    }
+                    // spontaneously fails when trying to bind to the delegate.  However, it seems to
+                    // not repeat on additional tries -- so we'll try again a few times.  However, if
+                    // it keeps happening, it's probably a real problem, so we want to go ahead and
+                    // throw to let the user know what's up.
                 }
             }
 
@@ -524,6 +516,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskStartedEvent => new TaskStartedEventArgs(null, null, null, null, null),
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
+                LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
                 LoggingEventType.ProjectEvaluationStartedEvent => new ProjectEvaluationStartedEventArgs(),
@@ -622,6 +615,10 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.BuildErrorEvent;
             }
+            else if (eventType == typeof(EnvironmentVariableReadEventArgs))
+            {
+                return LoggingEventType.EnvironmentVariableReadEvent;
+            }
             else
             {
                 return LoggingEventType.CustomEvent;
@@ -676,12 +673,29 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even
                 case LoggingEventType.ProjectFinishedEvent:
                     WriteExternalProjectFinishedEventToStream((ExternalProjectFinishedEventArgs)buildEvent, translator);
                     break;
+                case LoggingEventType.EnvironmentVariableReadEvent:
+                    WriteEnvironmentVariableReadEventArgs((EnvironmentVariableReadEventArgs)buildEvent, translator);
+                    break;
                 default:
                     ErrorUtilities.ThrowInternalError("Not Supported LoggingEventType {0}", eventType.ToString());
                     break;
             }
         }
 
+        /// <summary>
+        /// Serializes EnvironmentVariableRead Event argument to the stream. Does not work properly on TaskHosts due to BuildEventContext serialization not being
+        /// enabled on TaskHosts, but that shouldn't matter, as this should never be called from a TaskHost anyway.
+        /// </summary>
+        private void WriteEnvironmentVariableReadEventArgs(EnvironmentVariableReadEventArgs environmentVariableReadEventArgs, ITranslator translator)
+        {
+            string name = environmentVariableReadEventArgs.EnvironmentVariableName;
+            translator.Translate(ref name);
+            BuildEventContext context = environmentVariableReadEventArgs.BuildEventContext;
+#if !CLR2COMPATIBILITY
+            translator.Translate(ref context);
+#endif
+        }
+
         /// <summary>
         /// Serialize ExternalProjectFinished Event Argument to the stream
         /// </summary>
@@ -1016,33 +1030,33 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat
             translator.Translate(ref helpKeyword);
             translator.Translate(ref senderName);
 
-            BuildEventArgs buildEvent = null;
-            switch (eventType)
+            return eventType switch
             {
-                case LoggingEventType.TaskCommandLineEvent:
-                    buildEvent = ReadTaskCommandLineEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                case LoggingEventType.BuildErrorEvent:
-                    buildEvent = ReadTaskBuildErrorEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                case LoggingEventType.ProjectStartedEvent:
-                    buildEvent = ReadExternalProjectStartedEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                case LoggingEventType.ProjectFinishedEvent:
-                    buildEvent = ReadExternalProjectFinishedEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                case LoggingEventType.BuildMessageEvent:
-                    buildEvent = ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                case LoggingEventType.BuildWarningEvent:
-                    buildEvent = ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName);
-                    break;
-                default:
-                    ErrorUtilities.ThrowInternalError("Not Supported LoggingEventType {0}", eventType.ToString());
-                    break;
-            }
+                LoggingEventType.TaskCommandLineEvent => ReadTaskCommandLineEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.BuildErrorEvent => ReadTaskBuildErrorEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.ProjectStartedEvent => ReadExternalProjectStartedEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.ProjectFinishedEvent => ReadExternalProjectFinishedEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.BuildWarningEvent => ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.EnvironmentVariableReadEvent => ReadEnvironmentVariableReadEventFromStream(translator, message, helpKeyword, senderName),
+                _ => null,
+            };
+        }
 
-            return buildEvent;
+        /// <summary>
+        /// Read and reconstruct an EnvironmentVariableReadEventArgs from the stream. This message should never be called from a TaskHost, so although the context translation does not work, that's ok.
+        /// </summary>
+        private EnvironmentVariableReadEventArgs ReadEnvironmentVariableReadEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
+        {
+            string environmentVariableName = null;
+            translator.Translate(ref environmentVariableName);
+            BuildEventContext context = null;
+#if !CLR2COMPATIBILITY
+            translator.Translate(ref context);
+#endif
+            EnvironmentVariableReadEventArgs args = new(environmentVariableName, message);
+            args.BuildEventContext = context;
+            return args;
         }
 
         /// <summary>
diff --git a/src/Shared/MSBuildLoadContext.cs b/src/Shared/MSBuildLoadContext.cs
index 7e3842bbbbd..8d1e1c38e7a 100644
--- a/src/Shared/MSBuildLoadContext.cs
+++ b/src/Shared/MSBuildLoadContext.cs
@@ -1,14 +1,15 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
+
+using System;
 using System.Collections.Immutable;
 using System.IO;
 using System.Reflection;
 using System.Runtime.Loader;
 
-#nullable enable
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -17,6 +18,8 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal class MSBuildLoadContext : AssemblyLoadContext
     {
+        private AssemblyDependencyResolver? _resolver;
+
         private readonly string _directory;
 
         internal static readonly ImmutableHashSet<string> WellKnownAssemblyNames =
@@ -33,6 +36,16 @@ public MSBuildLoadContext(string assemblyPath)
             : base($"MSBuild plugin {assemblyPath}")
         {
             _directory = Directory.GetParent(assemblyPath)!.FullName;
+
+            // We check for the assemblyPath because it will fail with an AssemblyDependencyResolver-specific error
+            // if it does not exist. We should instead fall back to the standard failure.
+            // The second check is because AssemblyDependencyResolver loads assemblies differently than we do by default.
+            // We should maintain previous behavior in the absence of new data (a .deps.json file) indicating that we
+            // should do something different.
+            // Setting the _resolver to null essentially just opts out of the new behavior.
+            _resolver = File.Exists(assemblyPath) && File.Exists(Path.ChangeExtension(assemblyPath, ".deps.json"))
+                ? new AssemblyDependencyResolver(assemblyPath) :
+                null;
         }
 
         protected override Assembly? Load(AssemblyName assemblyName)
@@ -44,6 +57,19 @@ public MSBuildLoadContext(string assemblyPath)
                 return null;
             }
 
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                // respect plugin.dll.json with the AssemblyDependencyResolver
+                string? assemblyPath = _resolver?.ResolveAssemblyToPath(assemblyName);
+                if (assemblyPath != null)
+                {
+                    return LoadFromAssemblyPath(assemblyPath);
+                }
+            }
+
+            // Fall back to the older MSBuild-on-Core behavior to continue to support
+            // plugins that don't ship a .deps.json
+
             foreach (var cultureSubfolder in string.IsNullOrEmpty(assemblyName.CultureName)
                 // If no culture is specified, attempt to load directly from
                 // the known dependency paths.
@@ -53,27 +79,28 @@ public MSBuildLoadContext(string assemblyPath)
                 // bare search directory if that fails.
                 : new[] { assemblyName.CultureName, string.Empty })
             {
-                var candidatePath = Path.Combine(_directory,
-                    cultureSubfolder,
-                    $"{assemblyName.Name}.dll");
+                    var candidatePath = Path.Combine(_directory,
+                        cultureSubfolder,
+                        $"{assemblyName.Name}.dll");
 
-                if (!FileSystems.Default.FileExists(candidatePath))
-                {
-                    continue;
-                }
+                    if (!FileSystems.Default.FileExists(candidatePath))
+                    {
+                        continue;
+                    }
+
+                    AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
+                    if (candidateAssemblyName.Version != assemblyName.Version)
+                    {
+                        continue;
+                    }
 
-                AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
-                if (candidateAssemblyName.Version >= assemblyName.Version)
-                {
                     return LoadFromAssemblyPath(candidatePath);
-                }
             }
 
             // If the Assembly is provided via a file path, the following rules are used to load the assembly:
             // - the assembly from the user specified path is loaded, if it exists, into the custom ALC, or
             // - if the simple name of the assembly exists in the same folder as msbuild.exe, then that assembly gets loaded
             //   into the default ALC (so it's shared with other uses).
-
             var assemblyNameInExecutableDirectory = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory,
                 $"{assemblyName.Name}.dll");
 
@@ -84,5 +111,19 @@ public MSBuildLoadContext(string assemblyPath)
 
             return null;
         }
+
+        protected override IntPtr LoadUnmanagedDll(string unmanagedDllName)
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+            {
+                string? libraryPath = _resolver?.ResolveUnmanagedDllToPath(unmanagedDllName);
+                if (libraryPath != null)
+                {
+                    return LoadUnmanagedDllFromPath(libraryPath);
+                }
+            }
+
+            return base.LoadUnmanagedDll(unmanagedDllName);
+        }
     }
 }
diff --git a/src/Shared/MSBuildNameIgnoreCaseComparer.cs b/src/Shared/MSBuildNameIgnoreCaseComparer.cs
index d0930cc0e19..f02c8c5cada 100644
--- a/src/Shared/MSBuildNameIgnoreCaseComparer.cs
+++ b/src/Shared/MSBuildNameIgnoreCaseComparer.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
@@ -20,16 +22,7 @@ internal class MSBuildNameIgnoreCaseComparer : IConstrainedEqualityComparer<stri
         /// <summary>
         /// The processor architecture on which we are running, but default it will be x86
         /// </summary>
-        private static readonly NativeMethodsShared.ProcessorArchitectures s_runningProcessorArchitecture;
-
-        /// <summary>
-        /// We need a static constructor to retrieve the running ProcessorArchitecture that way we can
-        /// avoid using optimized code that will not run correctly on IA64 due to alignment issues
-        /// </summary>
-        static MSBuildNameIgnoreCaseComparer()
-        {
-            s_runningProcessorArchitecture = NativeMethodsShared.ProcessorArchitecture;
-        }
+        private static readonly NativeMethodsShared.ProcessorArchitectures s_runningProcessorArchitecture = NativeMethodsShared.ProcessorArchitecture;
 
         /// <summary>
         /// The default immutable comparer instance.
diff --git a/src/Shared/MetadataConversionUtilities.cs b/src/Shared/MetadataConversionUtilities.cs
index b815f2fba99..5a3a4e02017 100644
--- a/src/Shared/MetadataConversionUtilities.cs
+++ b/src/Shared/MetadataConversionUtilities.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/Modifiers.cs b/src/Shared/Modifiers.cs
index bfb564d884b..6905d0838a2 100644
--- a/src/Shared/Modifiers.cs
+++ b/src/Shared/Modifiers.cs
@@ -7,6 +7,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/NGen.cs b/src/Shared/NGen.cs
index cf3cb7a3ab6..d8e7750ef1a 100644
--- a/src/Shared/NGen.cs
+++ b/src/Shared/NGen.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -45,4 +47,4 @@ public static implicit operator NGen<T>(T value)
             return new NGen<T>(value);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Shared/NamedPipeUtil.cs b/src/Shared/NamedPipeUtil.cs
index e3b1341515f..4fbe37002a4 100644
--- a/src/Shared/NamedPipeUtil.cs
+++ b/src/Shared/NamedPipeUtil.cs
@@ -4,8 +4,6 @@
 using System.Diagnostics;
 using System.IO;
 
-#nullable enable
-
 namespace Microsoft.Build.Shared
 {
     internal static class NamedPipeUtil
diff --git a/src/Shared/NodeBuildComplete.cs b/src/Shared/NodeBuildComplete.cs
index 5e9b03e32ce..f057cac41ef 100644
--- a/src/Shared/NodeBuildComplete.cs
+++ b/src/Shared/NodeBuildComplete.cs
@@ -3,6 +3,8 @@
 
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 4562c4309d7..ea696a53ec3 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -22,6 +22,8 @@
 using System.Threading.Tasks;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -447,13 +449,8 @@ private void PacketPumpProc()
 
                     ChangeLinkStatus(LinkStatus.Active);
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     CommunicationsUtilities.Trace("Client connection failed.  Exiting comm thread. {0}", e);
                     if (localPipeServer.IsConnected)
                     {
diff --git a/src/Shared/NodeEngineShutdownReason.cs b/src/Shared/NodeEngineShutdownReason.cs
index 1d49af7082f..854a3033ba0 100644
--- a/src/Shared/NodeEngineShutdownReason.cs
+++ b/src/Shared/NodeEngineShutdownReason.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Execution
 {
     #region Enums
@@ -30,4 +32,4 @@ public enum NodeEngineShutdownReason
         Error,
     }
     #endregion
-}
\ No newline at end of file
+}
diff --git a/src/Shared/NodePacketFactory.cs b/src/Shared/NodePacketFactory.cs
index 17b3e52c8f7..c35e728860f 100644
--- a/src/Shared/NodePacketFactory.cs
+++ b/src/Shared/NodePacketFactory.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/NodeShutdown.cs b/src/Shared/NodeShutdown.cs
index 8bd7ce3da77..1c6af10afec 100644
--- a/src/Shared/NodeShutdown.cs
+++ b/src/Shared/NodeShutdown.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/OutOfProcTaskHostTaskResult.cs b/src/Shared/OutOfProcTaskHostTaskResult.cs
index f7c803c095e..c08d6bb0c34 100644
--- a/src/Shared/OutOfProcTaskHostTaskResult.cs
+++ b/src/Shared/OutOfProcTaskHostTaskResult.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/Pair.cs b/src/Shared/Pair.cs
index 214cd891074..06b8b774508 100644
--- a/src/Shared/Pair.cs
+++ b/src/Shared/Pair.cs
@@ -3,6 +3,8 @@
 
 using System.Diagnostics.CodeAnalysis;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -55,4 +57,4 @@ internal TValue Value
             get { return _value; }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Shared/PlatformNegotiation.cs b/src/Shared/PlatformNegotiation.cs
new file mode 100644
index 00000000000..a0389604db3
--- /dev/null
+++ b/src/Shared/PlatformNegotiation.cs
@@ -0,0 +1,110 @@
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Evaluation;
+
+namespace Microsoft.Build.Shared
+{
+    /// <summary>
+    /// This class contains only static methods, which are used in both the 
+    /// tasks and graph projects in order for two projects to negotiate which platform a projectreference
+    /// should be built as.
+    /// </summary>
+    internal static class PlatformNegotiation
+    {
+        internal static string GetNearestPlatform(string referencedProjectPlatform, string projectReferencePlatformsMetadata, string projectReferenceLookupTableMetadata, string platformLookupTable, string projectPath, string currentProjectPlatform, TaskLoggingHelper? log = null)
+        {
+            Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(platformLookupTable, log);
+
+            if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))
+                {
+                    log?.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", projectPath);
+                    return string.Empty;
+                }
+
+                // Pull platformLookupTable metadata from the referenced project. This allows custom
+                // mappings on a per-ProjectReference basis.
+                Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata, log);
+
+                HashSet<string> projectReferencePlatforms = new HashSet<string>();
+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+                {
+                    projectReferencePlatforms.Add(s);
+                }
+
+                string buildProjectReferenceAs = string.Empty;
+
+                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.
+                // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.
+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(currentProjectPlatform, StringComparison.OrdinalIgnoreCase))
+                {
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform", projectPath, referencedProjectPlatform);
+                }
+                // Prefer matching platforms
+                else if (projectReferencePlatforms.Contains(currentProjectPlatform))
+                {
+                    buildProjectReferenceAs = currentProjectPlatform;
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.SamePlatform");
+                }
+                // Prioritize platformLookupTable **metadata** attached to the ProjectReference item
+                // before the current project's table. We do this to allow per-ProjectReference fine tuning.
+                else if (projectReferenceLookupTable != null &&
+                        projectReferenceLookupTable.ContainsKey(currentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(projectReferenceLookupTable[currentProjectPlatform]))
+                {
+                    buildProjectReferenceAs = projectReferenceLookupTable[currentProjectPlatform];
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", currentProjectPlatform, buildProjectReferenceAs, projectReferenceLookupTableMetadata);
+                }
+                // Current project's translation table follows
+                else if (currentProjectLookupTable != null &&
+                        currentProjectLookupTable.ContainsKey(currentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(currentProjectLookupTable[currentProjectPlatform]))
+                {
+                    buildProjectReferenceAs = currentProjectLookupTable[currentProjectPlatform];
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", currentProjectPlatform, buildProjectReferenceAs, platformLookupTable);
+                }
+                // AnyCPU if possible
+                else if (projectReferencePlatforms.Contains("AnyCPU"))
+                {
+                    buildProjectReferenceAs = "AnyCPU";
+                    log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.AnyCPUDefault");
+                }
+                else
+                {
+                    // Keep NearestPlatform empty, log a warning. Common.CurrentVersion.targets will undefine 
+                    // Platform/PlatformTarget when this is the case.
+                    log?.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoCompatiblePlatformFound", projectPath);
+                }
+            return buildProjectReferenceAs;
+        }
+        internal static Dictionary<string, string>? ExtractLookupTable(string stringTable, TaskLoggingHelper? log = null)
+        {
+            if (string.IsNullOrEmpty(stringTable))
+            {
+                return null;
+            }
+
+            Dictionary<string, string> table = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+
+            foreach (string s in stringTable.Trim().Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+            {
+                string[] keyVal = s.Trim().Split(MSBuildConstants.EqualsChar);
+
+                // Invalid table, don't use it.
+                if (keyVal.Length != 2 || string.IsNullOrEmpty(keyVal[0]) || string.IsNullOrEmpty(keyVal[1]))
+                {
+                    log?.LogWarningWithCodeFromResources("GetCompatiblePlatform.InvalidLookupTableFormat", stringTable);
+                    return null;
+                }
+
+                table[keyVal[0]] = keyVal[1];
+            }
+
+            log?.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.LookupTableParsed", stringTable);
+
+            return table;
+        }
+    }
+}
diff --git a/src/Shared/ProcessExtensions.cs b/src/Shared/ProcessExtensions.cs
index e09db350365..67025e4d7b5 100644
--- a/src/Shared/ProcessExtensions.cs
+++ b/src/Shared/ProcessExtensions.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     internal static class ProcessExtensions
diff --git a/src/Shared/ProjectErrorUtilities.cs b/src/Shared/ProjectErrorUtilities.cs
index b02ed0ef6c3..e44989600e0 100644
--- a/src/Shared/ProjectErrorUtilities.cs
+++ b/src/Shared/ProjectErrorUtilities.cs
@@ -14,6 +14,8 @@
  ******************************************************************************/
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/ProjectFileErrorUtilities.cs b/src/Shared/ProjectFileErrorUtilities.cs
index bcc433204d0..aa8bc142a3a 100644
--- a/src/Shared/ProjectFileErrorUtilities.cs
+++ b/src/Shared/ProjectFileErrorUtilities.cs
@@ -5,6 +5,8 @@
 
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/ProjectWriter.cs b/src/Shared/ProjectWriter.cs
index d925f19dea0..66f197081ec 100644
--- a/src/Shared/ProjectWriter.cs
+++ b/src/Shared/ProjectWriter.cs
@@ -7,6 +7,8 @@
 using System.Text;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/PropertyParser.cs b/src/Shared/PropertyParser.cs
index e10f51efc8f..607b92a1841 100644
--- a/src/Shared/PropertyParser.cs
+++ b/src/Shared/PropertyParser.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 #if BUILD_ENGINE
 namespace Microsoft.Build.BackEnd
 #else
diff --git a/src/Shared/QuotingUtilities.cs b/src/Shared/QuotingUtilities.cs
index 1e63c841cf9..72eca743bf6 100644
--- a/src/Shared/QuotingUtilities.cs
+++ b/src/Shared/QuotingUtilities.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/ReadOnlyCollection.cs b/src/Shared/ReadOnlyCollection.cs
index 4837b457a32..69454ab1b1d 100644
--- a/src/Shared/ReadOnlyCollection.cs
+++ b/src/Shared/ReadOnlyCollection.cs
@@ -7,6 +7,8 @@
 using System.Collections;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Shared/ReadOnlyEmptyCollection.cs b/src/Shared/ReadOnlyEmptyCollection.cs
index 22caa31c707..76bbf5f5834 100644
--- a/src/Shared/ReadOnlyEmptyCollection.cs
+++ b/src/Shared/ReadOnlyEmptyCollection.cs
@@ -6,6 +6,8 @@
 using System.Collections;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Shared/ReadOnlyEmptyDictionary.cs b/src/Shared/ReadOnlyEmptyDictionary.cs
index 020dba0bb72..ced752ddd33 100644
--- a/src/Shared/ReadOnlyEmptyDictionary.cs
+++ b/src/Shared/ReadOnlyEmptyDictionary.cs
@@ -7,6 +7,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Collections
 {
     /// <summary>
diff --git a/src/Shared/RegisteredTaskObjectCacheBase.cs b/src/Shared/RegisteredTaskObjectCacheBase.cs
index 3e8cabaf744..543cdc44891 100644
--- a/src/Shared/RegisteredTaskObjectCacheBase.cs
+++ b/src/Shared/RegisteredTaskObjectCacheBase.cs
@@ -5,9 +5,10 @@
 using System.Collections.Concurrent;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 #if BUILD_ENGINE
 using Microsoft.Build.Shared;
-
 namespace Microsoft.Build.BackEnd.Components.Caching
 #else
 namespace Microsoft.Build.Shared
@@ -94,7 +95,7 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
         protected bool IsCollectionEmptyOrUncreated(RegisteredTaskObjectLifetime lifetime)
         {
             var collection = GetCollectionForLifetime(lifetime, dontCreate: true);
-            return (collection == null) || (collection.Count == 0);
+            return (collection == null) || collection.IsEmpty;
         }
 
         /// <summary>
@@ -147,13 +148,8 @@ private static void DisposeObjects(Lazy<ConcurrentDictionary<object, object>> li
                         IDisposable disposable = obj as IDisposable;
                         disposable?.Dispose();
                     }
-                    catch (Exception ex)
+                    catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                     {
-                        if (ExceptionHandling.IsCriticalException(ex))
-                        {
-                            throw;
-                        }
-
                         // Eat it.  We don't have a way to log here because at a minimum the build has already completed.
                     }
                 }
diff --git a/src/Shared/RegistryDelegates.cs b/src/Shared/RegistryDelegates.cs
index 7803068f0bd..4883342d33f 100644
--- a/src/Shared/RegistryDelegates.cs
+++ b/src/Shared/RegistryDelegates.cs
@@ -1,17 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
-using System;
-using System.IO;
-using System.Diagnostics;
-using System.Globalization;
 using Microsoft.Win32;
-using System.Collections;
 using System.Collections.Generic;
 
 namespace Microsoft.Build.Shared
-{  /// <summary>
+{
+    /// <summary>
    /// Given a registry hive and a request view open the base key for that registry location.
    /// </summary>
     internal delegate RegistryKey OpenBaseKey(RegistryHive hive, RegistryView view);
@@ -34,4 +29,3 @@ namespace Microsoft.Build.Shared
     /// <returns>A string containing the default value.</returns>
     internal delegate string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string subKey);
 }
-#endif
diff --git a/src/Shared/RegistryHelper.cs b/src/Shared/RegistryHelper.cs
index 53085889348..fc26fd09f82 100644
--- a/src/Shared/RegistryHelper.cs
+++ b/src/Shared/RegistryHelper.cs
@@ -1,18 +1,16 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
 using System.Collections.Generic;
-
+using System.Runtime.Versioning;
 using Microsoft.Win32;
-// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 namespace Microsoft.Build.Shared
 {
     /// <summary>
     /// Helper methods that simplify registry access.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     internal static class RegistryHelper
     {
         /// <summary>
@@ -21,11 +19,11 @@ internal static class RegistryHelper
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subkey">The subkey</param>
         /// <returns>An enumeration of strings.</returns>        
-        internal static IEnumerable<string> GetSubKeyNames(RegistryKey baseKey, string subkey)
+        internal static IEnumerable<string>? GetSubKeyNames(RegistryKey baseKey, string subkey)
         {
-            IEnumerable<string> subKeys = null;
+            IEnumerable<string>? subKeys = null;
 
-            using (RegistryKey subKey = baseKey.OpenSubKey(subkey))
+            using (RegistryKey? subKey = baseKey.OpenSubKey(subkey))
             {
                 if (subKey != null)
                 {
@@ -42,15 +40,15 @@ internal static IEnumerable<string> GetSubKeyNames(RegistryKey baseKey, string s
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subkey">The subkey</param>
         /// <returns>A string containing the default value.</returns>
-        internal static string GetDefaultValue(RegistryKey baseKey, string subkey)
+        internal static string? GetDefaultValue(RegistryKey baseKey, string subkey)
         {
-            string value = null;
+            string? value = null;
 
-            using (RegistryKey key = baseKey.OpenSubKey(subkey))
+            using (RegistryKey? key = baseKey.OpenSubKey(subkey))
             {
                 if (key?.ValueCount > 0)
                 {
-                    value = (string)key.GetValue("");
+                    value = (string?)key.GetValue("");
                 }
             }
 
@@ -71,4 +69,3 @@ internal static RegistryKey OpenBaseKey(RegistryHive hive, RegistryView view)
         }
     }
 }
-#endif
\ No newline at end of file
diff --git a/src/Shared/ResourceUtilities.cs b/src/Shared/ResourceUtilities.cs
index 1cd325959fc..1146f026158 100644
--- a/src/Shared/ResourceUtilities.cs
+++ b/src/Shared/ResourceUtilities.cs
@@ -8,6 +8,8 @@
 using System.Globalization;
 using System.ComponentModel;
 
+#nullable disable
+
 #if BUILDINGAPPXTASKS
 namespace Microsoft.Build.AppxPackage.Shared
 #else
diff --git a/src/Shared/Resources/Strings.shared.resx b/src/Shared/Resources/Strings.shared.resx
index 4a2ab0dd185..1d110f22384 100644
--- a/src/Shared/Resources/Strings.shared.resx
+++ b/src/Shared/Resources/Strings.shared.resx
@@ -278,10 +278,15 @@
     <value>MSB5028: Solution filter file at "{0}" includes project "{1}" that is not in the solution file at "{2}".</value>
     <comment>{StrBegin="MSB5028: "}UE: The project filename is provided separately to loggers.</comment>
   </data>
+  <data name="WildcardResultsInDriveEnumeration" xml:space="preserve">
+    <value>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>
+    <comment>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</comment>
+  </data>
   <!--
         The shared message bucket is: MSB5001 - MSB5999
 
-        Next message code should be MSB5029
+        Next message code should be MSB5030
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Shared/Resources/xlf/Strings.shared.cs.xlf b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
index 80de31cf354..575278045ee 100644
--- a/src/Shared/Resources/xlf/Strings.shared.cs.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Parametr {0} s přiřazenou hodnotou {1} nesmí obsahovat neplatnou cestu nebo neplatné znaky souboru.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.de.xlf b/src/Shared/Resources/xlf/Strings.shared.de.xlf
index 28e73b49c1a..3b3a861a769 100644
--- a/src/Shared/Resources/xlf/Strings.shared.de.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.de.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Der Parameter "{0}" mit dem zugewiesenen Wert "{1}" darf keinen ungültigen Pfad und keine ungültigen Dateizeichen haben.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.es.xlf b/src/Shared/Resources/xlf/Strings.shared.es.xlf
index 332d51f7961..9193d9bf3b8 100644
--- a/src/Shared/Resources/xlf/Strings.shared.es.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.es.xlf
@@ -308,6 +308,12 @@
         <target state="translated">El parámetro "{0}" con el valor asignado "{1}" no puede tener una ruta de acceso no válida o caracteres de archivo no válidos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.fr.xlf b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
index 98d0ecd2344..7ba650edd28 100644
--- a/src/Shared/Resources/xlf/Strings.shared.fr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Le paramètre "{0}" avec la valeur assignée "{1}" ne peut pas avoir un chemin non valide ou des caractères de fichier non valides.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.it.xlf b/src/Shared/Resources/xlf/Strings.shared.it.xlf
index 31c10bd56ca..5d0abb3e4e0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.it.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.it.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Il parametro "{0}" con valore assegnato "{1}" non può contenere un percorso non valido o caratteri di file non validi.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ja.xlf b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
index 762d7780a9b..2bfc6c3463f 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ja.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
@@ -308,6 +308,12 @@
         <target state="translated">値 "{1}" が割り当てられたパラメーター "{0}" には、無効なパスまたは無効なファイル内の文字を指定することはできません。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ko.xlf b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
index 7cd5d631a66..503baf9f4b0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ko.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
@@ -308,6 +308,12 @@
         <target state="translated">"{1}" 값이 할당된 "{0}" 매개 변수는 유효하지 않은 경로 또는 파일 문자를 포함할 수 없습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.pl.xlf b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
index 3755284c24a..c026f00091e 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pl.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Parametr „{0}” z przypisaną wartością „{1}” nie może mieć nieprawidłowej ścieżki ani zawierać nieprawidłowych znaków w pliku.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
index 6fd1b77903b..848ba95c3da 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
@@ -308,6 +308,12 @@
         <target state="translated">O parâmetro "{0}" com o valor "{1}" atribuído não pode ter um caminho inválido ou caracteres de arquivo inválidos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ru.xlf b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
index 3570539b1f8..c23b63e3b4b 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ru.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Параметр "{0}" с назначенным значением "{1}" не может иметь недопустимый путь или недопустимые символы файлов.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.tr.xlf b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
index d6831788b90..09e4f9aeae1 100644
--- a/src/Shared/Resources/xlf/Strings.shared.tr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
@@ -308,6 +308,12 @@
         <target state="translated">"{1}" değeri atanan "{0}" parametresinde geçersiz yol veya geçersiz dosya karakterleri bulunamaz.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
index b5468e75bcb..e8a04e0bba0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
@@ -308,6 +308,12 @@
         <target state="translated">分配有值“{1}”的参数“{0}”不可具有无效路径或无效的文件字符。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
index 893e286184a..a63f80f76e2 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
@@ -308,6 +308,12 @@
         <target state="translated">指派值為 "{1}" 的參數 "{0}" 不得具有無效的路徑或檔案字元。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="new">MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; in file "{3}" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/StringExtensions.cs b/src/Shared/StringExtensions.cs
index ac22c933785..e6009bfd5ef 100644
--- a/src/Shared/StringExtensions.cs
+++ b/src/Shared/StringExtensions.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     internal static class StringExtensions
diff --git a/src/Shared/StrongNameHelpers.cs b/src/Shared/StrongNameHelpers.cs
index 8bc93fb0951..d0187a100da 100644
--- a/src/Shared/StrongNameHelpers.cs
+++ b/src/Shared/StrongNameHelpers.cs
@@ -9,6 +9,8 @@
 
 #if FEATURE_STRONG_NAMES
 
+#nullable disable
+
 namespace Microsoft.Runtime.Hosting
 {
     /// <summary>
@@ -305,7 +307,10 @@ public static bool StrongNameSignatureGeneration(string pwzFilePath, string pwzK
     /// version of the interface.
     /// </summary>
     [System.Security.SecurityCritical]
-    [ComImport, ComConversionLoss, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
+    [ComImport]
+    [ComConversionLoss]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [Guid("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
     internal interface IClrStrongNameUsingIntPtr
     {
         [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
@@ -523,7 +528,10 @@ int StrongNameTokenFromPublicKey(
     /// all APIs return HResults rather than throw exceptions.
     /// </summary> 
     [System.Security.SecurityCritical]
-    [ComImport, ComConversionLoss, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
+    [ComImport]
+    [ComConversionLoss]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [Guid("9FD93CCF-3280-4391-B3A9-96E1CDE77C8D")]
     internal interface IClrStrongName
     {
         [MethodImpl(MethodImplOptions.InternalCall, MethodCodeType = MethodCodeType.Runtime)]
diff --git a/src/Shared/TaskEngineAssemblyResolver.cs b/src/Shared/TaskEngineAssemblyResolver.cs
index ddbc6dcc62c..9a09e33310d 100644
--- a/src/Shared/TaskEngineAssemblyResolver.cs
+++ b/src/Shared/TaskEngineAssemblyResolver.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 815eda222b3..7037787b2fe 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -8,6 +8,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -91,6 +93,7 @@ internal class TaskHostConfiguration : INodePacket
         private Dictionary<string, string> _globalParameters;
 
         private ICollection<string> _warningsAsErrors;
+        private ICollection<string> _warningsNotAsErrors;
 
         private ICollection<string> _warningsAsMessages;
 
@@ -114,6 +117,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #else
         /// <summary>
@@ -134,6 +138,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration
@@ -156,6 +161,7 @@ public TaskHostConfiguration
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
                 ICollection<string> warningsAsErrors,
+                ICollection<string> warningsNotAsErrors,
                 ICollection<string> warningsAsMessages
             )
         {
@@ -188,6 +194,7 @@ ICollection<string> warningsAsMessages
             _taskLocation = taskLocation;
             _isTaskInputLoggingEnabled = isTaskInputLoggingEnabled;
             _warningsAsErrors = warningsAsErrors;
+            _warningsNotAsErrors = warningsNotAsErrors;
             _warningsAsMessages = warningsAsMessages;
 
             if (taskParameters != null)
@@ -382,6 +389,15 @@ public ICollection<string> WarningsAsErrors
             }
         }
 
+        public ICollection<string> WarningsNotAsErrors
+        {
+            [DebuggerStepThrough]
+            get
+            {
+                return _warningsNotAsErrors;
+            }
+        }
+
         public ICollection<string> WarningsAsMessages
         {
             [DebuggerStepThrough]
@@ -420,6 +436,13 @@ public void Translate(ITranslator translator)
                                  collectionFactory: count => new HashSet<string>(StringComparer.OrdinalIgnoreCase));
 #else
                                  collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
+#endif
+            translator.Translate(collection: ref _warningsNotAsErrors,
+                                 objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
+#if CLR2COMPATIBILITY
+                                 collectionFactory: count => new HashSet<string>(StringComparer.OrdinalIgnoreCase));
+#else
+                                 collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
 #endif
             translator.Translate(collection: ref _warningsAsMessages,
                                  objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
diff --git a/src/Shared/TaskHostTaskCancelled.cs b/src/Shared/TaskHostTaskCancelled.cs
index 83a0389b7ba..597607cc4db 100644
--- a/src/Shared/TaskHostTaskCancelled.cs
+++ b/src/Shared/TaskHostTaskCancelled.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/TaskHostTaskComplete.cs b/src/Shared/TaskHostTaskComplete.cs
index 11194395c49..de13737cb1b 100644
--- a/src/Shared/TaskHostTaskComplete.cs
+++ b/src/Shared/TaskHostTaskComplete.cs
@@ -6,6 +6,8 @@
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index 5388f15d8e6..0ab62f70203 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -2,11 +2,12 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Linq;
 using System.Reflection;
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -35,11 +36,7 @@ internal static class TaskLoader
         internal static bool IsTaskClass(Type type, object unused)
         {
             return type.GetTypeInfo().IsClass && !type.GetTypeInfo().IsAbstract && (
-#if FEATURE_TYPE_GETINTERFACE
                 type.GetTypeInfo().GetInterface("Microsoft.Build.Framework.ITask") != null);
-#else
-                type.GetInterfaces().Any(interfaceType => interfaceType.FullName == "Microsoft.Build.Framework.ITask"));
-#endif
         }
 
         /// <summary>
@@ -113,10 +110,8 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
                             taskAppDomain.Load(loadedType.LoadedAssembly.GetName());
                         }
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
                         // Hook up last minute dumping of any exceptions 
                         taskAppDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
-#endif
                     }
                 }
                 else
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 7de1b7c8ab1..6afa121168a 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 #if BUILD_ENGINE
 namespace Microsoft.Build.BackEnd
 #else
@@ -691,7 +693,7 @@ params object[] messageArgs
             // All of our errors should have an error code, so the user has something
             // to look up in the documentation. To help find errors without error codes,
             // temporarily uncomment this line and run the unit tests.
-            //if (null == errorCode) File.AppendAllText("c:\\errorsWithoutCodes", message + "\n");
+            // if (null == errorCode) File.AppendAllText("c:\\errorsWithoutCodes", message + "\n");
             // We don't have a Debug.Assert for this, because it would be triggered by <Error> and <Warning> tags.
 
             // If the task has missed out all location information, add the location of the task invocation;
@@ -1045,7 +1047,7 @@ params object[] messageArgs
             // All of our warnings should have an error code, so the user has something
             // to look up in the documentation. To help find warnings without error codes,
             // temporarily uncomment this line and run the unit tests.
-            //if (null == warningCode) File.AppendAllText("c:\\warningsWithoutCodes", message + "\n");
+            // if (null == warningCode) File.AppendAllText("c:\\warningsWithoutCodes", message + "\n");
             // We don't have a Debug.Assert for this, because it would be triggered by <Error> and <Warning> tags.
 
             // If the task has missed out all location information, add the location of the task invocation;
diff --git a/src/Shared/TaskLoggingHelperExtension.cs b/src/Shared/TaskLoggingHelperExtension.cs
index fbfe95f875c..2607884b1db 100644
--- a/src/Shared/TaskLoggingHelperExtension.cs
+++ b/src/Shared/TaskLoggingHelperExtension.cs
@@ -12,7 +12,9 @@
 using Microsoft.Build.Utilities;
 #endif
 
-//This is in the Tasks namespace because that's where it was before and it is public.
+// This is in the Tasks namespace because that's where it was before and it is public.
+
+#nullable disable
 
 #if BUILD_ENGINE
 namespace Microsoft.Build.BackEnd
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 9dbd4f83802..c7e900625b8 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -5,16 +5,19 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Globalization;
 using System.Linq;
 using System.Reflection;
 using System.Security;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
-    /// Type of parameter, used to figure out how to serialize it. 
+    /// Type of parameter, used to figure out how to serialize it.
     /// </summary>
     internal enum TaskParameterType
     {
@@ -33,18 +36,28 @@ internal enum TaskParameterType
         /// </summary>
         StringArray,
 
+        /// <summary>
+        /// Parameter is <c>true</c> or <c>false</c>.
+        /// </summary>
+        Bool,
+
+        /// <summary>
+        /// Parameter is an <see langword="int"/>.
+        /// </summary>
+        Int,
+
         /// <summary>
         /// Parameter is a value type.  Note:  Must be serializable
         /// </summary>
         ValueType,
 
         /// <summary>
-        /// Parameter is an array of value types.  Note:  Must be serializable. 
+        /// Parameter is an array of value types.  Note:  Must be serializable.
         /// </summary>
         ValueTypeArray,
 
         /// <summary>
-        /// Parameter is an ITaskItem 
+        /// Parameter is an ITaskItem
         /// </summary>
         ITaskItem,
 
@@ -54,15 +67,15 @@ internal enum TaskParameterType
         ITaskItemArray,
 
         /// <summary>
-        /// An invalid parameter -- the value of this parameter contains the exception 
-        /// that is thrown when trying to access it. 
+        /// An invalid parameter -- the value of this parameter contains the exception
+        /// that is thrown when trying to access it.
         /// </summary>
         Invalid
     }
 
     /// <summary>
-    /// Wrapper for task parameters, to allow proper serialization even 
-    /// in cases where the parameter is not .NET serializable. 
+    /// Wrapper for task parameters, to allow proper serialization even
+    /// in cases where the parameter is not .NET serializable.
     /// </summary>
     internal class TaskParameter :
 #if FEATURE_APPDOMAIN
@@ -101,11 +114,12 @@ public TaskParameter(object wrappedParameter)
                 return;
             }
 
-            // It's not null or invalid, so it should be a valid parameter type. 
+            // It's not null or invalid, so it should be a valid parameter type.
             ErrorUtilities.VerifyThrow
                 (
                     TaskParameterTypeVerifier.IsValidInputParameter(wrappedParameterType) || TaskParameterTypeVerifier.IsValidOutputParameter(wrappedParameterType),
-                    "How did we manage to get a task parameter that isn't a valid parameter type?"
+                    "How did we manage to get a task parameter of type {0} that isn't a valid parameter type?",
+                    wrappedParameterType
                 );
 
             if (wrappedParameterType.IsArray)
@@ -154,6 +168,28 @@ public TaskParameter(object wrappedParameter)
                     _parameterType = TaskParameterType.ITaskItem;
                     _wrappedParameter = CreateNewTaskItemFrom((ITaskItem)wrappedParameter);
                 }
+                // Preserve enums as strings: the enum type itself may not
+                // be loaded on the other side of the serialization, but
+                // we would convert to string anyway after pulling the
+                // task output into a property or item.
+                else if (wrappedParameterType.IsEnum)
+                {
+                    _parameterType = TaskParameterType.String;
+                    _wrappedParameter = (string)Convert.ChangeType(wrappedParameter, typeof(string), CultureInfo.InvariantCulture);
+                }
+                    // Also stringify known common value types, to avoid calling
+                    // TranslateDotNet when they'll just be stringified on the
+                    // output side
+                else if (wrappedParameterType == typeof(bool))
+                {
+                    _parameterType = TaskParameterType.Bool;
+                    _wrappedParameter = wrappedParameter;
+                }
+                else if (wrappedParameterType == typeof(int))
+                {
+                    _parameterType = TaskParameterType.Int;
+                    _wrappedParameter = wrappedParameter;
+                }
                 else if (wrappedParameterType.GetTypeInfo().IsValueType)
                 {
                     _parameterType = TaskParameterType.ValueType;
@@ -194,7 +230,7 @@ public object WrappedParameter
         }
 
         /// <summary>
-        /// TaskParameter's ToString should just pass through to whatever it's wrapping. 
+        /// TaskParameter's ToString should just pass through to whatever it's wrapping.
         /// </summary>
         public override string ToString()
         {
@@ -202,7 +238,7 @@ public override string ToString()
         }
 
         /// <summary>
-        /// Serialize / deserialize this item. 
+        /// Serialize / deserialize this item.
         /// </summary>
         public void Translate(ITranslator translator)
         {
@@ -223,6 +259,24 @@ public void Translate(ITranslator translator)
                     translator.Translate(ref stringArrayParam);
                     _wrappedParameter = stringArrayParam;
                     break;
+                case TaskParameterType.Bool:
+                    bool boolParam = _wrappedParameter switch
+                    {
+                        bool hadValue => hadValue,
+                        _ => default,
+                    };
+                    translator.Translate(ref boolParam);
+                    _wrappedParameter = boolParam;
+                    break;
+                case TaskParameterType.Int:
+                    int intParam = _wrappedParameter switch
+                    {
+                        int hadValue => hadValue,
+                        _ => default,
+                    };
+                    translator.Translate(ref intParam);
+                    _wrappedParameter = intParam;
+                    break;
                 case TaskParameterType.ValueType:
                 case TaskParameterType.ValueTypeArray:
                     translator.TranslateDotNet(ref _wrappedParameter);
@@ -268,7 +322,7 @@ internal static TaskParameter FactoryForDeserialization(ITranslator translator)
         }
 
         /// <summary>
-        /// Creates a new ITaskItem with the contents of the old one. 
+        /// Creates a new ITaskItem with the contents of the old one.
         /// </summary>
         private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
         {
@@ -282,11 +336,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
 
-                if (nonGenericEscapedMetadata is Dictionary<string, string>)
-                {
-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;
-                }
-                else
+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
+                if (escapedMetadata is null)
                 {
                     escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                     foreach (object key in nonGenericEscapedMetadata.Keys)
@@ -297,10 +348,10 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
             }
             else
             {
-                // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that 
-                // CloneCustomMetadata, GetMetadata, & ItemSpec returns unescaped values, and 
-                // TaskParameterTaskItem's constructor expects escaped values, so escaping them all 
-                // is the closest approximation to correct we can get.  
+                // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that
+                // CloneCustomMetadata, GetMetadata, & ItemSpec returns unescaped values, and
+                // TaskParameterTaskItem's constructor expects escaped values, so escaping them all
+                // is the closest approximation to correct we can get.
                 escapedItemSpec = EscapingUtilities.Escape(copyFrom.ItemSpec);
 
                 escapedDefiningProject = EscapingUtilities.EscapeWithCaching(copyFrom.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));
@@ -322,7 +373,7 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
         }
 
         /// <summary>
-        /// Serialize / deserialize this item. 
+        /// Serialize / deserialize this item.
         /// </summary>
         private void TranslateITaskItemArray(ITranslator translator)
         {
@@ -359,7 +410,7 @@ private void TranslateITaskItemArray(ITranslator translator)
         }
 
         /// <summary>
-        /// Serialize / deserialize this item. 
+        /// Serialize / deserialize this item.
         /// </summary>
         private void TranslateITaskItem(ITranslator translator)
         {
@@ -403,8 +454,8 @@ private void WriteITaskItem(ITranslator translator, ITaskItem wrappedItem)
             }
             else
             {
-                // We know that the ITaskItem constructor expects an escaped string, and that ITaskItem.ItemSpec 
-                // is expected to be unescaped, so make sure we give the constructor what it wants. 
+                // We know that the ITaskItem constructor expects an escaped string, and that ITaskItem.ItemSpec
+                // is expected to be unescaped, so make sure we give the constructor what it wants.
                 escapedItemSpec = EscapingUtilities.Escape(wrappedItem.ItemSpec);
                 escapedDefiningProject = EscapingUtilities.EscapeWithCaching(wrappedItem.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));
                 wrappedMetadata = wrappedItem.CloneCustomMetadata();
@@ -487,7 +538,7 @@ private bool TranslateNullable<T>(ITranslator translator, T value)
         }
 
         /// <summary>
-        /// Super simple ITaskItem derivative that we can use as a container for read items.  
+        /// Super simple ITaskItem derivative that we can use as a container for read items.
         /// </summary>
         private class TaskParameterTaskItem :
 #if FEATURE_APPDOMAIN
@@ -500,7 +551,7 @@ private class TaskParameterTaskItem :
 #endif
         {
             /// <summary>
-            /// The item spec 
+            /// The item spec
             /// </summary>
             private string _escapedItemSpec = null;
 
@@ -741,7 +792,7 @@ string ITaskItem2.GetMetadataValueEscaped(string metadataName)
             }
 
             /// <summary>
-            /// Sets the exact metadata value given to the metadata name requested. 
+            /// Sets the exact metadata value given to the metadata name requested.
             /// </summary>
             void ITaskItem2.SetMetadataValueLiteral(string metadataName, string metadataValue)
             {
@@ -749,7 +800,7 @@ void ITaskItem2.SetMetadataValueLiteral(string metadataName, string metadataValu
             }
 
             /// <summary>
-            /// Returns a dictionary containing all metadata and their escaped forms.  
+            /// Returns a dictionary containing all metadata and their escaped forms.
             /// </summary>
             IDictionary ITaskItem2.CloneCustomMetadataEscaped()
             {
diff --git a/src/Shared/TaskParameterTypeVerifier.cs b/src/Shared/TaskParameterTypeVerifier.cs
index 0b0f0cac815..4048d4f736d 100644
--- a/src/Shared/TaskParameterTypeVerifier.cs
+++ b/src/Shared/TaskParameterTypeVerifier.cs
@@ -3,8 +3,10 @@
 
 using System;
 using Microsoft.Build.Framework;
-using System.Reflection;
 using Microsoft.Build.Shared;
+using System.Reflection;
+
+#nullable disable
 
 namespace Microsoft.Build.BackEnd
 {
@@ -16,11 +18,8 @@ internal static class TaskParameterTypeVerifier
         /// <summary>
         /// Is the parameter type a valid scalar input value
         /// </summary>
-        internal static bool IsValidScalarInputParameter(Type parameterType)
-        {
-            bool result = (parameterType.GetTypeInfo().IsValueType || parameterType == typeof(string) || parameterType == typeof(ITaskItem));
-            return result;
-        }
+        internal static bool IsValidScalarInputParameter(Type parameterType) =>
+            parameterType.GetTypeInfo().IsValueType || parameterType == typeof(string) || parameterType == typeof(ITaskItem);
 
         /// <summary>
         /// Is the passed in parameterType a valid vector input parameter
@@ -71,4 +70,4 @@ internal static bool IsValidOutputParameter(Type parameterType)
             return IsValueTypeOutputParameter(parameterType) || IsAssignableToITask(parameterType);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index 6f560189522..f3bffb9d425 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -6,6 +6,8 @@
 using System.Runtime.CompilerServices;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/ThreadPoolExtensions.cs b/src/Shared/ThreadPoolExtensions.cs
index 82c01df36a6..08dda3d4b57 100644
--- a/src/Shared/ThreadPoolExtensions.cs
+++ b/src/Shared/ThreadPoolExtensions.cs
@@ -5,6 +5,8 @@
 using System.Globalization;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/ToolsetElement.cs b/src/Shared/ToolsetElement.cs
index f3f240f8537..3e96ab7c6cb 100644
--- a/src/Shared/ToolsetElement.cs
+++ b/src/Shared/ToolsetElement.cs
@@ -8,7 +8,8 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.Evaluation
 {
@@ -132,7 +133,7 @@ public string toolsVersion
         {
             get
             {
-                return (string)base["toolsVersion"];
+                return (string)base[nameof(toolsVersion)];
             }
 
             set
@@ -738,7 +739,7 @@ public string DefaultOverrideToolsVersion
                 // whenever the base class gives us an empty string.
                 // Note this means we can't distinguish between the attribute being present but containing
                 // an empty string for its value and the attribute not being present at all.
-                string defaultValue = (string)base["DefaultOverrideToolsVersion"];
+                string defaultValue = (string)base[nameof(DefaultOverrideToolsVersion)];
                 return String.IsNullOrEmpty(defaultValue) ? null : defaultValue;
             }
 
diff --git a/src/Shared/Tracing.cs b/src/Shared/Tracing.cs
index 7cdc0392191..09184fe4666 100644
--- a/src/Shared/Tracing.cs
+++ b/src/Shared/Tracing.cs
@@ -7,6 +7,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Reflection;
 
+#nullable disable
+
 namespace Microsoft.Build.Internal
 {
     /// <summary>
diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index c3e7d12b6ad..6850b11f1a2 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -8,6 +8,8 @@
 using System.Reflection;
 using AssemblyHashAlgorithm = System.Configuration.Assemblies.AssemblyHashAlgorithm;
 
+#nullable disable
+
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 7f879afa8aa..fe5ea680c49 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -10,6 +10,8 @@
 using System.Reflection;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -21,7 +23,7 @@ internal class TypeLoader
         /// <summary>
         /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
         /// </summary>
-        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader;
+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new CoreClrAssemblyLoader();
 #endif
 
         /// <summary>
@@ -39,13 +41,6 @@ internal class TypeLoader
         /// </summary>
         private Func<Type, object, bool> _isDesiredType;
 
-#if FEATURE_ASSEMBLYLOADCONTEXT
-        static TypeLoader()
-        {
-            s_coreClrAssemblyLoader = new CoreClrAssemblyLoader();
-        }
-#endif
-
         /// <summary>
         /// Constructor.
         /// </summary>
diff --git a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
index 120adbb9ed4..3c0bf360279 100644
--- a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
+++ b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
@@ -13,6 +13,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class AssemblyNameEx_Tests
diff --git a/src/Shared/UnitTests/AssemblyResources.cs b/src/Shared/UnitTests/AssemblyResources.cs
index 962b5b0342f..baa3ffd33ba 100644
--- a/src/Shared/UnitTests/AssemblyResources.cs
+++ b/src/Shared/UnitTests/AssemblyResources.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/UnitTests/BuildEventArgsExtension.cs b/src/Shared/UnitTests/BuildEventArgsExtension.cs
index c2e67c450c9..b41117fb094 100644
--- a/src/Shared/UnitTests/BuildEventArgsExtension.cs
+++ b/src/Shared/UnitTests/BuildEventArgsExtension.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
index 73813296685..f609286317e 100644
--- a/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
+++ b/src/Shared/UnitTests/CopyOnWriteDictionary_Tests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.OM.Collections
 {
     /// <summary>
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 4641dc5e2b3..649d0ff35db 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -6,8 +6,10 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if MICROSOFT_BUILD_ENGINE_UNITTESTS
 using System.Text;
 using Microsoft.Build.BackEnd.Logging;
+#endif
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -15,12 +17,16 @@
 using Microsoft.Build.Shared;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public partial class TestEnvironment
     {
         // reset the default build manager and the state it might have accumulated from other tests
+#pragma warning disable CA1823 // Avoid unused private fields
         private object _resetBuildManager = new ResetDefaultBuildManager();
+#pragma warning restore CA1823 // Avoid unused private fields
 
         private class ResetDefaultBuildManager
         {
diff --git a/src/Shared/UnitTests/ErrorUtilities_Tests.cs b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
index 6b3556f4a51..d8d83d96d9e 100644
--- a/src/Shared/UnitTests/ErrorUtilities_Tests.cs
+++ b/src/Shared/UnitTests/ErrorUtilities_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class ErrorUtilities_Tests
diff --git a/src/Shared/UnitTests/EscapingUtilities_Tests.cs b/src/Shared/UnitTests/EscapingUtilities_Tests.cs
index b02c378e2eb..180c18a2a5d 100644
--- a/src/Shared/UnitTests/EscapingUtilities_Tests.cs
+++ b/src/Shared/UnitTests/EscapingUtilities_Tests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class EscapingUtilities_Tests
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index b779aaa45ba..e83e0c56d1b 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -13,7 +13,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Xunit;
 using Xunit.Abstractions;
-using Microsoft.Build.Utilities;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
@@ -61,7 +62,7 @@ public void GetFilesPatternMatching(string pattern, int expectedMatchCount)
                 File.WriteAllBytes(Path.Combine(testFolder.Path, file), new byte[1]);
             }
 
-            string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, pattern);
+            string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, pattern).FileList;
 
             fileMatches.Length.ShouldBe(expectedMatchCount, $"Matches: '{String.Join("', '", fileMatches)}'");
         }
@@ -82,7 +83,7 @@ public void GetFilesComplexGlobbingMatching(GetFilesComplexGlobbingMatchingInfo
 
             void VerifyImpl(FileMatcher fileMatcher, string include, string[] excludes, bool shouldHaveNoMatches = false, string customMessage = null)
             {
-                string[] matchedFiles = fileMatcher.GetFiles(testFolder.Path, include, excludes?.ToList());
+                string[] matchedFiles = fileMatcher.GetFiles(testFolder.Path, include, excludes?.ToList()).FileList;
 
                 if (shouldHaveNoMatches)
                 {
@@ -1041,8 +1042,8 @@ public void DotDotForParentDirectory()
                 // On Linux *. * does not pick up files with no extension
                 ValidateFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine("..", "..", "File"), false);
             }
-            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new [] {"..", "..", "dir1", "dir2", "File.txt"}), false);
-            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new [] {"..", "..", "dir1", "dir2", "File"}), false);
+            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new[] { "..", "..", "dir1", "dir2", "File.txt" }), false);
+            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new[] { "..", "..", "dir1", "dir2", "File" }), false);
         }
 
         [Fact]
@@ -1138,7 +1139,7 @@ public void ParentWithoutSlash()
         [Fact]
         public void Unc()
         {
-            //Check UNC functionality
+            // Check UNC functionality
             ValidateFileMatch
                 (
                 "\\\\server\\c$\\**\\*.cs",
@@ -1255,7 +1256,7 @@ public void IllegalTooLongPathOptOutWave17_0()
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
                 string longString = new string('X', 500) + "*"; // need a wildcard to do anything
-                string[] result = FileMatcher.Default.GetFiles(@"c:\", longString);
+                string[] result = FileMatcher.Default.GetFiles(@"c:\", longString).FileList;
 
                 Assert.Equal(longString, result[0]); // Does not throw
                 ChangeWaves.ResetStateForTests();
@@ -1292,12 +1293,12 @@ public void Regress367780_CrashOnStarDotDot()
             string workingPath = _env.CreateFolder().Path;
             string workingPathSubfolder = Path.Combine(workingPath, "SubDir");
             string offendingPattern = Path.Combine(workingPath, @"*\..\bar");
-            string[] files = new string[0];
+            string[] files = Array.Empty<string>();
 
             Directory.CreateDirectory(workingPath);
             Directory.CreateDirectory(workingPathSubfolder);
 
-            files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
         }
 
         [Fact]
@@ -1309,7 +1310,7 @@ public void Regress141071_StarStarSlashStarStarIsLiteral()
 
             Directory.CreateDirectory(workingPath);
             File.WriteAllText(fileName, "Hello there.");
-            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
 
             string result = String.Join(", ", files);
             Console.WriteLine(result);
@@ -1329,7 +1330,7 @@ public void Regress14090_TrailingDotMatchesNoExtension()
             Directory.CreateDirectory(workingPath);
             Directory.CreateDirectory(workingPathSubdir);
             File.AppendAllText(workingPathSubdirBing, "y");
-            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
 
             string result = String.Join(", ", files);
             Console.WriteLine(result);
@@ -1352,19 +1353,19 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
                 {
                     env.SetEnvironmentVariable("MsBuildCacheFileEnumerations", "1");
 
-                    var testProject = env.CreateTestProjectWithFiles(string.Empty, new[] {"a.cs", "b.cs", "c.cs"});
+                    var testProject = env.CreateTestProjectWithFiles(string.Empty, new[] { "a.cs", "b.cs", "c.cs" });
 
-                    var files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs");
+                    var files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs").FileList;
                     Array.Sort(files);
-                    Assert.Equal(new []{"a.cs", "b.cs", "c.cs"}, files);
+                    Assert.Equal(new[] { "a.cs", "b.cs", "c.cs" }, files);
 
-                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string>{"a.cs"});
+                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> { "a.cs" }).FileList;
                     Array.Sort(files);
-                    Assert.Equal(new[] {"b.cs", "c.cs" }, files);
+                    Assert.Equal(new[] { "b.cs", "c.cs" }, files);
 
-                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string>{"a.cs", "c.cs"});
+                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> { "a.cs", "c.cs" }).FileList;
                     Array.Sort(files);
-                    Assert.Equal(new[] {"b.cs" }, files);
+                    Assert.Equal(new[] { "b.cs" }, files);
                 }
             }
             finally
@@ -1373,6 +1374,146 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
             }
         }
 
+        [PlatformSpecific(TestPlatforms.Any)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData(@"\\", "**")]
+        [InlineData(@"\\\\\\\\", "**")]
+        [InlineData("/", "**/*.cs")]
+        [InlineData("/", "**")]
+        [InlineData("//", "**")]
+        [InlineData("////////", "**")]
+        public void DriveEnumeratingWildcardIsObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
+            DriveEnumeratingWildcardIsObserved(directoryPart, wildcardPart);
+
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData(@"c:\", "**")]
+        [InlineData(@"c:\\", "**")]
+        [InlineData(@"c:\\\\\\\\", "**")]
+        [InlineData(@"c:\", @"**\*.cs")]
+        public void DriveEnumeratingWildcardIsObservedOnWindows(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardIsObserved(directoryPart, wildcardPart);
+            DriveEnumeratingWildcardFailsAndReturns(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardIsObserved(string directoryPart, string wildcardPart) =>
+            FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart).ShouldBeTrue();
+
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData("/", "**/*.cs")]
+        [InlineData("/", "**")]
+        [InlineData("//", "**")]
+        [InlineData("////////", "**")]
+        public void DriveEnumeratingWildcardFailsAndReturnsOnUnix(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardFailsAndReturns(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardFailsAndReturns(string directoryPart, string wildcardPart)
+        {
+            string driveEnumeratingWildcard = string.Concat(directoryPart, wildcardPart);
+
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Set env var to fail on drive enumerating wildcard detection
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+
+                    (string[] fileList, FileMatcher.SearchAction action, string excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        driveEnumeratingWildcard);
+
+                    action.ShouldBe(FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard);
+                    fileList.ShouldBeEmpty();
+                    excludeFileSpec.ShouldBe(string.Empty);
+
+                    // Handle failing with drive enumerating exclude
+                    (fileList, action, excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        @"/*/*.cs",
+                        new List<string> { driveEnumeratingWildcard });
+
+                    action.ShouldBe(FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard);
+                    fileList.ShouldBeEmpty();
+                    excludeFileSpec.ShouldBe(driveEnumeratingWildcard);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\\**")]
+        [InlineData(@"z:\\\\\\\\**")]
+        [InlineData(@"z:\**\*.cs")]
+        public void DriveEnumeratingWildcardIsLoggedOnWindows(string driveEnumeratingWildcard)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Set env var to log on drive enumerating wildcard detection
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                    (_, FileMatcher.SearchAction action, string excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        driveEnumeratingWildcard);
+
+                    action.ShouldBe(FileMatcher.SearchAction.LogDriveEnumeratingWildcard);
+                    excludeFileSpec.ShouldBe(string.Empty);
+
+                    // Handle logging with drive enumerating exclude
+                    (_, action, excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        @"/*/*.cs",
+                        new List<string> { driveEnumeratingWildcard });
+
+                    action.ShouldBe(FileMatcher.SearchAction.LogDriveEnumeratingWildcard);
+                    excludeFileSpec.ShouldBe(driveEnumeratingWildcard);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        [PlatformSpecific(TestPlatforms.Any)]
+        [Theory]
+        [InlineData(@"\", @"*\*.cs")]
+        [InlineData(@"\\", @"*\*.cs")]
+        [InlineData(@"\", @"*\*.*")]
+        [InlineData(@"/", @"*/*.cs")]
+        [InlineData(@"//", @"*/*.cs")]
+        [InlineData(@"/", @"*/*.*")]
+        public void DriveEnumeratingWildcardIsNotObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
+            DriveEnumeratingWildcardIsNotObserved(directoryPart, wildcardPart);
+
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"c:\", "**")]
+        [InlineData(@"c:\\", "**")]
+        [InlineData(@"c:\\\\\\\\", "**")]
+        [InlineData(@"c:\", @"**\*.cs")]
+        public void DriveEnumeratingWildcardIsNotObservedOnUnix(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardIsNotObserved(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardIsNotObserved(string directoryPart, string wildcardPart) =>
+            FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart).ShouldBeFalse();
+
         [Fact]
         public void RemoveProjectDirectory()
         {
@@ -1422,7 +1563,7 @@ public void RemoveProjectDirectory()
 
         [Theory]
         [InlineData(
-            @"src/**/*.cs", //  Include Pattern
+            @"src/**/*.cs", // Include Pattern
             new string[] //  Matching files
             {
                 @"src/a.cs",
@@ -1430,7 +1571,7 @@ public void RemoveProjectDirectory()
             }
             )]
         [InlineData(
-            @"src/test/**/*.cs", //  Include Pattern
+            @"src/test/**/*.cs", // Include Pattern
             new string[] //  Matching files
             {
                 @"src/test/a.cs",
@@ -1438,7 +1579,7 @@ public void RemoveProjectDirectory()
             }
             )]
         [InlineData(
-            @"src/test/**/a/b/**/*.cs", //  Include Pattern
+            @"src/test/**/a/b/**/*.cs", // Include Pattern
             new string[] //  Matching files
             {
                 @"src/test/dir\a\b\a.cs",
@@ -1452,18 +1593,18 @@ public void IncludePatternShouldNotPreserveUserSlashesInFixedDirPart(string incl
 
         [Theory]
         [InlineData(
-            @"**\*.cs", //  Include Pattern
+            @"**\*.cs", // Include Pattern
             new[] //  Exclude patterns
             {
                 @"bin\**"
             },
-            new string[] //  Matching files
+            new string[] // Matching files
             {
             },
-            new string[] //  Non matching files
+            new string[] // Non matching files
             {
             },
-            new[] //  Non matching files that shouldn't be touched
+            new[] // Non matching files that shouldn't be touched
             {
                 @"bin\foo.cs",
                 @"bin\bar\foo.cs",
@@ -1471,21 +1612,21 @@ public void IncludePatternShouldNotPreserveUserSlashesInFixedDirPart(string incl
             }
             )]
         [InlineData(
-            @"**\*.cs", //  Include Pattern
+            @"**\*.cs", // Include Pattern
             new[] //  Exclude patterns
             {
                 @"bin\**"
             },
-            new[] //  Matching files
+            new[] // Matching files
             {
                 "a.cs",
                 @"b\b.cs",
             },
-            new[] //  Non matching files
+            new[] // Non matching files
             {
                 @"b\b.txt"
             },
-            new[] //  Non matching files that shouldn't be touched
+            new[] // Non matching files that shouldn't be touched
             {
                 @"bin\foo.cs",
                 @"bin\bar\foo.cs",
@@ -1501,26 +1642,24 @@ public void ExcludePattern(string include, string[] exclude, string[] matching,
         public void ExcludeSpecificFiles()
         {
             MatchDriverWithDifferentSlashes(
-                @"**\*.cs",     //  Include Pattern
+                @"**\*.cs",     // Include Pattern
                 new[]    //  Exclude patterns
                 {
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                new[]    //  Matching files
+                new[]    // Matching files
                 {
                     @"foo.cs",
                     @"Properties\AssemblyInfo.cs",
                     @"Foo\Bar\Baz\Buzz.cs"
                 },
-                new[]    //  Non matching files
+                new[]    // Non matching files
                 {
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                new string[]    //  Non matching files that shouldn't be touched
-                {
-                }
+                Array.Empty<string>()    // Non matching files that shouldn't be touched
             );
         }
 
@@ -1528,27 +1667,27 @@ public void ExcludeSpecificFiles()
         public void ExcludePatternAndSpecificFiles()
         {
             MatchDriverWithDifferentSlashes(
-                @"**\*.cs",     //  Include Pattern
+                @"**\*.cs",     // Include Pattern
                 new[]    //  Exclude patterns
                 {
                     @"bin\**",
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                new[]    //  Matching files
+                new[]    // Matching files
                 {
                     @"foo.cs",
                     @"Properties\AssemblyInfo.cs",
                     @"Foo\Bar\Baz\Buzz.cs"
                 },
-                new[]    //  Non matching files
+                new[]    // Non matching files
                 {
                     @"foo.txt",
                     @"Foo\foo.txt",
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                new[]    //  Non matching files that shouldn't be touched
+                new[]    // Non matching files that shouldn't be touched
                 {
                     @"bin\foo.cs",
                     @"bin\bar\foo.cs",
@@ -2384,7 +2523,7 @@ private static void MatchDriver(string filespec, string[] excludeFilespecs, stri
                 String.Empty, /* we don't need project directory as we use mock filesystem */
                 filespec,
                 excludeFilespecs?.ToList()
-            );
+            ).FileList;
 
             Func<string[], string[]> normalizeAllFunc = (paths => normalizeAllPaths ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
             Func<string[], string[]> normalizeMatching = (paths => normalizeExpectedMatchingFiles ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index a9754904854..3f9c53f3a68 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -10,6 +10,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class FileUtilities_Tests
@@ -142,7 +144,6 @@ public void MakeRelativeTests()
                 Assert.Equal(@"../", FileUtilities.MakeRelative(@"/abc/def/xyz", @"/abc/def/"));
                 Assert.Equal(@"../ghi/", FileUtilities.MakeRelative(@"/abc/def/xyz", @"/abc/def/ghi/"));
                 Assert.Equal(@".", FileUtilities.MakeRelative(@"/abc/def", @"/abc/def/"));
-
             }
         }
 
@@ -332,10 +333,10 @@ public void EnsureTrailingSlash()
             Assert.Equal(FileUtilities.FixFilePath(@"foo/bar\"), FileUtilities.EnsureTrailingSlash(@"foo/bar")); // "test 2"
 
             // Already has a trailing slash to start with.
-            Assert.Equal(FileUtilities.FixFilePath(@"foo/bar/"), FileUtilities.EnsureTrailingSlash(@"foo/bar/")); //test 3"
-            Assert.Equal(FileUtilities.FixFilePath(@"foo\bar\"), FileUtilities.EnsureTrailingSlash(@"foo\bar\")); //test 4"
-            Assert.Equal(FileUtilities.FixFilePath(@"foo/bar\"), FileUtilities.EnsureTrailingSlash(@"foo/bar\")); //test 5"
-            Assert.Equal(FileUtilities.FixFilePath(@"foo\bar/"), FileUtilities.EnsureTrailingSlash(@"foo\bar/")); //"test 5"
+            Assert.Equal(FileUtilities.FixFilePath(@"foo/bar/"), FileUtilities.EnsureTrailingSlash(@"foo/bar/")); // test 3"
+            Assert.Equal(FileUtilities.FixFilePath(@"foo\bar\"), FileUtilities.EnsureTrailingSlash(@"foo\bar\")); // test 4"
+            Assert.Equal(FileUtilities.FixFilePath(@"foo/bar\"), FileUtilities.EnsureTrailingSlash(@"foo/bar\")); // test 5"
+            Assert.Equal(FileUtilities.FixFilePath(@"foo\bar/"), FileUtilities.EnsureTrailingSlash(@"foo\bar/")); // "test 5"
         }
 
         /// <summary>
@@ -1088,5 +1089,45 @@ public static void TestTruncatePathToTrailingSegments(string path, int trailingS
 
             FileUtilities.TruncatePathToTrailingSegments(path, trailingSegments).ShouldBe(expectedTruncatedPath);
         }
+
+        /// <summary>
+        /// Exercises FileUtilities.EnsureSingleQuotes
+        /// </summary>
+        [Theory]
+        [InlineData(null, null)] // Null test
+        [InlineData("", "")] // Empty string test
+        [InlineData(@" ", @"' '")] // One character which is a space
+        [InlineData(@"'", @"'''")] // One character which is a single quote
+        [InlineData(@"""", @"'""'")] // One character which is a double quote
+        [InlineData(@"example", @"'example'")] // Unquoted string
+        [InlineData(@"'example'", @"'example'")] // Single quoted string
+        [InlineData(@"""example""", @"'example'")] // Double quoted string
+        [InlineData(@"'example""", @"''example""'")] // Mixed Quotes - Leading Single
+        [InlineData(@"""example'", @"'""example''")] // Mixed Quotes - Leading Double
+        [InlineData(@"ex""am'ple", @"'ex""am'ple'")] // Interior Quotes
+        public void EnsureSingleQuotesTest(string path, string expectedResult)
+        {
+            FileUtilities.EnsureSingleQuotes(path).ShouldBe(expectedResult);
+        }
+
+        /// <summary>
+        /// Exercises FileUtilities.EnsureDoubleQuotes
+        /// </summary>
+        [Theory]
+        [InlineData(null, null)] // Null test
+        [InlineData("", "")] // Empty string test
+        [InlineData(@" ", @""" """)] // One character which is a space
+        [InlineData(@"'", @"""'""")] // One character which is a single quote
+        [InlineData(@"""", @"""""""")] // One character which is a double quote
+        [InlineData(@"example", @"""example""")] // Unquoted string
+        [InlineData(@"'example'", @"""example""")] // Single quoted string
+        [InlineData(@"""example""", @"""example""")] // Double quoted string
+        [InlineData(@"'example""", @"""'example""""")] // Mixed Quotes - Leading Single
+        [InlineData(@"""example'", @"""""example'""")] // Mixed Quotes - Leading Double
+        [InlineData(@"ex""am'ple", @"""ex""am'ple""")] // Interior Quotes
+        public void EnsureDoubleQuotesTest(string path, string expectedResult)
+        {
+            FileUtilities.EnsureDoubleQuotes(path).ShouldBe(expectedResult);
+        }
     }
 }
diff --git a/src/Shared/UnitTests/ImmutableDictionary_Tests.cs b/src/Shared/UnitTests/ImmutableDictionary_Tests.cs
index e30a8cc75d1..9ac90118d3a 100644
--- a/src/Shared/UnitTests/ImmutableDictionary_Tests.cs
+++ b/src/Shared/UnitTests/ImmutableDictionary_Tests.cs
@@ -4,7 +4,7 @@
 // We don't automatically run these tests against the BCL implementation of ImmutableDictionary as it would require dual-compiling
 // this file. When making changes to this test, though, it is recommended to run them manually by uncommenting the following line.
 // This helps ensure that the real thing has the same behavior that we expect in our implementation.
-//#define _TEST_BCL_IMMUTABLE_DICTIONARY
+// #define _TEST_BCL_IMMUTABLE_DICTIONARY
 
 extern alias MSBuildTaskHost;
 
@@ -21,6 +21,8 @@
 using ImmutableDictionary = MSBuildTaskHost::System.Collections.Immutable.ImmutableDictionary<string, string>;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ImmutableDictionary_Tests
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 431e8948cb0..7d54b8e7217 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -14,6 +14,8 @@
 using Shouldly;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /***************************************************************************
diff --git a/src/Shared/UnitTests/MockLogger.cs b/src/Shared/UnitTests/MockLogger.cs
index f8a094bb442..2f07fca6d10 100644
--- a/src/Shared/UnitTests/MockLogger.cs
+++ b/src/Shared/UnitTests/MockLogger.cs
@@ -15,6 +15,8 @@
 using Xunit.Abstractions;
 using ProjectCollection = Microsoft.Build.Evaluation.ProjectCollection;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /*
diff --git a/src/Shared/UnitTests/NativeMethodsShared_Tests.cs b/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
index db838d518f1..825ccaeb1d4 100644
--- a/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
+++ b/src/Shared/UnitTests/NativeMethodsShared_Tests.cs
@@ -11,6 +11,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class NativeMethodsShared_Tests
@@ -52,11 +54,11 @@ public void TestGetProcAddress()
                 // Make sure the pointer passed back for the method is not null
                 Assert.NotEqual(processHandle, NativeMethodsShared.NullIntPtr);
 
-                //Actually call the method
+                // Actually call the method
                 GetProcessIdDelegate processIdDelegate = Marshal.GetDelegateForFunctionPointer<GetProcessIdDelegate>(processHandle);
                 uint processId = processIdDelegate();
 
-                //Make sure the return value is the same as retrieved from the .net methods to make sure everything works
+                // Make sure the return value is the same as retrieved from the .net methods to make sure everything works
                 Assert.Equal((uint)Process.GetCurrentProcess().Id, processId); // "Expected the .net processId to match the one from GetCurrentProcessId"
             }
             finally
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index e647fd709c0..f8d6a15e9d3 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -13,7 +13,9 @@
 using System.Threading.Tasks;
 using System.Xml;
 
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileSystem;
@@ -26,6 +28,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /*
@@ -120,7 +124,7 @@ internal static void AssertItemEvaluationFromProject(string projectContents, str
                 {
                     return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
                         .Items
-                        .Select(i => (TestItem) new ProjectItemTestItemAdapter(i))
+                        .Select(i => (ITestItem)new ProjectItemTestItemAdapter(i))
                         .ToList();
                 },
             projectContents,
@@ -131,7 +135,7 @@ internal static void AssertItemEvaluationFromProject(string projectContents, str
             normalizeSlashes);
         }
 
-        internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<TestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
+        internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, ProjectCollection, IList<ITestItem>> itemEvaluator, string projectContents, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false)
         {
             using (var env = TestEnvironment.Create())
             using (var collection = new ProjectCollection())
@@ -195,14 +199,14 @@ internal static string NormalizeSlashes(string path)
         }
 
         // todo Make IItem<M> public and add these new members to it.
-        internal interface TestItem
+        internal interface ITestItem
         {
             string EvaluatedInclude { get; }
             int DirectMetadataCount { get; }
             string GetMetadataValue(string key);
         }
 
-        internal class ProjectItemTestItemAdapter : TestItem
+        internal class ProjectItemTestItemAdapter : ITestItem
         {
             private readonly ProjectItem _projectInstance;
 
@@ -221,7 +225,7 @@ public static implicit operator ProjectItemTestItemAdapter(ProjectItem pi)
             }
         }
 
-        internal class ProjectItemInstanceTestItemAdapter : TestItem
+        internal class ProjectItemInstanceTestItemAdapter : ITestItem
         {
             private readonly ProjectItemInstance _projectInstance;
 
@@ -242,14 +246,14 @@ public static implicit operator ProjectItemInstanceTestItemAdapter(ProjectItemIn
 
         internal static void AssertItems(string[] expectedItems, ICollection<ProjectItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
-            var converteditems = items.Select(i => (TestItem) new ProjectItemTestItemAdapter(i)).ToList();
+            var converteditems = items.Select(i => (ITestItem)new ProjectItemTestItemAdapter(i)).ToList();
             AssertItems(expectedItems, converteditems, expectedDirectMetadata, normalizeSlashes);
         }
 
         /// <summary>
         /// Asserts that the list of items has the specified evaluated includes.
         /// </summary>
-        internal static void AssertItems(string[] expectedItems, IList<TestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
+        internal static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string> expectedDirectMetadata = null, bool normalizeSlashes = false)
         {
             if (expectedDirectMetadata == null)
             {
@@ -269,11 +273,11 @@ internal static void AssertItems(string[] expectedItems, IList<TestItem> items,
 
         public static void AssertItems(string[] expectedItems, IList<ProjectItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
         {
-            var convertedItems = items.Select(i => (TestItem) new ProjectItemTestItemAdapter(i)).ToList();
+            var convertedItems = items.Select(i => (ITestItem)new ProjectItemTestItemAdapter(i)).ToList();
             AssertItems(expectedItems, convertedItems, expectedDirectMetadataPerItem, normalizeSlashes);
         }
 
-        public static void AssertItems(string[] expectedItems, IList<TestItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
+        public static void AssertItems(string[] expectedItems, IList<ITestItem> items, Dictionary<string, string>[] expectedDirectMetadataPerItem, bool normalizeSlashes = false)
         {
             if (items.Count != 0 || expectedDirectMetadataPerItem.Length != 0)
             {
@@ -425,7 +429,7 @@ internal static void AssertItemsMatch(string expectedItemsString, ITaskItem[] ac
                         Assert.Equal(
                                 expectedMetadataValue,
                                 actualMetadataValue
-                            //string.Format
+                            // string.Format
                             //    (
                             //        "Item '{0}' has metadata {1}={2} instead of expected {1}={3}.",
                             //        actualItem.ItemSpec,
@@ -465,7 +469,7 @@ internal static void AssertItemHasMetadata(string key, string value, ProjectItem
             item.GetMetadataValue(key).ShouldBe(value);
         }
 
-        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, TestItem item)
+        internal static void AssertItemHasMetadata(Dictionary<string, string> expected, ITestItem item)
         {
             expected ??= new Dictionary<string, string>();
 
@@ -714,7 +718,7 @@ internal static Project CreateInMemoryProject
             string toolsVersion /* may be null */
             )
         {
-            XmlReaderSettings readerSettings = new XmlReaderSettings {DtdProcessing = DtdProcessing.Ignore};
+            XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
 
             Project project = new Project
                 (
@@ -877,19 +881,10 @@ internal static void DeleteDirectory(string dir)
 
                     break;
                 }
-                catch (Exception ex)
+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.
+                catch (Exception ex) when (retries < 4)
                 {
-                    if (retries < 4)
-                    {
-                        Console.WriteLine(ex.ToString());
-                    }
-                    else
-                    {
-                        // All the retries have failed. We will now fail with the
-                        // actual problem now instead of with some more difficult-to-understand
-                        // issue later.
-                        throw;
-                    }
+                    Console.WriteLine(ex.ToString());
                 }
             }
         }
@@ -924,19 +919,10 @@ internal static string CreateFileInTempProjectDirectory(string fileRelativePath,
                     }
                     break;
                 }
-                catch (Exception ex)
+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.
+                catch (Exception ex) when (retries < 4)
                 {
-                    if (retries < 4)
-                    {
-                        Console.WriteLine(ex.ToString());
-                    }
-                    else
-                    {
-                        // All the retries have failed. We will now fail with the
-                        // actual problem now instead of with some more difficult-to-understand
-                        // issue later.
-                        throw;
-                    }
+                    Console.WriteLine(ex.ToString());
                 }
             }
 
@@ -1118,7 +1104,7 @@ internal static string FormatProjectContentsWithItemGroupFragment(string fragmen
         {
             return
                 $@"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
+                    <Project>
                         <ItemGroup>
                             {fragment}
                         </ItemGroup>
@@ -1400,15 +1386,15 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
                 if (logger != null)
                 {
                     parameters.Loggers = parameters.Loggers == null
-                        ? new[] {logger}
-                        : parameters.Loggers.Concat(new[] {logger});
+                        ? new[] { logger }
+                        : parameters.Loggers.Concat(new[] { logger });
                 }
 
                 var request = new BuildRequestData(
                     projectFile,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new string[] {},
+                    Array.Empty<string>(),
                     null);
 
                 var result = buildManager.Build(
@@ -1419,6 +1405,109 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
             }
         }
 
+        internal enum ExpectedBuildResult
+        {
+            // The build should fail with a logged error upon drive enumerationg wildcard detection and setting of environment variable.
+            FailWithError,
+            // The build should succeed with a logged warning upon drive enumerating wildcard detection (regardless of environment variable value).
+            SucceedWithWarning,
+            // The build should succeed with no logged warnings and errors, as there are no drive enumerating wildcards.
+            SucceedWithNoErrorsAndWarnings
+        }
+
+        /// <summary>
+        /// Verify that a drive enumerating wildcard warning is logged or exception is thrown. 
+        /// </summary>
+        internal static void CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(string content, string failOnDriveEnumerationEnvVar, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        {
+            using (var env = TestEnvironment.Create(testOutput))
+            {
+                // Clean file contents by replacing single quotes with double quotes, etc.
+                content = ObjectModelHelpers.CleanupFileContents(content);
+                var testProject = env.CreateTestProjectWithFiles(content.Cleanup());
+
+                // Reset state
+                ResetStateForDriveEnumeratingWildcardTests(env, failOnDriveEnumerationEnvVar);
+
+                // Setup and build test target
+                BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(env, testProject.ProjectFile, targetName, expectedBuildResult, testOutput);
+            }
+        }
+
+        internal static void ResetStateForDriveEnumeratingWildcardTests(TestEnvironment env, string setEnvVar)
+        {
+            ChangeWaves.ResetStateForTests();
+            env.SetEnvironmentVariable("MSBUILDFAILONDRIVEENUMERATINGWILDCARD", setEnvVar);
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+        }
+
+        internal static void BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(TestEnvironment env, string testProjectFile, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        {
+            try
+            {
+                // Setup build
+                MockLogger mockLogger = (testOutput == null) ? new MockLogger() : new MockLogger(testOutput);
+                var p = ProjectInstance.FromFile(testProjectFile, new ProjectOptions());
+                BuildManager buildManager = BuildManager.DefaultBuildManager;
+                BuildRequestData data = new BuildRequestData(p, new[] { targetName });
+                BuildParameters parameters = new BuildParameters()
+                {
+                    Loggers = new ILogger[] { mockLogger },
+                };
+
+                // Perform build using build manager
+                BuildResult buildResult = buildManager.Build(parameters, data);
+
+                // Verify result based on value of ExpectedBuildResult
+                if (expectedBuildResult == ExpectedBuildResult.FailWithError)
+                {
+                    VerifyErrorLoggedForDriveEnumeratingWildcard(buildResult, mockLogger, targetName, testProjectFile);
+                }
+                else if (expectedBuildResult == ExpectedBuildResult.SucceedWithWarning)
+                {
+                    VerifyWarningLoggedForDriveEnumeratingWildcard(buildResult, mockLogger, targetName, testProjectFile);
+                }
+                else if (expectedBuildResult == ExpectedBuildResult.SucceedWithNoErrorsAndWarnings)
+                {
+                    VerifyNoErrorsAndWarningsForDriveEnumeratingWildcard(buildResult, mockLogger, targetName);
+                }
+            }
+            finally
+            {
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
+        private static void VerifyErrorLoggedForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName, string testProjectFile)
+        {
+            buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult[targetName].ResultCode.ShouldBe(TargetResultCode.Failure);
+            mockLogger.ErrorCount.ShouldBe(1);
+            mockLogger.Errors[0].Code.ShouldBe("MSB5029");
+            mockLogger.Errors[0].Message.ShouldContain(testProjectFile);
+        }
+
+        private static void VerifyWarningLoggedForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName, string testProjectFile)
+        {
+            VerifySuccessOfBuildAndTargetResults(buildResult, targetName);
+            mockLogger.WarningCount.ShouldBe(1);
+            mockLogger.Warnings[0].Code.ShouldBe("MSB5029");
+            mockLogger.Warnings[0].Message.ShouldContain(testProjectFile);
+        }
+
+        private static void VerifyNoErrorsAndWarningsForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName)
+        {
+            VerifySuccessOfBuildAndTargetResults(buildResult, targetName);
+            mockLogger.WarningCount.ShouldBe(0);
+            mockLogger.ErrorCount.ShouldBe(0);
+        }
+
+        private static void VerifySuccessOfBuildAndTargetResults(BuildResult buildResult, string targetName)
+        {
+            buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            buildResult[targetName].ResultCode.ShouldBe(TargetResultCode.Success);
+        }
+
         /// <summary>
         /// Build a project with the provided content in memory.
         /// Assert that it fails, and return the mock logger with the output.
@@ -1601,7 +1690,7 @@ internal static TransientTestFile CreateProjectFile(
 
             sb.Append("</ItemGroup>");
 
-            
+
             foreach (var defaultTarget in (defaultTargets ?? string.Empty).Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
             {
                 sb.Append("<Target Name='").Append(defaultTarget).Append("'/>");
@@ -1799,7 +1888,7 @@ internal static void VerifyAssertThrowsInvalidOperation(Action method)
         /// </summary>
         internal static void VerifyAssertLineByLine(string expected, string actual, bool ignoreFirstLineOfActual, ITestOutputHelper testOutput = null)
         {
-            Action<string> LogLine = testOutput == null ? (Action<string>) Console.WriteLine : testOutput.WriteLine;
+            Action<string> LogLine = testOutput == null ? (Action<string>)Console.WriteLine : testOutput.WriteLine;
 
             string[] actualLines = SplitIntoLines(actual);
 
@@ -1950,7 +2039,7 @@ public BuildManagerSession(
                 _env = env;
 
                 Logger = new MockLogger(_env.Output);
-                var loggers = new[] {Logger};
+                var loggers = new[] { Logger };
 
                 var actualBuildParameters = buildParameters ?? new BuildParameters();
 
@@ -1982,7 +2071,7 @@ public async Task<BuildResult> BuildProjectFileAsync(
                 var buildRequestData = new BuildRequestData(projectFile,
                     globalProperties ?? new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    entryTargets ?? new string[0],
+                    entryTargets ?? Array.Empty<string>(),
                     null);
 
                 var completion = new TaskCompletionSource<BuildResult>();
@@ -2002,7 +2091,7 @@ public GraphBuildResult BuildGraphSubmission(GraphBuildRequestData requestData)
 
             public GraphBuildResult BuildGraph(ProjectGraph graph, string[] entryTargets = null)
             {
-                return _buildManager.BuildRequest(new GraphBuildRequestData(graph, entryTargets ?? new string[0]));
+                return _buildManager.BuildRequest(new GraphBuildRequestData(graph, entryTargets ?? Array.Empty<string>()));
             }
 
             public void Dispose()
diff --git a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
index 2d0c1747e6c..a9cd5ddb7ff 100644
--- a/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
+++ b/src/Shared/UnitTests/PrintLineDebugger_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class PrintLineDebugger_Tests
@@ -258,4 +260,4 @@ public void CannotUnsetWriterWhenNoWriterIsSet()
         }
     }
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/src/Shared/UnitTests/ResourceUtilities_Tests.cs b/src/Shared/UnitTests/ResourceUtilities_Tests.cs
index 7731a95e67d..c9cdaa5ff45 100644
--- a/src/Shared/UnitTests/ResourceUtilities_Tests.cs
+++ b/src/Shared/UnitTests/ResourceUtilities_Tests.cs
@@ -6,6 +6,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ResourceUtilitiesTests
diff --git a/src/Shared/UnitTests/StreamHelpers.cs b/src/Shared/UnitTests/StreamHelpers.cs
index af9c876d4b6..b2130e2458b 100644
--- a/src/Shared/UnitTests/StreamHelpers.cs
+++ b/src/Shared/UnitTests/StreamHelpers.cs
@@ -3,6 +3,8 @@
 
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed internal class StreamHelpers
diff --git a/src/Shared/UnitTests/TaskParameter_Tests.cs b/src/Shared/UnitTests/TaskParameter_Tests.cs
index 6aeaf69fcd4..9fdb8aa1c8d 100644
--- a/src/Shared/UnitTests/TaskParameter_Tests.cs
+++ b/src/Shared/UnitTests/TaskParameter_Tests.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -87,25 +89,25 @@ public void StringArrayParameter()
         /// Verifies that construction and serialization with a value type (integer) parameter is OK.
         /// </summary>
         [Fact]
-        public void ValueTypeParameter()
+        public void IntParameter()
         {
             TaskParameter t = new TaskParameter(1);
 
             Assert.Equal(1, t.WrappedParameter);
-            Assert.Equal(TaskParameterType.ValueType, t.ParameterType);
+            Assert.Equal(TaskParameterType.Int, t.ParameterType);
 
             ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
             TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
             Assert.Equal(1, t2.WrappedParameter);
-            Assert.Equal(TaskParameterType.ValueType, t2.ParameterType);
+            Assert.Equal(TaskParameterType.Int, t2.ParameterType);
         }
 
         /// <summary>
         /// Verifies that construction and serialization with a parameter that is an array of value types (ints) is OK.
         /// </summary>
         [Fact]
-        public void ValueTypeArrayParameter()
+        public void IntArrayParameter()
         {
             TaskParameter t = new TaskParameter(new int[] { 2, 15 });
 
@@ -129,6 +131,69 @@ public void ValueTypeArrayParameter()
             Assert.Equal(15, wrappedParameter2[1]);
         }
 
+        enum TestEnumForParameter
+        {
+            Something,
+            SomethingElse
+        }
+
+        [Fact]
+        public void EnumParameter()
+        {
+            TaskParameter t = new TaskParameter(TestEnumForParameter.SomethingElse);
+
+            Assert.Equal("SomethingElse", t.WrappedParameter);
+            Assert.Equal(TaskParameterType.String, t.ParameterType);
+
+            ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
+            TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
+
+            Assert.Equal("SomethingElse", t2.WrappedParameter);
+            Assert.Equal(TaskParameterType.String, t2.ParameterType);
+        }
+
+        [Fact]
+        public void BoolParameter()
+        {
+            TaskParameter t = new TaskParameter(true);
+
+            Assert.Equal(true, t.WrappedParameter);
+            Assert.Equal(TaskParameterType.Bool, t.ParameterType);
+
+            ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
+            TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
+
+            Assert.Equal(true, t2.WrappedParameter);
+            Assert.Equal(TaskParameterType.Bool, t2.ParameterType);
+        }
+
+        /// <summary>
+        /// Verifies that construction and serialization with a parameter that is an array of value types (ints) is OK.
+        /// </summary>
+        [Fact]
+        public void BoolArrayParameter()
+        {
+            TaskParameter t = new TaskParameter(new bool[] { false, true });
+
+            Assert.Equal(TaskParameterType.ValueTypeArray, t.ParameterType);
+
+            bool[] wrappedParameter = t.WrappedParameter as bool[];
+            Assert.NotNull(wrappedParameter);
+            Assert.Equal(2, wrappedParameter.Length);
+            Assert.False(wrappedParameter[0]);
+            Assert.True(wrappedParameter[1]);
+
+            ((ITranslatable)t).Translate(TranslationHelpers.GetWriteTranslator());
+            TaskParameter t2 = TaskParameter.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
+
+            Assert.Equal(TaskParameterType.ValueTypeArray, t2.ParameterType);
+
+            bool[] wrappedParameter2 = Assert.IsType<bool[]>(t2.WrappedParameter);
+            Assert.Equal(2, wrappedParameter2.Length);
+            Assert.False(wrappedParameter2[0]);
+            Assert.True(wrappedParameter2[1]);
+        }
+
         /// <summary>
         /// Verifies that construction and serialization with an ITaskItem parameter is OK.
         /// </summary>
diff --git a/src/Shared/UnitTests/TestAssemblyInfo.cs b/src/Shared/UnitTests/TestAssemblyInfo.cs
index 627aa0d465e..ef9c42456db 100644
--- a/src/Shared/UnitTests/TestAssemblyInfo.cs
+++ b/src/Shared/UnitTests/TestAssemblyInfo.cs
@@ -1,5 +1,4 @@
-﻿
-using System;
+﻿using System;
 using System.IO;
 using System.Linq;
 using System.Runtime.InteropServices;
@@ -8,141 +7,146 @@
 using Microsoft.Build.UnitTests;
 using Xunit;
 
+#nullable disable
+
 [assembly: CollectionBehavior(CollectionBehavior.CollectionPerAssembly)]
 
-//  Register test framework for assembly fixture
+// Register test framework for assembly fixture
 [assembly: TestFramework("Xunit.NetCore.Extensions.XunitTestFrameworkWithAssemblyFixture", "Xunit.NetCore.Extensions")]
 
 [assembly: AssemblyFixture(typeof(MSBuildTestAssemblyFixture))]
 
-//  Wrap a TestEnvironment around each test method and class so if invariants have changed we will know where
+// Wrap a TestEnvironment around each test method and class so if invariants have changed we will know where
 [assembly: AssemblyFixture(typeof(MSBuildTestEnvironmentFixture), LifetimeScope = AssemblyFixtureAttribute.Scope.Class)]
 [assembly: AssemblyFixture(typeof(MSBuildTestEnvironmentFixture), LifetimeScope = AssemblyFixtureAttribute.Scope.Method)]
 
-public class MSBuildTestAssemblyFixture : IDisposable
+namespace Microsoft.Build.UnitTests
 {
-    bool _disposed;
-    private TestEnvironment _testEnvironment;
-
-    public MSBuildTestAssemblyFixture()
+    public class MSBuildTestAssemblyFixture : IDisposable
     {
-        //  Set field to indicate tests are running in the TestInfo class in Microsoft.Build.Framework.
-        //  See the comments on the TestInfo class for an explanation of why it works this way.
-        var frameworkAssembly = typeof(Microsoft.Build.Framework.ITask).Assembly;
-        var testInfoType = frameworkAssembly.GetType("Microsoft.Build.Framework.TestInfo");
-        var runningTestsField = testInfoType.GetField("s_runningTests", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
-        runningTestsField.SetValue(null, true);
+        bool _disposed;
+        private TestEnvironment _testEnvironment;
 
-        _testEnvironment = TestEnvironment.Create();
+        public MSBuildTestAssemblyFixture()
+        {
+            // Set field to indicate tests are running in the TestInfo class in Microsoft.Build.Framework.
+            //  See the comments on the TestInfo class for an explanation of why it works this way.
+            var frameworkAssembly = typeof(Microsoft.Build.Framework.ITask).Assembly;
+            var testInfoType = frameworkAssembly.GetType("Microsoft.Build.Framework.TestInfo");
+            var runningTestsField = testInfoType.GetField("s_runningTests", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
+            runningTestsField.SetValue(null, true);
 
-        _testEnvironment.DoNotLaunchDebugger();
+            _testEnvironment = TestEnvironment.Create();
 
-        //  Reset the VisualStudioVersion environment variable.  This will be set if tests are run from a VS command prompt.  However,
-        //  if the environment variable is set, it will interfere with tests which set the SubToolsetVersion
-        //  (VerifySubToolsetVersionSetByConstructorOverridable), as the environment variable would take precedence.
-        _testEnvironment.SetEnvironmentVariable("VisualStudioVersion", string.Empty);
+            _testEnvironment.DoNotLaunchDebugger();
 
-        // Prevent test assemblies from logging any performance info.
-        // https://github.com/dotnet/msbuild/pull/6274
-        _testEnvironment.SetEnvironmentVariable("DOTNET_PERFLOG_DIR", string.Empty);
+            // Reset the VisualStudioVersion environment variable.  This will be set if tests are run from a VS command prompt.  However,
+            //  if the environment variable is set, it will interfere with tests which set the SubToolsetVersion
+            //  (VerifySubToolsetVersionSetByConstructorOverridable), as the environment variable would take precedence.
+            _testEnvironment.SetEnvironmentVariable("VisualStudioVersion", string.Empty);
 
-        SetDotnetHostPath(_testEnvironment);
+            // Prevent test assemblies from logging any performance info.
+            // https://github.com/dotnet/msbuild/pull/6274
+            _testEnvironment.SetEnvironmentVariable("DOTNET_PERFLOG_DIR", string.Empty);
 
-        //  Use a project-specific temporary path
-        //  This is so multiple test projects can be run in parallel without sharing the same temp directory
-        var subdirectory = Path.GetRandomFileName();
+            SetDotnetHostPath(_testEnvironment);
 
-        string newTempPath = Path.Combine(Path.GetTempPath(), subdirectory);
-        var assemblyTempFolder = _testEnvironment.CreateFolder(newTempPath);
+            // Use a project-specific temporary path
+            //  This is so multiple test projects can be run in parallel without sharing the same temp directory
+            var subdirectory = Path.GetRandomFileName();
 
-        _testEnvironment.SetTempPath(assemblyTempFolder.Path);
+            string newTempPath = Path.Combine(Path.GetTempPath(), subdirectory);
+            var assemblyTempFolder = _testEnvironment.CreateFolder(newTempPath);
 
-        _testEnvironment.CreateFile(
-            transientTestFolder: assemblyTempFolder,
-            fileName: "MSBuild_Tests.txt",
-            contents: $"Temporary test folder for tests from {AppContext.BaseDirectory}");
+            _testEnvironment.SetTempPath(assemblyTempFolder.Path);
 
-        // Ensure that we stop looking for a D.B.rsp at the root of the test temp
-        _testEnvironment.CreateFile(
-            transientTestFolder: assemblyTempFolder,
-            fileName: "Directory.Build.rsp",
-            contents: string.Empty);
+            _testEnvironment.CreateFile(
+                transientTestFolder: assemblyTempFolder,
+                fileName: "MSBuild_Tests.txt",
+                contents: $"Temporary test folder for tests from {AppContext.BaseDirectory}");
 
-        _testEnvironment.CreateFile(
-            transientTestFolder: assemblyTempFolder,
-            fileName: "Directory.Build.props",
-            contents: "<Project />");
+            // Ensure that we stop looking for a D.B.rsp at the root of the test temp
+            _testEnvironment.CreateFile(
+                transientTestFolder: assemblyTempFolder,
+                fileName: "Directory.Build.rsp",
+                contents: string.Empty);
 
-        _testEnvironment.CreateFile(
-            transientTestFolder: assemblyTempFolder,
-            fileName: "Directory.Build.targets",
-            contents: "<Project />");
-    }
+            _testEnvironment.CreateFile(
+                transientTestFolder: assemblyTempFolder,
+                fileName: "Directory.Build.props",
+                contents: "<Project />");
 
-    /// <summary>
-    /// Find correct version of "dotnet", and set DOTNET_HOST_PATH so that the Roslyn tasks will use the right host
-    /// </summary>
-    /// <param name="testEnvironment"></param>
-    private static void SetDotnetHostPath(TestEnvironment testEnvironment)
-    {
-        var currentFolder = AppContext.BaseDirectory;
+            _testEnvironment.CreateFile(
+                transientTestFolder: assemblyTempFolder,
+                fileName: "Directory.Build.targets",
+                contents: "<Project />");
+        }
 
-        while (currentFolder != null)
+        /// <summary>
+        /// Find correct version of "dotnet", and set DOTNET_HOST_PATH so that the Roslyn tasks will use the right host
+        /// </summary>
+        /// <param name="testEnvironment"></param>
+        private static void SetDotnetHostPath(TestEnvironment testEnvironment)
         {
-            string potentialVersionsPropsPath = Path.Combine(currentFolder, "build", "Versions.props");
-            if (FileSystems.Default.FileExists(potentialVersionsPropsPath))
+            var currentFolder = AppContext.BaseDirectory;
+
+            while (currentFolder != null)
             {
-                var doc = XDocument.Load(potentialVersionsPropsPath);
-                var ns = doc.Root.Name.Namespace;
-                var cliVersionElement = doc.Root.Elements(ns + "PropertyGroup").Elements(ns + "DotNetCliVersion").FirstOrDefault();
-                if (cliVersionElement != null)
+                string potentialVersionsPropsPath = Path.Combine(currentFolder, "build", "Versions.props");
+                if (FileSystems.Default.FileExists(potentialVersionsPropsPath))
                 {
-                    string cliVersion = cliVersionElement.Value;
-                    string dotnetPath = Path.Combine(currentFolder, "artifacts", ".dotnet", cliVersion, "dotnet");
-
-                    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+                    var doc = XDocument.Load(potentialVersionsPropsPath);
+                    var ns = doc.Root.Name.Namespace;
+                    var cliVersionElement = doc.Root.Elements(ns + "PropertyGroup").Elements(ns + "DotNetCliVersion").FirstOrDefault();
+                    if (cliVersionElement != null)
                     {
-                        dotnetPath += ".exe";
+                        string cliVersion = cliVersionElement.Value;
+                        string dotnetPath = Path.Combine(currentFolder, "artifacts", ".dotnet", cliVersion, "dotnet");
+
+                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
+                        {
+                            dotnetPath += ".exe";
+                        }
+
+                        testEnvironment.SetEnvironmentVariable("DOTNET_HOST_PATH", dotnetPath);
                     }
 
-                    testEnvironment.SetEnvironmentVariable("DOTNET_HOST_PATH", dotnetPath);
+                    break;
                 }
 
-                break;
+                currentFolder = Directory.GetParent(currentFolder)?.FullName;
             }
-
-            currentFolder = Directory.GetParent(currentFolder)?.FullName;
         }
-    }
 
-    public void Dispose()
-    {
-        if (!_disposed)
+        public void Dispose()
         {
-            _testEnvironment.Dispose();
+            if (!_disposed)
+            {
+                _testEnvironment.Dispose();
 
-            _disposed = true;
+                _disposed = true;
+            }
         }
     }
-}
 
-public class MSBuildTestEnvironmentFixture : IDisposable
-{
-    bool _disposed;
-    private TestEnvironment _testEnvironment;
-
-    public MSBuildTestEnvironmentFixture()
+    public class MSBuildTestEnvironmentFixture : IDisposable
     {
-        _testEnvironment = TestEnvironment.Create();
-    }
+        bool _disposed;
+        private TestEnvironment _testEnvironment;
 
-    public void Dispose()
-    {
-        if (!_disposed)
+        public MSBuildTestEnvironmentFixture()
+        {
+            _testEnvironment = TestEnvironment.Create();
+        }
+
+        public void Dispose()
         {
-            _testEnvironment.Dispose();
+            if (!_disposed)
+            {
+                _testEnvironment.Dispose();
 
-            _disposed = true;
+                _disposed = true;
+            }
         }
     }
 }
diff --git a/src/Shared/UnitTests/TestData/GlobbingTestData.cs b/src/Shared/UnitTests/TestData/GlobbingTestData.cs
index a0fe1f04247..58a898ebb5e 100644
--- a/src/Shared/UnitTests/TestData/GlobbingTestData.cs
+++ b/src/Shared/UnitTests/TestData/GlobbingTestData.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Engine.UnitTests.Globbing
 {
     public static class GlobbingTestData
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 306ff0b62ab..49e86433de5 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -18,6 +18,8 @@
 using TempPaths = System.Collections.Generic.Dictionary<string, string>;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public partial class TestEnvironment : IDisposable
@@ -177,7 +179,7 @@ public TransientTempPath CreateNewTempPath()
         public TransientTempPath CreateNewTempPathWithSubfolder(string subfolder)
         {
             var folder = CreateFolder(null, true, subfolder);
-            return SetTempPath(folder.Path, true);
+            return WithTransientTestState(SetTempPath(folder.Path, true));
         }
 
         /// <summary>
@@ -189,10 +191,7 @@ public TransientTempPath CreateNewTempPathWithSubfolder(string subfolder)
         /// </summary>
         public TransientTempPath SetTempPath(string tempPath, bool deleteTempDirectory = false)
         {
-            var transientTempPath = new TransientTempPath(tempPath, deleteTempDirectory);
-            _variants.Add(transientTempPath);
-
-            return transientTempPath;
+            return WithTransientTestState(new TransientTempPath(tempPath, deleteTempDirectory));
         }
 
         /// <summary>
@@ -201,7 +200,7 @@ public TransientTempPath SetTempPath(string tempPath, bool deleteTempDirectory =
         /// <param name="extension">Extensions of the file (defaults to '.tmp')</param>
         public TransientTestFile CreateFile(string extension = ".tmp")
         {
-            return WithTransientTestState(new TransientTestFile(extension, createFile:true, expectedAsOutput:false));
+            return WithTransientTestState(new TransientTestFile(extension, createFile: true, expectedAsOutput: false));
         }
 
         public TransientTestFile CreateFile(string fileName, string contents = "")
@@ -259,17 +258,6 @@ public TransientTestFile ExpectFile(string extension = ".tmp")
             return WithTransientTestState(new TransientTestFile(extension, createFile: false, expectedAsOutput: true));
         }
 
-        /// <summary>
-        /// Create a temp file name under a specific temporary folder. The file is expected to exist when the test completes.
-        /// </summary>
-        /// <param name="transientTestFolder">Temp folder</param>
-        /// <param name="extension">Extension of the file (defaults to '.tmp')</param>
-        /// <returns></returns>
-        public TransientTestFile ExpectFile(TransientTestFolder transientTestFolder, string extension = ".tmp")
-        {
-            return WithTransientTestState(new TransientTestFile(transientTestFolder.Path, extension, createFile: false, expectedAsOutput: true));
-        }
-
         /// <summary>
         ///     Creates a test variant used to add a unique temporary folder during a test. Will be deleted when the test
         ///     completes.
@@ -386,7 +374,7 @@ public override void AssertInvariant(ITestOutputHelper output)
         {
             var currentValue = _accessorFunc();
 
-            //  Something like the following might be preferrable, but the assertion method truncates the values leaving us without
+            // Something like the following might be preferrable, but the assertion method truncates the values leaving us without
             //  useful information.  So use Assert.True instead
             //  Assert.Equal($"{_name}: {_originalValue}", $"{_name}: {_accessorFunc()}");
 
diff --git a/src/Shared/UnitTests/TestProgram.cs b/src/Shared/UnitTests/TestProgram.cs
index 8c7f23da42e..39524b6054b 100644
--- a/src/Shared/UnitTests/TestProgram.cs
+++ b/src/Shared/UnitTests/TestProgram.cs
@@ -12,10 +12,10 @@ public static int Main(string[] args)
 
         int returnCode = Xunit.ConsoleClient.Program.Main(newArgs.ToArray());
 
-        //if (showHelp)
-        //{
+        // if (showHelp)
+        // {
         //    TestCommandLine.ShowHelp();
-        //}
+        // }
 
         return returnCode;
 #else
diff --git a/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs b/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
index f8acd297b4e..f9f2e430531 100644
--- a/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
@@ -8,14 +8,16 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class TypeLoader_Dependencies_Tests
     {
         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "TaskWithDependency");
-        private static readonly string ProjectFileName = "TaskWithDependencyTest.proj";
-        private static readonly string TaskDllFileName = "TaskWithDependency.dll";
-        private static readonly string DependencyDllFileName = "Dependency.dll";
+        private const string ProjectFileName = "TaskWithDependencyTest.proj";
+        private const string TaskDllFileName = "TaskWithDependency.dll";
+        private const string DependencyDllFileName = "Dependency.dll";
 
         [Fact]
         public void LoadAssemblyAndDependency_InsideProjectFolder()
@@ -107,4 +109,3 @@ private void CheckIfCorrectAssemblyLoaded(string scriptOutput, string expectedAs
         }
     }
 }
-
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index a572f51576a..509f4c01565 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -6,16 +6,27 @@
 using System.IO;
 using Microsoft.Build.Shared;
 using System.Reflection;
-using Xunit;
 using Microsoft.Build.UnitTests.Shared;
+using Xunit;
+using Xunit.Abstractions;
+using Shouldly;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests
 {
     public class TypeLoader_Tests
     {
         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "PortableTask");
-        private static readonly string ProjectFileName = "portableTaskTest.proj";
-        private static readonly string DLLFileName = "PortableTask.dll";
+        private const string ProjectFileName = "portableTaskTest.proj";
+        private const string DLLFileName = "PortableTask.dll";
+
+        private readonly ITestOutputHelper _output;
+
+        public TypeLoader_Tests(ITestOutputHelper testOutputHelper)
+        {
+            _output = testOutputHelper;
+        }
 
         [Fact]
         public void Basic()
@@ -48,19 +59,18 @@ public void Regress_Mutation_ParameterOrderDoesntMatter()
         [Fact]
         public void LoadNonExistingAssembly()
         {
-            using (var dir = new FileUtilities.TempWorkingDirectory(ProjectFileFolder))
-            {
-                string projectFilePath = Path.Combine(dir.Path, ProjectFileName);
+            using var dir = new FileUtilities.TempWorkingDirectory(ProjectFileFolder);
 
-                string dllName = "NonExistent.dll";
+            string projectFilePath = Path.Combine(dir.Path, ProjectFileName);
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + dllName, out successfulExit);
-                Assert.False(successfulExit);
+            string dllName = "NonExistent.dll";
 
-                string dllPath = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, dllName);
-                CheckIfCorrectAssemblyLoaded(output, dllPath, false);
-            }
+            bool successfulExit;
+            string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + dllName, out successfulExit, _output);
+            successfulExit.ShouldBeFalse();
+
+            string dllPath = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, dllName);
+            CheckIfCorrectAssemblyLoaded(output, dllPath, false);
         }
 
         [Fact]
@@ -71,7 +81,7 @@ public void LoadInsideAsssembly()
                 string projectFilePath = Path.Combine(dir.Path, ProjectFileName);
 
                 bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag", out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag", out successfulExit, _output);
                 Assert.True(successfulExit);
 
                 string dllPath = Path.Combine(dir.Path, DLLFileName);
@@ -93,7 +103,7 @@ public void LoadOutsideAssembly()
                 try
                 {
                     bool successfulExit;
-                    string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + movedDLLPath, out successfulExit);
+                    string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + movedDLLPath, out successfulExit, _output);
                     Assert.True(successfulExit);
 
                     CheckIfCorrectAssemblyLoaded(output, movedDLLPath);
@@ -117,7 +127,7 @@ public void LoadInsideAssemblyWhenGivenOutsideAssemblyWithSameName()
                 try
                 {
                     bool successfulExit;
-                    string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + copiedDllPath, out successfulExit);
+                    string output = RunnerUtilities.ExecMSBuild(projectFilePath + " /v:diag /p:AssemblyPath=" + copiedDllPath, out successfulExit, _output);
                     Assert.True(successfulExit);
 
                     CheckIfCorrectAssemblyLoaded(output, originalDLLPath);
@@ -299,4 +309,3 @@ private static bool IsForwardingLoggerClass(Type type, object unused)
 #endif
     }
 }
-
diff --git a/src/Shared/UnitTests/XmakeAttributes_Tests.cs b/src/Shared/UnitTests/XmakeAttributes_Tests.cs
index 70cf960d823..1dff7e28c37 100644
--- a/src/Shared/UnitTests/XmakeAttributes_Tests.cs
+++ b/src/Shared/UnitTests/XmakeAttributes_Tests.cs
@@ -6,6 +6,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class XmakeAttributesTest
diff --git a/src/Shared/UnitTests/XmlUtilities_Tests.cs b/src/Shared/UnitTests/XmlUtilities_Tests.cs
index cc83d0fc441..244ceaaa532 100644
--- a/src/Shared/UnitTests/XmlUtilities_Tests.cs
+++ b/src/Shared/UnitTests/XmlUtilities_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class XmlUtilities_Tests
diff --git a/src/Shared/VersionUtilities.cs b/src/Shared/VersionUtilities.cs
index fe113266894..0266205b1ce 100644
--- a/src/Shared/VersionUtilities.cs
+++ b/src/Shared/VersionUtilities.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/VisualStudioConstants.cs b/src/Shared/VisualStudioConstants.cs
index 1df4e15a0e9..e654b86e24b 100644
--- a/src/Shared/VisualStudioConstants.cs
+++ b/src/Shared/VisualStudioConstants.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/XMakeAttributes.cs b/src/Shared/XMakeAttributes.cs
index d290eee6246..7a4d501e09c 100644
--- a/src/Shared/XMakeAttributes.cs
+++ b/src/Shared/XMakeAttributes.cs
@@ -3,8 +3,13 @@
 
 using System;
 using System.Collections.Generic;
+#if !CLR2COMPATIBILITY
+using System.Runtime.InteropServices;
+#endif
 using System.Runtime.CompilerServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
@@ -29,6 +34,7 @@ internal static class XMakeAttributes
         internal const string update = "Update";
         internal const string matchOnMetadata = "MatchOnMetadata";
         internal const string matchOnMetadataOptions = "MatchOnMetadataOptions";
+        internal const string overrideUsingTask = "Override";
         internal const string keepMetadata = "KeepMetadata";
         internal const string removeMetadata = "RemoveMetadata";
         internal const string keepDuplicates = "KeepDuplicates";
@@ -85,6 +91,7 @@ internal struct MSBuildArchitectureValues
         {
             internal const string x86 = "x86";
             internal const string x64 = "x64";
+            internal const string arm64 = "arm64";
             internal const string currentArchitecture = "CurrentArchitecture";
             internal const string any = "*";
         }
@@ -103,7 +110,7 @@ internal struct MSBuildArchitectureValues
 
         private static readonly HashSet<string> ValidMSBuildRuntimeValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildRuntimeValues.clr2, MSBuildRuntimeValues.clr4, MSBuildRuntimeValues.currentRuntime, MSBuildRuntimeValues.net, MSBuildRuntimeValues.any };
 
-        private static readonly HashSet<string> ValidMSBuildArchitectureValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildArchitectureValues.x86, MSBuildArchitectureValues.x64, MSBuildArchitectureValues.currentArchitecture, MSBuildArchitectureValues.any };
+        private static readonly HashSet<string> ValidMSBuildArchitectureValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildArchitectureValues.x86, MSBuildArchitectureValues.x64, MSBuildArchitectureValues.arm64, MSBuildArchitectureValues.currentArchitecture, MSBuildArchitectureValues.any };
 
         /// <summary>
         /// Returns true if and only if the specified attribute is one of the attributes that the engine specifically recognizes
@@ -426,7 +433,25 @@ internal static bool TryMergeArchitectureValues(string architectureA, string arc
         /// </comments>
         internal static string GetCurrentMSBuildArchitecture()
         {
+#if !CLR2COMPATIBILITY
+            string currentArchitecture = string.Empty;
+            switch (RuntimeInformation.ProcessArchitecture)
+            {
+                case Architecture.X86:
+                    currentArchitecture = MSBuildArchitectureValues.x86;
+                    break;
+                case Architecture.X64:
+                    currentArchitecture = MSBuildArchitectureValues.x64;
+                    break;
+                case Architecture.Arm64:
+                    currentArchitecture = MSBuildArchitectureValues.arm64;
+                    break;
+                default:
+                    throw new PlatformNotSupportedException(string.Format("{0} is not a supported architecture.", RuntimeInformation.ProcessArchitecture));
+            }
+#else
             string currentArchitecture = (IntPtr.Size == sizeof(Int64)) ? MSBuildArchitectureValues.x64 : MSBuildArchitectureValues.x86;
+#endif
             return currentArchitecture;
         }
 
diff --git a/src/Shared/XMakeElements.cs b/src/Shared/XMakeElements.cs
index 2a8775fe78f..26edc3345c2 100644
--- a/src/Shared/XMakeElements.cs
+++ b/src/Shared/XMakeElements.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/XamlUtilities.cs b/src/Shared/XamlUtilities.cs
index b45082802f0..aad30eaa8b7 100644
--- a/src/Shared/XamlUtilities.cs
+++ b/src/Shared/XamlUtilities.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework.XamlTypes;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Shared/XmlUtilities.cs b/src/Shared/XmlUtilities.cs
index 2695d35d4b0..941958a13fe 100644
--- a/src/Shared/XmlUtilities.cs
+++ b/src/Shared/XmlUtilities.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/StringTools.Benchmark/Program.cs b/src/StringTools.Benchmark/Program.cs
index 7bdd21ed36a..cfda6e36d5f 100644
--- a/src/StringTools.Benchmark/Program.cs
+++ b/src/StringTools.Benchmark/Program.cs
@@ -3,6 +3,8 @@
 
 using BenchmarkDotNet.Running;
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Benchmark
 {
     public class Program
diff --git a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
index 03fa15ccfc5..d3e2dc5501d 100644
--- a/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
+++ b/src/StringTools.Benchmark/SpanBasedStringBuilder_Benchmark.cs
@@ -4,6 +4,8 @@
 using BenchmarkDotNet.Attributes;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Benchmark
 {
     [MemoryDiagnoser]
diff --git a/src/StringTools.Benchmark/StringTools.Benchmark.csproj b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
index eb1bf1347f3..92f0e8e82eb 100644
--- a/src/StringTools.Benchmark/StringTools.Benchmark.csproj
+++ b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
@@ -4,7 +4,7 @@
     <UseAppHost>false</UseAppHost>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
-    
+
     <IsPackable>false</IsPackable>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
 
@@ -14,6 +14,9 @@
 
   <ItemGroup>
     <PackageReference Include="BenchmarkDotNet" />
+    <!-- Bump these to the latest version despite transitive references to older -->
+    <PackageReference Include="System.Private.Uri" />
+    <PackageReference Include="System.Runtime" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/StringTools.UnitTests/InterningTestData.cs b/src/StringTools.UnitTests/InterningTestData.cs
index 857e9032850..e0ce99f19de 100644
--- a/src/StringTools.UnitTests/InterningTestData.cs
+++ b/src/StringTools.UnitTests/InterningTestData.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Tests
 {
     public static class InterningTestData
diff --git a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
index 086d684231b..4ce6f2c2cc2 100644
--- a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
+++ b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
@@ -14,6 +14,8 @@
 using StringToolsNet35::Microsoft.NET.StringTools;
 #endif
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Tests
 {
     public class SpanBasedStringBuilder_Tests
diff --git a/src/StringTools.UnitTests/StringTools_Tests.cs b/src/StringTools.UnitTests/StringTools_Tests.cs
index 7f396ab32b6..3ad975ca3a0 100644
--- a/src/StringTools.UnitTests/StringTools_Tests.cs
+++ b/src/StringTools.UnitTests/StringTools_Tests.cs
@@ -17,6 +17,8 @@
 using Microsoft.NET.StringTools;
 #endif
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Tests
 {
     public class StringTools_Tests
diff --git a/src/StringTools.UnitTests/WeakStringCache_Tests.cs b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
index 41d4d931c95..b2e1da93006 100644
--- a/src/StringTools.UnitTests/WeakStringCache_Tests.cs
+++ b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
@@ -17,6 +17,8 @@
 using StringToolsNet35::Microsoft.NET.StringTools;
 #endif
 
+#nullable disable
+
 namespace Microsoft.NET.StringTools.Tests
 {
     public class WeakStringCache_Tests : IDisposable
diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index 302d50bfd6c..f04d2a9e931 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -96,7 +96,7 @@ public bool MoveNext()
         /// </summary>
         private readonly ReadOnlySpan<char> _inlineSpan;
 
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
         /// <summary>
         /// .NET Core does not keep a reference to the containing object in <see cref="ReadOnlySpan{T}"/>. In particular,
         /// it cannot recover the string if the span represents one. We have to hold the reference separately to be able to
@@ -122,7 +122,7 @@ internal InternableString(ReadOnlySpan<char> span)
             _inlineSpan = span;
             _spans = null;
             Length = span.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -141,7 +141,7 @@ internal InternableString(string str)
             _inlineSpan = str.AsSpan();
             _spans = null;
             Length = str.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = str;
 #endif
         }
@@ -154,7 +154,7 @@ internal InternableString(SpanBasedStringBuilder stringBuilder)
             _inlineSpan = default(ReadOnlySpan<char>);
             _spans = stringBuilder.Spans;
             Length = stringBuilder.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -220,7 +220,7 @@ public unsafe string ExpensiveConvertToString()
             // Special case: if we hold just one string, we can directly return it.
             if (_inlineSpan.Length == Length)
             {
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
                 if (_inlineSpanString != null)
                 {
                     return _inlineSpanString;
diff --git a/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
index 2cd09cc29ef..9086e5e2c2a 100644
--- a/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
@@ -1,7 +1,6 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value, int startIndex, int count) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value, int startIndex, int count) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(System.ReadOnlyMemory<char> span) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Capacity.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
@@ -13,14 +12,14 @@ Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Trim() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimEnd() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimStart() -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string!
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string
\ No newline at end of file
diff --git a/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
index 3ac8d4a6e79..e2b05b1bd03 100644
--- a/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
@@ -1,21 +1,20 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Dispose() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Current.get -> char
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator() -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator(System.Text.StringBuilder! builder) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator(System.Text.StringBuilder builder) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static System.MemoryExtensions.AsSpan<T>(this T[]! array, int start, int length) -> string!
-System.MemoryExtensions
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static System.MemoryExtensions.AsSpan<T>(this T[] array, int start, int length) -> string
+System.MemoryExtensions
\ No newline at end of file
diff --git a/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 2cd09cc29ef..9086e5e2c2a 100644
--- a/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -1,7 +1,6 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value, int startIndex, int count) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value, int startIndex, int count) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(System.ReadOnlyMemory<char> span) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Capacity.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
@@ -13,14 +12,14 @@ Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Trim() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimEnd() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimStart() -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string!
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string
\ No newline at end of file
diff --git a/src/StringTools/README.md b/src/StringTools/README.md
new file mode 100644
index 00000000000..76545b3e522
--- /dev/null
+++ b/src/StringTools/README.md
@@ -0,0 +1,5 @@
+# Microsoft.NET.StringTools
+
+This package contains the Microsoft.NET.StringTools assembly which implements common string-related functionality such as weak interning.
+
+At this time, this is primarily an internal implementation detail of MSBuild and Visual Studio and we do not expect other consumers of the package. If you think you might like to use it, please start a discussion at https://github.com/dotnet/msbuild/discussions to let us know your use cases.
diff --git a/src/StringTools/StringTools.cs b/src/StringTools/StringTools.cs
index fbe794342b9..664057961b5 100644
--- a/src/StringTools/StringTools.cs
+++ b/src/StringTools/StringTools.cs
@@ -6,7 +6,6 @@
 namespace Microsoft.NET.StringTools
 {
     public static class Strings
-
     {
         #region Fields
 
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index f4108d5158b..15ac5335951 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -1,4 +1,4 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>
     <TargetFrameworks Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(MonoBuild)' != 'true'">$(LibraryTargetFrameworks);net35</TargetFrameworks>
@@ -9,7 +9,6 @@
     <LangVersion>8.0</LangVersion>
     <PackageId>Microsoft.NET.StringTools</PackageId>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
-    <Nullable>enable</Nullable>
 
     <VersionPrefix>1.0.0</VersionPrefix>
     <AssemblyVersion></AssemblyVersion>
diff --git a/src/StringTools/WeakStringCache.Concurrent.cs b/src/StringTools/WeakStringCache.Concurrent.cs
index 6110475e946..3261141fcbf 100644
--- a/src/StringTools/WeakStringCache.Concurrent.cs
+++ b/src/StringTools/WeakStringCache.Concurrent.cs
@@ -32,7 +32,7 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
         {
             int hashCode = internable.GetHashCode();
 
-            StringWeakHandle handle;
+            StringWeakHandle? handle;
             string? result;
 
             // Get the existing handle from the cache and lock it while we're dereferencing it to prevent a race with the Scavenge
@@ -98,7 +98,7 @@ public void Scavenge()
             foreach (KeyValuePair<int, StringWeakHandle> entry in _stringsByHashCode)
             {
                 // We can safely dereference entry.Value as the caller guarantees that Scavenge runs only on one thread.
-                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle removedHandle))
+                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle? removedHandle))
                 {
                     lock (removedHandle)
                     {
diff --git a/src/Tasks.UnitTests/Al_Tests.cs b/src/Tasks.UnitTests/Al_Tests.cs
index 0f16023de2c..6d2d0884c8e 100644
--- a/src/Tasks.UnitTests/Al_Tests.cs
+++ b/src/Tasks.UnitTests/Al_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /*
@@ -609,8 +611,3 @@ public void Win32Resource()
         }
     }
 }
-
-
-
-
-
diff --git a/src/Tasks.UnitTests/AppConfig_Tests.cs b/src/Tasks.UnitTests/AppConfig_Tests.cs
index 50c9ebe80aa..eb4762b3a62 100644
--- a/src/Tasks.UnitTests/AppConfig_Tests.cs
+++ b/src/Tasks.UnitTests/AppConfig_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
index b5d321f21fe..2b49c25b8d6 100644
--- a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
+++ b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
@@ -6,6 +6,8 @@
 using System.Globalization;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /*
diff --git a/src/Tasks.UnitTests/AssemblyDependency/AssemblyFoldersFromConfig_Tests.cs b/src/Tasks.UnitTests/AssemblyDependency/AssemblyFoldersFromConfig_Tests.cs
index 3ed117dcd2d..a3dec6636fb 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/AssemblyFoldersFromConfig_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/AssemblyFoldersFromConfig_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests.AssemblyDependency
 {
     public class AssemblyFoldersFromConfig_Tests : ResolveAssemblyReferenceTestFixture
diff --git a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
index 3591abf5945..e7f155ac3b0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/FilePrimary.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AppConfig
 {
     public sealed class FilePrimary : ResolveAssemblyReferenceTestFixture
@@ -267,7 +269,7 @@ public void ExistsPromotedDependencyInTheBlackList()
         /// In this case,
         /// - A single primary file reference to assembly version 1.0.0.0 was passed in.
         /// - An app.config was passed in that promotes a *different* assembly version name from 
-        //    1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
index d4b92d40fed..df51e79f8f4 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/GlobalAssemblyCacheTests.cs
@@ -10,6 +10,8 @@
 using Xunit.Abstractions;
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
@@ -305,7 +307,7 @@ public void SystemRuntimeDepends_No_Build()
                 )
             );
 
-            Assert.Equal("false", t.DependsOnSystemRuntime, true); //                 "Expected no System.Runtime dependency found during build."
+            Assert.Equal("false", t.DependsOnSystemRuntime, true); // "Expected no System.Runtime dependency found during build."
             Assert.Equal("false", t.DependsOnNETStandard, true); //                   "Expected no netstandard dependency found during build."
 
             // intelli build mode
@@ -333,7 +335,7 @@ public void SystemRuntimeDepends_No_Build()
                 )
             );
 
-            Assert.Equal("false", t.DependsOnSystemRuntime, true); //                 "Expected no System.Runtime dependency found during intellibuild."
+            Assert.Equal("false", t.DependsOnSystemRuntime, true); // "Expected no System.Runtime dependency found during intellibuild."
             Assert.Equal("false", t.DependsOnNETStandard, true); //                   "Expected no netstandard dependency found during intellibuild."
         }
 
@@ -381,7 +383,7 @@ public void SystemRuntimeDepends_Yes()
                 )
             );
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -408,7 +410,7 @@ public void SystemRuntimeDepends_Yes()
                 )
             );
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
         }
 
         // Indirect dependency
@@ -455,7 +457,7 @@ public void SystemRuntimeDepends_Yes_Indirect()
                 )
             );
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -482,7 +484,7 @@ public void SystemRuntimeDepends_Yes_Indirect()
                 )
             );
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
         }
 
         [Fact]
@@ -524,7 +526,7 @@ public void SystemRuntimeDepends_Yes_Indirect_ExternallyResolved()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -546,7 +548,7 @@ public void SystemRuntimeDepends_Yes_Indirect_ExternallyResolved()
                 checkIfAssemblyIsInGac, isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
         }
 
         [Fact]
@@ -587,7 +589,7 @@ public void NETStandardDepends_Yes()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected System.Runtime dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -610,7 +612,7 @@ public void NETStandardDepends_Yes()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected System.Runtime dependency found during intellibuild."
         }
 
         [Fact]
@@ -651,7 +653,7 @@ public void NETStandardDepends_Yes_Indirect()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected netstandard dependency found during build."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected netstandard dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -674,7 +676,7 @@ public void NETStandardDepends_Yes_Indirect()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected netstandard dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected netstandard dependency found during intellibuild."
         }
 
 
@@ -717,7 +719,7 @@ public void NETStandardDepends_Yes_Indirect_ExternallyResolved()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected netstandard dependency found during build."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected netstandard dependency found during build."
 
             // intelli build mode
             t.FindDependencies = false;
@@ -740,7 +742,7 @@ public void NETStandardDepends_Yes_Indirect_ExternallyResolved()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnNETStandard, true); //                 "Expected netstandard dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnNETStandard, true); // "Expected netstandard dependency found during intellibuild."
         }
 
         [Fact]
@@ -783,7 +785,7 @@ public void DependsOn_NETStandard_and_SystemRuntime()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
             Assert.Equal("true", t.DependsOnNETStandard, true); //                   "Expected netstandard dependency found during build."
 
             // intelli build mode
@@ -807,7 +809,7 @@ public void DependsOn_NETStandard_and_SystemRuntime()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
             Assert.Equal("true", t.DependsOnNETStandard, true); //                   "Expected netstandard dependency found during intellibuild."
         }
 
@@ -853,7 +855,7 @@ public void DependsOn_NETStandard_and_SystemRuntime_ExternallyResolved()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during build."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during build."
             Assert.Equal("true", t.DependsOnNETStandard, true); //                   "Expected netstandard dependency found during build."
 
             // intelli build mode
@@ -877,7 +879,7 @@ public void DependsOn_NETStandard_and_SystemRuntime_ExternallyResolved()
                 isWinMDFile,
                 readMachineTypeFromPEHeader));
 
-            Assert.Equal("true", t.DependsOnSystemRuntime, true); //                 "Expected System.Runtime dependency found during intellibuild."
+            Assert.Equal("true", t.DependsOnSystemRuntime, true); // "Expected System.Runtime dependency found during intellibuild."
             Assert.Equal("true", t.DependsOnNETStandard, true); //                   "Expected netstandard dependency found during intellibuild."
         }
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
index 10b323e6b71..8f295e908d8 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/InstalledSDKResolverFixture.cs
@@ -5,6 +5,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 2d0aaec17b3..0a520b9f82b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -14,7 +14,8 @@
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 using Xunit.Abstractions;
 using Shouldly;
-using System.Text;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
@@ -929,7 +930,7 @@ public void InputAllowedRelatedFileExtensionsAreUsed()
             t.Assemblies = assemblies;
             t.TargetFrameworkDirectories = new string[] { s_myVersion20Path };
             t.SearchPaths = DefaultPaths;
-            t.AllowedRelatedFileExtensions = new string[] { @".licenses", ".xml" }; //no .pdb or .config
+            t.AllowedRelatedFileExtensions = new string[] { @".licenses", ".xml" }; // no .pdb or .config
             Execute(t);
 
             Assert.Single(t.ResolvedFiles);
@@ -1779,7 +1780,7 @@ public void AssemblyFoldersExTargetFrameworkVersionBogusValue()
             Execute(t);
 
             Assert.Single(t.ResolvedFiles);
-            Assert.Equal("{HintPathFromItem}", t.ResolvedFiles[0].GetMetadata("ResolvedFrom")); //                 "Assembly should have been resolved from HintPathFromItem!"
+            Assert.Equal("{HintPathFromItem}", t.ResolvedFiles[0].GetMetadata("ResolvedFrom")); // "Assembly should have been resolved from HintPathFromItem!"
         }
 
         /// <summary>
@@ -3305,14 +3306,14 @@ public void ParentAssemblyResolvedFromAForGac()
             Assert.Single(parentReferenceFolders);
             Assert.Equal(reference2.ResolvedSearchPath, parentReferenceFolders[0]);
         }
-        
+
         /// <summary>
         /// Generate a fake reference which has been resolved from the gac. We will use it to verify the creation of the exclusion list.
         /// </summary>
         /// <returns></returns>
         private ReferenceTable GenerateTableWithAssemblyFromTheGlobalLocation(string location)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -3514,7 +3515,7 @@ public void NoFrameworkDirectoriesStillCopyLocal()
 
             t.BuildEngine = engine;
             t.Assemblies = assemblyNames;
-            t.TargetFrameworkDirectories = new string[] { };
+            t.TargetFrameworkDirectories = Array.Empty<string>();
             t.SearchPaths = new string[] { "{RawFileName}" };
             Execute(t);
             Assert.Equal(@"true", t.ResolvedFiles[0].GetMetadata("CopyLocal"));
@@ -3589,7 +3590,7 @@ public void ConflictBetweenCopyLocalDependenciesRegress444809()
             bool result = Execute(t);
             ResourceManager resources = new ResourceManager("Microsoft.Build.Tasks.Strings", Assembly.GetExecutingAssembly());
 
-            //Unresolved primary reference with itemspec "A, Version=20.0.0.0, Culture=Neutral, PublicKeyToken=null".
+            // Unresolved primary reference with itemspec "A, Version=20.0.0.0, Culture=Neutral, PublicKeyToken=null".
             engine.AssertLogContainsMessageFromResource(resourceDelegate, "ResolveAssemblyReference.ReferenceDependsOn", "A, Version=1.0.0.0, Culture=Neutral, PublicKeyToken=null", s_regress444809_ADllPath);
             engine.AssertLogContainsMessageFromResource(resourceDelegate, "ResolveAssemblyReference.ReferenceDependsOn", "A, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null", s_regress444809_V2_ADllPath);
             engine.AssertLogContainsMessageFromResource(resourceDelegate, "ResolveAssemblyReference.PrimarySourceItemsForReference", s_regress444809_CDllPath);
@@ -3651,7 +3652,7 @@ public void ConflictBetweenCopyLocalDependenciesRegress444809UnResolvedPrimaryRe
         ///   References - D, version 1
         ///
         /// Both D1 and D2 are CopyLocal. This is a warning because D1 is a lower version
-        /// than both D2 so that can't unify. These means that eventually when 
+        /// than both D2 so that can't unify. These means that eventually when
         /// they're copied to the output directory they'll conflict.
         /// </summary>
         [Fact]
@@ -4538,13 +4539,13 @@ public void Regress275161_ScatterAssemblies()
 
             Execute(t);
 
-            Assert.True(ContainsItem(t.ScatterFiles, @"C:\Regress275161\m1.netmodule")); //                 "Expected to find scatter file m1."
+            Assert.True(ContainsItem(t.ScatterFiles, @"C:\Regress275161\m1.netmodule")); // "Expected to find scatter file m1."
 
-            Assert.True(ContainsItem(t.ScatterFiles, @"C:\Regress275161\m2.netmodule")); //                 "Expected to find scatter file m2."
+            Assert.True(ContainsItem(t.ScatterFiles, @"C:\Regress275161\m2.netmodule")); // "Expected to find scatter file m2."
 
-            Assert.True(ContainsItem(t.CopyLocalFiles, @"C:\Regress275161\m1.netmodule")); //                 "Expected to find scatter file m1 in CopyLocalFiles."
+            Assert.True(ContainsItem(t.CopyLocalFiles, @"C:\Regress275161\m1.netmodule")); // "Expected to find scatter file m1 in CopyLocalFiles."
 
-            Assert.True(ContainsItem(t.CopyLocalFiles, @"C:\Regress275161\m2.netmodule")); //                 "Expected to find scatter file m2 in CopyLocalFiles."
+            Assert.True(ContainsItem(t.CopyLocalFiles, @"C:\Regress275161\m2.netmodule")); // "Expected to find scatter file m2 in CopyLocalFiles."
         }
 
         /// <summary>
@@ -4598,7 +4599,7 @@ public void Regress317975_LeftoverLowerVersion()
                 Assert.Equal(0, String.Compare(i.GetMetadata("CopyLocal"), "false", StringComparison.OrdinalIgnoreCase));
             }
 
-            Assert.True(ContainsItem(t.ResolvedDependencyFiles, @"C:\Regress317975\B.dll")); //                 "Expected to find lower version listed in dependencies."
+            Assert.True(ContainsItem(t.ResolvedDependencyFiles, @"C:\Regress317975\B.dll")); // "Expected to find lower version listed in dependencies."
         }
 
         /// <summary>
@@ -5637,10 +5638,10 @@ public void GetRedistListPathsFromDisk_ThrowsArgumentNullException()
         [Fact]
         public void RedistListGenerateBlackListEmptyAssemblyInfoNoRedistAssemblies()
         {
-            RedistList redistList = RedistList.GetRedistList(new AssemblyTableInfo[0]);
+            RedistList redistList = RedistList.GetRedistList(Array.Empty<AssemblyTableInfo>());
             List<Exception> whiteListErrors = new List<Exception>();
             List<string> whiteListErrorFileNames = new List<string>();
-            Dictionary<string, string> blackList = redistList.GenerateBlackList(new AssemblyTableInfo[0], whiteListErrors, whiteListErrorFileNames);
+            Dictionary<string, string> blackList = redistList.GenerateBlackList(Array.Empty<AssemblyTableInfo>(), whiteListErrors, whiteListErrorFileNames);
             Assert.Null(blackList); // "Should return null if the AssemblyTableInfo is empty and the redist list is empty"
         }
 
@@ -5658,7 +5659,7 @@ public void RedistListGenerateBlackListEmptyAssemblyInfoWithRedistAssemblies()
                 RedistList redistList = RedistList.GetRedistList(new AssemblyTableInfo[] { redistListInfo });
                 List<Exception> whiteListErrors = new List<Exception>();
                 List<string> whiteListErrorFileNames = new List<string>();
-                Dictionary<string, string> blackList = redistList.GenerateBlackList(new AssemblyTableInfo[0], whiteListErrors, whiteListErrorFileNames);
+                Dictionary<string, string> blackList = redistList.GenerateBlackList(Array.Empty<AssemblyTableInfo>(), whiteListErrors, whiteListErrorFileNames);
 
                 // Since there were no white list expect the black list to return null
                 Assert.Empty(blackList); // "Expected to have no assemblies in the black list"
@@ -5981,7 +5982,7 @@ public void RedistListNoAssembliesinRedistList()
         [Fact]
         public void RedistListGenerateBlackListGoodListsSubsetIsSubsetOfRedist()
         {
-            string redistFile = CreateGenericRedistList(); 
+            string redistFile = CreateGenericRedistList();
             string goodSubsetFile = FileUtilities.GetTemporaryFile();
             try
             {
@@ -6206,7 +6207,7 @@ public void SubsetListFinderNullFrameworkDirectory()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                SubsetListFinder finder = new SubsetListFinder(new string[0]);
+                SubsetListFinder finder = new SubsetListFinder(Array.Empty<string>());
                 finder.GetSubsetListPathsFromDisk(null);
             }
            );
@@ -6229,7 +6230,7 @@ public void SubsetListFinderNullSubsetToSearchFor()
         [Fact]
         public void SubsetListFinderEmptySubsetToSearchFor()
         {
-            SubsetListFinder finder = new SubsetListFinder(new string[0]);
+            SubsetListFinder finder = new SubsetListFinder(Array.Empty<string>());
             string[] returnArray = finder.GetSubsetListPathsFromDisk("FrameworkDirectory");
             Assert.Empty(returnArray); // "Expected the array returned to be 0 length"
         }
@@ -6526,7 +6527,7 @@ public void TestGenerateFrameworkName()
             targetFrameworks = new string[] { "Client", "Framework" };
             Assert.Equal("Client, Framework", ResolveAssemblyReference.GenerateSubSetName(targetFrameworks, null));
 
-            targetFrameworks = new string[0];
+            targetFrameworks = Array.Empty<string>();
             Assert.True(String.IsNullOrEmpty(ResolveAssemblyReference.GenerateSubSetName(targetFrameworks, null)));
 
             targetFrameworks = null;
@@ -6541,7 +6542,7 @@ public void TestGenerateFrameworkName()
             installedSubSetTable = new ITaskItem[] { new TaskItem("c:\\foo\\Client.xml"), new TaskItem("D:\\foo\\bar\\Framework2\\"), new TaskItem("D:\\foo\\bar\\Framework"), new TaskItem("Nothing") };
             Assert.Equal("Client, Framework, Nothing", ResolveAssemblyReference.GenerateSubSetName(null, installedSubSetTable));
 
-            installedSubSetTable = new ITaskItem[0];
+            installedSubSetTable = Array.Empty<ITaskItem>();
             Assert.True(String.IsNullOrEmpty(ResolveAssemblyReference.GenerateSubSetName(null, installedSubSetTable)));
 
             installedSubSetTable = null;
@@ -6580,7 +6581,7 @@ public void ReferenceTablePrimaryItemInBlackListRemoveOnlyNoWarn()
             referenceTable.RemoveReferencesMarkedForExclusion(true, String.Empty);
 
             Dictionary<AssemblyNameExtension, Reference> table2 = referenceTable.References;
-            string subSetName = ResolveAssemblyReference.GenerateSubSetName(new string[] { }, null);
+            string subSetName = ResolveAssemblyReference.GenerateSubSetName(Array.Empty<string>(), null);
             string warningMessage = rar.Log.FormatResourceString("ResolveAssemblyReference.FailedToResolveReferenceBecausePrimaryAssemblyInExclusionList", taskItem.ItemSpec, subSetName);
             Assert.False(Object.ReferenceEquals(table, table2)); // "Expected dictionary to be a different instance"
             Assert.Single(table2); // "Expected there to be one elements in the dictionary"
@@ -6817,7 +6818,7 @@ public void ReferenceTableDependentItemsInBlackList3()
         [Fact]
         public void ReferenceTableDependentItemsInBlackList4()
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -6995,7 +6996,7 @@ public void ReferenceTableDependentItemsInBlackListPrimaryWithSpecificVersion()
 
         private static ReferenceTable MakeEmptyReferenceTable(TaskLoggingHelper log)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -7101,7 +7102,7 @@ public void TestProfileAndSubset2()
         /// Verify setting certain combinations of Profile parameters will case an error to be logged and rar to fail execution.
         ///
         /// Test the case where the profile name is not set and ProfileFullFrameworkFolders is set.
-        ///</summary>
+        /// </summary>
         [Fact]
         public void TestProfileParameterCombinations()
         {
@@ -7116,7 +7117,7 @@ public void TestProfileParameterCombinations()
         /// <summary>
         /// Verify when the frameworkdirectory metadata is not set on the ProfileFullFrameworkAssemblyTables that an
         /// error is logged and rar fails.
-        ///</summary>
+        /// </summary>
         [Fact]
         public void TestFrameworkDirectoryMetadata()
         {
@@ -7177,7 +7178,7 @@ private void InitializeMockEngine(out ReferenceTable referenceTable, out MockEng
         }
 
         /// <summary>
-        ///Initialize the black list and use it to remove references from the reference table
+        /// Initialize the black list and use it to remove references from the reference table
         /// </summary>
         private void InitializeExclusionList(ReferenceTable referenceTable, AssemblyNameExtension[] assembliesForBlackList, out Dictionary<string, string> blackList)
         {
@@ -7317,7 +7318,7 @@ public void NoClientSubsetButInstalledSubTables()
                 t.TargetFrameworkDirectories = new string[] { Path.Combine(ObjectModelHelpers.TempProjectDir, "v3.5") };
                 t.InstalledAssemblyTables = new ITaskItem[] { new TaskItem(redistListPath) };
                 // Only the explicitly specified redist list should be used
-                t.TargetFrameworkSubsets = new string[0];
+                t.TargetFrameworkSubsets = Array.Empty<string>();
 
                 // Create a subset list which should be read in
                 string explicitSubsetListContents =
@@ -7739,19 +7740,24 @@ public void Regress397129_HandleInvalidDirectoriesAndFiles_Case2()
             Execute(t);
         }
 
+        /// <summary>
         /// Consider this dependency chain:
         ///
         /// App
-        ///   References - A
-        ///        Depends on B
-        ///        Will be found by hintpath.
-        ///   References -B
-        ///        No hintpath
-        ///        Exists in A.dll's folder.
-        ///
+        /// <code>
+        /// <![CDATA[
+        /// References - A
+        ///      Depends on B
+        ///      Will be found by hintpath.
+        /// References -B
+        ///      No hintpath
+        ///      Exists in A.dll's folder.
+        /// ]]>
+        /// </code>
         /// B.dll should be unresolved even though its in A's folder because primary resolution needs to work
         /// without looking at dependencies because of the load-time perf scenarios don't look at dependencies.
         /// We must be consistent between primaries resolved with FindDependencies=true and FindDependencies=false.
+        /// </summary>
         [Fact]
         public void ByDesignRelatedTo454863_PrimaryReferencesDontResolveToParentFolders()
         {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
index c8dd8814895..f3eb199906b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
@@ -6,6 +6,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AppConfig
 {
     public sealed class NonSpecificVersionStrictPrimary : ResolveAssemblyReferenceTestFixture
@@ -85,7 +87,7 @@ public void Exists()
         /// In this case,
         /// - A single primary non-version-strict reference was passed in to assembly version 1.0.0.0
         /// - An app.config was passed in that promotes a *different* assembly version name from 
-        //    1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
index eef70e698bf..e5eddbe032a 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
@@ -75,7 +77,7 @@ public void DependeeDirectoryIsProbedForDependency()
                 bool succeeded = Execute(t);
 
                 Assert.True(succeeded);
-                
+
                 uniqueFileExists[s_dependsOnNuGet_NWinMdPath].ShouldBe(1);
                 uniqueFileExists[s_dependsOnNuGet_NDllPath].ShouldBe(1);
                 uniqueFileExists[s_dependsOnNuGet_NExePath].ShouldBe(1);
@@ -107,7 +109,7 @@ public void DependeeDirectoryShouldNotBeProbedForDependencyWhenDependencyResolve
                         new Dictionary<string, string>
                         {
                             {"ExternallyResolved", "true"}
-                        }) 
+                        })
                 };
 
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ReferenceTests.cs b/src/Tasks.UnitTests/AssemblyDependency/ReferenceTests.cs
index 2ae4dd14e7d..c71984f0c87 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ReferenceTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ReferenceTests.cs
@@ -4,6 +4,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 7f55c5bcbd1..7cf61ab2860 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -11,6 +11,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class ResolveAssemblyReferenceCacheSerialization : IDisposable
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index e64d7b07d8c..2d572ebf1dc 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -15,6 +15,9 @@
 using Xunit.Abstractions;
 
 using NativeMethods = Microsoft.Build.Tasks.NativeMethods;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
@@ -501,11 +504,11 @@ internal void StopIOMonitoring()
             // ==[Related File Extensions Testing]================================================================================================
 
             // ==[Unification Testing]============================================================================================================
-            //@"C:\MyComponents\v0.5\UnifyMe.dll",                                 // For unification testing, a version that doesn't exist.
+            // @"C:\MyComponents\v0.5\UnifyMe.dll",                                 // For unification testing, a version that doesn't exist.
             s_unifyMeDll_V10Path,
             s_unifyMeDll_V20Path,
             s_unifyMeDll_V30Path,
-            //@"C:\MyComponents\v4.0\UnifyMe.dll",
+            // @"C:\MyComponents\v4.0\UnifyMe.dll",
             Path.Combine(s_myApp_V05Path, "DependsOnUnified.dll"),
             Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"),
             Path.Combine(s_myApp_V20Path, "DependsOnUnified.dll"),
@@ -518,8 +521,8 @@ internal void StopIOMonitoring()
 
             // ==[Test assemblies reference higher versions than the current target framework=====================================================
             Path.Combine(s_myComponentsMiscPath, "DependsOnOnlyv4Assemblies.dll"),  // Only depends on 4.0.0 assemblies
-            Path.Combine(s_myComponentsMiscPath, "ReferenceVersion9.dll"), //Is in redist list and is a 9.0 assembly
-            Path.Combine(s_myComponentsMiscPath, "DependsOn9.dll"), //Depends on 9.0 assemblies
+            Path.Combine(s_myComponentsMiscPath, "ReferenceVersion9.dll"), // Is in redist list and is a 9.0 assembly
+            Path.Combine(s_myComponentsMiscPath, "DependsOn9.dll"), // Depends on 9.0 assemblies
             Path.Combine(s_myComponentsMiscPath, "DependsOn9Also.dll"), // Depends on 9.0 assemblies
             Path.Combine(s_myComponents10Path, "DependsOn9.dll"), // Depends on 9.0 assemblies
             Path.Combine(s_myComponents20Path, "DependsOn9.dll"), // Depends on 9.0 assemblies
@@ -914,7 +917,7 @@ internal static string[] GetDirectories(string path, string pattern)
                 };
             }
 
-            return new string[0];
+            return Array.Empty<string>();
         }
 
         /// <summary>
@@ -1386,7 +1389,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
                 return new AssemblyNameExtension("DependsOn9, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089");
             }
 
-            //A second assembly which depends on version 9 framework assemblies.
+            // A second assembly which depends on version 9 framework assemblies.
             if (String.Equals(path, Path.Combine(s_myComponentsMiscPath, "DependsOn9Also.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension("DependsOn9Also, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089");
@@ -1985,7 +1988,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, @"c:\Regress313086\mscorlib.dll", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myVersion20Path, "System.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2088,16 +2091,12 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
             )
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, @"MyRelativeAssembly.dll", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myAppRootPath, "DependsOnSimpleA.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2206,9 +2205,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, s_myLibraries_V1_E_EDllPath, StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myApp_V05Path, "DependsOnWeaklyNamedUnified.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2294,7 +2291,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 };
             }
 
-            //A second assembly which depends on version 9 framework assemblies.
+            // A second assembly which depends on version 9 framework assemblies.
             if (String.Equals(path, Path.Combine(s_myComponentsMiscPath, "DependsOn9Also.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension[]
@@ -2354,7 +2351,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponents2RootPath, "W.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2367,7 +2364,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Z.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Y.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2380,7 +2377,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Microsoft.Build.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnMSBuild12.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2439,7 +2436,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             if (String.Equals(path, @"C:\DirectoryContainsdllAndWinmd\c.winmd", StringComparison.OrdinalIgnoreCase))
             {
                 // Simulate a strongly named assembly.
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, @"C:\DirectoryContainstwoWinmd\a.winmd", StringComparison.OrdinalIgnoreCase))
@@ -2453,12 +2450,12 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, @"C:\DirectoryContainstwoWinmd\c.winmd", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (path.StartsWith(@"C:\FakeSDK\", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, s_portableDllPath, StringComparison.OrdinalIgnoreCase))
@@ -2495,10 +2492,10 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             };
         }
 
-#pragma warning disable CA1416
         /// <summary>
         /// Registry access delegate. Given a hive and a view, return the registry base key.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
         {
             if (hive == RegistryHive.CurrentUser)
@@ -2520,55 +2517,56 @@ private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subKey">The subkey</param>
         /// <returns>An enumeration of strings.</returns>
+        [SupportedOSPlatform("windows")]
         private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, string subKey)
         {
             if (baseKey == Registry.CurrentUser)
             {
                 if (String.Equals(subKey, @"Software\Regress714052", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework", StringComparison.OrdinalIgnoreCase))
@@ -2609,7 +2607,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\ZControlB", StringComparison.OrdinalIgnoreCase)
                 )
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if
@@ -2666,12 +2664,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx\A", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx\B", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86", StringComparison.OrdinalIgnoreCase))
                 {
@@ -2695,21 +2693,21 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework", StringComparison.OrdinalIgnoreCase))
@@ -2724,12 +2722,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.FancyControl.1.0", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyHKLMControl.1.0", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework", StringComparison.OrdinalIgnoreCase))
@@ -2744,12 +2742,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework\v2.0.3600\PocketPC\AssemblyFoldersEx", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework\v2.0.3600\PocketPC\AssemblyFoldersEx\AFETestDeviceControl", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\Microsoft SDKs\Windows", StringComparison.OrdinalIgnoreCase))
@@ -2769,6 +2767,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subKey">The subkey</param>
         /// <returns>A string containing the default value.</returns>
+        [SupportedOSPlatform("windows")]
         private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string subKey)
         {
             if (baseKey == Registry.CurrentUser)
@@ -2904,7 +2903,6 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
             Assert.True(false, $"New GetRegistrySubKeyDefaultValue parameters encountered, need to add unittesting support for subKey={subKey}");
             return null;
         }
-#pragma warning restore CA1416
 
         /// <summary>
         /// Delegate for System.IO.File.GetLastWriteTime
@@ -3027,7 +3025,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 	                );
 
                     // A few checks. These should always be true or it may be a perf issue for project load.
-                    ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
+                    ITaskItem[] loadModeResolvedFiles = Array.Empty<TaskItem>();
                     if (t.ResolvedFiles != null)
                     {
                         loadModeResolvedFiles = (ITaskItem[])t.ResolvedFiles.Clone();
@@ -3101,7 +3099,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                         // OriginalItemSpec attribute on resolved items is to support VS in figuring out which
                         // project file reference caused a particular resolved file.
                         string originalItemSpec = t.ResolvedFiles[i].GetMetadata("OriginalItemSpec");
-                        Assert.True(ContainsItem(t.Assemblies, originalItemSpec) || ContainsItem(t.AssemblyFiles, originalItemSpec)); //                         "Expected to find OriginalItemSpec in Assemblies or AssemblyFiles task parameters"
+                        Assert.True(ContainsItem(t.Assemblies, originalItemSpec) || ContainsItem(t.AssemblyFiles, originalItemSpec)); // "Expected to find OriginalItemSpec in Assemblies or AssemblyFiles task parameters"
                     }
                 }
             }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
index ad61691d2b4..5a9399898b1 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SpecificVersionPrimary.cs
@@ -7,6 +7,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AppConfig
 {
     public sealed class SpecificVersionPrimary : ResolveAssemblyReferenceTestFixture
@@ -78,19 +80,29 @@ public void Exists()
 
         /// <summary>
         /// In this case,
-        /// - A single primary version-strict reference was passed in to assembly version 1.0.0.0
-        /// - An app.config was passed in that promotes a *different* assembly version name from 
-        //    1.0.0.0 to 2.0.0.0
-        /// - Version 1.0.0.0 of the file exists.
-        /// - Version 2.0.0.0 of the file exists.
+        /// <list type="bullet">
+        /// <item>A single primary version-strict reference was passed in to assembly version 1.0.0.0</item>
+        /// <item>
+        /// An app.config was passed in that promotes a *different* assembly version name from 
+        /// 1.0.0.0 to 2.0.0.0
+        /// </item>
+        /// <item>Version 1.0.0.0 of the file exists.</item>
+        /// <item>Version 2.0.0.0 of the file exists.</item>
+        /// </list>
         /// Expected:
-        /// -- The resulting assembly returned should be 1.0.0.0.
+        /// <list type="bullet">
+        /// <item>The resulting assembly returned should be 1.0.0.0.</item>
+        /// </list>
         /// Rationale:
         /// Primary references are never unified. This is because:
-        /// (a) The user expects that a primary reference will be respected.
-        /// (b) When FindDependencies is false and AutoUnify is true, we'd have to find all 
-        ///     dependencies anyway to make things work consistently. This would be a significant
-        ///     perf hit when loading large solutions.
+        /// <list type="number">
+        /// <item>
+        /// The user expects that a primary reference will be respected.</item>
+        /// <item>When FindDependencies is false and AutoUnify is true, we'd have to find all 
+        /// dependencies anyway to make things work consistently. This would be a significant
+        /// perf hit when loading large solutions.
+        /// </item>
+        /// </list>
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
index d9daab826d4..e44eed3c3b8 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.Prerequisite
 {
     public sealed class StronglyNamedDependency : ResolveAssemblyReferenceTestFixture
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
index d6ec7f8c1fb..c4f78439042 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AppConfig
 {
     public sealed class StronglyNamedDependencyAppConfig : ResolveAssemblyReferenceTestFixture
@@ -167,7 +169,7 @@ public void ExistsPromotedDependencyInTheBlackList()
         /// - A single reference to DependsOnUnified was passed in.
         ///   - This assembly depends on version 1.0.0.0 of UnifyMe.
         /// - An app.config was passed in that promotes a *different* assembly version name from
-        //    1.0.0.0 to 2.0.0.0
+        ///   1.0.0.0 to 2.0.0.0
         /// - Version 1.0.0.0 of the file exists.
         /// - Version 2.0.0.0 of the file exists.
         /// Expected:
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
index 60d89c3c45d..10694971b29 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AutoUnify
 {
     public sealed class StronglyNamedDependencyAutoUnify : ResolveAssemblyReferenceTestFixture
diff --git a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
index 218ff9b4494..932411bcf01 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
index bfb9dd55cb6..dd423c774cb 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/TaskTranslatorHelpers.cs
@@ -7,6 +7,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class TaskTranslatorHelpers
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyIgnoreVersionForFrameworkReference.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyIgnoreVersionForFrameworkReference.cs
index 13d518f12d2..a71ac08e145 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyIgnoreVersionForFrameworkReference.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyIgnoreVersionForFrameworkReference.cs
@@ -5,6 +5,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
index a97a93c7a50..deea5b3f0fe 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkAttribute.cs
@@ -5,6 +5,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
index e6dd07dfd1a..4ff1910ebc4 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/VerifyTargetFrameworkHigherThanRedist.cs
@@ -6,6 +6,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
@@ -154,7 +156,7 @@ public void HigherThanHighestInRedistListForMSBuildAssembly()
             Assert.Equal(1, e.Warnings); // "Expected one warning in this scenario."
 
             // TODO: https://github.com/dotnet/msbuild/issues/2305
-            //e.AssertLogContains("Microsoft.Build.dll");
+            // e.AssertLogContains("Microsoft.Build.dll");
             Assert.Empty(t2.ResolvedFiles);
 
             ResolveAssemblyReference t3 = new ResolveAssemblyReference();
@@ -297,7 +299,7 @@ public void DependenciesHigherThanHighestInRedistListForMSBuildAssembly()
             Assert.Empty(t2.ResolvedFiles);
 
             ResolveAssemblyReference t3 = new ResolveAssemblyReference();
-            //t2.TargetFrameworkVersion is null
+            // t2.TargetFrameworkVersion is null
 
             ExecuteRAROnItemsAndRedist(t3, e, items, redistString, false);
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs b/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
index 414f8d98bff..ab733088c21 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/WinMDTests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
index fc94fbb510c..63991dcb033 100644
--- a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
@@ -5,6 +5,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class AssemblyRegistrationCache_Tests
diff --git a/src/Tasks.UnitTests/AssignCulture_Tests.cs b/src/Tasks.UnitTests/AssignCulture_Tests.cs
index 3ea98d3f3c1..c4c89013a1e 100644
--- a/src/Tasks.UnitTests/AssignCulture_Tests.cs
+++ b/src/Tasks.UnitTests/AssignCulture_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class AssignCulture_Tests
@@ -218,6 +220,3 @@ public void PseudoLocalization(string culture)
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs b/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
index 84c9ae915dc..07fadfaaf21 100644
--- a/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
+++ b/src/Tasks.UnitTests/AssignLinkMetadata_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class AssignLinkMetadata_Tests
@@ -192,6 +194,3 @@ private ITaskItem GetParentedTaskItem(string itemSpec, string linkMetadata = nul
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
index 725b9e526e2..a9535bfac91 100644
--- a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
+++ b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -353,7 +355,7 @@ public void VerifyDefaultValueDefaultToVcxPlatformMappings()
 
             AssignProjectConfiguration assignProjectConfiguration = new AssignProjectConfiguration();
 
-            /// Test defaults with nothing set
+            // Test defaults with nothing set
             string actualDefaultToVcxPlatformMapping = assignProjectConfiguration.DefaultToVcxPlatformMapping;
             Assert.Equal(actualDefaultToVcxPlatformMapping, expectedDefaultToVcxPlatformMapping);
 
diff --git a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
index 3f9dc087274..3638a86206f 100644
--- a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
+++ b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class AssignTargetPath_Tests
@@ -105,42 +107,5 @@ public void TargetPathAlreadySet(string targetPath)
             t.AssignedFiles.Length.ShouldBe(1);
             t.AssignedFiles[0].GetMetadata("TargetPath").ShouldBe(targetPath);
         }
-
-        [Theory]
-        [InlineData("c:/fully/qualified/path.txt")]
-        [InlineData("test/output/file.txt")]
-        [InlineData(@"some\dir\to\file.txt")]
-        [InlineData("file.txt")]
-        [InlineData("file")]
-        public void TargetPathAlreadySet_DisabledUnderChangeWave16_10(string targetPath)
-        {
-            using TestEnvironment env = TestEnvironment.Create();
-            string link = "c:/some/path";
-
-            ChangeWaves.ResetStateForTests();
-            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-            AssignTargetPath t = new AssignTargetPath();
-            t.BuildEngine = new MockEngine();
-            Dictionary<string, string> metaData = new Dictionary<string, string>();
-            metaData.Add("TargetPath", targetPath);
-            metaData.Add("Link", link);
-            t.Files = new ITaskItem[]
-                          {
-                              new TaskItem(
-                                  itemSpec: NativeMethodsShared.IsWindows ? @"c:\f1\f2\file.txt" : "/f1/f2/file.txt",
-                                  itemMetadata: metaData)
-                          };
-            t.RootFolder = NativeMethodsShared.IsWindows ? @"c:\f1\f2" : "/f1/f2";
-
-            t.Execute().ShouldBeTrue();
-            t.AssignedFiles.Length.ShouldBe(1);
-            t.AssignedFiles[0].GetMetadata("TargetPath").ShouldBe(link);
-            ChangeWaves.ResetStateForTests();
-        }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/AxImp_Tests.cs b/src/Tasks.UnitTests/AxImp_Tests.cs
index 7d55a4512bd..331347bcec0 100644
--- a/src/Tasks.UnitTests/AxImp_Tests.cs
+++ b/src/Tasks.UnitTests/AxImp_Tests.cs
@@ -6,6 +6,8 @@
 
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
     sealed public class AxImp_Tests
diff --git a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
index 71380bfebf1..56c1a5e53b5 100644
--- a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
+++ b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
     sealed public class AxTlbBaseTask_Tests
@@ -65,13 +67,13 @@ public void KeyContainer()
                 Assert.Equal(badParameterValue, t.KeyContainer); // "New KeyContainer value should be set"
                 CommandLine.ValidateHasParameter(t, @"/keycontainer:" + badParameterValue, false /* no response file */);
                 Utilities.ExecuteTaskAndVerifyLogContainsErrorFromResource(t, "AxTlbBaseTask.StrongNameUtils.NoKeyPairInContainer", t.KeyContainer);
-                //ensure the key does not exist in the CSP
+                // ensure the key does not exist in the CSP
                 StrongNameHelpers.StrongNameKeyDelete(goodParameterValue);
 
                 IntPtr publicKeyBlob = IntPtr.Zero;
                 int publicKeyBlobSize = 0;
 
-                //add key to CSP
+                // add key to CSP
                 if (StrongNameHelpers.StrongNameKeyGen(goodParameterValue, 1 /* leave key registered */, out publicKeyBlob, out publicKeyBlobSize) && publicKeyBlob != IntPtr.Zero)
                 {
                     StrongNameHelpers.StrongNameFreeBuffer(publicKeyBlob);
@@ -88,7 +90,7 @@ public void KeyContainer()
             }
             finally
             {
-                //remove key from CSP
+                // remove key from CSP
                 StrongNameHelpers.StrongNameKeyDelete(goodParameterValue);
 
                 // get rid of the generated temp file
diff --git a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
index 7dbd018acc2..fd6a6f4a794 100644
--- a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CSharpParserUtilititesTests
@@ -420,6 +422,3 @@ private static void AssertParse(string source, string expectedClassName)
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
index de1f3b0bb61..26897d3ef06 100644
--- a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared.LanguageParser;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CSharpTokenizerTests
@@ -444,6 +446,3 @@ int expectedLastLineNumber
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/CallTarget_Tests.cs b/src/Tasks.UnitTests/CallTarget_Tests.cs
index 58c1b7a45f6..289347e1b69 100644
--- a/src/Tasks.UnitTests/CallTarget_Tests.cs
+++ b/src/Tasks.UnitTests/CallTarget_Tests.cs
@@ -10,6 +10,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CallTarget_Tests : IDisposable
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 48895b089c1..4a7d4708b26 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
 #if FEATURE_CODETASKFACTORY
@@ -24,9 +26,9 @@ public sealed class CodeTaskFactoryTests
         public void BuildTaskSimpleCodeFactory()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -46,17 +48,17 @@ public void BuildTaskSimpleCodeFactory()
 
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
-        /// Specifically testing that even when the ToolsVersion is post-4.0, and thus 
-        /// Microsoft.Build.Tasks.v4.0.dll is expected to NOT be in MSBuildToolsPath, that 
+        /// Specifically testing that even when the ToolsVersion is post-4.0, and thus
+        /// Microsoft.Build.Tasks.v4.0.dll is expected to NOT be in MSBuildToolsPath, that
         /// we will redirect under the covers to use the current tasks instead.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_RedirectFrom4()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -77,17 +79,17 @@ public void BuildTaskSimpleCodeFactory_RedirectFrom4()
 
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
-        /// Specifically testing that even when the ToolsVersion is post-12.0, and thus 
-        /// Microsoft.Build.Tasks.v12.0.dll is expected to NOT be in MSBuildToolsPath, that 
+        /// Specifically testing that even when the ToolsVersion is post-12.0, and thus
+        /// Microsoft.Build.Tasks.v12.0.dll is expected to NOT be in MSBuildToolsPath, that
         /// we will redirect under the covers to use the current tasks instead.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_RedirectFrom12()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -109,17 +111,17 @@ public void BuildTaskSimpleCodeFactory_RedirectFrom12()
         /// <summary>
         /// Test the simple case where we have a string parameter and we want to log that.
         /// Specifically testing that even when the ToolsVersion is post-4.0, and we have redirection
-        /// logic in place for the AssemblyFile case to deal with Microsoft.Build.Tasks.v4.0.dll not 
-        /// being in MSBuildToolsPath anymore, that this does NOT affect full fusion AssemblyNames -- 
-        /// it's picked up from the GAC, where it is anyway, so there's no need to redirect. 
+        /// logic in place for the AssemblyFile case to deal with Microsoft.Build.Tasks.v4.0.dll not
+        /// being in MSBuildToolsPath anymore, that this does NOT affect full fusion AssemblyNames --
+        /// it's picked up from the GAC, where it is anyway, so there's no need to redirect.
         /// </summary>
         [Fact]
         public void BuildTaskSimpleCodeFactory_NoAssemblyNameRedirect()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyName=`Microsoft.Build.Tasks.Core, Version=15.1.0.0` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -145,9 +147,9 @@ public void BuildTaskSimpleCodeFactory_NoAssemblyNameRedirect()
         public void VerifyRequiredAttribute()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_VerifyRequiredAttribute` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text Required='true'/>
                           </ParameterGroup>
                             <Task>
@@ -172,9 +174,9 @@ public void VerifyRequiredAttribute()
         public void RuntimeException()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_RuntimeException` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -201,9 +203,9 @@ public void RuntimeException()
         public void EmptyLanguage()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyLanguage` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -230,9 +232,9 @@ public void EmptyLanguage()
         public void EmptyType()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -259,9 +261,9 @@ public void EmptyType()
         public void EmptySource()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptySource` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -288,9 +290,9 @@ public void EmptySource()
         public void EmptyReferenceInclude()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyReferenceInclude` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -318,9 +320,9 @@ public void EmptyReferenceInclude()
         public void EmptyUsingNamespace()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyUsingNamespace` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -347,9 +349,9 @@ public void EmptyUsingNamespace()
         public void ReferenceNotPath()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_ReferenceNotPath` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -376,9 +378,9 @@ public void ReferenceNotPath()
         public void ReferenceInvalidChars()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_ReferenceInvalidChars` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -406,9 +408,9 @@ public void ReferenceInvalidChars()
         public void UsingInvalidChars()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_UsingInvalidChars` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -436,9 +438,9 @@ public void SourcesInvalidFile()
             string tempFileName = "Moose_" + Guid.NewGuid().ToString() + ".cs";
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_SourcesInvalidFile` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -464,9 +466,9 @@ public void SourcesInvalidFile()
         public void MissingCodeElement()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_MissingCodeElement` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -488,9 +490,9 @@ public void MissingCodeElement()
         public void BuildTaskSimpleCodeFactoryTestExtraUsing()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestExtraUsing` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -518,7 +520,7 @@ public void BuildTaskSimpleCodeFactoryTestExtraUsing()
         public void BuildTaskDateCodeFactory()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`DateTaskFromCodeFactory_BuildTaskDateCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                             <ParameterGroup>
                                <CurrentDate ParameterType=`System.String` Output=`true` />
@@ -549,7 +551,7 @@ public void BuildTaskDateCodeFactory()
         public void MethodImplmentationVB()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplmentationVB` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -581,9 +583,9 @@ End Function
         public void BuildTaskSimpleCodeFactoryTestSystemVB()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestSystemVB` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -610,9 +612,9 @@ Dim headerRequest As String
         public void BuildTaskSimpleCodeFactoryTestSystemCS()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestSystemCS` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -632,7 +634,7 @@ public void BuildTaskSimpleCodeFactoryTestSystemCS()
         }
 
         /// <summary>
-        /// Make sure we can pass in extra references than the automatic ones. For example the c# compiler does not pass in 
+        /// Make sure we can pass in extra references than the automatic ones. For example the c# compiler does not pass in
         /// system.dll. So lets test that case
         /// </summary>
         [Fact]
@@ -654,9 +656,9 @@ public void BuildTaskSimpleCodeFactoryTestExtraReferenceCS()
             }
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactoryTestExtraReferenceCS` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -691,7 +693,7 @@ public void MethodImplementationJScriptNet()
             }
 
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplementationJScriptNet` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -724,7 +726,7 @@ override function Execute() : System.Boolean
         public void MethodImplementation()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CodeMethod_MethodImplementation` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Text ParameterType='System.String' />
@@ -757,7 +759,7 @@ public override bool Execute()
         public void ClassImplementationTest()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`LogNameValue_ClassImplementationTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -823,7 +825,7 @@ public override bool Execute()
         public void ClassImplementationTestDoesNotInheritFromITask()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`ClassImplementationTestDoesNotInheritFromITask` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -881,9 +883,9 @@ public bool Execute()
         public void MultipleCodeElements()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -913,9 +915,9 @@ public void MultipleCodeElements()
         public void ReferenceNestedInCode()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -947,9 +949,9 @@ public void ReferenceNestedInCode()
         public void UnknownElementInTask()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_EmptyType` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1023,7 +1025,7 @@ public override bool Execute()
             try
             {
                 string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`LogNameValue_ClassSourcesTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
                         <ParameterGroup>
                             <Name ParameterType='System.String' />
@@ -1059,9 +1061,9 @@ public override bool Execute()
         public void BuildTaskSimpleCodeFactoryTempDirectoryDoesntExist()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1109,9 +1111,9 @@ public void BuildTaskSimpleCodeFactoryTempDirectoryDoesntExist()
         public void RedundantMSBuildReferences()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_RedundantMSBuildReferences` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1139,9 +1141,9 @@ public sealed class CodeTaskFactoryTests
         public void CodeTaskFactoryNotSupported()
         {
             string projectFileContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='msbuilddefaulttoolsversion'>
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Text/>
                           </ParameterGroup>
                             <Task>
@@ -1166,4 +1168,3 @@ public void CodeTaskFactoryNotSupported()
     }
 #endif
 }
-
diff --git a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
index b45459a0548..fa7909f7c4b 100644
--- a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
+++ b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
@@ -8,6 +8,8 @@
 using COMException = System.Runtime.InteropServices.COMException;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ComReferenceWalker_Tests
diff --git a/src/Tasks.UnitTests/ComReference_Tests.cs b/src/Tasks.UnitTests/ComReference_Tests.cs
index 7e9b308679d..855313c7070 100644
--- a/src/Tasks.UnitTests/ComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ComReference_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ComReference_Tests
diff --git a/src/Tasks.UnitTests/CombinePath_Tests.cs b/src/Tasks.UnitTests/CombinePath_Tests.cs
index 6d60979ae68..def89f55a3a 100644
--- a/src/Tasks.UnitTests/CombinePath_Tests.cs
+++ b/src/Tasks.UnitTests/CombinePath_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CombinePath_Tests
@@ -173,7 +175,7 @@ public void NoPaths()
             t.BuildEngine = new MockEngine();
 
             t.BasePath = @"c:\abc\def";
-            t.Paths = new ITaskItem[0];
+            t.Paths = System.Array.Empty<ITaskItem>();
             Assert.True(t.Execute()); // "success"
 
             ObjectModelHelpers.AssertItemsMatch(@"
diff --git a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
index 888f7603f24..2652a9d8deb 100644
--- a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
@@ -9,6 +9,8 @@
 
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CommandLineBuilderExtensionTest
diff --git a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
index 68ff6dd4165..9a99b37b197 100644
--- a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Tasks.Xaml;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CommandLineGenerator_Tests
diff --git a/src/Tasks.UnitTests/CommandLine_Support.cs b/src/Tasks.UnitTests/CommandLine_Support.cs
index 3698bc32d69..57d7bc48213 100644
--- a/src/Tasks.UnitTests/CommandLine_Support.cs
+++ b/src/Tasks.UnitTests/CommandLine_Support.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /*
diff --git a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
index 185ec52cc69..e7f8b0ecf8f 100644
--- a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
+++ b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ConvertToAbsolutePath_Tests
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index cb50ec8cf31..12705101c88 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -21,6 +21,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class Copy_Tests : IDisposable
@@ -511,7 +513,7 @@ public void DoCopyOverDifferentFile()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile)) // HIGHCHAR: Test reads ASCII (not ANSI).
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
             }
@@ -820,9 +822,11 @@ public void DoRetryWhenDestinationLocked()
                     engine.AssertLogContains("MSB3021"); // copy failed
                     engine.AssertLogContains("MSB3026"); // DID retry
 
-#if !RUNTIME_TYPE_NETCORE && !MONO
-                    engine.AssertLogContains(Process.GetCurrentProcess().Id.ToString()); // the file is locked by the current process
-#endif
+                    if (NativeMethodsShared.IsWindows)
+                    {
+                        engine.AssertLogContains(Process.GetCurrentProcess().Id.ToString()); // the file is locked by the current process
+                    }
+
                     Assert.Equal(2, engine.Errors); // retries failed and the actual failure
                     Assert.Equal(10, engine.Warnings);
                 }
@@ -1339,7 +1343,7 @@ public void CopyToDestinationFolder()
                     me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.HardLinkComment", sourceFile, destFile);
                 }
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.Single(t.DestinationFiles);
                 Assert.Single(t.CopiedFiles);
@@ -1399,7 +1403,7 @@ public void CopyDoubleEscapableFileToDestinationFolder()
                     destinationFileContents = sr.ReadToEnd();
                 }
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.Single(t.DestinationFiles);
                 Assert.Single(t.CopiedFiles);
@@ -2167,7 +2171,7 @@ public void CopyToDestinationFolderWithHardLinkCheck()
 
                 // Read the destination file (it should have the same modified content as the source)
                 destinationFileContents = File.ReadAllText(destFile);
-                Assert.Equal("This is another source temp file.", destinationFileContents); //"Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
+                Assert.Equal("This is another source temp file.", destinationFileContents); // "Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
             }
@@ -2251,9 +2255,9 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
                 me.AssertLogContains("0x80070011");
 
                 string destinationFileContents = File.ReadAllText(destFile1);
-                Assert.Equal("This is source temp file 1.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is source temp file 1.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
                 destinationFileContents = File.ReadAllText(destFile2);
-                Assert.Equal("This is source temp file 2.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is source temp file 2.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.Equal(2, t.DestinationFiles.Length);
                 Assert.Equal(2, t.CopiedFiles.Length);
@@ -2269,7 +2273,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackNetwork()
 
                 // Read the destination file (it should have the same modified content as the source)
                 destinationFileContents = File.ReadAllText(destFile1);
-                Assert.Equal("This is source temp file 1.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
+                Assert.Equal("This is source temp file 1.", destinationFileContents); // "Expected the destination copied file to contain the contents of original source file only."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
             }
@@ -2346,7 +2350,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
                 me.AssertLogContains("0x80070476");
 
                 string destinationFileContents = File.ReadAllText(destFile);
-                Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.Single(t.DestinationFiles);
                 Assert.Single(t.CopiedFiles);
@@ -2360,7 +2364,7 @@ public void CopyToDestinationFolderWithHardLinkFallbackTooManyLinks()
 
                 // Read the destination file (it should have the same modified content as the source)
                 destinationFileContents = File.ReadAllText(destFile);
-                Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination copied file to contain the contents of original source file only."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination copied file to contain the contents of original source file only."
 
                 ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3026"); // Didn't do retries
             }
@@ -2397,9 +2401,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
 
             if (NativeMethodsShared.IsWindows)
             {
-#pragma warning disable CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))
-#pragma warning restore CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 {
                     isPrivileged = false;
                     Assert.True(true, "It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges");
@@ -2441,7 +2443,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
                     me.AssertLogContainsMessageFromResource(resourceDelegate, "Copy.SymbolicLinkComment", sourceFile, destFile);
 
                     string destinationFileContents = File.ReadAllText(destFile);
-                    Assert.Equal("This is a source temp file.", destinationFileContents); //"Expected the destination symbolic linked file to contain the contents of source file."
+                    Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination symbolic linked file to contain the contents of source file."
 
                     Assert.Single(t.DestinationFiles);
                     Assert.Single(t.CopiedFiles);
@@ -2456,7 +2458,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
 
                     // Read the destination file (it should have the same modified content as the source)
                     destinationFileContents = File.ReadAllText(destFile);
-                    Assert.Equal("This is another source temp file.", destinationFileContents); //"Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
+                    Assert.Equal("This is another source temp file.", destinationFileContents); // "Expected the destination hard linked file to contain the contents of source file. Even after modification of the source"
 
                     ((MockEngine)t.BuildEngine).AssertLogDoesntContain("MSB3891"); // Didn't do retries
                 }
diff --git a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
index 83439b1d41f..d55cbe2087d 100644
--- a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
@@ -12,6 +12,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CreateCSharpManifestResourceName_Tests
diff --git a/src/Tasks.UnitTests/CreateItem_Tests.cs b/src/Tasks.UnitTests/CreateItem_Tests.cs
index de694d88f7d..b82f1f4af7e 100644
--- a/src/Tasks.UnitTests/CreateItem_Tests.cs
+++ b/src/Tasks.UnitTests/CreateItem_Tests.cs
@@ -3,18 +3,33 @@
 
 using System.IO;
 using System.Collections.Generic;
+using Microsoft.Build.Definition;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
 using Xunit.Abstractions;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CreateItem_Tests
     {
+        internal const string CreateItemWithInclude = @"
+            <Project>
+                <Target Name='TestTarget' Returns='@(Text)'>
+                    <CreateItem Include='{0}'>
+                        <Output TaskParameter='Include' ItemName='Text'/>
+                    </CreateItem>
+                </Target>
+            </Project>
+            ";
+
         private readonly ITestOutputHelper _testOutput;
 
         public CreateItem_Tests(ITestOutputHelper output)
@@ -259,8 +274,175 @@ public void AdditionalMetaDataOverwriteExisting()
             Assert.True(success);
             Assert.Equal("SomeOverwriteValue", t.Include[0].GetMetadata("MyMetaData"));
         }
-    }
-}
 
+        /// <summary>
+        /// Logs error when encountering wildcard drive enumeration during task item creation.
+        /// </summary>
+        [Theory]
+        [InlineData(@"/**")]
+        [InlineData(@"/**/*.cs")]
+        [InlineData(@"/**/*/*.cs")]
+        public void WildcardDriveEnumerationTaskItemLogsError(string itemSpec)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+
+                try
+                {
+                    MockEngine engine = new MockEngine();
+                    CreateItem t = new CreateItem()
+                    {
+                        BuildEngine = engine,
+                        Include = new ITaskItem[] { new TaskItem(itemSpec) },
+                    };
+
+                    t.Execute().ShouldBeFalse();
+                    engine.Errors.ShouldBe(1);
+                    engine.AssertLogContains("MSB5029");
+                    engine.AssertLogContains(engine.ProjectFileOfTaskNode);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during task item creation on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\**\*.log")]
+        [InlineData(@"z:\\\\**\*.log")]
+        public void LogWindowsWarningUponCreateItemExecution(string itemSpec)
+        {
+            VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(itemSpec);
+        }
 
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during task item creation on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"\**")]
+        [InlineData(@"\**\*.log")]
+        public void LogUnixWarningUponCreateItemExecution(string itemSpec)
+        {
+            VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(itemSpec);
+        }
 
+        private static void VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(string itemSpec)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                try
+                {
+                    MockEngine engine = new MockEngine();
+                    CreateItem t = new CreateItem()
+                    {
+                        BuildEngine = engine,
+                        Include = new ITaskItem[] { new TaskItem(itemSpec) },
+                    };
+
+                    t.Execute().ShouldBeTrue();
+                    engine.Warnings.ShouldBe(1);
+                    engine.AssertLogContains("MSB5029");
+                    engine.AssertLogContains(engine.ProjectFileOfTaskNode);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Throws exception when encountering wildcard drive enumeration during CreateItem task execution.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"$(empty)\**\*.cs")]
+        public void ThrowExceptionUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "1",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.FailWithError,
+                _testOutput);
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:$(empty)\**\*.cs")]
+        public void LogWindowsWarningUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithWarning,
+                _testOutput);
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"$(empty)\**\*.cs")]
+        public void LogUnixWarningUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                    content,
+                    "0",
+                    "TestTarget",
+                    Helpers.ExpectedBuildResult.SucceedWithWarning,
+                    _testOutput);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/CreateProperty_Tests.cs b/src/Tasks.UnitTests/CreateProperty_Tests.cs
index 78b1676c1b2..0b05115ca4a 100644
--- a/src/Tasks.UnitTests/CreateProperty_Tests.cs
+++ b/src/Tasks.UnitTests/CreateProperty_Tests.cs
@@ -5,6 +5,8 @@
 using System;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CreateProperty_Tests : IDisposable
diff --git a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
index b1617749091..4fffa6e0379 100644
--- a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
@@ -12,6 +12,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class CreateVisualBasicManifestResourceName_Tests
@@ -719,6 +721,3 @@ private void AssertSimpleCase(string code, string expected)
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/Culture_Tests.cs b/src/Tasks.UnitTests/Culture_Tests.cs
index b4fdc551710..08383580b20 100644
--- a/src/Tasks.UnitTests/Culture_Tests.cs
+++ b/src/Tasks.UnitTests/Culture_Tests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class Culture_Tests
@@ -51,6 +53,3 @@ public void BogusEmbeddedCulture()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/Delete_Tests.cs b/src/Tasks.UnitTests/Delete_Tests.cs
index cf9ed630114..31cadf2bb69 100644
--- a/src/Tasks.UnitTests/Delete_Tests.cs
+++ b/src/Tasks.UnitTests/Delete_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class Delete_Tests
@@ -34,6 +36,3 @@ public void AttributeForwarding()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/DependentAssembly_Tests.cs b/src/Tasks.UnitTests/DependentAssembly_Tests.cs
index 1e928ac2a91..20eb679c3c1 100644
--- a/src/Tasks.UnitTests/DependentAssembly_Tests.cs
+++ b/src/Tasks.UnitTests/DependentAssembly_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class DependentAssembly_Tests
diff --git a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
index 487137a9812..e8f0784d223 100644
--- a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -14,7 +16,7 @@ namespace Microsoft.Build.UnitTests
     abstract public class DirectoryBuildProjectImportTestBase : IDisposable
     {
         private const string BasicDirectoryBuildProjectContents = @"
-                <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project>
                     <PropertyGroup>
                         <WasDirectoryBuildProjectImported>true</WasDirectoryBuildProjectImported>
                     </PropertyGroup>
@@ -73,7 +75,7 @@ public void DoesNotImportDirectoryBuildProjectIfNotExist()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -102,7 +104,7 @@ public void DoesNotImportDirectoryBuildProjectWhenDisabled()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{ImportDirectoryBuildProjectPropertyName}>false</{ImportDirectoryBuildProjectPropertyName}>
                     </PropertyGroup>
@@ -133,7 +135,7 @@ public void ImportsDirectoryBuildProjectCustomFile()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{DirectoryBuildProjectPathPropertyName}>{customFilePath}</{DirectoryBuildProjectPathPropertyName}>
                     </PropertyGroup>
@@ -161,7 +163,7 @@ public void ImportsDirectoryBuildProjectIfExists()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
diff --git a/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs b/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
index 04fba09a20c..762ce477248 100644
--- a/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -20,4 +22,4 @@ sealed public class DirectoryBuildPropsImportTests : DirectoryBuildProjectImport
 
         protected override string ImportDirectoryBuildProjectPropertyName => "ImportDirectoryBuildProps";
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs b/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
index 5c37729db64..783538a0697 100644
--- a/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -20,4 +22,4 @@ sealed public class DirectoryBuildTargetsImportTests : DirectoryBuildProjectImpo
 
         protected override string DirectoryBuildProjectBasePathPropertyName => "_DirectoryBuildTargetsBasePath";
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks.UnitTests/DownloadFile_Tests.cs b/src/Tasks.UnitTests/DownloadFile_Tests.cs
index 2d19fa29462..81a47c77412 100644
--- a/src/Tasks.UnitTests/DownloadFile_Tests.cs
+++ b/src/Tasks.UnitTests/DownloadFile_Tests.cs
@@ -14,6 +14,8 @@
 
 using Task = System.Threading.Tasks.Task;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class DownloadFile_Tests
diff --git a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
index d80ba5e5592..f99a7e8bb4e 100644
--- a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
+++ b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ErrorWarningMessage_Tests
@@ -354,6 +356,3 @@ public void ErrorFromResourcesNoResources()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 6bbcdb146cc..3be6e26a45a 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -16,6 +16,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Evaluation;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -67,31 +69,6 @@ public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
             }
         }
 
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile_DisabledUnderChangeWave16_10()
-        {
-            using (var testEnvironment = TestEnvironment.Create())
-            {
-                ChangeWaves.ResetStateForTests();
-                testEnvironment.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-                var newTempPath = testEnvironment.CreateNewTempPathWithSubfolder("hello()w]o(rld)").TempPath;
-
-                string tempPath = Path.GetTempPath();
-                Assert.StartsWith(newTempPath, tempPath);
-
-                // Now run the Exec task on a simple command.
-                Exec exec = PrepareExec("echo Hello World!");
-                exec.Execute().ShouldBeFalse();
-
-                ChangeWaves.ResetStateForTests();
-            }
-        }
-
         /// <summary>
         /// Ensures that calling the Exec task does not leave any extra TEMP files
         /// lying around.
@@ -523,7 +500,7 @@ public void ExecTaskDisablesAutoRun(string environmentVariableName, string envir
 
                 MethodInfo generateCommandLineCommandsMethod = execType.GetMethod("GenerateCommandLineCommands", BindingFlags.Instance | BindingFlags.NonPublic);
 
-                string commandLine = generateCommandLineCommandsMethod.Invoke(exec, new object[0]) as string;
+                string commandLine = generateCommandLineCommandsMethod.Invoke(exec, Array.Empty<object>()) as string;
 
                 if (autoRunShouldBeDisabled)
                 {
@@ -867,31 +844,31 @@ public void SetEnvironmentVariableParameter()
         [Fact]
         public void ConsoleToMSBuild()
         {
-            //Exec with no output
+            // Exec with no output
             Exec exec = PrepareExec("set foo=blah");
-            //Test Set and Get of ConsoleToMSBuild
+            // Test Set and Get of ConsoleToMSBuild
             exec.ConsoleToMSBuild = true;
             Assert.True(exec.ConsoleToMSBuild);
 
             bool result = exec.Execute();
             Assert.True(result);
 
-            //Nothing to run, so the list should be empty
+            // Nothing to run, so the list should be empty
             Assert.Empty(exec.ConsoleOutput);
 
 
-            //first echo prints "Hello stderr" to stderr, second echo prints to stdout
+            // first echo prints "Hello stderr" to stderr, second echo prints to stdout
             string testString = "echo Hello stderr 1>&2\necho Hello stdout";
             exec = PrepareExec(testString);
 
-            //Test Set and Get of ConsoleToMSBuild
+            // Test Set and Get of ConsoleToMSBuild
             exec.ConsoleToMSBuild = true;
             Assert.True(exec.ConsoleToMSBuild);
 
             result = exec.Execute();
             Assert.True(result);
 
-            //Both two lines should had gone to stdout
+            // Both two lines should had gone to stdout
             Assert.Equal(2, exec.ConsoleOutput.Length);
         }
 
@@ -1015,64 +992,6 @@ public void EndToEndMultilineExec_EscapeSpecialCharacters()
                 }
             }
         }
-
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        public void EndToEndMultilineExec_EscapeSpecialCharacters_DisabledUnderChangeWave16_10()
-        {
-            using (var env = TestEnvironment.Create(_output))
-            {
-                ChangeWaves.ResetStateForTests();
-                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-                var testProject = env.CreateTestProjectWithFiles(@"<Project>
-<Target Name=""ExecCommand"">
-  <Exec Command=""echo Hello, World!"" />
-   </Target>
-</Project>");
-
-                // Ensure path has subfolders
-                var newTempPath = env.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
-                string tempPath = Path.GetTempPath();
-                Assert.StartsWith(newTempPath, tempPath);
-
-                using (var buildManager = new BuildManager())
-                {
-                    MockLogger logger = new MockLogger(_output, profileEvaluation: false, printEventsToStdout: false);
-
-                    var parameters = new BuildParameters()
-                    {
-                        Loggers = new[] { logger },
-                    };
-
-                    var collection = new ProjectCollection(
-                        new Dictionary<string, string>(),
-                        new[] { logger },
-                        remoteLoggers: null,
-                        ToolsetDefinitionLocations.Default,
-                        maxNodeCount: 1,
-                        onlyLogCriticalEvents: false,
-                        loadProjectsReadOnly: true);
-
-                    var project = collection.LoadProject(testProject.ProjectFile).CreateProjectInstance();
-
-                    var request = new BuildRequestData(
-                        project,
-                        targetsToBuild: new[] { "ExecCommand" },
-                        hostServices: null);
-
-                    var result = buildManager.Build(parameters, request);
-
-                    logger.AssertLogContains("Hello, World!");
-
-                    result.OverallResult.ShouldBe(BuildResultCode.Failure);
-                }
-                ChangeWaves.ResetStateForTests();
-            }
-        }
     }
 
     internal class ExecWrapper : Exec
@@ -1094,6 +1013,3 @@ public Encoding StdErrorEncoding
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/FileStateTests.cs b/src/Tasks.UnitTests/FileStateTests.cs
index 62f6eab495f..623fd213391 100644
--- a/src/Tasks.UnitTests/FileStateTests.cs
+++ b/src/Tasks.UnitTests/FileStateTests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -421,8 +423,3 @@ public void DoesNotExistParentFolderNotFound()
         }
     }
 }
-
-
-
-
-
diff --git a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
index c2bd134f11a..bdd9b209f10 100644
--- a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
+++ b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class FindAppConfigFile_Tests
@@ -17,7 +19,7 @@ public void FoundInFirstInProjectDirectory()
             FindAppConfigFile f = new FindAppConfigFile();
             f.BuildEngine = new MockEngine();
             f.PrimaryList = new ITaskItem[] { new TaskItem("app.config"), new TaskItem("xxx") };
-            f.SecondaryList = new ITaskItem[] { };
+            f.SecondaryList = System.Array.Empty<ITaskItem>();
             f.TargetPath = "targetpath";
             Assert.True(f.Execute());
             Assert.Equal("app.config", f.AppConfigFile.ItemSpec);
@@ -86,7 +88,7 @@ public void ReturnsLastOne()
             ITaskItem item2 = new TaskItem("app.config");
             item2.SetMetadata("id", "2");
             f.PrimaryList = new ITaskItem[] { item1, item2 };
-            f.SecondaryList = new ITaskItem[] { };
+            f.SecondaryList = System.Array.Empty<ITaskItem>();
             f.TargetPath = "targetpath";
             Assert.True(f.Execute());
             Assert.Equal("app.config", f.AppConfigFile.ItemSpec);
@@ -94,4 +96,3 @@ public void ReturnsLastOne()
         }
     }
 }
-
diff --git a/src/Tasks.UnitTests/FindInList_Tests.cs b/src/Tasks.UnitTests/FindInList_Tests.cs
index a87a9cc5ffc..a1f0d76bf11 100644
--- a/src/Tasks.UnitTests/FindInList_Tests.cs
+++ b/src/Tasks.UnitTests/FindInList_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class FindInList_Tests
@@ -90,7 +92,7 @@ public void ReturnsLastOneEmptyList()
             f.BuildEngine = new MockEngine();
             f.ItemSpecToFind = "a.cs";
             f.FindLastMatch = true;
-            f.List = new ITaskItem[] { };
+            f.List = Array.Empty<ITaskItem>();
             Assert.True(f.Execute());
             Assert.Null(f.ItemFound);
         }
diff --git a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
index 18a0cba61dd..a877437c79c 100644
--- a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
+++ b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
@@ -7,6 +7,8 @@
 using System.Collections.Generic;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class FindInvalidProjectReferences_Tests
diff --git a/src/Tasks.UnitTests/FindUnderPath_Tests.cs b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
index cc47b31adfd..ea2139737ec 100644
--- a/src/Tasks.UnitTests/FindUnderPath_Tests.cs
+++ b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
@@ -11,6 +11,8 @@
 
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class FindUnderPath_Tests
@@ -139,6 +141,3 @@ public void VerifyFullPathNegative()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/FormatUrl_Tests.cs b/src/Tasks.UnitTests/FormatUrl_Tests.cs
new file mode 100644
index 00000000000..84d83915f6f
--- /dev/null
+++ b/src/Tasks.UnitTests/FormatUrl_Tests.cs
@@ -0,0 +1,211 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.IO;
+using Microsoft.Build.Tasks;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+
+namespace Microsoft.Build.UnitTests
+{
+    sealed public class FormatUrl_Tests
+    {
+        private readonly ITestOutputHelper _out;
+
+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)
+        {
+            _out = testOutputHelper;
+        }
+
+        /// <summary>
+        /// The URL to format is null.
+        /// </summary>
+        [Fact]
+        public void NullTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = null;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(string.Empty);
+        }
+
+        /// <summary>
+        /// The URL to format is empty.
+        /// </summary>
+        [Fact]
+        public void EmptyTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = string.Empty;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(t.InputUrl);
+        }
+
+        /// <summary>
+        /// No InputUrl value is provided. InputUrl is not a required parameter for the task.
+        /// </summary>
+        [Fact]
+        public void NoInputTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(string.Empty);
+        }
+
+        /// <summary>
+        /// The URL to format is white space.
+        /// FormatUrl depends on Path.GetFullPath.
+        /// From the documentation, Path.GetFullPath(" ") should throw an ArgumentException, but it doesn't on macOS and Linux
+        /// where whitespace characters are valid characters for filenames.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        public void WhitespaceTestOnUnix()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = " ";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(Path.Combine(Environment.CurrentDirectory, t.InputUrl)).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is white space.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void WhitespaceTestOnWindows()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = " ";
+            Should.Throw<ArgumentException>(() => t.Execute());
+        }
+
+        /// <summary>
+        /// The URL to format is a UNC.
+        /// </summary>
+        [Fact]
+        public void UncPathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"\\server\filename.ext";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file://server/filename.ext");
+        }
+
+        /// <summary>
+        /// The URL to format is a local absolute file path.
+        /// This test uses Environment.CurrentDirectory to have a file path value appropriate to the current OS/filesystem. 
+        /// </summary>
+        [Fact]
+        public void LocalAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = Environment.CurrentDirectory;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(t.InputUrl).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is a local relative file path.
+        /// This test uses Environment.CurrentDirectory to have a file path value appropriate to the current OS/filesystem. 
+        /// </summary>
+        [Fact]
+        public void LocalRelativePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @".";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(Environment.CurrentDirectory).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is a *nix-style (macOS, Linux) local absolute file path.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        public void LocalUnixAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"/usr/local/share";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file:///usr/local/share");
+        }
+
+        /// <summary>
+        /// The URL to format is a Windows-style local absolute file path.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void LocalWindowsAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"c:\folder\filename.ext";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file:///c:/folder/filename.ext");
+        }
+
+        /// <summary>
+        /// The URL to format is a URL using localhost.
+        /// </summary>
+        [Fact]
+        public void UrlLocalHostTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://localhost/Example/Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"https://" + Environment.MachineName.ToLowerInvariant() + "/Example/Path");
+        }
+
+        /// <summary>
+        /// The URL to format is a URL.
+        /// </summary>
+        [Fact]
+        public void UrlTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://example.com/Example/Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(t.InputUrl);
+        }
+
+        /// <summary>
+        /// The URL to format is a URL with a 'parent' element (..) in the path.
+        /// </summary>
+        [Fact]
+        public void UrlParentPathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://example.com/Example/../Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"https://example.com/Path");
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index 22e3eb6a34c..1b7826288e8 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class GenerateBindingRedirectsTests : IDisposable
@@ -310,7 +312,7 @@ private BindingRedirectsExecutionResult GenerateBindingRedirects(string appConfi
             GenerateBindingRedirects bindingRedirects = new GenerateBindingRedirects
             {
                 BuildEngine = engine,
-                SuggestedRedirects = suggestedRedirects ?? new ITaskItem[] { },
+                SuggestedRedirects = suggestedRedirects ?? System.Array.Empty<ITaskItem>(),
                 AppConfigFile = new TaskItem(appConfigFile),
                 OutputAppConfigFile = new TaskItem(outputAppConfig)
             };
diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index 91bbc2269b3..620cb08680b 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -7,6 +7,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     sealed public class GetCompatiblePlatform_Tests
@@ -134,6 +136,7 @@ public void WarnsWhenProjectReferenceHasNoPlatformOptions()
             // It will continue and have no NearestPlatform metadata.
             TaskItem projectReference = new TaskItem("foo.bar");
             projectReference.SetMetadata("Platforms", string.Empty);
+            projectReference.SetMetadata("Platform", string.Empty);
 
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
@@ -199,5 +202,29 @@ public void WarnsOnInvalidFormatProjectReferenceLookupTable()
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
             ((MockEngine)task.BuildEngine).AssertLogContains("MSB3983");
         }
+
+        // When `Platform` is retrieved in "GetTargetFrameworks" and that platform matches what's currently
+        // being built, build that project _without_ a global property for Platform.
+        [Theory]
+        [InlineData("x86;AnyCPU", "x64", "x64")] // Referenced platform matches current platform, build w/o global property
+        [InlineData("x64;x86;AnyCPU", "x64", "x64")] // Referenced platform overrides 'Platforms' being an option
+        public void PlatformIsChosenAsDefault(string referencedPlatforms, string referencedPlatform, string currentPlatform)
+        {
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", referencedPlatforms);
+            projectReference.SetMetadata("Platform", referencedPlatform);
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = currentPlatform,
+                AnnotatedProjects = new TaskItem[] { projectReference }
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
+            task.Log.HasLoggedErrors.ShouldBeFalse();
+        }
     }
 }
diff --git a/src/Tasks.UnitTests/GetFileHash_Tests.cs b/src/Tasks.UnitTests/GetFileHash_Tests.cs
index 44e542c40d0..0452a1f0b52 100644
--- a/src/Tasks.UnitTests/GetFileHash_Tests.cs
+++ b/src/Tasks.UnitTests/GetFileHash_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class GetFileHash_Tests
diff --git a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
index 3c7f54c0cff..40f3e4615d4 100644
--- a/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
+++ b/src/Tasks.UnitTests/GetInstalledSDKLocations_Tests.cs
@@ -12,6 +12,8 @@
 using Xunit;
 using Microsoft.Build.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.GetInstalledSDKLocation_Tests
 {
     public class FakeSDKStructure : IDisposable
@@ -66,11 +68,11 @@ private static string MakeFakeSDKStructure()
                         new[] { tempPath, "Windows", "2.0", "ExtensionSDKs", "MyAssembly", "3.0", "SDKManifest.xml" }),
                     "Hello");
 
-                //Bad because of v in the sdk version
+                // Bad because of v in the sdk version
                 Directory.CreateDirectory(
                     Path.Combine(new[] { tempPath, "Windows", "v1.0", "ExtensionSDKs", "MyAssembly", "v1.1" }));
 
-                //Bad because no extensionSDKs directory under the platform version
+                // Bad because no extensionSDKs directory under the platform version
                 Directory.CreateDirectory(Path.Combine(tempPath, "Windows", "v3.0") + Path.DirectorySeparatorChar);
 
                 // Bad because the directory under the identifier is not a version
diff --git a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
index a88113e0319..3dc4eb161d2 100644
--- a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
+++ b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 
 #if !RUNTIME_TYPE_NETCORE
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/GetSDKReference_Tests.cs b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
index 6437663437c..691c7be48b6 100644
--- a/src/Tasks.UnitTests/GetSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
@@ -15,6 +15,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.GetSDKReferenceFiles_Tests
 {
     public class FakeSdkStructure : IDisposable
diff --git a/src/Tasks.UnitTests/Hash_Tests.cs b/src/Tasks.UnitTests/Hash_Tests.cs
index e2b64378d47..23a45580e60 100644
--- a/src/Tasks.UnitTests/Hash_Tests.cs
+++ b/src/Tasks.UnitTests/Hash_Tests.cs
@@ -3,6 +3,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class Hash_Tests
@@ -39,10 +41,82 @@ public void HashTaskEmptyInputTest()
             var nullItemsHash = ExecuteHashTask(null);
             Assert.Null(nullItemsHash);
 
-            var zeroLengthItemsHash = ExecuteHashTask(new ITaskItem[0]);
+            var zeroLengthItemsHash = ExecuteHashTask(System.Array.Empty<ITaskItem>());
             Assert.Null(zeroLengthItemsHash);
         }
 
+        [Fact]
+        public void HashTaskLargeInputCountTest()
+        {
+            // This hash was pre-computed. If the implementation changes it may need to be adjusted.
+            var expectedHash = "8a996bbcb5e481981c2fba7ac408e20d0b4360a5";
+
+            ITaskItem[] itemsToHash = new ITaskItem[1000];
+            for (int i = 0; i < itemsToHash.Length; i++)
+            {
+                itemsToHash[i] = new TaskItem($"Item{i}");
+            }
+
+            var actualHash = ExecuteHashTask(itemsToHash);
+            Assert.Equal(expectedHash, actualHash);
+        }
+
+        [Fact]
+        public void HashTaskLargeInputSizeTest()
+        {
+            // This hash was pre-computed. If the implementation changes it may need to be adjusted.
+            var expectedHash = "0509142dd3d3a733f30a52a0eec37cd727d46122";
+
+            string[] array = new string[1000];
+            for (int i = 0; i < array.Length; i++)
+            {
+                array[i] = $"Item{i}";
+            }
+            ITaskItem[] itemsToHash = new ITaskItem[] { new TaskItem(string.Join("", array)) };
+
+            var actualHash = ExecuteHashTask(itemsToHash);
+            Assert.Equal(expectedHash, actualHash);
+        }
+
+#pragma warning disable CA5350
+        // This test verifies that hash computes correctly for various numbers of characters.
+        // We would like to process edge of the buffer use cases regardless on the size of the buffer.
+        [Fact]
+        public void HashTaskDifferentInputSizesTest()
+        {
+            int maxInputSize = 2000;
+            string input = "";
+            using (var sha1 = System.Security.Cryptography.SHA1.Create())
+            {
+                var stringBuilder = new System.Text.StringBuilder(sha1.HashSize);
+                MockEngine mockEngine = new();
+                for (int i = 0; i < maxInputSize; i++)
+                {
+                    input += "a";
+
+                    Hash hashTask = new()
+                    {
+                        BuildEngine = mockEngine,
+                        ItemsToHash = new ITaskItem[] { new TaskItem(input) },
+                        IgnoreCase = false
+                    };
+                    Assert.True(hashTask.Execute());
+                    string actualHash = hashTask.HashResult;
+
+                    byte[] hash = sha1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(input + '\u2028'));
+                    stringBuilder.Clear();
+                    foreach (var b in hash)
+                    {
+                        stringBuilder.Append(b.ToString("x2"));
+                    }
+                    string expectedHash = stringBuilder.ToString();
+
+                    Assert.Equal(expectedHash, actualHash);
+                }
+            }
+        }
+#pragma warning restore CA5350
+
         [Fact]
         public void HashTaskIgnoreCaseTest()
         {
diff --git a/src/Tasks.UnitTests/HintPathResolver_Tests.cs b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
index 37f8f89445c..a3832398132 100644
--- a/src/Tasks.UnitTests/HintPathResolver_Tests.cs
+++ b/src/Tasks.UnitTests/HintPathResolver_Tests.cs
@@ -6,6 +6,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class HintPathResolver_Tests : IDisposable
diff --git a/src/Tasks.UnitTests/LC_Tests.cs b/src/Tasks.UnitTests/LC_Tests.cs
index 0cbde2ca3a2..3898d2de871 100644
--- a/src/Tasks.UnitTests/LC_Tests.cs
+++ b/src/Tasks.UnitTests/LC_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/MSBuild_Tests.cs b/src/Tasks.UnitTests/MSBuild_Tests.cs
index 27e255ace0b..d2a6effe7d7 100644
--- a/src/Tasks.UnitTests/MSBuild_Tests.cs
+++ b/src/Tasks.UnitTests/MSBuild_Tests.cs
@@ -15,6 +15,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class MSBuildTask_Tests : IDisposable
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index d79835aa6c4..886d7a69aae 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class MakeDir_Tests
@@ -71,7 +73,7 @@ public void SomeInputsFailToCreate()
             try
             {
                 FileStream fs = File.Create(file);
-                fs.Dispose(); //we're gonna try to delete it
+                fs.Dispose(); // we're gonna try to delete it
 
                 MakeDir t = new MakeDir();
                 MockEngine engine = new MockEngine();
@@ -182,7 +184,7 @@ public void FileAlreadyExists()
             try
             {
                 FileStream fs = File.Create(file);
-                fs.Dispose(); //we're gonna try to delete it
+                fs.Dispose(); // we're gonna try to delete it
 
                 MakeDir t = new MakeDir();
                 MockEngine engine = new MockEngine();
@@ -207,6 +209,3 @@ public void FileAlreadyExists()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 9d9813898bc..e0f20bd2eec 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -25,7 +25,8 @@
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" SetTargetFramework="TargetFramework=netstandard2.0" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" />
+    <ProjectReference Include="..\Samples\Dependency\Dependency.csproj" ReferenceOutputAssembly="false" Private="false" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
diff --git a/src/Tasks.UnitTests/MockFaultInjectionHelper.cs b/src/Tasks.UnitTests/MockFaultInjectionHelper.cs
index bb5b2b9401a..c56c2c69513 100644
--- a/src/Tasks.UnitTests/MockFaultInjectionHelper.cs
+++ b/src/Tasks.UnitTests/MockFaultInjectionHelper.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class MockFaultInjectionHelper<FailurePointEnum>
diff --git a/src/Tasks.UnitTests/MockTypeInfo.cs b/src/Tasks.UnitTests/MockTypeInfo.cs
index 418edadd7fa..4b79f6cac53 100644
--- a/src/Tasks.UnitTests/MockTypeInfo.cs
+++ b/src/Tasks.UnitTests/MockTypeInfo.cs
@@ -10,6 +10,8 @@
 using IFixedTypeInfo = Microsoft.Build.Tasks.IFixedTypeInfo;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/MockTypeLib.cs b/src/Tasks.UnitTests/MockTypeLib.cs
index 51221e3e723..6bfe64ac79e 100644
--- a/src/Tasks.UnitTests/MockTypeLib.cs
+++ b/src/Tasks.UnitTests/MockTypeLib.cs
@@ -10,6 +10,8 @@
 using Marshal = System.Runtime.InteropServices.Marshal;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
index 7046cafa1e4..257eaff6403 100644
--- a/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
+++ b/src/Tasks.UnitTests/MockUnmanagedMemoryHelper.cs
@@ -7,6 +7,8 @@
 using Marshal = System.Runtime.InteropServices.Marshal;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Tasks.UnitTests/Move_Tests.cs b/src/Tasks.UnitTests/Move_Tests.cs
index c2c912bb0cf..2ac0ecd66f6 100644
--- a/src/Tasks.UnitTests/Move_Tests.cs
+++ b/src/Tasks.UnitTests/Move_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class Move_Tests
@@ -139,7 +141,7 @@ public void NonexistentSource()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a destination temp file.", destinationFileContents); //                     "Expected the destination file to still contain the contents of destination file."
+                Assert.Equal("This is a destination temp file.", destinationFileContents); // "Expected the destination file to still contain the contents of destination file."
             }
             finally
             {
@@ -218,7 +220,7 @@ public void MoveOverExistingFileReadOnlyNoOverwrite()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a destination temp file.", destinationFileContents); //                     "Expected the destination file to be unchanged."
+                Assert.Equal("This is a destination temp file.", destinationFileContents); // "Expected the destination file to be unchanged."
 
                 Assert.True(((new FileInfo(destinationFile)).Attributes & FileAttributes.ReadOnly) != 0); // should still be r/o
             }
@@ -264,7 +266,7 @@ public void MoveOverExistingFileDestinationWriteable()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
             }
             finally
             {
@@ -314,7 +316,7 @@ public void MoveOverExistingFileOverwriteReadOnly()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.True(((new FileInfo(destinationFile)).Attributes & FileAttributes.ReadOnly) == 0); // readonly bit should not be set
             }
@@ -362,7 +364,7 @@ public void MoveOverExistingFileOverwriteReadOnlyOverWriteReadOnlyFilesTrue()
                 using (StreamReader sr = FileUtilities.OpenRead(destinationFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.True(((new FileInfo(destinationFile)).Attributes & FileAttributes.ReadOnly) == 0); // should have cleared r/o bit
             }
@@ -671,7 +673,7 @@ public void MoveToNonexistentDestinationFolder()
                 using (StreamReader sr = FileUtilities.OpenRead(destFile))
                     destinationFileContents = sr.ReadToEnd();
 
-                Assert.Equal("This is a source temp file.", destinationFileContents); //                     "Expected the destination file to contain the contents of source file."
+                Assert.Equal("This is a source temp file.", destinationFileContents); // "Expected the destination file to contain the contents of source file."
 
                 Assert.Single(t.DestinationFiles);
                 Assert.Single(t.MovedFiles);
diff --git a/src/Tasks.UnitTests/NuGetPropsImportTests.cs b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
index d1ed2d2f7f6..9dd6200a65d 100644
--- a/src/Tasks.UnitTests/NuGetPropsImportTests.cs
+++ b/src/Tasks.UnitTests/NuGetPropsImportTests.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -14,7 +16,7 @@ namespace Microsoft.Build.UnitTests
     public sealed class NuGetPropsImportTests : IDisposable
     {
         private const string NuGetPropsContent = @"
-                <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project>
                     <PropertyGroup>
                         <NuGetPropsIsImported>true</NuGetPropsIsImported>
                     </PropertyGroup>
@@ -41,7 +43,7 @@ public void ImportNuGetPropsWhenExists()
             // src\Foo\Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory(projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{NuGetPropsPropertyName}>{nugetPropsRelativePath}</{NuGetPropsPropertyName}>
                     </PropertyGroup>
@@ -67,7 +69,7 @@ public void ImportNuGetPropsWhenDoesNotExists()
             // src\Foo\Foo.csproj
             // ---------------------
             ObjectModelHelpers.CreateFileInTempProjectDirectory(projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{NuGetPropsPropertyName}>{nugetPropsRelativePath}</{NuGetPropsPropertyName}>
                     </PropertyGroup>
diff --git a/src/Tasks.UnitTests/OutputPathTests.cs b/src/Tasks.UnitTests/OutputPathTests.cs
index 6b4da05750a..0671c89356d 100644
--- a/src/Tasks.UnitTests/OutputPathTests.cs
+++ b/src/Tasks.UnitTests/OutputPathTests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public sealed class OutputPathTests : IDisposable
diff --git a/src/Tasks.UnitTests/PortableTasks_Tests.cs b/src/Tasks.UnitTests/PortableTasks_Tests.cs
index 037fc932f31..20353efc583 100644
--- a/src/Tasks.UnitTests/PortableTasks_Tests.cs
+++ b/src/Tasks.UnitTests/PortableTasks_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class PortableTasks_Tests
@@ -50,7 +52,7 @@ private void RunMSBuildOnProjectWithPortableTaskAndAssertOutput(bool useDesktopM
                 var folder = env.CreateFolder().Path;
                 var projFile = Path.Combine(folder, ProjectFileName);
 
-                //"Debug", "netstandard1.3"
+                // "Debug", "netstandard1.3"
                 DirectoryInfo ProjectFileFolder =
                     new DirectoryInfo(PortableTaskFolderPath).EnumerateDirectories().First().EnumerateDirectories().First();
 
diff --git a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
index e72c228d93d..dae84ce4e97 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsImportTestBase.cs
@@ -7,6 +7,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public abstract class ProjectExtensionsImportTestBase : IDisposable
@@ -19,7 +21,7 @@ protected ProjectExtensionsImportTestBase()
         }
 
         protected virtual string BasicProjectImportContents => $@"
-            <Project xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+            <Project>
                 <PropertyGroup>
                 <{PropertyNameToSignalImportSucceeded}>true</{PropertyNameToSignalImportSucceeded}>
                 </PropertyGroup>
@@ -50,7 +52,7 @@ public void DoesNotImportProjectIfNotExist()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -81,7 +83,7 @@ public void DoesNotImportProjectWhenDisabled()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <{PropertyNameToEnableImport}>false</{PropertyNameToEnableImport}>
                     </PropertyGroup>
@@ -113,7 +115,7 @@ public void ImportsProjectIfCustomPath()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, $@"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <PropertyGroup>
                         <MSBuildProjectExtensionsPath>{Path.GetDirectoryName(CustomImportProjectPath)}</MSBuildProjectExtensionsPath>
                     </PropertyGroup>
@@ -140,7 +142,7 @@ public void ImportsProjectIfExists()
             // ---------------------
 
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <Import Project=`$(MSBuildBinPath)\Microsoft.CSharp.targets` />
@@ -158,7 +160,7 @@ public void ImportsProjectIfExists()
         public void ErrorIfChangedInBodyOfProject()
         {
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <PropertyGroup>
@@ -171,20 +173,20 @@ public void ErrorIfChangedInBodyOfProject()
 
             MockLogger logger = new MockLogger();
 
-            project.Build("_CheckForInvalidConfigurationAndPlatform", new[] {logger}).ShouldBeFalse();
+            project.Build("_CheckForInvalidConfigurationAndPlatform", new[] { logger }).ShouldBeFalse();
 
             logger.Errors.Select(i => i.Code).FirstOrDefault().ShouldBe("MSB3540");
         }
 
         /// <summary>
-        /// Ensures that an error is logged if BaseIntermediateOutputPath is modified after it was set by Microsoft.Common.props and 
+        /// Ensures that an error is logged if BaseIntermediateOutputPath is modified after it was set by Microsoft.Common.props and
         /// EnableBaseIntermediateOutputPathMismatchWarning is 'true'.
         /// </summary>
         [Fact]
         public void WarningIfBaseIntermediateOutputPathIsChangedInBodyOfProject()
         {
             Project project = ObjectModelHelpers.LoadProjectFileInTempProjectDirectory(ObjectModelHelpers.CreateFileInTempProjectDirectory(_projectRelativePath, @"
-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion`>
                     <Import Project=`$(MSBuildBinPath)\Microsoft.Common.props` />
 
                     <PropertyGroup>
diff --git a/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs b/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
index df22c20882a..567de6da99d 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
@@ -2,6 +2,8 @@
 
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -17,4 +19,4 @@ sealed public class ProjectExtensionsPropsImportTest : ProjectExtensionsImportTe
 
         protected override string PropertyNameToSignalImportSucceeded => "WasProjectExtensionPropsImported";
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs b/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
index 0bd9c8774a0..6ced7746b7d 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
@@ -2,6 +2,8 @@
 
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -17,4 +19,4 @@ sealed public class ProjectExtensionsTargetsImportTest : ProjectExtensionsImport
 
         protected override string PropertyNameToSignalImportSucceeded => "WasProjectExtensionTargetsImported";
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks.UnitTests/PropertyParser_Tests.cs b/src/Tasks.UnitTests/PropertyParser_Tests.cs
index 5d269a00e2f..4d3a741f005 100644
--- a/src/Tasks.UnitTests/PropertyParser_Tests.cs
+++ b/src/Tasks.UnitTests/PropertyParser_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class PropertyParser_Tests
diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index 11c0a395500..221f07a2bc9 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -9,6 +9,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class RARPrecomputedCache_Tests
diff --git a/src/Tasks.UnitTests/ReadLinesFromFile_Tests.cs b/src/Tasks.UnitTests/ReadLinesFromFile_Tests.cs
index 5eab296f158..e7ba35224bf 100644
--- a/src/Tasks.UnitTests/ReadLinesFromFile_Tests.cs
+++ b/src/Tasks.UnitTests/ReadLinesFromFile_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class ReadLinesFromFile_Tests
@@ -265,6 +267,5 @@ public void ReadNoAccess()
         }
 #endif
 
-      
     }
 }
diff --git a/src/Tasks.UnitTests/RegressionTests.cs b/src/Tasks.UnitTests/RegressionTests.cs
index f7f188dc6aa..1b0644ee629 100644
--- a/src/Tasks.UnitTests/RegressionTests.cs
+++ b/src/Tasks.UnitTests/RegressionTests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public sealed class RegressionTests
diff --git a/src/Tasks.UnitTests/RemoveDir_Tests.cs b/src/Tasks.UnitTests/RemoveDir_Tests.cs
index 0dee182082b..2becb7a889d 100644
--- a/src/Tasks.UnitTests/RemoveDir_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDir_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class RemoveDir_Tests
@@ -70,8 +72,32 @@ public void SimpleDelete()
                 }
             }
         }
-    }
-}
 
+        /// <summary>
+        /// Regression test: https://github.com/dotnet/msbuild/issues/7563
+        /// </summary>
+        [Fact]
+        public void DeleteEmptyDirectory_WarnsAndContinues()
+        {
 
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+               List<TaskItem> list = new List<TaskItem>();
 
+                for (int i = 0; i < 20; i++)
+               {
+                    list.Add(new TaskItem(""));
+               }
+
+               RemoveDir t = new RemoveDir();
+               t.Directories = list.ToArray();
+               t.BuildEngine = new MockEngine(_output);
+               t.Execute().ShouldBeTrue();
+
+                t.RemovedDirectories.Length.ShouldBe(0);
+                ((MockEngine)t.BuildEngine).Warnings.ShouldBe(20);
+               ((MockEngine)t.BuildEngine).AssertLogContains("MSB3232");
+            }
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
index ad537c820c4..4e261b92771 100644
--- a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class RemoveDuplicates_Tests
diff --git a/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs b/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
index ba48744b488..355e98dc8a8 100644
--- a/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveCodeAnalysisRuleSet_Tests.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ResolveAnalyzerRuleSet_Tests
diff --git a/src/Tasks.UnitTests/ResolveComReference_Tests.cs b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
index 4e695b86a73..cb8bb5379f2 100644
--- a/src/Tasks.UnitTests/ResolveComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
@@ -18,6 +18,8 @@
 using Microsoft.Build.BackEnd;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ResolveComReference_Tests
@@ -753,7 +755,12 @@ public void AxReferenceKnowsItsRCWPiaExists_IncludeVersion()
             CheckAxReferenceRCWTlbExists(RcwStyle.PreexistingPia /* pass in the PIA reference */, true /* include version in the interop name */);
         }
 
-        private enum RcwStyle { GenerateTlb, PreexistingTlb, PreexistingPia };
+        private enum RcwStyle
+        {
+            GenerateTlb,
+            PreexistingTlb,
+            PreexistingPia,
+        }
 
         /// <summary>
         /// Helper method that will new up an AX and matching TLB reference, and verify that the AX reference
@@ -813,7 +820,7 @@ private void CheckAxReferenceRCWTlbExists(RcwStyle rcwStyle, bool includeVersion
                         includeVersionInInteropName,
                         tlbRefInfo.attr.wMajorVerNum,
                         tlbRefInfo.attr.wMinorVerNum
-                        )); //                     "Expected Ax reference's RCW name to match the new TLB"
+                        )); // "Expected Ax reference's RCW name to match the new TLB"
         }
     }
 }
diff --git a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
index 2b846b46bd1..49bed4e7b44 100644
--- a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
@@ -10,6 +10,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ResolveNonMSBuildProjectOutput_Tests
diff --git a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
index 74dfedd39d1..8607667d3c3 100644
--- a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Execution;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.ResolveSDKReference_Tests
 {
     public class ResolveSDKReferenceTestFixture
@@ -50,7 +52,7 @@ public void ParseItemSpecGood()
         [Fact]
         public void ParseItemSpecBadNames()
         {
-            //These should all be bad the format must be   <SDKName>, Version=<SDKVersion>.
+            // These should all be bad the format must be   <SDKName>, Version=<SDKVersion>.
             TestBadSDKReferenceIncludes(new TaskItem(""));
             TestBadSDKReferenceIncludes(new TaskItem("Cat, Version=8"));
             TestBadSDKReferenceIncludes(new TaskItem("Cat 8.0"));
@@ -378,7 +380,7 @@ public void VerifyUnResolvedSDKMessage()
             reference5.DependsOnSDK = "reference1, Version=1.0";
             references.Add(reference5);
 
-            ResolveSDKReference.VerifySDKDependsOn(log, references); //, new Version(8, 1), "Windows", null);
+            ResolveSDKReference.VerifySDKDependsOn(log, references); // , new Version(8, 1), "Windows", null);
             Assert.Equal(0, engine.Warnings);
             Assert.Equal(0, engine.Errors);
             Assert.Equal(0, engine.Log.Length);
@@ -405,7 +407,7 @@ public void VerifyUnResolvedSDKMessage()
             reference4.DependsOnSDK = "NotThere, Version=1.0";
             references.Add(reference4);
 
-            ResolveSDKReference.VerifySDKDependsOn(log, references);//, new Version(8, 1), "Windows", null);
+            ResolveSDKReference.VerifySDKDependsOn(log, references); // , new Version(8, 1), "Windows", null);
             Assert.Equal(4, engine.Warnings);
             Assert.Equal(0, engine.Errors);
 
@@ -1197,7 +1199,7 @@ public void DuplicateSDKReferences()
             ITaskItem item = new TaskItem("GoodTestSDK, Version=2.0");
             ITaskItem item2 = new TaskItem("GoodTestSDK, Version=2.0");
             t.SDKReferences = new ITaskItem[] { item, item2 };
-            t.References = new TaskItem[0];
+            t.References = Array.Empty<TaskItem>();
             ITaskItem installedSDK = new TaskItem(_sdkPath);
             installedSDK.SetMetadata("SDKName", "GoodTestSDK, Version=2.0");
             t.InstalledSDKs = new ITaskItem[] { installedSDK };
@@ -1305,7 +1307,7 @@ public void InstalledSDKEmpty()
             ITaskItem item = new TaskItem("GoodTestSDK, Version=2.0");
             t.SDKReferences = new ITaskItem[] { item };
             t.References = null;
-            t.InstalledSDKs = new ITaskItem[0];
+            t.InstalledSDKs = Array.Empty<ITaskItem>();
 
             t.BuildEngine = engine;
             bool succeeded = t.Execute();
@@ -1328,7 +1330,7 @@ public void MixOfInstalledSDKItemsGoodDuplicateAndBad()
             ResolveSDKReference t = new ResolveSDKReference();
             ITaskItem item = new TaskItem("GoodTestSDK, Version=2.0");
             t.SDKReferences = new ITaskItem[] { item };
-            t.References = new TaskItem[0];
+            t.References = Array.Empty<TaskItem>();
 
             ITaskItem installedSDK1 = new TaskItem(_sdkPath);
             installedSDK1.SetMetadata("SDKName", "GoodTestSDK, Version=2.0");
@@ -1471,7 +1473,7 @@ public void EmptySDKReferencesList()
 
             ResolveSDKReference t = new ResolveSDKReference();
             ITaskItem item = new TaskItem("GoodTestSDK, Version=2.0");
-            t.SDKReferences = new ITaskItem[0];
+            t.SDKReferences = Array.Empty<ITaskItem>();
             ITaskItem installedSDK = new TaskItem(_sdkPath);
             installedSDK.SetMetadata("SDKName", "GoodTestSDK, Version=2.0");
             t.InstalledSDKs = new ITaskItem[] { installedSDK };
diff --git a/src/Tasks.UnitTests/ResolveVCProjectOutput_Tests.cs b/src/Tasks.UnitTests/ResolveVCProjectOutput_Tests.cs
index 0ca65b46408..1dd312a7790 100644
--- a/src/Tasks.UnitTests/ResolveVCProjectOutput_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveVCProjectOutput_Tests.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Tasks;
 
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     [TestFixture]
@@ -2126,4 +2128,4 @@ public void ResolveManagedDllOutputsManagedExtensionsOverridenInFiles()
         }
     }
 }
-*/
\ No newline at end of file
+*/
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index 47761efe7f3..dc5742c039b 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -13,6 +13,8 @@
 using System.Threading;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.GenerateResource_Tests.OutOfProc
 {
     [Trait("Category", "mono-osx-failing")]
@@ -2353,7 +2355,7 @@ public References(ITestOutputHelper output)
         }
 
         [Fact]
-        //FIXME: mono: looks for csc.exe
+        // FIXME: mono: looks for csc.exe
         // https://github.com/dotnet/msbuild/issues/677
         [Trait("Category", "mono-osx-failing")]
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
@@ -2531,7 +2533,7 @@ public class Class1
         /// absolute path).  The fix was to use Assembly.LoadFrom instead.
         /// </summary>
         [Fact]
-        //FIXME: mono: looks for csc.exe
+        // FIXME: mono: looks for csc.exe
         // https://github.com/dotnet/msbuild/issues/677
         [Trait("Category", "mono-osx-failing")]
         public void ReferencedAssemblySpecifiedUsingRelativePath()
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index f902ab72933..64383a4c4b7 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -17,6 +17,8 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.GenerateResource_Tests.InProc
 {
     [Trait("Category", "mono-osx-failing")]
@@ -3261,7 +3263,7 @@ public void MultiTargetingDefaultsSetCorrectly()
             Assert.True(t.ExecuteAsTool); // "ExecuteAsTool should default to true"
         }
 
-        //  Regression test for https://github.com/dotnet/msbuild/issues/2206
+        // Regression test for https://github.com/dotnet/msbuild/issues/2206
         [Theory]
         [InlineData("\n")]
         [InlineData("\r\n")]
@@ -3616,7 +3618,7 @@ public static string GetTestTextContent(string tagName, string oneLine, bool cle
 
             if (tagName != null)
             {
-                txt.Append("[");
+                txt.Append('[');
                 txt.Append(tagName);
                 txt.Append("]\xd\xa");
             }
@@ -3736,7 +3738,7 @@ public static string GetTestResXContent(bool useType, string linkedBitmap, strin
         /// <returns>The name of the resx file</returns>
         public static string WriteTestResX(bool useType, string linkedBitmap, string extraToken, string resxFileToWrite = null, TestEnvironment env = null)
         {
-            return WriteTestResX(useType, linkedBitmap, extraToken, useInvalidType: false, resxFileToWrite:resxFileToWrite);
+            return WriteTestResX(useType, linkedBitmap, extraToken, useInvalidType: false, resxFileToWrite: resxFileToWrite);
         }
 
         /// <summary>
diff --git a/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
index 4da317cd6e7..ed712777dd1 100644
--- a/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
@@ -11,6 +11,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests.GenerateResource
 {
     public class MSBuildResXReader_Tests
@@ -35,6 +37,45 @@ public void ParsesSingleStringAsString()
             AssertSingleStringResource(resxWithSingleString, "StringResource", "StringValue");
         }
 
+        [Fact]
+        public void ParsesSingleStringWithoutPreserveAsString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"">
+    <value> StringValue </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", " StringValue ");
+        }
+
+        [Fact]
+        public void ParsesSingleWhitespaceStringAsString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"" xml:space=""preserve"">
+    <value> </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", " ");
+        }
+
+        [Fact]
+        public void ParsesSingleWhitespaceStringWithNoPreserveAsEmptyString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"">
+    <value> </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", "");
+        }
+
         [Fact]
         public void ParsesSingleStringWithPartialTypeName()
         {
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
index fa4c5af5675..b4eed6f9a10 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class ResGenDependencies_Tests
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
index 81a366f9489..b4ac8290ae1 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
@@ -12,6 +12,8 @@
 using ResGen = Microsoft.Build.Tasks.GenerateResource.ResGen;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ResGen_Tests
@@ -224,11 +226,11 @@ public void References()
             // reference switch adds space + "/r:", (4 characters)
             int referenceSwitchDelta = 4;
 
-            //subtract one because leading space is added to command line arguments
+            // subtract one because leading space is added to command line arguments
             int maxCommandLineLength = 28000 - 1;
             int referencePathLength = 200;
 
-            //min reference argument is " /r:a.dll"
+            // min reference argument is " /r:a.dll"
             int minReferenceArgumentLength = referenceSwitchDelta + "a.dll".Length;
 
             // reference name is of the form aaa...aaa###.dll (repeated a characters followed by 3
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs b/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
index d75034568e8..67636e61e25 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResXHelper.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests.ResourceHandling
 {
     static class ResXHelper
diff --git a/src/Tasks.UnitTests/ResourceManagement_Tests.cs b/src/Tasks.UnitTests/ResourceManagement_Tests.cs
index d75cdd4e120..d3c607678e1 100644
--- a/src/Tasks.UnitTests/ResourceManagement_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceManagement_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class ResourceManagement_Tests
@@ -23,7 +25,7 @@ public void SingleCoreRequest()
                 }", "<UseCores />");
 
             var filteredMessages = messages.Where(m => m.Message.StartsWith("Number of cores acquired: ")).ToArray();
-            filteredMessages.Count().ShouldBe(1);
+            filteredMessages.Length.ShouldBe(1);
             GetTrailingIntegerFromMessage(filteredMessages[0]).ShouldBeGreaterThan(0);
         }
 
@@ -38,7 +40,7 @@ public void SingleCoreRequestWithNoRelease()
                 }", "<UseCores /> <UseCores />");
 
             var filteredMessages = messages.Where(m => m.Message.StartsWith("Number of cores acquired: ")).ToArray();
-            filteredMessages.Count().ShouldBe(2);
+            filteredMessages.Length.ShouldBe(2);
 
             int grantedCores1 = GetTrailingIntegerFromMessage(filteredMessages[0]);
             int grantedCores2 = GetTrailingIntegerFromMessage(filteredMessages[1]);
@@ -65,7 +67,7 @@ public void SingleCoreRequestWithReacquire()
                 }", "<UseCores />");
 
             var filteredMessages = messages.Where(m => m.Message.StartsWith("Number of cores acquired: ")).ToArray();
-            filteredMessages.Count().ShouldBe(2);
+            filteredMessages.Length.ShouldBe(2);
 
             int grantedCores1 = GetTrailingIntegerFromMessage(filteredMessages[0]);
             int grantedCores2 = GetTrailingIntegerFromMessage(filteredMessages[1]);
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index eb5225d098d..7dbf9e846f2 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -4,19 +4,131 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Reflection;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
+#if NETFRAMEWORK
+using Microsoft.IO;
+#else
+using System.IO;
+#endif
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class RoslynCodeTaskFactory_Tests
     {
         private const string TaskName = "MyInlineTask";
 
+        [Fact]
+        public void InlineTaskWithAssemblyPlatformAgnostic()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                string location = Assembly.GetExecutingAssembly().Location;
+                TransientTestFile inlineTask = env.CreateFile(folder, "5106.proj", @$"
+<Project>
+
+  <UsingTask TaskName=""MyInlineTask"" TaskFactory=""RoslynCodeTaskFactory"" AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"">
+    <Task>
+      <Reference Include=""" + Path.Combine(Path.GetDirectoryName(location), "..", "..", "..", "Samples", "Dependency",
+#if DEBUG
+      "Debug"
+#else
+      "Release"
+#endif
+      , "net472", "Dependency.dll") + @""" />
+      <Using Namespace=""Dependency"" />
+      <Code Type=""Fragment"" Language=""cs"" >
+<![CDATA[
+Log.LogError(Alpha.GetString());
+]]>
+      </Code>
+    </Task>
+  </UsingTask>
+
+<Target Name=""ToRun"">
+  <MyInlineTask/>
+</Target>
+
+</Project>
+");
+                string output = RunnerUtilities.ExecMSBuild(inlineTask.Path, out bool success);
+                success.ShouldBeTrue(output);
+                output.ShouldContain("Alpha.GetString");
+            }
+        }
+
+        [Fact]
+        [SkipOnPlatform(TestPlatforms.AnyUnix, ".NETFramework 4.0 isn't on unix machines.")]
+        public void InlineTaskWithAssembly()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                TransientTestFile assemblyProj = env.CreateFile(folder, "5106.csproj", @$"
+                    <Project DefaultTargets=""Build"">
+                        <PropertyGroup>
+                            <TargetFrameworkVersion>{MSBuildConstants.StandardTestTargetFrameworkVersion}</TargetFrameworkVersion>
+                            <OutputType>Library</OutputType>
+                        </PropertyGroup>
+                        <ItemGroup>
+                            <Reference Include=""System""/>
+                            <Compile Include=""Class1.cs""/>
+                        </ItemGroup>
+                        <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
+                    </Project>
+");
+                TransientTestFile csFile = env.CreateFile(folder, "Class1.cs", @"
+using System;
+
+namespace _5106 {
+    public class Class1 {
+        public static string ToPrint() {
+            return ""Hello!"";
+        }
+    }
+}
+");
+                string output = RunnerUtilities.ExecMSBuild(assemblyProj.Path + $" /p:OutDir={Path.Combine(folder.Path, "subFolder")} /restore", out bool success);
+                success.ShouldBeTrue(output);
+
+                TransientTestFile inlineTask = env.CreateFile(folder, "5106.proj", @$"
+<Project>
+
+  <UsingTask TaskName=""MyInlineTask"" TaskFactory=""RoslynCodeTaskFactory"" AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"">
+    <Task>
+      <Reference Include=""{Path.Combine(folder.Path, "subFolder", "5106.dll")}"" />
+      <Reference Include=""netstandard"" />
+      <Using Namespace=""_5106"" />
+      <Code Type=""Fragment"" Language=""cs"" >
+<![CDATA[
+Log.LogError(Class1.ToPrint());
+]]>
+      </Code>
+    </Task>
+  </UsingTask>
+
+<Target Name=""ToRun"">
+  <MyInlineTask/>
+</Target>
+
+</Project>
+");
+                output = RunnerUtilities.ExecMSBuild(inlineTask.Path, out success);
+                success.ShouldBeTrue();
+                output.ShouldContain("Hello!");
+            }
+        }
+
         [Fact]
         public void RoslynCodeTaskFactory_ReuseCompilation()
         {
@@ -85,7 +197,7 @@ public void RoslynCodeTaskFactory_ReuseCompilation()
 
             // with broken cache we get two Compiling messages
             // as we fail to reuse the first assembly
-            messages.Count().ShouldBe(1);
+            messages.Length.ShouldBe(1);
         }
 
         [Fact]
@@ -94,8 +206,12 @@ public void VisualBasicFragment()
             const string fragment = "Dim x = 0";
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
-'     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
+'     This code was generated by a tool." +
+#if NETFRAMEWORK
+@"
+'     Runtime Version:4.0.30319.42000" +
+#endif
+@$"
 '
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
@@ -162,8 +278,12 @@ public void VisualBasicFragmentWithProperties()
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
 '     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
-'
+" +
+#if NETFRAMEWORK
+@"'     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"'
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
 ' </auto-generated>
@@ -279,8 +399,12 @@ Return True
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
 '     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
-'
+" +
+#if NETFRAMEWORK
+@"'     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"'
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
 ' </auto-generated>
@@ -351,8 +475,12 @@ public void CSharpFragment()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+$@"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -409,8 +537,12 @@ public void CSharpFragmentWithProperties()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+$@"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -518,8 +650,12 @@ public void CSharpMethod()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -755,7 +891,6 @@ private void TryLoadTaskBodyAndExpectSuccess(
             IReadOnlyList<string> expectedWarningMessages = null)
         {
             MockEngine buildEngine = new MockEngine();
-            
 
             TaskLoggingHelper log = new TaskLoggingHelper(buildEngine, TaskName)
             {
diff --git a/src/Tasks.UnitTests/SGen_Tests.cs b/src/Tasks.UnitTests/SGen_Tests.cs
index 0d8ed3160f0..22c5a5ea821 100644
--- a/src/Tasks.UnitTests/SGen_Tests.cs
+++ b/src/Tasks.UnitTests/SGen_Tests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class SGen_Tests
@@ -250,7 +252,7 @@ public void TestEmptyReferences()
             sgen.ShouldGenerateSerializer = true;
             sgen.UseProxyTypes = false;
             sgen.UseKeep = false;
-            sgen.References = new string[]{ };
+            sgen.References = Array.Empty<string>();
 
             string commandLine = sgen.CommandLine();
 
diff --git a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
index 4c5356142f2..454e37ac408 100644
--- a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
+++ b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class SdkToolsPathUtility_Tests
diff --git a/src/Tasks.UnitTests/StreamHelpers.cs b/src/Tasks.UnitTests/StreamHelpers.cs
index e0469e16184..adcafcd19a7 100644
--- a/src/Tasks.UnitTests/StreamHelpers.cs
+++ b/src/Tasks.UnitTests/StreamHelpers.cs
@@ -3,6 +3,8 @@
 
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed internal class StreamHelpers
diff --git a/src/Tasks.UnitTests/StreamMappedString_Tests.cs b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
index b0a3c35c662..544c7eed446 100644
--- a/src/Tasks.UnitTests/StreamMappedString_Tests.cs
+++ b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared.LanguageParser;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class StreamMappedString_Tests
@@ -337,8 +339,3 @@ public override void Write(byte[] buffer, int offset, int count)
         }
     }
 }
-
-
-
-
-
diff --git a/src/Tasks.UnitTests/TelemetryTaskTests.cs b/src/Tasks.UnitTests/TelemetryTaskTests.cs
index c9d544d0e42..49acad1db73 100644
--- a/src/Tasks.UnitTests/TelemetryTaskTests.cs
+++ b/src/Tasks.UnitTests/TelemetryTaskTests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.UnitTests;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public sealed class TelemetryTaskTests
diff --git a/src/Tasks.UnitTests/TestResources/TestBinary.cs b/src/Tasks.UnitTests/TestResources/TestBinary.cs
index bd768f8e8ab..51a5008f431 100644
--- a/src/Tasks.UnitTests/TestResources/TestBinary.cs
+++ b/src/Tasks.UnitTests/TestResources/TestBinary.cs
@@ -6,6 +6,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests.TestResources
 {
     public class TestBinary : IXunitSerializable
diff --git a/src/Tasks.UnitTests/TlbImp_Tests.cs b/src/Tasks.UnitTests/TlbImp_Tests.cs
index 92ad2f58b80..83a624554c6 100644
--- a/src/Tasks.UnitTests/TlbImp_Tests.cs
+++ b/src/Tasks.UnitTests/TlbImp_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
     sealed public class TlbImp_Tests
diff --git a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
index 40644c9b2d9..569f290286d 100644
--- a/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
+++ b/src/Tasks.UnitTests/ToolTaskExtension_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ToolTaskExtensionTests
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index df6124e73f8..5ebc57b915e 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Utilities;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class Touch_Tests
@@ -337,6 +339,3 @@ public void TouchNonExistingDirectoryDoesntExist()
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index 8b48e6ccaf8..c954e8d3415 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -11,6 +11,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class Unzip_Tests
diff --git a/src/Tasks.UnitTests/VerifyFileHash_Tests.cs b/src/Tasks.UnitTests/VerifyFileHash_Tests.cs
index 69f7f2d5e87..7000862a422 100644
--- a/src/Tasks.UnitTests/VerifyFileHash_Tests.cs
+++ b/src/Tasks.UnitTests/VerifyFileHash_Tests.cs
@@ -9,6 +9,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class VerifyFileHash_Tests
diff --git a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
index 86b21f27b45..8b4f52d62dc 100644
--- a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class VisualBasicParserUtilititesTests
@@ -117,6 +119,3 @@ private static void AssertParse(string source, string expectedClassName)
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
index 238556c4cdb..61d39ccfee6 100644
--- a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Shared.LanguageParser;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class VisualBasicTokenizer_Tests
@@ -300,6 +302,3 @@ int expectedLastLineNumber
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/WinMDExp_Tests.cs b/src/Tasks.UnitTests/WinMDExp_Tests.cs
index dbbe15cb777..437c7704471 100644
--- a/src/Tasks.UnitTests/WinMDExp_Tests.cs
+++ b/src/Tasks.UnitTests/WinMDExp_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class WinMDExpTests
@@ -141,8 +143,3 @@ public void ArgumentsAreUnquoted()
         }
     }
 }
-
-
-
-
-
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index b389d8c784c..b1cf9ff948b 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -11,6 +11,8 @@
 using System.Runtime.InteropServices;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
@@ -135,7 +137,7 @@ public void NoAttributesShouldEmitNoFile()
             MockEngine engine = new MockEngine(true);
             task.BuildEngine = engine;
             task.Language = "c#";
-            task.AssemblyAttributes = new TaskItem[] { }; // MSBuild sets an empty array
+            task.AssemblyAttributes = Array.Empty<TaskItem>(); // MSBuild sets an empty array
             task.OutputFile = new TaskItem(file);
             bool result = task.Execute();
 
@@ -482,8 +484,8 @@ public void MultilineAttributeCSharp()
             File.Delete(task.OutputFile.ItemSpec);
         }
 
-        private static readonly string VBCarriageReturn = "Global.Microsoft.VisualBasic.ChrW(13)";
-        private static readonly string VBLineFeed = "Global.Microsoft.VisualBasic.ChrW(10)";
+        private const string VBCarriageReturn = "Global.Microsoft.VisualBasic.ChrW(13)";
+        private const string VBLineFeed = "Global.Microsoft.VisualBasic.ChrW(10)";
 
         public static readonly string VBLineSeparator = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? $"{VBCarriageReturn}&{VBLineFeed}" : VBLineFeed;
 
@@ -1062,7 +1064,6 @@ private void ExecuteAndVerifyFailure(WriteCodeFragment task, string errorCode)
                 Assert.False(result, engine.Log);
 
                 engine.AssertLogContains(errorCode);
-
             }
             finally
             {
@@ -1110,6 +1111,3 @@ private static void CheckContent(string actualContent, string[] expectedAttribut
         }
     }
 }
-
-
-
diff --git a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
index bb96a257fe6..1d2e9bdd942 100644
--- a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
+++ b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
@@ -8,6 +8,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public sealed class WriteLinesToFile_Tests
diff --git a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
index 3db0accefe3..80b0140226a 100644
--- a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
+++ b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.XamlDataDrivenToolTask_Tests
 {
     /// <summary>
@@ -87,7 +89,7 @@ public void TestDynamicEnum()
         }
 
         /// <summary>
-        /// Tests the basic string array type 
+        /// Tests the basic string array type
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -102,7 +104,7 @@ public void TestBasicStringArray()
         }
 
         /// <summary>
-        /// Tests the basic string array type, with an array that contains multiple values. 
+        /// Tests the basic string array type, with an array that contains multiple values.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
@@ -224,9 +226,9 @@ private void CheckCommandLine(string expected, string actual)
         }
 
         /// <summary>
-        /// XamlTaskFactory does not, in and of itself, support the idea of "always" switches or default values.  At least 
-        /// for Dev10, the workaround is to create a property as usual, and then specify the required values in the .props 
-        /// file.  Since these unit tests are just testing the task itself, this method serves as our ".props file".  
+        /// XamlTaskFactory does not, in and of itself, support the idea of "always" switches or default values.  At least
+        /// for Dev10, the workaround is to create a property as usual, and then specify the required values in the .props
+        /// file.  Since these unit tests are just testing the task itself, this method serves as our ".props file".
         /// </summary>
         public object CreateFakeTask()
         {
@@ -240,19 +242,19 @@ public object CreateFakeTask()
     }
 
     /// <summary>
-    /// Tests for XamlDataDrivenToolTask / XamlTaskFactory in the context of a project file.  
+    /// Tests for XamlDataDrivenToolTask / XamlTaskFactory in the context of a project file.
     /// </summary>
     public class ProjectFileTests
     {
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
@@ -299,14 +301,14 @@ public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
 
 
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void CommandLineErrorsReportFullCommandline()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
@@ -336,14 +338,14 @@ public void CommandLineErrorsReportFullCommandline()
         }
 
         /// <summary>
-        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message. 
+        /// Tests that when a call to a XamlDataDrivenTask fails, the commandline is reported in the error message.
         /// </summary>
         [Fact]
         [Trait("Category", "mono-osx-failing")]
         public void SquareBracketEscaping()
         {
             string projectFile = @"
-                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>
+                      <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
                         <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
diff --git a/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs b/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
index 981b8fb02e3..17d45366bca 100644
--- a/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/XamlTaskFactory_Tests.cs
@@ -16,6 +16,8 @@
 using Xunit;
 using Shouldly;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.XamlTaskFactory_Tests
 {
     #region Tests for Load and Parse methods
@@ -354,7 +356,7 @@ public void TestLoadAndParseFromAbsoluteFilePath()
             finally
             {
                 // This throws because the file is still in use!
-                //if (File.Exists(tmpXamlFile))
+                // if (File.Exists(tmpXamlFile))
                 //    File.Delete(tmpXamlFile);
             }
         }
diff --git a/src/Tasks.UnitTests/XamlTestHelpers.cs b/src/Tasks.UnitTests/XamlTestHelpers.cs
index 0894fa94160..c5174dd8d6d 100644
--- a/src/Tasks.UnitTests/XamlTestHelpers.cs
+++ b/src/Tasks.UnitTests/XamlTestHelpers.cs
@@ -14,6 +14,8 @@
 using Microsoft.Build.Evaluation;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     internal static class XamlTestHelpers
@@ -230,7 +232,7 @@ public static string GenerateCommandLine(object task)
             try
             {
                 return (string)task.GetType().InvokeMember("GetCommandLine_ForUnitTestsOnly", BindingFlags.Public | BindingFlags.NonPublic |
-                                    BindingFlags.Instance | BindingFlags.InvokeMethod, null, task, new object[] { });
+                                    BindingFlags.Instance | BindingFlags.InvokeMethod, null, task, Array.Empty<object>());
             }
             catch (TargetInvocationException e)
             {
diff --git a/src/Tasks.UnitTests/XmlPeek_Tests.cs b/src/Tasks.UnitTests/XmlPeek_Tests.cs
index 1aec24c15b7..6bb0e046a8f 100644
--- a/src/Tasks.UnitTests/XmlPeek_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPeek_Tests.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class XmlPeek_Tests
@@ -34,7 +36,7 @@ sealed public class XmlPeek_Tests
 ";
 
         private string _xmlFileNoNsNoDtd = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test'>
   <variable Type='String' Name='a'></variable>
   <variable Type='String' Name='b'></variable>
@@ -301,7 +303,7 @@ public void MissingNamespaceParameters()
         public void PeekWithoutUsingTask()
         {
             string projectContents = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
   <Target Name='x'>
     <XmlPeek Query='abc' ContinueOnError='true' />
   </Target>
diff --git a/src/Tasks.UnitTests/XmlPoke_Tests.cs b/src/Tasks.UnitTests/XmlPoke_Tests.cs
index 98b16aaacc0..05e3f05860c 100644
--- a/src/Tasks.UnitTests/XmlPoke_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPoke_Tests.cs
@@ -11,6 +11,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     sealed public class XmlPoke_Tests
@@ -18,7 +20,7 @@ sealed public class XmlPoke_Tests
         private const string XmlNamespaceUsedByTests = "http://nsurl";
 
         private const string _xmlFileWithNs = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test' xmlns:s='" + XmlNamespaceUsedByTests + @"'>
   <s:variable Type='String' Name='a'></s:variable>
   <s:variable Type='String' Name='b'></s:variable>
@@ -27,7 +29,7 @@ sealed public class XmlPoke_Tests
 </class>";
 
         private const string _xmlFileNoNs = @"<?xml version='1.0' encoding='utf-8'?>
-        
+
 <class AccessModifier='public' Name='test'>
   <variable Type='String' Name='a'></variable>
   <variable Type='String' Name='b'></variable>
@@ -271,16 +273,16 @@ public void PokeElement()
         public void PokeWithoutUsingTask()
         {
             string projectContents = @"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
+<Project ToolsVersion='msbuilddefaulttoolsversion'>
   <Target Name='x'>
     <XmlPoke Value='abc' Query='def' XmlInputPath='ghi.jkl' ContinueOnError='true' />
   </Target>
 </Project>";
 
-            // The task will error, but ContinueOnError means that it will just be a warning.  
+            // The task will error, but ContinueOnError means that it will just be a warning.
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents);
 
-            // Verify that the task was indeed found. 
+            // Verify that the task was indeed found.
             logger.AssertLogDoesntContain("MSB4036");
         }
 
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index 785bab86be5..467ebc482cb 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -16,6 +16,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
 #if !MONO
@@ -863,25 +865,25 @@ public void CompiledDllWithTwoTypes()
 
             CompileDoubleType(doubleTypePath);
 
+            XslTransformation t = new()
             {
-                XslTransformation t = new XslTransformation();
-                t.BuildEngine = engine;
-                t.OutputPaths = outputPaths;
-                t.XmlContent = _xmlDocument;
-                t.XslCompiledDllPath = new TaskItem(doubleTypePath);
-                try
-                {
-                    t.Execute();
-                    Console.WriteLine(engine.Log);
-                }
-                catch (Exception e)
-                {
-                    Assert.Contains("error?", e.Message);
-                }
-
-                System.Diagnostics.Debug.WriteLine(engine.Log);
+                BuildEngine = engine,
+                OutputPaths = outputPaths,
+                XmlContent = _xmlDocument,
+                XslCompiledDllPath = new TaskItem(doubleTypePath),
+            };
+            try
+            {
+                t.Execute();
+                Console.WriteLine(engine.Log);
+            }
+            catch (Exception e)
+            {
+                Assert.Contains("error?", e.Message);
             }
 
+            System.Diagnostics.Debug.WriteLine(engine.Log);
+
             CleanUp(dir);
         }
 #endif
@@ -910,7 +912,6 @@ public void MultipleXmlInputs_Matching()
             // outputPaths have one output path, lets duplicate it
             TaskItem[] outputMultiPaths = new TaskItem[] { new TaskItem(outputPaths[0].ItemSpec + ".1.xml"),
                 new TaskItem(outputPaths[0].ItemSpec + ".2.xml"), new TaskItem(outputPaths[0].ItemSpec + ".3.xml"), new TaskItem(outputPaths[0].ItemSpec + ".4.xml") };
-
             {
                 XslTransformation t = new XslTransformation();
                 t.BuildEngine = engine;
@@ -1141,7 +1142,7 @@ private void Compile(string inputFile, string outputFile)
 
             // Add custom attribute to assembly marking it as security transparent so that Assert will not be allowed
             // and link demands will be converted to full demands.
-            asmBldr.SetCustomAttribute(new CustomAttributeBuilder(typeof(System.Security.SecurityTransparentAttribute).GetConstructor(Type.EmptyTypes), new object[] { }));
+            asmBldr.SetCustomAttribute(new CustomAttributeBuilder(typeof(System.Security.SecurityTransparentAttribute).GetConstructor(Type.EmptyTypes), Array.Empty<object>()));
 
             // Mark the assembly with GeneratedCodeAttribute to improve profiling experience
             asmBldr.SetCustomAttribute(new CustomAttributeBuilder(typeof(GeneratedCodeAttribute).GetConstructor(new Type[] { typeof(string), typeof(string) }), new object[] { "XsltCompiler", "2.0.0.0" }));
diff --git a/src/Tasks.UnitTests/ZipDirectory_Tests.cs b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
index 7f42799df38..31b4d547332 100644
--- a/src/Tasks.UnitTests/ZipDirectory_Tests.cs
+++ b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
@@ -11,6 +11,8 @@
 using System.Linq;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.UnitTests
 {
     public class ZipDirectory_Tests
diff --git a/src/Tasks/Al.cs b/src/Tasks/Al.cs
index eaa1b3bfb89..9ff2c53b1a6 100644
--- a/src/Tasks/Al.cs
+++ b/src/Tasks/Al.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AppConfig/AppConfig.cs b/src/Tasks/AppConfig/AppConfig.cs
index c6e9ad4f98f..3fed4aab5cd 100644
--- a/src/Tasks/AppConfig/AppConfig.cs
+++ b/src/Tasks/AppConfig/AppConfig.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AppConfig/AppConfigException.cs b/src/Tasks/AppConfig/AppConfigException.cs
index 5d6b76ebf8c..c58ee3011ed 100644
--- a/src/Tasks/AppConfig/AppConfigException.cs
+++ b/src/Tasks/AppConfig/AppConfigException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AppConfig/BindingRedirect.cs b/src/Tasks/AppConfig/BindingRedirect.cs
index 8a226ede9c5..9788fdf513f 100644
--- a/src/Tasks/AppConfig/BindingRedirect.cs
+++ b/src/Tasks/AppConfig/BindingRedirect.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -54,13 +56,8 @@ internal void Read(XmlReader reader)
                     OldVersionHigh = new Version(oldVersion);
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 ErrorUtilities.ThrowArgument(e, "AppConfig.InvalidOldVersionAttribute", e.Message);
             }
 
@@ -73,13 +70,8 @@ internal void Read(XmlReader reader)
             {
                 NewVersion = new Version(newVersionAttribute);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 ErrorUtilities.ThrowArgument(e, "AppConfig.InvalidNewVersionAttribute", e.Message);
             }
         }
diff --git a/src/Tasks/AppConfig/DependentAssembly.cs b/src/Tasks/AppConfig/DependentAssembly.cs
index 2bbbc37e39a..07a58ffc375 100644
--- a/src/Tasks/AppConfig/DependentAssembly.cs
+++ b/src/Tasks/AppConfig/DependentAssembly.cs
@@ -8,6 +8,8 @@
 using System.Globalization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AppConfig/RuntimeSection.cs b/src/Tasks/AppConfig/RuntimeSection.cs
index 0d1e480300f..1ce5dda8ada 100644
--- a/src/Tasks/AppConfig/RuntimeSection.cs
+++ b/src/Tasks/AppConfig/RuntimeSection.cs
@@ -4,6 +4,8 @@
 using System.Xml;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AppDomainIsolatedTaskExtension.cs b/src/Tasks/AppDomainIsolatedTaskExtension.cs
index e3ec313363e..94382a8b002 100644
--- a/src/Tasks/AppDomainIsolatedTaskExtension.cs
+++ b/src/Tasks/AppDomainIsolatedTaskExtension.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AspNetCompiler.cs b/src/Tasks/AspNetCompiler.cs
index b054a5e7db6..855bd8b7790 100644
--- a/src/Tasks/AspNetCompiler.cs
+++ b/src/Tasks/AspNetCompiler.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
index ab6b685ba91..af687d163b0 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersExResolver.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Utilities;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigCache.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigCache.cs
index 48ab0527f2a..1cc90184eac 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigCache.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigCache.cs
@@ -4,6 +4,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.AssemblyFoldersFromConfig
 {
     /// <summary>
@@ -64,4 +66,4 @@ internal bool FileExists(string path)
             return _useOriginalFileExists ? _fileExists(path) : _filesInDirectories.Contains(path);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
index e6e2a2bcb80..a5a8fe5a9f8 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersFromConfig/AssemblyFoldersFromConfigResolver.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Utilities;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.AssemblyFoldersFromConfig
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
index 82fbcc95204..53f7f0cfcd5 100644
--- a/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyFoldersResolver.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 171e223a5d7..5e5f39a1656 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -6,8 +6,10 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+#if !FEATURE_ASSEMBLYLOADCONTEXT
 using System.Linq;
 using System.Runtime.InteropServices;
+#endif
 using System.Runtime.Versioning;
 using System.Reflection;
 using System.Text;
@@ -20,6 +22,8 @@
 #endif
 using Microsoft.Build.Tasks.AssemblyDependency;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -330,12 +334,8 @@ private FrameworkName GetFrameworkName()
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
             }
 
             return frameworkAttribute;
@@ -479,7 +479,7 @@ private static AssemblyName GetAssemblyName(MetadataReader metadataReader, Assem
 // Enabling this for MONO, because it's required by GetFrameworkName.
 // More details are in the comment for that method
 #if FEATURE_ASSEMBLYLOADCONTEXT || MONO
-        //  This method copied from DNX source: https://github.com/aspnet/dnx/blob/e0726f769aead073af2d8cd9db47b89e1745d574/src/Microsoft.Dnx.Tooling/Utils/LockFileUtils.cs#L385
+        // This method copied from DNX source: https://github.com/aspnet/dnx/blob/e0726f769aead073af2d8cd9db47b89e1745d574/src/Microsoft.Dnx.Tooling/Utils/LockFileUtils.cs#L385
         //  System.Reflection.Metadata 1.1 is expected to have an API that helps with this.
         /// <summary>
         /// Gets the fixed (required) string arguments of a custom attribute.
@@ -569,30 +569,36 @@ internal static string GetRuntimeVersion(string path)
 #if FEATURE_MSCOREE
             if (NativeMethodsShared.IsWindows)
             {
-                StringBuilder runtimeVersion;
-                uint hresult;
 #if DEBUG
-                // Just to make sure and exercise the code that doubles the size
-                // every time GetRequestedRuntimeInfo fails due to insufficient buffer size.
+                // Just to make sure and exercise the code that uses dwLength to allocate the buffer
+                // when GetRequestedRuntimeInfo fails due to insufficient buffer size.
                 int bufferLength = 1;
 #else
                 int bufferLength = 11; // 11 is the length of a runtime version and null terminator v2.0.50727/0
 #endif
-                do
-                {
-                    runtimeVersion = new StringBuilder(bufferLength);
-                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out _);
-                    bufferLength *= 2;
-                } while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
-                if (hresult == NativeMethodsShared.S_OK)
-                {
-                    return runtimeVersion.ToString();
-                }
-                else
+                unsafe
                 {
-                    return String.Empty;
-                }
+                    // Allocate an initial buffer 
+                    char* runtimeVersion = stackalloc char[bufferLength];
+
+                    // Run GetFileVersion, this should succeed using the initial buffer.
+                    // It also returns the dwLength which is used if there is insufficient buffer.
+                    uint hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out int dwLength);
+
+                    if (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER)
+                    {
+                        // Allocate new buffer based on the returned length.
+                        char* runtimeVersion2 = stackalloc char[dwLength];
+                        runtimeVersion = runtimeVersion2;
+
+                        // Get the RuntimeVersion in this second call.
+                        bufferLength = dwLength;
+                        hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
+                    }
+
+                    return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
+                }                
             }
             else
             {
@@ -603,7 +609,6 @@ internal static string GetRuntimeVersion(string path)
 #endif
         }
 
-
         /// <summary>
         /// Import assembly dependencies.
         /// </summary>
@@ -790,7 +795,7 @@ private static AssemblyNameExtension ConstructAssemblyName(IntPtr asmMetaPtr, ch
             // Construct the assembly name. (Note asmNameLength should/must be > 0.)
             var assemblyName = new AssemblyName
             {
-                Name = new string(asmNameBuf, 0, (int) asmNameLength - 1),
+                Name = new string(asmNameBuf, 0, (int)asmNameLength - 1),
                 Version = new Version(
                     asmMeta.usMajorVersion,
                     asmMeta.usMinorVersion,
@@ -911,7 +916,7 @@ public static string GetRuntimeVersion(string path)
                     // Read the PE header signature
 
                     sr.BaseStream.Position = peHeaderOffset;
-                    if (!ReadBytes(sr, (byte) 'P', (byte) 'E', 0, 0))
+                    if (!ReadBytes(sr, (byte)'P', (byte)'E', 0, 0))
                     {
                         return string.Empty;
                     }
diff --git a/src/Tasks/AssemblyDependency/AssemblyMetadata.cs b/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
index db0c43e73f2..7144c1d80d9 100644
--- a/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyMetadata.cs
@@ -4,6 +4,8 @@
 using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.AssemblyDependency
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyNameReference.cs b/src/Tasks/AssemblyDependency/AssemblyNameReference.cs
index 40f179a5380..bbb0004ecd3 100644
--- a/src/Tasks/AssemblyDependency/AssemblyNameReference.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyNameReference.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyNameReferenceAscendingVersionComparer.cs b/src/Tasks/AssemblyDependency/AssemblyNameReferenceAscendingVersionComparer.cs
index 7e5c2f2d01c..fd6fe842ce8 100644
--- a/src/Tasks/AssemblyDependency/AssemblyNameReferenceAscendingVersionComparer.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyNameReferenceAscendingVersionComparer.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyResolution.cs b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
index f2fe396824f..178c57101a5 100644
--- a/src/Tasks/AssemblyDependency/AssemblyResolution.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyResolution.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/AssemblyResolutionConstants.cs b/src/Tasks/AssemblyDependency/AssemblyResolutionConstants.cs
index f59f6714724..2f38c3b83f6 100644
--- a/src/Tasks/AssemblyDependency/AssemblyResolutionConstants.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyResolutionConstants.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/BadImageReferenceException.cs b/src/Tasks/AssemblyDependency/BadImageReferenceException.cs
index ab7ebd3a456..a93ae6fb390 100644
--- a/src/Tasks/AssemblyDependency/BadImageReferenceException.cs
+++ b/src/Tasks/AssemblyDependency/BadImageReferenceException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
index 23ccac23cb2..35c170ed419 100644
--- a/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
+++ b/src/Tasks/AssemblyDependency/CandidateAssemblyFilesResolver.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/ConflictLossReason.cs b/src/Tasks/AssemblyDependency/ConflictLossReason.cs
index 2a5f99c478e..4ef779f4554 100644
--- a/src/Tasks/AssemblyDependency/ConflictLossReason.cs
+++ b/src/Tasks/AssemblyDependency/ConflictLossReason.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/CopyLocalState.cs b/src/Tasks/AssemblyDependency/CopyLocalState.cs
index 882be85d3e8..e6f506668e7 100644
--- a/src/Tasks/AssemblyDependency/CopyLocalState.cs
+++ b/src/Tasks/AssemblyDependency/CopyLocalState.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/DependencyResolutionException.cs b/src/Tasks/AssemblyDependency/DependencyResolutionException.cs
index 26692718ced..1266dceb45f 100644
--- a/src/Tasks/AssemblyDependency/DependencyResolutionException.cs
+++ b/src/Tasks/AssemblyDependency/DependencyResolutionException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/DirectoryResolver.cs b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
index 8f7be0e76ac..ccfcde1e11b 100644
--- a/src/Tasks/AssemblyDependency/DirectoryResolver.cs
+++ b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/DisposableBase.cs b/src/Tasks/AssemblyDependency/DisposableBase.cs
index f1e7a08dac7..1cdac14aec1 100644
--- a/src/Tasks/AssemblyDependency/DisposableBase.cs
+++ b/src/Tasks/AssemblyDependency/DisposableBase.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     //
diff --git a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
index bfee4b6dc71..6312220d3f2 100644
--- a/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/FrameworkPathResolver.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/GacResolver.cs b/src/Tasks/AssemblyDependency/GacResolver.cs
index 16342d58a31..40b3c26eadc 100644
--- a/src/Tasks/AssemblyDependency/GacResolver.cs
+++ b/src/Tasks/AssemblyDependency/GacResolver.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index f24bb0cff16..41007129e72 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -11,6 +11,8 @@
 using System.Reflection;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -103,12 +105,12 @@ public override bool Execute()
 
             var writeOutput = true;
 
-            if(FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
+            if (FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
             {
                 try
                 {
                     var outputDoc = LoadAppConfig(OutputAppConfigFile);
-                    if(outputDoc.ToString() == doc.ToString())
+                    if (outputDoc.ToString() == doc.ToString())
                     {
                         writeOutput = false;
                     }
@@ -128,7 +130,7 @@ public override bool Execute()
                 OutputAppConfigFile.SetMetadata(ItemMetadataNames.targetPath, TargetName);
             }
 
-            if(writeOutput)
+            if (writeOutput)
             {
                 using (var stream = FileUtilities.OpenWrite(OutputAppConfigFile.ItemSpec, false))
                 {
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index 147a65313eb..afeaeb68a3e 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.IO;
-using System.Text;
 using System.Runtime.InteropServices;
 using Microsoft.Build.Shared;
 using System.Collections.Generic;
@@ -11,6 +10,9 @@
 using System.Reflection;
 using Microsoft.Build.Framework;
 using System.Collections.Concurrent;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
@@ -29,6 +31,16 @@ internal static class GlobalAssemblyCache
         /// </summary>
         internal static readonly GetGacEnumerator gacEnumerator = GetGacNativeEnumerator;
 
+        /// <summary>
+        /// Lazy loaded cached root path of the GAC.
+        /// </summary>
+        private static readonly Lazy<string> _gacPath = new(() => GetGacPath());
+
+        /// <summary>
+        /// Gets the root path of the GAC.
+        /// </summary>
+        internal static string GacPath => _gacPath.Value;
+
         /// <summary>
         /// Given a strong name, find its path in the GAC.
         /// </summary>
@@ -85,6 +97,7 @@ private static string GetLocationImpl(AssemblyNameExtension assemblyName, string
         /// <summary>
         /// Given a strong name generate the gac enumerator.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         internal static IEnumerable<AssemblyNameExtension> GetGacNativeEnumerator(string strongName)
         {
             try
@@ -365,16 +378,18 @@ bool specificVersion
         }
 
         /// <summary>
-        /// Return the root path of the GAC
+        /// Return the root path of the GAC.
         /// </summary>
         internal static string GetGacPath()
         {
             int gacPathLength = 0;
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
-            StringBuilder gacPath = new StringBuilder(gacPathLength);
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
-
-            return gacPath.ToString();
+            unsafe
+            {
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
+                char* gacPath = stackalloc char[gacPathLength];
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
+                return new string(gacPath, 0, gacPathLength - 1);
+            }
         }
     }
 }
diff --git a/src/Tasks/AssemblyDependency/HintPathResolver.cs b/src/Tasks/AssemblyDependency/HintPathResolver.cs
index ed94162e576..381e7d3d60e 100644
--- a/src/Tasks/AssemblyDependency/HintPathResolver.cs
+++ b/src/Tasks/AssemblyDependency/HintPathResolver.cs
@@ -6,6 +6,8 @@
 using System.Reflection;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/InstalledAssemblies.cs b/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
index 83d49173b71..cf35873ca38 100644
--- a/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
+++ b/src/Tasks/AssemblyDependency/InstalledAssemblies.cs
@@ -6,6 +6,8 @@
 using System.Linq;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/InvalidReferenceAssemblyNameException.cs b/src/Tasks/AssemblyDependency/InvalidReferenceAssemblyNameException.cs
index e4151f82e01..297d8b6a386 100644
--- a/src/Tasks/AssemblyDependency/InvalidReferenceAssemblyNameException.cs
+++ b/src/Tasks/AssemblyDependency/InvalidReferenceAssemblyNameException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/NoMatchReason.cs b/src/Tasks/AssemblyDependency/NoMatchReason.cs
index 27ad0d285ff..cf31797ebba 100644
--- a/src/Tasks/AssemblyDependency/NoMatchReason.cs
+++ b/src/Tasks/AssemblyDependency/NoMatchReason.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
index b75ef96a73b..8b7a26432e2 100644
--- a/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
+++ b/src/Tasks/AssemblyDependency/RawFilenameResolver.cs
@@ -6,6 +6,8 @@
 using System.Reflection;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index c6b179e69ad..db5d30bda9d 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -111,7 +113,7 @@ sealed internal class Reference
         private bool _isManagedWinMDFile;
 
         /// <summary>
-        /// The imageruntime version for this reference. 
+        /// The imageruntime version for this reference.
         /// </summary>
         private string _imageRuntimeVersion;
 
@@ -356,7 +358,7 @@ internal bool ResolvedFromGac
 
         /// <summary>
         /// Determines if a given reference or its parent primary references have specific version metadata set to true.
-        /// If anyParentHasMetadata is set to true then we will return true if any parent primary reference has the specific version metadata set to true, 
+        /// If anyParentHasMetadata is set to true then we will return true if any parent primary reference has the specific version metadata set to true,
         /// if the value is false we will return true ONLY if all parent primary references have the metadata set to true.
         /// </summary>
         internal bool CheckForSpecificVersionMetadataOnParentsReference(bool anyParentHasMetadata)
@@ -371,7 +373,7 @@ internal bool CheckForSpecificVersionMetadataOnParentsReference(bool anyParentHa
             }
             else
             {
-                // Go through all of the primary items which lead to this dependency, if they all have specificVersion set to true then 
+                // Go through all of the primary items which lead to this dependency, if they all have specificVersion set to true then
                 // hasSpecificVersionMetadata will be true. If any item has the metadata set to false or not set then the value will be false.
                 foreach (ITaskItem item in GetSourceItems())
                 {
@@ -482,7 +484,11 @@ internal List<string> GetSerializationAssemblyFiles()
         /// <value>The full path to this assembly.</value>
         internal string FullPath
         {
-            get { return _fullPath; }
+            get
+            {
+                return _fullPath;
+            }
+
             set
             {
                 if (_fullPath != value)
@@ -583,7 +589,7 @@ internal string FullPathWithoutExtension
         internal string AssemblyFolderKey { get; set; } = String.Empty;
 
         /// <summary>
-        /// Whether this assembly came from the project. If 'false' then this reference was deduced 
+        /// Whether this assembly came from the project. If 'false' then this reference was deduced
         /// through the reference resolution process.
         /// </summary>
         /// <value>'true' if this reference is a primary assembly.</value>
@@ -623,7 +629,7 @@ internal ITaskItem PrimarySourceItem
 
         /// <summary>
         /// If 'true' then the path that this item points to is known to be a bad image.
-        /// This item shouldn't be passed to compilers and so forth. 
+        /// This item shouldn't be passed to compilers and so forth.
         /// </summary>
         /// <value>'true' if this reference points to a bad image.</value>
         internal bool IsBadImage { get; private set; } = false;
@@ -715,7 +721,7 @@ internal HashSet<AssemblyRemapping> RemappedAssemblyNames()
         }
 
         /// <summary>
-        /// Add a new version number for a version of this reference 
+        /// Add a new version number for a version of this reference
         /// </summary>
         internal void AddPreUnificationVersion(String referencePath, Version version, UnificationReason reason)
         {
@@ -813,7 +819,7 @@ internal void AddAssembliesConsideredAndRejected(List<ResolutionSearchLocation>
         }
 
         /// <summary>
-        /// Returns a collection of strings. Each string is the full path to an assembly that was 
+        /// Returns a collection of strings. Each string is the full path to an assembly that was
         /// considered for resolution but then rejected because it wasn't a complete match.
         /// </summary>
         internal List<ResolutionSearchLocation> AssembliesConsideredAndRejected { get; private set; } = new List<ResolutionSearchLocation>();
@@ -829,7 +835,7 @@ internal void AddAssembliesConsideredAndRejected(List<ResolutionSearchLocation>
         internal FrameworkName FrameworkNameAttribute { get; set; }
 
         /// <summary>
-        /// Indicates that the reference is primary and has ExternallyResolved=true metadata to denote that 
+        /// Indicates that the reference is primary and has ExternallyResolved=true metadata to denote that
         /// it was resolved by an external system (commonly from nuget). Such a system has already provided a
         /// resolved closure as primary references and therefore we can skip the expensive closure walk.
         /// </summary>
@@ -840,7 +846,7 @@ internal void AddAssembliesConsideredAndRejected(List<ResolutionSearchLocation>
         ///
         /// For example, if 'sourceReference' is MyAssembly.dll then a dependent assembly file
         /// might be en\MyAssembly.resources.dll
-        /// 
+        ///
         /// Assembly references do not have their own dependencies, therefore they are
         /// </summary>
         /// <param name="sourceReference">The source reference that this reference will be dependent on</param>
@@ -865,7 +871,7 @@ internal void MakeDependentAssemblyReference(Reference sourceReference)
         }
 
         /// <summary>
-        /// Make this reference a primary assembly reference. 
+        /// Make this reference a primary assembly reference.
         /// This is a refrence that is an assembly and is primary.
         /// </summary>
         /// <param name="sourceItem">The source item.</param>
@@ -1121,7 +1127,7 @@ out found
                 return;
             }
 
-            //  It was resolved locally, so copy it.
+            // It was resolved locally, so copy it.
             CopyLocal = CopyLocalState.YesBecauseOfHeuristic;
         }
 
@@ -1138,7 +1144,7 @@ public override string ToString()
         }
 
         /// <summary>
-        /// There are a number of properties which are set when we generate exclusion lists and it is useful to have this information on the references so that 
+        /// There are a number of properties which are set when we generate exclusion lists and it is useful to have this information on the references so that
         /// the correct reasons can be logged for these references being in the black list.
         /// </summary>
         internal class ExclusionListProperties
diff --git a/src/Tasks/AssemblyDependency/ReferenceResolutionException.cs b/src/Tasks/AssemblyDependency/ReferenceResolutionException.cs
index 13c8424b7fe..2b9a6d24ce9 100644
--- a/src/Tasks/AssemblyDependency/ReferenceResolutionException.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceResolutionException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 3b214c55a9f..4cb1e0d2a63 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -17,6 +17,8 @@
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -1432,7 +1434,7 @@ internal void RemoveReferencesMarkedForExclusion(bool removeOnlyNoWarning, strin
                         // we want to know if any primary references have specific version set to true.
                         bool hasSpecificVersionTrue = assemblyReference.CheckForSpecificVersionMetadataOnParentsReference(true);
 
-                        //A dependency is "good" if it is not in the black list or any of its parents have specific version set to true
+                        // A dependency is "good" if it is not in the black list or any of its parents have specific version set to true
                         if (!isMarkedForExclusion || hasSpecificVersionTrue)
                         {
                             // Do not add the reference to the good list if it has been added to the removed references list, possibly because of us processing another reference.
@@ -2287,7 +2289,7 @@ private static bool AreAssembliesEquivalent(
             return false;
         }
 
-        //  Based on coreclr baseassemblyspec.cpp (https://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/vm/baseassemblyspec.cpp#L330)
+        // Based on coreclr baseassemblyspec.cpp (https://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/vm/baseassemblyspec.cpp#L330)
         private static bool RefMatchesDef(AssemblyName @ref, AssemblyName def)
         {
             if (IsStrongNamed(@ref))
@@ -2307,7 +2309,7 @@ private static bool IsStrongNamed(AssemblyName assembly)
             return refPkt != null && refPkt.Length != 0;
         }
 
-        //  Based on https://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/vm/baseassemblyspec.cpp#L241
+        // Based on https://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/vm/baseassemblyspec.cpp#L241
         private static bool CompareRefToDef(AssemblyName @ref, AssemblyName def)
         {
             if (!@ref.Name.Equals(def.Name, StringComparison.OrdinalIgnoreCase))
@@ -2380,7 +2382,7 @@ private static int ResolveAssemblyNameConflict(AssemblyNameReference assemblyRef
                 string leftConflictFusionName = assemblyReference0.assemblyName.FullName;
                 string rightConflictFusionName = assemblyReference1.assemblyName.FullName;
 
-                //  If both assemblies being compared are primary references, the caller should pass in a zero-flag 
+                // If both assemblies being compared are primary references, the caller should pass in a zero-flag 
                 // (non-unified) for both. (This conforms to the C# assumption that two direct references are meant to be 
                 // SxS.)
                 bool isNonUnified = leftConflictReference.IsPrimary && rightConflictReference.IsPrimary;
@@ -2983,13 +2985,8 @@ private bool VerifyArchitectureOfImplementationDll(string dllPath, string winmdF
 
                 return true;
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 _log.LogErrorWithCodeFromResources("ResolveAssemblyReference.ProblemReadingImplementationDll", dllPath, e.Message);
                 return false;
             }
diff --git a/src/Tasks/AssemblyDependency/ResolutionSearchLocation.cs b/src/Tasks/AssemblyDependency/ResolutionSearchLocation.cs
index 591ddee0c3e..31a62ba6e88 100644
--- a/src/Tasks/AssemblyDependency/ResolutionSearchLocation.cs
+++ b/src/Tasks/AssemblyDependency/ResolutionSearchLocation.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 5cb27a7ab28..706749d4953 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -21,6 +21,8 @@
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -320,7 +322,11 @@ public bool IgnoreTargetFrameworkAttributeVersionMismatch
         /// </summary>
         public string[] TargetFrameworkSubsets
         {
-            get { return _targetFrameworkSubsets; }
+            get
+            {
+                return _targetFrameworkSubsets;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "TargetFrameworkSubsets");
@@ -448,7 +454,11 @@ public ITaskItem[] InstalledAssemblyTables
         /// </summary>
         public ITaskItem[] InstalledAssemblySubsetTables
         {
-            get { return _installedAssemblySubsetTables; }
+            get
+            {
+                return _installedAssemblySubsetTables;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "InstalledAssemblySubsetTables");
@@ -475,7 +485,11 @@ public ITaskItem[] InstalledAssemblySubsetTables
         /// </summary>
         public ITaskItem[] FullFrameworkAssemblyTables
         {
-            get { return _fullFrameworkAssemblyTables; }
+            get
+            {
+                return _fullFrameworkAssemblyTables;
+            }
+
             set
             {
                 ErrorUtilities.VerifyThrowArgumentNull(value, "FullFrameworkAssemblyTables");
@@ -1047,7 +1061,7 @@ List<Exception> generalResolutionExceptions
             {
                 /*
                 PERF NOTE: The Silent flag turns off logging completely from the task side. This means
-                we avoid the String.Formats that would normally occur even if the verbosity was set to 
+                we avoid the String.Formats that would normally occur even if the verbosity was set to
                 quiet at the engine level.
                 */
                 if (!Silent)
@@ -1105,7 +1119,7 @@ quiet at the engine level.
                             string details = string.Empty;
                             if (logWarning)
                             {
-                                // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference	
+                                // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference
                                 // chosen was not the conflict victor in a version comparison. In other words, the victor was older.
                                 Log.LogWarningWithCodeFromResources("ResolveAssemblyReference.FoundConflicts", assemblyName.Name, output);
                             }
@@ -1150,15 +1164,15 @@ quiet at the engine level.
                             {
                                 foreach (AssemblyNameExtension conflictVictim in conflictVictims)
                                 {
-                                    // Make note we only output a conflict suggestion if the reference has at 
-                                    // least one conflict victim - that way we don't suggest redirects to 
+                                    // Make note we only output a conflict suggestion if the reference has at
+                                    // least one conflict victim - that way we don't suggest redirects to
                                     // assemblies that don't exist at runtime. For example, this avoids us suggesting
                                     // a redirect from Foo 1.0.0.0 -> 2.0.0.0 in the following:
                                     //
                                     //      Project -> Foo, 1.0.0.0
                                     //      Project -> Bar -> Foo, 2.0.0.0
                                     //
-                                    // Above, Foo, 1.0.0.0 wins out and is copied to the output directory because 
+                                    // Above, Foo, 1.0.0.0 wins out and is copied to the output directory because
                                     // it is a primary reference.
                                     foundAtLeastOneValidBindingRedirect = true;
 
@@ -1235,9 +1249,8 @@ quiet at the engine level.
                     // Log general resolution exceptions.
                     foreach (Exception error in generalResolutionExceptions)
                     {
-                        if (error is InvalidReferenceAssemblyNameException)
+                        if (error is InvalidReferenceAssemblyNameException e)
                         {
-                            InvalidReferenceAssemblyNameException e = (InvalidReferenceAssemblyNameException)error;
                             Log.LogWarningWithCodeFromResources("General.MalformedAssemblyName", e.SourceItemSpec);
                         }
                         else
@@ -1255,9 +1268,9 @@ quiet at the engine level.
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
-                    if (r is AssemblyFoldersExResolver)
+                    if (r is AssemblyFoldersExResolver assemblyFoldersExResolver)
                     {
-                        AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;
+                        AssemblyFoldersEx assemblyFoldersEx = assemblyFoldersExResolver.AssemblyFoldersExLocations;
 
                         if (assemblyFoldersEx != null && _showAssemblyFoldersExLocations.TryGetValue(r.SearchPath, out messageImportance))
                         {
@@ -2214,7 +2227,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                             if (targetingProfile)
                             {
                                 // When targeting a profile we want the redist list to be the full framework redist list, since this is what should be used
-                                // when unifying assemblies ect. 
+                                // when unifying assemblies ect.
                                 AssemblyTableInfo[] fullRedistAssemblyTableInfo = null;
                                 RedistList fullFrameworkRedistList = null;
 
@@ -2390,7 +2403,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                             dependencyTable.RemoveReferencesMarkedForExclusion(true /* Remove the reference and do not warn*/, subsetOrProfileName);
                         }
 
-                        // Based on the closure, get a table of ideal remappings needed to 
+                        // Based on the closure, get a table of ideal remappings needed to
                         // produce zero conflicts.
                         dependencyTable.ResolveConflicts
                         (
@@ -2451,8 +2464,8 @@ out _copyLocalFiles
                     // If we're not finding dependencies, then don't suggest redirects (they're only about dependencies).
                     if (FindDependencies)
                     {
-                        // Build the table of suggested redirects. If we're auto-unifying, we want to output all the 
-                        // assemblies that we auto-unified so that GenerateBindingRedirects can consume them, 
+                        // Build the table of suggested redirects. If we're auto-unifying, we want to output all the
+                        // assemblies that we auto-unified so that GenerateBindingRedirects can consume them,
                         // not just the required ones for build to succeed
                         List<DependentAssembly> remappings = AutoUnify ? autoUnifiedRemappedAssemblies : idealAssemblyRemappings;
                         List<AssemblyNameReference> remappedReferences = AutoUnify ? autoUnifiedRemappedAssemblyReferences : idealAssemblyRemappingsIdentities;
@@ -2546,7 +2559,7 @@ out _copyLocalFiles
                                 {
                                     // Its pretty hard to get here, you need an assembly that contains a valid reference
                                     // to a dependent assembly that, in turn, throws a FileLoadException during GetAssemblyName.
-                                    // Still it happened once, with an older version of the CLR. 
+                                    // Still it happened once, with an older version of the CLR.
 
                                     // ...falling through and relying on the targetAssemblyName==null behavior below...
                                 }
@@ -2623,7 +2636,7 @@ private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, Fil
             {
                 try
                 {
-                    // in case of P2P that have not build the reference can be resolved but file does not exist on disk. 
+                    // in case of P2P that have not build the reference can be resolved but file does not exist on disk.
                     if (fileExists(resolvedReference.FullPath))
                     {
                         FrameworkNameVersioning frameworkName;
@@ -2631,12 +2644,8 @@ private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, Fil
                         getAssemblyMetadata(resolvedReference.FullPath, assemblyMetadataCache, out result, out scatterFiles, out frameworkName);
                     }
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
                 }
             }
 
@@ -2901,7 +2910,7 @@ private bool ShouldUseSubsetExclusionList()
                 return false;
             }
 
-            // No subset names were passed in to search for in the targetframework directories and no installed subset tables were provided, we have nothing to use to 
+            // No subset names were passed in to search for in the targetframework directories and no installed subset tables were provided, we have nothing to use to
             // generate the exclusion list with, so do not continue.
             if (_targetFrameworkSubsets.Length == 0 && _installedAssemblySubsetTables.Length == 0)
             {
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index 7a30ee1d703..66fddca12ab 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -7,6 +7,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/TaskItemSpecFilenameComparer.cs b/src/Tasks/AssemblyDependency/TaskItemSpecFilenameComparer.cs
index 02a288bdf6e..ad9ffac0441 100644
--- a/src/Tasks/AssemblyDependency/TaskItemSpecFilenameComparer.cs
+++ b/src/Tasks/AssemblyDependency/TaskItemSpecFilenameComparer.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/UnificationReason.cs b/src/Tasks/AssemblyDependency/UnificationReason.cs
index c439d571e50..8223183a0ad 100644
--- a/src/Tasks/AssemblyDependency/UnificationReason.cs
+++ b/src/Tasks/AssemblyDependency/UnificationReason.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/UnificationVersion.cs b/src/Tasks/AssemblyDependency/UnificationVersion.cs
index 79eb947430f..bcd31a39ef8 100644
--- a/src/Tasks/AssemblyDependency/UnificationVersion.cs
+++ b/src/Tasks/AssemblyDependency/UnificationVersion.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/UnifiedAssemblyName.cs b/src/Tasks/AssemblyDependency/UnifiedAssemblyName.cs
index 1f91306f771..34b0ff9143c 100644
--- a/src/Tasks/AssemblyDependency/UnifiedAssemblyName.cs
+++ b/src/Tasks/AssemblyDependency/UnifiedAssemblyName.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyDependency/WarnOrErrorOnTargetArchitectureMismatchBehavior.cs b/src/Tasks/AssemblyDependency/WarnOrErrorOnTargetArchitectureMismatchBehavior.cs
index e1aeb1d9f34..13ef6555e76 100644
--- a/src/Tasks/AssemblyDependency/WarnOrErrorOnTargetArchitectureMismatchBehavior.cs
+++ b/src/Tasks/AssemblyDependency/WarnOrErrorOnTargetArchitectureMismatchBehavior.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyFolder.cs b/src/Tasks/AssemblyFolder.cs
index dfc0c4632c7..6f5da7d008f 100644
--- a/src/Tasks/AssemblyFolder.cs
+++ b/src/Tasks/AssemblyFolder.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Win32;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyRegistrationCache.cs b/src/Tasks/AssemblyRegistrationCache.cs
index 3877f422450..ba5beaa4b82 100644
--- a/src/Tasks/AssemblyRegistrationCache.cs
+++ b/src/Tasks/AssemblyRegistrationCache.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/AssemblyRemapping.cs b/src/Tasks/AssemblyRemapping.cs
index 13273a92491..ac09c0fcb63 100644
--- a/src/Tasks/AssemblyRemapping.cs
+++ b/src/Tasks/AssemblyRemapping.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssemblyResources.cs b/src/Tasks/AssemblyResources.cs
index 49f192ddca3..2d8cfcdf7f3 100644
--- a/src/Tasks/AssemblyResources.cs
+++ b/src/Tasks/AssemblyResources.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Tasks/AssignCulture.cs b/src/Tasks/AssignCulture.cs
index ee5446c50e8..bf29ead3d01 100644
--- a/src/Tasks/AssignCulture.cs
+++ b/src/Tasks/AssignCulture.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssignLinkMetadata.cs b/src/Tasks/AssignLinkMetadata.cs
index 16d1175f11c..3e4c0c62633 100644
--- a/src/Tasks/AssignLinkMetadata.cs
+++ b/src/Tasks/AssignLinkMetadata.cs
@@ -7,6 +7,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AssignProjectConfiguration.cs b/src/Tasks/AssignProjectConfiguration.cs
index d69c23af424..1f93054af17 100644
--- a/src/Tasks/AssignProjectConfiguration.cs
+++ b/src/Tasks/AssignProjectConfiguration.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     public class AssignProjectConfiguration : ResolveProjectBase
diff --git a/src/Tasks/AssignTargetPath.cs b/src/Tasks/AssignTargetPath.cs
index 6b033ae1fb0..48079383cd6 100644
--- a/src/Tasks/AssignTargetPath.cs
+++ b/src/Tasks/AssignTargetPath.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -75,7 +77,7 @@ public override bool Execute()
 
                     // If TargetPath is already set, it takes priority.
                     // https://github.com/dotnet/msbuild/issues/2795
-                    string targetPath =  ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) ? Files[i].GetMetadata(ItemMetadataNames.targetPath) : null;
+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);
 
                     // If TargetPath not already set, fall back to default behavior.
                     if (string.IsNullOrEmpty(targetPath))
diff --git a/src/Tasks/AxImp.cs b/src/Tasks/AxImp.cs
index 59e3f4fcd55..643a4029724 100644
--- a/src/Tasks/AxImp.cs
+++ b/src/Tasks/AxImp.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AxReference.cs b/src/Tasks/AxReference.cs
index 2b7b15cd61a..3b0c87d1229 100644
--- a/src/Tasks/AxReference.cs
+++ b/src/Tasks/AxReference.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /*
diff --git a/src/Tasks/AxTlbBaseReference.cs b/src/Tasks/AxTlbBaseReference.cs
index d0aa26be0fd..6f5ac03fb55 100644
--- a/src/Tasks/AxTlbBaseReference.cs
+++ b/src/Tasks/AxTlbBaseReference.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/AxTlbBaseTask.cs b/src/Tasks/AxTlbBaseTask.cs
index 5a0b3d0b54c..a6bde0f4930 100644
--- a/src/Tasks/AxTlbBaseTask.cs
+++ b/src/Tasks/AxTlbBaseTask.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 3e7da8c94cd..b8960252b8a 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -17,13 +17,19 @@
 using System.Xml.XPath;
 using System.Xml.Xsl;
 using Microsoft.Build.Shared.FileSystem;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// This class is the top-level object for the bootstrapper system.
     /// </summary>
-    [ComVisible(true), Guid("1D9FE38A-0226-4b95-9C6B-6DFFA2236270"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("1D9FE38A-0226-4b95-9C6B-6DFFA2236270")]
+    [ClassInterface(ClassInterfaceType.None)]
+    [SupportedOSPlatform("windows")]
     public class BootstrapperBuilder : IBootstrapperBuilder
     {
         private static readonly bool s_logging = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("VSPLOG"));
@@ -1639,7 +1645,7 @@ private static string GetFileHash(string filePath)
             // the .NET Framework we are targeting.  In ideal situations, bootstrapper files will be
             // pre-signed anwyay; this is a fallback in case we ever encounter a bootstrapper that is
             // not signed.  
-            System.Security.Cryptography.SHA256CryptoServiceProvider sha = new System.Security.Cryptography.SHA256CryptoServiceProvider();
+            System.Security.Cryptography.SHA256 sha = System.Security.Cryptography.SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider");
 
             using (Stream s = fi.OpenRead())
             {
@@ -1902,7 +1908,7 @@ private static XmlElement CreateApplicationElement(XmlElement configElement, Bui
                     XmlElement filesNode = applicationElement.OwnerDocument.CreateElement("Files");
                     XmlElement fileNode = filesNode.OwnerDocument.CreateElement("File");
                     AddAttribute(fileNode, "Name", settings.ApplicationFile);
-                    AddAttribute(fileNode, URLNAME_ATTRIBUTE, Uri.EscapeUriString(settings.ApplicationFile));
+                    AddAttribute(fileNode, URLNAME_ATTRIBUTE, Uri.EscapeDataString(settings.ApplicationFile));
                     filesNode.AppendChild(fileNode);
                     applicationElement.AppendChild(filesNode);
                 }
diff --git a/src/Tasks/BootstrapperUtil/BuildMessage.cs b/src/Tasks/BootstrapperUtil/BuildMessage.cs
index 0f1647a64a3..be2c4585e76 100644
--- a/src/Tasks/BootstrapperUtil/BuildMessage.cs
+++ b/src/Tasks/BootstrapperUtil/BuildMessage.cs
@@ -6,6 +6,8 @@
 using System.Text.RegularExpressions;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
diff --git a/src/Tasks/BootstrapperUtil/BuildResults.cs b/src/Tasks/BootstrapperUtil/BuildResults.cs
index ef5b37fb35b..9b7d66b5c9a 100644
--- a/src/Tasks/BootstrapperUtil/BuildResults.cs
+++ b/src/Tasks/BootstrapperUtil/BuildResults.cs
@@ -4,12 +4,16 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// Represents the results of the Build operation of the BootstrapperBuilder.
     /// </summary>
-    [ComVisible(true), Guid("FAD7BA7C-CA00-41e0-A5EF-2DA9A74E58E6"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("FAD7BA7C-CA00-41e0-A5EF-2DA9A74E58E6")]
+    [ClassInterface(ClassInterfaceType.None)]
     public class BuildResults : IBuildResults
     {
         private readonly List<string> _componentFiles = new List<string>();
diff --git a/src/Tasks/BootstrapperUtil/BuildSettings.cs b/src/Tasks/BootstrapperUtil/BuildSettings.cs
index d9d37baef45..4e137089cf6 100644
--- a/src/Tasks/BootstrapperUtil/BuildSettings.cs
+++ b/src/Tasks/BootstrapperUtil/BuildSettings.cs
@@ -3,12 +3,16 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// This class defines the settings for the bootstrapper build operation.
     /// </summary>
-    [ComVisible(true), Guid("5D13802C-C830-4b41-8E7A-F69D9DD6A095"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("5D13802C-C830-4b41-8E7A-F69D9DD6A095")]
+    [ClassInterface(ClassInterfaceType.None)]
     public class BuildSettings : IBuildSettings
     {
         public BuildSettings()
diff --git a/src/Tasks/BootstrapperUtil/Interfaces.cs b/src/Tasks/BootstrapperUtil/Interfaces.cs
index 8858e85b242..d3e45d55583 100644
--- a/src/Tasks/BootstrapperUtil/Interfaces.cs
+++ b/src/Tasks/BootstrapperUtil/Interfaces.cs
@@ -3,13 +3,16 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// This interface exposes functionality necessary to build a bootstrapper.
     /// </summary>
     [ComVisible(true)]
-    [Guid("1D202366-5EEA-4379-9255-6F8CDB8587C9"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("1D202366-5EEA-4379-9255-6F8CDB8587C9")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IBootstrapperBuilder
     {
         /// <summary>
@@ -38,7 +41,8 @@ public interface IBootstrapperBuilder
     /// This interface defines the settings for the bootstrapper build operation.
     /// </summary>
     [ComVisible(true)]
-    [Guid("87EEBC69-0948-4ce6-A2DE-819162B87CC6"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("87EEBC69-0948-4ce6-A2DE-819162B87CC6")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IBuildSettings
     {
         /// <summary>
@@ -124,7 +128,8 @@ public interface IBuildSettings
     /// This interface represents a product in the found by the BootstrapperBuilder in the Path property.
     /// </summary>
     [ComVisible(true)]
-    [Guid("9E81BE3D-530F-4a10-8349-5D5947BA59AD"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("9E81BE3D-530F-4a10-8349-5D5947BA59AD")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IProduct
     {
         /// <summary>
@@ -156,7 +161,8 @@ public interface IProduct
     /// This interface describes a collection of Product objects. This collection is a closed set that is generated by the BootstrapperBuilder based on the Path property. The client cannot add or remove items from this collection.
     /// </summary>
     [ComVisible(true)]
-    [Guid("63F63663-8503-4875-814C-09168E595367"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("63F63663-8503-4875-814C-09168E595367")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IProductCollection
     {
         /// <summary>
@@ -186,7 +192,8 @@ public interface IProductCollection
     /// This interface represents a buildable version of a Product.  Used for the BootstrapperBuilder's Build method.
     /// </summary>
     [ComVisible(true)]
-    [Guid("0777432F-A60D-48b3-83DB-90326FE8C96E"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("0777432F-A60D-48b3-83DB-90326FE8C96E")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IProductBuilder
     {
         /// <summary>
@@ -200,7 +207,8 @@ public interface IProductBuilder
     /// This class contains a collection of ProductBuilder objects. Used for the BootstrapperBuilder's Build method.
     /// </summary>
     [ComVisible(true)]
-    [Guid("0D593FC0-E3F1-4dad-A674-7EA4D327F79B"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("0D593FC0-E3F1-4dad-A674-7EA4D327F79B")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IProductBuilderCollection
     {
         /// <summary>
@@ -215,8 +223,8 @@ public interface IProductBuilderCollection
     /// Represents the results of the build operation of the BootstrapperBuilder.
     /// </summary>
     [ComVisible(true)]
-    [Guid("586B842C-D9C7-43b8-84E4-9CFC3AF9F13B"),
-    InterfaceTypeAttribute(ComInterfaceType.InterfaceIsDual)]
+    [Guid("586B842C-D9C7-43b8-84E4-9CFC3AF9F13B")]
+    [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsDual)]
     public interface IBuildResults
     {
         /// <summary>
@@ -250,7 +258,8 @@ public interface IBuildResults
     /// Represents messages that occur during the BootstrapperBuilder's Build operation.
     /// </summary>
     [ComVisible(true)]
-    [Guid("E3C981EA-99E6-4f48-8955-1AAFDFB5ACE4"), InterfaceType(ComInterfaceType.InterfaceIsDual)]
+    [Guid("E3C981EA-99E6-4f48-8955-1AAFDFB5ACE4")]
+    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
     public interface IBuildMessage
     {
         /// <summary>
diff --git a/src/Tasks/BootstrapperUtil/NativeMethods.cs b/src/Tasks/BootstrapperUtil/NativeMethods.cs
index 08907f653c6..c79333daae6 100644
--- a/src/Tasks/BootstrapperUtil/NativeMethods.cs
+++ b/src/Tasks/BootstrapperUtil/NativeMethods.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     internal static class NativeMethods
diff --git a/src/Tasks/BootstrapperUtil/Package.cs b/src/Tasks/BootstrapperUtil/Package.cs
index d05c8171b61..a7cf775dff5 100644
--- a/src/Tasks/BootstrapperUtil/Package.cs
+++ b/src/Tasks/BootstrapperUtil/Package.cs
@@ -4,6 +4,8 @@
 using System.Xml;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     [ComVisible(false)]
diff --git a/src/Tasks/BootstrapperUtil/PackageCollection.cs b/src/Tasks/BootstrapperUtil/PackageCollection.cs
index 0fe53b2c185..5b7a169a826 100644
--- a/src/Tasks/BootstrapperUtil/PackageCollection.cs
+++ b/src/Tasks/BootstrapperUtil/PackageCollection.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     internal class PackageCollection : IEnumerable
diff --git a/src/Tasks/BootstrapperUtil/Product.cs b/src/Tasks/BootstrapperUtil/Product.cs
index 56338f5ca04..b6dc18dda9c 100644
--- a/src/Tasks/BootstrapperUtil/Product.cs
+++ b/src/Tasks/BootstrapperUtil/Product.cs
@@ -8,17 +8,23 @@
 using System.Xml;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     internal enum CopyAllFilesType
     {
-        CopyAllFilesFalse, CopyAllFilesTrue, CopyAllFilesIfNotHomeSite
-    };
+        CopyAllFilesFalse,
+        CopyAllFilesTrue,
+        CopyAllFilesIfNotHomeSite,
+    }
 
     /// <summary>
     /// This class represents a product in the found by the BootstrapperBuilder in the Path property.
     /// </summary>
-    [ComVisible(true), Guid("532BF563-A85D-4088-8048-41F51AC5239F"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("532BF563-A85D-4088-8048-41F51AC5239F")]
+    [ClassInterface(ClassInterfaceType.None)]
     public class Product : IProduct
     {
         private readonly Dictionary<string, Package> _cultures = new Dictionary<string, Package>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Tasks/BootstrapperUtil/ProductBuilder.cs b/src/Tasks/BootstrapperUtil/ProductBuilder.cs
index 55224e4b575..ef3841e7386 100644
--- a/src/Tasks/BootstrapperUtil/ProductBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/ProductBuilder.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
diff --git a/src/Tasks/BootstrapperUtil/ProductBuilderCollection.cs b/src/Tasks/BootstrapperUtil/ProductBuilderCollection.cs
index e4f74614f8e..61023f279d7 100644
--- a/src/Tasks/BootstrapperUtil/ProductBuilderCollection.cs
+++ b/src/Tasks/BootstrapperUtil/ProductBuilderCollection.cs
@@ -5,12 +5,16 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// This class contains a collection of ProductBuilder objects. Used for the BootstrapperBuilder's Build method.
     /// </summary>
-    [ComVisible(true), Guid("D25C0741-99CA-49f7-9460-95E5F25EEF43"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("D25C0741-99CA-49f7-9460-95E5F25EEF43")]
+    [ClassInterface(ClassInterfaceType.None)]
     public class ProductBuilderCollection : IProductBuilderCollection, IEnumerable
     {
         private readonly List<ProductBuilder> _list = new List<ProductBuilder>();
diff --git a/src/Tasks/BootstrapperUtil/ProductCollection.cs b/src/Tasks/BootstrapperUtil/ProductCollection.cs
index 71ae246ab13..f2c5b12202b 100644
--- a/src/Tasks/BootstrapperUtil/ProductCollection.cs
+++ b/src/Tasks/BootstrapperUtil/ProductCollection.cs
@@ -6,12 +6,16 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
     /// This class contains a collection of Product objects. This collection is a closed set that is generated by the BootstrapperBuilder based on the Path property. The client cannot add or remove items from this collection.
     /// </summary>
-    [ComVisible(true), Guid("EFFA164B-3E87-4195-88DB-8AC004DDFE2A"), ClassInterface(ClassInterfaceType.None)]
+    [ComVisible(true)]
+    [Guid("EFFA164B-3E87-4195-88DB-8AC004DDFE2A")]
+    [ClassInterface(ClassInterfaceType.None)]
     public class ProductCollection : IProductCollection, IEnumerable
     {
         private readonly List<Product> _list = new List<Product>();
diff --git a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
index d28a9eb8178..0a3fade1c5d 100644
--- a/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
+++ b/src/Tasks/BootstrapperUtil/ResourceUpdater.cs
@@ -8,6 +8,8 @@
 using System.Runtime.InteropServices;
 using System.Threading;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     internal class ResourceUpdater
diff --git a/src/Tasks/BootstrapperUtil/Util.cs b/src/Tasks/BootstrapperUtil/Util.cs
index 5afd9397329..d62c8247070 100644
--- a/src/Tasks/BootstrapperUtil/Util.cs
+++ b/src/Tasks/BootstrapperUtil/Util.cs
@@ -5,9 +5,12 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     internal static class Util
@@ -73,6 +76,7 @@ public static CultureInfo GetCultureInfoFromString(string cultureName)
 
         public static CultureInfo DefaultCultureInfo => System.Threading.Thread.CurrentThread.CurrentUICulture;
 
+        [SupportedOSPlatform("windows")]
         // This is the 4.0 property and will always point to the Dev10 registry key so that we don't break backwards compatibility.
         // Applications relying on 4.5 will need to use the new method that is introduced in 4.5.
         public static string DefaultPath
@@ -100,6 +104,7 @@ public static string DefaultPath
             }
         }
 
+        [SupportedOSPlatform("windows")]
         // A new method in 4.5 to get the default path for bootstrapper packages.
         // This method is not going to cache the path as it could be different depending on the Visual Studio version.
         public static string GetDefaultPath(string visualStudioVersion)
@@ -151,6 +156,7 @@ public static string GetDefaultPath(string visualStudioVersion)
             return Directory.GetCurrentDirectory();
         }
 
+        [SupportedOSPlatform("windows")]
         // Gets the list of additional paths to inspect for packages as defined in the registry
         public static List<string> AdditionalPackagePaths
         {
@@ -200,6 +206,7 @@ public static List<string> AdditionalPackagePaths
             }
         }
 
+        [SupportedOSPlatform("windows")]
         private static string ReadRegistryString(RegistryKey key, string path, string registryValue)
         {
             RegistryKey subKey = key.OpenSubKey(path, false);
diff --git a/src/Tasks/BootstrapperUtil/productvalidationresults.cs b/src/Tasks/BootstrapperUtil/productvalidationresults.cs
index e82e338a107..c882d9916c3 100644
--- a/src/Tasks/BootstrapperUtil/productvalidationresults.cs
+++ b/src/Tasks/BootstrapperUtil/productvalidationresults.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
diff --git a/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs b/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
index a9c3142b154..c41406a7c10 100644
--- a/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
+++ b/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
@@ -3,6 +3,8 @@
 
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
 {
     /// <summary>
diff --git a/src/Tasks/BuildCacheDisposeWrapper.cs b/src/Tasks/BuildCacheDisposeWrapper.cs
index 1341fb0b9dc..2667f33b55f 100644
--- a/src/Tasks/BuildCacheDisposeWrapper.cs
+++ b/src/Tasks/BuildCacheDisposeWrapper.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CSharpParserUtilities.cs b/src/Tasks/CSharpParserUtilities.cs
index facac7734c6..2f433522f74 100644
--- a/src/Tasks/CSharpParserUtilities.cs
+++ b/src/Tasks/CSharpParserUtilities.cs
@@ -5,6 +5,8 @@
 using System.Text;
 using Microsoft.Build.Shared.LanguageParser;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CallTarget.cs b/src/Tasks/CallTarget.cs
index d67f4c61cb0..3ce6ae1b3b0 100644
--- a/src/Tasks/CallTarget.cs
+++ b/src/Tasks/CallTarget.cs
@@ -4,6 +4,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 29d5c673725..77c8c929879 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
 #if FEATURE_CODETASKFACTORY
@@ -160,7 +162,7 @@ private static Assembly CurrentDomainOnAssemblyResolve(object sender, ResolveEve
         public Type TaskType { get; private set; }
 
         /// <summary>
-        /// Get the type information for all task parameters
+        /// Get the type information for all task parameters.
         /// </summary>
         public TaskPropertyInfo[] GetTaskParameters()
         {
@@ -170,7 +172,7 @@ public TaskPropertyInfo[] GetTaskParameters()
         }
 
         /// <summary>
-        /// Initialze the task factory
+        /// Initializes the task factory.
         /// </summary>
         public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> taskParameters, string taskElementContents, IBuildEngine taskFactoryLoggingHost)
         {
@@ -306,7 +308,7 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> ta
         }
 
         /// <summary>
-        /// Create a taskfactory instance which contains the data that needs to be refreshed between task invocations
+        /// Create a taskfactory instance which contains the data that needs to be refreshed between task invocations.
         /// </summary>
         public ITask CreateTask(IBuildEngine loggingHost)
         {
@@ -683,18 +685,24 @@ bool TryCacheAssemblyIdentityFromPath(string assemblyFile, out string candidateA
 
                 try
                 {
+                    // Framework and Utilities are default references but are often
+                    // specified in the UsingTask anyway; if so just ignore them.
+                    //
+                    // Do this with an explicit upfront check rather than loading the
+                    // assembly and then checking its name, because that can cause
+                    // the loader to have multiple copies of these assemblies as in
+                    // https://github.com/dotnet/msbuild/issues/7108.
+
+                    string name = AssemblyName.GetAssemblyName(assemblyFile).FullName;
+                    if (name == _msbuildFrameworkName ||
+                        name == _msbuildUtilitiesName)
+                    {
+                        return false;
+                    }
+
                     Assembly candidateAssembly = Assembly.UnsafeLoadFrom(assemblyFile);
                     if (candidateAssembly != null)
                     {
-                        string name = candidateAssembly.FullName;
-                        if (name == _msbuildFrameworkName ||
-                            name == _msbuildUtilitiesName)
-                        {
-                            // Framework and Utilities are default references but are often
-                            // specified in the UsingTask anyway; if so just ignore them.
-                            return false;
-                        }
-
                         candidateAssemblyLocation = candidateAssembly.Location;
                         s_knownReferenceAssemblies[candidateAssembly.FullName] = candidateAssembly;
                     }
diff --git a/src/Tasks/ComDependencyWalker.cs b/src/Tasks/ComDependencyWalker.cs
index ca621fc1598..cb76273bb16 100644
--- a/src/Tasks/ComDependencyWalker.cs
+++ b/src/Tasks/ComDependencyWalker.cs
@@ -10,6 +10,8 @@
 using COMException = System.Runtime.InteropServices.COMException;
 using VarEnum = System.Runtime.InteropServices.VarEnum;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     // Abstract the method for releasing COM objects for unit testing. 
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index ffa0fb88171..eaf732c4ec4 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -11,6 +11,8 @@
 using Marshal = System.Runtime.InteropServices.Marshal;
 using COMException = System.Runtime.InteropServices.COMException;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -404,22 +406,33 @@ internal static string StripTypeLibNumberFromPath(string typeLibPath, FileExists
 
         private static string GetModuleFileName(IntPtr handle)
         {
-            bool success = false;
-            var buffer = new StringBuilder();
+            char[] buffer = null;
 
             // Try increased buffer sizes if on longpath-enabled Windows
-            for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
+            for (int bufferSize = NativeMethodsShared.MAX_PATH; bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
             {
-                buffer.EnsureCapacity(bufferSize);
+                buffer = System.Buffers.ArrayPool<char>.Shared.Rent(bufferSize);
+                try
+                {
+                    var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
+                    int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
 
-                var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
-                int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, buffer.Capacity);
+                    bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
+                    if (pathLength != 0 && !isBufferTooSmall)
+                    {
+                        return new string(buffer, 0, pathLength);
+                    }
+                }
+                finally
+                {
+                    System.Buffers.ArrayPool<char>.Shared.Return(buffer);
+                }
 
-                bool isBufferTooSmall = ((uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
-                success = pathLength != 0 && !isBufferTooSmall;
+                // Double check that the buffer is not insanely big
+                ErrorUtilities.VerifyThrow(bufferSize <= int.MaxValue / 2, "Buffer size approaching int.MaxValue");
             }
 
-            return success ? buffer.ToString() : string.Empty;
+            return string.Empty;
         }
 
         /// <summary>
diff --git a/src/Tasks/ComReferenceInfo.cs b/src/Tasks/ComReferenceInfo.cs
index 9e433200cdd..6c3be701bf6 100644
--- a/src/Tasks/ComReferenceInfo.cs
+++ b/src/Tasks/ComReferenceInfo.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ComReferenceItemAttributes.cs b/src/Tasks/ComReferenceItemAttributes.cs
index e484d706082..1dfed67cd12 100644
--- a/src/Tasks/ComReferenceItemAttributes.cs
+++ b/src/Tasks/ComReferenceItemAttributes.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ComReferenceResolutionException.cs b/src/Tasks/ComReferenceResolutionException.cs
index 48f2f0f0231..7b5760fedd7 100644
--- a/src/Tasks/ComReferenceResolutionException.cs
+++ b/src/Tasks/ComReferenceResolutionException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ComReferenceTypes.cs b/src/Tasks/ComReferenceTypes.cs
index ecb520e3a25..1b0eb4f3c02 100644
--- a/src/Tasks/ComReferenceTypes.cs
+++ b/src/Tasks/ComReferenceTypes.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ComReferenceWrapperInfo.cs b/src/Tasks/ComReferenceWrapperInfo.cs
index 3ef7a280a7d..0007cc0e64d 100644
--- a/src/Tasks/ComReferenceWrapperInfo.cs
+++ b/src/Tasks/ComReferenceWrapperInfo.cs
@@ -4,6 +4,8 @@
 using System.Reflection;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CombinePath.cs b/src/Tasks/CombinePath.cs
index 4d132eca4af..b6e759aaeb3 100644
--- a/src/Tasks/CombinePath.cs
+++ b/src/Tasks/CombinePath.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CombineTargetFrameworkInfoProperties.cs b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
index bfd7caae236..4108feb5246 100644
--- a/src/Tasks/CombineTargetFrameworkInfoProperties.cs
+++ b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Shared;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CombineXmlElements.cs b/src/Tasks/CombineXmlElements.cs
index 214207b1b6e..ca7525a92ac 100644
--- a/src/Tasks/CombineXmlElements.cs
+++ b/src/Tasks/CombineXmlElements.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -19,7 +21,7 @@ public class CombineXmlElements : TaskExtension
         /// <summary>
         /// The XML elements to include as children of the root element
         /// </summary>
-        public ITaskItem [] XmlElements { get; set; }
+        public ITaskItem[] XmlElements { get; set; }
 
         /// <summary>
         /// The generated XML
diff --git a/src/Tasks/CommandLineBuilderExtension.cs b/src/Tasks/CommandLineBuilderExtension.cs
index eebdbc4f11a..c07634ce739 100644
--- a/src/Tasks/CommandLineBuilderExtension.cs
+++ b/src/Tasks/CommandLineBuilderExtension.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ConvertToAbsolutePath.cs b/src/Tasks/ConvertToAbsolutePath.cs
index b5df8f2ef20..a8985aefcdc 100644
--- a/src/Tasks/ConvertToAbsolutePath.cs
+++ b/src/Tasks/ConvertToAbsolutePath.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 1575b55d11b..45a3a11ae8d 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -14,6 +14,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Eventing;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -101,26 +103,26 @@ public Copy()
         public ITaskItem DestinationFolder { get; set; }
 
         /// <summary>
-        /// How many times to attempt to copy, if all previous
-        /// attempts failed. Defaults to zero.
-        /// Warning: using retries may mask a synchronization problem in your
-        /// build process.
+        /// Gets or sets the number of times to attempt to copy, if all previous attempts failed.
+        /// Warning: using retries may mask a synchronization problem in your build process.
         /// </summary>
         public int Retries { get; set; } = 10;
 
         /// <summary>
-        /// Delay between any necessary retries.
+        /// Gets or sets the delay, in milliseconds, between any necessary retries.
         /// Defaults to <see cref="RetryDelayMillisecondsDefault">RetryDelayMillisecondsDefault</see>
         /// </summary>
         public int RetryDelayMilliseconds { get; set; }
 
         /// <summary>
-        /// Create Hard Links for the copied files rather than copy the files if possible to do so
+        /// Gets or sets a value that indicates whether to use hard links for the copied files
+        /// rather than copy the files, if it's possible to do so.
         /// </summary>
         public bool UseHardlinksIfPossible { get; set; }
 
         /// <summary>
-        /// Create Symbolic Links for the copied files rather than copy the files if possible to do so
+        /// Gets or sets a value that indicates whether to create symbolic links for the copied files
+        /// rather than copy the files, if it's possible to do so.
         /// </summary>
         public bool UseSymboliclinksIfPossible { get; set; } = s_forceSymlinks;
 
@@ -144,7 +146,7 @@ public Copy()
         public bool WroteAtLeastOneFile { get; private set; }
 
         /// <summary>
-        /// Whether to overwrite files in the destination
+        /// Gets or sets a value that indicates whether to overwrite files in the destination
         /// that have the read-only attribute set.
         /// </summary>
         public bool OverwriteReadOnlyFiles { get; set; }
@@ -302,7 +304,7 @@ FileState destinationFileState  // The destination file
 
                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);
             }
-            
+
             // Files were successfully copied or linked. Those are equivalent here.
             WroteAtLeastOneFile = true;
 
@@ -585,7 +587,11 @@ private bool CopyParallel(
             foreach (List<int> partition in partitionsByDestination.Values)
             {
                 bool partitionAccepted = partitionCopyActionBlock.Post(partition);
-                if (!partitionAccepted)
+                if (_cancellationTokenSource.IsCancellationRequested)
+                {
+                    break;
+                }
+                else if (!partitionAccepted)
                 {
                     // Retail assert...
                     ErrorUtilities.ThrowInternalError("Failed posting a file copy to an ActionBlock. Should not happen with block at max int capacity.");
@@ -785,55 +791,56 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
                 }
                 catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                 {
-                    if (e is ArgumentException ||  // Invalid chars
-                        e is NotSupportedException || // Colon in the middle of the path
-                        e is PathTooLongException)
+                    switch (e)
                     {
-                        // No use retrying these cases
-                        throw;
-                    }
+                        case ArgumentException: // Invalid chars
+                        case NotSupportedException: // Colon in the middle of the path
+                        case PathTooLongException:
+                            throw;
+                        case UnauthorizedAccessException:
+                        case IOException: // Not clear why we can get one and not the other
+                            int code = Marshal.GetHRForException(e);
+
+                            LogDiagnostic("Got {0} copying {1} to {2} and HR is {3}", e.ToString(), sourceFileState.Name, destinationFileState.Name, code);
+                            if (code == NativeMethods.ERROR_ACCESS_DENIED)
+                            {
+                                // ERROR_ACCESS_DENIED can either mean there's an ACL preventing us, or the file has the readonly bit set.
+                                // In either case, that's likely not a race, and retrying won't help.
+                                // Retrying is mainly for ERROR_SHARING_VIOLATION, where someone else is using the file right now.
+                                // However, there is a limited set of circumstances where a copy failure will show up as access denied due 
+                                // to a failure to reset the readonly bit properly, in which case retrying will succeed.  This seems to be 
+                                // a pretty edge scenario, but since some of our internal builds appear to be hitting it, provide a secret
+                                // environment variable to allow overriding the default behavior and forcing retries in this circumstance as well. 
+                                if (!s_alwaysRetryCopy)
+                                {
+                                    throw;
+                                }
+                                else
+                                {
+                                    LogDiagnostic("Retrying on ERROR_ACCESS_DENIED because MSBUILDALWAYSRETRY = 1");
+                                }
+                            }
 
-                    if (e is UnauthorizedAccessException || e is IOException) // Not clear why we can get one and not the other
-                    {
-                        int code = Marshal.GetHRForException(e);
+                            if (e is UnauthorizedAccessException)
+                            {
+                                break;
+                            }
 
-                        LogDiagnostic("Got {0} copying {1} to {2} and HR is {3}", e.ToString(), sourceFileState.Name, destinationFileState.Name, code);
-                        if (code == NativeMethods.ERROR_ACCESS_DENIED)
-                        {
-                            // ERROR_ACCESS_DENIED can either mean there's an ACL preventing us, or the file has the readonly bit set.
-                            // In either case, that's likely not a race, and retrying won't help.
-                            // Retrying is mainly for ERROR_SHARING_VIOLATION, where someone else is using the file right now.
-                            // However, there is a limited set of circumstances where a copy failure will show up as access denied due 
-                            // to a failure to reset the readonly bit properly, in which case retrying will succeed.  This seems to be 
-                            // a pretty edge scenario, but since some of our internal builds appear to be hitting it, provide a secret
-                            // environment variable to allow overriding the default behavior and forcing retries in this circumstance as well. 
-                            if (!s_alwaysRetryCopy)
+                            if (DestinationFolder != null && FileSystems.Default.FileExists(DestinationFolder.ItemSpec))
                             {
+                                // We failed to create the DestinationFolder because it's an existing file. No sense retrying.
+                                // We don't check for this case upstream because it'd be another hit to the filesystem.
                                 throw;
                             }
-                            else
+
+                            // if this was just because the source and destination files are the
+                            // same file, that's not a failure.
+                            // Note -- we check this exceptional case here, not before the copy, for perf.
+                            if (PathsAreIdentical(sourceFileState.Name, destinationFileState.Name))
                             {
-                                LogDiagnostic("Retrying on ERROR_ACCESS_DENIED because MSBUILDALWAYSRETRY = 1");
+                                return true;
                             }
-                        }
-                    }
-
-                    if (e is IOException && DestinationFolder != null && FileSystems.Default.FileExists(DestinationFolder.ItemSpec))
-                    {
-                        // We failed to create the DestinationFolder because it's an existing file. No sense retrying.
-                        // We don't check for this case upstream because it'd be another hit to the filesystem.
-                        throw;
-                    }
-
-                    if (e is IOException)
-                    {
-                        // if this was just because the source and destination files are the
-                        // same file, that's not a failure.
-                        // Note -- we check this exceptional case here, not before the copy, for perf.
-                        if (PathsAreIdentical(sourceFileState.Name, destinationFileState.Name))
-                        {
-                            return true;
-                        }
+                            break;
                     }
 
                     if (retries < Retries)
@@ -896,20 +903,22 @@ e is NotSupportedException || // Colon in the middle of the path
         private static string GetLockedFileMessage(string file)
         {
             string message = string.Empty;
-#if !RUNTIME_TYPE_NETCORE && !MONO
 
             try
             {
-                var processes = LockCheck.GetProcessesLockingFile(file);
-                message = !string.IsNullOrEmpty(processes)
-                    ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
-                    : String.Empty;
+                if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+                {
+                    var processes = LockCheck.GetProcessesLockingFile(file);
+                    message = !string.IsNullOrEmpty(processes)
+                        ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
+                        : String.Empty;
+                }
             }
             catch (Exception)
             {
                 // Never throw if we can't get the processes locking the file.
             }
-#endif
+
             return message;
         }
 
@@ -936,17 +945,17 @@ private static bool PathsAreIdentical(string source, string destination)
             return String.Equals(fullSourcePath, fullDestinationPath, filenameComparison);
         }
 
-    	private static int GetParallelismFromEnvironment()
-	    {
-	        int parallelism = Traits.Instance.CopyTaskParallelism;
-	        if (parallelism < 0)
-	        {
-	            parallelism = DefaultCopyParallelism;
-	        }
+        private static int GetParallelismFromEnvironment()
+        {
+            int parallelism = Traits.Instance.CopyTaskParallelism;
+            if (parallelism < 0)
+            {
+                parallelism = DefaultCopyParallelism;
+            }
             else if (parallelism == 0)
-	        {
-	            parallelism = int.MaxValue;
-	        }
+            {
+                parallelism = int.MaxValue;
+            }
             return parallelism;
         }
     }
diff --git a/src/Tasks/CreateCSharpManifestResourceName.cs b/src/Tasks/CreateCSharpManifestResourceName.cs
index bb939b9174a..3ba09011657 100644
--- a/src/Tasks/CreateCSharpManifestResourceName.cs
+++ b/src/Tasks/CreateCSharpManifestResourceName.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index 7b4bfa75764..2ab2cf25397 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -59,8 +61,14 @@ public override bool Execute()
             }
 
             // Expand wild cards.
-            Include = ExpandWildcards(Include);
-            Exclude = ExpandWildcards(Exclude);
+            (Include, bool expandedInclude) = TryExpandingWildcards(Include, XMakeAttributes.include);
+            (Exclude, bool expandedExclude) = TryExpandingWildcards(Exclude, XMakeAttributes.exclude);
+
+            // Execution stops if wildcard expansion fails due to drive enumeration and related env var is set.
+            if (!(expandedInclude && expandedExclude))
+            {
+                return false;
+            }
 
             // Simple case:  no additional attribute to add and no Exclude.  In this case the
             // ouptuts are simply the inputs.
@@ -126,14 +134,54 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab
             return outputItems;
         }
 
+        /// <summary>
+        /// Attempts to expand wildcards and logs warnings or errors for attempted drive enumeration.
+        /// </summary>
+        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandingWildcards(ITaskItem[] expand, string attributeType)
+        {
+            const string CreateItemTask = nameof(CreateItem);
+
+            string fileSpec;
+            FileMatcher.SearchAction searchAction;
+
+            (expand, searchAction, fileSpec) = ExpandWildcards(expand);
+
+            // Log potential drive enumeration glob anomalies when applicable.
+            if (searchAction == FileMatcher.SearchAction.LogDriveEnumeratingWildcard)
+            {
+                Log.LogWarningWithCodeFromResources(
+                    "WildcardResultsInDriveEnumeration",
+                    EscapingUtilities.UnescapeAll(fileSpec),
+                    attributeType,
+                    CreateItemTask,
+                    BuildEngine.ProjectFileOfTaskNode);
+            }
+            else if (searchAction == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
+            {
+                Log.LogErrorWithCodeFromResources(
+                    "WildcardResultsInDriveEnumeration",
+                    EscapingUtilities.UnescapeAll(fileSpec),
+                    attributeType,
+                    CreateItemTask,
+                    BuildEngine.ProjectFileOfTaskNode);
+            }
+
+            return (expand, !Log.HasLoggedErrors);
+        }
+
         /// <summary>
         /// Expand wildcards in the item list.
         /// </summary>
-        private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
+        private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string FileSpec) ExpandWildcards(ITaskItem[] expand)
         {
+            // Used to detect and log drive enumerating wildcard patterns.
+            string[] files;
+            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;
+            string itemSpec = string.Empty;
+
             if (expand == null)
             {
-                return null;
+                return (null, action, itemSpec);
             }
             else
             {
@@ -142,7 +190,13 @@ private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                 {
                     if (FileMatcher.HasWildcards(i.ItemSpec))
                     {
-                        string[] files = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
+                        (files, action, _) = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
+                        itemSpec = i.ItemSpec;
+                        if (action == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
+                        {
+                            return (expanded.ToArray(), action, itemSpec);
+                        }
+
                         foreach (string file in files)
                         {
                             TaskItem newItem = new TaskItem(i) { ItemSpec = file };
@@ -165,7 +219,7 @@ private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                         expanded.Add(i);
                     }
                 }
-                return expanded.ToArray();
+                return (expanded.ToArray(), action, itemSpec);
             }
         }
 
diff --git a/src/Tasks/CreateManifestResourceName.cs b/src/Tasks/CreateManifestResourceName.cs
index b8b0d2fbf57..49d1b38bd52 100644
--- a/src/Tasks/CreateManifestResourceName.cs
+++ b/src/Tasks/CreateManifestResourceName.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CreateProperty.cs b/src/Tasks/CreateProperty.cs
index 9631f5cb80e..5f9b2c7090b 100644
--- a/src/Tasks/CreateProperty.cs
+++ b/src/Tasks/CreateProperty.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CreateVisualBasicManifestResourceName.cs b/src/Tasks/CreateVisualBasicManifestResourceName.cs
index fe02c57753f..6b0a1f18a25 100644
--- a/src/Tasks/CreateVisualBasicManifestResourceName.cs
+++ b/src/Tasks/CreateVisualBasicManifestResourceName.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Culture.cs b/src/Tasks/Culture.cs
index f2635dac38c..f138332472b 100644
--- a/src/Tasks/Culture.cs
+++ b/src/Tasks/Culture.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/CultureInfoCache.cs b/src/Tasks/CultureInfoCache.cs
index 853c512dcf9..61733113873 100644
--- a/src/Tasks/CultureInfoCache.cs
+++ b/src/Tasks/CultureInfoCache.cs
@@ -6,6 +6,8 @@
 using System.Globalization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -17,35 +19,34 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     internal static class CultureInfoCache
     {
-        private static readonly HashSet<string> ValidCultureNames;
+        private static readonly HashSet<string> ValidCultureNames = InitializeValidCultureNames();
 
-        static CultureInfoCache()
+        static HashSet<string> InitializeValidCultureNames()
         {
-            ValidCultureNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
-
 #if !FEATURE_CULTUREINFO_GETCULTURES
             if (!AssemblyUtilities.CultureInfoHasGetCultures())
             {
-                ValidCultureNames = HardcodedCultureNames;
-                return;
+                return HardcodedCultureNames;
             }
 #endif
-
+            HashSet<string> validCultureNames = new(StringComparer.OrdinalIgnoreCase);
             foreach (CultureInfo cultureName in AssemblyUtilities.GetAllCultures())
             {
-                ValidCultureNames.Add(cultureName.Name);
+                validCultureNames.Add(cultureName.Name);
             }
 
             // https://docs.microsoft.com/en-gb/windows/desktop/Intl/using-pseudo-locales-for-localization-testing
             // These pseudo-locales are available in versions of Windows from Vista and later.
             // However, from Windows 10, version 1803, they are not returned when enumerating the
             // installed cultures, even if the registry keys are set. Therefore, add them to the list manually.
-            var pseudoLocales = new[] { "qps-ploc", "qps-ploca", "qps-plocm", "qps-Latn-x-sh" };
+            string[] pseudoLocales = new[] { "qps-ploc", "qps-ploca", "qps-plocm", "qps-Latn-x-sh" };
 
             foreach (string pseudoLocale in pseudoLocales)
             {
-                ValidCultureNames.Add(pseudoLocale);
+                validCultureNames.Add(pseudoLocale);
             }
+
+            return validCultureNames;
         }
 
         /// <summary>
@@ -920,4 +921,3 @@ internal static bool IsValidCultureString(string name)
 #endif
     }
 }
-
diff --git a/src/Tasks/DataDriven/DataDrivenToolTask.cs b/src/Tasks/DataDriven/DataDrivenToolTask.cs
index 3cee5394793..49e1f88988a 100644
--- a/src/Tasks/DataDriven/DataDrivenToolTask.cs
+++ b/src/Tasks/DataDriven/DataDrivenToolTask.cs
@@ -13,6 +13,8 @@
 using System.Reflection;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.DataDriven
 {
     /// <summary>
diff --git a/src/Tasks/Delegate.cs b/src/Tasks/Delegate.cs
index 563f6c39e0e..d8baa8ef059 100644
--- a/src/Tasks/Delegate.cs
+++ b/src/Tasks/Delegate.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyDependency;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index 0e14335050c..92dd730eca9 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/DependencyFile.cs b/src/Tasks/DependencyFile.cs
index d517f39a296..c3d4ab2f05a 100644
--- a/src/Tasks/DependencyFile.cs
+++ b/src/Tasks/DependencyFile.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index 1f9181ec72e..c36685242c8 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -11,6 +11,8 @@
 using System.Threading.Tasks;
 using Task = System.Threading.Tasks.Task;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -58,6 +60,11 @@ public sealed class DownloadFile : TaskExtension, ICancelableTask
         [Required]
         public string SourceUrl { get; set; }
 
+        /// <summary>
+        /// Gets or sets the number of milliseconds to wait before the request times out.
+        /// </summary>
+        public int Timeout { get; set; } = 100_000;
+
         /// <summary>
         /// Gets or sets a <see cref="HttpMessageHandler"/> to use.  This is used by unit tests to mock a connection to a remote server.
         /// </summary>
@@ -135,7 +142,7 @@ private async Task<bool> ExecuteAsync()
         private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
         {
             // The main reason to use HttpClient vs WebClient is because we can pass a message handler for unit tests to mock
-            using (var client = new HttpClient(HttpMessageHandler ?? new HttpClientHandler(), disposeHandler: true))
+            using (var client = new HttpClient(HttpMessageHandler ?? new HttpClientHandler(), disposeHandler: true) { Timeout = TimeSpan.FromMilliseconds(Timeout) })
             {
                 // Only get the response without downloading the file so we can determine if the file is already up-to-date
                 using (HttpResponseMessage response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false))
@@ -144,11 +151,17 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                     {
                         response.EnsureSuccessStatusCode();
                     }
+#if NET6_0_OR_GREATER
+                    catch (HttpRequestException)
+                    {
+                        throw;
+#else
                     catch (HttpRequestException e)
                     {
-                        // HttpRequestException does not have the status code so its wrapped and thrown here so that later on we can determine
-                        // if a retry is possible based on the status code
+                        // MSBuild History: CustomHttpRequestException was created as a wrapper over HttpRequestException
+                        // so it could include the StatusCode. As of net5.0, the statuscode is now in HttpRequestException.
                         throw new CustomHttpRequestException(e.Message, e.InnerException, response.StatusCode);
+#endif
                     }
 
                     if (!TryGetFileName(response, out string filename))
@@ -179,7 +192,11 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                         {
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
 
-                            using (Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
+                            using (Stream responseStream = await response.Content.ReadAsStreamAsync(
+#if NET6_0_OR_GREATER
+                            cancellationToken
+#endif
+                            ).ConfigureAwait(false))
                             {
                                 await responseStream.CopyToAsync(target, 1024, cancellationToken).ConfigureAwait(false);
                             }
@@ -218,20 +235,34 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
             }
 
             // Some HttpRequestException have an inner exception that has the real error
-            if (actualException is HttpRequestException httpRequestException && httpRequestException.InnerException != null)
+            if (actualException is HttpRequestException httpRequestException)
             {
-                actualException = httpRequestException.InnerException;
+                if (httpRequestException.InnerException != null)
+                {
+                    actualException = httpRequestException.InnerException;
 
-                // An IOException inside of a HttpRequestException means that something went wrong while downloading
-                if (actualException is IOException)
+                    // An IOException inside of a HttpRequestException means that something went wrong while downloading
+                    if (actualException is IOException)
+                    {
+                        return true;
+                    }
+                }
+
+#if NET6_0_OR_GREATER
+                // net5.0 included StatusCode in the HttpRequestException.
+                switch (httpRequestException.StatusCode)
                 {
-                    return true;
+                    case HttpStatusCode.InternalServerError:
+                    case HttpStatusCode.RequestTimeout:
+                        return true;
                 }
             }
+#else
+            }
 
+            // framework workaround for HttpRequestException not containing StatusCode
             if (actualException is CustomHttpRequestException customHttpRequestException)
             {
-                // A wrapped CustomHttpRequestException has the status code from the error
                 switch (customHttpRequestException.StatusCode)
                 {
                     case HttpStatusCode.InternalServerError:
@@ -239,6 +270,7 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
                         return true;
                 }
             }
+#endif
 
             if (actualException is WebException webException)
             {
@@ -285,8 +317,10 @@ private bool TryGetFileName(HttpResponseMessage response, out string filename)
             return !String.IsNullOrWhiteSpace(filename);
         }
 
+#if !NET6_0_OR_GREATER
         /// <summary>
         /// Represents a wrapper around the <see cref="HttpRequestException"/> that also contains the <see cref="HttpStatusCode"/>.
+        /// DEPRECATED as of net5.0, which included the StatusCode in the HttpRequestException class.
         /// </summary>
         private sealed class CustomHttpRequestException : HttpRequestException
         {
@@ -298,6 +332,7 @@ public CustomHttpRequestException(string message, Exception inner, HttpStatusCod
 
             public HttpStatusCode StatusCode { get; }
         }
+#endif
 
         private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
         {
diff --git a/src/Tasks/Error.cs b/src/Tasks/Error.cs
index 8cec712ea53..cbcfe08df2a 100644
--- a/src/Tasks/Error.cs
+++ b/src/Tasks/Error.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ErrorFromResources.cs b/src/Tasks/ErrorFromResources.cs
index 83c5f106d6a..a3b866674e9 100644
--- a/src/Tasks/ErrorFromResources.cs
+++ b/src/Tasks/ErrorFromResources.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -55,13 +57,8 @@ public override bool Execute()
 
                 Log.LogError(null, Code, HelpKeyword, File, 0, 0, 0, 0, message);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("ErrorFromResources.LogErrorFailure", Resource, e.Message);
             }
 
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 47e3075087f..c05a3afb682 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -181,7 +183,7 @@ public ITaskItem[] Outputs
         /// if they aren't used.  ConsoleOutput is a combination of stdout and stderr.
         /// </summary>
         [Output]
-        public ITaskItem[] ConsoleOutput => !ConsoleToMSBuild ? Array.Empty<ITaskItem>(): _nonEmptyOutput.ToArray();
+        public ITaskItem[] ConsoleOutput => !ConsoleToMSBuild ? Array.Empty<ITaskItem>() : _nonEmptyOutput.ToArray();
 
         #endregion
 
@@ -370,7 +372,7 @@ protected override void LogPathToTool(string toolName, string pathToTool)
         /// <param name="message"></param>
         protected override void LogToolCommand(string message)
         {
-            //Dont print the command line if Echo is Off.
+            // Dont print the command line if Echo is Off.
             if (!EchoOff)
             {
                 base.LogToolCommand(Command);
@@ -598,51 +600,37 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                 if (NativeMethodsShared.IsWindows)
                 {
                     commandLine.AppendSwitch("/Q"); // echo off
-                    if(!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
+                    if (!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
                     {
                         commandLine.AppendSwitch("/D"); // do not load AutoRun configuration from the registry (perf)
                     }
                     commandLine.AppendSwitch("/C"); // run then terminate
 
-                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
+                    StringBuilder fileName = null;
+
+                    // Escape special characters that need to be escaped.
+                    for (int i = 0; i < batchFileForCommandLine.Length; i++)
                     {
-                        StringBuilder fileName = null;
+                        char c = batchFileForCommandLine[i];
 
-                        // Escape special characters that need to be escaped.
-                        for (int i = 0; i < batchFileForCommandLine.Length; i++)
+                        if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
                         {
-                            char c = batchFileForCommandLine[i];
-
-                            if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                            // Avoid allocating a new string until we know we have something to escape.
+                            if (fileName == null)
                             {
-                                // Avoid allocating a new string until we know we have something to escape.
-                                if (fileName == null)
-                                {
-                                    fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
-                                    fileName.Append(batchFileForCommandLine, 0, i);
-                                }
-
-                                fileName.Append('^');
+                                fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
+                                fileName.Append(batchFileForCommandLine, 0, i);
                             }
 
-                            fileName?.Append(c);
+                            fileName.Append('^');
                         }
 
-                        if (fileName != null)
-                        {
-                            batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
-                        }
+                        fileName?.Append(c);
                     }
-                    else
+
+                    if (fileName != null)
                     {
-                        // If for some crazy reason the path has a & character and a space in it
-                        // then get the short path of the temp path, which should not have spaces in it
-                        // and then escape the &
-                        if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
-                        {
-                            batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
-                            batchFileForCommandLine = batchFileForCommandLine.Replace("&", "^&");
-                        }
+                        batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
                     }
                 }
 
diff --git a/src/Tasks/ExtractedClassName.cs b/src/Tasks/ExtractedClassName.cs
index 914b98eb8d7..d5288eddbe8 100644
--- a/src/Tasks/ExtractedClassName.cs
+++ b/src/Tasks/ExtractedClassName.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FileIO/GetFileHash.cs b/src/Tasks/FileIO/GetFileHash.cs
index 0a6095e5d58..ab35b01b7b5 100644
--- a/src/Tasks/FileIO/GetFileHash.cs
+++ b/src/Tasks/FileIO/GetFileHash.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FileIO/HashEncoding.cs b/src/Tasks/FileIO/HashEncoding.cs
index ce5eb6be480..bf7939b93ed 100644
--- a/src/Tasks/FileIO/HashEncoding.cs
+++ b/src/Tasks/FileIO/HashEncoding.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal enum HashEncoding
diff --git a/src/Tasks/FileIO/ReadLinesFromFile.cs b/src/Tasks/FileIO/ReadLinesFromFile.cs
index 7b01578a1e0..80690b87af2 100644
--- a/src/Tasks/FileIO/ReadLinesFromFile.cs
+++ b/src/Tasks/FileIO/ReadLinesFromFile.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FileIO/VerifyFileHash.cs b/src/Tasks/FileIO/VerifyFileHash.cs
index 7bc2370e688..5d3739da436 100644
--- a/src/Tasks/FileIO/VerifyFileHash.cs
+++ b/src/Tasks/FileIO/VerifyFileHash.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index 776e48bbddb..1d8df91c6be 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -8,6 +8,8 @@
 using System.IO;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FileState.cs b/src/Tasks/FileState.cs
index af2e2f29897..6d59494bb8d 100644
--- a/src/Tasks/FileState.cs
+++ b/src/Tasks/FileState.cs
@@ -6,6 +6,8 @@
 using System.Runtime.InteropServices;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FindAppConfigFile.cs b/src/Tasks/FindAppConfigFile.cs
index 5899e06f77f..29107b7a10d 100644
--- a/src/Tasks/FindAppConfigFile.cs
+++ b/src/Tasks/FindAppConfigFile.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FindInList.cs b/src/Tasks/FindInList.cs
index ba1e34b3ea6..1c3dac664af 100644
--- a/src/Tasks/FindInList.cs
+++ b/src/Tasks/FindInList.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/FindInvalidProjectReferences.cs b/src/Tasks/FindInvalidProjectReferences.cs
index 54c84eaacdf..84a92a0147a 100644
--- a/src/Tasks/FindInvalidProjectReferences.cs
+++ b/src/Tasks/FindInvalidProjectReferences.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -15,7 +17,7 @@ public class FindInvalidProjectReferences : TaskExtension
     {
         #region Fields
 
-        ///<summary>
+        /// <summary>
         /// Regex for breaking up the platform moniker
         /// Example: XNA, Version=8.0
         /// </summary>
diff --git a/src/Tasks/FormatUrl.cs b/src/Tasks/FormatUrl.cs
index 4942b3d2bed..d6d344db19e 100644
--- a/src/Tasks/FormatUrl.cs
+++ b/src/Tasks/FormatUrl.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -19,13 +21,8 @@ public sealed class FormatUrl : TaskExtension
 
         public override bool Execute()
         {
-#if RUNTIME_TYPE_NETCORE
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(FormatUrl));
-            return false;
-#else
             OutputUrl = InputUrl != null ? PathUtil.Format(InputUrl) : String.Empty;
             return true;
-#endif
         }
     }
 }
diff --git a/src/Tasks/FormatVersion.cs b/src/Tasks/FormatVersion.cs
index c3a156d6a9a..e0d68649b16 100644
--- a/src/Tasks/FormatVersion.cs
+++ b/src/Tasks/FormatVersion.cs
@@ -5,6 +5,8 @@
 using System.Globalization;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -17,7 +19,11 @@ namespace Microsoft.Build.Tasks
     /// </comment>
     public sealed class FormatVersion : TaskExtension
     {
-        private enum _FormatType { Version, Path }
+        private enum _FormatType
+        {
+            Version,
+            Path,
+        }
 
         private _FormatType _formatType = _FormatType.Version;
 
diff --git a/src/Tasks/GenerateApplicationManifest.cs b/src/Tasks/GenerateApplicationManifest.cs
index c69fe1a7155..a6361b25472 100644
--- a/src/Tasks/GenerateApplicationManifest.cs
+++ b/src/Tasks/GenerateApplicationManifest.cs
@@ -5,19 +5,27 @@
 using System.Diagnostics;
 using System.Globalization;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Xml;
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Generates an application manifest for ClickOnce projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateApplicationManifest : GenerateManifestBase
     {
-        private enum _ManifestType { Native, ClickOnce }
+        private enum _ManifestType
+        {
+            Native,
+            ClickOnce,
+        }
 
         private ITaskItem[] _dependencies;
         private ITaskItem[] _files;
@@ -102,6 +110,16 @@ public bool UseApplicationTrust
             set => _useApplicationTrust = value;
         }
 
+        public override bool Execute()
+        {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateApplicationManifest));
+                return false;
+            }
+            return base.Execute();
+        }
+
         protected override Type GetObjectType()
         {
             return typeof(ApplicationManifest);
diff --git a/src/Tasks/GenerateBootstrapper.cs b/src/Tasks/GenerateBootstrapper.cs
index ff94ae73668..85b3cdf2fde 100644
--- a/src/Tasks/GenerateBootstrapper.cs
+++ b/src/Tasks/GenerateBootstrapper.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/GenerateDeploymentManifest.cs b/src/Tasks/GenerateDeploymentManifest.cs
index dceeb90b0ed..6867f27717b 100644
--- a/src/Tasks/GenerateDeploymentManifest.cs
+++ b/src/Tasks/GenerateDeploymentManifest.cs
@@ -5,12 +5,16 @@
 using System.Diagnostics;
 using System.IO;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Generates a deploy manifest for ClickOnce projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateDeploymentManifest : GenerateManifestBase
     {
         private bool? _createDesktopShortcut;
@@ -140,6 +144,7 @@ private bool BuildResolvedSettings(DeployManifest manifest)
             else if (String.IsNullOrEmpty(manifest.Publisher))
             {
                 string org = Util.GetRegisteredOrganization();
+
                 manifest.Publisher = !String.IsNullOrEmpty(org) ? org : manifest.Product;
             }
             Debug.Assert(!String.IsNullOrEmpty(manifest.Publisher));
@@ -147,6 +152,16 @@ private bool BuildResolvedSettings(DeployManifest manifest)
             return true;
         }
 
+        public override bool Execute()
+        {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateDeploymentManifest));
+                return false;
+            }
+            return base.Execute();
+        }
+
         protected override Type GetObjectType()
         {
             return typeof(DeployManifest);
diff --git a/src/Tasks/GenerateLauncher.cs b/src/Tasks/GenerateLauncher.cs
index 12d90d87a3d..683736168cc 100644
--- a/src/Tasks/GenerateLauncher.cs
+++ b/src/Tasks/GenerateLauncher.cs
@@ -3,17 +3,21 @@
 
 using System;
 using System.IO;
+using System.Runtime.Versioning;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Generates a bootstrapper for ClickOnce deployment projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateLauncher : TaskExtension
     {
         private const string LAUNCHER_EXE = "Launcher.exe";
@@ -37,6 +41,12 @@ public sealed class GenerateLauncher : TaskExtension
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateLauncher));
+                return false;
+            }
+
             if (LauncherPath == null)
             {
                 // Launcher lives next to ClickOnce bootstrapper.
@@ -55,17 +65,17 @@ public override bool Execute()
 
             var launcherBuilder = new LauncherBuilder(LauncherPath);
             string entryPointFileName = Path.GetFileName(EntryPoint.ItemSpec);
-            //
+
             // If the EntryPoint specified is apphost.exe or singlefilehost.exe, we need to replace the EntryPoint
             // with the AssemblyName instead since apphost.exe/singlefilehost.exe is an intermediate file for
             // for final published {assemblyname}.exe.
-            //
             if ((entryPointFileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) || 
                 entryPointFileName.Equals(Constants.SingleFileHostExe, StringComparison.InvariantCultureIgnoreCase)) &&
-                !String.IsNullOrEmpty(AssemblyName))
+                !string.IsNullOrEmpty(AssemblyName))
             {
                 entryPointFileName = AssemblyName;
             }
+
             BuildResults results = launcherBuilder.Build(entryPointFileName, OutputPath);
 
             BuildMessage[] messages = results.Messages;
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index 3ad0bf8c681..ef8aed08163 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -16,8 +18,19 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     public abstract class GenerateManifestBase : Task
     {
-        private enum AssemblyType { Unspecified, Managed, Native, Satellite };
-        private enum DependencyType { Install, Prerequisite };
+        private enum AssemblyType
+        {
+            Unspecified,
+            Managed,
+            Native,
+            Satellite,
+        }
+
+        private enum DependencyType
+        {
+            Install,
+            Prerequisite,
+        }
 
         private string _processorArchitecture;
         private int _startTime;
@@ -235,9 +248,8 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
             }
 
             // Fixup for non-ClickOnce case...
-            if (_manifest is ApplicationManifest)
+            if (_manifest is ApplicationManifest applicationManifest)
             {
-                var applicationManifest = _manifest as ApplicationManifest;
                 if (!applicationManifest.IsClickOnceManifest)
                 {
                     // Don't need publicKeyToken attribute for non-ClickOnce case
@@ -260,6 +272,12 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateManifestBase));
+                return false;
+            }
+
             bool success = true;
 
             Type manifestType = GetObjectType();
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index a5f9c7646b3..87e92685ed8 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -9,7 +9,9 @@
 #if FEATURE_RESXREADER_LIVEDESERIALIZATION
 using System.ComponentModel.Design;
 #endif
+#if FEATURE_SYSTEM_CONFIGURATION
 using System.Configuration;
+#endif
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
@@ -24,8 +26,10 @@
 #endif
 using System.Runtime.Serialization;
 using System.Runtime.Serialization.Formatters.Binary;
+#if !FEATURE_ASSEMBLYLOADCONTEXT
 using System.Runtime.Versioning;
 using System.Security;
+#endif
 using System.Text;
 using System.Xml;
 using System.Xml.Linq;
@@ -36,9 +40,9 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.ResourceHandling;
 using Microsoft.Build.Utilities;
-#if FEATURE_COM_INTEROP
 using Microsoft.Win32;
-#endif
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
@@ -250,7 +254,7 @@ public ITaskItem[] FilesWritten
         }
 
         /// <summary>
-        /// The language to use when generating the class source for the strongly typed resource.
+        /// Gets or sets the language to use when generating the class source for the strongly typed resource.
         /// This parameter must match exactly one of the languages used by the CodeDomProvider.
         /// </summary>
         public string StronglyTypedLanguage
@@ -261,7 +265,11 @@ public string StronglyTypedLanguage
                 // try to validate it -- that might prevent future expansion of supported languages.
                 _stronglyTypedLanguage = value;
             }
-            get { return _stronglyTypedLanguage; }
+
+            get
+            {
+                return _stronglyTypedLanguage;
+            }
         }
 
         /// <summary>
@@ -536,29 +544,6 @@ public GenerateResource()
             // do nothing
         }
 
-#if FEATURE_COM_INTEROP
-        /// <summary>
-        /// Static constructor checks the registry opt-out for mark-of-the-web rejection.
-        /// </summary>
-        static GenerateResource()
-        {
-            if (!NativeMethodsShared.IsWindows)
-            {
-                allowMOTW = true;
-                return;
-            }
-            try
-            {
-                object allowUntrustedFiles = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\SDK", "AllowProcessOfUntrustedResourceFiles", null);
-                if (allowUntrustedFiles is String)
-                {
-                    allowMOTW = ((string)allowUntrustedFiles).Equals("true", StringComparison.OrdinalIgnoreCase);
-                }
-            }
-            catch { }
-        }
-#endif
-
         /// <summary>
         /// Logs a Resgen.exe command line that indicates what parameters were
         /// passed to this task. Since this task is replacing Resgen, and we used
@@ -892,10 +877,10 @@ public override bool Execute()
                                 {
                                     foreach (ITaskItem item in _remotedTaskItems)
                                     {
-                                        if (item is MarshalByRefObject)
+                                        if (item is MarshalByRefObject marshalByRefObject)
                                         {
                                             // Tell remoting to forget connections to the taskitem
-                                            RemotingServices.Disconnect((MarshalByRefObject)item);
+                                            RemotingServices.Disconnect(marshalByRefObject);
                                         }
                                     }
                                 }
@@ -920,21 +905,10 @@ public override bool Execute()
             return !Log.HasLoggedErrors && outOfProcExecutionSucceeded;
         }
 
-#if FEATURE_COM_INTEROP
-        private static bool allowMOTW;
+        private static readonly bool AllowMOTW = !NativeMethodsShared.IsWindows || (Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\SDK", "AllowProcessOfUntrustedResourceFiles", null) is string allowUntrustedFiles && allowUntrustedFiles.Equals("true", StringComparison.OrdinalIgnoreCase));
 
         private const string CLSID_InternetSecurityManager = "7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4";
-
-        private const uint ZoneLocalMachine = 0;
-
-        private const uint ZoneIntranet = 1;
-
-        private const uint ZoneTrusted = 2;
-
         private const uint ZoneInternet = 3;
-
-        private const uint ZoneUntrusted = 4;
-
         private static IInternetSecurityManager internetSecurityManager = null;
 
         // Resources can have arbitrarily serialized objects in them which can execute arbitrary code
@@ -942,7 +916,7 @@ public override bool Execute()
         private bool IsDangerous(String filename)
         {
             // If they are opted out, there's no work to do
-            if (allowMOTW)
+            if (AllowMOTW || !NativeMethodsShared.IsWindows)
             {
                 return false;
             }
@@ -1014,12 +988,6 @@ private bool IsDangerous(String filename)
 
             return dangerous;
         }
-#else
-        private bool IsDangerous(String filename)
-        {
-            return false;
-        }
-#endif
 
 #if FEATURE_APPDOMAIN
         /// <summary>
@@ -1548,13 +1516,8 @@ private bool ShouldRebuildResgenOutputFile(string sourceFilePath, string outputF
             {
                 resxFileInfo = _cache.GetResXFileInfo(sourceFilePath, UsePreserializedResources);
             }
-            catch (Exception e)  // Catching Exception, but rethrowing unless it's a well-known exception.
+            catch (Exception e)  when (!ExceptionHandling.NotExpectedIoOrXmlException(e) || e is MSBuildResXException)
             {
-                if (ExceptionHandling.NotExpectedIoOrXmlException(e) && !(e is MSBuildResXException))
-                {
-                    throw;
-                }
-
                 // Return true, so that resource processing will display the error
                 // No point logging a duplicate error here as well
                 return true;
@@ -1938,7 +1901,7 @@ private bool NeedSeparateAppDomain()
 
                         return true;
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                     {
                         // DDB#9819
                         // Customers have reported the following exceptions coming out of this method's call to GetType():
@@ -1949,8 +1912,6 @@ private bool NeedSeparateAppDomain()
                         // Any problem loading the type will get logged later when the resource reader tries it.
                         //
                         // XmlException or an IO exception is also possible from an invalid input file.
-                        if (ExceptionHandling.IsCriticalException(e))
-                            throw;
 
                         // If there was any problem parsing the .resx then log a message and
                         // fall back to using a separate AppDomain.
@@ -2615,9 +2576,8 @@ private bool ProcessFile(string inFile, string outFileOrDir)
             }
             catch (ArgumentException ae)
             {
-                if (ae.InnerException is XmlException)
+                if (ae.InnerException is XmlException xe)
                 {
-                    XmlException xe = (XmlException) ae.InnerException;
                     _logger.LogErrorWithCodeFromResources(null, FileUtilities.GetFullPathNoThrow(inFile), xe.LineNumber,
                         xe.LinePosition, 0, 0, "General.InvalidResxFile", xe.Message);
                 }
@@ -2791,13 +2751,9 @@ e is SerializationException ||
                     {
                         Directory.Delete(currentOutputDirectory); // Remove output directory if empty
                     }
-                    catch (Exception e)
+                    catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                     {
                         // Fail silently (we are not even checking if the call to File.Delete succeeded)
-                        if (ExceptionHandling.IsCriticalException(e))
-                        {
-                            throw;
-                        }
                     }
                 }
                 return false;
@@ -3300,8 +3256,11 @@ private static bool ContainsProperlyNamedResourcesFiles(Assembly a, bool mainAss
         {
             String postfix = mainAssembly ? ".resources" : a.GetName().CultureInfo.Name + ".resources";
             foreach (String manifestResourceName in a.GetManifestResourceNames())
+            {
                 if (manifestResourceName.EndsWith(postfix, StringComparison.OrdinalIgnoreCase))
                     return true;
+            }
+
             return false;
         }
 #endif
@@ -3347,13 +3306,13 @@ private void WriteBinaryResources(ReaderInfo reader, string filename)
         {
             if (_usePreserializedResources && HaveSystemResourcesExtensionsReference)
             {
-                WriteResources(reader, new PreserializedResourceWriter(File.OpenWrite(filename))); // closes writer for us
+                WriteResources(reader, new PreserializedResourceWriter(new FileStream(filename, FileMode.Create, FileAccess.Write, FileShare.None))); // closes writer for us
                 return;
             }
 
             try
             {
-                WriteResources(reader, new ResourceWriter(File.OpenWrite(filename))); // closes writer for us
+                WriteResources(reader, new ResourceWriter(new FileStream(filename, FileMode.Create, FileAccess.Write, FileShare.None))); // closes writer for us
             }
             catch (PreserializedResourceWriterRequiredException)
             {
@@ -3448,7 +3407,7 @@ private void CreateStronglyTypedResources(ReaderInfo reader, String outFile, Str
             // Generate the STR class
             String[] errors;
             bool generateInternalClass = !_stronglyTypedClassIsPublic;
-            //StronglyTypedResourcesNamespace can be null and this is ok.
+            // StronglyTypedResourcesNamespace can be null and this is ok.
             // If it is null then the default namespace (=stronglyTypedNamespace) is used.
             CodeCompileUnit ccu = StronglyTypedResourceBuilder.Create(
                     reader.resourcesHashTable,
@@ -3594,7 +3553,9 @@ private void ReadTextResources(ReaderInfo reader, String fileName)
                     {
                         String skip = sr.ReadLine();
                         if (skip.Equals("strings]"))
+                        {
                             _logger.LogWarningWithCodeFromResources(null, fileName, sr.LineNumber - 1, 1, 0, 0, "GenerateResource.ObsoleteStringsTag");
+                        }
                         else
                         {
                             throw new TextFileException(_logger.FormatResourceString("GenerateResource.UnexpectedInfBracket", "[" + skip), fileName, sr.LineNumber - 1, 1);
@@ -3874,7 +3835,7 @@ internal sealed class LineNumberStreamReader : StreamReader
             private int _col;
 
             internal LineNumberStreamReader(String fileName, Encoding encoding, bool detectEncoding)
-                : base(File.Open(fileName, FileMode.Open, FileAccess.Read), encoding, detectEncoding)
+                : base(File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.Read), encoding, detectEncoding)
             {
                 _lineNumber = 1;
                 _col = 0;
@@ -3913,7 +3874,9 @@ public override int Read([In, Out] char[] chars, int index, int count)
                         _col = 0;
                     }
                     else
+                    {
                         _col++;
+                    }
                 }
                 return r;
             }
@@ -4049,12 +4012,8 @@ private Assembly GetAssemblyByPath(string pathToAssembly, bool throwOnError)
                 {
                     _cachedAssemblies[pathToAssembly] = Assembly.UnsafeLoadFrom(pathToAssembly);
                 }
-                catch
+                catch when (!throwOnError)
                 {
-                    if (throwOnError)
-                    {
-                        throw;
-                    }
                 }
             }
 
diff --git a/src/Tasks/GenerateTrustInfo.cs b/src/Tasks/GenerateTrustInfo.cs
index 9dbd8e79e4d..6f8c745bbf4 100644
--- a/src/Tasks/GenerateTrustInfo.cs
+++ b/src/Tasks/GenerateTrustInfo.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -85,16 +87,9 @@ public override bool Execute()
                 Log.LogErrorWithCodeFromResources("GenerateManifest.NoPermissionSetForTargetZone", dotNetVersion);
                 return false;
             }
-            catch (ArgumentException ex)
+            catch (ArgumentException ex) when (String.Equals(ex.ParamName, "TargetZone", StringComparison.OrdinalIgnoreCase))
             {
-                if (String.Equals(ex.ParamName, "TargetZone", StringComparison.OrdinalIgnoreCase))
-                {
-                    Log.LogWarningWithCodeFromResources("GenerateManifest.InvalidItemValue", "TargetZone", TargetZone);
-                }
-                else
-                {
-                    throw;
-                }
+                Log.LogWarningWithCodeFromResources("GenerateManifest.InvalidItemValue", "TargetZone", TargetZone);
             }
 
             // Write trust-info back to a stand-alone trust file
diff --git a/src/Tasks/GetAssemblyIdentity.cs b/src/Tasks/GetAssemblyIdentity.cs
index a59a980cc30..92edc4a81af 100644
--- a/src/Tasks/GetAssemblyIdentity.cs
+++ b/src/Tasks/GetAssemblyIdentity.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index c86c88199d7..9787b51e366 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable enable
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -45,76 +44,24 @@ public class GetCompatiblePlatform : TaskExtension
 
         public GetCompatiblePlatform()
         {
-            AnnotatedProjects = new ITaskItem[0];
+            AnnotatedProjects = Array.Empty<ITaskItem>();
             CurrentProjectPlatform = string.Empty;
             PlatformLookupTable = string.Empty;
         }
 
         public override bool Execute()
         {
-            Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(PlatformLookupTable);
-
+            
             AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
             for (int i = 0; i < AnnotatedProjects.Length; i++)
             {
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
 
-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
-
-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))
-                {
-                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", AssignedProjectsWithPlatform[i].ItemSpec);
-                    continue;
-                }
-
+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata("Platform");
+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
                 string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable");
-                // Pull platformlookuptable metadata from the referenced project. This allows custom
-                // mappings on a per-ProjectReference basis.
-                Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);
-
-                HashSet<string> projectReferencePlatforms = new HashSet<string>();
-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
-                {
-                    projectReferencePlatforms.Add(s);
-                }
-
-                string buildProjectReferenceAs = string.Empty;
 
-                // Prefer matching platforms
-                if (projectReferencePlatforms.Contains(CurrentProjectPlatform))
-                {
-                    buildProjectReferenceAs = CurrentProjectPlatform;
-                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.SamePlatform");
-                }
-                // Prioritize PlatformLookupTable **metadata** attached to the ProjectReference item
-                // before the current project's table. We do this to allow per-ProjectReference fine tuning.
-                else if (projectReferenceLookupTable != null &&
-                        projectReferenceLookupTable.ContainsKey(CurrentProjectPlatform) &&
-                        projectReferencePlatforms.Contains(projectReferenceLookupTable[CurrentProjectPlatform]))
-                {
-                    buildProjectReferenceAs = projectReferenceLookupTable[CurrentProjectPlatform];
-                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, projectReferenceLookupTableMetadata);
-                }
-                // Current project's translation table follows
-                else if (currentProjectLookupTable != null &&
-                        currentProjectLookupTable.ContainsKey(CurrentProjectPlatform) &&
-                        projectReferencePlatforms.Contains(currentProjectLookupTable[CurrentProjectPlatform]))
-                {
-                    buildProjectReferenceAs = currentProjectLookupTable[CurrentProjectPlatform];
-                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, PlatformLookupTable);
-                }
-                // AnyCPU if possible
-                else if (projectReferencePlatforms.Contains("AnyCPU"))
-                {
-                    buildProjectReferenceAs = "AnyCPU";
-                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.AnyCPUDefault");
-                }
-                else
-                {
-                    // Keep NearestPlatform empty, log a warning. Common.CurrentVersion.targets will undefine 
-                    // Platform/PlatformTarget when this is the case.
-                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoCompatiblePlatformFound", AssignedProjectsWithPlatform[i].ItemSpec);
-                }
+                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(referencedProjectPlatform, projectReferencePlatformsMetadata, projectReferenceLookupTableMetadata, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, CurrentProjectPlatform, Log);
 
                 AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
                 Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.DisplayChosenPlatform", AssignedProjectsWithPlatform[i].ItemSpec, buildProjectReferenceAs);
@@ -122,33 +69,5 @@ public override bool Execute()
 
             return !Log.HasLoggedErrors;
         }
-
-        private Dictionary<string, string>? ExtractLookupTable(string stringTable)
-        {
-            if (string.IsNullOrEmpty(stringTable))
-            {
-                return null;
-            }
-
-            Dictionary<string, string> table = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-
-            foreach (string s in stringTable.Trim().Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
-            {
-                string[] keyVal = s.Trim().Split(MSBuildConstants.EqualsChar);
-
-                // Invalid table, don't use it.
-                if (keyVal.Length != 2 || string.IsNullOrEmpty(keyVal[0]) || string.IsNullOrEmpty(keyVal[1]))
-                {
-                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.InvalidLookupTableFormat", stringTable);
-                    return null;
-                }
-
-                table[keyVal[0]] = keyVal[1];
-            }
-
-            Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.LookupTableParsed", stringTable);
-
-            return table;
-        }
     }
 }
diff --git a/src/Tasks/GetFrameworkPath.cs b/src/Tasks/GetFrameworkPath.cs
index ee7e87ec6b6..5793e004a7c 100644
--- a/src/Tasks/GetFrameworkPath.cs
+++ b/src/Tasks/GetFrameworkPath.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -12,26 +14,6 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     public class GetFrameworkPath : TaskExtension
     {
-        static GetFrameworkPath()
-        {
-            s_path           = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Latest));
-            s_version11Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version11));
-            s_version20Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20));
-            s_version30Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version30));
-            s_version35Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35));
-            s_version40Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40));
-            s_version45Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version45));
-            s_version451Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version451));
-            s_version452Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version452));
-            s_version46Path  = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version46));
-            s_version461Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version461));
-            s_version462Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version462));
-            s_version47Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version47));
-            s_version471Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version471));
-            s_version472Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version472));
-            s_version48Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version48));
-        }
-
         #region ITask Members
 
         /// <summary>
@@ -50,23 +32,22 @@ public override bool Execute()
         // it still seems to give an advantage perhaps because there is one less string copy.
         // In a large build, this adds up.
         // PERF NOTE: We also only find paths we are actually asked for (via <Output> tags)
-
-        private static readonly Lazy<string> s_path;
-        private static readonly Lazy<string> s_version11Path;
-        private static readonly Lazy<string> s_version20Path;
-        private static readonly Lazy<string> s_version30Path;
-        private static readonly Lazy<string> s_version35Path;
-        private static readonly Lazy<string> s_version40Path;
-        private static readonly Lazy<string> s_version45Path;
-        private static readonly Lazy<string> s_version451Path;
-        private static readonly Lazy<string> s_version452Path;
-        private static readonly Lazy<string> s_version46Path;
-        private static readonly Lazy<string> s_version461Path;
-        private static readonly Lazy<string> s_version462Path;
-        private static readonly Lazy<string> s_version47Path;
-        private static readonly Lazy<string> s_version471Path;
-        private static readonly Lazy<string> s_version472Path;
-        private static readonly Lazy<string> s_version48Path;
+        private static readonly Lazy<string> s_path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Latest));
+        private static readonly Lazy<string> s_version11Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version11));
+        private static readonly Lazy<string> s_version20Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20));
+        private static readonly Lazy<string> s_version30Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version30));
+        private static readonly Lazy<string> s_version35Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35));
+        private static readonly Lazy<string> s_version40Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40));
+        private static readonly Lazy<string> s_version45Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version45));
+        private static readonly Lazy<string> s_version451Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version451));
+        private static readonly Lazy<string> s_version452Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version452));
+        private static readonly Lazy<string> s_version46Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version46));
+        private static readonly Lazy<string> s_version461Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version461));
+        private static readonly Lazy<string> s_version462Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version462));
+        private static readonly Lazy<string> s_version47Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version47));
+        private static readonly Lazy<string> s_version471Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version471));
+        private static readonly Lazy<string> s_version472Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version472));
+        private static readonly Lazy<string> s_version48Path = new Lazy<string>(() => ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version48));
 
         /// <summary>
         /// Path to the latest framework, whatever version it happens to be
diff --git a/src/Tasks/GetFrameworkSDKPath.cs b/src/Tasks/GetFrameworkSDKPath.cs
index bff7ee77f87..99555f83897 100644
--- a/src/Tasks/GetFrameworkSDKPath.cs
+++ b/src/Tasks/GetFrameworkSDKPath.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -310,7 +312,7 @@ public string FrameworkSdkVersion461Path
         /// <returns>true</returns>
         public override bool Execute()
         {
-            //Does Nothing: getters do all the work
+            // Does Nothing: getters do all the work
 
             return true;
         }
diff --git a/src/Tasks/GetInstalledSDKLocations.cs b/src/Tasks/GetInstalledSDKLocations.cs
index e5e8195e1f8..fbbd450b0df 100644
--- a/src/Tasks/GetInstalledSDKLocations.cs
+++ b/src/Tasks/GetInstalledSDKLocations.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -137,13 +139,8 @@ public override bool Execute()
                 Version platformVersion = Version.Parse(TargetPlatformVersion);
                 installedSDKs = ToolLocationHelper.GetPlatformExtensionSDKLocationsAndVersions(SDKDirectoryRoots, SDKExtensionDirectoryRoots, SDKRegistryRoot, TargetPlatformIdentifier, platformVersion);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("GetInstalledSDKs.CouldNotGetSDKList", e.Message);
             }
 
diff --git a/src/Tasks/GetReferenceAssemblyPaths.cs b/src/Tasks/GetReferenceAssemblyPaths.cs
index f3b9f3e2467..f0be08e771c 100644
--- a/src/Tasks/GetReferenceAssemblyPaths.cs
+++ b/src/Tasks/GetReferenceAssemblyPaths.cs
@@ -7,7 +7,11 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
+#if FEATURE_GAC
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
+#endif
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index dfc8d0050ac..d559c588cc8 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -17,6 +17,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -271,7 +273,7 @@ internal bool Execute(GetAssemblyName getAssemblyName, GetAssemblyRuntimeVersion
 
                 GenerateOutputItems();
 
-                if (_exceptions.Count > 0 && LogCacheFileExceptions)
+                if (_exceptions.Any() && LogCacheFileExceptions)
                 {
                     foreach (string exceptionMessage in _exceptions)
                     {
@@ -279,13 +281,8 @@ internal bool Execute(GetAssemblyName getAssemblyName, GetAssemblyRuntimeVersion
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("GetSDKReferenceFiles.CouldNotGetSDKReferenceFiles", e.Message);
             }
 
@@ -1095,13 +1092,8 @@ internal bool IsAssemblyListCacheFileUpToDate(string sdkIdentity, string sdkRoot
                         return true;
                     }
                 }
-                catch (Exception ex)
+                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                 {
-                    if (ExceptionHandling.IsCriticalException(ex))
-                    {
-                        throw;
-                    }
-
                     // Queue up for later logging, does not matter if the cache got written
                     _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("GetSDKReferenceFiles.ProblemGeneratingHash", currentAssembly, ex.Message));
 
@@ -1134,13 +1126,8 @@ private SdkReferenceInfo GetSDKReferenceInfo(string referencePath)
                         }
                     }
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     // Queue up for later logging, does not matter if the cache got written
                     _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("GetSDKReferenceFiles.ProblemGettingAssemblyMetadata", referencePath, e.Message));
                 }
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index 81699764e51..4e093b6e2b0 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -5,7 +5,8 @@
 using System.Security.Cryptography;
 using System.Text;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Shared;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
@@ -13,12 +14,22 @@ namespace Microsoft.Build.Tasks
     /// Generates a hash of a given ItemGroup items. Metadata is not considered in the hash.
     /// </summary>
     /// <remarks>
-    /// Currently uses SHA1. Implementation subject to change between MSBuild versions. Not
-    /// intended as a cryptographic security measure, only uniqueness between build executions.
+    /// Currently uses SHA1. Implementation subject to change between MSBuild versions.
+    /// This class is not intended as a cryptographic security measure, only uniqueness between build executions.
     /// </remarks>
     public class Hash : TaskExtension
     {
         private const char ItemSeparatorCharacter = '\u2028';
+        private static readonly Encoding s_encoding = Encoding.UTF8;
+        private static readonly byte[] s_itemSeparatorCharacterBytes = s_encoding.GetBytes(new char[] { ItemSeparatorCharacter });
+
+        // Size of buffer where bytes of the strings are stored until sha1.TransformBlock is to be run on them.
+        // It is needed to get a balance between amount of costly sha1.TransformBlock calls and amount of allocated memory.
+        private const int Sha1BufferSize = 512;
+
+        // Size of chunks in which ItemSpecs would be cut.
+        // We have chosen this length so itemSpecChunkByteBuffer rented from ArrayPool will be close but not bigger than 512.
+        private const int MaxInputChunkLength = 169;
 
         /// <summary>
         /// Items from which to generate a hash.
@@ -40,58 +51,107 @@ public class Hash : TaskExtension
         /// <summary>
         /// Execute the task.
         /// </summary>
+        [System.Diagnostics.CodeAnalysis.SuppressMessage("Security", "CA5350:Do Not Use Weak Cryptographic Algorithms", Justification = "This is not intended as a cryptographic security measure, only for uniqueness between build executions.")]
         public override bool Execute()
         {
             if (ItemsToHash?.Length > 0)
             {
                 using (var sha1 = SHA1.Create())
                 {
-                    var concatenatedItemStringSize = ComputeStringSize(ItemsToHash);
+                    // Buffer in which bytes of the strings are to be stored until their number reaches the limit size.
+                    // Once the limit is reached, the sha1.TransformBlock is to be run on all the bytes of this buffer.
+                    byte[] sha1Buffer = null;
 
-                    var hashStringSize = sha1.HashSize;
+                    // Buffer in which bytes of items' ItemSpec are to be stored.
+                    byte[] itemSpecChunkByteBuffer = null;
 
-                    using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))
+                    try
                     {
-                        foreach (var item in ItemsToHash)
+                        sha1Buffer = System.Buffers.ArrayPool<byte>.Shared.Rent(Sha1BufferSize);
+                        itemSpecChunkByteBuffer = System.Buffers.ArrayPool<byte>.Shared.Rent(s_encoding.GetMaxByteCount(MaxInputChunkLength));
+
+                        int sha1BufferPosition = 0;
+                        for (int i = 0; i < ItemsToHash.Length; i++)
                         {
-                            string itemSpec = item.ItemSpec;
-                            stringBuilder.Append(IgnoreCase ? itemSpec.ToUpperInvariant() : itemSpec);
-                            stringBuilder.Append(ItemSeparatorCharacter);
-                        }
+                            string itemSpec = IgnoreCase ? ItemsToHash[i].ItemSpec.ToUpperInvariant() : ItemsToHash[i].ItemSpec;
 
-                        var hash = sha1.ComputeHash(Encoding.UTF8.GetBytes(stringBuilder.ToString()));
+                            // Slice the itemSpec string into chunks of reasonable size and add them to sha1 buffer.
+                            for (int itemSpecPosition = 0; itemSpecPosition < itemSpec.Length; itemSpecPosition += MaxInputChunkLength)
+                            {
+                                int charsToProcess = Math.Min(itemSpec.Length - itemSpecPosition, MaxInputChunkLength);
+                                int byteCount = s_encoding.GetBytes(itemSpec, itemSpecPosition, charsToProcess, itemSpecChunkByteBuffer, 0);
 
-                        stringBuilder.Clear();
+                                sha1BufferPosition = AddBytesToSha1Buffer(sha1, sha1Buffer, sha1BufferPosition, Sha1BufferSize, itemSpecChunkByteBuffer, byteCount);
+                            }
 
-                        foreach (var b in hash)
-                        {
-                            stringBuilder.Append(b.ToString("x2"));
+                            sha1BufferPosition = AddBytesToSha1Buffer(sha1, sha1Buffer, sha1BufferPosition, Sha1BufferSize, s_itemSeparatorCharacterBytes, s_itemSeparatorCharacterBytes.Length);
                         }
 
-                        HashResult = stringBuilder.ToString();
+                        sha1.TransformFinalBlock(sha1Buffer, 0, sha1BufferPosition);
+
+                        using (var stringBuilder = new ReuseableStringBuilder(sha1.HashSize))
+                        {
+                            foreach (var b in sha1.Hash)
+                            {
+                                stringBuilder.Append(b.ToString("x2"));
+                            }
+                            HashResult = stringBuilder.ToString();
+                        }
+                    }
+                    finally
+                    {
+                        if (sha1Buffer != null)
+                        {
+                            System.Buffers.ArrayPool<byte>.Shared.Return(sha1Buffer);
+                        }
+                        if (itemSpecChunkByteBuffer != null)
+                        {
+                            System.Buffers.ArrayPool<byte>.Shared.Return(itemSpecChunkByteBuffer);
+                        }
                     }
                 }
             }
-
             return true;
         }
 
-        private int ComputeStringSize(ITaskItem[] itemsToHash)
+        /// <summary>
+        /// Add bytes to the sha1 buffer. Once the limit size is reached, sha1.TransformBlock is called and the buffer is flushed.
+        /// </summary>
+        /// <param name="sha1">Hashing algorithm sha1.</param>
+        /// <param name="sha1Buffer">The sha1 buffer which stores bytes of the strings. Bytes should be added to this buffer.</param>
+        /// <param name="sha1BufferPosition">Number of used bytes of the sha1 buffer.</param>
+        /// <param name="sha1BufferSize">The size of sha1 buffer.</param>
+        /// <param name="byteBuffer">Bytes buffer which contains bytes to be written to sha1 buffer.</param>
+        /// <param name="byteCount">Amount of bytes that are to be added to sha1 buffer.</param>
+        /// <returns>Updated sha1BufferPosition.</returns>
+        private int AddBytesToSha1Buffer(SHA1 sha1, byte[] sha1Buffer, int sha1BufferPosition, int sha1BufferSize, byte[] byteBuffer, int byteCount)
         {
-            if (itemsToHash.Length == 0)
+            int bytesProcessed = 0;
+            while (sha1BufferPosition + byteCount >= sha1BufferSize)
             {
-                return 0;
-            }
+                int sha1BufferFreeSpace = sha1BufferSize - sha1BufferPosition;
 
-            var totalItemSize = 0;
+                if (sha1BufferPosition == 0)
+                {
+                    // If sha1 buffer is empty and bytes number is big enough there is no need to copy bytes to sha1 buffer.
+                    // Pass the bytes to TransformBlock right away.
+                    sha1.TransformBlock(byteBuffer, bytesProcessed, sha1BufferSize, null, 0);
+                }
+                else
+                {
+                    Array.Copy(byteBuffer, bytesProcessed, sha1Buffer, sha1BufferPosition, sha1BufferFreeSpace);
+                    sha1.TransformBlock(sha1Buffer, 0, sha1BufferSize, null, 0);
+                    sha1BufferPosition = 0;
+                }
 
-            foreach (var item in itemsToHash)
-            {
-                totalItemSize += item.ItemSpec.Length;
+                bytesProcessed += sha1BufferFreeSpace;
+                byteCount -= sha1BufferFreeSpace;
             }
 
-            // Add one ItemSeparatorCharacter per item
-            return totalItemSize + itemsToHash.Length;
+            Array.Copy(byteBuffer, bytesProcessed, sha1Buffer, sha1BufferPosition, byteCount);
+            sha1BufferPosition += byteCount;
+
+            return sha1BufferPosition;
         }
     }
 }
diff --git a/src/Tasks/IAnalyzerHostObject.cs b/src/Tasks/IAnalyzerHostObject.cs
index 4bd45dcc42d..31a9ee6a777 100644
--- a/src/Tasks/IAnalyzerHostObject.cs
+++ b/src/Tasks/IAnalyzerHostObject.cs
@@ -4,6 +4,8 @@
 using System.Runtime.InteropServices;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IComReferenceResolver.cs b/src/Tasks/IComReferenceResolver.cs
index af69306d2c1..d6c14afc2df 100644
--- a/src/Tasks/IComReferenceResolver.cs
+++ b/src/Tasks/IComReferenceResolver.cs
@@ -4,6 +4,8 @@
 // TYPELIBATTR clashes with the one in InteropServices.
 using TYPELIBATTR = System.Runtime.InteropServices.ComTypes.TYPELIBATTR;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ICscHostObject.cs b/src/Tasks/ICscHostObject.cs
index b7a64be43ae..ffb8654611c 100644
--- a/src/Tasks/ICscHostObject.cs
+++ b/src/Tasks/ICscHostObject.cs
@@ -4,6 +4,8 @@
 using System.Runtime.InteropServices;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/ICscHostObject2.cs b/src/Tasks/ICscHostObject2.cs
index fe8373dc102..b34b294351c 100644
--- a/src/Tasks/ICscHostObject2.cs
+++ b/src/Tasks/ICscHostObject2.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/ICscHostObject3.cs b/src/Tasks/ICscHostObject3.cs
index 3c6f41be6b2..7ade210735a 100644
--- a/src/Tasks/ICscHostObject3.cs
+++ b/src/Tasks/ICscHostObject3.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/ICscHostObject4.cs b/src/Tasks/ICscHostObject4.cs
index 61a0746ccab..7ce014ed29f 100644
--- a/src/Tasks/ICscHostObject4.cs
+++ b/src/Tasks/ICscHostObject4.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObject.cs b/src/Tasks/IVbcHostObject.cs
index 9a1873d6442..5c28314e04f 100644
--- a/src/Tasks/IVbcHostObject.cs
+++ b/src/Tasks/IVbcHostObject.cs
@@ -4,6 +4,8 @@
 using System.Runtime.InteropServices;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObject2.cs b/src/Tasks/IVbcHostObject2.cs
index 2c255ad86a8..8d8faf1211a 100644
--- a/src/Tasks/IVbcHostObject2.cs
+++ b/src/Tasks/IVbcHostObject2.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObject3.cs b/src/Tasks/IVbcHostObject3.cs
index a76134d0746..ea4f5434f6c 100644
--- a/src/Tasks/IVbcHostObject3.cs
+++ b/src/Tasks/IVbcHostObject3.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObject4.cs b/src/Tasks/IVbcHostObject4.cs
index eff3f3777f7..9e73dd5581b 100644
--- a/src/Tasks/IVbcHostObject4.cs
+++ b/src/Tasks/IVbcHostObject4.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObject5.cs b/src/Tasks/IVbcHostObject5.cs
index 4c2efaab1fb..bbf959e4f68 100644
--- a/src/Tasks/IVbcHostObject5.cs
+++ b/src/Tasks/IVbcHostObject5.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/IVbcHostObjectFreeThreaded.cs b/src/Tasks/IVbcHostObjectFreeThreaded.cs
index bf1b5cf5c69..21a0e1f0a80 100644
--- a/src/Tasks/IVbcHostObjectFreeThreaded.cs
+++ b/src/Tasks/IVbcHostObjectFreeThreaded.cs
@@ -3,6 +3,8 @@
 
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Hosting
 {
     /// <summary>
diff --git a/src/Tasks/InstalledSDKResolver.cs b/src/Tasks/InstalledSDKResolver.cs
index ac0ff362d0b..58b97e46883 100644
--- a/src/Tasks/InstalledSDKResolver.cs
+++ b/src/Tasks/InstalledSDKResolver.cs
@@ -7,10 +7,12 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
-    ///There is no search path element because the only way to get this resolver is by having the SDKName metadata on the reference.
+    /// There is no search path element because the only way to get this resolver is by having the SDKName metadata on the reference.
     /// </summary>
     internal class InstalledSDKResolver : Resolver
     {
diff --git a/src/Tasks/InvalidParameterValueException.cs b/src/Tasks/InvalidParameterValueException.cs
index de281e01cf6..7b9f650b554 100644
--- a/src/Tasks/InvalidParameterValueException.cs
+++ b/src/Tasks/InvalidParameterValueException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/LC.cs b/src/Tasks/LC.cs
index 9939247ea13..d219536f01d 100644
--- a/src/Tasks/LC.cs
+++ b/src/Tasks/LC.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -99,7 +101,7 @@ public string SdkToolsPath
         /// </remarks>
         public override bool Execute()
         {
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(LC));
+            Log.LogErrorWithCodeFromResources("TaskRequiresFrameworkFailure", nameof(LC));
             return false;
         }
 #endif
diff --git a/src/Tasks/ListOperators/FindUnderPath.cs b/src/Tasks/ListOperators/FindUnderPath.cs
index 46acb04aad8..9168bc44376 100644
--- a/src/Tasks/ListOperators/FindUnderPath.cs
+++ b/src/Tasks/ListOperators/FindUnderPath.cs
@@ -8,6 +8,8 @@
 
 using Microsoft.NET.StringTools;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ListOperators/RemoveDuplicates.cs b/src/Tasks/ListOperators/RemoveDuplicates.cs
index 85562f5183f..f1a806b7a77 100644
--- a/src/Tasks/ListOperators/RemoveDuplicates.cs
+++ b/src/Tasks/ListOperators/RemoveDuplicates.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 6624a318f53..fd499d4bc93 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -1,17 +1,19 @@
 ﻿// Taken from https://github.com/cklutz/LockCheck, MIT license.
 // Copyright (C) Christian Klutz
 
-#if !RUNTIME_TYPE_NETCORE && !MONO
-
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Linq;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
+    [SupportedOSPlatform("windows")]
     internal class LockCheck
     {
         [Flags]
@@ -53,10 +55,57 @@ private static extern int RmRegisterResources(uint pSessionHandle,
             uint nServices,
             string[] rgsServiceNames);
 
+        /// <summary>
+        /// Starts a new Restart Manager session.
+        /// A maximum of 64 Restart Manager sessions per user session
+        /// can be open on the system at the same time. When this
+        /// function starts a session, it returns a session handle
+        /// and session key that can be used in subsequent calls to
+        /// the Restart Manager API.
+        /// </summary>
+        /// <param name="pSessionHandle">
+        /// A pointer to the handle of a Restart Manager session.
+        /// The session handle can be passed in subsequent calls
+        /// to the Restart Manager API.
+        /// </param>
+        /// <param name="dwSessionFlags">
+        /// Reserved. This parameter should be 0.
+        /// </param>
+        /// <param name="strSessionKey">
+        /// A null-terminated string that contains the session key
+        /// to the new session. The string must be allocated before
+        /// calling the RmStartSession function.
+        /// </param>
+        /// <returns>System error codes that are defined in Winerror.h.</returns>
+        /// <remarks>
+        /// The Rm­­StartSession function doesn’t properly null-terminate
+        /// the session key, even though the function is documented as
+        /// returning a null-terminated string. To work around this bug,
+        /// we pre-fill the buffer with null characters so that whatever
+        /// ends gets written will have a null terminator (namely, one of
+        /// the null characters we placed ahead of time).
+        /// <para>
+        /// see <see href="http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx"/>.
+        /// </para>
+        /// </remarks>
         [DllImport(RestartManagerDll, CharSet = CharSet.Unicode)]
-        private static extern int RmStartSession(out uint pSessionHandle,
-            int dwSessionFlags, StringBuilder strSessionKey);
-
+        private static extern unsafe int RmStartSession(
+            out uint pSessionHandle,
+            int dwSessionFlags,
+            char* strSessionKey);
+
+        /// <summary>
+        /// Ends the Restart Manager session.
+        /// This function should be called by the primary installer that
+        /// has previously started the session by calling the <see cref="RmStartSession"/>
+        /// function. The RmEndSession function can be called by a secondary installer
+        /// that is joined to the session once no more resources need to be registered
+        /// by the secondary installer.
+        /// </summary>
+        /// <param name="pSessionHandle">A handle to an existing Restart Manager session.</param>
+        /// <returns>
+        /// The function can return one of the system error codes that are defined in Winerror.h.
+        /// </returns>
         [DllImport(RestartManagerDll)]
         private static extern int RmEndSession(uint pSessionHandle);
 
@@ -81,8 +130,6 @@ internal struct RM_UNIQUE_PROCESS
             public FILETIME ProcessStartTime;
         }
 
-        const int RM_INVALID_SESSION = -1;
-        const int RM_INVALID_PROCESS = -1;
         const int CCH_RM_MAX_APP_NAME = 255;
         const int CCH_RM_MAX_SVC_NAME = 63;
         const int ERROR_SEM_TIMEOUT = 121;
@@ -207,11 +254,16 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
             }
 
             const int maxRetries = 6;
+            uint handle;
+            int res;
 
-            // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
-            var key = new StringBuilder(new string('\0', CCH_RM_SESSION_KEY + 1));
+            unsafe
+            {
+                // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
+                char* key = stackalloc char[CCH_RM_SESSION_KEY + 1];
+                res = RmStartSession(out handle, 0, key);
+            }
 
-            int res = RmStartSession(out uint handle, 0, key);
             if (res != 0)
             {
                 throw GetException(res, "RmStartSession", "Failed to begin restart manager session.");
@@ -303,5 +355,3 @@ private static Exception GetException(int res, string apiName, string message)
         }
     }
 }
-
-#endif
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index 6bbc68964b3..868d9811bfa 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/MakeDir.cs b/src/Tasks/MakeDir.cs
index e08133fe6ae..131fdb2a47f 100644
--- a/src/Tasks/MakeDir.cs
+++ b/src/Tasks/MakeDir.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/ApplicationIdentity.cs b/src/Tasks/ManifestUtil/ApplicationIdentity.cs
index 6f818452bdc..8b7aec3900b 100644
--- a/src/Tasks/ManifestUtil/ApplicationIdentity.cs
+++ b/src/Tasks/ManifestUtil/ApplicationIdentity.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/ApplicationManifest.cs b/src/Tasks/ManifestUtil/ApplicationManifest.cs
index 55ca4152e4e..6997aeaadb7 100644
--- a/src/Tasks/ManifestUtil/ApplicationManifest.cs
+++ b/src/Tasks/ManifestUtil/ApplicationManifest.cs
@@ -11,6 +11,8 @@
 using System.Xml.Serialization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -950,6 +952,7 @@ private class AssemblyAttributeFlags
             public AssemblyAttributeFlags(string path)
             {
                 using (MetadataReader r = MetadataReader.Create(path))
+                {
                     if (r != null)
                     {
                         IsSigned = !String.IsNullOrEmpty(r.PublicKeyToken);
@@ -958,6 +961,7 @@ public AssemblyAttributeFlags(string path)
                         HasPrimaryInteropAssemblyAttribute = r.HasAssemblyAttribute("System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute");
                         HasImportedFromTypeLibAttribute = r.HasAssemblyAttribute("System.Runtime.InteropServices.ImportedFromTypeLibAttribute");
                     }
+                }
             }
         }
         #endregion
diff --git a/src/Tasks/ManifestUtil/AssemblyIdentity.cs b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
index 772c790c23e..66261651f2c 100644
--- a/src/Tasks/ManifestUtil/AssemblyIdentity.cs
+++ b/src/Tasks/ManifestUtil/AssemblyIdentity.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -268,12 +270,8 @@ public static AssemblyIdentity FromManagedAssembly(string path)
                     {
                         identity = new AssemblyIdentity(r.Name, r.Version, r.PublicKeyToken, r.Culture, r.ProcessorArchitecture);
                     }
-                    catch (ArgumentException e)
+                    catch (ArgumentException e) when (e.HResult == unchecked((int)0x80070057))
                     {
-                        if (e.HResult != unchecked((int)0x80070057))
-                        {
-                            throw;
-                        }
                         // 0x80070057 - "Value does not fall within the expected range." is returned from 
                         // GetAssemblyIdentityFromFile for WinMD components
                     }
diff --git a/src/Tasks/ManifestUtil/AssemblyManifest.cs b/src/Tasks/ManifestUtil/AssemblyManifest.cs
index 59a331a30a1..e55a2ede807 100644
--- a/src/Tasks/ManifestUtil/AssemblyManifest.cs
+++ b/src/Tasks/ManifestUtil/AssemblyManifest.cs
@@ -5,6 +5,8 @@
 using System.Runtime.InteropServices;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/AssemblyReference.cs b/src/Tasks/ManifestUtil/AssemblyReference.cs
index 81c741db55d..702790b55d4 100644
--- a/src/Tasks/ManifestUtil/AssemblyReference.cs
+++ b/src/Tasks/ManifestUtil/AssemblyReference.cs
@@ -7,6 +7,8 @@
 using System.Runtime.InteropServices;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs b/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
index 2b81f70979d..09028f530cc 100644
--- a/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
+++ b/src/Tasks/ManifestUtil/AssemblyReferenceCollection.cs
@@ -6,6 +6,8 @@
 using System.Collections;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/BaseReference.cs b/src/Tasks/ManifestUtil/BaseReference.cs
index c75dae4bc1a..559f1d12c05 100644
--- a/src/Tasks/ManifestUtil/BaseReference.cs
+++ b/src/Tasks/ManifestUtil/BaseReference.cs
@@ -8,6 +8,8 @@
 using System.Runtime.InteropServices;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/CngLightup.cs b/src/Tasks/ManifestUtil/CngLightup.cs
index bdc2bc26723..54c02703f4f 100644
--- a/src/Tasks/ManifestUtil/CngLightup.cs
+++ b/src/Tasks/ManifestUtil/CngLightup.cs
@@ -23,6 +23,8 @@
 using System.Reflection;
 using System.Security.Cryptography.X509Certificates;
 
+#nullable disable
+
 namespace System.Security.Cryptography
 {
     internal static partial class CngLightup
diff --git a/src/Tasks/ManifestUtil/ComImporter.cs b/src/Tasks/ManifestUtil/ComImporter.cs
index 107adb290e2..96a941a43e0 100644
--- a/src/Tasks/ManifestUtil/ComImporter.cs
+++ b/src/Tasks/ManifestUtil/ComImporter.cs
@@ -10,9 +10,13 @@
 #if RUNTIME_TYPE_NETCORE
 using System.Runtime.InteropServices.ComTypes;
 #endif
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
+    [SupportedOSPlatform("windows")]
     internal class ComImporter
     {
         private readonly OutputMessageCollection _outputMessages;
@@ -22,8 +26,8 @@ internal class ComImporter
         // These must be defined in sorted order!
         private static readonly string[] s_knownImplementedCategories =
         {
-            "{02496840-3AC4-11cf-87B9-00AA006C8166}", //CATID_VBFormat
-            "{02496841-3AC4-11cf-87B9-00AA006C8166}", //CATID_VBGetControl
+            "{02496840-3AC4-11cf-87B9-00AA006C8166}", // CATID_VBFormat
+            "{02496841-3AC4-11cf-87B9-00AA006C8166}", // CATID_VBGetControl
             "{40FC6ED5-2438-11CF-A3DB-080036F12502}",
         };
         private static readonly string[] s_knownSubKeys =
@@ -63,7 +67,7 @@ public ComImporter(string path, OutputMessageCollection outputMessages, string o
                 Guid tlbid = typeLibAttr.guid;
 
                 tlib.GetDocumentation(-1, out _, out string docString, out _, out string helpFile);
-                string helpdir = Util.FilterNonprintableChars(helpFile); //Path.GetDirectoryName(helpFile);
+                string helpdir = Util.FilterNonprintableChars(helpFile); // Path.GetDirectoryName(helpFile);
 
                 TypeLib = new TypeLib(tlbid, new Version(typeLibAttr.wMajorVerNum, typeLibAttr.wMinorVerNum), helpdir, typeLibAttr.lcid, Convert.ToInt32(typeLibAttr.wLibFlags, CultureInfo.InvariantCulture));
 
@@ -161,16 +165,38 @@ private void CheckForUnknownValues(RegistryKey key, string[] knownNames)
         private ClassInfo GetRegisteredClassInfo(Guid clsid)
         {
             ClassInfo info = null;
-            RegistryKey userKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\CLASSES\\CLSID");
-            if (GetRegisteredClassInfo(userKey, clsid, ref info))
+
+            using (RegistryKey userKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\CLASSES\\CLSID"))
             {
-                return info;
+               if (GetRegisteredClassInfo(userKey, clsid, ref info))
+               {
+                   return info;
+               }
             }
-            RegistryKey machineKey = Registry.ClassesRoot.OpenSubKey("CLSID");
-            if (GetRegisteredClassInfo(machineKey, clsid, ref info))
+
+            using (RegistryKey machineKey = Registry.ClassesRoot.OpenSubKey("CLSID"))
             {
-                return info;
+               if (GetRegisteredClassInfo(machineKey, clsid, ref info))
+               {
+                  return info;
+               }
             }
+
+            // Check Wow6432Node of HKCR incase the COM reference is to a 32-bit binary.
+            if (Environment.Is64BitProcess)
+            {
+                using (RegistryKey classesRootKey = RegistryKey.OpenBaseKey(RegistryHive.ClassesRoot, RegistryView.Registry32))
+                {
+                    using (RegistryKey clsidKey = classesRootKey.OpenSubKey("CLSID"))
+                    {
+                        if (GetRegisteredClassInfo(clsidKey, clsid, ref info))
+                        {
+                            return info;
+                        }
+                    }
+                }
+            }
+
             return null;
         }
 
diff --git a/src/Tasks/ManifestUtil/CompatibleFramework.cs b/src/Tasks/ManifestUtil/CompatibleFramework.cs
index 2105db6e2db..8d94458c72d 100644
--- a/src/Tasks/ManifestUtil/CompatibleFramework.cs
+++ b/src/Tasks/ManifestUtil/CompatibleFramework.cs
@@ -5,6 +5,8 @@
 using System.Runtime.InteropServices;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs b/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
index 0bb36f483e6..4ae85e83195 100644
--- a/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
+++ b/src/Tasks/ManifestUtil/CompatibleFrameworkCollection.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     [ComVisible(false)]
diff --git a/src/Tasks/ManifestUtil/Constants.cs b/src/Tasks/ManifestUtil/Constants.cs
index 601e8dfc9f5..e68a9f0b404 100644
--- a/src/Tasks/ManifestUtil/Constants.cs
+++ b/src/Tasks/ManifestUtil/Constants.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class Constants
diff --git a/src/Tasks/ManifestUtil/ConvertUtil.cs b/src/Tasks/ManifestUtil/ConvertUtil.cs
index ffd1a913d5f..a666c7bbbdc 100644
--- a/src/Tasks/ManifestUtil/ConvertUtil.cs
+++ b/src/Tasks/ManifestUtil/ConvertUtil.cs
@@ -5,6 +5,8 @@
 using System.Diagnostics;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class ConvertUtil
diff --git a/src/Tasks/ManifestUtil/DeployManifest.cs b/src/Tasks/ManifestUtil/DeployManifest.cs
index 0e726a88a57..ddfda42d466 100644
--- a/src/Tasks/ManifestUtil/DeployManifest.cs
+++ b/src/Tasks/ManifestUtil/DeployManifest.cs
@@ -13,6 +13,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -265,15 +267,15 @@ private static string PatchCLRVersion(string version)
             }
             catch (ArgumentException)
             {
-                //continue
+                // continue
             }
             catch (FormatException)
             {
-                //continue
+                // continue
             }
             catch (OverflowException)
             {
-                //continue 
+                // continue 
             }
 
             return version;
diff --git a/src/Tasks/ManifestUtil/EmbeddedManifestReader.cs b/src/Tasks/ManifestUtil/EmbeddedManifestReader.cs
index 8865e1f97ff..bcf29162ac8 100644
--- a/src/Tasks/ManifestUtil/EmbeddedManifestReader.cs
+++ b/src/Tasks/ManifestUtil/EmbeddedManifestReader.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal class EmbeddedManifestReader
@@ -44,7 +46,7 @@ private bool EnumResNameCallback(IntPtr hModule, IntPtr pType, IntPtr pName, Int
             IntPtr hResInfo = NativeMethods.FindResource(hModule, pName, NativeMethods.RT_MANIFEST);
             if (hResInfo == IntPtr.Zero)
             {
-                return false; //continue looking
+                return false; // continue looking
             }
             IntPtr hResource = NativeMethods.LoadResource(hModule, hResInfo);
             NativeMethods.LockResource(hResource);
@@ -53,7 +55,7 @@ private bool EnumResNameCallback(IntPtr hModule, IntPtr pType, IntPtr pName, Int
 
             Marshal.Copy(hResource, buffer, 0, buffer.Length);
             _manifest = new MemoryStream(buffer, false);
-            return false; //found what we are looking for
+            return false; // found what we are looking for
         }
 
         public static Stream Read(string path)
diff --git a/src/Tasks/ManifestUtil/FileAssociation.cs b/src/Tasks/ManifestUtil/FileAssociation.cs
index c9fd7f82053..7993cacb561 100644
--- a/src/Tasks/ManifestUtil/FileAssociation.cs
+++ b/src/Tasks/ManifestUtil/FileAssociation.cs
@@ -5,6 +5,8 @@
 using System.Runtime.InteropServices;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/FileAssociationCollection.cs b/src/Tasks/ManifestUtil/FileAssociationCollection.cs
index e187f0824b4..0b879fe09bc 100644
--- a/src/Tasks/ManifestUtil/FileAssociationCollection.cs
+++ b/src/Tasks/ManifestUtil/FileAssociationCollection.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     [ComVisible(false)]
diff --git a/src/Tasks/ManifestUtil/FileReference.cs b/src/Tasks/ManifestUtil/FileReference.cs
index 69c418bb40a..e13dad0af4f 100644
--- a/src/Tasks/ManifestUtil/FileReference.cs
+++ b/src/Tasks/ManifestUtil/FileReference.cs
@@ -5,9 +5,12 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -42,6 +45,7 @@ public FileReference(string path) : base(path)
         [XmlIgnore]
         public ComClass[] ComClasses => _comClasses;
 
+        [SupportedOSPlatform("windows")]
         internal bool ImportComComponent(string path, OutputMessageCollection outputMessages, string outputDisplayName)
         {
             var importer = new ComImporter(path, outputMessages, outputDisplayName);
@@ -101,7 +105,7 @@ public bool IsDataFile
         [XmlIgnore]
         public TypeLib[] TypeLibs => _typeLibs;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -139,7 +143,7 @@ public string XmlWriteableType
             set => _writeableType = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -179,7 +183,7 @@ internal ComClass(Guid tlbId, Guid clsId, string progId, string threadingModel,
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -226,7 +230,7 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -291,7 +295,7 @@ private static string FlagsFromInt(int flags)
         [XmlIgnore]
         public string Version => _version;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -338,7 +342,7 @@ public string XmlVersion
             set => _version = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -378,7 +382,7 @@ public bool Versioned
             }
         }
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -398,7 +402,7 @@ public string XmlVersioned
             set => _versioned = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -425,7 +429,7 @@ public class ProxyStub
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -472,6 +476,6 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/ManifestUtil/FileReferenceCollection.cs b/src/Tasks/ManifestUtil/FileReferenceCollection.cs
index 25be81c3805..1c12a7f904e 100644
--- a/src/Tasks/ManifestUtil/FileReferenceCollection.cs
+++ b/src/Tasks/ManifestUtil/FileReferenceCollection.cs
@@ -6,6 +6,8 @@
 using System.Collections.Generic;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/LauncherBuilder.cs b/src/Tasks/ManifestUtil/LauncherBuilder.cs
index 13fd92fb899..068568a6815 100644
--- a/src/Tasks/ManifestUtil/LauncherBuilder.cs
+++ b/src/Tasks/ManifestUtil/LauncherBuilder.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index 762e09e226d..0d17d52f4e4 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -757,22 +759,20 @@ public int Compare(object x, object y)
                     Debug.Fail("Comparing null objects");
                     return 0;
                 }
-                if (!(x is BaseReference) || !(y is BaseReference))
-                {
-                    Debug.Fail("Comparing objects that are not BaseReferences");
-                    return 0;
-                }
-
-                BaseReference xRef = x as BaseReference;
-                BaseReference yRef = y as BaseReference;
 
-                if (xRef.SortName == null || yRef.SortName == null)
+                if (x is BaseReference xRef && y is BaseReference yRef)
                 {
-                    Debug.Fail("Objects do not have a SortName");
-                    return 0;
+                    if (xRef.SortName == null || yRef.SortName == null)
+                    {
+                        Debug.Fail("Objects do not have a SortName");
+                        return 0;
+                    }
+
+                    return xRef.SortName.CompareTo(yRef.SortName);
                 }
 
-                return xRef.SortName.CompareTo(yRef.SortName);
+                Debug.Fail("Comparing objects that are not BaseReferences");
+                return 0;
             }
         }
 
diff --git a/src/Tasks/ManifestUtil/ManifestFormatter.cs b/src/Tasks/ManifestUtil/ManifestFormatter.cs
index 8a2a8fa0ddb..5434d2ebbb1 100644
--- a/src/Tasks/ManifestUtil/ManifestFormatter.cs
+++ b/src/Tasks/ManifestUtil/ManifestFormatter.cs
@@ -7,6 +7,8 @@
 using System.Text;
 using System.Xml;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class ManifestFormatter
@@ -63,7 +65,7 @@ public static Stream Format(Stream input)
                                 w.WriteAttributeString(r.Prefix, r.LocalName, r.NamespaceURI, r.Value);
                             }
 
-                            r.MoveToElement(); //Moves the reader back to the element node.
+                            r.MoveToElement(); // Moves the reader back to the element node.
                         }
 
                         if (r.IsEmptyElement)
diff --git a/src/Tasks/ManifestUtil/ManifestReader.cs b/src/Tasks/ManifestUtil/ManifestReader.cs
index 88b5f8d4cc5..28879b378ab 100644
--- a/src/Tasks/ManifestUtil/ManifestReader.cs
+++ b/src/Tasks/ManifestUtil/ManifestReader.cs
@@ -10,6 +10,8 @@
 using System.Xml;
 using System.Xml.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/ManifestWriter.cs b/src/Tasks/ManifestUtil/ManifestWriter.cs
index dfc220233fd..1c85fae10f0 100644
--- a/src/Tasks/ManifestUtil/ManifestWriter.cs
+++ b/src/Tasks/ManifestUtil/ManifestWriter.cs
@@ -9,6 +9,8 @@
 using System.Xml.Serialization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/MetadataReader.cs b/src/Tasks/ManifestUtil/MetadataReader.cs
index c7238f82e74..dc7fc6529d4 100644
--- a/src/Tasks/ManifestUtil/MetadataReader.cs
+++ b/src/Tasks/ManifestUtil/MetadataReader.cs
@@ -13,6 +13,8 @@
 using System.Reflection.PortableExecutable;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
 #if RUNTIME_TYPE_NETCORE
diff --git a/src/Tasks/ManifestUtil/NativeMethods.cs b/src/Tasks/ManifestUtil/NativeMethods.cs
index e18eef1ebeb..ac61c9eac01 100644
--- a/src/Tasks/ManifestUtil/NativeMethods.cs
+++ b/src/Tasks/ManifestUtil/NativeMethods.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class NativeMethods
diff --git a/src/Tasks/ManifestUtil/OutputMessage.cs b/src/Tasks/ManifestUtil/OutputMessage.cs
index ff860109fdd..c1c28bce018 100644
--- a/src/Tasks/ManifestUtil/OutputMessage.cs
+++ b/src/Tasks/ManifestUtil/OutputMessage.cs
@@ -8,6 +8,8 @@
 using System.Globalization;
 using System.Runtime.InteropServices;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index 6d6e0a57085..a9136b0f290 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -5,6 +5,8 @@
 using System;
 using System.IO;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class PathUtil
@@ -33,7 +35,7 @@ public static string[] GetPathSegments(string path)
             return path.Split(MSBuildConstants.DirectorySeparatorChar);
         }
 
-        //Resolves the path, and if path is a url also canonicalizes it.
+        // Resolves the path, and if path is a url also canonicalizes it.
         public static string Format(string path)
         {
             if (String.IsNullOrEmpty(path)) return path;
@@ -125,8 +127,8 @@ public static bool IsUrl(string path)
             return !u.IsUnc && !String.IsNullOrEmpty(u.Host);
         }
 
-        //If path is a url and starts with "localhost", resolves to machine name.
-        //If path is a relative path, resolves to a full path.
+        // If path is a url and starts with "localhost", resolves to machine name.
+        // If path is a relative path, resolves to a full path.
         public static string Resolve(string path)
         {
             if (String.IsNullOrEmpty(path)) return path;
@@ -138,7 +140,7 @@ public static string Resolve(string path)
                 var u = new Uri(path);
                 if (String.Equals(u.Host, localHost, StringComparison.OrdinalIgnoreCase))
                 {
-                    // Unfortunatly Uri.Host is read-only, so we need to reconstruct it manually...
+                    // Unfortunately Uri.Host is read-only, so we need to reconstruct it manually...
                     int i = path.IndexOf(localHost, StringComparison.OrdinalIgnoreCase);
                     return i >= 0 ? path.Substring(0, i) + Environment.MachineName.ToLowerInvariant() + path.Substring(i + localHost.Length) : path;
                 }
diff --git a/src/Tasks/ManifestUtil/RSAPKCS1SHA256SignatureDescription.cs b/src/Tasks/ManifestUtil/RSAPKCS1SHA256SignatureDescription.cs
index 6fde99029e6..e78f825dcaa 100644
--- a/src/Tasks/ManifestUtil/RSAPKCS1SHA256SignatureDescription.cs
+++ b/src/Tasks/ManifestUtil/RSAPKCS1SHA256SignatureDescription.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Security.Cryptography;
 
+#nullable disable
+
 namespace System.Deployment.Internal.CodeSigning
 {
     [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "RSAPKCS", Justification = "This casing is to match the existing RSAPKCS1SHA1SignatureDescription type")]
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index d74182f6ec8..986370caf84 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -5,24 +5,34 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using System;
+#if !RUNTIME_TYPE_NETCORE
 using System.Collections.Generic;
+#endif
 using System.ComponentModel;
 using System.Deployment.Internal.CodeSigning;
 using System.Diagnostics;
+#if !RUNTIME_TYPE_NETCORE
 using System.Diagnostics.CodeAnalysis;
+#endif
 using System.Globalization;
 using System.IO;
+#if !RUNTIME_TYPE_NETCORE
 using System.Reflection;
+#endif
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
+#if !RUNTIME_TYPE_NETCORE
 using System.Security.Permissions;
 using System.Security.Policy;
+#endif
 using System.Text;
 using System.Xml;
 using Microsoft.Build.Shared.FileSystem;
-using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
@@ -44,8 +54,8 @@ public static class SecurityUtilities
 #if !RUNTIME_TYPE_NETCORE
         private const int Fx2MajorVersion = 2;
         private const int Fx3MajorVersion = 3;
-#endif
         private static readonly Version s_dotNet40Version = new Version("4.0");
+#endif
         private static readonly Version s_dotNet45Version = new Version("4.5");
 
 #if !RUNTIME_TYPE_NETCORE
@@ -129,15 +139,15 @@ private static PermissionSet GetNamedPermissionSetFromZone(string targetZone, st
 
         private static PermissionSet GetNamedPermissionSet(string targetZone, string targetFrameworkMoniker)
         {
-            FrameworkNameVersioning fn;
+            FrameworkName fn;
 
             if (!string.IsNullOrEmpty(targetFrameworkMoniker))
             {
-                fn = new FrameworkNameVersioning(targetFrameworkMoniker);
+                fn = new FrameworkName(targetFrameworkMoniker);
             }
             else
             {
-                fn = new FrameworkNameVersioning(".NETFramework", s_dotNet40Version);
+                fn = new FrameworkName(".NETFramework", s_dotNet40Version);
             }
 
             int majorVersion = fn.Version.Major;
@@ -156,7 +166,7 @@ private static PermissionSet GetNamedPermissionSet(string targetZone, string tar
             }
         }
 
-        private static XmlElement GetXmlElement(string targetZone, FrameworkNameVersioning fn)
+        private static XmlElement GetXmlElement(string targetZone, FrameworkName fn)
         {
             IList<string> paths = ToolLocationHelper.GetPathToReferenceAssemblies(fn);
 
@@ -220,13 +230,13 @@ private static XmlElement GetXmlElement(string targetZone, FrameworkNameVersioni
                                     }
                                     catch (Exception)
                                     {
-                                        //continue.
+                                        // continue.
                                     }
                                 }
                             }
                             catch (ArgumentException)
                             {
-                                //continue.
+                                // continue.
                             }
                         }
                     }
@@ -411,8 +421,11 @@ private static SecurityElement XmlElementToSecurityElement(XmlElement xe)
             foreach (XmlAttribute xa in xe.Attributes)
                 se.AddAttribute(xa.Name, xa.Value);
             foreach (XmlNode xn in xe.ChildNodes)
+            {
                 if (xn.NodeType == XmlNodeType.Element)
                     se.AddChild(XmlElementToSecurityElement((XmlElement)xn));
+            }
+
             return se;
         }
 
@@ -464,7 +477,7 @@ public static PermissionSet XmlToPermissionSet(XmlElement element)
             }
             catch (ArgumentException ex)
             {
-                //UNDONE: Need to log exception thrown from PermissionSet.FromXml
+                // UNDONE: Need to log exception thrown from PermissionSet.FromXml
                 Debug.Fail(String.Format(CultureInfo.CurrentCulture, "PermissionSet.FromXml failed: {0}\r\n\r\n{1}", ex.Message, element.OuterXml));
                 return null;
             }
@@ -478,6 +491,7 @@ public static PermissionSet XmlToPermissionSet(XmlElement element)
         /// <param name="certThumbprint">Hexadecimal string that contains the SHA-1 hash of the certificate.</param>
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint, Uri timestampUrl, string path)
         {
             SignFile(certThumbprint, timestampUrl, path, null, null);
@@ -490,6 +504,7 @@ public static void SignFile(string certThumbprint, Uri timestampUrl, string path
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
@@ -506,11 +521,32 @@ public static void SignFile(string certThumbprint,
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
         /// <param name="targetFrameworkIdentifier">.NET Framework identifier for the target.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
                                     string targetFrameworkVersion,
                                     string targetFrameworkIdentifier)
+        {
+            SignFile(certThumbprint, timestampUrl, path, targetFrameworkVersion, targetFrameworkIdentifier, false);
+        }
+
+        /// <summary>
+        /// Signs a ClickOnce manifest or PE file.
+        /// </summary>
+        /// <param name="certThumbprint">Hexadecimal string that contains the SHA-1 hash of the certificate.</param>
+        /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
+        /// <param name="path">Path of the file to sign with the certificate.</param>
+        /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
+        /// <param name="targetFrameworkIdentifier">.NET Framework identifier for the target.</param>
+        /// <param name="disallowMansignTimestampFallback">Disallow fallback to legacy timestamping when RFC3161 timestamping fails during manifest signing</param>
+        [SupportedOSPlatform("windows")]
+        public static void SignFile(string certThumbprint,
+                                    Uri timestampUrl,
+                                    string path,
+                                    string targetFrameworkVersion,
+                                    string targetFrameworkIdentifier,
+                                    bool disallowMansignTimestampFallback)
         {
             System.Resources.ResourceManager resources = new System.Resources.ResourceManager("Microsoft.Build.Tasks.Core.Strings.ManifestUtilities", typeof(SecurityUtilities).Module.Assembly);
 
@@ -546,7 +582,7 @@ public static void SignFile(string certThumbprint,
                     // Use SHA-256 digest for .NET Core apps
                     isTargetFrameworkSha256Supported = true;
                 }
-                SignFileInternal(cert, timestampUrl, path, isTargetFrameworkSha256Supported, resources);
+                SignFileInternal(cert, timestampUrl, path, isTargetFrameworkSha256Supported, resources, disallowMansignTimestampFallback);
             }
             else
             {
@@ -563,6 +599,7 @@ public static void SignFile(string certThumbprint,
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function is only for signing a manifest, not a PE file.</remarks>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certPath, SecureString certPassword, Uri timestampUrl, string path)
         {
             X509Certificate2 cert = new X509Certificate2(certPath, certPassword, X509KeyStorageFlags.PersistKeySet);
@@ -587,6 +624,7 @@ private static bool UseSha256Algorithm(X509Certificate2 cert)
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function can only sign a PE file if the X509Certificate2 parameter represents a certificate in the
         /// current user's personal certificate store.</remarks>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path)
         {
             // setup resources
@@ -594,7 +632,13 @@ public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path
             SignFileInternal(cert, timestampUrl, path, true, resources);
         }
 
-        private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, string path, bool targetFrameworkSupportsSha256, System.Resources.ResourceManager resources)
+        [SupportedOSPlatform("windows")]
+        private static void SignFileInternal(X509Certificate2 cert,
+                                            Uri timestampUrl,
+                                            string path,
+                                            bool targetFrameworkSupportsSha256,
+                                            System.Resources.ResourceManager resources,
+                                            bool disallowMansignTimestampFallback = false)
         {
             if (cert == null)
             {
@@ -642,9 +686,9 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         }
                         var manifest = new SignedCmiManifest2(doc, useSha256);
                         CmiManifestSigner2 signer;
-                        if (useSha256 && rsa is RSACryptoServiceProvider)
+                        if (useSha256 && rsa is RSACryptoServiceProvider rsacsp)
                         {
-                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsa as RSACryptoServiceProvider, useSha256);
+                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
                             signer = new CmiManifestSigner2(csp, cert, useSha256);
                         }
                         else
@@ -669,7 +713,7 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         if (timestampUrl == null)
                             manifest.Sign(signer);
                         else
-                            manifest.Sign(signer, timestampUrl.ToString());
+                            manifest.Sign(signer, timestampUrl.ToString(), disallowMansignTimestampFallback);
                         doc.Save(path);
                     }
                     catch (Exception ex)
@@ -702,15 +746,11 @@ private static void SignPEFile(X509Certificate2 cert, Uri timestampUrl, string p
             {
                 SignPEFileInternal(cert, timestampUrl, path, resources, useSha256, true);
             }
-            catch(ApplicationException)
+            catch(ApplicationException) when (timestampUrl != null)
             {
                 // error, retry with signtool /t if timestamp url was given
-                if (timestampUrl != null)
-                {
-                    SignPEFileInternal(cert, timestampUrl, path, resources, useSha256, false);
-                    return;
-                }
-                throw;
+                SignPEFileInternal(cert, timestampUrl, path, resources, useSha256, false);
+                return;
             }
         }
 
@@ -777,9 +817,9 @@ internal static string GetCommandLineParameters(string certThumbprint, Uri times
             if (timestampUrl != null)
             {
                 commandLine.AppendFormat(CultureInfo.InvariantCulture,
-                                                "{0} {1} ",
-                                                useRFC3161Timestamp ? "/tr" : "/t",
-                                                timestampUrl.ToString());
+                                            "{0} {1} ",
+                                            useRFC3161Timestamp ? "/tr" : "/t",
+                                            timestampUrl.ToString());
             }
             commandLine.AppendFormat(CultureInfo.InvariantCulture, "\"{0}\"", path);
             return commandLine.ToString();
@@ -802,7 +842,7 @@ internal static string GetPathToTool(System.Resources.ResourceManager resources)
                     toolPath = Path.Combine(pathToDotNetFrameworkSdk, "bin", ToolName);
                 }
             }
-            if (toolPath == null || !FileSystems.Default.FileExists(toolPath))
+            if (NativeMethodsShared.IsWindows && (toolPath == null || !FileSystems.Default.FileExists(toolPath)))
             {
                 toolPath = GetVersionIndependentToolPath(ToolName);
             }
@@ -856,6 +896,7 @@ private static bool IsCertInStore(X509Certificate2 cert)
             return false;
         }
 
+        [SupportedOSPlatform("windows")]
         private static string GetVersionIndependentToolPath(string toolName)
         {
             const string versionIndependentToolKeyName = @"Software\Microsoft\ClickOnce\SignTool";
diff --git a/src/Tasks/ManifestUtil/TrustInfo.cs b/src/Tasks/ManifestUtil/TrustInfo.cs
index c4d0460087f..ce5a2b4843e 100644
--- a/src/Tasks/ManifestUtil/TrustInfo.cs
+++ b/src/Tasks/ManifestUtil/TrustInfo.cs
@@ -13,6 +13,8 @@
 using System.Xml;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     /// <summary>
@@ -193,7 +195,7 @@ private XmlElement GetInputRequestedPrivilegeElement()
 
         private static XmlElement GetRequestedPrivilegeElement(XmlElement inputRequestedPrivilegeElement, XmlDocument document)
         {
-            //  <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
+            // <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
             //      <!--
             //          UAC Manifest Options
             //          If you want to change the Windows User Account Control level replace the 
@@ -551,7 +553,7 @@ public void Write(Stream output)
             var outputDocument = new XmlDocument();
             XmlElement inputPermissionSetElement = GetInputPermissionSetElement();
 
-            //NOTE: XmlDocument.ImportNode munges "xmlns:asmv2" to "xmlns:d1p1" for some reason, use XmlUtil.CloneElementToDocument instead
+            // NOTE: XmlDocument.ImportNode munges "xmlns:asmv2" to "xmlns:d1p1" for some reason, use XmlUtil.CloneElementToDocument instead
             XmlElement outputPermissionSetElement = XmlUtil.CloneElementToDocument(inputPermissionSetElement, outputDocument, XmlNamespaces.asmv2);
             outputDocument.AppendChild(outputPermissionSetElement);
 
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index ad3315a7604..56ba265c495 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -13,11 +13,14 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.Versioning;
 using System.Security;
 using System.Security.Cryptography;
 using System.Text;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class Util
@@ -27,9 +30,10 @@ internal static class Util
         internal static readonly string logPath = GetLogPath();
         private static readonly char[] s_fileNameInvalidChars = { '\\', '/', ':', '*', '?', '"', '<', '>', '|' };
         private static StreamWriter s_logFileWriter;
+#if !RUNTIME_TYPE_NETCORE
         // Major, Minor, Build and Revision of CLR v2.0
         private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };
-#if RUNTIME_TYPE_NETCORE
+#else
         // Major, Minor, Build and Revision of CLR v4.0
         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };
 #endif
@@ -99,10 +103,13 @@ public static string FilterNonprintableChars(string value)
             StringBuilder sb = new StringBuilder(value);
             int i = 0;
             while (i < sb.Length)
+            {
                 if (sb[i] < ' ')
                     sb.Remove(i, 1);
                 else
                     ++i;
+            }
+
             return sb.ToString();
         }
 
@@ -206,7 +213,7 @@ public static void GetFileInfo(string path, string targetFrameworkVersion, out s
             GetFileInfoImpl(path, targetFrameworkVersion, out hash, out length);
         }
 
-        [SuppressMessage("Microsoft.Security.Cryptography", "CA5354: SHA1CannotBeUsed.", Justification = ".NET 4.0 and earlier versions cannot parse SHA-2.")]
+        [SuppressMessage("Security", "CA5350:Do Not Use Weak Cryptographic Algorithms", Justification = ".NET 4.0 and earlier versions cannot parse SHA-2.")]
         private static void GetFileInfoImpl(string path, string targetFrameWorkVersion, out string hash, out long length)
         {
             FileInfo fi = new FileInfo(path);
@@ -220,11 +227,11 @@ private static void GetFileInfoImpl(string path, string targetFrameWorkVersion,
 
                 if (string.IsNullOrEmpty(targetFrameWorkVersion) || CompareFrameworkVersions(targetFrameWorkVersion, Constants.TargetFrameworkVersion40) <= 0)
                 {
-                    hashAlg = new SHA1CryptoServiceProvider();
+                    hashAlg = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider");
                 }
                 else
                 {
-                    hashAlg = new SHA256CryptoServiceProvider();
+                    hashAlg = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider");
                 }
                 byte[] hashBytes = hashAlg.ComputeHash(s);
                 hash = Convert.ToBase64String(hashBytes);
@@ -244,6 +251,7 @@ private static string GetLogPath()
             return logPath;
         }
 
+        [SupportedOSPlatform("windows")]
         public static string GetRegisteredOrganization()
         {
             RegistryKey key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
@@ -335,8 +343,11 @@ internal static bool IsValidFrameworkVersion(string value)
         public static string PlatformToProcessorArchitecture(string platform)
         {
             for (int i = 0; i < s_platforms.Length; ++i)
+            {
                 if (String.Equals(platform, s_platforms[i], StringComparison.OrdinalIgnoreCase))
                     return s_processorArchitectures[i];
+            }
+
             return null;
         }
 
@@ -401,6 +412,7 @@ public static void WriteLog(string text)
             if (!logging)
                 return;
             if (s_logFileWriter == null)
+            {
                 try
                 {
                     s_logFileWriter = new StreamWriter(Path.Combine(logPath, "Microsoft.Build.Tasks.log"), false);
@@ -421,6 +433,8 @@ public static void WriteLog(string text)
                 {
                     return;
                 }
+            }
+
             s_logFileWriter.WriteLine(text);
             s_logFileWriter.Flush();
         }
@@ -503,7 +517,7 @@ public static string WriteTempFile(string s)
             return path;
         }
 
-        #region ItemComparer 
+#region ItemComparer 
         private static readonly ItemComparer s_itemComparer = new ItemComparer();
         private class ItemComparer : IComparer
         {
@@ -529,7 +543,7 @@ int IComparer.Compare(object obj1, object obj2)
                 return String.Compare(item1.ItemSpec, item2.ItemSpec, StringComparison.Ordinal);
             }
         }
-        #endregion
+#endregion
 
         public static Version ConvertFrameworkVersionToString(string version)
         {
diff --git a/src/Tasks/ManifestUtil/XPaths.cs b/src/Tasks/ManifestUtil/XPaths.cs
index 5d6bb20b786..573fb85df4b 100644
--- a/src/Tasks/ManifestUtil/XPaths.cs
+++ b/src/Tasks/ManifestUtil/XPaths.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class XPaths
diff --git a/src/Tasks/ManifestUtil/XmlNamespaces.cs b/src/Tasks/ManifestUtil/XmlNamespaces.cs
index eeafcb757aa..3edb86d6bd4 100644
--- a/src/Tasks/ManifestUtil/XmlNamespaces.cs
+++ b/src/Tasks/ManifestUtil/XmlNamespaces.cs
@@ -3,6 +3,8 @@
 
 using System.Xml;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class XmlNamespaces
diff --git a/src/Tasks/ManifestUtil/XmlUtil.cs b/src/Tasks/ManifestUtil/XmlUtil.cs
index 9f9c37c532b..e370c0cad8a 100644
--- a/src/Tasks/ManifestUtil/XmlUtil.cs
+++ b/src/Tasks/ManifestUtil/XmlUtil.cs
@@ -13,6 +13,8 @@
 using System.Xml.XPath;
 using System.Xml.Xsl;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
     internal static class XmlUtil
@@ -28,7 +30,7 @@ public static string GetQName(XmlTextReader r, XmlNamespaceManager nsmgr)
                 return r.LocalName;
         }
 
-        //NOTE: XmlDocument.ImportNode munges "xmlns:asmv2" to "xmlns:d1p1" for some reason, use XmlUtil.CloneElementToDocument instead
+        // NOTE: XmlDocument.ImportNode munges "xmlns:asmv2" to "xmlns:d1p1" for some reason, use XmlUtil.CloneElementToDocument instead
         public static XmlElement CloneElementToDocument(XmlElement element, XmlDocument document, string namespaceURI)
         {
             XmlElement newElement = document.CreateElement(element.Name, namespaceURI);
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 43c5c7e61d4..a5404f5b920 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -12,9 +12,12 @@
 using System.Text;
 using System.Xml;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 
 using _FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 
+#nullable disable
+
 namespace System.Deployment.Internal.CodeSigning
 {
     internal static class Win32
@@ -271,7 +274,7 @@ private void init()
                                Sha256SignatureMethodUri);
 
 #if RUNTIME_TYPE_NETCORE
-            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),
+            CryptoConfig.AddAlgorithm(typeof(SHA256),
                                Sha256DigestMethod);
 #else
             CryptoConfig.AddAlgorithm(typeof(System.Security.Cryptography.SHA256Cng),
@@ -279,20 +282,6 @@ private void init()
 #endif
         }
 
-        private static XmlElement FindIdElement(XmlElement context, string idValue)
-        {
-            if (context == null)
-                return null;
-
-            XmlElement idReference = context.SelectSingleNode("//*[@Id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            idReference = context.SelectSingleNode("//*[@id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            return context.SelectSingleNode("//*[@ID=\"" + idValue + "\"]") as XmlElement;
-        }
-
         public override XmlElement GetIdElement(XmlDocument document, string idValue)
         {
             // We only care about Id references inside of the KeyInfo section
@@ -306,6 +295,7 @@ public override XmlElement GetIdElement(XmlDocument document, string idValue)
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class SignedCmiManifest2
     {
         private XmlDocument _manifestDom = null;
@@ -318,9 +308,6 @@ internal class SignedCmiManifest2
         private const string Sha1SignatureMethodUri = @"http://www.w3.org/2000/09/xmldsig#rsa-sha1";
         private const string Sha1DigestMethod = @"http://www.w3.org/2000/09/xmldsig#sha1";
 
-        private const string wintrustPolicyFlagsRegPath = "Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing";
-        private const string wintrustPolicyFlagsRegName = "State";
-
         private SignedCmiManifest2() { }
 
         internal SignedCmiManifest2(XmlDocument manifestDom, bool useSha256)
@@ -334,7 +321,7 @@ internal void Sign(CmiManifestSigner2 signer)
             Sign(signer, null);
         }
 
-        internal void Sign(CmiManifestSigner2 signer, string timeStampUrl)
+        internal void Sign(CmiManifestSigner2 signer, string timeStampUrl, bool disallowMansignTimestampFallback = false)
         {
             // Reset signer infos.
             _strongNameSignerInfo = null;
@@ -365,7 +352,7 @@ internal void Sign(CmiManifestSigner2 signer, string timeStampUrl)
 
                 // Now create the license DOM, and then sign it.
                 licenseDom = CreateLicenseDom(signer, ExtractPrincipalFromManifest(), ComputeHashFromManifest(_manifestDom, _useSha256));
-                AuthenticodeSignLicenseDom(licenseDom, signer, timeStampUrl, _useSha256);
+                AuthenticodeSignLicenseDom(licenseDom, signer, timeStampUrl, _useSha256, disallowMansignTimestampFallback);
             }
             StrongNameSignManifestDom(_manifestDom, licenseDom, signer, _useSha256);
         }
@@ -512,8 +499,9 @@ private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlg
 
             byte[] cspPublicKeyBlob;
 
-            if(snKey is RSACryptoServiceProvider){
-                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider((RSACryptoServiceProvider)snKey, useSha256)).ExportCspBlob(false);
+            if (snKey is RSACryptoServiceProvider rsacsp)
+            {
+                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider(rsacsp, useSha256)).ExportCspBlob(false);
                 if (cspPublicKeyBlob == null || cspPublicKeyBlob.Length == 0)
                 {
                     throw new CryptographicException(Win32.NTE_BAD_KEY);
@@ -557,7 +545,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool useS
             return ComputeHashFromManifest(manifestDom, false, useSha256);
         }
 
-        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Cryptographic.Standard", "CA5354:SHA1CannotBeUsed", Justification = "SHA1 is retained for compatibility reasons as an option in VisualStudio signing page and consequently in the trust manager, default is SHA2.")]
+        [System.Diagnostics.CodeAnalysis.SuppressMessage("Security", "CA5350:Do Not Use Weak Cryptographic Algorithms", Justification = "SHA1 is retained for compatibility reasons as an option in VisualStudio signing page and consequently in the trust manager, default is SHA2.")]
         private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldFormat, bool useSha256)
         {
             if (oldFormat)
@@ -567,7 +555,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
-                    using (SHA256CryptoServiceProvider sha2 = new SHA256CryptoServiceProvider())
+                    using (SHA256 sha2 = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider"))
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -580,7 +568,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
-                    using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider())
+                    using (SHA1 sha1 = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider"))
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -615,7 +603,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
-                    using (SHA256CryptoServiceProvider sha2 = new SHA256CryptoServiceProvider())
+                    using (SHA256 sha2 = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider"))
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -628,7 +616,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
-                    using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider())
+                    using (SHA1 sha1 = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider"))
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -690,7 +678,7 @@ private static XmlDocument CreateLicenseDom(CmiManifestSigner2 signer, XmlElemen
             return licenseDom;
         }
 
-        private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManifestSigner2 signer, string timeStampUrl, bool useSha256)
+        private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManifestSigner2 signer, string timeStampUrl, bool useSha256, bool disallowMansignTimestampFallback)
         {
             // Make sure it is RSA, as this is the only one Fusion will support.
 #if RUNTIME_TYPE_NETCORE
@@ -761,7 +749,7 @@ private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManife
             // Time stamp it if requested.
             if (!string.IsNullOrEmpty(timeStampUrl))
             {
-                TimestampSignedLicenseDom(licenseDom, timeStampUrl, useSha256);
+                TimestampSignedLicenseDom(licenseDom, timeStampUrl, useSha256, disallowMansignTimestampFallback);
             }
 
             // Wrap it inside a RelData element.
@@ -845,7 +833,7 @@ private static string ObtainRFC3161Timestamp(string timeStampUrl, string signatu
             return timestamp;
         }
 
-        private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string timeStampUrl, bool useSha256)
+        private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string timeStampUrl, bool useSha256, bool disallowMansignTimestampFallback)
         {
             XmlNamespaceManager nsm = new XmlNamespaceManager(licenseDom.NameTable);
             nsm.AddNamespace("r", LicenseNamespaceUri);
@@ -864,31 +852,38 @@ private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string tim
             // Catch CryptographicException to ensure fallback to old code (non-RFC3161)
             catch (CryptographicException)
             {
-                Win32.CRYPT_DATA_BLOB timestampBlob = new Win32.CRYPT_DATA_BLOB();
+                if (disallowMansignTimestampFallback)
+                {
+                    throw;
+                }
+                else
+                {
+                    Win32.CRYPT_DATA_BLOB timestampBlob = new Win32.CRYPT_DATA_BLOB();
 
-                byte[] licenseXml = Encoding.UTF8.GetBytes(licenseDom.OuterXml);
+                    byte[] licenseXml = Encoding.UTF8.GetBytes(licenseDom.OuterXml);
 
-                unsafe
-                {
-                    fixed (byte* pbLicense = licenseXml)
+                    unsafe
                     {
-                        Win32.CRYPT_DATA_BLOB licenseBlob = new Win32.CRYPT_DATA_BLOB();
-                        IntPtr pvLicense = new IntPtr(pbLicense);
-                        licenseBlob.cbData = (uint)licenseXml.Length;
-                        licenseBlob.pbData = pvLicense;
-
-                        int hr = Win32.CertTimestampAuthenticodeLicense(ref licenseBlob, timeStampUrl, ref timestampBlob);
-                        if (hr != Win32.S_OK)
+                        fixed (byte* pbLicense = licenseXml)
                         {
-                            throw new CryptographicException(hr);
+                            Win32.CRYPT_DATA_BLOB licenseBlob = new Win32.CRYPT_DATA_BLOB();
+                            IntPtr pvLicense = new IntPtr(pbLicense);
+                            licenseBlob.cbData = (uint)licenseXml.Length;
+                            licenseBlob.pbData = pvLicense;
+
+                            int hr = Win32.CertTimestampAuthenticodeLicense(ref licenseBlob, timeStampUrl, ref timestampBlob);
+                            if (hr != Win32.S_OK)
+                            {
+                                throw new CryptographicException(hr);
+                            }
                         }
                     }
-                }
 
-                byte[] timestampSignature = new byte[timestampBlob.cbData];
-                Marshal.Copy(timestampBlob.pbData, timestampSignature, 0, timestampSignature.Length);
-                Win32.HeapFree(Win32.GetProcessHeap(), 0, timestampBlob.pbData);
-                timestamp = Encoding.UTF8.GetString(timestampSignature);
+                    byte[] timestampSignature = new byte[timestampBlob.cbData];
+                    Marshal.Copy(timestampBlob.pbData, timestampSignature, 0, timestampSignature.Length);
+                    Win32.HeapFree(Win32.GetProcessHeap(), 0, timestampBlob.pbData);
+                    timestamp = Encoding.UTF8.GetString(timestampSignature);
+                }
             }
 
             XmlElement asTimestamp = licenseDom.CreateElement("as", "Timestamp", AuthenticodeNamespaceUri);
@@ -929,9 +924,9 @@ private static void StrongNameSignManifestDom(XmlDocument manifestDom, XmlDocume
 
             // Setup up XMLDSIG engine.
             ManifestSignedXml2 signedXml = new ManifestSignedXml2(signatureParent);
-            if (signer.StrongNameKey is RSACryptoServiceProvider)
+            if (signer.StrongNameKey is RSACryptoServiceProvider rsacsp)
             {
-                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(signer.StrongNameKey as RSACryptoServiceProvider, useSha256);
+                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
             }
             else
             {
@@ -1213,6 +1208,7 @@ internal AsymmetricAlgorithm PublicKey
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class CmiAuthenticodeSignerInfo
     {
         private int _error = 0;
@@ -1339,6 +1335,7 @@ internal X509Chain SignerChain
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class CmiAuthenticodeTimestamperInfo
     {
         private int _error = 0;
@@ -1393,4 +1390,3 @@ internal X509Chain TimestamperChain
         }
     }
 }
-
diff --git a/src/Tasks/Message.cs b/src/Tasks/Message.cs
index 88b6dca9f84..52b85a04103 100644
--- a/src/Tasks/Message.cs
+++ b/src/Tasks/Message.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 1d84694b402..c08a5129001 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -191,6 +191,16 @@
     <Compile Include="..\Shared\LanguageParser\VisualBasictokenizer.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="..\Shared\PlatformNegotiation.cs">
+      <Link>PlatformNegotiation.cs</Link>
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
+    <Compile Include="..\Shared\XMakeAttributes.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
+    <Compile Include="..\Shared\XMakeElements.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
     <Compile Include="AppConfig\*.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -369,6 +379,7 @@
     <Compile Include="GetReferenceAssemblyPaths.cs" />
     <Compile Include="Hash.cs" />
     <Compile Include="InstalledSDKResolver.cs" />
+    <Compile Include="Interop.cs" />
     <Compile Include="ErrorFromResources.cs" />
     <Compile Include="ExtractedClassName.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
@@ -598,9 +609,6 @@
     <Compile Include="IComReferenceResolver.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
-    <Compile Include="Interop.cs">
-      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
-    </Compile>
     <Compile Include="ManifestUtil\CngLightup.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -941,11 +949,10 @@
   <!-- For perf, do not add more references (that will be loaded in common scenarios) without good reason -->
   <!-- ==========================================================================================-->
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
-    <PackageReference Include="System.Net.Http" />
-
     <Reference Include="System" />
     <Reference Include="System.Core" />
     <Reference Include="System.IO.Compression" />
+    <Reference Include="System.Net.Http" />
     <Reference Include="System.Reflection" />
     <Reference Include="System.Runtime.Serialization" />
     <!-- Needed by GenerateResource's ResXResourceReader: UNDONE: When CLR has moved this type to improve layering, remove this reference -->
@@ -957,8 +964,10 @@
     <Reference Include="System.Xaml" />
   </ItemGroup>
   <ItemGroup>
-    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
-    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj"/>
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj"/>
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
   </ItemGroup>
   <ItemGroup>
@@ -968,19 +977,34 @@
     <PackageReference Include="System.Resources.Extensions" />
   </ItemGroup>
 
+  <!-- Mimics AddRefAssemblies from MSBuild.csproj -->
+  <Target Name="AddRefAssemblies"
+          DependsOnTargets="ResolveAssemblyReferences"
+          BeforeTargets="AssignTargetPaths">
+    <ItemGroup>
+      <Content Include="@(NetstandardRefAssemblies)" CopyToOutputDirectory="PreserveNewest" Link="ref\%(Filename)%(Extension)"/>
+    </ItemGroup>
+  </Target>
+
   <!-- Tasks need to mimic redistributing the compilers, so add references to both full framework and .net core -->
   <ItemGroup>
     <!-- Reference this package to get binaries at runtime even when Arcade is not adding compiler references -->
     <PackageReference Include="Microsoft.Net.Compilers.Toolset" ExcludeAssets="all" Condition="'$(UsingToolMicrosoftNetCompilers)' == 'false'" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
+  </ItemGroup>
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
 
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\net472\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
   </ItemGroup>
 
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
+    <PackageReference Include="Microsoft.Win32.Registry" />
+  </ItemGroup>
+
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <PackageReference Include="System.CodeDom" />
     <PackageReference Include="System.Reflection.Metadata" />
@@ -989,9 +1013,6 @@
     <PackageReference Include="System.Security.Permissions" />
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
 
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\net6.0\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
   </ItemGroup>
 
diff --git a/src/Tasks/Microsoft.CSharp.CrossTargeting.targets b/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
index 26ae23579d9..8407654f98d 100644
--- a/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.CSharp.CrossTargeting.targets
@@ -9,8 +9,7 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!-- Import design time targets for Roslyn Project System. These are only available if Visual Studio is installed. -->
   <!-- Import design time targets before the common crosstargeting targets, which import targets from Nuget. -->
@@ -22,4 +21,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="Microsoft.Common.CrossTargeting.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
index d7bd7923aa7..772d1bbcf8e 100644
--- a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.CSharp.CurrentVersion.targets
 
@@ -14,8 +14,7 @@ this file.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
     <PropertyGroup>
        <ImportByWildcardBeforeMicrosoftCSharpTargets Condition="'$(ImportByWildcardBeforeMicrosoftCSharpTargets)' == ''">true</ImportByWildcardBeforeMicrosoftCSharpTargets>
@@ -370,4 +369,4 @@ using System.Reflection%3b
     <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.CSharp.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.CSharp.targets\ImportAfter')"/>
     <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.CSharp.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.CSharp.targets\ImportAfter')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.CSharp.targets b/src/Tasks/Microsoft.CSharp.targets
index 80361f7c441..eda6bea88ab 100644
--- a/src/Tasks/Microsoft.CSharp.targets
+++ b/src/Tasks/Microsoft.CSharp.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.CSharp.targets
 
@@ -14,182 +14,25 @@ this file.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
+<Project>
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Choose>
+    <When Condition="'$(IsCrossTargetingBuild)' == 'true'">
+      <PropertyGroup>
+        <CSharpTargetsPath>$(MSBuildToolsPath)\Microsoft.CSharp.CrossTargeting.targets</CSharpTargetsPath>
+      </PropertyGroup>
+    </When>
+    <Otherwise>
+      <PropertyGroup>
+        <CSharpTargetsPath>$(MSBuildToolsPath)\Microsoft.CSharp.CurrentVersion.targets</CSharpTargetsPath>
+      </PropertyGroup>
+    </Otherwise>
+  </Choose>
 
-   <!--
-        In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-        as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-        just used whatever ToolsVersion was in the project file if it existed on the machine, and
-        only forced 4.0 if that ToolsVersion did not exist.
+  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.Before.targets" />
 
-        Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-        but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-        the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-        property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-        as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-        targets.
-   -->
+  <Import Project="$(CSharpTargetsPath)" />
 
-   <Choose>
-      <When Condition="'$(MSBuildAssemblyVersion)' == ''">
-         <PropertyGroup>
-            <CSharpTargetsPath>$(MSBuildFrameworkToolsPath)\Microsoft.CSharp.targets</CSharpTargetsPath>
-            <!-- Same condition as in .NET 4.5 C# targets so that we can override the behavior where it defaults to
-                 MSBuildToolsPath, which would be incorrect in this case -->
-            <CscToolPath Condition="'$(CscToolPath)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">$(MsBuildFrameworkToolsPath)</CscToolPath>
-         </PropertyGroup>
-      </When>
-      <When Condition="'$(IsCrossTargetingBuild)' == 'true'">
-         <PropertyGroup>
-            <CSharpTargetsPath>$(MSBuildToolsPath)\Microsoft.CSharp.CrossTargeting.targets</CSharpTargetsPath>
-          </PropertyGroup>
-      </When>
-      <Otherwise>
-         <PropertyGroup>
-            <CSharpTargetsPath>$(MSBuildToolsPath)\Microsoft.CSharp.CurrentVersion.targets</CSharpTargetsPath>
-         </PropertyGroup>
-      </Otherwise>
-   </Choose>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.After.targets" />
 
-
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <!--
-           Overrides for the Microsoft.Common.targets extension targets. Used to make sure that only the imports we specify
-           (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Defined here because
-           Microsoft.CSharp.targets imports Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath,
-           so defining these in Microsoft.Common.targets alone would not suffice for C# projects.
-
-           NOTE: This logic is duplicated in Microsoft.VisualBasic.targets (VB has the same problem) and in Microsoft.Common.targets
-           (for anyone who DOES import it directly), so for any changes to this logic in this file, please also edit the other two.
-       -->
-      <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportByWildcardBeforeMicrosoftCommonTargets)</ImportByWildcardBefore40MicrosoftCommonTargets>
-      <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportByWildcardBefore40MicrosoftCommonTargets>
-
-      <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportByWildcardAfterMicrosoftCommonTargets)</ImportByWildcardAfter40MicrosoftCommonTargets>
-      <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportByWildcardAfter40MicrosoftCommonTargets>
-
-      <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets)</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-      <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-
-      <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-      <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-
-      <ImportByWildcardBeforeMicrosoftCommonTargets>false</ImportByWildcardBeforeMicrosoftCommonTargets>
-      <ImportByWildcardAfterMicrosoftCommonTargets>false</ImportByWildcardAfterMicrosoftCommonTargets>
-      <ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>
-      <ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>false</ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>
-
-      <CustomBeforeMicrosoftCommonTargets Condition="'$(CustomBeforeMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.Microsoft.Common.targets</CustomBeforeMicrosoftCommonTargets>
-      <CustomAfterMicrosoftCommonTargets Condition="'$(CustomAfterMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.Common.targets</CustomAfterMicrosoftCommonTargets>
-
-      <!-- Overrides for the Microsoft.CSharp.targets extension targets -->
-      <ImportByWildcardBefore40MicrosoftCSharpTargets Condition="'$(ImportByWildcardBefore40MicrosoftCSharpTargets)' == ''">$(ImportByWildcardBeforeMicrosoftCSharpTargets)</ImportByWildcardBefore40MicrosoftCSharpTargets>
-      <ImportByWildcardBefore40MicrosoftCSharpTargets Condition="'$(ImportByWildcardBefore40MicrosoftCSharpTargets)' == ''">true</ImportByWildcardBefore40MicrosoftCSharpTargets>
-
-      <ImportByWildcardAfter40MicrosoftCSharpTargets Condition="'$(ImportByWildcardAfter40MicrosoftCSharpTargets)' == ''">$(ImportByWildcardAfterMicrosoftCSharpTargets)</ImportByWildcardAfter40MicrosoftCSharpTargets>
-      <ImportByWildcardAfter40MicrosoftCSharpTargets Condition="'$(ImportByWildcardAfter40MicrosoftCSharpTargets)' == ''">true</ImportByWildcardAfter40MicrosoftCSharpTargets>
-
-      <ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftCSharpTargets)</ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets>
-      <ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets>
-
-      <ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftCSharpTargets)</ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets>
-      <ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets>
-
-      <ImportByWildcardBeforeMicrosoftCSharpTargets>false</ImportByWildcardBeforeMicrosoftCSharpTargets>
-      <ImportByWildcardAfterMicrosoftCSharpTargets>false</ImportByWildcardAfterMicrosoftCSharpTargets>
-      <ImportUserLocationsByWildcardBeforeMicrosoftCSharpTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftCSharpTargets>
-      <ImportUserLocationsByWildcardAfterMicrosoftCSharpTargets>false</ImportUserLocationsByWildcardAfterMicrosoftCSharpTargets>
-
-      <CustomBeforeMicrosoftCSharpTargets Condition="'$(CustomBeforeMicrosoftCSharpTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.Microsoft.CSharp.targets</CustomBeforeMicrosoftCSharpTargets>
-      <CustomAfterMicrosoftCSharpTargets Condition="'$(CustomAfterMicrosoftCSharpTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.CSharp.targets</CustomAfterMicrosoftCSharpTargets>
-   </PropertyGroup>
-
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == 'Silverlight' or ('$(TargetFrameworkIdentifier)' == '' and ('$(TargetRuntime)' == 'Managed' or '$(TargetRuntime)' == '')))">
-       <!--
-            Overrides for the Microsoft.NETFramework.props extension targets. Used to make sure that only the imports we specify
-            (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Required because
-            Microsoft.Common.targets imports it from the current directory, so we don't get a chance to redirect these in its
-            own redirection targets.
-
-            NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.Common.targets because VB and C#
-            import Microsoft.Common.targets from the current directory and thus don't get the benefit of these redirections either,
-            so for any changes to this logic in this file, please also edit the other two.
-        -->
-      <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-      <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-
-      <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardAfterMicrosoftNetFrameworkProps)</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-      <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-
-      <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-      <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-
-      <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-      <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-
-      <ImportByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
-      <ImportByWildcardAfterMicrosoftNetFrameworkProps>false</ImportByWildcardAfterMicrosoftNetFrameworkProps>
-      <ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>
-      <ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>
-   </PropertyGroup>
-
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportBefore')"/>
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportBefore')"/>
-   </ImportGroup>
-
-   <!-- Really should be imported right before Microsoft.Common.targets, but because Microsoft.CSharp.targets imports
-        Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-        targets), we're stuck doing it this way instead. -->
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-   </ImportGroup>
-
-   <!-- Really should be imported right before Microsoft.NETFramework.props, but because Microsoft.CSharp.targets imports
-        Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-        targets), and Microsoft.Common.targets does likewise with Microsoft.NETFramework.props, we're stuck doing it this
-        way instead. -->
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-   </ImportGroup>
-
-   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.Before.targets" />
-
-   <Import Project="$(CSharpTargetsPath)" />
-
-   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.After.targets" />
-
-   <!-- Really should be imported right after Microsoft.NETFramework.props, but because Microsoft.CSharp.targets imports
-        Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-        targets), and Microsoft.Common.targets does likewise with Microsoft.NETFramework.props, we're stuck doing it this
-        way instead. -->
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-   </ImportGroup>
-
-   <!-- Really should be imported right after Microsoft.Common.targets, but because Microsoft.CSharp.targets imports
-        Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-        targets), we're stuck doing it this way instead. -->
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-    </ImportGroup>
-
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportAfter')"/>
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCSharpTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.CSharp.targets\ImportAfter')"/>
-   </ImportGroup>
-
-   <!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
-        (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not
-        installed.  Defined here rather than in Microsoft.Common.targets because the .NET Microsoft.CSharp.targets
-        imports Microsoft.Common.targets from the current directory. -->
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
-   </PropertyGroup>
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index c7d553aecd3..5096427a963 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.Common.CrossTargeting.targets
 
@@ -9,8 +9,7 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
 
   <PropertyGroup>
     <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
@@ -49,6 +48,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <!-- Extract necessary information for SetPlatform negotiation -->
         <!-- This target does not run for cpp projects. -->
         <IsVcxOrNativeProj>false</IsVcxOrNativeProj>
+        <Platform Condition="$([MSBuild]::AreFeaturesEnabled('17.4'))">$(Platform)</Platform>
         <Platforms>$(Platforms)</Platforms>
       </_ThisProjectBuildMetadata>
     </ItemGroup>
@@ -220,4 +220,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(DirectoryBuildTargetsPath)" Condition="'$(ImportDirectoryBuildTargets)' == 'true' and exists('$(DirectoryBuildTargetsPath)')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 84e86faf711..7819000499b 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.Common.CurrentVersion.targets
 
@@ -13,8 +13,7 @@ Visual Basic, and Visual C#.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project DefaultTargets="Build" TreatAsLocalProperty="OutDir" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" TreatAsLocalProperty="OutDir">
 
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="'$(MicrosoftCommonPropsHasBeenImported)' != 'true' and Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
 
@@ -625,16 +624,16 @@ Copyright (C) Microsoft Corporation. All rights reserved.
             (9) Treat the reference's Include as if it were a real file name.
             (10) Look in the application's output folder (like bin\debug)
         -->
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseCandidateAssemblyFiles) != 'false'">{CandidateAssemblyFiles}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseReferencePath) != 'false'">$(AssemblySearchPaths);$(ReferencePath)</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseHintPathFromItem) != 'false'">$(AssemblySearchPaths);{HintPathFromItem}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseTargetFrameworkDirectory) != 'false'">$(AssemblySearchPaths);{TargetFrameworkDirectory}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseAssemblyFoldersConfigFileSearchPath) != 'false'">$(AssemblySearchPaths);$(AssemblyFoldersConfigFileSearchPath)</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseRegistry) != 'false'">$(AssemblySearchPaths);{Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseAssemblyFolders) != 'false'">$(AssemblySearchPaths);{AssemblyFolders}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseGAC) != 'false'">$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseRawFileName) != 'false'">$(AssemblySearchPaths);{RawFileName}</AssemblySearchPaths>
-    <AssemblySearchPaths Condition="$(AssemblySearchPathUseOutDir) != 'false'">$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseCandidateAssemblyFiles)' != 'false'">{CandidateAssemblyFiles}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseReferencePath)' != 'false'">$(AssemblySearchPaths);$(ReferencePath)</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseHintPathFromItem)' != 'false'">$(AssemblySearchPaths);{HintPathFromItem}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseTargetFrameworkDirectory)' != 'false'">$(AssemblySearchPaths);{TargetFrameworkDirectory}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseAssemblyFoldersConfigFileSearchPath)' != 'false'">$(AssemblySearchPaths);$(AssemblyFoldersConfigFileSearchPath)</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseRegistry)' != 'false'">$(AssemblySearchPaths);{Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseAssemblyFolders)' != 'false'">$(AssemblySearchPaths);{AssemblyFolders}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseGAC)' != 'false'">$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseRawFileName)' != 'false'">$(AssemblySearchPaths);{RawFileName}</AssemblySearchPaths>
+    <AssemblySearchPaths Condition="'$(AssemblySearchPath_UseOutDir)' != 'false'">$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>
   </PropertyGroup>
 
   <!-- ContinueOnError takes 3 values:  WarnAndContinue (true), ErrorAndStop (false), and ErrorAndContinue.
@@ -648,6 +647,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <PropertyGroup>
     <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)'==''">$(NoWarn)</MSBuildWarningsAsMessages>
     <MSBuildWarningsAsErrors Condition="'$(MSBuildWarningsAsErrors)'==''">$(WarningsAsErrors)</MSBuildWarningsAsErrors>
+    <MSBuildWarningsNotAsErrors Condition="'$(MSBuildWarningsNotAsErrors)'==''">$(WarningsNotAsErrors)</MSBuildWarningsNotAsErrors>
   </PropertyGroup>
 
   <!-- Common Project System support -->
@@ -1610,8 +1610,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ====================================================================================
                                         _GetProjectReferencePlatformProperties
 
-    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the 
-    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible 
+    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the
+    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible
     platform for each project. It then sets SetPlatform metadata on each ProjectReference.
     This prevents overbuilding a project when 'AnyCPU' is available.
 
@@ -1637,7 +1637,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     </ItemGroup>
 
     <ItemGroup>
-      <_ProjectReferencePlatformPossibilities Include="@(_MSBuildProjectReferenceExistent)" 
+      <_ProjectReferencePlatformPossibilities Include="@(_MSBuildProjectReferenceExistent)"
                                               Condition="'%(_MSBuildProjectReferenceExistent.SkipGetPlatformProperties)' != 'true'"/>
     </ItemGroup>
 
@@ -1737,7 +1737,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
    -->
    <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' == '' and ('%(Extension)' == '.vcxproj' or '%(Extension)' == '.nativeproj')">
-        <!-- 
+        <!--
           Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
           Don't skip when opted into the feature.
         -->
@@ -1759,7 +1759,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
     <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''">
-        <!-- 
+        <!--
           Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
           Don't skip when opted into the feature.
         -->
@@ -1828,7 +1828,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
             https://github.com/dotnet/sdk/issues/416
 
         Furthermore, if we're referencing a .vcxproj or .nativeproj, those items won't be populated into `AnnotatedProjects`
-        by `GetReferenceNearestTargetFrameworkTask`, so let them flow when `EnableDynamicPlatformResolution` is set. 
+        by `GetReferenceNearestTargetFrameworkTask`, so let them flow when `EnableDynamicPlatformResolution` is set.
       -->
       <AnnotatedProjects Include="@(_ProjectReferenceTargetFrameworkPossibilities)"
                          Condition="'$(ReferringTargetFrameworkForProjectReferences)' == '' or
@@ -1887,6 +1887,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <IsRidAgnostic Condition=" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
         <!-- Extract necessary information for SetPlatform negotiation -->
         <IsVcxOrNativeProj Condition="'$(MSBuildProjectExtension)' == '.vcxproj' or '$(MSBuildProjectExtension)' == '.nativeproj'">true</IsVcxOrNativeProj>
+        <Platform Condition="$([MSBuild]::AreFeaturesEnabled('17.4'))">$(Platform)</Platform>
         <Platforms>$(Platforms)</Platforms>
         <!-- .vcxproj and .nativeproj contain a `ProjectConfiguration` item that have `Platform` metadata within.
              Build the `Platforms` property from that. -->
@@ -4187,7 +4188,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       use the built DLL as the entry point
     -->
     <ItemGroup Condition="'$(UseAppHost)' == 'true' and '$(_IsExecutable)' == 'true' and exists('$(AppHostIntermediatePath)')">
-      <EntryPointForLauncher Include="$(AppHostIntermediatePath)"/>
+      <EntryPointForLauncher Include="$(AppHostIntermediatePath)" TargetPath="$(AssemblyName).exe"/>
       <ContentWithTargetPath Include="@(EntryPointForLauncher)"/>
     </ItemGroup>
     <ItemGroup Condition="'$(EntryPointForLauncher)'==''">
@@ -5984,6 +5985,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         SigningTarget="$(_DeploymentApplicationDir)$(_DeploymentTargetApplicationManifestFileName)"
         TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
         TargetFrameworkVersion="$(TargetFrameworkVersion)"
+        DisallowMansignTimestampFallback="$(DisallowMansignTimestampFallback)"
         Condition="'$(_DeploymentSignClickOnceManifests)'=='true'" />
 
     <!-- Update entry point path in deploy manifest -->
@@ -6004,6 +6006,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         SigningTarget="$(PublishDir)$(TargetDeployManifestFileName)"
         TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
         TargetFrameworkVersion="$(TargetFrameworkVersion)"
+        DisallowMansignTimestampFallback="$(DisallowMansignTimestampFallback)"
         Condition="'$(_DeploymentSignClickOnceManifests)'=='true'" />
 
     <SignFile
@@ -6108,7 +6111,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <!-- This item represents the native manifest, example: WindowsApplication1.exe.manifest or Native.ClassLibrary1.manifest -->
     <ItemGroup>
-      <_BuiltProjectOutputGroupOutputIntermediate Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)" Condition="'@(NativeReference)'!='' or '@(_IsolatedComReference)'!=''">
+      <_BuiltProjectOutputGroupOutputIntermediate Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)" Condition="('@(NativeReference)'!='' or '@(_IsolatedComReference)'!='') And Exists('$(OutDir)$(_DeploymentTargetApplicationManifestFileName)')">
         <TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>
         <!-- For compatibility with 2.0 -->
         <OriginalItemSpec>$(OutDir)$(_DeploymentTargetApplicationManifestFileName)</OriginalItemSpec>
@@ -6667,4 +6670,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter')"/>
   <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.overridetasks b/src/Tasks/Microsoft.Common.overridetasks
index f9bc7334290..6032f7ccf9a 100644
--- a/src/Tasks/Microsoft.Common.overridetasks
+++ b/src/Tasks/Microsoft.Common.overridetasks
@@ -1,39 +1,40 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-    <!-- This file lists UsingTask elements that we wish to override
-         any other UsingTask elements -->
+  <!-- This file lists UsingTask elements that we wish to override
+        any other UsingTask elements -->
 
-    <!-- NOTE: Listing a <UsingTask> tag in a *.tasks file like this one rather than in a project or targets file
-               can give a significant performance advantage in a large build, because every time a <UsingTask> tag
-               is encountered, it will cause the task to be rediscovered next time the task is used. -->
-    <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->
+  <!-- NOTE: Listing a <UsingTask> tag in a *.tasks file like this one rather than in a project or targets file
+             can give a significant performance advantage in a large build, because every time a <UsingTask> tag
+             is encountered, it will cause the task to be rediscovered next time the task is used. -->
 
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5'" />
+  <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->
 
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"     AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5'" />
 
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"     AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"     AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"   AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"     AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-    <UsingTask TaskName="ResolveComReference"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"   AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-    <UsingTask TaskName="GenerateResource"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="GenerateResource"                           AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="ResolveComReference"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0'" />
 
-    <UsingTask TaskName="RegisterAssembly"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="RegisterAssembly"                           AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="GenerateResource"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="GenerateResource"                           AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-    <UsingTask TaskName="UnregisterAssembly"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
-    <UsingTask TaskName="UnregisterAssembly"                         AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
+  <UsingTask TaskName="RegisterAssembly"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="RegisterAssembly"                           AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-    <UsingTask TaskName="ReadLinesFromFile"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
-    <UsingTask TaskName="FindUnderPath"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
-    <UsingTask TaskName="ConvertToAbsolutePath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
-    <UsingTask TaskName="MSBuild"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
-    <UsingTask TaskName="ResolveAssemblyReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '4.0'" />
+  <UsingTask TaskName="UnregisterAssembly"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and ('$(DisableOutOfProcTaskHost)' != '' or !$([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`)))" />
+  <UsingTask TaskName="UnregisterAssembly"                         AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '2.0' and '$(DisableOutOfProcTaskHost)' == '' and $([MSBuild]::DoesTaskHostExist(`CLR2`,`CurrentArchitecture`))" Runtime="CLR2" />
 
-</Project>
+  <UsingTask TaskName="ReadLinesFromFile"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="FindUnderPath"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="ConvertToAbsolutePath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="MSBuild"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '3.5' or '$(MSBuildToolsVersion)' == '2.0'" />
+  <UsingTask TaskName="ResolveAssemblyReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildToolsVersion)' == '4.0'" />
+
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index b08b6558352..a14fea277c2 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.Common.props
 
@@ -9,8 +9,7 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
     <ImportByWildcardBeforeMicrosoftCommonProps Condition="'$(ImportByWildcardBeforeMicrosoftCommonProps)' == ''">true</ImportByWildcardBeforeMicrosoftCommonProps>
@@ -21,9 +20,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </PropertyGroup>
 
   <!--
-        Determine the path to the directory build props file if the user did not disable $(ImportDirectoryBuildProps) and
-        they did not already specify an absolute path to use via $(DirectoryBuildPropsPath)
-    -->
+      Determine the path to the directory build props file if the user did not disable $(ImportDirectoryBuildProps) and
+      they did not already specify an absolute path to use via $(DirectoryBuildPropsPath)
+  -->
   <PropertyGroup Condition="'$(ImportDirectoryBuildProps)' == 'true' and '$(DirectoryBuildPropsPath)' == ''">
     <_DirectoryBuildPropsFile Condition="'$(_DirectoryBuildPropsFile)' == ''">Directory.Build.props</_DirectoryBuildPropsFile>
     <_DirectoryBuildPropsBasePath Condition="'$(_DirectoryBuildPropsBasePath)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), '$(_DirectoryBuildPropsFile)'))</_DirectoryBuildPropsBasePath>
@@ -33,17 +32,17 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Import Project="$(DirectoryBuildPropsPath)" Condition="'$(ImportDirectoryBuildProps)' == 'true' and exists('$(DirectoryBuildPropsPath)')"/>
 
   <!--
-        Prepare to import project extensions which usually come from packages.  Package management systems will create a file at:
-          $(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.props
+      Prepare to import project extensions which usually come from packages.  Package management systems will create a file at:
+        $(MSBuildProjectExtensionsPath)\$(MSBuildProjectFile).<SomethingUnique>.props
 
-        Each package management system should use a unique moniker to avoid collisions.  It is a wild-card import so the package
-        management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
-    -->
+      Each package management system should use a unique moniker to avoid collisions.  It is a wild-card import so the package
+      management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
+  -->
   <PropertyGroup>
     <!--
-            The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets
-            in order for the $(MSBuildProjectExtensionsPath) to use it as a default.
-        -->
+        The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets
+        in order for the $(MSBuildProjectExtensionsPath) to use it as a default.
+    -->
     <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)'=='' ">obj\</BaseIntermediateOutputPath>
     <BaseIntermediateOutputPath Condition="!HasTrailingSlash('$(BaseIntermediateOutputPath)')">$(BaseIntermediateOutputPath)\</BaseIntermediateOutputPath>
     <_InitialBaseIntermediateOutputPath>$(BaseIntermediateOutputPath)</_InitialBaseIntermediateOutputPath>
@@ -53,7 +52,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         Import paths that are relative default to be relative to the importing file.  However, since MSBuildExtensionsPath
         defaults to BaseIntermediateOutputPath we expect it to be relative to the project directory.  So if the path is relative
         it needs to be made absolute based on the project directory.
-      -->
+    -->
     <MSBuildProjectExtensionsPath Condition="'$([System.IO.Path]::IsPathRooted($(MSBuildProjectExtensionsPath)))' == 'false'">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '$(MSBuildProjectExtensionsPath)'))</MSBuildProjectExtensionsPath>
     <MSBuildProjectExtensionsPath Condition="!HasTrailingSlash('$(MSBuildProjectExtensionsPath)')">$(MSBuildProjectExtensionsPath)\</MSBuildProjectExtensionsPath>
     <ImportProjectExtensionProps Condition="'$(ImportProjectExtensionProps)' == ''">true</ImportProjectExtensionProps>
@@ -63,76 +62,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Import Project="$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.props" Condition="'$(ImportProjectExtensionProps)' == 'true' and exists('$(MSBuildProjectExtensionsPath)')" />
 
   <!--
-        Import wildcard "ImportBefore" props files if we're actually in a 12.0+ project (rather than a project being
-        treated as 4.0)
-    -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' != ''">
-    <!--
-            Wildcard imports come from $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props.d folder.
-            This is very similar to the same extension point used in Microsoft.Common.targets, which is located in
-            the $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ directory. Unfortunately, there
-            is already a file named "Microsoft.Common.props" in this directory so we have to have a slightly different
-            directory name to hold extensions.
-        -->
-    <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
-  </ImportGroup>
-
-  <!--
-        In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-        as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-        just used whatever ToolsVersion was in the project file if it existed on the machine, and
-        only forced 4.0 if that ToolsVersion did not exist.
-
-        Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-        but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-        the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-        property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-        as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-        targets.
-   -->
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(VisualStudioVersion)' != '' and '$(VisualStudioVersion)' &gt;= '12.0')">
-    <!--
-           Reset VisualStudioVersion if it's 12.0+: Should be 10.0 if VS 2010 is installed or 11.0 otherwise,
-           but since we don't have a good way of telling whether VS 2010 is installed, make it 11.0 if
-           VS 2012 is installed or 10.0 otherwise.  The reset should be safe because if it was already
-           set to something (e.g. 11.0 in a VS 2012 command prompt) then MSBuild's internal
-           VisualStudioVersion-defaulting code should never come into the picture, so the only way it could
-           be 12.0+ when building a TV 12.0 project (because we're in this file) using MSBuild 4.5 (because
-           MSBuildAssemblyVersion hasn't been set) is if it's a TV 12.0 project on an empty command prompt.
-      -->
-    <VisualStudioVersion Condition="Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')">11.0</VisualStudioVersion>
-    <VisualStudioVersion Condition="!Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')">10.0</VisualStudioVersion>
-  </PropertyGroup>
+      Wildcard imports come from $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ directory.
+      This is very similar to the same extension point used in Microsoft.Common.targets, which is located in
+      the $(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ directory.
 
-  <!-- If building using 4.X MSBuild, we want to act like this project is TV 4.0, so override
-         the custom extensibility target locations with the hard-coded 4.0 equivalent. -->
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <CustomBeforeMicrosoftCommonProps Condition="'$(CustomBeforeMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.$(MSBuildThisFile)</CustomBeforeMicrosoftCommonProps>
-    <CustomAfterMicrosoftCommonProps Condition="'$(CustomAfterMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v4.0\Custom.After.$(MSBuildThisFile)</CustomAfterMicrosoftCommonProps>
-  </PropertyGroup>
-
-  <!-- If building using 4.X MSBuild, we want to act like this project is TV 4.0, so import
-         Microsoft.Common.props from the 4.0 location, and make sure everything else in here is
-         set up such that if it's defaulted to something there, it won't be overridden here. -->
-  <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props" Condition="'$(MSBuildAssemblyVersion)' == '' and Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props')" />
+      Unfortunately, there is already a file named "Microsoft.Common.props" in this directory,
+      so we have to have a slightly different directory name to hold extensions.
+  -->
+  <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore\*" Condition="'$(ImportByWildcardBeforeMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportBefore')"/>
 
   <PropertyGroup>
     <CustomBeforeMicrosoftCommonProps Condition="'$(CustomBeforeMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v$(MSBuildToolsVersion)\Custom.Before.$(MSBuildThisFile)</CustomBeforeMicrosoftCommonProps>
     <CustomAfterMicrosoftCommonProps Condition="'$(CustomAfterMicrosoftCommonProps)'==''">$(MSBuildExtensionsPath)\v$(MSBuildToolsVersion)\Custom.After.$(MSBuildThisFile)</CustomAfterMicrosoftCommonProps>
   </PropertyGroup>
 
-  <!--
-         Only import the extension targets if we're actually in a 12.0 project here (rather than one we're attempting
-         to treat as 4.0) OR if the Dev11 Microsoft.Common.props don't exist.  If it's a 12.0 project we're redirecting
-         to 4.0 and the Dev11 Microsoft.Common.props do exist, the extension targets will have been imported already
-         so there's no need to import them twice.
-     -->
-  <Import Project="$(CustomBeforeMicrosoftCommonProps)" Condition="'$(CustomBeforeMicrosoftCommonProps)' != '' and Exists('$(CustomBeforeMicrosoftCommonProps)') and ('$(MSBuildAssemblyVersion)' != '' or !Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props'))" />
+  <Import Project="$(CustomBeforeMicrosoftCommonProps)" Condition="'$(CustomBeforeMicrosoftCommonProps)' != '' and Exists('$(CustomBeforeMicrosoftCommonProps)')" />
 
   <!-- This is used to determine whether Microsoft.Common.targets needs to import
-         Microsoft.Common.props itself, or whether it has been imported previously,
-         e.g. by the project itself. -->
+      Microsoft.Common.props itself, or whether it has been imported previously,
+      e.g. by the project itself. -->
   <PropertyGroup>
     <MicrosoftCommonPropsHasBeenImported>true</MicrosoftCommonPropsHasBeenImported>
   </PropertyGroup>
@@ -149,26 +98,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualStudioVersion.v*.Common.props" Condition="'$(VisualStudioVersion)' == ''" />
 
-  <!--
-         Only import the extension targets if we're actually in a 12.0 project here (rather than one we're attempting
-         to treat as 4.0) OR if the Dev11 Microsoft.Common.props don't exist.  If it's a 12.0 project we're redirecting
-         to 4.0 and the Dev11 Microsoft.Common.props do exist, the extension targets will have been imported already
-         so there's no need to import them twice.
-     -->
-  <Import Project="$(CustomAfterMicrosoftCommonProps)" Condition="'$(CustomAfterMicrosoftCommonProps)' != '' and Exists('$(CustomAfterMicrosoftCommonProps)') and ('$(MSBuildAssemblyVersion)' != '' or !Exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.props'))" />
+  <Import Project="$(CustomAfterMicrosoftCommonProps)" Condition="'$(CustomAfterMicrosoftCommonProps)' != '' and Exists('$(CustomAfterMicrosoftCommonProps)')" />
 
-  <!--
-        Import wildcard "ImportAfter" props files if we're actually in a 12.0+ project (rather than a project being
-        treated as 4.0)
-    -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' != ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
-    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
-  </ImportGroup>
+  <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftCommonProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Imports\Microsoft.Common.props\ImportAfter')"/>
 
   <!--
-        Import NuGet.props file.
-    -->
+      Import NuGet.props file.
+  -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
     <NuGetPropsFile Condition="'$(NuGetPropsFile)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.props</NuGetPropsFile>
@@ -193,4 +130,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <DisableLogTaskParameterItemMetadata_WriteLinesToFile_Lines>true</DisableLogTaskParameterItemMetadata_WriteLinesToFile_Lines>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.targets b/src/Tasks/Microsoft.Common.targets
index 753dad7cfaf..e4f83cd7640 100644
--- a/src/Tasks/Microsoft.Common.targets
+++ b/src/Tasks/Microsoft.Common.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.Common.targets
 
@@ -13,105 +13,12 @@ Visual Basic, and Visual C#.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
+<Project DefaultTargets="Build">
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-
-  <!--
-       In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-       as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-       just used whatever ToolsVersion was in the project file if it existed on the machine, and
-       only forced 4.0 if that ToolsVersion did not exist.
-
-       Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-       but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-       the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-       property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-       as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-       targets.
-   -->
-
-  <Choose>
-    <When Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <PropertyGroup>
-        <CommonTargetsPath>$(MSBuildFrameworkToolsPath)\Microsoft.Common.targets</CommonTargetsPath>
-      </PropertyGroup>
-    </When>
-    <Otherwise>
-      <PropertyGroup>
-        <CommonTargetsPath>$(MSBuildToolsPath)\Microsoft.Common.CurrentVersion.targets</CommonTargetsPath>
-      </PropertyGroup>
-    </Otherwise>
-  </Choose>
-
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-     <!--
-          Overrides for the Microsoft.Common.targets extension targets. Used to make sure that only the imports we specify
-          (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default.
-
-          NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
-          import Microsoft.Common.targets from the current directory and thus don't get the benefit of the redirections, so for
-          any changes to this logic in this file, please also edit the other two.
-      -->
-    <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportByWildcardBeforeMicrosoftCommonTargets)</ImportByWildcardBefore40MicrosoftCommonTargets>
-    <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportByWildcardBefore40MicrosoftCommonTargets>
-
-    <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportByWildcardAfterMicrosoftCommonTargets)</ImportByWildcardAfter40MicrosoftCommonTargets>
-    <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportByWildcardAfter40MicrosoftCommonTargets>
-
-    <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets)</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-
-    <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-
-    <ImportByWildcardBeforeMicrosoftCommonTargets>false</ImportByWildcardBeforeMicrosoftCommonTargets>
-    <ImportByWildcardAfterMicrosoftCommonTargets>false</ImportByWildcardAfterMicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>false</ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>
-
-    <CustomBeforeMicrosoftCommonTargets Condition="'$(CustomBeforeMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.Microsoft.Common.targets</CustomBeforeMicrosoftCommonTargets>
-    <CustomAfterMicrosoftCommonTargets Condition="'$(CustomAfterMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.Common.targets</CustomAfterMicrosoftCommonTargets>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == 'Silverlight' or ('$(TargetFrameworkIdentifier)' == '' and ('$(TargetRuntime)' == 'Managed' or '$(TargetRuntime)' == '')))">
-     <!--
-          Overrides for the Microsoft.NETFramework.props extension targets. Used to make sure that only the imports we specify
-          (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Required because
-          Microsoft.Common.targets imports it from the current directory, so we don't get a chance to redirect these in its
-          own redirection targets.
-
-          NOTE: This logic is duplicated in Microsoft.VisualBasic.targets and in Microsoft.CSharp.targets because those two files
-          import Microsoft.Common.targets from the current directory and thus don't get the benefit of these redirections either,
-          so for any changes to this logic in this file, please also edit the other two.
-      -->
-    <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-    <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-
-    <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardAfterMicrosoftNetFrameworkProps)</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-    <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-
-    <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-
-    <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-
-    <ImportByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
-    <ImportByWildcardAfterMicrosoftNetFrameworkProps>false</ImportByWildcardAfterMicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>
+  <PropertyGroup>
+    <CommonTargetsPath>$(MSBuildToolsPath)\Microsoft.Common.CurrentVersion.targets</CommonTargetsPath>
   </PropertyGroup>
 
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-  </ImportGroup>
-
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-  </ImportGroup>
-
   <Import Project="$(CommonTargetsPath)" />
 
   <!--
@@ -120,7 +27,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
         Each package management system should use a unique moniker to avoid collisions.  It is a wild-card import so the package
         management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.
-    -->
+  -->
   <PropertyGroup>
     <ImportProjectExtensionTargets Condition="'$(ImportProjectExtensionTargets)' == ''">true</ImportProjectExtensionTargets>
   </PropertyGroup>
@@ -132,9 +39,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </PropertyGroup>
 
   <!--
-        Determine the path to the directory build targets file if the user did not disable $(ImportDirectoryBuildTargets) and
-        they did not already specify an absolute path to use via $(DirectoryBuildTargetsPath)
-    -->
+      Determine the path to the directory build targets file if the user did not disable $(ImportDirectoryBuildTargets) and
+      they did not already specify an absolute path to use via $(DirectoryBuildTargetsPath)
+  -->
   <PropertyGroup Condition="'$(ImportDirectoryBuildTargets)' == 'true' and '$(DirectoryBuildTargetsPath)' == ''">
     <_DirectoryBuildTargetsFile Condition="'$(_DirectoryBuildTargetsFile)' == ''">Directory.Build.targets</_DirectoryBuildTargetsFile>
     <_DirectoryBuildTargetsBasePath Condition="'$(_DirectoryBuildTargetsBasePath)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), '$(_DirectoryBuildTargetsFile)'))</_DirectoryBuildTargetsBasePath>
@@ -143,21 +50,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(DirectoryBuildTargetsPath)" Condition="'$(ImportDirectoryBuildTargets)' == 'true' and exists('$(DirectoryBuildTargetsPath)')"/>
 
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-  </ImportGroup>
-
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-  </ImportGroup>
-
-   <!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
-        (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not
-        installed.  -->
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
-   </PropertyGroup>
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index f909cc1afe2..8bcaa32b507 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -1,188 +1,109 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-
-    <!-- This file lists all the tasks that ship by default with MSBuild -->
-
-    <!-- NOTE: Listing a <UsingTask> tag in a *.tasks file like this one rather than in a project or targets file
-               can give a significant performance advantage in a large build, because every time a <UsingTask> tag
-               is encountered, it will cause the task to be rediscovered next time the task is used. -->
-    <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->
-
-    <!-- Versions required for SxS back-compat with Dev10 SP1 / Dev11 and ToolsVersion=12.0 projects -->
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.AL"                                    AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AspNetCompiler"                        AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignCulture"                         AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignProjectConfiguration"            AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignTargetPath"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CallTarget"                            AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CombinePath"                           AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ConvertToAbsolutePath"                 AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Copy"                                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateCSharpManifestResourceName"      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateItem"                            AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateProperty"                        AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName" AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Csc"                                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Delete"                                AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Error"                                 AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Exec"                                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindAppConfigFile"                     AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindInList"                            AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindUnderPath"                         AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FormatUrl"                             AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FormatVersion"                         AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateApplicationManifest"           AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateBootstrapper"                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateDeploymentManifest"            AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkSdkPath"                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetReferenceAssemblyPaths"             AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.LC"                                    AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.MakeDir"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Message"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Move"                                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.MSBuild"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ReadLinesFromFile"                     AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDir"                             AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDuplicates"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RequiresFramework35SP1Assembly"        AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveAssemblyReference"              AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveSDKReference"                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetInstalledSDKLocations"              AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetSDKReferenceFiles"                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveKeySource"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveManifestFiles"                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNativeReference"                AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput"        AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.SGen"                                  AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.SignFile"                              AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Touch"                                 AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' == '') and '$(DisableOutOfProcTaskHost)' == ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.UpdateManifest"                        AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Vbc"                                   AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Warning"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WriteCodeFragment"                     AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WriteLinesToFile"                      AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XmlPeek"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XmlPoke"                               AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XslTransformation"                     AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WinMDExp"                              AssemblyName="Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' == ''" />
-
-    <!-- Actual 12.0 tasks -->
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.AL"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AspNetCompiler"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignCulture"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignLinkMetadata"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignProjectConfiguration"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.AssignTargetPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CallTarget"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CombinePath"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ConvertToAbsolutePath"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CombineTargetFrameworkInfoProperties"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CombineXmlElements"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Copy"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateCSharpManifestResourceName"      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateItem"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateProperty"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName" AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Delete"                                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.DownloadFile"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Error"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ErrorFromResources"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Exec"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindAppConfigFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindInList"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindInvalidProjectReferences"          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.FindUnderPath"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FormatUrl"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.FormatVersion"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateApplicationManifest"           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateBindingRedirects"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateBootstrapper"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateDeploymentManifest"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateLauncher"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="NET" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == ''  and '$(MSBuildRuntimeType)' != 'Core'" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetCompatiblePlatform"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetFileHash"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkSdkPath"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetReferenceAssemblyPaths"             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Hash"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.LC"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.MakeDir"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Message"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Move"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.MSBuild"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ReadLinesFromFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDir"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDuplicates"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.RequiresFramework35SP1Assembly"        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveAssemblyReference"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveCodeAnalysisRuleSet"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveSDKReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveSDKReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetInstalledSDKLocations"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.GetSDKReferenceFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveKeySource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveManifestFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNativeReference"                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput"        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.SGen"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.SignFile"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Telemetry"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Touch"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
-
-    <UsingTask TaskName="Microsoft.Build.Tasks.UpdateManifest"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Unzip"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.VerifyFileHash"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.Warning"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WriteCodeFragment"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WriteLinesToFile"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XmlPeek"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XmlPoke"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.XslTransformation"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.WinMDExp"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.Build.Tasks.ZipDirectory"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-    <!-- Roslyn tasks are now in an assembly owned and shipped by Roslyn -->
-    <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.Csc"                       AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.Vbc"                       AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-    <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.CopyRefAssembly"           AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" Condition="'$(MSBuildAssemblyVersion)' != ''" />
-
-</Project>
+<Project>
+
+  <!-- This file lists all the tasks that ship by default with MSBuild -->
+
+  <!-- NOTE: Listing a <UsingTask> tag in a *.tasks file like this one rather than in a project or targets file
+             can give a significant performance advantage in a large build, because every time a <UsingTask> tag
+             is encountered, it will cause the task to be rediscovered next time the task is used. -->
+
+  <!-- NOTE: Using the fully qualified class name in a <UsingTask> tag is faster than using a partially qualified name. -->
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.AL"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.AspNetCompiler"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.AssignCulture"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.AssignLinkMetadata"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.AssignProjectConfiguration"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.AssignTargetPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CallTarget"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CombinePath"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ConvertToAbsolutePath"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CombineTargetFrameworkInfoProperties"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CombineXmlElements"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Copy"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CreateCSharpManifestResourceName"      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CreateItem"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CreateProperty"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.CreateVisualBasicManifestResourceName" AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Delete"                                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.DownloadFile"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Error"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ErrorFromResources"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Exec"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.FindAppConfigFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.FindInList"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.FindInvalidProjectReferences"          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.FindUnderPath"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.FormatUrl"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.FormatVersion"                         AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateApplicationManifest"           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateBindingRedirects"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateBootstrapper"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateDeploymentManifest"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateLauncher"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(DisableOutOfProcTaskHost)' != ''" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="NET" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateResource"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="'$(DisableOutOfProcTaskHost)' == ''  and '$(MSBuildRuntimeType)' != 'Core'" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetCompatiblePlatform"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetFileHash"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkSdkPath"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetReferenceAssemblyPaths"             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Hash"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.LC"                                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.MakeDir"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Message"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Move"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.MSBuild"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ReadLinesFromFile"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(DisableOutOfProcTaskHost)' != ''" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RegisterAssembly"                      AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDir"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RemoveDuplicates"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.RequiresFramework35SP1Assembly"        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveAssemblyReference"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveCodeAnalysisRuleSet"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveSDKReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveSDKReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetInstalledSDKLocations"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetSDKReferenceFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveKeySource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveManifestFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNativeReference"                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNonMSBuildProjectOutput"        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.SGen"                                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.SignFile"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Telemetry"                             AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Touch"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(DisableOutOfProcTaskHost)' != ''" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR4" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'" />
+
+  <UsingTask TaskName="Microsoft.Build.Tasks.UpdateManifest"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Unzip"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.VerifyFileHash"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.Warning"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.WriteCodeFragment"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.WriteLinesToFile"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.XmlPeek"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.XmlPoke"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.XslTransformation"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.WinMDExp"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.ZipDirectory"                          AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+
+  <!-- Roslyn tasks are now in an assembly owned and shipped by Roslyn -->
+  <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.Csc"                       AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" />
+  <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.Vbc"                       AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" />
+  <UsingTask TaskName="Microsoft.CodeAnalysis.BuildTasks.CopyRefAssembly"           AssemblyFile="$(RoslynTargetsPath)\Microsoft.Build.Tasks.CodeAnalysis.dll" />
+
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Data.Entity.targets b/src/Tasks/Microsoft.Data.Entity.targets
index 534b0e4c192..6ebf8cdb6ea 100644
--- a/src/Tasks/Microsoft.Data.Entity.targets
+++ b/src/Tasks/Microsoft.Data.Entity.targets
@@ -1,15 +1,15 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.Data.Entity.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.Data.Entity.targets')" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.Data.Entity.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.Data.Entity.targets')" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Managed.After.targets b/src/Tasks/Microsoft.Managed.After.targets
index a5dfd1da0ff..a10bf7c0784 100644
--- a/src/Tasks/Microsoft.Managed.After.targets
+++ b/src/Tasks/Microsoft.Managed.After.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
           created a backup copy.  Incorrect changes to this file will make it
@@ -10,32 +10,31 @@ It is imported after the common targets have been imported.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
-   <!-- Define crosstargeting for static graph, so it can identify inner and outer build graph nodes -->
-   <PropertyGroup>
-      <InnerBuildProperty>TargetFramework</InnerBuildProperty>
-      <InnerBuildPropertyValues>TargetFrameworks</InnerBuildPropertyValues>
-   </PropertyGroup>
+  <!-- Define crosstargeting for static graph, so it can identify inner and outer build graph nodes -->
+  <PropertyGroup>
+    <InnerBuildProperty>TargetFramework</InnerBuildProperty>
+    <InnerBuildPropertyValues>TargetFrameworks</InnerBuildPropertyValues>
+  </PropertyGroup>
 
-   <PropertyGroup Condition="'$(IsGraphBuild)' == 'true'">
-      <AddTransitiveProjectReferencesInStaticGraph Condition="'$(AddTransitiveProjectReferencesInStaticGraph)' == '' and '$(UsingMicrosoftNETSdk)' == 'true' and '$(DisableTransitiveProjectReferences)' != 'true'">true</AddTransitiveProjectReferencesInStaticGraph>
-   </PropertyGroup>
+  <PropertyGroup Condition="'$(IsGraphBuild)' == 'true'">
+    <AddTransitiveProjectReferencesInStaticGraph Condition="'$(AddTransitiveProjectReferencesInStaticGraph)' == '' and '$(UsingMicrosoftNETSdk)' == 'true' and '$(DisableTransitiveProjectReferences)' != 'true'">true</AddTransitiveProjectReferencesInStaticGraph>
+  </PropertyGroup>
 
-   <ItemGroup Condition="'$(IsGraphBuild)' == 'true'">
-      <!-- WPF projects generate a project with a random name at build time and then build the project via the IBuildEngine callbacks.
-           Detect WPF, and exclude the generated project from static graph isolation constraint checking.
-           Escape the item to avoid eager evaluation of the wildcards.
-      -->
-      <GraphIsolationExemptReference
-         Condition="'$(UseWPF)' == 'true' or '@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(XamlPage)' != '' or '@(XamlAppDef)' != ''"
-         Include="$([MSBuild]::Escape('$(MSBuildProjectDirectory)\$(MSBuildProjectName)*_wpftmp$(MSBuildProjectExtension)'))" />
-   </ItemGroup>
+  <ItemGroup Condition="'$(IsGraphBuild)' == 'true'">
+    <!-- WPF projects generate a project with a random name at build time and then build the project via the IBuildEngine callbacks.
+        Detect WPF, and exclude the generated project from static graph isolation constraint checking.
+        Escape the item to avoid eager evaluation of the wildcards.
+    -->
+    <GraphIsolationExemptReference
+        Condition="'$(UseWPF)' == 'true' or '@(Page)' != '' or '@(ApplicationDefinition)' != '' or '@(XamlPage)' != '' or '@(XamlAppDef)' != ''"
+        Include="$([MSBuild]::Escape('$(MSBuildProjectDirectory)\$(MSBuildProjectName)*_wpftmp$(MSBuildProjectExtension)'))" />
+  </ItemGroup>
 
   <!--
-    Properties for extension of ProjectReferenceTargets.
-    Append any current value which may have been provided in a Directory.Build.props since the intent was likely to append, not prepend.
+      Properties for extension of ProjectReferenceTargets.
+      Append any current value which may have been provided in a Directory.Build.props since the intent was likely to append, not prepend.
   -->
   <PropertyGroup Condition="'$(IsGraphBuild)' == 'true'">
     <!-- Empty case is for outer builds which do not import the target files that set BuildProjectReferences -->
@@ -69,4 +68,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ProjectReferenceTargets Include="GetCopyToPublishDirectoryItems" Targets="$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)" Condition=" '$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)' != '' " />
   </ItemGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Managed.Before.targets b/src/Tasks/Microsoft.Managed.Before.targets
index d8bde6bb9a2..01f2f5ee3de 100644
--- a/src/Tasks/Microsoft.Managed.Before.targets
+++ b/src/Tasks/Microsoft.Managed.Before.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
           created a backup copy.  Incorrect changes to this file will make it
@@ -10,16 +10,15 @@ It is imported before the common targets have been imported.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
-   <!--
-        We are doing a cross-targeting build if there is a non-empty list of target frameworks specified
-        and there is no current target framework being built individually. In that case, a multitargeting
-        project file like Microsoft.<language>.CrossTargeting.targets gets imported.
-   -->
-   <PropertyGroup Condition="'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''">
-      <IsCrossTargetingBuild>true</IsCrossTargetingBuild>
-   </PropertyGroup>
+  <!--
+      We are doing a cross-targeting build if there is a non-empty list of target frameworks specified
+      and there is no current target framework being built individually. In that case, a multitargeting
+      project file like Microsoft.<language>.CrossTargeting.targets gets imported.
+  -->
+  <PropertyGroup Condition="'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''">
+    <IsCrossTargetingBuild>true</IsCrossTargetingBuild>
+  </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Managed.targets b/src/Tasks/Microsoft.Managed.targets
index 25d1e7528c2..49696addc04 100644
--- a/src/Tasks/Microsoft.Managed.targets
+++ b/src/Tasks/Microsoft.Managed.targets
@@ -1,16 +1,15 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 This file is deprecated and left here for back compat reasons. It is replaced by Microsoft.Managed.<Before|After>.targets
 
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.Before.targets" />
 
-   <!-- Item copied from Microsoft.Common.Currentversion.targets   -->
+  <!-- Item copied from Microsoft.Common.Currentversion.targets   -->
   <PropertyGroup>
     <_RecursiveTargetForContentCopying>GetCopyToOutputDirectoryItems</_RecursiveTargetForContentCopying>
     <_RecursiveTargetForContentCopying Condition=" '$(MSBuildCopyContentTransitively)' == 'false' ">_GetCopyToOutputDirectoryItemsFromThisProject</_RecursiveTargetForContentCopying>
@@ -18,4 +17,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.After.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.NET.props b/src/Tasks/Microsoft.NET.props
index 12ee616dbce..b983647d821 100644
--- a/src/Tasks/Microsoft.NET.props
+++ b/src/Tasks/Microsoft.NET.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.NET.props
 
@@ -12,8 +12,7 @@ these two files are used to encapsulate the multi-targeting and framework specif
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!--
     ============================================================
@@ -21,7 +20,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     Get the paths for the .NET Framework and .NET Core tools and sdk tools directories.
     This does not need to be a target since all of the values are availiable at project evaluation time.
     ============================================================
-    -->
+  -->
   <PropertyGroup>
     <TargetFrameworkSDKToolsDirectory Condition=" '$(TargetFrameworkSDKToolsDirectory)' == '' ">$(SDK40ToolsPath)</TargetFrameworkSDKToolsDirectory>
   </PropertyGroup>
@@ -31,7 +30,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
                                         SetHighEntropyVA
     Set HighEntropyVA according to the TargetFramework
     ============================================================
-    -->
+  -->
 
   <PropertyGroup Condition="('$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(TargetingClr2Framework)' != 'true' and '$(TargetFrameworkVersion)' != 'v4.0') or '$(TargetFrameworkIdentifier)' == '.NETCoreApp' or '$(TargetFrameworkIdentifier)' == '.NETStandard'">
     <HighEntropyVA Condition="'$(HighEntropyVA)' == ''">true</HighEntropyVA>
@@ -41,4 +40,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <HighEntropyVA Condition="'$(HighEntropyVA)' == ''">false</HighEntropyVA>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
index 10000e46364..0f03f04dfef 100644
--- a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
+++ b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.NETFramework.CurrentVersion.props
 
@@ -12,8 +12,7 @@ these two files are used to encapsulate the multi-targeting and framework specif
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
      <ImportByWildcardBeforeMicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
@@ -40,9 +39,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(TargetFrameworkVersion)' == 'v4.0' and '$(FrameworkPathOverride)' == ''">
     <!-- The FrameworkPathOverride property is required for the IDE Visual Basic compiler to initialize.
-             This location contains reference assemblies for mscorlib.dll and other key VB assemblies.
-             This property is required during project evaluation, since the IDE compilers need to initialize before
-             any targets have had a chance to run, hence the use of a function to retrieve the location.
+        This location contains reference assemblies for mscorlib.dll and other key VB assemblies.
+        This property is required during project evaluation, since the IDE compilers need to initialize before
+        any targets have had a chance to run, hence the use of a function to retrieve the location.
      -->
     <!-- Hard code for the most common TargetFrameworkVersion of v4.0 with no profile: this enables us to avoid calling the GetReferenceAssemblyPaths task -->
     <_FullFrameworkReferenceAssemblyPaths Condition="Exists('$(MSBuildProgramFiles32)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\RedistList\FrameworkList.xml')">$(MSBuildProgramFiles32)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0</_FullFrameworkReferenceAssemblyPaths>
@@ -60,7 +59,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <MSBuildFrameworkToolsRoot Condition="'$(MSBuildFrameworkToolsRoot)' == '' and '$(MSBuildRuntimeType)' != 'Core'">$(Registry:HKEY_LOCAL_MACHINE\Software\Microsoft\.NETFramework@InstallRoot)</MSBuildFrameworkToolsRoot>
     <_DeploymentSignClickOnceManifests Condition="'$(TargetFrameworkVersion)' == 'v2.0' or '$(TargetFrameworkVersion)' == 'v3.0' or '$(SignManifests)' == 'true'">true</_DeploymentSignClickOnceManifests>
     <!-- Assembly names added to the AdditionalExplicitAssemblyReferences property will be added as references to the resolve assembly reference call by default this is done because when upgrading from
-         a project targeting 2.0 to 3.5 the system.core reference is not added, therefore we need to add it automatically -->
+        a project targeting 2.0 to 3.5 the system.core reference is not added, therefore we need to add it automatically -->
     <AddAdditionalExplicitAssemblyReferences Condition="'$(AddAdditionalExplicitAssemblyReferences)' == ''">true</AddAdditionalExplicitAssemblyReferences>
     <AdditionalExplicitAssemblyReferences Condition="'$(AddAdditionalExplicitAssemblyReferences)' == 'true' and '$(TargetCompactFramework)' != 'true' and ('$(TargetFrameworkVersion)' != 'v2.0' and '$(TargetFrameworkVersion)' != 'v3.0')">System.Core;$(AdditionalExplicitAssemblyReferences)</AdditionalExplicitAssemblyReferences>
   </PropertyGroup>
@@ -71,15 +70,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     Get the paths for the .NET Framework tools and sdk tools directories.
     This does not need to be a target since all of the values are availiable at project evaluation time.
     ============================================================
-    -->
+  -->
 
   <PropertyGroup>
     <TargetingClr2Framework Condition="'$(TargetFrameworkVersion)' == 'v2.0' or '$(TargetFrameworkVersion)' == 'v3.0' or '$(TargetFrameworkVersion)' == 'v3.5'">true</TargetingClr2Framework>
     <MSBuildManagedCompilerPath Condition="'$(TargetingClr2Framework)' == 'true'">$(MSBuildFrameworkToolsRoot)\v3.5</MSBuildManagedCompilerPath >
     <TargetFrameworkSDKToolsDirectory Condition="'$(TargetingClr2Framework)' == 'true'">$(SDK35ToolsPath)</TargetFrameworkSDKToolsDirectory>
     <!-- If the sdk path is not 3.5 or lower set it to the 40 sdk tools path. This will allow future target framework versions to use the 4.0 sdk tool set
-             When a new windows SDK revs they will inplace update the location pointed to by this property. When a new sdk is release this target will have to be
-             revised along with another toolsversion. -->
+        When a new windows SDK revs they will inplace update the location pointed to by this property. When a new sdk is release this target will have to be
+        revised along with another toolsversion. -->
     <TargetedRuntimeVersion Condition="'$(TargetedRuntimeVersion)' == '' and ('$(TargetingClr2Framework)' == 'true')">v2.0.50727</TargetedRuntimeVersion>
     <TargetedRuntimeVersion Condition="'$(TargetedRuntimeVersion)' == ''">v$(MSBuildRuntimeVersion)</TargetedRuntimeVersion>
   </PropertyGroup>
@@ -114,11 +113,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ImplicitlyExpandDesignTimeFacades Condition="'$(ImplicitlyExpandDesignTimeFacades)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(TargetingClr2Framework)' != 'true' and '$(TargetFrameworkVersion)' != 'v4.0')">true</ImplicitlyExpandDesignTimeFacades>
   </PropertyGroup>
 
+  <PropertyGroup>
+    <AvailablePlatforms Condition="!$(AvailablePlatforms.Contains('ARM64')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '4.0'))">$(AvailablePlatforms),ARM64</AvailablePlatforms>
+  </PropertyGroup>
+
   <!--Import props that are common for both full framework and core.
-    And before the ImportAfter\* , so users can override it-->
+      And before the ImportAfter\* , so users can override it-->
   <Import Project="$(MSBuildToolsPath)\Microsoft.NET.props" />
 
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.props\ImportAfter')"/>
   <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.props\ImportAfter')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets b/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
index 5e79387e8cd..985f36bfbe9 100644
--- a/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.NETFramework.CurrentVersion.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.NETFramework.CurrentVersion.targets
 
@@ -12,8 +12,7 @@ these two files are used to encapsulate the multi-targeting and framework specif
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <PropertyGroup>
      <ImportByWildcardBeforeMicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardBeforeMicrosoftNetFrameworkTargets)' == ''">true</ImportByWildcardBeforeMicrosoftNetFrameworkTargets>
@@ -30,7 +29,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       DependsOnTargets="$(GetFrameworkPathsDependsOn)">
 
     <!-- For backwards compatibility of targets who replaced this target we cannot move these values outside the target even though they
-             now only depend on statically availiable values-->
+        now only depend on statically availiable values-->
 
     <ItemGroup>
       <_TargetFramework40DirectoryItem Include="$(MSBuildFrameworkToolsRoot)v4.0.30319"/>
@@ -134,4 +133,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.targets\ImportAfter')"/>
   <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.NETFramework.targets\ImportAfter')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.NETFramework.props b/src/Tasks/Microsoft.NETFramework.props
index ed2109fb069..a66a0d25e2b 100644
--- a/src/Tasks/Microsoft.NETFramework.props
+++ b/src/Tasks/Microsoft.NETFramework.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.NetFramework.props
 
@@ -12,36 +12,12 @@ these two files are used to encapsulate the multi-targeting and framework specif
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
+<Project DefaultTargets="Build">
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <NetFrameworkPropsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.props</NetFrameworkPropsPath>
+  </PropertyGroup>
 
-   <!--
-        In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-        as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-        just used whatever ToolsVersion was in the project file if it existed on the machine, and
-        only forced 4.0 if that ToolsVersion did not exist.
+  <Import Project="$(NetFrameworkPropsPath)" />
 
-        Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-        but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-        the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-        property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-        as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-        targets.
-   -->
-
-   <Choose>
-      <When Condition="'$(MSBuildAssemblyVersion)' == ''">
-         <PropertyGroup>
-            <NetFrameworkPropsPath>$(MSBuildFrameworkToolsPath)\Microsoft.NETFramework.props</NetFrameworkPropsPath>
-         </PropertyGroup>
-      </When>
-      <Otherwise>
-         <PropertyGroup>
-            <NetFrameworkPropsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.props</NetFrameworkPropsPath>
-         </PropertyGroup>
-      </Otherwise>
-   </Choose>
-
-   <Import Project="$(NetFrameworkPropsPath)" />
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.NETFramework.targets b/src/Tasks/Microsoft.NETFramework.targets
index 47f919f678d..d0ff2425a82 100644
--- a/src/Tasks/Microsoft.NETFramework.targets
+++ b/src/Tasks/Microsoft.NETFramework.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.NetFramework.targets
 
@@ -12,69 +12,12 @@ these two files are used to encapsulate the multi-targeting and framework specif
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
+<Project DefaultTargets="Build">
 
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+    <PropertyGroup>
+      <NetFrameworkTargetsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.targets</NetFrameworkTargetsPath>
+    </PropertyGroup>
 
-   <!--
-        In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-        as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-        just used whatever ToolsVersion was in the project file if it existed on the machine, and
-        only forced 4.0 if that ToolsVersion did not exist.
+  <Import Project="$(NetFrameworkTargetsPath)" />
 
-        Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-        but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-        the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-        property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-        as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-        targets.
-   -->
-
-   <Choose>
-      <When Condition="'$(MSBuildAssemblyVersion)' == ''">
-         <PropertyGroup>
-            <NetFrameworkTargetsPath>$(MSBuildFrameworkToolsPath)\Microsoft.NETFramework.targets</NetFrameworkTargetsPath>
-         </PropertyGroup>
-      </When>
-      <Otherwise>
-         <PropertyGroup>
-            <NetFrameworkTargetsPath>$(MSBuildToolsPath)\Microsoft.NETFramework.CurrentVersion.targets</NetFrameworkTargetsPath>
-         </PropertyGroup>
-      </Otherwise>
-   </Choose>
-
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <!--
-           Overrides for the Microsoft.NETFramework.targets extension targets.  Used to make sure that only the imports we specify
-           (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default.
-       -->
-      <ImportByWildcardBefore40MicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkTargets)' == ''">$(ImportByWildcardBeforeMicrosoftNetFrameworkTargets)</ImportByWildcardBefore40MicrosoftNetFrameworkTargets>
-      <ImportByWildcardBefore40MicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkTargets)' == ''">true</ImportByWildcardBefore40MicrosoftNetFrameworkTargets>
-
-      <ImportByWildcardAfter40MicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkTargets)' == ''">$(ImportByWildcardAfterMicrosoftNetFrameworkTargets)</ImportByWildcardAfter40MicrosoftNetFrameworkTargets>
-      <ImportByWildcardAfter40MicrosoftNetFrameworkTargets Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkTargets)' == ''">true</ImportByWildcardAfter40MicrosoftNetFrameworkTargets>
-
-      <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkTargets)</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets>
-      <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets>
-
-      <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkTargets)</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets>
-      <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets>
-
-      <ImportByWildcardBeforeMicrosoftNetFrameworkTargets>false</ImportByWildcardBeforeMicrosoftNetFrameworkTargets>
-      <ImportByWildcardAfterMicrosoftNetFrameworkTargets>false</ImportByWildcardAfterMicrosoftNetFrameworkTargets>
-      <ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkTargets>
-      <ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkTargets>false</ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkTargets>
-   </PropertyGroup>
-
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportBefore')"/>
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportBefore')"/>
-   </ImportGroup>
-
-   <Import Project="$(NetFrameworkTargetsPath)" />
-
-   <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportAfter')"/>
-      <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.targets\ImportAfter')"/>
-   </ImportGroup>
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.ServiceModel.targets b/src/Tasks/Microsoft.ServiceModel.targets
index 10579ef15e2..f65d5c6e3f9 100644
--- a/src/Tasks/Microsoft.ServiceModel.targets
+++ b/src/Tasks/Microsoft.ServiceModel.targets
@@ -1,15 +1,15 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.ServiceModel.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.ServiceModel.targets')" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.ServiceModel.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.ServiceModel.targets')" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets b/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
index 6d0ca32d78f..ceb30bc1a02 100644
--- a/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.VisualBasic.CrossTargeting.targets
@@ -9,8 +9,7 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
   <!-- Import design time targets for Roslyn Project System. These are only available if Visual Studio is installed. -->
   <!-- Import design time targets before the common crosstargeting targets, which import targets from Nuget. -->
@@ -22,4 +21,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="Microsoft.Common.CrossTargeting.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets b/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
index 45f937a1389..1d83c4a6327 100644
--- a/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualBasic.CurrentVersion.targets
 
@@ -14,8 +14,7 @@ this file.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
     <PropertyGroup>
        <ImportByWildcardBeforeMicrosoftVisualBasicTargets Condition="'$(ImportByWildcardBeforeMicrosoftVisualBasicTargets)' == ''">true</ImportByWildcardBeforeMicrosoftVisualBasicTargets>
@@ -375,4 +374,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualBasic.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfterMicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualBasic.targets\ImportAfter')"/>
     <Import Project="$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualBasic.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualBasic.targets\ImportAfter')"/>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualBasic.targets b/src/Tasks/Microsoft.VisualBasic.targets
index 9e3824ca1b2..aa7a6f812fd 100644
--- a/src/Tasks/Microsoft.VisualBasic.targets
+++ b/src/Tasks/Microsoft.VisualBasic.targets
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="utf-8"?>
 <!--
 ***********************************************************************************************
 Microsoft.VisualBasic.targets
@@ -15,32 +14,9 @@ this file.
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-
-   <!--
-        In VS 2010 SP1 and VS 2012, both supported for asset compatibility, the MSBuild installed
-        as part of them did not enforce using the local ToolsVersion (4.0) in all cases, but instead
-        just used whatever ToolsVersion was in the project file if it existed on the machine, and
-        only forced 4.0 if that ToolsVersion did not exist.
-
-        Moving forward, we do want to enforce a single acting ToolsVersion per version of Visual Studio,
-        but in order to approximate this behavior on VS 2010 SP1 and VS 2012 as well, we've redirected
-        the targets:  If we're building using 4.X MSBuild (which doesn't define the new reserved
-        property, MSBuildAssemblyVersion), we'll point right back at the 4.0 targets, which still exist
-        as part of the .NET Framework.  Only if we're using the new MSBuild will we point to the current
-        targets.
-   -->
+<Project>
 
   <Choose>
-    <When Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <PropertyGroup>
-        <VisualBasicTargetsPath>$(MSBuildFrameworkToolsPath)\Microsoft.VisualBasic.targets</VisualBasicTargetsPath>
-        <!-- Same condition as in .NET 4.5 VB targets so that we can override the behavior where it defaults to
-             MSBuildToolsPath, which would be incorrect in this case -->
-        <VbcToolPath Condition="'$(VbcToolPath)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">$(MsBuildFrameworkToolsPath)</VbcToolPath>
-      </PropertyGroup>
-    </When>
     <When Condition="'$(IsCrossTargetingBuild)' == 'true'">
       <PropertyGroup>
         <VisualBasicTargetsPath>$(MSBuildToolsPath)\Microsoft.VisualBasic.CrossTargeting.targets</VisualBasicTargetsPath>
@@ -53,143 +29,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     </Otherwise>
   </Choose>
 
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <!--
-         Overrides for the Microsoft.Common.targets extension targets. Used to make sure that only the imports we specify
-         (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Defined here because
-         Microsoft.VisualBasic.targets imports Microsoft.Common.targets from the current directory rather than using
-         MSBuildToolsPath, so defining these in Microsoft.Common.targets alone would not suffice for VB projects.
-
-         NOTE: This logic is duplicated in Microsoft.CSharp.targets (C# has the same problem) and in Microsoft.Common.targets
-         (for anyone who DOES import it directly), so for any changes to this logic in this file, please also edit the other two.
-     -->
-    <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportByWildcardBeforeMicrosoftCommonTargets)</ImportByWildcardBefore40MicrosoftCommonTargets>
-    <ImportByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportByWildcardBefore40MicrosoftCommonTargets>
-
-    <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportByWildcardAfterMicrosoftCommonTargets)</ImportByWildcardAfter40MicrosoftCommonTargets>
-    <ImportByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportByWildcardAfter40MicrosoftCommonTargets>
-
-    <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets)</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets>
-
-    <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets>
-
-    <ImportByWildcardBeforeMicrosoftCommonTargets>false</ImportByWildcardBeforeMicrosoftCommonTargets>
-    <ImportByWildcardAfterMicrosoftCommonTargets>false</ImportByWildcardAfterMicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets>
-    <ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>false</ImportUserLocationsByWildcardAfterMicrosoftCommonTargets>
-
-    <CustomBeforeMicrosoftCommonTargets Condition="'$(CustomBeforeMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.Microsoft.Common.targets</CustomBeforeMicrosoftCommonTargets>
-    <CustomAfterMicrosoftCommonTargets Condition="'$(CustomAfterMicrosoftCommonTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.Common.targets</CustomAfterMicrosoftCommonTargets>
-
-    <!-- Overrides for the Microsoft.VisualBasic.targets extension targets -->
-    <ImportByWildcardBefore40MicrosoftVisualBasicTargets Condition="'$(ImportByWildcardBefore40MicrosoftVisualBasicTargets)' == ''">$(ImportByWildcardBeforeMicrosoftVisualBasicTargets)</ImportByWildcardBefore40MicrosoftVisualBasicTargets>
-    <ImportByWildcardBefore40MicrosoftVisualBasicTargets Condition="'$(ImportByWildcardBefore40MicrosoftVisualBasicTargets)' == ''">true</ImportByWildcardBefore40MicrosoftVisualBasicTargets>
-
-    <ImportByWildcardAfter40MicrosoftVisualBasicTargets Condition="'$(ImportByWildcardAfter40MicrosoftVisualBasicTargets)' == ''">$(ImportByWildcardAfterMicrosoftVisualBasicTargets)</ImportByWildcardAfter40MicrosoftVisualBasicTargets>
-    <ImportByWildcardAfter40MicrosoftVisualBasicTargets Condition="'$(ImportByWildcardAfter40MicrosoftVisualBasicTargets)' == ''">true</ImportByWildcardAfter40MicrosoftVisualBasicTargets>
-
-    <ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftVisualBasicTargets)</ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets>
-    <ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets>
-
-    <ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets)</ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets>
-    <ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets>
-
-    <ImportByWildcardBeforeMicrosoftVisualBasicTargets>false</ImportByWildcardBeforeMicrosoftVisualBasicTargets>
-    <ImportByWildcardAfterMicrosoftVisualBasicTargets>false</ImportByWildcardAfterMicrosoftVisualBasicTargets>
-    <ImportUserLocationsByWildcardBeforeMicrosoftVisualBasicTargets>false</ImportUserLocationsByWildcardBeforeMicrosoftVisualBasicTargets>
-    <ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets>false</ImportUserLocationsByWildcardAfterMicrosoftVisualBasicTargets>
-
-    <CustomBeforeMicrosoftVisualBasicTargets Condition="'$(CustomBeforeMicrosoftVisualBasicTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.Before.Microsoft.VisualBasic.targets</CustomBeforeMicrosoftVisualBasicTargets>
-    <CustomAfterMicrosoftVisualBasicTargets Condition="'$(CustomAfterMicrosoftVisualBasicTargets)' == ''">$(MSBuildExtensionsPath)\v4.0\Custom.After.Microsoft.VisualBasic.targets</CustomAfterMicrosoftVisualBasicTargets>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' or '$(TargetFrameworkIdentifier)' == 'Silverlight' or ('$(TargetFrameworkIdentifier)' == '' and ('$(TargetRuntime)' == 'Managed' or '$(TargetRuntime)' == '')))">
-     <!--
-          Overrides for the Microsoft.NETFramework.props extension targets. Used to make sure that only the imports we specify
-          (hard-coded to 4.0 locations) are used, not the 12.0 locations that would be used by default. Required because
-          Microsoft.Common.targets imports it from the current directory, so we don't get a chance to redirect these in its
-          own redirection targets.
-
-          NOTE: This logic is duplicated in Microsoft.CSharp.targets and in Microsoft.Common.targets because VB and C#
-          import Microsoft.Common.targets from the current directory and thus don't get the benefit of these redirections either,
-          so for any changes to this logic in this file, please also edit the other two.
-      -->
-    <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardBeforeMicrosoftNetFrameworkProps)</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-    <ImportByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardBefore40MicrosoftNetFrameworkProps>
-
-    <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportByWildcardAfterMicrosoftNetFrameworkProps)</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-    <ImportByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportByWildcardAfter40MicrosoftNetFrameworkProps>
-
-    <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps>
-
-    <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">$(ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps)</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == ''">true</ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps>
-
-    <ImportByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportByWildcardBeforeMicrosoftNetFrameworkProps>
-    <ImportByWildcardAfterMicrosoftNetFrameworkProps>false</ImportByWildcardAfterMicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardBeforeMicrosoftNetFrameworkProps>
-    <ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>false</ImportUserLocationsByWildcardAfterMicrosoftNetFrameworkProps>
-  </PropertyGroup>
-
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportBefore')"/>
-  </ImportGroup>
-
-  <!-- Really should be imported right before Microsoft.Common.targets, but because Microsoft.VisualBasic.targets imports
-       Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-       targets), we're stuck doing it this way instead. -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportBefore')"/>
-  </ImportGroup>
-
-  <!-- Really should be imported right before Microsoft.NETFramework.props, but because Microsoft.VisualBasic.targets imports
-       Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-       targets), and Microsoft.Common.targets does likewise with Microsoft.NETFramework.props, we're stuck doing it this
-       way instead. -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportUserLocationsByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore\*" Condition="'$(ImportByWildcardBefore40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportBefore')"/>
-  </ImportGroup>
-
   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.Before.targets" />
 
   <Import Project="$(VisualBasicTargetsPath)" />
 
   <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.After.targets" />
 
-  <!-- Really should be imported right after Microsoft.NETFramework.props, but because Microsoft.VisualBasic.targets imports
-       Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-       targets), and Microsoft.Common.targets does likewise with Microsoft.NETFramework.props, we're stuck doing it this
-       way instead. -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftNetFrameworkProps)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.NETFramework.props\ImportAfter')"/>
-  </ImportGroup>
-
-  <!-- Really should be imported right after Microsoft.Common.targets, but because Microsoft.VisualBasic.targets imports
-       Microsoft.Common.targets from the current directory rather than using MSBuildToolsPath (which would redirect to our
-       targets), we're stuck doing it this way instead. -->
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.Common.targets\ImportAfter')"/>
-  </ImportGroup>
-
-  <ImportGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-    <Import Project="$(MSBuildExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportAfter\*" Condition="'$(ImportByWildcardAfter40MicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportAfter')"/>
-    <Import Project="$(MSBuildUserExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportAfter\*" Condition="'$(ImportUserLocationsByWildcardAfter40MicrosoftVisualBasicTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\4.0\Microsoft.VisualBasic.targets\ImportAfter')"/>
-  </ImportGroup>
-
-   <!-- Fix up FrameworkPathOverride, which is primarily used to determine the location of mscorlib.dll in the
-        (relatively uncommon) situation where the reference assemblies, in which it's usually found, are not
-        installed.  Defined here rather than in Microsoft.Common.targets because the .NET Microsoft.VisualBasic.targets
-        imports Microsoft.Common.targets from the current directory. -->
-   <PropertyGroup Condition="'$(MSBuildAssemblyVersion)' == ''">
-      <FrameworkPathOverride Condition="!Exists('$(FrameworkPathOverride)\mscorlib.dll')">$(MSBuildFrameworkToolsPath)</FrameworkPathOverride>
-   </PropertyGroup>
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v11.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v11.Common.props
index 858e86ecee9..9ef50e92c14 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v11.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v11.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualStudio.v11.Common.props
 
@@ -9,12 +9,11 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project ToolsVersion="4.0">
 
   <PropertyGroup>
     <VisualStudioVersion>11.0</VisualStudioVersion>
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v12.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v12.Common.props
index 6fb9cfdbfa4..428a5c1d571 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v12.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v12.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualStudio.v11.Common.props
 
@@ -9,12 +9,11 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project ToolsVersion="4.0">
 
   <PropertyGroup>
     <VisualStudioVersion>12.0</VisualStudioVersion>
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v14.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v14.Common.props
index 1f0a2830339..c2e2af3ad8e 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v14.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v14.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualStudio.v14.Common.props
 
@@ -9,12 +9,11 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
-<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project ToolsVersion="4.0">
 
   <PropertyGroup>
     <VisualStudioVersion>14.0</VisualStudioVersion>
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v15.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v15.Common.props
index 355652bffd0..9d9e0f62d71 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v15.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v15.Common.props
@@ -9,7 +9,6 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
   <PropertyGroup>
@@ -17,4 +16,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v16.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v16.Common.props
index 832c3d55387..1843227e760 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v16.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v16.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualStudio.v16.Common.props
 
@@ -9,7 +9,6 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
   <PropertyGroup>
@@ -17,4 +16,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props
index 452a3fe9cd4..94031c33888 100644
--- a/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.VisualStudio.v17.Common.props
 
@@ -9,7 +9,6 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
-
 <Project>
 
   <PropertyGroup>
@@ -17,4 +16,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
   </PropertyGroup>
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.WinFx.targets b/src/Tasks/Microsoft.WinFx.targets
index 4cf77fc6f3c..0c942235926 100644
--- a/src/Tasks/Microsoft.WinFx.targets
+++ b/src/Tasks/Microsoft.WinFx.targets
@@ -1,15 +1,15 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.WinFx.targets" Condition="'$(ImportFrameworkWinFXTargets)' != 'false' and Exists('$(MSBuildFrameworkToolsPath)\Microsoft.WinFx.targets')" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.WinFx.targets" Condition="'$(ImportFrameworkWinFXTargets)' != 'false' and Exists('$(MSBuildFrameworkToolsPath)\Microsoft.WinFx.targets')" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.WorkflowBuildExtensions.targets b/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
index 448174b8eab..580e2f75bc2 100644
--- a/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
+++ b/src/Tasks/Microsoft.WorkflowBuildExtensions.targets
@@ -1,4 +1,4 @@
-﻿<!--
+<!--
 ***********************************************************************************************
 Microsoft.WorkflowBuildExtensions.targets
 
@@ -9,31 +9,30 @@ WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and
 Copyright (C) Microsoft Corporation. All rights reserved.
 ***********************************************************************************************
 -->
+<Project>
 
-<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+  <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets')" />
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets')" />
+  <!--
+      This target in $(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets does bad
+      things to builds inside Visual Studio. Specifically, it generates files *only* when building from
+      within VS, for both real and design-time builds. This leads to all kinds of build problems.
 
-   <!--
-         This target in $(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets does bad
-         things to builds inside Visual Studio. Specifically, it generates files *only* when building from
-         within VS, for both real and design-time builds. This leads to all kinds of build problems.
+      In Dev16 we no longer need these files to exist on disk for Workflow Designer scenarios. We can't
+      modify $(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets because that would
+      break the Workflow Designer for older versions of VS. Instead, we effectively turn it off by
+      overriding it with a no-op implementation here.
+  -->
+  <Target Name="GenerateCompiledExpressionsTempFile" />
 
-         In Dev16 we no longer need these files to exist on disk for Workflow Designer scenarios. We can't
-         modify $(MSBuildFrameworkToolsPath)\Microsoft.WorkflowBuildExtensions.targets because that would
-         break the Workflow Designer for older versions of VS. Instead, we effectively turn it off by
-         overriding it with a no-op implementation here.
-   -->
-   <Target Name="GenerateCompiledExpressionsTempFile" />
-
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Xaml.targets b/src/Tasks/Microsoft.Xaml.targets
index 78f4055b273..de6672bd427 100644
--- a/src/Tasks/Microsoft.Xaml.targets
+++ b/src/Tasks/Microsoft.Xaml.targets
@@ -1,22 +1,22 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <!-- In the original Microsoft.Xaml.targets this is mapped to MSBuildBinPath, which is no longer
-        the .NET Framework directory and thus will no longer be the right answer. Override it to point
-        to the correct .NET Framework location. -->
-   <PropertyGroup>
-      <XamlBuildTaskPath Condition="'$(XamlBuildTaskPath)' == ''">$(MSBuildToolsPath64)</XamlBuildTaskPath>
-   </PropertyGroup>
+  <!-- In the original Microsoft.Xaml.targets this is mapped to MSBuildBinPath, which is no longer
+      the .NET Framework directory and thus will no longer be the right answer. Override it to point
+      to the correct .NET Framework location. -->
+  <PropertyGroup>
+    <XamlBuildTaskPath Condition="'$(XamlBuildTaskPath)' == ''">$(MSBuildToolsPath64)</XamlBuildTaskPath>
+  </PropertyGroup>
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.Xaml.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.Xaml.targets')" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Microsoft.Xaml.targets" Condition="Exists('$(MSBuildFrameworkToolsPath)\Microsoft.Xaml.targets')" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Move.cs b/src/Tasks/Move.cs
index 8e64b2f7038..1e0b1da9200 100644
--- a/src/Tasks/Move.cs
+++ b/src/Tasks/Move.cs
@@ -10,6 +10,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 174dfe25f83..7ea9782cedb 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -3,9 +3,11 @@
 
 using System;
 using System.IO;
+using System.Runtime.InteropServices;
+using Microsoft.Build.Shared.FileSystem;
+
 using System.Text;
 using System.Reflection;
-using System.Runtime.InteropServices;
 using Microsoft.Build.Shared;
 using System.Collections.Generic;
 using System.Collections;
@@ -13,11 +15,12 @@
 using System.Linq;
 using System.Runtime.ExceptionServices;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Shared.FileSystem;
+using System.Runtime.Versioning;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
-#if FEATURE_COM_INTEROP
     /// <summary>
     /// The original ITypeInfo interface in the CLR has incorrect definitions for GetRefTypeOfImplType and GetRefTypeInfo.
     /// It uses ints for marshalling handles which will result in a crash on 64 bit systems. This is a temporary interface
@@ -55,7 +58,7 @@ public interface IFixedTypeInfo
     [GuidAttribute("00020406-0000-0000-C000-000000000046")]
     [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
     [ComImport]
-    internal interface UCOMICreateITypeLib
+    internal interface ICreateTypeLib
     {
         void CreateTypeInfo();
         void SetName();
@@ -71,7 +74,9 @@ internal interface UCOMICreateITypeLib
 
     [ComImport]
     [Guid("E5CB7A31-7512-11d2-89CE-0080C792E5D8")]
+#if !NETSTANDARD2_0_OR_GREATER // NS2.0 doesn't have COM so this can't appear in the ref assembly
     [TypeLibType(TypeLibTypeFlags.FCanCreate)]
+#endif
     [ClassInterface(ClassInterfaceType.None)]
     internal class CorMetaDataDispenser
     {
@@ -80,7 +85,9 @@ internal class CorMetaDataDispenser
     [ComImport]
     [Guid("809c652e-7396-11d2-9771-00a0c9b4d50c")]
     [InterfaceType(ComInterfaceType.InterfaceIsIUnknown /*0x0001*/)]
+#if !NETSTANDARD2_0_OR_GREATER // NS2.0 doesn't have COM so this can't appear in the ref assembly
     [TypeLibType(TypeLibTypeFlags.FRestricted /*0x0200*/)]
+#endif
     internal interface IMetaDataDispenser
     {
         [return: MarshalAs(UnmanagedType.Interface)]
@@ -341,7 +348,9 @@ internal struct ASSEMBLY_INFO
         public uint cchBuf;
     }
 
-    [ComImport, Guid("E707DCDE-D1CD-11D2-BAB9-00C04F8ECEAE"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [ComImport]
+    [Guid("E707DCDE-D1CD-11D2-BAB9-00C04F8ECEAE")]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
     internal interface IAssemblyCache
     {
         /* Unused.
@@ -380,7 +389,9 @@ internal enum AssemblyCacheFlags
         DOWNLOAD = 4
     }
 
-    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("CD193BC0-B4BC-11d2-9833-00C04FC31D2E")]
+    [ComImport]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [Guid("CD193BC0-B4BC-11d2-9833-00C04FC31D2E")]
     internal interface IAssemblyName
     {
         [PreserveSig]
@@ -432,7 +443,9 @@ int IsEqual(
         int Clone(out IAssemblyName pAsmName);
     }// IAssemblyName
 
-    [ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown), Guid("21b8916c-f28e-11d2-a473-00c04f8ef448")]
+    [ComImport]
+    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
+    [Guid("21b8916c-f28e-11d2-a473-00c04f8ef448")]
     internal interface IAssemblyEnum
     {
         [PreserveSig]
@@ -469,8 +482,6 @@ internal enum AssemblyNameDisplayFlags
                                     | RETARGETABLE
     }
 
-#endif
-
     [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
     internal struct STARTUPINFO
     {
@@ -514,7 +525,7 @@ internal enum SymbolicLink
     /// </summary>
     internal static class NativeMethods
     {
-        #region Constants
+#region Constants
 
         internal static readonly IntPtr NullPtr = IntPtr.Zero;
         internal static readonly IntPtr InvalidIntPtr = new IntPtr(-1);
@@ -554,9 +565,9 @@ internal enum REGKIND
         }
 
         // Set of IMAGE_FILE constants which represent the processor architectures for native assemblies.
-        internal const UInt16 IMAGE_FILE_MACHINE_UNKNOWN = 0x0; //	The contents of this field are assumed to be applicable to any machine type
+        internal const UInt16 IMAGE_FILE_MACHINE_UNKNOWN = 0x0; // The contents of this field are assumed to be applicable to any machine type
         internal const UInt16 IMAGE_FILE_MACHINE_INVALID = UInt16.MaxValue; // Invalid value for the machine type.
-        internal const UInt16 IMAGE_FILE_MACHINE_AMD64 = 0x8664; //	x64
+        internal const UInt16 IMAGE_FILE_MACHINE_AMD64 = 0x8664; // x64
         internal const UInt16 IMAGE_FILE_MACHINE_ARM = 0x1c0; // ARM little endian
         internal const UInt16 IMAGE_FILE_MACHINE_ARMV7 = 0x1c4; // ARMv7 (or higher) Thumb mode only
         internal const UInt16 IMAGE_FILE_MACHINE_I386 = 0x14c; // Intel 386 or later processors and compatible processors
@@ -619,9 +630,9 @@ internal enum MoveFileFlags
             MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x00000020
         }
 
-        #endregion
+#endregion
 
-        #region NT header stuff
+#region NT header stuff
 
         internal const uint IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;
         internal const uint IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;
@@ -772,12 +783,14 @@ internal struct CRYPTOAPI_BLOB
             internal IntPtr pbData;
         }
 
-        #endregion
+#endregion
 
-        #region PInvoke
+#region PInvoke
         private const string Crypt32DLL = "crypt32.dll";
         private const string Advapi32DLL = "advapi32.dll";
+#if !RUNTIME_TYPE_NETCORE
         private const string MscoreeDLL = "mscoree.dll";
+#endif
 
         //------------------------------------------------------------------------------
         // CreateHardLink
@@ -1018,11 +1031,11 @@ internal static bool AllDrivesMapped()
             return false;
         }
 
-#if FEATURE_COM_INTEROP
         //------------------------------------------------------------------------------
         // CreateAssemblyCache
         //------------------------------------------------------------------------------
         [DllImport("fusion.dll")]
+        [SupportedOSPlatform("windows")]
         internal static extern uint CreateAssemblyCache(out IAssemblyCache ppAsmCache, uint dwReserved);
 
         [DllImport("fusion.dll")]
@@ -1034,6 +1047,7 @@ internal static extern int CreateAssemblyEnum(
                 IntPtr pvReserved);
 
         [DllImport("fusion.dll")]
+        [SupportedOSPlatform("windows")]
         internal static extern int CreateAssemblyNameObject(
                 out IAssemblyName ppAssemblyNameObj,
                 [MarshalAs(UnmanagedType.LPWStr)]
@@ -1043,14 +1057,16 @@ internal static extern int CreateAssemblyNameObject(
 
         /// <summary>
         /// GetCachePath from fusion.dll.
-        /// Using StringBuilder here is a way to pass a preallocated buffer of characters to (native) functions that require it.
         /// A common design pattern in unmanaged C++ is calling a function twice, once to determine the length of the string
-        /// and then again to pass the client-allocated character buffer. StringBuilder is the most straightforward way
-        /// to allocate a mutable buffer of characters and pass it around.
+        /// and then again to pass the client-allocated character buffer.
         /// </summary>
+        /// <param name="cacheFlags">Value that indicates the source of the cached assembly.</param>
+        /// <param name="cachePath">The returned pointer to the path.</param>
+        /// <param name="pcchPath">The requested maximum length of CachePath, and upon return, the actual length of CachePath.</param>
+        /// 
         [DllImport("fusion.dll", CharSet = CharSet.Unicode)]
-        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, StringBuilder cachePath, ref int pcchPath);
-#endif
+        [SupportedOSPlatform("windows")]
+        internal static extern unsafe int GetCachePath(AssemblyCacheFlags cacheFlags, [Out] char* cachePath, ref int pcchPath);
 
         //------------------------------------------------------------------------------
         // PFXImportCertStore
@@ -1115,19 +1131,19 @@ internal static extern int CreateAssemblyNameObject(
 
 #if FEATURE_MSCOREE
         /// <summary>
-        /// Get the runtime version for a given file
+        /// Get the runtime version for a given file.
         /// </summary>
-        /// <param name="szFullPath">The path of the file to be examined</param>
+        /// <param name="szFileName">The path of the file to be examined.</param>
         /// <param name="szBuffer">The buffer allocated for the version information that is returned.</param>
-        /// <param name="cchBuffer">The size, in wide characters, of szBuffer</param>
+        /// <param name="cchBuffer">The size, in wide characters, of szBuffer.</param>
         /// <param name="dwLength">The size, in bytes, of the returned szBuffer.</param>
-        /// <returns>HResult</returns>
+        /// <returns>HResult.</returns>
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static extern uint GetFileVersion(String szFullPath, StringBuilder szBuffer, int cchBuffer, out uint dwLength);
+        internal static extern unsafe uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, [Out] char* szBuffer, int cchBuffer, out int dwLength);
 #endif
-        #endregion
+#endregion
 
-        #region Methods
+#region Methods
 #if FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS
         /// <summary>
         /// Given a pointer to a metadata blob, read the string parameter from it.  Returns true if
@@ -1248,9 +1264,8 @@ internal static unsafe int CorSigUncompressData(IntPtr data, out int uncompresse
 
             return count;
         }
-        #endregion
-        #region InternalClass
-#if FEATURE_COM_INTEROP
+#endregion
+#region InternalClass
         /// <summary>
         /// This class is a wrapper over the native GAC enumeration API.
         /// </summary>
@@ -1488,7 +1503,6 @@ public static string AssemblyPathFromStrongName(string strongName)
                 return null;
             }
         }
-#endif
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/ParserState.cs b/src/Tasks/ParserState.cs
index 618da02cd24..5bfc18c8401 100644
--- a/src/Tasks/ParserState.cs
+++ b/src/Tasks/ParserState.cs
@@ -3,7 +3,9 @@
 
 using System;
 using System.Text;
-using System.Collections;
+using System.Collections.Generic;
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
@@ -17,7 +19,7 @@ internal sealed class ParseState
         private int _openConditionalDirectives;
 
         // A stack of namespaces so that nested namespaces can be supported.
-        private readonly Stack _namespaceStack = new Stack();
+        private readonly Stack<string> _namespaceStack = new Stack<string>();
 
         internal ParseState()
         {
@@ -88,7 +90,7 @@ internal string PopNamespacePart()
                 return null;
             }
 
-            return (string)_namespaceStack.Pop();
+            return _namespaceStack.Pop();
         }
 
         /// <summary>
diff --git a/src/Tasks/PiaReference.cs b/src/Tasks/PiaReference.cs
index 2b7f06b86ca..01157e389f6 100644
--- a/src/Tasks/PiaReference.cs
+++ b/src/Tasks/PiaReference.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt b/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
index 85f6da6f74e..1cc4f59b5e8 100644
--- a/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
@@ -884,6 +884,8 @@ Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.get -> bool
 Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.set -> void
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.get -> string
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.set -> void
+Microsoft.Build.Tasks.DownloadFile.Timeout.get -> int
+Microsoft.Build.Tasks.DownloadFile.Timeout.set -> void
 Microsoft.Build.Tasks.Error
 Microsoft.Build.Tasks.Error.Code.get -> string
 Microsoft.Build.Tasks.Error.Code.set -> void
@@ -1956,6 +1958,8 @@ Microsoft.Build.Tasks.SGen.UseProxyTypes.set -> void
 Microsoft.Build.Tasks.SignFile
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.get -> string
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.set -> void
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
 Microsoft.Build.Tasks.SignFile.SignFile() -> void
 Microsoft.Build.Tasks.SignFile.SigningTarget.get -> Microsoft.Build.Framework.ITaskItem
 Microsoft.Build.Tasks.SignFile.SigningTarget.set -> void
@@ -2313,8 +2317,10 @@ override Microsoft.Build.Tasks.FindInvalidProjectReferences.Execute() -> bool
 override Microsoft.Build.Tasks.FindUnderPath.Execute() -> bool
 override Microsoft.Build.Tasks.FormatUrl.Execute() -> bool
 override Microsoft.Build.Tasks.FormatVersion.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateApplicationManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBindingRedirects.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBootstrapper.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateDeploymentManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateLauncher.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateManifestBase.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateResource.Execute() -> bool
@@ -2409,6 +2415,7 @@ static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.Sign
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier) -> void
+static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.XmlToPermissionSet(System.Xml.XmlElement element) -> System.Security.PermissionSet
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 37b2642bb9b..8f3cbf42ee6 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -783,6 +783,8 @@ Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.get -> bool
 Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.set -> void
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.get -> string
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.set -> void
+Microsoft.Build.Tasks.DownloadFile.Timeout.get -> int
+Microsoft.Build.Tasks.DownloadFile.Timeout.set -> void
 Microsoft.Build.Tasks.Error
 Microsoft.Build.Tasks.Error.Code.get -> string
 Microsoft.Build.Tasks.Error.Code.set -> void
@@ -1277,6 +1279,24 @@ Microsoft.Build.Tasks.Hosting.IVbcHostObject5.SetPlatformWith32BitPreference(str
 Microsoft.Build.Tasks.Hosting.IVbcHostObject5.SetSubsystemVersion(string subsystemVersion) -> bool
 Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded
 Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded.Compile() -> bool
+Microsoft.Build.Tasks.LC
+Microsoft.Build.Tasks.LC.LC() -> void
+Microsoft.Build.Tasks.LC.LicenseTarget.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.LicenseTarget.set -> void
+Microsoft.Build.Tasks.LC.NoLogo.get -> bool
+Microsoft.Build.Tasks.LC.NoLogo.set -> void
+Microsoft.Build.Tasks.LC.OutputDirectory.get -> string
+Microsoft.Build.Tasks.LC.OutputDirectory.set -> void
+Microsoft.Build.Tasks.LC.OutputLicense.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.OutputLicense.set -> void
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.set -> void
+Microsoft.Build.Tasks.LC.SdkToolsPath.get -> string
+Microsoft.Build.Tasks.LC.SdkToolsPath.set -> void
+Microsoft.Build.Tasks.LC.Sources.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.Sources.set -> void
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.get -> string
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.set -> void
 Microsoft.Build.Tasks.MakeDir
 Microsoft.Build.Tasks.MakeDir.Directories.get -> Microsoft.Build.Framework.ITaskItem[]
 Microsoft.Build.Tasks.MakeDir.Directories.set -> void
@@ -1624,6 +1644,8 @@ Microsoft.Build.Tasks.SGen.UseProxyTypes.set -> void
 Microsoft.Build.Tasks.SignFile
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.get -> string
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.set -> void
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
 Microsoft.Build.Tasks.SignFile.SignFile() -> void
 Microsoft.Build.Tasks.SignFile.SigningTarget.get -> Microsoft.Build.Framework.ITaskItem
 Microsoft.Build.Tasks.SignFile.SigningTarget.set -> void
@@ -1830,7 +1852,9 @@ override Microsoft.Build.Tasks.FindInvalidProjectReferences.Execute() -> bool
 override Microsoft.Build.Tasks.FindUnderPath.Execute() -> bool
 override Microsoft.Build.Tasks.FormatUrl.Execute() -> bool
 override Microsoft.Build.Tasks.FormatVersion.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateApplicationManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBindingRedirects.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateDeploymentManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateLauncher.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateManifestBase.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateResource.Execute() -> bool
@@ -1840,6 +1864,12 @@ override Microsoft.Build.Tasks.GetFileHash.Execute() -> bool
 override Microsoft.Build.Tasks.GetFrameworkPath.Execute() -> bool
 override Microsoft.Build.Tasks.GetReferenceAssemblyPaths.Execute() -> bool
 override Microsoft.Build.Tasks.Hash.Execute() -> bool
+override Microsoft.Build.Tasks.LC.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.AddResponseFileCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.Execute() -> bool
+override Microsoft.Build.Tasks.LC.GenerateFullPathToTool() -> string
+override Microsoft.Build.Tasks.LC.ToolName.get -> string
+override Microsoft.Build.Tasks.LC.ValidateParameters() -> bool
 override Microsoft.Build.Tasks.MakeDir.Execute() -> bool
 override Microsoft.Build.Tasks.Message.Execute() -> bool
 override Microsoft.Build.Tasks.Move.Execute() -> bool
@@ -1890,6 +1920,7 @@ static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.Sign
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier) -> void
+static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, System.Uri timestampUrl, string path) -> void
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription.RSAPKCS1SHA256SignatureDescription() -> void
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 23c8f38efd6..886e91fbd48 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,24 +1,20 @@
-Microsoft.Build.Tasks.LC
-Microsoft.Build.Tasks.LC.LC() -> void
-Microsoft.Build.Tasks.LC.LicenseTarget.get -> Microsoft.Build.Framework.ITaskItem
-Microsoft.Build.Tasks.LC.LicenseTarget.set -> void
-Microsoft.Build.Tasks.LC.NoLogo.get -> bool
-Microsoft.Build.Tasks.LC.NoLogo.set -> void
-Microsoft.Build.Tasks.LC.OutputDirectory.get -> string
-Microsoft.Build.Tasks.LC.OutputDirectory.set -> void
-Microsoft.Build.Tasks.LC.OutputLicense.get -> Microsoft.Build.Framework.ITaskItem
-Microsoft.Build.Tasks.LC.OutputLicense.set -> void
-Microsoft.Build.Tasks.LC.ReferencedAssemblies.get -> Microsoft.Build.Framework.ITaskItem[]
-Microsoft.Build.Tasks.LC.ReferencedAssemblies.set -> void
-Microsoft.Build.Tasks.LC.SdkToolsPath.get -> string
-Microsoft.Build.Tasks.LC.SdkToolsPath.set -> void
-Microsoft.Build.Tasks.LC.Sources.get -> Microsoft.Build.Framework.ITaskItem[]
-Microsoft.Build.Tasks.LC.Sources.set -> void
-Microsoft.Build.Tasks.LC.TargetFrameworkVersion.get -> string
-Microsoft.Build.Tasks.LC.TargetFrameworkVersion.set -> void
-override Microsoft.Build.Tasks.LC.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
-override Microsoft.Build.Tasks.LC.AddResponseFileCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
-override Microsoft.Build.Tasks.LC.Execute() -> bool
-override Microsoft.Build.Tasks.LC.GenerateFullPathToTool() -> string
-override Microsoft.Build.Tasks.LC.ToolName.get -> string
-override Microsoft.Build.Tasks.LC.ValidateParameters() -> bool
\ No newline at end of file
+Microsoft.Build.Tasks.IFixedTypeInfo
+Microsoft.Build.Tasks.IFixedTypeInfo.AddressOfMember(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out System.IntPtr ppv) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.CreateInstance(object pUnkOuter, ref System.Guid riid, out object ppvObj) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetContainingTypeLib(out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetDllEntry(int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, System.IntPtr pBstrDllName, System.IntPtr pBstrName, System.IntPtr pwOrdinal) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetDocumentation(int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetFuncDesc(int index, out System.IntPtr ppFuncDesc) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetIDsOfNames(string[] rgszNames, int cNames, int[] pMemId) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetImplTypeFlags(int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetMops(int memid, out string pBstrMops) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetNames(int memid, string[] rgBstrNames, int cMaxNames, out int pcNames) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetRefTypeInfo(System.IntPtr hRef, out Microsoft.Build.Tasks.IFixedTypeInfo ppTI) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetRefTypeOfImplType(int index, out System.IntPtr href) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetTypeAttr(out System.IntPtr ppTypeAttr) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetTypeComp(out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.GetVarDesc(int index, out System.IntPtr ppVarDesc) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.Invoke(object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, out int puArgErr) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.ReleaseFuncDesc(System.IntPtr pFuncDesc) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.ReleaseTypeAttr(System.IntPtr pTypeAttr) -> void
+Microsoft.Build.Tasks.IFixedTypeInfo.ReleaseVarDesc(System.IntPtr pVarDesc) -> void
diff --git a/src/Tasks/RCWForCurrentContext.cs b/src/Tasks/RCWForCurrentContext.cs
index 0511c385cb1..690f8d9773b 100644
--- a/src/Tasks/RCWForCurrentContext.cs
+++ b/src/Tasks/RCWForCurrentContext.cs
@@ -5,6 +5,8 @@
 using System.Runtime.InteropServices;
 using System.Diagnostics;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.InteropUtilities
 {
     /// <summary>
@@ -62,7 +64,7 @@ public RCWForCurrentContext(T rcw)
         }
 
         /// <summary>
-        /// Finalizer
+        /// Finalizes an instance of the <see cref="RCWForCurrentContext{T}"/> class.
         /// </summary>
         ~RCWForCurrentContext()
         {
diff --git a/src/Tasks/README.md b/src/Tasks/README.md
new file mode 100644
index 00000000000..903411a4ede
--- /dev/null
+++ b/src/Tasks/README.md
@@ -0,0 +1,13 @@
+# Microsoft.Build.Tasks
+
+This package contains implementations of [commonly-used MSBuild
+tasks](https://docs.microsoft.com/visualstudio/msbuild/msbuild-task-reference)
+that ship with MSBuild itself.
+
+You do not need to reference this package to use these tasks in a build--they
+are available in any MSBuild environment.
+
+If you are writing a new task, you may wish to reference
+[Microsoft.Build.Utilities.Core](https://www.nuget.org/Packages/Microsoft.Build.Utilities.Core)
+and derive from `Microsoft.Build.Utilities.Task` or
+`Microsoft.Build.Utilities.ToolTask`.
diff --git a/src/Tasks/RedistList.cs b/src/Tasks/RedistList.cs
index 9da5c32a396..6d2862fac49 100644
--- a/src/Tasks/RedistList.cs
+++ b/src/Tasks/RedistList.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -249,7 +251,7 @@ public static RedistList GetFrameworkList35()
         /// </summary>
         public static RedistList GetRedistListFromPath(string path)
         {
-            string[] redistListPaths = (path == null) ? Array.Empty<string>(): GetRedistListPathsFromDisk(path);
+            string[] redistListPaths = (path == null) ? Array.Empty<string>() : GetRedistListPathsFromDisk(path);
 
             var assemblyTableInfos = new AssemblyTableInfo[redistListPaths.Length];
             for (int i = 0; i < redistListPaths.Length; ++i)
diff --git a/src/Tasks/RegisterAssembly.cs b/src/Tasks/RegisterAssembly.cs
index 3fdf14ffd43..a7b6a78edf4 100644
--- a/src/Tasks/RegisterAssembly.cs
+++ b/src/Tasks/RegisterAssembly.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -341,7 +343,7 @@ private bool ExportTypeLib(Assembly asm, string typeLibFileName)
                 }
 
                 // Persist the type library
-                UCOMICreateITypeLib createTypeLib = (UCOMICreateITypeLib)convertedTypeLib;
+                ICreateTypeLib createTypeLib = (ICreateTypeLib)convertedTypeLib;
 
                 createTypeLib.SaveAllChanges();
             }
diff --git a/src/Tasks/RemoveDir.cs b/src/Tasks/RemoveDir.cs
index c19be8486f6..4e94778a998 100644
--- a/src/Tasks/RemoveDir.cs
+++ b/src/Tasks/RemoveDir.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -49,6 +51,14 @@ public override bool Execute()
 
             foreach (ITaskItem directory in Directories)
             {
+                if (string.IsNullOrEmpty(directory.ItemSpec))
+                {
+                    // Skip any empty ItemSpecs, otherwise RemoveDir will wipe the root of the current drive (!).
+                    // https://github.com/dotnet/msbuild/issues/7563
+                    Log.LogWarningWithCodeFromResources("RemoveDir.EmptyPath");
+                    continue;
+                }
+
                 if (FileSystems.Default.DirectoryExists(directory.ItemSpec))
                 {
                     // Do not log a fake command line as well, as it's superfluous, and also potentially expensive
diff --git a/src/Tasks/RequiresFramework35SP1Assembly.cs b/src/Tasks/RequiresFramework35SP1Assembly.cs
index 663a4fbbd71..a7c10c1a9dd 100644
--- a/src/Tasks/RequiresFramework35SP1Assembly.cs
+++ b/src/Tasks/RequiresFramework35SP1Assembly.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ResGen.cs b/src/Tasks/ResGen.cs
index 49ba98efc05..8c45e0a33c1 100644
--- a/src/Tasks/ResGen.cs
+++ b/src/Tasks/ResGen.cs
@@ -14,6 +14,8 @@
 using CodeDomProvider = System.CodeDom.Compiler.CodeDomProvider;
 using MSBuildProcessorArchitecture = Microsoft.Build.Utilities.ProcessorArchitecture;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index 35b26a5e72f..143d69af4c5 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -14,6 +14,8 @@
 using Microsoft.Build.Tasks.ResourceHandling;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/ResolveCodeAnalysisRuleSet.cs b/src/Tasks/ResolveCodeAnalysisRuleSet.cs
index 35b4c7f6f2b..474e6b46795 100644
--- a/src/Tasks/ResolveCodeAnalysisRuleSet.cs
+++ b/src/Tasks/ResolveCodeAnalysisRuleSet.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index e64e155ca4b..c39a2eb609b 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -18,6 +18,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal interface IResolveComReferenceTaskContract
@@ -185,7 +187,7 @@ public sealed partial class ResolveComReference : Microsoft.Build.Tasks.TaskExte
         /// <returns></returns>
         public override bool Execute()
         {
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(ResolveComReference));
+            Log.LogErrorWithCodeFromResources("TaskRequiresFrameworkFailure", nameof(ResolveComReference));
             return false;
         }
 
@@ -430,7 +432,7 @@ public override bool Execute()
                     }
                 }
 
-                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GetGacPath());
+                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GacPath);
 
                 ResolvedModules = moduleList.ToArray();
                 ResolvedFiles = resolvedReferenceList.ToArray();
@@ -1297,7 +1299,7 @@ internal bool ResolveComReferencePia(ComReferenceInfo referenceInfo, string refN
         /// <returns></returns>
         internal IEnumerable<string> GetResolvedAssemblyReferenceItemSpecs()
         {
-            return (ResolvedAssemblyReferences == null) ? Array.Empty<string>(): ResolvedAssemblyReferences.Select(rar => rar.ItemSpec);
+            return (ResolvedAssemblyReferences == null) ? Array.Empty<string>() : ResolvedAssemblyReferences.Select(rar => rar.ItemSpec);
         }
 
         /// <summary>
diff --git a/src/Tasks/ResolveComReferenceCache.cs b/src/Tasks/ResolveComReferenceCache.cs
index 133acb02f6f..1d6d7f2f006 100644
--- a/src/Tasks/ResolveComReferenceCache.cs
+++ b/src/Tasks/ResolveComReferenceCache.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index f6741aa36d2..95e3a2ecf68 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -14,6 +14,8 @@
 using Microsoft.Runtime.Hosting;
 #endif
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -22,7 +24,9 @@ namespace Microsoft.Build.Tasks
     public class ResolveKeySource : TaskExtension
     {
         private const string pfxFileExtension = ".pfx";
+#if !RUNTIME_TYPE_NETCORE
         private const string pfxFileContainerPrefix = "VS_KEY_";
+#endif
         
         #region Properties
 
diff --git a/src/Tasks/ResolveManifestFiles.cs b/src/Tasks/ResolveManifestFiles.cs
index 48877a31c2f..e04d5d27e05 100644
--- a/src/Tasks/ResolveManifestFiles.cs
+++ b/src/Tasks/ResolveManifestFiles.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -286,7 +288,7 @@ private ITaskItem CreateFileItem(ITaskItem item, string group, string targetPath
                 // .NETCore Launcher.exe based deployment: If the file is apphost.exe, we need to set 'TargetPath' metadata
                 // to {assemblyname}.exe so that the file gets published as {assemblyname}.exe and not apphost.exe.
                 //
-                if (LauncherBasedDeployment && 
+                if (LauncherBasedDeployment &&
                     targetPath.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) &&
                     !String.IsNullOrEmpty(AssemblyName))
                 {
@@ -750,7 +752,7 @@ private bool IsFiltered(ITaskItem item)
             if (item.ItemSpec.EndsWith(".dll") && identity == null && !isDotNetCore)
             {
                 // It is possible that a native dll gets passed in here that was declared as a content file
-                // in a referenced nuget package, which will yield null here. We just need to ignore those 
+                // in a referenced nuget package, which will yield null here. We just need to ignore those
                 // for .NET FX case since those aren't actually references we care about. For .NET Core, native
                 // dll can be passed as a reference so we won't ignore it if isDotNetCore is true.
                 return true;
@@ -866,7 +868,7 @@ public void Add(ITaskItem item)
                 int i = fusionName.IndexOf(',');
                 if (i > 0)
                 {
-                    string simpleName = fusionName.Substring(0, i); //example: "ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" -> "ClassLibrary1"
+                    string simpleName = fusionName.Substring(0, i); // example: "ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" -> "ClassLibrary1"
                     key = simpleName.ToLowerInvariant();
                     // If there are multiple with same simple name then we'll take the first one and ignore the rest, which is not an unreasonable thing to do
                     if (!_simpleNameDictionary.ContainsKey(key))
@@ -875,7 +877,7 @@ public void Add(ITaskItem item)
                     }
                 }
             }
-            
+
             IEnumerator IEnumerable.GetEnumerator()
             {
                 return _dictionary.Values.GetEnumerator();
diff --git a/src/Tasks/ResolveNativeReference.cs b/src/Tasks/ResolveNativeReference.cs
index e6e3958fbed..0f2b3752dbe 100644
--- a/src/Tasks/ResolveNativeReference.cs
+++ b/src/Tasks/ResolveNativeReference.cs
@@ -13,6 +13,8 @@
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -239,7 +241,7 @@ internal bool ExtractFromManifest(
                     {
                         if (assemblyref.IsVirtual)
                         {
-                            //It is a CLR virtual reference, not a real reference.
+                            // It is a CLR virtual reference, not a real reference.
                             continue;
                         }
 
diff --git a/src/Tasks/ResolveNonMSBuildProjectOutput.cs b/src/Tasks/ResolveNonMSBuildProjectOutput.cs
index 790fe7fab92..96779b3374d 100644
--- a/src/Tasks/ResolveNonMSBuildProjectOutput.cs
+++ b/src/Tasks/ResolveNonMSBuildProjectOutput.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
@@ -178,4 +180,3 @@ internal bool ResolveProject(ITaskItem projectRef, out ITaskItem resolvedPath)
         #endregion
     }
 }
-
diff --git a/src/Tasks/ResolveProjectBase.cs b/src/Tasks/ResolveProjectBase.cs
index e3c7c7770be..3995d2a35f1 100644
--- a/src/Tasks/ResolveProjectBase.cs
+++ b/src/Tasks/ResolveProjectBase.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -136,11 +138,11 @@ internal void CacheProjectElementsFromXml(string xmlString)
 
             // Example:
             //
-            //<SolutionConfiguration>
+            // <SolutionConfiguration>
             //  <ProjectConfiguration Project="{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}" AbsolutePath="c:foo\Project1\A.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
             //  <ProjectConfiguration Project="{881C1674-4ECA-451D-85B6-D7C59B7F16FA}" AbsolutePath="c:foo\Project2\B.csproj" BuildProjectInSolution="True">Debug|AnyCPU<ProjectDependency Project="{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}" /></ProjectConfiguration>
             //  <ProjectConfiguration Project="{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}" AbsolutePath="c:foo\Project3\C.csproj" BuildProjectInSolution="True">Debug|AnyCPU</ProjectConfiguration>
-            //</SolutionConfiguration>
+            // </SolutionConfiguration>
             //
             if (doc?.DocumentElement != null)
             {
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 74d9ab45c2c..d479f1e3206 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -21,7 +23,7 @@ public class ResolveSDKReference : TaskExtension
     {
         #region fields
 
-        ///<summary>
+        /// <summary>
         /// Regex for breaking up the sdk reference include into pieces.
         /// Example: XNA, Version=8.0
         /// </summary>
@@ -659,16 +661,6 @@ internal class SDKReference : IEquatable<SDKReference>
             /// </summary>
             private const string X64Arch = "X64";
 
-            /// <summary>
-            /// X86 architecture name
-            /// </summary>
-            private const string X86Arch = "X86";
-
-            /// <summary>
-            /// ARM architecture name
-            /// </summary>
-            private const string ARMArch = "ARM";
-
             /// <summary>
             /// ANY CPU architecture name
             /// </summary>
diff --git a/src/Tasks/ResourceHandling/BinaryFormatterByteArrayResource.cs b/src/Tasks/ResourceHandling/BinaryFormatterByteArrayResource.cs
index fc4d2ad8d24..42dcdf53794 100644
--- a/src/Tasks/ResourceHandling/BinaryFormatterByteArrayResource.cs
+++ b/src/Tasks/ResourceHandling/BinaryFormatterByteArrayResource.cs
@@ -4,6 +4,8 @@
 using System.Resources;
 using System.Resources.Extensions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class BinaryFormatterByteArrayResource : IResource
diff --git a/src/Tasks/ResourceHandling/FileStreamResource.cs b/src/Tasks/ResourceHandling/FileStreamResource.cs
index b689f14d2f4..6c93f0464c5 100644
--- a/src/Tasks/ResourceHandling/FileStreamResource.cs
+++ b/src/Tasks/ResourceHandling/FileStreamResource.cs
@@ -5,6 +5,8 @@
 using System.Resources;
 using System.Resources.Extensions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class FileStreamResource : IResource
diff --git a/src/Tasks/ResourceHandling/IResource.cs b/src/Tasks/ResourceHandling/IResource.cs
index 3189ad7c3f2..891d9e8f8c5 100644
--- a/src/Tasks/ResourceHandling/IResource.cs
+++ b/src/Tasks/ResourceHandling/IResource.cs
@@ -3,6 +3,8 @@
 
 using System.Resources;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal interface IResource
diff --git a/src/Tasks/ResourceHandling/InputFormatNotSupportedException.cs b/src/Tasks/ResourceHandling/InputFormatNotSupportedException.cs
index 10eded9046f..b756eb62bd9 100644
--- a/src/Tasks/ResourceHandling/InputFormatNotSupportedException.cs
+++ b/src/Tasks/ResourceHandling/InputFormatNotSupportedException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     [Serializable]
diff --git a/src/Tasks/ResourceHandling/LiveObjectResource.cs b/src/Tasks/ResourceHandling/LiveObjectResource.cs
index deeb2488287..4bc3f884d30 100644
--- a/src/Tasks/ResourceHandling/LiveObjectResource.cs
+++ b/src/Tasks/ResourceHandling/LiveObjectResource.cs
@@ -3,6 +3,8 @@
 
 using System.Resources;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     /// <summary>
diff --git a/src/Tasks/ResourceHandling/MSBuildResXException.cs b/src/Tasks/ResourceHandling/MSBuildResXException.cs
index 7da880c9e3b..7eac7ce9a2a 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXException.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     [Serializable]
diff --git a/src/Tasks/ResourceHandling/MSBuildResXReader.cs b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
index 58c4a455c2c..91786f0f529 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXReader.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
@@ -10,6 +10,8 @@
 using System.Xml;
 using System.Xml.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class MSBuildResXReader
@@ -23,7 +25,7 @@ public static IReadOnlyList<IResource> ReadResources(Stream s, string filename,
             {
                 using (var xmlReader = new XmlTextReader(s))
                 {
-                    xmlReader.WhitespaceHandling = WhitespaceHandling.None;
+                    xmlReader.WhitespaceHandling = WhitespaceHandling.All;
 
                     XDocument doc = XDocument.Load(xmlReader, LoadOptions.PreserveWhitespace);
                     foreach (XElement elem in doc.Element("root").Elements())
@@ -70,13 +72,8 @@ private static void ParseAssemblyAlias(Dictionary<string,string> aliases, XEleme
         // Consts from https://github.com/dotnet/winforms/blob/16b192389b377c647ab3d280130781ab1a9d3385/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs#L46-L63
         private const string Beta2CompatSerializedObjectMimeType = "text/microsoft-urt/psuedoml-serialized/base64";
         private const string CompatBinSerializedObjectMimeType = "text/microsoft-urt/binary-serialized/base64";
-        private const string CompatSoapSerializedObjectMimeType = "text/microsoft-urt/soap-serialized/base64";
         private const string BinSerializedObjectMimeType = "application/x-microsoft.net.object.binary.base64";
-        private const string SoapSerializedObjectMimeType = "application/x-microsoft.net.object.soap.base64";
-        private const string DefaultSerializedObjectMimeType = BinSerializedObjectMimeType;
         private const string ByteArraySerializedObjectMimeType = "application/x-microsoft.net.object.bytearray.base64";
-        private const string ResMimeType = "text/microsoft-resx";
-
         private const string StringTypeNamePrefix = "System.String, mscorlib,";
         private const string StringTypeName40 = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
         private const string MemoryStreamTypeNamePrefix = "System.IO.MemoryStream, mscorlib,";
@@ -108,6 +105,7 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,
         {
             string name = elem.Attribute("name").Value;
             string value;
+            bool preserve = elem.Attribute(XName.Get("space", "http://www.w3.org/XML/1998/namespace"))?.Value == "preserve";
 
             XElement valueElement = elem.Element("value");
             if (valueElement is null)
@@ -122,6 +120,10 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,
             else
             {
                 value = valueElement.Value;
+                if (!preserve && string.IsNullOrWhiteSpace(value))
+                {
+                    value = string.Empty;
+                }
             }
 
             string typename = elem.Attribute("type")?.Value;
diff --git a/src/Tasks/ResourceHandling/NameUtilities.cs b/src/Tasks/ResourceHandling/NameUtilities.cs
index 1045093b5ee..6b07b11c0c4 100644
--- a/src/Tasks/ResourceHandling/NameUtilities.cs
+++ b/src/Tasks/ResourceHandling/NameUtilities.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     static class NameUtilities
diff --git a/src/Tasks/ResourceHandling/PreserializedResourceWriterRequiredException.cs b/src/Tasks/ResourceHandling/PreserializedResourceWriterRequiredException.cs
index 3b5970d6a77..ef532e02a0c 100644
--- a/src/Tasks/ResourceHandling/PreserializedResourceWriterRequiredException.cs
+++ b/src/Tasks/ResourceHandling/PreserializedResourceWriterRequiredException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     [Serializable]
diff --git a/src/Tasks/ResourceHandling/StringResource.cs b/src/Tasks/ResourceHandling/StringResource.cs
index ece4e87deb5..9e2ca1c6ff7 100644
--- a/src/Tasks/ResourceHandling/StringResource.cs
+++ b/src/Tasks/ResourceHandling/StringResource.cs
@@ -3,6 +3,8 @@
 
 using System.Resources;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class StringResource : LiveObjectResource
diff --git a/src/Tasks/ResourceHandling/TypeConverterByteArrayResource.cs b/src/Tasks/ResourceHandling/TypeConverterByteArrayResource.cs
index c8f391f8735..6b65b7e72a7 100644
--- a/src/Tasks/ResourceHandling/TypeConverterByteArrayResource.cs
+++ b/src/Tasks/ResourceHandling/TypeConverterByteArrayResource.cs
@@ -4,6 +4,8 @@
 using System.Resources;
 using System.Resources.Extensions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class TypeConverterByteArrayResource : IResource
diff --git a/src/Tasks/ResourceHandling/TypeConverterStringResource.cs b/src/Tasks/ResourceHandling/TypeConverterStringResource.cs
index f0b9ed23c5e..09035c4e3fb 100644
--- a/src/Tasks/ResourceHandling/TypeConverterStringResource.cs
+++ b/src/Tasks/ResourceHandling/TypeConverterStringResource.cs
@@ -4,6 +4,8 @@
 using System.Resources;
 using System.Resources.Extensions;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.ResourceHandling
 {
     internal class TypeConverterStringResource : IResource
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 07b5097294d..a128fd658e2 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -571,6 +571,10 @@
     <value>MSB3094: "{2}" refers to {0} item(s), and "{3}" refers to {1} item(s). They must have the same number of items.</value>
     <comment>{StrBegin="MSB3094: "}</comment>
   </data>
+  <data name="General.TaskRequiresWindows">
+    <value>MSB3096: Task "{0}" is only supported when building on Windows.</value>
+    <comment>{StrBegin="MSB3096: "}</comment>
+  </data>
   <!--
         The GenerateBindingRedirects message bucket is: MSB3831 - MSB3840
 
@@ -1334,6 +1338,10 @@
   <data name="RemoveDir.SkippingNonexistentDirectory">
     <value>Directory "{0}" doesn't exist. Skipping.</value>
   </data>
+  <data name="RemoveDir.EmptyPath">
+    <value>MSB3232: An empty directory was passed to RemoveDir and was ignored.</value>
+    <comment>{StrBegin="MSB3232: "}</comment>
+  </data>
   <!--
         The ResGen message bucket is: MSB3451 - MSB3460
 
@@ -2902,7 +2910,7 @@
     <comment>{StrBegin="MSB3981: "}</comment>
   </data>
   <data name="GetCompatiblePlatform.NoPlatformsListed">
-    <value>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</value>
+    <value>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</value>
     <comment>{StrBegin="MSB3982: "}</comment>
   </data>
   <data name="GetCompatiblePlatform.InvalidLookupTableFormat">
@@ -2924,6 +2932,9 @@
   <data name="GetCompatiblePlatform.AnyCPUDefault">
     <value>Choosing AnyCPU by default.</value>
   </data>
+  <data name="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+    <value>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</value>
+  </data>
   <!--
         The tasks message bucket is: MSB3001 - MSB3999
 
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index 6d8a68b4bb2..8814629bec1 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: V {0} už nějaký soubor existuje. Pokud se pokoušíte vytvořit předvypočítanou mezipaměť, ujistěte se, že sestavujete jeden projekt, který závisí na sestaveních, nikoli sestavení samotná. Pokud spouštíte úlohu ResolveAssemblyReference běžným způsobem, nenastavujte v úloze ResolveAssemblyReference parametr AssemblyInformationCacheOutputPath.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: Úloha {0} se podporuje pouze při sestavování v systému Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Odstraňování vlastností:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution je true, ale odkazovaný projekt {0} nemá nastavená metadata pro platformy. Sestaví se bez zadané platformy.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference a aktuální projekt mají stejnou platformu.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: Nelze zaregistrovat sestavení {0}. Byl odepřen přístup. Zkontrolujte, zda spouštíte aplikaci jako správce. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Nelze odebrat adresář {0}. {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index 2b9789a8096..34a490ed1d1 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: Unter "{0}" ist bereits eine Datei vorhanden. Wenn Sie einen vorab berechneten Cache erstellen möchten, stellen Sie sicher, dass Sie ein einzelnes Projekt erstellen, das von Ihren Assemblys abhängt, statt Ihre Assemblys selbst zu erstellen. Wenn Sie die Aufgabe "ResolveAssemblyReference" normal ausführen, legen Sie den Parameter "AssemblyInformationCacheOutputPath" der Aufgabe "ResolveAssemblyReference" nicht fest.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: Die Aufgabe „{0}“ wird nur beim Erstellen unter Windows unterstützt.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Eigenschaften werden entfernt:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution ist "true". Das referenzierte Projekt "{0}" enthält jedoch keine Metadaten für "Platforms". Es wird ohne eine angegebene Plattform erstellt.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference und das aktuelle Projekt haben die gleiche Plattform.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: Die "{0}"-Assembly kann nicht registriert werden – Zugriff verweigert. Stellen Sie sicher, dass Sie die Anwendung als Administrator ausführen. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Das Verzeichnis "{0}" kann nicht entfernt werden. {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 614f167e8d3..f8474cd8820 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: Ya hay un archivo en "{0}". Si está intentando crear una memoria caché precalculada, asegúrese de estar compilando un solo proyecto que dependa de sus ensamblados, en lugar de compilar los ensamblados en sí. Si está ejecutando la tarea ResolveAssemblyReference normalmente, no establezca el parámetro "AssemblyInformationCacheOutputPath" de la tarea ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: La tarea “{0}” solo se admite cuando se compila en Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Quitando propiedades:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution es true, pero el proyecto al que se hace referencia, "{0}", no tiene establecido ningún conjunto de metadatos "Platforms". Se compilará sin una plataforma especificada.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference y el proyecto actual tienen la misma plataforma.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: No se puede registrar el ensamblado "{0}": acceso denegado. Asegúrese de que está ejecutando la aplicación como administrador. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: No se puede quitar el directorio "{0}". {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index fd0b120daf9..fb4965cc9e3 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: il existe déjà un fichier sur "{0}". Si vous essayez de créer un cache précalculé, vérifiez que vous générez un seul projet qui dépend de vos assemblys au lieu de générer les assemblys eux-mêmes. Si vous exécutez la tâche ResolveAssemblyReference normalement, ne définissez pas le paramètre "AssemblyInformationCacheOutputPath" de la tâche ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: La tâche "{0}" n’est prise en charge que lors de la génération sur Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Suppression des propriétés :</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution a la valeur true, mais le projet référencé '{0}' n’a pas de métadonnées ’Platforms’ définies. Il sera généré sans une plateforme spécifiée.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference et le projet actuel ont la même plateforme.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: Impossible d'inscrire l'assembly "{0}", car l'accès est refusé. Assurez-vous d'exécuter l'application comme administrateur. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Impossible de supprimer le répertoire "{0}". {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index a1eecfebd2f..a00f3a2e2de 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: alla posizione "{0}" esiste già un file. Se si prova a creare una cache precalcolata, assicurarsi di compilare un singolo progetto che dipende dagli assembly invece di compilare gli assembly stessi. Se si esegue normalmente l'attività ResolveAssemblyReference, non impostare il parametro "AssemblyInformationCacheOutputPath" dell'attività ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: l'attività "{0}" è supportata solo durante la compilazione in Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Rimozione proprietà:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution è true ma il progetto di riferimento '{0}' non ha un set di metadati 'Platforms'. Verrà compilato senza una piattaforma specificata.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference e il progetto corrente hanno la stessa piattaforma.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: non è possibile registrare l'assembly "{0}". Accesso negato. Assicurarsi di eseguire l'applicazione come amministratore. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: non è possibile rimuovere la directory "{0}". {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index f8741ff1fec..b4dd3d4c9e0 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" には既にファイルが存在します。事前計算済みキャッシュを作成しようとしている場合は、アセンブリ自体をビルドするのではなく、アセンブリに依存する単一のプロジェクトをビルドしてください。ResolveAssemblyReference タスクを正常に実行している場合は、ResolveAssemblyReference タスクの "AssemblyInformationCacheOutputPath" パラメーターを設定しないでください。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: タスク "{0}" は、Windows 上でビルドする場合にのみサポートされます。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">プロパティの削除:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution は true ですが、参照対象プロジェクト '{0}' に 'プラットフォーム' メタデータが設定されていません。これは、指定されたプラットフォームなしでビルドされます。</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference と現在のプロジェクトに同じプラットフォームがあります。</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: アセンブリ "{0}" を登録できません - アクセスが拒否されました。管理者としてアプリケーションを実行しているか確認してください。{1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: ディレクトリ "{0}" を削除できません。{1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index c8f09c65f9f..90b1ad0ff3b 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}"에 파일이 이미 있습니다. 사전 계산 캐시를 만들려면 어셈블리 자체를 빌드하는 대신 어셈블리에 종속되는 단일 프로젝트를 빌드하고 있는지 확인하세요. ResolveAssemblyReference 작업을 정상적으로 실행 중인 경우 ResolveAssemblyReference 작업의 "AssemblyInformationCacheOutputPath" 매개 변수를 설정하지 마세요.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 작업 "{0}"은(는) Windows에서 빌드할 때만 지원됩니다.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">속성 제거:</target>
@@ -1141,7 +1146,7 @@
       </trans-unit>
       <trans-unit id="GenerateResource.InvalidHexEscapeValue">
         <source>MSB3569: Invalid hex value after '\u' in resource "{0}", value '{1}'.</source>
-        <target state="translated">MSB3569: "{0}" 리소스에서 '\u' 뒤의 16진수가 잘못되었습니다. '{1}' 값</target>
+        <target state="translated">MSB3569: 리소스 "{0}", 값 '{1}'에서 '\u' 뒤의 16진수 값이 잘못되었습니다.</target>
         <note>{StrBegin="MSB3569: "}</note>
       </trans-unit>
       <trans-unit id="GenerateResource.CannotWriteSTRFile">
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution이 true이지만 참조된 프로젝트 '{0}'에 '플랫폼' 메타데이터 세트가 없습니다. 지정된 플랫폼 없이 구축됩니다.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference와 현재 프로젝트는 동일한 플랫폼을 가지고 있습니다.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: "{0}" 어셈블리를 등록할 수 없습니다. 액세스가 거부되었습니다. 관리자로 애플리케이션을 실행하고 있는지 확인하세요. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: "{0}" 디렉터리를 제거할 수 없습니다. {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 01c5946d62b..57e040f6e97 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: W lokalizacji „{0}” już istnieje plik. Jeśli próbujesz utworzyć wstępnie obliczoną pamięć podręczną, upewnij się, że kompilujesz pojedynczy projekt zależący od zestawów, a nie same zestawy. Jeśli uruchamiasz zadanie ResolveAssemblyReference w normalny sposób, nie ustawiaj parametru „AssemblyInformationCacheOutputPath” zadania ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: zadanie „{0}“ jest obsługiwane tylko podczas kompilowania w systemie Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Usuwanie właściwości:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: element EnableDynamicPlatformResolution ma wartość true, ale projekt "{0}", do którego się odnosi, nie ma ustawionych metadanych "Platformy". Zostanie on skompilowany bez określonej platformy.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">Element ProjectReference i bieżący projekt mają tę samą platformę.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: Nie można zarejestrować zestawu „{0}” — odmowa dostępu. Upewnij się, że aplikacja została uruchomiona z uprawnieniami administratora. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Nie można usunąć katalogu „{0}”. {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index f2a99ffe115..5f825ffffa4 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: já existe um arquivo em "{0}". Se você está tentando criar um cache pré-computado, crie um projeto que dependa dos assemblies em vez de criar seus assemblies sozinhos. Se você está executando a tarefa ResolveAssemblyReference normalmente, não defina o parâmetro "AssemblyInformationCacheOutputPath" da tarefa ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: A tarefa "{0}" só é suportada quando compilada no Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Removendo Propriedades:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution é verdadeiro, mas o projeto referenciado '{0}' não tem nenhum conjunto de metadados de 'Plataformas'. Ele será criado sem uma plataforma especificada.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">O ProjectReference e o projeto atual têm a mesma plataforma.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: Não é possível registrar o assembly "{0}"; acesso negado. Verifique se você está executando o aplicativo como administrador. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Não é possível remover o diretório "{0}". {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index c8a5ab425e4..0c7a66933a5 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: в "{0}" уже существует файл. Если вы пытаетесь создать предварительно вычисляемый кэш, убедитесь, что выполняется сборка отдельного проекта, который зависит от ваших сборок, а не создание самих сборок. Если вы выполняете задачу ResolveAssemblyReference обычным образом, не устанавливайте параметр "AssemblyInformationCacheOutputPath" задачи ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: задача "{0}" поддерживается только при сборке в Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Удаление свойств:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution имеет значение true, но у указанного проекта "{0}" нет заданных метаданных "Platforms". Сборка будет выполнена без указанной платформы.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference и текущий проект используют одну платформу.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: невозможно зарегистрировать сборку "{0}" — отказано в доступе. Убедитесь, что приложение запущено с правами администратора. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: Не удалось удалить каталог "{0}". {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 64ba0d8599b..077758b4edd 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" konumunda zaten bir dosya var. Önceden hesaplanan bir önbellek oluşturmayı deniyorsanız bütünleştirilmiş kodlarınızı derlemek yerine bütünleştirilmiş kodlarınızı temel alan tek bir proje derlediğinizden emin olun. ResolveAssemblyReference görevini normal bir şekilde çalıştırıyorsanız ResolveAssemblyReference görevinin "AssemblyInformationCacheOutputPath" parametresini ayarlamayın.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: "{0}" görevi yalnızca Windows üzerinde derlendiğinde desteklenir.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Özellikler kaldırılıyor:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution doğru ancak başvurulan proje '{0}', 'Platforms' meta veri kümesine sahip değil. Belirli bir platform olmadan oluşturulacak.</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference ve geçerli proje aynı platforma sahip.</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: "{0}" bütünleştirilmiş kodu kaydedilemiyor - erişim reddedildi. Lütfen uygulamayı yönetici olarak çalıştırdığınızdan emin olun. {1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: "{0}" dizini kaldırılamıyor. {1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index 4e9da2c3e45..26b89d23285 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: “{0}”处已存在文件。若要尝试创建预计算缓存，请务必生成单个依赖于程序集的项目，而不是生成程序集本身。如果在正常运行 ResolveAssemblyReference 任务，请不要设置 ResolveAssemblyReference 任务的 "AssemblyInformationCacheOutputPath" 参数。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 仅在 Windows 上生成时才支持任务 "{0}"。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">移除属性:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution 为 true，但引用的项目 "{0}" 没有设置 "Platforms" 元数据。它将在没有指定平台的情况下生成。</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference 和当前项目具有相同的平台。</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: 无法注册程序集“{0}”- 拒绝访问。请确保您正在以管理员身份运行应用程序。{1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: 无法移除目录“{0}”。{1}</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index 182b61ffc4c..ad011ed8d31 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" 上已有檔案。若要嘗試建立預先計算的快取，請務必建立一個需要使用組件的專案，而非建立組件本身。若是正常執行 ResolveAssemblyReference 工作，請勿為 ResolveAssemblyReference 工作設定 "AssemblyInformationCacheOutputPath" 參數。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 只有在 Windows 上建置時，才支援工作 "{0}"。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">正在移除屬性:</target>
@@ -1357,10 +1362,15 @@
         <note>{StrBegin="MSB3981: "}</note>
       </trans-unit>
       <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
-        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
-        <target state="translated">MSB3982: EnableDynamicPlatformResolution 為 true，但參考的專案 '{0}' 未設定 'Platforms' 中繼資料。它將在沒有指定平台的情況下建置。</target>
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</source>
+        <target state="new">MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' or 'Platform' metadata set. It will be built without a specified platform.</target>
         <note>{StrBegin="MSB3982: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform">
+        <source>Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</source>
+        <target state="new">Platform property of referenced project '{0}' matches current project's platform: '{1}'. Referenced project will be built without a global Platform property.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetCompatiblePlatform.SamePlatform">
         <source>ProjectReference and current project have the same platform.</source>
         <target state="translated">ProjectReference 和目前的專案有相同的平台。</target>
@@ -1542,6 +1552,11 @@
         <target state="translated">MSB3216: 無法註冊組件 "{0}" - 存取遭拒。請確認您以系統管理員身分執行此應用程式。{1}</target>
         <note>{StrBegin="MSB3216: "}</note>
       </trans-unit>
+      <trans-unit id="RemoveDir.EmptyPath">
+        <source>MSB3232: An empty directory was passed to RemoveDir and was ignored.</source>
+        <target state="new">MSB3232: An empty directory was passed to RemoveDir and was ignored.</target>
+        <note>{StrBegin="MSB3232: "}</note>
+      </trans-unit>
       <trans-unit id="RemoveDir.Error">
         <source>MSB3231: Unable to remove directory "{0}". {1}</source>
         <target state="translated">MSB3231: 無法移除目錄 "{0}"。{1}</target>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 069d4272c99..004d2f8067d 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -18,6 +18,8 @@
 using System.Xml.Linq;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     public sealed class RoslynCodeTaskFactory : ITaskFactory
@@ -100,6 +102,11 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory
         /// </summary>
         private TaskLoggingHelper _log;
 
+        /// <summary>
+        /// Stores functions that were added to the current app domain. Should be removed once we're finished.
+        /// </summary>
+        private ResolveEventHandler handlerAddedToAppDomain = null;
+
         /// <summary>
         /// Stores the parameters parsed in the &lt;UsingTask /&gt;.
         /// </summary>
@@ -114,13 +121,17 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory
         public string FactoryName => "Roslyn Code Task Factory";
 
         /// <summary>
-        /// Gets the <see cref="T:System.Type" /> of the compiled task.
+        /// Gets the <see cref="Type"/> of the compiled task.
         /// </summary>
         public Type TaskType { get; private set; }
 
         /// <inheritdoc cref="ITaskFactory.CleanupTask(ITask)"/>
         public void CleanupTask(ITask task)
         {
+            if (handlerAddedToAppDomain is not null)
+            {
+                AppDomain.CurrentDomain.AssemblyResolve -= handlerAddedToAppDomain;
+            }
         }
 
         /// <inheritdoc cref="ITaskFactory.CreateTask(IBuildEngine)"/>
@@ -256,27 +267,29 @@ internal static string GetSourceCode(RoslynCodeTaskFactoryTaskInfo taskInfo, ICo
             }
         }
 
-        ///  <summary>
-        ///  Parses and validates the body of the &lt;UsingTask /&gt;.
-        ///  </summary>
-        ///  <param name="log">A <see cref="TaskLoggingHelper"/> used to log events during parsing.</param>
-        ///  <param name="taskName">The name of the task.</param>
-        ///  <param name="taskBody">The raw inner XML string of the &lt;UsingTask />&gt; to parse and validate.</param>
+        /// <summary>
+        /// Parses and validates the body of the &lt;UsingTask /&gt;.
+        /// </summary>
+        /// <param name="log">A <see cref="TaskLoggingHelper"/> used to log events during parsing.</param>
+        /// <param name="taskName">The name of the task.</param>
+        /// <param name="taskBody">The raw inner XML string of the &lt;UsingTask />&gt; to parse and validate.</param>
         /// <param name="parameters">An <see cref="ICollection{TaskPropertyInfo}"/> containing parameters for the task.</param>
         /// <param name="taskInfo">A <see cref="RoslynCodeTaskFactoryTaskInfo"/> object that receives the details of the parsed task.</param>
-        /// <returns><code>true</code> if the task body was successfully parsed, otherwise <code>false</code>.</returns>
-        ///  <remarks>
-        ///  The <paramref name="taskBody"/> will look like this:
-        ///  <![CDATA[
+        /// <returns><c>true</c> if the task body was successfully parsed, otherwise <c>false</c>.</returns>
+        /// <remarks>
+        /// The <paramref name="taskBody"/> will look like this:
+        /// <code>
+        /// <![CDATA[
         ///
-        ///    <Using Namespace="Namespace" />
-        ///    <Reference Include="AssemblyName|AssemblyPath" />
-        ///    <Code Type="Fragment|Method|Class" Language="cs|vb" Source="Path">
-        ///      // Source code
-        ///    </Code>
+        /// <Using Namespace="Namespace" />
+        /// <Reference Include="AssemblyName|AssemblyPath" />
+        /// <Code Type="Fragment|Method|Class" Language="cs|vb" Source="Path">
+        ///   // Source code
+        /// </Code>
         ///
-        ///  ]]>
-        ///  </remarks>
+        /// ]]>
+        /// </code>
+        /// </remarks>
         internal static bool TryLoadTaskBody(TaskLoggingHelper log, string taskName, string taskBody, ICollection<TaskPropertyInfo> parameters, out RoslynCodeTaskFactoryTaskInfo taskInfo)
         {
             taskInfo = new RoslynCodeTaskFactoryTaskInfo
@@ -511,7 +524,7 @@ internal static bool TryLoadTaskBody(TaskLoggingHelper log, string taskName, str
         /// Perhaps in the future this could be more powerful by using NuGet to resolve assemblies but we think
         /// that is too complicated for a simple in-line task.  If users have more complex requirements, they
         /// can compile their own task library.</remarks>
-        internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTaskFactoryTaskInfo taskInfo, out ITaskItem[] items)
+        internal bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTaskFactoryTaskInfo taskInfo, out ITaskItem[] items)
         {
             // Store the list of resolved assemblies because a user can specify a short name or a full path
             ISet<string> resolvedAssemblyReferences = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
@@ -528,6 +541,8 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
                 references = references.Union(DefaultReferences[taskInfo.CodeLanguage]);
             }
 
+            List<string> directoriesToAddToAppDomain = new();
+
             // Loop through the user specified references as well as the default references
             foreach (string reference in references)
             {
@@ -535,7 +550,9 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
                 if (FileSystems.Default.FileExists(reference))
                 {
                     // The path could be relative like ..\Assembly.dll so we need to get the full path
-                    resolvedAssemblyReferences.Add(Path.GetFullPath(reference));
+                    string fullPath = Path.GetFullPath(reference);
+                    directoriesToAddToAppDomain.Add(Path.GetDirectoryName(fullPath));
+                    resolvedAssemblyReferences.Add(fullPath);
                     continue;
                 }
 
@@ -568,7 +585,34 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
             // Transform the list of resolved assemblies to TaskItems if they were all resolved
             items = hasInvalidReference ? null : resolvedAssemblyReferences.Select(i => (ITaskItem)new TaskItem(i)).ToArray();
 
+            handlerAddedToAppDomain = (_, eventArgs) => TryLoadAssembly(directoriesToAddToAppDomain, new AssemblyName(eventArgs.Name));
+            AppDomain.CurrentDomain.AssemblyResolve += handlerAddedToAppDomain;
+
             return !hasInvalidReference;
+
+            static Assembly TryLoadAssembly(List<string> directories, AssemblyName name)
+            {
+                foreach (string directory in directories)
+                {
+                    string path;
+                    if (!string.IsNullOrEmpty(name.CultureName))
+                    {
+                        path = Path.Combine(directory, name.CultureName, name.Name + ".dll");
+                        if (File.Exists(path))
+                        {
+                            return Assembly.LoadFrom(path);
+                        }
+                    }
+
+                    path = Path.Combine(directory, name.Name + ".dll");
+                    if (File.Exists(path))
+                    {
+                        return Assembly.LoadFrom(path);
+                    }
+                }
+
+                return null;
+            }
         }
 
         private static CodeMemberProperty CreateProperty(CodeTypeDeclaration codeTypeDeclaration, string name, Type type, object defaultValue = null)
@@ -734,7 +778,7 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
         private static string[] GetMonoLibDirs()
         {
-            if(NativeMethodsShared.IsMono)
+            if (NativeMethodsShared.IsMono)
             {
                 string monoLibDir = Path.GetDirectoryName(typeof(object).Assembly.Location);
                 string monoLibFacadesDir = Path.Combine(monoLibDir, "Facades");
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCodeType.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCodeType.cs
index 623b10b45d0..d8dc633f91f 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCodeType.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCodeType.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
index 9f96f3c2c0a..4606d244cd7 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using System.Linq;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal abstract class RoslynCodeTaskFactoryCompilerBase : ToolTaskExtension
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
index dcc9f893f81..9cf70c2535d 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal sealed class RoslynCodeTaskFactoryTaskInfo : IEquatable<RoslynCodeTaskFactoryTaskInfo>
diff --git a/src/Tasks/SGen.cs b/src/Tasks/SGen.cs
index facee3ddc15..3e540d14394 100644
--- a/src/Tasks/SGen.cs
+++ b/src/Tasks/SGen.cs
@@ -1,13 +1,19 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#if !RUNTIME_TYPE_NETCORE
 using System;
 using System.IO;
 using System.Diagnostics;
+#endif
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+#if !RUNTIME_TYPE_NETCORE
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
+#endif
+
+#nullable disable
 
 namespace Microsoft.Build.Tasks
 {
@@ -364,7 +370,7 @@ protected override string GenerateCommandLineCommands()
 
                 commandLineBuilder.AppendWhenTrue("/proxytypes", Bag, "UseProxyTypes");
 
-                //add the keep switch
+                // add the keep switch
                 commandLineBuilder.AppendWhenTrue("/keep", Bag, "UseKeep");
 
                 // Append the references, if any.
@@ -380,7 +386,7 @@ protected override string GenerateCommandLineCommands()
                     }
                 }
 
-                //Append the Types to the command line, if any.
+                // Append the Types to the command line, if any.
                 if (Types != null)
                 {
                     foreach (string type in Types)
diff --git a/src/Tasks/SdkToolsPathUtility.cs b/src/Tasks/SdkToolsPathUtility.cs
index 3eb78e24429..79e6ce9defe 100644
--- a/src/Tasks/SdkToolsPathUtility.cs
+++ b/src/Tasks/SdkToolsPathUtility.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/SignFile.cs b/src/Tasks/SignFile.cs
index c3600305e9d..379fe059587 100644
--- a/src/Tasks/SignFile.cs
+++ b/src/Tasks/SignFile.cs
@@ -4,12 +4,15 @@
 using System;
 using System.ComponentModel;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Security.Cryptography;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -17,6 +20,7 @@ namespace Microsoft.Build.Tasks
     /// provided and optionally uses a timestamp if a URL is provided.
     /// It can sign ClickOnce manifests as well as exe's.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class SignFile : Task
     {
         public SignFile()
@@ -35,14 +39,24 @@ public SignFile()
         public String TargetFrameworkVersion { get; set; }
 
         public string TimestampUrl { get; set; }
+        public bool DisallowMansignTimestampFallback { get; set; } = false;
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(SignFile));
+                return false;
+            }
             try
             {
-                SecurityUtilities.SignFile(CertificateThumbprint,
-                TimestampUrl == null ? null : new Uri(TimestampUrl),
-                SigningTarget.ItemSpec, TargetFrameworkVersion, TargetFrameworkIdentifier);
+                SecurityUtilities.SignFile(
+                    CertificateThumbprint,
+                    TimestampUrl == null ? null : new Uri(TimestampUrl),
+                    SigningTarget.ItemSpec, 
+                    TargetFrameworkVersion, 
+                    TargetFrameworkIdentifier,
+                    DisallowMansignTimestampFallback);
                 return true;
             }
             catch (ArgumentException ex) when (ex.ParamName.Equals("certThumbprint"))
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 20f98be86e0..4d8d2de3422 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
diff --git a/src/Tasks/StrongNameException.cs b/src/Tasks/StrongNameException.cs
index 2a533772616..2ea63bf9491 100644
--- a/src/Tasks/StrongNameException.cs
+++ b/src/Tasks/StrongNameException.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Runtime.Serialization;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/StrongNameUtils.cs b/src/Tasks/StrongNameUtils.cs
index 4abdc57311a..1102627ce30 100644
--- a/src/Tasks/StrongNameUtils.cs
+++ b/src/Tasks/StrongNameUtils.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -18,8 +20,11 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     internal enum StrongNameLevel
     {
-        None, DelaySigned, FullySigned, Unknown
-    };
+        None,
+        DelaySigned,
+        FullySigned,
+        Unknown,
+    }
 
     /// <summary>
     /// Strong naming utilities.
diff --git a/src/Tasks/System.Design.cs b/src/Tasks/System.Design.cs
index 047c0c5000a..0ab4947d7b6 100644
--- a/src/Tasks/System.Design.cs
+++ b/src/Tasks/System.Design.cs
@@ -9,6 +9,8 @@
 
 using System.ComponentModel;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     [AttributeUsage(AttributeTargets.All)]
diff --git a/src/Tasks/System.Resources.Extensions.pkgdef b/src/Tasks/System.Resources.Extensions.pkgdef
index 000095869d3..6c5ef517c6e 100644
--- a/src/Tasks/System.Resources.Extensions.pkgdef
+++ b/src/Tasks/System.Resources.Extensions.pkgdef
@@ -4,4 +4,4 @@
 "publicKeyToken"="cc7b13ffcd2ddd51"
 "culture"="neutral"
 "oldVersion"="0.0.0.0-99.9.9.9"
-"newVersion"="4.0.0.0"
+"newVersion"="6.0.0.0"
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index b7496cb643f..da98c85bd10 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -15,6 +15,8 @@
 using Microsoft.Build.Tasks.AssemblyDependency;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/TaskExtension.cs b/src/Tasks/TaskExtension.cs
index b1a7c7fc4fc..2e87720584a 100644
--- a/src/Tasks/TaskExtension.cs
+++ b/src/Tasks/TaskExtension.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/TaskTranslatorHelpers.cs b/src/Tasks/TaskTranslatorHelpers.cs
index 7db48cf61ae..6e43de0c3a4 100644
--- a/src/Tasks/TaskTranslatorHelpers.cs
+++ b/src/Tasks/TaskTranslatorHelpers.cs
@@ -5,6 +5,8 @@
 using System.Runtime.Versioning;
 using Microsoft.Build.BackEnd;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal static class TaskTranslatorHelpers
diff --git a/src/Tasks/Telemetry.cs b/src/Tasks/Telemetry.cs
index c2c5d69245d..5e550be948a 100644
--- a/src/Tasks/Telemetry.cs
+++ b/src/Tasks/Telemetry.cs
@@ -6,6 +6,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/TlbImp.cs b/src/Tasks/TlbImp.cs
index 6269f060134..2debd69fa9b 100644
--- a/src/Tasks/TlbImp.cs
+++ b/src/Tasks/TlbImp.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index c6cc0e606b9..7350cee5080 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -19,6 +19,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /*
diff --git a/src/Tasks/ToolTaskExtension.cs b/src/Tasks/ToolTaskExtension.cs
index 8969d15bb55..8a5b14510f4 100644
--- a/src/Tasks/ToolTaskExtension.cs
+++ b/src/Tasks/ToolTaskExtension.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index be53de8a405..77a2060bdd3 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/UnregisterAssembly.cs b/src/Tasks/UnregisterAssembly.cs
index cbcde5d8ef8..2ee63116123 100644
--- a/src/Tasks/UnregisterAssembly.cs
+++ b/src/Tasks/UnregisterAssembly.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 01544039194..40a6acd512b 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -46,12 +48,12 @@ public sealed class Unzip : TaskExtension, ICancelableTask
         public ITaskItem DestinationFolder { get; set; }
 
         /// <summary>
-        /// Gets or sets a value indicating whether read-only files should be overwritten.
+        /// Gets or sets a value that indicates whether read-only files should be overwritten.
         /// </summary>
         public bool OverwriteReadOnlyFiles { get; set; }
 
         /// <summary>
-        /// Gets or sets a value indicating whether files should be skipped if the destination is unchanged.
+        /// Gets or sets a value that indicates whether files should be skipped if the destination is unchanged.
         /// </summary>
         public bool SkipUnchangedFiles { get; set; } = true;
 
@@ -62,12 +64,12 @@ public sealed class Unzip : TaskExtension, ICancelableTask
         public ITaskItem[] SourceFiles { get; set; }
 
         /// <summary>
-        /// Gets or sets an MSBuild glob expression that will be used to determine which files to include being unzipped from the archive.
+        /// Gets or sets an MSBuild glob expression that specifies which files to include being unzipped from the archive.
         /// </summary>
         public string Include { get; set; }
 
         /// <summary>
-        /// Gets or sets an MSBuild glob expression that will be used to determine which files to exclude from being unzipped from the archive.
+        /// Gets or sets an MSBuild glob expression that specifies which files to exclude from being unzipped from the archive.
         /// </summary>
         public string Exclude { get; set; }
 
diff --git a/src/Tasks/UpdateManifest.cs b/src/Tasks/UpdateManifest.cs
index 682ca6be833..ebefc10a2d1 100644
--- a/src/Tasks/UpdateManifest.cs
+++ b/src/Tasks/UpdateManifest.cs
@@ -5,6 +5,8 @@
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/VisualBasicParserUtilities.cs b/src/Tasks/VisualBasicParserUtilities.cs
index b44e5eb462d..b92543818a5 100644
--- a/src/Tasks/VisualBasicParserUtilities.cs
+++ b/src/Tasks/VisualBasicParserUtilities.cs
@@ -6,6 +6,8 @@
 
 using Microsoft.Build.Shared.LanguageParser;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Warning.cs b/src/Tasks/Warning.cs
index 06db03f94ce..60b7ca674f3 100644
--- a/src/Tasks/Warning.cs
+++ b/src/Tasks/Warning.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/WinMDExp.cs b/src/Tasks/WinMDExp.cs
index 4de486c4e5b..a77dfbef18c 100644
--- a/src/Tasks/WinMDExp.cs
+++ b/src/Tasks/WinMDExp.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
diff --git a/src/Tasks/Workflow.VisualBasic.targets b/src/Tasks/Workflow.VisualBasic.targets
index d9ea4e9e3b8..2002517eaf9 100644
--- a/src/Tasks/Workflow.VisualBasic.targets
+++ b/src/Tasks/Workflow.VisualBasic.targets
@@ -1,15 +1,15 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Workflow.VisualBasic.targets" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Workflow.VisualBasic.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/Workflow.targets b/src/Tasks/Workflow.targets
index 11ca5885ec4..96f52c81d1e 100644
--- a/src/Tasks/Workflow.targets
+++ b/src/Tasks/Workflow.targets
@@ -1,15 +1,15 @@
-﻿<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project>
 
-   <!--
-        With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
-        outside of the .NET Framework.  As a result of this, there were several targets files, of which
-        this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
+  <!--
+      With MSBuild 12, we've changed MSBuildToolsPath to for the first time point to a directory
+      outside of the .NET Framework.  As a result of this, there were several targets files, of which
+      this was one, that were being referenced as out of MSBuildToolsPath that are now no longer there.
 
-        Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
-        consumers of them are not broken, but since the targets files themselves are still part of .NET,
-        the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
-   -->
+      Thus, we are shimming those targets files so that they do still appear in MSBuildToolsPath, so that
+      consumers of them are not broken, but since the targets files themselves are still part of .NET,
+      the shim will internally simply redirect to the real copy of the targets file in the .NET Framework.
+  -->
 
-   <Import Project="$(MSBuildFrameworkToolsPath)\Workflow.targets" />
+  <Import Project="$(MSBuildFrameworkToolsPath)\Workflow.targets" />
 
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index e3b038412d7..26325de8241 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -17,6 +17,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -144,7 +146,7 @@ private string GenerateCode(out string extension)
 #if FEATURE_SYSTEM_CONFIGURATION
             (e is ConfigurationException || e is SecurityException)
 #else
-            (e.GetType().Name == "ConfigurationErrorsException") //TODO: catch specific exception type once it is public https://github.com/dotnet/corefx/issues/40456
+            (e.GetType().Name == "ConfigurationErrorsException") // TODO: catch specific exception type once it is public https://github.com/dotnet/corefx/issues/40456
 #endif
             {
                 Log.LogErrorWithCodeFromResources("WriteCodeFragment.CouldNotCreateProvider", Language, e.Message);
@@ -443,7 +445,6 @@ bool isPositional
                         }
 
                         break;
-
                 }
 
                 attribute.Arguments.Add(new CodeAttributeArgument(parameter.Name, value));
diff --git a/src/Tasks/XamlRules/CSharp.BrowseObject.xaml b/src/Tasks/XamlRules/CSharp.BrowseObject.xaml
index b5151a4ebf8..ccefe984455 100644
--- a/src/Tasks/XamlRules/CSharp.BrowseObject.xaml
+++ b/src/Tasks/XamlRules/CSharp.BrowseObject.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="CSharp"
@@ -17,50 +16,50 @@
   </Rule.Categories>
 
   <DynamicEnumProperty
-      Name="{}{ItemType}"
-      DisplayName="Build Action"
-      Category="Advanced"
-      Description="How the file relates to the build and deployment processes."
-      EnumProvider="ItemTypes" />
+    Name="{}{ItemType}"
+    DisplayName="Build Action"
+    Category="Advanced"
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -85,4 +84,4 @@
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Extension" />
     </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/CSharp.ProjectItemsSchema.xaml b/src/Tasks/XamlRules/CSharp.ProjectItemsSchema.xaml
index a8b8e008446..dd51a5ece27 100644
--- a/src/Tasks/XamlRules/CSharp.ProjectItemsSchema.xaml
+++ b/src/Tasks/XamlRules/CSharp.ProjectItemsSchema.xaml
@@ -1,16 +1,14 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <ProjectSchemaDefinitions
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
 
-    <ContentType
-        Name="CSharpFile"
-        DisplayName="C# file"
-        ItemType="Compile">
-    </ContentType>
+  <ContentType
+      Name="CSharpFile"
+      DisplayName="C# file"
+      ItemType="Compile">
+  </ContentType>
 
-    <ItemType Name="Compile" DisplayName="C# compiler"/>
-
-	<FileExtension Name=".cs" ContentType="CSharpFile"/>
-</ProjectSchemaDefinitions>
+  <ItemType Name="Compile" DisplayName="C# compiler"/>
 
+  <FileExtension Name=".cs" ContentType="CSharpFile"/>
+</ProjectSchemaDefinitions>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/CSharp.xaml b/src/Tasks/XamlRules/CSharp.xaml
index 899420f7674..39168f14adf 100644
--- a/src/Tasks/XamlRules/CSharp.xaml
+++ b/src/Tasks/XamlRules/CSharp.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="CSharp"
@@ -17,50 +16,50 @@
   </Rule.Categories>
 
   <DynamicEnumProperty
-      Name="{}{ItemType}"
-      DisplayName="Build Action"
-      Category="Advanced"
-      Description="How the file relates to the build and deployment processes."
-      EnumProvider="ItemTypes" />
+    Name="{}{ItemType}"
+    DisplayName="Build Action"
+    Category="Advanced"
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -81,4 +80,4 @@
   <StringProperty Name="LastGenOutput" Visible="false" Description="The filename of the last file generated as a result of the SFG." />
   <BoolProperty Name="DesignTime" Visible="false" Description="A value indicating whether this file has a designer." />
   <BoolProperty Name="AutoGen" Visible="false" Description="A value indicating whether this is a generated file." />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/Content.xaml b/src/Tasks/XamlRules/Content.xaml
index cfa3cf78836..10943a217c9 100644
--- a/src/Tasks/XamlRules/Content.xaml
+++ b/src/Tasks/XamlRules/Content.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="Content"
@@ -77,4 +76,4 @@
       <NameValuePair Name="DoNotCopyAcrossProjects" Value="true" />
     </StringProperty.Metadata>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/Debugger_General.xaml b/src/Tasks/XamlRules/Debugger_General.xaml
index 49089861e8d..e0eb4c94934 100644
--- a/src/Tasks/XamlRules/Debugger_General.xaml
+++ b/src/Tasks/XamlRules/Debugger_General.xaml
@@ -1,23 +1,22 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule Name="DebuggerGeneralProperties"
-      DisplayName="Debugger General Properties"
-      Description="General Debugger options"
-      xmlns="http://schemas.microsoft.com/build/2009/properties">
+  DisplayName="Debugger General Properties"
+  Description="General Debugger options"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
   <Rule.DataSource>
     <DataSource Persistence="UserFile" />
   </Rule.DataSource>
-  
+
   <StringProperty Name="SymbolsPath" DisplayName="Symbol Search Path"
-                  Description="The search path used by the debugger to locate symbols.">
+    Description="The search path used by the debugger to locate symbols.">
   </StringProperty>
 
   <StringProperty Name="DebuggerFlavor" Visible="false"
-                  Description="The debug rule selected as the active debugger.">
+    Description="The debug rule selected as the active debugger.">
   </StringProperty>
 
   <EnumProperty Name="ImageClrType" Visible="false"
-                  Description="The 'hidden' property we pass to debuggers to let them know if this is a managed project.">
+    Description="The 'hidden' property we pass to debuggers to let them know if this is a managed project.">
     <EnumProperty.DataSource>
       <DataSource Persistence="UserFile" HasConfigurationCondition="false" PersistedName="_TargetImageClrType" />
     </EnumProperty.DataSource>
@@ -25,4 +24,4 @@
     <EnumValue Name="Mixed" DisplayName="Mixed Image" Description="The executable image to debug is a mixture of native and managed code." />
     <EnumValue Name="Managed" DisplayName="Managed Image" Description="The executable image to debug is a fully managed application." />
   </EnumProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/EmbeddedResource.xaml b/src/Tasks/XamlRules/EmbeddedResource.xaml
index 32924484fc0..39020789a57 100644
--- a/src/Tasks/XamlRules/EmbeddedResource.xaml
+++ b/src/Tasks/XamlRules/EmbeddedResource.xaml
@@ -1,11 +1,10 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-	Name="EmbeddedResource"
-	DisplayName="Embedded Resource"
-	PageTemplate="generic"
-	Description="Embedded resources"
-	xmlns="http://schemas.microsoft.com/build/2009/properties">
+  Name="EmbeddedResource"
+  DisplayName="Embedded Resource"
+  PageTemplate="generic"
+  Description="Embedded resources"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
   <Rule.DataSource>
     <DataSource Persistence="ProjectFile" HasConfigurationCondition="False" ItemType="EmbeddedResource" />
   </Rule.DataSource>
@@ -15,8 +14,8 @@
   </Rule.Categories>
 
   <DynamicEnumProperty Name="{}{ItemType}" DisplayName="Build Action"  Category="Advanced"
-                     Description="How the file relates to the build and deployment processes."
-                     EnumProvider="ItemTypes" />
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
   <EnumProperty
       Name="CopyToOutputDirectory"
       DisplayName="Copy to Output Directory"
@@ -28,44 +27,44 @@
   </EnumProperty>
 
   <StringProperty
-      Name="Generator"
-      Category="Advanced"
-      DisplayName="Custom Tool"
-      Description="Specifies the tool that transforms a file at design time and places the output of that transformation into another file. For example, a dataset (.xsd) file comes with a default custom tool." />
+    Name="Generator"
+    Category="Advanced"
+    DisplayName="Custom Tool"
+    Description="Specifies the tool that transforms a file at design time and places the output of that transformation into another file. For example, a dataset (.xsd) file comes with a default custom tool." />
   <StringProperty
-      Name="CustomToolNamespace"
-      Category="Advanced"
-      DisplayName="Custom Tool Namespace"
-      Description="The namespace into which the output of the custom tool is placed." />
+    Name="CustomToolNamespace"
+    Category="Advanced"
+    DisplayName="Custom Tool Namespace"
+    Description="The namespace into which the output of the custom tool is placed." />
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="EmbeddedResource" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="EmbeddedResource" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="EmbeddedResource" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -92,4 +91,4 @@
       <DataSource Persistence="ProjectFile" ItemType="EmbeddedResource" PersistedName="Generator" HasConfigurationCondition="False" />
     </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/Folder.xaml b/src/Tasks/XamlRules/Folder.xaml
index 98fec3edb19..713e5ffee8a 100644
--- a/src/Tasks/XamlRules/Folder.xaml
+++ b/src/Tasks/XamlRules/Folder.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="Folder"
@@ -13,8 +12,8 @@
   <StringProperty Name="Identity" Visible="false" ReadOnly="true" Category="Misc" />
   <StringProperty Name="FullPath" DisplayName="Full Path" ReadOnly="true" Category="Misc" />
   <StringProperty Name="FileNameAndExtension" DisplayName="Folder Name" ReadOnly="true" Category="Misc">
-      <StringProperty.DataSource>
-            <DataSource Persistence="ProjectInstance" ItemType="Folder" PersistedName="FileNameAndExtension" />
-      </StringProperty.DataSource>
+    <StringProperty.DataSource>
+        <DataSource Persistence="ProjectInstance" ItemType="Folder" PersistedName="FileNameAndExtension" />
+    </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/General.BrowseObject.xaml b/src/Tasks/XamlRules/General.BrowseObject.xaml
index 61eeb693f0d..cda0f1a70aa 100644
--- a/src/Tasks/XamlRules/General.BrowseObject.xaml
+++ b/src/Tasks/XamlRules/General.BrowseObject.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="ConfigurationGeneralBrowseObject"
@@ -52,4 +51,4 @@
       <DataSource Persistence="ProjectFile" PersistedName="MSBuildProjectDirectory" />
     </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/General.xaml b/src/Tasks/XamlRules/General.xaml
index 1080a5e4d4c..27a7bffab75 100644
--- a/src/Tasks/XamlRules/General.xaml
+++ b/src/Tasks/XamlRules/General.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="ConfigurationGeneral"
@@ -90,4 +89,4 @@
       <DataSource Persistence="ProjectFile" PersistedName="MSBuildProjectDirectory" />
     </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/General_File.xaml b/src/Tasks/XamlRules/General_File.xaml
index 68e5ae5d1b2..901e8f1ec51 100644
--- a/src/Tasks/XamlRules/General_File.xaml
+++ b/src/Tasks/XamlRules/General_File.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="ConfigurationGeneralFile"
@@ -24,43 +23,43 @@
     EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="{}{AnyType}" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="{}{AnyType}" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="{}{AnyType}" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -91,4 +90,4 @@
   <StringProperty Name="LastGenOutput" Visible="false" Description="The filename of the last file generated as a result of the SFG." />
   <BoolProperty Name="DesignTime" Visible="false" Description="A value indicating whether this file has a designer." />
   <BoolProperty Name="AutoGen" Visible="false" Description="A value indicating whether this is a generated file." />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/None.xaml b/src/Tasks/XamlRules/None.xaml
index 2b82f066ef1..acc74c7eed8 100644
--- a/src/Tasks/XamlRules/None.xaml
+++ b/src/Tasks/XamlRules/None.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="None"
@@ -17,50 +16,50 @@
   </Rule.Categories>
 
   <DynamicEnumProperty
-      Name="{}{ItemType}"
-      DisplayName="Build Action"
-      Category="Advanced"
-      Description="How the file relates to the build and deployment processes."
-      EnumProvider="ItemTypes" />
+    Name="{}{ItemType}"
+    DisplayName="Build Action"
+    Category="Advanced"
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="None" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="None" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="None" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -90,4 +89,4 @@
   <StringProperty Name="LastGenOutput" Visible="false" Description="The filename of the last file generated as a result of the SFG." />
   <BoolProperty Name="DesignTime" Visible="false" Description="A value indicating whether this file has a designer." />
   <BoolProperty Name="AutoGen" Visible="false" Description="A value indicating whether this is a generated file." />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/ProjectItemsSchema.xaml b/src/Tasks/XamlRules/ProjectItemsSchema.xaml
index 28f54055052..efd8d6946cc 100644
--- a/src/Tasks/XamlRules/ProjectItemsSchema.xaml
+++ b/src/Tasks/XamlRules/ProjectItemsSchema.xaml
@@ -1,139 +1,137 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <ProjectSchemaDefinitions
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
 
-    <ContentType
-        Name="Text"
-        DisplayName="Text file"
-        ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="Text"
+    DisplayName="Text file"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-        Name="XML"
-        DisplayName="Xml file"
-        ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="XML"
+    DisplayName="Xml file"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-        Name="HTML"
-        DisplayName="Html file"
-        ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="HTML"
+    DisplayName="Html file"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-        Name="CSS"
-        DisplayName="Cascading style sheet"
-        ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="CSS"
+    DisplayName="Cascading style sheet"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-        Name="Json"
-        DisplayName="Json file"
-        ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="Json"
+    DisplayName="Json file"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-      Name="Font"
-      DisplayName="Font file"
-      ItemType="Content">
-    </ContentType>
+  <ContentType
+    Name="Font"
+    DisplayName="Font file"
+    ItemType="Content">
+  </ContentType>
 
-    <ContentType
-      Name="Media"
-      DisplayName="Media file"
-      ItemType="Content">
-    </ContentType>
-    
-    <ContentType
-      Name="Image"
-      DisplayName="Image file"
-      ItemType="Content">
-    </ContentType>
-    
-    <ContentType
-      Name="EmbeddedResource"
-      DisplayName="Embedded resource"
-      ItemType="EmbeddedResource">
-      <NameValuePair Name="DefaultMetadata_Generator" Value="ResXFileCodeGenerator" />
-    </ContentType>
+  <ContentType
+    Name="Media"
+    DisplayName="Media file"
+    ItemType="Content">
+  </ContentType>
 
-    <ItemType Name="None" DisplayName="None"/>
-    <ItemType Name="Content" DisplayName="Content" />
-    <ItemType Name="EmbeddedResource" DisplayName="Embedded resource "/>
+  <ContentType
+    Name="Image"
+    DisplayName="Image file"
+    ItemType="Content">
+  </ContentType>
 
-    <FileExtension Name=".asax" ContentType="Asax" />
-    <FileExtension Name=".asmx" ContentType="HTML" />
-    <FileExtension Name=".asp" ContentType="AspPage" />
-    <FileExtension Name=".txt" ContentType="Text" />
-    <FileExtension Name=".resx" ContentType="EmbeddedResource" />
-    <FileExtension Name=".html" ContentType="HTML" />
-    <FileExtension Name=".htm" ContentType="HTML" />
-    <FileExtension Name=".css" ContentType="CSS" />
-    <FileExtension Name=".cur" ContentType="CUR" />
-    <FileExtension Name=".vbS" ContentType="Script" />
-    <FileExtension Name=".jS" ContentType="Script" />
-    <FileExtension Name=".xml" ContentType="XML" />
-    <FileExtension Name=".mht" ContentType="MHT" />
-    <FileExtension Name=".manifest" ContentType="Manifest" />
-    <FileExtension Name=".rdlc" ContentType="RDLC" />
-    <FileExtension Name=".cd" ContentType="ClassDiagram" />
-    <FileExtension Name=".licenses" ContentType="Licenses" />
-    <FileExtension Name=".json" ContentType="Json" />
+  <ContentType
+    Name="EmbeddedResource"
+    DisplayName="Embedded resource"
+    ItemType="EmbeddedResource">
+    <NameValuePair Name="DefaultMetadata_Generator" Value="ResXFileCodeGenerator" />
+  </ContentType>
 
-    <!-- Image formats -->
-    <FileExtension Name=".jpeg" ContentType="Image" />
-    <FileExtension Name=".jpe" ContentType="Image" />
-    <FileExtension Name=".jpg" ContentType="Image" />
-    <FileExtension Name=".jfif" ContentType="Image" />
-    <FileExtension Name=".exif" ContentType="Image" />
-    <FileExtension Name=".gif" ContentType="Image" />
-    <FileExtension Name=".tiff" ContentType="Image" />
-    <FileExtension Name=".tif" ContentType="Image" />
-    <FileExtension Name=".png" ContentType="Image" />
-    <FileExtension Name=".bmp" ContentType="Image" />
-    <FileExtension Name=".dib" ContentType="Image" />
-    <FileExtension Name=".rle" ContentType="Image" />
-    <FileExtension Name=".ico" ContentType="Image" />
-    <FileExtension Name=".wdp" ContentType="Image" />
-    <FileExtension Name=".dds" ContentType="Image" />
-    <FileExtension Name=".tga" ContentType="Image" />
+  <ItemType Name="None" DisplayName="None"/>
+  <ItemType Name="Content" DisplayName="Content" />
+  <ItemType Name="EmbeddedResource" DisplayName="Embedded resource "/>
 
-    <!-- Audio formats-->
-    <FileExtension Name=".wav" ContentType="Media" />
-    <FileExtension Name=".wma" ContentType="Media" />
-    <FileExtension Name=".au" ContentType="Media" />
-    <FileExtension Name=".aif" ContentType="Media" />
-    <FileExtension Name=".aiff" ContentType="Media" />
-    <FileExtension Name=".aifc" ContentType="Media" />
-    <FileExtension Name=".mid" ContentType="Media" />
-    <FileExtension Name=".midi" ContentType="Media" />
-    <FileExtension Name=".mp3" ContentType="Media" />
-    <FileExtension Name=".snd" ContentType="Media" />
-    <FileExtension Name=".rmi" ContentType="Media" />
+  <FileExtension Name=".asax" ContentType="Asax" />
+  <FileExtension Name=".asmx" ContentType="HTML" />
+  <FileExtension Name=".asp" ContentType="AspPage" />
+  <FileExtension Name=".txt" ContentType="Text" />
+  <FileExtension Name=".resx" ContentType="EmbeddedResource" />
+  <FileExtension Name=".html" ContentType="HTML" />
+  <FileExtension Name=".htm" ContentType="HTML" />
+  <FileExtension Name=".css" ContentType="CSS" />
+  <FileExtension Name=".cur" ContentType="CUR" />
+  <FileExtension Name=".vbS" ContentType="Script" />
+  <FileExtension Name=".jS" ContentType="Script" />
+  <FileExtension Name=".xml" ContentType="XML" />
+  <FileExtension Name=".mht" ContentType="MHT" />
+  <FileExtension Name=".manifest" ContentType="Manifest" />
+  <FileExtension Name=".rdlc" ContentType="RDLC" />
+  <FileExtension Name=".cd" ContentType="ClassDiagram" />
+  <FileExtension Name=".licenses" ContentType="Licenses" />
+  <FileExtension Name=".json" ContentType="Json" />
 
-    <!-- Video formats-->
-    <FileExtension Name=".avi" ContentType="Media" />
-    <FileExtension Name=".wmv" ContentType="Media" />
-    <FileExtension Name=".mov" ContentType="Media" />
-    <FileExtension Name=".qt" ContentType="Media" />
-    <FileExtension Name=".mpe" ContentType="Media" />
-    <FileExtension Name=".mpeg" ContentType="Media" />
-    <FileExtension Name=".mpg" ContentType="Media" />
-    <FileExtension Name=".mp2" ContentType="Media" />
-    <FileExtension Name=".mp4" ContentType="Media" />
-    <FileExtension Name=".asx" ContentType="Media" />
-    <FileExtension Name=".asf" ContentType="Media" />
-    <FileExtension Name=".webm" ContentType="Media" />
+  <!-- Image formats -->
+  <FileExtension Name=".jpeg" ContentType="Image" />
+  <FileExtension Name=".jpe" ContentType="Image" />
+  <FileExtension Name=".jpg" ContentType="Image" />
+  <FileExtension Name=".jfif" ContentType="Image" />
+  <FileExtension Name=".exif" ContentType="Image" />
+  <FileExtension Name=".gif" ContentType="Image" />
+  <FileExtension Name=".tiff" ContentType="Image" />
+  <FileExtension Name=".tif" ContentType="Image" />
+  <FileExtension Name=".png" ContentType="Image" />
+  <FileExtension Name=".bmp" ContentType="Image" />
+  <FileExtension Name=".dib" ContentType="Image" />
+  <FileExtension Name=".rle" ContentType="Image" />
+  <FileExtension Name=".ico" ContentType="Image" />
+  <FileExtension Name=".wdp" ContentType="Image" />
+  <FileExtension Name=".dds" ContentType="Image" />
+  <FileExtension Name=".tga" ContentType="Image" />
 
-    <!-- Font formats -->
-    <FileExtension Name=".ttf" ContentType="Font" />
-    <FileExtension Name=".odttf" ContentType="Font" />
-    <FileExtension Name=".otf" ContentType="Font" />
-    <FileExtension Name=".compositefont" ContentType="Font" />
-    <FileExtension Name=".ttc" ContentType="Font" />
-    <FileExtension Name=".tte" ContentType="Font" />
-    <FileExtension Name=".woff" ContentType="Font" />
-    <FileExtension Name=".eot" ContentType="Font" />
-</ProjectSchemaDefinitions>
+  <!-- Audio formats-->
+  <FileExtension Name=".wav" ContentType="Media" />
+  <FileExtension Name=".wma" ContentType="Media" />
+  <FileExtension Name=".au" ContentType="Media" />
+  <FileExtension Name=".aif" ContentType="Media" />
+  <FileExtension Name=".aiff" ContentType="Media" />
+  <FileExtension Name=".aifc" ContentType="Media" />
+  <FileExtension Name=".mid" ContentType="Media" />
+  <FileExtension Name=".midi" ContentType="Media" />
+  <FileExtension Name=".mp3" ContentType="Media" />
+  <FileExtension Name=".snd" ContentType="Media" />
+  <FileExtension Name=".rmi" ContentType="Media" />
 
+  <!-- Video formats-->
+  <FileExtension Name=".avi" ContentType="Media" />
+  <FileExtension Name=".wmv" ContentType="Media" />
+  <FileExtension Name=".mov" ContentType="Media" />
+  <FileExtension Name=".qt" ContentType="Media" />
+  <FileExtension Name=".mpe" ContentType="Media" />
+  <FileExtension Name=".mpeg" ContentType="Media" />
+  <FileExtension Name=".mpg" ContentType="Media" />
+  <FileExtension Name=".mp2" ContentType="Media" />
+  <FileExtension Name=".mp4" ContentType="Media" />
+  <FileExtension Name=".asx" ContentType="Media" />
+  <FileExtension Name=".asf" ContentType="Media" />
+  <FileExtension Name=".webm" ContentType="Media" />
+
+  <!-- Font formats -->
+  <FileExtension Name=".ttf" ContentType="Font" />
+  <FileExtension Name=".odttf" ContentType="Font" />
+  <FileExtension Name=".otf" ContentType="Font" />
+  <FileExtension Name=".compositefont" ContentType="Font" />
+  <FileExtension Name=".ttc" ContentType="Font" />
+  <FileExtension Name=".tte" ContentType="Font" />
+  <FileExtension Name=".woff" ContentType="Font" />
+  <FileExtension Name=".eot" ContentType="Font" />
+</ProjectSchemaDefinitions>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/ResolvedAssemblyReference.xaml b/src/Tasks/XamlRules/ResolvedAssemblyReference.xaml
index 41de81596b9..00a031357fd 100644
--- a/src/Tasks/XamlRules/ResolvedAssemblyReference.xaml
+++ b/src/Tasks/XamlRules/ResolvedAssemblyReference.xaml
@@ -1,122 +1,121 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-    Name="ResolvedAssemblyReference"
-    DisplayName="Resolved Assembly Reference"
-    PageTemplate="generic"
-    Description="Resolved reference"
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
-    <Rule.DataSource>
-        <DataSource Persistence="ResolvedReference" ItemType="Reference" HasConfigurationCondition="False" 
-                    SourceType="TargetResults" MSBuildTarget="ResolveAssemblyReferencesDesignTime" />
-    </Rule.DataSource>
+  Name="ResolvedAssemblyReference"
+  DisplayName="Resolved Assembly Reference"
+  PageTemplate="generic"
+  Description="Resolved reference"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ResolvedReference" ItemType="Reference" HasConfigurationCondition="False"
+      SourceType="TargetResults" MSBuildTarget="ResolveAssemblyReferencesDesignTime" />
+  </Rule.DataSource>
 
-    <StringListProperty Name="Aliases"
-                        DisplayName="Aliases"
-                        Description="A comma-delimited list of aliases to this reference."
-                        Separator=",">
-        <StringListProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
-        </StringListProperty.DataSource>
-    </StringListProperty>
+  <StringListProperty Name="Aliases"
+    DisplayName="Aliases"
+    Description="A comma-delimited list of aliases to this reference."
+    Separator=",">
+    <StringListProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
+    </StringListProperty.DataSource>
+  </StringListProperty>
 
-    <BoolProperty Name="CopyLocal"
-                  DisplayName="Copy Local"
-                  Description="Indicates whether the reference will be copied to the output directory.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" PersistedName="Private" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="CopyLocal"
+    DisplayName="Copy Local"
+    Description="Indicates whether the reference will be copied to the output directory.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" PersistedName="Private" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <StringProperty Name="Culture" 
-                    ReadOnly="True"
-                    Visible="False"
-                    DisplayName="Culture" 
-                    Description="The value of the culture field from the assembly metadata." />
+  <StringProperty Name="Culture"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Culture"
+    Description="The value of the culture field from the assembly metadata." />
 
-    <StringProperty Name="Description" 
-                    ReadOnly="True" 
-                    Visible="False"
-                    DisplayName="Description" 
-                    Description="The value of the Title field from the assembly metadata." />
+  <StringProperty Name="Description"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Description"
+    Description="The value of the Title field from the assembly metadata." />
 
-    <BoolProperty Name="EmbedInteropTypes"
-                  DisplayName="Embed Interop Types"
-                  Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="EmbedInteropTypes"
+    DisplayName="Embed Interop Types"
+    Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <EnumProperty Name="FileType"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="File Type"
-                  Description="The file type of the reference.">
-        <EnumValue Name="Assembly" DisplayName=".NET assembly" />
-        <EnumValue Name="ActiveX" DisplayName="COM type library" />
-        <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
-    </EnumProperty>
+  <EnumProperty Name="FileType"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="File Type"
+    Description="The file type of the reference.">
+    <EnumValue Name="Assembly" DisplayName=".NET assembly" />
+    <EnumValue Name="ActiveX" DisplayName="COM type library" />
+    <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
+  </EnumProperty>
 
-    <StringProperty Name="Identity"
-                    ReadOnly="True"
-                    DisplayName="Identity"
-                    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="{}{Identity}" />
-        </StringProperty.DataSource>
-    </StringProperty>
+  <StringProperty Name="Identity"
+    ReadOnly="True"
+    DisplayName="Identity"
+    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="{}{Identity}" />
+    </StringProperty.DataSource>
+  </StringProperty>
 
-    <StringProperty Name="ResolvedPath"
-                    ReadOnly="True"
-                    DisplayName="Path"
-                    Description="Location of the file being referenced.">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="Identity" />
-        </StringProperty.DataSource>
-    </StringProperty>
+  <StringProperty Name="ResolvedPath"
+    ReadOnly="True"
+    DisplayName="Path"
+    Description="Location of the file being referenced.">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="Identity" />
+    </StringProperty.DataSource>
+  </StringProperty>
 
-    <StringProperty Name="RuntimeVersion"
-                    ReadOnly="True"
-                    Visible="False"
-                    DisplayName="Runtime Version"
-                    Description="Version of the .NET runtime this assembly was compiled against.">
-    </StringProperty>
+  <StringProperty Name="RuntimeVersion"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Runtime Version"
+    Description="Version of the .NET runtime this assembly was compiled against.">
+  </StringProperty>
 
-    <BoolProperty Name="SpecificVersion" 
-                  DisplayName="Specific Version"
-                  Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="AssemblyReference" ItemType="Reference" HasConfigurationCondition="False" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="SpecificVersion"
+    DisplayName="Specific Version"
+    Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="AssemblyReference" ItemType="Reference" HasConfigurationCondition="False" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <BoolProperty Name="StrongName"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="Strong Name"
-                  Description="True indicates that the reference has been signed with a key-pair.">
-    </BoolProperty>
+  <BoolProperty Name="StrongName"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Strong Name"
+    Description="True indicates that the reference has been signed with a key-pair.">
+  </BoolProperty>
 
-    <StringProperty Name="Version"
-                    ReadOnly="True"
-                    DisplayName="Version"
-                    Description="Version of reference.">
-    </StringProperty>
+  <StringProperty Name="Version"
+    ReadOnly="True"
+    DisplayName="Version"
+    Description="Version of reference.">
+  </StringProperty>
 
-    <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
-    <StringProperty Name="HintPath" Visible="false" />
-    <StringProperty Name="SDKIdentity" Visible="false" />
+  <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
+  <StringProperty Name="HintPath" Visible="false" />
+  <StringProperty Name="SDKIdentity" Visible="false" />
 
-    <!-- This is the metadata we store on the reference item when we add it. -->
-    <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
+  <!-- This is the metadata we store on the reference item when we add it. -->
+  <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
 
-    <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
-    <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
-    <StringProperty Name="Name" Visible="false" ReadOnly="True" />
-    <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
-    <StringProperty Name="ReferenceFromSDK" Visible="False" ReadOnly="True" Description="The SDK that this reference came from when using the expand SDK target." />
-    <StringProperty Name="FusionName" Visible="False" ReadOnly="True" Description="The full fusion name of the resolved assembly." />
-    <StringProperty Name="ResolvedFrom" Visible="False" ReadOnly="True" Description="{}What repository held the reference that was used to resolve this.  (&quot;{GAC}&quot; if it was in the GAC)." />
-    <StringProperty Name="FrameworkFile" Visible="False" ReadOnly="True" Description="Is this file a framework file. Ie Found in the target framework directory or in the redist list." />
-</Rule>
+  <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
+  <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
+  <StringProperty Name="Name" Visible="false" ReadOnly="True" />
+  <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
+  <StringProperty Name="ReferenceFromSDK" Visible="False" ReadOnly="True" Description="The SDK that this reference came from when using the expand SDK target." />
+  <StringProperty Name="FusionName" Visible="False" ReadOnly="True" Description="The full fusion name of the resolved assembly." />
+  <StringProperty Name="ResolvedFrom" Visible="False" ReadOnly="True" Description="{}What repository held the reference that was used to resolve this.  (&quot;{GAC}&quot; if it was in the GAC)." />
+  <StringProperty Name="FrameworkFile" Visible="False" ReadOnly="True" Description="Is this file a framework file. Ie Found in the target framework directory or in the redist list." />
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/ResolvedCOMReference.xaml b/src/Tasks/XamlRules/ResolvedCOMReference.xaml
index 1aff28d9d8d..6abdc97990c 100644
--- a/src/Tasks/XamlRules/ResolvedCOMReference.xaml
+++ b/src/Tasks/XamlRules/ResolvedCOMReference.xaml
@@ -1,124 +1,123 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-    Name="ResolvedCOMReference"
-    DisplayName="Resolved COM Reference"
-    PageTemplate="generic"
-    Description="Resolved reference"
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
-    <Rule.DataSource>
-        <DataSource Persistence="ResolvedReference" ItemType="COMReference" HasConfigurationCondition="False" 
-                    SourceType="TargetResults" MSBuildTarget="ResolveComReferencesDesignTime" />
-    </Rule.DataSource>
-
-    <StringProperty Name="Guid"
-                    DisplayName="CLSID"
-                    Description="The GUID of the COM server."
-                    Visible="False" />
-    <IntProperty Name="VersionMajor" Visible="False" />
-    <IntProperty Name="VersionMinor" Visible="False" />
-    <StringProperty Name="WrapperTool" Visible="False" />
-
-    <StringListProperty Name="Aliases"
-                        DisplayName="Aliases"
-                        Description="A comma-delimited list of aliases to this reference."
-                        Separator=",">
-        <StringListProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
-        </StringListProperty.DataSource>
-    </StringListProperty>
-
-    <BoolProperty Name="CopyLocal"
-                  DisplayName="Copy Local"
-                  Description="Indicates whether the reference will be copied to the output directory.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" PersistedName="Private" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
-
-    <StringProperty Name="Culture" 
-                    ReadOnly="True"
-                    Visible="False"
-                    DisplayName="Culture" 
-                    Description="The value of the culture field from the assembly metadata." />
-
-    <StringProperty Name="Description" 
-                    ReadOnly="True" 
-                    Visible="False"
-                    DisplayName="Description" 
-                    Description="The value of the Title field from the assembly metadata." />
-
-    <BoolProperty Name="EmbedInteropTypes"
-                  DisplayName="Embed Interop Types"
-                  Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
-
-    <EnumProperty Name="FileType"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="File Type"
-                  Description="The file type of the reference.">
-        <EnumValue Name="Assembly" DisplayName=".NET assembly" />
-        <EnumValue Name="ActiveX" DisplayName="COM type library" />
-        <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
-    </EnumProperty>
-
-    <StringProperty Name="Identity"
-                    ReadOnly="True"
-                    DisplayName="Identity"
-                    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="{}{Identity}" />
-        </StringProperty.DataSource>
-    </StringProperty>
-
-    <StringProperty Name="ResolvedPath"
-                    ReadOnly="True"
-                    DisplayName="Path"
-                    Description="Location of the file being referenced.">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="Identity" />
-        </StringProperty.DataSource>
-    </StringProperty>
-
-    <StringProperty Name="RuntimeVersion"
-                    ReadOnly="True"
-                    Visible="False"
-                    DisplayName="Runtime Version"
-                    Description="Version of the .NET runtime this assembly was compiled against.">
-    </StringProperty>
-
-    <BoolProperty Name="SpecificVersion" 
-                  DisplayName="Specific Version"
-                  Visible="False"
-                  Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution." />
-
-    <BoolProperty Name="StrongName"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="Strong Name"
-                  Description="True indicates that the reference has been signed with a key-pair.">
-    </BoolProperty>
-
-    <StringProperty Name="Version"
-                    ReadOnly="True"
-                    DisplayName="Version"
-                    Description="Version of reference.">
-    </StringProperty>
-
-    <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
-    <StringProperty Name="HintPath" Visible="false" />
-    <StringProperty Name="SDKIdentity" Visible="false" />
-
-    <!-- This is the metadata we store on the reference item when we add it. -->
-    <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
-
-    <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
-    <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
-    <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
-    <StringProperty Name="FusionName" Visible="False" ReadOnly="True" />
-    <StringProperty Name="Name" Visible="false" ReadOnly="True" />
-</Rule>
+  Name="ResolvedCOMReference"
+  DisplayName="Resolved COM Reference"
+  PageTemplate="generic"
+  Description="Resolved reference"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ResolvedReference" ItemType="COMReference" HasConfigurationCondition="False"
+      SourceType="TargetResults" MSBuildTarget="ResolveComReferencesDesignTime" />
+  </Rule.DataSource>
+
+  <StringProperty Name="Guid"
+    DisplayName="CLSID"
+    Description="The GUID of the COM server."
+    Visible="False" />
+  <IntProperty Name="VersionMajor" Visible="False" />
+  <IntProperty Name="VersionMinor" Visible="False" />
+  <StringProperty Name="WrapperTool" Visible="False" />
+
+  <StringListProperty Name="Aliases"
+    DisplayName="Aliases"
+    Description="A comma-delimited list of aliases to this reference."
+    Separator=",">
+    <StringListProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
+    </StringListProperty.DataSource>
+  </StringListProperty>
+
+  <BoolProperty Name="CopyLocal"
+    DisplayName="Copy Local"
+    Description="Indicates whether the reference will be copied to the output directory.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" PersistedName="Private" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
+
+  <StringProperty Name="Culture"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Culture"
+    Description="The value of the culture field from the assembly metadata." />
+
+  <StringProperty Name="Description"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Description"
+    Description="The value of the Title field from the assembly metadata." />
+
+  <BoolProperty Name="EmbedInteropTypes"
+    DisplayName="Embed Interop Types"
+    Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
+
+  <EnumProperty Name="FileType"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="File Type"
+    Description="The file type of the reference.">
+    <EnumValue Name="Assembly" DisplayName=".NET assembly" />
+    <EnumValue Name="ActiveX" DisplayName="COM type library" />
+    <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
+  </EnumProperty>
+
+  <StringProperty Name="Identity"
+    ReadOnly="True"
+    DisplayName="Identity"
+    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="{}{Identity}" />
+    </StringProperty.DataSource>
+  </StringProperty>
+
+  <StringProperty Name="ResolvedPath"
+    ReadOnly="True"
+    DisplayName="Path"
+    Description="Location of the file being referenced.">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="Identity" />
+    </StringProperty.DataSource>
+  </StringProperty>
+
+  <StringProperty Name="RuntimeVersion"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Runtime Version"
+    Description="Version of the .NET runtime this assembly was compiled against.">
+  </StringProperty>
+
+  <BoolProperty Name="SpecificVersion"
+    DisplayName="Specific Version"
+    Visible="False"
+    Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution." />
+
+  <BoolProperty Name="StrongName"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Strong Name"
+    Description="True indicates that the reference has been signed with a key-pair.">
+  </BoolProperty>
+
+  <StringProperty Name="Version"
+    ReadOnly="True"
+    DisplayName="Version"
+    Description="Version of reference.">
+  </StringProperty>
+
+  <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
+  <StringProperty Name="HintPath" Visible="false" />
+  <StringProperty Name="SDKIdentity" Visible="false" />
+
+  <!-- This is the metadata we store on the reference item when we add it. -->
+  <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
+
+  <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
+  <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
+  <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
+  <StringProperty Name="FusionName" Visible="False" ReadOnly="True" />
+  <StringProperty Name="Name" Visible="false" ReadOnly="True" />
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/ResolvedProjectReference.xaml b/src/Tasks/XamlRules/ResolvedProjectReference.xaml
index 8f1ceda99f4..087e5b332cf 100644
--- a/src/Tasks/XamlRules/ResolvedProjectReference.xaml
+++ b/src/Tasks/XamlRules/ResolvedProjectReference.xaml
@@ -1,119 +1,118 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-    Name="ResolvedProjectReference"
-    DisplayName="Resolved Project Reference"
-    PageTemplate="generic"
-    Description="Resolved reference"
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
-    <Rule.DataSource>
-        <DataSource Persistence="ResolvedReference" ItemType="ProjectReference" HasConfigurationCondition="False" 
-                    SourceType="TargetResults" MSBuildTarget="ResolveProjectReferencesDesignTime" />
-    </Rule.DataSource>
+  Name="ResolvedProjectReference"
+  DisplayName="Resolved Project Reference"
+  PageTemplate="generic"
+  Description="Resolved reference"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ResolvedReference" ItemType="ProjectReference" HasConfigurationCondition="False"
+      SourceType="TargetResults" MSBuildTarget="ResolveProjectReferencesDesignTime" />
+  </Rule.DataSource>
 
-    <StringListProperty Name="Aliases"
-                        DisplayName="Aliases"
-                        Description="A comma-delimited list of aliases to this reference."
-                        Separator=",">
-        <StringListProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
-        </StringListProperty.DataSource>
-    </StringListProperty>
+  <StringListProperty Name="Aliases"
+    DisplayName="Aliases"
+    Description="A comma-delimited list of aliases to this reference."
+    Separator=",">
+    <StringListProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
+    </StringListProperty.DataSource>
+  </StringListProperty>
 
-    <BoolProperty Name="CopyLocal"
-                  DisplayName="Copy Local"
-                  Description="Indicates whether the reference will be copied to the output directory.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" PersistedName="Private" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="CopyLocal"
+    DisplayName="Copy Local"
+    Description="Indicates whether the reference will be copied to the output directory.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" PersistedName="Private" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <StringProperty Name="Culture" 
-                    ReadOnly="True"
-                    DisplayName="Culture" 
-                    Description="The value of the culture field from the assembly metadata.">
-    </StringProperty>
+  <StringProperty Name="Culture"
+    ReadOnly="True"
+    DisplayName="Culture"
+    Description="The value of the culture field from the assembly metadata.">
+  </StringProperty>
 
-    <StringProperty Name="Description" 
-                    ReadOnly="True" 
-                    DisplayName="Description" 
-                    Description="The value of the Title field from the assembly metadata.">
-    </StringProperty>
+  <StringProperty Name="Description"
+    ReadOnly="True"
+    DisplayName="Description"
+    Description="The value of the Title field from the assembly metadata.">
+  </StringProperty>
 
-    <BoolProperty Name="EmbedInteropTypes"
-                  DisplayName="Embed Interop Types"
-                  Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="EmbedInteropTypes"
+    DisplayName="Embed Interop Types"
+    Description="Indicates whether types defined in this assembly will be embedded into the target assembly.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <EnumProperty Name="FileType"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="File Type"
-                  Description="The file type of the reference.">
-        <EnumValue Name="Assembly" DisplayName=".NET assembly" />
-        <EnumValue Name="ActiveX" DisplayName="COM type library" />
-        <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
-    </EnumProperty>
+  <EnumProperty Name="FileType"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="File Type"
+    Description="The file type of the reference.">
+    <EnumValue Name="Assembly" DisplayName=".NET assembly" />
+    <EnumValue Name="ActiveX" DisplayName="COM type library" />
+    <EnumValue Name="Native Assembly" DisplayName="Native Assembly" />
+  </EnumProperty>
 
-    <StringProperty Name="Identity"
-                    ReadOnly="True"
-                    DisplayName="Identity"
-                    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="{}{Identity}" />
-        </StringProperty.DataSource>
-    </StringProperty>
+  <StringProperty Name="Identity"
+    ReadOnly="True"
+    DisplayName="Identity"
+    Description="Security identity of the referenced assembly (see System.Reflection.Assembly.Evidence or System.Security.Policy.Evidence).">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="{}{Identity}" />
+    </StringProperty.DataSource>
+  </StringProperty>
 
-    <StringProperty Name="ResolvedPath"
-                    ReadOnly="True"
-                    DisplayName="Path"
-                    Description="Location of the file being referenced.">
-        <StringProperty.DataSource>
-            <DataSource PersistedName="Identity" />
-        </StringProperty.DataSource>
-    </StringProperty>
+  <StringProperty Name="ResolvedPath"
+    ReadOnly="True"
+    DisplayName="Path"
+    Description="Location of the file being referenced.">
+    <StringProperty.DataSource>
+      <DataSource PersistedName="Identity" />
+    </StringProperty.DataSource>
+  </StringProperty>
 
-    <StringProperty Name="RuntimeVersion"
-                    ReadOnly="True"
-                    Visible="False"
-                    DisplayName="Runtime Version"
-                    Description="Version of the .NET runtime this assembly was compiled against.">
-    </StringProperty>
+  <StringProperty Name="RuntimeVersion"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Runtime Version"
+    Description="Version of the .NET runtime this assembly was compiled against.">
+  </StringProperty>
 
-    <BoolProperty Name="SpecificVersion" 
-                  DisplayName="Specific Version"
-                  Visible="False"
-                  Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution." />
+  <BoolProperty Name="SpecificVersion"
+    DisplayName="Specific Version"
+    Visible="False"
+    Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution." />
 
-    <BoolProperty Name="StrongName"
-                  ReadOnly="True"
-                  Visible="False"
-                  DisplayName="Strong Name"
-                  Description="True indicates that the reference has been signed with a key-pair.">
-    </BoolProperty>
+  <BoolProperty Name="StrongName"
+    ReadOnly="True"
+    Visible="False"
+    DisplayName="Strong Name"
+    Description="True indicates that the reference has been signed with a key-pair.">
+  </BoolProperty>
 
-    <StringProperty Name="Version"
-                    ReadOnly="True"
-                    DisplayName="Version"
-                    Description="Version of reference.">
-    </StringProperty>
+  <StringProperty Name="Version"
+    ReadOnly="True"
+    DisplayName="Version"
+    Description="Version of reference.">
+  </StringProperty>
 
-    <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
-    <StringProperty Name="HintPath" Visible="false" />
-    <StringProperty Name="SDKIdentity" Visible="false" />
+  <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
+  <StringProperty Name="HintPath" Visible="false" />
+  <StringProperty Name="SDKIdentity" Visible="false" />
 
-    <!-- This is the metadata we store on the reference item when we add it. -->
-    <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
-    <StringProperty Name="Project" 
-                    Visible="False"
-                    Description="the Guid the solution tracks an individual project reference target with" />
+  <!-- This is the metadata we store on the reference item when we add it. -->
+  <BoolProperty Name="IsWinMDFile" Visible="false" Description="Indicates whether the project system ascertained that this is a WinMD (as opposed to an assembly)" />
+  <StringProperty Name="Project"
+    Visible="False"
+    Description="the Guid the solution tracks an individual project reference target with" />
 
-    <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
-    <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
-    <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
-    <StringProperty Name="FusionName" Visible="False" ReadOnly="True" />
-    <StringProperty Name="Name" Visible="false" ReadOnly="True" />
-</Rule>
+  <!-- These are metadata added to the resolved item by MSBuild that we don't show to the user but use internally. -->
+  <BoolProperty Name="WinMDFile" Visible="false" ReadOnly="True" Description="Indicates whether the build system ascertained that this is a WinMD (as opposed to an assembly)" />
+  <StringProperty Name="OriginalItemSpec" Visible="False" ReadOnly="True" Description="The evaluated item name of the original reference item whose resolution resulted in this resolved reference item." />
+  <StringProperty Name="FusionName" Visible="False" ReadOnly="True" />
+  <StringProperty Name="Name" Visible="false" ReadOnly="True" />
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/Scc.xaml b/src/Tasks/XamlRules/Scc.xaml
index 155f08b65da..1c07a54454d 100644
--- a/src/Tasks/XamlRules/Scc.xaml
+++ b/src/Tasks/XamlRules/Scc.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="SourceControl"
@@ -13,4 +12,4 @@
   <StringProperty Name="SccProvider" />
   <StringProperty Name="SccAuxPath" />
   <StringProperty Name="SccLocalPath" />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/SpecialFolder.xaml b/src/Tasks/XamlRules/SpecialFolder.xaml
index 9cbbebef564..cbeb1cc0d71 100644
--- a/src/Tasks/XamlRules/SpecialFolder.xaml
+++ b/src/Tasks/XamlRules/SpecialFolder.xaml
@@ -1,24 +1,23 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-	Name="SpecialFolder"
-	DisplayName="General"
-	PageTemplate="generic"
-	Description="Special folders"
-	xmlns="http://schemas.microsoft.com/build/2009/properties">
-	<Rule.DataSource>
-		<DataSource Persistence="ProjectInstance" HasConfigurationCondition="False" ItemType="SpecialFolder" />
-	</Rule.DataSource>
+  Name="SpecialFolder"
+  DisplayName="General"
+  PageTemplate="generic"
+  Description="Special folders"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ProjectInstance" HasConfigurationCondition="False" ItemType="SpecialFolder" />
+  </Rule.DataSource>
 
-	<StringProperty Name="Identity" Visible="false" ReadOnly="true" Category="Misc" />
-	<StringProperty Name="FullPath" DisplayName="Full Path" ReadOnly="true" Category="Misc" />
+  <StringProperty Name="Identity" Visible="false" ReadOnly="true" Category="Misc" />
+  <StringProperty Name="FullPath" DisplayName="Full Path" ReadOnly="true" Category="Misc" />
     <StringProperty Name="FileNameAndExtension" DisplayName="Folder Name" ReadOnly="true" Category="Misc">
-        <StringProperty.DataSource>
-            <DataSource Persistence="ProjectInstance" ItemType="SpecialFolder" PersistedName="FileNameAndExtension" />
-        </StringProperty.DataSource>
+      <StringProperty.DataSource>
+        <DataSource Persistence="ProjectInstance" ItemType="SpecialFolder" PersistedName="FileNameAndExtension" />
+      </StringProperty.DataSource>
     </StringProperty>
     <EnumProperty Name="DisableAddItem" Visible="False">
-        <EnumValue Name="Recursive" />
-        <EnumValue Name="TopDirectoryOnly" />
+      <EnumValue Name="Recursive" />
+      <EnumValue Name="TopDirectoryOnly" />
     </EnumProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/SubProject.xaml b/src/Tasks/XamlRules/SubProject.xaml
index bc479db7729..a887c54313f 100644
--- a/src/Tasks/XamlRules/SubProject.xaml
+++ b/src/Tasks/XamlRules/SubProject.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="SubProject"
@@ -13,4 +12,4 @@
   <StringProperty Name="ProjectTypeGuid" Visible="False" />
   <StringProperty Name="ProjectId" Visible="False" />
   <BoolProperty Name="VirtualProject" Visible="False" />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/VisualBasic.BrowseObject.xaml b/src/Tasks/XamlRules/VisualBasic.BrowseObject.xaml
index 6da44dd8555..266cb074fdb 100644
--- a/src/Tasks/XamlRules/VisualBasic.BrowseObject.xaml
+++ b/src/Tasks/XamlRules/VisualBasic.BrowseObject.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="VisualBasic"
@@ -17,50 +16,50 @@
   </Rule.Categories>
 
   <DynamicEnumProperty
-      Name="{}{ItemType}"
-      DisplayName="Build Action"
-      Category="Advanced"
-      Description="How the file relates to the build and deployment processes."
-      EnumProvider="ItemTypes" />
+    Name="{}{ItemType}"
+    DisplayName="Build Action"
+    Category="Advanced"
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -85,4 +84,4 @@
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Extension" />
     </StringProperty.DataSource>
   </StringProperty>
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/VisualBasic.ProjectItemsSchema.xaml b/src/Tasks/XamlRules/VisualBasic.ProjectItemsSchema.xaml
index 4010206fbc5..08fd874b0d5 100644
--- a/src/Tasks/XamlRules/VisualBasic.ProjectItemsSchema.xaml
+++ b/src/Tasks/XamlRules/VisualBasic.ProjectItemsSchema.xaml
@@ -1,16 +1,14 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <ProjectSchemaDefinitions
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
 
-    <ContentType
-        Name="VisualBasicFile"
-        DisplayName="VB file"
-        ItemType="Compile">
-    </ContentType>
+  <ContentType
+    Name="VisualBasicFile"
+    DisplayName="VB file"
+    ItemType="Compile">
+  </ContentType>
 
-    <ItemType Name="Compile" DisplayName="VB compiler"/>
-
-	<FileExtension Name=".vb" ContentType="VisualBasicFile"/>
-</ProjectSchemaDefinitions>
+  <ItemType Name="Compile" DisplayName="VB compiler"/>
 
+  <FileExtension Name=".vb" ContentType="VisualBasicFile"/>
+</ProjectSchemaDefinitions>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/VisualBasic.xaml b/src/Tasks/XamlRules/VisualBasic.xaml
index b2ed3dfa33c..596eee397f4 100644
--- a/src/Tasks/XamlRules/VisualBasic.xaml
+++ b/src/Tasks/XamlRules/VisualBasic.xaml
@@ -1,4 +1,3 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
   Name="VisualBasic"
@@ -17,50 +16,50 @@
   </Rule.Categories>
 
   <DynamicEnumProperty
-      Name="{}{ItemType}"
-      DisplayName="Build Action"
-      Category="Advanced"
-      Description="How the file relates to the build and deployment processes."
-      EnumProvider="ItemTypes" />
+    Name="{}{ItemType}"
+    DisplayName="Build Action"
+    Category="Advanced"
+    Description="How the file relates to the build and deployment processes."
+    EnumProvider="ItemTypes" />
 
   <EnumProperty
-      Name="CopyToOutputDirectory"
-      DisplayName="Copy to Output Directory"
-      Category="Advanced"
-      Description="Specifies the source file will be copied to the output directory.">
+    Name="CopyToOutputDirectory"
+    DisplayName="Copy to Output Directory"
+    Category="Advanced"
+    Description="Specifies the source file will be copied to the output directory.">
     <EnumValue Name="Never" DisplayName="Do not copy" />
     <EnumValue Name="Always" DisplayName="Copy always" />
     <EnumValue Name="PreserveNewest" DisplayName="Copy if newer" />
   </EnumProperty>
 
   <StringProperty
-      Name="Identity"
-      Visible="false"
-      ReadOnly="true"
-      Category="Misc"
-      Description="The item specified in the Include attribute.">
+    Name="Identity"
+    Visible="false"
+    ReadOnly="true"
+    Category="Misc"
+    Description="The item specified in the Include attribute.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="Identity" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FullPath"
-      DisplayName="Full Path"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Location of the file.">
+    Name="FullPath"
+    DisplayName="Full Path"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Location of the file.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FullPath" />
     </StringProperty.DataSource>
   </StringProperty>
 
   <StringProperty
-      Name="FileNameAndExtension"
-      DisplayName="File Name"
-      ReadOnly="true"
-      Category="Misc"
-      Description="Name of the file or folder.">
+    Name="FileNameAndExtension"
+    DisplayName="File Name"
+    ReadOnly="true"
+    Category="Misc"
+    Description="Name of the file or folder.">
     <StringProperty.DataSource>
       <DataSource Persistence="Intrinsic" ItemType="Compile" PersistedName="FileNameAndExtension" />
     </StringProperty.DataSource>
@@ -81,4 +80,4 @@
   <StringProperty Name="LastGenOutput" Visible="false" Description="The filename of the last file generated as a result of the SFG." />
   <BoolProperty Name="DesignTime" Visible="false" Description="A value indicating whether this file has a designer." />
   <BoolProperty Name="AutoGen" Visible="false" Description="A value indicating whether this is a generated file." />
-</Rule>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/assemblyreference.xaml b/src/Tasks/XamlRules/assemblyreference.xaml
index a7eb69ee710..95d4aaf4fae 100644
--- a/src/Tasks/XamlRules/assemblyreference.xaml
+++ b/src/Tasks/XamlRules/assemblyreference.xaml
@@ -1,47 +1,46 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-    Name="AssemblyReference"
-    DisplayName="Assembly Reference"
-    PageTemplate="generic"
-    Description="Assembly reference properties"
-    xmlns="http://schemas.microsoft.com/build/2009/properties">
-    <Rule.DataSource>
-        <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
-    </Rule.DataSource>
+  Name="AssemblyReference"
+  DisplayName="Assembly Reference"
+  PageTemplate="generic"
+  Description="Assembly reference properties"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" />
+  </Rule.DataSource>
 
-    <StringListProperty Name="Aliases"
-                        DisplayName="Aliases"
-                        Description="A comma-delimited list of aliases to this reference."
-                        Separator="," />
+  <StringListProperty Name="Aliases"
+    DisplayName="Aliases"
+    Description="A comma-delimited list of aliases to this reference."
+    Separator="," />
 
-    <BoolProperty Name="CopyLocal"
-                DisplayName="Copy Local"
-                Description="Indicates whether the reference will be copied to the output directory.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" PersistedName="Private" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="CopyLocal"
+    DisplayName="Copy Local"
+    Description="Indicates whether the reference will be copied to the output directory.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile" ItemType="Reference" HasConfigurationCondition="False" PersistedName="Private" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <BoolProperty Name="EmbedInteropTypes"
-                  DisplayName="Embed Interop Types"
-                  Description="Indicates whether types defined in this assembly will be embedded into the target assembly." />
+  <BoolProperty Name="EmbedInteropTypes"
+    DisplayName="Embed Interop Types"
+    Description="Indicates whether types defined in this assembly will be embedded into the target assembly." />
 
-    <BoolProperty Name="SpecificVersion" 
-                  DisplayName="Specific Version"
-                  Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="AssemblyReference" ItemType="Reference" HasConfigurationCondition="False"/>
-        </BoolProperty.DataSource>
-    </BoolProperty>
+  <BoolProperty Name="SpecificVersion"
+    DisplayName="Specific Version"
+    Description="Indicates whether this assembly can be resolved without regard to multi-targeting rules for assembly resolution.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="AssemblyReference" ItemType="Reference" HasConfigurationCondition="False"/>
+    </BoolProperty.DataSource>
+  </BoolProperty>
 
-    <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
-    <StringProperty Name="HintPath" Visible="false" />
-    <StringProperty Name="SDKName" Visible="false" />
-    <BoolProperty Name="IsWinMDFile" Visible="false" />
-    <StringProperty Name="ImageRuntime"
-                    DisplayName="Runtime Version"
-                    Description="The CLR runtime version targeted by this assembly."
-                    Visible="False"
-                    ReadOnly="True" />
-</Rule>
+  <StringProperty Name="RequiredTargetFramework" DisplayName="Required Target Framework" Visible="False" />
+  <StringProperty Name="HintPath" Visible="false" />
+  <StringProperty Name="SDKName" Visible="false" />
+  <BoolProperty Name="IsWinMDFile" Visible="false" />
+  <StringProperty Name="ImageRuntime"
+    DisplayName="Runtime Version"
+    Description="The CLR runtime version targeted by this assembly."
+    Visible="False"
+    ReadOnly="True" />
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/comreference.xaml b/src/Tasks/XamlRules/comreference.xaml
index 164f0e736be..0cea2c8e4c3 100644
--- a/src/Tasks/XamlRules/comreference.xaml
+++ b/src/Tasks/XamlRules/comreference.xaml
@@ -1,20 +1,19 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-	Name="ComReference"
-	DisplayName="COM Reference"
-	PageTemplate="generic"
-	Description="COM reference properties"
-	xmlns="http://schemas.microsoft.com/build/2009/properties">
-	<Rule.DataSource>
-		<DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
-	</Rule.DataSource>
-	<StringProperty Name="Guid" DisplayName="CLSID"
-					Description="The GUID of the COM server." />
-	<StringProperty Name="Lcid" DisplayName="Locale"
-					Description="The LCID of the COM server." />
-	<IntProperty Name="VersionMajor" />
-	<IntProperty Name="VersionMinor" />
-	<BoolProperty Name="Isolated" />
-	<StringProperty Name="WrapperTool" />
-</Rule>
+  Name="ComReference"
+  DisplayName="COM Reference"
+  PageTemplate="generic"
+  Description="COM reference properties"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+  <Rule.DataSource>
+    <DataSource Persistence="ProjectFile" ItemType="COMReference" HasConfigurationCondition="False" />
+  </Rule.DataSource>
+  <StringProperty Name="Guid" DisplayName="CLSID"
+          Description="The GUID of the COM server." />
+  <StringProperty Name="Lcid" DisplayName="Locale"
+          Description="The LCID of the COM server." />
+  <IntProperty Name="VersionMajor" />
+  <IntProperty Name="VersionMinor" />
+  <BoolProperty Name="Isolated" />
+  <StringProperty Name="WrapperTool" />
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlRules/projectreference.xaml b/src/Tasks/XamlRules/projectreference.xaml
index 1526db5784b..c00b40058b9 100644
--- a/src/Tasks/XamlRules/projectreference.xaml
+++ b/src/Tasks/XamlRules/projectreference.xaml
@@ -1,46 +1,45 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
 <!--Copyright, Microsoft Corporation, All rights reserved.-->
 <Rule
-	Name="ProjectReference"
-	DisplayName="Project Reference"
-	PageTemplate="generic"
-	Description="Project reference properties"
-	xmlns="http://schemas.microsoft.com/build/2009/properties">
-
-    <Rule.DataSource>
-        <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
-    </Rule.DataSource>
-
-    <BoolProperty Name="ReferenceOutputAssembly"
-                  DisplayName="Reference Output Assembly"
-				  Description="A value indicating whether the compiler should include a reference to the target project's primary output assembly." />
-
-    <BoolProperty Name="Private"
-                  DisplayName="Copy Local"
-				  Description="Indicates whether the primary output of the reference target should be copied into this project's output directory, when that metadata is set on an unresolved reference." />
-
-    <BoolProperty Name="CopyLocalSatelliteAssemblies"
-                  DisplayName="Copy Local Satellite Assemblies"
-				  Description="Indicates whether the satellite assemblies of the reference target should be copied into this project's output directory." />
-
-    <BoolProperty Name="LinkLibraryDependencies" Visible="False" />
-
-    <BoolProperty Name="UseLibraryDependencyInputs" Visible="False" />
-
-    <StringProperty Name="Project" 
-                    Visible="False"
-                    Description="the Guid the solution tracks an individual project reference target with" />
-
-    <StringProperty Name="ReferencedProjectIdentifier" Visible="False" Description="The old (VS2010 beta) way to store the Guid the solution tracks an individual project reference target with" />
-
-    <BoolProperty Name="CopyLocal"
-                  DisplayName="Copy Local"
-                  Description="Indicates whether the reference will be copied to the output directory.">
-        <BoolProperty.DataSource>
-            <DataSource Persistence="ProjectFile"
-                        ItemType="ProjectReference"
-                        HasConfigurationCondition="False"
-                        PersistedName="Private" />
-        </BoolProperty.DataSource>
-    </BoolProperty>
-</Rule>
+  Name="ProjectReference"
+  DisplayName="Project Reference"
+  PageTemplate="generic"
+  Description="Project reference properties"
+  xmlns="http://schemas.microsoft.com/build/2009/properties">
+
+  <Rule.DataSource>
+    <DataSource Persistence="ProjectFile" ItemType="ProjectReference" HasConfigurationCondition="False" />
+  </Rule.DataSource>
+
+  <BoolProperty Name="ReferenceOutputAssembly"
+    DisplayName="Reference Output Assembly"
+    Description="A value indicating whether the compiler should include a reference to the target project's primary output assembly." />
+
+  <BoolProperty Name="Private"
+    DisplayName="Copy Local"
+    Description="Indicates whether the primary output of the reference target should be copied into this project's output directory, when that metadata is set on an unresolved reference." />
+
+  <BoolProperty Name="CopyLocalSatelliteAssemblies"
+    DisplayName="Copy Local Satellite Assemblies"
+    Description="Indicates whether the satellite assemblies of the reference target should be copied into this project's output directory." />
+
+  <BoolProperty Name="LinkLibraryDependencies" Visible="False" />
+
+  <BoolProperty Name="UseLibraryDependencyInputs" Visible="False" />
+
+  <StringProperty Name="Project"
+    Visible="False"
+    Description="the Guid the solution tracks an individual project reference target with" />
+
+  <StringProperty Name="ReferencedProjectIdentifier" Visible="False" Description="The old (VS2010 beta) way to store the Guid the solution tracks an individual project reference target with" />
+
+  <BoolProperty Name="CopyLocal"
+    DisplayName="Copy Local"
+    Description="Indicates whether the reference will be copied to the output directory.">
+    <BoolProperty.DataSource>
+      <DataSource Persistence="ProjectFile"
+        ItemType="ProjectReference"
+        HasConfigurationCondition="False"
+        PersistedName="Private" />
+    </BoolProperty.DataSource>
+  </BoolProperty>
+</Rule>
\ No newline at end of file
diff --git a/src/Tasks/XamlTaskFactory/CommandLineGenerator.cs b/src/Tasks/XamlTaskFactory/CommandLineGenerator.cs
index 96fc22b7388..554e77cb6b7 100644
--- a/src/Tasks/XamlTaskFactory/CommandLineGenerator.cs
+++ b/src/Tasks/XamlTaskFactory/CommandLineGenerator.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
diff --git a/src/Tasks/XamlTaskFactory/CommandLineToolSwitch.cs b/src/Tasks/XamlTaskFactory/CommandLineToolSwitch.cs
index 8cc3e36c853..a74a8143b66 100644
--- a/src/Tasks/XamlTaskFactory/CommandLineToolSwitch.cs
+++ b/src/Tasks/XamlTaskFactory/CommandLineToolSwitch.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
diff --git a/src/Tasks/XamlTaskFactory/Property.cs b/src/Tasks/XamlTaskFactory/Property.cs
index b039fdb7e2e..10a3579e486 100644
--- a/src/Tasks/XamlTaskFactory/Property.cs
+++ b/src/Tasks/XamlTaskFactory/Property.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
diff --git a/src/Tasks/XamlTaskFactory/RelationsParser.cs b/src/Tasks/XamlTaskFactory/RelationsParser.cs
index 4ce861ca530..a8e2ace0c3e 100644
--- a/src/Tasks/XamlTaskFactory/RelationsParser.cs
+++ b/src/Tasks/XamlTaskFactory/RelationsParser.cs
@@ -7,6 +7,8 @@
 using System.IO;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
@@ -552,7 +554,7 @@ private static SwitchRelations ObtainAttributes(XmlNode node, SwitchRelations sw
                         switchRelations.Status = attribute.InnerText;
                         break;
                     default:
-                        //LogError("InvalidAttribute", attribute.Name);
+                        // LogError("InvalidAttribute", attribute.Name);
                         break;
                 }
             }
diff --git a/src/Tasks/XamlTaskFactory/TaskGenerator.cs b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
index 76547bf0e52..28a24d722ea 100644
--- a/src/Tasks/XamlTaskFactory/TaskGenerator.cs
+++ b/src/Tasks/XamlTaskFactory/TaskGenerator.cs
@@ -9,6 +9,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
diff --git a/src/Tasks/XamlTaskFactory/TaskParser.cs b/src/Tasks/XamlTaskFactory/TaskParser.cs
index ad7d411177f..b0eab96849c 100644
--- a/src/Tasks/XamlTaskFactory/TaskParser.cs
+++ b/src/Tasks/XamlTaskFactory/TaskParser.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared.FileSystem;
 using XamlTypes = Microsoft.Build.Framework.XamlTypes;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
@@ -126,13 +128,8 @@ private bool ParseAsContentOrFile(string contentOrFile, string desiredRule)
                 if (!isRootedPath)
                     maybeFullPath = Path.GetFullPath(contentOrFile);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 // We will get an exception if the contents are not a path (for instance, they are actual XML.)
             }
 
diff --git a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
index b0f61b5746d..1f79b6ccd1c 100644
--- a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
+++ b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks.Xaml
 {
     /// <summary>
@@ -224,7 +226,7 @@ internal void ValidateOverrides()
         {
             List<string> overriddenSwitches = new List<string>();
 
-            //Collect the overrided switches
+            // Collect the overrided switches
             foreach (KeyValuePair<string, CommandLineToolSwitch> overriddenSwitch in ActiveToolSwitches)
             {
                 foreach (KeyValuePair<string, string> overridePair in overriddenSwitch.Value.Overrides)
diff --git a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
index 679d22d00a1..a9195d3f89d 100644
--- a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
+++ b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
@@ -7,6 +7,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
 #if FEATURE_XAMLTASKFACTORY
diff --git a/src/Tasks/XmlPeek.cs b/src/Tasks/XmlPeek.cs
index 4b16bbbb33b..d1f2e2ea5ea 100644
--- a/src/Tasks/XmlPeek.cs
+++ b/src/Tasks/XmlPeek.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -84,13 +86,8 @@ public override bool Execute()
             {
                 xmlinput = new XmlInput(XmlInputPath, XmlContent);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeek.ArgumentError", e.Message);
                 return false;
             }
@@ -105,13 +102,8 @@ public override bool Execute()
                     xr.Dispose();
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeekPoke.InputFileError", XmlInputPath.ItemSpec, e.Message);
                 return false;
             }
@@ -127,13 +119,8 @@ public override bool Execute()
                 // Create the expression from query
                 expr = nav.Compile(_query);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeekPoke.XPathError", _query, e.Message);
                 return false;
             }
@@ -145,13 +132,8 @@ public override bool Execute()
             {
                 LoadNamespaces(ref xmlNamespaceManager, Namespaces);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeek.NamespacesError", e.Message);
                 return false;
             }
diff --git a/src/Tasks/XmlPoke.cs b/src/Tasks/XmlPoke.cs
index 8f42cfe910c..b64579109fd 100644
--- a/src/Tasks/XmlPoke.cs
+++ b/src/Tasks/XmlPoke.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -110,13 +112,8 @@ public override bool Execute()
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeekPoke.InputFileError", _xmlInputPath.ItemSpec, e.Message);
                 return false;
             }
@@ -129,13 +126,8 @@ public override bool Execute()
                 // Create the expression from query
                 expr = nav.Compile(_query);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPeekPoke.XPathError", _query, e.Message);
                 return false;
             }
@@ -148,13 +140,8 @@ public override bool Execute()
             {
                 LoadNamespaces(ref xmlNamespaceManager, Namespaces);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XmlPoke.NamespacesError", e.Message);
                 return false;
             }
@@ -180,13 +167,8 @@ public override bool Execute()
                     iter.Current.InnerXml = _value.ItemSpec;
                     Log.LogMessageFromResources(MessageImportance.Low, "XmlPoke.Replaced", iter.Current.Name, _value.ItemSpec);
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     Log.LogErrorWithCodeFromResources("XmlPoke.PokeError", _value.ItemSpec, e.Message);
                     return false;
                 }
diff --git a/src/Tasks/XslTransformation.cs b/src/Tasks/XslTransformation.cs
index 0f47a2edfe2..3763ba0da5b 100644
--- a/src/Tasks/XslTransformation.cs
+++ b/src/Tasks/XslTransformation.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
@@ -98,13 +100,8 @@ public override bool Execute()
                 xmlinput = new XmlInput(XmlInputPaths, XmlContent);
                 xsltinput = new XsltInput(XslInputPath, XslContent, XslCompiledDllPath, Log);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XslTransform.ArgumentError", e.Message);
                 return false;
             }
@@ -130,13 +127,8 @@ public override bool Execute()
             {
                 arguments = ProcessXsltArguments(Parameters);
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XslTransform.XsltArgumentsError", e.Message);
                 return false;
             }
@@ -153,13 +145,8 @@ public override bool Execute()
                 Log.LogErrorWithCodeFromResources("XslTransform.PrecompiledXsltError");
                 return false;
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XslTransform.XsltLoadError", e.Message);
                 return false;
             }
@@ -180,13 +167,8 @@ public override bool Execute()
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 Log.LogErrorWithCodeFromResources("XslTransform.TransformError", e.Message);
                 return false;
             }
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index d2bc38113f3..8b9c83ad762 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -6,6 +6,8 @@
 using System.IO;
 using System.IO.Compression;
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     public sealed class ZipDirectory : TaskExtension
diff --git a/src/Tasks/system.design/stronglytypedresourcebuilder.cs b/src/Tasks/system.design/stronglytypedresourcebuilder.cs
index aada0049113..0facabc1b83 100644
--- a/src/Tasks/system.design/stronglytypedresourcebuilder.cs
+++ b/src/Tasks/system.design/stronglytypedresourcebuilder.cs
@@ -54,6 +54,8 @@ interesting idea.
 */
 
 
+#nullable disable
+
 namespace Microsoft.Build.Tasks
 {
     internal static class StronglyTypedResourceBuilder
@@ -201,7 +203,7 @@ private static CodeCompileUnit InternalCreate(Dictionary<String, ResourceData> r
             AddGeneratedCodeAttributeforMember(srClass);
 
             TypeAttributes ta = internalClass ? TypeAttributes.NotPublic : TypeAttributes.Public;
-            //ta |= TypeAttributes.Sealed;
+            // ta |= TypeAttributes.Sealed;
             srClass.TypeAttributes = ta;
             srClass.Comments.Add(new CodeCommentStatement(DocCommentSummaryStart, true));
             srClass.Comments.Add(new CodeCommentStatement(SR.GetString(SR.ClassDocComment), true));
diff --git a/src/UnitTests.Shared/AssemblyResources.cs b/src/UnitTests.Shared/AssemblyResources.cs
index 962b5b0342f..baa3ffd33ba 100644
--- a/src/UnitTests.Shared/AssemblyResources.cs
+++ b/src/UnitTests.Shared/AssemblyResources.cs
@@ -3,6 +3,8 @@
 
 using System;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 5ad6f792355..438cb91ff75 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build">
   <Import Project="..\dir.props" />
   <PropertyGroup>
     <ProjectGuid>{E1ADB824-2B34-4920-953F-746DFD6DB3C1}</ProjectGuid>
@@ -25,10 +25,6 @@
     <Reference Include="System.Core" />
     <Reference Include="System.Xml" />
   </ItemGroup>
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
   <ItemGroup>
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index f5984764cce..7911ea669d6 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.Shared
 {
     public static class RunnerUtilities
@@ -29,7 +31,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             var pathToExecutable = pathToMsBuildExe;
 #else
             var pathToExecutable = ResolveRuntimeExecutableName();
-            msbuildParameters = "\"" + pathToMsBuildExe + "\"" + " " + msbuildParameters;
+            msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
             return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
diff --git a/src/Utilities.UnitTests/CanonicalError_Tests.cs b/src/Utilities.UnitTests/CanonicalError_Tests.cs
index b1dc1bab9fa..755fc101ddd 100644
--- a/src/Utilities.UnitTests/CanonicalError_Tests.cs
+++ b/src/Utilities.UnitTests/CanonicalError_Tests.cs
@@ -5,6 +5,8 @@
 using Xunit;
 using CanonicalError = Microsoft.Build.Shared.CanonicalError;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class CanonicalErrorTest
@@ -190,7 +192,7 @@ public void ValidateErrorMessageWithFileName3()
         [Fact]
         public void ValidateErrorMessageVariableNotUsed()
         {
-            //      (line)
+            // (line)
             ValidateFileNameMultiLineColumnError("Main.cs():Command line warning CS0168: The variable 'foo' is declared but never used",
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
@@ -201,7 +203,7 @@ public void ValidateErrorMessageVariableNotUsed()
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, 3, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
 
-            //      (line-line)
+            // (line-line)
             ValidateFileNameMultiLineColumnError("Main.cs(-):Command line warning CS0168: The variable 'foo' is declared but never used",
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
@@ -214,7 +216,7 @@ public void ValidateErrorMessageVariableNotUsed()
                 "Main.cs", 1, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
 
-            //      (line,col)
+            // (line,col)
             ValidateFileNameMultiLineColumnError("Main.cs(,):Command line warning CS0168: The variable 'foo' is declared but never used",
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
@@ -237,7 +239,7 @@ public void ValidateErrorMessageVariableNotUsed()
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
 
-            //      (line,col-col)
+            // (line,col-col)
             ValidateFileNameMultiLineColumnError("Main.cs(,-):Command line warning CS0168: The variable 'foo' is declared but never used",
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
@@ -258,7 +260,7 @@ public void ValidateErrorMessageVariableNotUsed()
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
 
-            //      (line,col,line,col)
+            // (line,col,line,col)
             ValidateFileNameMultiLineColumnError("Main.cs(,,,):Command line warning CS0168: The variable 'foo' is declared but never used",
                 "Main.cs", CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified, CanonicalError.Parts.numberNotSpecified,
                 CanonicalError.Parts.Category.Warning, "CS0168", "The variable 'foo' is declared but never used");
diff --git a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
index 16a31027654..a9b45f36e8b 100644
--- a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
+++ b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
@@ -2,12 +2,16 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Globalization;
 using System.IO;
+using System.Threading;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class CommandLineBuilderTest
@@ -52,6 +56,24 @@ public void AppendSwitchWithSpacesInParameter()
             c.ShouldBe("/animal:\"dog and pony\"");
         }
 
+        [Fact]
+        public void AppendSwitchWithIShouldNotNeedQuotingInTurkishLocale()
+        {
+            var currentCulture = Thread.CurrentThread.CurrentCulture;
+            try
+            {
+                Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR"); // Turkish
+
+                CommandLineBuilder c = new CommandLineBuilder();
+                c.AppendSwitchIfNotNull("/i:", "iI");
+                c.ShouldBe("/i:iI");
+            }
+            finally
+            {
+                Thread.CurrentThread.CurrentCulture = currentCulture;
+            }
+        }
+
         /// <summary>
         /// Test for AppendSwitchIfNotNull for the ITaskItem version
         /// </summary>
@@ -412,7 +434,7 @@ public void AppendSwitchUnQuotedTaskItem()
         public void AppendSwitchWithOddNumberOfLiteralQuotesInParameter()
         {
             CommandLineBuilder c = new CommandLineBuilder();
-            c.AppendSwitchIfNotNull("/D", @"A='""'");     //   /DA='"'
+            c.AppendSwitchIfNotNull("/D", @"A='""'");     // /DA='"'
             c.ShouldBe(@"/D""A='\""'"""); //   /D"A='\"'"
         }
 
@@ -465,7 +487,6 @@ public void TestVerifyThrowElse()
             }
            );
         }
-        
     }
 
     internal static class CommandLineBuilderExtensionMethods
diff --git a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
index 83a88b00e65..2776d3762bb 100644
--- a/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
+++ b/src/Utilities.UnitTests/EventArgsFormatting_Tests.cs
@@ -10,6 +10,8 @@
 
 #pragma warning disable 0219
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class EventArgsFormattingTests
@@ -120,7 +122,6 @@ public void NullMessage()
             EventArgsFormatting.FormatEventMessage("error", "CS",
                       null, "312", "source.cs", 233, 236, 4, 8, 0);
             // No exception was thrown
-
         }
 
         /// <summary>
@@ -192,4 +193,3 @@ public override void Initialize(IEventSource eventSource)
         }
     }
 }
-
diff --git a/src/Utilities.UnitTests/Logger_Tests.cs b/src/Utilities.UnitTests/Logger_Tests.cs
index fbfa8766d1c..c1c2b3bd79a 100644
--- a/src/Utilities.UnitTests/Logger_Tests.cs
+++ b/src/Utilities.UnitTests/Logger_Tests.cs
@@ -8,6 +8,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     internal class EmptyLogger : Logger
diff --git a/src/Utilities.UnitTests/MockEngine.cs b/src/Utilities.UnitTests/MockEngine.cs
index 1538d27a0ae..90cc814a137 100644
--- a/src/Utilities.UnitTests/MockEngine.cs
+++ b/src/Utilities.UnitTests/MockEngine.cs
@@ -9,6 +9,8 @@
 using Microsoft.Build.Shared;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /***************************************************************************
diff --git a/src/Utilities.UnitTests/MockTask.cs b/src/Utilities.UnitTests/MockTask.cs
index 76c96f38135..52b8160a3f1 100644
--- a/src/Utilities.UnitTests/MockTask.cs
+++ b/src/Utilities.UnitTests/MockTask.cs
@@ -5,6 +5,8 @@
 using System.Resources;
 using Microsoft.Build.Utilities;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     internal sealed class MockTask : Task
diff --git a/src/Utilities.UnitTests/MuxLogger_Tests.cs b/src/Utilities.UnitTests/MuxLogger_Tests.cs
index 21fcfb9f78c..fac643fade0 100644
--- a/src/Utilities.UnitTests/MuxLogger_Tests.cs
+++ b/src/Utilities.UnitTests/MuxLogger_Tests.cs
@@ -13,6 +13,8 @@
 using Xunit;
 using MuxLogger = Microsoft.Build.Utilities.MuxLogger;
 
+#nullable disable
+
 namespace Microsoft.VisualStudio.Build.UnitTest
 {
     /// <summary>
@@ -54,7 +56,7 @@ public void SimpleBuildWithNoLoggers()
             MuxLogger muxLogger = new MuxLogger();
             BuildParameters parameters = new BuildParameters(ProjectCollection.GlobalProjectCollection);
             parameters.Loggers = new ILogger[] { muxLogger };
-            buildManager.Build(parameters, new BuildRequestData(project, new string[0], null));
+            buildManager.Build(parameters, new BuildRequestData(project, Array.Empty<string>(), null));
         }
 
         /// <summary>
@@ -94,7 +96,7 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
             ProjectInstance project = (new Project(XmlReader.Create(new StringReader(projectBody)), null, ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection)).CreateProjectInstance();
             BuildParameters parameters = new BuildParameters(projectCollection);
             parameters.Loggers = new ILogger[] { mockLogger2 };
-            buildManager.Build(parameters, new BuildRequestData(project, new string[0], null));
+            buildManager.Build(parameters, new BuildRequestData(project, Array.Empty<string>(), null));
 
             // Build with the mux logger
             MuxLogger muxLogger = new MuxLogger();
@@ -109,7 +111,7 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
 
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger);
                 submission.Execute();
             }
@@ -149,7 +151,7 @@ public void OneSubmissionOneLogger()
 
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger);
                 submission.Execute();
@@ -202,11 +204,11 @@ public void TwoSubmissionsWithSeparateLoggers()
 
             try
             {
-                BuildSubmission submission1 = buildManager.PendBuildRequest(new BuildRequestData(project1, new string[0], null));
+                BuildSubmission submission1 = buildManager.PendBuildRequest(new BuildRequestData(project1, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission1.SubmissionId, mockLogger1);
                 submission1.Execute();
 
-                BuildSubmission submission2 = buildManager.PendBuildRequest(new BuildRequestData(project2, new string[0], null));
+                BuildSubmission submission2 = buildManager.PendBuildRequest(new BuildRequestData(project2, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission2.SubmissionId, mockLogger2);
                 submission2.Execute();
             }
@@ -255,7 +257,7 @@ public void OneSubmissionTwoLoggers()
             buildManager.BeginBuild(parameters);
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger1);
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger2);
@@ -306,7 +308,7 @@ public void RegisteringLoggerDuringBuildThrowsException()
             {
                 try
                 {
-                    BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                    BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                     submission.ExecuteAsync(null, null);
                     projectStartedEvent.WaitOne();
diff --git a/src/Utilities.UnitTests/PlatformManifest_Tests.cs b/src/Utilities.UnitTests/PlatformManifest_Tests.cs
index 79522881a6c..85b4ba832db 100644
--- a/src/Utilities.UnitTests/PlatformManifest_Tests.cs
+++ b/src/Utilities.UnitTests/PlatformManifest_Tests.cs
@@ -11,6 +11,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     /// <summary>
diff --git a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
index edc892a75a9..f549235ca90 100644
--- a/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessExtensions_Tests.cs
@@ -8,6 +8,8 @@
 using System.Diagnostics;
 using System.Threading.Tasks;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ProcessExtensions_Tests
@@ -17,7 +19,7 @@ public async Task KillTree()
         {
             var psi =
                 NativeMethodsShared.IsWindows ?
-                    new ProcessStartInfo("powershell", "-NoLogo -NoProfile -command \"Start-Sleep -Seconds 600\"") :
+                    new ProcessStartInfo("rundll32", "kernel32.dll, Sleep") :
                     new ProcessStartInfo("sleep", "600");
 
             Process p = Process.Start(psi); // sleep 10m.
diff --git a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
index 7691488053e..19501687e94 100644
--- a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
@@ -7,6 +7,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class ProcessorArchitectureTests
@@ -19,6 +21,7 @@ internal static string ProcessorArchitectureIntToString()
                 NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                 NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
                 NativeMethodsShared.ProcessorArchitectures.ARM => ProcessorArchitecture.ARM,
+                NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                 // unknown architecture? return null
                 _ => null,
             };
@@ -33,6 +36,7 @@ public void ValidateProcessorArchitectureStrings()
             ProcessorArchitecture.AMD64.ShouldBe("AMD64"); // "AMD64 ProcessorArchitecture isn't correct"
             ProcessorArchitecture.MSIL.ShouldBe("MSIL"); // "MSIL ProcessorArchitecture isn't correct"
             ProcessorArchitecture.ARM.ShouldBe("ARM"); // "ARM ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.ARM64.ShouldBe("ARM64"); // "ARM ProcessorArchitecture isn't correct"
         }
 
         [Fact]
@@ -53,7 +57,15 @@ public void ValidateConvertDotNetFrameworkArchitectureToProcessorArchitecture()
                     procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
 
                     procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
-                    procArchitecture.ShouldBeNull(); // "We should not have any Bitness64 Processor architecture returned in arm"
+                    procArchitecture.ShouldBeNull();
+                    break;
+
+                case ProcessorArchitecture.ARM64:
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM64);
+
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness32);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
                     break;
 
                 case ProcessorArchitecture.X86:
@@ -62,7 +74,7 @@ public void ValidateConvertDotNetFrameworkArchitectureToProcessorArchitecture()
 
                     procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
 
-                    //We should also allow NULL if the machine is true x86 only.
+                    // We should also allow NULL if the machine is true x86 only.
                     bool isValidResult = procArchitecture?.Equals(ProcessorArchitecture.AMD64) != false || procArchitecture.Equals(ProcessorArchitecture.IA64);
 
                     isValidResult.ShouldBeTrue();
diff --git a/src/Utilities.UnitTests/StringExtensions_Tests.cs b/src/Utilities.UnitTests/StringExtensions_Tests.cs
index f8361c3e8e3..1b115cb0f7f 100644
--- a/src/Utilities.UnitTests/StringExtensions_Tests.cs
+++ b/src/Utilities.UnitTests/StringExtensions_Tests.cs
@@ -7,6 +7,8 @@
 
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class StringExtensions_Tests
diff --git a/src/Utilities.UnitTests/TaskItem_Tests.cs b/src/Utilities.UnitTests/TaskItem_Tests.cs
index 04e90914861..f182975a6ac 100644
--- a/src/Utilities.UnitTests/TaskItem_Tests.cs
+++ b/src/Utilities.UnitTests/TaskItem_Tests.cs
@@ -5,7 +5,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
-
+using System.Linq;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -14,6 +14,8 @@
 
 #pragma warning disable 0219
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class TaskItemTests
@@ -80,22 +82,20 @@ public void NullITaskItem()
             }
            );
         }
-        /// <summary>
-        /// Even without any custom metadata metadatanames should
-        /// return the built in metadata
-        /// </summary>
+
         [Fact]
-        public void MetadataNamesNoCustomMetadata()
+        public void MetadataNamesAndCount()
         {
             TaskItem taskItem = new TaskItem("x");
 
-            taskItem.MetadataNames.Count.ShouldBe(FileUtilities.ItemSpecModifiers.All.Length);
+            // Without custom metadata, should return the built in metadata
+            taskItem.MetadataNames.Cast<string>().ShouldBeSetEquivalentTo(FileUtilities.ItemSpecModifiers.All);
             taskItem.MetadataCount.ShouldBe(FileUtilities.ItemSpecModifiers.All.Length);
 
             // Now add one
             taskItem.SetMetadata("m", "m1");
 
-            taskItem.MetadataNames.Count.ShouldBe(FileUtilities.ItemSpecModifiers.All.Length + 1);
+            taskItem.MetadataNames.Cast<string>().ShouldBeSetEquivalentTo(FileUtilities.ItemSpecModifiers.All.Concat(new[] { "m" }));
             taskItem.MetadataCount.ShouldBe(FileUtilities.ItemSpecModifiers.All.Length + 1);
         }
 
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index bf5eeb2a250..a66d88e48dc 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -9,6 +9,8 @@
 using Shouldly;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public class TaskLoggingHelperTests
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index 4578651a935..7a1f034a25c 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -24,6 +24,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class ToolLocationHelper_Tests
@@ -759,13 +761,13 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(dotNetVersion, (VisualStudioVersion)99));
             }
 
             foreach (var vsVersion in EnumVisualStudioVersions())
@@ -777,7 +779,7 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
                 ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.fullDotNetFrameworkRegistryKey);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(
@@ -808,39 +810,39 @@ public void TestGetDotNetFrameworkSdkRootRegistryKey()
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK81A);
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.5.2
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version120).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK81A);
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version452, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK46);
 
             // v4.6.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version461, VisualStudioVersion.Version140).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK461);
 
             // v4.6.2
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version150).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK462);
 
             // v4.7
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkRootRegistryKey(TargetDotNetFrameworkVersion.Version47, VisualStudioVersion.Version150).ShouldBe(fullDotNetFrameworkSdkRegistryPathForV4ToolsOnManagedToolsSDK47);
 
             // v4.7.1
@@ -872,13 +874,13 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(dotNetVersion, (VisualStudioVersion)99));
             }
 
             string InstallationFolder = "InstallationFolder";
@@ -892,7 +894,7 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
                 ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.dotNetFrameworkSdkInstallKeyValueV20);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(InstallationFolder);
@@ -905,15 +907,15 @@ public void TestGetDotNetFrameworkSdkInstallKeyValue()
             }
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(InstallationFolder);
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(InstallationFolder);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetDotNetFrameworkSdkInstallKeyValue(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(InstallationFolder);
         }
 
@@ -928,13 +930,13 @@ public void GetPathToDotNetFrameworkSdk()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             // Test out of range visual studio version.
             foreach (var dotNetVersion in EnumDotNetFrameworkVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(dotNetVersion, (VisualStudioVersion)99) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(dotNetVersion, (VisualStudioVersion)99));
             }
 
             string pathToSdk35InstallRoot = Path.Combine(FrameworkLocationHelper.programFiles32, @"Microsoft SDKs\Windows\v7.0A\");
@@ -968,7 +970,7 @@ public void GetPathToDotNetFrameworkSdk()
                 ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version20, vsVersion).ShouldBe(FrameworkLocationHelper.PathToDotNetFrameworkSdkV20);
 
                 // v3.0
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version30, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version30, vsVersion));
 
                 // v3.5
                 ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version35, vsVersion).ShouldBe(pathToSdk35InstallRoot);
@@ -987,15 +989,15 @@ public void GetPathToDotNetFrameworkSdk()
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
 
             // v4.5.1
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version110));
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version120).ShouldBe(pathToSdkV4InstallRootOnVS12);
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version451, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
 
             // v4.6
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110) );
-            Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120) );
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version100));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version110));
+            Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version120));
             ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version46, VisualStudioVersion.Version140).ShouldBe(pathToSdkV4InstallRootOnVS14);
         }
 
@@ -1008,7 +1010,7 @@ public void GetPathToWindowsSdk()
             // Test out of range .net version.
             foreach (var vsVersion in EnumVisualStudioVersions())
             {
-                Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToWindowsSdk((TargetDotNetFrameworkVersion)99, vsVersion) );
+                Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToWindowsSdk((TargetDotNetFrameworkVersion)99, vsVersion));
             }
 
             string pathToWindowsSdkV80 = GetRegistryValueHelper(RegistryHive.LocalMachine, RegistryView.Registry32, @"SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.0", "InstallationFolder");
@@ -1019,7 +1021,7 @@ public void GetPathToWindowsSdk()
                 // v1.1, v2.0, v3.0, v3.5, v4.0
                 foreach (var dotNetVersion in EnumDotNetFrameworkVersions().Where(v => v <= TargetDotNetFrameworkVersion.Version40))
                 {
-                    Should.Throw<ArgumentException>( () => ToolLocationHelper.GetPathToWindowsSdk(dotNetVersion, vsVersion) );
+                    Should.Throw<ArgumentException>(() => ToolLocationHelper.GetPathToWindowsSdk(dotNetVersion, vsVersion));
                 }
 
                 // v4.5
@@ -1037,7 +1039,7 @@ public void GetPathToWindowsSdk()
 #pragma warning restore 618
 
 #if FEATURE_CODETASKFACTORY
-        private static readonly string s_verifyToolsetAndToolLocationHelperProjectCommonContent = @"
+        private const string VerifyToolsetAndToolLocationHelperProjectCommonContent = @"
                                     string currentInstallFolderLocation = null;
 
                                     using (RegistryKey baseKey = Registry.LocalMachine.OpenSubKey(""SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows""))
@@ -1096,7 +1098,7 @@ public void VerifyToolsetAndToolLocationHelperAgree()
             string projectContents = ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyFile='$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1119,7 +1121,7 @@ public void VerifyToolsetAndToolLocationHelperAgree()
                                     }
 
                                     string pathTo81WinSDK = ToolLocationHelper.GetPathToWindowsSdk(TargetDotNetFrameworkVersion.VersionLatest, VisualStudioVersion.VersionLatest);" +
-                                    s_verifyToolsetAndToolLocationHelperProjectCommonContent +
+                                    VerifyToolsetAndToolLocationHelperProjectCommonContent +
                                   @"if (!String.Equals(WindowsSDK80Path, pathTo81WinSDK, StringComparison.OrdinalIgnoreCase))
                                     {
                                         Log.LogError(""WindowsSDK80Path is incorrect! Registry: {0}  ToolLocationHelper: {1}"", WindowsSDK80Path, pathTo81WinSDK);
@@ -1149,9 +1151,9 @@ public void VerifyToolsetAndToolLocationHelperAgree()
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpty()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1165,7 +1167,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
 
                                     pathTo35Sdk = pathTo35Sdk == null ? pathTo35Sdk : Path.Combine(pathTo35Sdk, ""bin\\"");
                                     pathTo40Sdk = pathTo40Sdk == null ? pathTo40Sdk : Path.Combine(pathTo40Sdk, ""bin\\NetFX 4.0 Tools\\"");" +
-                                    s_verifyToolsetAndToolLocationHelperProjectCommonContent +
+                                    VerifyToolsetAndToolLocationHelperProjectCommonContent +
                                   @"return !Log.HasLoggedErrors;
                                 ]]>
                               </Code>
@@ -1191,9 +1193,9 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIsEmpt
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1207,7 +1209,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
 
                                     pathTo35Sdk = pathTo35Sdk == null ? pathTo35Sdk : Path.Combine(pathTo35Sdk, ""bin\\"");
                                     pathTo40Sdk = pathTo40Sdk == null ? pathTo40Sdk : Path.Combine(pathTo40Sdk, ""bin\\NetFX 4.0 Tools\\"");" +
-                                    s_verifyToolsetAndToolLocationHelperProjectCommonContent +
+                                    VerifyToolsetAndToolLocationHelperProjectCommonContent +
                                   @"return !Log.HasLoggedErrors;
                                 ]]>
                               </Code>
@@ -1235,9 +1237,9 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs10()
         public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
         {
             string projectContents = @"
-                    <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' ToolsVersion='4.0'>
+                    <Project ToolsVersion='4.0'>
                         <UsingTask TaskName='VerifySdkPaths' TaskFactory='CodeTaskFactory' AssemblyName='Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' >
-                         <ParameterGroup>     
+                         <ParameterGroup>
                              <Sdk35ToolsPath />
                              <Sdk40ToolsPath />
                              <WindowsSDK80Path />
@@ -1252,7 +1254,7 @@ public void VerifyToolsetAndToolLocationHelperAgreeWhenVisualStudioVersionIs11()
 
                                     pathTo35Sdk = pathTo35Sdk == null ? pathTo35Sdk : Path.Combine(pathTo35Sdk, ""bin\\"");
                                     pathTo40Sdk = pathTo40Sdk == null ? pathTo40Sdk : Path.Combine(pathTo40Sdk, ""bin\\NetFX 4.0 Tools\\"");" +
-                                    s_verifyToolsetAndToolLocationHelperProjectCommonContent +
+                                    VerifyToolsetAndToolLocationHelperProjectCommonContent +
                                    @"if (String.IsNullOrEmpty(WindowsSDK80Path))
                                     {
                                         Log.LogWarning(""WindowsSDK80Path is empty, which is technically not correct, but we're letting it slide for now because the OTG build won't have the updated registry for a while.  Make sure we don't see this warning on PURITs runs, though!"");
@@ -2677,7 +2679,7 @@ public void GetPathToReferenceAssembliesWithCustomTargetFrameworkInFallbackPathA
                                                     (string frameworkName, string frameworkVersion, string frameworkProfile, string customFrameworkDir, string fallbackSearchPaths)
                                                         => ToolLocationHelper.GetPathToReferenceAssemblies(
                                                                             frameworkName, "v" + frameworkVersion, frameworkProfile,
-                                                                            targetFrameworkRootPath:null, targetFrameworkFallbackSearchPaths:fallbackSearchPaths));
+                                                                            targetFrameworkRootPath: null, targetFrameworkFallbackSearchPaths: fallbackSearchPaths));
             }
         }
 
@@ -2730,7 +2732,7 @@ public void GetPathToReferenceAssembliesWithCustomTargetFrameworkRootInFallbackP
         }
 
         private void CheckGetPathToReferenceAssemblies(TestEnvironment env, string customFrameworkDir, string fallbackSearchPaths, Func<string, string, string, string, string, IList<string>> getPathToReferenceAssemblies)
-         {
+        {
             string frameworkName = "Foo Framework";
             string frameworkVersion = "0.1";
             string frameworkVersionWithV = "v" + frameworkVersion;
@@ -2749,8 +2751,8 @@ private void CheckGetPathToReferenceAssemblies(TestEnvironment env, string custo
             {
                 stdLibPaths.Count.ShouldBe(1);
                 stdLibPaths[0].ShouldBe(Path.Combine(customFrameworkDir, frameworkName, frameworkVersionWithV) + Path.DirectorySeparatorChar, stdLibPaths[0]);
-             }
-         }
+            }
+        }
 
         [Fact]
         public void GetPathToReferenceAssembliesWithNullTargetFrameworkRootPath()
@@ -2819,7 +2821,7 @@ private static string[] GetDirectories(string path, string pattern)
             {
                 return new[] { @"{runtime-base}\v1.2.30617", @"{runtime-base}\v1.2.x86dbg", @"{runtime-base}\v1.2.x86fre" };
             }
-            return new string[0];
+            return Array.Empty<string>();
         }
 
         /// <summary>
@@ -2933,21 +2935,21 @@ private string GetDotNetFrameworkReferenceAssemblies(TargetDotNetFrameworkVersio
                 switch (version)
                 {
                     case TargetDotNetFrameworkVersion.Version40:
-                    {
-                        return DotNetReferenceAssemblies40Installed ? DotNet40ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies40Installed ? DotNet40ReferenceAssemblyPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version35:
-                    {
-                        return DotNetReferenceAssemblies35Installed ? DotNet35ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies35Installed ? DotNet35ReferenceAssemblyPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version30:
-                    {
-                        return DotNetReferenceAssemblies30Installed ? DotNet30ReferenceAssemblyPath : null;
-                    }
+                        {
+                            return DotNetReferenceAssemblies30Installed ? DotNet30ReferenceAssemblyPath : null;
+                        }
                     default:
-                    {
-                        return null;
-                    }
+                        {
+                            return null;
+                        }
                 }
             }
 
@@ -2960,25 +2962,25 @@ private string GetDotNetFramework(TargetDotNetFrameworkVersion version)
                 switch (version)
                 {
                     case TargetDotNetFrameworkVersion.Version20:
-                    {
-                        return DotNet20Installed ? DotNet20FrameworkPath : null;
-                    }
+                        {
+                            return DotNet20Installed ? DotNet20FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version30:
-                    {
-                        return DotNet30Installed ? DotNet30FrameworkPath : null;
-                    }
+                        {
+                            return DotNet30Installed ? DotNet30FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version35:
-                    {
-                        return DotNet35Installed ? DotNet35FrameworkPath : null;
-                    }
+                        {
+                            return DotNet35Installed ? DotNet35FrameworkPath : null;
+                        }
                     case TargetDotNetFrameworkVersion.Version40:
-                    {
-                        return DotNet40Installed ? DotNet40FrameworkPath : null;
-                    }
+                        {
+                            return DotNet40Installed ? DotNet40FrameworkPath : null;
+                        }
                     default:
-                    {
-                        return null;
-                    }
+                        {
+                            return null;
+                        }
                 }
             }
         }
@@ -3174,7 +3176,7 @@ public void ResolveFromDirectoryInvalidChar()
 
             // Try a path with invalid chars which does not exist
             string directoryWithInvalidChars = "c:\\<>?";
-            var paths = new List<string> {directoryWithInvalidChars};
+            var paths = new List<string> { directoryWithInvalidChars };
             Should.Throw<ArgumentException>(() => { ToolLocationHelper.GatherSDKListFromDirectory(paths, targetPlatform); });
         }
 
@@ -3707,7 +3709,7 @@ public void VerifyGetInstalledSDKLocations2()
                     <TargetPlatformVersion>8.0</TargetPlatformVersion>" +
                    @"<SDKDirectoryRoot>" + testDirectoryRoot + "</SDKDirectoryRoot>" +
                     @"<SDKLocation1>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation1>
-                      <SDKLocation2>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=V2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation2>                 
+                      <SDKLocation2>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformExtensionSDKLocation('SDkWithManifest, Version=V2.0','MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation2>
                       <SDKLocation3>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('MyPlatform','8.0', '$(SDKDirectoryRoot)',''))</SDKLocation3>
                       <SDKName>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKDisplayName('MyPlatform','8.0', '$(SDKDirectoryRoot)', ''))</SDKName>
                  </PropertyGroup>
@@ -4084,7 +4086,7 @@ public void GetPlatformsForSDKNullSDKVersion()
         [Fact]
         public void GetPlatformsForSDKWithNoInstalledTargetPlatforms()
         {
-            ToolLocationHelper.GetPlatformsForSDK("AnySDK", new Version("1.0"), new string[0], "").Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("AnySDK", new Version("1.0"), Array.Empty<string>(), "").Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4118,7 +4120,7 @@ public void GetPlatformsForSDKWithInstalledTargetPlatformsNoMatch()
         [Fact]
         public void GetPlatformsForSDKWithMatchingPlatformNotMatchingVersion()
         {
-            ToolLocationHelper.GetPlatformsForSDK("MyPlatform", new Version("0.0.0.0"), new[] {_fakeStructureRoot}, null).Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("MyPlatform", new Version("0.0.0.0"), new[] { _fakeStructureRoot }, null).Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4128,7 +4130,7 @@ public void GetPlatformsForSDKWithMatchingPlatformNotMatchingVersion()
         [Fact]
         public void GetPlatformsForSDKForLegacyPlatformSDK()
         {
-            ToolLocationHelper.GetPlatformsForSDK("Windows", new Version("8.0"), new[] {_fakeStructureRoot}, null).Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("Windows", new Version("8.0"), new[] { _fakeStructureRoot }, null).Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4190,7 +4192,7 @@ public void VerifyFindRootFolderWhereAllFilesExist()
         {
             // create directories and files in them
 
-            //  root1
+            // root1
             //     subdir
             //         file1.txt
             //     file1.txt
@@ -4201,13 +4203,13 @@ public void VerifyFindRootFolderWhereAllFilesExist()
 
             string testDirectoryRoot = Path.Combine(Path.GetTempPath(), "VerifyFindRootFolderWhereAllFilesExist");
             string[] rootDirectories = new string[] { Path.Combine(testDirectoryRoot, "Root1"), Path.Combine(testDirectoryRoot, "Root2") };
-            
-            for(int i = 0; i < rootDirectories.Count(); i++)
+
+            for (int i = 0; i < rootDirectories.Length; i++)
             {
                 // create directory
                 string subdir = Path.Combine(rootDirectories[i], "Subdir");
                 Directory.CreateDirectory(subdir);
-                var fileInSubDir = string.Format("file{0}.txt", i+1);
+                var fileInSubDir = string.Format("file{0}.txt", i + 1);
                 File.Create(Path.Combine(rootDirectories[i], "file1.txt")).Close();
                 File.Create(Path.Combine(subdir, fileInSubDir)).Close();
             }
@@ -4605,11 +4607,11 @@ private static string MakeFakeSDKStructure()
                 Directory.CreateDirectory(
                     Path.Combine(tempPath, "MyPlatform", "9.0", "Platforms", "Sparkle", "3.3.3.3")); // no platform.xml
 
-                //Bad because of v in the sdk version
+                // Bad because of v in the sdk version
                 Directory.CreateDirectory(
                     Path.Combine(tempPath, "Windows", "v1.0", "ExtensionSDKs", "AnotherAssembly", "v1.1"));
 
-                //Bad because no extensionsdks directory under the platform version
+                // Bad because no extensionsdks directory under the platform version
                 Directory.CreateDirectory(Path.Combine(tempPath, "Windows", "v3.0") + Path.DirectorySeparatorChar);
 
                 // Bad because the directory under the identifier is not a version
@@ -4753,7 +4755,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                 }
             }
 
-            return new string[] { };
+            return Array.Empty<string>();
         }
 
         /// <summary>
@@ -4844,17 +4846,17 @@ private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
             switch (hive)
             {
                 case RegistryHive.CurrentUser:
-                {
-                    return Registry.CurrentUser;
-                }
+                    {
+                        return Registry.CurrentUser;
+                    }
                 case RegistryHive.LocalMachine:
-                {
-                    return Registry.LocalMachine;
-                }
+                    {
+                        return Registry.LocalMachine;
+                    }
                 default:
-                {
-                    return null;
-                }
+                    {
+                        return null;
+                    }
             }
         }
 #endif
diff --git a/src/Utilities.UnitTests/ToolTask_Tests.cs b/src/Utilities.UnitTests/ToolTask_Tests.cs
index 3b5d3eb6085..b5df279597a 100644
--- a/src/Utilities.UnitTests/ToolTask_Tests.cs
+++ b/src/Utilities.UnitTests/ToolTask_Tests.cs
@@ -12,6 +12,8 @@
 using Xunit;
 using Xunit.Abstractions;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests
 {
     public sealed class ToolTask_Tests
@@ -189,7 +191,7 @@ public void HandleExecutionErrorsWhenToolDoesntLogError()
 
                 // We just tried to run "cmd.exe /C garbagegarbagegarbagegarbage.exe".  This should fail,
                 // but since "cmd.exe" doesn't log its errors in canonical format, no errors got
-                // logged by the tool itself.  Therefore, ToolTask's default implementation of 
+                // logged by the tool itself.  Therefore, ToolTask's default implementation of
                 // HandleTaskExecutionErrors should have logged error MSB6006.
                 engine.AssertLogContains("MSB6006");
             }
@@ -225,7 +227,7 @@ public void HandleExecutionErrorsWhenToolLogsError()
         }
 
         /// <summary>
-        /// ToolTask should never run String.Format on strings that are 
+        /// ToolTask should never run String.Format on strings that are
         /// not meant to be formatted.
         /// </summary>
         [Fact]
@@ -522,27 +524,16 @@ public void EnvironmentVariablesToToolTask()
 
             ProcessStartInfo startInfo = task.StartInfo;
 
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
             startInfo.Environment["a"].ShouldBe("b");
             startInfo.Environment["c"].ShouldBe("d");
             startInfo.Environment[userVarName].ShouldBe("x");
             startInfo.Environment["path"].ShouldBe(String.Empty);
-#else
-            startInfo.EnvironmentVariables["a"].ShouldBe("b");
-            startInfo.EnvironmentVariables["c"].ShouldBe("d");
-            startInfo.EnvironmentVariables[userVarName].ShouldBe("x");
-            startInfo.EnvironmentVariables["path"].ShouldBe(string.Empty);
-#endif
 
             if (NativeMethodsShared.IsWindows)
             {
                 Assert.Equal(
                         Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles),
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
                         startInfo.Environment["programfiles"],
-#else
-                        startInfo.EnvironmentVariables["programfiles"],
-#endif
                         true);
             }
         }
@@ -560,11 +551,7 @@ public void EnvironmentVariablesToToolTaskEqualsSign()
             bool result = task.Execute();
 
             result.ShouldBe(true);
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
             task.StartInfo.Environment["a"].ShouldBe("b=c");
-#else
-            task.StartInfo.EnvironmentVariables["a"].ShouldBe("b=c");
-#endif
         }
 
         /// <summary>
@@ -626,12 +613,7 @@ public void EnvironmentVariablesToToolTaskNotSet()
 
             result.ShouldBe(true);
             task.ExecuteCalled.ShouldBe(true);
-            Assert.True(
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
-                task.StartInfo.Environment["PATH"].Length > 0);
-#else
-                task.StartInfo.EnvironmentVariables["PATH"].Length > 0);
-#endif
+            Assert.True(task.StartInfo.Environment["PATH"].Length > 0);
         }
 
         /// <summary>
@@ -705,22 +687,14 @@ public void FindOnPathSucceeds()
         public void GetProcessStartInfoCanOverrideEnvironmentVariables()
         {
             MyTool task = new MyTool();
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
             task.DoProcessStartInfoMutation = (p) => p.Environment.Remove("a");
-#else
-            task.DoProcessStartInfoMutation = (p) => p.EnvironmentVariables.Remove("a");
-#endif
-            
+
             task.BuildEngine = new MockEngine();
             task.EnvironmentVariables = new[] { "a=b" };
             bool result = task.Execute();
 
             result.ShouldBe(true);
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
             task.StartInfo.Environment.ContainsKey("a").ShouldBe(false);
-#else
-            task.StartInfo.EnvironmentVariables.ContainsKey("a").ShouldBe(false);
-#endif
         }
 
         [Fact]
diff --git a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
index bcdf316d500..c5dd50492ca 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs
@@ -20,6 +20,8 @@
 
 // PLEASE NOTE: This is a UNICODE file as it contains UNICODE characters!
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.FileTracking
 {
     public sealed class FileTrackerTests : IDisposable
diff --git a/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs b/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
index 801d669e44a..8da0dfbfc00 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Xunit;
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.TrackedDependencies
 {
     /***************************************************************************
diff --git a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
index 5c80c03cc29..67cb313a50e 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/TrackedDependenciesTests.cs
@@ -16,6 +16,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.UnitTests.TrackedDependencies
 {
     public sealed class TrackedDependenciesTests
@@ -165,7 +167,7 @@ public void FormatNormalizedRootingMarkerTests()
                     new ITaskItem[] {new TaskItem("Debug\\link.4567.write.1.tlog\\")},
                     Path.Combine(Directory.GetCurrentDirectory(), "Debug\\link.4567.write.1.tlog\\").ToUpperInvariant()
                 },
-                {new ITaskItem[0] { }, ""},
+                {Array.Empty<ITaskItem>(), ""},
                 {
                     new ITaskItem[3]
                     {
@@ -531,7 +533,7 @@ public void ReadTLogWithDuplicateInRoot()
         {
             Console.WriteLine("Test: ReadTLogWithDuplicateInRoot");
 
-            //Prepare files
+            // Prepare files
             DependencyTestHelper.WriteAll("TestFiles\\one.h", "");
             DependencyTestHelper.WriteAll("TestFiles\\foo.cpp", "");
             DependencyTestHelper.WriteAll("TestFiles\\one.obj", "");
diff --git a/src/Utilities/ApiContract.cs b/src/Utilities/ApiContract.cs
index 05d91cc9a06..4023e0adb6b 100644
--- a/src/Utilities/ApiContract.cs
+++ b/src/Utilities/ApiContract.cs
@@ -5,6 +5,8 @@
 using System.Xml;
 using System.Collections.Generic;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/AppDomainIsolatedTask.cs b/src/Utilities/AppDomainIsolatedTask.cs
index 00fba18be0e..db622ab1707 100644
--- a/src/Utilities/AppDomainIsolatedTask.cs
+++ b/src/Utilities/AppDomainIsolatedTask.cs
@@ -1,13 +1,14 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#if FEATURE_APPDOMAIN
 using System;
 using System.Resources;
 using System.Security;
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -15,6 +16,9 @@ namespace Microsoft.Build.Utilities
     /// instantiated in its own app domain.
     /// </summary>
     [LoadInSeparateAppDomain]
+#if !FEATURE_APPDOMAIN
+    [Obsolete("AppDomains are no longer supported in .NET Core or .NET 5.0 or higher.")]
+#endif
     public abstract class AppDomainIsolatedTask : MarshalByRefObject, ITask
     {
         #region Constructors
@@ -112,9 +116,15 @@ protected string HelpKeywordPrefix
         /// lease (5 minutes I think) and task instances can expire if they take long time processing.
         /// </summary>
         [SecurityCritical]
+#pragma warning disable CS0809 // InitializeLifetimeService is not marked as obsolete in netstandard2.0
+#if !FEATURE_APPDOMAIN
+        // This Obsolete is redundant since the whole class is obsoleted, but required to guard the reference
+        // to the obsolete MarshalByRefObject.InitializeLifetimeService.
+        [Obsolete("AppDomains are no longer supported in .NET Core or .NET 5.0 or higher.")]
+#endif
         public override object InitializeLifetimeService() => null; // null means infinite lease time
+#pragma warning restore
 
         #endregion
     }
 }
-#endif
diff --git a/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs b/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
index f3c19ab89aa..ddf605b188b 100644
--- a/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
+++ b/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
@@ -3,17 +3,20 @@
 //-----------------------------------------------------------------------
 // Contains information about entries in the AssemblyFoldersEx registry keys.
 //-----------------------------------------------------------------------
-#if FEATURE_WIN32_REGISTRY
 
 using System;
+using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
     /// Contains information about entries in the AssemblyFoldersEx registry keys.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public class AssemblyFoldersExInfo
     {
         /// <summary>
@@ -58,4 +61,3 @@ public AssemblyFoldersExInfo(RegistryHive hive, RegistryView view, string regist
         public Version TargetFrameworkVersion { get; }
     }
 }
-#endif
diff --git a/src/Utilities/AssemblyFolders/AssemblyFoldersFromConfigInfo.cs b/src/Utilities/AssemblyFolders/AssemblyFoldersFromConfigInfo.cs
index 0f8c18dae1d..b75ed219352 100644
--- a/src/Utilities/AssemblyFolders/AssemblyFoldersFromConfigInfo.cs
+++ b/src/Utilities/AssemblyFolders/AssemblyFoldersFromConfigInfo.cs
@@ -6,6 +6,8 @@
 using System.Text.RegularExpressions;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/AssemblyResources.cs b/src/Utilities/AssemblyResources.cs
index 12f9500c00b..2ef95f94b72 100644
--- a/src/Utilities/AssemblyResources.cs
+++ b/src/Utilities/AssemblyResources.cs
@@ -5,6 +5,8 @@
 using System.Reflection;
 using System.Globalization;
 
+#nullable disable
+
 namespace Microsoft.Build.Shared
 {
     /// <summary>
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index 8e7953b699f..6baa7da046b 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -10,6 +10,8 @@
 using System.Text.RegularExpressions;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -110,19 +112,19 @@ public CommandLineBuilder(bool quoteHyphensOnCommandLine, bool useNewLineSeparat
         public override string ToString() => CommandLine.ToString();
 
         // Use if escaping of hyphens is supposed to take place
-        private static readonly string s_allowedUnquotedRegexNoHyphen =
+        private const string s_allowedUnquotedRegexNoHyphen =
                          "^"                             // Beginning of line
                        + @"[a-z\\/:0-9\._+=]*"
                        + "$";
 
-        private static readonly string s_definitelyNeedQuotesRegexWithHyphen = @"[|><\s,;\-""]+";
+        private const string s_definitelyNeedQuotesRegexWithHyphen = @"[|><\s,;\-""]+";
 
         // Use if escaping of hyphens is not to take place
-        private static readonly string s_allowedUnquotedRegexWithHyphen =
+        private const string s_allowedUnquotedRegexWithHyphen =
                         "^"                             // Beginning of line
                        + @"[a-z\\/:0-9\._\-+=]*"       //  Allow hyphen to be unquoted
                        + "$";
-        private static readonly string s_definitelyNeedQuotesRegexNoHyphen = @"[|><\s,;""]+";
+        private const string s_definitelyNeedQuotesRegexNoHyphen = @"[|><\s,;""]+";
 
         /// <summary>
         ///  Should hyphens be quoted or not
@@ -154,13 +156,13 @@ public CommandLineBuilder(bool quoteHyphensOnCommandLine, bool useNewLineSeparat
         /// Use a private property so that we can lazy initialize the regex
         /// </summary>
         private Regex DefinitelyNeedQuotes => _definitelyNeedQuotes
-            ?? (_definitelyNeedQuotes = new Regex(_quoteHyphens ? s_definitelyNeedQuotesRegexWithHyphen : s_definitelyNeedQuotesRegexNoHyphen, RegexOptions.None));
+            ?? (_definitelyNeedQuotes = new Regex(_quoteHyphens ? s_definitelyNeedQuotesRegexWithHyphen : s_definitelyNeedQuotesRegexNoHyphen, RegexOptions.CultureInvariant));
 
         /// <summary>
         /// Use a private getter property to we can lazy initialize the regex
         /// </summary>
         private Regex AllowedUnquoted => _allowedUnquoted
-            ?? (_allowedUnquoted = new Regex(_quoteHyphens ? s_allowedUnquotedRegexNoHyphen : s_allowedUnquotedRegexWithHyphen, RegexOptions.IgnoreCase));
+            ?? (_allowedUnquoted = new Regex(_quoteHyphens ? s_allowedUnquotedRegexNoHyphen : s_allowedUnquotedRegexWithHyphen, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant));
 
         /// <summary>
         /// Checks the given switch parameter to see if it must/can be quoted.
@@ -218,9 +220,9 @@ protected void AppendSpaceIfNotEmpty()
                 {
                     CommandLine.Append(Environment.NewLine);
                 }
-                else if(CommandLine[CommandLine.Length - 1] != ' ')
+                else if (CommandLine[CommandLine.Length - 1] != ' ')
                 {
-                    CommandLine.Append(" ");
+                    CommandLine.Append(' ');
                 }
             }
         }
diff --git a/src/Utilities/ExtensionSDK.cs b/src/Utilities/ExtensionSDK.cs
index 8034658dba2..3c04e05dbfd 100644
--- a/src/Utilities/ExtensionSDK.cs
+++ b/src/Utilities/ExtensionSDK.cs
@@ -5,6 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/Logger.cs b/src/Utilities/Logger.cs
index bc61691c9f6..a2b8ad05f35 100644
--- a/src/Utilities/Logger.cs
+++ b/src/Utilities/Logger.cs
@@ -4,6 +4,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index 4406635c278..b5e520f25a3 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -26,7 +26,7 @@
     <PackageReference Include="System.Configuration.ConfigurationManager" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETStandard'">
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETStandard' and '$(DotNetBuildFromSource)' != 'true'">
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" />
   </ItemGroup>
 
@@ -35,11 +35,11 @@
     <PackageReference Include="System.Text.Encoding.CodePages" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
+    <!-- Need Win32 API on .NET Standard to ping registry for some methods in ToolLocationHelper -->
     <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
-
+  
   <ItemGroup Label="Shared Code">
     <Compile Include="..\Shared\AssemblyFolders\AssemblyFoldersEx.cs">
       <Link>Shared\AssemblyFolders\AssemblyFoldersEx.cs</Link>
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index fdb9263ac2e..f9532864e15 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -44,7 +46,7 @@ namespace Microsoft.Build.Utilities
     ///     The event source will be cleaned up.  This may be interesting because the unregister will come from a thread other than what is doing the logging.
     ///     This may create a Synchronization issue, if unregister is called while events are being logged.
     /// </summary>
-    //     
+    // 
     // UNDONE: If we can use ErrorUtilities, replace all InvalidOperation and Argument exceptions with the appropriate calls.
     // 
     public class MuxLogger : INodeLogger
@@ -644,6 +646,7 @@ private void RaiseMessageEvent(object sender, BuildMessageEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -690,6 +693,7 @@ private void RaiseErrorEvent(object sender, BuildErrorEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -734,6 +738,7 @@ private void RaiseWarningEvent(object sender, BuildWarningEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -773,6 +778,7 @@ private void RaiseBuildStartedEvent(object sender, BuildStartedEventArgs buildEv
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -817,6 +823,7 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -855,7 +862,7 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                         _firstProjectStartedEventContext = buildEvent.BuildEventContext;
 
                         // We've never seen a project started event, so raise the build started event and save this project started event.
-                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, _buildStartedEvent.BuildEnvironment);
+                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, Traits.Instance.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : null);
                         RaiseBuildStartedEvent(sender, startedEvent);
                     }
 
@@ -871,6 +878,7 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -912,6 +920,7 @@ private void RaiseProjectFinishedEvent(object sender, ProjectFinishedEventArgs b
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -953,6 +962,7 @@ private void RaiseTargetStartedEvent(object sender, TargetStartedEventArgs build
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -994,6 +1004,7 @@ private void RaiseTargetFinishedEvent(object sender, TargetFinishedEventArgs bui
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1035,6 +1046,7 @@ private void RaiseTaskStartedEvent(object sender, TaskStartedEventArgs buildEven
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1076,6 +1088,7 @@ private void RaiseTaskFinishedEvent(object sender, TaskFinishedEventArgs buildEv
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1117,6 +1130,7 @@ private void RaiseCustomEvent(object sender, CustomBuildEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1163,6 +1177,7 @@ private void RaiseStatusEvent(object sender, BuildStatusEventArgs buildEvent, bo
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1224,6 +1239,7 @@ private void RaiseAnyEvent(object sender, BuildEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
@@ -1269,6 +1285,7 @@ private void RaiseTelemetryEvent(object sender, TelemetryEventArgs buildEvent)
                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
                             // if a fellow logger is throwing in an event handler.
                             UnregisterAllEventHandlers();
+
                             throw;
                         }
                         catch (Exception)
diff --git a/src/Utilities/PlatformManifest.cs b/src/Utilities/PlatformManifest.cs
index 0be3579553d..670634b4db3 100644
--- a/src/Utilities/PlatformManifest.cs
+++ b/src/Utilities/PlatformManifest.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -133,7 +135,7 @@ private void LoadManifestFile()
                             {
                                 ApiContract.ReadContractsElement(childElement, ApiContracts);
                             }
-                            else if(ApiContract.IsVersionedContentElement(childElement.Name))
+                            else if (ApiContract.IsVersionedContentElement(childElement.Name))
                             {
                                 bool.TryParse(childElement.InnerText, out bool versionedContent);
                                 VersionedContent = versionedContent;
@@ -150,13 +152,8 @@ private void LoadManifestFile()
                     ReadErrorMessage = ResourceUtilities.FormatResourceStringStripCodeAndKeyword("PlatformManifest.MissingPlatformXml", platformManifestPath);
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 ReadErrorMessage = e.Message;
             }
         }
diff --git a/src/Utilities/ProcessorArchitecture.cs b/src/Utilities/ProcessorArchitecture.cs
index 0b12a2ceb81..6c846b7f094 100644
--- a/src/Utilities/ProcessorArchitecture.cs
+++ b/src/Utilities/ProcessorArchitecture.cs
@@ -4,6 +4,8 @@
 using System.Diagnostics.CodeAnalysis;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt b/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
index e85d5954bfd..0c8ceeed580 100644
--- a/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
@@ -136,9 +136,11 @@ Microsoft.Build.Utilities.DotNetFrameworkArchitecture.Current = 0 -> Microsoft.B
 Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Managed32Bit = 3 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Managed64Bit = 4 -> Microsoft.Build.Utilities.ExecutableType
+Microsoft.Build.Utilities.ExecutableType.ManagedARM64 = 7 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.ManagedIL = 2 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Native32Bit = 0 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Native64Bit = 1 -> Microsoft.Build.Utilities.ExecutableType
+Microsoft.Build.Utilities.ExecutableType.NativeARM64 = 6 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.SameAsCurrentProcess = 5 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.FileTracker
 Microsoft.Build.Utilities.FlatTrackingData
diff --git a/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index e69de29bb2d..b08b45a21d6 100644
--- a/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -0,0 +1,23 @@
+abstract Microsoft.Build.Utilities.AppDomainIsolatedTask.Execute() -> bool
+Microsoft.Build.Utilities.AppDomainIsolatedTask
+Microsoft.Build.Utilities.AppDomainIsolatedTask.AppDomainIsolatedTask() -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.AppDomainIsolatedTask(System.Resources.ResourceManager taskResources) -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.AppDomainIsolatedTask(System.Resources.ResourceManager taskResources, string helpKeywordPrefix) -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.BuildEngine.get -> Microsoft.Build.Framework.IBuildEngine
+Microsoft.Build.Utilities.AppDomainIsolatedTask.BuildEngine.set -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.HelpKeywordPrefix.get -> string
+Microsoft.Build.Utilities.AppDomainIsolatedTask.HelpKeywordPrefix.set -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.HostObject.get -> Microsoft.Build.Framework.ITaskHost
+Microsoft.Build.Utilities.AppDomainIsolatedTask.HostObject.set -> void
+Microsoft.Build.Utilities.AppDomainIsolatedTask.Log.get -> Microsoft.Build.Utilities.TaskLoggingHelper
+Microsoft.Build.Utilities.AppDomainIsolatedTask.TaskResources.get -> System.Resources.ResourceManager
+Microsoft.Build.Utilities.AppDomainIsolatedTask.TaskResources.set -> void
+Microsoft.Build.Utilities.AssemblyFoldersExInfo
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.AssemblyFoldersExInfo(Microsoft.Win32.RegistryHive hive, Microsoft.Win32.RegistryView view, string registryKey, string directoryPath, System.Version targetFrameworkVersion) -> void
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.DirectoryPath.get -> string
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.Hive.get -> Microsoft.Win32.RegistryHive
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.Key.get -> string
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.TargetFrameworkVersion.get -> System.Version
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.View.get -> Microsoft.Win32.RegistryView
+override Microsoft.Build.Utilities.AppDomainIsolatedTask.InitializeLifetimeService() -> object
+static Microsoft.Build.Utilities.ToolLocationHelper.GetAssemblyFoldersExInfo(string registryRoot, string targetFrameworkVersion, string registryKeySuffix, string osVersion, string platform, System.Reflection.ProcessorArchitecture targetProcessorArchitecture) -> System.Collections.Generic.IList<Microsoft.Build.Utilities.AssemblyFoldersExInfo>
\ No newline at end of file
diff --git a/src/Utilities/README.md b/src/Utilities/README.md
new file mode 100644
index 00000000000..a85d56e11cc
--- /dev/null
+++ b/src/Utilities/README.md
@@ -0,0 +1,12 @@
+# Microsoft.Build.Utilities.Core
+
+This package contains `Microsoft.Build.Utilities.Core.dll`, which defines helper functionality for MSBuild extenders, including
+
+* [`Task`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.task), a base class for custom tasks,
+* [`ToolTask`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.tooltask), a base class for tasks that run a command-line tool, and
+* [`Logger`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.logger), a base class for custom logging functionality.
+
+### netstandard2.0 target
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net6.0` or `net472`. Please use the `net6.0`-targeted assemblies for .NET Core 6+ scenarios.
+
+For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Utilities/Resources/Strings.resx b/src/Utilities/Resources/Strings.resx
index 844caf29c0f..452897f1deb 100644
--- a/src/Utilities/Resources/Strings.resx
+++ b/src/Utilities/Resources/Strings.resx
@@ -287,11 +287,14 @@
   <data name="MuxLogger_BuildFinishedSuccess">
     <value xml:space="preserve">Build succeeded.</value>
   </data>
-
+  <data name="DebugPathTooLong" Visibility="Public">
+    <value>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</value>
+    <comment>{StrBegin="MSB6012: "}</comment>
+  </data>
   <!--
         The Utilities message bucket is: MSB6001 - MSB6200
 
-        Next message code should be MSB6012
+        Next message code should be MSB6013
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Utilities/Resources/xlf/Strings.cs.xlf b/src/Utilities/Resources/xlf/Strings.cs.xlf
index 360283f57db..a8bfb9f8d72 100644
--- a/src/Utilities/Resources/xlf/Strings.cs.xlf
+++ b/src/Utilities/Resources/xlf/Strings.cs.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="cs" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Cesta „{0}“ použitá pro protokoly ladění je příliš dlouhá. Nastavte ji na kratší hodnotu pomocí proměnné prostředí MSBUILDDEBUGPATH nebo změňte konfigurace vašeho systému, aby povolovala dlouhé cesty.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Přepínač příkazového řádku pro {0} je neplatný. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.de.xlf b/src/Utilities/Resources/xlf/Strings.de.xlf
index 41f19b468c6..df6e3dfda00 100644
--- a/src/Utilities/Resources/xlf/Strings.de.xlf
+++ b/src/Utilities/Resources/xlf/Strings.de.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="de" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Der für Debugprotokolle verwendete Pfad "{0}" ist zu lang. Legen Sie den Wert mithilfe der Umgebungsvariablen MSBUILDDEBUGPATH auf einen kürzeren Wert fest, oder ändern Sie die Systemkonfiguration so, dass lange Pfade zulässig sind.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Ungültige Befehlszeilenoption für "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.es.xlf b/src/Utilities/Resources/xlf/Strings.es.xlf
index 336a4bf92f9..71a0cc32f88 100644
--- a/src/Utilities/Resources/xlf/Strings.es.xlf
+++ b/src/Utilities/Resources/xlf/Strings.es.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="es" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: La ruta de acceso "{0}" usada para los registros de depuración es demasiado larga. Establézcalo en un valor más corto con la variable de entorno MSBUILDDEBUGPATH o cambie la configuración del sistema para permitir rutas de acceso largas.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Modificador de línea de comandos no válido para "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.fr.xlf b/src/Utilities/Resources/xlf/Strings.fr.xlf
index 28e1d87d3d2..2924d87cb1a 100644
--- a/src/Utilities/Resources/xlf/Strings.fr.xlf
+++ b/src/Utilities/Resources/xlf/Strings.fr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="fr" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Le chemin d’accès "{0}" utilisé pour les journaux de débogage est trop long. Définissez-la sur une valeur plus courte à l’aide de la variable d’environnement MSBUILDDEBUGPATH ou modifiez votre configuration système pour autoriser les chemins longs.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Commutateur de ligne de commande non valide pour "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.it.xlf b/src/Utilities/Resources/xlf/Strings.it.xlf
index e9a5e77d267..ea4e723c61a 100644
--- a/src/Utilities/Resources/xlf/Strings.it.xlf
+++ b/src/Utilities/Resources/xlf/Strings.it.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="it" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: il percorso "{0}" usato per i log di debug è troppo lungo. Impostarlo su un valore più breve usando la variabile dell'ambiente MSBUILDDEBUGPATH o modificare la configurazione del sistema per consentire percorsi lunghi.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: opzione della riga di comando non valida per "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ja.xlf b/src/Utilities/Resources/xlf/Strings.ja.xlf
index 2a40fcbc8a8..77b2163cf7a 100644
--- a/src/Utilities/Resources/xlf/Strings.ja.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ja.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ja" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: デバッグ ログに使用されるパス "{0}" が長すぎます。MSBUILDDEBUGPATH 環境変数を使用して短い値に設定するか、長いパスを許可するようにシステム構成を変更してください。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" のコマンド ライン スイッチが無効です。{1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ko.xlf b/src/Utilities/Resources/xlf/Strings.ko.xlf
index bf7f4d789a2..937d12bd39a 100644
--- a/src/Utilities/Resources/xlf/Strings.ko.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ko.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ko" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 디버그 로그에 사용된 경로 "{0}"이(가) 너무 깁니다. MSBUILDDEBUGPATH 환경 변수를 사용하여 값을 더 짧게 설정하거나 긴 경로를 허용하도록 시스템 구성을 변경합니다.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}"의 명령줄 스위치가 잘못되었습니다. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.pl.xlf b/src/Utilities/Resources/xlf/Strings.pl.xlf
index 2189f7d3a20..9cb15be1f03 100644
--- a/src/Utilities/Resources/xlf/Strings.pl.xlf
+++ b/src/Utilities/Resources/xlf/Strings.pl.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pl" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Ścieżka „{0}” używana w dziennikach debugowania jest za długa. Ustaw ją na krótszą wartość przy użyciu zmiennej środowiskowej MSBUILDEBUGPATH lub zmień konfigurację systemu, aby zezwolić na długie ścieżki.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Nieprawidłowy przełącznik wiersza polecenia dla „{0}”. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.pt-BR.xlf b/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
index b54d2b7acf6..19e23f9ecdd 100644
--- a/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pt-BR" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: O caminho "{0}" usado para logs de depuração é muito longo. Defina-o para um valor mais curto usando a variável de ambiente MSBUILDDEBUGPATH ou altere a configuração do sistema para permitir caminhos longos.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Opção de linha de comando inválida para "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ru.xlf b/src/Utilities/Resources/xlf/Strings.ru.xlf
index 368b83f2540..c11d3a50afd 100644
--- a/src/Utilities/Resources/xlf/Strings.ru.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ru.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ru" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: слишком длинный путь "{0}" для журналов отладки. Установите более короткое значение, используя переменную среду MSBUILDDEBUGPATH, или измените конфигурацию системы, чтобы разрешить длинные пути.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Недопустимый переключатель командной строки для "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.tr.xlf b/src/Utilities/Resources/xlf/Strings.tr.xlf
index 44ffff6ac3e..faf2fbb9512 100644
--- a/src/Utilities/Resources/xlf/Strings.tr.xlf
+++ b/src/Utilities/Resources/xlf/Strings.tr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="tr" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Hata ayıklama günlükleri için kullanılan "{0}" yolu çok uzun. MSBUILDDEBUGPATH ortam değişkenini kullanarak yolu daha kısa bir değere ayarlayın veya sistem yapılandırmanızı uzun yollara izin verecek şekilde değiştirin.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" için geçersiz komut satırı anahtarı. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf b/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
index b9816891b01..65e9de502ba 100644
--- a/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hans" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 用于调试日志的路径"{0}"太长。使用 MSBUILDDEBUGPATH 环境变量将其设置为较短值，或更改系统配置以允许长路径。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: “{0}”的命令行开关无效。{1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf b/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
index 3feb3149cf9..6d773c29ed9 100644
--- a/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hant" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 用於偵錯記錄檔 "{0}" 的路徑太長。使用 MSBUILDDEBUGPATH 環境變數將它設定為較短的值，或變更您的系統設定以允許長路徑。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" 的命令列參數無效。{1}</target>
diff --git a/src/Utilities/SDKManifest.cs b/src/Utilities/SDKManifest.cs
index da9c9085073..1bf1cba189a 100644
--- a/src/Utilities/SDKManifest.cs
+++ b/src/Utilities/SDKManifest.cs
@@ -11,6 +11,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -352,13 +354,8 @@ private void LoadManifestFile()
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 ReadError = true;
                 ReadErrorMessage = e.Message;
             }
diff --git a/src/Utilities/SDKType.cs b/src/Utilities/SDKType.cs
index 9ada0e526c5..3161e05231a 100644
--- a/src/Utilities/SDKType.cs
+++ b/src/Utilities/SDKType.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TargetPlatformSDK.cs b/src/Utilities/TargetPlatformSDK.cs
index e991bb53a1b..97d0b1aa3ec 100644
--- a/src/Utilities/TargetPlatformSDK.cs
+++ b/src/Utilities/TargetPlatformSDK.cs
@@ -7,6 +7,8 @@
 using System.Globalization;
 using Microsoft.Build.Shared;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 2ca6e4a10d9..b8430809703 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -5,6 +5,8 @@
 
 using Microsoft.Build.Framework;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index e54b2f6b9c3..53f3d588300 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -14,6 +14,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -194,7 +196,15 @@ public ICollection MetadataNames
         {
             get
             {
-                var metadataNames = new List<string>(_metadata?.Keys ?? Array.Empty<string>());
+                int count = (_metadata?.Count ?? 0) + FileUtilities.ItemSpecModifiers.All.Length;
+
+                var metadataNames = new List<string>(capacity: count);
+
+                if (_metadata is not null)
+                {
+                    metadataNames.AddRange(_metadata.Keys);
+                }
+
                 metadataNames.AddRange(FileUtilities.ItemSpecModifiers.All);
 
                 return metadataNames;
@@ -512,4 +522,4 @@ private IEnumerable<KeyValuePair<string, string>> EnumerateMetadataLazy()
             }
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 6237b17f4c7..baa7385f829 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -10,15 +10,17 @@
 using System.Xml;
 
 using Microsoft.Build.Shared;
-#if FEATURE_WIN32_REGISTRY
 using Microsoft.Win32;
-#endif
 
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using UtilitiesDotNetFrameworkArchitecture = Microsoft.Build.Utilities.DotNetFrameworkArchitecture;
 using SharedDotNetFrameworkArchitecture = Microsoft.Build.Shared.DotNetFrameworkArchitecture;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
+using System.Runtime.Versioning;
+using Microsoft.Build.Framework;
+
+#nullable disable
 
 namespace Microsoft.Build.Utilities
 {
@@ -292,7 +294,6 @@ public static class ToolLocationHelper
         /// </summary>
         public static string CurrentToolsVersion => MSBuildConstants.CurrentToolsVersion;
 
-#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Get a sorted list of AssemblyFoldersExInfo which contain information about what directories the 3rd party assemblies are registered under for use during build and design time.
         ///
@@ -315,6 +316,7 @@ public static class ToolLocationHelper
         /// On a 32 bit machine we only add in the 32 bit hive.
         /// </param>
         /// <returns>List of AssemblyFoldersExInfo</returns>
+        [SupportedOSPlatform("windows")]
         public static IList<AssemblyFoldersExInfo> GetAssemblyFoldersExInfo(string registryRoot, string targetFrameworkVersion, string registryKeySuffix, string osVersion, string platform, System.Reflection.ProcessorArchitecture targetProcessorArchitecture)
         {
             ErrorUtilities.VerifyThrowArgumentLength(registryRoot, nameof(registryRoot));
@@ -327,7 +329,6 @@ public static IList<AssemblyFoldersExInfo> GetAssemblyFoldersExInfo(string regis
             assemblyFolders.AddRange(assemblyFoldersEx);
             return assemblyFolders;
         }
-#endif
 
         /// <summary>
         /// Get a sorted list of AssemblyFoldersFromConfigInfo which contain information about what directories the 3rd party assemblies are registered under for use during build and design time.
@@ -1462,18 +1463,14 @@ public static string GetFoldersInVSInstallsAsString(string minVersionString = nu
 
                 var folders = GetFoldersInVSInstalls(minVersion, maxVersion, subFolder);
 
-                if (folders.Count() > 0)
+                if (folders.Any())
                 {
                     foldersString = string.Join(";", folders);
                 }
             }
-            catch(Exception e)
+            catch(Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                // this method will be used in vc props and we don't want to fail project load if it throws for some non critical reason.
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
+                // This method will be used in vc props and we don't want to fail project load if it throws for some non critical reason.
             }
 
             return foldersString;
@@ -1515,7 +1512,7 @@ public static string FindRootFolderWhereAllFilesExist(string possibleRoots, stri
                         }
                     }
 
-                    if(allFilesFound)
+                    if (allFilesFound)
                     {
                         return root;
                     }
@@ -2215,7 +2212,7 @@ public static IList<string> GetPathToReferenceAssemblies(string targetFrameworkR
         {
             // Verify the root path is not null throw an ArgumentNullException if the given string parameter is null and ArgumentException if it has zero length.
             ErrorUtilities.VerifyThrowArgumentLength(targetFrameworkRootPath, nameof(targetFrameworkRootPath));
-            //Verify the framework class passed in is not null. Other than being null the class will ensure it is consistent and the internal state is correct
+            // Verify the framework class passed in is not null. Other than being null the class will ensure it is consistent and the internal state is correct
             ErrorUtilities.VerifyThrowArgumentNull(frameworkName, nameof(frameworkName));
 
             string referenceAssemblyCacheKey = GenerateReferenceAssemblyCacheKey(targetFrameworkRootPath, frameworkName);
@@ -2301,12 +2298,12 @@ public static string GetDisplayNameForTargetFrameworkDirectory(string targetFram
             StringBuilder displayNameBuilder = new StringBuilder();
 
             displayNameBuilder.Append(frameworkName.Identifier);
-            displayNameBuilder.Append(" ");
+            displayNameBuilder.Append(' ');
             displayNameBuilder.Append('v').Append(frameworkName.Version.ToString());
 
             if (!string.IsNullOrEmpty(frameworkName.Profile))
             {
-                displayNameBuilder.Append(" ");
+                displayNameBuilder.Append(' ');
                 displayNameBuilder.Append(frameworkName.Profile);
             }
 
@@ -2472,12 +2469,10 @@ private static IEnumerable<TargetPlatformSDK> RetrieveTargetPlatformList(string[
                     var monikers = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
                     GatherSDKListFromDirectory(sdkDiskRoots, monikers);
 
-#if FEATURE_REGISTRY_SDKS
-                    if (NativeMethodsShared.IsWindows)
+                    if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                     {
                         GatherSDKListFromRegistry(registryRoot, monikers);
                     }
-#endif
 
                     collection = monikers.Keys.ToList();
                     s_cachedTargetPlatforms.Add(cachedTargetPlatformsKey, collection);
@@ -2674,10 +2669,10 @@ internal static void GatherSDKListFromDirectory(List<string> diskroots, Dictiona
             }
         }
 
-#if FEATURE_REGISTRY_SDKS
         /// <summary>
         /// Given a registry location enumerate the registry and find the installed SDKs.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         internal static void GatherSDKsFromRegistryImpl(Dictionary<TargetPlatformSDK, TargetPlatformSDK> platformMonikers, string registryKeyRoot, RegistryView registryView, RegistryHive registryHive, GetRegistrySubKeyNames getRegistrySubKeyNames, GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, OpenBaseKey openBaseKey, FileExists fileExists)
         {
             ErrorUtilities.VerifyThrowArgumentNull(platformMonikers, "PlatformMonikers");
@@ -2796,7 +2791,7 @@ internal static void GatherSDKsFromRegistryImpl(Dictionary<TargetPlatformSDK, Ta
                                 // Make something like SOFTWARE\MICROSOFT\Windows SDKs\Windows\8.0\ExtensionSDKs\XNA
                                 string sdkNameKey = extensionSDKsKey + @"\" + sdkName;
 
-                                //Get all of the version registry keys under the SDK Name Key.
+                                // Get all of the version registry keys under the SDK Name Key.
                                 IEnumerable<string> sdkVersions = getRegistrySubKeyNames(baseKey, sdkNameKey);
 
                                 ErrorUtilities.DebugTraceMessage("GatherSDKsFromRegistryImpl", "Getting subkeys of '{0}'", sdkNameKey);
@@ -2868,6 +2863,7 @@ internal static void GatherSDKsFromRegistryImpl(Dictionary<TargetPlatformSDK, Ta
         ///  Gather the list of SDKs installed on the machine from the registry.
         ///  Do not parallelize the getting of these entries, order is important, we want the first ones in to win.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         private static void GatherSDKListFromRegistry(string registryRoot, Dictionary<TargetPlatformSDK, TargetPlatformSDK> platformMonikers)
         {
             // Setup some delegates because the methods we call use them during unit testing.
@@ -2893,7 +2889,6 @@ private static void GatherSDKListFromRegistry(string registryRoot, Dictionary<Ta
                 GatherSDKsFromRegistryImpl(platformMonikers, registryRoot, RegistryView.Default, RegistryHive.LocalMachine, getSubkeyNames, getRegistrySubKeyDefaultValue, openBaseKey, fileExists);
             }
         }
-#endif
 
         /// <summary>
         /// Get the disk locations to search for sdks under. This can be overridden by an environment variable
@@ -3237,11 +3232,8 @@ internal static string ChainReferenceAssemblyPath(string targetFrameworkDirector
 
                 return pathToReturn;
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                    throw;
-
                 ErrorUtilities.ThrowInvalidOperation("ToolsLocationHelper.CouldNotCreateChain", path, pathToReturn, e.Message);
             }
 
@@ -3404,7 +3396,8 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
             switch (architecture)
             {
                 case DotNetFrameworkArchitecture.Bitness32:
-                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM)
+                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM ||
+                        ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM64)
                     {
                         return ProcessorArchitecture.ARM;
                     }
@@ -3415,6 +3408,7 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
                     {
                         NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                         NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
+                        NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                         // Error, OK, we're trying to get the 64-bit path on a 32-bit machine.
                         // That ... doesn't make sense. 
                         NativeMethodsShared.ProcessorArchitectures.X86 => null,
@@ -3864,9 +3858,9 @@ private static IList<string> GetFrameworkVersions(string frameworkReferenceRoot,
 
             var frameworkVersions = new List<string>();
 
-            //backward compatibility with orcas
-            //In case of orcas .NETFramework v3.0, v3.5 - the version folders are directly under the frameworkReferenceRoot
-            //first check here
+            // backward compatibility with orcas
+            // In case of orcas .NETFramework v3.0, v3.5 - the version folders are directly under the frameworkReferenceRoot
+            // first check here
             if (string.Equals(frameworkIdentifier, FrameworkLocationHelper.dotNetFrameworkIdentifier, StringComparison.OrdinalIgnoreCase))
             {
                 IList<string> versions = GetFx35AndEarlierVersions(frameworkReferenceRoot);
@@ -3876,8 +3870,8 @@ private static IList<string> GetFrameworkVersions(string frameworkReferenceRoot,
                 }
             }
 
-            //then look under the extensible multi-targeting layout - even for .NETFramework because future .NETFramework
-            //versions would be at the right place
+            // then look under the extensible multi-targeting layout - even for .NETFramework because future .NETFramework
+            // versions would be at the right place
             string frameworkIdentifierPath = Path.Combine(frameworkReferenceRoot, frameworkIdentifier);
 
             DirectoryInfo dirInfoFxIdentifierPath = new DirectoryInfo(frameworkIdentifierPath);
@@ -3885,8 +3879,8 @@ private static IList<string> GetFrameworkVersions(string frameworkReferenceRoot,
             {
                 foreach (DirectoryInfo folder in dirInfoFxIdentifierPath.GetDirectories())
                 {
-                    //the expected version folder name is of the format v<MajorVersion>.<MinorVersion> e.g. v3.5
-                    //only add if the version folder name is of the right format
+                    // the expected version folder name is of the format v<MajorVersion>.<MinorVersion> e.g. v3.5
+                    // only add if the version folder name is of the right format
                     if (folder.Name.Length >= 4 && folder.Name.StartsWith("v", StringComparison.OrdinalIgnoreCase))
                     {
                         Version ver;
@@ -3898,8 +3892,8 @@ private static IList<string> GetFrameworkVersions(string frameworkReferenceRoot,
                 }
             }
 
-            //sort in ascending order of the version numbers, this is important as later when we search for assemblies in other methods 
-            //we should be looking in ascending order of the framework version folders on disk
+            // sort in ascending order of the version numbers, this is important as later when we search for assemblies in other methods 
+            // we should be looking in ascending order of the framework version folders on disk
             frameworkVersions.Sort(VersionComparer.Instance);
 
             return frameworkVersions;
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 6f58e9e66f0..cc316e7ad5e 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -16,6 +16,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -31,7 +33,7 @@ public enum HostObjectInitializationStatus
         UseHostObjectToExecute,
 
         /// <summary>
-        /// This means that either there is no host object available, or that the host object is 
+        /// This means that either there is no host object available, or that the host object is
         /// not capable of supporting all of the features required for this build.  Therefore,
         /// ToolTask should fallback to an alternate means of doing the build, such as invoking
         /// the command-line tool.
@@ -54,7 +56,7 @@ public enum HostObjectInitializationStatus
     /// Base class used for tasks that spawn an executable. This class implements the ToolPath property which can be used to
     /// override the default path.
     /// </summary>
-    // INTERNAL WARNING: DO NOT USE the Log property in this class! Log points to resources in the task assembly itself, and 
+    // INTERNAL WARNING: DO NOT USE the Log property in this class! Log points to resources in the task assembly itself, and
     // we want to use resources from Utilities. Use LogPrivate (for private Utilities resources) and LogShared (for shared MSBuild resources)
     public abstract class ToolTask : Task, ICancelableTask
     {
@@ -63,7 +65,7 @@ public abstract class ToolTask : Task, ICancelableTask
         #region Constructors
 
         /// <summary>
-        /// Protected constructor 
+        /// Protected constructor
         /// </summary>
         protected ToolTask()
         {
@@ -85,7 +87,7 @@ protected ToolTask()
         }
 
         /// <summary>
-        /// Protected constructor 
+        /// Protected constructor
         /// </summary>
         /// <param name="taskResources">The resource manager for task resources</param>
         protected ToolTask(ResourceManager taskResources)
@@ -95,7 +97,7 @@ protected ToolTask(ResourceManager taskResources)
         }
 
         /// <summary>
-        /// Protected constructor 
+        /// Protected constructor
         /// </summary>
         /// <param name="taskResources">The resource manager for task resources</param>
         /// <param name="helpKeywordPrefix">The help keyword prefix for task's messages</param>
@@ -110,7 +112,7 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)
         #region Properties
 
         /// <summary>
-        /// The return code of the spawned process. If the task logged any errors, but the process 
+        /// The return code of the spawned process. If the task logged any errors, but the process
         /// had an exit code of 0 (success), this will be set to -1.
         /// </summary>
         [Output]
@@ -185,7 +187,7 @@ public virtual string ToolExe
         /// <summary>
         /// Whether or not to use UTF8 encoding for the cmd file and console window.
         /// Values: Always, Never, Detect
-        /// If set to Detect, the current code page will be used unless it cannot represent 
+        /// If set to Detect, the current code page will be used unless it cannot represent
         /// the Command string. In that case, UTF-8 is used.
         /// </summary>
         public string UseUtf8Encoding { get; set; } = EncodingUtilities.UseUtf8Detect;
@@ -203,7 +205,7 @@ public virtual string ToolExe
 
         /// <summary>
         /// Project visible property that allows the user to specify an amount of time after which the task executable
-        /// is terminated. 
+        /// is terminated.
         /// </summary>
         /// <value>Time-out in milliseconds. Default is <see cref="System.Threading.Timeout.Infinite"/> (no time-out).</value>
         public virtual int Timeout { set; get; } = System.Threading.Timeout.Infinite;
@@ -324,7 +326,7 @@ public virtual string ToolExe
         protected virtual void ProcessStarted() { }
 
         /// <summary>
-        /// Gets the fully qualified tool name. Should return ToolExe if ToolTask should search for the tool 
+        /// Gets the fully qualified tool name. Should return ToolExe if ToolTask should search for the tool
         /// in the system path. If ToolPath is set, this is ignored.
         /// </summary>
         /// <returns>Path string.</returns>
@@ -332,7 +334,7 @@ protected virtual void ProcessStarted() { }
 
         /// <summary>
         /// Gets the working directory to use for the process. Should return null if ToolTask should use the
-        /// current directory. 
+        /// current directory.
         /// </summary>
         /// <remarks>This is a method rather than a property so that derived classes (like Exec) can choose to
         /// expose a public WorkingDirectory property, and it would be confusing to have two properties.</remarks>
@@ -411,7 +413,7 @@ protected virtual bool HandleTaskExecutionErrors()
 
         /// <summary>
         /// We expect tasks to override this method if they support host objects.  The implementation should
-        /// make sure that the host object is ready to perform the real work of the task.  
+        /// make sure that the host object is ready to perform the real work of the task.
         /// </summary>
         /// <returns>The return value indicates what steps to take next.  The default is to assume that there
         /// is no host object provided, and therefore we should fallback to calling the command-line tool.</returns>
@@ -478,7 +480,7 @@ private string ComputePathToTool()
                 }
             }
 
-            // only look for the file if we have a path to it. If we have just the file name, we'll 
+            // only look for the file if we have a path to it. If we have just the file name, we'll
             // look for it in the path
             if (pathToTool != null)
             {
@@ -625,12 +627,7 @@ string responseFileSwitch
             {
                 foreach (KeyValuePair<string, string> entry in envOverrides)
                 {
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
                     startInfo.Environment[entry.Key] = entry.Value;
-#else
-                    startInfo.EnvironmentVariables[entry.Key] = entry.Value;
-#endif
-
                 }
 #pragma warning restore 0618
             }
@@ -640,11 +637,7 @@ string responseFileSwitch
             {
                 foreach (KeyValuePair<string, string> variable in _environmentVariablePairs)
                 {
-#if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
                     startInfo.Environment[variable.Key] = variable.Value;
-#else
-                    startInfo.EnvironmentVariables[variable.Key] = variable.Value;
-#endif
                 }
             }
 
@@ -805,7 +798,7 @@ protected void DeleteTempFile(string fileName)
             }
             catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
             {
-                // Warn only -- occasionally temp files fail to delete because of virus checkers; we 
+                // Warn only -- occasionally temp files fail to delete because of virus checkers; we
                 // don't want the build to fail in such cases
                 LogShared.LogWarningWithCodeFromResources("Shared.FailedDeletingTempFile", fileName, e.Message);
             }
@@ -1223,7 +1216,7 @@ private bool AssignStandardStreamLoggingImportance()
             {
                 try
                 {
-                    // Parse the raw importance string into a strongly typed enumeration.  
+                    // Parse the raw importance string into a strongly typed enumeration.
                     _standardErrorImportanceToUse = (MessageImportance)Enum.Parse(typeof(MessageImportance), StandardErrorImportance, true /* case-insensitive */);
                 }
                 catch (ArgumentException)
@@ -1243,7 +1236,7 @@ private bool AssignStandardStreamLoggingImportance()
             {
                 try
                 {
-                    // Parse the raw importance string into a strongly typed enumeration.  
+                    // Parse the raw importance string into a strongly typed enumeration.
                     _standardOutputImportanceToUse = (MessageImportance)Enum.Parse(typeof(MessageImportance), StandardOutputImportance, true /* case-insensitive */);
                 }
                 catch (ArgumentException)
@@ -1384,7 +1377,7 @@ public override bool Execute()
 
                             if (encoding.CodePage != EncodingUtilities.CurrentSystemOemEncoding.CodePage)
                             {
-                                // cmd.exe reads the first line in the console CP, 
+                                // cmd.exe reads the first line in the console CP,
                                 // which for a new console (as here) is OEMCP
                                 // this string should ideally always be ASCII
                                 // and the same in any OEMCP.
@@ -1431,7 +1424,7 @@ public override bool Execute()
 
                 // Initialize the host object.  At this point, the task may elect
                 // to not proceed.  Compiler tasks do this for purposes of up-to-date
-                // checking in the IDE.  
+                // checking in the IDE.
                 HostObjectInitializationStatus nextAction = InitializeHostObject();
                 if (nextAction == HostObjectInitializationStatus.NoActionReturnSuccess)
                 {
@@ -1481,13 +1474,13 @@ public override bool Execute()
 
                 if (UseCommandProcessor)
                 {
-                    // Log that we are about to invoke the specified command.  
+                    // Log that we are about to invoke the specified command.
                     LogToolCommand(pathToTool + commandLineCommands);
                     LogToolCommand(batchFileContents);
                 }
                 else
                 {
-                    // Log that we are about to invoke the specified command.  
+                    // Log that we are about to invoke the specified command.
                     LogToolCommand(pathToTool + commandLineCommands + " " + responseFileCommands);
                 }
                 ExitCode = 0;
@@ -1495,7 +1488,7 @@ public override bool Execute()
                 if (nextAction == HostObjectInitializationStatus.UseHostObjectToExecute)
                 {
                     // The hosting IDE passed in a host object to this task.  Give the task
-                    // a chance to call this host object to do the actual work.  
+                    // a chance to call this host object to do the actual work.
                     try
                     {
                         if (!CallHostObjectToExecute())
@@ -1630,12 +1623,12 @@ private bool LogEnvironmentVariable(bool alreadyLoggedEnvironmentHeader, string
         private static readonly char[] s_equalsSplitter = MSBuildConstants.EqualsChar;
 
         /// <summary>
-        /// The actual importance at which standard out messages will be logged 
+        /// The actual importance at which standard out messages will be logged
         /// </summary>
         private MessageImportance _standardOutputImportanceToUse = MessageImportance.Low;
 
         /// <summary>
-        /// The actual importance at which standard error messages will be logged 
+        /// The actual importance at which standard error messages will be logged
         /// </summary>
         private MessageImportance _standardErrorImportanceToUse = MessageImportance.Normal;
 
@@ -1667,7 +1660,7 @@ private bool LogEnvironmentVariable(bool alreadyLoggedEnvironmentHeader, string
         private ManualResetEvent _toolExited;
 
         /// <summary>
-        /// Set to true if the tool process was terminated, 
+        /// Set to true if the tool process was terminated,
         /// either because the timeout was reached or it was canceled.
         /// </summary>
         private bool _terminatedTool;
diff --git a/src/Utilities/TrackedDependencies/CanonicalTrackedFilesHelper.cs b/src/Utilities/TrackedDependencies/CanonicalTrackedFilesHelper.cs
index c9a38c060cc..1d59803aa05 100644
--- a/src/Utilities/TrackedDependencies/CanonicalTrackedFilesHelper.cs
+++ b/src/Utilities/TrackedDependencies/CanonicalTrackedFilesHelper.cs
@@ -8,6 +8,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     internal static class CanonicalTrackedFilesHelper
diff --git a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
index 1784b4d751a..99c1745f803 100644
--- a/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
+++ b/src/Utilities/TrackedDependencies/CanonicalTrackedInputFiles.cs
@@ -13,6 +13,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TrackedDependencies/CanonicalTrackedOutputFiles.cs b/src/Utilities/TrackedDependencies/CanonicalTrackedOutputFiles.cs
index 2dd952fa1ec..2ccbbce8f3b 100644
--- a/src/Utilities/TrackedDependencies/CanonicalTrackedOutputFiles.cs
+++ b/src/Utilities/TrackedDependencies/CanonicalTrackedOutputFiles.cs
@@ -11,6 +11,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TrackedDependencies/DependencyTableCache.cs b/src/Utilities/TrackedDependencies/DependencyTableCache.cs
index c87fcaf16fd..ac4d674e0a8 100644
--- a/src/Utilities/TrackedDependencies/DependencyTableCache.cs
+++ b/src/Utilities/TrackedDependencies/DependencyTableCache.cs
@@ -11,6 +11,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 423083dbd1b..7eb6306f4a1 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -15,42 +15,54 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
-    /// Enumeration to express the type of executable being wrapped by Tracker.exe
+    /// Enumeration to express the type of executable being wrapped by Tracker.exe.
     /// </summary>
     public enum ExecutableType
     {
         /// <summary>
-        /// 32-bit native executable
+        /// 32-bit native executable.
         /// </summary>
         Native32Bit = 0,
 
         /// <summary>
-        /// 64-bit native executable 
+        /// 64-bit native executable.
         /// </summary>
         Native64Bit = 1,
 
         /// <summary>
-        /// A managed executable without a specified bitness
+        /// A managed executable without a specified bitness.
         /// </summary>
         ManagedIL = 2,
 
         /// <summary>
-        /// A managed executable specifically marked as 32-bit
+        /// A managed executable specifically marked as 32-bit.
         /// </summary>
         Managed32Bit = 3,
 
         /// <summary>
-        /// A managed executable specifically marked as 64-bit
+        /// A managed executable specifically marked as 64-bit.
         /// </summary>
         Managed64Bit = 4,
 
         /// <summary>
         /// Use the same bitness as the currently running executable. 
         /// </summary>
-        SameAsCurrentProcess = 5
+        SameAsCurrentProcess = 5,
+
+        /// <summary>
+        /// 64-bit native ARM64 executable.
+        /// </summary>
+        NativeARM64 = 6,
+
+        /// <summary>
+        /// 64-bit managed ARM64 executable.
+        /// </summary>
+        ManagedARM64 = 7
     }
 
     /// <summary>
@@ -83,14 +95,14 @@ public static class FileTracker
         // Is equal to C:\Documents and Settings\All Users\Application Data on XP, and C:\ProgramData on Vista+.
         // But for backward compatibility, the paths "C:\Documents and Settings\All Users\Application Data" and "C:\Users\All Users\Application Data" are still accessible via Junction point on Vista+.
         // Thus this list is created to store all possible common application data paths to cover more cases as possible.
-        private static readonly List<string> s_commonApplicationDataPaths;
+        private static readonly List<string> s_commonApplicationDataPaths = InitializeCommonApplicationDataPaths();
 
         // The name of the standalone tracker tool.
-        private static readonly string s_TrackerFilename = "Tracker.exe";
+        private const string s_TrackerFilename = "Tracker.exe";
 
         // The name of the assembly that is injected into the executing process.
         // Detours handles picking between FileTracker{32,64}.dll so only mention one.
-        private static readonly string s_FileTrackerFilename = "FileTracker32.dll";
+        private const string s_FileTrackerFilename = "FileTracker32.dll";
 
         // The name of the PATH environment variable.
         private const string pathEnvironmentVariableName = "PATH";
@@ -103,29 +115,31 @@ public static class FileTracker
 
 #endregion
 
-#region Static constructor
+#region Static Member Initializers
 
-        static FileTracker()
+        static List<string> InitializeCommonApplicationDataPaths()
         {
-            s_commonApplicationDataPaths = new List<string>();
+            List<string> commonApplicationDataPaths = new();
 
             string defaultCommonApplicationDataPath = FileUtilities.EnsureTrailingSlash(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData).ToUpperInvariant());
-            s_commonApplicationDataPaths.Add(defaultCommonApplicationDataPath);
+            commonApplicationDataPaths.Add(defaultCommonApplicationDataPath);
 
             string defaultRootDirectory = Path.GetPathRoot(defaultCommonApplicationDataPath);
             string alternativeCommonApplicationDataPath1 = FileUtilities.EnsureTrailingSlash(Path.Combine(defaultRootDirectory, @"Documents and Settings\All Users\Application Data").ToUpperInvariant());
 
             if (!alternativeCommonApplicationDataPath1.Equals(defaultCommonApplicationDataPath, StringComparison.Ordinal))
             {
-                s_commonApplicationDataPaths.Add(alternativeCommonApplicationDataPath1);
+                commonApplicationDataPaths.Add(alternativeCommonApplicationDataPath1);
             }
 
             string alternativeCommonApplicationDataPath2 = FileUtilities.EnsureTrailingSlash(Path.Combine(defaultRootDirectory, @"Users\All Users\Application Data").ToUpperInvariant());
 
             if (!alternativeCommonApplicationDataPath2.Equals(defaultCommonApplicationDataPath, StringComparison.Ordinal))
             {
-                s_commonApplicationDataPaths.Add(alternativeCommonApplicationDataPath2);
+                commonApplicationDataPaths.Add(alternativeCommonApplicationDataPath2);
             }
+
+            return commonApplicationDataPaths;
         }
 
 #endregion
@@ -368,7 +382,6 @@ public static string EnsureFileTrackerOnPath(string rootPath)
         /// path that matches. 
         /// </summary>
         /// <returns>The full path to Tracker.exe, or <see langword="null" /> if a matching path is not found.</returns>
-        
         public static string FindTrackerOnPath()
         {
             string[] paths = Environment.GetEnvironmentVariable(pathEnvironmentVariableName).Split(pathSeparatorArray, StringSplitOptions.RemoveEmptyEntries);
diff --git a/src/Utilities/TrackedDependencies/FlatTrackingData.cs b/src/Utilities/TrackedDependencies/FlatTrackingData.cs
index 49d2531a2b4..1c6529ac55d 100644
--- a/src/Utilities/TrackedDependencies/FlatTrackingData.cs
+++ b/src/Utilities/TrackedDependencies/FlatTrackingData.cs
@@ -14,6 +14,8 @@
 
 #if FEATURE_FILE_TRACKER
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
diff --git a/src/Utilities/TrackedDependencies/TrackedDependencies.cs b/src/Utilities/TrackedDependencies/TrackedDependencies.cs
index 414a572d4d5..ccc53acd3ae 100644
--- a/src/Utilities/TrackedDependencies/TrackedDependencies.cs
+++ b/src/Utilities/TrackedDependencies/TrackedDependencies.cs
@@ -8,6 +8,8 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
+#nullable disable
+
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
@@ -46,7 +48,7 @@ public static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                     }
                     else
                     {
-                        files = FileMatcher.Default.GetFiles(null, item.ItemSpec);
+                        files = FileMatcher.Default.GetFiles(null, item.ItemSpec).FileList;
                     }
 
                     foreach (string file in files)
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/AssemblyFixtureAttribute.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/AssemblyFixtureAttribute.cs
index a8b28069581..ab44a3e90c3 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/AssemblyFixtureAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/AssemblyFixtureAttribute.cs
@@ -1,5 +1,7 @@
 ﻿using System;
 
+#nullable disable
+
 namespace Xunit
 {
     [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)]
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
index a3af7a6547d..85ccedf6f8b 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestAssemblyRunnerWithAssemblyFixture.cs
@@ -6,6 +6,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestAssemblyRunnerWithAssemblyFixture : XunitTestAssemblyRunner
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
index 035c80be769..6b64d7f4e42 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestClassRunnerWithAssemblyFixture.cs
@@ -6,6 +6,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestClassRunnerWithAssemblyFixture : XunitTestClassRunner
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
index 0d1f5b5c31d..6ccda839570 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestCollectionRunnerWithAssemblyFixture.cs
@@ -5,6 +5,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestCollectionRunnerWithAssemblyFixture : XunitTestCollectionRunner
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
index 62af5873266..42d906d9e97 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkExecutorWithAssemblyFixture.cs
@@ -3,6 +3,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestFrameworkExecutorWithAssemblyFixture : XunitTestFrameworkExecutor
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkWithAssemblyFixture.cs
index 9690a25dffb..aa1fcae63de 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestFrameworkWithAssemblyFixture.cs
@@ -2,6 +2,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestFrameworkWithAssemblyFixture : XunitTestFramework
diff --git a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
index 76223e24a1e..29765c69e2b 100644
--- a/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
+++ b/src/Xunit.NetCore.Extensions/AssemblyFixtureSupport/XunitTestMethodRunnerWithAssemblyFixture.cs
@@ -5,6 +5,8 @@
 using Xunit.Abstractions;
 using Xunit.Sdk;
 
+#nullable disable
+
 namespace Xunit.NetCore.Extensions
 {
     public class XunitTestMethodRunnerWithAssemblyFixture : XunitTestMethodRunner
diff --git a/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj b/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
index e62c73f4b0a..6bc9b9cbc4d 100644
--- a/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
+++ b/src/Xunit.NetCore.Extensions/Xunit.NetCore.Extensions.csproj
@@ -1,9 +1,10 @@
-﻿<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>
     <CLSCompliant>false</CLSCompliant>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <IsShipping>false</IsShipping>
+    <IsTestProject>false</IsTestProject><!-- while this project references xunit it isn't itself a test -->
   </PropertyGroup>
   <ItemGroup>
     <PackageReference Include="xunit.core" />
