diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index afb2c4d880f..65269f0a92f 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -1166,9 +1166,6 @@ dotnet_diagnostic.IDE0032.severity = suggestion
 # 'default' expression can be simplified
 dotnet_diagnostic.IDE0034.severity = suggestion
 
-# Modifiers are not ordered
-dotnet_diagnostic.IDE0036.severity = suggestion
-
 # Member name can be simplified
 dotnet_diagnostic.IDE0037.severity = suggestion
 
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index af7884c0fb4..b1d16be134b 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -805,7 +805,7 @@ public override int GetHashCode()
             /// <summary>
             /// Gets a comparer.
             /// </summary>
-            static public IComparer<BaseClass> Comparer
+            public static IComparer<BaseClass> Comparer
             {
                 get { return new BaseClassComparer(); }
             }
@@ -899,7 +899,7 @@ public DerivedClass(int derivedValue, int baseValue)
             /// <summary>
             /// Gets a comparer.
             /// </summary>
-            static new public IComparer<DerivedClass> Comparer
+            public static new IComparer<DerivedClass> Comparer
             {
                 get { return new DerivedClassComparer(); }
             }
diff --git a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
index 4d3b8c7c06c..006e69c1af7 100644
--- a/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/GenerateTemporaryTargetAssembly_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
-    sealed public class GenerateTemporaryTargetAssembly_Tests
+    public sealed class GenerateTemporaryTargetAssembly_Tests
     {
         [Fact]
         public void FailsWithOnlyTargetErrors()
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index c9964af9f2d..2d49c5fa110 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -1880,7 +1880,7 @@ public BuildEventArgs ProcessedBuildEvent
             /// </summary>
             /// <param name="mode">Logger mode, this is not used</param>
             /// <returns>Instantiated LoggingServiceOverrideProcessBuildEvent</returns>
-            public new static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId)
+            public static new IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId)
             {
                 return new ProcessBuildEventHelper(mode, nodeId, null);
             }
diff --git a/src/Build.UnitTests/BackEnd/OnError_Tests.cs b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
index bc8849c9dfe..09a81dfa5e7 100644
--- a/src/Build.UnitTests/BackEnd/OnError_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
@@ -22,7 +22,7 @@ namespace Microsoft.Build.UnitTests.BackEnd
      *
      * Tests that exercise the <OnError> tag.
      */
-    sealed public class OnError_Tests
+    public sealed class OnError_Tests
     {
         /*
          * Method:  Basic
diff --git a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
index 63479f7c6c3..7509c29c15b 100644
--- a/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ResultsCache_Tests.cs
@@ -270,7 +270,7 @@ public void TestResultsCacheTranslation(object obj)
 
         #region Helper Methods
 
-        static internal bool AreResultsIdentical(BuildResult a, BuildResult b)
+        internal static bool AreResultsIdentical(BuildResult a, BuildResult b)
         {
             if (a.ConfigurationId != b.ConfigurationId)
             {
@@ -314,7 +314,7 @@ static internal bool AreResultsIdentical(BuildResult a, BuildResult b)
             return true;
         }
 
-        static internal bool AreResultsIdenticalForTargets(BuildResult a, BuildResult b, string[] targets)
+        internal static bool AreResultsIdenticalForTargets(BuildResult a, BuildResult b, string[] targets)
         {
             foreach (string target in targets)
             {
@@ -327,7 +327,7 @@ static internal bool AreResultsIdenticalForTargets(BuildResult a, BuildResult b,
             return true;
         }
 
-        static private bool AreResultsIdenticalForTarget(BuildResult a, BuildResult b, string target)
+        private static bool AreResultsIdenticalForTarget(BuildResult a, BuildResult b, string target)
         {
             if (!a.HasResultsForTarget(target) || !b.HasResultsForTarget(target))
             {
@@ -347,7 +347,7 @@ static private bool AreResultsIdenticalForTarget(BuildResult a, BuildResult b, s
             return true;
         }
 
-        static private bool AreItemsIdentical(IList<ITaskItem> a, IList<ITaskItem> b)
+        private static bool AreItemsIdentical(IList<ITaskItem> a, IList<ITaskItem> b)
         {
             // Exhaustive comparison of items should not be necessary since we don't merge on the item level.
             return a.Count == b.Count;
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index 010c83fa619..a39e18d8245 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -15,7 +15,7 @@
 
 namespace Microsoft.Build.Engine.UnitTests
 {
-    sealed public class ChangeWaves_Tests
+    public sealed class ChangeWaves_Tests
     {
         ITestOutputHelper _output;
         public ChangeWaves_Tests(ITestOutputHelper output)
diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index 819688c22a2..fa3cc3947a8 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -736,7 +736,7 @@ public void ParseFirstProjectLineWhereProjectPathHasBackslash()
         /// </summary>
         /// <param name="solutionFileContents"></param>
         /// <returns></returns>
-        static internal SolutionFile ParseSolutionHelper(string solutionFileContents)
+        internal static SolutionFile ParseSolutionHelper(string solutionFileContents)
         {
             solutionFileContents = solutionFileContents.Replace('\'', '"');
             StreamReader sr = StreamHelpers.StringToStreamReader(solutionFileContents);
diff --git a/src/Build.UnitTests/EscapingInProjects_Tests.cs b/src/Build.UnitTests/EscapingInProjects_Tests.cs
index 2026c5c56e2..08e59340cb9 100644
--- a/src/Build.UnitTests/EscapingInProjects_Tests.cs
+++ b/src/Build.UnitTests/EscapingInProjects_Tests.cs
@@ -51,7 +51,7 @@ public ITaskItem TaskItemParam
             }
         }
 
-        override public bool Execute()
+        public override bool Execute()
         {
             if (TaskItemParam != null)
             {
diff --git a/src/Build.UnitTests/MockTask.cs b/src/Build.UnitTests/MockTask.cs
index b09930be051..8739b56eb02 100644
--- a/src/Build.UnitTests/MockTask.cs
+++ b/src/Build.UnitTests/MockTask.cs
@@ -377,7 +377,7 @@ public TaskItem[] TaskItemArrayOutputParameter
     /// <summary>
     /// A simple mock task for use with Unit Testing.
     /// </summary>
-    sealed internal class MockTask : MockTaskBase, ITask
+    internal sealed class MockTask : MockTaskBase, ITask
     {
         private IBuildEngine _e = null;
 
diff --git a/src/Build.UnitTests/TargetsFile_Test.cs b/src/Build.UnitTests/TargetsFile_Test.cs
index ea6002e5bcb..8c6e8c82f23 100644
--- a/src/Build.UnitTests/TargetsFile_Test.cs
+++ b/src/Build.UnitTests/TargetsFile_Test.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests from Orcas
     /// </summary>
-    sealed public class TargetsFile_Test
+    public sealed class TargetsFile_Test
     {
 #if FEATURE_COMPILE_IN_TESTS
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCache.cs b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
index f2eac09484f..ce4c5fc154b 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
@@ -386,7 +386,7 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType componentType)
+        internal static IBuildComponent CreateComponent(BuildComponentType componentType)
         {
             ErrorUtilities.VerifyThrow(componentType == BuildComponentType.ConfigCache, "Cannot create components of type {0}", componentType);
             return new ConfigCache();
diff --git a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
index 31591eb8c6d..98d6e4cd99b 100644
--- a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
+++ b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
@@ -38,7 +38,7 @@ private LogMessagePacket(ITranslator translator)
         /// <summary>
         /// Factory for serialization
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
         {
             return new LogMessagePacket(translator);
         }
diff --git a/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs b/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
index 237b58a810b..f721ec6944b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeFailedToLaunchException.cs
@@ -78,7 +78,7 @@ public string ErrorDescription
 #if FEATURE_SECURITY_PERMISSIONS
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
 #endif
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index 6d9f73590eb..4330405404a 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -275,7 +275,7 @@ public void RoutePacket(int nodeId, INodePacket packet)
         /// <summary>
         /// Factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType type)
+        internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.NodeManager, "Cannot create component of type {0}", type);
             return new NodeManager();
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 337cbd76f03..5cdcd483a30 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -347,7 +347,7 @@ public void Dispose()
         /// <summary>
         /// Factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType type)
+        internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.InProcNodeProvider, "Cannot create component of type {0}", type);
             return new NodeProviderInProc();
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index 96ebeef27f9..2a6f52cdeb1 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -192,7 +192,7 @@ public void ShutdownComponent()
         /// <summary>
         /// Static factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType componentType)
+        internal static IBuildComponent CreateComponent(BuildComponentType componentType)
         {
             ErrorUtilities.VerifyThrow(componentType == BuildComponentType.OutOfProcNodeProvider, "Factory cannot create components of type {0}", componentType);
             return new NodeProviderOutOfProc();
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index b9a9d2a2f2f..c3e040ef0fe 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -346,7 +346,7 @@ public void PacketReceived(int node, INodePacket packet)
         /// <summary>
         /// Static factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType componentType)
+        internal static IBuildComponent CreateComponent(BuildComponentType componentType)
         {
             ErrorUtilities.VerifyThrow(componentType == BuildComponentType.OutOfProcTaskHostNodeProvider, "Factory cannot create components of type {0}", componentType);
             return new NodeProviderOutOfProcTaskHost();
diff --git a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
index 2b2102095b8..ba181950ce3 100644
--- a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
@@ -164,7 +164,7 @@ public void RoutePacket(int nodeId, INodePacket packet)
         /// <summary>
         /// Factory for component creation.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType type)
+        internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskHostNodeManager, "Cannot create component of type {0}", type);
             return new TaskHostNodeManager();
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index de7bd580e4a..d7a21d38548 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -634,7 +634,7 @@ public void ShutdownComponent()
         /// <summary>
         /// Factory for component construction.
         /// </summary>
-        static internal IBuildComponent CreateComponent(BuildComponentType componentType)
+        internal static IBuildComponent CreateComponent(BuildComponentType componentType)
         {
             ErrorUtilities.VerifyThrow(componentType == BuildComponentType.Scheduler, "Cannot create components of type {0}", componentType);
             return new Scheduler();
diff --git a/src/Build/Definition/BuiltInMetadata.cs b/src/Build/Definition/BuiltInMetadata.cs
index dd325c8a458..70b2166b78e 100644
--- a/src/Build/Definition/BuiltInMetadata.cs
+++ b/src/Build/Definition/BuiltInMetadata.cs
@@ -20,7 +20,7 @@ internal static class BuiltInMetadata
         /// <summary>
         /// Retrieves the count of built-in metadata.
         /// </summary>
-        static internal int MetadataCount
+        internal static int MetadataCount
         {
             [DebuggerStepThrough]
             get
@@ -30,7 +30,7 @@ static internal int MetadataCount
         /// <summary>
         /// Retrieves the list of metadata names.
         /// </summary>
-        static internal ICollection<string> MetadataNames
+        internal static ICollection<string> MetadataNames
         {
             [DebuggerStepThrough]
             get
diff --git a/src/Build/ElementLocation/RegistryLocation.cs b/src/Build/ElementLocation/RegistryLocation.cs
index 598b72a853c..d6007d30b03 100644
--- a/src/Build/ElementLocation/RegistryLocation.cs
+++ b/src/Build/ElementLocation/RegistryLocation.cs
@@ -89,7 +89,7 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        static internal RegistryLocation FactoryForDeserialization(ITranslator translator)
+        internal static RegistryLocation FactoryForDeserialization(ITranslator translator)
         {
             return new RegistryLocation(translator);
         }
diff --git a/src/Build/Errors/InternalLoggerException.cs b/src/Build/Errors/InternalLoggerException.cs
index 7acb0b4603d..df40e7472de 100644
--- a/src/Build/Errors/InternalLoggerException.cs
+++ b/src/Build/Errors/InternalLoggerException.cs
@@ -128,7 +128,7 @@ private InternalLoggerException(SerializationInfo info, StreamingContext context
 #if FEATURE_SECURITY_PERMISSIONS
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
 #endif
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Build/Errors/InvalidProjectFileException.cs b/src/Build/Errors/InvalidProjectFileException.cs
index a947dd83005..3d984104bdf 100644
--- a/src/Build/Errors/InvalidProjectFileException.cs
+++ b/src/Build/Errors/InvalidProjectFileException.cs
@@ -107,7 +107,7 @@ private InvalidProjectFileException(SerializationInfo info, StreamingContext con
 #if FEATURE_SECURITY_PERMISSIONS
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
 #endif
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Build/Evaluation/Conditionals/CharacterUtilities.cs b/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
index 9eb85cf6b6d..8af36f9b60f 100644
--- a/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
+++ b/src/Build/Evaluation/Conditionals/CharacterUtilities.cs
@@ -7,28 +7,28 @@ namespace Microsoft.Build.Evaluation
 {
     internal static class CharacterUtilities
     {
-        static internal bool IsNumberStart(char candidate)
+        internal static bool IsNumberStart(char candidate)
         {
             return candidate == '+' || candidate == '-' || candidate == '.' || char.IsDigit(candidate);
         }
 
-        static internal bool IsSimpleStringStart(char candidate)
+        internal static bool IsSimpleStringStart(char candidate)
         {
             return candidate == '_' || char.IsLetter(candidate);
         }
 
-        static internal bool IsSimpleStringChar(char candidate)
+        internal static bool IsSimpleStringChar(char candidate)
         {
             return IsSimpleStringStart(candidate) || char.IsDigit(candidate);
         }
 
-        static internal bool IsHexAlphabetic(char candidate)
+        internal static bool IsHexAlphabetic(char candidate)
         {
             return candidate == 'a' || candidate == 'b' || candidate == 'c' || candidate == 'd' || candidate == 'e' || candidate == 'f' ||
                 candidate == 'A' || candidate == 'B' || candidate == 'C' || candidate == 'D' || candidate == 'E' || candidate == 'F';
         }
 
-        static internal bool IsHexDigit(char candidate)
+        internal static bool IsHexDigit(char candidate)
         {
             return char.IsDigit(candidate) || IsHexAlphabetic(candidate);
         }
diff --git a/src/Build/Evaluation/Conditionals/Token.cs b/src/Build/Evaluation/Conditionals/Token.cs
index d26adca0462..e1bb60ec06a 100644
--- a/src/Build/Evaluation/Conditionals/Token.cs
+++ b/src/Build/Evaluation/Conditionals/Token.cs
@@ -15,19 +15,19 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal sealed class Token
     {
-        internal readonly static Token Comma = new Token(TokenType.Comma);
-        internal readonly static Token LeftParenthesis = new Token(TokenType.LeftParenthesis);
-        internal readonly static Token RightParenthesis = new Token(TokenType.RightParenthesis);
-        internal readonly static Token LessThan = new Token(TokenType.LessThan);
-        internal readonly static Token GreaterThan = new Token(TokenType.GreaterThan);
-        internal readonly static Token LessThanOrEqualTo = new Token(TokenType.LessThanOrEqualTo);
-        internal readonly static Token GreaterThanOrEqualTo = new Token(TokenType.GreaterThanOrEqualTo);
-        internal readonly static Token And = new Token(TokenType.And);
-        internal readonly static Token Or = new Token(TokenType.Or);
-        internal readonly static Token EqualTo = new Token(TokenType.EqualTo);
-        internal readonly static Token NotEqualTo = new Token(TokenType.NotEqualTo);
-        internal readonly static Token Not = new Token(TokenType.Not);
-        internal readonly static Token EndOfInput = new Token(TokenType.EndOfInput);
+        internal static readonly Token Comma = new Token(TokenType.Comma);
+        internal static readonly Token LeftParenthesis = new Token(TokenType.LeftParenthesis);
+        internal static readonly Token RightParenthesis = new Token(TokenType.RightParenthesis);
+        internal static readonly Token LessThan = new Token(TokenType.LessThan);
+        internal static readonly Token GreaterThan = new Token(TokenType.GreaterThan);
+        internal static readonly Token LessThanOrEqualTo = new Token(TokenType.LessThanOrEqualTo);
+        internal static readonly Token GreaterThanOrEqualTo = new Token(TokenType.GreaterThanOrEqualTo);
+        internal static readonly Token And = new Token(TokenType.And);
+        internal static readonly Token Or = new Token(TokenType.Or);
+        internal static readonly Token EqualTo = new Token(TokenType.EqualTo);
+        internal static readonly Token NotEqualTo = new Token(TokenType.NotEqualTo);
+        internal static readonly Token Not = new Token(TokenType.Not);
+        internal static readonly Token EndOfInput = new Token(TokenType.EndOfInput);
 
         /// <summary>
         /// Valid tokens
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 4d5d9804805..a47095e4a4d 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -602,7 +602,7 @@ internal static void SetMetadata(IEnumerable<KeyValuePair<string, string>> metad
         /// <summary>
         /// Factory for deserialization.
         /// </summary>
-        static internal ProjectItemInstance FactoryForDeserialization(ITranslator translator, ProjectInstance projectInstance)
+        internal static ProjectItemInstance FactoryForDeserialization(ITranslator translator, ProjectInstance projectInstance)
         {
             ProjectItemInstance newItem = new ProjectItemInstance(projectInstance);
             ((ITranslatable)newItem).Translate(translator);
diff --git a/src/Build/Instance/ProjectOnErrorInstance.cs b/src/Build/Instance/ProjectOnErrorInstance.cs
index 2b2a9f39147..f480331c0da 100644
--- a/src/Build/Instance/ProjectOnErrorInstance.cs
+++ b/src/Build/Instance/ProjectOnErrorInstance.cs
@@ -130,7 +130,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _executeTargetsLocation, ElementLocation.FactoryForDeserialization);
         }
 
-        internal new static ProjectOnErrorInstance FactoryForDeserialization(ITranslator translator)
+        internal static new ProjectOnErrorInstance FactoryForDeserialization(ITranslator translator)
         {
             return translator.FactoryForDeserializingTypeWithName<ProjectOnErrorInstance>();
         }
diff --git a/src/Build/Instance/ProjectTaskInstance.cs b/src/Build/Instance/ProjectTaskInstance.cs
index 541e5c1ada4..c171aa4c118 100644
--- a/src/Build/Instance/ProjectTaskInstance.cs
+++ b/src/Build/Instance/ProjectTaskInstance.cs
@@ -419,7 +419,7 @@ private static void ParametersValueTranslator(ITranslator translator, ref (strin
             }
         }
 
-        internal new static ProjectTaskInstance FactoryForDeserialization(ITranslator translator)
+        internal static new ProjectTaskInstance FactoryForDeserialization(ITranslator translator)
         {
             return translator.FactoryForDeserializingTypeWithName<ProjectTaskInstance>();
         }
diff --git a/src/Build/Logging/LogFormatter.cs b/src/Build/Logging/LogFormatter.cs
index 5dfc1207455..22e0ff446f8 100644
--- a/src/Build/Logging/LogFormatter.cs
+++ b/src/Build/Logging/LogFormatter.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.BackEnd.Logging
     /// <summary>
     /// Utility helper functions for formatting logger output.
     /// </summary>
-    static internal class LogFormatter
+    internal static class LogFormatter
     {
         /// <summary>
         /// Formats the timestamp in the log as  Hours:Minutes:Seconds.Milliseconds
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index 560d96c4c30..290a79b4da5 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -353,7 +353,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _loggerId);
         }
 
-        static internal LoggerDescription FactoryForTranslation(ITranslator translator)
+        internal static LoggerDescription FactoryForTranslation(ITranslator translator)
         {
             LoggerDescription description = new LoggerDescription();
             ((ITranslatable)description).Translate(translator);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 265d6c3155e..c40bb1aeef6 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1654,7 +1654,7 @@ private ProjectFullKey GetFullProjectKey(BuildEventContext e)
         /// </summary>
         /// <param name="scopeName">Task name or target name.</param>
         /// <param name="table">Table that has tasks or targets.</param>
-        internal new static MPPerformanceCounter GetPerformanceCounter(string scopeName, ref Dictionary<string, PerformanceCounter> table)
+        internal static new MPPerformanceCounter GetPerformanceCounter(string scopeName, ref Dictionary<string, PerformanceCounter> table)
         {
             // Lazily construct the performance counter table.
             if (table == null)
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 3e8d07e7846..23e35aa8a81 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -24,7 +24,7 @@ namespace Microsoft.Build.Internal
     /// <summary>
     /// This class contains utility methods for the MSBuild engine.
     /// </summary>
-    static internal class Utilities
+    internal static class Utilities
     {
         /// <summary>
         /// Save off the contents of the environment variable that specifies whether we should treat higher toolsversions as the current 
diff --git a/src/Deprecated/Conversion/AssemblyResources.cs b/src/Deprecated/Conversion/AssemblyResources.cs
index 957af6a5dfb..3f654788a0f 100644
--- a/src/Deprecated/Conversion/AssemblyResources.cs
+++ b/src/Deprecated/Conversion/AssemblyResources.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Conversion
     /// This class provides access to the assembly's resources.
     /// </summary>
     /// <owner>SumedhK</owner>
-    static internal class AssemblyResources
+    internal static class AssemblyResources
     {
         /// <summary>
         /// Loads the specified resource string, either from the assembly's primary resources, or its shared resources.
diff --git a/src/Deprecated/Conversion/Constants.cs b/src/Deprecated/Conversion/Constants.cs
index a757f51f37c..c151142eedc 100644
--- a/src/Deprecated/Conversion/Constants.cs
+++ b/src/Deprecated/Conversion/Constants.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.Conversion
     /// Contains strings identifying hint paths that we should remove
     /// </summary>
     /// <owner>AJenner</owner>
-    static internal class LegacyFrameworkPaths
+    internal static class LegacyFrameworkPaths
     {
         internal const string RTMFrameworkPath       = "MICROSOFT.NET\\FRAMEWORK\\V1.0.3705";
         internal const string EverettFrameworkPath   = "MICROSOFT.NET\\FRAMEWORK\\V1.1.4322";
@@ -20,7 +20,7 @@ static internal class LegacyFrameworkPaths
     /// Contains the names of the known elements in the VS.NET project file.
     /// </summary>
     /// <owner>RGoel</owner>
-    static internal class VSProjectElements
+    internal static class VSProjectElements
     {
         internal const string visualStudioProject = "VisualStudioProject";
         internal const string visualJSharp        = "VISUALJSHARP";
@@ -58,7 +58,7 @@ static internal class VSProjectElements
     /// Contains the names of the known elements in the VS.NET project file.
     /// </summary>
     /// <owner>RGoel</owner>
-    static internal class VSProjectAttributes
+    internal static class VSProjectAttributes
     {
         internal const string relPath             = "RelPath";
         internal const string name                = "Name";
@@ -102,7 +102,7 @@ static internal class VSProjectAttributes
     /// Contains the names of some of the hard-coded strings we'll be inserting into the newly converted MSBuild project file.
     /// </summary>
     /// <owner>RGoel</owner>
-    static internal class XMakeProjectStrings
+    internal static class XMakeProjectStrings
     {
         internal const string project                     = "Project";
         internal const string defaultTargets              = "Build";
diff --git a/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs b/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
index 6689ce4f3c3..30efb48ea82 100644
--- a/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
+++ b/src/Deprecated/Engine/Conditionals/CharacterUtilities.cs
@@ -5,28 +5,28 @@ namespace Microsoft.Build.BuildEngine
 {
     internal static class CharacterUtilities
     {
-        static internal bool IsNumberStart(char candidate)
+        internal static bool IsNumberStart(char candidate)
         {
             return candidate == '+' || candidate == '-' || candidate == '.' || char.IsDigit(candidate);
         }
 
-        static internal bool IsSimpleStringStart(char candidate)
+        internal static bool IsSimpleStringStart(char candidate)
         {
             return candidate == '_' || char.IsLetter(candidate);
         }
 
-        static internal bool IsSimpleStringChar(char candidate)
+        internal static bool IsSimpleStringChar(char candidate)
         {
             return IsSimpleStringStart(candidate) || char.IsDigit(candidate);
         }
 
-        static internal bool IsHexAlphabetic(char candidate)
+        internal static bool IsHexAlphabetic(char candidate)
         {
             return candidate == 'a' || candidate == 'b' || candidate == 'c' || candidate == 'd' || candidate == 'e' || candidate == 'f' ||
                 candidate == 'A' || candidate == 'B' || candidate == 'C' || candidate == 'D' || candidate == 'E' || candidate == 'F';
         }
 
-        static internal bool IsHexDigit(char candidate)
+        internal static bool IsHexDigit(char candidate)
         {
             return char.IsDigit(candidate) || IsHexAlphabetic(candidate);
         }
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
index c7648ee9523..ddb77d194ba 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
@@ -58,7 +58,7 @@ internal void EndEatingEvents()
         /// <summary>
         /// Shutdown the logging service as appropriate
         /// </summary>
-        virtual internal void Shutdown()
+        internal virtual void Shutdown()
         {
             ErrorUtilities.VerifyThrow(false, "This method should be defined in a subclass");
         }
@@ -184,14 +184,14 @@ internal void PostLoggingEvents(NodeLoggingEvent[] eventArray)
         /// in-proc implementation, this will actually raise the events. In the out-of-proc
         /// implementation, this will send the events from the node process to the engine.
         /// </summary>
-        abstract internal bool ProcessPostedLoggingEvents();
+        internal abstract bool ProcessPostedLoggingEvents();
         
         /// <summary>
         /// This method is to process a single build event, by default if this method is used
         /// the event should be posted and processed
         /// </summary>
         /// <param name="buildEventArgs"></param>
-        virtual internal void ProcessBuildEvent(BuildEventArgs buildEventArgs)
+        internal virtual void ProcessBuildEvent(BuildEventArgs buildEventArgs)
         {
             PostLoggingEvent(buildEventArgs);
             ProcessPostedLoggingEvents();
@@ -200,7 +200,7 @@ virtual internal void ProcessBuildEvent(BuildEventArgs buildEventArgs)
         /// <summary>
         /// Return true if the queue needs to be flushed
         /// </summary>
-        virtual internal bool NeedsFlush(long currentTickCount)
+        internal virtual bool NeedsFlush(long currentTickCount)
         {
             if (this.flushBuildEventsImmediatly)
             {
@@ -310,7 +310,7 @@ internal void LogCustomEvent(CustomBuildEventArgs e)
         /// <summary>
         /// Logs a low-priority comment with all registered loggers using the specified resource string.
         /// </summary>
-        virtual internal void LogComment(BuildEventContext buildEventContext, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogComment(BuildEventContext buildEventContext, string messageResourceName, params object[] messageArgs)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -325,7 +325,7 @@ virtual internal void LogComment(BuildEventContext buildEventContext, string mes
         /// <param name="importance"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-        virtual internal void LogComment(BuildEventContext buildEventContext, MessageImportance importance, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogComment(BuildEventContext buildEventContext, MessageImportance importance, string messageResourceName, params object[] messageArgs)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -338,7 +338,7 @@ virtual internal void LogComment(BuildEventContext buildEventContext, MessageImp
         /// <summary>
         /// Logs a custom-priority comment with all registered loggers using the given text.
         /// </summary>
-        virtual internal void LogCommentFromText(BuildEventContext buildEventContext,MessageImportance importance, string message)
+        internal virtual void LogCommentFromText(BuildEventContext buildEventContext,MessageImportance importance, string message)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -374,7 +374,7 @@ virtual internal void LogCommentFromText(BuildEventContext buildEventContext,Mes
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-        virtual internal void LogError(BuildEventContext location, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogError(BuildEventContext location, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             LogError(location, null, file, messageResourceName, messageArgs);
         }
@@ -387,7 +387,7 @@ virtual internal void LogError(BuildEventContext location, BuildEventFileInfo fi
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-        virtual internal void LogError(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogError(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need resource string for error message.");
 
@@ -407,7 +407,7 @@ virtual internal void LogError(BuildEventContext buildEventContext, string subca
         /// <param name="helpKeyword">Can be null.</param>
         /// <param name="file"></param>
         /// <param name="message"></param>
-        virtual internal void LogErrorFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message)
+        internal virtual void LogErrorFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
             ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
             ErrorUtilities.VerifyThrow(message != null, "Need error message.");
@@ -442,7 +442,7 @@ virtual internal void LogErrorFromText(BuildEventContext buildEventContext, stri
         /// </summary>
         /// <owner>SumedhK</owner>
         /// <param name="invalidProjectFileException"></param>
-        virtual internal void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException)
+        internal virtual void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException)
         {
             ErrorUtilities.VerifyThrow(invalidProjectFileException != null, "Need exception context.");
 
@@ -477,7 +477,7 @@ virtual internal void LogInvalidProjectFileError(BuildEventContext buildEventCon
         /// <owner>SumedhK</owner>
         /// <param name="exception"></param>
         /// <param name="file"></param>
-        virtual internal void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file)
+        internal virtual void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file)
         {
             LogFatalError(buildEventContext, exception, file, "FatalBuildError");
         }
@@ -490,7 +490,7 @@ virtual internal void LogFatalBuildError(BuildEventContext buildEventContext, Ex
         /// <param name="exception"></param>
         /// <param name="file"></param>
         /// <param name="taskName"></param>
-        virtual internal void LogFatalTaskError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
+        internal virtual void LogFatalTaskError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
             ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
 
@@ -506,7 +506,7 @@ virtual internal void LogFatalTaskError(BuildEventContext buildEventContext, Exc
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-        virtual internal void LogFatalError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogFatalError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need resource string for error message.");
 
@@ -542,7 +542,7 @@ virtual internal void LogFatalError(BuildEventContext buildEventContext, Excepti
         /// <param name="exception"></param>
         /// <param name="file"></param>
         /// <param name="taskName"></param>
-        virtual internal void LogTaskWarningFromException(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
+        internal virtual void LogTaskWarningFromException(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
             ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
             ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
@@ -569,7 +569,7 @@ virtual internal void LogTaskWarningFromException(BuildEventContext buildEventCo
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-         virtual internal void LogWarning(BuildEventContext buildEventContext, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+         internal virtual void LogWarning(BuildEventContext buildEventContext, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             LogWarning(buildEventContext,null, file, messageResourceName, messageArgs);
         }
@@ -582,7 +582,7 @@ virtual internal void LogWarning(BuildEventContext buildEventContext, BuildEvent
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-        virtual internal void LogWarning(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal virtual void LogWarning(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(messageResourceName != null, "Need resource string for warning message.");
 
@@ -602,7 +602,7 @@ virtual internal void LogWarning(BuildEventContext buildEventContext, string sub
         /// <param name="helpKeyword">Can be null.</param>
         /// <param name="file"></param>
         /// <param name="message"></param>
-        virtual internal void LogWarningFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
+        internal virtual void LogWarningFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
             ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
             ErrorUtilities.VerifyThrow(message != null, "Need warning message.");
@@ -644,7 +644,7 @@ virtual internal void LogWarningFromText(BuildEventContext buildEventContext, st
         /// <summary>
         /// Logs that the build has started with all loggers (only called on the main node)
         /// </summary>
-        virtual internal void LogBuildStarted()
+        internal virtual void LogBuildStarted()
         {
             // If we're only logging critical events, don't risk causing all the resources to load by formatting
             // a string that won't get emitted anyway.
@@ -666,7 +666,7 @@ virtual internal void LogBuildStarted()
         /// <summary>
         /// Logs that the build has finished with all loggers, except for forwarding loggers.
         /// </summary>
-        virtual internal void LogBuildStarted(int loggerId)
+        internal virtual void LogBuildStarted(int loggerId)
         {
             // If we're only logging critical events, don't risk causing all the resources to load by formatting
             // a string that won't get emitted anyway.
@@ -689,7 +689,7 @@ virtual internal void LogBuildStarted(int loggerId)
         /// Logs that the build has finished with all registered loggers.
         /// </summary>
         /// <param name="success"></param>
-        virtual internal void LogBuildFinished(bool success)
+        internal virtual void LogBuildFinished(bool success)
         {
             // If we're only logging critical events, don't risk causing all the resources to load by formatting
             // a string that won't get emitted anyway.
@@ -707,7 +707,7 @@ virtual internal void LogBuildFinished(bool success)
         /// <summary>
         /// Logs that the build has finished to a particular logger Id
         /// </summary>
-        virtual internal void LogBuildFinished(bool success, int loggerId)
+        internal virtual void LogBuildFinished(bool success, int loggerId)
         {
             // If we're only logging critical events, don't risk causing all the resources to load by formatting
             // a string that won't get emitted anyway.
@@ -734,7 +734,7 @@ virtual internal void LogBuildFinished(bool success, int loggerId)
         /// <param name="targetNames">target names</param>
         /// <param name="properties">properties list</param>
         /// <param name="items">items list</param>
-        virtual internal void LogProjectStarted(int projectId, BuildEventContext parentBuildEventContext, BuildEventContext projectBuildEventContext, string projectFile, string targetNames, IEnumerable properties, IEnumerable items)
+        internal virtual void LogProjectStarted(int projectId, BuildEventContext parentBuildEventContext, BuildEventContext projectBuildEventContext, string projectFile, string targetNames, IEnumerable properties, IEnumerable items)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -781,7 +781,7 @@ virtual internal void LogProjectStarted(int projectId, BuildEventContext parentB
         /// <owner>SumedhK</owner>
         /// <param name="projectFile"></param>
         /// <param name="success"></param>
-        virtual internal void LogProjectFinished(BuildEventContext buildEventContext, string projectFile, bool success)
+        internal virtual void LogProjectFinished(BuildEventContext buildEventContext, string projectFile, bool success)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -806,7 +806,7 @@ virtual internal void LogProjectFinished(BuildEventContext buildEventContext, st
         /// <param name="targetName">Name of target</param>
         /// <param name="projectFile">Main project file</param>
         /// <param name="projectFileOfTargetElement">Project file actually containing the target</param>
-        virtual internal void LogTargetStarted(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement)
+        internal virtual void LogTargetStarted(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -831,7 +831,7 @@ virtual internal void LogTargetStarted(BuildEventContext buildEventContext, stri
         /// <param name="projectFile">main project file</param>
         /// <param name="success"></param>
         /// <param name="projectFileOfTargetElement">project file actually containing the target</param>
-        virtual internal void LogTargetFinished(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, bool success)
+        internal virtual void LogTargetFinished(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, bool success)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -859,7 +859,7 @@ virtual internal void LogTargetFinished(BuildEventContext buildEventContext, str
         /// <param name="taskName"></param>
         /// <param name="projectFile"></param>
         /// <param name="projectFileOfTaskNode">project file actually containing the task</param>
-        virtual internal void LogTaskStarted(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
+        internal virtual void LogTaskStarted(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
         {
             if (!OnlyLogCriticalEvents)
             {
@@ -884,7 +884,7 @@ virtual internal void LogTaskStarted(BuildEventContext buildEventContext, string
         /// <param name="projectFile"></param>
         /// <param name="success"></param>
         /// <param name="projectFileOfTaskNode">project file actually containing the task</param>
-        virtual internal void LogTaskFinished(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, bool success)
+        internal virtual void LogTaskFinished(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, bool success)
         {
             if (!OnlyLogCriticalEvents)
             {
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
index 75bf624038a..83f518059c3 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
@@ -51,7 +51,7 @@ internal EngineLoggingServicesInProc(EventSource eventSource, bool onlyLogCritic
         /// This function logs out all the messages currently posted to the queue. The active queue is swapped
         /// with the secondary queue to enable posting of messages while this function is running
         /// </summary>
-        override internal bool ProcessPostedLoggingEvents()
+        internal override bool ProcessPostedLoggingEvents()
         {
             bool processedEvents = false;
             lastFlushTime = DateTime.Now.Ticks;
@@ -103,7 +103,7 @@ override internal bool ProcessPostedLoggingEvents()
         /// be posted to another logger
         /// </summary>
         /// <param name="buildEventArgs"></param>
-        override internal void ProcessBuildEvent(BuildEventArgs buildEventArgs)
+        internal override void ProcessBuildEvent(BuildEventArgs buildEventArgs)
         {
             engineEventSource.RaiseStronglyTypedEvent(buildEventArgs);
 
@@ -135,7 +135,7 @@ internal void UnregisterEventSource(int loggerId)
         /// <summary>
         /// Shutdown the logging service as appropriate
         /// </summary>
-        override internal void Shutdown()
+        internal override void Shutdown()
         {
             foreach (EventSource eventSource in eventSources.Values)
             {
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
index da04f14f2d0..990267a4730 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesOutProc.cs
@@ -49,7 +49,7 @@ internal EngineLoggingServicesOutProc(Node parentNode, ManualResetEvent flushReq
         /// This function is thread safe and is called both from the engine thread and communication threads to 
         /// ensure that the events are delivered in coherent order.
         /// </summary>
-        override internal bool ProcessPostedLoggingEvents()
+        internal override bool ProcessPostedLoggingEvents()
         {
             lock (loggingQueueReadLock)
             {
@@ -114,7 +114,7 @@ private void AddToCurrentArray(NodeLoggingEvent e)
         /// <summary>
         /// Shutdown the logging service as appropriate
         /// </summary>
-        override internal void Shutdown()
+        internal override void Shutdown()
         {
             // Do nothing
         }
diff --git a/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs b/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
index e13682f60aa..1702e79a0a2 100644
--- a/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
+++ b/src/Deprecated/Engine/Engine/NodeLoggingEvent.cs
@@ -66,7 +66,7 @@ internal BuildEventArgs BuildEvent
         /// The ID of the central logger to which this event should be forwarded. By default 
         /// all regular non-forwarded events are sent to all loggers registered on the parent.
         /// </summary>
-        virtual internal int LoggerId
+        internal virtual int LoggerId
         {
             get
             {
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
index 54915eebb4d..2a0be7b9617 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionModule.cs
@@ -158,7 +158,7 @@ internal long TaskExecutionTime
         /// This method passes the task outputs to the engine, it is virtual for testing purposes to
         /// create a mock TEM
         /// </summary>
-        virtual internal void PostTaskOutputs
+        internal virtual void PostTaskOutputs
         (
             int handleId,
             bool taskExecutedSuccessfully,
@@ -174,7 +174,7 @@ long executionTime
         /// This function implements the callback via the IBuildEngine interface
         /// </summary>
         /// <returns>result of call to engine</returns>
-        virtual internal bool BuildProjectFile
+        internal virtual bool BuildProjectFile
         (
             int handleId,
             string[] projectFileNames,
@@ -392,7 +392,7 @@ private void WaitForBuildResults(int handleId, BuildResult[] buildResultsLocal,
         /// Call into the engine to figure out the line and column number of the task XML node in the original
         /// project context
         /// </summary>
-        virtual internal void GetLineColumnOfXmlNode(int handleId, out int lineNumber, out int columnNumber)
+        internal virtual void GetLineColumnOfXmlNode(int handleId, out int lineNumber, out int columnNumber)
         {
             engineCallback.GetLineColumnOfXmlNode(handleId, out lineNumber, out columnNumber);
         }
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionState.cs b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
index 4ed1e6d3854..6d8bc34dbb5 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionState.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
@@ -120,7 +120,7 @@ internal bool ProfileExecution
         /// <summary>
         /// The thread procedure executes the tasks and calls callback once it is done
         /// </summary>
-        virtual internal void ExecuteTask()
+        internal virtual void ExecuteTask()
         {
             bool taskExecutedSuccessfully = true;
 
@@ -217,7 +217,7 @@ internal void NotifyOfWait(long waitStartTime)
         /// engine, Interface or a non sealed TaskEngine these methods can disappear.
         /// </summary>
         /// <returns></returns>
-        virtual internal bool TaskEngineExecuteTask(
+        internal virtual bool TaskEngineExecuteTask(
             TaskEngine taskEngine,
             TaskExecutionMode howTaskShouldBeExecuted,
             Lookup lookup
diff --git a/src/Deprecated/Engine/Engine/Utilities.cs b/src/Deprecated/Engine/Engine/Utilities.cs
index 6f7cb535570..79159f25c07 100644
--- a/src/Deprecated/Engine/Engine/Utilities.cs
+++ b/src/Deprecated/Engine/Engine/Utilities.cs
@@ -17,9 +17,9 @@ namespace Microsoft.Build.BuildEngine
     /// This class contains utility methods for the MSBuild engine.
     /// </summary>
     /// <owner>RGoel</owner>
-    static public class Utilities
+    public static class Utilities
     {
-        private readonly static Regex singlePropertyRegex = new Regex(@"^\$\(([^\$\(\)]*)\)$");
+        private static readonly Regex singlePropertyRegex = new Regex(@"^\$\(([^\$\(\)]*)\)$");
 
         /// <summary>
         /// Update our table which keeps track of all the properties that are referenced
diff --git a/src/Deprecated/Engine/Errors/InternalLoggerException.cs b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
index 3926d8504db..c215f8743aa 100644
--- a/src/Deprecated/Engine/Errors/InternalLoggerException.cs
+++ b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
@@ -126,7 +126,7 @@ private InternalLoggerException(SerializationInfo info, StreamingContext context
         /// <param name="info"></param>
         /// <param name="context"></param>
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs b/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
index 2f08d3348e9..2926a37aa7a 100644
--- a/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
+++ b/src/Deprecated/Engine/Errors/InvalidProjectFileException.cs
@@ -97,7 +97,7 @@ private InvalidProjectFileException(SerializationInfo info, StreamingContext con
         /// <param name="info"></param>
         /// <param name="context"></param>
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
index 4c458782833..30e5f1a4c6a 100644
--- a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
@@ -90,7 +90,7 @@ public InvalidToolsetDefinitionException(string message, string errorCode, Excep
         /// <param name="info"></param>
         /// <param name="context"></param>
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             ErrorUtilities.VerifyThrowArgumentNull(info, nameof(info));
 
diff --git a/src/Deprecated/Engine/Errors/RemoteErrorException.cs b/src/Deprecated/Engine/Errors/RemoteErrorException.cs
index 00839224075..2994ec89144 100644
--- a/src/Deprecated/Engine/Errors/RemoteErrorException.cs
+++ b/src/Deprecated/Engine/Errors/RemoteErrorException.cs
@@ -46,7 +46,7 @@ private RemoteErrorException(SerializationInfo info, StreamingContext context)
         /// <param name="info"></param>
         /// <param name="context"></param>
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs b/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
index 01f0f7a78e2..d52698904d1 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalCallDescriptor.cs
@@ -47,14 +47,14 @@ internal LocalCallType CallType
                 return this.callType;
             }
         }
-        virtual internal bool NeedsReply
+        internal virtual bool NeedsReply
         {
             get
             {
                 return false;
             }
         }
-        virtual internal bool IsReply
+        internal virtual bool IsReply
         {
             get
             {
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
index f1b17e6902e..cc192735e22 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeProviderGlobalNames.cs
@@ -18,7 +18,7 @@ static class LocalNodeProviderGlobalNames
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeActiveEventName(int nodeNumber)
+        internal static string NodeActiveEventName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -32,7 +32,7 @@ static internal string NodeActiveEventName(int nodeNumber)
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeInUseEventName(int nodeNumber)
+        internal static string NodeInUseEventName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -47,7 +47,7 @@ static internal string NodeInUseEventName(int nodeNumber)
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeErrorShutdownEventName(int nodeNumber)
+        internal static string NodeErrorShutdownEventName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -63,7 +63,7 @@ static internal string NodeErrorShutdownEventName(int nodeNumber)
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeReserveEventName(int nodeNumber)
+        internal static string NodeReserveEventName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -110,7 +110,7 @@ internal static string NodeActivedEventName(int nodeNumber)
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeInputMemoryName(int nodeNumber)
+        internal static string NodeInputMemoryName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -124,7 +124,7 @@ static internal string NodeInputMemoryName(int nodeNumber)
         /// </summary>
         /// <param name="nodeNumber"></param>
         /// <returns></returns>
-        static internal string NodeOutputMemoryName(int nodeNumber)
+        internal static string NodeOutputMemoryName(int nodeNumber)
         {
             if (nodePostfix == null)
             {
@@ -138,7 +138,7 @@ static internal string NodeOutputMemoryName(int nodeNumber)
         /// <summary>
         /// Use reflection to figure out the version of Microsoft.Build.Engine.dll
         /// </summary>
-        static private void InitializeGlobalNamePostFixValues()
+        private static void InitializeGlobalNamePostFixValues()
         {
             AssemblyName name = new AssemblyName(Assembly.GetExecutingAssembly().FullName);
             string engineVersion = name.Version.ToString();
diff --git a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
index bc9f6226b04..16c1a4abdf4 100644
--- a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.BuildEngine
     internal delegate void WriteLinePrettyFromResourceDelegate(int indentLevel, string resourceString, params object[] args);
     #endregion
 
-    abstract internal class BaseConsoleLogger : INodeLogger
+    internal abstract class BaseConsoleLogger : INodeLogger
     {
         #region Properties
         /// <summary>
@@ -764,7 +764,7 @@ internal virtual void PrintCounterMessage(WriteLinePrettyFromResourceDelegate Wr
             /// Returns an IComparer that will put erformance counters 
             /// in descending order by elapsed time.
             /// </summary>
-            static internal IComparer DescendingByElapsedTimeComparer
+            internal static IComparer DescendingByElapsedTimeComparer
             {
                 get { return new DescendingByElapsedTime(); }
             }
diff --git a/src/Deprecated/Engine/Logging/LogFormatter.cs b/src/Deprecated/Engine/Logging/LogFormatter.cs
index 104ddd98f57..83b8131d4fd 100644
--- a/src/Deprecated/Engine/Logging/LogFormatter.cs
+++ b/src/Deprecated/Engine/Logging/LogFormatter.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.BuildEngine
     /// Utility helper functions for formatting logger output.
     /// </summary>
     /// <owner>JomoF</owner>
-    static internal class LogFormatter 
+    internal static class LogFormatter 
     {
         /// <summary>
         /// Formats the timestamp in the log as  Hours:Minutes:Seconds.Milliseconds
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
index f812a865313..c43a46692cb 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1455,7 +1455,7 @@ private ProjectFullKey GetFullProjectKey(BuildEventContext e)
         /// </summary>
         /// <param name="scopeName">Task name or target name.</param>
         /// <param name="table">Table that has tasks or targets.</param>
-        internal new static MPPerformanceCounter GetPerformanceCounter(string scopeName, ref Hashtable table)
+        internal static new MPPerformanceCounter GetPerformanceCounter(string scopeName, ref Hashtable table)
         {
             // Lazily construct the performance counter table.
             if (table == null)
diff --git a/src/Deprecated/Engine/Resources/AssemblyResources.cs b/src/Deprecated/Engine/Resources/AssemblyResources.cs
index 294e3b103f4..86fb684811f 100644
--- a/src/Deprecated/Engine/Resources/AssemblyResources.cs
+++ b/src/Deprecated/Engine/Resources/AssemblyResources.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// This class provides access to the assembly's resources.
     /// </summary>
     /// <owner>SumedhK</owner>
-    static internal class AssemblyResources
+    internal static class AssemblyResources
     {
         /// <summary>
         /// A slot for msbuild.exe to add a resource manager over its own resources, that can also be consulted.
diff --git a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
index 1cac0aa734f..295c9001b5a 100644
--- a/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
+++ b/src/Deprecated/Engine/Shared/AssemblyNameExtension.cs
@@ -17,12 +17,12 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// between the two is done lazily on demand.
     /// </summary>
     [Serializable]
-    sealed internal class AssemblyNameExtension
+    internal sealed class AssemblyNameExtension
     {
         private AssemblyName asAssemblyName = null;
         private string asString = null;
 
-        static private AssemblyNameExtension unnamedAssembly = new AssemblyNameExtension();
+        private static AssemblyNameExtension unnamedAssembly = new AssemblyNameExtension();
 
         /// <summary>
         /// Construct an unnamed assembly.
@@ -247,7 +247,7 @@ internal int CompareTo(AssemblyNameExtension that)
         /// Get a hash code for this assembly name.
         /// </summary>
         /// <returns></returns>
-        new internal int GetHashCode()
+        internal new int GetHashCode()
         {
             // Ok, so this isn't a great hashing algorithm. However, basenames with different 
             // versions or PKTs are relatively uncommon and so collisions should be low.
@@ -500,7 +500,7 @@ internal static string EscapeDisplayNameCharacters(string displayName)
         /// Convert to a string for display.
         /// </summary>
         /// <returns></returns>
-        override public string ToString()
+        public override string ToString()
         {
             CreateFullName();
             return this.asString;
diff --git a/src/Deprecated/Engine/Shared/EscapingUtilities.cs b/src/Deprecated/Engine/Shared/EscapingUtilities.cs
index d339c3e0492..3c6ecf1eb1c 100644
--- a/src/Deprecated/Engine/Shared/EscapingUtilities.cs
+++ b/src/Deprecated/Engine/Shared/EscapingUtilities.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// in the MSBuild file format.
     /// </summary>
     /// <owner>RGoel</owner>
-    static internal class EscapingUtilities
+    internal static class EscapingUtilities
     {
         /// <summary>
         /// Replaces all instances of %XX in the input string with the character represented
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index a1e97f9ab46..9c6e9ef2257 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// each class get pulled into the resulting assembly.
     /// </summary>
     /// <owner>SumedhK</owner>
-    static internal class FileUtilities
+    internal static class FileUtilities
     {
         #region Item-spec modifiers
 
@@ -25,7 +25,7 @@ static internal class FileUtilities
         /// Encapsulates the definitions of the item-spec modifiers a.k.a. reserved item metadata.
         /// </summary>
         /// <owner>SumedhK</owner>
-        static internal class ItemSpecModifiers
+        internal static class ItemSpecModifiers
         {
             // NOTE: If you add an item here that starts with a new letter, you need to update the case 
             // statements in IsItemSpecModifier and IsDerivableItemSpecModifier.
diff --git a/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs b/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
index 22360872b7b..f9ad6424deb 100644
--- a/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
+++ b/src/Deprecated/Engine/Shared/ProjectConfigurationInSolution.cs
@@ -46,7 +46,7 @@ internal bool IncludeInBuild
         /// <param name="platformName"></param>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
-        static private string RemoveSpaceFromAnyCpuPlatform(string platformName)
+        private static string RemoveSpaceFromAnyCpuPlatform(string platformName)
         {
             if (string.Equals(platformName, "Any CPU", StringComparison.OrdinalIgnoreCase))
             {
diff --git a/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs b/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
index 7f34c4a6499..a7440beb658 100644
--- a/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ProjectFileErrorUtilities.cs
@@ -7,7 +7,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// This class contains methods that are useful for error checking and validation of project files.
     /// </summary>
     /// <owner>SumedhK</owner>
-    static internal class ProjectFileErrorUtilities
+    internal static class ProjectFileErrorUtilities
     {
         /// <summary>
         /// This method is used to flag errors in the project file being processed. Do NOT use this method in place of
diff --git a/src/Deprecated/Engine/Shared/ProjectInSolution.cs b/src/Deprecated/Engine/Shared/ProjectInSolution.cs
index c3cf27ccd70..4737eee162f 100644
--- a/src/Deprecated/Engine/Shared/ProjectInSolution.cs
+++ b/src/Deprecated/Engine/Shared/ProjectInSolution.cs
@@ -337,7 +337,7 @@ internal string GetUniqueProjectName()
         /// <param name="projectName">The name to be cleansed</param>
         /// <returns>string</returns>
         /// <owner>KieranMo</owner>
-        static private string CleanseProjectName(string projectName)
+        private static string CleanseProjectName(string projectName)
         {
             ErrorUtilities.VerifyThrow(projectName != null, "Null strings not allowed.");
 
@@ -368,7 +368,7 @@ static private string CleanseProjectName(string projectName)
         /// <param name="uniqueProjectName">The unique name for the project</param>
         /// <returns>string</returns>
         /// <owner>KieranMo</owner>
-        static internal string DisambiguateProjectTargetName(string uniqueProjectName)
+        internal static string DisambiguateProjectTargetName(string uniqueProjectName)
         {
             // Test our unique project name against those names that collide with Solution
             // entry point targets
diff --git a/src/Deprecated/Engine/Shared/XmlUtilities.cs b/src/Deprecated/Engine/Shared/XmlUtilities.cs
index 69b8ea969ea..3fcaa66ee3a 100644
--- a/src/Deprecated/Engine/Shared/XmlUtilities.cs
+++ b/src/Deprecated/Engine/Shared/XmlUtilities.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// This class contains utility methods for XML manipulation.
     /// </summary>
     /// <owner>SumedhK</owner>
-    static internal class XmlUtilities
+    internal static class XmlUtilities
     {
         /// <summary>
         /// This method renames an XML element.  Well, actually you can't directly
diff --git a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
index 4aacda51882..e35df91df0e 100644
--- a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.BuildEngine
     /// This class is used to generate an MSBuild wrapper project for a solution file or standalone VC project.
     /// </summary>
     /// <owner>LukaszG, RGoel</owner>
-    static public class SolutionWrapperProject
+    public static class SolutionWrapperProject
     {
         private const string webProjectOverrideFolder = "_PublishedWebsites";
         private const string cacheSolutionConfigurationPropertyName = "_SolutionProjectConfiguration";
@@ -34,7 +34,7 @@ static public class SolutionWrapperProject
         /// <param name="toolsVersionOverride">May be null.  If non-null, contains the ToolsVersion passed in on the command line</param>\
         /// <param name="projectBuildEventContext">An event context for logging purposes.</param>
         /// <returns></returns>
-        static public string Generate(string solutionPath, string toolsVersionOverride, BuildEventContext projectBuildEventContext)
+        public static string Generate(string solutionPath, string toolsVersionOverride, BuildEventContext projectBuildEventContext)
         {
             Project msbuildProject = new Project();
 
@@ -57,7 +57,7 @@ static public string Generate(string solutionPath, string toolsVersionOverride,
         /// Any /tv:xxx switch would cause a value here.</param>
         /// <returns></returns>
         /// <owner>RGoel</owner>
-        static internal void Generate(SolutionParser solution, Project msbuildProject, string toolsVersionOverride, BuildEventContext projectBuildEventContext)
+        internal static void Generate(SolutionParser solution, Project msbuildProject, string toolsVersionOverride, BuildEventContext projectBuildEventContext)
         {
             // Validate against our minimum for upgradable projects
             ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(solution.Version >= SolutionParser.slnFileMinVersion,
@@ -503,7 +503,7 @@ private static string DetermineChildProjectToolsVersion(Engine parentEngine, str
         /// <param name="platformName"></param>
         /// <returns></returns>
         /// <owner>RGoel, LukaszG</owner>
-        static private BuildTask AddMSBuildTaskElement
+        private static BuildTask AddMSBuildTaskElement
         (
             Target target,
             string projectPath,
@@ -548,7 +548,7 @@ bool specifyProjectToolsVersion
         /// <param name="targetOutputItemName">The name of the item exposing this target's outputs.  May be null.</param>
         /// <param name="subTargetName"></param>
         /// <owner>RGoel, LukaszG</owner>
-        static private void AddTargetForManagedProject
+        private static void AddTargetForManagedProject
         (
             Project msbuildProject,
             SolutionParser solution,
@@ -657,7 +657,7 @@ string subTargetName
         /// <param name="fullConfigurationName"></param>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
-        static private BuildTask AddResolveVCProjectOutputTaskElement
+        private static BuildTask AddResolveVCProjectOutputTaskElement
         (
             Target target,
             string solutionPath,
@@ -690,7 +690,7 @@ string fullConfigurationName
         /// <param name="outputImportLibraryItemName"></param>
         /// <param name="addedReferenceGuids"></param>
         /// <owner>LukaszG</owner>
-        static private void AddResolveProjectReferenceTasks
+        private static void AddResolveProjectReferenceTasks
         (
             SolutionParser solution,
             Project msbuildProject,
@@ -808,7 +808,7 @@ out string addedReferenceGuids
         /// <param name="projectConfigurationName"></param>
         /// <returns>The path to the temporary project file</returns>
         /// <owner>LukaszG</owner>
-        static private string AddCreateTemporaryVCProjectTasks
+        private static string AddCreateTemporaryVCProjectTasks
         (
             SolutionParser solution,
             Project msbuildProject,
@@ -890,7 +890,7 @@ string projectConfigurationName
         /// <param name="proj"></param>
         /// <param name="subTargetName"></param>
         /// <owner>LukaszG, RGoel</owner>
-        static private void AddTargetForVCProject
+        private static void AddTargetForVCProject
         (
             Project msbuildProject,
             SolutionParser solution,
@@ -1000,7 +1000,7 @@ string subTargetName
         /// </summary>
         /// <param name="msbuildProject"></param>
         /// <owner>RGoel</owner>
-        static private void AddTargetForGetFrameworkPathAndRedistList
+        private static void AddTargetForGetFrameworkPathAndRedistList
             (
             Project msbuildProject
             )
@@ -1062,7 +1062,7 @@ Project msbuildProject
         /// <param name="proj"></param>
         /// <param name="conditionDescribingValidConfigurations"></param>
         /// <owner>RGoel</owner>
-        static private void AddTaskForAspNetCompiler
+        private static void AddTaskForAspNetCompiler
             (
             Target target,
             ProjectInSolution proj,
@@ -1097,7 +1097,7 @@ string conditionDescribingValidConfigurations
         /// <param name="referenceItemName"></param>
         /// <param name="conditionDescribingValidConfigurations"></param>
         /// <owner>RGoel</owner>
-        static private void AddTasksToCopyAllDependenciesIntoBinDir
+        private static void AddTasksToCopyAllDependenciesIntoBinDir
             (
             Target target,
             ProjectInSolution proj,
@@ -1156,7 +1156,7 @@ string conditionDescribingValidConfigurations
         /// <param name="aspNetCompilerParameters"></param>
         /// <param name="solutionFile"></param>
         /// <owner>RGoel</owner>
-        static private void AddPropertyGroupForAspNetConfiguration
+        private static void AddPropertyGroupForAspNetConfiguration
             (
             Project msbuildProject,
             ProjectInSolution proj,
@@ -1241,7 +1241,7 @@ string solutionFile
         /// <param name="proj"></param>
         /// <param name="referenceItemName"></param>
         /// <owner>RGoel</owner>
-        static private void AddTasksToResolveAutoRefreshFileReferences
+        private static void AddTasksToResolveAutoRefreshFileReferences
             (
             Target target,
             ProjectInSolution proj,
@@ -1282,7 +1282,7 @@ string referenceItemName
         /// <param name="proj"></param>
         /// <returns></returns>
         /// <owner>RGoel</owner>
-        static private string ComputeTargetConditionForWebProject
+        private static string ComputeTargetConditionForWebProject
             (
             SolutionParser solution,
             ProjectInSolution proj
@@ -1333,7 +1333,7 @@ ProjectInSolution proj
         /// <param name="proj"></param>
         /// <param name="subTargetName"></param>
         /// <owner>RGoel</owner>
-        static private void AddTargetForWebProject
+        private static void AddTargetForWebProject
         (
             Project msbuildProject,
             SolutionParser solution,
@@ -1454,7 +1454,7 @@ string subTargetName
         /// <param name="propertyName"></param>
         /// <returns>A safe property name that can be used as an XML element name.</returns>
         /// <owner>RGoel</owner>
-        static private string GenerateSafePropertyName
+        private static string GenerateSafePropertyName
             (
             ProjectInSolution proj,
             string propertyName
@@ -1498,7 +1498,7 @@ private static string MakeIntoSafeItemName(string name)
         /// <param name="textResourceName">Resource string name to use in the tag text</param>
         /// <param name="args">Additional parameters to pass to FormatString</param>
         /// <owner>LukaszG</owner>
-        static internal BuildTask AddErrorWarningMessageElement(Target target, string elementType,
+        internal static BuildTask AddErrorWarningMessageElement(Target target, string elementType,
             bool treatAsLiteral, string textResourceName, params object[] args)
         {
             string code;
@@ -1530,7 +1530,7 @@ static internal BuildTask AddErrorWarningMessageElement(Target target, string el
         /// <param name="errorMessage">Optional detailed error message to print out in case we already tried accessing the
         /// project file before and failed.</param>
         /// <owner>RGoel</owner>
-        static private void AddTargetForUnknownProjectType
+        private static void AddTargetForUnknownProjectType
         (
             Project msbuildProject,
             SolutionParser solution,
@@ -1595,7 +1595,7 @@ string errorMessage
         /// <param name="subTargetName">The target to call within the project that's being added.</param>
         /// <param name="projectsByDependencyLevel"></param>
         /// <owner>RGoel</owner>
-        static private Target AddAllDependencyTarget
+        private static Target AddAllDependencyTarget
         (
             Project msbuildProject,
             string targetName,
@@ -1671,7 +1671,7 @@ Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel
         /// <param name="subTargetName"></param>
         /// <returns></returns>
         /// <owner>RGoel</owner>
-        static private string GetProjectDependencies(SolutionParser solution, ProjectInSolution project, string subTargetName)
+        private static string GetProjectDependencies(SolutionParser solution, ProjectInSolution project, string subTargetName)
         {
             ErrorUtilities.VerifyThrow(project != null, "We should always have a project for this method");
             StringBuilder dependencies = new StringBuilder();
@@ -1708,7 +1708,7 @@ static private string GetProjectDependencies(SolutionParser solution, ProjectInS
         /// <param name="dependencyLevel"></param>
         /// <param name="subTargetName"></param>
         /// <returns></returns>
-        static private string GetAllNonMSBuildProjectDependencies
+        private static string GetAllNonMSBuildProjectDependencies
         (
             Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel,
             int dependencyLevel,
@@ -1756,7 +1756,7 @@ string subTargetName
         /// <param name="configuration"></param>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
-        static private string GetConditionStringForConfiguration(ConfigurationInSolution configuration)
+        private static string GetConditionStringForConfiguration(ConfigurationInSolution configuration)
         {
             return string.Format(CultureInfo.InvariantCulture, " ('$(Configuration)' == '{0}') and ('$(Platform)' == '{1}') ",
                 EscapingUtilities.Escape(configuration.ConfigurationName),
@@ -1769,7 +1769,7 @@ static private string GetConditionStringForConfiguration(ConfigurationInSolution
         /// <param name="msbuildProject"></param>
         /// <param name="solution"></param>
         /// <owner>LukaszG</owner>
-        static private void AddConfigurationPlatformDefaults
+        private static void AddConfigurationPlatformDefaults
         (
             Project msbuildProject,
             SolutionParser solution
@@ -1792,7 +1792,7 @@ SolutionParser solution
         /// <param name="solution"></param>
         /// <param name="solutionConfiguration"></param>
         /// <owner>LukaszG</owner>
-        static internal void AddPropertyGroupForSolutionConfiguration
+        internal static void AddPropertyGroupForSolutionConfiguration
         (
             Project msbuildProject,
             SolutionParser solution,
@@ -1837,7 +1837,7 @@ ConfigurationInSolution solutionConfiguration
         /// </summary>
         /// <param name="msbuildProject"></param>
         /// <owner>LukaszG</owner>
-        static private void AddVenusConfigurationDefaults
+        private static void AddVenusConfigurationDefaults
         (
             Project msbuildProject
         )
@@ -1853,7 +1853,7 @@ Project msbuildProject
         /// <param name="msbuildProject"></param>
         /// <param name="solution"></param>
         /// <owner>LukaszG</owner>
-        static private void AddGlobalProperties(Project msbuildProject, SolutionParser solution)
+        private static void AddGlobalProperties(Project msbuildProject, SolutionParser solution)
         {
             BuildPropertyGroup propertyGroup = msbuildProject.AddNewPropertyGroup(true /* insertAtEndOfProject = true */);
 
@@ -1894,7 +1894,7 @@ static private void AddGlobalProperties(Project msbuildProject, SolutionParser s
         /// </summary>
         /// <param name="solution"></param>
         /// <owner>LukaszG</owner>
-        static private void AddFakeReleaseSolutionConfigurationIfNecessary(SolutionParser solution)
+        private static void AddFakeReleaseSolutionConfigurationIfNecessary(SolutionParser solution)
         {
             if (solution.ContainsWebProjects)
             {
@@ -1920,7 +1920,7 @@ static private void AddFakeReleaseSolutionConfigurationIfNecessary(SolutionParse
         /// </summary>
         /// <param name="msbuildProject"></param>
         /// <owner>LukaszG</owner>
-        static private void AddInitialTargets(Project msbuildProject)
+        private static void AddInitialTargets(Project msbuildProject)
         {
             Target initialTarget = msbuildProject.Targets.AddNewTarget("ValidateSolutionConfiguration");
 
@@ -1952,7 +1952,7 @@ static private void AddInitialTargets(Project msbuildProject)
         /// </summary>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
-        static internal string PredictActiveSolutionConfigurationName(SolutionParser solution, Engine parentEngine)
+        internal static string PredictActiveSolutionConfigurationName(SolutionParser solution, Engine parentEngine)
         {
             string candidateFullSolutionConfigurationName = DetermineLikelyActiveSolutionConfiguration(solution, parentEngine);
 
@@ -2011,7 +2011,7 @@ private static string DetermineLikelyActiveSolutionConfiguration(SolutionParser
         /// we know what build order we should use when building the solution.
         /// </summary>
         /// <owner>LukaszG</owner>
-        static private void ScanProjectDependencies(SolutionParser solution, Engine parentEngine, string childProjectToolsVersion, string fullSolutionConfigurationName, BuildEventContext projectBuildEventContext)
+        private static void ScanProjectDependencies(SolutionParser solution, Engine parentEngine, string childProjectToolsVersion, string fullSolutionConfigurationName, BuildEventContext projectBuildEventContext)
         {
             // Don't bother with all this if the solution configuration doesn't even exist.
             if (fullSolutionConfigurationName == null)
@@ -2157,7 +2157,7 @@ static private void ScanProjectDependencies(SolutionParser solution, Engine pare
         /// <param name="parentEngine">The engine handling the conversion</param>
         /// <param name="projectBuildEventContext">The build event context</param>
         /// <param name="dependencyGuid">The guid, in string form, of the dependency project</param>
-        static private void AddDependencyByGuid(SolutionParser solution, ProjectInSolution project, Engine parentEngine, BuildEventContext projectBuildEventContext, string dependencyGuid)
+        private static void AddDependencyByGuid(SolutionParser solution, ProjectInSolution project, Engine parentEngine, BuildEventContext projectBuildEventContext, string dependencyGuid)
         {
             if (!String.IsNullOrEmpty(dependencyGuid))
             {
@@ -2183,7 +2183,7 @@ static private void AddDependencyByGuid(SolutionParser solution, ProjectInSoluti
         /// <param name="solution"></param>
         /// <param name="parentEngine"></param>
         /// <owner>LukaszG</owner>
-        static internal void ConvertVcToVcDependenciesToReferences(SolutionParser solution, Engine parentEngine, BuildEventContext projectBuildEventContext)
+        internal static void ConvertVcToVcDependenciesToReferences(SolutionParser solution, Engine parentEngine, BuildEventContext projectBuildEventContext)
         {
             // Go through the list of the projects in solution looking for VC projects
             foreach (ProjectInSolution project in solution.ProjectsInOrder)
@@ -2221,7 +2221,7 @@ static internal void ConvertVcToVcDependenciesToReferences(SolutionParser soluti
         /// <param name="project"></param>
         /// <param name="solution"></param>
         /// <param name="projectsByDependencyLevel"></param>
-        static private void AssignDependencyLevel(ProjectInSolution project, SolutionParser solution, Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel)
+        private static void AssignDependencyLevel(ProjectInSolution project, SolutionParser solution, Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel)
         {
             // if we ever try to recurse into a project whose dependency level we're calculating above,
             // we have a circular dependency.
@@ -2269,7 +2269,7 @@ static private void AssignDependencyLevel(ProjectInSolution project, SolutionPar
         /// </summary>
         /// <param name="solution"></param>
         /// <param name="projectsByDependencyLevel"></param>
-        static private void AssignDependencyLevels(SolutionParser solution, Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel)
+        private static void AssignDependencyLevels(SolutionParser solution, Dictionary<int, List<ProjectInSolution>> projectsByDependencyLevel)
         {
             foreach (ProjectInSolution project in solution.ProjectsInOrder)
             {
diff --git a/src/Deprecated/Engine/Solution/VCProjectParser.cs b/src/Deprecated/Engine/Solution/VCProjectParser.cs
index 725f09023a3..9c1d7f4ecd9 100644
--- a/src/Deprecated/Engine/Solution/VCProjectParser.cs
+++ b/src/Deprecated/Engine/Solution/VCProjectParser.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.BuildEngine
 {
-	static internal class VCProjectParser
+	internal static class VCProjectParser
 	{
         /// <summary>
         /// For a given VC project, retrieves the projects it references 
@@ -15,7 +15,7 @@ static internal class VCProjectParser
         /// <param name="projectPath"></param>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
-        static internal List<string> GetReferencedProjectGuids(XmlDocument project)
+        internal static List<string> GetReferencedProjectGuids(XmlDocument project)
         {
             List<string> referencedProjectGuids = new List<string>();
 
diff --git a/src/Deprecated/Engine/Solution/VCWrapperProject.cs b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
index e20945c6112..09a8ed29f21 100644
--- a/src/Deprecated/Engine/Solution/VCWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
@@ -20,7 +20,7 @@ internal class VCWrapperProject
         /// <param name="targetName"></param>
         /// <param name="subTargetName"></param>
         /// <owner>RGoel</owner>
-        static private void AddVCBuildTarget
+        private static void AddVCBuildTarget
         (
             Project msbuildProject,
             string projectPath,
@@ -55,7 +55,7 @@ string subTargetName
         /// <param name="platformName">The platform parameter to VCBuild</param>
         /// <param name="fullConfigurationName">Configuration property value</param>
         /// <returns></returns>
-        static internal BuildTask AddVCBuildTaskElement
+        internal static BuildTask AddVCBuildTaskElement
         (
             Project msbuildProject,
             Target target,
@@ -133,7 +133,7 @@ string fullConfigurationName
         /// This method generates an XmlDocument representing an MSBuild project wrapper for a VC project
         /// </summary>
         /// <owner>LukaszG</owner>
-        static internal XmlDocument GenerateVCWrapperProject(Engine parentEngine, string vcProjectFilename, string toolsVersion)
+        internal static XmlDocument GenerateVCWrapperProject(Engine parentEngine, string vcProjectFilename, string toolsVersion)
         {
             string projectPath = Path.GetFullPath(vcProjectFilename);
             Project msbuildProject;
@@ -187,13 +187,13 @@ static internal XmlDocument GenerateVCWrapperProject(Engine parentEngine, string
         /// <summary>
         /// Hint to give the VCBuild task to help it find vcbuild.exe.
         /// </summary>
-        static private string path;
+        private static string path;
 
         /// <summary>
         /// Hint to give the VCBuild task to help it find vcbuild.exe.
         /// Directory in which vcbuild.exe is found.
         /// </summary>
-        static internal string VCBuildLocationHint
+        internal static string VCBuildLocationHint
         {
             get
             {
diff --git a/src/Framework/LoggerException.cs b/src/Framework/LoggerException.cs
index f99fab5d903..3432b373b2d 100644
--- a/src/Framework/LoggerException.cs
+++ b/src/Framework/LoggerException.cs
@@ -96,7 +96,7 @@ protected LoggerException(SerializationInfo info, StreamingContext context)
 #if FEATURE_SECURITY_PERMISSIONS
         [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter = true)]
 #endif
-        override public void GetObjectData(SerializationInfo info, StreamingContext context)
+        public override void GetObjectData(SerializationInfo info, StreamingContext context)
         {
             base.GetObjectData(info, context);
 
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 17cdbbe64d1..b33ff8ca3e7 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -534,7 +534,7 @@ public static int GetLogicalCoreCount()
     /// https://github.com/dotnet/runtime/blob/221ad5b728f93489655df290c1ea52956ad8f51c/src/libraries/System.Runtime.Extensions/src/System/Environment.Windows.cs#L171-L210
     /// </summary>
     [SupportedOSPlatform("windows")]
-    private unsafe static int GetLogicalCoreCountOnWindows()
+    private static unsafe int GetLogicalCoreCountOnWindows()
     {
         uint len = 0;
         const int ERROR_INSUFFICIENT_BUFFER = 122;
@@ -1432,7 +1432,7 @@ internal static List<KeyValuePair<int, SafeProcessHandle>> GetChildProcessIds(in
     /// Internal, optimized GetCurrentDirectory implementation that simply delegates to the native method
     /// </summary>
     /// <returns></returns>
-    internal unsafe static string GetCurrentDirectory()
+    internal static unsafe string GetCurrentDirectory()
     {
 #if FEATURE_LEGACY_GETCURRENTDIRECTORY
         if (IsWindows)
@@ -1447,7 +1447,7 @@ internal unsafe static string GetCurrentDirectory()
     }
 
     [SupportedOSPlatform("windows")]
-    private unsafe static int GetCurrentDirectoryWin32(int nBufferLength, char* lpBuffer)
+    private static unsafe int GetCurrentDirectoryWin32(int nBufferLength, char* lpBuffer)
     {
         int pathLength = GetCurrentDirectory(nBufferLength, lpBuffer);
         VerifyThrowWin32Result(pathLength);
@@ -1455,7 +1455,7 @@ private unsafe static int GetCurrentDirectoryWin32(int nBufferLength, char* lpBu
     }
 
     [SupportedOSPlatform("windows")]
-    internal unsafe static string GetFullPath(string path)
+    internal static unsafe string GetFullPath(string path)
     {
         int bufferSize = GetFullPathWin32(path, 0, null, IntPtr.Zero);
         char* buffer = stackalloc char[bufferSize];
@@ -1465,7 +1465,7 @@ internal unsafe static string GetFullPath(string path)
     }
 
     [SupportedOSPlatform("windows")]
-    private unsafe static int GetFullPathWin32(string target, int bufferLength, char* buffer, IntPtr mustBeZero)
+    private static unsafe int GetFullPathWin32(string target, int bufferLength, char* buffer, IntPtr mustBeZero)
     {
         int pathLength = GetFullPathName(target, bufferLength, buffer, mustBeZero);
         VerifyThrowWin32Result(pathLength);
@@ -1479,7 +1479,7 @@ private unsafe static int GetFullPathWin32(string target, int bufferLength, char
     /// <param name="len">The length of the buffer.</param>
     /// <param name="s">The string.</param>
     /// <returns>True only if the contents of <paramref name="s"/> and the first <paramref name="len"/> characters in <paramref name="buffer"/> are identical.</returns>
-    private unsafe static bool AreStringsEqual(char* buffer, int len, string s)
+    private static unsafe bool AreStringsEqual(char* buffer, int len, string s)
     {
         if (len != s.Length)
         {
@@ -1573,7 +1573,7 @@ internal static void VerifyThrowWin32Result(int result)
     [SuppressMessage("Microsoft.Usage", "CA2205:UseManagedEquivalentsOfWin32Api", Justification = "Using unmanaged equivalent for performance reasons")]
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
     [SupportedOSPlatform("windows")]
-    internal unsafe static extern int GetCurrentDirectory(int nBufferLength, char* lpBuffer);
+    internal static extern unsafe int GetCurrentDirectory(int nBufferLength, char* lpBuffer);
 
     [SuppressMessage("Microsoft.Usage", "CA2205:UseManagedEquivalentsOfWin32Api", Justification = "Using unmanaged equivalent for performance reasons")]
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode, EntryPoint = "SetCurrentDirectory")]
@@ -1601,7 +1601,7 @@ internal static bool SetCurrentDirectory(string path)
 
     [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
     [SupportedOSPlatform("windows")]
-    internal static unsafe extern int GetFullPathName(string target, int bufferLength, char* buffer, IntPtr mustBeZero);
+    internal static extern unsafe int GetFullPathName(string target, int bufferLength, char* buffer, IntPtr mustBeZero);
 
     [DllImport("KERNEL32.DLL")]
     [SupportedOSPlatform("windows")]
diff --git a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
index 509096a06aa..0c40f0afcbc 100644
--- a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
+++ b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
@@ -349,7 +349,7 @@ private void CleanupSchemaFiles(string[] msbuildTempXsdFilenames)
         /// <remarks>Stolen from ObjectModelHelpers because we use relatively little
         /// of the ObjectModelHelpers functionality, so as to avoid having to include in
         /// this project everything that ObjectModelHelpers depends on</remarks>
-        static internal string CreateTempFileOnDisk(string fileContents, params object[] args)
+        internal static string CreateTempFileOnDisk(string fileContents, params object[] args)
         {
             return CreateTempFileOnDiskNoFormat(String.Format(fileContents, args));
         }
@@ -360,7 +360,7 @@ static internal string CreateTempFileOnDisk(string fileContents, params object[]
         /// <remarks>Stolen from ObjectModelHelpers because we use relatively little
         /// of the ObjectModelHelpers functionality, so as to avoid having to include in
         /// this project everything that ObjectModelHelpers depends on</remarks>
-        static internal string CreateTempFileOnDiskNoFormat(string fileContents)
+        internal static string CreateTempFileOnDiskNoFormat(string fileContents)
         {
             string projectFilePath = FileUtilities.GetTemporaryFileName();
 
@@ -377,7 +377,7 @@ static internal string CreateTempFileOnDiskNoFormat(string fileContents)
         /// <remarks>Stolen from ObjectModelHelpers because we use relatively little
         /// of the ObjectModelHelpers functionality, so as to avoid having to include in
         /// this project everything that ObjectModelHelpers depends on</remarks>
-        static private string CleanupFileContents(string projectFileContents)
+        private static string CleanupFileContents(string projectFileContents)
         {
             // Replace reverse-single-quotes with double-quotes.
             projectFileContents = projectFileContents.Replace("`", "\"");
diff --git a/src/MSBuild/LogMessagePacket.cs b/src/MSBuild/LogMessagePacket.cs
index 2e69e1f1e36..e48f59caeaf 100644
--- a/src/MSBuild/LogMessagePacket.cs
+++ b/src/MSBuild/LogMessagePacket.cs
@@ -42,7 +42,7 @@ private LogMessagePacket(ITranslator translator)
         /// <summary>
         /// Factory for serialization
         /// </summary>
-        static internal INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
         {
             return new LogMessagePacket(translator);
         }
diff --git a/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs b/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
index ef6cca48ce1..3e2cbac0343 100644
--- a/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
+++ b/src/MSBuildTaskHost/Concurrent/ConcurrentQueue.cs
@@ -48,7 +48,7 @@ internal class ConcurrentQueue<T>
         /// <summary>The current head segment.</summary>
         private volatile Segment _head;
 
-        static internal object VolatileReader(ref object o) => Thread.VolatileRead(ref o);
+        internal static object VolatileReader(ref object o) => Thread.VolatileRead(ref o);
         /// <summary>
         /// Initializes a new instance of the <see cref="ConcurrentQueue{T}"/> class.
         /// </summary>
diff --git a/src/Shared/AssemblyLoadInfo.cs b/src/Shared/AssemblyLoadInfo.cs
index 271a077efaa..28cd01c602a 100644
--- a/src/Shared/AssemblyLoadInfo.cs
+++ b/src/Shared/AssemblyLoadInfo.cs
@@ -106,7 +106,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref assemblyFile);
         }
 
-        static public AssemblyLoadInfo FactoryForTranslation(ITranslator translator)
+        public static AssemblyLoadInfo FactoryForTranslation(ITranslator translator)
         {
             string assemblyName = null;
             string assemblyFile = null;
diff --git a/src/Shared/AssemblyNameReverseVersionComparer.cs b/src/Shared/AssemblyNameReverseVersionComparer.cs
index 6e8eb62be81..2ead36079cc 100644
--- a/src/Shared/AssemblyNameReverseVersionComparer.cs
+++ b/src/Shared/AssemblyNameReverseVersionComparer.cs
@@ -10,12 +10,12 @@ namespace Microsoft.Build.Shared
     /// <summary>
     /// Compare the version numbers only for an AssemblyNameExtension and make sure they are in reverse order. This assumes the names are the same.
     /// </summary>
-    sealed internal class AssemblyNameReverseVersionComparer : IComparer<AssemblyNameExtension>
+    internal sealed class AssemblyNameReverseVersionComparer : IComparer<AssemblyNameExtension>
     {
         /// <summary>
         /// A static instance of the comparer for use in a sort method
         /// </summary>
-        internal readonly static IComparer<AssemblyNameExtension> GenericComparer = new AssemblyNameReverseVersionComparer();
+        internal static readonly IComparer<AssemblyNameExtension> GenericComparer = new AssemblyNameReverseVersionComparer();
 
         /// <summary>
         /// Compare x and y by version only.
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 05abbdbab95..0558d875597 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -20,13 +20,13 @@ namespace Microsoft.Build.BackEnd
     /// Each class implements a Translate method on INodePacket which takes this class
     /// as a parameter, and uses it to store and retrieve fields to the stream.
     /// </summary>
-    static internal class BinaryTranslator
+    internal static class BinaryTranslator
     {
         /// <summary>
         /// Returns a read-only serializer.
         /// </summary>
         /// <returns>The serializer.</returns>
-        static internal ITranslator GetReadTranslator(Stream stream, SharedReadBuffer buffer)
+        internal static ITranslator GetReadTranslator(Stream stream, SharedReadBuffer buffer)
         {
             return new BinaryReadTranslator(stream, buffer);
         }
@@ -36,7 +36,7 @@ static internal ITranslator GetReadTranslator(Stream stream, SharedReadBuffer bu
         /// </summary>
         /// <param name="stream">The stream containing data to serialize.</param>
         /// <returns>The serializer.</returns>
-        static internal ITranslator GetWriteTranslator(Stream stream)
+        internal static ITranslator GetWriteTranslator(Stream stream)
         {
             return new BinaryWriteTranslator(stream);
         }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index e21e214cb78..9e8168729c9 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -89,7 +89,7 @@ internal class Handshake
         protected readonly int fileVersionPrivate;
         private readonly int sessionId;
 
-        internal protected Handshake(HandshakeOptions nodeType)
+        protected internal Handshake(HandshakeOptions nodeType)
         {
             const int handshakeVersion = (int)CommunicationsUtilities.handshakeVersion;
 
@@ -190,7 +190,7 @@ public string ComputeHash()
     /// <summary>
     /// This class contains utility methods for the MSBuild engine.
     /// </summary>
-    static internal class CommunicationsUtilities
+    internal static class CommunicationsUtilities
     {
         /// <summary>
         /// Indicates to the NodeEndpoint that all the various parts of the Handshake have been sent.
@@ -235,7 +235,7 @@ static internal class CommunicationsUtilities
         /// <summary>
         /// Gets or sets the node connection timeout.
         /// </summary>
-        static internal int NodeConnectionTimeout
+        internal static int NodeConnectionTimeout
         {
             get { return GetIntegerVariableOrDefault("MSBUILDNODECONNECTIONTIMEOUT", DefaultNodeConnectionTimeout); }
         }
@@ -244,13 +244,13 @@ static internal int NodeConnectionTimeout
         /// Get environment block
         /// </summary>
         [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static unsafe extern char* GetEnvironmentStrings();
+        internal static extern unsafe char* GetEnvironmentStrings();
 
         /// <summary>
         /// Free environment block
         /// </summary>
         [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static unsafe extern bool FreeEnvironmentStrings(char* pStrings);
+        internal static extern unsafe bool FreeEnvironmentStrings(char* pStrings);
 
         /// <summary>
         /// Copied from the BCL implementation to eliminate some expensive security asserts.
diff --git a/src/Shared/CopyOnWriteDictionary.cs b/src/Shared/CopyOnWriteDictionary.cs
index ec869150afb..57ad7f5900f 100644
--- a/src/Shared/CopyOnWriteDictionary.cs
+++ b/src/Shared/CopyOnWriteDictionary.cs
@@ -34,14 +34,14 @@ internal class CopyOnWriteDictionary<V> : IDictionary<string, V>, IDictionary, I
         /// used as the basis of new dictionaries with that comparer to avoid
         /// allocating new comparers objects.
         /// </summary>
-        private readonly static ImmutableDictionary<string, V> NameComparerDictionaryPrototype = ImmutableDictionary.Create<string, V>(MSBuildNameIgnoreCaseComparer.Default);
+        private static readonly ImmutableDictionary<string, V> NameComparerDictionaryPrototype = ImmutableDictionary.Create<string, V>(MSBuildNameIgnoreCaseComparer.Default);
 
         /// <summary>
         /// Empty dictionary with <see cref="StringComparer.OrdinalIgnoreCase" />,
         /// used as the basis of new dictionaries with that comparer to avoid
         /// allocating new comparers objects.
         /// </summary>
-        private readonly static ImmutableDictionary<string, V> OrdinalIgnoreCaseComparerDictionaryPrototype = ImmutableDictionary.Create<string, V>(StringComparer.OrdinalIgnoreCase);
+        private static readonly ImmutableDictionary<string, V> OrdinalIgnoreCaseComparerDictionaryPrototype = ImmutableDictionary.Create<string, V>(StringComparer.OrdinalIgnoreCase);
 #endif
 
 
diff --git a/src/Shared/EscapingUtilities.cs b/src/Shared/EscapingUtilities.cs
index 905e705fcf9..d416c021d1f 100644
--- a/src/Shared/EscapingUtilities.cs
+++ b/src/Shared/EscapingUtilities.cs
@@ -20,7 +20,7 @@ namespace Microsoft.Build.Shared
     /// PERF: since we escape and unescape relatively frequently, it may be worth caching
     /// the last N strings that were (un)escaped
     /// </remarks>
-    static internal class EscapingUtilities
+    internal static class EscapingUtilities
     {
         /// <summary>
         /// Optional cache of escaped strings for use when needing to escape in performance-critical scenarios with significant
diff --git a/src/Shared/FileSystem/WindowsFileSystem.cs b/src/Shared/FileSystem/WindowsFileSystem.cs
index 60867009993..b3cdcbcb50d 100644
--- a/src/Shared/FileSystem/WindowsFileSystem.cs
+++ b/src/Shared/FileSystem/WindowsFileSystem.cs
@@ -34,7 +34,7 @@ internal class WindowsFileSystem : ManagedFileSystem
     {
         private static readonly WindowsFileSystem Instance = new();
 
-        public new static WindowsFileSystem Singleton() => WindowsFileSystem.Instance;
+        public static new WindowsFileSystem Singleton() => WindowsFileSystem.Instance;
 
         private WindowsFileSystem(){ }
 
diff --git a/src/Shared/InprocTrackingNativeMethods.cs b/src/Shared/InprocTrackingNativeMethods.cs
index 02ada21382d..f7279a94d50 100644
--- a/src/Shared/InprocTrackingNativeMethods.cs
+++ b/src/Shared/InprocTrackingNativeMethods.cs
@@ -149,7 +149,7 @@ internal static void SetThreadCount(int threadCount)
 
         private static class FileTrackerDllStub
         {
-            private readonly static Lazy<string> fileTrackerDllName = new Lazy<string>(() => RuntimeInformation.ProcessArchitecture == Architecture.Arm64 ? "FileTrackerA4.dll" : (IntPtr.Size == sizeof(Int32)) ? "FileTracker32.dll" : "FileTracker64.dll");
+            private static readonly Lazy<string> fileTrackerDllName = new Lazy<string>(() => RuntimeInformation.ProcessArchitecture == Architecture.Arm64 ? "FileTrackerA4.dll" : (IntPtr.Size == sizeof(Int32)) ? "FileTracker32.dll" : "FileTracker64.dll");
 
             // Handle for FileTracker.dll itself
             [SecurityCritical]
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index 7f186597527..7a2b51221c5 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -75,7 +75,7 @@ private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)
         /// Read a string while checking the string precursor for intern opportunities.
         /// Taken from ndp\clr\src\bcl\system\io\binaryreader.cs-ReadString()
         /// </summary>
-        override public String ReadString()
+        public override String ReadString()
         {
             char[] resultBuffer = null;
             try
@@ -286,7 +286,7 @@ internal byte[] ByteBuffer
     /// <summary>
     /// Opaque holder of shared buffer.
     /// </summary>
-    abstract internal class SharedReadBuffer
+    internal abstract class SharedReadBuffer
     {
     }
 }
diff --git a/src/Shared/LanguageParser/CSharptokenCharReader.cs b/src/Shared/LanguageParser/CSharptokenCharReader.cs
index 7dad4a3c123..b8e3c75bec4 100644
--- a/src/Shared/LanguageParser/CSharptokenCharReader.cs
+++ b/src/Shared/LanguageParser/CSharptokenCharReader.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Shared.LanguageParser
      * Provides utility functions for dealing with C#-specific tokens.
      *
      */
-    sealed internal class CSharpTokenCharReader : TokenCharReader
+    internal sealed class CSharpTokenCharReader : TokenCharReader
     {
         /*
          * Method:  CSharpTokenCharReader
diff --git a/src/Shared/LanguageParser/CSharptokenEnumerator.cs b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
index 6cd1204c112..1aaeab269f2 100644
--- a/src/Shared/LanguageParser/CSharptokenEnumerator.cs
+++ b/src/Shared/LanguageParser/CSharptokenEnumerator.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Shared.LanguageParser
     * Given C# sources, enumerate over all tokens.
     *
     */
-    sealed internal class CSharpTokenEnumerator : TokenEnumerator
+    internal sealed class CSharpTokenEnumerator : TokenEnumerator
     {
         // Reader over the sources.
         private CSharpTokenCharReader _reader = null;
@@ -35,7 +35,7 @@ internal CSharpTokenEnumerator(Stream binaryStream, bool forceANSI)
         * 
         * Find the next token. Return 'true' if one was found. False, otherwise.
         */
-        override internal bool FindNextToken()
+        internal override bool FindNextToken()
         {
             int startPosition = _reader.Position;
 
@@ -314,7 +314,7 @@ override internal bool FindNextToken()
         * 
         * Return the token char reader.
         */
-        override internal TokenCharReader Reader
+        internal override TokenCharReader Reader
         {
             get
             {
diff --git a/src/Shared/LanguageParser/CSharptokenizer.cs b/src/Shared/LanguageParser/CSharptokenizer.cs
index eedeedd05a8..e83c7c0e4f9 100644
--- a/src/Shared/LanguageParser/CSharptokenizer.cs
+++ b/src/Shared/LanguageParser/CSharptokenizer.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Shared.LanguageParser
      * Given C# sources, return an enumerator that will provide tokens one at a time.
      *
      */
-    sealed internal class CSharpTokenizer : IEnumerable
+    internal sealed class CSharpTokenizer : IEnumerable
     {
         /*
             These are the tokens that are specific to the C# tokenizer.
diff --git a/src/Shared/LanguageParser/StreamMappedString.cs b/src/Shared/LanguageParser/StreamMappedString.cs
index f8fda805458..0a9ababf94e 100644
--- a/src/Shared/LanguageParser/StreamMappedString.cs
+++ b/src/Shared/LanguageParser/StreamMappedString.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Shared.LanguageParser
     /// <summary>
     /// A class with string-like semantics mapped over a Stream.
     /// </summary>
-    sealed internal class StreamMappedString
+    internal sealed class StreamMappedString
     {
         /// <summary>
         /// The raw binary stream that's being read.
diff --git a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
index 4686976eee1..c7e57257ca4 100644
--- a/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenCharReader.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Shared.LanguageParser
      * Provides utility functions for dealing with VB-specific tokens.
      *
      */
-    sealed internal class VisualBasicTokenCharReader : TokenCharReader
+    internal sealed class VisualBasicTokenCharReader : TokenCharReader
     {
         /*
          * Method:  VisualBasicTokenCharReader
diff --git a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
index 3fbc3b0ed4b..e4bc3513f06 100644
--- a/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenEnumerator.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Shared.LanguageParser
     * Given vb sources, enumerate over all tokens.
     *
     */
-    sealed internal class VisualBasicTokenEnumerator : TokenEnumerator
+    internal sealed class VisualBasicTokenEnumerator : TokenEnumerator
     {
         // Reader over the sources.
         private VisualBasicTokenCharReader _reader = null;
@@ -34,7 +34,7 @@ internal VisualBasicTokenEnumerator(Stream binaryStream, bool forceANSI)
         * 
         * Find the next token. Return 'true' if one was found. False, otherwise.
         */
-        override internal bool FindNextToken()
+        internal override bool FindNextToken()
         {
             int startPosition = _reader.Position;
 
@@ -321,7 +321,7 @@ override internal bool FindNextToken()
         * 
         * Return the token char reader.
         */
-        override internal TokenCharReader Reader
+        internal override TokenCharReader Reader
         {
             get
             {
diff --git a/src/Shared/LanguageParser/VisualBasictokenizer.cs b/src/Shared/LanguageParser/VisualBasictokenizer.cs
index 3dfff889a24..d9ac44b5732 100644
--- a/src/Shared/LanguageParser/VisualBasictokenizer.cs
+++ b/src/Shared/LanguageParser/VisualBasictokenizer.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Shared.LanguageParser
      * Given vb sources, return an enumerator that will provide tokens one at a time.
      *
      */
-    sealed internal class VisualBasicTokenizer : IEnumerable
+    internal sealed class VisualBasicTokenizer : IEnumerable
     {
         /*
             These are the tokens that are specific to the VB tokenizer.
diff --git a/src/Shared/LanguageParser/tokenChar.cs b/src/Shared/LanguageParser/tokenChar.cs
index fc1c21907e3..0e5ecf327e4 100644
--- a/src/Shared/LanguageParser/tokenChar.cs
+++ b/src/Shared/LanguageParser/tokenChar.cs
@@ -17,7 +17,7 @@ internal static class TokenChar
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsNewLine(char c)
+        internal static bool IsNewLine(char c)
         {
             // From the C# spec and vb specs, newline characters are:
             return c == 0x000d        // Carriage return
@@ -32,7 +32,7 @@ static internal bool IsNewLine(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsLetter(char c)
+        internal static bool IsLetter(char c)
         {
             UnicodeCategory cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
 
@@ -57,7 +57,7 @@ static internal bool IsLetter(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsDecimalDigit(char c)
+        internal static bool IsDecimalDigit(char c)
         {
             UnicodeCategory cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
 
@@ -77,7 +77,7 @@ static internal bool IsDecimalDigit(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsConnecting(char c)
+        internal static bool IsConnecting(char c)
         {
             UnicodeCategory cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
 
@@ -98,7 +98,7 @@ static internal bool IsConnecting(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsCombining(char c)
+        internal static bool IsCombining(char c)
         {
             UnicodeCategory cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
 
@@ -119,7 +119,7 @@ static internal bool IsCombining(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsFormatting(char c)
+        internal static bool IsFormatting(char c)
         {
             UnicodeCategory cat = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
 
@@ -139,7 +139,7 @@ static internal bool IsFormatting(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsHexDigit(char c)
+        internal static bool IsHexDigit(char c)
         {
             // From 2.4.4.2 of the C# Language Specification
             // hex-digit:
@@ -160,7 +160,7 @@ static internal bool IsHexDigit(char c)
         /// </summary>
         /// <param name="c"></param>
         /// <returns></returns>
-        static internal bool IsOctalDigit(char c)
+        internal static bool IsOctalDigit(char c)
         {
             if
             (
diff --git a/src/Shared/LanguageParser/tokenEnumerator.cs b/src/Shared/LanguageParser/tokenEnumerator.cs
index 8c691dcb8b8..aadc66cc826 100644
--- a/src/Shared/LanguageParser/tokenEnumerator.cs
+++ b/src/Shared/LanguageParser/tokenEnumerator.cs
@@ -20,10 +20,10 @@ internal abstract class TokenEnumerator : IEnumerator
         protected Token current = null;
 
         // Return the token char reader.
-        abstract internal TokenCharReader Reader { get; }
+        internal abstract TokenCharReader Reader { get; }
 
         // Implemented by derived class to find the next token.
-        abstract internal bool FindNextToken();
+        internal abstract bool FindNextToken();
 
         /*
         * Method:  MoveNext
diff --git a/src/Shared/Modifiers.cs b/src/Shared/Modifiers.cs
index 6905d0838a2..1b55a6eb8e3 100644
--- a/src/Shared/Modifiers.cs
+++ b/src/Shared/Modifiers.cs
@@ -17,12 +17,12 @@ namespace Microsoft.Build.Shared
     /// <comment>
     /// Partial class in order to reduce the amount of sharing into different assemblies
     /// </comment>
-    static internal partial class FileUtilities
+    internal static partial class FileUtilities
     {
         /// <summary>
         /// Encapsulates the definitions of the item-spec modifiers a.k.a. reserved item metadata.
         /// </summary>
-        static internal class ItemSpecModifiers
+        internal static class ItemSpecModifiers
         {
 #if DEBUG
             /// <summary>
diff --git a/src/Shared/ProjectFileErrorUtilities.cs b/src/Shared/ProjectFileErrorUtilities.cs
index aa8bc142a3a..98d0bb9e49c 100644
--- a/src/Shared/ProjectFileErrorUtilities.cs
+++ b/src/Shared/ProjectFileErrorUtilities.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Shared
     /// <summary>
     /// This class contains methods that are useful for error checking and validation of project files.
     /// </summary>
-    static internal class ProjectFileErrorUtilities
+    internal static class ProjectFileErrorUtilities
     {
         /// <summary>
         /// This method is used to flag errors in the project file being processed. Do NOT use this method in place of
diff --git a/src/Shared/TaskLoggingHelperExtension.cs b/src/Shared/TaskLoggingHelperExtension.cs
index 2607884b1db..cd928d7af11 100644
--- a/src/Shared/TaskLoggingHelperExtension.cs
+++ b/src/Shared/TaskLoggingHelperExtension.cs
@@ -88,7 +88,7 @@ public ResourceManager TaskSharedResources
         /// <exception cref="ArgumentNullException">Thrown when <c>resourceName</c> is null.</exception>
         /// <exception cref="ArgumentException">Thrown when the string resource indicated by <c>resourceName</c> does not exist.</exception>
         /// <exception cref="InvalidOperationException">Thrown when the <c>TaskResources</c> property of the owner task is not set.</exception>
-        override public string FormatResourceString(string resourceName, params object[] args)
+        public override string FormatResourceString(string resourceName, params object[] args)
         {
             ErrorUtilities.VerifyThrowArgumentNull(resourceName, nameof(resourceName));
             ErrorUtilities.VerifyThrowInvalidOperation(TaskResources != null, "Shared.TaskResourcesNotRegistered", TaskName);
diff --git a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
index 3c0bf360279..7361b94e1b5 100644
--- a/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
+++ b/src/Shared/UnitTests/AssemblyNameEx_Tests.cs
@@ -17,7 +17,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class AssemblyNameEx_Tests
+    public sealed class AssemblyNameEx_Tests
     {
         /// <summary>
         /// Delegate defines a function that produces an AssemblyNameExtension from a string.
diff --git a/src/Shared/UnitTests/StreamHelpers.cs b/src/Shared/UnitTests/StreamHelpers.cs
index b2130e2458b..c95f762f7ce 100644
--- a/src/Shared/UnitTests/StreamHelpers.cs
+++ b/src/Shared/UnitTests/StreamHelpers.cs
@@ -7,14 +7,14 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed internal class StreamHelpers
+    internal sealed class StreamHelpers
     {
         /// <summary>
         /// Take a string and convert it to a StreamReader.
         /// </summary>
         /// <param name="value"></param>
         /// <returns></returns>
-        static internal StreamReader StringToStreamReader(string value)
+        internal static StreamReader StringToStreamReader(string value)
         {
             MemoryStream m = new MemoryStream();
 #if FEATURE_ENCODING_DEFAULT
diff --git a/src/Shared/VersionUtilities.cs b/src/Shared/VersionUtilities.cs
index 0266205b1ce..3bb1331e1cb 100644
--- a/src/Shared/VersionUtilities.cs
+++ b/src/Shared/VersionUtilities.cs
@@ -96,7 +96,7 @@ internal static Version ConvertToVersion(string version, bool throwException)
         }
     }
 
-    sealed internal class ReverseStringGenericComparer : IComparer<string>
+    internal sealed class ReverseStringGenericComparer : IComparer<string>
     {
         /// <summary>
         /// Static accessor for a ReverseVersionGenericComparer
@@ -113,7 +113,7 @@ int IComparer<string>.Compare(string x, string y)
         }
     }
 
-    sealed internal class ReverseVersionGenericComparer : IComparer<Version>
+    internal sealed class ReverseVersionGenericComparer : IComparer<Version>
     {
         /// <summary>
         /// Static accessor for a ReverseVersionGenericComparer
diff --git a/src/Shared/XmlUtilities.cs b/src/Shared/XmlUtilities.cs
index 941958a13fe..aaa340eb2b4 100644
--- a/src/Shared/XmlUtilities.cs
+++ b/src/Shared/XmlUtilities.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.Shared
     /// <summary>
     /// This class contains utility methods for XML manipulation.
     /// </summary>
-    static internal class XmlUtilities
+    internal static class XmlUtilities
     {
         /// <summary>
         /// This method renames an XML element.  Well, actually you can't directly
diff --git a/src/Tasks.UnitTests/Al_Tests.cs b/src/Tasks.UnitTests/Al_Tests.cs
index 6d2d0884c8e..0ee911946ce 100644
--- a/src/Tasks.UnitTests/Al_Tests.cs
+++ b/src/Tasks.UnitTests/Al_Tests.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.UnitTests
      * Test the AL task in various ways.
      *
      */
-    sealed public class AlTests
+    public sealed class AlTests
     {
         /// <summary>
         /// Tests the AlgorithmId parameter
diff --git a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
index 2b49c25b8d6..4220a86a225 100644
--- a/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
+++ b/src/Tasks.UnitTests/AspNetCompiler_Tests.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.UnitTests
      * Test the AspNetCompiler task in various ways.
      *
      */
-    sealed public class AspNetCompilerTests
+    public sealed class AspNetCompilerTests
     {
         [Fact]
         public void NoParameters()
diff --git a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
index f3eb199906b..bd6f430d3e0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/NonSpecificVersionStrictPrimary.cs
@@ -20,7 +20,7 @@ public NonSpecificVersionStrictPrimary(ITestOutputHelper output) : base(output)
         /// Return the default search paths.
         /// </summary>
         /// <value></value>
-        new internal string[] DefaultPaths
+        internal new string[] DefaultPaths
         {
             get { return new string[] { s_myComponentsV05Path, s_myComponentsV10Path, s_myComponentsV20Path, s_myComponentsV30Path }; }
         }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
index e44eed3c3b8..795086814d8 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependency.cs
@@ -23,7 +23,7 @@ public StronglyNamedDependency(ITestOutputHelper output) : base(output)
         /// Return the default search paths.
         /// </summary>
         /// <value></value>
-        new internal string[] DefaultPaths
+        internal new string[] DefaultPaths
             {
                 get { return new string[] { s_myApp_V10Path, @"C:\Framework\Whidbey", @"C:\Framework\Everett" }; }
             }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
index 3bb0ff19545..c02c4e6f629 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAppConfig.cs
@@ -22,7 +22,7 @@ public StronglyNamedDependencyAppConfig(ITestOutputHelper output) : base(output)
         /// Return the default search paths.
         /// </summary>
         /// <value></value>
-        new internal string[] DefaultPaths
+        internal new string[] DefaultPaths
             {
                 get { return new string[] { s_myApp_V05Path, s_myApp_V10Path, s_myComponentsV05Path, s_myComponentsV10Path, s_myComponentsV20Path, s_myComponentsV30Path }; }
         }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
index dc4c11e5ef6..89e1eb347ee 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
@@ -22,7 +22,7 @@ public StronglyNamedDependencyAutoUnify(ITestOutputHelper output) : base(output)
         /// Return the default search paths.
         /// </summary>
         /// <value></value>
-        new internal string[] DefaultPaths
+        internal new string[] DefaultPaths
         {
                 get { return new string[] { s_myApp_V05Path, s_myApp_V10Path, s_myApp_V20Path, s_myApp_V30Path, s_myComponentsV05Path, s_myComponentsV10Path, s_myComponentsV20Path, s_myComponentsV30Path }; }
         }
diff --git a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
index 63991dcb033..2a459250278 100644
--- a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class AssemblyRegistrationCache_Tests
+    public sealed class AssemblyRegistrationCache_Tests
     {
         [Fact]
         public void ExerciseCache()
diff --git a/src/Tasks.UnitTests/AssignCulture_Tests.cs b/src/Tasks.UnitTests/AssignCulture_Tests.cs
index 3ea88706f9c..a2dcecfe57d 100644
--- a/src/Tasks.UnitTests/AssignCulture_Tests.cs
+++ b/src/Tasks.UnitTests/AssignCulture_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class AssignCulture_Tests
+    public sealed class AssignCulture_Tests
     {
         /*
         * Method:   Basic
diff --git a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
index a9535bfac91..d99b4dfcf44 100644
--- a/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
+++ b/src/Tasks.UnitTests/AssignProjectConfiguration_Tests.cs
@@ -20,7 +20,7 @@ namespace Microsoft.Build.UnitTests
     /// in ResolveNonMSBuildProjectOutput_Tests.
     /// Here, only test the AssignProjectConfiguration specific code
     /// </summary>
-    sealed public class AssignProjectConfiguration_Tests
+    public sealed class AssignProjectConfiguration_Tests
     {
         private readonly ITestOutputHelper _output;
 
diff --git a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
index 3638a86206f..282aceea85f 100644
--- a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
+++ b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class AssignTargetPath_Tests
+    public sealed class AssignTargetPath_Tests
     {
         [Fact]
         public void Regress314791()
diff --git a/src/Tasks.UnitTests/AxImp_Tests.cs b/src/Tasks.UnitTests/AxImp_Tests.cs
index 331347bcec0..f66abf965f9 100644
--- a/src/Tasks.UnitTests/AxImp_Tests.cs
+++ b/src/Tasks.UnitTests/AxImp_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
-    sealed public class AxImp_Tests
+    public sealed class AxImp_Tests
     {
         /// <summary>
         /// Tests that the assembly being imported is passed to the command line
diff --git a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
index 56c1a5e53b5..31a54949b52 100644
--- a/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
+++ b/src/Tasks.UnitTests/AxTlbBaseTask_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
-    sealed public class AxTlbBaseTask_Tests
+    public sealed class AxTlbBaseTask_Tests
     {
         /// <summary>
         /// Tests the /delaysign switch
@@ -320,7 +320,7 @@ public void TaskFailsWhenImproperlySigned()
         }
     }
 
-    sealed internal class Utilities
+    internal sealed class Utilities
     {
         /// <summary>
         /// Given an instance of an AxImp task, executes that task (assuming all necessary parameters
diff --git a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
index fd6a6f4a794..92ebff70c20 100644
--- a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CSharpParserUtilititesTests
+    public sealed class CSharpParserUtilititesTests
     {
         // Try just and empty file
         [Fact]
diff --git a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
index 26897d3ef06..4f9b502d4d2 100644
--- a/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpTokenizer_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CSharpTokenizerTests
+    public sealed class CSharpTokenizerTests
     {
         // Simple whitespace handling.
         [Fact]
@@ -248,7 +248,7 @@ public void EscapedKeywordMakesIdentifier()
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        static private void AssertTokenize(string source, string expectedTokenKey)
+        private static void AssertTokenize(string source, string expectedTokenKey)
         {
             // Most of the time, we expect the rebuilt source to be the same as the input source.
             AssertTokenize(source, source, expectedTokenKey);
@@ -261,7 +261,7 @@ static private void AssertTokenize(string source, string expectedTokenKey)
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        static private void AssertTokenizeUnicode(string source, string expectedTokenKey)
+        private static void AssertTokenizeUnicode(string source, string expectedTokenKey)
         {
             // Most of the time, we expect the rebuilt source to be the same as the input source.
             AssertTokenizeUnicode(source, source, expectedTokenKey);
@@ -274,7 +274,7 @@ static private void AssertTokenizeUnicode(string source, string expectedTokenKey
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        static private void AssertTokenize
+        private static void AssertTokenize
         (
            string source,
            string expectedTokenKey,
@@ -292,7 +292,7 @@ int expectedLastLineNumber
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        static private void AssertTokenizeUnicode
+        private static void AssertTokenizeUnicode
         (
            string source,
            string expectedTokenKey,
@@ -310,7 +310,7 @@ int expectedLastLineNumber
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        static private void AssertTokenize
+        private static void AssertTokenize
         (
            string source,
            string expectedSource,
@@ -328,7 +328,7 @@ string expectedTokenKey
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        static private void AssertTokenizeUnicode
+        private static void AssertTokenizeUnicode
         (
            string source,
            string expectedSource,
@@ -346,7 +346,7 @@ string expectedTokenKey
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        static private void AssertTokenizeUnicode
+        private static void AssertTokenizeUnicode
         (
            string source,
            string expectedSource,
@@ -370,7 +370,7 @@ int expectedLastLineNumber
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        static private void AssertTokenize
+        private static void AssertTokenize
         (
            string source,
            string expectedSource,
@@ -396,7 +396,7 @@ int expectedLastLineNumber
          * Also compare the source that is regenerated by concatenating all of the tokens
          * to 'expectedSource'.
          */
-        static private void AssertTokenizeStream
+        private static void AssertTokenizeStream
         (
            Stream source,
            string expectedSource,
diff --git a/src/Tasks.UnitTests/CallTarget_Tests.cs b/src/Tasks.UnitTests/CallTarget_Tests.cs
index 289347e1b69..884160cba26 100644
--- a/src/Tasks.UnitTests/CallTarget_Tests.cs
+++ b/src/Tasks.UnitTests/CallTarget_Tests.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CallTarget_Tests : IDisposable
+    public sealed class CallTarget_Tests : IDisposable
     {
         public CallTarget_Tests()
         {
diff --git a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
index fa7909f7c4b..19baf4ffa8e 100644
--- a/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
+++ b/src/Tasks.UnitTests/ComReferenceWalker_Tests.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.UnitTests
 {
     public class ComReferenceWalker_Tests
     {
-        static private int MockReleaseComObject(object o)
+        private static int MockReleaseComObject(object o)
         {
             return 0;
         }
diff --git a/src/Tasks.UnitTests/ComReference_Tests.cs b/src/Tasks.UnitTests/ComReference_Tests.cs
index 6c2f1ed8fc6..1237e524668 100644
--- a/src/Tasks.UnitTests/ComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ComReference_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ComReference_Tests
+    public sealed class ComReference_Tests
     {
         private static Dictionary<string, string> s_existingFiles = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
diff --git a/src/Tasks.UnitTests/CombinePath_Tests.cs b/src/Tasks.UnitTests/CombinePath_Tests.cs
index def89f55a3a..22ac7dfa776 100644
--- a/src/Tasks.UnitTests/CombinePath_Tests.cs
+++ b/src/Tasks.UnitTests/CombinePath_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CombinePath_Tests
+    public sealed class CombinePath_Tests
     {
         /// <summary>
         /// Base path is relative.  Paths are relative.
diff --git a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
index 2652a9d8deb..01cc00f914d 100644
--- a/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineBuilderExtension_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CommandLineBuilderExtensionTest
+    public sealed class CommandLineBuilderExtensionTest
     {
         /*
         * Method:   AppendItemWithInvalidBooleanAttribute
diff --git a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
index 9a99b37b197..7ff16f79966 100644
--- a/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
+++ b/src/Tasks.UnitTests/CommandLineGenerator_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CommandLineGenerator_Tests
+    public sealed class CommandLineGenerator_Tests
     {
         private const string testXamlFile = @"<?xml version='1.0' encoding='utf-8'?>
 <Rule Name='mem' ToolName='mem.exe' PageTemplate='tool' SwitchPrefix='/' Order='10' xmlns='clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework' xmlns:x='http://schemas.microsoft.com/winfx/2006/xaml' xmlns:sys='clr-namespace:System;assembly=mscorlib'>
diff --git a/src/Tasks.UnitTests/CommandLine_Support.cs b/src/Tasks.UnitTests/CommandLine_Support.cs
index 3643e814789..654ff49b5a2 100644
--- a/src/Tasks.UnitTests/CommandLine_Support.cs
+++ b/src/Tasks.UnitTests/CommandLine_Support.cs
@@ -18,14 +18,14 @@ namespace Microsoft.Build.UnitTests
      * Test the Csc task in various ways.
      *
      */
-    sealed internal class CommandLine
+    internal sealed class CommandLine
     {
         /// <summary>
         /// Invokes the ValidateParameters on the given ToolTask instance. We need to use reflection since
         /// ValidateParameters is inaccessible to Tasks unit tests.
         /// </summary>
         /// <returns></returns>
-        static internal bool CallValidateParameters(ToolTask task)
+        internal static bool CallValidateParameters(ToolTask task)
         {
             MethodInfo validateMethod = typeof(ToolTask).GetMethod("ValidateParameters", BindingFlags.Instance | BindingFlags.NonPublic);
             return (bool)validateMethod.Invoke(task, null);
diff --git a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
index e7f8b0ecf8f..577e9ae4977 100644
--- a/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
+++ b/src/Tasks.UnitTests/ConvertToAbsolutePath_Tests.cs
@@ -12,7 +12,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ConvertToAbsolutePath_Tests
+    public sealed class ConvertToAbsolutePath_Tests
     {
         /// <summary>
         /// Passing in a relative path (expecting an absolute back)
diff --git a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
index d55cbe2087d..0fbb6596700 100644
--- a/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateCSharpManifestResourceName_Tests.cs
@@ -16,7 +16,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CreateCSharpManifestResourceName_Tests
+    public sealed class CreateCSharpManifestResourceName_Tests
     {
         private readonly ITestOutputHelper _testOutput;
 
diff --git a/src/Tasks.UnitTests/CreateItem_Tests.cs b/src/Tasks.UnitTests/CreateItem_Tests.cs
index b82f1f4af7e..2848a7ba6fb 100644
--- a/src/Tasks.UnitTests/CreateItem_Tests.cs
+++ b/src/Tasks.UnitTests/CreateItem_Tests.cs
@@ -18,7 +18,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CreateItem_Tests
+    public sealed class CreateItem_Tests
     {
         internal const string CreateItemWithInclude = @"
             <Project>
diff --git a/src/Tasks.UnitTests/CreateProperty_Tests.cs b/src/Tasks.UnitTests/CreateProperty_Tests.cs
index 0b05115ca4a..5891cf08ab4 100644
--- a/src/Tasks.UnitTests/CreateProperty_Tests.cs
+++ b/src/Tasks.UnitTests/CreateProperty_Tests.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CreateProperty_Tests : IDisposable
+    public sealed class CreateProperty_Tests : IDisposable
     {
         public CreateProperty_Tests()
         {
diff --git a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
index 4fffa6e0379..443b6769f57 100644
--- a/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
+++ b/src/Tasks.UnitTests/CreateVisualBasicManifestResourceName_Tests.cs
@@ -16,7 +16,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class CreateVisualBasicManifestResourceName_Tests
+    public sealed class CreateVisualBasicManifestResourceName_Tests
     {
         private readonly ITestOutputHelper _testOutput;
 
diff --git a/src/Tasks.UnitTests/Culture_Tests.cs b/src/Tasks.UnitTests/Culture_Tests.cs
index 08383580b20..47cb7d9af4e 100644
--- a/src/Tasks.UnitTests/Culture_Tests.cs
+++ b/src/Tasks.UnitTests/Culture_Tests.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class Culture_Tests
+    public sealed class Culture_Tests
     {
         /*
         * Method:   Basic
diff --git a/src/Tasks.UnitTests/Delete_Tests.cs b/src/Tasks.UnitTests/Delete_Tests.cs
index 14982f6d6b3..07c63f32245 100644
--- a/src/Tasks.UnitTests/Delete_Tests.cs
+++ b/src/Tasks.UnitTests/Delete_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class Delete_Tests
+    public sealed class Delete_Tests
     {
         /*
          * Method:   AttributeForwarding
diff --git a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
index e8f0784d223..92b5860651e 100644
--- a/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildProjectImportTestBase.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// A base class for testing the directory build project import functionality in Microsoft.Common.props and Microsoft.Common.targets.
     /// </summary>
-    abstract public class DirectoryBuildProjectImportTestBase : IDisposable
+    public abstract class DirectoryBuildProjectImportTestBase : IDisposable
     {
         private const string BasicDirectoryBuildProjectContents = @"
                 <Project>
diff --git a/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs b/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
index 762ce477248..fd75b8eaf33 100644
--- a/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildPropsImportTests.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests that Microsoft.Common.props successfully imports a directory build project in the directory tree of the project being built.
     /// </summary>
-    sealed public class DirectoryBuildPropsImportTests : DirectoryBuildProjectImportTestBase
+    public sealed class DirectoryBuildPropsImportTests : DirectoryBuildProjectImportTestBase
     {
         protected override string CustomBuildProjectFile => "customBuild.props";
 
diff --git a/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs b/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
index 783538a0697..35c505f7ade 100644
--- a/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
+++ b/src/Tasks.UnitTests/DirectoryBuildTargetsImportTests.cs
@@ -8,7 +8,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests that Microsoft.Common.targets successfully imports a directory build project in the directory tree of the project being built.
     /// </summary>
-    sealed public class DirectoryBuildTargetsImportTests : DirectoryBuildProjectImportTestBase
+    public sealed class DirectoryBuildTargetsImportTests : DirectoryBuildProjectImportTestBase
     {
         protected override string DirectoryBuildProjectFile => "Directory.Build.targets";
 
diff --git a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
index f99a7e8bb4e..8387224e404 100644
--- a/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
+++ b/src/Tasks.UnitTests/ErrorWarningMessage_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ErrorWarningMessage_Tests
+    public sealed class ErrorWarningMessage_Tests
     {
         /// <summary>
         /// Simple case
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 5d8456902f8..c9db73aeb0d 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -23,7 +23,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests for the Exec task
     /// </summary>
-    sealed public class Exec_Tests
+    public sealed class Exec_Tests
     {
         private readonly ITestOutputHelper _output;
 
diff --git a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
index a877437c79c..a2c97adeaef 100644
--- a/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
+++ b/src/Tasks.UnitTests/FindInvalidProjectReferences_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class FindInvalidProjectReferences_Tests
+    public sealed class FindInvalidProjectReferences_Tests
     {
         /// <summary>
         /// Verify FindInvalidProjectReferences for several target platform monikers
diff --git a/src/Tasks.UnitTests/FindUnderPath_Tests.cs b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
index ea2139737ec..ccb0c3d2f11 100644
--- a/src/Tasks.UnitTests/FindUnderPath_Tests.cs
+++ b/src/Tasks.UnitTests/FindUnderPath_Tests.cs
@@ -15,7 +15,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class FindUnderPath_Tests
+    public sealed class FindUnderPath_Tests
     {
         [Fact]
         public void BasicFilter()
diff --git a/src/Tasks.UnitTests/FormatUrl_Tests.cs b/src/Tasks.UnitTests/FormatUrl_Tests.cs
index 84d83915f6f..43d9c148790 100644
--- a/src/Tasks.UnitTests/FormatUrl_Tests.cs
+++ b/src/Tasks.UnitTests/FormatUrl_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class FormatUrl_Tests
+    public sealed class FormatUrl_Tests
     {
         private readonly ITestOutputHelper _out;
 
diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index d65901d9ccb..21bab8d68fd 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.Tasks.UnitTests
 {
-    sealed public class GetCompatiblePlatform_Tests
+    public sealed class GetCompatiblePlatform_Tests
     {
         private readonly ITestOutputHelper _output;
 
diff --git a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
index 3dc4eb161d2..98969523b03 100644
--- a/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
+++ b/src/Tasks.UnitTests/GetReferencePaths_Tests.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests for the task which gets the reference assembly paths for a given target framework version / moniker
     /// </summary>
-    sealed public class GetReferenceAssmeblyPath_Tests
+    public sealed class GetReferenceAssmeblyPath_Tests
     {
         /// <summary>
         /// Test the case where there is a good target framework moniker passed in.
diff --git a/src/Tasks.UnitTests/MSBuild_Tests.cs b/src/Tasks.UnitTests/MSBuild_Tests.cs
index 96bad83b931..7dbb42c0016 100644
--- a/src/Tasks.UnitTests/MSBuild_Tests.cs
+++ b/src/Tasks.UnitTests/MSBuild_Tests.cs
@@ -19,7 +19,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class MSBuildTask_Tests : IDisposable
+    public sealed class MSBuildTask_Tests : IDisposable
     {
         private readonly ITestOutputHelper _testOutput;
 
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index 886d7a69aae..9deb3861387 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class MakeDir_Tests
+    public sealed class MakeDir_Tests
     {
         /// <summary>
         /// Make sure that attributes set on input items are forwarded to output items.
diff --git a/src/Tasks.UnitTests/MockTypeInfo.cs b/src/Tasks.UnitTests/MockTypeInfo.cs
index 4b79f6cac53..e14630d8b4b 100644
--- a/src/Tasks.UnitTests/MockTypeInfo.cs
+++ b/src/Tasks.UnitTests/MockTypeInfo.cs
@@ -111,12 +111,12 @@ public FuncInfo(ICompositeTypeInfo[] parameters, ICompositeTypeInfo returnType)
     /// </summary>
     public class MockTypeInfo : ITypeInfo, ICompositeTypeInfo, IFixedTypeInfo
     {
-        static private int s_HREF_IMPLTYPES_OFFSET = 1000;
-        static private int s_HREF_VARS_OFFSET = 2000;
-        static private int s_HREF_FUNCSRET_OFFSET = 3000;
-        static private int s_HREF_FUNCSPARAM_OFFSET = 4000;
-        static private int s_HREF_FUNCSPARAM_OFFSET_PERFUNC = 100;
-        static private int s_HREF_RANGE = 999;
+        private static int s_HREF_IMPLTYPES_OFFSET = 1000;
+        private static int s_HREF_VARS_OFFSET = 2000;
+        private static int s_HREF_FUNCSRET_OFFSET = 3000;
+        private static int s_HREF_FUNCSPARAM_OFFSET = 4000;
+        private static int s_HREF_FUNCSPARAM_OFFSET_PERFUNC = 100;
+        private static int s_HREF_RANGE = 999;
 
         private MockTypeLib _containingTypeLib;
 
diff --git a/src/Tasks.UnitTests/Move_Tests.cs b/src/Tasks.UnitTests/Move_Tests.cs
index 36644689e78..5031cacfdd3 100644
--- a/src/Tasks.UnitTests/Move_Tests.cs
+++ b/src/Tasks.UnitTests/Move_Tests.cs
@@ -12,7 +12,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class Move_Tests
+    public sealed class Move_Tests
     {
         /// <summary>
         /// Basic case of moving a file
diff --git a/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs b/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
index 567de6da99d..2fe5ca11c21 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsPropsImportTest.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests that Microsoft.Common.props successfully imports project extensions written by package management systems.
     /// </summary>
-    sealed public class ProjectExtensionsPropsImportTest : ProjectExtensionsImportTestBase
+    public sealed class ProjectExtensionsPropsImportTest : ProjectExtensionsImportTestBase
     {
         protected override string CustomImportProjectPath => Path.Combine(ObjectModelHelpers.TempProjectDir, "obj", $"{Path.GetFileName(_projectRelativePath)}.custom.props");
 
diff --git a/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs b/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
index 6ced7746b7d..cc80a666259 100644
--- a/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
+++ b/src/Tasks.UnitTests/ProjectExtensionsTargetsImportTest.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.UnitTests
     /// <summary>
     /// Tests that Microsoft.Common.props successfully imports project extensions written by package management systems.
     /// </summary>
-    sealed public class ProjectExtensionsTargetsImportTest : ProjectExtensionsImportTestBase
+    public sealed class ProjectExtensionsTargetsImportTest : ProjectExtensionsImportTestBase
     {
         protected override string CustomImportProjectPath => Path.Combine(ObjectModelHelpers.TempProjectDir, "obj", $"{Path.GetFileName(_projectRelativePath)}.custom.targets");
 
diff --git a/src/Tasks.UnitTests/RemoveDir_Tests.cs b/src/Tasks.UnitTests/RemoveDir_Tests.cs
index 2becb7a889d..e34f47cea0c 100644
--- a/src/Tasks.UnitTests/RemoveDir_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDir_Tests.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class RemoveDir_Tests
+    public sealed class RemoveDir_Tests
     {
         ITestOutputHelper _output;
         public RemoveDir_Tests(ITestOutputHelper output)
diff --git a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
index 4e261b92771..d1df2a7dadf 100644
--- a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class RemoveDuplicates_Tests
+    public sealed class RemoveDuplicates_Tests
     {
         /// <summary>
         /// Pass one item in, get the same item back.
diff --git a/src/Tasks.UnitTests/ResolveComReference_Tests.cs b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
index cb8bb5379f2..b8d0750b845 100644
--- a/src/Tasks.UnitTests/ResolveComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
@@ -22,7 +22,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ResolveComReference_Tests
+    public sealed class ResolveComReference_Tests
     {
         /// <summary>
         /// Creates a valid task item that's modified later
diff --git a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
index 2c788d25424..4ae0544b7e7 100644
--- a/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveNonMSBuildProjectOutput_Tests.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ResolveNonMSBuildProjectOutput_Tests
+    public sealed class ResolveNonMSBuildProjectOutput_Tests
     {
         private const string attributeProject = "Project";
 
@@ -25,7 +25,7 @@ public ResolveNonMSBuildProjectOutput_Tests(ITestOutputHelper output)
             _output = output;
         }
 
-        static internal ITaskItem CreateReferenceItem(string itemSpec, string projectGuid, string package, string name)
+        internal static ITaskItem CreateReferenceItem(string itemSpec, string projectGuid, string package, string name)
         {
             TaskItem reference = new TaskItem(itemSpec);
 
@@ -84,7 +84,7 @@ public void TestVerifyReferenceAttributes()
                 false, "Project");
         }
 
-        static internal string CreatePregeneratedPathDoc(IDictionary projectOutputs)
+        internal static string CreatePregeneratedPathDoc(IDictionary projectOutputs)
         {
             string xmlString = "<VSIDEResolvedNonMSBuildProjectOutputs>";
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
index 1a6baec5f1e..d975c7789f5 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.UnitTests.GenerateResource_Tests.OutOfProc
 {
     [Trait("Category", "mono-osx-failing")]
     [Trait("Category", "mono-windows-failing")]
-    sealed public class RequiredTransformations
+    public sealed class RequiredTransformations
     {
         private readonly ITestOutputHelper _output;
 
@@ -1280,7 +1280,7 @@ public void STRWithResourcesNamespaceAndSTRNamespaceVB()
         }
     }
 
-    sealed public class TransformationErrors
+    public sealed class TransformationErrors
     {
         private readonly ITestOutputHelper _output;
 
@@ -1696,7 +1696,7 @@ public void InvalidReference()
         }
     }
 
-    sealed public class PropertyHandling
+    public sealed class PropertyHandling
     {
         private readonly ITestOutputHelper _output;
 
@@ -2011,7 +2011,7 @@ public void StronglyTypedFileName()
         }
     }
 
-    sealed public class PropertyErrors
+    public sealed class PropertyErrors
     {
         private readonly ITestOutputHelper _output;
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index c8b095568d2..b939ba2f185 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -1607,7 +1607,7 @@ public void STRWithResourcesNamespaceAndSTRNamespaceVB()
         }
     }
 
-    sealed public class TransformationErrors
+    public sealed class TransformationErrors
     {
         private readonly ITestOutputHelper _output;
 
@@ -2040,7 +2040,7 @@ public void InvalidReference()
         }
     }
 
-    sealed public class PropertyHandling
+    public sealed class PropertyHandling
     {
         private readonly ITestOutputHelper _output;
 
@@ -2367,7 +2367,7 @@ public void StronglyTypedFileName()
         }
     }
 
-    sealed public class PropertyErrors
+    public sealed class PropertyErrors
     {
         private readonly ITestOutputHelper _output;
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
index 1cd7d218fa3..49f37f909ae 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class ResGenDependencies_Tests
+    public sealed class ResGenDependencies_Tests
     {
         [Theory]
         [MemberData(nameof(GenerateResource_Tests.Utilities.UsePreserializedResourceStates), MemberType = typeof(GenerateResource_Tests.Utilities))]
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
index b4ac8290ae1..55e86ffbd73 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGen_Tests.cs
@@ -580,7 +580,7 @@ private void VerifyLogDoesNotContainResource(MockEngine e, TaskLoggingHelper log
         /// LogPrivate is a private property.
         /// </summary>
         /// <returns></returns>
-        static private TaskLoggingHelper GetPrivateLog(ToolTask task)
+        private static TaskLoggingHelper GetPrivateLog(ToolTask task)
         {
             PropertyInfo logPrivateProperty = typeof(ToolTask).GetProperty("LogPrivate", BindingFlags.Instance | BindingFlags.NonPublic);
             return (TaskLoggingHelper)logPrivateProperty.GetValue(task, null);
diff --git a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
index 454e37ac408..8ba4e5135b3 100644
--- a/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
+++ b/src/Tasks.UnitTests/SdkToolsPathUtility_Tests.cs
@@ -12,7 +12,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class SdkToolsPathUtility_Tests
+    public sealed class SdkToolsPathUtility_Tests
     {
         private string _defaultSdkToolsPath = NativeMethodsShared.IsWindows ? "C:\\ProgramFiles\\WIndowsSDK\\bin" : "/ProgramFiles/WindowsSDK/bin";
         private TaskLoggingHelper _log = null;
diff --git a/src/Tasks.UnitTests/StreamHelpers.cs b/src/Tasks.UnitTests/StreamHelpers.cs
index adcafcd19a7..662484bb726 100644
--- a/src/Tasks.UnitTests/StreamHelpers.cs
+++ b/src/Tasks.UnitTests/StreamHelpers.cs
@@ -7,7 +7,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed internal class StreamHelpers
+    internal sealed class StreamHelpers
     {
         /*
          * Method:  StringToStream (overload)
@@ -15,7 +15,7 @@ sealed internal class StreamHelpers
          * Take a string and convert it into a Stream.
          * Use the default encoding which means this machine's ANSI codepage.
          */
-        static internal Stream StringToStream(string value)
+        internal static Stream StringToStream(string value)
         {
 #if FEATURE_ENCODING_DEFAULT
             return StringToStream(value, System.Text.Encoding.Default); // We want this to be Default which is ANSI
@@ -30,7 +30,7 @@ static internal Stream StringToStream(string value)
          * Take a string and convert it into a Stream.
          * Takes an alternate encoding type
          */
-        static internal Stream StringToStream(string value, System.Text.Encoding encoding)
+        internal static Stream StringToStream(string value, System.Text.Encoding encoding)
         {
             MemoryStream m = new MemoryStream();
             TextWriter w = new StreamWriter(m, encoding); // HIGHCHAR: StringToStream helper accepts encoding from caller.
diff --git a/src/Tasks.UnitTests/StreamMappedString_Tests.cs b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
index 544c7eed446..ad5d7ea0b69 100644
--- a/src/Tasks.UnitTests/StreamMappedString_Tests.cs
+++ b/src/Tasks.UnitTests/StreamMappedString_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class StreamMappedString_Tests
+    public sealed class StreamMappedString_Tests
     {
         /// <summary>
         /// Test for a string that has ANSI but non-ascii characters.
diff --git a/src/Tasks.UnitTests/TlbImp_Tests.cs b/src/Tasks.UnitTests/TlbImp_Tests.cs
index 83a624554c6..4e367afa97d 100644
--- a/src/Tasks.UnitTests/TlbImp_Tests.cs
+++ b/src/Tasks.UnitTests/TlbImp_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests.AxTlbImp_Tests
 {
-    sealed public class TlbImp_Tests
+    public sealed class TlbImp_Tests
     {
         /// <summary>
         /// Tests that /machine flag will be set.
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 5ebc57b915e..bb0e2b9d03c 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class Touch_Tests
+    public sealed class Touch_Tests
     {
         internal static Microsoft.Build.Shared.FileExists fileExists = new Microsoft.Build.Shared.FileExists(FileExists);
         internal static Microsoft.Build.Shared.FileCreate fileCreate = new Microsoft.Build.Shared.FileCreate(FileCreate);
diff --git a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
index 8b4f52d62dc..80ef700d874 100644
--- a/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicParserUtilitites_Tests.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class VisualBasicParserUtilititesTests
+    public sealed class VisualBasicParserUtilititesTests
     {
         // Try just and empty file
         [Fact]
diff --git a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
index 61d39ccfee6..d3535af80b7 100644
--- a/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
+++ b/src/Tasks.UnitTests/VisualBasicTokenizer_Tests.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class VisualBasicTokenizer_Tests
+    public sealed class VisualBasicTokenizer_Tests
     {
         [Fact]
         public void Empty() { AssertTokenize("", "", "", 0); }
@@ -222,7 +222,7 @@ public void Regress_Mutation_x0dx0aIsASingleLine()
         * Also, the source must be regenerated exactly when the tokens are concatenated 
         * back together,
         */
-        static private void AssertTokenize(string source, string expectedTokenKey)
+        private static void AssertTokenize(string source, string expectedTokenKey)
         {
             // Most of the time, we expect the rebuilt source to be the same as the input source.
             AssertTokenize(source, source, expectedTokenKey, 1);
@@ -235,7 +235,7 @@ static private void AssertTokenize(string source, string expectedTokenKey)
         * Also compare the source that is regenerated by concatenating all of the tokens
         * to 'expectedSource'.
         */
-        static private void AssertTokenize
+        private static void AssertTokenize
         (
            string source,
            string expectedSource,
diff --git a/src/Tasks.UnitTests/WinMDExp_Tests.cs b/src/Tasks.UnitTests/WinMDExp_Tests.cs
index 437c7704471..2e2e30c8ddc 100644
--- a/src/Tasks.UnitTests/WinMDExp_Tests.cs
+++ b/src/Tasks.UnitTests/WinMDExp_Tests.cs
@@ -12,7 +12,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class WinMDExpTests
+    public sealed class WinMDExpTests
     {
         /// <summary>
         /// Tests the "References" parameter on the winmdexp task, and confirms that it sets
diff --git a/src/Tasks.UnitTests/XmlPeek_Tests.cs b/src/Tasks.UnitTests/XmlPeek_Tests.cs
index 6bb0e046a8f..bac691b5b7c 100644
--- a/src/Tasks.UnitTests/XmlPeek_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPeek_Tests.cs
@@ -11,7 +11,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class XmlPeek_Tests
+    public sealed class XmlPeek_Tests
     {
         private string _xmlFileWithNs = @"<?xml version='1.0' encoding='utf-8'?>
 
diff --git a/src/Tasks.UnitTests/XmlPoke_Tests.cs b/src/Tasks.UnitTests/XmlPoke_Tests.cs
index 88caa456fad..21d8b6bd9c4 100644
--- a/src/Tasks.UnitTests/XmlPoke_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPoke_Tests.cs
@@ -15,7 +15,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
-    sealed public class XmlPoke_Tests
+    public sealed class XmlPoke_Tests
     {
         private const string XmlNamespaceUsedByTests = "http://nsurl";
 
diff --git a/src/Tasks.UnitTests/XslTransformation_Tests.cs b/src/Tasks.UnitTests/XslTransformation_Tests.cs
index 8241951081a..b3b19bf088f 100644
--- a/src/Tasks.UnitTests/XslTransformation_Tests.cs
+++ b/src/Tasks.UnitTests/XslTransformation_Tests.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Build.UnitTests
     /// 20. XslDocument that throws runtime exception.
     /// 21. Passing a dll that has two types to XsltCompiledDll parameter without specifying a type.
     /// </summary>
-    sealed public class XslTransformation_Tests
+    public sealed class XslTransformation_Tests
     {
         /// <summary>
         /// The "surround" regex.
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index 9ad4a1f1bdb..a9021a09f9f 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// A reference to an assembly along with information about resolution.
     /// </summary>
-    sealed internal class Reference
+    internal sealed class Reference
     {
         /// <summary>
         /// dictionary where ITaskItem.ItemSpec (a string) is the key and ITaskItem is the value.
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 337511e8a91..9c904e18ac2 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -124,26 +124,26 @@ internal struct AXL_TIMESTAMPER_INFO
         // DllImport declarations.
         //
         [DllImport(KERNEL32, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         IntPtr GetProcessHeap();
 
         [DllImport(KERNEL32, CharSet = CharSet.Auto, SetLastError = true)]
         [return: MarshalAs(UnmanagedType.Bool)]
-        internal extern static
+        internal static extern
         bool HeapFree(
             [In]    IntPtr hHeap,
             [In]    uint dwFlags,
             [In]    IntPtr lpMem);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int CertTimestampAuthenticodeLicense(
             [In]      ref CRYPT_DATA_BLOB pSignedLicenseBlob,
             [In]      string pwszTimestampURI,
             [In, Out]  ref CRYPT_DATA_BLOB pTimestampSignatureBlob);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int CertVerifyAuthenticodeLicense(
             [In]      ref CRYPT_DATA_BLOB pLicenseBlob,
             [In]      uint dwFlags,
@@ -151,30 +151,30 @@ int CertVerifyAuthenticodeLicense(
             [In, Out]  ref AXL_TIMESTAMPER_INFO pTimestamperInfo);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int CertFreeAuthenticodeSignerInfo(
             [In]      ref AXL_SIGNER_INFO pSignerInfo);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int CertFreeAuthenticodeTimestamperInfo(
             [In]      ref AXL_TIMESTAMPER_INFO pTimestamperInfo);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int _AxlGetIssuerPublicKeyHash(
             [In]     IntPtr pCertContext,
             [In, Out] ref IntPtr ppwszPublicKeyHash);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int _AxlRSAKeyValueToPublicKeyToken(
             [In]     ref CRYPT_DATA_BLOB pModulusBlob,
             [In]     ref CRYPT_DATA_BLOB pExponentBlob,
             [In, Out] ref IntPtr ppwszPublicKeyToken);
 
         [DllImport(MSCORWKS, CharSet = CharSet.Auto, SetLastError = true)]
-        internal extern static
+        internal static extern
         int _AxlPublicKeyBlobToPublicKeyToken(
             [In]     ref CRYPT_DATA_BLOB pCspPublicKeyBlob,
             [In, Out] ref IntPtr ppwszPublicKeyToken);
@@ -213,7 +213,7 @@ internal struct CRYPT_TIMESTAMP_PARA
         [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
         [DllImport(CRYPT32, CallingConvention = CallingConvention.Winapi, SetLastError = true)]
         [return: MarshalAs(UnmanagedType.Bool)]
-        internal extern static
+        internal static extern
         bool CryptRetrieveTimeStamp(
             [In]     [MarshalAs(UnmanagedType.LPWStr)]  string wszUrl,
             [In]     uint dwRetrievalFlags,
