diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 9e8211cd3dc..a997889edce 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -214,7 +214,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
         void ReleaseCores(int coresToRelease);
-        int RequestCores(int requestedCores);
+        System.Nullable<int> RequestCores(int requestedCores);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index ea0615e7872..c6f926b81f8 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -214,7 +214,7 @@ public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
     {
         void ReleaseCores(int coresToRelease);
-        int RequestCores(int requestedCores);
+        System.Nullable<int> RequestCores(int requestedCores);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index fd048a8c16a..bd6fb1eef23 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -684,7 +684,7 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         int runningTotal = 0;
 
-        public int RequestCores(int requestedCores)
+        public int? RequestCores(int requestedCores)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
@@ -692,7 +692,10 @@ public int RequestCores(int requestedCores)
 
             var coresAcquired = rms.RequestCores(requestedCores);
 
-            runningTotal += coresAcquired;
+            if (coresAcquired.HasValue)
+            {
+                runningTotal += coresAcquired.Value;
+            }
 
             return coresAcquired;
         }
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 08b13925ebe..42e9ec47b73 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -56,7 +56,7 @@ public void ShutdownComponent()
 #endif
         }
 
-        public int RequestCores(int requestedCores)
+        public int? RequestCores(int requestedCores)
         {
             if (s is null)
             {
@@ -65,7 +65,7 @@ public int RequestCores(int requestedCores)
                     // Since the current implementation of the cross-process resource count uses
                     // named semaphores, it's not usable on non-Windows, so just return the
                     // guaranteed resource.
-                    return 1;
+                    return null;
                 }
 
                 throw new InternalErrorException($"{nameof(ResourceManagerService)} was called while uninitialized");
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
index 5c73b072a75..85e61dfc7c2 100644
--- a/src/Framework/IBuildEngine8.cs
+++ b/src/Framework/IBuildEngine8.cs
@@ -14,7 +14,7 @@ public interface IBuildEngine8 : IBuildEngine7
         /// </summary>
         /// <param name="requestedCores">The number of cores a task can potentially use.</param>
         /// <returns>The number of cores a task is allowed to use.</returns>
-        int RequestCores(int requestedCores);
+        int? RequestCores(int requestedCores);
 
         /// <summary>
         /// A task should notify the build manager when all or some of the requested cores are not used anymore.
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index bebd72ec86d..9163337cd6c 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -1162,14 +1162,15 @@ private void LogErrorFromResource(string messageResource)
             LogErrorEvent(error);
         }
 
-        public int RequestCores(int requestedCores)
+        public int? RequestCores(int requestedCores)
         {
-            throw new NotImplementedException();
+            // indicate to caller that resource management isn't hooked up
+            return null;
         }
 
         public void ReleaseCores(int coresToRelease)
         {
-            throw new NotImplementedException();
+            // Do nothing: no resource management in OOP nodes
         }
 
         public void BlockingWaitForCore()
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index b51fb33a09a..5f39b7f7cd0 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -490,7 +490,7 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
 
         int runningTotal = 0;
         Semaphore cpuCount;
-        public int RequestCores(int requestedCores)
+        public int? RequestCores(int requestedCores)
         {
             cpuCount ??= Semaphore.OpenExisting(ResourceSemaphoreName);
 
