diff --git a/documentation/specs/proposed/MSBuild_Server_onepager.md b/documentation/specs/proposed/MSBuild_Server_onepager.md
index d6f842b38ed..e9221f6802c 100644
--- a/documentation/specs/proposed/MSBuild_Server_onepager.md
+++ b/documentation/specs/proposed/MSBuild_Server_onepager.md
@@ -5,6 +5,8 @@ that we would communicate with via a thin client. We want to get from
 the current state of “spawn a complete process for every CLI invocation”
 to “we have a server process in the background and we only spawn a small
 CLI handler that will tell the server what to build”.
+This project is based on an already existing project: [MSBuild Server](https://github.com/dotnet/msbuild/blob/main/documentation/MSBuild-Server.md). 
+We need to re-enable it and figure out the way forward.
 
 ### Goals and Motivation
 
@@ -27,22 +29,33 @@ Small performance improvement in the short term. Enabling further
 optimizations in the long term. (these improvements are for the Dev Kit
 and inner loop CLI scenarios)
 
-Getting closer to the possibility of decoupling from Visual Studio.
+Getting closer to the possibility of decoupling from Visual Studio. VS is currently 
+acting as a MSBuild server in some ways - they are a persistent process that  invokes 
+portions of the MSBuild. We ideally want to transition into "VS calls our server 
+instead" relation, to make our behavior consistent for both VS and CLI based
+builds.
 
 ### Stakeholders
 
-Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the
+MSBuild Team. Successful handover means turning on the
 feature, dogfooding it for long enough to ensure we have reasonable
 certainty that nothing breaks and then rolling it out.
+We should cooperate with our close repositories like SDK and roslyn 
+to get them to opt in before we roll the feature out.
 
 ### Risks
 
 The project was already attempted once, however it was postponed because
 it surfaced a group of bugs that weren’t previously visible due to the
-processes not being persistent. Most of those bugs should be solved by
-now, however we can run into some new ones.
+processes not being persistent. One such example is Nuget authentication caching,
+which was a non-isue for a non persistent process but became a blocker
+due to the cache not being refreshable in-process.
+Most of those bugs should be solved by now, however we can run into some 
+new ones. Unfortunately the nature of the bugs means that these won't become
+apparent until we start with the dogfooding.
 
 ### Cost
+Note that these are mostly my rough guess based on my limited knowledge.
 
 A week to figure out how to turn on the MSBuild Server in a way that
 will enable us to dogfood it properly **plus** some overhead for the
@@ -57,10 +70,10 @@ with dogfooding.
 ### Plan
 
 - In a first month we should aim to get the MSBuild server dogfooded for
-  our internal time. (Coding + review + setting up)
+  our MSBuild repository inner development loop. (Coding + review + setting up)
 
 - Second month we will monitor it and fix anything that crops up.
 
-- After that we start dogfooding internally for as long as we feel
-  necessary to ensure everything works as intended. I would give this
-  period one to three months of monitoring + bugfixing when necessary.
+- After that we start dogfooding internally in our neighbor repositories(SDK, roslyn)
+ for as long as we feel   necessary to ensure everything works as intended. I would 
+ give this period one to three months of monitoring + bugfixing when necessary.
\ No newline at end of file
diff --git a/documentation/specs/proposed/RAR_caching_onepager.md b/documentation/specs/proposed/RAR_caching_onepager.md
index 4ebba7dbdd6..c44816add48 100644
--- a/documentation/specs/proposed/RAR_caching_onepager.md
+++ b/documentation/specs/proposed/RAR_caching_onepager.md
@@ -1,5 +1,5 @@
 ## RAR caching
-
+RAR in this context means resolving of assembly references.
 During every build we need to gather the graph of references and pass
 them to the compiler. This process is highly cacheable as the references
 don’t change all that often. Currently we have some limited caching in
@@ -8,8 +8,9 @@ misses.
 
 ### Goals and motivations
 
-1ES team wants to isolate their File I/O related to the which is causing
-issues to their debugging efforts.
+1ES team wants to isolate their File I/O related to the RAR caching which is causing
+issues to their debugging efforts. This is mostly due to the fact that MSBuild is pulling
+files from all nodes at once which results in a tangled mess of IO that is hard to debug.
 
 Our motivation is a possible performance gain however we’re fine with
 the change as long as the impact is not negative.
@@ -27,7 +28,8 @@ that this balance will be a net positive performance wise.
 
 1ES team will provide the initial cache implementation. We will review
 their PRs and do the performance evaluations. Handover will be
-successful if nothing breaks and we meet our performance requirements.
+successful if nothing breaks and we meet our performance requirements
+(no regression or better still an improvement).
 
 ### Risks
 
@@ -35,6 +37,7 @@ Some time ago Roman Konecny estimated the RAR caching to not be worth it
 performance wise. 1ES team claims to have created an implementation that
 will either improve or not change the performance. We need to validate
 this claim and push back in case we find performance regression.
+Thorough testing will be needed especially 
 
 The risk is having to figure out a different way to help 1ES team to
 isolate their File I/Os if the caching hurts the performance. This could
@@ -52,3 +55,5 @@ Some communication overhead
 
 We review the PR with a special emphasis on the performance side of
 things.
+Then we merge the changes. There is no expected follow up beyond the
+usual maintenance for our codebase.
\ No newline at end of file
