diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index 46e86a679c9..335dcf77097 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -340,31 +341,23 @@ private static string GetIncrementalBuildReason(DependencyAnalysisLogDetail logD
         /// </summary>
         private void LogUniqueInputsAndOutputs()
         {
-            var targetInputKeys = _uniqueTargetInputs.Keys;
-            var targetOutputKeys = _uniqueTargetOutputs.Keys;
-
-            var maxContentLength = Math.Max(LengthSum(targetInputKeys), LengthSum(targetOutputKeys));
-            var maxSeparatorLength = Math.Max(targetInputKeys.Count, targetOutputKeys.Count);
-
-            using (var sb = new ReuseableStringBuilder(maxContentLength + maxSeparatorLength))
-            {
-                _loggingService.LogComment(_buildEventContext, MessageImportance.Low, "SkipTargetUpToDateInputs", sb.AppendSeparated(';', targetInputKeys).ToString());
-
-                sb.Clear();
-
-                _loggingService.LogComment(_buildEventContext, MessageImportance.Low, "SkipTargetUpToDateOutputs", sb.AppendSeparated(';', targetOutputKeys).ToString());
-            }
-
-            int LengthSum(ICollection<string> collection)
-            {
-                var sum = 0;
-                foreach (var targetInput in collection)
-                {
-                    sum += targetInput.Length;
-                }
-
-                return sum;
-            }
+            var args = ItemGroupLoggingHelper.CreateTaskParameterEventArgs(
+                _buildEventContext,
+                TaskParameterMessageKind.SkippedTargetInputs,
+                itemType: null,
+                _uniqueTargetInputs.Keys.ToArray(),
+                logItemMetadata: false,
+                DateTime.UtcNow);
+            _loggingService.LogBuildEvent(args);
+
+            args = ItemGroupLoggingHelper.CreateTaskParameterEventArgs(
+                _buildEventContext,
+                TaskParameterMessageKind.SkippedTargetOutputs,
+                itemType: null,
+                _uniqueTargetOutputs.Keys.ToArray(),
+                logItemMetadata: false,
+                DateTime.UtcNow);
+            _loggingService.LogBuildEvent(args);
         }
 
         /// <summary>
