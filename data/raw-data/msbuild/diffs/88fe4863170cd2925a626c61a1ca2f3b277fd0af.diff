diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 0aa6e09f668..f3de2218a81 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -28,19 +28,18 @@ public FancyLogger()
         public void Initialize(IEventSource eventSource)
         {
             // Register for different events
-            // Started
+            // - Started
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
             eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
             eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
-            // Finished
+            // - Finished
             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);
             eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);
             eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
             // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
             // Raised
-            // TODO: Enable next build
-            // eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
@@ -75,6 +74,7 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             // Log
             node.Log();
         }
+
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
@@ -82,8 +82,10 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update line
             node.Finished = true;
+            // Log
             node.Log();
         }
+
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
@@ -92,9 +94,10 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddTarget(e);
-
+            // Log
             node.Log();
         }
+
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             // Get project id
@@ -102,7 +105,7 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.FinishedTargets++;
-
+            // Log
             node.Log();
         }
 
@@ -111,12 +114,11 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddTask(e);
             existingTasks++;
-
+            // Log
             node.Log();
         }
 
@@ -125,6 +127,7 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
             completedTasks++;
         }
 
+        // Raised messages, warnings and errors
         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         {
             // Get project id
@@ -132,9 +135,10 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddMessage(e);
-
+            // Log
             node.Log();
         }
+
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
@@ -142,7 +146,7 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddWarning(e);
-
+            // Log
             node.Log();
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
@@ -152,7 +156,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddError(e);
-
+            // Log
             node.Log();
         }
 
@@ -179,6 +183,7 @@ public void Shutdown()
                     Console.WriteLine(message.ToANSIString());
                 }
             }
+
             // Emmpty line
             Console.WriteLine();
             if (Succeeded)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 252fdf1f113..cd76d299c5b 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -7,7 +7,6 @@
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
-// using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
@@ -22,6 +21,7 @@ public string Text
             get => _text;
             set
             {
+                // Set text value and get wrapped lines
                 _text = value;
                 WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
             }
@@ -48,19 +48,17 @@ public class FancyLoggerBuffer
         private static bool IsTerminated = false;
         public static void Initialize()
         {
-            // Use alternate buffer
-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
-            // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
-            Console.OutputEncoding = Encoding.UTF8;
-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
             Task.Run(() =>
             {
+                // Configure buffer, encoding and cursor
+                Console.OutputEncoding = Encoding.UTF8;
+                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
                 Console.Write(ANSIBuilder.Cursor.Invisible());
-                // Use encoding
-                Console.OutputEncoding = System.Text.Encoding.UTF8;
+
                 // Counter for delaying render
                 int i = 0;
+
                 // Execute while the buffer is active
                 while (!IsTerminated)
                 {
@@ -70,9 +68,9 @@ public static void Initialize()
                     {
                         Render();
                     });
-                    // Handle keyboard input
                     if (Console.KeyAvailable)
                     { 
+                        // Handle keyboard input
                         ConsoleKey key = Console.ReadKey().Key;
                         switch (key)
                         {
@@ -96,12 +94,12 @@ public static void Initialize()
         public static void Terminate()
         {
             IsTerminated = true;
-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
-            Console.Clear();
+            // Reset configuration for buffer and cursor, and clear screen
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Eraser.Display());
-
             Console.Write(ANSIBuilder.Cursor.Visible());
+            // TODO: Remove. Fixes a bug that causes contents of the alternate buffer to still show up in the main buffer
+            Console.Clear();
             Lines = new();
         }
 
@@ -109,7 +107,6 @@ public static void Terminate()
         public static void Render()
         {
             if (IsTerminated) return;
-            // Write Header
             Console.Write(
                 // Write header
                 ANSIBuilder.Cursor.Home() +
@@ -120,6 +117,7 @@ public static void Render()
                 new string('-', Console.BufferWidth) +$"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}"
             );
             if (Lines.Count == 0) return;
+
             // Iterate over lines and display on terminal
             // TODO: Delimit range to improve performance 
             int accumulatedLineCount = 0;
@@ -165,8 +163,6 @@ public static int GetLineIndexById(int lineId)
         }
         public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line, bool overrideOverflowLines = false)
         {
-            // Save top line (current if no lines)
-            // int topLineId = Lines.Count > 0 ? Lines[TopLineIndex].Id : line.Id;
             if (lineId != -1)
             {
                 // Get line index
@@ -179,9 +175,7 @@ public static int GetLineIndexById(int lineId)
             {
                 Lines.Add(line);
             }
-            // Get updated top line index
-            // TopLineIndex = GetLineIndexById(topLineId);
-            // Return
+            // TODO: Handle autoscrolling
             return line;
         }
 
@@ -204,12 +198,12 @@ public static int GetLineIndexById(int lineId)
             line.Text = text;
             // Return
             return line;
+            // TODO: Handle autoscrolling
         }
 
         // Delete line
         public static void DeleteLine(int lineId)
         {
-            // TODO: What if line id is equal to topLineId?????
             // Get line index
             int lineIndex = GetLineIndexById(lineId);
             if (lineIndex == -1) return;
@@ -217,11 +211,7 @@ public static void DeleteLine(int lineId)
             int topLineId = Lines[TopLineIndex].Id;
             // Delete
             Lines.RemoveAt(lineIndex);
-            // Get updated top line index
-            if (topLineId != lineId)
-            {
-                // TopLineIndex = GetLineIndexById(topLineId);
-            }
+            // TODO: Handle autoscrolling
         }
         #endregion
     }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 03ba7a33cb1..976077f6dec 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -18,7 +18,6 @@ public enum MessageType
         public string Message;
         public FancyLoggerBufferLine? Line;
         public MessageType Type;
-        //
         public string? Code;
         public string? FilePath;
         public int? LineNumber;
