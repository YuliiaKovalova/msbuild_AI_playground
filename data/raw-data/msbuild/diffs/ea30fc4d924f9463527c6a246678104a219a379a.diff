diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 61bdba09094..98009f123d8 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -21,12 +21,12 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.FileAccesses;
 using Microsoft.Build.Framework;
@@ -2950,7 +2950,8 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
             });
         }
 
-        public BinaryLogReplayEventSource GetBinaryLogReplayEventSourceWithAttachedBuildCheck()
+        public BuildCheckBinaryLogReplaySourcerWrapper GetBuildCheckBinaryLogReplayEventSourceWrapper(
+            BinaryLogReplayEventSource replayEventSource)
         {
             _buildParameters = new BuildParameters
             {
@@ -2962,9 +2963,11 @@ public BinaryLogReplayEventSource GetBinaryLogReplayEventSourceWithAttachedBuild
 
             buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);
 
-            var eventDispatcher = new BuildCheckEventArgsDispatcher(buildCheckManagerProvider.Instance);
+            var buildCheckEventHandler = new BuildCheckBuildEventHandler(
+                new AnalysisDispatchingContextFactory(replayEventSource.Dispatch),
+                buildCheckManagerProvider.Instance);
 
-            return new BinaryLogReplayEventSource(eventDispatcher);
+            return new BuildCheckBinaryLogReplaySourcerWrapper(replayEventSource, buildCheckEventHandler);
         }
 
         /// <summary>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs
new file mode 100644
index 00000000000..ad9e61fafc4
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs
@@ -0,0 +1,76 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Logging;
+
+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
+
+public class BuildCheckBinaryLogReplaySourcerWrapper : IBinaryLogReplaySource
+{
+    private readonly BinaryLogReplayEventSource _replayEventSource;
+    private readonly IBuildEventHandler _buildCheckEventHandler;
+
+    public BuildCheckBinaryLogReplaySourcerWrapper(
+        BinaryLogReplayEventSource replayEventSource,
+        IBuildEventHandler buildCheckEventHandler)
+    {
+        _replayEventSource = replayEventSource;
+        _buildCheckEventHandler = buildCheckEventHandler;
+
+        InitializeEventHandlers();
+    }
+
+    public void Replay(string sourceFilePath, CancellationToken cancellationToken)
+        => _replayEventSource.Replay(sourceFilePath, cancellationToken, Dispatch);
+
+    private void Dispatch(BuildEventArgs buildEvent)
+    {
+        _replayEventSource.Dispatch(buildEvent);
+
+        _buildCheckEventHandler.HandleBuildEvent(buildEvent);
+    }
+
+    #region Events
+
+    public event BuildMessageEventHandler? MessageRaised;
+    public event BuildErrorEventHandler? ErrorRaised;
+    public event BuildWarningEventHandler? WarningRaised;
+    public event BuildStartedEventHandler? BuildStarted;
+    public event BuildFinishedEventHandler? BuildFinished;
+    public event ProjectStartedEventHandler? ProjectStarted;
+    public event ProjectFinishedEventHandler? ProjectFinished;
+    public event TargetStartedEventHandler? TargetStarted;
+    public event TargetFinishedEventHandler? TargetFinished;
+    public event TaskStartedEventHandler? TaskStarted;
+    public event TaskFinishedEventHandler? TaskFinished;
+    public event CustomBuildEventHandler? CustomEventRaised;
+    public event BuildStatusEventHandler? StatusEventRaised;
+    public event AnyEventHandler? AnyEventRaised;
+
+    private void InitializeEventHandlers()
+    {
+        _replayEventSource.MessageRaised += (sender, e) => MessageRaised?.Invoke(sender, e);
+        _replayEventSource.ErrorRaised += (sender, e) => ErrorRaised?.Invoke(sender, e);
+        _replayEventSource.WarningRaised += (sender, e) => WarningRaised?.Invoke(sender, e);
+        _replayEventSource.BuildStarted += (sender, e) => BuildStarted?.Invoke(sender, e);
+        _replayEventSource.BuildFinished += (sender, e) => BuildFinished?.Invoke(sender, e);
+        _replayEventSource.ProjectStarted += (sender, e) => ProjectStarted?.Invoke(sender, e);
+        _replayEventSource.ProjectFinished += (sender, e) => ProjectFinished?.Invoke(sender, e);
+        _replayEventSource.TargetStarted += (sender, e) => TargetStarted?.Invoke(sender, e);
+        _replayEventSource.TargetFinished += (sender, e) => TargetFinished?.Invoke(sender, e);
+        _replayEventSource.TaskStarted += (sender, e) => TaskStarted?.Invoke(sender, e);
+        _replayEventSource.TaskFinished += (sender, e) => TaskFinished?.Invoke(sender, e);
+        _replayEventSource.CustomEventRaised += (sender, e) => CustomEventRaised?.Invoke(sender, e);
+        _replayEventSource.StatusEventRaised += (sender, e) => StatusEventRaised?.Invoke(sender, e);
+        _replayEventSource.AnyEventRaised += (sender, e) => AnyEventRaised?.Invoke(sender, e);
+    }
+
+    #endregion
+}
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index dc4c9a19bc9..bc72c651fc7 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -13,7 +13,7 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
-internal class BuildCheckBuildEventHandler
+internal class BuildCheckBuildEventHandler : IBuildEventHandler
 {
     private readonly IBuildCheckManager _buildCheckManager;
     private readonly IAnalysisContextFactory _analyzerContextFactory;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
deleted file mode 100644
index 33344826809..00000000000
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
+++ /dev/null
@@ -1,31 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Framework;
-using Microsoft.Build.Logging;
-
-namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-
-public class BuildCheckEventArgsDispatcher : EventArgsDispatcher
-{
-    private readonly BuildCheckBuildEventHandler _buildCheckEventHandler;
-
-    internal BuildCheckEventArgsDispatcher(IBuildCheckManager buildCheckManager)
-        => _buildCheckEventHandler = new BuildCheckBuildEventHandler(
-            new AnalysisDispatchingContextFactory(base.Dispatch),
-            buildCheckManager);
-
-    public override void Dispatch(BuildEventArgs buildEvent)
-    {
-        base.Dispatch(buildEvent);
-
-        _buildCheckEventHandler.HandleBuildEvent(buildEvent);
-    }
-}
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs
new file mode 100644
index 00000000000..1cd4a78d671
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs
@@ -0,0 +1,11 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+public interface IBuildEventHandler
+{
+    void HandleBuildEvent(BuildEventArgs e);
+}
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index 85c07f6adee..59670d19a62 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -11,10 +11,15 @@
 
 namespace Microsoft.Build.Logging
 {
+    public interface IBinaryLogReplaySource : IEventSource
+    {
+        void Replay(string sourceFilePath, CancellationToken cancellationToken);
+    }
+
     /// <summary>
     /// Interface for replaying a binary log file (*.binlog)
     /// </summary>
-    internal interface IBinaryLogReplaySource :
+    internal interface IBinaryLogEventReaderNotificationsReplaySource :
         IEventSource,
         IBuildEventArgsReaderNotifications
     {
@@ -59,30 +64,17 @@ void DeferredInitialize(
     /// by implementing IEventSource and raising corresponding events.
     /// </summary>
     /// <remarks>The class is public so that we can call it from MSBuild.exe when replaying a log file.</remarks>
-    public sealed class BinaryLogReplayEventSource : IBinaryLogReplaySource
+    public sealed class BinaryLogReplayEventSource :
+        EventArgsDispatcher,
+        IBinaryLogEventReaderNotificationsReplaySource,
+        IBinaryLogReplaySource
     {
         private int? _fileFormatVersion;
         private int? _minimumReaderVersion;
 
-        private readonly EventArgsDispatcher _eventDispatcher;
-
         public int FileFormatVersion => _fileFormatVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
         public int MinimumReaderVersion => _minimumReaderVersion ?? throw new InvalidOperationException(ResourceUtilities.GetResourceString("Binlog_Source_VersionUninitialized"));
 
-        public BinaryLogReplayEventSource()
-        {
-            _eventDispatcher = new EventArgsDispatcher();
-
-            InitializeEventHandlers();
-        }
-
-        public BinaryLogReplayEventSource(EventArgsDispatcher eventDispatcher)
-        {
-            _eventDispatcher = eventDispatcher;
-
-            InitializeEventHandlers();
-        }
-
         /// Touches the <see cref="ItemGroupLoggingHelper"/> static constructor
         /// to ensure it initializes <see cref="TaskParameterEventArgs.MessageGetter"/>
         /// and <see cref="TaskParameterEventArgs.DictionaryFactory"/>
@@ -96,43 +88,9 @@ static BinaryLogReplayEventSource()
         /// </summary>
         public bool AllowForwardCompatibility { private get; init; }
 
-#region EventHandlers
         /// <inheritdoc cref="IBuildEventArgsReaderNotifications.RecoverableReadError"/>
         public event Action<BinaryLogReaderErrorEventArgs>? RecoverableReadError;
 
-        public event BuildMessageEventHandler? MessageRaised;
-        public event BuildErrorEventHandler? ErrorRaised;
-        public event BuildWarningEventHandler? WarningRaised;
-        public event BuildStartedEventHandler? BuildStarted;
-        public event BuildFinishedEventHandler? BuildFinished;
-        public event ProjectStartedEventHandler? ProjectStarted;
-        public event ProjectFinishedEventHandler? ProjectFinished;
-        public event TargetStartedEventHandler? TargetStarted;
-        public event TargetFinishedEventHandler? TargetFinished;
-        public event TaskStartedEventHandler? TaskStarted;
-        public event TaskFinishedEventHandler? TaskFinished;
-        public event CustomBuildEventHandler? CustomEventRaised;
-        public event BuildStatusEventHandler? StatusEventRaised;
-        public event AnyEventHandler? AnyEventRaised;
-
-        private void InitializeEventHandlers()
-        {
-            _eventDispatcher.MessageRaised += (sender, e) => MessageRaised?.Invoke(sender, e);
-            _eventDispatcher.ErrorRaised += (sender, e) => ErrorRaised?.Invoke(sender, e);
-            _eventDispatcher.WarningRaised += (sender, e) => WarningRaised?.Invoke(sender, e);
-            _eventDispatcher.BuildStarted += (sender, e) => BuildStarted?.Invoke(sender, e);
-            _eventDispatcher.BuildFinished += (sender, e) => BuildFinished?.Invoke(sender, e);
-            _eventDispatcher.ProjectStarted += (sender, e) => ProjectStarted?.Invoke(sender, e);
-            _eventDispatcher.ProjectFinished += (sender, e) => ProjectFinished?.Invoke(sender, e);
-            _eventDispatcher.TargetStarted += (sender, e) => TargetStarted?.Invoke(sender, e);
-            _eventDispatcher.TargetFinished += (sender, e) => TargetFinished?.Invoke(sender, e);
-            _eventDispatcher.TaskStarted += (sender, e) => TaskStarted?.Invoke(sender, e);
-            _eventDispatcher.TaskFinished += (sender, e) => TaskFinished?.Invoke(sender, e);
-            _eventDispatcher.CustomEventRaised += (sender, e) => CustomEventRaised?.Invoke(sender, e);
-            _eventDispatcher.StatusEventRaised += (sender, e) => StatusEventRaised?.Invoke(sender, e);
-            _eventDispatcher.AnyEventRaised += (sender, e) => AnyEventRaised?.Invoke(sender, e);
-        }
-#endregion
         /// <summary>
         /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
         /// </summary>
@@ -238,6 +196,12 @@ public static BuildEventArgsReader OpenBuildEventsReader(
         public static BuildEventArgsReader OpenBuildEventsReader(string sourceFilePath)
             => OpenBuildEventsReader(OpenReader(sourceFilePath), true);
 
+        public void Replay(string sourceFilePath, CancellationToken cancellationToken, Action<BuildEventArgs> dispatchBuildEvent)
+        {
+            using var eventsReader = OpenBuildEventsReader(sourceFilePath);
+            Replay(eventsReader, cancellationToken, dispatchBuildEvent);
+        }
+
         /// <summary>
         /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
         /// </summary>
@@ -275,13 +239,22 @@ public void Replay(BinaryReader binaryReader, bool closeInput, CancellationToken
         /// <param name="reader">The build events reader - caller is responsible for disposing.</param>
         /// <param name="cancellationToken">A <see cref="CancellationToken"/> indicating the replay should stop as soon as possible.</param>
         public void Replay(BuildEventArgsReader reader, CancellationToken cancellationToken)
+            => Replay(reader, cancellationToken, Dispatch);
+
+        /// <summary>
+        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs
+        /// </summary>
+        /// <param name="reader">The build events reader - caller is responsible for disposing.</param>
+        /// <param name="cancellationToken">A <see cref="CancellationToken"/> indicating the replay should stop as soon as possible.</param>
+        /// <param name="dispatchBuildEvent">Dispatcher of the <see cref="BuildEventArgs"/></param>
+        private void Replay(BuildEventArgsReader reader, CancellationToken cancellationToken, Action<BuildEventArgs> dispatchBuildEvent)
         {
             _fileFormatVersion = reader.FileFormatVersion;
             _minimumReaderVersion = reader.MinimumReaderVersion;
             bool supportsForwardCompatibility = reader.FileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion;
 
             // Allow any possible deferred subscriptions to be registered
-            if (_eventDispatcher.HasStructuredEventsSubscribers || !supportsForwardCompatibility)
+            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
                 _onStructuredReadingOnly?.Invoke();
             }
@@ -294,7 +267,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
             reader.ArchiveFileEncountered += _archiveFileEncountered;
             reader.StringReadDone += _stringReadDone;
 
-            if (_eventDispatcher.HasStructuredEventsSubscribers || !supportsForwardCompatibility)
+            if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
             {
                 if (this._rawLogRecordReceived != null)
                 {
@@ -309,7 +282,7 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
 
                 while (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)
                 {
-                    _eventDispatcher.Dispatch(instance);
+                    dispatchBuildEvent(instance);
                 }
             }
             else
@@ -345,8 +318,8 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
 
         private Action? _onRawReadingPossible;
         private Action? _onStructuredReadingOnly;
-        /// <inheritdoc cref="IBinaryLogReplaySource.DeferredInitialize"/>
-        void IBinaryLogReplaySource.DeferredInitialize(
+        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.DeferredInitialize"/>
+        void IBinaryLogEventReaderNotificationsReplaySource.DeferredInitialize(
             Action onRawReadingPossible,
             Action onStructuredReadingOnly)
         {
@@ -355,8 +328,8 @@ void IBinaryLogReplaySource.DeferredInitialize(
         }
 
         private Action<EmbeddedContentEventArgs>? _embeddedContentRead;
-        /// <inheritdoc cref="IBinaryLogReplaySource.EmbeddedContentRead"/>
-        event Action<EmbeddedContentEventArgs>? IBinaryLogReplaySource.EmbeddedContentRead
+        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead"/>
+        event Action<EmbeddedContentEventArgs>? IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead
         {
             // Explicitly implemented event has to declare explicit add/remove accessors
             //  https://stackoverflow.com/a/2268472/2308106
@@ -381,8 +354,8 @@ event Action<ArchiveFileEventArgs>? IBuildEventArgsReaderNotifications.ArchiveFi
         }
 
         private Action<BinaryLogRecordKind, Stream>? _rawLogRecordReceived;
-        /// <inheritdoc cref="IBinaryLogReplaySource.RawLogRecordReceived"/>
-        event Action<BinaryLogRecordKind, Stream>? IBinaryLogReplaySource.RawLogRecordReceived
+        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.RawLogRecordReceived"/>
+        event Action<BinaryLogRecordKind, Stream>? IBinaryLogEventReaderNotificationsReplaySource.RawLogRecordReceived
         {
             add => _rawLogRecordReceived += value;
             remove => _rawLogRecordReceived -= value;
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index d4c37461938..221c9ef7c93 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -163,7 +163,7 @@ public void Initialize(IEventSource eventSource)
             bool logPropertiesAndItemsAfterEvaluation = Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation ?? true;
 
             ProcessParameters(out bool omitInitialInfo);
-            var replayEventSource = eventSource as IBinaryLogReplaySource;
+            var replayEventSource = eventSource as IBinaryLogEventReaderNotificationsReplaySource;
 
             try
             {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 358c410265f..817d8d732d3 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -145,7 +145,7 @@ public void Dispose()
         internal int FileFormatVersion => _fileFormatVersion;
         internal int MinimumReaderVersion { get; set; } = BinaryLogger.ForwardCompatibilityMinimalVersion;
 
-        /// <inheritdoc cref="IBinaryLogReplaySource.EmbeddedContentRead"/>
+        /// <inheritdoc cref="IBinaryLogEventReaderNotificationsReplaySource.EmbeddedContentRead"/>
         internal event Action<EmbeddedContentEventArgs>? EmbeddedContentRead;
 
         /// <inheritdoc cref="IBuildEventArgsReaderNotifications.ArchiveFileEncountered"/>
diff --git a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
index 2abf9566c3d..db24d791ed2 100644
--- a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
@@ -104,7 +104,7 @@ public class EventArgsDispatcher : IEventSource
         /// <summary>
         /// Raise one of the events that is appropriate for the type of the BuildEventArgs
         /// </summary>
-        public virtual void Dispatch(BuildEventArgs buildEvent)
+        public void Dispatch(BuildEventArgs buildEvent)
         {
             if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 0b57828e95b..ce4e6da0003 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -166,13 +166,14 @@
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContext.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\AnalysisLoggingContext.cs" />
+    <Compile Include="BuildCheck\Infrastructure\BuildCheckBinaryLogReplaySourcerWrapper.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckConfigurationException.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckBuildEventHandler.cs" />
-    <Compile Include="BuildCheck\Infrastructure\BuildCheckEventArgsDispatcher.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCheck\Infrastructure\AnalysisContext\IAnalysisContextFactory.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
+    <Compile Include="BuildCheck\Infrastructure\IBuildEventHandler.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\TracingReporter.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 42815b92567..68f24f63600 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -4409,9 +4409,14 @@ private static void ReplayBinaryLog(
             int cpuCount,
             bool isBuildCheckEnabled)
         {
-            var replayEventSource = isBuildCheckEnabled ?
-                BuildManager.DefaultBuildManager.GetBinaryLogReplayEventSourceWithAttachedBuildCheck() :
-                new BinaryLogReplayEventSource();
+
+            IBinaryLogReplaySource replayEventSource = new BinaryLogReplayEventSource();
+
+            if (isBuildCheckEnabled)
+            {
+                replayEventSource = BuildManager.DefaultBuildManager
+                    .GetBuildCheckBinaryLogReplayEventSourceWrapper((BinaryLogReplayEventSource)replayEventSource);
+            }
 
             foreach (var distributedLoggerRecord in distributedLoggerRecords)
             {
