diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 09b2b8b363d..f1d6104ff4e 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -611,6 +611,18 @@ public void CreateLoadedTypeStop(string assemblyName)
             WriteEvent(82, assemblyName);
         }
 
+        [Event(83, Keywords = Keywords.All)]
+        public void LoadAssemblyAndFindTypeStart()
+        {
+            WriteEvent(83);
+        }
+
+        [Event(84, Keywords = Keywords.All)]
+        public void LoadAssemblyAndFindTypeStop(string assemblyPath, int numberOfPublicTypesSearched)
+        {
+            WriteEvent(84, assemblyPath, numberOfPublicTypesSearched);
+        }
+
         #endregion
     }
 }
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index a17838569f2..10c32d25261 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -94,10 +94,12 @@
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.Metadata" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+          <codeBase version="5.0.0.0" href="..\System.Reflection.Metadata.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Reflection.MetadataLoadContext" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+          <codeBase version="5.0.0.0" href="..\System.Reflection.MetadataLoadContext.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index aef3e22dd7f..3f640e0ec0f 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -47,6 +47,8 @@ internal class TypeLoader
 
         private static MetadataLoadContext _context;
 
+        private static string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
+
         /// <summary>
         /// Constructor.
         /// </summary>
@@ -174,25 +176,8 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)
         {
             string path = assemblyLoadInfo.AssemblyFile;
-
-            if (path is null)
-            {
-#if NETFRAMEWORK
-                AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
-                setup.LoaderOptimization = LoaderOptimization.SingleDomain;
-                AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
-                path = appDomain.Load(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
-                AppDomain.Unload(appDomain);
-#else
-                AssemblyLoadContext alc = new("loadContextToFindPath", true);
-                path = alc.LoadFromAssemblyName(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
-                alc.Unload();
-#endif
-            }
-
-            string[] runtimePaths = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
             List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), "*.dll"));
-            localPaths.AddRange(runtimePaths);
+            localPaths.AddRange(runtimeAssemblies);
 
             _context = new(new PathAssemblyResolver(localPaths));
             return _context.LoadFromAssemblyPath(path);
@@ -318,7 +303,7 @@ internal LoadedType GetLoadedTypeByTypeName(string typeName, bool useTaskHost)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
-                if (useTaskHost)
+                if (useTaskHost && _assemblyLoadInfo.AssemblyFile is not null)
                 {
                     return GetLoadedTypeFromTypeNameUsingMetadataLoadContext(typeName);
                 }
@@ -376,9 +361,12 @@ private LoadedType GetLoadedTypeFromTypeNameUsingMetadataLoadContext(string type
             {
                 return _publicTypeNameToLoadedType.GetOrAdd(typeName, typeName =>
                 {
+                    MSBuildEventSource.Log.LoadAssemblyAndFindTypeStart();
                     Assembly loadedAssembly = LoadAssemblyUsingMetadataLoadContext(_assemblyLoadInfo);
+                    int numberOfTypesSearched = 0;
                     foreach (Type publicType in loadedAssembly.GetExportedTypes())
                     {
+                        numberOfTypesSearched++;
                         if (_isDesiredType(publicType, null) && (typeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(publicType.FullName, typeName)))
                         {
                             MSBuildEventSource.Log.CreateLoadedTypeStart(loadedAssembly.FullName);
@@ -390,6 +378,8 @@ private LoadedType GetLoadedTypeFromTypeNameUsingMetadataLoadContext(string type
                         }
                     }
 
+                    MSBuildEventSource.Log.LoadAssemblyAndFindTypeStop(_assemblyLoadInfo.AssemblyFile, numberOfTypesSearched);
+
                     return null;
                 });
             }
