diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index d783deec077..4396758a77e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -141,7 +141,7 @@ private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInsta
                     property.Location.File,
                     property.Location.Line,
                     property.Location.Column,
-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", property.Name, evaluatedValue, property.Location.LocationString ?? "Target"))
+                    ResourceUtilities.GetResourceString("PropertyAssignment"))
                 { BuildEventContext = LoggingContext.BuildEventContext };
 
                 LoggingContext.LogBuildEvent(args);
@@ -149,11 +149,13 @@ private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInsta
             else if ((_propertyTrackingSettings & PropertyTrackingSetting.PropertyReassignment) == PropertyTrackingSetting.PropertyReassignment)
             {
                 var args = new PropertyReassignmentEventArgs(
-                           property.Name,
-                           previousPropertyValue,
-                           evaluatedValue,
-                           property.Location.LocationString,
-                           message: null)
+                    property.Name,
+                    previousPropertyValue,
+                    evaluatedValue,
+                    property.Location.File,
+                    property.Location.Line,
+                    property.Location.Column,
+                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
                 { BuildEventContext = LoggingContext.BuildEventContext, };
 
                 LoggingContext.LogBuildEvent(args);
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 55bc4e6aa2c..4611cca9335 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1617,7 +1617,7 @@ private void LogPropertyInTaskAssignment(string propertyName, string propertyVal
                     location.File,
                     location.Line,
                     location.Column,
-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", propertyName, propertyValue, location?.LocationString ?? "Task"))
+                    ResourceUtilities.GetResourceString("PropertyAssignment"))
                 { BuildEventContext = _targetLoggingContext.BuildEventContext };
 
                 _targetLoggingContext.LogBuildEvent(args);
@@ -1628,8 +1628,10 @@ private void LogPropertyInTaskAssignment(string propertyName, string propertyVal
                     propertyName,
                     previousPropertyValue,
                     propertyValue,
-                    location.LocationString,
-                    message: null)
+                    location.File,
+                    location.Line,
+                    location.Column,
+                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
                 { BuildEventContext = _targetLoggingContext.BuildEventContext };
 
                 _targetLoggingContext.LogBuildEvent(args);
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 92eab998994..16c634d6aab 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -294,15 +294,15 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source, IEl
             }
 
             var args = new PropertyInitialValueSetEventArgs(
-                                    property.Name,
-                                    property.EvaluatedValue,
-
-                                    // If the property is from XML, we don't need property source since a full location is available.
-                                    location == null ? EnumUtilities.GetEnumString(source) : string.Empty,
-                                    location?.File,
-                                    location?.Line ?? 0,
-                                    location?.Column ?? 0,
-                                    ResourceUtilities.GetResourceString("PropertyAssignment"))
+                property.Name,
+                property.EvaluatedValue,
+
+                // If the property is from XML, we don't need property source since a full location is available.
+                location == null ? EnumUtilities.GetEnumString(source) : string.Empty,
+                location?.File,
+                location?.Line ?? 0,
+                location?.Column ?? 0,
+                ResourceUtilities.GetResourceString("PropertyAssignment"))
             { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
             _evaluationLoggingContext.LogBuildEvent(args);
@@ -336,11 +336,13 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
                 (_settings == 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10)))
             {
                 var args = new PropertyReassignmentEventArgs(
-                        property.Name,
-                        oldValue,
-                        newValue,
-                        location?.LocationString,
-                        message: ResourceUtilities.GetResourceString("PropertyReassignment"))
+                    property.Name,
+                    oldValue,
+                    newValue,
+                    location?.File,
+                    location?.Line ?? 0,
+                    location?.Column ?? 0,
+                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
                 { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
                 _evaluationLoggingContext.LogBuildEvent(args);
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index be4eaa2288d..adadde7eb8b 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -80,6 +80,8 @@ public sealed class BinaryLogger : ILogger
         //    BuildCheckTracingEvent, BuildCheckAcquisitionEvent, BuildSubmissionStartedEvent
         // version 24:
         //    - new record kind: BuildCanceledEventArgs
+        // version 25:
+        //    - add extra information to PropertyInitialValueSetEventArgs and PropertyReassignmentEventArgs and change message formatting logic.
 
         // MAKE SURE YOU KEEP BuildEventArgsWriter AND StructuredLogViewer.BuildEventArgsWriter IN SYNC WITH THE CHANGES ABOVE.
         // Both components must stay in sync to avoid issues with logging or event handling in the products.
@@ -90,7 +92,7 @@ public sealed class BinaryLogger : ILogger
 
         // The current version of the binary log representation.
         // Changes with each update of the binary log format.
-        internal const int FileFormatVersion = 24;
+        internal const int FileFormatVersion = 25;
 
         // The minimum version of the binary log reader that can read log of above version.
         // This should be changed only when the binary log format is changed in a way that would prevent it from being
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 8e5ad536b0b..4b83547648a 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1177,7 +1177,9 @@ private BuildEventArgs ReadPropertyReassignmentEventArgs()
                 propertyName,
                 previousValue,
                 newValue,
-                location,
+                fields.File,
+                fields.LineNumber,
+                fields.ColumnNumber,
                 fields.Message,
                 fields.HelpKeyword,
                 fields.SenderName,
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index dba52023339..e6eeb51befd 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -567,11 +567,12 @@ private BinaryLogRecordKind Write(CriticalBuildMessageEventArgs e)
 
         private BinaryLogRecordKind Write(PropertyReassignmentEventArgs e)
         {
-            WriteMessageFields(e, writeMessage: false, writeImportance: true);
+            WriteMessageFields(e, writeMessage: true, writeImportance: true);
             WriteDeduplicatedString(e.PropertyName);
             WriteDeduplicatedString(e.PreviousValue);
             WriteDeduplicatedString(e.NewValue);
             WriteDeduplicatedString(e.Location);
+
             return BinaryLogRecordKind.PropertyReassignment;
         }
 
diff --git a/src/Framework/PropertyInitialValueSetEventArgs.cs b/src/Framework/PropertyInitialValueSetEventArgs.cs
index e9b7d91666f..f258ca86d85 100644
--- a/src/Framework/PropertyInitialValueSetEventArgs.cs
+++ b/src/Framework/PropertyInitialValueSetEventArgs.cs
@@ -91,6 +91,21 @@ public PropertyInitialValueSetEventArgs(
         /// </summary>
         public string PropertySource { get; set; }
 
+        public override string Message
+        {
+            get
+            {
+                if (RawMessage == null)
+                {
+                    var formattedSource = File != null ? $"{File} ({LineNumber}, {ColumnNumber})" : PropertySource;
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", PropertyName, PropertyValue, formattedSource);
+                }
+
+                return RawMessage;
+            }
+        }
+
+
         internal override void WriteToStream(BinaryWriter writer)
         {
             base.WriteToStream(writer);
diff --git a/src/Framework/PropertyReassignmentEventArgs.cs b/src/Framework/PropertyReassignmentEventArgs.cs
index 29ec2935e0b..64543af06c1 100644
--- a/src/Framework/PropertyReassignmentEventArgs.cs
+++ b/src/Framework/PropertyReassignmentEventArgs.cs
@@ -41,12 +41,45 @@ public PropertyReassignmentEventArgs(
             string message,
             string helpKeyword = null,
             string senderName = null,
-            MessageImportance importance = MessageImportance.Low) : base(message, helpKeyword, senderName, importance)
+            MessageImportance importance = MessageImportance.Low)
+            : base(message, helpKeyword, senderName, importance)
         {
-            this.PropertyName = propertyName;
-            this.PreviousValue = previousValue;
-            this.NewValue = newValue;
-            this.Location = location;
+            PropertyName = propertyName;
+            PreviousValue = previousValue;
+            NewValue = newValue;
+            Location = location;
+        }
+
+        /// <summary>
+        /// Creates an instance of the <see cref="PropertyReassignmentEventArgs"/> class.
+        /// </summary>
+        /// <param name="propertyName">The name of the property whose value was reassigned.</param>
+        /// <param name="previousValue">The previous value of the reassigned property.</param>
+        /// <param name="newValue">The new value of the reassigned property.</param>
+        /// <param name="file">The file associated with the event.</param>
+        /// <param name="line">The line number (0 if not applicable).</param>
+        /// <param name="column">The column number (0 if not applicable).</param>
+        /// <param name="message">The message of the property.</param>
+        /// <param name="helpKeyword">The help keyword.</param>
+        /// <param name="senderName">The sender name of the event.</param>
+        /// <param name="importance">The importance of the message.</param>
+        public PropertyReassignmentEventArgs(
+            string propertyName,
+            string previousValue,
+            string newValue,
+            string file,
+            int line,
+            int column,
+            string message,
+            string helpKeyword = null,
+            string senderName = null,
+            MessageImportance importance = MessageImportance.Low)
+            : base(subcategory: null, code: null, file: file, lineNumber: line, columnNumber: column, 0, 0, message, helpKeyword, senderName, importance)
+        {
+            PropertyName = propertyName;
+            PreviousValue = previousValue;
+            NewValue = newValue;
+            Location = $"{file} ({line}, {column})";
         }
 
         /// <summary>
