diff --git a/netci.groovy b/netci.groovy
index fa9797b5e80..ca6b504a8bf 100644
--- a/netci.groovy
+++ b/netci.groovy
@@ -2,16 +2,71 @@
 import jobs.generation.*;
 
 // The input project name
-def project = GithubProject
+project = GithubProject
 
 // The input branch name (e.g. master)
-def branch = GithubBranchName
+branch = GithubBranchName
 
 // What this repo is using for its machine images at the current time
-def imageVersionMap = ['Windows_NT':'latest-dev15-5',
-                       'OSX10.13':'latest-or-auto',
-                       'Ubuntu14.04':'latest-or-auto',
-                       'Ubuntu16.04':'20170731']
+imageVersionMap = ['Windows_NT':'latest-dev15-5',
+                    'OSX10.13':'latest-or-auto',
+                    'Ubuntu14.04':'latest-or-auto',
+                    'Ubuntu16.04':'20170731',
+                    'RHEL7.2' : 'latest']
+
+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {
+    def newJobName = Utilities.getFullJobName("innerloop_${osName}_${runtime}${isSourceBuild ? '_SourceBuild' : ''}", isPR)
+
+    // Create a new job with the specified name.  The brace opens a new closure
+    // and calls made within that closure apply to the newly created job.
+    def newJob = job(newJobName) {
+        description('')
+    }
+
+    newJob.with{
+        steps{
+            if(osName.contains("Windows") || osName.contains("windows")) {
+                batchFile(script)
+            } else {
+                shell(script)
+            }
+        }
+
+        skipTestsWhenResultsNotFound = shouldSkipTestsWhenResultsNotFound
+    }
+
+    // Add xunit result archiving. Skip if no results found.
+    Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)
+    def imageVersion = imageVersionMap[osName];
+    Utilities.setMachineAffinity(newJob, osName, imageVersion)
+    Utilities.standardJobSetup(newJob, project, isPR, "*/${branch}")
+    // Add archiving of logs (even if the build failed)
+    Utilities.addArchival(newJob,
+                        'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */
+                        '', /* filesToExclude */
+                        false, /* doNotFailIfNothingArchived */
+                        false, /* archiveOnlyIfSuccessful */)
+    // Add trigger
+    if (isPR) {
+        TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()
+
+        if (runtime == "MonoTest") {
+            // Until they're passing reliably, require opt in
+            // for Mono tests
+            prTrigger.setCustomTriggerPhrase("(?i).*test\\W+mono.*")
+            prTrigger.triggerOnlyOnComment()
+        }
+
+        prTrigger.triggerForBranch(branch)
+        // Set up what shows up in Github:
+        prTrigger.setGithubContext("${osName} Build for ${runtime}")
+        prTrigger.emitTrigger(newJob)
+    } else {
+        if (runtime != "Mono") {
+            Utilities.addGithubPushTrigger(newJob)
+        }
+    }
+}
 
 [true, false].each { isPR ->
     ['Windows_NT', 'OSX10.13', 'Ubuntu14.04', 'Ubuntu16.04'].each {osName ->
@@ -27,118 +82,69 @@ def imageVersionMap = ['Windows_NT':'latest-dev15-5',
         //     runtimes.add('MonoTest')
         // }
 
-        runtimes.each { runtime ->
-            def newJobName = Utilities.getFullJobName("innerloop_${osName}_${runtime}", isPR)
-            def skipTestsWhenResultsNotFound = true
+        def script = "NA"
 
-            // Create a new job with the specified name.  The brace opens a new closure
-            // and calls made within that closure apply to the newly created job.
-            def newJob = job(newJobName) {
-                description('')
-            }
-
-            // Define job.
+        runtimes.each { runtime ->
             switch(osName) {
                 case 'Windows_NT':
-                    newJob.with{
-                        steps{
-                            // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html
-                            def script = "set VSCMD_START_DIR=\"%CD%\" && call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\""
-
-                            //  Should the build be Release?  The default is Debug
-                            if (runtime == "Full") {
-                                script += " && build\\cibuild.cmd"
-                            }
-                            else if (runtime == "CoreCLR") {
-                                script += " && build\\cibuild.cmd -hostType Core"
-                            }
-
-                            batchFile(script)
-                        }
-
-                        skipTestsWhenResultsNotFound = false
+
+                    // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html
+                    script = "set VSCMD_START_DIR=\"%CD%\" && call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\""
+
+                    if (runtime == "Full") {
+                        script += " && build\\cibuild.cmd"
+                    }
+                    else if (runtime == "CoreCLR") {
+                        script += " && build\\cibuild.cmd -hostType Core"
                     }
 
                     break;
                 case 'OSX10.13':
-                    newJob.with{
-                        steps{
-                            def buildCmd = "./build/cibuild.sh"
-
-                            if (runtime == "Mono") {
-                                // tests are failing on mono right now
-                                buildCmd += " --scope Compile"
-                            }
-
-                            if (runtime.startsWith("Mono")) {
-                                // Redundantly specify target to override
-                                // "MonoTest" which cibuild.sh doesn't know
-                                buildCmd += " --host Mono --target Mono"
-                            }
-
-                            shell(buildCmd)
-                        }
+                    script = "./build/cibuild.sh"
+
+                    if (runtime == "Mono") {
+                        // tests are failing on mono right now
+                        script += " --scope Compile"
+                    }
+
+                    if (runtime.startsWith("Mono")) {
+                        // Redundantly specify target to override
+                        // "MonoTest" which cibuild.sh doesn't know
+                        script += " --host Mono --target Mono"
                     }
 
                     break;
                 case { it.startsWith('Ubuntu') }:
-                    newJob.with{
-                        steps{
-                            def buildCmd = "./build/cibuild.sh"
-
-                            if (runtime == "Mono") {
-                                // tests are failing on mono right now
-                                buildCmd += " --scope Compile"
-                            }
-
-                            if (runtime.startsWith("Mono")) {
-                                // Redundantly specify target to override
-                                // "MonoTest" which cibuild.sh doesn't know
-                                buildCmd += " --host Mono --target Mono"
-                            }
-
-                            shell(buildCmd)
-                        }
+                    script = "./build/cibuild.sh"
+
+                    if (runtime == "Mono") {
+                        // tests are failing on mono right now
+                        script += " --scope Compile"
+                    }
+
+                    if (runtime.startsWith("Mono")) {
+                        // Redundantly specify target to override
+                        // "MonoTest" which cibuild.sh doesn't know
+                        script += " --host Mono --target Mono"
                     }
 
                     break;
             }
 
-            // Add xunit result archiving. Skip if no results found.
-            Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)
-            def imageVersion = imageVersionMap[osName];
-            Utilities.setMachineAffinity(newJob, osName, imageVersion)
-            Utilities.standardJobSetup(newJob, project, isPR, "*/${branch}")
-            // Add archiving of logs (even if the build failed)
-            Utilities.addArchival(newJob,
-                                  'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */
-                                  '', /* filesToExclude */
-                                  false, /* doNotFailIfNothingArchived */
-                                  false, /* archiveOnlyIfSuccessful */)
-            // Add trigger
-            if (isPR) {
-                TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()
-
-                if (runtime == "MonoTest") {
-                    // Until they're passing reliably, require opt in
-                    // for Mono tests
-                    prTrigger.setCustomTriggerPhrase("(?i).*test\\W+mono.*")
-                    prTrigger.triggerOnlyOnComment()
-                }
-
-                prTrigger.triggerForBranch(branch)
-                // Set up what shows up in Github:
-                prTrigger.setGithubContext("${osName} Build for ${runtime}")
-                prTrigger.emitTrigger(newJob)
-            } else {
-                if (runtime != "Mono") {
-                    Utilities.addGithubPushTrigger(newJob)
-                }
-            }
+            CreateJob(script, runtime, osName, isPR)
         }
     }
 }
 
+//sourcebuild
+CreateJob(
+    "./build/build.sh build -dotnetBuildFromSource -bootstraponly -skiptests -pack -configuration Release",
+    "CoreCLR",
+    "RHEL7.2",
+    true,
+    true,
+    true)
+
 JobReport.Report.generateJobReport(out)
 
 // Make the call to generate the help job
