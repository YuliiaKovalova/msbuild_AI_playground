diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index dd6e98636f4..4d3ee3c27fe 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -569,7 +569,7 @@ internal static string GetRuntimeVersion(string path)
             {
                 char[] runtimeVersion;
                 uint hresult;
-                int dwLength;
+                string output = string.Empty;
 #if DEBUG
                 // Just to make sure and exercise the code that doubles the size
                 // every time GetRequestedRuntimeInfo fails due to insufficient buffer size.
@@ -579,13 +579,24 @@ internal static string GetRuntimeVersion(string path)
 #endif
                 do
                 {
-                    runtimeVersion = new char[bufferLength];
-                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
-                    bufferLength *= 2;
+                    runtimeVersion = System.Buffers.ArrayPool<char>.Shared.Rent(bufferLength);
+                    try
+                    {
+                        hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out int dwLength);
+                        bufferLength *= 2;
+                        if (hresult == NativeMethodsShared.S_OK)
+                        {
+                            output = new string(runtimeVersion, 0, dwLength - 1);
+                        }
+                    }
+                    finally
+                    {
+                        System.Buffers.ArrayPool<char>.Shared.Return(runtimeVersion);
+                    }
                 }
                 while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
-                return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
+                return output;
             }
             else
             {
@@ -783,7 +794,7 @@ private static AssemblyNameExtension ConstructAssemblyName(IntPtr asmMetaPtr, ch
             // Construct the assembly name. (Note asmNameLength should/must be > 0.)
             var assemblyName = new AssemblyName
             {
-                Name = new string(asmNameBuf, 0, (int) asmNameLength - 1),
+                Name = new string(asmNameBuf, 0, (int)asmNameLength - 1),
                 Version = new Version(
                     asmMeta.usMajorVersion,
                     asmMeta.usMinorVersion,
@@ -904,7 +915,7 @@ public static string GetRuntimeVersion(string path)
                     // Read the PE header signature
 
                     sr.BaseStream.Position = peHeaderOffset;
-                    if (!ReadBytes(sr, (byte) 'P', (byte) 'E', 0, 0))
+                    if (!ReadBytes(sr, (byte)'P', (byte)'E', 0, 0))
                     {
                         return string.Empty;
                     }
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index b2ca45bb4e7..e480cff968e 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -408,7 +408,7 @@ private static string GetModuleFileName(IntPtr handle)
         {
             bool success = false;
             char[] buffer = null;
-            int pathLength = 0;
+            string output = string.Empty;
 
             // Try increased buffer sizes if on longpath-enabled Windows
             for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
@@ -417,10 +417,14 @@ private static string GetModuleFileName(IntPtr handle)
                 try
                 {
                     var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
-                    pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
+                    int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
 
                     bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
                     success = pathLength != 0 && !isBufferTooSmall;
+                    if (success)
+                    {
+                        output = new string(buffer, 0, pathLength);
+                    }
                 }
                 finally
                 {
@@ -428,7 +432,7 @@ private static string GetModuleFileName(IntPtr handle)
                 }
             }
 
-            return success ? new string(buffer, 0, pathLength) : string.Empty;
+            return output;
         }
 
         /// <summary>
