diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 62a6e1a3d56..93d86a9f079 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -51,6 +51,7 @@ public void ConstructorWithNullName()
                     null,
                     @"c:\my tasks\mytask.dll",
                     null,
+                    null,
                     null);
             }
            );
@@ -79,6 +80,7 @@ public void ConstructorWithEmptyName()
                     String.Empty,
                     @"c:\my tasks\mytask.dll",
                     null,
+                    null,
                     null);
             }
            );
@@ -107,6 +109,7 @@ public void ConstructorWithNullLocation()
                     "TaskName",
                     null,
                     null,
+                    null,
                     null);
             }
            );
@@ -137,6 +140,7 @@ public void ConstructorWithEmptyLocation()
                     "TaskName",
                     String.Empty,
                     null,
+                    null,
                     null);
             }
            );
@@ -165,6 +169,7 @@ public void TestValidConstructors()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 null,
+                null,
                 null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
@@ -183,6 +188,7 @@ public void TestValidConstructors()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 null,
+                null,
                 null);
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
@@ -202,6 +208,7 @@ public void TestValidConstructors()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 parameters,
+                null,
                 null);
 
             IDictionary<string, object> parameters2 = new Dictionary<string, object>();
@@ -226,6 +233,7 @@ public void TestValidConstructors()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 parameters2,
+                null,
                 null);
         }
 
@@ -257,7 +265,8 @@ public void TestTranslationWithNullDictionary()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 null,
-                expectedGlobalProperties);
+                expectedGlobalProperties,
+                null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -295,7 +304,8 @@ public void TestTranslationWithEmptyDictionary()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 new Dictionary<string, object>(),
-                new Dictionary<string, string>());
+                new Dictionary<string, string>(),
+                null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -338,6 +348,7 @@ public void TestTranslationWithValueTypesInDictionary()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 parameters,
+                null,
                 null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -379,6 +390,7 @@ public void TestTranslationWithITaskItemInDictionary()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 parameters,
+                null,
                 null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -419,6 +431,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 "TaskName",
                 @"c:\MyTasks\MyTask.dll",
                 parameters,
+                null,
                 null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 07f716a438f..e7223806ec0 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -271,7 +271,9 @@ public bool Execute()
                         _taskType.Type.FullName,
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
-                        new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties)
+                        new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
+                        _taskLoggingContext.LoggingService.GetWarningsAsErrors(_taskLoggingContext.BuildEventContext)
+                        
                     );
 
             try
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 6d147513146..664a71022df 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -271,7 +271,7 @@ public bool IsRunningMultipleNodes
         /// <summary>
         /// Contains all warnings that should be logged as errors.
         /// </summary>
-        public HashSet<string> WarningsAsErrors { get; }
+        public HashSet<string> WarningsAsErrors { get; private set; }
         #endregion
 
         #region IBuildEngine Implementation (Methods)
@@ -800,7 +800,7 @@ private void RunTask(object state)
             _debugCommunications = taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBUILDDEBUGCOMM", "1", StringComparison.OrdinalIgnoreCase);
             _updateEnvironment = !taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostDoNotUpdateEnvironment", "1", StringComparison.OrdinalIgnoreCase);
             _updateEnvironmentAndLog = taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostUpdateEnvironmentAndLog", "1", StringComparison.OrdinalIgnoreCase);
-
+            WarningsAsErrors = taskConfiguration.WarningsAsErrors;
             try
             {
                 // Change to the startup directory
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 45d007d25b3..10baf405bd0 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -85,6 +85,8 @@ internal class TaskHostConfiguration : INodePacket
 
         private Dictionary<string, string> _globalParameters;
 
+        private HashSet<string> _warningsAsErrors;
+
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// Constructor
@@ -103,6 +105,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
+        /// <param name="warningsAsErrors">Warning codes to be thrown as errors for the current project.</param>
 #else
         /// <summary>
         /// Constructor
@@ -120,6 +123,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
+        /// <param name="warningsAsErrors">Warning codes to be thrown as errors for the current project.</param>
 #endif
         public TaskHostConfiguration
             (
@@ -138,7 +142,8 @@ public TaskHostConfiguration
                 string taskName,
                 string taskLocation,
                 IDictionary<string, object> taskParameters,
-                Dictionary<string, string> globalParameters
+                Dictionary<string, string> globalParameters,
+                HashSet<string> warningsAsErrors
             )
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
@@ -168,6 +173,7 @@ Dictionary<string, string> globalParameters
             _continueOnError = continueOnError;
             _taskName = taskName;
             _taskLocation = taskLocation;
+            _warningsAsErrors = warningsAsErrors;
 
             if (taskParameters != null)
             {
@@ -342,6 +348,15 @@ public NodePacketType Type
             { return NodePacketType.TaskHostConfiguration; }
         }
 
+        public HashSet<string> WarningsAsErrors
+        {
+            [DebuggerStepThrough]
+            get
+            {
+                return _warningsAsErrors;
+            }
+        }
+
         /// <summary>
         /// Translates the packet to/from binary form.
         /// </summary>
