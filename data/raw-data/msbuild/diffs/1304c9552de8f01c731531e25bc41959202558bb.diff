diff --git a/documentation/specs/BuildCheck/Codes.md b/documentation/specs/BuildCheck/Codes.md
index 6698d20a2dc..034dae2a151 100644
--- a/documentation/specs/BuildCheck/Codes.md
+++ b/documentation/specs/BuildCheck/Codes.md
@@ -2,12 +2,14 @@
 
 Report codes are chosen to conform to suggested guidelines. Those guidelines are currently in revew: https://github.com/dotnet/msbuild/pull/10088
 
-| Exit&nbsp;Code | Reason |
-|:-----|----------|
-| 0 | Success |
-| [BC0101](#BC0101) | Shared output path. |
-| [BC0102](#BC0102) | Double writes. |
-| [BC0103](#BC0103) | Used environment variable. |
+| Diagnostic&nbsp;Code | Default Severity | Reason |
+|:-----|-------|----------|
+| [BC0101](#BC0101) | Warning | Shared output path. |
+| [BC0102](#BC0102) | Warning | Double writes. |
+| [BC0103](#BC0103) | Suggestion | Used environment variable. |
+| [BC0201](#BC0201) | Warning | Usage of undefined property. |
+| [BC0202](#BC0202) | Warning | Property first declared after it was used. |
+| [BC0203](#BC0203) | None | Property declared but never used. |
 
 
 To enable verbose logging in order to troubleshoot issue(s), enable [binary logging](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#msbuild-binary-log-overview)
@@ -43,6 +45,48 @@ Relying on environment variables introduces variability and unpredictability, as
 
 This practice can result in inconsistent build outcomes and makes debugging difficult, since environment variables are external to project files and build scripts. To ensure consistent and reproducible builds, avoid using environment variables. Instead, explicitly pass properties using the /p option, which offers better control and traceability.
 
+## <a name="BC0201"></a>BC0201 - Usage of undefined property.
+
+"A property that is accessed should be declared first."
+
+This check indicates that a property was acessed without being declared (the declaration might have happen later - see [BC0202](#BC0202) for such checking). Only accessing in the configured scope (by default it's the project file only) are checked.
+
+There are couple cases which are allowed by the check:
+
+* Selfreferencing declaration is allowed - e.g.:
+  `<ChainProp>$(ChainProp)</ChainProp>`
+
+* Checking the property for emptyness - e.g.:
+  `<PropertyGroup Condition="'$(PropertyThatMightNotBeDefined)' == ''">`
+
+* Any usage of property in condition. This can be opted out vie the configuration `AllowUninitializedPropertiesInConditions` - e.g.:
+  ```ini
+  [*.csproj]
+  build_check.BC0201.severity=error
+  build_check.BC0201.AllowUninitializedPropertiesInConditions=false
+  build_check.BC0202.AllowUninitializedPropertiesInConditions=false
+  ```
+
+  BC0201 and BC0202 must have same value for the optional switch - as both operate on top of same data and same filtering.
+
+## <a name="BC0202"></a>BC0202 - Property first declared after it was used.
+
+"A property should be declared before it is first used."
+
+This check indicates that a property was acessed before it was declared. The default scope of this rule is the project file only. The scope captures the read and write operations as well. So this rule reports:
+ * Uninitialized reads that happened anywhere during the build, while the uninitialized property was later defined within the scope of this check (e.g. project file).
+ * Uninitialized reads that happened within the scope of check (e.g. project file), while later defined anywhere in the build
+
+If `BC0202` and [BC0201](#BC0201) are both enabled - then `BC0201` reports only the undefined reads that are not reported by this rule (so those that do not have late definitions).
+
+## <a name="BC0203"></a>BC0203 -  Property declared but never used.
+
+"A property that is not used should not be declared."
+
+This check indicates that a property was defined in the observed scope (by default it's the project file only) and it was then not used anywhere in the build.
+
+This is a runtime check, not a static analysis check - so it can have false positives (as property not used in particular build might be needed in a build with different conditions). For this reasons it's currently only suggestion.
+
 <BR/>
 <BR/>
 <BR/>
diff --git a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
index b3f07220dc4..246ae5e9efb 100644
--- a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
@@ -9,5 +9,5 @@ internal interface IInternalBuildCheckRegistrationContext : IBuildCheckRegistrat
 
     void RegisterPropertyWriteAction(Action<BuildCheckDataContext<PropertyWriteData>> propertyWriteAction);
 
-    void RegisterProjectProcessingDoneAction(Action<BuildCheckDataContext<ProjectProcessingDoneData>> propertyWriteAction);
+    void RegisterProjectRequestProcessingDoneAction(Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>> propertyWriteAction);
 }
diff --git a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
index d6492de34d7..f74b861adfa 100644
--- a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
@@ -3,6 +3,8 @@
 
 using System;
 using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Experimental.BuildCheck;
@@ -16,17 +18,17 @@ internal class PropertiesUsageAnalyzer : InternalBuildAnalyzer
     private static readonly BuildAnalyzerRule _usedBeforeInitializedRule = new BuildAnalyzerRule("BC0201", "PropertyUsedBeforeDeclared",
         "A property that is accessed should be declared first.",
         "Property: [{0}] was accessed, but it was never initialized.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectOnly });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
 
     private static readonly BuildAnalyzerRule _initializedAfterUsedRule = new BuildAnalyzerRule("BC0202", "PropertyDeclaredAfterUsed",
         "A property should be declared before it is first used.",
         "Property: [{0}] first declared/initialized at [{1}] used before it was initialized.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectOnly });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
 
     private static readonly BuildAnalyzerRule _unusedPropertyRule = new BuildAnalyzerRule("BC0203", "UnusedPropertyDeclared",
         "A property that is not used should not be declared.",
         "Property: [{0}] was declared/initialized, but it was never used.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectOnly });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.None, EvaluationAnalysisScope = EvaluationAnalysisScope.ProjectFileOnly });
 
     internal static readonly IReadOnlyList<BuildAnalyzerRule> SupportedRulesList = [_usedBeforeInitializedRule, _initializedAfterUsedRule, _unusedPropertyRule];
 
@@ -36,9 +38,33 @@ internal class PropertiesUsageAnalyzer : InternalBuildAnalyzer
 
     private const string _allowUninitPropsInConditionsKey = "AllowUninitializedPropertiesInConditions";
     private bool _allowUninitPropsInConditions = false;
-    // TODO: Add scope to configuration visible by the analyzer - and reflect on it
+    // Each check can have it's scope and enablement
+    private EvaluationAnalysisScope _uninitializedReadScope;
+    private EvaluationAnalysisScope _unusedPropertyScope;
+    private EvaluationAnalysisScope _initializedAfterUseScope;
+    private bool _uninitializedReadEnabled;
+    private bool _unusedPropertyEnabled;
+    private bool _initializedAfterUseEnabled;
     public override void Initialize(ConfigurationContext configurationContext)
     {
+        var config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
+                ?? BuildAnalyzerConfigurationEffective.Default;
+
+        _uninitializedReadEnabled = config.IsEnabled;
+        _uninitializedReadScope = config.EvaluationAnalysisScope;
+
+        config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _unusedPropertyRule.Id)
+                 ?? BuildAnalyzerConfigurationEffective.Default;
+
+        _unusedPropertyEnabled = config.IsEnabled;
+        _unusedPropertyScope = config.EvaluationAnalysisScope;
+
+        config = configurationContext.BuildAnalyzerConfig.FirstOrDefault(c => c.RuleId == _usedBeforeInitializedRule.Id)
+                 ?? BuildAnalyzerConfigurationEffective.Default;
+
+        _initializedAfterUseEnabled = config.IsEnabled;
+        _initializedAfterUseScope = config.EvaluationAnalysisScope;
+
         bool? allowUninitPropsInConditionsRule1 = null;
         bool? allowUninitPropsInConditionsRule2 = null;
 
@@ -79,38 +105,63 @@ public override void Initialize(ConfigurationContext configurationContext)
     public override void RegisterInternalActions(IInternalBuildCheckRegistrationContext registrationContext)
     {
         registrationContext.RegisterPropertyReadAction(ProcessPropertyRead);
-        registrationContext.RegisterPropertyWriteAction(ProcessPropertyWrite);
-        registrationContext.RegisterProjectProcessingDoneAction(DoneWithProject);
+
+        if (_unusedPropertyEnabled || _initializedAfterUseEnabled)
+        {
+            registrationContext.RegisterPropertyWriteAction(ProcessPropertyWrite);
+        }
+
+        if (_unusedPropertyEnabled)
+        {
+            registrationContext.RegisterProjectRequestProcessingDoneAction(DoneWithProject);
+        }
     }
 
     private Dictionary<string, IMsBuildElementLocation?> _writenProperties = new(MSBuildNameIgnoreCaseComparer.Default);
     private HashSet<string> _readProperties = new(MSBuildNameIgnoreCaseComparer.Default);
-    private Dictionary<string, IMsBuildElementLocation> _uninitializedReads = new(MSBuildNameIgnoreCaseComparer.Default);
-
-    // TODO: this is temporary - will be improved once we have scoping argument propagated to user config data.
-    private bool IsActionInObservedScope(IMsBuildElementLocation? location, string projectFilePath)
-    {
-        return location != null && location.File == projectFilePath;
-    }
+    // For the 'Property Initialized after used' check - we are interested in cases where:
+    //   1. Property is read anywhere and then initialized in the checked scope.
+    //   2. Property is read in the checked scope and then initialized anywhere.
+    private Dictionary<string, IMsBuildElementLocation> _uninitializedReadsInScope = new(MSBuildNameIgnoreCaseComparer.Default);
+    private Dictionary<string, IMsBuildElementLocation> _uninitializedReadsOutOfScope = new(MSBuildNameIgnoreCaseComparer.Default);
 
     private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> context)
     {
         PropertyWriteData writeData = context.Data;
 
-        if (IsActionInObservedScope(writeData.ElementLocation, writeData.ProjectFilePath))
+        // If we want to track unused properties - store all definitions that are in scope.
+        if (_unusedPropertyEnabled && AnalysisScopeClassifier.IsActionInObservedScope(_unusedPropertyScope,
+                writeData.ElementLocation, writeData.ProjectFilePath))
         {
             _writenProperties[writeData.PropertyName] = writeData.ElementLocation;
         }
 
-        if (!writeData.IsEmpty &&
-            _uninitializedReads.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitReadLocation))
+        if (_initializedAfterUseEnabled && !writeData.IsEmpty)
         {
-            _uninitializedReads.Remove(writeData.PropertyName);
+            // For initialized after used check - we can remove the read from dictionary after hitting write - because
+            //  once the property is written it should no more be uninitialized (so shouldn't be added again).
 
-            context.ReportResult(BuildCheckResult.Create(
-                _initializedAfterUsedRule,
-                uninitReadLocation,
-                writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
+            if (_uninitializedReadsInScope.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitInScopeReadLocation))
+            {
+                _uninitializedReadsInScope.Remove(writeData.PropertyName);
+
+                context.ReportResult(BuildCheckResult.Create(
+                    _initializedAfterUsedRule,
+                    uninitInScopeReadLocation,
+                    writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
+            }
+
+            if (AnalysisScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
+                    writeData.ElementLocation, writeData.ProjectFilePath) &&
+                _uninitializedReadsOutOfScope.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitOutScopeReadLocation))
+            {
+                _uninitializedReadsOutOfScope.Remove(writeData.PropertyName);
+
+                context.ReportResult(BuildCheckResult.Create(
+                    _initializedAfterUsedRule,
+                    uninitOutScopeReadLocation,
+                    writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
+            }
         }
     }
 
@@ -118,23 +169,49 @@ private void ProcessPropertyRead(BuildCheckDataContext<PropertyReadData> context
     {
         PropertyReadData readData = context.Data;
 
-        if (readData.PropertyReadContext != PropertyReadContext.PropertyEvaluationSelf)
+        // Self property initialization is not considered as a violation.
+        if (readData.PropertyReadContext != PropertyReadContext.PropertyEvaluationSelf &&
+            // If we are interested in missing usage checking - let's store, regardless of location of read.
+            _unusedPropertyEnabled)
         {
             _readProperties.Add(readData.PropertyName);
         }
 
         if (readData.IsUninitialized &&
+            (_uninitializedReadEnabled || _initializedAfterUseEnabled) &&
             readData.PropertyReadContext != PropertyReadContext.PropertyEvaluationSelf &&
             readData.PropertyReadContext != PropertyReadContext.ConditionEvaluationWithOneSideEmpty &&
             (!_allowUninitPropsInConditions ||
-             readData.PropertyReadContext != PropertyReadContext.ConditionEvaluation) &&
-            IsActionInObservedScope(readData.ElementLocation, readData.ProjectFilePath))
+             readData.PropertyReadContext != PropertyReadContext.ConditionEvaluation))
         {
-            _uninitializedReads[readData.PropertyName] = readData.ElementLocation;
+            // We want to wait with reporting uninitialized reads until we are sure there wasn't later attempts to initialize them.
+            if (_initializedAfterUseEnabled)
+            {
+                if (AnalysisScopeClassifier.IsActionInObservedScope(_initializedAfterUseScope,
+                        readData.ElementLocation, readData.ProjectFilePath))
+                {
+                    _uninitializedReadsInScope[readData.PropertyName] = readData.ElementLocation;
+                }
+                // If uninitialized read happened in scope and out of scope - keep just that in scope.
+                else if (!_uninitializedReadsInScope.ContainsKey(readData.PropertyName))
+                {
+                    _uninitializedReadsOutOfScope[readData.PropertyName] = readData.ElementLocation;
+                }
+            }
+            else if (AnalysisScopeClassifier.IsActionInObservedScope(_uninitializedReadScope,
+                         readData.ElementLocation, readData.ProjectFilePath))
+            {
+                // report immediately
+                context.ReportResult(BuildCheckResult.Create(
+                    _usedBeforeInitializedRule,
+                    readData.ElementLocation,
+                    readData.PropertyName));
+            }
         }
     }
 
-    private void DoneWithProject(BuildCheckDataContext<ProjectProcessingDoneData> context)
+
+    private void DoneWithProject(BuildCheckDataContext<ProjectRequestProcessingDoneData> context)
     {
         foreach (var propWithLocation in _writenProperties)
         {
@@ -147,7 +224,9 @@ private void DoneWithProject(BuildCheckDataContext<ProjectProcessingDoneData> co
             }
         }
 
-        foreach (var uninitializedRead in _uninitializedReads)
+        // Report the remaining uninitialized reads - as if 'initialized after read' check was enabled - we cannot report
+        //  uninitialized reads immediately (instead we wait if they are attempted to be initialized late).
+        foreach (var uninitializedRead in _uninitializedReadsInScope)
         {
             context.ReportResult(BuildCheckResult.Create(
                 _usedBeforeInitializedRule,
@@ -157,6 +236,6 @@ private void DoneWithProject(BuildCheckDataContext<ProjectProcessingDoneData> co
 
         _readProperties = new HashSet<string>(MSBuildNameIgnoreCaseComparer.Default);
         _writenProperties = new Dictionary<string, IMsBuildElementLocation?>(MSBuildNameIgnoreCaseComparer.Default);
-        _uninitializedReads = new Dictionary<string, IMsBuildElementLocation>(MSBuildNameIgnoreCaseComparer.Default);
+        _uninitializedReadsInScope = new Dictionary<string, IMsBuildElementLocation>(MSBuildNameIgnoreCaseComparer.Default);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
index 2b7bbf16ebc..315a1ccb313 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationEffective.cs
@@ -23,6 +23,10 @@ public BuildAnalyzerConfigurationEffective(string ruleId, EvaluationAnalysisScop
         Severity = severity;
     }
 
+    internal static BuildAnalyzerConfigurationEffective Default { get; } =
+        new(string.Empty, BuildAnalyzerConfiguration.Default.EvaluationAnalysisScope!.Value,
+            BuildAnalyzerConfiguration.Default.Severity!.Value);
+
     public string RuleId { get; }
 
     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index ca235fbd2f4..42d646db89f 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -27,7 +27,7 @@ private record CallbackRegistry(
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<TaskInvocationAnalysisData>>)> TaskInvocationActions,
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<PropertyReadData>>)> PropertyReadActions,
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<PropertyWriteData>>)> PropertyWriteActions,
-        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<ProjectProcessingDoneData>>)> ProjectProcessingDoneActions)
+        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>>)> ProjectRequestProcessingDoneActions)
     {
         public CallbackRegistry() : this([], [], [], [], [], []) { }
 
@@ -37,7 +37,7 @@ internal void DeregisterAnalyzer(BuildAnalyzerWrapper analyzer)
             ParsedItemsActions.RemoveAll(a => a.Item1 == analyzer);
             PropertyReadActions.RemoveAll(a => a.Item1 == analyzer);
             PropertyWriteActions.RemoveAll(a => a.Item1 == analyzer);
-            ProjectProcessingDoneActions.RemoveAll(a => a.Item1 == analyzer);
+            ProjectRequestProcessingDoneActions.RemoveAll(a => a.Item1 == analyzer);
         }
     }
 
@@ -71,8 +71,8 @@ internal void RegisterPropertyReadAction(BuildAnalyzerWrapper analyzer, Action<B
     internal void RegisterPropertyWriteAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<PropertyWriteData>> propertyWriteAction)
         => RegisterAction(analyzer, propertyWriteAction, _globalCallbacks.PropertyWriteActions);
 
-    internal void RegisterProjectProcessingDoneAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<ProjectProcessingDoneData>> projectDoneAction)
-        => RegisterAction(analyzer, projectDoneAction, _globalCallbacks.ProjectProcessingDoneActions);
+    internal void RegisterProjectRequestProcessingDoneAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>> projectDoneAction)
+        => RegisterAction(analyzer, projectDoneAction, _globalCallbacks.ProjectRequestProcessingDoneActions);
 
     private void RegisterAction<T>(
         BuildAnalyzerWrapper wrappedAnalyzer,
@@ -138,11 +138,11 @@ internal void RunPropertyWriteActions(
             analysisContext, resultHandler);
 
     internal void RunProjectProcessingDoneActions(
-        ProjectProcessingDoneData projectProcessingDoneData,
+        ProjectRequestProcessingDoneData projectProcessingDoneData,
         IAnalysisContext analysisContext,
         Action<BuildAnalyzerWrapper, IAnalysisContext, BuildAnalyzerConfigurationEffective[], BuildCheckResult>
             resultHandler)
-        => RunRegisteredActions(_globalCallbacks.ProjectProcessingDoneActions, projectProcessingDoneData,
+        => RunRegisteredActions(_globalCallbacks.ProjectRequestProcessingDoneActions, projectProcessingDoneData,
             analysisContext, resultHandler);
 
     private void RunRegisteredActions<T>(
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
index 1446e05df8c..f36f5785754 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
@@ -31,6 +31,6 @@ public void RegisterPropertyReadAction(Action<BuildCheckDataContext<PropertyRead
     public void RegisterPropertyWriteAction(Action<BuildCheckDataContext<PropertyWriteData>> propertyWriteAction)
         => buildCheckCentralContext.RegisterPropertyWriteAction(analyzerWrapper, propertyWriteAction);
 
-    public void RegisterProjectProcessingDoneAction(Action<BuildCheckDataContext<ProjectProcessingDoneData>> projectDoneAction)
-        => buildCheckCentralContext.RegisterProjectProcessingDoneAction(analyzerWrapper, projectDoneAction);
+    public void RegisterProjectRequestProcessingDoneAction(Action<BuildCheckDataContext<ProjectRequestProcessingDoneData>> projectDoneAction)
+        => buildCheckCentralContext.RegisterProjectRequestProcessingDoneAction(analyzerWrapper, projectDoneAction);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 10b4e2ce9ca..7426661b717 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -206,7 +206,7 @@ public void ProcessPropertyWrite(PropertyWriteData propertyWriteData, AnalysisLo
 
     public void ProcessProjectDone(IAnalysisContext analysisContext, string projectFullPath)
         => _buildCheckCentralContext.RunProjectProcessingDoneActions(
-                new ProjectProcessingDoneData(projectFullPath, analysisContext.BuildEventContext.ProjectInstanceId),
+                new ProjectRequestProcessingDoneData(projectFullPath, analysisContext.BuildEventContext.ProjectInstanceId),
                 analysisContext,
                 ReportResult);
 
diff --git a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
deleted file mode 100644
index 79c1ece94be..00000000000
--- a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
+++ /dev/null
@@ -1,8 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using Microsoft.Build.Experimental.BuildCheck;
-
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-internal class ProjectProcessingDoneData(string projectFilePath, int? projectConfigurationId) : AnalysisData(projectFilePath, projectConfigurationId);
diff --git a/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
new file mode 100644
index 00000000000..101145b355f
--- /dev/null
+++ b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
@@ -0,0 +1,15 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Experimental.BuildCheck;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// This data captures end of single build request on a project.
+/// There can be multiple build request on a single project within single build
+/// (e.g. multiple targetting, or there can be explicit request for results of specific targets)
+/// </summary>
+/// <param name="projectFilePath"></param>
+/// <param name="projectConfigurationId"></param>
+internal class ProjectRequestProcessingDoneData(string projectFilePath, int? projectConfigurationId) : AnalysisData(projectFilePath, projectConfigurationId);
