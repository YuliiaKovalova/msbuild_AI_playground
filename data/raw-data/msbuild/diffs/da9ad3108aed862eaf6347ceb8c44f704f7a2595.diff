diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index 41dd414b5cf..6ff399d472b 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -358,6 +358,20 @@ IEnumerable<KeyValuePair<string, T>> Items()
             }
         }
 
+        public void ImportPropertiesWithSelector<TSource>(IEnumerable<TSource> other, Func<TSource, T> selector)
+        {
+            _backing = _backing.SetItems(Items());
+
+            IEnumerable<KeyValuePair<string, T>> Items()
+            {
+                foreach (TSource sourceItem in other)
+                {
+                    T property = selector(sourceItem);
+                    yield return new(property.Key, property);
+                }
+            }
+        }
+
         /// <summary>
         /// Clone. As we're copy on write, this
         /// should be cheap.
diff --git a/src/Build/Collections/ICopyOnWritePropertyDictionary.cs b/src/Build/Collections/ICopyOnWritePropertyDictionary.cs
index 310476fa83b..969d3b9fbf7 100644
--- a/src/Build/Collections/ICopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/ICopyOnWritePropertyDictionary.cs
@@ -50,6 +50,14 @@ internal interface ICopyOnWritePropertyDictionary<T> : IEnumerable<T>, IEquatabl
         /// <param name="other">An enumerator over the properties to add.</param>
         void ImportProperties(IEnumerable<T> other);
 
+        /// <summary>
+        /// Adds the specified properties to this dictionary.
+        /// </summary>
+        /// <param name="other">An enumerator over the items to process.</param>
+        /// <param name="selector">A function to select the properties.</param>
+        /// <typeparam name="TSource">The type of item in the enumerable.</typeparam>
+        void ImportPropertiesWithSelector<TSource>(IEnumerable<TSource> other, Func<TSource, T> selector);
+
         /// <summary>
         /// Clone. As we're copy on write, this should be cheap.
         /// </summary>
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index c8fabf3559e..18e9e6f71e6 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -858,7 +858,9 @@ public bool Remove(T item)
                 return false;
             }
 
-            public IEnumerator<T> GetEnumerator() => new Enumerator(_initial, _forwards);
+            public Enumerator GetEnumerator() => new Enumerator(_initial, _forwards);
+
+            IEnumerator<T> IEnumerable<T>.GetEnumerator() => new Enumerator(_initial, _forwards);
 
             IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
 
@@ -948,7 +950,12 @@ internal ProjectElementSiblingEnumerable(ProjectElement initial, bool forwards =
             /// <summary>
             /// Get enumerator
             /// </summary>
-            public readonly IEnumerator<ProjectElement> GetEnumerator() => _enumerator;
+            public Enumerator GetEnumerator() => _enumerator;
+
+            /// <summary>
+            /// Get enumerator
+            /// </summary>
+            IEnumerator<ProjectElement> IEnumerable<ProjectElement>.GetEnumerator() => _enumerator;
 
             /// <summary>
             /// Get non generic enumerator
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index e285a948aa4..e4b23c4200d 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -870,8 +870,11 @@ private void PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)
             using (_evaluationProfiler.TrackFile(currentProjectOrImport.FullPath))
             {
                 // We accumulate InitialTargets from the project and each import
-                var initialTargets = _expander.ExpandIntoStringListLeaveEscaped(currentProjectOrImport.InitialTargets, ExpanderOptions.ExpandProperties, currentProjectOrImport.InitialTargetsLocation);
-                _initialTargetsList.AddRange(initialTargets);
+                SemiColonTokenizer initialTargets = _expander.ExpandIntoStringListLeaveEscaped(currentProjectOrImport.InitialTargets, ExpanderOptions.ExpandProperties, currentProjectOrImport.InitialTargetsLocation);
+                foreach (string target in initialTargets)
+                {
+                    _initialTargetsList.Add(target);
+                }
 
                 if (!Traits.Instance.EscapeHatches.IgnoreTreatAsLocalProperty)
                 {
diff --git a/src/Build/Instance/ImmutableProjectCollections/ImmutablePropertyCollectionConverter.cs b/src/Build/Instance/ImmutableProjectCollections/ImmutablePropertyCollectionConverter.cs
index 27610c71543..5bbbdcc68c3 100644
--- a/src/Build/Instance/ImmutableProjectCollections/ImmutablePropertyCollectionConverter.cs
+++ b/src/Build/Instance/ImmutableProjectCollections/ImmutablePropertyCollectionConverter.cs
@@ -32,6 +32,8 @@ public ImmutablePropertyCollectionConverter(IDictionary<string, TCached> propert
 
         public void ImportProperties(IEnumerable<T> other) => throw new NotSupportedException();
 
+        public void ImportPropertiesWithSelector<TSource>(IEnumerable<TSource> other, Func<TSource, T> selector) => throw new NotImplementedException();
+
         public void Set(T projectProperty) => throw new NotSupportedException();
 
         public bool Equals(ICopyOnWritePropertyDictionary<T>? other)
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 938fcc5cba9..b459a3c171b 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -3342,8 +3342,7 @@ private ProjectItemInstance InstantiateProjectItemInstance(ProjectItem item)
             {
                 directMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
 
-                IEnumerable<ProjectMetadataInstance> projectMetadataInstances = item.DirectMetadata.Select(directMetadatum => new ProjectMetadataInstance(directMetadatum));
-                directMetadata.ImportProperties(projectMetadataInstances);
+                directMetadata.ImportPropertiesWithSelector(item.DirectMetadata, directMetadatum => new ProjectMetadataInstance(directMetadatum));
             }
 
             GetEvaluatedIncludesFromProjectItem(
@@ -3400,8 +3399,7 @@ private static ProjectItemInstance InstantiateProjectItemInstanceFromImmutablePr
                 {
                     directMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
 
-                    IEnumerable<ProjectMetadataInstance> projectMetadataInstances = item.DirectMetadata.Select(directMetadatum => new ProjectMetadataInstance(directMetadatum));
-                    directMetadata.ImportProperties(projectMetadataInstances);
+                    directMetadata.ImportPropertiesWithSelector(item.DirectMetadata, directMetadatum => new ProjectMetadataInstance(directMetadatum));
                 }
             }
 
diff --git a/src/Build/Instance/ProjectItemDefinitionInstance.cs b/src/Build/Instance/ProjectItemDefinitionInstance.cs
index 4e886bd134a..b9387472cf3 100644
--- a/src/Build/Instance/ProjectItemDefinitionInstance.cs
+++ b/src/Build/Instance/ProjectItemDefinitionInstance.cs
@@ -59,8 +59,7 @@ internal ProjectItemDefinitionInstance(ProjectItemDefinition itemDefinition)
             if (itemDefinition.MetadataCount > 0)
             {
                 var copyOnWriteMetadataDictionary = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
-                IEnumerable<ProjectMetadataInstance> projectMetadataInstances = itemDefinition.Metadata.Select(originalMetadata => new ProjectMetadataInstance(originalMetadata));
-                copyOnWriteMetadataDictionary.ImportProperties(projectMetadataInstances);
+                copyOnWriteMetadataDictionary.ImportPropertiesWithSelector(itemDefinition.Metadata, originalMetadata => new ProjectMetadataInstance(originalMetadata));
 
                 _metadata = copyOnWriteMetadataDictionary;
             }
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 8dd5127eba5..f58ddc1c62e 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -126,8 +126,7 @@ internal ProjectItemInstance(ProjectInstance project, string itemType, string in
             if (directMetadata?.GetEnumerator().MoveNext() == true)
             {
                 metadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
-                IEnumerable<ProjectMetadataInstance> directMetadataInstances = directMetadata.Select(metadatum => new ProjectMetadataInstance(metadatum.Key, metadatum.Value));
-                metadata.ImportProperties(directMetadataInstances);
+                metadata.ImportPropertiesWithSelector(directMetadata, metadatum => new ProjectMetadataInstance(metadatum.Key, metadatum.Value));
             }
 
             CommonConstructor(project, itemType, includeEscaped, includeEscaped, metadata, null /* need to add item definition metadata */, definingFileEscaped, useItemDefinitionsWithoutModification: false);
@@ -605,8 +604,7 @@ internal static void SetMetadata(IEnumerable<KeyValuePair<string, string>> metad
             // Set up a single dictionary that can be applied to all the items
             CopyOnWritePropertyDictionary<ProjectMetadataInstance> metadata = new();
 
-            IEnumerable<ProjectMetadataInstance> projectMetadataInstances = metadataList.Select(metadatum => new ProjectMetadataInstance(metadatum.Key, metadatum.Value));
-            metadata.ImportProperties(projectMetadataInstances);
+            metadata.ImportPropertiesWithSelector(metadataList, metadatum => new ProjectMetadataInstance(metadatum.Key, metadatum.Value));
 
             foreach (ProjectItemInstance item in items)
             {
@@ -1082,7 +1080,7 @@ public void ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)
                 ProjectInstance.VerifyThrowNotImmutable(_isImmutable);
 
                 _directMetadata ??= new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
-                _directMetadata.ImportProperties(metadata.Select(kvp => new ProjectMetadataInstance(kvp.Key, kvp.Value, allowItemSpecModifiers: true)));
+                _directMetadata.ImportPropertiesWithSelector(metadata, kvp => new ProjectMetadataInstance(kvp.Key, kvp.Value, allowItemSpecModifiers: true));
             }
 
             /// <summary>
@@ -2060,8 +2058,7 @@ public void SetMetadata(IEnumerable<KeyValuePair<ProjectMetadataElement, string>
                 {
                     // Set up a single dictionary that can be applied to all the items
                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> metadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();
-                    IEnumerable<ProjectMetadataInstance> projectMetadataInstances = metadataList.Select(metadatum => new ProjectMetadataInstance(metadatum.Key.Name, metadatum.Value));
-                    metadata.ImportProperties(projectMetadataInstances);
+                    metadata.ImportPropertiesWithSelector(metadataList, metadatum => new ProjectMetadataInstance(metadatum.Key.Name, metadatum.Value));
 
                     foreach (ProjectItemInstance item in destinationItems)
                     {
