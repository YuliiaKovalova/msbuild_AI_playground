diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 43e6f640b1a..88263d408fe 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -23,13 +23,46 @@
 namespace Microsoft.Build.Framework.Telemetry
 {
 
+    internal enum TelemetryState
+    {
+        Uninitialized,
+
+        /// <summary>
+        /// Opt out of telemetry.
+        /// </summary>
+        OptOut,
+
+        /// <summary>
+        /// Run not sampled for telemetry.
+        /// </summary>
+        Unsampled,
+
+        /// <summary>
+        /// For core hook, only ActivitySource is created.
+        /// </summary>
+        CoreInitialized,
+
+        /// <summary>
+        /// ActivitySource, OTel TracerProvider are initialized.
+        /// </summary>
+        VSInitialized,
+
+        /// <summary>
+        /// ActivitySource, OTel TracerProvider, VS OpenTelemetry Collector are initialized.
+        /// </summary>
+        StandaloneInitialized,
+
+        Disposed
+    }
+
     /// <summary>
     /// Class for configuring and managing the telemetry infrastructure with System.Diagnostics.Activity, OpenTelemetry SDK and VS OpenTelemetry Collector.
     /// </summary>
     internal static class OpenTelemetryManager
     {
-        private static bool _initialized = false;
+        private static TelemetryState _telemetryState = TelemetryState.Uninitialized;
         private static readonly object s_initialize_lock = new();
+        private static double _sampleRate = TelemetryConstants.DefaultSampleRate;
 
 #if NETFRAMEWORK
         private static TracerProvider? s_tracerProvider;
@@ -37,6 +70,13 @@ internal static class OpenTelemetryManager
 #endif
 
         public static MSBuildActivitySource? DefaultActivitySource { get; set; }
+        
+        // unsampled -> initialized or unsampled again
+        public static bool ResampleInitialize()
+        {
+            return false;
+        }
+
 
         public static void Initialize(bool isStandalone)
         {
@@ -46,8 +86,8 @@ public static void Initialize(bool isStandalone)
                 {
                     return;
                 }
-
-                // create activity source
+                
+                // create activity sources
                 DefaultActivitySource = new MSBuildActivitySource(TelemetryConstants.DefaultActivitySourceNamespace);
 
                 // create trace exporter in framework
@@ -82,7 +122,7 @@ public static void Initialize(bool isStandalone)
                     s_collector.StartAsync().Wait();
                 }
 #endif
-                _initialized = true;
+                _telemetryState = TelemetryState.VSInitialized;
             }
         }
 
@@ -90,18 +130,20 @@ public static void ForceFlush()
         {
             lock (s_initialize_lock)
             {
-                if (_initialized)
+                if (_telemetryState == TelemetryState.VSInitialized)
                 {
 #if NETFRAMEWORK
                     s_tracerProvider?.ForceFlush();
+                    // s_collector.
 #endif
                 }
             }
         }
+
         private static bool ShouldInitialize()
         {
             // only initialize once
-            if (_initialized)
+            if (_telemetryState != TelemetryState.Uninitialized )
             {
                 return false;
             }
@@ -135,7 +177,7 @@ public static void Shutdown()
         {
             lock (s_initialize_lock)
             {
-                if (_initialized)
+                if (_telemetryState == TelemetryState.VSInitialized)
                 {
 #if NETFRAMEWORK
                     s_tracerProvider?.Shutdown();
@@ -181,7 +223,7 @@ public static Activity WithTags(this Activity activity, IActivityTelemetryDataHo
                         // Hash the value via Visual Studio mechanism in Framework & same algo as in core telemetry hashing
                         // https://github.com/dotnet/sdk/blob/8bd19a2390a6bba4aa80d1ac3b6c5385527cc311/src/Cli/Microsoft.DotNet.Cli.Utils/Sha256Hasher.cs
 #if NETFRAMEWORK
-                        // hashedValue = new Microsoft.VisualStudio.Telemetry.TelemetryHashedProperty(value
+                        // hashedValue = new Microsoft.VisualStudio.Telemetry.TelemetryHashedProperty(value);
 #endif
                     }
 
diff --git a/src/Framework/Telemetry/TelemetryConstants.cs b/src/Framework/Telemetry/TelemetryConstants.cs
index 1f456b34ff2..085a5d7eeab 100644
--- a/src/Framework/Telemetry/TelemetryConstants.cs
+++ b/src/Framework/Telemetry/TelemetryConstants.cs
@@ -7,9 +7,10 @@ internal static class TelemetryConstants
     /// <summary>
     /// "Microsoft.VisualStudio.OpenTelemetry.*" namespace is required by VS exporting/collection.
     /// </summary>
-    public const string DefaultActivitySourceNamespace = "Microsoft.VisualStudio.OpenTelemetry.MSBuild";
+    public const string DefaultActivitySourceNamespace = "Microsoft.VisualStudio.OpenTelemetry.MSBuild.Default";
     public const string EventPrefix = "VS/MSBuild/";
     public const string PropertyPrefix = "VS.MSBuild.";
+
     /// <summary>
     /// For VS OpenTelemetry Collector to apply the correct privacy policy.
     /// </summary>
@@ -19,6 +20,12 @@ internal static class TelemetryConstants
     /// https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry
     /// </summary>
     public const string DotnetOptOut = "DOTNET_CLI_TELEMETRY_OPTOUT";
+
     public const string MSBuildFxOptout = "MSBUILD_TELEMETRY_OPTOUT";
     public const string MSBuildCoreOptin = "MSBUILD_TELEMETRY_OPTIN";
+
+    public const double MaxVSSampleRate = 1;
+    public const double MaxStandaloneSampleRate = 1;
+
+    public const double DefaultSampleRate = 4e-5; // 1:25000 
 }
