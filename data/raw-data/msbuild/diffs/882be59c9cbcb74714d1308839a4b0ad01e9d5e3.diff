diff --git a/documentation/specs/BuildCheck/Codes.md b/documentation/specs/BuildCheck/Codes.md
index 494e2853166..d2a518cedf6 100644
--- a/documentation/specs/BuildCheck/Codes.md
+++ b/documentation/specs/BuildCheck/Codes.md
@@ -4,16 +4,18 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are
 
 | Diagnostic&nbsp;Code | Default Severity | Default Scope | Available from SDK | Reason |
 |:-----|-------|-------|-------|----------|
-| [BC0101](#bc0101---shared-output-path) | Warning | | 9.0.100 | Shared output path. |
-| [BC0102](#bc0102---double-writes) | Warning | | 9.0.100 | Double writes. |
+| [BC0101](#bc0101---shared-output-path) | Warning | N/A | 9.0.100 | Shared output path. |
+| [BC0102](#bc0102---double-writes) | Warning | N/A | 9.0.100 | Double writes. |
 | [BC0103](#bc0103---used-environment-variable) | Suggestion | Project | 9.0.100 | Used environment variable. |
-| [BC0104](#bc0104---projectreference-is-preferred-to-reference) | Warning | | 9.0.200 | ProjectReference is preferred to Reference. |
-| [BC0105](#bc0105---embeddedresource-should-specify-culture-metadata) | Warning | | 9.0.200 | Culture specific EmbeddedResource should specify Culture metadata. |
+| [BC0104](#bc0104---projectreference-is-preferred-to-reference) | Warning | N/A | 9.0.200 | ProjectReference is preferred to Reference. |
+| [BC0105](#bc0105---embeddedresource-should-specify-culture-metadata) | Warning | N/A | 9.0.200 | Culture specific EmbeddedResource should specify Culture metadata. |
 | [BC0201](#bc0201---usage-of-undefined-property) | Warning | Project | 9.0.100 | Usage of undefined property. |
 | [BC0202](#bc0202---property-first-declared-after-it-was-used) | Warning | Project | 9.0.100 | Property first declared after it was used. |
 | [BC0203](#bc0203----property-declared-but-never-used) | Suggestion | Project | 9.0.100 | Property declared but never used. |
 
 
+Note: What does the 'N/A' scope mean? The scope of checks are only applicable and configurable in cases where evaluation-time data are being used and the source of the data is determinable and available. Otherwise the scope of whole build is always checked.
+
 To enable verbose logging in order to troubleshoot issue(s), enable [binary logging](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#msbuild-binary-log-overview)
 
 _Cmd:_
diff --git a/src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs b/src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs
index f2927334fba..73c7e6af9ed 100644
--- a/src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs
+++ b/src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs
@@ -5,18 +5,17 @@
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.BuildCheck.Checks;
+namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 internal class EmbeddedResourceCheck : Check
 {
     private const string RuleId = "BC0105";
     public static CheckRule SupportedRule = new CheckRule(RuleId, "EmbeddedResourceCulture",
         ResourceUtilities.GetResourceString("BuildCheck_BC0105_Title")!,
         ResourceUtilities.GetResourceString("BuildCheck_BC0105_MessageFmt")!,
-        new CheckConfiguration() { RuleId = "BC0105", Severity = CheckResultSeverity.Warning });
+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.EmbeddedResourceCulture";
 
@@ -104,6 +103,8 @@ private static bool HasDoubleExtension(string s)
     /// </summary>
     private string GetSupposedCultureExtension(string s)
     {
+        // If the item is defined as "Strings.en-US.resx", then we want to arrive to 'en-US'
+
         string extension = Path.GetExtension(Path.GetFileNameWithoutExtension(s));
         if (extension.Length > 1)
         {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 159de815c4e..824e7983143 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -8,7 +8,6 @@
 using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.BuildCheck.Checks;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Experimental.BuildCheck.Acquisition;
diff --git a/src/Shared/StringExtensions.cs b/src/Shared/StringExtensions.cs
index 5c6ae341f63..6ca90bbf3d1 100644
--- a/src/Shared/StringExtensions.cs
+++ b/src/Shared/StringExtensions.cs
@@ -93,9 +93,21 @@ public static void WriteLine(this TextWriter writer, ReadOnlySpan<char> buffer)
         }
 #endif
 
+        /// <summary>
+        /// Converts a string to a bool.  We consider "true/false", "on/off", and
+        /// "yes/no" to be valid boolean representations in the XML. The '!' prefix for negation is allowed as well.
+        /// Unrecognized values lead to exception
+        /// </summary>
+        /// <exception cref="ArgumentException">Thrown when given argument is unrecognized MSBuild boolean string.</exception>
         public static bool IsMSBuildTrueString(this string msbuildString) =>
             ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
 
+        /// <summary>
+        /// Converts a string to a bool.  We consider "true/false", "on/off", and
+        /// "yes/no" to be valid boolean representations in the XML. The '!' prefix for negation is allowed as well.
+        /// Unrecognized values lead to exception
+        /// </summary>
+        /// <exception cref="ArgumentException">Thrown when given argument is unrecognized MSBuild boolean string.</exception>
         public static bool IsMSBuildFalseString(this string msbuildString) => !IsMSBuildTrueString(msbuildString);
     }
 }
