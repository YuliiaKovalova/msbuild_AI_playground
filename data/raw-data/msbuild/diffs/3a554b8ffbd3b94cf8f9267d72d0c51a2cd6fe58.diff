diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 8cafdf5521b..60e92d7c2b6 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2180,10 +2180,15 @@ private void HandleNewRequest(int node, BuildRequestBlocker blocker)
             PerformSchedulingActions(response);
         }
 
+        /// <summary>
+        /// Handles a resource request coming from a node.
+        /// </summary>
         private void HandleResourceRequest(int node, ResourceRequest request)
         {
-            if (request.IsAcquire)
+            if (request.IsResourceAcquire)
             {
+                // Resource request requires a response and may be blocking. Our continuation is effectively a callback
+                // to be called once at least one core becomes available.
                 _scheduler.RequestCores(request.BlockedRequestId, request.NumCores, request.IsBlocking).ContinueWith((Task<int> task) =>
                 {
                     var response = new ResourceResponse(request.BlockedRequestId, task.Result);
@@ -2192,9 +2197,10 @@ private void HandleResourceRequest(int node, ResourceRequest request)
             }
             else
             {
+                // Resource release is a one-way call, no response is expected. We release the cores as instructed
+                // and kick the scheduler because there may be work waiting for cores to become available.
                 IEnumerable<ScheduleResponse> response = _scheduler.ReleaseCores(request.BlockedRequestId, request.NumCores);
                 PerformSchedulingActions(response);
-                // No response needed.
             }
         }
 
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 859010d5d1d..f8d55075357 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -687,15 +687,6 @@ private void RaiseNewConfigurationRequest(BuildRequestConfiguration config)
             OnNewConfigurationRequest?.Invoke(config);
         }
 
-        /// <summary>
-        /// Raises OnResourceRequest event.
-        /// </summary>
-        /// <param name="request">The resource request.</param>
-        private void RaiseResourceRequest(ResourceRequest request)
-        {
-            OnResourceRequest?.Invoke(request);
-        }
-
         #endregion
 
         /// <summary>
@@ -1015,7 +1006,7 @@ private void Builder_OnBlockedRequest(BuildRequestEntry issuingEntry, int blocki
         /// </summary>
         private void Builder_OnResourceRequest(ResourceRequest request)
         {
-            RaiseResourceRequest(request);
+            OnResourceRequest?.Invoke(request);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 3ac8c38a1c0..e9aadcd0adc 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -741,7 +741,7 @@ private void VerifyEntryInActiveState()
         private void VerifyEntryInActiveOrWaitingState()
         {
             ErrorUtilities.VerifyThrow(_requestEntry.State == BuildRequestEntryState.Active || _requestEntry.State == BuildRequestEntryState.Waiting,
-                "Entry is not in the Active state, it is in the {0} state.", _requestEntry.State);
+                "Entry is not in the Active or Waiting state, it is in the {0} state.", _requestEntry.State);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Shared/ResourceRequest.cs b/src/Build/BackEnd/Shared/ResourceRequest.cs
index 01abe649217..b3c3bd1f656 100644
--- a/src/Build/BackEnd/Shared/ResourceRequest.cs
+++ b/src/Build/BackEnd/Shared/ResourceRequest.cs
@@ -6,6 +6,7 @@
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
+    /// This packet is sent by a node to request or release resources from/to the scheduler.
     /// </summary>
     internal class ResourceRequest : INodePacket
     {
@@ -14,7 +15,7 @@ internal class ResourceRequest : INodePacket
         /// </summary>
         private int _blockedGlobalRequestId;
 
-        private bool _isAcquire;
+        private bool _isResourceAcquire;
 
         private bool _isBlocking;
 
@@ -33,7 +34,7 @@ internal ResourceRequest(ITranslator translator)
         /// </summary>
         internal ResourceRequest(int blockedGlobalRequestId, int numCores, bool isBlocking)
         {
-            _isAcquire = true;
+            _isResourceAcquire = true;
             _isBlocking = isBlocking;
             _blockedGlobalRequestId = blockedGlobalRequestId;
             _numCores = numCores;
@@ -44,7 +45,7 @@ internal ResourceRequest(int blockedGlobalRequestId, int numCores, bool isBlocki
         /// </summary>
         internal ResourceRequest(int blockedGlobalRequestId, int numCores)
         {
-            _isAcquire = false;
+            _isResourceAcquire = false;
             _blockedGlobalRequestId = blockedGlobalRequestId;
             _numCores = numCores;
         }
@@ -73,12 +74,12 @@ public int BlockedRequestId
 
         /// <summary>
         /// </summary>
-        public bool IsAcquire
+        public bool IsResourceAcquire
         {
             [DebuggerStepThrough]
             get
             {
-                return _isAcquire;
+                return _isResourceAcquire;
             }
         }
 
@@ -112,7 +113,7 @@ public int NumCores
         public void Translate(ITranslator translator)
         {
             translator.Translate(ref _blockedGlobalRequestId);
-            translator.Translate(ref _isAcquire);
+            translator.Translate(ref _isResourceAcquire);
             translator.Translate(ref _isBlocking);
             translator.Translate(ref _numCores);
         }
