diff --git a/src/MSBuild/LiveLogger/FancyLogger.cs b/src/MSBuild/LiveLogger/FancyLogger.cs
index e65cde97cb1..4e9029d02e5 100644
--- a/src/MSBuild/LiveLogger/FancyLogger.cs
+++ b/src/MSBuild/LiveLogger/FancyLogger.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.Logging.LiveLogger
 {
     internal class FancyLogger : ILogger
     {
-        private Dictionary<int, FancyLoggerProjectNode> projects = new Dictionary<int, FancyLoggerProjectNode>();
+        private Dictionary<int, ProjectNode> projects = new Dictionary<int, ProjectNode>();
 
         private bool Succeeded;
 
@@ -122,7 +122,7 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e
                 return;
             }
             // Add project
-            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);
+            ProjectNode node = new ProjectNode(e);
             projects[id] = node;
             // Log
             node.ShouldRerender = true;
@@ -132,7 +132,7 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -147,7 +147,7 @@ private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -161,7 +161,7 @@ private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -176,7 +176,7 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -201,7 +201,7 @@ private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             }
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -215,7 +215,7 @@ private void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -229,7 +229,7 @@ private void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
diff --git a/src/MSBuild/LiveLogger/MessageNode.cs b/src/MSBuild/LiveLogger/MessageNode.cs
index 055dd600014..61136060cb0 100644
--- a/src/MSBuild/LiveLogger/MessageNode.cs
+++ b/src/MSBuild/LiveLogger/MessageNode.cs
@@ -7,7 +7,7 @@
 namespace Microsoft.Build.Logging.LiveLogger
 {
 
-    internal class FancyLoggerMessageNode
+    internal class MessageNode
     {
         // Use this to change the max lenngth (relative to screen size) of messages
         private static int MAX_LENGTH = 3 * Console.BufferWidth;
@@ -24,7 +24,7 @@ public enum MessageType
         public string? FilePath;
         public int? LineNumber;
         public int? ColumnNumber;
-        public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
+        public MessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
             if (Message.Length > MAX_LENGTH)
diff --git a/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs b/src/MSBuild/LiveLogger/ProjectNode.cs
similarity index 98%
rename from src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs
rename to src/MSBuild/LiveLogger/ProjectNode.cs
index 7d1f5755487..c7dd78f92ae 100644
--- a/src/MSBuild/LiveLogger/FancyLoggerProjectNode.cs
+++ b/src/MSBuild/LiveLogger/ProjectNode.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class FancyLoggerProjectNode
+    internal class ProjectNode
     {
         /// <summary>
         /// Given a list of paths, this method will get the shortest not ambiguous path for a project.
@@ -39,7 +39,7 @@ private static string GetUnambiguousPath(string path)
         public int ErrorCount = 0;
         // Bool if node should rerender
         internal bool ShouldRerender = true;
-        public FancyLoggerProjectNode(ProjectStartedEventArgs args)
+        public ProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
             ProjectPath = args.ProjectFile!;
