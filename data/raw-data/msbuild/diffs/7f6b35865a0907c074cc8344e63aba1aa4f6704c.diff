diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index ea3d239ae77..8029bcdb60a 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -619,11 +619,6 @@ internal class NodeContext
             /// </summary>
             private MemoryStream _writeBufferMemoryStream;
 
-            /// <summary>
-            /// A BinaryWriter to assist writing bytes to the buffer.
-            /// </summary>
-            private BinaryWriter _writeBufferBinaryWriter;
-
             /// <summary>
             /// Event indicating the node has terminated.
             /// </summary>
@@ -653,10 +648,8 @@ public NodeContext(int nodeId, int processId,
                 _packetFactory = factory;
                 _headerByte = new byte[5]; // 1 for the packet type, 4 for the body length
 
-                // packets get this large so avoid reallocations
                 _readBufferMemoryStream = new MemoryStream();
                 _writeBufferMemoryStream = new MemoryStream();
-                _writeBufferBinaryWriter = new BinaryWriter(_writeBufferMemoryStream);
                 _nodeTerminated = new ManualResetEvent(false);
                 _terminateDelegate = terminateDelegate;
                 _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
@@ -735,6 +728,14 @@ public async Task RunPacketReadLoopAsync()
             }
 #endif
 
+            private void WriteInt32(MemoryStream stream, int value)
+            {
+                stream.WriteByte((byte)value);
+                stream.WriteByte((byte)(value >> 8));
+                stream.WriteByte((byte)(value >> 16));
+                stream.WriteByte((byte)(value >> 24));
+            }
+
             /// <summary>
             /// Sends the specified packet to this node.
             /// </summary>
@@ -750,14 +751,14 @@ public void SendData(INodePacket packet)
                     _writeBufferMemoryStream.WriteByte((byte)packet.Type);
 
                     // Pad for the packet length
-                    _writeBufferBinaryWriter.Write(0);
+                    WriteInt32(_writeBufferMemoryStream, 0);
                     packet.Translate(writeTranslator);
 
                     int writeStreamLength = (int)_writeBufferMemoryStream.Position;
 
                     // Now plug in the real packet length
                     _writeBufferMemoryStream.Position = 1;
-                    _writeBufferBinaryWriter.Write(writeStreamLength - 5);
+                    WriteInt32(_writeBufferMemoryStream, writeStreamLength - 5);
 
                     byte[] writeStreamBuffer = _writeBufferMemoryStream.GetBuffer();
 
