diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 827d9465d75..8acccc64d13 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -50,7 +50,7 @@ public enum SharingPolicy
         /// </summary>
         private ConcurrentDictionary<string, IReadOnlyList<string>> FileEntryExpansionCache { get; }
 
-        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem)
+        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, IDirectoryCacheFactory directoryCacheFactory)
         {
             // Unsupported case: isolated context with non null file system.
             // Isolated means caches aren't reused, but the given file system might cache.
@@ -60,6 +60,8 @@ private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem)
 
             Policy = policy;
 
+            // TODO: Use directoryCacheFactory.
+
             SdkResolverService = new CachingSdkResolverService();
             FileEntryExpansionCache = new ConcurrentDictionary<string, IReadOnlyList<string>>();
             FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default);
@@ -91,7 +93,25 @@ public static EvaluationContext Create(SharingPolicy policy, MSBuildFileSystemBa
         {
             var context = new EvaluationContext(
                 policy,
-                fileSystem);
+                fileSystem,
+                directoryCacheFactory: null);
+
+            TestOnlyHookOnCreate?.Invoke(context);
+
+            return context;
+        }
+
+        /// <summary>
+        ///     Factory for <see cref="EvaluationContext" />
+        /// </summary>
+        /// <param name="policy">The <see cref="SharingPolicy"/> to use.</param>
+        /// <param name="directoryCacheFactory">The <see cref="IDirectoryCacheFactory"/> to use.</param>
+        public static EvaluationContext Create(SharingPolicy policy, IDirectoryCacheFactory directoryCacheFactory)
+        {
+            var context = new EvaluationContext(
+                policy,
+                fileSystem: null,
+                directoryCacheFactory);
 
             TestOnlyHookOnCreate?.Invoke(context);
 
diff --git a/src/Build/FileSystem/IDirectoryCache.cs b/src/Build/FileSystem/IDirectoryCache.cs
new file mode 100644
index 00000000000..e74d7c71a2b
--- /dev/null
+++ b/src/Build/FileSystem/IDirectoryCache.cs
@@ -0,0 +1,44 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+#if NETCOREAPP
+using System.IO.Enumeration;
+#else
+using Microsoft.IO.Enumeration;
+#endif
+
+namespace Microsoft.Build.FileSystem
+{
+    public interface IDirectoryCacheFactory
+    {
+        IDirectoryCache GetDirectoryCacheForProject(string projectPath);
+    }
+
+    public interface IDirectoryCache
+    {
+        bool FileExists(string path);
+
+        bool DirectoryExists(string path);
+
+        /// <summary>
+        /// Enumerates files in the given directory only (non-recursively).
+        /// </summary>
+        /// <typeparam name="TResult">The desired return type.</typeparam>
+        /// <param name="path">The directory to enumerate.</param>
+        /// <param name="predicate">A predicate to test whether a file should be included.</param>
+        /// <param name="transform">A transform from <see cref="FileSystemEntry"/> to <typeparamref name="TResult"/>.</param>
+        /// <returns></returns>
+        IEnumerable<TResult> EnumerateFiles<TResult>(string path, FileSystemEnumerable<TResult>.FindPredicate predicate, FileSystemEnumerable<TResult>.FindTransform transform);
+
+        /// <summary>
+        /// Enumerates subdirectories in the given directory only (non-recursively).
+        /// </summary>
+        /// <typeparam name="TResult">The desired return type.</typeparam>
+        /// <param name="path">The directory to enumerate.</param>
+        /// <param name="predicate">A predicate to test whether a directory should be included.</param>
+        /// <param name="transform">A transform from <see cref="FileSystemEntry"/> to <typeparamref name="TResult"/>.</param>
+        /// <returns></returns>
+        IEnumerable<TResult> EnumerateDirectories<TResult>(string path, FileSystemEnumerable<TResult>.FindPredicate predicate, FileSystemEnumerable<TResult>.FindTransform transform);
+    }
+}
