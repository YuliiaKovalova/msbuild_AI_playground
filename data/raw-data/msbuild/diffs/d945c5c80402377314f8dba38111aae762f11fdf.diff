diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 6683aee819d..7649231a263 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -17,8 +17,7 @@ internal class LiveLogger : ILogger
         public int StartedProjects = 0;
         public int FinishedProjects = 0;
         public LoggerVerbosity Verbosity { get; set; }
-        private TerminalBufferLine? finishedProjectsLine;
-        private Dictionary<string, string> blockedProjects = new();
+        private Dictionary<string, int> blockedProjects = new();
 
         public LiveLogger()
         {
@@ -59,7 +58,7 @@ private void Render()
             TerminalBuffer.WriteNewLine(string.Empty);
 
             // Top line indicates the number of finished projects.
-            finishedProjectsLine = TerminalBuffer.WriteNewLine($"{FinishedProjects} projects finished building.");
+            TerminalBuffer.FinishedProjects = this.FinishedProjects;
 
             // First render
             TerminalBuffer.Render();
@@ -72,15 +71,14 @@ private void Render()
                 // Use task delay to avoid blocking the task, so that keyboard input is listened continously
                 Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
-                    foreach (KeyValuePair<string, string> blockedProject in blockedProjects)
-                    {
-                    }
+                    TerminalBuffer.FinishedProjects = this.FinishedProjects;
 
                     // Rerender projects only when needed
                     foreach (var project in projects)
                     {
                         project.Value.Log();
                     }
+
                     // Rerender buffer
                     TerminalBuffer.Render();
                 });
@@ -158,7 +156,6 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs
             // Update line
             node.Finished = true;
             FinishedProjects++;
-            finishedProjectsLine!.Text = $"{FinishedProjects} projects finished building.";
             UpdateFooter();
             node.ShouldRerender = true;
         }
@@ -208,12 +205,27 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
 
             if (e.TaskName.Equals("MSBuild"))
             {
-                blockedProjects[e.ProjectFile] = "Blocked by MSBuild task";
+                TerminalBufferLine? line = TerminalBuffer.WriteNewLineAfterMidpoint($"{e.ProjectFile} is blocked by the MSBuild task.");
+                if (line is not null)
+                {
+                    blockedProjects[e.ProjectFile] = line.Id;
+                }
             }
         }
 
         private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
+            if (e.TaskName.Equals("MSBuild"))
+            {
+                if (blockedProjects.TryGetValue(e.ProjectFile, out int lineId))
+                {
+                    TerminalBuffer.DeleteLine(lineId);
+                    if (projects.TryGetValue(e.BuildEventContext!.ProjectInstanceId, out ProjectNode? node))
+                    {
+                        node.ShouldRerender = true;
+                    }
+                }
+            }
         }
 
         // Raised messages, warnings and errors
diff --git a/src/MSBuild/LiveLogger/ProjectNode.cs b/src/MSBuild/LiveLogger/ProjectNode.cs
index c8686500d8f..64cf976fe3d 100644
--- a/src/MSBuild/LiveLogger/ProjectNode.cs
+++ b/src/MSBuild/LiveLogger/ProjectNode.cs
@@ -78,7 +78,7 @@ public void Log()
             // Create or update line
             if (Line is null)
             {
-                Line = TerminalBuffer.WriteNewLine(lineContents, false);
+                Line = TerminalBuffer.WriteNewLineBeforeMidpoint(lineContents, false);
             }
             else
             {
@@ -95,7 +95,7 @@ public void Log()
 
                 bool foundErrorOrWarning = false;
 
-                foreach (MessageNode node in AdditionalDetails.ToList())
+                foreach (MessageNode node in AdditionalDetails)
                 {
                     if (node.Type != MessageNode.MessageType.HighPriorityMessage)
                     {
@@ -116,6 +116,15 @@ public void Log()
 
                 if (!foundErrorOrWarning && this.Line is not null)
                 {
+                    foreach (MessageNode node in AdditionalDetails)
+                    {
+                        int? id = node.Line?.Id;
+                        if (id is not null)
+                        {
+                            TerminalBuffer.DeleteLine(id.Value);
+                        }
+                    }
+
                     TerminalBuffer.DeleteLine(this.Line.Id);
                 }
             }
diff --git a/src/MSBuild/LiveLogger/TerminalBuffer.cs b/src/MSBuild/LiveLogger/TerminalBuffer.cs
index b4268af4c8b..d62c39d799a 100644
--- a/src/MSBuild/LiveLogger/TerminalBuffer.cs
+++ b/src/MSBuild/LiveLogger/TerminalBuffer.cs
@@ -4,7 +4,9 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Runtime.CompilerServices;
 using System.Text;
+using static System.Net.Mime.MediaTypeNames;
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
@@ -62,6 +64,8 @@ internal class TerminalBuffer
         public static string Footer = string.Empty;
         internal static bool IsTerminated = false;
         internal static bool ShouldRerender = true;
+        internal static int FinishedProjects = 0;
+        private static int midLineId;
         internal static int ScrollableAreaHeight
         {
             get
@@ -76,6 +80,9 @@ public static void Initialize()
             Console.OutputEncoding = Encoding.UTF8;
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
             Console.Write(ANSIBuilder.Cursor.Invisible());
+            TerminalBufferLine midLine = new(new string('-', Console.BufferWidth), true);
+            WriteNewLine(midLine);
+            midLineId = midLine.Id;
         }
 
         public static void Terminate()
@@ -101,7 +108,7 @@ public static void Render()
             Console.Write(
                 // Write header
                 ANSIBuilder.Cursor.Home() +
-                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center("MSBuild - Build in progress")) +
+                ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Formatting.Inverse(ANSIBuilder.Alignment.Center($"MSBuild - Build in progress - {FinishedProjects} finished projects")) +
                 // Write footer
                 ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) + ANSIBuilder.Eraser.LineCursorToEnd() +
                 new string('-', Console.BufferWidth) + '\n' + FooterText);
@@ -191,7 +198,7 @@ public static int GetLineIndexById(int lineId)
                     return null;
                 }
                 // Get line end index
-                Lines.Insert(lineIndex, line);
+                Lines.Insert(lineIndex + 1, line);
             }
             else
             {
@@ -200,6 +207,26 @@ public static int GetLineIndexById(int lineId)
             return line;
         }
 
+        public static TerminalBufferLine? WriteNewLineAfterMidpoint(string text, bool shouldWrapLines = false)
+        {
+            TerminalBufferLine line = new(text, shouldWrapLines);
+            return WriteNewLineAfter(midLineId, line);
+        }
+
+        public static TerminalBufferLine? WriteNewLineBeforeMidpoint(string text, bool shouldWrapLines)
+        {
+            TerminalBufferLine line = new(text, shouldWrapLines);
+            int lineIndex = GetLineIndexById(midLineId);
+            if (lineIndex == -1)
+            {
+                return null;
+            }
+
+            Lines.Insert(lineIndex, line);
+
+            return line;
+        }
+
         public static TerminalBufferLine? WriteNewLine(string text)
         {
             return WriteNewLine(text, true);
