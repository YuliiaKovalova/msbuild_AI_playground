diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 826fbadef56..7a3e18b7e83 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -209,6 +209,7 @@ public class BuildParameters : ITranslatable
 
         private bool _question;
 
+        private bool _isBuildCheckEnabled;
         private bool _isBuildCheckEnabled;
 
         /// <summary>
@@ -313,6 +314,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             DiscardBuildResults = other.DiscardBuildResults;
             LowPriority = other.LowPriority;
             Question = other.Question;
+            IsBuildCheckEnabled = other.IsBuildCopEnabled;
             IsBuildCheckEnabled = other.IsBuildCheckEnabled;
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
@@ -847,6 +849,15 @@ public bool IsBuildCheckEnabled
             get => _isBuildCheckEnabled;
             set => _isBuildCheckEnabled = value;
         }
+        
+        /// <summary>
+        /// Gets or sets an indication of build analysis statistics enablement.
+        /// </summary>
+        public bool AreBuildCopStatsEnabled
+        {
+            get => _areBuildCopStatsEnabled;
+            set => _areBuildCopStatsEnabled = value;
+        }
 
         /// <summary>
         /// Gets or sets the project cache description to use for all <see cref="BuildSubmission"/> or <see cref="GraphBuildSubmission"/>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index b860423748e..2ca1879e50c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -12,12 +12,17 @@
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
-internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)
+internal sealed class BuildCheckConnectorLogger(
+    IBuildAnalysisLoggingContextFactory loggingContextFactory, 
+    IBuildCheckManager buildCheckManager,
+    bool isStatsEnabled)
     : ILogger
 {
     public LoggerVerbosity Verbosity { get; set; }
     public string? Parameters { get; set; }
 
+    private bool _areStatsEnabled = isStatsEnabled;
+
     public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
@@ -70,7 +75,14 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         {
             if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
             {
-                _stats.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                if (tracingEventArgs.isInfraTracing)
+                {
+                    _statsInfra.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                }
+                else
+                {
+                    _statsAnalyzers.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                }
             }
             else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)
             {
@@ -79,13 +91,11 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         }
     }
 
-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();
+    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();
+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();
 
     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
     {
-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);
-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + ": " + a.Value));
-
 
         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(
             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,
@@ -93,8 +103,28 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
 
         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();
 
-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
+        if (_areStatsEnabled)
+        {
+            _statsAnalyzers.Merge(buildCopManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
+            _statsInfra.Merge(buildCopManager.CreateBuildCopInfraTracingStats(), (span1, span2) => span1 + span2);
+
+            LogAnalyzerStats(loggingContext);
+        }
+    }
+    
+    // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
+    private void LogAnalyzerStats(LoggingContext loggingContext)
+    {
+        string openingLine = "BuildCop infra stats";
+        loggingContext.LogCommentFromText(MessageImportance.High, openingLine);
+
+        string msg = string.Join(Environment.NewLine, _statsInfra.Select(a => $"{a.Key}: {a.Value}"));
         loggingContext.LogCommentFromText(MessageImportance.High, msg);
+
+        loggingContext.LogCommentFromText(MessageImportance.High, "Build Cop Analyzer stats");
+
+        string msg2 = string.Join(Environment.NewLine, _statsAnalyzers.Select(a => $"{a.Key}: {a.Value}"));
+        loggingContext.LogCommentFromText(MessageImportance.High, msg2);
     }
 
     public void Shutdown()
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index df5385b08ba..e97f77f9b9b 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -45,6 +45,8 @@ internal static IBuildComponent CreateComponent(BuildComponentType type)
         return new BuildCheckManagerProvider();
     }
 
+    internal static Stopwatch _stopwatch = new Stopwatch();
+
     public void InitializeComponent(IBuildComponentHost host)
     {
         ErrorUtilities.VerifyThrow(host != null, "BuildComponentHost was null");
@@ -280,15 +282,14 @@ private void SetupAnalyzersForNewProject(string projectFullPath, BuildEventConte
             }
         }
 
-
         public void ProcessEvaluationFinishedEventArgs(
             IBuildAnalysisLoggingContext buildAnalysisContext,
             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)
             => _buildEventsProcessor
                 .ProcessEvaluationFinishedEventArgs(buildAnalysisContext, evaluationFinishedEventArgs);
 
-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629
-        public Dictionary<string, TimeSpan> CreateTracingStats()
+        // tHIS IS BASICALLY ONLY CALLED IN PROC NODE
+        public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
         {
             foreach (BuildAnalyzerFactoryContext analyzerFactoryContext in _analyzersRegistry)
             {
@@ -303,6 +304,18 @@ public Dictionary<string, TimeSpan> CreateTracingStats()
             return _tracingReporter.TracingStats;
         }
 
+        public Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats()
+        {
+            Dictionary<string, TimeSpan> infraTime = new Dictionary<string, TimeSpan>
+            {
+                { "analyzerAcquisitionTime", _tracingReporter.analyzerAcquisitionTime },
+                { "analyzerSetDataSourceTime", new TimeSpan(_tracingReporter.analyzerSetDataSourceTime) },
+                { "newProjectAnalyzersTime", new TimeSpan(_tracingReporter.newProjectAnalyzersTime) }
+            };
+
+            return infraTime;
+        }
+
         public void FinalizeProcessing(LoggingContext loggingContext)
         {
             if (IsInProcNode)
@@ -311,9 +324,13 @@ public void FinalizeProcessing(LoggingContext loggingContext)
                 return;
             }
 
-            BuildCheckTracingEventArgs eventArgs =
-                new(CreateTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
-            loggingContext.LogBuildEvent(eventArgs);
+            BuildCopTracingEventArgs analyzerEventArg =
+                new(CreateAnalyzerTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
+            loggingContext.LogBuildEvent(analyzerEventArg);
+
+            BuildCopTracingEventArgs infraEventStats =
+                new(CreateBuildCopInfraTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
+            loggingContext.LogBuildEvent(infraEventStats);
         }
 
         public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext,
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 703d0b6bfa9..4ce030e2eb3 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -35,7 +35,8 @@ void ProcessEvaluationFinishedEventArgs(
 
     void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
 
-    Dictionary<string, TimeSpan> CreateTracingStats();
+    Dictionary<string, TimeSpan> CreateAnalyzerTracingStats();
+    Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats();
 
     void FinalizeProcessing(LoggingContext loggingContext);
 
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index d6685345652..5faa98914a7 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -24,8 +24,6 @@ public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buil
     public void SetDataSource(BuildCheckDataSource buildCheckDataSource) { }
     public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData) { }
 
-    public Dictionary<string, TimeSpan> CreateTracingStats() => throw new NotImplementedException();
-
     public void FinalizeProcessing(LoggingContext loggingContext)
     { }
 
@@ -47,4 +45,7 @@ public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventCo
 
     public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
     { }
+
+    public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => throw new NotImplementedException();
+    public Dictionary<string, TimeSpan> CreateBuildCopInfraTracingStats() => throw new NotImplementedException();
 }
diff --git a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
index 614a1711a77..46d8675ae3d 100644
--- a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
+++ b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
@@ -14,6 +14,11 @@ internal class TracingReporter
     internal const string INFRA_STAT_NAME = "Infrastructure";
     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();
 
+    // Infrastructure time keepers, examples for now
+    internal TimeSpan analyzerAcquisitionTime;
+    internal long analyzerSetDataSourceTime;
+    internal long newProjectAnalyzersTime;
+
     public void AddStats(string name, TimeSpan subtotal)
     {
         if (TracingStats.TryGetValue(name, out TimeSpan existing))
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 106754be327..81c8fa174ad 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -20,6 +20,8 @@ public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> trac
     internal BuildCheckTracingEventArgs() : this(new Dictionary<string, TimeSpan>())
     { }
 
+    internal bool isInfraTracing = false;
+
     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;
 
     internal override void WriteToStream(BinaryWriter writer)
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index 6ffae8dfb52..30866dd1c2d 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1186,6 +1186,7 @@ public void InvalidToolsVersionErrors()
                                         lowPriority: false,
                                         question: false,
                                         isBuildCheckEnabled: false,
+                                        isBuildCheckEnabled: false,
                                         inputResultsCaches: null,
                                         outputResultsCache: null,
                                         saveProjectResult: false,
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index d85b33302ed..80ec80e41ec 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -100,6 +100,7 @@ internal enum ParameterizedSwitch
             WarningsAsMessages,
             BinaryLogger,
             Analyze,
+            AnalyzeStats,
             Restore,
             ProfileEvaluation,
             RestoreProperty,
@@ -269,6 +270,7 @@ internal ParameterizedSwitchInfo(
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "analyze", "al" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),
+            new ParameterizedSwitchInfo(  new string[] { "analyzeStats", "as" },                ParameterizedSwitch.AnalyzeStats,               null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false),
             new ParameterizedSwitchInfo(  new string[] { "profileevaluation", "prof" },         ParameterizedSwitch.ProfileEvaluation,          null,                           false,          "MissingProfileParameterError",        true,   false),
             new ParameterizedSwitchInfo(  new string[] { "restoreproperty", "rp" },             ParameterizedSwitch.RestoreProperty,            null,                           true,           "MissingPropertyError",                true,   false),
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index ac9c638e003..9608c3bc1ca 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -718,6 +718,7 @@ public static ExitType Execute(
                 string outputResultsCache = null;
                 bool question = false;
                 bool isBuildCheckEnabled = false;
+                bool areBuildCheckStatsEnabled = false;
                 string[] getProperty = Array.Empty<string>();
                 string[] getItem = Array.Empty<string>();
                 string[] getTargetResult = Array.Empty<string>();
@@ -766,6 +767,7 @@ public static ExitType Execute(
                                             ref lowPriority,
                                             ref question,
                                             ref isBuildCheckEnabled,
+                                            ref areBuildCheckStatsEnabled,
                                             ref getProperty,
                                             ref getItem,
                                             ref getTargetResult,
@@ -869,6 +871,7 @@ public static ExitType Execute(
                                     lowPriority,
                                     question,
                                     isBuildCheckEnabled,
+                                    areBuildCheckStatsEnabled,
                                     inputResultsCaches,
                                     outputResultsCache,
                                     saveProjectResult: outputPropertiesItemsOrTargetResults,
@@ -1256,6 +1259,7 @@ internal static bool BuildProject(
             bool lowPriority,
             bool question,
             bool isBuildCheckEnabled,
+            bool areBuildCheckStatsEnabled,
             string[] inputResultsCaches,
             string outputResultsCache,
             bool saveProjectResult,
@@ -1457,7 +1461,9 @@ internal static bool BuildProject(
                     parameters.InputResultsCacheFiles = inputResultsCaches;
                     parameters.OutputResultsCacheFile = outputResultsCache;
                     parameters.Question = question;
+
                     parameters.IsBuildCheckEnabled = isBuildCheckEnabled;
+                    parameters.AreBuildCheckStatsEnabled = areBuildCheckStatsEnabled;
 #if FEATURE_REPORTFILEACCESSES
                     parameters.ReportFileAccesses = reportFileAccesses;
 #endif
@@ -2433,6 +2439,7 @@ private static bool ProcessCommandLineSwitches(
             ref bool lowPriority,
             ref bool question,
             ref bool isBuildCheckEnabled,
+            ref bool areBuildCheckStatsEnabled,
             ref string[] getProperty,
             ref string[] getItem,
             ref string[] getTargetResult,
@@ -2564,6 +2571,7 @@ private static bool ProcessCommandLineSwitches(
                                                            ref lowPriority,
                                                            ref question,
                                                            ref isBuildCheckEnabled,
+                                                           ref areBuildCheckStatsEnabled
                                                            ref getProperty,
                                                            ref getItem,
                                                            ref getTargetResult,
@@ -2650,6 +2658,7 @@ private static bool ProcessCommandLineSwitches(
                     question = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Question);
 
                     isBuildCheckEnabled = IsBuildCheckEnabled(commandLineSwitches);
+                    areBuildCopStatsEnabled = AreBuildCheckStatsEnabled(commandLineSwitches);
 
                     inputResultsCaches = ProcessInputResultsCaches(commandLineSwitches);
 
@@ -2730,6 +2739,12 @@ private static bool IsBuildCheckEnabled(CommandLineSwitches commandLineSwitches)
             return isAnalysisEnabled;
         }
 
+        private static bool AreBuildCopStatsEnabled(CommandLineSwitches commandLineSwitches)
+        {
+            return commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Analyze) &&
+                commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.AnalyzeStats);
+        }
+
         private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches commandLineSwitches, out string aggregatedParameters)
         {
             aggregatedParameters = AggregateParameters(commandLineSwitches);
