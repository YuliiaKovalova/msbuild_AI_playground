diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 40402c16c48..6b35371358a 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -30,7 +30,7 @@ public class ProjectGraphTests : IDisposable
                                                                         <InnerBuildPropertyValues>InnerBuildProperties</InnerBuildPropertyValues>
                                                                         <InnerBuildProperties>a;b</InnerBuildProperties>
                                                                      </PropertyGroup>";
-        private static readonly string ProjectReferenceTargetsWithCrosstargeting = @"<ItemGroup>
+        private static readonly string ProjectReferenceTargetsWithMultitargeting = @"<ItemGroup>
                                                                                         <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
                                                                                         <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
                                                                                         <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
@@ -38,7 +38,7 @@ public class ProjectGraphTests : IDisposable
         private static string[] NonOuterBuildTargets = {"AHelperOuter", "AHelperInner", "A"};
         private static string[] OuterBuildTargets = {"AHelperOuter"};
 
-        private static readonly string OuterBuildSpecificationWithProjectReferenceTargets = OuterBuildSpecification + ProjectReferenceTargetsWithCrosstargeting;
+        private static readonly string OuterBuildSpecificationWithProjectReferenceTargets = OuterBuildSpecification + ProjectReferenceTargetsWithMultitargeting;
 
         public ProjectGraphTests(ITestOutputHelper outputHelper)
         {
@@ -656,11 +656,11 @@ public void GetTargetsListsShouldApplyDefaultTargetsOnlyToGraphRoots()
         }
 
         [Fact]
-        public void GetTargetListsUsesAllTargetsForNonCrosstargetingNodes()
+        public void GetTargetListsUsesAllTargetsForNonMultitargetingNodes()
         {
             using (var env = TestEnvironment.Create())
             {
-                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithCrosstargeting).Path;
+                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithMultitargeting).Path;
                 CreateProjectFile(env, 2);
                 
                 var projectGraph = new ProjectGraph(root1);
@@ -724,7 +724,7 @@ public void GetTargetListsFiltersTargetsForOuterAndInnerBuilds()
         {
             using (var env = TestEnvironment.Create())
             {
-                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithCrosstargeting).Path;
+                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithMultitargeting).Path;
                 CreateProjectFile(env, 2, null, null, null, OuterBuildSpecificationWithProjectReferenceTargets);
                 
                 var projectGraph = new ProjectGraph(root1);
@@ -752,7 +752,7 @@ public void GetTargetListsFiltersTargetsForOuterAndInnerBuilds()
         }
 
         [Fact]
-        public void GetTargetListsForComplexCrosstargetingGraph()
+        public void GetTargetListsForComplexMultitargetingGraph()
         {
             using (var env = TestEnvironment.Create())
             {
@@ -778,7 +778,7 @@ public void GetTargetListsForComplexCrosstargetingGraph()
                     null,
                     null,
                     null,
-                    ProjectReferenceTargetsWithCrosstargeting +
+                    ProjectReferenceTargetsWithMultitargeting +
                     $@"<ItemGroup>
                             <ProjectReference Include=`1.proj` Properties=`{InnerBuildProperty}=b`/>
                             <ProjectReference Include=`4.proj`/>
@@ -800,7 +800,7 @@ public void GetTargetListsForComplexCrosstargetingGraph()
                     new []{6},
                     null,
                     null,
-                    ProjectReferenceTargetsWithCrosstargeting);
+                    ProjectReferenceTargetsWithMultitargeting);
 
                 CreateProjectFile(
                     env,
@@ -837,16 +837,16 @@ public void GetTargetListsForComplexCrosstargetingGraph()
 
                 targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
 
-                AssertCrossTargetingNode(1, projectGraph, targetLists, new []{"A"}, NonOuterBuildTargets);
-                AssertCrossTargetingNode(3, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
-                AssertCrossTargetingNode(6, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
+                AssertMultitargetingNode(1, projectGraph, targetLists, new []{"A"}, NonOuterBuildTargets);
+                AssertMultitargetingNode(3, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
+                AssertMultitargetingNode(6, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
 
                 targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBe(new []{"A"});
                 targetLists[GetFirstNodeWithProjectNumber(projectGraph, 4)].ShouldBe(NonOuterBuildTargets);
                 targetLists[GetFirstNodeWithProjectNumber(projectGraph, 5)].ShouldBe(NonOuterBuildTargets);
             }
 
-            void AssertCrossTargetingNode(int projectNumber, ProjectGraph projectGraph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists, string[] outerBuildTargets, string[] nonOuterBuildTargets)
+            void AssertMultitargetingNode(int projectNumber, ProjectGraph projectGraph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists, string[] outerBuildTargets, string[] nonOuterBuildTargets)
             {
                 targetLists[GetNodesWithProjectNumber(projectGraph, projectNumber).First(IsOuterBuild)].ShouldBe(outerBuildTargets);
 
@@ -1184,16 +1184,16 @@ private static bool IsInnerBuild(ProjectGraphNode project)
             return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.InnerBuild;
         }
 
-        private static bool IsNotCrossTargeting(ProjectGraphNode project)
+        private static bool IsNotMultitargeting(ProjectGraphNode project)
         {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonCrossTargeting;
+            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonMultitargeting;
         }
 
-        private static void AssertNonCrossTargetingNode(ProjectGraphNode node, Dictionary<string, string> additionalGlobalProperties = null)
+        private static void AssertNonMultitargetingNode(ProjectGraphNode node, Dictionary<string, string> additionalGlobalProperties = null)
         {
             additionalGlobalProperties = additionalGlobalProperties ?? new Dictionary<string, string>();
 
-            IsNotCrossTargeting(node).ShouldBeTrue();
+            IsNotMultitargeting(node).ShouldBeTrue();
             node.ProjectInstance.GlobalProperties.ShouldBeEquivalentTo(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
             node.ProjectInstance.GetProperty(InnerBuildProperty).ShouldBeNull();
         }
@@ -1249,7 +1249,7 @@ public void OuterBuildAsRootShouldDirectlyReferenceInnerBuilds()
         }
 
         [Fact]
-        public void ReferenceOfCrosstargetingProjectShouldNotInheritInnerBuildSpecificGlobalProperties()
+        public void ReferenceOfMultitargetingProjectShouldNotInheritInnerBuildSpecificGlobalProperties()
         {
             var root = CreateProjectFile(_env, 1, new[] {2}, null, null, OuterBuildSpecification).Path;
             CreateProjectFile(_env, 2);
@@ -1262,9 +1262,9 @@ public void ReferenceOfCrosstargetingProjectShouldNotInheritInnerBuildSpecificGl
 
             AssertOuterBuildAsRoot(graph.GraphRoots.First());
 
-            var nonCrosstargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
+            var nonMultitargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
 
-            AssertNonCrossTargetingNode(nonCrosstargetingNode);
+            AssertNonMultitargetingNode(nonMultitargetingNode);
         }
 
         [Fact]
@@ -1290,9 +1290,9 @@ public void InnerBuildAsRootViaLocalPropertyShouldNotPropagateInnerBuildProperty
 
             AssertInnerBuildEvaluation(graph.GraphRoots.First(), false, new Dictionary<string, string>());
 
-            var nonCrosstargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
+            var nonMultitargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
 
-            AssertNonCrossTargetingNode(nonCrosstargetingNode);
+            AssertNonMultitargetingNode(nonMultitargetingNode);
         }
 
         [Fact]
@@ -1309,9 +1309,9 @@ public void InnerBuildAsRootViaGlobalPropertyShouldNotPropagateInnerBuildPropert
 
             AssertInnerBuildEvaluation(graph.GraphRoots.First(), true, new Dictionary<string, string>());
 
-            var nonCrosstargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
+            var nonMultitargetingNode = GetFirstNodeWithProjectNumber(graph, 2);
 
-            AssertNonCrossTargetingNode(nonCrosstargetingNode);
+            AssertNonMultitargetingNode(nonMultitargetingNode);
         }
 
         [Fact]
@@ -1331,8 +1331,8 @@ public void NonOuterBuildProjectsInTheMiddle()
             AssertOuterBuildAsRoot(graph.GraphRoots.First());
             AssertOuterBuildAsNonRoot(GetNodesWithProjectNumber(graph, 4).First(IsOuterBuild));
 
-            AssertNonCrossTargetingNode(GetFirstNodeWithProjectNumber(graph, 2));
-            AssertNonCrossTargetingNode(GetFirstNodeWithProjectNumber(graph, 3));
+            AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 2));
+            AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 3));
         }
 
         [Fact]
@@ -1359,8 +1359,8 @@ public void InnerBuildsCanHaveSeparateReferences()
             AssertOuterBuildAsNonRoot(GetNodesWithProjectNumber(graph, 2).First(IsOuterBuild));
             AssertOuterBuildAsNonRoot(GetNodesWithProjectNumber(graph, 4).First(IsOuterBuild));
 
-            AssertNonCrossTargetingNode(GetFirstNodeWithProjectNumber(graph, 3));
-            AssertNonCrossTargetingNode(GetFirstNodeWithProjectNumber(graph, 5));
+            AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 3));
+            AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 5));
 
             var innerBuildWithCommonReferences = GetNodesWithProjectNumber(graph, 1).First(n => n.ProjectInstance.GlobalProperties[InnerBuildProperty] == "a");
 
@@ -1398,7 +1398,7 @@ public void InnerBuildProducedByOuterBuildCanBeReferencedByAnotherNode()
             var outerBuild = graph.GraphRoots.First(IsOuterBuild);
 
             AssertOuterBuildAsRoot(outerBuild, additionalGlobalProperties);
-            AssertNonCrossTargetingNode(GetFirstNodeWithProjectNumber(graph, 2), additionalGlobalProperties);
+            AssertNonMultitargetingNode(GetFirstNodeWithProjectNumber(graph, 2), additionalGlobalProperties);
 
             var referencedInnerBuild = GetNodesWithProjectNumber(graph, 1).First(n => n.ProjectInstance.GetPropertyValue(InnerBuildProperty) == "a");
 
@@ -1430,7 +1430,7 @@ public void InnerBuildCanBeReferencedWithoutItsOuterBuild()
             graph.ProjectNodes.Count.ShouldBe(3);
 
             var rootNode = graph.GraphRoots.First();
-            AssertNonCrossTargetingNode(rootNode, additionalGlobalProperties);
+            AssertNonMultitargetingNode(rootNode, additionalGlobalProperties);
 
             rootNode.ProjectReferences.ShouldHaveSingleItem();
             var innerBuildNode = rootNode.ProjectReferences.First();
@@ -1438,7 +1438,7 @@ public void InnerBuildCanBeReferencedWithoutItsOuterBuild()
             AssertInnerBuildEvaluation(innerBuildNode, false, additionalGlobalProperties);
 
             innerBuildNode.ProjectReferences.ShouldHaveSingleItem();
-            AssertNonCrossTargetingNode(innerBuildNode.ProjectReferences.First(), additionalGlobalProperties);
+            AssertNonMultitargetingNode(innerBuildNode.ProjectReferences.First(), additionalGlobalProperties);
         }
 
         public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyData
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index ffe8c6942d2..ee08cbb06bc 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -34,11 +34,11 @@ private ProjectInterpretation()
         {
         }
 
-        private static readonly ImmutableList<GlobalPropertiesModifier> ModifierForNonCrosstargetingNodes = new[] {(GlobalPropertiesModifier) ProjectReferenceGlobalPropertiesModifier}.ToImmutableList();
+        private static readonly ImmutableList<GlobalPropertiesModifier> ModifierForNonMultitargetingNodes = new[] {(GlobalPropertiesModifier) ProjectReferenceGlobalPropertiesModifier}.ToImmutableList();
 
         internal enum ProjectType
         {
-            OuterBuild, InnerBuild, NonCrossTargeting
+            OuterBuild, InnerBuild, NonMultitargeting
         }
 
         public IEnumerable<ConfigurationMetadata> GetReferences(ProjectInstance requesterInstance)
@@ -52,11 +52,11 @@ public IEnumerable<ConfigurationMetadata> GetReferences(ProjectInstance requeste
                     references = GetInnerBuildReferences(requesterInstance);
                     break;
                 case ProjectType.InnerBuild:
-                    globalPropertiesModifiers = ModifierForNonCrosstargetingNodes.Add((parts, reference) => parts.AddPropertyToUndefine(GetInnerBuildPropertyName(requesterInstance)));
+                    globalPropertiesModifiers = ModifierForNonMultitargetingNodes.Add((parts, reference) => parts.AddPropertyToUndefine(GetInnerBuildPropertyName(requesterInstance)));
                     references = requesterInstance.GetItems(ItemTypeNames.ProjectReference);
                     break;
-                case ProjectType.NonCrossTargeting:
-                    globalPropertiesModifiers = ModifierForNonCrosstargetingNodes;
+                case ProjectType.NonMultitargeting:
+                    globalPropertiesModifiers = ModifierForNonMultitargetingNodes;
                     references = requesterInstance.GetItems(ItemTypeNames.ProjectReference);
                     break;
                 default:
@@ -112,7 +112,7 @@ internal static ProjectType GetProjectType(ProjectInstance project)
                 ? ProjectType.OuterBuild
                 : isInnerBuild
                     ? ProjectType.InnerBuild
-                    : ProjectType.NonCrossTargeting;
+                    : ProjectType.NonMultitargeting;
         }
 
         public static void PostProcess(ConcurrentDictionary<ConfigurationMetadata, ProjectGraphNode> allNodes)
@@ -376,7 +376,7 @@ public ImmutableList<string> GetApplicableTargets(ProjectInstance project)
                         return _allTargets;
                     case ProjectType.OuterBuild:
                         return _outerBuildTargets;
-                    case ProjectType.NonCrossTargeting:
+                    case ProjectType.NonMultitargeting:
                         return _allTargets;
                     default:
                         throw new ArgumentOutOfRangeException();
diff --git a/src/Tasks/Microsoft.ManagedLanguages.targets b/src/Tasks/Microsoft.ManagedLanguages.targets
index a9bea355b82..40a99aad66c 100644
--- a/src/Tasks/Microsoft.ManagedLanguages.targets
+++ b/src/Tasks/Microsoft.ManagedLanguages.targets
@@ -13,7 +13,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 <Project>
    <!-- 
         We are doing a cross-targeting build if there is a non-empty list of target frameworks specified
-        and there is no current target framework being built individually. In that case, a crosstargeting
+        and there is no current target framework being built individually. In that case, a multitargeting
         project file like Microsoft.<language>.CrossTargeting.targets gets imported.
    -->
    <PropertyGroup Condition="'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''">
