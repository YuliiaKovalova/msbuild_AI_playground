diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 6d4e977b3c4..1bdfe431e84 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -511,7 +511,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                 // Queue the project references for visitation, if the edge hasn't already been traversed.
                 foreach (var projectReference in node.ProjectReferences)
                 {
-                    var applicableTargets = targetsToPropagate.GetApplicableTargets(projectReference.ProjectInstance);
+                    var applicableTargets = targetsToPropagate.GetApplicableTargetsForReference(projectReference.ProjectInstance);
 
                     var projectReferenceEdge = new ProjectGraphBuildRequest(
                         projectReference,
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 9ec5024dda0..a0cfb38e942 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -329,12 +329,22 @@ private TargetsToPropagate(ImmutableList<string> outerBuildTargets, ImmutableLis
             {
                 _outerBuildTargets = outerBuildTargets;
 
-                // This is used as the list of entry targets for both inner builds and non-multitargeting projects
+                // This is used as the list of entry targets for both inner builds and non-multitargeting projects.
                 // It represents the concatenation of outer build targets and non outer build targets, in this order.
                 // Non-multitargeting projects use these targets because they act as both outer and inner builds.
                 _allTargets = outerBuildTargets.AddRange(nonOuterBuildTargets);
             }
 
+            /// <summary>
+            /// Given a project and a set of entry targets the project would get called with,
+            /// parse the project's project reference target specification and compute how the target would call its references.
+            ///
+            /// The calling code should then call <see cref="GetApplicableTargetsForReference"/> for each of the project's references
+            /// to get the concrete targets for each reference.
+            /// </summary>
+            /// <param name="project">Project containing the PRT protocol</param>
+            /// <param name="entryTargets">Targets with which <paramref name="project"/> will get called</param>
+            /// <returns></returns>
             public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance project, ImmutableList<string> entryTargets)
             {
                 var targetsForOuterBuild = ImmutableList.CreateBuilder<string>();
@@ -369,9 +379,9 @@ public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance proj
                 return new TargetsToPropagate(targetsForOuterBuild.ToImmutable(), targetsForInnerBuild.ToImmutable());
             }
 
-            public ImmutableList<string> GetApplicableTargets(ProjectInstance project)
+            public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance reference)
             {
-                switch (GetProjectType(project))
+                switch (GetProjectType(reference))
                 {
                     case ProjectType.InnerBuild:
                         return _allTargets;
