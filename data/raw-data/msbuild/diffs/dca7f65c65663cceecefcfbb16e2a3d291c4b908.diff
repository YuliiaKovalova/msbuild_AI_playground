diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index a77f9d5759e..c6816fc14ad 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -20,7 +20,7 @@
 using VerifyTests;
 using VerifyXunit;
 using Xunit;
-
+using Xunit.Abstractions;
 using static VerifyXunit.Verifier;
 
 #nullable disable
@@ -34,11 +34,15 @@ public class RoslynCodeTaskFactory_Tests
 
         private readonly VerifySettings _verifySettings;
 
-        public RoslynCodeTaskFactory_Tests()
+        private readonly ITestOutputHelper _testOutputHelper;
+
+        public RoslynCodeTaskFactory_Tests(ITestOutputHelper testOutputHelper)
         {
+            _testOutputHelper = testOutputHelper;
             UseProjectRelativeDirectory("TaskFactorySource");
 
             _verifySettings = new();
+            _verifySettings.UniqueForRuntime();
             _verifySettings.ScrubLinesContaining("Runtime Version:");
         }
 
@@ -76,6 +80,7 @@ public void InlineTaskWithAssemblyPlatformAgnostic()
 
 </Project>
 ");
+
                 string output = RunnerUtilities.ExecMSBuild(inlineTask.Path, out bool success);
                 success.ShouldBeTrue(output);
                 output.ShouldContain("Alpha.GetString");
@@ -102,8 +107,12 @@ public void InlineTaskWithAssembly()
                         <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
                     </Project>
 ");
+                
+                _testOutputHelper.WriteLine($"AssemblyProj: {assemblyProj.Path}, {assemblyProj.ToString()}");
                 TransientTestFile csFile = env.CreateFile(folder, "Class1.cs", @"
 using System;
+using System.Text.Json;
+using System.Memory;
 
 namespace _5106 {
     public class Class1 {
@@ -113,7 +122,7 @@ public static string ToPrint() {
     }
 }
 ");
-                string output = RunnerUtilities.ExecMSBuild(assemblyProj.Path + $" /p:OutDir={Path.Combine(folder.Path, "subFolder")} /restore", out bool success);
+                string output = RunnerUtilities.ExecMSBuild(assemblyProj.Path + $" /p:OutDir={Path.Combine(folder.Path, "subFolder")} /restore", out bool success, _testOutputHelper);
                 success.ShouldBeTrue(output);
 
                 TransientTestFile inlineTask = env.CreateFile(folder, "5106.proj", @$"
