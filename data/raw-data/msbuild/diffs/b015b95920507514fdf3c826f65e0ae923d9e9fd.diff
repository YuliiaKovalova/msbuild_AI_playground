diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 0a82f136835..ba0938b5711 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -72,12 +72,11 @@ private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ProjectL
             _projectLoadSettings = projectLoadSettings;
             SdkResolverService = sdkResolverService ?? new CachingSdkResolverService();
             FileEntryExpansionCache = fileEntryExpansionCache ?? new ConcurrentDictionary<string, IReadOnlyList<string>>();
-            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default, SkipExistenceCheck);
+            bool skipExistenceCheck = (_projectLoadSettings?.HasFlag(ProjectLoadSettings.IgnoreMissingImports) ?? false) && Traits.Instance.SkipExistenceCheckForCache;
+            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default, skipExistenceCheck);
             FileMatcher = new FileMatcher(FileSystem, FileEntryExpansionCache);
         }
 
-        private bool SkipExistenceCheck => (_projectLoadSettings?.HasFlag(ProjectLoadSettings.IgnoreMissingImports) ?? false) && Traits.Instance.SkipExistenceCheckForCache;
-
         /// <summary>
         ///     Factory for <see cref="EvaluationContext" />
         /// </summary>
diff --git a/src/Shared/FileSystem/CachingFileSystemWrapper.cs b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
index e86a420d0c7..d9869be9f03 100644
--- a/src/Shared/FileSystem/CachingFileSystemWrapper.cs
+++ b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Shared.FileSystem
     internal sealed class CachingFileSystemWrapper : IFileSystem
     {
         private readonly IFileSystem _fileSystem;
-        private readonly ConcurrentDictionary<string, bool> _existenceCache = new ConcurrentDictionary<string, bool>();
+        private readonly ConcurrentDictionary<string, bool> _existenceCache = null;
         private readonly ConcurrentDictionary<string, DateTime> _lastWriteTimeCache = new ConcurrentDictionary<string, DateTime>();
         private readonly bool _skipExistenceCheck = false;
 
@@ -26,6 +26,10 @@ public CachingFileSystemWrapper(IFileSystem fileSystem, bool skipExistenceCheck
         {
             _fileSystem = fileSystem;
             _skipExistenceCheck = skipExistenceCheck;
+            if (!_skipExistenceCheck)
+            {
+                _existenceCache = new ConcurrentDictionary<string, bool>();
+            }
         }
 
         public bool FileOrDirectoryExists(string path)
@@ -92,11 +96,10 @@ private bool CachedExistenceCheck(string path, Func<string, bool> existenceCheck
         {
             if (_skipExistenceCheck)
             {
-                _existenceCache[path] = true;
                 return true;
             }
 
-            return _existenceCache.GetOrAdd(path, existenceCheck);
+            return _existenceCache != null && _existenceCache.GetOrAdd(path, existenceCheck);
         }
     }
 }
