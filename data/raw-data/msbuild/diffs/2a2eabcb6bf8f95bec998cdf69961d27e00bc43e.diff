diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 2daa78b9811..8099748fc33 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -1138,6 +1138,70 @@ public override bool Execute()
             }
         }
 
+        [Fact]
+        public void EmbedsSourceFileInBinlogWhenFailsToCompile()
+        {
+            string sourceFileContentThatFailsToCompile = @"
+                    namespace Microsoft.Build.NonShippingTasks
+                    {
+                        public class LogNameValue_ClassSourcesTest : Task
+                        {
+                            private string 
+";
+
+            string tempFileDirectory = Path.GetTempPath();
+            string tempFileName = Guid.NewGuid().ToString() + ".cs";
+            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);
+            File.WriteAllText(tempSourceFile, sourceFileContentThatFailsToCompile);
+
+            try
+            {
+                string projectFileContents = @"
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
+                        <UsingTask TaskName=`LogNameValue_ClassSourcesTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
+                        <ParameterGroup>
+                            <Name ParameterType='System.String' />
+                            <Value ParameterType='System.String' />
+                        </ParameterGroup>
+                        <Task>
+                            <Code Source='" + tempSourceFile + @"'/>
+                         </Task>
+                         </UsingTask>
+                        <Target Name=`Build`>
+                            <LogNameValue_ClassSourcesTest Name='MyName' Value='MyValue'/>
+                        </Target>
+                    </Project>";
+
+                string binaryLogFile = Path.Combine(tempFileDirectory, "output.binlog");
+                var binaryLogger = new BinaryLogger()
+                {
+                    Parameters = $"LogFile={binaryLogFile}",
+                    CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
+                };
+
+                Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result);
+
+                result.ShouldBeFalse();
+
+                string projectImportsZipPath = Path.ChangeExtension(binaryLogFile, ".ProjectImports.zip");
+                using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
+                using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
+
+                // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
+                // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
+                zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith(tempFileName),
+                    "");
+            }
+            finally
+            {
+                if (File.Exists(tempSourceFile))
+                {
+                    File.Delete(tempSourceFile);
+                }
+            }
+        }
+
+
         /// <summary>
         /// Code factory test where the TMP directory does not exist.
         /// See https://github.com/dotnet/msbuild/issues/328 for details.
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 6eb36ffc24d..0d99a48c964 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -688,7 +688,6 @@ public override bool Execute()
                 </Project>
                 """);
 
-
             string binLogFile = Path.Combine(folder.Path, "log.binlog");
             string output = RunnerUtilities.ExecMSBuild($"{assemblyProj.Path} /t:{targetName} /bl:\"LogFile={binLogFile};ProjectImports=ZipFile\"", out bool success);
 
@@ -704,6 +703,65 @@ public override bool Execute()
                 "");
         }
 
+        [Fact]
+        public void EmbedsSourceFileInBinlogWhenFailsToCompile()
+        {
+            string taskName = "HelloTask";
+            string csprojFileName = "EmbedsSourceFileInTheBinlogTest.csproj";
+            string targetName = "SayHello";
+
+            var env = TestEnvironment.Create();
+            TransientTestFolder folder = env.CreateFolder(createFolder: true);
+            TransientTestFile classThatFailsToCompile = env.CreateFile(folder, $"{taskName}.cs", $$"""
+                namespace InlineTask
+                {
+                    using Microsoft.Build.Utilities
+
+                    public class {{taskName}} : Task
+                    {
+                        public override bool Execute()
+                        {
+                            Log.LogMessage("Hello, world!")
+                            return !Log.HasLoggedErrors
+                        }
+                    }
+                }
+                """);
+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $"""
+                <Project>
+
+                  <UsingTask
+                    TaskName="{taskName}"
+                    TaskFactory="RoslynCodeTaskFactory"
+                    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
+                    <Task>
+                      <Code Type="Class" Language="cs" Source="{classThatFailsToCompile.Path}">
+                      </Code>
+                    </Task>
+                  </UsingTask>
+
+                    <Target Name="{targetName}">
+                        <{taskName} />
+                    </Target>
+
+                </Project>
+                """);
+
+            string binLogFile = Path.Combine(folder.Path, "log.binlog");
+            string output = RunnerUtilities.ExecMSBuild($"{assemblyProj.Path} /t:{targetName} /bl:\"LogFile={binLogFile};ProjectImports=ZipFile\"", out bool success);
+
+            success.ShouldBeFalse();
+
+            string projectImportsZipPath = Path.ChangeExtension(binLogFile, ".ProjectImports.zip");
+            using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);
+            using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);
+
+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
+            zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith($"{taskName}.cs"),
+                "");
+        }
+
 #if !FEATURE_RUN_EXE_IN_TESTS
         [Fact]
         public void RoslynCodeTaskFactory_UsingAPI()
