diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.md b/.github/ISSUE_TEMPLATE/01_bugreport.md
index 58a8cb2c372..213ab15269b 100644
--- a/.github/ISSUE_TEMPLATE/01_bugreport.md
+++ b/.github/ISSUE_TEMPLATE/01_bugreport.md
@@ -20,6 +20,12 @@ labels: bug, needs-triage
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Expected Behavior
@@ -46,13 +52,3 @@ labels: bug, needs-triage
 * Post any other relevant configuration settings here.
 *   OS, architecture, etc.
 -->
-
-### Attach a binlog
-<!--
-* If providing us a project that reproduces the issue proves difficult, consider including a binlog.
-* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.
-* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.
-    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.
-
-*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.md b/.github/ISSUE_TEMPLATE/02_performanceissue.md
index 69ac8410706..d1e93dc9ea5 100644
--- a/.github/ISSUE_TEMPLATE/02_performanceissue.md
+++ b/.github/ISSUE_TEMPLATE/02_performanceissue.md
@@ -20,6 +20,12 @@ Include as much of the following if possible:
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Data
@@ -57,13 +63,3 @@ Post any other relevant configuration settings here.
 *   What version of MSBuild or VS were you using before the regression?
 *   What version of MSBuild or VS are you on now that you discovered the regression?
 -->
-
-### Attach a binlog
-<!--
-* If providing us a project that reproduces the issue proves difficult, consider including a binlog.
-* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.
-* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.
-    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.
-
-*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.
--->
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
index a873a40f1e4..b6980de5753 100644
--- a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
+++ b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
@@ -28,6 +28,12 @@ labels: needs-triage
 * Your zipped project.
 * IDE / CLI steps to create the project and reproduce the behaviour.
 * Your command line invocation
+
+If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
+[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
+[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
+NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
+If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
 -->
 
 ### Expected Behavior
diff --git a/.github/ISSUE_TEMPLATE/05_unhandledexception.md b/.github/ISSUE_TEMPLATE/05_unhandledexception.md
new file mode 100644
index 00000000000..5d488251fb1
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE/05_unhandledexception.md
@@ -0,0 +1,34 @@
+---
+name: 😱 Unhandled Exception
+about: Reporting holes in our bug reporting system
+title: ''
+labels: bug
+---
+
+<!-- This is a template that helps us provide quicker feedback.
+Use any relevant sections and delete what you don't need. -->
+
+### Issue Description
+<!--
+Include a stack trace if possible.
+If you do not see one, try looking in your temp folder for the most recently created file named
+MSBuild_pid-{pid}_{guid}.failure.txt
+-->
+
+### Steps to Reproduce
+<!--
+* Include as many of these as possible:
+* A minimal sample project that reproduces the issue
+* IDE or CLI steps that create the project and reproduce the issue
+* Your command line invocation
+-->
+
+### Analysis
+<!-- If you think you know what the problem is, please include that here. -->
+
+### System Configuration
+<!--
+What version of MSBuild are you using? (`msbuild --version` from a developer command prompt)
+What version of the tool invoking MSBuild are you using? (`dotnet --version`, accessing it from the Visual Studio Installer, etc.)
+OS version (or at least Windows/Mac/Linux), architecture, etc.
+-->
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index e902f62318d..bdbfe5b0367 100644
--- a/.gitignore
+++ b/.gitignore
@@ -31,7 +31,6 @@ artifacts/
 *.pdb
 *.pgc
 *.pgd
-*.rsp
 *.sbr
 *.tlb
 *.tli
@@ -136,12 +135,6 @@ csx/
 # Windows Store app package directory
 AppPackages/
 
-# Visual Studio cache files
-# files ending in .cache can be ignored
-*.[Cc]ache
-# but keep track of directories ending in .cache
-!*.[Cc]ache/
-
 # Others
 ClientBin/
 [Ss]tyle[Cc]op.*
@@ -220,5 +213,5 @@ Samples/MultiprocessBuild/PortableTask.dll
 stage1/
 .tools
 
-# ETL traces    
-*.etl.zip
\ No newline at end of file
+# ETL traces
+*.etl.zip
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index c6ed508dfc8..145b6b67a88 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -100,7 +100,7 @@ stages:
       displayName: 'Install OptProf Plugin'
 
     # Required by MicroBuildBuildVSBootstrapper
-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1
+    - task: MicroBuildSwixPlugin@4
       inputs:
         dropName: $(VisualStudio.DropName)
 
@@ -125,6 +125,9 @@ stages:
       displayName: Build
       condition: succeeded()
 
+    # Required by Microsoft policy
+    - template: eng\common\templates\steps\generate-sbom.yml
+
     # Publish OptProf configuration files
     - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0
       inputs:
@@ -138,7 +141,7 @@ stages:
 
     # Build VS bootstrapper
     # Generates $(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json
-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2
+    - task: MicroBuildBuildVSBootstrapper@2
       inputs:
         vsMajorVersion: $(VisualStudio.MajorVersion)
         channelName: $(VisualStudio.ChannelName)
@@ -253,7 +256,7 @@ stages:
         - Windows_NT
         - Source_Build_Managed
       pool:
-        vmImage: vs2017-win2016
+        vmImage: windows-latest
 
 - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
   - template: eng\common\templates\post-build\post-build.yml
diff --git a/MSBuild.lutconfig b/MSBuild.lutconfig
new file mode 100644
index 00000000000..35293b3ca5e
--- /dev/null
+++ b/MSBuild.lutconfig
@@ -0,0 +1,7 @@
+<LUTConfig Version="1.0">
+  <Repository />
+  <ParallelBuilds>true</ParallelBuilds>
+  <ParallelTestRuns>true</ParallelTestRuns>
+  <EnablePdbs>true</EnablePdbs>
+  <TestCaseTimeout>180000</TestCaseTimeout>
+</LUTConfig>
diff --git a/MSBuild.sln b/MSBuild.sln
index eaedd997db8..cb3f5c85d02 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -78,918 +78,1263 @@ EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
+		Debug|ARM64 = Debug|ARM64
 		Debug|x64 = Debug|x64
 		Debug|x86 = Debug|x86
 		Debug-MONO|Any CPU = Debug-MONO|Any CPU
+		Debug-MONO|ARM64 = Debug-MONO|ARM64
 		Debug-MONO|x64 = Debug-MONO|x64
 		Debug-MONO|x86 = Debug-MONO|x86
 		MachineIndependent|Any CPU = MachineIndependent|Any CPU
+		MachineIndependent|ARM64 = MachineIndependent|ARM64
 		MachineIndependent|x64 = MachineIndependent|x64
 		MachineIndependent|x86 = MachineIndependent|x86
 		Release|Any CPU = Release|Any CPU
+		Release|ARM64 = Release|ARM64
 		Release|x64 = Release|x64
 		Release|x86 = Release|x86
 		Release-MONO|Any CPU = Release-MONO|Any CPU
+		Release-MONO|ARM64 = Release-MONO|ARM64
 		Release-MONO|x64 = Release-MONO|x64
 		Release-MONO|x86 = Release-MONO|x86
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x64.ActiveCfg = Debug|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x64.Build.0 = Debug|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug|x86.Build.0 = Debug|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|Any CPU.Build.0 = Release|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|ARM64.Build.0 = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x64.ActiveCfg = Release|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x64.Build.0 = Release|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.ActiveCfg = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release|x86.Build.0 = Release|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{69BE05E2-CBDA-4D27-9733-44E12B0F5627}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x64.ActiveCfg = Debug|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x64.Build.0 = Debug|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug|x86.Build.0 = Debug|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|Any CPU.Build.0 = Release|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|ARM64.Build.0 = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x64.ActiveCfg = Release|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x64.Build.0 = Release|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.ActiveCfg = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release|x86.Build.0 = Release|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{5C53E4FD-0985-432D-B9E4-7BC354A057E5}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x64.ActiveCfg = Debug|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x64.Build.0 = Debug|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug|x86.Build.0 = Debug|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|ARM64.Build.0 = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x64.ActiveCfg = Release|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x64.Build.0 = Release|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.ActiveCfg = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release|x86.Build.0 = Release|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{774DCE9B-F775-4B6D-943D-C841F755DBDE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x64.ActiveCfg = Debug|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x64.Build.0 = Debug|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug|x86.Build.0 = Debug|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|Any CPU.Build.0 = Release|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|ARM64.Build.0 = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x64.ActiveCfg = Release|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x64.Build.0 = Release|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.ActiveCfg = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release|x86.Build.0 = Release|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{69C7E5AF-5D29-42B3-BA76-F7C4F0EDF251}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x64.ActiveCfg = Debug|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x64.Build.0 = Debug|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug|x86.Build.0 = Debug|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|ARM64.Build.0 = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x64.ActiveCfg = Release|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x64.Build.0 = Release|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.ActiveCfg = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release|x86.Build.0 = Release|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{C400412A-E7BD-4B8D-B6F5-B2135C481A4E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|ARM64.ActiveCfg = Debug|ARM64
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|ARM64.Build.0 = Debug|ARM64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x64.ActiveCfg = Debug|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x64.Build.0 = Debug|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug|x86.Build.0 = Debug|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|Any CPU.Build.0 = Release|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|ARM64.Build.0 = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x64.ActiveCfg = Release|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x64.Build.0 = Release|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.ActiveCfg = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release|x86.Build.0 = Release|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{6F92CA55-1D15-4F34-B1FE-56C0B7EB455E}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x64.ActiveCfg = Debug|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x64.Build.0 = Debug|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug|x86.Build.0 = Debug|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|Any CPU.Build.0 = Release|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|ARM64.Build.0 = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x64.ActiveCfg = Release|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x64.Build.0 = Release|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.ActiveCfg = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release|x86.Build.0 = Release|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{0ADDBC02-0076-4159-B351-2BF33FAA46B2}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x64.ActiveCfg = Debug|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x64.Build.0 = Debug|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug|x86.Build.0 = Debug|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|ARM64.Build.0 = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x64.ActiveCfg = Release|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x64.Build.0 = Release|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.ActiveCfg = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release|x86.Build.0 = Release|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{2AB5D52E-3C4D-4572-B140-9EED600ECE59}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x64.ActiveCfg = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x64.Build.0 = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug|x86.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x64.Build.0 = Debug|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|ARM64.Build.0 = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x64.ActiveCfg = Release|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x64.Build.0 = Release|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.ActiveCfg = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release|x86.Build.0 = Release|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{CF999BDE-02B3-431B-95E6-E88D621D9CBF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x64.ActiveCfg = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x64.Build.0 = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug|x86.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x64.Build.0 = Debug|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|Any CPU.Build.0 = Release|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|ARM64.Build.0 = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x64.ActiveCfg = Release|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x64.Build.0 = Release|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.ActiveCfg = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release|x86.Build.0 = Release|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{C51C04F6-D35B-4211-B0F2-9D69F63AC0BC}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x64.ActiveCfg = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x64.Build.0 = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug|x86.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x64.Build.0 = Debug|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|Any CPU.Build.0 = Release|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|ARM64.Build.0 = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x64.ActiveCfg = Release|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x64.Build.0 = Release|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.ActiveCfg = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release|x86.Build.0 = Release|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{EEFE7E34-B3C6-473E-9F4D-4D64DB63F0C4}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x64.ActiveCfg = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x64.Build.0 = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug|x86.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x64.Build.0 = Debug|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|ARM64.Build.0 = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x64.ActiveCfg = Release|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x64.Build.0 = Release|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.ActiveCfg = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release|x86.Build.0 = Release|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{66C6C1ED-30E7-45DD-9F73-2FBB7889CDBA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x64.ActiveCfg = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x64.Build.0 = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug|x86.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x64.Build.0 = Debug|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|ARM64.Build.0 = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x64.ActiveCfg = Release|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x64.Build.0 = Release|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.ActiveCfg = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release|x86.Build.0 = Release|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F1A7AA75-72EE-44FE-8493-7FD99F6F42B0}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x64.ActiveCfg = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x64.Build.0 = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug|x86.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x64.Build.0 = Debug|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|ARM64.Build.0 = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x64.ActiveCfg = Release|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x64.Build.0 = Release|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.ActiveCfg = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release|x86.Build.0 = Release|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{77849E6E-FE6B-43BA-A48D-EF75BD2279F8}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x64.ActiveCfg = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x64.Build.0 = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug|x86.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x64.Build.0 = Debug|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|Any CPU.Build.0 = Release|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|ARM64.Build.0 = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x64.ActiveCfg = Release|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x64.Build.0 = Release|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.ActiveCfg = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release|x86.Build.0 = Release|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{2D515229-D44B-4625-A1B2-ED88153D0ECF}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x64.ActiveCfg = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x64.Build.0 = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug|x86.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x64.Build.0 = Debug|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release|ARM64.Build.0 = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x64.ActiveCfg = Release|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x64.Build.0 = Release|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.ActiveCfg = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release|x86.Build.0 = Release|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F45DBA88-C833-434A-8F68-087124540303}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x64.ActiveCfg = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x64.Build.0 = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug|x86.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x64.Build.0 = Debug|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|Any CPU.Build.0 = Release|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|ARM64.Build.0 = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x64.ActiveCfg = Release|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x64.Build.0 = Release|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.ActiveCfg = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release|x86.Build.0 = Release|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{523E1555-DB60-4FD4-8CDF-3C159710CAED}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x64.ActiveCfg = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x64.Build.0 = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug|x86.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x64.Build.0 = Debug|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|Any CPU.Build.0 = Release|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|ARM64.Build.0 = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x64.ActiveCfg = Release|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x64.Build.0 = Release|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.ActiveCfg = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release|x86.Build.0 = Release|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{475DDCAC-12F6-4562-A74B-FB64F11100EE}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x64.ActiveCfg = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x64.Build.0 = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug|x86.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x64.Build.0 = Debug|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|Any CPU.Build.0 = Release|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|ARM64.Build.0 = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x64.ActiveCfg = Release|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x64.Build.0 = Release|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.ActiveCfg = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release|x86.Build.0 = Release|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{136C8713-3103-4AF9-B7CB-9619E87249C1}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x64.ActiveCfg = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x64.Build.0 = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug|x86.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x64.Build.0 = Debug|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|ARM64.Build.0 = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x64.ActiveCfg = Release|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x64.Build.0 = Release|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.ActiveCfg = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release|x86.Build.0 = Release|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{586C55EE-4003-4A20-AAE2-76DBDA421BB3}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x64.ActiveCfg = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x64.Build.0 = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug|x86.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x64.Build.0 = Debug|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|ARM64.Build.0 = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x64.ActiveCfg = Release|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x64.Build.0 = Release|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.ActiveCfg = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release|x86.Build.0 = Release|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{8AE12A8B-D64C-48CF-AD00-9A0C35884DFA}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x64.ActiveCfg = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x64.Build.0 = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug|x86.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x64.Build.0 = Debug|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|Any CPU.Build.0 = Release|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|ARM64.Build.0 = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x64.ActiveCfg = Release|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x64.Build.0 = Release|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.ActiveCfg = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release|x86.Build.0 = Release|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{16DBDF17-3E0E-4140-989A-B42638126A40}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x64.ActiveCfg = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x64.Build.0 = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug|x86.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.ActiveCfg = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x64.Build.0 = Debug|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Debug-MONO|x86.Build.0 = Debug|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|ARM64.Build.0 = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x64.ActiveCfg = Release|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x64.Build.0 = Release|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.ActiveCfg = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release|x86.Build.0 = Release|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{EDBFE32E-F264-4F01-97C3-B58F8B9165C9}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|ARM64.Build.0 = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.ActiveCfg = Debug|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x64.Build.0 = Debug|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug|x86.Build.0 = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.ActiveCfg = Debug|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x64.Build.0 = Debug|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.ActiveCfg = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Debug-MONO|x86.Build.0 = Debug|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|Any CPU.Build.0 = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|ARM64.Build.0 = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.ActiveCfg = Release|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x64.Build.0 = Release|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.ActiveCfg = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release|x86.Build.0 = Release|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x64.Build.0 = Release-MONO|x64
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
+		{3D67E4FF-6EC6-4FE7-82F1-0DACE1E399A7}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.ActiveCfg = Debug|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x64.Build.0 = Debug|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug|x86.Build.0 = Debug|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|Any CPU.Build.0 = Release|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|ARM64.Build.0 = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x64.ActiveCfg = Release|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x64.Build.0 = Release|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.ActiveCfg = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release|x86.Build.0 = Release|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{CEAEE4FE-9298-443B-AFC5-0F72472484B6}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x64.ActiveCfg = Debug|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x64.Build.0 = Debug|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug|x86.Build.0 = Debug|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|ARM64.Build.0 = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x64.ActiveCfg = Release|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x64.Build.0 = Release|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.ActiveCfg = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release|x86.Build.0 = Release|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{639C178E-368F-4384-869E-7C6D18B4CC1F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x64.ActiveCfg = Debug|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x64.Build.0 = Debug|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug|x86.Build.0 = Debug|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|Any CPU.Build.0 = Release|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|ARM64.Build.0 = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x64.ActiveCfg = Release|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x64.Build.0 = Release|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.ActiveCfg = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release|x86.Build.0 = Release|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{A1FF7E97-F98F-4C5C-AD09-0E1CF4A7A4DB}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x64.ActiveCfg = Debug|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x64.Build.0 = Debug|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug|x86.Build.0 = Debug|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|Any CPU.Build.0 = Release|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|ARM64.Build.0 = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x64.ActiveCfg = Release|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x64.Build.0 = Release|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.ActiveCfg = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release|x86.Build.0 = Release|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{D05E5FAF-3E05-48D2-8DEF-FD1A18EB1349}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.ActiveCfg = Debug|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x64.Build.0 = Debug|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug|x86.Build.0 = Debug|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|Any CPU.Build.0 = Release|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|ARM64.Build.0 = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.ActiveCfg = Release|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x64.Build.0 = Release|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.ActiveCfg = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release|x86.Build.0 = Release|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{B60173F0-F9F0-4688-9DF8-9ADDD57BD45F}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x64.ActiveCfg = Debug|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x64.Build.0 = Debug|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug|x86.Build.0 = Debug|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|ARM64.Build.0 = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x64.ActiveCfg = Release|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x64.Build.0 = Release|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.ActiveCfg = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release|x86.Build.0 = Release|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
 		{F47E1A0A-7D81-40CF-B8B3-A0F4B5ADE943}.Release-MONO|x86.Build.0 = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|ARM64.Build.0 = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x64.ActiveCfg = Debug|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x64.Build.0 = Debug|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.ActiveCfg = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug|x86.Build.0 = Debug|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.ActiveCfg = Debug-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|ARM64.Build.0 = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.ActiveCfg = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Debug-MONO|x86.Build.0 = Debug-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x64.ActiveCfg = MachineIndependent|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x64.Build.0 = MachineIndependent|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|ARM64.Build.0 = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x64.ActiveCfg = Release|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x64.Build.0 = Release|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.ActiveCfg = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release|x86.Build.0 = Release|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.ActiveCfg = Release-MONO|Any CPU
+		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|ARM64.Build.0 = Release-MONO|Any CPU
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x64.Build.0 = Release-MONO|x64
 		{65749C80-47E7-42FE-B441-7A86289D46AA}.Release-MONO|x86.ActiveCfg = Release-MONO|Any CPU
diff --git a/README.md b/README.md
index 20d68bf2708..d96c05bcda0 100644
--- a/README.md
+++ b/README.md
@@ -12,9 +12,9 @@ The current development branch is `main`. Changes in `main` will go into a futur
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=main)
 
-We have forked for MSBuild 17.1 in the branch [`vs17.1`](https://github.com/Microsoft/msbuild/tree/vs17.1). Changes to that branch need special approval.
+We have forked for MSBuild 17.2 in the branch [`vs17.2`](https://github.com/Microsoft/msbuild/tree/vs17.2). Changes to that branch need special approval.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.1)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.1)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.2)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.2)
 
 17.0 builds from the branch [`vs17.0`](https://github.com/Microsoft/msbuild/tree/vs17.0). Only high-priority bugfixes will be considered for servicing 17.0.
 
@@ -24,14 +24,10 @@ We have forked for MSBuild 17.1 in the branch [`vs17.1`](https://github.com/Micr
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.11)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.11)
 
-MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only high-priority bugfixes will be considered for servicing 16.9.
+MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only very-high-priority bugfixes will be considered for servicing 16.9.
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.9)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.9)
 
-MSBuild 16.7 builds from the branch [`vs16.7`](https://github.com/dotnet/msbuild/tree/vs16.7). Only high-priority bugfixes will be considered for servicing 16.7.
-
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.7)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.7)
-
 MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild/tree/vs15.9). Only very-high-priority bugfixes will be considered for servicing 15.9.
 
 ## Building
diff --git a/documentation/Contributions/MSBuild-overview.md b/documentation/Contributions/MSBuild-overview.md
new file mode 100644
index 00000000000..73e6079d632
--- /dev/null
+++ b/documentation/Contributions/MSBuild-overview.md
@@ -0,0 +1,60 @@
+- [Quick intro](#quick-intro)
+- [Language interpretation parts](#language-interpretation-parts)
+- [MSBuild APIs and components](#msbuild-apis-and-components)
+- [MSBuild execution modes](#msbuild-execution-modes)
+
+# Quick intro
+MSBuild implements an actual language (... MSBuildian?). For syntax it uses XML. The XML elements and attributes represent keywords, variable names, and expressions in the language. The language is interpreted.
+
+MSBuild has two data structures:
+- [properties](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties): single valued, scalars. Like `string foo` in C#
+- [items](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items): multi valued, arrays. Like `string[] foo` in C#. Except that each array has a name called an `item-type`, and each element may not only have a value, but also have associated key-value pairs known as metadata.
+
+Typewise, everything is a string in MSBuild.
+
+Executing logic is grouped in [Targets](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-targets). They are like functions in C#. Targets can contain a single type of statement, [Tasks](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-tasks). Targets form dependencies between themselves and are executed via a stack, similar to stack based function execution in other languages.
+
+Data structures (properties and items) can be declared either inside or outside targets. There is a single scope in MSBuild, you could call it the static scope. There's no automatic "target scopes". So if you declare a property or an item inside a target, it's still static and visible to the rest of the targets.
+
+# Language interpretation parts 
+
+The parser, which produces the AST: [ProjectParser](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/Evaluation/ProjectParser.cs#L125). The AST top node is the [ProjectRootElement](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/Construction/ProjectRootElement.cs#L44)
+
+Interpretation happens in two big separate phases.
+
+The first interpretation phase is called **project evaluation**. It's done by the msbuild [Evaluator](https://github.com/dotnet/msbuild/blob/main/src/Build/Evaluation/Evaluator.cs#L52). The result of evaluation is an object tree similar (but different) to the symbol trees done by [compilers](https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/get-started/semantic-analysis#understanding-compilations-and-symbols). The semantic top nodes are `ProjectInstance` and `Project`. You can sort of think of the `ProjectRootElement` as the syntax API and the `Project` / `ProjectInstance` as the semantic API. The big difference in MSBuild is that `ProjectInstance`/`Project` also contain the actual interpretation results of MSBuild's state (properties and items) that sits outside targets.
+
+Evaluation does not execute the targets in a project. It only interprets and stores the results of logic outside targets.
+
+The second phase of msbuild interpretation is target execution. This happens in the [TargetBuilder](https://github.com/dotnet/msbuild/blob/bd00d6cba24d41efd6f54699c3fdbefb9f5034a1/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L100). The `TargetBuilder` uses a stack to execute targets. The initial state is the state contained inside a given `ProjectInstance`. So targets execute in a stack based manner and mutate the global state inside a `ProjectInstance`.
+
+What's the difference between `Project` and `ProjectInstance`? While both represent evaluated projects, they are intended for different use cases. `Project` objects are specialized in introspecting / analyzing MSBuild code and also in providing high level project editing operations. `ProjectInstance` objects are  read only. So the objects in the `Project` tree point back to their corresponding `ProjectRootElement` AST elements. The objects in the `ProjectInstance` tree do not point back to the `ProjectRootElement` elements (so they have a much smaller memory footprint). For example, the `Project` tree is used by Visual Studio to analyze msbuild projects, and to reflect UI changes all the way down to the XML elements. The `TargetBuilder` only works with the lighter weight `ProjectInstance` tree, since it only needs to read state.
+
+# MSBuild APIs and components
+- `Project` / `ProjectInstance`: entrypoint APIs for working with MSBuild evaluations.
+- `BuildManager`: entrypoint API for executing targets in MSBuild.
+  - - Project build stack: RequestBuilder -> TargetBuilder -> TaskBuilder. The RequestBuilder is responsible for evaluating and running targets on a project. The TargetBuilder is responsible for running the target execution stack. The TaskBuilder is responsible for running individual tasks.
+- MSBuild nodes
+  - MSBuild distributes work across multiple processes.
+  - All processes live on the same machine.
+  - Types of nodes:
+    - A main node, called the "BuildManager node" or the "Scheduler node". It contains BuildManager instances and its main role is to coordinate the entire build. It's a big state machine that decides when to create other nodes and on which nodes to build projects.
+    - Multiple worker nodes whose single responsibility is to build projects. A worker node builds only one project at a time (99% true).
+  - The process hosting the single BuildManager node can also host one worker node (called the "inproc node"). This is done for perf reasons, to avoid serialization costs. When the BuildManager node decides to spawn a new Worker node, it creates a new process for it. These are called out of process nodes, or "oop nodes". So Worker nodes can either be inproc nodes (a single one), or oop nodes (multiple).
+
+# MSBuild execution modes
+- Building from cmdline (type msbuild.exe)
+    - MSBuild is responsible for discovering project dependencies, and building them in a depth first search manner
+    - There is no static graph of project dependencies. MSBuild does not know ahead of time what work it needs to do. It does a Just In Time DFS descent over the project references.
+    - references form a DAG. A -> {B, C}, B -> {C, D}
+    - there's a convention on how to declare and build references
+      - documented here: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md
+      - mostly implemented here: https://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.Common.CurrentVersion.targets
+- Building from Visual Studio (VS) (pressing ctrl+shift+B, or the context menu `Build -> Build Solution`)
+    - VS implements an object model for an MSBuild dependency graph
+    - VS takes over the responsibility of handling the graph dependencies and constructs its own graph
+    - It bypasses MSBuild's scheduler and "orders" MSBuild to build a single project at a time, ignoring its references
+    - It builds the graph bottom up in reverse toposort order (starting from nodes without references and going up).
+    - Fast up to date checks:  VS hardcodes relevant project file inputs for each language SDK. (for example it knows that C# projects read global.json). It uses these hardcoded rules to skip building projects. (whereas quickbuild does this in a generic non hardcoded way by observing actual IO inputs and outputs)
+- Build from commandline with static graph (type msbuild.exe /graph)
+  - this works just like QB and VS: MSBuild uses its [static graph library](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md) to find the dependency graph then builds each project node from the graph in toposort order. Unlike QB, it does neither multi machine distribution nor caching
\ No newline at end of file
diff --git a/documentation/Contributions/README.md b/documentation/Contributions/README.md
new file mode 100644
index 00000000000..08307044761
--- /dev/null
+++ b/documentation/Contributions/README.md
@@ -0,0 +1,5 @@
+# Contributed documentation
+
+This directory has documentation that was contributed by developers or users that hasn't been fully vetted for accuracy and correctness.
+
+Explanations in this folder may be slightly or subtly wrong, but can still be very informative for developing an understanding of MSBuild or a specific problem.
diff --git a/documentation/Contributions/solution-parser.md b/documentation/Contributions/solution-parser.md
new file mode 100644
index 00000000000..fa22407e66c
--- /dev/null
+++ b/documentation/Contributions/solution-parser.md
@@ -0,0 +1,59 @@
+# Solution Parser
+
+## Expander
+
+The `Expander` class is used to expand a value from an expression, which can be a function invocation. These expressions (or embedded properties) have the form "$(Property)".
+
+`Expander` handles intrinsic functions, which is a list of built-in functions.
+
+MSBuild defines an initial set of properties like `MSBuildFrameworkToolsPath32`, `MSBuildFrameworkToolsPath`, etc.
+
+Tools configuration can come from configuration file, registry and current exe path.
+
+## Building
+
+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:
+- Attaches debugger;
+- Checks that the current build manager's state is idle;
+- Initializes the logging service;
+- Initializes caches;
+- Registers packet handlers.
+
+After this setup, `MSBuild` creates build request data from project files or project instances. Data for build requests are stored in `BuildRequestData` objects.
+
+After build data for a request have been prepared, `MSBuild` executes the build. It may execute restore and/or a graph build instead depending on the configuration. It executes the build in the `ExecuteBuild` function, which pends the build request, creating an instance of `BuildSubmission` that represents the build submission.
+
+All build submissions are stored in a dictionary in the `BuildManager` class. Then they are added to the work queue.
+
+## Execution
+
+The work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`
+creates `BuildRequestBlocker` (blocker) that’s handled in the `HandleNewRequest` function that handles new requests coming from nodes. This function iterates over all build requests in blocker and, for a solution build, loads the solution to the configuration.
+
+### Solution file parser
+
+Later, it parses the solution file to generate a solution wrapper using methods from the `SolutionFile` class. First, the parser parses the file header, which should only contain solution file format version.
+
+After that, it parses all remaining lines. Each such line should start with one of the following strings:
+- `Project(` - calls `ParseProject`
+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`
+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`
+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`
+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`
+
+`ParseProject` parses the first line containing the Project Type GUID, Project name, Relative Path, and Project GUID. Each project type is hardcoded (as defined in `SolutionFile`). Then it parses all project dependencies. After a project has been parsed, it’s added to the list of parsed projects.
+
+`GlobalSection(SolutionConfigurationPlatforms)` parses the global configuration, such as `Debug|Any CPU = Debug|Any CPU`. It adds these configurations to the solution configuration list.
+
+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as `GlobalSection(ProjectConfigurationPlatforms)`, but it's the global configuration for projects. It adds these configurations to the raw project configuration list.
+
+`GlobalSection(NestedProjects)` finds parent projects for each given project. It stores the parent GUID in nested projects.
+
+After parsing the solution file, MSBuild processes the project configuration section, updating the project configuration section parsed from a previous solution file.
+
+### Solution project generation
+
+Then `MSBuild` generates an MSBuild project file from the list of projects and dependencies collected from the solution file.
+
+While generating the MSBuild wrapper project for a solution file, `MSBuild` first collects an ordered list of actual projects then creates a traversal project instance and adds some XML to it. Then it emits a solution metaproject (if it was specified) from that traversal project. It does not write this project to disk unless specified. Finally, it builds the metaproject.
+
diff --git a/documentation/Home.md b/documentation/Home.md
new file mode 100644
index 00000000000..b7cf33e3e8b
--- /dev/null
+++ b/documentation/Home.md
@@ -0,0 +1,24 @@
+# Getting Started
+
+ * [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
+ * Building Testing and Debugging
+   * [Full Framework MSBuild](wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
+   * [.Net Core MSBuild](wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
+   * [Mono MSBuild](wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
+
+# Resources
+ * [MSBuild Resources](wiki/MSBuild-Resources.md)
+ * [Contributed documentation](Contributions/README.md)
+ * [MSBuild Tips & Tricks](wiki/MSBuild-Tips-&-Tricks.md)
+ * [Binary log](wiki/Binary-Log.md)
+ * [Providing Binary Logs for investigation](wiki/Providing-Binary-Logs.md)
+ * [Contributing Code](wiki/Contributing-Code.md)
+ * [Target Maps](wiki/Target-Maps.md)
+ * Tasks
+   * [ResolveAssemblyReference](wiki/ResolveAssemblyReference.md)
+ * Problems?
+   * [Rebuilding when nothing changed](wiki/Rebuilding-when-nothing-changed.md)
+   * [Something's wrong in my build](wiki/Something's-wrong-in-my-build.md)
+   * [Microsoft.Build.Framework](wiki/Microsoft.Build.Framework.md)
+     *  Some gotchas around the Microsoft.Build.Framework project/assembly.
+
diff --git a/documentation/MSBuild-Server.md b/documentation/MSBuild-Server.md
new file mode 100644
index 00000000000..355cd8e1383
--- /dev/null
+++ b/documentation/MSBuild-Server.md
@@ -0,0 +1,54 @@
+# MSBuild Server
+
+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.
+
+## Communication protocol
+
+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:
+
+1. Try to connect to server
+   - If server is not running, start new instance
+   - If server is busy, fallback to classic build 
+2. Initiate handshake
+2. Issue build command with `EntryNodeCommand` packet
+3. Read packets from pipe
+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring
+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code
+
+### Pipe name convention & handshake
+
+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.
+
+Handshake is a procedure ensuring that client is connecting to a compatible server instance. It uses same logic and security guarantees as current connection between entry node and worker nodes. Hash in the pipe name is basically hash of the handshake object.
+
+### Packets for client-server communication
+
+Server requires to introduce new packet types for IPC.
+
+`EntryNodeCommand` contains all of the information necessary for a server to run a build.
+
+| Property name            | Type                         | Description |
+|---|---|---|
+| CommandLine              | String                       | The MSBuild command line with arguments for build |
+| StartupDirectory         | String                       | The startup directory path |
+| BuildProcessEnvironment  | IDictionary<String, String>  | Environment variables for current build |
+| Culture                  | CultureInfo                  | The culture value for current build |
+| UICulture                | CultureInfo                  | The UI culture value for current build |
+
+`EntryNodeConsoleWrite` contains information for console output.
+
+| Property name            | Type          | Description |
+|---|---|---|
+| Text                     | String        | The text that is written to the output stream. It includes ANSI escape codes for formatting. |
+| OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |
+
+`EntryNodeResponse` informs about finished build.
+
+| Property name            | Type          | Description |
+|---|---|---|
+| ExitCode                 | Int32         | The exit code of the build |
+| ExitType                 | String        | The exit type of the build |
+
+`EntryNodeCancel` cancels the current build.
+
+This type is intentionally empty and properties for build cancelation could be added in future.
diff --git a/documentation/specs/event-source.md b/documentation/specs/event-source.md
index 812d28fe413..18936da2249 100644
--- a/documentation/specs/event-source.md
+++ b/documentation/specs/event-source.md
@@ -34,6 +34,7 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major
 | Save | Saves a project to the file system if dirty, creating directories as necessary. |
 | SdkResolverResolveSdk | A single SDK resolver is called. |
 | SdkResolverServiceInitialize | Initializes SDK resolvers. |
+| SdkResolverEvent | An SDK resolver logs an event. |
 | Target | Executes a target. |
 | TargetUpToDate | Checks whether a particular target needs to run or is up-to-date. |
 | WriteLinesToFile | Checks whether the WriteLinesToFile task needs to execute. |
diff --git a/documentation/specs/low-priority-switch.md b/documentation/specs/low-priority-switch.md
new file mode 100644
index 00000000000..ba33826a89e
--- /dev/null
+++ b/documentation/specs/low-priority-switch.md
@@ -0,0 +1,35 @@
+
+# Low Priority Nodes in MSBuild and Visual Studio
+
+## Problem Summary
+
+When doing other work, it can be useful for builds (which often take a long time and consume a lot of resources) to happen in the background, allowing other work to happen in the interim. This is true for both command line builds and builds within Visual Studio.
+
+Visual Studio, on the other hand, should always run at normal priority. This ensures that users can continue to interact with its other features, most notably editing code and seeing intellisense and autocomplete pop up.
+
+## High Level Design
+
+### Requirements
+
+1. A long-lived process can execute a series of builds divided between Normal and BelowNormal priority.
+2. Transitions between a build at Normal priority and one at BelowNormal priority (and vice versa) are fairly efficient, at least on Windows but ideally on all operating systems.
+3. NodeReuse is still possible. That is, another process can (often) use nodes from the long-lived process if NodeReuse is true.
+4. Any reused nodes are at the priority they themselves specify. Normal priority nodes are actually at normal priority, and low priority nodes are actually at BelowNormal priority.
+5. All nodes are at the priority they should be when being used to build even if a normal priority process had connected to them as normal priority worker nodes, and they are now executing a low priority build.
+
+
+## Non-goals
+
+Perfect parity between windows and mac or linux. Windows permits processes to raise their own priority or that of another process, whereas other operating systems do not. This is very efficient, so we should use it. As we expect this feature to be used in Visual Studio, we anticipate it being less used on mac and linux, hence not being as high priority to make it just as efficient.
+
+## Details
+
+Each node (including worker nodes) initially takes its priority from its parent process. Since we now need the priority to align with what it is passed instead of its parent, attempt to adjust priority afterwards if necessary as part of node startup.
+
+BuildManager.cs remembers the priority of the previous build it had executed. If that was set to a value that differs from the priority of the current build:
+1. On windows or when decreasing the priority: lowers the priority of all connected nodes
+2. On linux and mac when increasing the priority: disconnects from all nodes.
+
+When a worker node disconnects from the entrypoint node, it should ensure that it is the priority that would be expected by nodes that successfully connect to it. That means that it should be normal priority if lowPriority is false and BelowNormal priority otherwise.
+
+For this reason, if we intend to reuse a node, we check its priority and adjust it to the expected value if possible. If it proves impossible to adjust to the correct priority, the node shuts down.
diff --git a/documentation/wiki/ChangeWaves-Dev.md b/documentation/wiki/ChangeWaves-Dev.md
index a3cfdbcd93f..5158535340c 100644
--- a/documentation/wiki/ChangeWaves-Dev.md
+++ b/documentation/wiki/ChangeWaves-Dev.md
@@ -12,8 +12,11 @@ The opt-out comes in the form of setting the environment variable `MSBuildDisabl
 ## Choosing a Change Wave for a New Feature
 This is determined on a case by case basis and should be discussed with the MSBuild team. A safe bet would be to check our [currently active Change Waves](ChangeWaves.md#change-waves-&-associated-features) and pick the version after the latest MSBuild version. This version corresponds to the latest version of Visual Studio.
 
+### Change Wave Versioning
+Change Wave features should match the LTS version of VS they were released with. Any feature requiring a changewave during a non-LTS release of VS should use the **NEXT** version number.
+
 # Developing With Change Waves in Mind
-For the purpose of providing an example, the rest of this document assumes we're developing a feature for MSBuild version **17.4**.
+For the purpose of providing an example, the rest of this document assumes we're developing a feature for MSBuild version **17.3**.
 
 The Process:
 1. Develop your feature.
@@ -32,7 +35,7 @@ public static readonly Version Wave17_4 = new Version(17, 4);
 3. You may need to delete the lowest wave as new waves get added.
 4. Update the AllWaves array appropriately.
 ```c#
-public static readonly Version[] AllWaves = { Wave16_10, Wave17_0, Wave17_4 };
+public static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
 ```
 
 ## Condition Your Feature On A Change Wave
@@ -96,4 +99,4 @@ These features will eventually become standard functionality. When a change wave
 1. Start by deleting the readonly `Wave17_4` that was created in [Creating a Change Wave](#creating-a-change-wave).
 2. Remove `ChangeWave.AreFeaturesEnabled` or `[MSBuild]::AreFeaturesEnabled` conditions surrounding features that were assigned that change wave.
 3. Remove tests associated with ensuring features would not run if this wave were set.
-4. Clear all other issues that arose from deleting the version.
+4. Clear all other issues that arose from deleting the version.
\ No newline at end of file
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 84e2c7fcb2b..1a778f77493 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -22,12 +22,10 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 # Change Waves & Associated Features
 
 ## Current Rotation of Change Waves
-### 16.10
-- [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)
-- [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)
-- [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)
-- [Fail restore operations when an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6430)
-- [Optimize glob evaluation](https://github.com/dotnet/msbuild/pull/6151)
+
+### 17.4
+- [Respect deps.json when loading assemblies](https://github.com/dotnet/msbuild/pull/7520)
+- [Remove opt in for new schema for CombineTargetFrameworkInfoProperties](https://github.com/dotnet/msbuild/pull/6928)
 
 ### 17.0
 - [Scheduler should honor BuildParameters.DisableInprocNode](https://github.com/dotnet/msbuild/pull/6400)
@@ -47,3 +45,10 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Enable NoWarn](https://github.com/dotnet/msbuild/pull/5671)
 - [Truncate Target/Task skipped log messages to 1024 chars](https://github.com/dotnet/msbuild/pull/5553)
 - [Don't expand full drive globs with false condition](https://github.com/dotnet/msbuild/pull/5669)
+
+### 16.10
+- [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)
+- [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)
+- [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)
+- [Fail restore operations when an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6430)
+- [Optimize glob evaluation](https://github.com/dotnet/msbuild/pull/6151)
diff --git a/documentation/wiki/Home.md b/documentation/wiki/Home.md
deleted file mode 100644
index 9ffee5a2d62..00000000000
--- a/documentation/wiki/Home.md
+++ /dev/null
@@ -1,23 +0,0 @@
-# Getting Started
-
- * [What is MSBuild?](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild)
- * Building Testing and Debugging
-   * [Full Framework MSBuild](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
-   * [.Net Core MSBuild](Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
-   * [Mono MSBuild](Building-Testing-and-Debugging-on-Mono-MSBuild.md)
-
-# Resources
- * [MSBuild Resources](MSBuild-Resources.md)
- * [MSBuild Tips & Tricks](MSBuild-Tips-&-Tricks.md)
- * [Binary log](Binary-Log.md)
- * [Providing Binary Logs for investigation](Providing-Binary-Logs.md)
- * [Contributing Code](Contributing-Code.md)
- * [Target Maps](Target-Maps.md)
- * Tasks
-   * [ResolveAssemblyReference](ResolveAssemblyReference.md)
- * Problems?
-   * [Rebuilding when nothing changed](Rebuilding-when-nothing-changed.md)
-   * [Something's wrong in my build](Something's-wrong-in-my-build.md)
-   * [Microsoft.Build.Framework](Microsoft.Build.Framework.md)
-     *  Some gotchas around the Microsoft.Build.Framework project/assembly.
-
diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index 52c0b7ec043..288c062da35 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -8,7 +8,7 @@
 
   <PropertyGroup>
     <BootstrapDestination>$(ArtifactsBinDir)bootstrap\</BootstrapDestination>
-    <BootstrapDestination Condition="'$(Platform)' == 'x64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
+    <BootstrapDestination Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
     <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>
 
     <!-- TODO: Mono build should use BootstrapNetCore logic -->
@@ -21,7 +21,7 @@
 
   <Target Name="Bootstrap" DependsOnTargets="$(BootstrapDependsOn)"
           AfterTargets="AfterBuild"
-          Condition="'$(CreateBootstrap)' == 'true'"/>
+          Condition="'$(CreateBootstrap)' != 'false'"/>
 
   <Target Name="CleanBootstrapFolder">
     <!-- This sometimes fails so it might need be retried. -->
@@ -79,7 +79,8 @@
       <ShimTargets Include="Workflow.Targets" />
       <ShimTargets Include="Workflow.VisualBasic.Targets" />
 
-      <InstalledMicrosoftExtensions Include="$(MSBuildExtensionsPath)\Microsoft\**\*.*" />
+      <InstalledMicrosoftExtensions Include="$(MSBuildExtensionsPath)\Microsoft\**\*.*"
+                                    Exclude="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\NodeJs\**" />
 
       <InstalledNuGetFiles Include="$(MSBuildExtensionsPath)\Microsoft\NuGet\*" />
 
@@ -100,6 +101,13 @@
       <FreshlyBuiltBinariesx64 Include="$(MSBuildTaskHostX64BinPath)**\*.exe.config" />
       <FreshlyBuiltBinariesx64 Include="$(X64BinPath)**\*.dll.config" />
 
+      <FreshlyBuiltBinariesArm64 Include="$(X64BinPath)\Microsoft.Build.Tasks.Core.dll" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.exe" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.tlb" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.pdb" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.exe.config" />
+      <FreshlyBuiltBinariesArm64 Include="$(Arm64BinPath)**\*.dll.config" />
+
       <FreshlyBuiltRootProjects Include="$(OutputPath)Microsoft.Common.props" />
       <FreshlyBuiltRootProjects Include="$(OutputPath)Microsoft.VisualStudioVersion.*.Common.props" />
       <FreshlyBuiltProjects Include="$(OutputPath)**\*props" Exclude="@(FreshlyBuiltRootProjects)" />
@@ -155,6 +163,10 @@
      <Copy SourceFiles="@(FreshlyBuiltBinariesx64)"
           DestinationFiles="@(FreshlyBuiltBinariesx64 -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\amd64\%(RecursiveDir)%(Filename)%(Extension)')" />
 
+    <!-- Copy our binaries to the arm64 location. -->
+     <Copy SourceFiles="@(FreshlyBuiltBinariesArm64)"
+          DestinationFiles="@(FreshlyBuiltBinariesArm64 -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\arm64\%(RecursiveDir)%(Filename)%(Extension)')" />
+
     <!-- Copy our freshly-built props and targets, overwriting anything we copied from the machine -->
     <Copy SourceFiles="@(FreshlyBuiltRootProjects)"
           DestinationFiles="@(FreshlyBuiltRootProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\%(Filename)%(Extension)')" />
@@ -162,6 +174,8 @@
           DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\%(RecursiveDir)%(Filename)%(Extension)')" />
     <Copy SourceFiles="@(FreshlyBuiltProjects)"
           DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\amd64\%(RecursiveDir)%(Filename)%(Extension)')" />
+    <Copy SourceFiles="@(FreshlyBuiltProjects)"
+          DestinationFiles="@(FreshlyBuiltProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\arm64\%(RecursiveDir)%(Filename)%(Extension)')" />
 
   </Target>
 
diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index c75fbec9493..d0b65becdd1 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -164,7 +164,7 @@ dotnet_diagnostic.CA1069.severity = none
 dotnet_diagnostic.CA1070.severity = warning
 
 # Avoid using cref tags with a prefix
-dotnet_diagnostic.CA1200.severity = suggestion
+dotnet_diagnostic.CA1200.severity = warning
 
 # Do not pass literals as localized parameters
 dotnet_diagnostic.CA1303.severity = none
@@ -319,7 +319,7 @@ dotnet_diagnostic.CA1836.severity = warning
 dotnet_diagnostic.CA1837.severity = suggestion
 
 # Avoid 'StringBuilder' parameters for P/Invokes
-dotnet_diagnostic.CA1838.severity = suggestion
+dotnet_diagnostic.CA1838.severity = warning
 
 # Dispose objects before losing scope
 dotnet_diagnostic.CA2000.severity = none
diff --git a/eng/Packages.props b/eng/Packages.props
index 55d9bbeb153..55e8eb4b24b 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -10,14 +10,12 @@
   <ItemGroup>
     <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="4.0.0-4.21379.20" />
+    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="4.2.0-1.22102.8" />
     <PackageReference Update="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
-    <PackageReference Update="Microsoft.IO.Redist" Version="6.0.0" />
+    <PackageReference Update="Microsoft.IO.Redist" Version="$(MicrosoftIORedistVersion)" />
     <PackageReference Update="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" />
-    <PackageReference Update="Microsoft.Win32.Registry" Version="4.3.0" />
     <PackageReference Update="NuGet.Build.Tasks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
-    <PackageReference Update="System.CodeDom" Version="4.4.0" />
     <PackageReference Update="System.Collections.Immutable" Version="5.0.0" />
     <PackageReference Update="System.Configuration.ConfigurationManager" Version="4.7.0" />
     <PackageReference Update="System.Net.Http" Version="4.3.4" />
@@ -25,14 +23,12 @@
     <PackageReference Update="System.Reflection.Metadata" Version="5.0.0" />
     <PackageReference Update="System.Reflection.MetadataLoadContext" Version="5.0.0" />
     <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
-    <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
-    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="4.7.0" />
-    <PackageReference Update="System.Security.Cryptography.Xml" Version="4.7.0" />
+    <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="$(SystemRuntimeCompilerServicesUnsafeVersion)" />
     <PackageReference Update="System.Security.Permissions" Version="4.7.0" />
-    <PackageReference Update="System.Security.Principal.Windows" Version="4.7.0" />
+    <PackageReference Update="System.Security.Principal.Windows" Version="5.0.0" />
     <PackageReference Update="System.Text.Encoding.CodePages" Version="4.0.1" />
-    <PackageReference Update="System.Text.Json" Version="6.0.0" />
-    <PackageReference Update="System.Threading.Tasks.Dataflow" Version="6.0.0" />
+    <PackageReference Update="System.Text.Json" Version="$(SystemTextJsonVersion)" />
+    <PackageReference Update="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
     <PackageReference Update="xunit.assert" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.console" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.core" Version="$(XUnitVersion)" />
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 241888161f8..523ce5fd8ef 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,22 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22076.8">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22218.4">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>214dd59f1d81f8e34289cfb173cf66fb2cd2f467</Sha>
+      <Sha>095ae444583627c1f0575967529107fd1e1d6913</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-rc.103">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.2.0-rc.146">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>f1906d3d581e0ea0bdd282134208d654f8447880</Sha>
+      <Sha>b8a61266d9a6780cb7eb9c1942695cf813fdef0a</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-3.22071.8">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.2.0-4.22223.6">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>663228dd1656d5e5ca7bd38bd5c95e3d8c2b7b01</Sha>
+      <Sha>68ce7949a2ac960994374d387ec3c840523f2a44</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22076.8">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22218.4">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>214dd59f1d81f8e34289cfb173cf66fb2cd2f467</Sha>
+      <Sha>095ae444583627c1f0575967529107fd1e1d6913</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index 4d24979112f..20fa019c66e 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,7 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.2.0</VersionPrefix>
+    <VersionPrefix>17.3.0</VersionPrefix>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
     <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
@@ -32,10 +32,14 @@
     <!-- DotNetCliVersion MUST match the dotnet version in global.json.
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22076.8</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22218.4</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.1.0-3.22071.8</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.1.0-rc.103</NuGetBuildTasksVersion>
+    <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.2.0-4.22223.6</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.2.0-rc.146</NuGetBuildTasksVersion>
+    <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
+    <SystemTextJsonVersion>6.0.0</SystemTextJsonVersion>
+    <SystemThreadingTasksDataflowVersion>6.0.0</SystemThreadingTasksDataflowVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/common/generate-sbom-prep.ps1 b/eng/common/generate-sbom-prep.ps1
new file mode 100644
index 00000000000..a733a888582
--- /dev/null
+++ b/eng/common/generate-sbom-prep.ps1
@@ -0,0 +1,19 @@
+Param(
+    [Parameter(Mandatory=$true)][string] $ManifestDirPath    # Manifest directory where sbom will be placed
+)
+
+Write-Host "Creating dir $ManifestDirPath"
+# create directory for sbom manifest to be placed
+if (!(Test-Path -path $ManifestDirPath))
+{
+  New-Item -ItemType Directory -path $ManifestDirPath
+  Write-Host "Successfully created directory $ManifestDirPath"
+}
+else{
+  Write-PipelineTelemetryError -category 'Build'  "Unable to create sbom folder."
+}
+
+Write-Host "Updating artifact name"
+$artifact_name = "${env:SYSTEM_STAGENAME}_${env:AGENT_JOBNAME}_SBOM" -replace '["/:<>\\|?@*"() ]', '_'
+Write-Host "Artifact name $artifact_name"
+Write-Host "##vso[task.setvariable variable=ARTIFACT_NAME]$artifact_name"
diff --git a/eng/common/generate-sbom-prep.sh b/eng/common/generate-sbom-prep.sh
new file mode 100644
index 00000000000..f6c77453142
--- /dev/null
+++ b/eng/common/generate-sbom-prep.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+
+source="${BASH_SOURCE[0]}"
+
+manifest_dir=$1
+
+if [ ! -d "$manifest_dir" ] ; then
+  mkdir -p "$manifest_dir"
+  echo "Sbom directory created." $manifest_dir
+else
+  Write-PipelineTelemetryError -category 'Build'  "Unable to create sbom folder."
+fi
+
+artifact_name=$SYSTEM_STAGENAME"_"$AGENT_JOBNAME"_SBOM"
+echo "Artifact name before : "$artifact_name
+# replace all special characters with _, some builds use special characters like : in Agent.Jobname, that is not a permissible name while uploading artifacts.
+safe_artifact_name="${artifact_name//["/:<>\\|?@*$" ]/_}"
+echo "Artifact name after : "$safe_artifact_name
+export ARTIFACT_NAME=$safe_artifact_name
+echo "##vso[task.setvariable variable=ARTIFACT_NAME]$safe_artifact_name"
+
+exit 0
diff --git a/eng/common/post-build/publish-using-darc.ps1 b/eng/common/post-build/publish-using-darc.ps1
index 2427ca6b6ae..8508397d776 100644
--- a/eng/common/post-build/publish-using-darc.ps1
+++ b/eng/common/post-build/publish-using-darc.ps1
@@ -5,13 +5,8 @@ param(
   [Parameter(Mandatory=$true)][string] $MaestroToken,
   [Parameter(Mandatory=$false)][string] $MaestroApiEndPoint = 'https://maestro-prod.westus2.cloudapp.azure.com',
   [Parameter(Mandatory=$true)][string] $WaitPublishingFinish,
-  [Parameter(Mandatory=$false)][string] $EnableSourceLinkValidation,
-  [Parameter(Mandatory=$false)][string] $EnableSigningValidation,
-  [Parameter(Mandatory=$false)][string] $EnableNugetValidation,
-  [Parameter(Mandatory=$false)][string] $PublishInstallersAndChecksums,
   [Parameter(Mandatory=$false)][string] $ArtifactsPublishingAdditionalParameters,
-  [Parameter(Mandatory=$false)][string] $SymbolPublishingAdditionalParameters,
-  [Parameter(Mandatory=$false)][string] $SigningValidationAdditionalParameters
+  [Parameter(Mandatory=$false)][string] $SymbolPublishingAdditionalParameters
 )
 
 try {
@@ -35,27 +30,6 @@ try {
     $optionalParams.Add("--no-wait") | Out-Null
   }
 
-  if ("false" -ne $PublishInstallersAndChecksums) {
-    $optionalParams.Add("--publish-installers-and-checksums") | Out-Null
-  }
-
-  if ("true" -eq $EnableNugetValidation) {
-    $optionalParams.Add("--validate-nuget") | Out-Null
-  }
-
-  if ("true" -eq $EnableSourceLinkValidation) {
-    $optionalParams.Add("--validate-sourcelinkchecksums") | Out-Null
-  }
-
-  if ("true" -eq $EnableSigningValidation) {
-    $optionalParams.Add("--validate-signingchecksums") | Out-Null
-
-    if ("" -ne $SigningValidationAdditionalParameters) {
-      $optionalParams.Add("--signing-validation-parameters") | Out-Null
-      $optionalParams.Add($SigningValidationAdditionalParameters) | Out-Null
-    }
-  }
-
   & $darc add-build-to-channel `
   --id $buildId `
   --publishing-infra-version $PublishingInfraVersion `
diff --git a/eng/common/sdl/configure-sdl-tool.ps1 b/eng/common/sdl/configure-sdl-tool.ps1
index 4999c307088..adea8e8da2a 100644
--- a/eng/common/sdl/configure-sdl-tool.ps1
+++ b/eng/common/sdl/configure-sdl-tool.ps1
@@ -15,7 +15,9 @@ Param(
   # Optional: Additional params to add to any tool using CredScan.
   [string[]] $CrScanAdditionalRunConfigParams,
   # Optional: Additional params to add to any tool using PoliCheck.
-  [string[]] $PoliCheckAdditionalRunConfigParams
+  [string[]] $PoliCheckAdditionalRunConfigParams,
+  # Optional: Additional params to add to any tool using CodeQL/Semmle.
+  [string[]] $CodeQLAdditionalRunConfigParams
 )
 
 $ErrorActionPreference = 'Stop'
@@ -78,6 +80,11 @@ try {
         $tool.Args += "Target < $TargetDirectory"
       }
       $tool.Args += $PoliCheckAdditionalRunConfigParams
+    } elseif ($tool.Name -eq 'semmle' -or $tool.Name -eq 'codeql') {
+      if ($targetDirectory) {
+        $tool.Args += "`"SourceCodeDirectory < $TargetDirectory`""
+      }
+      $tool.Args += $CodeQLAdditionalRunConfigParams
     }
 
     # Create variable pointing to the args array directly so we can use splat syntax later.
diff --git a/eng/common/sdl/execute-all-sdl-tools.ps1 b/eng/common/sdl/execute-all-sdl-tools.ps1
index 1157151f486..b9fe7317964 100644
--- a/eng/common/sdl/execute-all-sdl-tools.ps1
+++ b/eng/common/sdl/execute-all-sdl-tools.ps1
@@ -34,6 +34,7 @@ Param(
   [string] $GuardianLoggerLevel='Standard',                                                      # Optional: the logger level for the Guardian CLI; options are Trace, Verbose, Standard, Warning, and Error
   [string[]] $CrScanAdditionalRunConfigParams,                                                   # Optional: Additional Params to custom build a CredScan run config in the format @("xyz:abc","sdf:1")
   [string[]] $PoliCheckAdditionalRunConfigParams,                                                # Optional: Additional Params to custom build a Policheck run config in the format @("xyz:abc","sdf:1")
+  [string[]] $CodeQLAdditionalRunConfigParams,                                                   # Optional: Additional Params to custom build a Semmle/CodeQL run config in the format @("xyz < abc","sdf < 1")
   [bool] $BreakOnFailure=$False                                                                  # Optional: Fail the build if there were errors during the run
 )
 
@@ -105,7 +106,8 @@ try {
           -AzureDevOpsAccessToken $AzureDevOpsAccessToken `
           -GuardianLoggerLevel $GuardianLoggerLevel `
           -CrScanAdditionalRunConfigParams $CrScanAdditionalRunConfigParams `
-          -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams
+          -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams `
+          -CodeQLAdditionalRunConfigParams $CodeQLAdditionalRunConfigParams
         if ($BreakOnFailure) {
           Exit-IfNZEC "Sdl"
         }
diff --git a/eng/common/templates/job/execute-sdl.yml b/eng/common/templates/job/execute-sdl.yml
index 0ca2afe6961..24cec0424e5 100644
--- a/eng/common/templates/job/execute-sdl.yml
+++ b/eng/common/templates/job/execute-sdl.yml
@@ -29,14 +29,6 @@ parameters:
   # Optional: download a list of pipeline artifacts. 'downloadArtifacts' controls build artifacts,
   # not pipeline artifacts, so doesn't affect the use of this parameter.
   pipelineArtifactNames: []
-  # Optional: location and ID of the AzDO build that the build/pipeline artifacts should be
-  # downloaded from. By default, uses runtime expressions to decide based on the variables set by
-  # the 'setupMaestroVars' dependency. Overriding this parameter is necessary if SDL tasks are
-  # running without Maestro++/BAR involved, or to download artifacts from a specific existing build
-  # to iterate quickly on SDL changes.
-  AzDOProjectName: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-  AzDOPipelineId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-  AzDOBuildId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
 
 jobs:
 - job: Run_SDL
@@ -51,24 +43,24 @@ jobs:
       value: ${{ parameters.AzDOPipelineId }}
     - name: AzDOBuildId
       value: ${{ parameters.AzDOBuildId }}
-    # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
-    # sync with the packages.config file.
-    - name: DefaultGuardianVersion
-      value: 0.110.1
+    - template: /eng/common/templates/variables/sdl-variables.yml
     - name: GuardianVersion
       value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
-    - name: GuardianPackagesConfigFile
-      value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
   pool:
-    # To extract archives (.tar.gz, .zip), we need access to "tar", added in Windows 10/2019.
-    ${{ if eq(parameters.extractArchiveArtifacts, 'false') }}:
-      vmImage: windows-2019
-    ${{ if ne(parameters.extractArchiveArtifacts, 'false') }}:
-      vmImage: windows-2019
+    # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+    ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+      name: VSEngSS-MicroBuild2022-1ES
+      demands: Cmd
+    # If it's not devdiv, it's dnceng
+    ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+      name: NetCore1ESPool-Internal
+      demands: ImageOverride -equals Build.Server.Amd64.VS2019
   steps:
   - checkout: self
     clean: true
 
+  - template: /eng/common/templates/post-build/setup-maestro-vars.yml
+
   - ${{ if ne(parameters.downloadArtifacts, 'false')}}:
     - ${{ if ne(parameters.artifactNames, '') }}:
       - ${{ each artifactName in parameters.artifactNames }}:
@@ -129,57 +121,11 @@ jobs:
       displayName: Extract Archive Artifacts
       continueOnError: ${{ parameters.sdlContinueOnError }}
   
-  - ${{ if ne(parameters.overrideGuardianVersion, '') }}:
-    - powershell: |
-        $content = Get-Content $(GuardianPackagesConfigFile)
-
-        Write-Host "packages.config content was:`n$content"
-
-        $content = $content.Replace('$(DefaultGuardianVersion)', '$(GuardianVersion)')
-        $content | Set-Content $(GuardianPackagesConfigFile)
-
-        Write-Host "packages.config content updated to:`n$content"
-      displayName: Use overridden Guardian version ${{ parameters.overrideGuardianVersion }}
-
-  - task: NuGetToolInstaller@1
-    displayName: 'Install NuGet.exe'
-  - task: NuGetCommand@2
-    displayName: 'Install Guardian'
-    inputs:
-      restoreSolution: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
-      feedsToUse: config
-      nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
-      externalFeedCredentials: GuardianConnect
-      restoreDirectory: $(Build.SourcesDirectory)\.packages
-
-  - ${{ if ne(parameters.overrideParameters, '') }}:
-    - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
-      displayName: Execute SDL
-      continueOnError: ${{ parameters.sdlContinueOnError }}
-  - ${{ if eq(parameters.overrideParameters, '') }}:
-    - powershell: ${{ parameters.executeAllSdlToolsScript }}
-        -GuardianPackageName Microsoft.Guardian.Cli.$(GuardianVersion)
-        -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
-        -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
-        ${{ parameters.additionalParameters }}
-      displayName: Execute SDL
-      continueOnError: ${{ parameters.sdlContinueOnError }}
-
-  - ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
-    # We want to publish the Guardian results and configuration for easy diagnosis. However, the
-    # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
-    # tooling files. Some of these files are large and aren't useful during an investigation, so
-    # exclude them by simply deleting them before publishing. (As of writing, there is no documented
-    # way to selectively exclude a dir from the pipeline artifact publish task.)
-    - task: DeleteFiles@1
-      displayName: Delete Guardian dependencies to avoid uploading
-      inputs:
-        SourceFolder: $(Agent.BuildDirectory)/.gdn
-        Contents: |
-          c
-          i
-      condition: succeededOrFailed()
-    - publish: $(Agent.BuildDirectory)/.gdn
-      artifact: GuardianConfiguration
-      displayName: Publish GuardianConfiguration
-      condition: succeededOrFailed()
+  - template: /eng/common/templates/steps/execute-sdl.yml
+    parameters:
+      overrideGuardianVersion: ${{ parameters.overrideGuardianVersion }}
+      executeAllSdlToolsScript: ${{ parameters.executeAllSdlToolsScript }}
+      overrideParameters: ${{ parameters.overrideParameters }}
+      additionalParameters: ${{ parameters.additionalParameters }}
+      publishGuardianDirectoryToPipeline: ${{ parameters.publishGuardianDirectoryToPipeline }}
+      sdlContinueOnError: ${{ parameters.sdlContinueOnError }}
diff --git a/eng/common/templates/job/job.yml b/eng/common/templates/job/job.yml
index 37dceb1bab0..547d878da07 100644
--- a/eng/common/templates/job/job.yml
+++ b/eng/common/templates/job/job.yml
@@ -24,12 +24,17 @@ parameters:
   enablePublishBuildAssets: false
   enablePublishTestResults: false
   enablePublishUsingPipelines: false
+  disableComponentGovernance: false
   mergeTestResults: false
   testRunTitle: ''
   testResultsFormat: ''
   name: ''
   preSteps: []
   runAsPublic: false
+# Sbom related params
+  enableSbom: true
+  PackageVersion: 6.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
 
 jobs:
 - job: ${{ parameters.name }}
@@ -136,6 +141,10 @@ jobs:
         richNavLogOutputDirectory: $(Build.SourcesDirectory)/artifacts/bin
       continueOnError: true
 
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), ne(parameters.disableComponentGovernance, 'true')) }}:
+      - task: ComponentGovernanceComponentDetection@0
+        continueOnError: true
+
   - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
     - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
       - task: MicroBuildCleanup@1
@@ -242,3 +251,9 @@ jobs:
         ArtifactName: AssetManifests
       continueOnError: ${{ parameters.continueOnError }}
       condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(parameters.enableSbom, 'true')) }}:
+    - template: /eng/common/templates/steps/generate-sbom.yml
+      parameters:
+        PackageVersion: ${{ parameters.packageVersion}}
+        BuildDropPath: ${{ parameters.buildDropPath }}
diff --git a/eng/common/templates/job/onelocbuild.yml b/eng/common/templates/job/onelocbuild.yml
index 069098b0a06..9d1e3042d8a 100644
--- a/eng/common/templates/job/onelocbuild.yml
+++ b/eng/common/templates/job/onelocbuild.yml
@@ -3,9 +3,8 @@ parameters:
   dependsOn: ''
 
   # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
-  pool:
-    vmImage: windows-2019
-
+  pool: ''
+    
   CeapexPat: $(dn-bot-ceapex-package-r) # PAT for the loc AzDO instance https://dev.azure.com/ceapex
   GithubPat: $(BotAccount-dotnet-bot-repo-PAT)
 
@@ -31,7 +30,18 @@ jobs:
 
   displayName: OneLocBuild
 
-  pool: ${{ parameters.pool }}
+  ${{ if ne(parameters.pool, '') }}:
+    pool: ${{ parameters.pool }}
+  ${{ if eq(parameters.pool, '') }}:
+    pool:
+      # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+      ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+        name: VSEngSS-MicroBuild2022-1ES
+        demands: Cmd
+      # If it's not devdiv, it's dnceng
+      ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+        name: NetCore1ESPool-Internal
+        demands: ImageOverride -equals Build.Server.Amd64.VS2019
 
   variables:
     - group: OneLocBuildVariables # Contains the CeapexPat and GithubPat
diff --git a/eng/common/templates/job/publish-build-assets.yml b/eng/common/templates/job/publish-build-assets.yml
index fe9dfdf720c..d91bf914711 100644
--- a/eng/common/templates/job/publish-build-assets.yml
+++ b/eng/common/templates/job/publish-build-assets.yml
@@ -38,10 +38,6 @@ jobs:
       value: ${{ parameters.configuration }}
     - group: Publish-Build-Assets
     - group: AzureDevOps-Artifact-Feeds-Pats
-    # Skip component governance and codesign validation for SDL. These jobs
-    # create no content.
-    - name: skipComponentGovernanceDetection
-      value: true
     - name: runCodesignValidationInjection
       value: false
 
diff --git a/eng/common/templates/job/source-build.yml b/eng/common/templates/job/source-build.yml
index 5023d36dcb3..5cd5325d7b4 100644
--- a/eng/common/templates/job/source-build.yml
+++ b/eng/common/templates/job/source-build.yml
@@ -31,11 +31,6 @@ parameters:
   #   container and pool.
   platform: {}
 
-  # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
-  # source-build builds run in Docker, including the default managed platform.
-  defaultContainerHostPool:
-    vmImage: ubuntu-20.04
-
 jobs:
 - job: ${{ parameters.jobNamePrefix }}_${{ parameters.platform.name }}
   displayName: Source-Build (${{ parameters.platform.name }})
@@ -47,7 +42,15 @@ jobs:
     container: ${{ parameters.platform.container }}
 
   ${{ if eq(parameters.platform.pool, '') }}:
-    pool: ${{ parameters.defaultContainerHostPool }}
+    # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
+    # source-build builds run in Docker, including the default managed platform.
+    pool:
+      ${{ if eq(variables['System.TeamProject'], 'public') }}:
+        name: NetCore1ESPool-Public
+        demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open
+      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
+        name: NetCore1ESPool-Internal
+        demands: ImageOverride -equals Build.Ubuntu.1804.Amd64
   ${{ if ne(parameters.platform.pool, '') }}:
     pool: ${{ parameters.platform.pool }}
 
diff --git a/eng/common/templates/jobs/codeql-build.yml b/eng/common/templates/jobs/codeql-build.yml
new file mode 100644
index 00000000000..54c393af440
--- /dev/null
+++ b/eng/common/templates/jobs/codeql-build.yml
@@ -0,0 +1,31 @@
+parameters:
+  # See schema documentation in /Documentation/AzureDevOps/TemplateSchema.md
+  continueOnError: false
+  # Required: A collection of jobs to run - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
+  jobs: []
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+
+jobs:
+- template: /eng/common/templates/jobs/jobs.yml
+  parameters:
+    enableMicrobuild: false
+    enablePublishBuildArtifacts: false
+    enablePublishTestResults: false
+    enablePublishBuildAssets: false
+    enablePublishUsingPipelines: false
+    enableTelemetry: true
+
+    variables:
+      - group: Publish-Build-Assets
+      # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+      # sync with the packages.config file.
+      - name: DefaultGuardianVersion
+        value: 0.110.1
+      - name: GuardianPackagesConfigFile
+        value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
+      - name: GuardianVersion
+        value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
+  
+    jobs: ${{ parameters.jobs }}
+        
diff --git a/eng/common/templates/jobs/jobs.yml b/eng/common/templates/jobs/jobs.yml
index 2cc0f67e153..554e71cfc43 100644
--- a/eng/common/templates/jobs/jobs.yml
+++ b/eng/common/templates/jobs/jobs.yml
@@ -83,7 +83,15 @@ jobs:
         - ${{ if eq(parameters.enableSourceBuild, true) }}:
           - Source_Build_Complete
         pool:
-          vmImage: windows-2019
+          # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+          ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+            name: VSEngSS-MicroBuild2022-1ES
+            demands: Cmd
+          # If it's not devdiv, it's dnceng
+          ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+            name: NetCore1ESPool-Internal
+            demands: ImageOverride -equals Build.Server.Amd64.VS2019
+
         runAsPublic: ${{ parameters.runAsPublic }}
         publishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
         enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
diff --git a/eng/common/templates/post-build/common-variables.yml b/eng/common/templates/post-build/common-variables.yml
index c99fd750376..1ac7f49a43c 100644
--- a/eng/common/templates/post-build/common-variables.yml
+++ b/eng/common/templates/post-build/common-variables.yml
@@ -4,54 +4,6 @@ variables:
   - group: DotNet-DotNetCli-Storage
   - group: DotNet-MSRC-Storage
   - group: Publish-Build-Assets
-    
-  # .NET Core 3.1 Dev
-  - name: PublicDevRelease_31_Channel_Id
-    value: 128
-
-  # .NET 5 Dev
-  - name: Net_5_Dev_Channel_Id
-    value: 131
-
-  # .NET Eng - Validation
-  - name: Net_Eng_Validation_Channel_Id
-    value: 9
-
-  # .NET Eng - Latest
-  - name: Net_Eng_Latest_Channel_Id
-    value: 2
-
-  # .NET 3 Eng - Validation
-  - name: NET_3_Eng_Validation_Channel_Id
-    value: 390
-
-  # .NET 3 Eng
-  - name: NetCore_3_Tools_Channel_Id
-    value: 344
-
-  # .NET Core 3.0 Internal Servicing
-  - name: InternalServicing_30_Channel_Id
-    value: 184
-
-  # .NET Core 3.0 Release
-  - name: PublicRelease_30_Channel_Id
-    value: 19
-
-  # .NET Core 3.1 Release
-  - name: PublicRelease_31_Channel_Id
-    value: 129
-
-  # General Testing
-  - name: GeneralTesting_Channel_Id
-    value: 529
-
-  # .NET Core 3.1 Blazor Features
-  - name: NetCore_31_Blazor_Features_Channel_Id
-    value: 531
-
-  # .NET Core Experimental
-  - name: NetCore_Experimental_Channel_Id
-    value: 562
 
   # Whether the build is internal or not
   - name: IsInternalBuild
@@ -70,30 +22,5 @@ variables:
   - name: SymbolToolVersion
     value: 1.0.1
 
-  # Feed Configurations
-  # These should include the suffix "/index.json"
-
-  # Default locations for Installers and checksums
-  # Public Locations
-  - name: ChecksumsBlobFeedUrl
-    value: https://dotnetclichecksums.blob.core.windows.net/dotnet/index.json
-  - name: InstallersBlobFeedUrl
-    value: https://dotnetcli.blob.core.windows.net/dotnet/index.json
-
-  # Private Locations
-  - name: InternalChecksumsBlobFeedUrl
-    value: https://dotnetclichecksumsmsrc.blob.core.windows.net/dotnet/index.json
-  - name: InternalChecksumsBlobFeedKey
-    value: $(dotnetclichecksumsmsrc-storage-key)
-
-  - name: InternalInstallersBlobFeedUrl
-    value: https://dotnetclimsrc.blob.core.windows.net/dotnet/index.json
-  - name: InternalInstallersBlobFeedKey
-    value: $(dotnetclimsrc-access-key)
-
-  # Skip component governance and codesign validation for SDL. These jobs
-  # create no content.
-  - name: skipComponentGovernanceDetection
-    value: true
   - name: runCodesignValidationInjection
     value: false
diff --git a/eng/common/templates/post-build/post-build.yml b/eng/common/templates/post-build/post-build.yml
index d1759337abe..24e92a275a4 100644
--- a/eng/common/templates/post-build/post-build.yml
+++ b/eng/common/templates/post-build/post-build.yml
@@ -90,25 +90,25 @@ stages:
     variables:
       - template: common-variables.yml
     jobs:
-    - template: setup-maestro-vars.yml
-      parameters:
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
     - job:
       displayName: NuGet Validation
-      dependsOn: setupMaestroVars
       condition: eq( ${{ parameters.enableNugetValidation }}, 'true')
       pool:
-        vmImage: 'windows-2019'
-      variables:
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
+
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Package Artifacts
           inputs:
@@ -129,19 +129,22 @@ stages:
 
     - job:
       displayName: Signing Validation
-      dependsOn: setupMaestroVars
       condition: and( eq( ${{ parameters.enableSigningValidation }}, 'true'), ne( variables['PostBuildSign'], 'true'))
-      variables:
-        - template: common-variables.yml
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
       pool:
-        vmImage: 'windows-2019'
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Package Artifacts
           inputs:
@@ -186,19 +189,22 @@ stages:
 
     - job:
       displayName: SourceLink Validation
-      dependsOn: setupMaestroVars
       condition: eq( ${{ parameters.enableSourceLinkValidation }}, 'true')
-      variables:
-        - template: common-variables.yml
-        - name: AzDOProjectName
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-        - name: AzDOPipelineId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-        - name: AzDOBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
       pool:
-        vmImage: 'windows-2019'
+        # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
       steps:
+        - template: setup-maestro-vars.yml
+          parameters:
+            BARBuildId: ${{ parameters.BARBuildId }}
+            PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
         - task: DownloadBuildArtifacts@0
           displayName: Download Blob Artifacts
           inputs:
@@ -224,7 +230,6 @@ stages:
     - template: /eng/common/templates/job/execute-sdl.yml
       parameters:
         enable: ${{ parameters.SDLValidationParameters.enable }}
-        dependsOn: setupMaestroVars
         additionalParameters: ${{ parameters.SDLValidationParameters.params }}
         continueOnError: ${{ parameters.SDLValidationParameters.continueOnError }}
         artifactNames: ${{ parameters.SDLValidationParameters.artifactNames }}
@@ -239,21 +244,24 @@ stages:
   variables:
     - template: common-variables.yml
   jobs:
-  - template: setup-maestro-vars.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
   - job:
     displayName: Publish Using Darc
-    dependsOn: setupMaestroVars
     timeoutInMinutes: 120
-    variables:
-      - name: BARBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
     pool:
-      vmImage: 'windows-2019'
+      # We don't use the collection uri here because it might vary (.visualstudio.com vs. dev.azure.com)
+        ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
+          name: VSEngSS-MicroBuild2022-1ES
+          demands: Cmd
+        # If it's not devdiv, it's dnceng
+        ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
+          name: NetCore1ESPool-Internal
+          demands: ImageOverride -equals Build.Server.Amd64.VS2019
     steps:
+      - template: setup-maestro-vars.yml
+        parameters:
+          BARBuildId: ${{ parameters.BARBuildId }}
+          PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
+
       - task: PowerShell@2
         displayName: Publish Using Darc
         inputs:
@@ -263,6 +271,5 @@ stages:
             -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
             -MaestroToken '$(MaestroApiAccessToken)'
             -WaitPublishingFinish true
-            -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
             -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
             -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
\ No newline at end of file
diff --git a/eng/common/templates/post-build/setup-maestro-vars.yml b/eng/common/templates/post-build/setup-maestro-vars.yml
index 4a22b2e6f6d..0c87f149a4a 100644
--- a/eng/common/templates/post-build/setup-maestro-vars.yml
+++ b/eng/common/templates/post-build/setup-maestro-vars.yml
@@ -2,77 +2,69 @@ parameters:
   BARBuildId: ''
   PromoteToChannelIds: ''
 
-jobs:
-- job: setupMaestroVars
-  displayName: Setup Maestro Vars
-  variables:
-    - template: common-variables.yml
-  pool:
-    vmImage: 'windows-2019'
-  steps:
-    - checkout: none
-
-    - ${{ if eq(coalesce(parameters.PromoteToChannelIds, 0), 0) }}:
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Release Configs
-        inputs:
-          buildType: current
-          artifactName: ReleaseConfigs
-          checkDownloadedFiles: true
-
-    - task: PowerShell@2
-      name: setReleaseVars
-      displayName: Set Release Configs Vars
+steps:
+  - ${{ if eq(coalesce(parameters.PromoteToChannelIds, 0), 0) }}:
+    - task: DownloadBuildArtifacts@0
+      displayName: Download Release Configs
       inputs:
-        targetType: inline
-        script: |
-          try {
-            if (!$Env:PromoteToMaestroChannels -or $Env:PromoteToMaestroChannels.Trim() -eq '') {
-              $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt
+        buildType: current
+        artifactName: ReleaseConfigs
+        checkDownloadedFiles: true
 
-              $BarId = $Content | Select -Index 0
-              $Channels = $Content | Select -Index 1             
-              $IsStableBuild = $Content | Select -Index 2
+  - task: PowerShell@2
+    name: setReleaseVars
+    displayName: Set Release Configs Vars
+    inputs:
+      targetType: inline
+      pwsh: true
+      script: |
+        try {
+          if (!$Env:PromoteToMaestroChannels -or $Env:PromoteToMaestroChannels.Trim() -eq '') {
+            $Content = Get-Content $(Build.StagingDirectory)/ReleaseConfigs/ReleaseConfigs.txt
 
-              $AzureDevOpsProject = $Env:System_TeamProject
-              $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
-              $AzureDevOpsBuildId = $Env:Build_BuildId
-            }
-            else {
-              $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"
+            $BarId = $Content | Select -Index 0
+            $Channels = $Content | Select -Index 1             
+            $IsStableBuild = $Content | Select -Index 2
 
-              $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
-              $apiHeaders.Add('Accept', 'application/json')
-              $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")
-
-              $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
-             
-              $BarId = $Env:BARBuildId
-              $Channels = $Env:PromoteToMaestroChannels -split ","
-              $Channels = $Channels -join "]["
-              $Channels = "[$Channels]"
+            $AzureDevOpsProject = $Env:System_TeamProject
+            $AzureDevOpsBuildDefinitionId = $Env:System_DefinitionId
+            $AzureDevOpsBuildId = $Env:Build_BuildId
+          }
+          else {
+            $buildApiEndpoint = "${Env:MaestroApiEndPoint}/api/builds/${Env:BARBuildId}?api-version=${Env:MaestroApiVersion}"
 
-              $IsStableBuild = $buildInfo.stable
-              $AzureDevOpsProject = $buildInfo.azureDevOpsProject
-              $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
-              $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
-            }
+            $apiHeaders = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
+            $apiHeaders.Add('Accept', 'application/json')
+            $apiHeaders.Add('Authorization',"Bearer ${Env:MAESTRO_API_TOKEN}")
 
-            Write-Host "##vso[task.setvariable variable=BARBuildId;isOutput=true]$BarId"
-            Write-Host "##vso[task.setvariable variable=TargetChannels;isOutput=true]$Channels"
-            Write-Host "##vso[task.setvariable variable=IsStableBuild;isOutput=true]$IsStableBuild"
+            $buildInfo = try { Invoke-WebRequest -Method Get -Uri $buildApiEndpoint -Headers $apiHeaders | ConvertFrom-Json } catch { Write-Host "Error: $_" }
+            
+            $BarId = $Env:BARBuildId
+            $Channels = $Env:PromoteToMaestroChannels -split ","
+            $Channels = $Channels -join "]["
+            $Channels = "[$Channels]"
 
-            Write-Host "##vso[task.setvariable variable=AzDOProjectName;isOutput=true]$AzureDevOpsProject"
-            Write-Host "##vso[task.setvariable variable=AzDOPipelineId;isOutput=true]$AzureDevOpsBuildDefinitionId"
-            Write-Host "##vso[task.setvariable variable=AzDOBuildId;isOutput=true]$AzureDevOpsBuildId"
+            $IsStableBuild = $buildInfo.stable
+            $AzureDevOpsProject = $buildInfo.azureDevOpsProject
+            $AzureDevOpsBuildDefinitionId = $buildInfo.azureDevOpsBuildDefinitionId
+            $AzureDevOpsBuildId = $buildInfo.azureDevOpsBuildId
           }
-          catch {
-            Write-Host $_
-            Write-Host $_.Exception
-            Write-Host $_.ScriptStackTrace
-            exit 1
-          }
-      env:
-        MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToMaestroChannels: ${{ parameters.PromoteToChannelIds }}
+
+          Write-Host "##vso[task.setvariable variable=BARBuildId]$BarId"
+          Write-Host "##vso[task.setvariable variable=TargetChannels]$Channels"
+          Write-Host "##vso[task.setvariable variable=IsStableBuild]$IsStableBuild"
+
+          Write-Host "##vso[task.setvariable variable=AzDOProjectName]$AzureDevOpsProject"
+          Write-Host "##vso[task.setvariable variable=AzDOPipelineId]$AzureDevOpsBuildDefinitionId"
+          Write-Host "##vso[task.setvariable variable=AzDOBuildId]$AzureDevOpsBuildId"
+        }
+        catch {
+          Write-Host $_
+          Write-Host $_.Exception
+          Write-Host $_.ScriptStackTrace
+          exit 1
+        }
+    env:
+      MAESTRO_API_TOKEN: $(MaestroApiAccessToken)
+      BARBuildId: ${{ parameters.BARBuildId }}
+      PromoteToMaestroChannels: ${{ parameters.PromoteToChannelIds }}
diff --git a/eng/common/templates/steps/execute-codeql.yml b/eng/common/templates/steps/execute-codeql.yml
new file mode 100644
index 00000000000..3930b163021
--- /dev/null
+++ b/eng/common/templates/steps/execute-codeql.yml
@@ -0,0 +1,32 @@
+parameters:
+  # Language that should be analyzed. Defaults to csharp
+  language: csharp
+  # Build Commands
+  buildCommands: ''
+  overrideParameters: ''                                       # Optional: to override values for parameters.
+  additionalParameters: ''                                     # Optional: parameters that need user specific values eg: '-SourceToolsList @("abc","def") -ArtifactToolsList @("ghi","jkl")'
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+  # Optional: if true, publish the '.gdn' folder as a pipeline artifact. This can help with in-depth
+  # diagnosis of problems with specific tool configurations.
+  publishGuardianDirectoryToPipeline: false
+  # The script to run to execute all SDL tools. Use this if you want to use a script to define SDL
+  # parameters rather than relying on YAML. It may be better to use a local script, because you can
+  # reproduce results locally without piecing together a command based on the YAML.
+  executeAllSdlToolsScript: 'eng/common/sdl/execute-all-sdl-tools.ps1'
+  # There is some sort of bug (has been reported) in Azure DevOps where if this parameter is named
+  # 'continueOnError', the parameter value is not correctly picked up.
+  # This can also be remedied by the caller (post-build.yml) if it does not use a nested parameter
+  # optional: determines whether to continue the build if the step errors;
+  sdlContinueOnError: false
+
+steps:
+- template: /eng/common/templates/steps/execute-sdl.yml
+  parameters:
+    overrideGuardianVersion: ${{ parameters.overrideGuardianVersion }}
+    executeAllSdlToolsScript: ${{ parameters.executeAllSdlToolsScript }}
+    overrideParameters: ${{ parameters.overrideParameters }}
+    additionalParameters: '${{ parameters.additionalParameters }}
+      -CodeQLAdditionalRunConfigParams @("BuildCommands < ${{ parameters.buildCommands }}", "Language < ${{ parameters.language }}")'
+    publishGuardianDirectoryToPipeline: ${{ parameters.publishGuardianDirectoryToPipeline }}
+    sdlContinueOnError: ${{ parameters.sdlContinueOnError }}
\ No newline at end of file
diff --git a/eng/common/templates/steps/execute-sdl.yml b/eng/common/templates/steps/execute-sdl.yml
new file mode 100644
index 00000000000..7b8ee18a28d
--- /dev/null
+++ b/eng/common/templates/steps/execute-sdl.yml
@@ -0,0 +1,68 @@
+parameters:
+  overrideGuardianVersion: ''
+  executeAllSdlToolsScript: ''
+  overrideParameters: ''
+  additionalParameters: ''
+  publishGuardianDirectoryToPipeline: false
+  sdlContinueOnError: false
+  condition: ''
+
+steps:
+- ${{ if ne(parameters.overrideGuardianVersion, '') }}:
+  - powershell: |
+      $content = Get-Content $(GuardianPackagesConfigFile)
+
+      Write-Host "packages.config content was:`n$content"
+
+      $content = $content.Replace('$(DefaultGuardianVersion)', '$(GuardianVersion)')
+      $content | Set-Content $(GuardianPackagesConfigFile)
+
+      Write-Host "packages.config content updated to:`n$content"
+    displayName: Use overridden Guardian version ${{ parameters.overrideGuardianVersion }}
+
+- task: NuGetToolInstaller@1
+  displayName: 'Install NuGet.exe'
+  
+- task: NuGetCommand@2
+  displayName: 'Install Guardian'
+  inputs:
+    restoreSolution: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
+    feedsToUse: config
+    nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
+    externalFeedCredentials: GuardianConnect
+    restoreDirectory: $(Build.SourcesDirectory)\.packages
+
+- ${{ if ne(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
+    displayName: Execute SDL
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if eq(parameters.overrideParameters, '') }}:
+  - powershell: ${{ parameters.executeAllSdlToolsScript }}
+      -GuardianPackageName Microsoft.Guardian.Cli.$(GuardianVersion)
+      -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
+      -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
+      ${{ parameters.additionalParameters }}
+    displayName: Execute SDL
+    continueOnError: ${{ parameters.sdlContinueOnError }}
+    condition: ${{ parameters.condition }}
+
+- ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
+  # We want to publish the Guardian results and configuration for easy diagnosis. However, the
+  # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
+  # tooling files. Some of these files are large and aren't useful during an investigation, so
+  # exclude them by simply deleting them before publishing. (As of writing, there is no documented
+  # way to selectively exclude a dir from the pipeline artifact publish task.)
+  - task: DeleteFiles@1
+    displayName: Delete Guardian dependencies to avoid uploading
+    inputs:
+      SourceFolder: $(Agent.BuildDirectory)/.gdn
+      Contents: |
+        c
+        i
+    condition: succeededOrFailed()
+  - publish: $(Agent.BuildDirectory)/.gdn
+    artifact: GuardianConfiguration
+    displayName: Publish GuardianConfiguration
+    condition: succeededOrFailed()
\ No newline at end of file
diff --git a/eng/common/templates/steps/generate-sbom.yml b/eng/common/templates/steps/generate-sbom.yml
new file mode 100644
index 00000000000..f4d7937f379
--- /dev/null
+++ b/eng/common/templates/steps/generate-sbom.yml
@@ -0,0 +1,44 @@
+# BuildDropPath - The root folder of the drop directory for which the manifest file will be generated.
+# PackageName - The name of the package this SBOM represents.
+# PackageVersion - The version of the package this SBOM represents. 
+# ManifestDirPath - The path of the directory where the generated manifest files will be placed
+
+parameters:
+  PackageVersion: 6.0.0
+  BuildDropPath: '$(Build.SourcesDirectory)/artifacts'
+  PackageName: '.NET'
+  ManifestDirPath: $(Build.ArtifactStagingDirectory)/sbom
+  sbomContinueOnError: true
+
+steps:
+- task: PowerShell@2 
+  displayName: Prep for SBOM generation in (Non-linux)
+  condition: or(eq(variables['Agent.Os'], 'Windows_NT'), eq(variables['Agent.Os'], 'Darwin'))
+  inputs: 
+    filePath: ./eng/common/generate-sbom-prep.ps1
+    arguments: ${{parameters.manifestDirPath}}
+
+# Chmodding is a workaround for https://github.com/dotnet/arcade/issues/8461
+- script: |
+    chmod +x ./eng/common/generate-sbom-prep.sh
+    ./eng/common/generate-sbom-prep.sh ${{parameters.manifestDirPath}}
+  displayName: Prep for SBOM generation in (Linux)
+  condition: eq(variables['Agent.Os'], 'Linux')
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+
+- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
+  displayName: 'Generate SBOM manifest'
+  continueOnError: ${{ parameters.sbomContinueOnError }}
+  inputs:
+      PackageName: ${{ parameters.packageName }}
+      BuildDropPath: ${{ parameters.buildDropPath }}
+      PackageVersion: ${{ parameters.packageVersion }}
+      ManifestDirPath: ${{ parameters.manifestDirPath }}
+
+- task: PublishPipelineArtifact@1
+  displayName: Publish SBOM manifest
+  continueOnError: ${{parameters.sbomContinueOnError}}
+  inputs:
+    targetPath: '${{parameters.manifestDirPath}}'
+    artifactName: $(ARTIFACT_NAME)
+
diff --git a/eng/common/templates/steps/source-build.yml b/eng/common/templates/steps/source-build.yml
index ba40dc82f14..abb1b2bcda4 100644
--- a/eng/common/templates/steps/source-build.yml
+++ b/eng/common/templates/steps/source-build.yml
@@ -43,8 +43,8 @@ steps:
     # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
     # in the default public locations.
     internalRuntimeDownloadArgs=
-    if [ '$(dotnetclimsrc-read-sas-token-base64)' != '$''(dotnetclimsrc-read-sas-token-base64)' ]; then
-      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64) --runtimesourcefeed https://dotnetclimsrc.blob.core.windows.net/dotnet --runtimesourcefeedkey $(dotnetclimsrc-read-sas-token-base64)'
+    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
+      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://dotnetbuilds.blob.core.windows.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
     fi
 
     buildConfig=Release
diff --git a/eng/common/templates/variables/sdl-variables.yml b/eng/common/templates/variables/sdl-variables.yml
new file mode 100644
index 00000000000..1a860bd0406
--- /dev/null
+++ b/eng/common/templates/variables/sdl-variables.yml
@@ -0,0 +1,7 @@
+variables:
+# The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+# sync with the packages.config file.
+- name: DefaultGuardianVersion
+  value: 0.110.1
+- name: GuardianPackagesConfigFile
+  value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
\ No newline at end of file
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index 71c5bcb38cf..67e2983d6fd 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -12,14 +12,21 @@
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.3" />
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" />
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4496" />
+    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.1.2196" PrivateAssets="All" />
+    <PackageReference Update="Microsoft.Win32.Registry" Version="5.0.0" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
+    <PackageReference Update="System.CodeDom" Version="6.0.0" />
+    <PackageReference Update="System.Private.Uri" Version="4.3.2" />
+    <PackageReference Update="System.Runtime" Version="4.3.1" />
+    <PackageReference Update="System.Security.Cryptography.Pkcs" Version="6.0.0" />
+    <PackageReference Update="System.Security.Cryptography.Xml" Version="6.0.0" />
+    <PackageReference Update="System.Security.Cryptography.X509Certificates" Version="4.3.2" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'">
     <GlobalPackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.3" />
-    <GlobalPackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.354" PrivateAssets="all"/>
+    <GlobalPackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.406" PrivateAssets="all"/>
   </ItemGroup>
 
   <ItemGroup>
diff --git a/global.json b/global.json
index 1e8405eddd9..9433b51dca5 100644
--- a/global.json
+++ b/global.json
@@ -3,13 +3,13 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "6.0.100",
+    "dotnet": "6.0.200",
     "vs": {
       "version": "17.0"
     }
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22076.8"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22218.4"
   }
 }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
index 05fa6347ad6..db06dd22a74 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
@@ -5,6 +5,7 @@
 using System.Xml;
 
 using Microsoft.Build.Construction;
+using Shouldly;
 using Xunit;
 
 #nullable disable
@@ -70,6 +71,49 @@ public void ReadItemGroupTwoItems()
             Assert.Equal("i2", items[1].Include);
         }
 
+        [Fact]
+        public void DeepCopyFromItemGroupWithMetadata()
+        {
+            string content = @"
+                    <Project>
+                        <ItemGroup>
+                            <i Include='i1'>
+                              <M>metadataValue</M>
+                            </i>
+                            <i Include='i2'>
+                              <M>
+                                <Some>
+                                    <Xml With='Nesting' />
+                                </Some>
+                              </M>
+                            </i>
+                        </ItemGroup>
+                    </Project>
+                ";
+
+            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            ProjectItemGroupElement group = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
+
+            ProjectRootElement newProject = ProjectRootElement.Create();
+            ProjectItemGroupElement newItemGroup = project.AddItemGroup();
+
+            newItemGroup.DeepCopyFrom(group);
+
+            var items = Helpers.MakeList(newItemGroup.Items);
+
+            items.Count.ShouldBe(2);
+
+            items[0].Include.ShouldBe("i1");
+            ProjectMetadataElement metadataElement = items[0].Metadata.ShouldHaveSingleItem();
+            metadataElement.Name.ShouldBe("M");
+            metadataElement.Value.ShouldBe("metadataValue");
+
+            items[1].Include.ShouldBe("i2");
+            metadataElement = items[1].Metadata.ShouldHaveSingleItem();
+            metadataElement.Name.ShouldBe("M");
+            metadataElement.Value.ShouldBe("<Some><Xml With=\"Nesting\" /></Some>");
+        }
+
         /// <summary>
         /// Set the condition value
         /// </summary>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 42ff3d408de..c39946e0c80 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -7,9 +7,11 @@
 using System.Linq;
 using System.Xml;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Engine.UnitTests.Globbing;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Shouldly;
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
@@ -31,6 +33,7 @@ public class ProjectItem_Tests : IDisposable
                         </ItemGroup>
                     </Project>
                 ";
+
         internal const string ItemWithIncludeUpdateAndRemove = @"
                     <Project>
                         <ItemGroup>
@@ -45,6 +48,12 @@ public class ProjectItem_Tests : IDisposable
                     </Project>
                 ";
 
+        internal const string ImportProjectElement = @"
+                    <Project>
+                        <Import Project='{0}'/>
+                    </Project>
+                ";
+
         protected TestEnvironment _env;
 
         public ProjectItem_Tests()
@@ -755,6 +764,220 @@ public void IncludeWithWildcardShouldNotPreserveUserSlashesInFixedDirectoryPart(
             TestIncludeExclude(projectContents, inputFiles, expectedInclude, includeString, "");
         }
 
+        /// <summary>
+        /// Project getter that renames an item to a drive enumerating wildcard that results in an exception.
+        /// </summary>
+        [Theory]
+        [InlineData(@"\**\*.log")]
+        [InlineData(@"$(empty)\**\*.log")]
+        [InlineData(@"\$(empty)**\*.log")]
+        [InlineData(@"\*$(empty)*\*.log")]
+        public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedInclude)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Setup
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+                    Project project = new Project();
+
+                    // Add item and verify
+                    Should.Throw<InvalidProjectFileException>(() => { _ = project.AddItem("i", unevaluatedInclude); });
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Project getter that renames an item to a drive enumerating wildcard that results in a logged warning.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**\*.log")]
+        [InlineData(@"z:$(empty)\**\*.log")]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\\**")]
+        [InlineData(@"z:\\\\\\\\**")]
+        [InlineData(@"z:\**\*.cs")]
+        public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"/**/*.log")]
+        [InlineData(@"$(empty)/**/*.log")]
+        [InlineData(@"/$(empty)**/*.log")]
+        [InlineData(@"/*$(empty)*/*.log")]
+        public void ProjectGetterResultsInUnixDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
+        }
+
+        private static void ProjectGetterResultsInDriveEnumerationWarning(string unevaluatedInclude)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Reset state
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                    // Setup
+                    ProjectCollection projectCollection = new ProjectCollection();
+                    MockLogger collectionLogger = new MockLogger();
+                    projectCollection.RegisterLogger(collectionLogger);
+                    Project project = new Project(projectCollection);
+
+                    // Add item
+                    _= project.AddItem("i", unevaluatedInclude);
+
+                    // Verify
+                    collectionLogger.WarningCount.ShouldBe(1);
+                    collectionLogger.AssertLogContains("MSB5029");
+                    projectCollection.UnregisterAllLoggers();
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Project instance created from a file that contains a drive enumerating wildcard results in a thrown exception.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"$(Microsoft_WindowsAzure_EngSys)\**")]
+        public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+            CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, true);
+        }
+
+        /// <summary>
+        /// Project instance created from a file that contains a drive enumerating wildcard results in a logged warning on the Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"z:\**\*.targets",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"z:\$(Microsoft_WindowsAzure_EngSys)**")]
+        public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+            CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            ImportProjectElement,
+            @"\**\*.targets",
+            null)]
+
+        // LazyItem.IncludeOperation
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        // LazyItem.IncludeOperation for Exclude
+        [InlineData(
+            ItemWithIncludeAndExclude,
+            @"$(EmptyProperty)\*.cs",
+            @"$(Microsoft_WindowsAzure_EngSys)\**")]
+        public void LogWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
+        {
+            content = string.Format(content, placeHolder, excludePlaceHolder);
+                CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
+        }
+
+        private static void CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(string content, bool throwException)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                // Clean file contents by replacing single quotes with double quotes, etc.
+                content = ObjectModelHelpers.CleanupFileContents(content);
+                var testProject = env.CreateTestProjectWithFiles(content.Cleanup());
+
+                // Setup and create project instance from file
+                CreateProjectInstanceFromFileWithDriveEnumeratingWildcard(env, testProject.ProjectFile, throwException);
+            }
+        }
+
+        private static void CreateProjectInstanceFromFileWithDriveEnumeratingWildcard(TestEnvironment env, string testProjectFile, bool throwException)
+        {
+            try
+            {
+                // Reset state 
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, throwException ? "1" : "0");
+
+                if (throwException)
+                {
+                    // Verify
+                    Should.Throw<InvalidProjectFileException>(() => { ProjectInstance.FromFile(testProjectFile, new ProjectOptions()); });
+                }
+                else
+                {
+                    // Setup
+                    MockLogger collectionLogger = new MockLogger();
+                    ProjectOptions options = new ProjectOptions();
+                    options.ProjectCollection = new ProjectCollection();
+                    options.ProjectCollection.RegisterLogger(collectionLogger);
+
+                    // Action
+                    ProjectInstance.FromFile(testProjectFile, options);
+
+                    // Verify
+                    collectionLogger.WarningCount.ShouldBe(1);
+                    collectionLogger.AssertLogContains("MSB5029");
+                    options.ProjectCollection.UnregisterAllLoggers();
+                }
+            }
+            finally
+            {
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
         private static void TestIncludeExcludeWithDifferentSlashes(string projectContents, string includeString, string excludeString, string[] inputFiles, string[] expectedInclude, bool makeExpectedIncludeAbsolute = false)
         {
             Action<string, string> runTest = (include, exclude) =>
@@ -909,7 +1132,7 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
         [InlineData(
             "../a.cs;b.cs", // include string
             "**/*.cs", // exclude string
-            new[] { "a.cs", "ProjectDir/b.cs" }, // files to create relative to the test root dir
+            new[] {"a.cs", "ProjectDir/b.cs"}, // files to create relative to the test root dir
             "ProjectDir", // relative path from test root to project
             new[] { "../a.cs" } // expected items
             )]
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 02e91aa5a06..c3316bb2267 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -7,6 +7,7 @@
 using System.Xml;
 
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -14,6 +15,7 @@
 
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Xunit;
+using Shouldly;
 using System.Linq;
 
 #nullable disable
@@ -30,6 +32,39 @@ public class ProjectItemInstance_Tests
         /// </summary>
         public const int BuiltInMetadataCount = 15;
 
+        internal const string TargetItemWithInclude = @"
+            <Project>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{0}'/>
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
+        internal const string TargetItemWithIncludeAndExclude = @"
+            <Project>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{0}' Exclude='{1}'/>
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
+        internal const string TargetWithDefinedPropertyAndItemWithInclude = @"
+            <Project>
+                <PropertyGroup>
+                    <{0}>{1}</{0}>
+                </PropertyGroup>
+                <Target Name='TestTarget'>
+                    <ItemGroup>
+                        <i Include='{2}' />
+                    </ItemGroup>
+                </Target>
+            </Project>
+            ";
+
         /// <summary>
         /// Basic ProjectItemInstance without metadata
         /// </summary>
@@ -837,6 +872,162 @@ public void MetadataConditionReferringToMetadataOnSameItem()
             Assert.Equal(String.Empty, items[0].GetMetadataValue("m2"));
         }
 
+        /// <summary>
+        /// Fail build for drive enumerating wildcards that exist in projects on any platform.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb",
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            "$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"\")]
+        public void ThrowExceptionUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                string.Format(content, include, exclude) :
+                string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "1",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.FailWithError);
+        }
+
+        /// <summary>
+        /// Log warning for drive enumerating wildcards that exist in projects on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
+
+        [InlineData(
+            TargetItemWithIncludeAndExclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\*.pdb",
+            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"z:\")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)\**\*",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"z:")]
+        public void LogWindowsWarningUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                string.Format(content, include, exclude) :
+                string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithWarning);
+        }
+
+        /// <summary>
+        /// Log warning for drive enumerating wildcards that exist in projects on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)**",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"/")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*/*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"/*")]
+        public void LogUnixWarningUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                    string.Format(content, include, exclude) :
+                    string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                    content,
+                    "0",
+                    "TestTarget",
+                    Helpers.ExpectedBuildResult.SucceedWithWarning);
+        }
+
+        /// <summary>
+        /// Tests target item evaluation resulting in no build failures.
+        /// </summary>
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*.cs",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c:\*\")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"\$(Microsoft_WindowsAzure_EngSys)*\*.cs",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c:")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @":\$(Microsoft_WindowsAzure_EngSys)*\*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"c")]
+
+        [InlineData(
+            TargetWithDefinedPropertyAndItemWithInclude,
+            @"$(Microsoft_WindowsAzure_EngSys)*\*.log",
+            null,
+            "Microsoft_WindowsAzure_EngSys",
+            @"\")]
+        public void NoErrorsAndWarningsUponBuildingProject(string content, string include, string exclude = null, string property = null, string propertyValue = null)
+        {
+            content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
+                    string.Format(content, include, exclude) :
+                    string.Format(content, property, propertyValue, include);
+
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithNoErrorsAndWarnings);
+        }
+
         [Fact]
         public void UpdateShouldRespectConditions()
         {
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 00221821ec4..9760dcf7a92 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -31,11 +31,6 @@
     <Content Condition="'$(MSBuildRuntimeType)' != 'Core' and '$(Configuration)' == 'Release'" Include="$(NuGetPackageRoot)\nuget.commandline\$(NuGetCommandLinePackageVersion)\tools\NuGet.exe" CopyToOutputDirectory="PreserveNewest" Link="nuget\NuGet.exe" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Compile Include="..\Shared\EncodingStringWriter.cs">
       <Link>EncodingStringWriter.cs</Link>
diff --git a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
index 52d7fe31cfa..d29d9623ecc 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServiceFactory_Tests.cs
@@ -34,6 +34,7 @@ public void TestCreateAsynchronousLogger()
             LoggingServiceFactory factory = new LoggingServiceFactory(LoggerMode.Asynchronous, 1);
             LoggingService loggingService = (LoggingService)factory.CreateInstance(BuildComponentType.LoggingService);
             Assert.Equal(LoggerMode.Asynchronous, loggingService.LoggingMode); // "Expected to create an Asynchronous LoggingService"
+            loggingService.ShutdownComponent();
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 1753fc92445..c9964af9f2d 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -1099,6 +1099,7 @@ public void TestBuildFinishedWaitForEvents()
         {
             ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Asynchronous, 1);
             service.LogBuildFinished(true);
+            service.ShutdownComponent();
         }
 
         #endregion
@@ -1898,7 +1899,7 @@ public static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId,
             /// Override the method to log which event was processed so it can be verified in a test
             /// </summary>
             /// <param name="buildEvent">Build event which was asked to be processed</param>
-            internal override void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
+            internal override void ProcessLoggingEvent(object buildEvent)
             {
                 if (buildEvent is BuildEventArgs buildEventArgs)
                 {
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index f69b9525340..bed66bdaaf2 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -161,6 +161,15 @@ public ISet<string> WarningsAsErrors
             set;
         }
 
+        /// <summary>
+        /// List of warnings to not treat as errors.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// List of warnings to treat as low importance messages.
         /// </summary>
@@ -240,6 +249,11 @@ public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string
             throw new NotImplementedException();
         }
 
+        public void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
+        {
+            throw new NotImplementedException();
+        }
+
         /// <summary>
         /// Registers a distributed logger.
         /// </summary>
@@ -609,6 +623,11 @@ public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
             throw new NotImplementedException();
         }
 
+        public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)
+        {
+            throw new NotImplementedException();
+        }
+
         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
         {
             throw new NotImplementedException();
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 87905c53e65..c885fbea105 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -61,6 +61,7 @@ public void ConstructorWithNullName()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -96,6 +97,7 @@ public void ConstructorWithEmptyName()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -131,6 +133,7 @@ public void ConstructorWithNullLocation()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -168,6 +171,7 @@ public void ConstructorWithEmptyLocation()
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
+                    warningsNotAsErrors: null,
                     warningsAsMessages: null);
             }
            );
@@ -203,6 +207,7 @@ public void TestValidConstructors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
@@ -228,6 +233,7 @@ public void TestValidConstructors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
@@ -254,6 +260,7 @@ public void TestValidConstructors()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             IDictionary<string, object> parameters2 = new Dictionary<string, object>();
@@ -285,6 +292,7 @@ public void TestValidConstructors()
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             HashSet<string> WarningsAsErrors = new HashSet<string>();
@@ -316,6 +324,7 @@ public void TestValidConstructors()
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
         }
 
@@ -354,6 +363,7 @@ public void TestTranslationWithNullDictionary()
                 taskParameters: null,
                 globalParameters: expectedGlobalProperties,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -399,6 +409,7 @@ public void TestTranslationWithEmptyDictionary()
                 taskParameters: new Dictionary<string, object>(),
                 globalParameters: new Dictionary<string, string>(),
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -449,6 +460,7 @@ public void TestTranslationWithValueTypesInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -497,6 +509,7 @@ public void TestTranslationWithITaskItemInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -544,6 +557,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -598,6 +612,7 @@ public void TestTranslationWithWarningsAsErrors()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
+                warningsNotAsErrors: null,
                 warningsAsMessages: null);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
@@ -647,6 +662,7 @@ public void TestTranslationWithWarningsAsMessages()
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
+                warningsNotAsErrors: null,
                 warningsAsMessages: WarningsAsMessages);
 
             ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());
diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index bd2ae3edfae..7138a700b21 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -20,6 +20,7 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
 
 #nullable disable
 
@@ -74,17 +75,20 @@ public class TaskRegistry_Tests
         /// </summary>
         private readonly ElementLocation _elementLocation = ElementLocation.Create("c:\\project.proj", 0, 0);
 
+        private readonly ITestOutputHelper _output;
+
         /// <summary>
         /// Setup some logging services so we can see what is going on.
         /// </summary>
-        public TaskRegistry_Tests()
+        public TaskRegistry_Tests(ITestOutputHelper output)
         {
             _testTaskLocation = typeof(TaskRegistry_Tests).GetTypeInfo().Assembly.ManifestModule.FullyQualifiedName;
 
             _loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             _targetLoggingContext = new TargetLoggingContext(_loggingService, _loggerContext);
 
-            _loggingService.RegisterLogger(new MockLogger());
+            _output = output;
+            _loggingService.RegisterLogger(new MockLogger(_output));
         }
 
         #region UsingTaskTests
@@ -624,6 +628,96 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()
                 );
         }
 
+        [Theory]
+        [InlineData("x64","true","x86","", "x64")] // x64 wins
+        [InlineData("x64", "false", "x86", "true", "x86")] // x86 wins
+        public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, string secondArch, string secondOverride, string expectedArch)
+        {
+            Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
+
+            List<ProjectUsingTaskElement> elementList = new List<ProjectUsingTaskElement>();
+            ProjectRootElement project = ProjectRootElement.Create();
+
+            ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
+            element.Architecture = firstArch;
+            element.Override = firstOverride;
+            elementList.Add(element);
+
+            ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
+            secondElement.Architecture = secondArch;
+            secondElement.Override = secondOverride;
+            elementList.Add(secondElement);
+
+            TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
+
+            // no parameters
+            RetrieveAndValidateRegisteredTaskRecord
+                (
+                    registry,
+                    exactMatchRequired: false,
+                    runtime: null,
+                    architecture: null,
+                    shouldBeRetrieved: true,
+                    shouldBeRetrievedFromCache: false,
+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
+                    expectedArchitecture: expectedArch
+                );
+
+            // no parameters, fuzzy match
+            RetrieveAndValidateRegisteredTaskRecord
+                (
+                    registry,
+                    exactMatchRequired: false,
+                    runtime: null,
+                    architecture: null,
+                    shouldBeRetrieved: true,
+                    shouldBeRetrievedFromCache: false,
+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
+                    expectedArchitecture: expectedArch
+                );
+        }
+
+        [Fact]
+        public void OverriddenTask_MultipleOverridesCauseMSB4275()
+        {
+            string proj =
+                $"<Project>" +
+                    $"<Target Name='Bar'/>" +
+                    $"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task.dll' Override='true' Architecture='x64' />" +
+                    $"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task2.dll' Override='true' Architecture='x86'/>" +
+                $"</Project>";
+
+            MockLogger logger = new MockLogger(_output);
+            using (var env = TestEnvironment.Create(_output))
+            {
+                var testProject = env.CreateTestProjectWithFiles(ObjectModelHelpers.CleanupFileContents(proj));
+
+                using (var buildManager = new BuildManager())
+                {
+                    BuildParameters parameters = new BuildParameters()
+                    {
+                        Loggers = new[] { logger }
+                    };
+
+                    var request = new BuildRequestData(
+                        testProject.ProjectFile,
+                        new Dictionary<string, string>(),
+                        MSBuildConstants.CurrentToolsVersion,
+                        Array.Empty<string>(),
+                        null);
+
+                    var result = buildManager.Build(
+                        parameters,
+                        request);
+                    result.OverallResult.ShouldBe(BuildResultCode.Success);
+
+                    // We should see MSB4275: Multiple usingtask overrides with the same name
+                    logger.ErrorCount.ShouldBe(1);
+                    logger.AssertLogContains("MSB4275");
+                }
+            }
+        }
+
         /// <summary>
         /// Test retrieving a matching task record using various parameter combinations when allowing
         /// fuzzy matches.
diff --git a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
index f1e11354289..023b16eb686 100644
--- a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
+++ b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
@@ -369,6 +369,7 @@ public void BuildEnvironmentFindsAmd64()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
         {
@@ -386,6 +387,7 @@ public void BuildEnvironmentFindsAmd64RunningInAmd64NoVS()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64NoVS()
         {
@@ -401,6 +403,7 @@ public void BuildEnvironmentFindsAmd64NoVS()
         }
 
         [Fact]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7552", TargetFrameworkMonikers.Any)]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
         [PlatformSpecific(TestPlatforms.Windows)]
         public void BuildEnvironmentFindsAmd64RunningInAmd64()
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index ee4e63510e0..1a44ce8fdb0 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -222,8 +222,8 @@ public void WarningMessage()
                 new BuildRequestData(p.CreateProjectInstance(), new[] { "Spawn" }));
 
             p.Build().ShouldBeTrue();
-            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 1 [" + project.ProjectFile + ":: Number=1]");
-            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 2 [" + project.ProjectFile + ":: Number=2]");
+            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 1 [" + project.ProjectFile + "::Number=1]");
+            sc.ToString().ShouldContain("source_of_warning : warning : Hello from project 2 [" + project.ProjectFile + "::Number=2]");
         }
 
         [Fact]
@@ -263,8 +263,8 @@ public void ErrorMessage()
                 new BuildRequestData(p.CreateProjectInstance(), new[] { "Spawn" }));
 
             p.Build().ShouldBeFalse();
-            sc.ToString().ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + ":: Number=1]");
-            sc.ToString().ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + ":: Number=2]");
+            sc.ToString().ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + "::Number=1]");
+            sc.ToString().ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2]");
         }
 
         [Theory]
@@ -316,8 +316,8 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
 
             p.Build().ShouldBeFalse();
             string output = sc.ToString();
-            output.ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + ":: Number=1 TargetFramework=netcoreapp2.1]");
-            output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + ":: Number=2 TargetFramework=netcoreapp2.1]");
+            output.ShouldContain("source_of_error : error : Hello from project 1 [" + project.ProjectFile + "::Number=1 TargetFramework=netcoreapp2.1]");
+            output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + "::Number=2 TargetFramework=netcoreapp2.1]");
         }
 
         [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6518")]
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 7081de2d1e6..8d4d270e51b 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3646,6 +3646,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()
             }
         }
 
+        [Theory]
+        [InlineData("easycase")]
+        [InlineData("")]
+        [InlineData("\"\n()\tsdfIR$%#*;==")]
+        public void TestBase64Conversion(string testCase)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertToBase64('{testCase}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();
+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertFromBase64('{intermediate}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            original.ShouldBe(testCase);
+        }
+
+        [Theory]
+        [InlineData("easycase", "ZWFzeWNhc2U=")]
+        [InlineData("", "")]
+        [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
+        public void TestExplicitToBase64Conversion(string plaintext, string base64)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertToBase64('{plaintext}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            intermediate.ShouldBe(base64);
+        }
+
+        [Theory]
+        [InlineData("easycase", "ZWFzeWNhc2U=")]
+        [InlineData("", "")]
+        [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
+        public void TestExplicitFromBase64Conversion(string plaintext, string base64)
+        {
+            PropertyDictionary<ProjectPropertyInstance> pg = new();
+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($"$([MSBuild]::ConvertFromBase64('{base64}'))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;
+            original.ShouldBe(plaintext);
+        }
+
         /// <summary>
         /// A whole bunch error check tests
         /// </summary>
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index 95001217b5d..8ddca6108ac 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -36,9 +36,9 @@
     <ProjectReference Include="..\Samples\TaskWithDependency\TaskWithDependency.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="TaskWithDependencyResolvedProjectReferencePath">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
-      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=netstandard2.0</SetTargetFramework>
+      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=net6.0</SetTargetFramework>
     </ProjectReference>
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" SetTargetFramework="TargetFramework=netstandard2.0" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" />
 
     <ProjectReference Include="..\Samples\ProjectCachePlugin\ProjectCachePlugin.csproj" Private="false" ReferenceOutputAssembly="false">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
diff --git a/src/Build.UnitTests/Scanner_Tests.cs b/src/Build.UnitTests/Scanner_Tests.cs
index 2f7c912bf71..ae6880ac5bd 100644
--- a/src/Build.UnitTests/Scanner_Tests.cs
+++ b/src/Build.UnitTests/Scanner_Tests.cs
@@ -133,24 +133,6 @@ public void SpaceInMiddleOfProperty(string pattern)
             lexer._errorState.ShouldBeFalse();
         }
 
-        [Fact]
-        public void SpacePropertyOptOutWave16_10()
-        {
-            using TestEnvironment env = TestEnvironment.Create();
-            ChangeWaves.ResetStateForTests();
-            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-            Scanner lexer = new Scanner("$(x )", ParserOptions.AllowProperties);
-            AdvanceToScannerError(lexer);
-            Assert.Null(lexer.UnexpectedlyFound);
-
-            lexer = new Scanner("$( x)", ParserOptions.AllowProperties);
-            AdvanceToScannerError(lexer);
-            Assert.Null(lexer.UnexpectedlyFound);
-            ChangeWaves.ResetStateForTests();
-        }
-
         /// <summary>
         /// Tests the special errors for "@(" and "@x" and similar cases.
         /// </summary>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 272f0df9705..c4a9d2c9523 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -34,6 +34,7 @@
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
 using Microsoft.NET.StringTools;
+using System.ComponentModel;
 
 #nullable disable
 
@@ -176,6 +177,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// </summary>
         private int _nextBuildSubmissionId;
 
+        /// <summary>
+        /// The last BuildParameters used for building.
+        /// </summary>
+        private bool? _previousLowPriority = null;
+
         /// <summary>
         /// Mapping of unnamed project instances to the file names assigned to them.
         /// </summary>
@@ -404,6 +410,15 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
             _deferredBuildMessages = null;
         }
 
+        private void UpdatePriority(Process p, ProcessPriorityClass priority)
+        {
+            try
+            {
+                p.PriorityClass = priority;
+            }
+            catch (Win32Exception) { }
+        }
+
         /// <summary>
         /// Prepares the BuildManager to receive build requests.
         /// </summary>
@@ -411,6 +426,41 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
         public void BeginBuild(BuildParameters parameters)
         {
+            if (_previousLowPriority != null)
+            {
+                if (parameters.LowPriority != _previousLowPriority)
+                {
+                    if (NativeMethodsShared.IsWindows || parameters.LowPriority)
+                    {
+                        ProcessPriorityClass priority = parameters.LowPriority ? ProcessPriorityClass.BelowNormal : ProcessPriorityClass.Normal;
+                        IEnumerable<Process> processes = _nodeManager?.GetProcesses();
+                        if (processes is not null)
+                        {
+                            foreach (Process p in processes)
+                            {
+                                UpdatePriority(p, priority);
+                            }
+                        }
+
+                        processes = _taskHostNodeManager?.GetProcesses();
+                        if (processes is not null)
+                        {
+                            foreach (Process p in processes)
+                            {
+                                UpdatePriority(p, priority);
+                            }
+                        }
+                    }
+                    else
+                    {
+                        _nodeManager?.ShutdownAllNodes();
+                        _taskHostNodeManager?.ShutdownAllNodes();
+                    }
+               }
+            }
+
+            _previousLowPriority = parameters.LowPriority;
+
             lock (_syncLock)
             {
                 AttachDebugger();
@@ -493,6 +543,7 @@ ILoggingService InitializeLoggingService()
                     AppendDebuggingLoggers(_buildParameters.Loggers),
                     _buildParameters.ForwardingLoggers,
                     _buildParameters.WarningsAsErrors,
+                    _buildParameters.WarningsNotAsErrors,
                     _buildParameters.WarningsAsMessages);
 
                 _nodeManager.RegisterPacketHandler(NodePacketType.LogMessage, LogMessagePacket.FactoryForDeserialization, loggingService as INodePacketHandler);
@@ -1611,7 +1662,7 @@ private void WaitForAllLoggingServiceEventsToBeProcessed()
             // this has to be called out of the lock (_syncLock)
             // because processing events can callback to 'this' instance and cause deadlock
             Debug.Assert(!Monitor.IsEntered(_syncLock));
-            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForThreadToProcessEvents();
+            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForLoggingToProcessEvents();
         }
 
         /// <summary>
@@ -2601,26 +2652,20 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        var newNodes = new List<NodeInfo>();
+                        IList<NodeInfo> newNodes = _nodeManager.CreateNodes(GetNodeConfiguration(), response.RequiredNodeType, response.NumberOfNodesToCreate);
 
-                        for (int i = 0; i < response.NumberOfNodesToCreate; i++)
+                        if (newNodes?.Count != response.NumberOfNodesToCreate || newNodes.Any(n => n == null))
                         {
-                            NodeInfo createdNode = _nodeManager.CreateNode(GetNodeConfiguration(), response.RequiredNodeType);
+                            BuildEventContext buildEventContext = new BuildEventContext(0, Scheduler.VirtualNode, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+                            ((IBuildComponentHost)this).LoggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty), "UnableToCreateNode", response.RequiredNodeType.ToString("G"));
 
-                            if (createdNode != null)
-                            {
-                                _noNodesActiveEvent.Reset();
-                                _activeNodes.Add(createdNode.NodeId);
-                                newNodes.Add(createdNode);
-                                ErrorUtilities.VerifyThrow(_activeNodes.Count != 0, "Still 0 nodes after asking for a new node.  Build cannot proceed.");
-                            }
-                            else
-                            {
-                                BuildEventContext buildEventContext = new BuildEventContext(0, Scheduler.VirtualNode, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-                                ((IBuildComponentHost)this).LoggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty), "UnableToCreateNode", response.RequiredNodeType.ToString("G"));
+                            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnableToCreateNode", response.RequiredNodeType.ToString("G")));
+                        }
 
-                                throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnableToCreateNode", response.RequiredNodeType.ToString("G")));
-                            }
+                        foreach (var node in newNodes)
+                        {
+                            _noNodesActiveEvent.Reset();
+                            _activeNodes.Add(node.NodeId);
                         }
 
                         IEnumerable<ScheduleResponse> newResponses = _scheduler.ReportNodesCreated(newNodes);
@@ -2938,7 +2983,7 @@ void OnProjectStartedBody(ProjectStartedEventArgs e)
         /// <summary>
         /// Creates a logging service around the specified set of loggers.
         /// </summary>
-        private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> forwardingLoggers, ISet<string> warningsAsErrors, ISet<string> warningsAsMessages)
+        private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> forwardingLoggers, ISet<string> warningsAsErrors, ISet<string> warningsNotAsErrors, ISet<string> warningsAsMessages)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
@@ -2959,6 +3004,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
             loggingService.OnProjectStarted += _projectStartedEventHandler;
             loggingService.OnProjectFinished += _projectFinishedEventHandler;
             loggingService.WarningsAsErrors = warningsAsErrors;
+            loggingService.WarningsNotAsErrors = warningsNotAsErrors;
             loggingService.WarningsAsMessages = warningsAsMessages;
 
             try
@@ -2979,7 +3025,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
                         loggerClassName: typeof(ConfigurableForwardingLogger).FullName,
                         loggerAssemblyName: typeof(ConfigurableForwardingLogger).GetTypeInfo().Assembly.GetName().FullName,
                         loggerAssemblyFile: null,
-                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT",
+                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT;FORWARDPROJECTCONTEXTEVENTS",
                         verbosity: LoggerVerbosity.Quiet);
 
                     ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(new NullLogger(), forwardingLoggerDescription) };
@@ -3230,6 +3276,25 @@ public string Parameters
             /// </summary>
             public void Initialize(IEventSource eventSource)
             {
+                // The concrete type we get should always be our internal
+                // implementation and up-to-date, but we need to meet the
+                // external contract so can't specify that for the
+                // argument.
+
+                IEventSource4 eventSource4 = (IEventSource4)eventSource;
+
+                // Most checks in LoggingService are "does any attached logger
+                // specifically opt into this new behavior?". As such, the
+                // NullLogger shouldn't opt into them explicitly and should
+                // let other loggers opt in.
+
+                // IncludeEvaluationPropertiesAndItems is different though,
+                // because its check is "do ALL attached loggers opt into
+                // the new behavior?", since the new behavior removes
+                // information from old loggers. So the NullLogger must
+                // opt in to ensure it doesn't accidentally veto the new
+                // behavior.
+                eventSource4.IncludeEvaluationPropertiesAndItems();
             }
 
             /// <summary>
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 36bab2c193a..1fec6f1c510 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -294,6 +294,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             _logTaskInputs = other._logTaskInputs;
             _logInitialPropertiesAndItems = other._logInitialPropertiesAndItems;
             WarningsAsErrors = other.WarningsAsErrors == null ? null : new HashSet<string>(other.WarningsAsErrors, StringComparer.OrdinalIgnoreCase);
+            WarningsNotAsErrors = other.WarningsNotAsErrors == null ? null : new HashSet<string>(other.WarningsNotAsErrors, StringComparer.OrdinalIgnoreCase);
             WarningsAsMessages = other.WarningsAsMessages == null ? null : new HashSet<string>(other.WarningsAsMessages, StringComparer.OrdinalIgnoreCase);
             _projectLoadSettings = other._projectLoadSettings;
             _interactive = other._interactive;
@@ -543,6 +544,11 @@ public bool OnlyLogCriticalEvents
         /// </summary>
         public ISet<string> WarningsAsErrors { get; set; }
 
+        /// <summary>
+        /// A list of warnings to not treat as errors. Only has any effect if WarningsAsErrors is empty.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors { get; set; }
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Communications/INodeManager.cs b/src/Build/BackEnd/Components/Communications/INodeManager.cs
index 161fb779341..f35f8cba087 100644
--- a/src/Build/BackEnd/Components/Communications/INodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/INodeManager.cs
@@ -1,10 +1,10 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System.Collections.Generic;
+using System.Diagnostics;
 using Microsoft.Build.Execution;
 
-#nullable disable
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
@@ -21,11 +21,12 @@ internal interface INodeManager : IBuildComponent,
         /// </summary>
         /// <param name="configuration">The configuration to use to create the node.</param>
         /// <param name="affinity">The <see cref="NodeAffinity"/> to use.</param>
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused or created.</param>
         /// <returns>Information about the node created</returns>
         /// <remarks>
         /// Throws an exception if the node could not be created.
         /// </remarks>
-        NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity affinity);
+        IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity affinity, int numberOfNodesToCreate);
 
         /// <summary>
         /// Sends a data packet to a specific node
@@ -51,6 +52,8 @@ internal interface INodeManager : IBuildComponent,
         /// The node manager contains state which is not supposed to persist between builds, make sure this is cleared.
         /// </summary>
         void ClearPerBuildState();
+
+        IEnumerable<Process> GetProcesses();
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/INodeProvider.cs b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
index 1a3f6b84ade..0da32af6678 100644
--- a/src/Build/BackEnd/Components/Communications/INodeProvider.cs
+++ b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
@@ -1,7 +1,11 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable disable
+using System;
+
+using System.Collections;
+using System.Collections.Generic;
+using System.Diagnostics;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -57,14 +61,15 @@ int AvailableNodes
         /// <summary>
         /// Requests that a new node be created on the specified machine.
         /// </summary>
-        /// <param name="nodeId">The id to assign to the node.</param>
+        /// <param name="nextNodeId">The id to assign to the first created node. Resulting nodes ids will be in range [nextNodeId, nextNodeId + numberOfNodesToCreate - 1]</param>
         /// <param name="packetFactory">
         /// The packet factory used to create packets when data is
         /// received on this node.
         /// </param>
-        /// <param name="configuration">The configuration to use to create the remote node.</param>
-        /// <returns>True if the node was created, false otherwise.</returns>
-        bool CreateNode(int nodeId, INodePacketFactory packetFactory, NodeConfiguration configuration);
+        /// <param name="configurationFactory">NodeConfiguration factory of particular node</param>
+        /// <param name="numberOfNodesToCreate">Required number of nodes to create</param>
+        /// <returns>Array of NodeInfo of successfully created nodes</returns>
+        IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory packetFactory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate);
 
         /// <summary>
         /// Sends data to a specific node.
@@ -83,6 +88,8 @@ int AvailableNodes
         /// Shuts down all of the managed nodes.  This call will not return until all nodes are shut down.
         /// </summary>
         void ShutdownAllNodes();
+
+        IEnumerable<Process> GetProcesses();
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index 45303ac6d30..dce14e3d422 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -24,6 +24,8 @@ internal class NodeEndpointOutOfProc : NodeEndpointOutOfProcBase
 
         private readonly bool _lowPriority;
 
+        internal bool LowPriority { get { return _lowPriority; } }
+
         #endregion
 
         #region Constructors and Factories
@@ -54,7 +56,7 @@ internal NodeEndpointOutOfProc(
         /// </summary>
         protected override Handshake GetHandshake()
         {
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, is64Bit: EnvironmentUtilities.Is64BitProcess, nodeReuse: _enableReuse, lowPriority: _lowPriority));
+            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: _enableReuse, lowPriority: _lowPriority));
         }
 
         #region Structs
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index bd6dd68088c..6d9f73590eb 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -5,8 +5,8 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
-
-#nullable disable
+using System.Threading;
+using System.Diagnostics;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -16,30 +16,25 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal class NodeManager : INodeManager
     {
-        /// <summary>
-        /// The invalid node id
-        /// </summary>
-        private const int InvalidNodeId = 0;
-
         /// <summary>
         /// The node provider for the in-proc node.
         /// </summary>
-        private INodeProvider _inProcNodeProvider;
+        private INodeProvider? _inProcNodeProvider;
 
         /// <summary>
         /// The node provider for out-of-proc nodes.
         /// </summary> 
-        private INodeProvider _outOfProcNodeProvider;
+        private INodeProvider? _outOfProcNodeProvider;
 
         /// <summary>
         /// The build component host.
         /// </summary>
-        private IBuildComponentHost _componentHost;
+        private IBuildComponentHost? _componentHost;
 
         /// <summary>
         /// Mapping of manager-produced node IDs to the provider hosting the node.
         /// </summary>
-        private Dictionary<int, INodeProvider> _nodeIdToProvider;
+        private readonly Dictionary<int, INodeProvider> _nodeIdToProvider;
 
         /// <summary>
         /// The packet factory used to translate and route packets
@@ -92,32 +87,31 @@ private NodeManager()
         /// </summary>
         /// <param name="configuration">The configuration to use for the remote node.</param>
         /// <param name="nodeAffinity">The <see cref="NodeAffinity"/> to use.</param>
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused ot created.</param>
         /// <returns>A NodeInfo describing the node created, or null if none could be created.</returns>
-        public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAffinity)
+        public IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity nodeAffinity, int numberOfNodesToCreate)
         {
             // We will prefer to make nodes on the "closest" providers first; in-proc, then
             // out-of-proc, then remote.
             // When we support distributed build, we will also consider the remote provider.
-            int nodeId = InvalidNodeId;
-            if ((nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.InProc) && !_componentHost.BuildParameters.DisableInProcNode)
+            List<NodeInfo> nodes = new(numberOfNodesToCreate);
+            if ((nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.InProc) && !_componentHost!.BuildParameters.DisableInProcNode)
             {
-                nodeId = AttemptCreateNode(_inProcNodeProvider, configuration);
+                nodes.AddRange(AttemptCreateNode(_inProcNodeProvider!, configuration, numberOfNodesToCreate));
             }
 
-            if (nodeId == InvalidNodeId && (nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.OutOfProc))
+            if (nodes.Count < numberOfNodesToCreate && (nodeAffinity == NodeAffinity.Any || nodeAffinity == NodeAffinity.OutOfProc))
             {
-                nodeId = AttemptCreateNode(_outOfProcNodeProvider, configuration);
+                nodes.AddRange(AttemptCreateNode(_outOfProcNodeProvider!, configuration, numberOfNodesToCreate - nodes.Count));
             }
 
-            if (nodeId == InvalidNodeId)
+            // If we created a node, they should no longer be considered shut down.
+            if (nodes.Count > 0)
             {
-                return null;
+                _nodesShutdown = false;
             }
 
-            // If we created a node, they should no longer be considered shut down.
-            _nodesShutdown = false;
-
-            return new NodeInfo(nodeId, _nodeIdToProvider[nodeId].ProviderType);
+            return nodes;
         }
 
         /// <summary>
@@ -127,14 +121,14 @@ public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAff
         /// <param name="packet">The packet to send.</param>
         public void SendData(int node, INodePacket packet)
         {
-            // Look up the node provider for this node in the mapping.
-            if (!_nodeIdToProvider.TryGetValue(node, out INodeProvider provider))
+            if (!_nodeIdToProvider.TryGetValue(node, out INodeProvider? provider))
             {
                 ErrorUtilities.ThrowInternalError("Node {0} does not have a provider.", node);
             }
-
-            // Send the data.
-            provider.SendData(node, packet);
+            else
+            {
+                provider.SendData(node, packet);
+            }
         }
 
         /// <summary>
@@ -176,7 +170,7 @@ public void InitializeComponent(IBuildComponentHost host)
         {
             ErrorUtilities.VerifyThrow(_componentHost == null, "NodeManager already initialized.");
             ErrorUtilities.VerifyThrow(host != null, "We can't create a NodeManager with a null componentHost");
-            _componentHost = host;
+            _componentHost = host!;
 
             _inProcNodeProvider = _componentHost.GetComponent(BuildComponentType.InProcNodeProvider) as INodeProvider;
             _outOfProcNodeProvider = _componentHost.GetComponent(BuildComponentType.OutOfProcNodeProvider) as INodeProvider;
@@ -305,47 +299,57 @@ private void RemoveNodeFromMapping(int nodeId)
         /// </summary>
         /// <param name="nodeProvider">The provider used to create the node.</param>
         /// <param name="nodeConfiguration">The <see cref="NodeConfiguration"/> to use.</param>
-        /// <returns>The id of the node created.</returns>
-        private int AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration)
+        /// <param name="numberOfNodesToCreate">Number of nodes to be reused ot created.</param>
+        /// <returns>List of created nodes.</returns>
+        private IList<NodeInfo> AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration, int numberOfNodesToCreate)
         {
             // If no provider was passed in, we obviously can't create a node.
             if (nodeProvider == null)
             {
                 ErrorUtilities.ThrowInternalError("No node provider provided.");
-                return InvalidNodeId;
+                return new List<NodeInfo>();
             }
 
             // Are there any free slots on this provider?
             if (nodeProvider.AvailableNodes == 0)
             {
-                return InvalidNodeId;
+                return new List<NodeInfo>();
             }
 
             // Assign a global ID to the node we are about to create.
-            int nodeId;
+            int fromNodeId;
             if (nodeProvider is NodeProviderInProc)
             {
-                nodeId = _inprocNodeId;
+                fromNodeId = _inprocNodeId;
             }
             else
             {
-                nodeId = _nextNodeId;
-                _nextNodeId++;
+                // Reserve node numbers for all needed nodes.
+                fromNodeId = Interlocked.Add(ref _nextNodeId, numberOfNodesToCreate) - numberOfNodesToCreate;
             }
 
-            NodeConfiguration configToSend = nodeConfiguration.Clone();
-            configToSend.NodeId = nodeId;
 
             // Create the node and add it to our mapping.
-            bool createdNode = nodeProvider.CreateNode(nodeId, this, configToSend);
+            IList<NodeInfo> nodes = nodeProvider.CreateNodes(fromNodeId, this, AcquiredNodeConfigurationFactory, numberOfNodesToCreate);
+
+            foreach (NodeInfo node in nodes)
+            {
+                _nodeIdToProvider.Add(node.NodeId, nodeProvider);
+            }
+
+            return nodes;
 
-            if (!createdNode)
+            NodeConfiguration AcquiredNodeConfigurationFactory(NodeInfo nodeInfo)
             {
-                return InvalidNodeId;
+                var config = nodeConfiguration.Clone();
+                config.NodeId = nodeInfo.NodeId;
+                return config;
             }
+        }
 
-            _nodeIdToProvider.Add(nodeId, nodeProvider);
-            return nodeId;
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _outOfProcNodeProvider?.GetProcesses()!;
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 18e965c027b..88f5feea51b 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.Threading;
 using Microsoft.Build.Internal;
@@ -184,13 +186,34 @@ public void ShutdownAllNodes()
             ShutdownConnectedNodes(false /* no node reuse */);
         }
 
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
+        {
+            var nodes = new List<NodeInfo>(numberOfNodesToCreate);
+
+            for (int i = 0; i < numberOfNodesToCreate; i++)
+            {
+                int nodeId = nextNodeId + i;
+
+                NodeInfo nodeInfo = new(nodeId, ProviderType);
+                if (!CreateNode(nodeId, factory, configurationFactory(nodeInfo)))
+                {
+                    // If it fails let it return what we have created so far so caller can somehow acquire missing nodes.
+                    break;
+                }
+
+                nodes.Add(nodeInfo);
+            }
+
+            return nodes;
+        }
+
         /// <summary>
         /// Requests that a node be created on the specified machine.
         /// </summary>
         /// <param name="nodeId">The id of the node to create.</param>
         /// <param name="factory">The factory to use to create packets from this node.</param>
         /// <param name="configuration">The configuration for the node.</param>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        private bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
         {
             ErrorUtilities.VerifyThrow(nodeId != InvalidInProcNodeId, "Cannot create in-proc node.");
 
@@ -439,6 +462,9 @@ private void Dispose(bool disposing)
             }
         }
 
+        // The process here is the same as in the main node.
+        public IEnumerable<Process> GetProcesses() => throw new NotImplementedException();
+
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index 2430e450cac..96ebeef27f9 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -1,14 +1,15 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
-
 using Microsoft.Build.Shared;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
-using Microsoft.Build.Utilities;
+using System.Linq;
 
 #nullable disable
 
@@ -23,7 +24,7 @@ internal class NodeProviderOutOfProc : NodeProviderOutOfProcBase, INodeProvider
         /// <summary>
         /// A mapping of all the nodes managed by this provider.
         /// </summary>
-        private Dictionary<int, NodeContext> _nodeContexts;
+        private ConcurrentDictionary<int, NodeContext> _nodeContexts;
 
         /// <summary>
         /// Constructor.
@@ -69,48 +70,58 @@ public int AvailableNodes
         internal static Handshake GetHandshake(bool enableNodeReuse, bool enableLowPriority)
         {
             CommunicationsUtilities.Trace("MSBUILDNODEHANDSHAKESALT=\"{0}\", msbuildDirectory=\"{1}\", enableNodeReuse={2}, enableLowPriority={3}", Traits.MSBuildNodeHandshakeSalt, BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, enableNodeReuse, enableLowPriority);
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: enableNodeReuse, lowPriority: enableLowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess));
+            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: enableNodeReuse, lowPriority: enableLowPriority));
         }
 
         /// <summary>
-        /// Instantiates a new MSBuild process acting as a child node.
+        /// Instantiates a new MSBuild processes acting as a child nodes or connect to existing ones.
         /// </summary>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
         {
             ErrorUtilities.VerifyThrowArgumentNull(factory, nameof(factory));
 
-            if (_nodeContexts.Count >= ComponentHost.BuildParameters.MaxNodeCount)
+            // This can run concurrently. To be properly detect internal bug when we create more nodes than allowed
+            //   we add into _nodeContexts premise of future node and verify that it will not cross limits.
+            if (_nodeContexts.Count + numberOfNodesToCreate > ComponentHost.BuildParameters.MaxNodeCount)
             {
-                ErrorUtilities.ThrowInternalError("All allowable nodes already created ({0}).", _nodeContexts.Count);
-                return false;
+                ErrorUtilities.ThrowInternalError("Exceeded max node count of '{0}', current count is '{1}' ", ComponentHost.BuildParameters.MaxNodeCount, _nodeContexts.Count);
+                return new List<NodeInfo>();
             }
 
+            ConcurrentBag<NodeInfo> nodes = new();
+
             // Start the new process.  We pass in a node mode with a node number of 1, to indicate that we
             // want to start up just a standard MSBuild out-of-proc node.
             // Note: We need to always pass /nodeReuse to ensure the value for /nodeReuse from msbuild.rsp
             // (next to msbuild.exe) is ignored.
             string commandLineArgs = $"/nologo /nodemode:1 /nodeReuse:{ComponentHost.BuildParameters.EnableNodeReuse.ToString().ToLower()} /low:{ComponentHost.BuildParameters.LowPriority.ToString().ToLower()}";
 
-            // Make it here.
-            CommunicationsUtilities.Trace("Starting to acquire a new or existing node to establish node ID {0}...", nodeId);
+            CommunicationsUtilities.Trace("Starting to acquire {1} new or existing node(s) to establish nodes from ID {0} to {2}...", nextNodeId, numberOfNodesToCreate, nextNodeId + numberOfNodesToCreate - 1);
+
+            Handshake hostHandshake = new(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: ComponentHost.BuildParameters.EnableNodeReuse, lowPriority: ComponentHost.BuildParameters.LowPriority));
+            IList<NodeContext> nodeContexts = GetNodes(null, commandLineArgs, nextNodeId, factory, hostHandshake, NodeContextCreated, NodeContextTerminated, numberOfNodesToCreate);
+
+            if (nodeContexts.Count > 0)
+            {
+                return nodeContexts
+                    .Select(nc => new NodeInfo(nc.NodeId, ProviderType))
+                    .ToList();
+            }
 
-            Handshake hostHandshake = new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, nodeReuse: ComponentHost.BuildParameters.EnableNodeReuse, lowPriority: ComponentHost.BuildParameters.LowPriority, is64Bit: EnvironmentUtilities.Is64BitProcess));
-            NodeContext context = GetNode(null, commandLineArgs, nodeId, factory, hostHandshake, NodeContextTerminated);
+            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CouldNotConnectToMSBuildExe", ComponentHost.BuildParameters.NodeExeLocation));
 
-            if (context != null)
+            void NodeContextCreated(NodeContext context)
             {
-                _nodeContexts[nodeId] = context;
+                NodeInfo nodeInfo = new NodeInfo(context.NodeId, ProviderType);
+
+                _nodeContexts[context.NodeId] = context;
 
                 // Start the asynchronous read.
                 context.BeginAsyncPacketRead();
 
                 // Configure the node.
-                context.SendData(configuration);
-
-                return true;
+                context.SendData(configurationFactory(nodeInfo));
             }
-
-            throw new BuildAbortedException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CouldNotConnectToMSBuildExe", ComponentHost.BuildParameters.NodeExeLocation));
         }
 
         /// <summary>
@@ -132,12 +143,7 @@ public void SendData(int nodeId, INodePacket packet)
         public void ShutdownConnectedNodes(bool enableReuse)
         {
             // Send the build completion message to the nodes, causing them to shutdown or reset.
-            List<NodeContext> contextsToShutDown;
-
-            lock (_nodeContexts)
-            {
-                contextsToShutDown = new List<NodeContext>(_nodeContexts.Values);
-            }
+            var contextsToShutDown = new List<NodeContext>(_nodeContexts.Values);
 
             ShutdownConnectedNodes(contextsToShutDown, enableReuse);
         }
@@ -171,7 +177,7 @@ public void ShutdownAllNodes()
         public void InitializeComponent(IBuildComponentHost host)
         {
             this.ComponentHost = host;
-            _nodeContexts = new Dictionary<int, NodeContext>();
+            _nodeContexts = new ConcurrentDictionary<int, NodeContext>();
         }
 
         /// <summary>
@@ -197,10 +203,12 @@ static internal IBuildComponent CreateComponent(BuildComponentType componentType
         /// </summary>
         private void NodeContextTerminated(int nodeId)
         {
-            lock (_nodeContexts)
-            {
-                _nodeContexts.Remove(nodeId);
-            }
+            _nodeContexts.TryRemove(nodeId, out _);
+        }
+
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _nodeContexts.Values.Select(context => context.Process);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 07210e39621..c681f417bb5 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -9,6 +9,7 @@
 using System.IO;
 using System.IO.Pipes;
 using System.Diagnostics;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using System.Runtime.InteropServices;
@@ -23,8 +24,6 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
-
 using BackendNativeMethods = Microsoft.Build.BackEnd.NativeMethods;
 using Task = System.Threading.Tasks.Task;
 using Microsoft.Build.Framework;
@@ -67,8 +66,15 @@ internal abstract class NodeProviderOutOfProcBase
 
         /// <summary>
         /// Keeps track of the processes we've already checked for nodes so we don't check them again.
+        /// We decided to use ConcurrentDictionary of(string, byte) as common implementation of ConcurrentHashSet.
+        /// </summary>
+        private readonly ConcurrentDictionary<string, byte /*void*/> _processesToIgnore = new();
+
+        /// <summary>
+        /// Delegate used to tell the node provider that a context has been created.
         /// </summary>
-        private HashSet<string> _processesToIgnore = new HashSet<string>();
+        /// <param name="context">The created node context.</param>
+        internal delegate void NodeContextCreatedDelegate(NodeContext context);
 
         /// <summary>
         /// Delegate used to tell the node provider that a context has terminated.
@@ -143,7 +149,7 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
             // INodePacketFactory
             INodePacketFactory factory = new NodePacketFactory();
 
-            List<Process> nodeProcesses = GetPossibleRunningNodes().nodeProcesses;
+            List<Process> nodeProcesses = GetPossibleRunningNodes().nodeProcesses.ToList();
 
             // Find proper MSBuildTaskHost executable name
             string msbuildtaskhostExeName = NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost;
@@ -178,10 +184,16 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
         }
 
         /// <summary>
-        /// Finds or creates a child process which can act as a node.
+        /// Finds or creates a child processes which can act as a node.
         /// </summary>
-        /// <returns>The pipe stream representing the node.</returns>
-        protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, int nodeId, INodePacketFactory factory, Handshake hostHandshake, NodeContextTerminateDelegate terminateNode)
+        protected IList<NodeContext> GetNodes(string msbuildLocation,
+            string commandLineArgs,
+            int nextNodeId,
+            INodePacketFactory factory,
+            Handshake hostHandshake,
+            NodeContextCreatedDelegate createNode,
+            NodeContextTerminateDelegate terminateNode,
+            int numberOfNodesToCreate)
         {
 #if DEBUG
             if (Execution.BuildManager.WaitForDebugger)
@@ -206,115 +218,169 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
                 }
             }
 
+            // Get all process of possible running node processes for reuse and put them into ConcurrentQueue.
+            // Processes from this queue will be concurrently consumed by TryReusePossibleRunningNodes while
+            //    trying to connect to them and reuse them. When queue is empty, no process to reuse left
+            //    new node process will be started.
+            string expectedProcessName = null;
+            ConcurrentQueue<Process> possibleRunningNodes = null;
 #if FEATURE_NODE_REUSE
             // Try to connect to idle nodes if node reuse is enabled.
             if (_componentHost.BuildParameters.EnableNodeReuse)
             {
-                (string expectedProcessName, List<Process> processes) runningNodesTuple = GetPossibleRunningNodes(msbuildLocation);
+                IList<Process> possibleRunningNodesList;
+                (expectedProcessName, possibleRunningNodesList) = GetPossibleRunningNodes(msbuildLocation);
+                possibleRunningNodes = new ConcurrentQueue<Process>(possibleRunningNodesList);
+
+                if (possibleRunningNodesList.Count > 0)
+                {
+                    CommunicationsUtilities.Trace("Attempting to connect to {1} existing processes '{0}'...", expectedProcessName, possibleRunningNodesList.Count);
+                }
+            }
+#endif
+            ConcurrentQueue<NodeContext> nodeContexts = new();
+            ConcurrentQueue<Exception> exceptions = new();
+            Parallel.For(nextNodeId, nextNodeId + numberOfNodesToCreate, (nodeId) =>
+            {
+                try
+                {
+                    if (!TryReuseAnyFromPossibleRunningNodes(nodeId) && !StartNewNode(nodeId))
+                    {
+                        // We were unable to reuse or launch a node.
+                        CommunicationsUtilities.Trace("FAILED TO CONNECT TO A CHILD NODE");
+                    }
+                }
+                catch (Exception ex)
+                {
+                    // It will be rethrown as aggregate exception
+                    exceptions.Enqueue(ex);
+                }
+            });
+            if (!exceptions.IsEmpty)
+            {
+                ErrorUtilities.ThrowInternalError("Cannot acquire required number of nodes.", new AggregateException(exceptions.ToArray()));
+            }
+
+            return nodeContexts.ToList();
 
-                CommunicationsUtilities.Trace("Attempting to connect to each existing {1} process in turn to establish node {0}...", nodeId, runningNodesTuple.expectedProcessName);
-                foreach (Process nodeProcess in runningNodesTuple.processes)
+            bool TryReuseAnyFromPossibleRunningNodes(int nodeId)
+            {
+                while (possibleRunningNodes != null && possibleRunningNodes.TryDequeue(out var nodeToReuse))
                 {
-                    if (nodeProcess.Id == Process.GetCurrentProcess().Id)
+                    CommunicationsUtilities.Trace("Trying to connect to existing process {2} with id {1} to establish node {0}...", nodeId, nodeToReuse.Id, nodeToReuse.ProcessName);
+                    if (nodeToReuse.Id == Process.GetCurrentProcess().Id)
                     {
                         continue;
                     }
 
                     // Get the full context of this inspection so that we can always skip this process when we have the same taskhost context
-                    string nodeLookupKey = GetProcessesToIgnoreKey(hostHandshake, nodeProcess.Id);
-                    if (_processesToIgnore.Contains(nodeLookupKey))
+                    string nodeLookupKey = GetProcessesToIgnoreKey(hostHandshake, nodeToReuse.Id);
+                    if (_processesToIgnore.ContainsKey(nodeLookupKey))
                     {
                         continue;
                     }
 
                     // We don't need to check this again
-                    _processesToIgnore.Add(nodeLookupKey);
+                    _processesToIgnore.TryAdd(nodeLookupKey, default);
 
                     // Attempt to connect to each process in turn.
-                    Stream nodeStream = TryConnectToProcess(nodeProcess.Id, 0 /* poll, don't wait for connections */, hostHandshake);
+                    Stream nodeStream = TryConnectToProcess(nodeToReuse.Id, 0 /* poll, don't wait for connections */, hostHandshake);
                     if (nodeStream != null)
                     {
                         // Connection successful, use this node.
-                        CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeProcess.Id);
-                        return new NodeContext(nodeId, nodeProcess, nodeStream, factory, terminateNode);
+                        CommunicationsUtilities.Trace("Successfully connected to existed node {0} which is PID {1}", nodeId, nodeToReuse.Id);
+
+                        CreateNodeContext(nodeId, nodeToReuse, nodeStream);
+                        return true;
                     }
                 }
+
+                return false;
             }
-#endif
 
-            // None of the processes we tried to connect to allowed a connection, so create a new one.
-            // We try this in a loop because it is possible that there is another MSBuild multiproc
-            // host process running somewhere which is also trying to create nodes right now.  It might
-            // find our newly created node and connect to it before we get a chance.
-            CommunicationsUtilities.Trace("Could not connect to existing process, now creating a process...");
-            int retries = NodeCreationRetries;
-            while (retries-- > 0)
+            // Create a new node process.
+            bool StartNewNode(int nodeId)
             {
-#if FEATURE_NET35_TASKHOST
-                // We will also check to see if .NET 3.5 is installed in the case where we need to launch a CLR2 OOP TaskHost.
-                // Failure to detect this has been known to stall builds when Windows pops up a related dialog.
-                // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
-                // nodes because we should never be able to connect in this case.
-                string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
-                if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
+                CommunicationsUtilities.Trace("Could not connect to existing process, now creating a process...");
+
+                // We try this in a loop because it is possible that there is another MSBuild multiproc
+                // host process running somewhere which is also trying to create nodes right now.  It might
+                // find our newly created node and connect to it before we get a chance.
+                int retries = NodeCreationRetries;
+                while (retries-- > 0)
                 {
-                    if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
+#if FEATURE_NET35_TASKHOST
+                    // We will also check to see if .NET 3.5 is installed in the case where we need to launch a CLR2 OOP TaskHost.
+                    // Failure to detect this has been known to stall builds when Windows pops up a related dialog.
+                    // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
+                    // nodes because we should never be able to connect in this case.
+                    string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
+                    if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
                     {
-                        CommunicationsUtilities.Trace
+                        if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
+                        {
+                            CommunicationsUtilities.Trace
                             (
                                 "Failed to launch node from {0}. The required .NET Framework v3.5 is not installed or enabled. CommandLine: {1}",
                                 msbuildLocation,
                                 commandLineArgs
                             );
 
-                        string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
-                        throw new NodeFailedToLaunchException(null, nodeFailedToLaunchError);
+                            string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
+                            throw new NodeFailedToLaunchException(null, nodeFailedToLaunchError);
+                        }
                     }
-                }
 #endif
+                    // Create the node process
+                    Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
+                    _processesToIgnore.TryAdd(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id), default);
 
-                // Create the node process
-                Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
-                _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id));
+                    // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
+                    // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
+                    // to the debugger process. Instead, use MSBUILDDEBUGONSTART=1
 
-                // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
-                // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
-                // to the debugger process. Instead, use MSBUILDDEBUGONSTART=1
+                    // Now try to connect to it.
+                    Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
+                    if (nodeStream != null)
+                    {
+                        // Connection successful, use this node.
+                        CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
 
-                // Now try to connect to it.
-                Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
-                if (nodeStream != null)
-                {
-                    // Connection successful, use this node.
-                    CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
-                    return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);
-                }
+                        CreateNodeContext(nodeId, msbuildProcess, nodeStream);
+                        return true;
+                    }
 
-                if (msbuildProcess.HasExited)
-                {
-                    if (Traits.Instance.DebugNodeCommunication)
+                    if (msbuildProcess.HasExited)
                     {
-                        try
+                        if (Traits.Instance.DebugNodeCommunication)
                         {
-                            CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup", msbuildProcess.Id, msbuildProcess.ExitCode);
-                        }
-                        catch (InvalidOperationException)
-                        {
-                            // This case is common on Windows where we called CreateProcess and the Process object
-                            // can't get the exit code.
-                            CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup", msbuildProcess.Id);
+                            try
+                            {
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup", msbuildProcess.Id, msbuildProcess.ExitCode);
+                            }
+                            catch (InvalidOperationException)
+                            {
+                                // This case is common on Windows where we called CreateProcess and the Process object
+                                // can't get the exit code.
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup", msbuildProcess.Id);
+                            }
                         }
                     }
+                    else
+                    {
+                        CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node", msbuildProcess.Id);
+                    }
                 }
-                else
-                {
-                    CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node", msbuildProcess.Id);
-                }
+
+                return false;
             }
 
-            // We were unable to launch a node.
-            CommunicationsUtilities.Trace("FAILED TO CONNECT TO A CHILD NODE");
-            return null;
+            void CreateNodeContext(int nodeId, Process nodeToReuse, Stream nodeStream)
+            {
+                NodeContext nodeContext = new(nodeId, nodeToReuse, nodeStream, factory, terminateNode);
+                nodeContexts.Enqueue(nodeContext);
+                createNode(nodeContext);
+            }
         }
 
         /// <summary>
@@ -323,9 +389,9 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
         /// <param name="msbuildLocation"></param>
         /// <returns>
         /// Item 1 is the name of the process being searched for.
-        /// Item 2 is the list of processes themselves.
+        /// Item 2 is the ConcurrentQueue of ordered processes themselves.
         /// </returns>
-        private (string expectedProcessName, List<Process> nodeProcesses) GetPossibleRunningNodes(string msbuildLocation = null)
+        private (string expectedProcessName, IList<Process> nodeProcesses) GetPossibleRunningNodes(string msbuildLocation = null)
         {
             if (String.IsNullOrEmpty(msbuildLocation))
             {
@@ -334,12 +400,10 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
 
             var expectedProcessName = Path.GetFileNameWithoutExtension(GetCurrentHost() ?? msbuildLocation);
 
-            List<Process> nodeProcesses = new List<Process>(Process.GetProcessesByName(expectedProcessName));
-
-            // Trivial sort to try to prefer most recently used nodes
-            nodeProcesses.Sort((left, right) => left.Id - right.Id);
+            var processes = Process.GetProcessesByName(expectedProcessName);
+            Array.Sort(processes, (left, right) => left.Id.CompareTo(right.Id));
 
-            return (expectedProcessName, nodeProcesses);
+            return (expectedProcessName, processes);
         }
 
         /// <summary>
@@ -665,6 +729,8 @@ enum ExitPacketState
             /// </summary>
             private readonly Process _process;
 
+            internal Process Process { get { return _process; } }
+
             /// <summary>
             /// An array used to store the header byte for each packet when read.
             /// </summary>
@@ -728,6 +794,11 @@ public NodeContext(int nodeId, Process process,
                 _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
             }
 
+            /// <summary>
+            /// Id of node.
+            /// </summary>
+            public int NodeId => _nodeId;
+
             /// <summary>
             /// Starts a new asynchronous read operation for this node.
             /// </summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 7ac00b41d4d..b9a9d2a2f2f 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -9,6 +9,7 @@
 
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
+using System.Linq;
 
 #nullable disable
 
@@ -37,6 +38,11 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_baseTaskHostPath64;
 
+        /// <summary>
+        /// Store the 64-bit path for MSBuild / MSBuildTaskHost so that we don't have to keep recalculating it.
+        /// </summary>
+        private static string s_baseTaskHostPathArm64;
+
         /// <summary>
         /// Store the path for the 32-bit MSBuildTaskHost so that we don't have to keep re-calculating it.
         /// </summary>
@@ -57,6 +63,11 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_pathToX64Clr4;
 
+        /// <summary>
+        /// Store the path for the 64-bit MSBuild so that we don't have to keep re-calculating it.
+        /// </summary>
+        private static string s_pathToArm64Clr4;
+
         /// <summary>
         /// Name for MSBuild.exe
         /// </summary>
@@ -151,7 +162,7 @@ internal static string TaskHostNameForClr2TaskHost
         /// <summary>
         /// Instantiates a new MSBuild process acting as a child node.
         /// </summary>
-        public bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
+        public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory packetFactory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate)
         {
             throw new NotImplementedException("Use the other overload of CreateNode instead");
         }
@@ -353,8 +364,10 @@ internal static void ClearCachedTaskHostPaths()
             s_pathToX32Clr4 = null;
             s_pathToX64Clr2 = null;
             s_pathToX64Clr4 = null;
+            s_pathToArm64Clr4 = null;
             s_baseTaskHostPath = null;
             s_baseTaskHostPath64 = null;
+            s_baseTaskHostPathArm64 = null;
         }
 
         /// <summary>
@@ -392,13 +405,20 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
         internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
-            string toolPath;
+            string toolPath = null;
 
             s_baseTaskHostPath = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
             s_baseTaskHostPath64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64;
+            s_baseTaskHostPathArm64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryArm64;
+
             ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);
 
-            if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            {
+                // Unsupported, throw.
+                ErrorUtilities.ThrowInternalError("ARM64 CLR2 task hosts are not supported.");
+            }
+            else if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
             {
                 if (s_pathToX64Clr2 == null)
                 {
@@ -434,6 +454,15 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
 
                 toolPath = s_pathToX64Clr4;
             }
+            else if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64)
+            {
+                if (s_pathToArm64Clr4 == null)
+                {
+                    s_pathToArm64Clr4 = s_baseTaskHostPathArm64;
+                }
+
+                toolPath = s_pathToArm64Clr4;
+            }
             else
             {
                 if (s_pathToX32Clr4 == null)
@@ -509,7 +538,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
 
             // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
             // want to start up an MSBuild task host node.
-            string commandLineArgs = $" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} ";
+            string commandLineArgs = $" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} ";
 
             string msbuildLocation = GetMSBuildLocationFromHostContext(hostContext);
 
@@ -521,31 +550,36 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
 
             CommunicationsUtilities.Trace("For a host context of {0}, spawning executable from {1}.", hostContext.ToString(), msbuildLocation ?? "MSBuild.exe");
 
-            // Make it here.
-            NodeContext context = GetNode
-                                    (
-                                        msbuildLocation,
-                                        commandLineArgs,
-                                        (int)hostContext,
-                                        this,
-                                        new Handshake(hostContext),
-                                        NodeContextTerminated
-                                    );
-
-            if (context != null)
-            {
-                _nodeContexts[hostContext] = context;
+            // There is always one task host per host context so we always create just 1 one task host node here.
+            int nodeId = (int)hostContext;
+            IList<NodeContext> nodeContexts = GetNodes(
+                msbuildLocation,
+                commandLineArgs,
+                nodeId,
+                this,
+                new Handshake(hostContext),
+                NodeContextCreated,
+                NodeContextTerminated,
+                1);
+
+            return nodeContexts.Count == 1;
+        }
 
-                // Start the asynchronous read.
-                context.BeginAsyncPacketRead();
+        /// <summary>
+        /// Method called when a context created.
+        /// </summary>
+        private void NodeContextCreated(NodeContext context)
+        {
+            _nodeContexts[(HandshakeOptions)context.NodeId] = context;
 
-                _activeNodes.Add((int)hostContext);
-                _noNodesActiveEvent.Reset();
+            // Start the asynchronous read.
+            context.BeginAsyncPacketRead();
 
-                return true;
+            lock (_activeNodes)
+            {
+                _activeNodes.Add(context.NodeId);
             }
-
-            return false;
+            _noNodesActiveEvent.Reset();
         }
 
         /// <summary>
@@ -572,5 +606,10 @@ private void NodeContextTerminated(int nodeId)
                 }
             }
         }
+
+        public IEnumerable<Process> GetProcesses()
+        {
+            return _nodeContexts.Values.Select(context => context.Process);
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
index 7c539f906e9..2b2102095b8 100644
--- a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
@@ -4,6 +4,8 @@
 using System;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using System.Collections.Generic;
+using System.Diagnostics;
 
 #nullable disable
 
@@ -42,14 +44,10 @@ private TaskHostNodeManager()
 
         /// <summary>
         /// Creates a node on an available NodeProvider, if any..
+        /// Not used - base class <see cref="NodeProviderOutOfProcBase"/> implementation is reused instead.
         /// </summary>
-        /// <param name="configuration">The configuration to use for the remote node.</param>
-        /// <param name="nodeAffinity">The <see cref="NodeAffinity"/> to use.</param>
-        /// <returns>A NodeInfo describing the node created, or null if none could be created.</returns>
-        public NodeInfo CreateNode(NodeConfiguration configuration, NodeAffinity nodeAffinity)
-        {
-            throw new NotSupportedException("not used");
-        }
+        public IList<NodeInfo> CreateNodes(NodeConfiguration configuration, NodeAffinity affinity, int numberOfNodesToCreate)
+            => throw new NotSupportedException("not used");
 
         /// <summary>
         /// Sends data to the specified node.
@@ -171,5 +169,10 @@ static internal IBuildComponent CreateComponent(BuildComponentType type)
             ErrorUtilities.VerifyThrow(type == BuildComponentType.TaskHostNodeManager, "Cannot create component of type {0}", type);
             return new TaskHostNodeManager();
         }
+
+        IEnumerable<Process> INodeManager.GetProcesses()
+        {
+            return _outOfProcTaskHostNodeProvider.GetProcesses();
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/IBuildComponent.cs b/src/Build/BackEnd/Components/IBuildComponent.cs
index a133f4f31e1..6ee30b83ed9 100644
--- a/src/Build/BackEnd/Components/IBuildComponent.cs
+++ b/src/Build/BackEnd/Components/IBuildComponent.cs
@@ -1,8 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#nullable disable
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index bb2fce7940e..c261563d0e7 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -163,6 +163,15 @@ ISet<string> WarningsAsErrors
             set;
         }
 
+        /// <summary>
+        /// Set of warnings to not treat as errors. Only has any effect if WarningsAsErrors is non-null but empty.
+        /// </summary>
+        ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
@@ -234,6 +243,13 @@ MessageImportance MinimumRequiredMessageImportance
         /// <param name="codes">The list of warning codes to treat as errors.</param>
         void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes);
 
+        /// <summary>
+        /// Adds a set of warning codes to not treat as errors for the specified project instance ID.
+        /// </summary>
+        /// <param name="buildEventContext">A <see cref="BuildEventContext"/> to associate with the list of warning codes.</param>
+        /// <param name="codes">The list of warning codes not to treat as errors.</param>
+        void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes);
+
         /// <summary>
         /// Determines if the specified submission has logged an errors.
         /// </summary>
@@ -242,17 +258,24 @@ MessageImportance MinimumRequiredMessageImportance
         bool HasBuildSubmissionLoggedErrors(int submissionId);
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.
+        /// Get the warnings that will be promoted to errors for the specified context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>
+        /// <returns>A collection of warning codes that should be treated as errors.</returns>
         ICollection<string> GetWarningsAsErrors(BuildEventContext context);
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as messages for the specified project instance ID.
+        /// Get the warnings that will not be promoted to error for the specified context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will not be logged as errors.</param>
+        /// <returns>A collection of warning codes that should not be treated as errors.</returns>
+        ICollection<string> GetWarningsNotAsErrors(BuildEventContext context);
+
+        /// <summary>
+        /// Get the warnings that will be demoted to messages for the specified context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
-        /// <returns>A Hashset containing warning codes that should be treated as messages.</returns>
+        /// <returns>A collection of warning codes that should be treated as messages.</returns>
         ICollection<string> GetWarningsAsMessages(BuildEventContext context);
 
         #region Register
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index fd9becd085c..2f08099b333 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -4,12 +4,11 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
 using System.Threading;
-using System.Threading.Tasks.Dataflow;
+using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
@@ -103,7 +102,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <summary>
         /// The mapping of build request configuration ids to project file names.
         /// </summary>
-        private Dictionary<int, string> _projectFileMap;
+        private ConcurrentDictionary<int, string> _projectFileMap;
 
         /// <summary>
         /// The current state of the logging service
@@ -167,12 +166,12 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <summary>
         /// The next project ID to assign when a project evaluation started event is received.
         /// </summary>
-        private int _nextEvaluationId = 1;
+        private int _nextEvaluationId;
 
         /// <summary>
         /// The next project ID to assign when a project started event is received.
         /// </summary>
-        private int _nextProjectId = 1;
+        private int _nextProjectId;
 
         /// <summary>
         /// The next target ID to assign when a target started event is received.
@@ -220,6 +219,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// </summary>
         private IDictionary<int, ISet<string>> _warningsAsErrorsByProject;
 
+        /// <summary>
+        /// A list of warnings to not to be promoted to errors for an associated <see cref="BuildEventContext"/>.
+        /// </summary>
+        private IDictionary<int, ISet<string>> _warningsNotAsErrorsByProject;
+
         /// <summary>
         /// A list of warnings to treat as messages for an associated <see cref="BuildEventContext"/>.
         /// </summary>
@@ -234,14 +238,32 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         #region LoggingThread Data
 
         /// <summary>
-        /// The data flow buffer for logging events.
+        /// Queue for asynchronous event processing.
         /// </summary>
-        private BufferBlock<object> _loggingQueue;
+        private ConcurrentQueue<object> _eventQueue;
 
         /// <summary>
-        /// The data flow processor for logging events.
+        /// Event set when message is consumed from queue.
         /// </summary>
-        private ActionBlock<object> _loggingQueueProcessor;
+        private ManualResetEventSlim _dequeueEvent;
+        /// <summary>
+        /// Event set when queue become empty.
+        /// </summary>
+        private ManualResetEventSlim _emptyQueueEvent;
+        /// <summary>
+        /// Even set when message is added into queue.
+        /// </summary>
+        private ManualResetEventSlim _enqueueEvent;
+
+        /// <summary>
+        /// CTS for stopping logging event processing.
+        /// </summary>
+        private CancellationTokenSource _loggingEventProcessingCancellation;
+
+        /// <summary>
+        /// Task which pump/process messages from <see cref="_eventQueue"/>
+        /// </summary>
+        private Thread _loggingEventProcessingThread;
 
         /// <summary>
         /// The queue size above which the queue will close to messages from remote nodes.
@@ -271,7 +293,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <param name="nodeId">The node identifier.</param>
         protected LoggingService(LoggerMode loggerMode, int nodeId)
         {
-            _projectFileMap = new Dictionary<int, string>();
+            _projectFileMap = new ConcurrentDictionary<int, string>();
             _logMode = loggerMode;
             _loggers = new List<ILogger>();
             _loggerDescriptions = new List<LoggerDescription>();
@@ -296,7 +318,7 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
 
             if (_logMode == LoggerMode.Asynchronous)
             {
-                CreateLoggingEventQueue();
+                StartLoggingEventProcessing();
             }
 
             // Ensure the static constructor of ItemGroupLoggingHelper runs.
@@ -367,11 +389,8 @@ public int NextEvaluationId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextEvaluationId += MaxCPUCount + 2 /* We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)*/;
-                    return _nextEvaluationId;
-                }
+                // We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)
+                return Interlocked.Add(ref _nextEvaluationId, MaxCPUCount + 2);
             }
         }
 
@@ -383,11 +402,8 @@ public int NextProjectId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextProjectId += MaxCPUCount + 2 /* We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)*/;
-                    return _nextProjectId;
-                }
+                // We can create one node more than the maxCPU count (this can happen if either the inproc or out of proc node has not been created yet and the project collection needs to be counted also)
+                return Interlocked.Add(ref _nextProjectId, MaxCPUCount + 2);
             }
         }
 
@@ -399,11 +415,7 @@ public int NextTargetId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextTargetId++;
-                    return _nextTargetId;
-                }
+                return Interlocked.Increment(ref _nextTargetId);
             }
         }
 
@@ -415,11 +427,7 @@ public int NextTaskId
         {
             get
             {
-                lock (_lockObject)
-                {
-                    _nextTaskId++;
-                    return _nextTaskId;
-                }
+                return Interlocked.Increment(ref _nextTaskId);
             }
         }
 
@@ -480,6 +488,15 @@ public ISet<string> WarningsAsErrors
             set;
         } = null;
 
+        /// <summary>
+        /// Get of warnings to not treat as errors. Only has any effect if WarningsAsErrors is empty but not null.
+        /// </summary>
+        public ISet<string> WarningsNotAsErrors
+        {
+            get;
+            set;
+        } = null;
+
         /// <summary>
         /// A list of warnings to treat as low importance messages.
         /// </summary>
@@ -563,105 +580,115 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)
         }
 
         /// <summary>
-        /// Returns a hashset of warnings to be logged as errors for the specified build context.
+        /// Returns a collection of warnings to be logged as errors for the specified build context.
         /// </summary>
         /// <param name="context">The build context through which warnings will be logged as errors.</param>
         /// <returns>
         /// </returns>
         public ICollection<string> GetWarningsAsErrors(BuildEventContext context)
         {
-            int key = GetWarningsAsErrorOrMessageKey(context);
-
-            if (_warningsAsErrorsByProject != null && _warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))
-            {
-                if (WarningsAsErrors != null)
-                {
-                    warningsAsErrors.UnionWith(WarningsAsErrors);
-                }
+            return GetWarningsForProject(context, _warningsAsErrorsByProject, WarningsAsErrors);
+        }
 
-                return warningsAsErrors;
-            }
-            else
-            {
-                return WarningsAsErrors;
-            }
+        /// <summary>
+        /// Returns a collection of warnings not to be logged as errors for the specified build context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be kept as warnings.</param>
+        /// <returns>
+        /// </returns>
+        public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)
+        {
+            return GetWarningsForProject(context, _warningsNotAsErrorsByProject, WarningsNotAsErrors);
         }
 
+        /// <summary>
+        /// Returns a collection of warnings to be demoted to messages for the specified build context.
+        /// </summary>
+        /// <param name="context">The build context through which warnings will be logged as messages.</param>
+        /// <returns>
+        /// </returns>
         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)
+        {
+            return GetWarningsForProject(context, _warningsAsMessagesByProject, WarningsAsMessages);
+        }
+
+        /// <summary>
+        /// Helper method that unifies the logic for GetWarningsAsErrors, GetWarningsNotAsErrors, and GetWarningsAsMessages.
+        /// Specifically, this method returns a collection of codes that, within the context of a particular project, should
+        /// be treated specially. These tend to come from setting the associated properties in the project file. These are
+        /// added to previously known codes as necessary.
+        /// </summary>
+        /// <param name="context">The specific context in which to consider special treatment for warnings.</param>
+        /// <param name="warningsByProject">A dictionary of all warnings to be treated special by for which projects.</param>
+        /// <param name="warnings">Warning codes we already know should be promoted, demoted, or not promoted as relevant.</param>
+        /// <returns></returns>
+        private ICollection<string> GetWarningsForProject(BuildEventContext context, IDictionary<int, ISet<string>> warningsByProject, ISet<string> warnings)
         {
             int key = GetWarningsAsErrorOrMessageKey(context);
 
-            if (_warningsAsMessagesByProject != null && _warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))
+            if (warningsByProject != null && warningsByProject.TryGetValue(key, out ISet<string> newWarnings))
             {
-                if (WarningsAsMessages != null)
+                if (warnings != null)
                 {
-                    warningsAsMessages.UnionWith(WarningsAsMessages);
+                    newWarnings.UnionWith(warnings);
                 }
 
-                return warningsAsMessages;
+                return newWarnings;
             }
             else
             {
-                return WarningsAsMessages;
+                return warnings;
             }
         }
 
+        /// <summary>
+        /// Adds warning codes that should be treated as errors to the known set.
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider possible warnings to be promoted.</param>
+        /// <param name="codes">Codes to promote</param>
         public void AddWarningsAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
         {
-            lock (_lockObject)
-            {
-                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
-
-                if (_warningsAsErrorsByProject == null)
-                {
-                    _warningsAsErrorsByProject = new ConcurrentDictionary<int, ISet<string>>();
-                }
+            AddWarningsAsMessagesOrErrors(ref _warningsAsErrorsByProject, buildEventContext, codes);
+        }
 
-                if (!_warningsAsErrorsByProject.ContainsKey(key))
-                {
-                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
-                    _warningsAsErrorsByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
-                }
-            }
+        /// <summary>
+        /// Adds warning codes that should not be treated as errors even if WarnAsError is empty (specifying that all warnings should be promoted).
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider warnings not to be promoted.</param>
+        /// <param name="codes">Codes not to promote</param>
+        public void AddWarningsNotAsErrors(BuildEventContext buildEventContext, ISet<string> codes)
+        {
+            AddWarningsAsMessagesOrErrors(ref _warningsNotAsErrorsByProject, buildEventContext, codes);
         }
 
+        /// <summary>
+        /// Adds warning codes that should be treated as messages.
+        /// </summary>
+        /// <param name="buildEventContext">The context in which to consider warnings to be demoted.</param>
+        /// <param name="codes">Codes to demote</param>
         public void AddWarningsAsMessages(BuildEventContext buildEventContext, ISet<string> codes)
         {
-            lock (_lockObject)
-            {
-                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
-
-                if (_warningsAsMessagesByProject == null)
-                {
-                    _warningsAsMessagesByProject = new ConcurrentDictionary<int, ISet<string>>();
-                }
-
-                if (!_warningsAsMessagesByProject.ContainsKey(key))
-                {
-                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
-                    _warningsAsMessagesByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
-                }
-            }
+            AddWarningsAsMessagesOrErrors(ref _warningsAsMessagesByProject, buildEventContext, codes);
         }
 
         /// <summary>
-        /// Return whether or not the LoggingQueue has any events left in it
+        /// Adds warning codes to be treated or not treated as warnings or errors to the set of project-specific codes.
         /// </summary>
-        public bool LoggingQueueHasEvents
+        /// <param name="warningsByProject">Dictionary with what warnings are currently known (by project) that we will add to.</param>
+        /// <param name="buildEventContext">Context for the project to be added</param>
+        /// <param name="codes">Codes to add</param>
+        private void AddWarningsAsMessagesOrErrors(ref IDictionary<int, ISet<string>> warningsByProject, BuildEventContext buildEventContext, ISet<string> codes)
         {
-            get
+            lock (_lockObject)
             {
-                lock (_lockObject)
+                int key = GetWarningsAsErrorOrMessageKey(buildEventContext);
+
+                warningsByProject ??= new ConcurrentDictionary<int, ISet<string>>();
+
+                if (!warningsByProject.ContainsKey(key))
                 {
-                    if (_loggingQueue != null)
-                    {
-                        return _loggingQueue.Count > 0;
-                    }
-                    else
-                    {
-                        ErrorUtilities.ThrowInternalError("loggingQueue is null");
-                        return false;
-                    }
+                    // The same project instance can be built multiple times with different targets.  In this case the codes have already been added
+                    warningsByProject[key] = new HashSet<string>(codes, StringComparer.OrdinalIgnoreCase);
                 }
             }
         }
@@ -815,7 +842,7 @@ public void ShutdownComponent()
                         // 2. Terminate the logging event queue
                         if (_logMode == LoggerMode.Asynchronous)
                         {
-                            TerminateLoggingEventQueue();
+                            TerminateLoggingEventProcessing();
                         }
                     }
 
@@ -839,12 +866,7 @@ public void ShutdownComponent()
                     // sink for the central loggers.
                     _centralForwardingLoggerSinkId = -1;
 
-                    // Clean up anything related to the asynchronous logging
-                    if (_logMode == LoggerMode.Asynchronous)
-                    {
-                        _loggingQueue = null;
-                        _loggingQueueProcessor = null;
-                    }
+                    CleanLoggingEventProcessing();
 
                     _loggers = new List<ILogger>();
                     _loggerDescriptions = null;
@@ -878,7 +900,7 @@ public void PacketReceived(int node, INodePacket packet)
 
             LogMessagePacket loggingPacket = (LogMessagePacket)packet;
             InjectNonSerializedData(loggingPacket);
-            ProcessLoggingEvent(loggingPacket.NodeBuildEvent, allowThrottling: true);
+            ProcessLoggingEvent(loggingPacket.NodeBuildEvent);
         }
 
         /// <summary>
@@ -1104,46 +1126,43 @@ public void InitializeNodeLoggers(ICollection<LoggerDescription> descriptions, I
         /// <exception cref="InternalErrorException">buildEvent is null</exception>
         public void LogBuildEvent(BuildEventArgs buildEvent)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
+            ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
 
-                BuildWarningEventArgs warningEvent = null;
-                BuildErrorEventArgs errorEvent = null;
-                BuildMessageEventArgs messageEvent = null;
+            BuildWarningEventArgs warningEvent = null;
+            BuildErrorEventArgs errorEvent = null;
+            BuildMessageEventArgs messageEvent = null;
 
-                if ((warningEvent = buildEvent as BuildWarningEventArgs) != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    warningEvent.ProjectFile = GetAndVerifyProjectFileFromContext(warningEvent.BuildEventContext);
-                }
-                else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null && errorEvent.BuildEventContext != null && errorEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    errorEvent.ProjectFile = GetAndVerifyProjectFileFromContext(errorEvent.BuildEventContext);
-                }
-                else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null && messageEvent.BuildEventContext != null && messageEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    messageEvent.ProjectFile = GetAndVerifyProjectFileFromContext(messageEvent.BuildEventContext);
-                }
+            if ((warningEvent = buildEvent as BuildWarningEventArgs) != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                warningEvent.ProjectFile = GetAndVerifyProjectFileFromContext(warningEvent.BuildEventContext);
+            }
+            else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null && errorEvent.BuildEventContext != null && errorEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                errorEvent.ProjectFile = GetAndVerifyProjectFileFromContext(errorEvent.BuildEventContext);
+            }
+            else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null && messageEvent.BuildEventContext != null && messageEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                messageEvent.ProjectFile = GetAndVerifyProjectFileFromContext(messageEvent.BuildEventContext);
+            }
 
-                if (OnlyLogCriticalEvents)
-                {
-                    // Only log certain events if OnlyLogCriticalEvents is true
-                    if (
-                        (warningEvent != null)
-                        || (errorEvent != null)
-                        || (buildEvent is CustomBuildEventArgs)
-                        || (buildEvent is CriticalBuildMessageEventArgs)
-                       )
-                    {
-                        ProcessLoggingEvent(buildEvent);
-                    }
-                }
-                else
+            if (OnlyLogCriticalEvents)
+            {
+                // Only log certain events if OnlyLogCriticalEvents is true
+                if (
+                    (warningEvent != null)
+                    || (errorEvent != null)
+                    || (buildEvent is CustomBuildEventArgs)
+                    || (buildEvent is CriticalBuildMessageEventArgs)
+                   )
                 {
-                    // Log all events if OnlyLogCriticalEvents is false
                     ProcessLoggingEvent(buildEvent);
                 }
             }
+            else
+            {
+                // Log all events if OnlyLogCriticalEvents is false
+                ProcessLoggingEvent(buildEvent);
+            }
         }
 
         #endregion
@@ -1156,20 +1175,22 @@ public void LogBuildEvent(BuildEventArgs buildEvent)
         /// In Synchronous mode the event should be routed to the correct sink or logger right away
         /// </summary>
         /// <param name="buildEvent">BuildEventArgs to process</param>
-        /// <param name="allowThrottling"><code>true</code> to allow throttling, otherwise <code>false</code>.</param>
         /// <exception cref="InternalErrorException">buildEvent is null</exception>
-        internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
+        internal virtual void ProcessLoggingEvent(object buildEvent)
         {
             ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
             if (_logMode == LoggerMode.Asynchronous)
             {
-                // If the queue is at capacity, this call will block - the task returned by SendAsync only completes 
-                // when the message is actually consumed or rejected (permanently) by the buffer.
-                var task = _loggingQueue.SendAsync(buildEvent);
-                if (allowThrottling)
+                // Block until queue is not full.
+                while (_eventQueue.Count >= _queueCapacity)
                 {
-                    task.Wait();
+                    // Block and wait for dequeue event.
+                    _dequeueEvent.Wait();
+                    _dequeueEvent.Reset();
                 }
+
+                _eventQueue.Enqueue(buildEvent);
+                _enqueueEvent.Set();
             }
             else
             {
@@ -1181,41 +1202,21 @@ internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottlin
         }
 
         /// <summary>
-        /// Wait for the logging messages in the logging queue to be completly processed.
+        /// Wait for the logging messages in the logging queue to be completely processed.
         /// This is required because for Logging build finished or when the component is to shutdown
         /// we need to make sure we process all of the events before the build finished event is raised
         /// and we need to make sure we process all of the logging events before we shutdown the component.
         /// </summary>
-        internal void WaitForThreadToProcessEvents()
+        public void WaitForLoggingToProcessEvents()
         {
-            // This method may be called in the shutdown submission callback, this callback may be called after the logging service has 
-            // shutdown and nulled out the events we were going to wait on.
-            if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
+            while (_eventQueue?.IsEmpty == false)
             {
-                BufferBlock<object> loggingQueue = null;
-                ActionBlock<object> loggingQueueProcessor = null;
-
-                lock (_lockObject)
-                {
-                    loggingQueue = _loggingQueue;
-                    loggingQueueProcessor = _loggingQueueProcessor;
-
-                    // Replaces _loggingQueue and _loggingQueueProcessor with new one, this will assure that
-                    // no further messages could possibly be trying to be added into queue we are about to drain
-                    CreateLoggingEventQueue();
-                }
-
-                // Drain queue.
-                // This shall not be locked to avoid possible deadlock caused by
-                // event handlers to reenter 'this' instance while trying to log something.
-                if (loggingQueue != null)
-                {
-                    Debug.Assert(!Monitor.IsEntered(_lockObject));
-
-                    loggingQueue.Complete();
-                    loggingQueueProcessor.Completion.Wait();
-                }
+                _emptyQueueEvent?.Wait();
             }
+            // To avoid race condition when last message has been removed from queue but
+            //   not yet fully processed (handled by loggers), we need to make sure _emptyQueueEvent
+            //   is set as it is guaranteed to be in set state no sooner than after event has been processed.
+            _emptyQueueEvent?.Wait();
         }
 
         /// <summary>
@@ -1259,55 +1260,81 @@ private static int GetWarningsAsErrorOrMessageKey(BuildEventArgs buildEventArgs)
         }
 
         /// <summary>
-        /// Create a logging thread to process the logging queue
+        /// Create a logging thread to process the logging queue.
         /// </summary>
-        private void CreateLoggingEventQueue()
+        private void StartLoggingEventProcessing()
         {
-            // We are creating a two-node dataflow graph here.  The first node is a buffer, which will hold up to the number of
-            // logging events we have specified as the queueCapacity.  The second node is the processor which will actually process each message.
-            // When the capacity of the buffer is reached, further attempts to send messages to it will block.
-            // The reason we can't just set the BoundedCapacity on the processing block is that ActionBlock has some weird behavior
-            // when the queue capacity is reached.  Specifically, it will block new messages from being processed until it has
-            // entirely drained its input queue, as opposed to letting new ones in as old ones are processed.  This is logged as 
-            // a perf bug (305575) against Dataflow.  If they choose to fix it, we can eliminate the buffer node from the graph.
-            var dataBlockOptions = new DataflowBlockOptions
-            {
-                BoundedCapacity = Convert.ToInt32(_queueCapacity)
-            };
-
-            var loggingQueue = new BufferBlock<object>(dataBlockOptions);
-
-            var executionDataBlockOptions = new ExecutionDataflowBlockOptions
+            _eventQueue = new ConcurrentQueue<object>();
+            _dequeueEvent = new ManualResetEventSlim(false);
+            _emptyQueueEvent = new ManualResetEventSlim(false);
+            _enqueueEvent = new ManualResetEventSlim(false);
+            _loggingEventProcessingCancellation = new CancellationTokenSource();
+
+            _loggingEventProcessingThread = new Thread(LoggingEventProc);
+            _loggingEventProcessingThread.Name = $"MSBuild LoggingService events queue pump: {this.GetHashCode()}";
+            _loggingEventProcessingThread.IsBackground = true;
+            _loggingEventProcessingThread.Start();
+
+            void LoggingEventProc()
             {
-                BoundedCapacity = 1
-            };
+                var completeAdding = _loggingEventProcessingCancellation.Token;
+                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent.WaitHandle };
 
-            var loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
+                do
+                {
+                    if (_eventQueue.TryDequeue(out object ev))
+                    {
+                        LoggingEventProcessor(ev);
+                        _dequeueEvent.Set();
+                    }
+                    else
+                    {
+                        _emptyQueueEvent.Set();
 
-            var dataLinkOptions = new DataflowLinkOptions
-            {
-                PropagateCompletion = true
-            };
+                        // Wait for next event, or finish.
+                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)
+                        {
+                            WaitHandle.WaitAny(waitHandlesForNextEvent);
+                        }
 
-            loggingQueue.LinkTo(loggingQueueProcessor, dataLinkOptions);
+                        _enqueueEvent.Reset();
+                        _emptyQueueEvent.Reset();
+                    }
+                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);
 
-            lock (_lockObject)
-            {
-                _loggingQueue = loggingQueue;
-                _loggingQueueProcessor = loggingQueueProcessor;
+                _emptyQueueEvent.Set();
             }
         }
 
+
         /// <summary>
-        /// Wait for the logginQueue to empty and then terminate the logging thread
+        /// Clean resources used for logging event processing queue.
         /// </summary>
-        private void TerminateLoggingEventQueue()
+        private void CleanLoggingEventProcessing()
         {
-            // Dont accept any more items from other threads.
-            _loggingQueue.Complete();
+            _loggingEventProcessingCancellation?.Cancel();
+            _dequeueEvent?.Dispose();
+            _enqueueEvent?.Dispose();
+            _emptyQueueEvent?.Dispose();
+            _loggingEventProcessingCancellation?.Dispose();
+
+            _eventQueue = null;
+            _dequeueEvent = null;
+            _enqueueEvent = null;
+            _emptyQueueEvent = null;
+            _loggingEventProcessingCancellation = null;
+            _loggingEventProcessingThread = null;
+        }
 
-            // Wait for completion
-            _loggingQueueProcessor.Completion.Wait();
+        /// <summary>
+        /// Create a logging thread to process the logging queue
+        /// </summary>
+        private void TerminateLoggingEventProcessing()
+        {
+            // Capture pump task in local variable as cancelling event processing is nulling _loggingEventProcessingThread.
+            var pumpTask = _loggingEventProcessingThread;
+            _loggingEventProcessingCancellation.Cancel();
+            pumpTask.Join();
         }
 
         /// <summary>
@@ -1471,8 +1498,10 @@ private void RouteBuildEvent(object loggingEvent)
 
             if (loggingEvent is ProjectFinishedEventArgs projectFinishedEvent && projectFinishedEvent.BuildEventContext != null)
             {
-                _warningsAsErrorsByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
-                _warningsAsMessagesByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
+                int key = GetWarningsAsErrorOrMessageKey(projectFinishedEvent);
+                _warningsAsErrorsByProject?.Remove(key);
+                _warningsNotAsErrorsByProject?.Remove(key);
+                _warningsAsMessagesByProject?.Remove(key);
             }
 
             if (loggingEvent is BuildEventArgs loggingEventBuildArgs)
@@ -1712,14 +1741,12 @@ private string GetAndVerifyProjectFileFromContext(BuildEventContext context)
         private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
         {
             // This only applies if the user specified /nowarn at the command-line or added the warning code through the object model
-            //
             if (WarningsAsMessages?.Contains(warningEvent.Code) == true)
             {
                 return true;
             }
 
             // This only applies if the user specified <MSBuildWarningsAsMessages /> and there is a valid ProjectInstanceId
-            //
             if (_warningsAsMessagesByProject != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 if (_warningsAsMessagesByProject.TryGetValue(GetWarningsAsErrorOrMessageKey(warningEvent), out ISet<string> codesByProject))
@@ -1731,6 +1758,13 @@ private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
             return false;
         }
 
+        private bool WarningAsErrorNotOverriden(BuildWarningEventArgs warningEvent)
+        {
+            int key = GetWarningsAsErrorOrMessageKey(warningEvent);
+
+            return WarningsNotAsErrors?.Contains(warningEvent.Code) != true && !(_warningsNotAsErrorsByProject?.TryGetValue(key, out ISet<string> notToError) == true && notToError.Contains(warningEvent.Code));
+        }
+
         /// <summary>
         /// Determines if the specified warning should be treated as an error.
         /// </summary>
@@ -1739,12 +1773,10 @@ private bool ShouldTreatWarningAsMessage(BuildWarningEventArgs warningEvent)
         private bool ShouldTreatWarningAsError(BuildWarningEventArgs warningEvent)
         {
             // This only applies if the user specified /warnaserror from the command-line or added an empty set through the object model
-            //
             if (WarningsAsErrors != null)
             {
                 // Global warnings as errors apply to all projects.  If the list is empty or contains the code, the warning should be treated as an error
-                //
-                if (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningEvent.Code))
+                if ((WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningEvent)) || WarningsAsErrors.Contains(warningEvent.Code))
                 {
                     return true;
                 }
@@ -1752,17 +1784,19 @@ private bool ShouldTreatWarningAsError(BuildWarningEventArgs warningEvent)
 
             // This only applies if the user specified <MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors or <MSBuildWarningsAsErrors />
             // and there is a valid ProjectInstanceId for the warning.
-            //
             if (_warningsAsErrorsByProject != null && warningEvent.BuildEventContext != null && warningEvent.BuildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 // Attempt to get the list of warnings to treat as errors for the current project
-                //
-                if (_warningsAsErrorsByProject.TryGetValue(GetWarningsAsErrorOrMessageKey(warningEvent), out ISet<string> codesByProject))
+                int key = GetWarningsAsErrorOrMessageKey(warningEvent);
+                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> codesByProject))
                 {
                     // We create an empty set if all warnings should be treated as errors so that should be checked first.
                     // If the set is not empty, check the specific code.
-                    //
-                    return codesByProject != null && (codesByProject.Count == 0 || codesByProject.Contains(warningEvent.Code));
+                    ISet<string> codesToIgnoreByProject = null;
+                    _warningsNotAsErrorsByProject?.TryGetValue(key, out codesToIgnoreByProject);
+                    return codesByProject != null &&
+                        ((codesByProject.Count == 0 && (codesToIgnoreByProject is null || !codesToIgnoreByProject.Contains(warningEvent.Code)))
+                        || codesByProject.Contains(warningEvent.Code));
                 }
             }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index e1906fde381..214a5118c2c 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -33,14 +33,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogComment(BuildEventContext buildEventContext, MessageImportance importance, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for comment message.");
+                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for comment message.");
 
-                    LogCommentFromText(buildEventContext, importance, ResourceUtilities.GetResourceString(messageResourceName), messageArgs);
-                }
+                LogCommentFromText(buildEventContext, importance, ResourceUtilities.GetResourceString(messageResourceName), messageArgs);
             }
         }
 
@@ -55,10 +52,7 @@ public void LogComment(BuildEventContext buildEventContext, MessageImportance im
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message)
         {
-            lock (_lockObject)
-            {
-                this.LogCommentFromText(buildEventContext, importance, message, messageArgs: null);
-            }
+            this.LogCommentFromText(buildEventContext, importance, message, messageArgs: null);
         }
 
         /// <summary>
@@ -73,25 +67,22 @@ public void LogCommentFromText(BuildEventContext buildEventContext, MessageImpor
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object[] messageArgs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
-                    ErrorUtilities.VerifyThrow(message != null, "message was null");
-
-                    BuildMessageEventArgs buildEvent = new BuildMessageEventArgs
-                        (
-                            message,
-                            helpKeyword: null,
-                            senderName: "MSBuild",
-                            importance,
-                            DateTime.UtcNow,
-                            messageArgs
-                        );
-                    buildEvent.BuildEventContext = buildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
+                ErrorUtilities.VerifyThrow(message != null, "message was null");
+
+                BuildMessageEventArgs buildEvent = new BuildMessageEventArgs
+                    (
+                        message,
+                        helpKeyword: null,
+                        senderName: "MSBuild",
+                        importance,
+                        DateTime.UtcNow,
+                        messageArgs
+                    );
+                buildEvent.BuildEventContext = buildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
         #endregion
@@ -113,10 +104,7 @@ public void LogCommentFromText(BuildEventContext buildEventContext, MessageImpor
         /// <param name="messageArgs">Arguments for the string resource</param>
         public void LogError(BuildEventContext location, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                LogError(location, null, file, messageResourceName, messageArgs);
-            }
+            LogError(location, null, file, messageResourceName, messageArgs);
         }
 
         /// <summary>
@@ -130,14 +118,11 @@ public void LogError(BuildEventContext location, BuildEventFileInfo file, string
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogError(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
 
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
 
-                LogErrorFromText(buildEventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
-            }
+            LogErrorFromText(buildEventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -153,44 +138,41 @@ public void LogError(BuildEventContext buildEventContext, string subcategoryReso
         /// <exception cref="InternalErrorException">Message is null</exception>
         public void LogErrorFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "Must specify the buildEventContext");
-                ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
-                ErrorUtilities.VerifyThrow(message != null, "Need error message.");
-
-                string subcategory = null;
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "Must specify the buildEventContext");
+            ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
+            ErrorUtilities.VerifyThrow(message != null, "Need error message.");
 
-                if (subcategoryResourceName != null)
-                {
-                    subcategory = AssemblyResources.GetString(subcategoryResourceName);
-                }
+            string subcategory = null;
 
-                BuildErrorEventArgs buildEvent =
-                new BuildErrorEventArgs
-                (
-                    subcategory,
-                    errorCode,
-                    file.File,
-                    file.Line,
-                    file.Column,
-                    file.EndLine,
-                    file.EndColumn,
-                    message,
-                    helpKeyword,
-                    "MSBuild"
-                );
-
-                buildEvent.BuildEventContext = buildEventContext;
-                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
-                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                    buildEvent.ProjectFile = projectFile;
-                }
+            if (subcategoryResourceName != null)
+            {
+                subcategory = AssemblyResources.GetString(subcategoryResourceName);
+            }
 
-                ProcessLoggingEvent(buildEvent);
+            BuildErrorEventArgs buildEvent =
+            new BuildErrorEventArgs
+            (
+                subcategory,
+                errorCode,
+                file.File,
+                file.Line,
+                file.Column,
+                file.EndLine,
+                file.EndColumn,
+                message,
+                helpKeyword,
+                "MSBuild"
+            );
+
+            buildEvent.BuildEventContext = buildEventContext;
+            if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                buildEvent.ProjectFile = projectFile;
             }
+
+            ProcessLoggingEvent(buildEvent);
         }
 
         /// <summary>
@@ -204,39 +186,36 @@ public void LogErrorFromText(BuildEventContext buildEventContext, string subcate
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(invalidProjectFileException != null, "Need exception context.");
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext is null");
+            ErrorUtilities.VerifyThrow(invalidProjectFileException != null, "Need exception context.");
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext is null");
 
-                // Don't log the exception more than once.
-                if (!invalidProjectFileException.HasBeenLogged)
+            // Don't log the exception more than once.
+            if (!invalidProjectFileException.HasBeenLogged)
+            {
+                BuildErrorEventArgs buildEvent =
+                    new BuildErrorEventArgs
+                    (
+                        invalidProjectFileException.ErrorSubcategory,
+                        invalidProjectFileException.ErrorCode,
+                        invalidProjectFileException.ProjectFile,
+                        invalidProjectFileException.LineNumber,
+                        invalidProjectFileException.ColumnNumber,
+                        invalidProjectFileException.EndLineNumber,
+                        invalidProjectFileException.EndColumnNumber,
+                        invalidProjectFileException.BaseMessage,
+                        invalidProjectFileException.HelpKeyword,
+                        "MSBuild"
+                    );
+                buildEvent.BuildEventContext = buildEventContext;
+                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
                 {
-                    BuildErrorEventArgs buildEvent =
-                        new BuildErrorEventArgs
-                        (
-                            invalidProjectFileException.ErrorSubcategory,
-                            invalidProjectFileException.ErrorCode,
-                            invalidProjectFileException.ProjectFile,
-                            invalidProjectFileException.LineNumber,
-                            invalidProjectFileException.ColumnNumber,
-                            invalidProjectFileException.EndLineNumber,
-                            invalidProjectFileException.EndColumnNumber,
-                            invalidProjectFileException.BaseMessage,
-                            invalidProjectFileException.HelpKeyword,
-                            "MSBuild"
-                        );
-                    buildEvent.BuildEventContext = buildEventContext;
-                    if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                    {
-                        _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
-                        ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                        buildEvent.ProjectFile = projectFile;
-                    }
-
-                    ProcessLoggingEvent(buildEvent);
-                    invalidProjectFileException.HasBeenLogged = true;
+                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                    buildEvent.ProjectFile = projectFile;
                 }
+
+                ProcessLoggingEvent(buildEvent);
+                invalidProjectFileException.HasBeenLogged = true;
             }
         }
 
@@ -249,10 +228,7 @@ public void LogInvalidProjectFileError(BuildEventContext buildEventContext, Inva
         /// <param name="file">Provides file information about where the build error happened</param>
         public void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file)
         {
-            lock (_lockObject)
-            {
-                LogFatalError(buildEventContext, exception, file, "FatalBuildError");
-            }
+            LogFatalError(buildEventContext, exception, file, "FatalBuildError");
         }
 
         /// <summary>
@@ -266,12 +242,9 @@ public void LogFatalBuildError(BuildEventContext buildEventContext, Exception ex
         /// <exception cref="InternalErrorException">TaskName is null</exception>
         public void LogFatalTaskError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
+            ErrorUtilities.VerifyThrow(taskName != null, "Must specify the name of the task that failed.");
 
-                LogFatalError(buildEventContext, exception, file, "FatalTaskError", taskName);
-            }
+            LogFatalError(buildEventContext, exception, file, "FatalTaskError", taskName);
         }
 
         /// <summary>
@@ -286,21 +259,18 @@ public void LogFatalTaskError(BuildEventContext buildEventContext, Exception exc
         /// <exception cref="InternalErrorException">MessageResourceName is null</exception>
         public void LogFatalError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for error message.");
 
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out string helpKeyword, messageResourceName, messageArgs);
 #if DEBUG
-                message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
+            message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
 #endif
-                if (exception != null)
-                {
-                    message += Environment.NewLine + exception.ToString();
-                }
-
-                LogErrorFromText(buildEventContext, null, errorCode, helpKeyword, file, message);
+            if (exception != null)
+            {
+                message += Environment.NewLine + exception.ToString();
             }
+
+            LogErrorFromText(buildEventContext, null, errorCode, helpKeyword, file, message);
         }
 
         #endregion
@@ -323,22 +293,19 @@ public void LogFatalError(BuildEventContext buildEventContext, Exception excepti
         /// <param name="taskName">Name of the task which the warning is being raised from</param>
         public void LogTaskWarningFromException(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(taskName), "Must specify the name of the task that failed.");
+            ErrorUtilities.VerifyThrow(!String.IsNullOrEmpty(taskName), "Must specify the name of the task that failed.");
 
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, "FatalTaskError", taskName);
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, "FatalTaskError", taskName);
 #if DEBUG
-                message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
+            message += Environment.NewLine + "This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.";
 #endif
 
-                if (exception != null)
-                {
-                    message += Environment.NewLine + exception.ToString();
-                }
-
-                LogWarningFromText(buildEventContext, null, warningCode, helpKeyword, file, message);
+            if (exception != null)
+            {
+                message += Environment.NewLine + exception.ToString();
             }
+
+            LogWarningFromText(buildEventContext, null, warningCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -351,13 +318,10 @@ public void LogTaskWarningFromException(BuildEventContext buildEventContext, Exc
         /// <param name="messageArgs">Arguments for messageResourceName</param>
         public void LogWarning(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for warning message.");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), "Need resource string for warning message.");
 
-                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, messageResourceName, messageArgs);
-                LogWarningFromText(buildEventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
-            }
+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string warningCode, out string helpKeyword, messageResourceName, messageArgs);
+            LogWarningFromText(buildEventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
         }
 
         /// <summary>
@@ -371,43 +335,40 @@ public void LogWarning(BuildEventContext buildEventContext, string subcategoryRe
         /// <param name="message">Warning message to log</param>
         public void LogWarningFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
-                ErrorUtilities.VerifyThrow(message != null, "Need warning message.");
-                ErrorUtilities.VerifyThrow(buildEventContext != null, "Need a BuildEventContext");
+            ErrorUtilities.VerifyThrow(file != null, "Must specify the associated file.");
+            ErrorUtilities.VerifyThrow(message != null, "Need warning message.");
+            ErrorUtilities.VerifyThrow(buildEventContext != null, "Need a BuildEventContext");
 
-                string subcategory = null;
+            string subcategory = null;
 
-                if (!string.IsNullOrWhiteSpace(subcategoryResourceName))
-                {
-                    subcategory = AssemblyResources.GetString(subcategoryResourceName);
-                }
-
-                BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
-                    (
-                        subcategory,
-                        warningCode,
-                        file.File,
-                        file.Line,
-                        file.Column,
-                        file.EndLine,
-                        file.EndColumn,
-                        message,
-                        helpKeyword,
-                        "MSBuild"
-                    );
+            if (!string.IsNullOrWhiteSpace(subcategoryResourceName))
+            {
+                subcategory = AssemblyResources.GetString(subcategoryResourceName);
+            }
 
-                buildEvent.BuildEventContext = buildEventContext;
-                if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-                {
-                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
-                    ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
-                    buildEvent.ProjectFile = projectFile;
-                }
+            BuildWarningEventArgs buildEvent = new BuildWarningEventArgs
+                (
+                    subcategory,
+                    warningCode,
+                    file.File,
+                    file.Line,
+                    file.Column,
+                    file.EndLine,
+                    file.EndColumn,
+                    message,
+                    helpKeyword,
+                    "MSBuild"
+                );
 
-                ProcessLoggingEvent(buildEvent);
+            buildEvent.BuildEventContext = buildEventContext;
+            if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
+            {
+                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
+                buildEvent.ProjectFile = projectFile;
             }
+
+            ProcessLoggingEvent(buildEvent);
         }
 
         #endregion
@@ -419,31 +380,28 @@ public void LogWarningFromText(BuildEventContext buildEventContext, string subca
         /// </summary>
         public void LogBuildStarted()
         {
-            lock (_lockObject)
+            // If we're only logging critical events, don't risk causing all the resources to load by formatting
+            // a string that won't get emitted anyway.
+            string message = String.Empty;
+            if (!OnlyLogCriticalEvents)
             {
-                // If we're only logging critical events, don't risk causing all the resources to load by formatting
-                // a string that won't get emitted anyway.
-                string message = String.Empty;
-                if (!OnlyLogCriticalEvents)
-                {
-                    message = ResourceUtilities.GetResourceString("BuildStarted");
-                }
+                message = ResourceUtilities.GetResourceString("BuildStarted");
+            }
 
-                IDictionary<string, string> environmentProperties = null;
+            IDictionary<string, string> environmentProperties = null;
 
-                if (_componentHost?.BuildParameters != null)
-                {
-                    environmentProperties = _componentHost.BuildParameters.BuildProcessEnvironment;
-                }
+            if (_componentHost?.BuildParameters != null)
+            {
+                environmentProperties = _componentHost.BuildParameters.BuildProcessEnvironment;
+            }
 
-                BuildStartedEventArgs buildEvent = new BuildStartedEventArgs(message, null /* no help keyword */, environmentProperties);
+            BuildStartedEventArgs buildEvent = new BuildStartedEventArgs(message, null /* no help keyword */, environmentProperties);
 
-                // Raise the event with the filters
-                ProcessLoggingEvent(buildEvent);
-            }
+            // Raise the event with the filters
+            ProcessLoggingEvent(buildEvent);
 
             // Make sure we process this event before going any further
-            WaitForThreadToProcessEvents();
+            WaitForLoggingToProcessEvents();
         }
 
         /// <summary>
@@ -452,23 +410,20 @@ public void LogBuildStarted()
         /// <param name="success">Did the build pass or fail</param>
         public void LogBuildFinished(bool success)
         {
-            lock (_lockObject)
+            // If we're only logging critical events, don't risk causing all the resources to load by formatting
+            // a string that won't get emitted anyway.
+            string message = String.Empty;
+            if (!OnlyLogCriticalEvents)
             {
-                // If we're only logging critical events, don't risk causing all the resources to load by formatting
-                // a string that won't get emitted anyway.
-                string message = String.Empty;
-                if (!OnlyLogCriticalEvents)
-                {
-                    message = ResourceUtilities.GetResourceString(success ? "BuildFinishedSuccess" : "BuildFinishedFailure");
-                }
+                message = ResourceUtilities.GetResourceString(success ? "BuildFinishedSuccess" : "BuildFinishedFailure");
+            }
 
-                BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
+            BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
 
-                ProcessLoggingEvent(buildEvent);
-            }
+            ProcessLoggingEvent(buildEvent);
 
             // Make sure we process this event before going any further
-            WaitForThreadToProcessEvents();
+            WaitForLoggingToProcessEvents();
         }
 
         /// <inheritdoc />
@@ -482,36 +437,30 @@ public BuildEventContext CreateProjectCacheBuildEventContext(
             int projectInstanceId,
             string projectFile)
         {
-            lock (_lockObject)
-            {
-                int projectContextId = NextProjectId;
+            int projectContextId = NextProjectId;
 
-                // In the future if some LogProjectCacheStarted event is created, move this there to align with evaluation and build execution.
-                _projectFileMap[projectContextId] = projectFile;
+            // In the future if some LogProjectCacheStarted event is created, move this there to align with evaluation and build execution.
+            _projectFileMap[projectContextId] = projectFile;
 
-                // Because the project cache runs in the BuildManager, it makes some sense to associate logging with the in-proc node.
-                // If a invalid node id is used the messages become deferred in the console logger and spit out at the end.
-                int nodeId = Scheduler.InProcNodeId;
+            // Because the project cache runs in the BuildManager, it makes some sense to associate logging with the in-proc node.
+            // If a invalid node id is used the messages become deferred in the console logger and spit out at the end.
+            int nodeId = Scheduler.InProcNodeId;
 
-                return new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-            }
+            return new BuildEventContext(submissionId, nodeId, evaluationId, projectInstanceId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
         }
 
         /// <inheritdoc />
         public void LogProjectEvaluationStarted(BuildEventContext projectEvaluationEventContext, string projectFile)
         {
-            lock (_lockObject)
-            {
-                ProjectEvaluationStartedEventArgs evaluationEvent =
-                    new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
-                        projectFile)
-                    {
-                        BuildEventContext = projectEvaluationEventContext,
-                        ProjectFile = projectFile
-                    };
+            ProjectEvaluationStartedEventArgs evaluationEvent =
+                new ProjectEvaluationStartedEventArgs(ResourceUtilities.GetResourceString("EvaluationStarted"),
+                    projectFile)
+                {
+                    BuildEventContext = projectEvaluationEventContext,
+                    ProjectFile = projectFile
+                };
 
-                ProcessLoggingEvent(evaluationEvent);
-            }
+            ProcessLoggingEvent(evaluationEvent);
         }
 
         /// <summary>
@@ -532,22 +481,19 @@ public void LogProjectEvaluationFinished(
             IEnumerable items,
             ProfilerResult? profilerResult)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(projectEvaluationEventContext != null, "projectBuildEventContext");
+            ErrorUtilities.VerifyThrow(projectEvaluationEventContext != null, "projectBuildEventContext");
 
-                ProjectEvaluationFinishedEventArgs buildEvent =
-                    new ProjectEvaluationFinishedEventArgs(ResourceUtilities.GetResourceString("EvaluationFinished"), projectFile)
-                    {
-                        BuildEventContext = projectEvaluationEventContext,
-                        ProjectFile = projectFile,
-                        ProfilerResult = profilerResult,
-                        GlobalProperties = globalProperties,
-                        Properties = properties,
-                        Items = items
-                    };
-                ProcessLoggingEvent(buildEvent);
-            }
+            ProjectEvaluationFinishedEventArgs buildEvent =
+                new ProjectEvaluationFinishedEventArgs(ResourceUtilities.GetResourceString("EvaluationFinished"), projectFile)
+                {
+                    BuildEventContext = projectEvaluationEventContext,
+                    ProjectFile = projectFile,
+                    ProfilerResult = profilerResult,
+                    GlobalProperties = globalProperties,
+                    Properties = properties,
+                    Items = items
+                };
+            ProcessLoggingEvent(buildEvent);
         }
 
         /// <summary>
@@ -578,76 +524,73 @@ public BuildEventContext LogProjectStarted(
             int evaluationId = BuildEventContext.InvalidEvaluationId,
             int projectContextId = BuildEventContext.InvalidProjectContextId)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(nodeBuildEventContext != null, "Need a nodeBuildEventContext");
+
+            if (projectContextId == BuildEventContext.InvalidProjectContextId)
             {
-                ErrorUtilities.VerifyThrow(nodeBuildEventContext != null, "Need a nodeBuildEventContext");
+                projectContextId = NextProjectId;
 
-                if (projectContextId == BuildEventContext.InvalidProjectContextId)
+                // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
+                if (_projectFileMap.ContainsKey(projectContextId))
                 {
-                    projectContextId = NextProjectId;
+                    ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should not already be in the ID-to-file mapping!", projectContextId, projectFile);
+                }
 
-                    // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-                    if (_projectFileMap.ContainsKey(projectContextId))
+                _projectFileMap[projectContextId] = projectFile;
+            }
+            else
+            {
+                // A projectContextId was provided, so use it with some sanity checks
+                if (_projectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
+                {
+                    if (!projectFile.Equals(existingProjectFile, StringComparison.OrdinalIgnoreCase))
                     {
-                        ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should not already be in the ID-to-file mapping!", projectContextId, projectFile);
+                        ErrorUtilities.ThrowInternalError("ContextID {0} was already in the ID-to-project file mapping but the project file {1} did not match the provided one {2}!", projectContextId, existingProjectFile, projectFile);
                     }
-
-                    _projectFileMap[projectContextId] = projectFile;
                 }
                 else
                 {
-                    // A projectContextId was provided, so use it with some sanity checks
-                    if (_projectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
+                    // Currently, an existing projectContextId can only be provided in the project cache scenario, which runs on the in-proc node.
+                    // If there was a cache miss and the build was scheduled on a worker node, it may not have seen this projectContextId yet.
+                    // So we only need this sanity check for the in-proc node.
+                    if (nodeBuildEventContext.NodeId == Scheduler.InProcNodeId)
                     {
-                        if (!projectFile.Equals(existingProjectFile, StringComparison.OrdinalIgnoreCase))
-                        {
-                            ErrorUtilities.ThrowInternalError("ContextID {0} was already in the ID-to-project file mapping but the project file {1} did not match the provided one {2}!", projectContextId, existingProjectFile, projectFile);
-                        }
-                    }
-                    else
-                    {
-                        // Currently, an existing projectContextId can only be provided in the project cache scenario, which runs on the in-proc node.
-                        // If there was a cache miss and the build was scheduled on a worker node, it may not have seen this projectContextId yet.
-                        // So we only need this sanity check for the in-proc node.
-                        if (nodeBuildEventContext.NodeId == Scheduler.InProcNodeId)
-                        {
-                            ErrorUtilities.ThrowInternalError("ContextID {0} should have been in the ID-to-project file mapping but wasn't!", projectContextId);
-                        }
-
-                        _projectFileMap[projectContextId] = projectFile;
+                        ErrorUtilities.ThrowInternalError("ContextID {0} should have been in the ID-to-project file mapping but wasn't!", projectContextId);
                     }
+
+                    _projectFileMap[projectContextId] = projectFile;
                 }
+            }
 
-                BuildEventContext projectBuildEventContext = new BuildEventContext(submissionId, nodeBuildEventContext.NodeId, evaluationId, configurationId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+            BuildEventContext projectBuildEventContext = new BuildEventContext(submissionId, nodeBuildEventContext.NodeId, evaluationId, configurationId, projectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
 
-                ErrorUtilities.VerifyThrow(parentBuildEventContext != null, "Need a parentBuildEventContext");
+            ErrorUtilities.VerifyThrow(parentBuildEventContext != null, "Need a parentBuildEventContext");
 
-                ErrorUtilities.VerifyThrow(_configCache.Value.HasConfiguration(configurationId), "Cannot find the project configuration while injecting non-serialized data from out-of-proc node.");
-                var buildRequestConfiguration = _configCache.Value[configurationId];
+            ErrorUtilities.VerifyThrow(_configCache.Value.HasConfiguration(configurationId), "Cannot find the project configuration while injecting non-serialized data from out-of-proc node.");
+            var buildRequestConfiguration = _configCache.Value[configurationId];
 
-                // Always log GlobalProperties on ProjectStarted
-                // See https://github.com/dotnet/msbuild/issues/6341 for details
-                IDictionary<string, string> globalProperties = buildRequestConfiguration.GlobalProperties.ToDictionary();
+            // Always log GlobalProperties on ProjectStarted
+            // See https://github.com/dotnet/msbuild/issues/6341 for details
+            IDictionary<string, string> globalProperties = buildRequestConfiguration.GlobalProperties.ToDictionary();
 
-                var buildEvent = new ProjectStartedEventArgs
-                    (
-                        configurationId,
-                        message: null,
-                        helpKeyword: null,
-                        projectFile,
-                        targetNames,
-                        properties,
-                        items,
-                        parentBuildEventContext,
-                        globalProperties,
-                        buildRequestConfiguration.ToolsVersion
-                    );
-                buildEvent.BuildEventContext = projectBuildEventContext;
+            var buildEvent = new ProjectStartedEventArgs
+                (
+                    configurationId,
+                    message: null,
+                    helpKeyword: null,
+                    projectFile,
+                    targetNames,
+                    properties,
+                    items,
+                    parentBuildEventContext,
+                    globalProperties,
+                    buildRequestConfiguration.ToolsVersion
+                );
+            buildEvent.BuildEventContext = projectBuildEventContext;
 
-                ProcessLoggingEvent(buildEvent);
+            ProcessLoggingEvent(buildEvent);
 
-                return projectBuildEventContext;
-            }
+            return projectBuildEventContext;
         }
 
         /// <summary>
@@ -659,25 +602,22 @@ public BuildEventContext LogProjectStarted(
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogProjectFinished(BuildEventContext projectBuildEventContext, string projectFile, bool success)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
+            ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext");
 
-                ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs
-                    (
-                        message: null,
-                        helpKeyword: null,
-                        projectFile,
-                        success
-                    );
-                buildEvent.BuildEventContext = projectBuildEventContext;
-                ProcessLoggingEvent(buildEvent);
+            ProjectFinishedEventArgs buildEvent = new ProjectFinishedEventArgs
+                (
+                    message: null,
+                    helpKeyword: null,
+                    projectFile,
+                    success
+                );
+            buildEvent.BuildEventContext = projectBuildEventContext;
+            ProcessLoggingEvent(buildEvent);
 
-                // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-                if (!_projectFileMap.Remove(projectBuildEventContext.ProjectContextId))
-                {
-                    ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should be in the ID-to-file mapping!", projectBuildEventContext.ProjectContextId, projectFile);
-                }
+            // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
+            if (!_projectFileMap.TryRemove(projectBuildEventContext.ProjectContextId, out _))
+            {
+                ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should be in the ID-to-file mapping!", projectBuildEventContext.ProjectContextId, projectFile);
             }
         }
 
@@ -694,38 +634,35 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, string parentTargetName, TargetBuiltReason buildReason)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext is null");
+            BuildEventContext targetBuildEventContext = new BuildEventContext
+                (
+                    projectBuildEventContext.SubmissionId,
+                    projectBuildEventContext.NodeId,
+                    projectBuildEventContext.ProjectInstanceId,
+                    projectBuildEventContext.ProjectContextId,
+                    NextTargetId,
+                    BuildEventContext.InvalidTaskId
+                );
+
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(projectBuildEventContext != null, "projectBuildEventContext is null");
-                BuildEventContext targetBuildEventContext = new BuildEventContext
+                TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
                     (
-                        projectBuildEventContext.SubmissionId,
-                        projectBuildEventContext.NodeId,
-                        projectBuildEventContext.ProjectInstanceId,
-                        projectBuildEventContext.ProjectContextId,
-                        NextTargetId,
-                        BuildEventContext.InvalidTaskId
+                        message: null,
+                        helpKeyword: null,
+                        targetName,
+                        projectFile,
+                        projectFileOfTargetElement,
+                        parentTargetName,
+                        buildReason,
+                        DateTime.UtcNow
                     );
-
-                if (!OnlyLogCriticalEvents)
-                {
-                    TargetStartedEventArgs buildEvent = new TargetStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            targetName,
-                            projectFile,
-                            projectFileOfTargetElement,
-                            parentTargetName,
-                            buildReason,
-                            DateTime.UtcNow
-                        );
-                    buildEvent.BuildEventContext = targetBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
-
-                return targetBuildEventContext;
+                buildEvent.BuildEventContext = targetBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
+
+            return targetBuildEventContext;
         }
 
         /// <summary>
@@ -740,26 +677,23 @@ public BuildEventContext LogTargetStarted(BuildEventContext projectBuildEventCon
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTargetFinished(BuildEventContext targetBuildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, bool success, IEnumerable<TaskItem> targetOutputs)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
-
-                    TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            targetName,
-                            projectFile,
-                            projectFileOfTargetElement,
-                            success,
-                            targetOutputs
-                        );
-
-                    buildEvent.BuildEventContext = targetBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
+
+                TargetFinishedEventArgs buildEvent = new TargetFinishedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        targetName,
+                        projectFile,
+                        projectFileOfTargetElement,
+                        success,
+                        targetOutputs
+                    );
+
+                buildEvent.BuildEventContext = targetBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -773,22 +707,19 @@ public void LogTargetFinished(BuildEventContext targetBuildEventContext, string
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "targetBuildEventContext is null");
-                if (!OnlyLogCriticalEvents)
-                {
-                    TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName
+                    );
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -805,37 +736,34 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column)
         {
-            lock (_lockObject)
+            ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
+            BuildEventContext taskBuildEventContext = new BuildEventContext
+                (
+                    targetBuildEventContext.SubmissionId,
+                    targetBuildEventContext.NodeId,
+                    targetBuildEventContext.ProjectInstanceId,
+                    targetBuildEventContext.ProjectContextId,
+                    targetBuildEventContext.TargetId,
+                    NextTaskId
+                );
+
+            if (!OnlyLogCriticalEvents)
             {
-                ErrorUtilities.VerifyThrow(targetBuildEventContext != null, "targetBuildEventContext is null");
-                BuildEventContext taskBuildEventContext = new BuildEventContext
+                TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
                     (
-                        targetBuildEventContext.SubmissionId,
-                        targetBuildEventContext.NodeId,
-                        targetBuildEventContext.ProjectInstanceId,
-                        targetBuildEventContext.ProjectContextId,
-                        targetBuildEventContext.TargetId,
-                        NextTaskId
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName
                     );
-
-                if (!OnlyLogCriticalEvents)
-                {
-                    TaskStartedEventArgs buildEvent = new TaskStartedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    buildEvent.LineNumber = line;
-                    buildEvent.ColumnNumber = column;
-                    ProcessLoggingEvent(buildEvent);
-                }
-
-                return taskBuildEventContext;
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                buildEvent.LineNumber = line;
+                buildEvent.ColumnNumber = column;
+                ProcessLoggingEvent(buildEvent);
             }
+
+            return taskBuildEventContext;
         }
 
         /// <summary>
@@ -849,24 +777,21 @@ public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventConte
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
         public void LogTaskFinished(BuildEventContext taskBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, bool success)
         {
-            lock (_lockObject)
+            if (!OnlyLogCriticalEvents)
             {
-                if (!OnlyLogCriticalEvents)
-                {
-                    ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "taskBuildEventContext is null");
-
-                    TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs
-                        (
-                            message: null,
-                            helpKeyword: null,
-                            projectFile,
-                            projectFileOfTaskNode,
-                            taskName,
-                            success
-                        );
-                    buildEvent.BuildEventContext = taskBuildEventContext;
-                    ProcessLoggingEvent(buildEvent);
-                }
+                ErrorUtilities.VerifyThrow(taskBuildEventContext != null, "taskBuildEventContext is null");
+
+                TaskFinishedEventArgs buildEvent = new TaskFinishedEventArgs
+                    (
+                        message: null,
+                        helpKeyword: null,
+                        projectFile,
+                        projectFileOfTaskNode,
+                        taskName,
+                        success
+                    );
+                buildEvent.BuildEventContext = taskBuildEventContext;
+                ProcessLoggingEvent(buildEvent);
             }
         }
 
@@ -882,19 +807,16 @@ public void LogTaskFinished(BuildEventContext taskBuildEventContext, string task
         /// <param name="properties">The list of properties assocated with the event.</param>
         public void LogTelemetry(BuildEventContext buildEventContext, string eventName, IDictionary<string, string> properties)
         {
-            lock (_lockObject)
-            {
-                ErrorUtilities.VerifyThrow(eventName != null, "eventName is null");
+            ErrorUtilities.VerifyThrow(eventName != null, "eventName is null");
 
-                TelemetryEventArgs telemetryEvent = new TelemetryEventArgs
-                {
-                    BuildEventContext = buildEventContext,
-                    EventName = eventName,
-                    Properties = properties == null ? new Dictionary<string, string>() : new Dictionary<string, string>(properties)
-                };
+            TelemetryEventArgs telemetryEvent = new TelemetryEventArgs
+            {
+                BuildEventContext = buildEventContext,
+                EventName = eventName,
+                Properties = properties == null ? new Dictionary<string, string>() : new Dictionary<string, string>(properties)
+            };
 
-                ProcessLoggingEvent(telemetryEvent);
-            }
+            ProcessLoggingEvent(telemetryEvent);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index a6171cb4e91..5b8955d74b0 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -155,6 +155,11 @@ internal ICollection<string> GetWarningsAsErrors()
             return LoggingService.GetWarningsAsErrors(BuildEventContext);
         }
 
+        internal ICollection<string> GetWarningsNotAsErrors()
+        {
+            return LoggingService.GetWarningsNotAsErrors(BuildEventContext);
+        }
+
         internal ICollection<string> GetWarningsAsMessages()
         {
             return LoggingService.GetWarningsAsMessages(BuildEventContext);
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 3fdbf100f25..4bbb3ae656d 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -576,13 +576,20 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
 
         public async Task ShutDown()
         {
+            bool shouldInitiateShutdownState = _serviceState != ProjectCacheServiceState.ShutdownStarted && _serviceState != ProjectCacheServiceState.ShutdownFinished;
+
+            if (!shouldInitiateShutdownState)
+            {
+                return;
+            }
+
             BuildEventContext buildEventContext = BuildEventContext.Invalid;
             BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;
             var pluginLogger = new LoggingServiceToPluginLoggerAdapter(
                 _loggingService,
                 BuildEventContext.Invalid,
                 BuildEventFileInfo.Empty);
-
+            
             try
             {
                 SetState(ProjectCacheServiceState.ShutdownStarted);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index d39ce74cb49..505bc1d2df1 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -372,7 +372,6 @@ ISet<string> removeMetadata
         )
         {
             // todo this is duplicated logic with the item computation logic from evaluation (in LazyIncludeOperation.SelectItems)
-
             ProjectErrorUtilities.VerifyThrowInvalidProject(!(keepMetadata != null && removeMetadata != null), originalItem.KeepMetadataLocation, "KeepAndRemoveMetadataMutuallyExclusive");
             List<ProjectItemInstance> items = new List<ProjectItemInstance>();
 
@@ -433,7 +432,11 @@ ISet<string> removeMetadata
                     string[] includeSplitFiles = EngineFileUtilities.GetFileListEscaped(
                         Project.Directory,
                         includeSplit,
-                        excludes);
+                        excludes,
+                        loggingMechanism: LoggingContext,
+                        includeLocation: originalItem.IncludeLocation,
+                        excludeLocation: originalItem.ExcludeLocation,
+                        disableExcludeDriveEnumerationWarning: true);
 
                     foreach (string includeSplitFile in includeSplitFiles)
                     {
@@ -454,7 +457,11 @@ ISet<string> removeMetadata
 
             foreach (string excludeSplit in excludes)
             {
-                string[] excludeSplitFiles = EngineFileUtilities.GetFileListUnescaped(Project.Directory, excludeSplit);
+                string[] excludeSplitFiles = EngineFileUtilities.GetFileListUnescaped(
+                    Project.Directory,
+                    excludeSplit,
+                    loggingMechanism: LoggingContext,
+                    excludeLocation: originalItem.ExcludeLocation);
 
                 foreach (string excludeSplitFile in excludeSplitFiles)
                 {
@@ -539,7 +546,12 @@ Expander<ProjectPropertyInstance, ProjectItemInstance> expander
                 // Don't unescape wildcards just yet - if there were any escaped, the caller wants to treat them
                 // as literals. Everything else is safe to unescape at this point, since we're only matching
                 // against the file system.
-                string[] fileList = EngineFileUtilities.GetFileListEscaped(Project.Directory, piece);
+                string[] fileList = EngineFileUtilities.GetFileListEscaped(
+                    Project.Directory,
+                    piece,
+                    loggingMechanism: LoggingContext,
+                    includeLocation: specificationLocation,
+                    excludeLocation: specificationLocation);
 
                 foreach (string file in fileList)
                 {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index b8d7794cbef..d95771ae3cd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -823,6 +823,18 @@ private async Task BuildAndReport()
             catch (Exception ex)
             {
                 thrownException = ex;
+                if (ex is BuildAbortedException)
+                {
+                    // The build was likely cancelled. We do not need to log an error in this case.
+                }
+                else if (_projectLoggingContext is null)
+                {
+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, "UnhandledMSBuildError", ex.ToString());
+                }
+                else
+                {
+                    _projectLoggingContext.LogError(BuildEventFileInfo.Empty, "UnhandledMSBuildError", ex.ToString());
+                }
 
                 if (ExceptionHandling.IsCriticalException(ex))
                 {
@@ -1304,19 +1316,16 @@ private void VerifyIsNotZombie()
         private void ConfigureWarningsAsErrorsAndMessages()
         {
             // Gather needed objects
-            //
             ProjectInstance project = _requestEntry?.RequestConfiguration?.Project;
             BuildEventContext buildEventContext = _projectLoggingContext?.BuildEventContext;
             ILoggingService loggingService = _projectLoggingContext?.LoggingService;
 
             // Ensure everything that is required is available at this time
-            //
             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
                 if (String.Equals(project.GetPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
                 {
                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors
-                    //
                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());
                 }
                 else
@@ -1329,6 +1338,13 @@ private void ConfigureWarningsAsErrorsAndMessages()
                     }
                 }
 
+                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetPropertyValue(MSBuildConstants.WarningsNotAsErrors));
+
+                if (warningsNotAsErrors?.Count > 0)
+                {
+                    loggingService.AddWarningsNotAsErrors(buildEventContext, warningsNotAsErrors);
+                }
+
                 ISet<string> warningsAsMessages = ParseWarningCodes(project.GetPropertyValue(MSBuildConstants.WarningsAsMessages));
 
                 if (warningsAsMessages?.Count > 0)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index b5c40b3cc79..ec05dfd174f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -399,8 +399,19 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
             // If this is an Intrinsic task, it gets handled in a special fashion.
             if (_taskNode == null)
             {
-                ExecuteIntrinsicTask(bucket);
-                taskResult = new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null);
+                try
+                {
+                    ExecuteIntrinsicTask(bucket);
+                    taskResult = new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null);
+                }
+                catch (InvalidProjectFileException e)
+                {
+                    // Make sure the Invalid Project error gets logged *before* TaskFinished.  Otherwise,
+                    // the log is confusing.
+                    _targetLoggingContext.LogInvalidProjectFileError(e);
+                    _continueOnError = ContinueOnError.ErrorAndStop;
+                    taskResult = new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, e);
+                }
             }
             else
             {
@@ -461,6 +472,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                             // the log is confusing.
                             taskLoggingContext.LogInvalidProjectFileError(e);
                             _continueOnError = ContinueOnError.ErrorAndStop;
+                            taskResult = new WorkUnitResult(WorkUnitResultCode.Failed, WorkUnitActionCode.Stop, e);
                         }
                         finally
                         {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index fc7de19ac50..49f5a15b5ed 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -713,6 +713,26 @@ private ICollection<string> WarningsAsErrors
             }
         }
 
+        private ICollection<string> _warningsNotAsErrors;
+
+        /// <summary>
+        /// Contains all warnings that should be logged as errors.
+        /// Non-null empty set when all warnings should be treated as errors.
+        /// </summary>
+        private ICollection<string> WarningsNotAsErrors
+        {
+            get
+            {
+                // Test compatibility
+                if (_taskLoggingContext == null)
+                {
+                    return null;
+                }
+
+                return _warningsNotAsErrors ??= _taskLoggingContext.GetWarningsNotAsErrors();
+            }
+        }
+
         private ICollection<string> _warningsAsMessages;
 
         /// <summary>
@@ -747,7 +767,12 @@ public bool ShouldTreatWarningAsError(string warningCode)
             }
 
             // An empty set means all warnings are errors.
-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);
+            return (WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningCode)) || WarningsAsErrors.Contains(warningCode);
+        }
+
+        private bool WarningAsErrorNotOverriden(string warningCode)
+        {
+            return WarningsNotAsErrors?.Contains(warningCode) != true;
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index 87666f95341..4ec872e6718 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -38,10 +38,12 @@ public override void ClearCaches()
 
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
-
             SdkResult result;
 
+            bool wasResultCached = true;
+
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
+
             if (Traits.Instance.EscapeHatches.DisableSdkResolutionCache)
             {
                 result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
@@ -59,7 +61,12 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                  */
                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(
                     sdk.Name,
-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));
+                    key => new Lazy<SdkResult>(() =>
+                    {
+                        wasResultCached = false;
+
+                        return base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                    }));
 
                 // Get the lazy value which will block all waiting threads until the SDK is resolved at least once while subsequent calls get cached results.
                 result = resultLazy.Value;
@@ -73,7 +80,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, result.Version, result.ElementLocation, sdk.Version);
             }
 
-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success, wasResultCached);
 
             return result;
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
index 3d35548d260..04b7ad67ed0 100644
--- a/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/MainNodeSdkResolverService.cs
@@ -7,10 +7,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
-using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Threading;
-using System.Threading.Tasks;
 
 #nullable disable
 
@@ -18,7 +15,7 @@ namespace Microsoft.Build.BackEnd.SdkResolution
 {
     /// <summary>
     /// An implementation of <see cref="ISdkResolverService"/> that is hosted in the main node for multi-proc builds.  This instance of the service
-    /// listens for requests from out-of-proc nodes so that SDK resolution is handled in a central location.  This instance is registered in <see cref="BuildComponentFactoryCollection.RegisterDefaultFactories"/>
+    /// handles requests from out-of-proc nodes so that SDK resolution is handled in a central location.  This instance is registered in <see cref="BuildComponentFactoryCollection.RegisterDefaultFactories"/>
     /// and can be overridden for different contexts.  This service calls the <see cref="SdkResolverService"/> to do any actual SDK resolution
     /// because the <see cref="SdkResolverService"/> is used for stand-alone evaluations where there is no build context available so caching
     /// is not an option.
@@ -28,26 +25,6 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal sealed class MainNodeSdkResolverService : HostedSdkResolverServiceBase
     {
-        /// <summary>
-        /// An object used for locking in this class instance.
-        /// </summary>
-        private readonly object _lockObject = new object();
-
-        /// <summary>
-        /// A <see cref="Task"/> running in the background which handles requests from remote nodes.
-        /// </summary>
-        private Task _requestHandler;
-
-        /// <summary>
-        /// An event which is signaled when a request is received from a remote host.
-        /// </summary>
-        private ManualResetEvent _requestReceivedEvent;
-
-        /// <summary>
-        /// A list of requests from remote hosts which need to be processed.
-        /// </summary>
-        private ConcurrentQueue<SdkResolverRequest> _requests;
-
         private readonly ISdkResolverService _cachedSdkResolver = new CachingSdkResolverService();
 
         /// <summary>
@@ -55,6 +32,8 @@ internal sealed class MainNodeSdkResolverService : HostedSdkResolverServiceBase
         /// </summary>
         public static IBuildComponent CreateComponent(BuildComponentType type)
         {
+            ErrorUtilities.VerifyThrowArgumentOutOfRange(type == BuildComponentType.SdkResolverService, nameof(type));
+
             return new MainNodeSdkResolverService();
         }
 
@@ -78,148 +57,52 @@ public override void ClearCaches()
         /// <inheritdoc cref="INodePacketHandler.PacketReceived"/>
         public override void PacketReceived(int node, INodePacket packet)
         {
-            switch (packet.Type)
-            {
-                case NodePacketType.ResolveSdkRequest:
-                    HandleRequest(node, packet as SdkResolverRequest);
-                    break;
-            }
-        }
-
-        /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
-        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
-        {
-            ErrorUtilities.VerifyThrowInternalNull(sdk, nameof(sdk));
-            ErrorUtilities.VerifyThrowInternalNull(loggingContext, nameof(loggingContext));
-            ErrorUtilities.VerifyThrowInternalNull(sdkReferenceLocation, nameof(sdkReferenceLocation));
-            ErrorUtilities.VerifyThrowInternalLength(projectPath, nameof(projectPath));
-
-            return _cachedSdkResolver.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-        }
-
-        /// <summary>
-        /// Handles a request from a remote node.
-        /// </summary>
-        /// <param name="node">The ID of the remote node.</param>
-        /// <param name="request">The <see cref="SdkResolverRequest"/> containing information about the SDK to resolve.</param>
-        /// <remarks>This method must not directly handle requests because it would block requests from other nodes.  Instead, it simply
-        /// adds requests to a queue which are processed by a background thread.</remarks>
-        private void HandleRequest(int node, SdkResolverRequest request)
-        {
-            if (_requestHandler == null)
+            if (packet is not SdkResolverRequest request)
             {
-                // Start the background thread which will process queued requests if it has not already been started.
-                lock (_lockObject)
-                {
-                    if (_requestHandler == null)
-                    {
-                        // Create the event used to signal that a request was received
-                        _requestReceivedEvent = new ManualResetEvent(initialState: false);
-
-                        // Create the queue used to store requests that need to be processed
-                        _requests = new ConcurrentQueue<SdkResolverRequest>();
-
-                        // Create the thread which processes requests
-                        _requestHandler = Task.Factory.StartNew(RequestHandlerPumpProc, TaskCreationOptions.LongRunning);
-                    }
-                }
+                return;
             }
 
             // Associate the node with the request
             request.NodeId = node;
 
-            _requests.Enqueue(request);
+            SdkResult response = null;
 
-            // Signal that one or more requests have been received
-            _requestReceivedEvent.Set();
-        }
-
-        /// <summary>
-        /// Processes all requests that are currently in the queue.
-        /// </summary>
-        private void ProcessRequests()
-        {
-            // Store a list of threads which are resolving SDKs
-            List<Task> tasks = new List<Task>(_requests.Count);
-
-            SdkResolverRequest item;
-
-            while (_requests.TryDequeue(out item))
-            {
-                SdkResolverRequest request = item;
-
-                // Start a thread to resolve an SDK and add it to the list of threads
-                tasks.Add(Task.Run(() =>
-                {
-                    SdkResult response = null;
-                    try
-                    {
-                        // Create an SdkReference from the request
-                        SdkReference sdkReference = new SdkReference(request.Name, request.Version, request.MinimumVersion);
-
-                        ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-
-                        // This call is usually cached so is very fast but can take longer for a new SDK that is downloaded.  Other queued threads for different SDKs will complete sooner and continue on which unblocks evaluations
-                        response = ResolveSdk(request.SubmissionId, sdkReference, new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath), request.ElementLocation, request.SolutionPath, request.ProjectPath, request.Interactive, request.IsRunningInVisualStudio);
-                    }
-                    catch (Exception e)
-                    {
-                        ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-
-                        EvaluationLoggingContext loggingContext = new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath);
-
-                        loggingService.LogFatalBuildError(loggingContext.BuildEventContext, e, new BuildEventFileInfo(request.ElementLocation));
-                    }
-                    finally
-                    {
-                        // Get the node manager and send the response back to the node that requested the SDK
-                        INodeManager nodeManager = Host.GetComponent(BuildComponentType.NodeManager) as INodeManager;
-
-                        nodeManager.SendData(request.NodeId, response);
-                    }
-                }));
-            }
-
-            // Wait for all tasks to complete
-            Task.WaitAll(tasks.ToArray());
-        }
-
-        /// <summary>
-        /// A background thread that waits for requests to be received.
-        /// </summary>
-        private void RequestHandlerPumpProc()
-        {
             try
             {
-                Thread.CurrentThread.Name = "MSBuild SDK Resolver";
+                // Create an SdkReference from the request
+                SdkReference sdkReference = new SdkReference(request.Name, request.Version, request.MinimumVersion);
 
-                while (true)
-                {
-                    WaitHandle[] handles = new WaitHandle[] { ShutdownEvent, _requestReceivedEvent };
+                ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
 
-                    int waitId = WaitHandle.WaitAny(handles);
-                    switch (waitId)
-                    {
-                        case 0:
-                            return;
-
-                        case 1:
-                            _requestReceivedEvent.Reset();
+                // This call is usually cached so is very fast but can take longer for a new SDK that is downloaded.  Other queued threads for different SDKs will complete sooner and continue on which unblocks evaluations
+                response = ResolveSdk(request.SubmissionId, sdkReference, new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath), request.ElementLocation, request.SolutionPath, request.ProjectPath, request.Interactive, request.IsRunningInVisualStudio);
+            }
+            catch (Exception e)
+            {
+                ILoggingService loggingService = Host.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
 
-                            ProcessRequests();
-                            break;
+                EvaluationLoggingContext loggingContext = new EvaluationLoggingContext(loggingService, request.BuildEventContext, request.ProjectPath);
 
-                        default:
-                            ErrorUtilities.ThrowInternalError("waitId {0} out of range.", waitId);
-                            break;
-                    }
-                }
+                loggingService.LogFatalBuildError(loggingContext.BuildEventContext, e, new BuildEventFileInfo(request.ElementLocation));
             }
-            catch (Exception e)
+            finally
             {
-                ExceptionHandling.DumpExceptionToFile(e);
-                throw;
+                // Get the node manager and send the response back to the node that requested the SDK
+                INodeManager nodeManager = Host.GetComponent(BuildComponentType.NodeManager) as INodeManager;
+
+                nodeManager.SendData(request.NodeId, response);
             }
         }
+
+        /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
+        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
+        {
+            ErrorUtilities.VerifyThrowInternalNull(sdk, nameof(sdk));
+            ErrorUtilities.VerifyThrowInternalNull(loggingContext, nameof(loggingContext));
+            ErrorUtilities.VerifyThrowInternalNull(sdkReferenceLocation, nameof(sdkReferenceLocation));
+            ErrorUtilities.VerifyThrowInternalLength(projectPath, nameof(projectPath));
+
+            return _cachedSdkResolver.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
index 1a449cf0c44..9db962d2a21 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
@@ -4,6 +4,7 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
@@ -28,7 +29,7 @@ internal sealed class OutOfProcNodeSdkResolverService : HostedSdkResolverService
         /// <summary>
         /// The cache of responses which is cleared between builds.
         /// </summary>
-        private readonly ConcurrentDictionary<string, SdkResult> _responseCache = new ConcurrentDictionary<string, SdkResult>(MSBuildNameIgnoreCaseComparer.Default);
+        private readonly ConcurrentDictionary<string, Lazy<SdkResult>> _responseCache = new ConcurrentDictionary<string, Lazy<SdkResult>>(MSBuildNameIgnoreCaseComparer.Default);
 
         /// <summary>
         /// An event to signal when a response has been received.
@@ -65,14 +66,21 @@ public override void PacketReceived(int node, INodePacket packet)
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
+            bool wasResultCached = true;
+
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);
+
             // Get a cached response if possible, otherwise send the request
-            var sdkResult = _responseCache.GetOrAdd(
+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(
                 sdk.Name,
-                key =>
+                key => new Lazy<SdkResult>(() =>
                 {
-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-                    return result;
-                });
+                    wasResultCached = false;
+
+                    return RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                }));
+
+            SdkResult sdkResult = sdkResultLazy.Value;
 
             if (sdkResult.Version != null && !SdkResolverService.IsReferenceSameVersion(sdk, sdkResult.Version))
             {
@@ -80,6 +88,8 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, sdkResult.Version, sdkResult.ElementLocation, sdk.Version);
             }
 
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(submissionId, sdk.Name, solutionPath, projectPath, _lastResponse.Success, wasResultCached);
+
             return sdkResult;
         }
 
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 2eb464830ff..60838dd3f20 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -17,6 +17,7 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using Microsoft.Build.BackEnd.SdkResolution;
 using SdkResult = Microsoft.Build.BackEnd.SdkResolution.SdkResult;
+using System.Diagnostics;
 
 #nullable disable
 
@@ -809,6 +810,32 @@ private void HandleNodeConfiguration(NodeConfiguration configuration)
         private void HandleNodeBuildComplete(NodeBuildComplete buildComplete)
         {
             _shutdownReason = buildComplete.PrepareForReuse ? NodeEngineShutdownReason.BuildCompleteReuse : NodeEngineShutdownReason.BuildComplete;
+            if (_shutdownReason == NodeEngineShutdownReason.BuildCompleteReuse)
+            {
+                ProcessPriorityClass priorityClass = Process.GetCurrentProcess().PriorityClass;
+                if (priorityClass != ProcessPriorityClass.Normal && priorityClass != ProcessPriorityClass.BelowNormal)
+                {
+                    // This isn't a priority class known by MSBuild. We should avoid connecting to this node.
+                    _shutdownReason = NodeEngineShutdownReason.BuildComplete;
+                }
+                else
+                {
+                    bool lowPriority = priorityClass == ProcessPriorityClass.BelowNormal;
+                    if (_nodeEndpoint.LowPriority != lowPriority)
+                    {
+                        if (!lowPriority || NativeMethodsShared.IsWindows)
+                        {
+                            Process.GetCurrentProcess().PriorityClass = lowPriority ? ProcessPriorityClass.Normal : ProcessPriorityClass.BelowNormal;
+                        }
+                        else
+                        {
+                            // On *nix, we can't adjust the priority up, so to avoid using this node at the wrong priority, we should not be reused.
+                            _shutdownReason = NodeEngineShutdownReason.BuildComplete;
+                        }
+                    }
+                }
+            }
+            
             _shutdownEvent.Set();
         }
     }
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index 50349f0f2e8..e5c1677ee6a 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -45,7 +45,7 @@ namespace Microsoft.Build.Collections
 {
     /// <summary>
     /// Implementation notes:
-    /// This uses an array-based implementation similar to <see cref="T:Dictionary{T}" />, using a buckets array
+    /// This uses an array-based implementation similar to <see cref="Dictionary{TKey, TValue}" />, using a buckets array
     /// to map hash values to the Slots array. Items in the Slots array that hash to the same value
     /// are chained together through the "next" indices. 
     /// 
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index 8c3c1834e65..5a2d0da07c9 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -318,7 +318,7 @@ public void RemoveChild(ProjectElement child)
         /// </summary>
         /// <remarks>
         /// It is safe to modify the children in this way
-        /// during enumeration. See <see cref="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
+        /// during enumeration. See <see cref="ProjectElementContainer.RemoveChild(ProjectElement)"/>.
         /// </remarks>
         public void RemoveAllChildren()
         {
@@ -407,13 +407,46 @@ protected internal virtual ProjectElementContainer DeepClone(ProjectRootElement
                 }
                 else
                 {
-                    clone.AppendChild(child.Clone(clone.ContainingProject));
+                    ProjectElement childClone = child.Clone(clone.ContainingProject);
+                    clone.AppendChild(childClone);
+                    if (childClone.XmlElement is not null)
+                    {
+                        AppendAttributesAndChildren(childClone.XmlElement, child.XmlElement);
+                    }
                 }
             }
 
             return clone;
         }
 
+        private void AppendAttributesAndChildren(XmlNode appendTo, XmlNode appendFrom)
+        {
+            appendTo.RemoveAll();
+            // Copy over the attributes from the template element.
+            if (appendFrom.Attributes is not null)
+            {
+                foreach (XmlAttribute attribute in appendFrom.Attributes)
+                {
+                    XmlAttribute attr = appendTo.OwnerDocument.CreateAttribute(attribute.LocalName, attribute.NamespaceURI);
+                    attr.Value = attribute.Value;
+                    appendTo.Attributes.Append(attr);
+                }
+            }
+
+            // If this element has pure text content, copy that over.
+            if (appendFrom.ChildNodes.Count == 1 && appendFrom.FirstChild.NodeType == XmlNodeType.Text)
+            {
+                appendTo.AppendChild(appendTo.OwnerDocument.CreateTextNode(appendFrom.FirstChild.Value));
+            }
+
+            foreach (XmlNode child in appendFrom.ChildNodes)
+            {
+                XmlNode childClone = appendTo.OwnerDocument.CreateNode(child.NodeType, child.Prefix, child.Name, child.NamespaceURI);
+                appendTo.AppendChild(childClone);
+                AppendAttributesAndChildren(childClone, child);
+            }
+        }
+
         internal static ProjectElementContainer DeepClone(ProjectElementContainer xml, ProjectRootElement factory, ProjectElementContainer parent)
         {
             return xml.DeepClone(factory, parent);
diff --git a/src/Build/Construction/ProjectUsingTaskElement.cs b/src/Build/Construction/ProjectUsingTaskElement.cs
index 3bf3005a306..22a741e4370 100644
--- a/src/Build/Construction/ProjectUsingTaskElement.cs
+++ b/src/Build/Construction/ProjectUsingTaskElement.cs
@@ -129,6 +129,19 @@ public string Architecture
             }
         }
 
+        /// <summary>
+        /// Gets and sets the value of the Architecture attribute.
+        /// </summary>
+        public string Override
+        {
+            get => GetAttributeValue(XMakeAttributes.overrideUsingTask);
+
+            set
+            {
+                SetOrRemoveAttribute(XMakeAttributes.overrideUsingTask, value, "Set usingtask Override {0}", value);
+            }
+        }
+
         /// <summary>
         /// Get any contained TaskElement.
         /// </summary>
@@ -183,6 +196,11 @@ public UsingTaskParameterGroupElement ParameterGroup
         /// </summary>
         public ElementLocation TaskFactoryLocation => GetAttributeLocation(XMakeAttributes.taskFactory);
 
+        /// <summary>
+        /// Location of the Override attribute, if any
+        /// </summary>
+        public ElementLocation OverrideLocation => GetAttributeLocation(XMakeAttributes.overrideUsingTask);
+
         /// <summary>
         /// Convenience method that picks a location based on a heuristic:
         ///     Adds a new ParameterGroup to the using task to the end of the using task element
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 661397bad26..6fb05e271d0 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -23,6 +23,7 @@
 using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
 using System.Globalization;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Globbing;
@@ -3287,6 +3288,10 @@ public override bool Build(string[] targets, IEnumerable<ILogger> loggers, IEnum
                 if (!IsBuildEnabled)
                 {
                     LoggingService.LogError(s_buildEventContext, new BuildEventFileInfo(FullPath), "SecurityProjectBuildDisabled");
+                    if (LoggingService is LoggingService defaultLoggingService)
+                    {
+                        defaultLoggingService.WaitForLoggingToProcessEvents();
+                    }
                     return false;
                 }
 
@@ -3477,7 +3482,15 @@ public string ExpandItemIncludeBestEffortLeaveEscaped(ProjectItemElement renamed
 
                 var itemFactory = new ProjectItemFactory(Owner, renamedItemElement);
 
-                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(DirectoryPath, renamedItemElement, itemFactory, renamedItemElement.Include, _data.Expander);
+                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(
+                    DirectoryPath,
+                    renamedItemElement,
+                    itemFactory,
+                    renamedItemElement.Include,
+                    _data.Expander,
+                    LoggingService,
+                    FullPath,
+                    s_buildEventContext);
 
                 if (items.Count != 1)
                 {
@@ -3537,7 +3550,15 @@ private List<ProjectItem> AddItemHelper(ProjectItemElement itemElement, string u
             {
                 var itemFactory = new ProjectItemFactory(Owner, itemElement);
 
-                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(DirectoryPath, itemElement, itemFactory, unevaluatedInclude, _data.Expander);
+                List<ProjectItem> items = Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.CreateItemsFromInclude(
+                    DirectoryPath,
+                    itemElement,
+                    itemFactory,
+                    unevaluatedInclude,
+                    _data.Expander,
+                    LoggingService,
+                    FullPath,
+                    s_buildEventContext);
 
                 foreach (ProjectItem item in items)
                 {
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index aad621450df..32f9b37fe68 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -225,6 +225,12 @@ public void Dispose()
         /// </summary>
         private int _maxNodeCount;
 
+        /// <summary>
+        /// LoggingService Logger mode.
+        /// If Asynchronous mode is used
+        /// </summary>
+        private LoggerMode _loggerMode;
+
         /// <summary>
         /// Instantiates a project collection with no global properties or loggers that reads toolset
         /// information from the configuration file and registry.
@@ -302,6 +308,27 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
         /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
         /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
         public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly)
+            : this(globalProperties, loggers, remoteLoggers, toolsetDefinitionLocations, maxNodeCount, onlyLogCriticalEvents, loadProjectsReadOnly, useAsynchronousLogging: false)
+        {
+        }
+
+
+        /// <summary>
+        /// Instantiates a project collection with specified global properties and loggers and using the
+        /// specified toolset locations, node count, and setting of onlyLogCriticalEvents.
+        /// Global properties and loggers may be null.
+        /// Throws InvalidProjectFileException if any of the global properties are reserved.
+        /// May throw InvalidToolsetDefinitionException.
+        /// </summary>
+        /// <param name="globalProperties">The default global properties to use. May be null.</param>
+        /// <param name="loggers">The loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="remoteLoggers">Any remote loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="toolsetDefinitionLocations">The locations from which to load toolsets.</param>
+        /// <param name="maxNodeCount">The maximum number of nodes to use for building.</param>
+        /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
+        /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
+        /// <param name="useAsynchronousLogging">If set to true, asynchronous logging will be used. <see cref="ProjectCollection.Dispose()"/> has to called to clear resources used by async logging.</param>
+        internal ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly, bool useAsynchronousLogging)
         {
             _loadedProjects = new LoadedProjectCollection();
             ToolsetLocations = toolsetDefinitionLocations;
@@ -319,6 +346,7 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
 
             try
             {
+                _loggerMode = useAsynchronousLogging ? LoggerMode.Asynchronous : LoggerMode.Synchronous;
                 CreateLoggingService(maxNodeCount, onlyLogCriticalEvents);
 
                 RegisterLoggers(loggers);
@@ -418,8 +446,14 @@ public static ProjectCollection GlobalProjectCollection
                 {
                     // Take care to ensure that there is never more than one value observed
                     // from this property even in the case of race conditions while lazily initializing.
-                    var local = new ProjectCollection();
-                    Interlocked.CompareExchange(ref s_globalProjectCollection, local, null);
+                    var local = new ProjectCollection(null, null, null, ToolsetDefinitionLocations.Default,
+                        maxNodeCount: 1, onlyLogCriticalEvents: false, loadProjectsReadOnly: false, useAsynchronousLogging: true);
+
+                    if (Interlocked.CompareExchange(ref s_globalProjectCollection, local, null) != null)
+                    {
+                        // Other thread beat us to it; dispose of this project collection
+                        local.Dispose();
+                    }
                 }
 
                 return s_globalProjectCollection;
@@ -433,7 +467,7 @@ public static ProjectCollection GlobalProjectCollection
         /// This is the Windows file version (specifically the value of the FileVersion
         /// resource), not necessarily the assembly version.
         /// If you want the assembly version, use Constants.AssemblyVersion.
-        /// This is not the <see cref="P:Microsoft.Build.BuildEngine.ToolsetCollection.ToolsVersions*">ToolsetCollection.ToolsVersions</see>.
+        /// This is not the <see cref="Toolset.ToolsVersion"/>.
         /// </remarks>
         public static Version Version
         {
@@ -1724,7 +1758,7 @@ private void ShutDownLoggingService()
         /// </summary>
         private void CreateLoggingService(int maxCPUCount, bool onlyLogCriticalEvents)
         {
-            _loggingService = BackEnd.Logging.LoggingService.CreateLoggingService(LoggerMode.Synchronous, 0 /*Evaluation can be done as if it was on node "0"*/);
+            _loggingService = BackEnd.Logging.LoggingService.CreateLoggingService(_loggerMode, 0 /*Evaluation can be done as if it was on node "0"*/);
             _loggingService.MaxCPUCount = maxCPUCount;
             _loggingService.OnlyLogCriticalEvents = onlyLogCriticalEvents;
         }
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index acdf7f6caf4..aed480e2f4e 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -921,7 +921,7 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
 
                     reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,
 #if RUNTIME_TYPE_NETCORE
-                        "Core",
+                        Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core",
 #elif MONO
                         NativeMethodsShared.IsMono ? "Mono" : "Full");
 #else
diff --git a/src/Build/Evaluation/Conditionals/Scanner.cs b/src/Build/Evaluation/Conditionals/Scanner.cs
index 8a711257b2f..645181ce8f7 100644
--- a/src/Build/Evaluation/Conditionals/Scanner.cs
+++ b/src/Build/Evaluation/Conditionals/Scanner.cs
@@ -366,7 +366,7 @@ private static bool ScanForPropertyExpressionEnd(string expression, int index, o
                         // If it is not then the calling code will determine that
                         if (nestLevel == 0)
                         {
-                            if (whitespaceFound && !nonIdentifierCharacterFound && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
+                            if (whitespaceFound && !nonIdentifierCharacterFound)
                             {
                                 return false;
                             }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 19f4c800414..b3154221e9f 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -341,7 +341,7 @@ internal static void Evaluate(
         /// Helper that creates a list of ProjectItem's given an unevaluated Include and a ProjectRootElement.
         /// Used by both Evaluator.EvaluateItemElement and by Project.AddItem.
         /// </summary>
-        internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItemElement itemElement, IItemFactory<I, I> itemFactory, string unevaluatedIncludeEscaped, Expander<P, I> expander)
+        internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItemElement itemElement, IItemFactory<I, I> itemFactory, string unevaluatedIncludeEscaped, Expander<P, I> expander, ILoggingService loggingService, string buildEventFileInfoFullPath, BuildEventContext buildEventContext)
         {
             ErrorUtilities.VerifyThrowArgumentLength(unevaluatedIncludeEscaped, nameof(unevaluatedIncludeEscaped));
 
@@ -373,7 +373,16 @@ internal static List<I> CreateItemsFromInclude(string rootDirectory, ProjectItem
                     else
                     {
                         // The expression is not of the form "@(X)". Treat as string
-                        string[] includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(rootDirectory, includeSplitEscaped, excludeSpecsEscaped: null, forceEvaluate: false, fileMatcher: expander.EvaluationContext?.FileMatcher);
+                        string[] includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                            rootDirectory,
+                            includeSplitEscaped,
+                            excludeSpecsEscaped: null,
+                            forceEvaluate: false,
+                            fileMatcher: expander.EvaluationContext?.FileMatcher,
+                            loggingMechanism: loggingService,
+                            includeLocation: itemElement.IncludeLocation,
+                            buildEventFileInfoFullPath: buildEventFileInfoFullPath,
+                            buildEventContext: buildEventContext);
 
                         if (includeSplitFilesEscaped.Length > 0)
                         {
@@ -1139,7 +1148,8 @@ private void AddBuiltInProperties()
             }
 
 #if RUNTIME_TYPE_NETCORE
-            SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType, "Core");
+            SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
+                Traits.Instance.ForceEvaluateAsFullFramework ? "Full" : "Core");
 #elif MONO
             SetBuiltInProperty(ReservedPropertyNames.msbuildRuntimeType,
                                                         NativeMethodsShared.IsMono ? "Mono" : "Full");
@@ -1823,7 +1833,7 @@ static string EvaluateProperty(string value, IElementLocation location,
 
                 if (!sdkResult.Success)
                 {
-                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) || !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk)))
+                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk))
                     {
                         ProjectImportedEventArgs eventArgs = new ProjectImportedEventArgs(
                             importElement.Location.Line,
@@ -2042,7 +2052,13 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                     }
 
                     // Expand the wildcards and provide an alphabetical order list of import statements.
-                    importFilesEscaped = EngineFileUtilities.GetFileListEscaped(directoryOfImportingFile, importExpressionEscapedItem, forceEvaluate: true, fileMatcher: _evaluationContext.FileMatcher);
+                    importFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                        directoryOfImportingFile,
+                        importExpressionEscapedItem,
+                        forceEvaluate: true,
+                        fileMatcher: _evaluationContext.FileMatcher,
+                        loggingMechanism: _evaluationLoggingContext,
+                        importLocation: importLocationInProject);
                 }
                 catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))
                 {
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 88d911a7b4a..46b24084309 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2241,8 +2241,7 @@ internal static IEnumerable<Pair<string, S>> GetItemPairEnumerable(IEnumerable<S
                     {
                         if (Traits.Instance.UseLazyWildCardEvaluation)
                         {
-                            foreach (
-                                var resultantItem in
+                            foreach (var resultantItem in
                                 EngineFileUtilities.GetFileListEscaped(
                                     item.ProjectDirectory,
                                     item.EvaluatedIncludeEscaped,
@@ -3510,8 +3509,11 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
 
                     // If the result of the function call is a string, then we need to escape the result
                     // so that we maintain the "engine contains escaped data" state.
-                    // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape
-                    if (functionResult is string functionResultString && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                    // The exception is that the user is explicitly calling MSBuild::Unescape, MSBuild::Escape, or ConvertFromBase64
+                    if (functionResult is string functionResultString &&
+                        !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) &&
+                        !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase) &&
+                        !String.Equals("ConvertFromBase64", _methodMethodName, StringComparison.OrdinalIgnoreCase))
                     {
                         functionResult = EscapingUtilities.Escape(functionResultString);
                     }
@@ -4075,6 +4077,22 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                                 return true;
                             }
                         }
+                        else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.ConvertToBase64), StringComparison.OrdinalIgnoreCase))
+                        {
+                            if (TryGetArg(args, out string arg0))
+                            {
+                                returnVal = IntrinsicFunctions.ConvertToBase64(arg0);
+                                return true;
+                            }
+                        }
+                        else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.ConvertFromBase64), StringComparison.OrdinalIgnoreCase))
+                        {
+                            if (TryGetArg(args, out string arg0))
+                            {
+                                returnVal = IntrinsicFunctions.ConvertFromBase64(arg0);
+                                return true;
+                            }
+                        }
                         else if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.StableStringHash), StringComparison.OrdinalIgnoreCase))
                         {
                             if (TryGetArg(args, out string arg0))
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 3217e7ffe98..bd073584157 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Runtime.InteropServices;
+using System.Text;
 using System.Text.RegularExpressions;
 
 using Microsoft.Build.Framework;
@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue
             }
         }
 
+        /// <summary>
+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
+        /// </summary>
+        /// <param name="toEncode">String to encode in base 64.</param>
+        /// <returns>The encoded string.</returns>
+        internal static string ConvertToBase64(string toEncode)
+        {
+            return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));
+        }
+
+        /// <summary>
+        /// Returns the string after converting from base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
+        /// </summary>
+        /// <param name="toDecode">The string to decode.</param>
+        /// <returns>The decoded string.</returns>
+        internal static string ConvertFromBase64(string toDecode)
+        {
+            return Encoding.UTF8.GetString(Convert.FromBase64String(toDecode));
+        }
+
         /// <summary>
         /// Hash the string independent of bitness and target framework.
         /// </summary>
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 0fe765844fa..ce0dc977426 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -111,15 +111,19 @@ protected override ImmutableList<I> SelectItems(OrderedItemDataCollection.Builde
                             {
                                 MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory, glob, string.Join(", ", excludePatternsForGlobs));
                             }
+
                             using (_lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
                             {
                                 includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
                                     _rootDirectory,
                                     glob,
                                     excludePatternsForGlobs,
-                                    fileMatcher: FileMatcher
-                                );
+                                    fileMatcher: FileMatcher,
+                                    loggingMechanism: _lazyEvaluator._loggingContext,
+                                    includeLocation: _itemElement.IncludeLocation,
+                                    excludeLocation: _itemElement.ExcludeLocation);
                             }
+
                             if (MSBuildEventSource.Log.IsEnabled())
                             {
                                 MSBuildEventSource.Log.ExpandGlobStop(_rootDirectory, glob, string.Join(", ", excludePatternsForGlobs));
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 7f52bb9ae6d..28fe97350da 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -450,7 +450,8 @@ private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOpera
                 {
                     for (int i = 0; i < items.Count; i++)
                     {
-                        if (itemsWithNoWildcards.TryGetValue(FileUtilities.GetFullPath(items[i].Item.EvaluatedInclude, items[i].Item.ProjectDirectory), out UpdateOperation op))
+                        string fullPath = FileUtilities.GetFullPath(items[i].Item.EvaluatedIncludeEscaped, items[i].Item.ProjectDirectory);
+                        if (itemsWithNoWildcards.TryGetValue(fullPath, out UpdateOperation op))
                         {
                             items[i] = op.UpdateItem(items[i]);
                         }
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index dcd337e14b1..3b8c3f99a6f 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -48,7 +48,7 @@ internal class ProjectParser
         /// <summary>
         /// Valid attributes on usingtask element
         /// </summary>
-        private static readonly HashSet<string> ValidAttributesOnUsingTask = new HashSet<string> { XMakeAttributes.condition, XMakeAttributes.label, XMakeAttributes.taskName, XMakeAttributes.assemblyFile, XMakeAttributes.assemblyName, XMakeAttributes.taskFactory, XMakeAttributes.architecture, XMakeAttributes.runtime, XMakeAttributes.requiredPlatform, XMakeAttributes.requiredRuntime };
+        private static readonly HashSet<string> ValidAttributesOnUsingTask = new HashSet<string> { XMakeAttributes.condition, XMakeAttributes.label, XMakeAttributes.taskName, XMakeAttributes.assemblyFile, XMakeAttributes.assemblyName, XMakeAttributes.taskFactory, XMakeAttributes.architecture, XMakeAttributes.runtime, XMakeAttributes.requiredPlatform, XMakeAttributes.requiredRuntime, XMakeAttributes.overrideUsingTask };
 
         /// <summary>
         /// Valid attributes on target element
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 77f9d9ba8ae..c419203fb47 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -126,7 +126,7 @@ private void AddEdges(Dictionary<ConfigurationMetadata, ParsedProject> allParsed
 
         private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata, ParsedProject> allParsedProjects, GraphEdges edges)
         {
-            var transitiveReferenceCache = new Dictionary<ProjectGraphNode, HashSet<ProjectGraphNode>>(allParsedProjects.Count);
+            Dictionary<ProjectGraphNode, HashSet<ProjectGraphNode>> transitiveReferenceCache = new(allParsedProjects.Count);
 
             foreach (var parsedProject in allParsedProjects)
             {
@@ -164,52 +164,30 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,
 
             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)
             {
-                HashSet<ProjectGraphNode> references = new();
-                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);
-                return references;
-            }
-
-            // transitiveReferences contains all of the references we've found so far from the initial GetTransitiveProjectReferencesExcludingSelf call.
-            // referencesFromHere is essentially "reset" at each level of the recursion.
-            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to transitiveReferenceCache yet, since we haven't finished
-            // finding all the transitive references yet.
-            // On the other hand, the second is important to help us fill that cache afterwards. The cache is from a particular node to all of its references, including transitive references
-            // but not including itself, which means we can't include parents as we would if we used transitiveReferences. You can see that for any particular call, it creates a new "toCache"
-            // HashSet that we fill with direct references and pass as referencesFromHere in recursive calls to fill it with transitive references. It is then used to populate the cache.
-            // Meanwhile, we avoid going into the recursive step at all if transitiveReferences already includes a particular node to avoid a StackOverflowException if there's a loop.
-            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> traversedReferences, HashSet<ProjectGraphNode> incompleteReferencesOfDirectlyReferencingNode)
-            {
-                if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))
+                if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> transitiveReferences))
                 {
-                    traversedReferences.UnionWith(cachedTransitiveReferences);
+                    return transitiveReferences;
                 }
-                else
+
+                transitiveReferences = new();
+
+                // Add the results to the cache early, even though it'll be incomplete until the loop below finishes. This helps handle cycles by not allowing them to recurse infinitely.
+                // Note that this makes transitive references incomplete in the case of a cycle, but direct dependencies are always added so a cycle will still be detected and an exception will still be thrown.
+                transitiveReferenceCache[parsedProject.GraphNode] = transitiveReferences;
+
+                foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)
                 {
-                    HashSet<ProjectGraphNode> referencesFromThisNode = new();
-                    foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)
-                    {
-                        ParsedProject reference = allParsedProjects[referenceInfo.ReferenceConfiguration];
-                        if (traversedReferences.Add(reference.GraphNode))
-                        {
-                            GetTransitiveProjectReferencesExcludingSelfHelper(reference, traversedReferences, referencesFromThisNode);
-                        }
-                        else if (transitiveReferenceCache.TryGetValue(reference.GraphNode, out cachedTransitiveReferences))
-                        {
-                            referencesFromThisNode.UnionWith(cachedTransitiveReferences);
-                        }
-                        referencesFromThisNode.Add(reference.GraphNode);
-                    }
+                    ParsedProject reference = allParsedProjects[referenceInfo.ReferenceConfiguration];
+                    transitiveReferences.Add(reference.GraphNode);
 
-                    // We've returned from recursing through all transitive references
-                    // of this node, so add that set to the cache
-                    transitiveReferenceCache[parsedProject.GraphNode] = referencesFromThisNode;
-                    if (incompleteReferencesOfDirectlyReferencingNode is not null)
+                    // Perf note: avoiding UnionWith to avoid boxing the HashSet enumerator.
+                    foreach (ProjectGraphNode transitiveReference in GetTransitiveProjectReferencesExcludingSelf(reference))
                     {
-                        // Also add it to the set of transitive dependencies of
-                        // the referencing node (which are probably still incomplete)
-                        incompleteReferencesOfDirectlyReferencingNode.UnionWith(referencesFromThisNode);
+                        transitiveReferences.Add(transitiveReference);
                     }
                 }
+
+                return transitiveReferences;
             }
         }
 
@@ -283,7 +261,7 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada
                 valueComparer: StringComparer.OrdinalIgnoreCase,
                 items: solutionEntryPoint.GlobalProperties ?? ImmutableDictionary<string, string>.Empty);
 
-            var solution = SolutionFile.Parse(FileUtilities.NormalizePath(solutionEntryPoint.ProjectFile));
+            var solution = SolutionFile.Parse(solutionEntryPoint.ProjectFile);
 
             if (solution.SolutionParserWarnings.Count != 0 || solution.SolutionParserErrorCodes.Count != 0)
             {
@@ -410,7 +388,7 @@ private static List<ConfigurationMetadata> AddGraphBuildPropertyToEntryPoints(IE
 
                     AddGraphBuildGlobalVariable(globalPropertyDictionary);
 
-                    var configurationMetadata = new ConfigurationMetadata(FileUtilities.NormalizePath(entryPoint.ProjectFile), globalPropertyDictionary);
+                    var configurationMetadata = new ConfigurationMetadata(entryPoint.ProjectFile, globalPropertyDictionary);
                     entryPointConfigurationMetadata.Add(configurationMetadata);
                 }
 
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index b92eb6e02a7..0605d41feae 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -353,7 +353,7 @@ public ProjectGraph(
         ///     on <see cref="ProjectInstanceFactoryFunc" /> for other scenarios.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="CancellationToken"/> to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
@@ -397,7 +397,7 @@ public ProjectGraph(
         ///     Number of threads to participate in building the project graph.
         /// </param>
         /// <param name="cancellationToken">
-        ///     The <see cref="T:System.Threading.CancellationToken" /> token to observe.
+        ///     The <see cref="CancellationToken"/> to observe.
         /// </param>
         /// <exception cref="InvalidProjectFileException">
         ///     If the evaluation of any project in the graph fails
diff --git a/src/Build/Graph/ProjectGraphEntryPoint.cs b/src/Build/Graph/ProjectGraphEntryPoint.cs
index ae8586e6d6a..6cda6173ac7 100644
--- a/src/Build/Graph/ProjectGraphEntryPoint.cs
+++ b/src/Build/Graph/ProjectGraphEntryPoint.cs
@@ -31,12 +31,12 @@ public ProjectGraphEntryPoint(string projectFile, IDictionary<string, string> gl
         {
             ErrorUtilities.VerifyThrowArgumentLength(projectFile, nameof(projectFile));
 
-            ProjectFile = projectFile;
+            ProjectFile = FileUtilities.NormalizePath(projectFile);
             GlobalProperties = globalProperties;
         }
 
         /// <summary>
-        /// Gets the project file to use for this entry point.
+        /// Gets the full path to the project file to use for this entry point.
         /// </summary>
         public string ProjectFile { get; }
 
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 4132f75aa57..e8d2bfb9ebd 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -274,6 +274,7 @@ public bool Execute()
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
                         _taskLoggingContext.GetWarningsAsErrors(),
+                        _taskLoggingContext.GetWarningsNotAsErrors(),
                         _taskLoggingContext.GetWarningsAsMessages()
                         
                     );
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 2b0711373a3..dbf59ff40a9 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -379,6 +379,7 @@ IFileSystem fileSystem
             Dictionary<string, string> taskFactoryParameters = null;
             string runtime = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Runtime, expanderOptions, projectUsingTaskXml.RuntimeLocation);
             string architecture = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Architecture, expanderOptions, projectUsingTaskXml.ArchitectureLocation);
+            string overrideUsingTask = expander.ExpandIntoStringLeaveEscaped(projectUsingTaskXml.Override, expanderOptions, projectUsingTaskXml.OverrideLocation);
 
             if ((runtime != String.Empty) || (architecture != String.Empty))
             {
@@ -388,7 +389,7 @@ IFileSystem fileSystem
                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);
             }
 
-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);
+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, ConversionUtilities.ValidBooleanTrue(overrideUsingTask));
         }
 
         private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(int? initialCount = null)
@@ -413,10 +414,9 @@ ElementLocation elementLocation
         )
         {
             TaskFactoryWrapper taskFactory = null;
-            bool retrievedFromCache;
-
+            
             // If there are no usingtask tags in the project don't bother caching or looking for tasks locally
-            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);
+            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out bool retrievedFromCache);
 
             if (record != null)
             {
@@ -473,6 +473,23 @@ out bool retrievedFromCache
             retrievedFromCache = false;
             RegisteredTaskIdentity taskIdentity = new RegisteredTaskIdentity(taskName, taskIdentityParameters);
 
+            // Project-level override tasks are keyed by task name (unqualified).
+            // Because Foo.Bar and Baz.Bar are both valid, they are stored
+            // in a dictionary keyed as `Bar` because most tasks are called unqualified
+            if (overriddenTasks.TryGetValue(taskName, out List<RegisteredTaskRecord> recs))
+            {
+                // When we determine this task was overridden, search all task records
+                // to find the most correct registration. Search with the fully qualified name (if applicable)
+                // Behavior is intended to be "first one wins"
+                foreach (RegisteredTaskRecord rec in recs)
+                {
+                    if (RegisteredTaskIdentity.RegisteredTaskIdentityComparer.IsPartialMatch(taskIdentity, rec.TaskIdentity))
+                    {
+                        return rec;
+                    }
+                }
+            }
+
             // Try the override task registry first
             if (_toolset != null)
             {
@@ -637,11 +654,26 @@ private Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> GetReleva
             return relevantTaskRegistrations;
         }
 
+        // Create another set containing architecture-specific task entries.
+        // Then when we look for them, check if the name exists in that.
+        Dictionary<string, List<RegisteredTaskRecord>> overriddenTasks = new Dictionary<string, List<RegisteredTaskRecord>>();
+
         /// <summary>
         /// Registers an evaluated using task tag for future
         /// consultation
         /// </summary>
-        private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, string taskFactory, Dictionary<string, string> taskFactoryParameters, RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord)
+        private void RegisterTask
+        (
+            string taskName,
+            AssemblyLoadInfo assemblyLoadInfo,
+            string taskFactory,
+            Dictionary<string, string> taskFactoryParameters,
+            RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord,
+            ILoggingService loggingService,
+            BuildEventContext context,
+            ProjectUsingTaskElement projectUsingTaskInXml,
+            bool overrideTask = false
+        )
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo, nameof(assemblyLoadInfo));
@@ -662,7 +694,39 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st
                 _taskRegistrations[taskIdentity] = registeredTaskEntries;
             }
 
-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));
+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);
+
+            if (overrideTask)
+            {
+                // Key the dictionary based on Unqualified task names
+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar
+                string[] nameComponents = taskName.Split('.');
+                string unqualifiedTaskName = nameComponents[nameComponents.Length - 1];
+
+                // Is the task already registered?
+                if (overriddenTasks.TryGetValue(unqualifiedTaskName, out List<RegisteredTaskRecord> recs))
+                {
+                    foreach (RegisteredTaskRecord rec in recs)
+                    {
+                        if (rec.RegisteredName.Equals(taskIdentity.Name, StringComparison.OrdinalIgnoreCase))
+                        {
+                            loggingService.LogError(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), "DuplicateOverrideUsingTaskElement", taskName);
+                            break;
+                        }
+                    }
+                    recs.Add(newRecord);
+                }
+                else
+                {
+                    // New record's name may be fully qualified. Use it anyway to account for partial matches.
+                    List<RegisteredTaskRecord> unqualifiedTaskNameMatches = new();
+                    unqualifiedTaskNameMatches.Add(newRecord);
+                    overriddenTasks.Add(unqualifiedTaskName, unqualifiedTaskNameMatches);
+                    loggingService.LogComment(context, MessageImportance.Low, "OverrideUsingTaskElementCreated", taskName, projectUsingTaskInXml.OverrideLocation);
+                }
+            }
+
+            registeredTaskEntries.Add(newRecord);
         }
 
         private static Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> CreateRegisteredTaskDictionary(int? capacity = null)
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 5f007b40826..64a26269a78 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -55,9 +55,9 @@ public class BuildEventArgsReader : IDisposable
             typeof(BuildEventArgs).GetField("senderName", BindingFlags.Instance | BindingFlags.NonPublic);
 
         /// <summary>
-        /// Initializes a new instance of <see cref="T:Microsoft.Build.Logging.BuildEventArgsReader"/> using a <see cref="T:System.IO.BinaryReader"/> instance.
+        /// Initializes a new instance of <see cref="BuildEventArgsReader"/> using a <see cref="BinaryReader"/> instance.
         /// </summary>
-        /// <param name="binaryReader">The <see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Microsoft.Build.Framework.BuildEventArgs"/> from.</param>
+        /// <param name="binaryReader">The <see cref="BinaryReader"/> to read <see cref="BuildEventArgs"/> from.</param>
         /// <param name="fileFormatVersion">The file format version of the log file being read.</param>
         public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)
         {
@@ -81,10 +81,11 @@ public void Dispose()
         internal event Action<BinaryLogRecordKind, byte[]> OnBlobRead;
 
         /// <summary>
-        /// Reads the next log record from the <see cref="T:System.IO.BinaryReader"/>.
+        /// Reads the next log record from the <see cref="BinaryReader"/>.
         /// </summary>
         /// <returns>
-        /// The next <see cref="T:Microsoft.Build.Framework.BuildEventArgs" />. If there are no more records, returns <see langword="null" />.
+        /// The next <see cref="BuildEventArgs"/>.
+        /// If there are no more records, returns <see langword="null"/>.
         /// </returns>
         public BuildEventArgs Read()
         {
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 65a7ccca8ff..0d97dd41083 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -114,12 +114,21 @@ private void ParseParameters()
                     }
                 }
                 // Setting events to forward on the commandline will override the verbosity and other switches such as
-                // showPerfSummand and ShowSummary
+                // showPerfSummary and ShowSummary
                 if (_forwardingSetFromParameters)
                 {
                     _showPerfSummary = false;
                     _showSummary = true;
                 }
+
+                if (_forwardProjectContext)
+                {
+                    // We can't know whether the project items needed to find ForwardProjectContextDescription
+                    // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know
+                    // all of the other loggers that will be attached. So turn both on.
+                    _forwardingTable[ProjectStartedEventDescription] = 1;
+                    _forwardingTable[ProjectEvaluationFinishedEventDescription] = 1;
+                }
             }
         }
 
@@ -151,6 +160,10 @@ private void ApplyParameter(string parameterName)
             {
                 _showCommandLine = true;
             }
+            else if (string.Equals(parameterName, ForwardProjectContextDescription, StringComparison.OrdinalIgnoreCase))
+            {
+                _forwardProjectContext = true;
+            }
         }
 
         /// <summary>
@@ -545,6 +558,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         private const string PerformanceSummaryDescription = "PERFORMANCESUMMARY";
         private const string NoSummaryDescription = "NOSUMMARY";
         private const string ShowCommandLineDescription = "SHOWCOMMANDLINE";
+        private const string ForwardProjectContextDescription = "FORWARDPROJECTCONTEXTEVENTS";
 
         #region Per-build Members
 
@@ -566,6 +580,12 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// </summary>
         private bool _forwardingSetFromParameters;
 
+        /// <summary>
+        /// Indicates if the events to forward should include project context events, if not
+        /// overridden by individual-event forwarding in <see cref="_forwardingSetFromParameters"/>.
+        /// </summary>
+        private bool _forwardProjectContext = false;
+
         /// <summary>
         /// Console logger should show error and warning summary at the end of build?
         /// </summary>
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index d6032382d75..b0d0c7eb7b3 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -573,6 +573,7 @@ private string ReadProjectConfigurationDescription(IEnumerable items)
             }
 
             ReuseableStringBuilder projectConfigurationDescription = null;
+            bool descriptionEmpty = true;
 
             Internal.Utilities.EnumerateItems(items, item =>
             {
@@ -592,7 +593,14 @@ private string ReadProjectConfigurationDescription(IEnumerable items)
                     };
 
                     // Add the item value to the string to be printed in error/warning messages.
-                    projectConfigurationDescription.Append(" ").Append(itemSpec);
+                    if (!descriptionEmpty)
+                    {
+                        projectConfigurationDescription.Append(" "); 
+                    }
+
+                    projectConfigurationDescription.Append(itemSpec);
+
+                    descriptionEmpty = false;
                 }
             });
 
@@ -653,7 +661,7 @@ public override void ProjectFinishedHandler(object sender, ProjectFinishedEventA
                         // should be shown
                         string targets = startedEvent.TargetNames;
                         string projectName = startedEvent.ProjectFile ?? string.Empty;
-                        
+
                         // Show which targets were built as part of this project
                         if (string.IsNullOrEmpty(targets))
                         {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index eb717f7f7e2..0101a829b26 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -52,8 +52,6 @@
     <PackageReference Include="System.Reflection.Metadata" />
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="System.Text.Encoding.CodePages" />
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
index 03d0963d09f..a4ec0aaf92d 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
@@ -528,6 +528,9 @@ Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFileLocation.get ->
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.set -> void
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyNameLocation.get -> Microsoft.Build.Construction.ElementLocation
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.get -> string
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.set -> void
+Microsoft.Build.Construction.ProjectUsingTaskElement.OverrideLocation.get -> Microsoft.Build.Construction.ElementLocation
 Microsoft.Build.Construction.ProjectUsingTaskElement.ParameterGroup.get -> Microsoft.Build.Construction.UsingTaskParameterGroupElement
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.set -> void
@@ -1031,6 +1034,8 @@ Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.get -> System.Collect
 Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.set -> void
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.set -> void
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
 Microsoft.Build.Execution.BuildRequestData
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild) -> void
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild, Microsoft.Build.Execution.HostServices hostServices) -> void
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
index f34fab4b645..ecaad75bd4e 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -528,6 +528,9 @@ Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyFileLocation.get ->
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyName.set -> void
 Microsoft.Build.Construction.ProjectUsingTaskElement.AssemblyNameLocation.get -> Microsoft.Build.Construction.ElementLocation
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.get -> string
+Microsoft.Build.Construction.ProjectUsingTaskElement.Override.set -> void
+Microsoft.Build.Construction.ProjectUsingTaskElement.OverrideLocation.get -> Microsoft.Build.Construction.ElementLocation
 Microsoft.Build.Construction.ProjectUsingTaskElement.ParameterGroup.get -> Microsoft.Build.Construction.UsingTaskParameterGroupElement
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.get -> string
 Microsoft.Build.Construction.ProjectUsingTaskElement.Runtime.set -> void
@@ -961,6 +964,8 @@ Microsoft.Build.Execution.BuildParameters.AllowFailureWithoutError.set -> void
 Microsoft.Build.Execution.BuildParameters.BuildParameters() -> void
 Microsoft.Build.Execution.BuildParameters.BuildParameters(Microsoft.Build.Evaluation.ProjectCollection projectCollection) -> void
 Microsoft.Build.Execution.BuildParameters.BuildProcessEnvironment.get -> System.Collections.Generic.IDictionary<string, string>
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.get -> System.Threading.ThreadPriority
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.set -> void
 Microsoft.Build.Execution.BuildParameters.Clone() -> Microsoft.Build.Execution.BuildParameters
 Microsoft.Build.Execution.BuildParameters.Culture.get -> System.Globalization.CultureInfo
 Microsoft.Build.Execution.BuildParameters.Culture.set -> void
@@ -1029,6 +1034,8 @@ Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.get -> System.Collect
 Microsoft.Build.Execution.BuildParameters.WarningsAsErrors.set -> void
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.get -> System.Collections.Generic.ISet<string>
 Microsoft.Build.Execution.BuildParameters.WarningsAsMessages.set -> void
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.get -> System.Collections.Generic.ISet<string>
+Microsoft.Build.Execution.BuildParameters.WarningsNotAsErrors.set -> void
 Microsoft.Build.Execution.BuildRequestData
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild) -> void
 Microsoft.Build.Execution.BuildRequestData.BuildRequestData(Microsoft.Build.Execution.ProjectInstance projectInstance, string[] targetsToBuild, Microsoft.Build.Execution.HostServices hostServices) -> void
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index a0b76d9caa0..e69de29bb2d 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,2 +0,0 @@
-Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.get -> System.Threading.ThreadPriority
-Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.set -> void
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index 9ff21f01413..211f8cd00fa 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -301,12 +301,12 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Environment::GetFolderPath", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::GetLogicalDrives", environmentType);
 
-// All the following properties only have getters
+                        // All the following properties only have getters
                         availableStaticMethods.TryAdd("System.Environment::CommandLine", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::Is64BitOperatingSystem", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::Is64BitProcess", environmentType);
-
                         availableStaticMethods.TryAdd("System.Environment::MachineName", environmentType);
+                        availableStaticMethods.TryAdd("System.Environment::NewLine", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::OSVersion", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::ProcessorCount", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::StackTrace", environmentType);
@@ -341,6 +341,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Char", new Tuple<string, Type>(null, typeof(Char)));
                         availableStaticMethods.TryAdd("System.Convert", new Tuple<string, Type>(null, typeof(Convert)));
                         availableStaticMethods.TryAdd("System.DateTime", new Tuple<string, Type>(null, typeof(DateTime)));
+                        availableStaticMethods.TryAdd("System.DateTimeOffset", new Tuple<string, Type>(null, typeof(DateTimeOffset)));
                         availableStaticMethods.TryAdd("System.Decimal", new Tuple<string, Type>(null, typeof(Decimal)));
                         availableStaticMethods.TryAdd("System.Double", new Tuple<string, Type>(null, typeof(Double)));
                         availableStaticMethods.TryAdd("System.Enum", new Tuple<string, Type>(null, typeof(Enum)));
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 129b7311dfc..10018e5f8f1 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -332,6 +332,13 @@
   <data name="TryingExtensionsPath" xml:space="preserve">
     <value>Trying to import {0} using extensions path {1}</value>
   </data>
+  <data name="DuplicateOverrideUsingTaskElement" xml:space="preserve">
+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>
+    <comment>{StrBegin="MSB4275: "}</comment>
+  </data>
+  <data name="OverrideUsingTaskElementCreated" xml:space="preserve">
+    <value>Created an override using task: {0} at {1}</value>
+  </data>
   <data name="OverrideTasksFileFailure" xml:space="preserve">
     <value>MSB4194: The override tasks file could not be successfully loaded. {0}</value>
     <comment>
@@ -463,6 +470,10 @@
     <value>MSB4187: Failed to receive a response from the task thread in the timeout period "{0}" ms. Shutting down.</value>
     <comment>{StrBegin="MSB4187: "}</comment>
   </data>
+  <data name="UnhandledMSBuildError" xml:space="preserve">
+    <value>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</value>
+  </data>
   <data name="IllFormedCondition" xml:space="preserve">
     <value>MSB4088: Condition "{0}" is improperly constructed.</value>
     <comment>{StrBegin="MSB4088: "}</comment>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 9951ac58b2b..bc4f28a26e1 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Došlo k pokusu o vytvoření více přepsání stejné úlohy: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Zadaný výstupní soubor mezipaměti pro výsledky je prázdný.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: Musí se zadat jeden modul plug-in mezipaměti projektu, ale našlo se jich více: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Vytvořilo se přepsání pomocí úlohy: {0} v {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Inicializuje se modul plug-in mezipaměti projektu.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Jedná se o neošetřenou výjimku v MSBuildu – HLASUJTE PROSÍM PRO EXISTUJÍCÍ PROBLÉM NEBO VYTVOŘTE NOVÝ NA https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Číst neinicializovanou vlastnost {0}</target>
@@ -2153,7 +2170,7 @@ Využití:          Průměrné využití {0}: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="translated">Projekt nebyl načten s příznakem PProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
+        <target state="translated">Projekt nebyl načten s příznakem ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 02032c039e1..2d5371cd4e4 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Es wurde versucht, mehrere Außerkraftsetzungen derselben Aufgabe zu erstellen: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Die angegebene Cachedatei für Ausgabeergebnisse ist leer.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: Ein einzelnes Projektcache-Plug-In muss angegeben werden, es wurden jedoch mehrere gefunden: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Außerkraftsetzung mit Task erstellt: {0} bei {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Das Projektcache-Plug-in wird initialisiert.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Dies ist eine nicht behandelte Ausnahme in MSBuild. RUFEN SIE EIN VORHANDENES PROBLEM AUF, ODER ERSTELLEN SIE EIN NEUES UNTER https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Nicht initialisierte Eigenschaft "{0}" lesen</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index e43d0f258df..ae8a6a1e189 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Se intentaron crear varias invalidaciones de la misma tarea: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: El archivo de caché de resultados de salida especificado está vacío.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: Debe especificarse un solo complemento de caché de proyectos, pero se encontraron varios: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Se creó una invalidación mediante la tarea: {0} en {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Inicializando complemento de caché de proyecto.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Esta es una excepción no controlada en MSBuild. VOTE POR UN PROBLEMA EXISTENTE O PRESENTE UNO NUEVO EN https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Leer la propiedad no inicializada "{0}"</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 652e71d684f..0ffddfbe011 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Tentative de création de plusieurs remplacements de la même tâche : {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Le fichier cache des résultats de sortie spécifié est vide.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: un seul plug-in de cache de projet doit être spécifié, mais plusieurs plug-ins ont été trouvés : {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Remplacement créé à l’aide de la tâche : {0} au {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Initialisation du plug-in du cache de projet.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Il s’agit d’une exception non gérée dans MSBuild -- VOTEZ POUR UN PROBLÈME EXISTANT OU ENTREZ UN NOUVEAU FICHIER À https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Lire la propriété non initialisée "{0}"</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 513693a1059..11aec49efc6 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: tentativo di creare più sostituzioni della stessa attività: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: il file della cache dei risultati di output specificato è vuoto.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: è necessario specificare un singolo plug-in della cache del progetto, ma ne sono trovati più di uno: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">È stata creata una sostituzione con l'attività: {0} in {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Inizializzazione del plug-in della cache del progetto.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Si tratta di un'eccezione non gestita in MSBuild-- ESEGUIRE L'UPVOTE DI UN PROBLEMA ESISTENTE O DI UN FILE NUOVO IN https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Legge la proprietà non inizializzata "{0}"</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index b84ce3e9436..1bf7a2f0d24 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 同じタスクの複数のオーバーライドを作成しようとしました: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定された出力結果キャッシュ ファイルは空です。</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: 単一のプロジェクト キャッシュ プラグインを指定する必要がありますが、複数指定されています。{0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">タスクを使用してオーバーライドを作成しました: {1} の {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">プロジェクト キャッシュ プラグインを初期化しています。</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">これは MSBuild でハンドルされない例外です -- 既存の問題に賛成票を投じるか、https://aka.ms/msbuild/unhandled で新しい問題を提起してください。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">初期化されていないプロパティ "{0}" の読み取り</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 334948b2ff5..8f5d34f5cce 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 동일한 작업의 여러 재정의를 만들려고 했습니다. {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 지정한 출력 결과 캐시 파일이 비어 있습니다.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: 단일 프로젝트 캐시 플러그 인이 지정되어야 하지만, {0}에서 여러 개를 찾았습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">다음 작업을 사용하여 재정의를 만들었습니다. {1}의 {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">프로젝트 캐시 플러그인을 초기화 중입니다.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">MSBuild에서 처리되지 않은 예외입니다. https://aka.ms/msbuild/unhandled에서 기존 문제에 찬성 투표하거나 새 문제를 제출하세요.
+ {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">초기화되지 않은 속성 "{0}" 읽기</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 13026af6d02..b893482a44e 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Podjęto próbę utworzenia wielu zastąpień tego samego zadania: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Określony plik wyjściowej pamięci podręcznej wyników jest pusty.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: należy określić jedną wtyczkę pamięci podręcznej projektu, ale znaleziono ich wiele: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Utworzono zastąpienie przy użyciu zadania: {0} o {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Inicjowanie wtyczki pamięci podręcznej projektu.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">To jest nieobsługiwany wyjątek w programie MSBuild — POPRZYJ ISTNIEJĄCY PROBLEM LUB ZAREJESTRUJ NOWY NA https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Odczytaj niezainicjowaną właściwość „{0}”</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index f1e618ea62e..ad14ba37ca1 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: tentativa de criar várias substituições da mesma tarefa: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: o arquivo de cache do resultado de saída especificado está vazio.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: é necessário especificar só um plug-in de cache do projeto, mas foram encontrados vários: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Criou uma substituição usando a tarefa: {0} em {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Inicializando o plugin de cache do projeto.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Esta é uma exceção sem tratamento no MSBuild -- VOTE A FAVOR DE UM PROBLEMA EXISTENTE OU REGISTRE UM NOVO EM https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Ler a propriedade não inicializada "{0}"</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index e19868a5b6e..04004fbdfe1 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: попытка создать несколько переопределений одной задачи: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: указанный выходной файл кэша результатов пустой.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: должен быть указан один подключаемый модуль кэша проектов, но найдено несколько: {0}.</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">Создано переопределение с помощью задачи {0} в {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Инициализация подключаемого модуля кэша проекта.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Это необработанное исключение в MSBuild — ПРОГОЛОСУЙТЕ ЗА СУЩЕСТВУЮЩУЮ ПРОБЛЕМУ ИЛИ СОЗДАЙТЕ НОВУЮ на сайте https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">Чтение неинициализированного свойства "{0}"</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 40f4948f71a..5fc8f54ba4e 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: Aynı {0} görevi için birden çok geçersiz kılma işlemi oluşturulmaya çalışıldı</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: Belirtilen çıkış sonucu önbellek dosyası boş.</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: Tek bir proje önbellek eklentisi belirtilmelidir ancak birden çok eklenti bulundu: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">{0} görevi kullanılarak geçersiz kılma işlemi oluşturuldu, saat: {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">Proje önbellek eklentisi başlatılıyor.</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">Bu, MSBuild'de işlenmeyen bir özel durumdur -- LÜTFEN MEVCUT BIR SORUNA DESTEK OYU VERIN VEYA MEVCUT BIR SORUNU BİLDİRİN: https://aka.ms/msbuild/unhandled.
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">"{0}" başlatılmamış özelliğini oku</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 84aab29de64..4a9d18a374e 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 已尝试创建同一任务的多个重写: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定的输出结果缓存文件为空。</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: 必须指定单个项目缓存插件，但找到多个位置: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">已使用任务创建替代: {0} 位于 {1}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">正在初始化项目缓存插件。</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">这是 MSBuild 中未经处理的异常 -- 请对现有问题投赞成票或在 https://aka.ms/msbuild/unhandled 上提交新问题。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">读取未初始化的属性“{0}”</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 9677e859408..214240db01c 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -92,6 +92,11 @@
         <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
+      <trans-unit id="DuplicateOverrideUsingTaskElement">
+        <source>MSB4275: Attempted to create multiple overrides of the same task: {0}</source>
+        <target state="translated">MSB4275: 已嘗試建立相同工作的多個覆寫: {0}</target>
+        <note>{StrBegin="MSB4275: "}</note>
+      </trans-unit>
       <trans-unit id="EmptyOutputCacheFile">
         <source>MSB4257: The specified output result cache file is empty.</source>
         <target state="translated">MSB4257: 指定的輸出結果快取檔案是空的。</target>
@@ -219,6 +224,11 @@
         <target state="translated">MSB4265: 只可指定單一專案快取外掛程式，但發現多個指定項目: {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="OverrideUsingTaskElementCreated">
+        <source>Created an override using task: {0} at {1}</source>
+        <target state="translated">已使用下列工作建立覆寫: 於 {1} 的 {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="ProjectCacheBeginBuild">
         <source>Initializing project cache plugin.</source>
         <target state="translated">正在初始化專案快取外掛程式。</target>
@@ -419,6 +429,13 @@
       LOCALIZATION: Do not localize the following words: ProjectReference, MSBuild, task.
     </note>
       </trans-unit>
+      <trans-unit id="UnhandledMSBuildError">
+        <source>This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
+    {0}</source>
+        <target state="translated">這是 MSBuild 中未處理的例外狀況 -- 請針對現有的問題附議，或在 https://aka.ms/msbuild/unhandled 提交新的問題。
+    {0}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="UninitializedPropertyRead">
         <source>Read uninitialized property "{0}"</source>
         <target state="translated">讀取未初始化的屬性 "{0}"</target>
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 2f53f2b6a71..9fc047c95c1 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -6,10 +6,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using Microsoft.Build.BackEnd.Components.Logging;
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Utilities;
 
 #nullable disable
 
@@ -17,6 +18,8 @@ namespace Microsoft.Build.Internal
 {
     internal static class EngineFileUtilities
     {
+        private const string DriveEnumeratingWildcardMessageResourceName = "WildcardResultsInDriveEnumeration";
+
         // Regexes for wildcard filespecs that should not get expanded
         // By default all wildcards are expanded.
         private static List<Regex> s_lazyWildCardExpansionRegexes;
@@ -47,14 +50,27 @@ internal static void CaptureLazyWildcardRegexes()
         /// </summary>
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
         /// <returns>Array of file paths, unescaped.</returns>
         internal static string[] GetFileListUnescaped
             (
             string directoryEscaped,
-            string filespecEscaped
+            string filespecEscaped,
+            object loggingMechanism = null,
+            IElementLocation excludeLocation = null
             )
         {
-            return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: false, forceEvaluateWildCards: false, excludeSpecsEscaped: null, fileMatcher: FileMatcher.Default);
+            return GetFileList(
+                directoryEscaped,
+                filespecEscaped,
+                returnEscaped: false,
+                forceEvaluateWildCards: false,
+                excludeSpecsEscaped: null,
+                fileMatcher: FileMatcher.Default,
+                loggingMechanism: loggingMechanism,
+                excludeLocation: excludeLocation);
         }
 
         /// <summary>
@@ -70,8 +86,18 @@ string filespecEscaped
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
         /// <param name="excludeSpecsEscaped">Filespecs to exclude, escaped.</param>
-        /// <param name="forceEvaluate">Whether to force file glob expansion when eager expansion is turned off</param>
-        /// <param name="fileMatcher"></param>
+        /// <param name="forceEvaluate">Whether to force file glob expansion when eager expansion is turned off.</param>
+        /// <param name="fileMatcher">Class that contains functions for matching filenames with patterns.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="includeLocation">Location of Include element in file, used after drive enumeration detection.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
+        /// <param name="importLocation">Location of Import element in file, used after drive enumeration detection.</param>
+        /// <param name="buildEventContext">Context to log a warning, used after drive enumeration detection.</param>
+        /// <param name="buildEventFileInfoFullPath">Full path to project file to create BuildEventFileInfo,
+        /// used after drive enumeration detection.</param>
+        /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
+        /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths, escaped.</returns>
         internal static string[] GetFileListEscaped
             (
@@ -79,10 +105,30 @@ internal static string[] GetFileListEscaped
             string filespecEscaped,
             IEnumerable<string> excludeSpecsEscaped = null,
             bool forceEvaluate = false,
-            FileMatcher fileMatcher = null
+            FileMatcher fileMatcher = null,
+            object loggingMechanism = null,
+            IElementLocation includeLocation = null,
+            IElementLocation excludeLocation = null,
+            IElementLocation importLocation = null,
+            BuildEventContext buildEventContext = null,
+            string buildEventFileInfoFullPath = null,
+            bool disableExcludeDriveEnumerationWarning = false
             )
         {
-            return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: true, forceEvaluate, excludeSpecsEscaped, fileMatcher ?? FileMatcher.Default);
+            return GetFileList(
+                directoryEscaped,
+                filespecEscaped,
+                returnEscaped: true,
+                forceEvaluate,
+                excludeSpecsEscaped,
+                fileMatcher ?? FileMatcher.Default,
+                loggingMechanism: loggingMechanism,
+                includeLocation: includeLocation,
+                excludeLocation: excludeLocation,
+                importLocation: importLocation,
+                buildEventFileInfoFullPath: buildEventFileInfoFullPath,
+                buildEventContext: buildEventContext,
+                disableExcludeDriveEnumerationWarning: disableExcludeDriveEnumerationWarning);
         }
 
         internal static bool FilespecHasWildcards(string filespecEscaped)
@@ -112,9 +158,19 @@ internal static bool FilespecHasWildcards(string filespecEscaped)
         /// <param name="directoryEscaped">The directory to evaluate, escaped.</param>
         /// <param name="filespecEscaped">The filespec to evaluate, escaped.</param>
         /// <param name="returnEscaped"><code>true</code> to return escaped specs.</param>
-        /// <param name="forceEvaluateWildCards">Whether to force file glob expansion when eager expansion is turned off</param>
+        /// <param name="forceEvaluateWildCards">Whether to force file glob expansion when eager expansion is turned off.</param>
         /// <param name="excludeSpecsEscaped">The exclude specification, escaped.</param>
-        /// <param name="fileMatcher"></param>
+        /// <param name="fileMatcher">Class that contains functions for matching filenames with patterns.</param>
+        /// <param name="loggingMechanism">Accepted loggers for drive enumeration: TargetLoggingContext, ILoggingService,
+        /// and EvaluationLoggingContext.</param>
+        /// <param name="includeLocation">Location of Include element in file, used after drive enumeration detection.</param>
+        /// <param name="excludeLocation">Location of Exclude element in file, used after drive enumeration detection.</param>
+        /// <param name="importLocation">Location of Import element in file, used after drive enumeration detection.</param>
+        /// <param name="buildEventContext">Context to log a warning, used after drive enumeration detection.</param>
+        /// <param name="buildEventFileInfoFullPath">Full path to project file to create BuildEventFileInfo,
+        /// used after drive enumeration detection.</param>
+        /// <param name="disableExcludeDriveEnumerationWarning">Flag used to detect when to properly log a warning
+        /// for the Exclude attribute after detecting a drive enumerating wildcard.</param>
         /// <returns>Array of file paths.</returns>
         private static string[] GetFileList
             (
@@ -123,13 +179,24 @@ private static string[] GetFileList
             bool returnEscaped,
             bool forceEvaluateWildCards,
             IEnumerable<string> excludeSpecsEscaped,
-            FileMatcher fileMatcher
+            FileMatcher fileMatcher,
+            object loggingMechanism = null,
+            IElementLocation includeLocation = null,
+            IElementLocation excludeLocation = null,
+            IElementLocation importLocation = null,
+            BuildEventContext buildEventContext = null,
+            string buildEventFileInfoFullPath = null,
+            bool disableExcludeDriveEnumerationWarning = false
             )
         {
             ErrorUtilities.VerifyThrowInternalLength(filespecEscaped, nameof(filespecEscaped));
 
             string[] fileList;
 
+            // Used to properly detect and log drive enumerating wildcards when applicable.
+            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;
+            string excludeFileSpec = string.Empty;
+
             if (!FilespecHasWildcards(filespecEscaped) ||
                 FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards))
             {
@@ -152,8 +219,98 @@ FileMatcher fileMatcher
                 // the list into a string array.  If the filespec started out
                 // as a relative path, we will get back a bunch of relative paths.
                 // If the filespec started out as an absolute path, we will get
-                // back a bunch of absolute paths.
-                fileList = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+                // back a bunch of absolute paths. Also retrieves the search action
+                // and relevant Exclude filespec for drive enumerating wildcard detection.
+                (fileList, action, excludeFileSpec) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
+
+                // Determines whether Exclude filespec or passed in file spec should be
+                // used in drive enumeration warning or exception.
+                bool excludeFileSpecIsEmpty = string.IsNullOrWhiteSpace(excludeFileSpec);
+                string fileSpec = excludeFileSpecIsEmpty ? filespecUnescaped : excludeFileSpec;
+
+                switch (action)
+                {
+                    case (FileMatcher.SearchAction.LogDriveEnumeratingWildcard):
+                        switch (loggingMechanism)
+                        {
+                            // Logging mechanism received from ItemGroupIntrinsicTask.
+                            case TargetLoggingContext targetLoggingContext:
+                                LogDriveEnumerationWarningWithTargetLoggingContext(
+                                    targetLoggingContext,
+                                    includeLocation,
+                                    excludeFileSpecIsEmpty,
+                                    disableExcludeDriveEnumerationWarning,                                
+                                    fileSpec);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator.
+                            case ILoggingService loggingService:
+                                LogDriveEnumerationWarningWithLoggingService(
+                                    loggingService,
+                                    buildEventContext,
+                                    buildEventFileInfoFullPath,
+                                    filespecUnescaped);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                            case EvaluationLoggingContext evaluationLoggingContext:
+                                LogDriveEnumerationWarningWithEvaluationLoggingContext(
+                                    evaluationLoggingContext,
+                                    importLocation,
+                                    excludeFileSpecIsEmpty,
+                                    filespecUnescaped,
+                                    fileSpec);
+
+                                break;
+
+                            default:
+                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                        }
+
+                        break;
+
+                    case (FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard):
+                        switch (loggingMechanism)
+                        {
+                            // Logging mechanism received from ItemGroupIntrinsicTask.
+                            case TargetLoggingContext targetLoggingContext:
+                                ThrowDriveEnumerationExceptionWithTargetLoggingContext(
+                                    includeLocation,
+                                    excludeLocation,
+                                    excludeFileSpecIsEmpty,
+                                    filespecUnescaped,
+                                    fileSpec);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator.
+                            case ILoggingService loggingService:
+                                ThrowDriveEnumerationExceptionWithLoggingService(includeLocation, filespecUnescaped);
+
+                                break;
+
+                            // Logging mechanism received from Evaluator and LazyItemEvaluator.IncludeOperation.
+                            case EvaluationLoggingContext evaluationLoggingContext:
+                                ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(
+                                    importLocation,
+                                    includeLocation,
+                                    excludeLocation,
+                                    filespecUnescaped,
+                                    fileSpec,
+                                    excludeFileSpecIsEmpty);
+
+                                break;
+
+                            default:
+                                throw new InternalErrorException($"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.");
+                        }
+
+                        break;
+
+                    default: break;
+                }
 
                 ErrorUtilities.VerifyThrow(fileList != null, "We must have a list of files here, even if it's empty.");
 
@@ -179,6 +336,152 @@ FileMatcher fileMatcher
             return fileList;
         }
 
+        private static void LogDriveEnumerationWarningWithTargetLoggingContext(TargetLoggingContext targetLoggingContext, IElementLocation includeLocation, bool excludeFileSpecIsEmpty, bool disableExcludeDriveEnumerationWarning, string fileSpec)
+        {
+            // Both condition lines are necessary to skip for the first GetFileListEscaped call
+            // and reach for the GetFileListUnescaped call when the wildcarded Exclude attribute results
+            // in a drive enumeration. Since we only want to check for the Exclude
+            // attribute here, we want to ensure that includeLocation is null - otherwise,
+            // Include wildcard attributes for the GetFileListEscaped calls would falsely appear
+            // with the Exclude attribute in the logged warning.
+            if (((!excludeFileSpecIsEmpty) && (!disableExcludeDriveEnumerationWarning)) ||
+                (includeLocation == null))
+            {
+                targetLoggingContext.LogWarning(
+                        DriveEnumeratingWildcardMessageResourceName,
+                        fileSpec,
+                        XMakeAttributes.exclude,
+                        XMakeElements.itemGroup);
+            }
+
+            // Both conditions are necessary to reach for both GetFileListEscaped calls
+            // and skip for the GetFileListUnescaped call when the wildcarded Include attribute
+            // results in drive enumeration.
+            else if (excludeFileSpecIsEmpty && (includeLocation != null))
+            {
+                targetLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup);
+            }
+        }
+
+        private static void LogDriveEnumerationWarningWithLoggingService(ILoggingService loggingService, BuildEventContext buildEventContext, string buildEventFileInfoFullPath, string filespecUnescaped)
+        {
+            if (buildEventContext != null)
+            {
+                loggingService.LogWarning(
+                    buildEventContext,
+                    string.Empty,
+                    new BuildEventFileInfo(buildEventFileInfoFullPath),
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup);
+            }
+        }
+
+        private static void LogDriveEnumerationWarningWithEvaluationLoggingContext(EvaluationLoggingContext evaluationLoggingContext, IElementLocation importLocation, bool excludeFileSpecIsEmpty, string filespecUnescaped, string fileSpec)
+        {
+            if (importLocation != null)
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.project,
+                    XMakeElements.import);
+            }
+            else if (excludeFileSpecIsEmpty)
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup);
+            }
+            else
+            {
+                evaluationLoggingContext.LogWarning(
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.exclude,
+                    XMakeElements.itemGroup);
+            }
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithTargetLoggingContext(IElementLocation includeLocation, IElementLocation excludeLocation, bool excludeFileSpecIsEmpty, string filespecUnescaped, string fileSpec)
+        {
+            // The first condition is necessary to reach for both GetFileListEscaped calls
+            // whenever the wildcarded Include attribute results in drive enumeration, and
+            // the second condition is necessary to skip for the GetFileListUnescaped call
+            // whenever the wildcarded Exclude attribute results in drive enumeration.
+            if (excludeFileSpecIsEmpty && (includeLocation != null))
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    includeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup);
+            }
+
+            // The first condition is necessary to reach for both GetFileListEscaped calls
+            // whenever the wildcarded Exclude attribute results in drive enumeration, and
+            // the second condition is necessary to reach for the GetFileListUnescaped call
+            // (also when the wildcarded Exclude attribute results in drive enumeration).
+            else if ((!excludeFileSpecIsEmpty) || (includeLocation == null))
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                        excludeLocation,
+                        DriveEnumeratingWildcardMessageResourceName,
+                        fileSpec,
+                        XMakeAttributes.exclude,
+                        XMakeElements.itemGroup);
+            }
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithLoggingService(IElementLocation includeLocation, string filespecUnescaped)
+        {
+            ProjectErrorUtilities.ThrowInvalidProject(
+                includeLocation,
+                DriveEnumeratingWildcardMessageResourceName,
+                filespecUnescaped,
+                XMakeAttributes.include,
+                XMakeElements.itemGroup);
+        }
+
+        private static void ThrowDriveEnumerationExceptionWithEvaluationLoggingContext(IElementLocation importLocation, IElementLocation includeLocation, IElementLocation excludeLocation, string filespecUnescaped, string fileSpec, bool excludeFileSpecIsEmpty)
+        {
+            if (importLocation != null)
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    importLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    filespecUnescaped,
+                    XMakeAttributes.project,
+                    XMakeElements.import);
+            }
+            else if (excludeFileSpecIsEmpty)
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    includeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.include,
+                    XMakeElements.itemGroup);
+            }
+            else
+            {
+                ProjectErrorUtilities.ThrowInvalidProject(
+                    excludeLocation,
+                    DriveEnumeratingWildcardMessageResourceName,
+                    fileSpec,
+                    XMakeAttributes.exclude,
+                    XMakeElements.itemGroup);
+            }
+        }
+
         private static bool FilespecMatchesLazyWildcard(string filespecEscaped, bool forceEvaluateWildCards)
         {
             return Traits.Instance.UseLazyWildCardEvaluation && !forceEvaluateWildCards && MatchesLazyWildcard(filespecEscaped);
diff --git a/src/Build/Xml/XmlReaderExtension.cs b/src/Build/Xml/XmlReaderExtension.cs
index 56b29744664..8cfd9b6497e 100644
--- a/src/Build/Xml/XmlReaderExtension.cs
+++ b/src/Build/Xml/XmlReaderExtension.cs
@@ -40,6 +40,12 @@ private XmlReaderExtension(string file, bool loadAsReadOnly)
                 _streamReader = new StreamReader(_stream, s_utf8NoBom, detectEncodingFromByteOrderMarks: true);
                 Encoding detectedEncoding;
 
+#if RUNTIME_TYPE_NETCORE
+                // Ensure that all Windows codepages are available.
+                // Safe to call multiple times per https://docs.microsoft.com/en-us/dotnet/api/system.text.encoding.registerprovider
+                Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
+#endif
+
                 // The XmlDocumentWithWithLocation class relies on the reader's BaseURI property to be set,
                 // thus we pass the document's file path to the appropriate xml reader constructor.
                 Reader = GetXmlReader(file, _streamReader, loadAsReadOnly, out detectedEncoding);
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 81b11a5b4ed..e238270ae6a 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -82,7 +82,7 @@
 
   <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard')">
     <NetCoreBuild>true</NetCoreBuild>
-    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE</DefineConstants>
+    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE;FEATURE_FASTSPAN</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(NetCoreBuild)'=='true'">
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index dad17637aba..ccffd9b5c05 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -15,6 +15,9 @@
     <!-- Ensure that compiler errors emit full paths so that files
          can be correctly annotated in GitHub. -->
     <GenerateFullPaths>true</GenerateFullPaths>
+    
+    <!-- https://github.com/NuGet/Home/issues/8684 -->
+    <NoWarn>$(NoWarn);NU5131</NoWarn>
 
     <!-- Do not mangle paths for test assemblies, because Shoudly assertions want actual on-disk paths. -->
     <DeterministicSourcePaths Condition="'$(IsTestProject)' == 'true'">false</DeterministicSourcePaths>
@@ -24,11 +27,12 @@
     <!-- Set up BeforeCommon.targets -->
     <CustomBeforeMicrosoftCommonTargets>$(MSBuildThisFileDirectory)Directory.BeforeCommon.targets</CustomBeforeMicrosoftCommonTargets>
 
-    <Platforms>AnyCPU;x64</Platforms>
+    <Platforms>AnyCPU;x64;arm64</Platforms>
 
     <!-- Defaults for target frameworks and architecture -->
-    <LibraryTargetFrameworks>$(FullFrameworkTFM);netstandard2.0</LibraryTargetFrameworks>
-    <LibraryTargetFrameworks Condition="'$(MonoBuild)'=='true'">$(FullFrameworkTFM)</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks>$(FullFrameworkTFM);net6.0;netstandard2.0</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks Condition="'$(DotNetBuildFromSource)' == 'true'">net6.0;netstandard2.0</LibraryTargetFrameworks>
+    <LibraryTargetFrameworks Condition="'$(MonoBuild)'=='true'">$(FullFrameworkTFM);netstandard2.0</LibraryTargetFrameworks>
     <PlatformTarget>AnyCPU</PlatformTarget>
 
     <!-- Target frameworks for Exe and unit test projects (ie projects with runtime output) -->
@@ -71,4 +75,34 @@
     <!-- When targeting .NET Core, Exe and unit tests projects always use AnyCPU architecture -->
     <RuntimeOutputPlatformTarget>AnyCPU</RuntimeOutputPlatformTarget>
   </PropertyGroup>
+
+  <PropertyGroup>
+    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificContentInPackage);ShipRefAssembliesToNuGetPackage</TargetsForTfmSpecificBuildOutput>
+  </PropertyGroup>
+
+  <!-- Produce ONLY reference assemblies and SKIP roslyn analyzers for netstandard2.0 builds. -->
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0' and '$(MSBuildProjectFile)' != 'PortableTask.csproj'">
+    <!-- ProduceOnlyReferenceAssembly and ProduceReferenceAssembly are mutually exclusive compiler flags. -->
+    <ProduceOnlyReferenceAssembly>true</ProduceOnlyReferenceAssembly>
+    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
+    <RunAnalyzers>false</RunAnalyzers>
+    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificContentInPackage);ShipRefAssembliesToNuGetPackage</TargetsForTfmSpecificBuildOutput>
+    <IncludeBuildOutput>false</IncludeBuildOutput>
+    <!-- pdb publishing fails builds for reference-only assemblies. -->
+    <!-- https://github.com/dotnet/msbuild/pull/6148. -->
+    <PublishWindowsPdb>false</PublishWindowsPdb>
+  </PropertyGroup>
+
+  <!-- Ensure ref assemblies are placed under `ref/$(TargetFramework)` in the NuGet package -->
+  <Target Name="ShipRefAssembliesToNuGetPackage" BeforeTargets="Pack" Condition="$(IsInnerBuild) == true">
+    <ItemGroup>
+      <TfmSpecificPackageFile Include="$(TargetRefPath);@(FinalDocFile)">
+          <PackagePath>ref\$(TargetFramework)</PackagePath>
+      </TfmSpecificPackageFile>
+      <!-- ns2.0 builds use `BuiltProjectOutputGroupOutput` for output ref assemblies -->
+      <TfmSpecificPackageFile Include="@(BuiltProjectOutputGroupOutput)" Condition="'$(TargetFramework)' == 'netstandard2.0'">
+          <PackagePath>ref\$(TargetFramework)</PackagePath>
+      </TfmSpecificPackageFile>
+    </ItemGroup>
+  </Target>
 </Project>
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index 2dbbe6d8ace..de6fe3137d5 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -55,6 +55,10 @@
     <PackageReference Include="xunit.core" />
     <PackageReference Include="xunit.assert" />
 
+    <!-- Force updated reference to this package because xunit and shouldly
+         are netstandard1.6 and transitively bring in an old reference -->
+    <PackageReference Include="System.Security.Cryptography.X509Certificates" />
+
     <PackageReference Include="Microsoft.DotNet.XUnitExtensions" />
 
     <!-- Don't localize unit test projects -->
diff --git a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
index da03486b433..b66f3a66b80 100644
--- a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
+++ b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
@@ -23,11 +23,6 @@
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
-
   <ItemGroup>
     <Service Include="{82a7f48d-3b50-4b1e-b82e-3ada8210c358}" />
   </ItemGroup>
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 3ebe0b75ef8..ca49aaf226a 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -24,9 +24,10 @@ internal enum ChangeWaveConversionState
     /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md
     internal class ChangeWaves
     {
-        internal static readonly Version Wave16_10 = new Version(16, 10);
         internal static readonly Version Wave17_0 = new Version(17, 0);
-        internal static readonly Version[] AllWaves = { Wave16_10, Wave17_0 };
+        internal static readonly Version Wave17_2 = new Version(17, 2);
+        internal static readonly Version Wave17_4 = new Version(17, 4);
+        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index da912a435c7..b4e335f7849 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -7,6 +7,9 @@ namespace Microsoft.Build.Eventing
     /// <summary>
     /// This captures information of how various key methods of building with MSBuild ran.
     /// </summary>
+    /// <remarks>
+    /// Changes to existing event method signatures will not be reflected unless you update the <see cref="EventAttribute.Version" /> property or assign a new event ID.
+    /// </remarks>
     [EventSource(Name = "Microsoft-Build")]
     internal sealed class MSBuildEventSource : EventSource
     {
@@ -501,10 +504,10 @@ public void CachedSdkResolverServiceResolveSdkStart(string sdkName, string solut
             WriteEvent(66, sdkName, solutionPath, projectPath);
         }
 
-        [Event(67, Keywords = Keywords.All)]
-        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success)
+        [Event(67, Keywords = Keywords.All, Version = 2)]
+        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
         {
-            WriteEvent(67, sdkName, solutionPath, projectPath, success);
+            WriteEvent(67, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
         /// <remarks>
@@ -584,6 +587,18 @@ public void ProjectCacheEndBuildStop(string pluginTypeName)
             WriteEvent(78, pluginTypeName);
         }
 
+        [Event(79, Keywords = Keywords.All)]
+        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(int submissionId, string sdkName, string solutionPath, string projectPath)
+        {
+            WriteEvent(79, submissionId, sdkName, solutionPath, projectPath);
+        }
+
+        [Event(80, Keywords = Keywords.All)]
+        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submissionId, string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
+        {
+            WriteEvent(80, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
+        }
+
         #endregion
     }
 }
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index df75564473e..e24a13ff151 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -8,14 +8,6 @@
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
     <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
-
-    <!--
-      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections
-      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from
-      an imported package. This suppression should be removed if/when the project is migrated to enable nullable
-      reference types.
-    -->
-    <NoWarn>$(NoWarn),CS8632</NoWarn>
   </PropertyGroup>
 
   <ItemGroup>
@@ -24,8 +16,6 @@
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <PackageReference Include="System.Security.Permissions" />
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 9c3a8dbaec5..9e68fc71c4e 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -9,6 +9,7 @@
 using System.IO;
 using System.Reflection;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Threading;
 
@@ -21,9 +22,10 @@
 #nullable disable
 
 namespace Microsoft.Build.Framework;
+
 internal static class NativeMethods
 {
-    #region Constants
+#region Constants
 
     internal const uint ERROR_INSUFFICIENT_BUFFER = 0x8007007A;
     internal const uint STARTUP_LOADER_SAFEMODE = 0x10;
@@ -48,7 +50,6 @@ internal static class NativeMethods
     internal const int MAX_PATH = 260;
 
     private const string kernel32Dll = "kernel32.dll";
-    private const string mscoreeDLL = "mscoree.dll";
 
     private const string WINDOWS_FILE_SYSTEM_REGISTRY_KEY = @"SYSTEM\CurrentControlSet\Control\FileSystem";
     private const string WINDOWS_LONG_PATHS_ENABLED_VALUE_NAME = "LongPathsEnabled";
@@ -71,9 +72,9 @@ internal static class NativeMethods
     internal const uint WAIT_OBJECT_0 = 0x00000000;
     internal const uint WAIT_TIMEOUT = 0x00000102;
 
-    #endregion
+#endregion
 
-    #region Enums
+#region Enums
 
     private enum PROCESSINFOCLASS : int
     {
@@ -198,9 +199,9 @@ internal enum ProcessorArchitectures
         Unknown
     }
 
-    #endregion
+#endregion
 
-    #region Structs
+#region Structs
 
     /// <summary>
     /// Structure that contain information about the system on which we are running
@@ -249,7 +250,7 @@ protected override bool ReleaseHandle()
     internal class MemoryStatus
     {
         /// <summary>
-        /// Initializes a new instance of the <see cref="T:MemoryStatus"/> class.
+        /// Initializes a new instance of the <see cref="MemoryStatus"/> class.
         /// </summary>
         public MemoryStatus()
         {
@@ -568,9 +569,9 @@ private unsafe static int GetLogicalCoreCountOnWindows()
         return -1;
     }
 
-    #endregion
+#endregion
 
-    #region Member data
+#region Member data
 
     internal static bool HasMaxPath => MaxPath == MAX_PATH;
 
@@ -623,9 +624,7 @@ internal static bool IsMaxPathLegacyWindows()
         }
     }
 
-    // CA1416 warns about code that can only run on Windows, but we verified we're running on Windows before this.
-    // This is the most reasonable way to resolve this part because other ways would require ifdef'ing on NET472.
-#pragma warning disable CA1416
+    [SupportedOSPlatform("windows")]
     private static bool IsLongPathsEnabledRegistry()
     {
         using (RegistryKey fileSystemKey = Registry.LocalMachine.OpenSubKey(WINDOWS_FILE_SYSTEM_REGISTRY_KEY))
@@ -634,7 +633,6 @@ private static bool IsLongPathsEnabledRegistry()
             return fileSystemKey != null && Convert.ToInt32(longPathsEnabledValue) == 1;
         }
     }
-#pragma warning restore CA1416
 
     /// <summary>
     /// Cached value for IsUnixLike (this method is called frequently during evaluation).
@@ -709,10 +707,10 @@ internal static bool IsMono
 #if !CLR2COMPATIBILITY
     private static bool? _isWindows;
 #endif
-
     /// <summary>
     /// Gets a flag indicating if we are running under some version of Windows
     /// </summary>
+    [SupportedOSPlatformGuard("windows")]
     internal static bool IsWindows
     {
 #if CLR2COMPATIBILITY
@@ -867,9 +865,9 @@ private static SystemInformationData SystemInformation
     /// </summary>
     internal static ProcessorArchitectures ProcessorArchitectureNative => SystemInformation.ProcessorArchitectureTypeNative;
 
-    #endregion
+#endregion
 
-    #region Wrapper methods
+#region Wrapper methods
 
     /// <summary>
     /// Really truly non pumping wait.
@@ -950,13 +948,13 @@ internal static string GetShortFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetShortPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer, 0, length);
                     path = fullPath;
                 }
             }
@@ -989,13 +987,13 @@ internal static string GetLongFilePath(string path)
 
             if (length > 0)
             {
-                StringBuilder fullPathBuffer = new StringBuilder(length);
+                char[] fullPathBuffer = new char[length];
                 length = GetLongPathName(path, fullPathBuffer, length);
                 errorCode = Marshal.GetLastWin32Error();
 
                 if (length > 0)
                 {
-                    string fullPath = fullPathBuffer.ToString();
+                    string fullPath = new(fullPathBuffer, 0, length);
                     path = fullPath;
                 }
             }
@@ -1084,7 +1082,7 @@ DateTime LastWriteFileUtcTime(string path)
 
                 if (success && (data.fileAttributes & NativeMethods.FILE_ATTRIBUTE_DIRECTORY) == 0)
                 {
-                    long dt = ((long) (data.ftLastWriteTimeHigh) << 32) | ((long) data.ftLastWriteTimeLow);
+                    long dt = ((long)(data.ftLastWriteTimeHigh) << 32) | ((long)data.ftLastWriteTimeLow);
                     fileModifiedTime = DateTime.FromFileTimeUtc(dt);
 
                     // If file is a symlink _and_ we're not instructed to do the wrong thing, get a more accurate timestamp.
@@ -1451,9 +1449,9 @@ internal static void VerifyThrowWin32Result(int result)
         }
     }
 
-    #endregion
+#endregion
 
-    #region PInvoke
+#region PInvoke
 
     /// <summary>
     /// Gets the current OEM code page which is used by console apps
@@ -1468,17 +1466,6 @@ internal static void VerifyThrowWin32Result(int result)
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
 
-    [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    private static extern uint SearchPath
-    (
-        string path,
-        string fileName,
-        string extension,
-        int numBufferChars,
-        [Out] StringBuilder buffer,
-        int[] filePart
-    );
-
     [DllImport("kernel32.dll", PreserveSig = true, SetLastError = true)]
     [return: MarshalAs(UnmanagedType.Bool)]
     internal static extern bool FreeLibrary([In] IntPtr module);
@@ -1489,26 +1476,14 @@ int[] filePart
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, PreserveSig = true, SetLastError = true)]
     internal static extern IntPtr LoadLibrary(string fileName);
 
-    [DllImport(mscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-    internal static extern uint GetRequestedRuntimeInfo(String pExe,
-                                            String pwszVersion,
-                                            String pConfigurationFile,
-                                            uint startupFlags,
-                                            uint runtimeInfoFlags,
-                                            [Out] StringBuilder pDirectory,
-                                            int dwDirectory,
-                                            out uint dwDirectoryLength,
-                                            [Out] StringBuilder pVersion,
-                                            int cchBuffer,
-                                            out uint dwlength);
-
     /// <summary>
-    /// Gets the fully qualified filename of the currently executing .exe
+    /// Gets the fully qualified filename of the currently executing .exe.
     /// </summary>
+    /// <param name="hModule"><see cref="HandleRef"/> of the module for which we are finding the file name.</param>
+    /// <param name="buffer">The character buffer used to return the file name.</param>
+    /// <param name="length">The length of the buffer.</param>
     [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
-    internal static extern int GetModuleFileName(
-            HandleRef hModule,
-            [Out] StringBuilder buffer, int length);
+    internal static extern int GetModuleFileName(HandleRef hModule, [Out] char[] buffer, int length);
 
     [DllImport("kernel32.dll")]
     internal static extern IntPtr GetStdHandle(int nStdHandle);
@@ -1557,10 +1532,10 @@ internal static bool SetCurrentDirectory(string path)
     private static extern bool GlobalMemoryStatusEx([In, Out] MemoryStatus lpBuffer);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetShortPathName(string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetShortPathName(string path, [Out] char[] fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
-    internal static extern int GetLongPathName([In] string path, [Out] StringBuilder fullpath, [In] int length);
+    internal static extern int GetLongPathName([In] string path, [Out] char[] fullpath, [In] int length);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     internal static extern bool CreatePipe(out SafeFileHandle hReadPipe, out SafeFileHandle hWritePipe, SecurityAttributes lpPipeAttributes, int nSize);
@@ -1609,9 +1584,9 @@ out FILETIME lpLastWriteTime
     [DllImport("kernel32.dll", SetLastError = true)]
     internal static extern bool SetThreadErrorMode(int newMode, out int oldMode);
 
-    #endregion
+#endregion
 
-    #region Extensions
+#region Extensions
 
     /// <summary>
     /// Waits while pumping APC messages.  This is important if the waiting thread is an STA thread which is potentially
@@ -1648,15 +1623,15 @@ internal static bool MsgWaitOne(this WaitHandle handle, int timeout)
 
         if (!(returnValue == 0 || ((uint)returnValue == RPC_S_CALLPENDING && timeout != Timeout.Infinite)))
         {
-           throw new InternalErrorException($"Received {returnValue} from CoWaitForMultipleHandles, but expected 0 (S_OK)");
+            throw new InternalErrorException($"Received {returnValue} from CoWaitForMultipleHandles, but expected 0 (S_OK)");
         }
 
         return returnValue == 0;
     }
 
-    #endregion
+#endregion
 
-    #region helper methods
+#region helper methods
 
     internal static bool DirectoryExists(string fullPath)
     {
@@ -1699,6 +1674,6 @@ internal static bool FileOrDirectoryExistsWindows(string path)
         return GetFileAttributesEx(path, 0, ref data);
     }
 
-    #endregion
+#endregion
 
 }
diff --git a/src/Framework/README.md b/src/Framework/README.md
index 32c4e063b2b..1b72454f526 100644
--- a/src/Framework/README.md
+++ b/src/Framework/README.md
@@ -4,3 +4,8 @@ This package contains `Microsoft.Build.Framework.dll`, which defines [fundamenta
 
 The items in this namespace are primarily base-level classes and interfaces shared across MSBuild's object model.  MSBuild task or extension developers can reference this package to implement interfaces such as
 [`ITask`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.itask), and [`ILogger`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.ilogger).
+
+### netstandard2.0 target
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net6.0` or `net472`. Please use the `net6.0`-targeted assemblies for .NET Core 6+ scenarios.
+
+For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Framework/Sdk/SdkResolver.cs b/src/Framework/Sdk/SdkResolver.cs
index 728bc476bf3..753cc5a0116 100644
--- a/src/Framework/Sdk/SdkResolver.cs
+++ b/src/Framework/Sdk/SdkResolver.cs
@@ -29,15 +29,12 @@ public abstract class SdkResolver
         /// <param name="factory">Factory class to create an <see cref="SdkResult" /></param>
         /// <returns>
         /// An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
-        /// the SDK could not be resolved.  Return <code>null</code> if the resolver is not
+        /// the SDK could not be resolved.  Return <see langword="null"/> if the resolver is not
         /// applicable for a particular <see cref="SdkReference"/>.
         /// </returns>   
-        /// <remarks><format type="text/markdown"><![CDATA[
-        ///  ## Remarks
-        ///  > [!NOTE]
-        ///  > You must use the <xref:Microsoft.Build.Framework.SdkResultFactory> to return a result.
-        ///  ]]></format>
-        /// </remarks>
+        /// <remarks>
+        ///  Note: You must use <see cref="SdkResultFactory"/> to return a result.
+        ///  </remarks>
         /// 
         public abstract SdkResult Resolve(SdkReference sdkReference,
                                           SdkResolverContext resolverContext,
diff --git a/src/Framework/Sdk/SdkResultItem.cs b/src/Framework/Sdk/SdkResultItem.cs
index cff07bb8bf7..febbbeffabc 100644
--- a/src/Framework/Sdk/SdkResultItem.cs
+++ b/src/Framework/Sdk/SdkResultItem.cs
@@ -36,7 +36,7 @@ public SdkResultItem(string itemSpec, Dictionary<string, string>? metadata)
             Metadata = metadata;
         }
 
-        public override bool Equals(object obj)
+        public override bool Equals(object? obj)
         {
             if (obj is SdkResultItem item &&
                    ItemSpec == item.ItemSpec &&
diff --git a/src/Framework/SupportedOSPlatform.cs b/src/Framework/SupportedOSPlatform.cs
new file mode 100644
index 00000000000..8a50d7c82f0
--- /dev/null
+++ b/src/Framework/SupportedOSPlatform.cs
@@ -0,0 +1,27 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if !NET6_0_OR_GREATER
+namespace System.Runtime.Versioning
+{
+    /// <summary>
+    /// SupportedOSPlatform is a net5.0+ Attribute.
+    /// Create the same type only in full-framework and netstandard2.0 builds
+    /// to prevent many #if RUNTIME_TYPE_NETCORE checks.
+    /// </summary>
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)]
+    internal class SupportedOSPlatformGuard : Attribute
+    {
+        internal SupportedOSPlatformGuard(string platformName)
+        {
+        }
+    }
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Class)]
+    internal class SupportedOSPlatform : Attribute
+    {
+        internal SupportedOSPlatform(string platformName)
+        {
+        }
+    }
+}
+#endif
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 3c3d850d7c6..cf60eb140c9 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -43,6 +43,7 @@ public Traits()
         /// </summary>
         public readonly bool UseLazyWildCardEvaluation = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MsBuildSkipEagerWildCardEvaluationRegexes"));
         public readonly bool LogExpandedWildcards = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGEXPANDEDWILDCARDS"));
+        public readonly bool ThrowOnDriveEnumeratingWildcard = Environment.GetEnvironmentVariable("MSBUILDFAILONDRIVEENUMERATINGWILDCARD") == "1";
 
         /// <summary>
         /// Cache file existence for the entire process
@@ -68,6 +69,11 @@ public Traits()
         /// </summary>
         public static readonly string MSBuildNodeHandshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
 
+        /// <summary>
+        /// Override property "MSBuildRuntimeType" to "Full", ignoring the actual runtime type of MSBuild.
+        /// </summary>
+        public readonly bool ForceEvaluateAsFullFramework = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MsBuildForceEvaluateAsFullFramework"));
+
         /// <summary>
         /// Setting the associated environment variable to 1 restores the pre-15.8 single
         /// threaded (slower) copy behavior. Zero implies Int32.MaxValue, less than zero
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index ccefc2aa252..7de79854e86 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1012,6 +1012,7 @@ public void InvalidToolsVersionErrors()
                                         new StringWriter(),
                                         false,
                                         warningsAsErrors: null,
+                                        warningsNotAsErrors: null,
                                         warningsAsMessages: null,
                                         enableRestore: false,
                                         profilerLogger: null,
@@ -1195,11 +1196,36 @@ public void ProcessWarnAsMessageSwitchEmpty()
         {
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
 
-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/warnasmessage" }), commandLineSwitches);
+            // Set "expanded" content to match the placeholder so the verify can use the exact resource string as "expected."
+            string command = "{0}";
+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { "/warnasmessage" }), commandLineSwitches, command);
 
             VerifySwitchError(commandLineSwitches, "/warnasmessage", AssemblyResources.GetString("MissingWarnAsMessageParameterError"));
         }
 
+        /// <summary>
+        /// Verify that environment variables cannot be passed in as command line switches.
+        /// Also verifies that the full command line is properly passed when a switch error occurs.
+        /// </summary>
+        [Fact]
+        public void ProcessEnvironmentVariableSwitch()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                env.SetEnvironmentVariable("ENVIRONMENTVARIABLE", string.Empty);
+
+                CommandLineSwitches commandLineSwitches = new();
+                string fullCommandLine = "msbuild validProject.csproj %ENVIRONMENTVARIABLE%";
+                MSBuildApp.GatherCommandLineSwitches(new List<string>() { "validProject.csproj", "%ENVIRONMENTVARIABLE%" }, commandLineSwitches, fullCommandLine);
+                VerifySwitchError(commandLineSwitches, "%ENVIRONMENTVARIABLE%", String.Format(AssemblyResources.GetString("EnvironmentVariableAsSwitch"), fullCommandLine));
+
+                commandLineSwitches = new();
+                fullCommandLine = "msbuild %ENVIRONMENTVARIABLE% validProject.csproj";
+                MSBuildApp.GatherCommandLineSwitches(new List<string>() { "%ENVIRONMENTVARIABLE%", "validProject.csproj" }, commandLineSwitches, fullCommandLine);
+                VerifySwitchError(commandLineSwitches, "%ENVIRONMENTVARIABLE%", String.Format(AssemblyResources.GetString("EnvironmentVariableAsSwitch"), fullCommandLine));
+            }
+        }
+
         /// <summary>
         /// Verifies that the /warnasmessage switch is parsed properly when codes are specified.
         /// </summary>
diff --git a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
index 813ba0128a1..31985adeda6 100644
--- a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
+++ b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
@@ -28,13 +28,12 @@ public class ProjectSchemaValidationHandlerTest
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyInvalidProjectSchema
-            (
-            )
+        public void VerifyInvalidProjectSchema()
         {
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -60,6 +59,7 @@ public void VerifyInvalidProjectSchema
                 if (projectFilename != null) File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -68,13 +68,12 @@ public void VerifyInvalidProjectSchema
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself1
-            (
-            )
+        public void VerifyInvalidSchemaItself1()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             try
             {
                 oldValueForMSBuildOldOM = Environment.GetEnvironmentVariable("MSBuildOldOM");
@@ -99,6 +98,7 @@ public void VerifyInvalidSchemaItself1
                 if (projectFilename != null) File.Delete(projectFilename);
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -107,13 +107,12 @@ public void VerifyInvalidSchemaItself1
         /// against is itself invalid
         /// </summary>
         [Fact]
-        public void VerifyInvalidSchemaItself2
-            (
-            )
+        public void VerifyInvalidSchemaItself2()
         {
             string invalidSchemaFile = null;
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 
             try
             {
@@ -151,6 +150,7 @@ public void VerifyInvalidSchemaItself2
                 if (invalidSchemaFile != null) File.Delete(invalidSchemaFile);
                 if (projectFilename != null) File.Delete(projectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -163,10 +163,9 @@ public void VerifyInvalidSchemaItself2
          * 
          **********************************************************************/
         [Fact]
-        public void VerifyValidProjectSchema
-            (
-            )
+        public void VerifyValidProjectSchema()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
@@ -198,6 +197,7 @@ public void VerifyValidProjectSchema
                 File.Delete(projectFilename);
                 CleanupSchemaFiles(msbuildTempXsdFilenames);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -207,10 +207,9 @@ public void VerifyValidProjectSchema
         /// should not be caught by the schema
         /// </summary>
         [Fact]
-        public void VerifyInvalidImportNotCaughtBySchema
-            (
-            )
+        public void VerifyInvalidImportNotCaughtBySchema()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string[] msbuildTempXsdFilenames = Array.Empty<string>();
 
             string importedProjectFilename = CreateTempFileOnDisk(@"
@@ -252,6 +251,7 @@ public void VerifyInvalidImportNotCaughtBySchema
                 File.Delete(projectFilename);
                 File.Delete(importedProjectFilename);
                 Environment.SetEnvironmentVariable("MSBuildOldOM", oldValueForMSBuildOldOM);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 9339a10d18e..5849fb8f3c8 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -19,6 +19,7 @@
 using System.IO.Compression;
 using System.Reflection;
 using Microsoft.Build.Utilities;
+using Microsoft.Build.Logging;
 
 #nullable disable
 
@@ -525,6 +526,7 @@ public void Help(string indicator)
         [Fact]
         public void ErrorCommandLine()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
 #if FEATURE_GET_COMMANDLINE
             MSBuildApp.Execute(@"c:\bin\msbuild.exe -junk").ShouldBe(MSBuildApp.ExitType.SwitchError);
 
@@ -538,6 +540,7 @@ public void ErrorCommandLine()
 
             MSBuildApp.Execute(new[] { @"msbuild.exe", "@bogus.rsp" }).ShouldBe(MSBuildApp.ExitType.InitializationError);
 #endif
+            Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
         }
 
         [Fact]
@@ -603,7 +606,6 @@ public void InvalidMaxCPUCountSwitch3()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "foo" });
             }
            );
@@ -614,6 +616,7 @@ public void InvalidMaxCPUCountSwitch4()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
+                // Too big
                 MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1025" });
             }
            );
@@ -766,7 +769,7 @@ private void RobustDelete(string path)
         /// Tests that the environment gets passed on to the node during build.
         /// </summary>
         [Fact]
-        public void TestEnvironment()
+        public void TestEnvironmentTest()
         {
             string projectString = ObjectModelHelpers.CleanupFileContents(
                    @"<?xml version=""1.0"" encoding=""utf-8""?>
@@ -801,6 +804,7 @@ public void TestEnvironment()
         [Fact]
         public void MSBuildEngineLogger()
         {
+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string projectString =
                    "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
                     "<Project ToolsVersion=\"4.0\">" +
@@ -847,6 +851,7 @@ public void MSBuildEngineLogger()
             {
                 File.Delete(projectFileName);
                 File.Delete(logFile);
+                Environment.SetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly", oldValueForMSBuildLoadMicrosoftTargetsReadOnly);
             }
         }
 
@@ -863,7 +868,7 @@ public void GetCommandLine()
             var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
             File.Exists(_pathToArbitraryBogusFile).ShouldBeTrue();
 
-            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -886,7 +891,7 @@ public void GetCommandLineQuotedExe()
                 pathToMSBuildExe = "\"" + pathToMSBuildExe + "\"";
             }
 
-            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out var successfulExit, outputHelper: _output);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -907,7 +912,7 @@ public void GetCommandLineQuotedExeOnPath()
 
                 var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
 
-                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeFalse();
             }
             finally
@@ -938,12 +943,31 @@ public void ResponseFileInProjectDirectoryFoundImplicitly()
             // Find the project in the current directory
             _env.SetCurrentDirectory(directory);
 
-            string output = RunnerUtilities.ExecMSBuild(string.Empty, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(string.Empty, out var successfulExit, _output);
             successfulExit.ShouldBeTrue();
 
             output.ShouldContain("[A=1]");
         }
 
+        [Fact]
+        public void ResponseFileSwitchesAppearInCommandLine()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                TransientTestFile autoRspFile = env.CreateFile(folder, AutoResponseFileName, "-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                TransientTestFile projectFile = env.CreateFile(folder, "project.proj", "<Project><Target Name=\"T\"><Message Text=\"Text\"/></Target></Project>");
+                TransientTestFile rpsFile = env.CreateFile(folder, "myRsp.rsp", "-nr:false -m:2");
+                env.SetCurrentDirectory(folder.Path);
+                string output = RunnerUtilities.ExecMSBuild("project.proj -nologo", out bool success, _output);
+                success.ShouldBeFalse();
+                output.ShouldContain("-nr:false -m:2");
+                output.ShouldContain("-nowarn:MSB1001 @myRsp.rsp %NONEXISTENTENVIRONMENTVARIABLE%");
+                output.ShouldContain("project.proj -nologo");
+                output.ShouldContain(": %NONEXISTENTENVIRONMENTVARIABLE%");
+            }
+        }
+
         /// <summary>
         /// Any msbuild.rsp in the directory of the specified project/solution should be read, and should
         /// take priority over any other response files.
@@ -967,7 +991,7 @@ public void ResponseFileInProjectDirectoryExplicit()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=1]");
@@ -1002,7 +1026,7 @@ public void ResponseFileInProjectDirectoryRandomName()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1038,7 +1062,7 @@ public void ResponseFileInProjectDirectoryCommandLineWins()
 
                 var msbuildParameters = "\"" + projectPath + "\"" + " /p:A=2";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=2]");
@@ -1151,7 +1175,7 @@ public void ResponseFileInProjectDirectoryItselfWithNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeFalse();
 
                 output.ShouldContain("MSB1027"); // msbuild.rsp cannot have /noautoresponse in it
@@ -1186,7 +1210,7 @@ public void ResponseFileInProjectDirectoryButCommandLineNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\" /noautoresponse";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1218,7 +1242,7 @@ public void ResponseFileInProjectDirectoryNullCase()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1246,7 +1270,7 @@ public void ResponseFileSupportsThisFileDirectory()
 
             var msbuildParameters = "\"" + projectPath + "\"";
 
-            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit, _output);
             successfulExit.ShouldBeTrue();
 
             output.ShouldContain($"[A={directory.Path}{Path.DirectorySeparatorChar}]");
@@ -1968,8 +1992,8 @@ public void ProcessConsoleLoggerSwitches()
                            1,
                            loggers
                        );
-            loggers.Count.ShouldBe(0); // "Expected no central loggers to be attached"
-            distributedLoggerRecords.Count.ShouldBe(0); // "Expected no distributed loggers to be attached"
+            loggers.ShouldBeEmpty("Expected no central loggers to be attached");
+            distributedLoggerRecords.ShouldBeEmpty("Expected no distributed loggers to be attached");
 
             MSBuildApp.ProcessConsoleLoggerSwitch
                        (
@@ -1980,8 +2004,12 @@ public void ProcessConsoleLoggerSwitches()
                            1,
                            loggers
                        );
-            loggers.Count.ShouldBe(1); // "Expected a central loggers to be attached"
-            loggers[0].Parameters.ShouldBe("EnableMPLogging;SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameters passed in"
+            loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
+            loggers[0].ShouldBeOfType<ConsoleLogger>();
+            loggers[0].Parameters.ShouldBe(
+                "EnableMPLogging;SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter",
+                "Expected parameter in logger to match parameters passed in",
+                StringCompareShould.IgnoreCase);
 
             MSBuildApp.ProcessConsoleLoggerSwitch
                        (
@@ -1992,11 +2020,18 @@ public void ProcessConsoleLoggerSwitches()
                           2,
                           loggers
                       );
-            loggers.Count.ShouldBe(1); // "Expected a central loggers to be attached"
-            distributedLoggerRecords.Count.ShouldBe(1); // "Expected a distributed logger to be attached"
+            loggers.ShouldHaveSingleItem("Expected a central logger to be attached");
+            distributedLoggerRecords.ShouldHaveSingleItem("Expected a distributed logger to be attached");
             DistributedLoggerRecord distributedLogger = distributedLoggerRecords[0];
-            distributedLogger.CentralLogger.Parameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameters passed in"
-            distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe("SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter", StringCompareShould.IgnoreCase); // "Expected parameter in logger to match parameter passed in"
+            distributedLogger.CentralLogger.ShouldBeOfType<ConsoleLogger>();
+            distributedLogger.CentralLogger.Parameters.ShouldBe(
+                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;parameter;Parameter",
+                "Expected parameter in logger to match parameters passed in",
+                StringCompareShould.IgnoreCase);
+            distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe(
+                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter;FORWARDPROJECTCONTEXTEVENTS",
+                "Expected parameter in logger to match parameter passed in + FORWARDPROJECTCONTEXTEVENTS",
+                StringCompareShould.IgnoreCase);
         }
         #endregion
 
@@ -2270,22 +2305,33 @@ public void BinaryLogContainsImportedFiles()
             archive.Entries.ShouldContain(e => e.FullName.EndsWith(".proj", StringComparison.OrdinalIgnoreCase), 2);
         }
 
-        [Fact]
-        public void EndToEndWarnAsErrors()
-        {
-            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
-
+        [Theory]
+        [InlineData("-warnaserror", "", "", false)]
+        [InlineData("-warnaserror -warnnotaserror:FOR123", "", "", true)]
+        [InlineData("-err: -warnnotaserror:FOR1234", "", "", false)]
+        [InlineData("-warnaserror", "", "FOR123", true)]
+        [InlineData("-warnaserror:FOR123", "", "FOR123", false)]
+        [InlineData("", "FOR123", "FOR123", false)]
+        [InlineData("", "", "FOR123", true)]
+        [InlineData("-warnaserror:FOR1234 -warnnotaserror:FOR123", "", "", false)] // The task should fire as a warning, but this should fail for having warnnotaserror used incorrectly.
+        public void EndToEndWarnAsErrors(string switches, string errorCodes, string notErrorCodes, bool expectedSuccess)
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@$"<Project>
+<PropertyGroup>
+<MSBuildWarningsAsErrors>{errorCodes}</MSBuildWarningsAsErrors>
+<MSBuildWarningsNotAsErrors>{notErrorCodes}</MSBuildWarningsNotAsErrors>
+</PropertyGroup>
   <Target Name=""IssueWarning"">
-    <Warning Text=""Warning!"" />
+    <Warning Text=""Warning!"" Code=""FOR123"" />
   </Target>
 
 </Project>");
 
             TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents);
 
-            RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" -warnaserror", out bool success, _output);
+            RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" {switches} ", out bool success, _output);
 
-            success.ShouldBeFalse();
+            success.ShouldBe(expectedSuccess);
         }
 
         [Trait("Category", "netcore-osx-failing")]
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index d9bc14e1a6f..e99faefea4b 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -5,6 +5,8 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.Text;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
@@ -91,6 +93,7 @@ internal enum ParameterizedSwitch
             Preprocess,
             Targets,
             WarningsAsErrors,
+            WarningsNotAsErrors,
             WarningsAsMessages,
             BinaryLogger,
             Restore,
@@ -257,6 +260,7 @@ bool emptyParametersAllowed
             new ParameterizedSwitchInfo(  new string[] { "preprocess", "pp" },                  ParameterizedSwitch.Preprocess,                 null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "targets", "ts" },                     ParameterizedSwitch.Targets,                    null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "warnaserror", "err" },                ParameterizedSwitch.WarningsAsErrors,           null,                           true,           null,                                  true,   true   ),
+            new ParameterizedSwitchInfo(  new string[] { "warnnotaserror", "noerr" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           "MissingWarnNotAsErrorParameterError", true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "warnasmessage", "nowarn" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           "MissingWarnAsMessageParameterError",  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "binarylogger", "bl" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false  ),
             new ParameterizedSwitchInfo(  new string[] { "restore", "r" },                      ParameterizedSwitch.Restore,                    null,                           false,          null,                                  true,   false  ),
@@ -394,6 +398,8 @@ private struct DetectedParameterizedSwitch
         private DetectedParameterizedSwitch[] _parameterizedSwitches;
         // NOTE: the above arrays are instance members because this class is not required to be a singleton
 
+        internal static List<(string path, string contents)> SwitchesFromResponseFiles = new();
+
         /// <summary>
         /// Default constructor.
         /// </summary>
@@ -708,18 +714,18 @@ internal bool HaveAnySwitchesBeenSet()
         /// Called to flag an error when an unrecognized switch is detected on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnknownSwitchError(string badCommandLineArgValue)
+        internal void SetUnknownSwitchError(string badCommandLineArgValue, string commandLine = "")
         {
-            SetSwitchError("UnknownSwitchError", badCommandLineArgValue);
+            SetSwitchError("UnknownSwitchError", badCommandLineArgValue, commandLine);
         }
 
         /// <summary>
         /// Called to flag an error when a switch that doesn't take parameters is found with parameters on the command line.
         /// </summary>
         /// <param name="badCommandLineArg"></param>
-        internal void SetUnexpectedParametersError(string badCommandLineArgValue)
+        internal void SetUnexpectedParametersError(string badCommandLineArgValue, string commandLine = "")
         {
-            SetSwitchError("UnexpectedParametersError", badCommandLineArgValue);
+            SetSwitchError("UnexpectedParametersError", badCommandLineArgValue, commandLine);
         }
 
         // information about last flagged error
@@ -728,15 +734,16 @@ internal void SetUnexpectedParametersError(string badCommandLineArgValue)
         private string _badCommandLineArg;
         private Exception _innerException;
         private bool _isParameterError;
+        private string _commandLine;
 
         /// <summary>
         /// Used to flag/store switch errors.
         /// </summary>
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
-        internal void SetSwitchError(string messageResourceNameValue, string badCommandLineArgValue)
+        internal void SetSwitchError(string messageResourceNameValue, string badCommandLineArgValue, string commandLine)
         {
-            SetError(messageResourceNameValue, badCommandLineArgValue, null, false);
+            SetError(messageResourceNameValue, badCommandLineArgValue, null, false, commandLine);
         }
 
         /// <summary>
@@ -744,9 +751,9 @@ internal void SetSwitchError(string messageResourceNameValue, string badCommandL
         /// </summary>
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
-        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue)
+        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, string commandLine)
         {
-            SetParameterError(messageResourceNameValue, badCommandLineArgValue, null);
+            SetParameterError(messageResourceNameValue, badCommandLineArgValue, null, commandLine);
         }
 
         /// <summary>
@@ -755,9 +762,9 @@ internal void SetParameterError(string messageResourceNameValue, string badComma
         /// <param name="messageResourceName"></param>
         /// <param name="badCommandLineArg"></param>
         /// <param name="innerException"></param>
-        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue)
+        internal void SetParameterError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, string commandLine)
         {
-            SetError(messageResourceNameValue, badCommandLineArgValue, innerExceptionValue, true);
+            SetError(messageResourceNameValue, badCommandLineArgValue, innerExceptionValue, true, commandLine);
         }
 
         /// <summary>
@@ -767,7 +774,7 @@ internal void SetParameterError(string messageResourceNameValue, string badComma
         /// <param name="badCommandLineArg"></param>
         /// <param name="innerException"></param>
         /// <param name="isParameterError"></param>
-        private void SetError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, bool isParameterErrorValue)
+        private void SetError(string messageResourceNameValue, string badCommandLineArgValue, Exception innerExceptionValue, bool isParameterErrorValue, string commandLine)
         {
             if (!HaveErrors())
             {
@@ -775,6 +782,7 @@ private void SetError(string messageResourceNameValue, string badCommandLineArgV
                 _badCommandLineArg = badCommandLineArgValue;
                 _innerException = innerExceptionValue;
                 _isParameterError = isParameterErrorValue;
+                _commandLine = commandLine;
             }
         }
 
@@ -800,7 +808,12 @@ internal void ThrowErrors()
                 }
                 else
                 {
-                    CommandLineSwitchException.Throw(_errorMessage, _badCommandLineArg);
+                    StringBuilder sb = StringBuilderCache.Acquire();
+                    foreach ((string path, string contents) in SwitchesFromResponseFiles)
+                    {
+                        sb.Append($"\n{ResourceUtilities.FormatResourceStringStripCodeAndKeyword("ResponseFileSwitchFromLocation", contents, path)}");
+                    }
+                    CommandLineSwitchException.Throw("SwitchErrorWithArguments", _badCommandLineArg, ResourceUtilities.GetResourceString(_errorMessage), _commandLine, StringBuilderCache.GetStringAndRelease(sb));
                 }
             }
         }
@@ -814,7 +827,7 @@ internal void ThrowErrors()
         /// considered to be on the "left", and the switches being appended are on the "right".
         /// </remarks>
         /// <param name="switchesToAppend"></param>
-        internal void Append(CommandLineSwitches switchesToAppend)
+        internal void Append(CommandLineSwitches switchesToAppend, string commandLine = "")
         {
             // if this collection doesn't already have an error registered, but the collection being appended does
             if (!HaveErrors() && switchesToAppend.HaveErrors())
@@ -827,6 +840,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                 _badCommandLineArg = switchesToAppend._badCommandLineArg;
                 _innerException = switchesToAppend._innerException;
                 _isParameterError = switchesToAppend._isParameterError;
+                _commandLine = commandLine;
             }
 
             // NOTE: we might run into some duplicate switch errors below, but if we've already registered the error from the
@@ -847,7 +861,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                     else
                     {
                         SetSwitchError(s_parameterlessSwitchesMap[i].duplicateSwitchErrorMessage,
-                            switchesToAppend.GetParameterlessSwitchCommandLineArg((ParameterlessSwitch)i));
+                            switchesToAppend.GetParameterlessSwitchCommandLineArg((ParameterlessSwitch)i), commandLine);
                     }
                 }
             }
@@ -871,7 +885,7 @@ internal void Append(CommandLineSwitches switchesToAppend)
                     else
                     {
                         SetSwitchError(s_parameterizedSwitchesMap[j].duplicateSwitchErrorMessage,
-                            switchesToAppend.GetParameterizedSwitchCommandLineArg((ParameterizedSwitch)j));
+                            switchesToAppend.GetParameterizedSwitchCommandLineArg((ParameterizedSwitch)j), commandLine);
                     }
                 }
             }
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 803083dd1fc..9ea8cc2fcf8 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -7,6 +7,9 @@
     <OutputType>Exe</OutputType>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+    <!-- MSBuild.exe needs to be architecture specific, the rest of the .dlls can be AnyCPU. -->
+    <PlatformTarget Condition="'$(Platform)' == 'arm64'">arm64</PlatformTarget>
+
     <!-- MSBuild.csproj no longer uses apphost. This fixes an issue where certain tests would find
          MSBuild.exe AND MSBuild.dll when they should only find MSBuild.dll. -->
     <UseAppHost>false</UseAppHost>
@@ -30,7 +33,7 @@
     <!-- Temporary solution for
          https://github.com/dotnet/msbuild/issues/834 Long term
          two files should be generated from a single source. -->
-    <AppConfig Condition="'$(Platform)' == 'x64'">app.amd64.config</AppConfig>
+    <AppConfig Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">app.amd64.config</AppConfig>
     <!-- Disable binding redirect generation: we want to be deliberate
          about the redirects we expose plugins to, and we explicitly
          redirect ValueTuple _down_ to match VS. -->
@@ -211,6 +214,13 @@
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
     <PackageReference Include="System.Configuration.ConfigurationManager" />
   </ItemGroup>
+    <!-- Manually download this library for RoslynCodeTaskFactory.
+           See target AddRefAssemblies below. -->
+    <ItemGroup>
+      <PackageDownload Include="netstandard.library">
+        <Version>[2.0.3]</Version>
+      </PackageDownload>
+    </ItemGroup>
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <!-- File for Assemblies we depend on -->
     <Reference Include="System" />
@@ -219,8 +229,9 @@
     <PackageReference Include="LargeAddressAware" PrivateAssets="All" />
   </ItemGroup>
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
+    <!-- Bump these to the latest version despite transitive references to older -->
+    <PackageReference Include="System.Private.Uri" />
+    <PackageReference Include="System.Runtime" />
   </ItemGroup>
   <ItemGroup>
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
@@ -330,6 +341,8 @@
 
   </Target>
 
+  <!-- Note: Keep the `AssemblyFile=` usage here instead of using `AssemblyName`. It acts as a regression test for folks who have been using it this way,
+             which has been in the official docs for some time. -->
   <UsingTask TaskName="ValidateMSBuildPackageDependencyVersions" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
     <Task>
       <Code Source="ValidateMSBuildPackageDependencyVersions.cs" Language="cs" />
diff --git a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
index c9d62a76669..132326e7230 100644
--- a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -3386,6 +3386,9 @@ elementFormDefault="qualified">
                     <xs:attribute name="CertificateThumbprint" use="required" />
                     <xs:attribute name="SigningTarget" use="required" />
                     <xs:attribute name="TimestampUrl" />
+                    <xs:attribute name="TargetFrameworkIdentifier" />
+                    <xs:attribute name="TargetFrameworkVersion" />
+                    <xs:attribute name="DisallowMansignTimestampFallback" />
                 </xs:extension>
             </xs:complexContent>
         </xs:complexType>
@@ -6075,6 +6078,7 @@ elementFormDefault="qualified">
                     <xs:attribute name="RetryDelayMilliseconds" />
                     <xs:attribute name="SkipUnchangedFiles" />
                     <xs:attribute name="SourceUrl" use="required" />
+                    <xs:attribute name="Timeout" />
                 </xs:extension>
             </xs:complexContent>
         </xs:complexType>
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 6b54a4ec089..9ec5f525074 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -280,6 +280,8 @@ public bool IsRunningMultipleNodes
         /// </summary>
         private ICollection<string> WarningsAsErrors { get; set; }
 
+        private ICollection<string> WarningsNotAsErrors { get; set; }
+
         private ICollection<string> WarningsAsMessages { get; set; }
 
         public bool ShouldTreatWarningAsError(string warningCode)
@@ -290,7 +292,12 @@ public bool ShouldTreatWarningAsError(string warningCode)
                 return false;
             }
 
-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);
+            return (WarningsAsErrors.Count == 0 && WarningAsErrorNotOverriden(warningCode)) || WarningsAsMessages.Contains(warningCode);
+        }
+
+        private bool WarningAsErrorNotOverriden(string warningCode)
+        {
+            return WarningsNotAsErrors?.Contains(warningCode) != true;
         }
         #endregion
 
@@ -868,6 +875,7 @@ private void RunTask(object state)
             _updateEnvironment = !taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostDoNotUpdateEnvironment", "1", StringComparison.OrdinalIgnoreCase);
             _updateEnvironmentAndLog = taskConfiguration.BuildProcessEnvironment.ContainsValueAndIsEqual("MSBuildTaskHostUpdateEnvironmentAndLog", "1", StringComparison.OrdinalIgnoreCase);
             WarningsAsErrors = taskConfiguration.WarningsAsErrors;
+            WarningsNotAsErrors = taskConfiguration.WarningsNotAsErrors;
             WarningsAsMessages = taskConfiguration.WarningsAsMessages;
             try
             {
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index 61b9471ba63..c69053daa0c 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </comment>
   </data>
+  <data name="HelpMessage_40_WarnNotAsErrorSwitch" Visibility="Public">
+    <value>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </value>
+    <comment>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </comment>
+  </data>
   <data name="InvalidConfigurationFile" Visibility="Public">
     <value>MSBUILD : Configuration error MSB1043: The application could not start. {0}</value>
     <comment>
@@ -1258,6 +1274,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
+  <data name="MissingWarnNotAsErrorParameterError" UESanitized="true" Visibility="Public">
+    <value>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</value>
+    <comment>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </comment>
+  </data>
   <data name="InvalidProfilerValue" xml:space="preserve">
     <value>MSBUILD : error MSB1053: Provided filename is not valid. {0}</value>
   </data>
@@ -1276,6 +1300,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       logger could not be created -- this message comes from the CLR/FX and is localized.
     </comment>
   </data>
+  <data name="EnvironmentVariableAsSwitch" Visibility="Public">
+    <value>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</value>
+    <comment>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </comment>
+  </data>
   <data name="Process" UESanitized="true" Visibility="Public">
     <value>Process = "{0}"</value>
   </data>
@@ -1290,11 +1322,29 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </data>
   <data name="MSBVersion" UESanitized="true" Visibility="Public">
     <value>MSBuild version = "{0}"</value>
+  </data>
+  <data name="MSBuildDebugPath" Visibility="Public">
+    <value>MSBuild logs and debug information will be at "{0}"</value>
+  </data>
+  <data name="SwitchErrorWithArguments" Visibility="Public">
+    <value>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</value>
+  </data>
+  <data name="ResponseFileSwitchFromLocation" Visibility="Public">
+    <value>'{0}' came from '{1}'</value>
+    <comment>
+      These are response file switches with the location of the response file on disk.
+    </comment>
+  </data>
+  <data name="NotWarnAsErrorWithoutWarnAsError" Visibility="Public">
+    <value>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</value>
+    <comment>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</comment>
   </data>
     <!--
         The command line message bucket is: MSB1001 - MSB1999
 
-        Next error code should be MSB1060.
+        Next error code should be MSB1063.
 
         Don't forget to update this comment after using the new code.
   -->
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 3391a53a640..7ccdc9ab43e 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Nedefinovaná proměnná prostředí předaná jako přepínač.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Seznam kódů upozornění, které se nemají považovat za chyby.
+                     Pomocí středníku nebo čárky oddělte
+                     více kódů upozornění. Nemá žádný vliv, pokud přepínač -warnaserror
+                     není nastavený.
+
+                     Příklad:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1141,6 +1176,11 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
         <target state="translated">Verze MSBuild = {0}</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Protokoly MSBuild a informace o ladění budou dostupné v „{0}“</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Zadejte protokolovací nástroj.</target>
@@ -1211,6 +1251,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Při použití přepínače -warnNotAsError zadejte jeden nebo více kódů upozornění.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1221,6 +1270,11 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Přepínač -warnnotaserror nelze zadat, pokud není zadán také přepínač -warnaserror a není prázdný.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Zadaný protokolovací nástroj nebylo možné vytvořit a nebude se používat. {0}</target>
@@ -1283,6 +1337,13 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">{0} přišla z {1}</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1311,6 +1372,15 @@ Copyright (C) Microsoft Corporation. Všechna práva vyhrazena.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Úplný příkazový řádek:{1}
+  Přepínače připojené pomocí souborů odpovědí:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Cíle se nepovedlo vypsat. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 63493f136ce..e2c30e3ac4f 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Nicht definierte Umgebungsvariable, die als Switch übergeben wurde.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Liste der Warnungscodes, die nicht als Fehler behandelt werden sollen.
+                     Semikolon oder Komma zum Trennen verwenden
+                     mehrere Warnungscodes. Hat keine Auswirkungen, wenn der -warnaserror
+                     Switch nicht festgelegt ist.
+
+Beispiel:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
         <target state="translated">MSBuild-Version = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild-Protokolle und Debuginformationen befinden sich auf "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Geben Sie eine Protokollierung an.</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Geben Sie mindestens einen Warnungscode an, wenn Sie den „-warnNotAsError“-Switch verwenden.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Der „-warnnotaserror“-Switch kann nur angegeben werden, wenn auch der „-warnaserror“-Switch angegeben wurde und leer gelassen wird.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Die angegebene Protokollierung konnte nicht erstellt werden und wird nicht verwendet. {0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">„{0}“ stammt aus „{1}“</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Vollständige Befehlszeile: „{1}“
+  Switches, die von Antwortdateien angefügt werden:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Ziele konnten nicht ausgegeben werden. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index 956059968ba..0195e35549f 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Variable de entorno no definida pasada como modificador.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Lista de códigos de advertencia para que no se traten como errores.
+                     Use un punto y coma o una coma para separar
+                     varios códigos de advertencia. No tiene efecto si el modificador -warnaserror
+                     no se ha establecido.
+
+                     Ejemplo:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1142,6 +1177,11 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
         <target state="translated">Versión de MSBuild: "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Los registros de MSBuild y la información de depuración estarán en "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Especifique un registrador.</target>
@@ -1212,6 +1252,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Especifique uno o varios códigos de advertencia al usar el modificador -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1222,6 +1271,11 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: No se puede especificar el modificador -warnnotaserror a menos que también se especifique el modificador -warnaserror y se deje vacío.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">No se pudo crear el registrador especificado y no se usará. {0}</target>
@@ -1284,6 +1338,13 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' procedía de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1312,6 +1373,15 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Línea de comandos completa: '{1}'
+  Modificadores anexados por archivos de respuesta: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: No se pudieron imprimir los destinos. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index a0aa66f7a84..3065aadd997 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variable d’environnement non définie passée en tant que commutateur.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+     -warnNotAsError[:code[;code2]]
+                     Liste des codes d’avertissement à traiter non comme des erreurs.
+                     Utiliser un point-virgule ou une virgule pour séparer
+                     plusieurs codes d’avertissement. N’a aucun effet si -warnaserror
+                     n’est pas défini.
+
+                     Exemple:
+                       -warnNotAsError:MSB3026
+   </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
         <target state="translated">Version de MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Les journaux MSBuild et les informations de débogage seront au "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Spécifiez un journal.</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Spécifiez un ou plusieurs codes d’avertissement lors de l’utilisation du commutateur -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Impossible de spécifier le commutateur -warnnotaserror, sauf si le commutateur -warnaserror est également spécifié et laissé vide.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Le journaliseur spécifié n'a pas pu être créé et ne sera pas utilisé. {0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' provient de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation. Tous droits réservés.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+ ligne de commande complète : «{1}»
+ Commutateurs ajoutés par les fichiers réponse :{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: les cibles n'ont pas pu être imprimées. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index 200a7a77dae..9c59271398b 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variabile di ambiente non definita passata come opzione.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -255,6 +264,32 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Elenco di codici di avviso da non considerare come errori.
+                     Usare un punto e virgola o una virgola per separare
+                     più codici di avviso. Non ha alcun effetto se l’opzione -warnaserror
+                     non è impostata.
+
+Esempio:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1155,6 +1190,11 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
         <target state="translated">Versione di MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">I log e le informazioni di debug di MSBuild sono contenuti in "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: specificare un logger.</target>
@@ -1225,6 +1265,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: specificare uno o più codici di avviso quando si usa l'opzione -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1235,6 +1284,11 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: non è possibile specificare l'opzione -warnnotaserror a meno che non venga specificata e lasciata vuota anche l'opzione -warnaserror.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Non è stato possibile creare il logger specificato, che quindi non verrà usato. {0}</target>
@@ -1297,6 +1351,13 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' proviene da '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1325,6 +1386,15 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Riga di comando completa: '{1}'
+  Opzioni accodate da file di risposta:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: non è stato possibile stampare le destinazioni. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index 453bbc44766..9c2bee6bc61 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 未定義の環境変数が切り替えとして渡されました。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     エラーとして扱わない警告コードのリスト.
+                     セミコロンまたはコンマを使用して、複数の警告コード
+                     区切ります。-warnaserror スイッチが設定されていない場合
+                     効果はありません。
+
+                     例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation.All rights reserved.
         <target state="translated">MSBuild バージョン = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild のログとデバッグ情報は、"{0}" にあります。</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Logger を指定してください。</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError スイッチを使用する場合は、1 つ以上の警告コードを指定してください。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation.All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -war nullerror スイッチも指定され、空のままにしない限り、-warnnotaserror スイッチを指定できません。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">指定されたロガーを作成できなかったため、使用されません。{0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation.All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">`{0}`からの `{1}`</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation.All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完全なコマンド ライン: `{1}`
+ 応答ファイルによって追加されたスイッチ:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: ターゲットを出力できませんでした。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index e57ed62661a..3d3b611cc74 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 정의되지 않은 환경 변수가 스위치로 전달되었습니다.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+       -warnNotAsError[:code[;code2]]
+                     오류로 처리하지 않을 경고 코드 목록입니다.
+                     세미콜론이나 쉼표를 사용하여 구분하세요.
+                     여러 경고 코드. -warnaserror
+ 스위치가 설정되어 있지 않으면 효과가 없습니다.
+
+                     예:
+                     -warnNotAsError:MSB3026
+   </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">MSBuild 버전 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 로그 및 디버그 정보는 "{0}"에 있습니다.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 로거를 지정하십시오.</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError 스위치를 사용할 때 하나 이상의 경고 코드를 지정하세요.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -warnaserror 스위치도 지정하고 비어 있지 않으면 -warnnotaserror 스위치를 지정할 수 없습니다.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">지정된 로거를 만들 수 없어 지정된 로거가 사용되지 않습니다. {0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}'은(는) '{1}'에서 제공되었습니다.</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+   전체 명령줄: '{1}'
+  응답 파일에 의해 추가된 스위치:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 대상을 출력할 수 없습니다. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index c1e63e21afe..2c2f7464b68 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Niezdefiniowana zmienna środowiskowa przekazana jako przełącznik.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -255,6 +264,32 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+ -warnNotAsError[:code[;code2]]
+ Lista kodów ostrzeżeń, które mają być traktowane jako błędy. 
+ Rozdziel średnik lub przecinek
+ wiele kodów ostrzeżeń. Nie ma żadnego efektu, jeśli przełącznik -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1147,6 +1182,11 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
         <target state="translated">Wersja programu MSBuild = „{0}”</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Dzienniki i informacje debugowania programu MSBuild będą znajdować się w lokalizacji „{0}”</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: określ rejestrator.</target>
@@ -1217,6 +1257,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Określ co najmniej jeden kod ostrzeżenia podczas korzystania z przełącznika –warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1227,6 +1276,11 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: Nie można określić przełącznika –warnnotaserror, chyba że przełącznik –warnaserror również jest określony i pozostanie pusty.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Nie można utworzyć określonego rejestratora i nie zostanie on użyty. {0}</target>
@@ -1289,6 +1343,13 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">Element „{0}“ pochodzi z „{1}“</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1317,6 +1378,15 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrzeżone.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+ Pełny wiersz polecenia: „{1}“
+ Przełączniki dołączane przez pliki odpowiedzi: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Nie można wydrukować elementów docelowych. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index e8293005192..6dc052fc5bd 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. Todos os direitos reservados.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: variável de ambiente indefinida passada como comutador.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -249,6 +258,32 @@ isoladamente.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Lista de códigos de aviso para tratar e não tratar como erros.
+                     Use ponto e vírgula ou vírgula para separar
+                     vários códigos de aviso. Não tem efeito se o -warnaserror
+                     interruptor não está definido.
+
+                     Examplo:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1134,6 +1169,11 @@ isoladamente.
         <target state="translated">Versão do MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Os logs e as informações de depuração do MSBuild estarão no "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Especificar um agente de log.</target>
@@ -1204,6 +1244,15 @@ isoladamente.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: especifique um ou mais códigos de aviso ao usar a opção -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1214,6 +1263,11 @@ isoladamente.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: A opção -warnnotaserror não pode ser especificada, a menos que a opção -warnaserror também seja especificada e deixada em branco.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Não foi possível criar o agente especificado e ele não será usado. {0}</target>
@@ -1276,6 +1330,13 @@ isoladamente.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' proveniente de '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1304,6 +1365,15 @@ isoladamente.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Linha de comando completa: '{1}'
+  Comutadores acrescentados por arquivos de resposta:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: não foi possível imprimir destinos. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index d5f02251680..b39acf70142 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: в качестве параметра передана неопределенная переменная среды.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -247,6 +256,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     Список кодов предупреждений, которые не будут рассматриваться как ошибки.
+                     Используйте точку с запятой или запятую для разделения
+                     нескольких кодов предупреждения. Не действует, если параметр -warnaserror
+                     не задан.
+
+                     Пример:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1132,6 +1167,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">Версия MSBuild = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">Журналы MSBuild и отладочные сведения будут доступны по адресу "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: укажите журнал.</target>
@@ -1202,6 +1242,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: укажите один или несколько кодов предупреждений при использовании параметра -warnNotAsError.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1212,6 +1261,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: невозможно задать параметр -warnnotaserror, если параметр -warnaserror также не задан и не оставлен пустым.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Указанное средство ведения журнала не может быть создано и не будет использоваться. {0}</target>
@@ -1274,6 +1328,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">\"{0}\" получен из \"{1}\"</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1302,6 +1363,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Полная командная строка: '{1}'
+  Параметры, добавленные файлами откликов:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: не удалось вывести целевые объекты. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index 06ed57c5523..eb65858ec3a 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -54,6 +54,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: Tanımlanmamış ortam değişkeni anahtar olarak geçirildi.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+-warnNotAsError[:code[;code2]]
+                     Hata olarak kabul edilmeyen uyarı kodlarının listesi.
+                     Ayırmak için noktalı virgül veya virgül kullanın
+                    çoklu uyarı kodları -warnaserror ise hiçbir etkisi yoktur
+                     anahtarı ayarlanmadı.
+
+Örnek:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1137,6 +1172,11 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
         <target state="translated">MSBuild sürümü = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild günlükleri ve hata ayıklama bilgileri "{0}" yolunda olacak</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: Günlükçü belirtin.</target>
@@ -1207,6 +1247,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: -warnNotAsError anahtarını kullanırken bir veya daha fazla uyarı kodu belirtin.</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1217,6 +1266,11 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: -warnnotaserror anahtarı, -warnaserror anahtarı da belirtilmedikçe ve boş bırakılmadıkça belirtilemez.</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">Belirtilen günlükçü oluşturulamadığından kullanılamıyor. {0}</target>
@@ -1279,6 +1333,13 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}', '{1}' kaynağından geldi</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1307,6 +1368,15 @@ Telif Hakkı (C) Microsoft Corporation. Tüm hakları saklıdır.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    Tam komut satırı: '{1}'
+  Yanıt dosyaları tarafından eklenen anahtarlar:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: Hedefler yazdırılamadı. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 3a68a4c3a6b..a4fc1ecdd32 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 未定义的环境变量作为开关传入。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     不视为错误的警告代码列表.
+                     使用分号或逗号分隔
+                     多个警告代码。如果未设置 -warnaserror
+                     开关，则不会产生任何影响。
+
+                     示例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <target state="translated">MSBuild 版本 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 日志和调试信息将位于"{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 请指定记录器。</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 使用 -warnNotAsError 开关时指定一个或多个警告代码。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: 除非还指定了 -warnaserror 开关并将其留空，否则无法指定 -warnnotaserror 开关。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">无法创建指定的记录器，将不会使用它。{0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">“{0}”来自“{1}”</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完整命令行:“{1}”
+  响应文件追加的开关: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 无法打印目标。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index 5992ad480da..2dc040b10b9 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -54,6 +54,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
     MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
     that itself launches MSBuild on a number of other projects.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="EnvironmentVariableAsSwitch">
+        <source>MSBUILD : error MSB1060: Undefined environment variable passed in as switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 以切換參數傳入未定義的環境變數。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This error is shown when a user passes in an environment variable (including from a response file)
+      but the environment variable is not defined.
+    </note>
       </trans-unit>
       <trans-unit id="FatalError">
         <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
@@ -248,6 +257,32 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       3) all switch names and their short forms e.g. -property, or -p
       4) all verbosity levels and their short forms e.g. quiet, or q
       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
+    </note>
+      </trans-unit>
+      <trans-unit id="HelpMessage_40_WarnNotAsErrorSwitch">
+        <source>
+      -warnNotAsError[:code[;code2]]
+                     List of warning codes to treats not treat as errors.
+                     Use a semicolon or a comma to separate
+                     multiple warning codes. Has no effect if the -warnaserror
+                     switch is not set.
+
+                     Example:
+                       -warnNotAsError:MSB3026
+    </source>
+        <target state="translated">
+      -warnNotAsError[:code[;code2]]
+                     要視為不視為錯誤的警告碼清單。
+                     使用分號或逗號分隔
+                     多個警告碼。如果 -warnaserror 沒有作用
+                     未設定切換參數。
+
+範例:
+                       -warnNotAsError:MSB3026
+    </target>
+        <note>
+      LOCALIZATION: "-warnNotAsError" should not be localized.
+      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
     </note>
       </trans-unit>
       <trans-unit id="HelpMessage_4_HelpSwitch">
@@ -1133,6 +1168,11 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
         <target state="translated">MSBuild 版本 = "{0}"</target>
         <note />
       </trans-unit>
+      <trans-unit id="MSBuildDebugPath">
+        <source>MSBuild logs and debug information will be at "{0}"</source>
+        <target state="translated">MSBuild 記錄和偵錯工具資訊將位於 "{0}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="MissingLoggerError">
         <source>MSBUILD : error MSB1007: Specify a logger.</source>
         <target state="translated">MSBUILD : error MSB1007: 指定記錄器。</target>
@@ -1203,6 +1243,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
       after the switch e.g. "msbuild.exe -verbosity:detailed".
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
+    </note>
+      </trans-unit>
+      <trans-unit id="MissingWarnNotAsErrorParameterError">
+        <source>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</source>
+        <target state="translated">MSBUILD : error MSB1060: 使用 -warnNotAsError 切換參數時，請指定一或多個警告碼。</target>
+        <note>
+      {StrBegin="MSBUILD : error MSB1060: "}
+      UE: This happens if the user does something like "msbuild.exe -warnNotAsError:" without any codes.
+      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
       <trans-unit id="MultipleSchemasError">
@@ -1213,6 +1262,11 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </note>
       </trans-unit>
+      <trans-unit id="NotWarnAsErrorWithoutWarnAsError">
+        <source>MSBUILD : error MSB1062: The -warnnotaserror switch cannot be specified unless the -warnaserror switch is also specified and left empty.</source>
+        <target state="translated">MSBUILD : error MSB1062: 除非同時指定 -warnaserror 切換參數且保留空白，否則無法指定 -warnnotaserror 切換參數。</target>
+        <note>{StrBegin="MSBUILD : error MSB1062: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-warnnotaserror" and "-warnaserror" should not be localized.</note>
+      </trans-unit>
       <trans-unit id="OptionalLoggerCreationMessage">
         <source>The specified logger could not be created and will not be used. {0}</source>
         <target state="translated">無法建立指定的記錄器，且不會使用。{0}</target>
@@ -1275,6 +1329,13 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
         <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
     message does not need in-line parameters because the exception takes care of displaying the invalid arg.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
+      </trans-unit>
+      <trans-unit id="ResponseFileSwitchFromLocation">
+        <source>'{0}' came from '{1}'</source>
+        <target state="translated">'{0}' 來自 '{1}'</target>
+        <note>
+      These are response file switches with the location of the response file on disk.
+    </note>
       </trans-unit>
       <trans-unit id="SchemaFileLocation">
         <source>Validating project using schema file "{0}".</source>
@@ -1303,6 +1364,15 @@ Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。
     that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
+      <trans-unit id="SwitchErrorWithArguments">
+        <source>{0}
+    Full command line: '{1}'
+  Switches appended by response files:{2}</source>
+        <target state="translated">{0}
+    完整命令列: '{1}'
+  回應檔案附加的切換參數:{2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="TargetsCouldNotBePrinted">
         <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
         <target state="translated">MSBUILD : error MSB1059: 無法列印目標。{0}</target>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index e28ca074553..42251449d2a 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -34,6 +34,7 @@
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
+using Microsoft.Build.Shared.Debugging;
 
 #nullable disable
 
@@ -280,7 +281,7 @@ private static void AppendOutputFile(string path, long elapsedTime)
         /// Also, the strings are not localized.
         /// Before execution, this is called with initialize only, causing counters to get called with NextValue() to
         /// initialize them.
-        /// </comments>         
+        /// </comments>
         private static void DumpCounters(bool initializeOnly)
         {
             Process currentProcess = Process.GetCurrentProcess();
@@ -305,7 +306,7 @@ private static void DumpCounters(bool initializeOnly)
             // Generally, the instance names, such as "msbuild" and "msbuild#2" are non deterministic; we want this process.
             // Don't use the "ID Process" counter out of the "Process" category, as it doesn't use the same naming scheme
             // as the .NET counters. However, the "Process ID" counter out of the ".NET CLR Memory" category apparently uses
-            // the same scheme as the other .NET categories.            
+            // the same scheme as the other .NET categories.
             string currentInstance = null;
             PerformanceCounterCategory processCategory = new PerformanceCounterCategory("Process");
             foreach (string instance in processCategory.GetInstanceNames())
@@ -334,7 +335,7 @@ private static void DumpCounters(bool initializeOnly)
 #if FEATURE_PERFORMANCE_COUNTERS
         /// <summary>
         /// Dumps all counters in the category
-        /// </summary>        
+        /// </summary>
         private static void DumpAllInCategory(string currentInstance, PerformanceCounterCategory category, bool initializeOnly)
         {
             if (category.CategoryName.IndexOf("remoting", StringComparison.OrdinalIgnoreCase) != -1) // not interesting
@@ -371,7 +372,7 @@ private static void DumpAllInCategory(string currentInstance, PerformanceCounter
 
         /// <summary>
         /// Dumps one counter
-        /// </summary>          
+        /// </summary>
         private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
         {
             try
@@ -386,7 +387,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
                 if (!initializeOnly)
                 {
                     string friendlyCounterType = GetFriendlyCounterType(counter.CounterType, counter.CounterName);
-                    
+
                     // At least some (such as % in GC; maybe all) "%" counters are already multiplied by 100. So we don't do that here.
 
                     // Show decimal places if meaningful
@@ -404,7 +405,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
 
         /// <summary>
         /// Gets a friendly representation of the counter units
-        /// </summary>        
+        /// </summary>
         private static string GetFriendlyCounterType(PerformanceCounterType type, string name)
         {
             if (name.IndexOf("bytes", StringComparison.OrdinalIgnoreCase) != -1)
@@ -552,6 +553,7 @@ string[] commandLine
                 TextWriter targetsWriter = null;
                 bool detailedSummary = false;
                 ISet<string> warningsAsErrors = null;
+                ISet<string> warningsNotAsErrors = null;
                 ISet<string> warningsAsMessages = null;
                 bool enableRestore = Traits.Instance.EnableRestoreFirst;
                 ProfilerLogger profilerLogger = null;
@@ -562,42 +564,53 @@ string[] commandLine
                 bool lowPriority = false;
                 string[] inputResultsCaches = null;
                 string outputResultsCache = null;
+                CommandLineSwitches.SwitchesFromResponseFiles ??= new();
 
                 GatherAllSwitches(commandLine, out var switchesFromAutoResponseFile, out var switchesNotFromAutoResponseFile);
 
-                if (ProcessCommandLineSwitches(
-                        switchesFromAutoResponseFile,
-                        switchesNotFromAutoResponseFile,
-                        ref projectFile,
-                        ref targets,
-                        ref toolsVersion,
-                        ref globalProperties,
-                        ref loggers,
-                        ref verbosity,
-                        ref distributedLoggerRecords,
+                bool buildCanBeInvoked = ProcessCommandLineSwitches(
+                                            switchesFromAutoResponseFile,
+                                            switchesNotFromAutoResponseFile,
+                                            ref projectFile,
+                                            ref targets,
+                                            ref toolsVersion,
+                                            ref globalProperties,
+                                            ref loggers,
+                                            ref verbosity,
+                                            ref distributedLoggerRecords,
 #if FEATURE_XML_SCHEMA_VALIDATION
-                        ref needToValidateProject,
-                        ref schemaFile,
+                                            ref needToValidateProject,
+                                            ref schemaFile,
+#endif
+                                            ref cpuCount,
+                                            ref enableNodeReuse,
+                                            ref preprocessWriter,
+                                            ref targetsWriter,
+                                            ref detailedSummary,
+                                            ref warningsAsErrors,
+                                            ref warningsNotAsErrors,
+                                            ref warningsAsMessages,
+                                            ref enableRestore,
+                                            ref interactive,
+                                            ref profilerLogger,
+                                            ref enableProfiler,
+                                            ref restoreProperties,
+                                            ref isolateProjects,
+                                            ref graphBuildOptions,
+                                            ref inputResultsCaches,
+                                            ref outputResultsCache,
+                                            ref lowPriority,
+                                            recursing: false,
+#if FEATURE_GET_COMMANDLINE
+                                            commandLine
+#else
+                                            string.Join(' ', commandLine)
 #endif
-                        ref cpuCount,
-                        ref enableNodeReuse,
-                        ref preprocessWriter,
-                        ref targetsWriter,
-                        ref detailedSummary,
-                        ref warningsAsErrors,
-                        ref warningsAsMessages,
-                        ref enableRestore,
-                        ref interactive,
-                        ref profilerLogger,
-                        ref enableProfiler,
-                        ref restoreProperties,
-                        ref isolateProjects,
-                        ref graphBuildOptions,
-                        ref inputResultsCaches,
-                        ref outputResultsCache,
-                        ref lowPriority,
-                        recursing: false
-                        ))
+                );
+
+                CommandLineSwitches.SwitchesFromResponseFiles = null;
+
+                if (buildCanBeInvoked)
                 {
                     // Unfortunately /m isn't the default, and we are not yet brave enough to make it the default.
                     // However we want to give a hint to anyone who is building single proc without realizing it that there
@@ -611,25 +624,11 @@ string[] commandLine
                     }
                     if (preprocessWriter != null && !BuildEnvironmentHelper.Instance.RunningTests)
                     {
-                        // Indicate to the engine that it can NOT toss extraneous file content: we want to 
+                        // Indicate to the engine that it can NOT toss extraneous file content: we want to
                         // see that in preprocessing/debugging
                         Environment.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
                     }
 
-                    // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit
-                    // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.
-                    try
-                    {
-                        if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle)
-                        {
-                            Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal;
-                        }
-                    }
-                    // We avoid increasing priority because that causes failures on mac/linux, but there is no good way to
-                    // verify that a particular priority is lower than "BelowNormal." If the error appears, ignore it and
-                    // leave priority where it was.
-                    catch (Win32Exception) { }
-
                     DateTime t1 = DateTime.Now;
 
                     // If the primary file passed to MSBuild is a .binlog file, play it back into passed loggers
@@ -654,27 +653,27 @@ string[] commandLine
 #if FEATURE_XML_SCHEMA_VALIDATION
                                 needToValidateProject, schemaFile,
 #endif
-                                cpuCount,
-                                enableNodeReuse,
-                                preprocessWriter,
-                                targetsWriter,
-                                detailedSummary,
-                                warningsAsErrors,
-                                warningsAsMessages,
-                                enableRestore,
-                                profilerLogger,
-                                enableProfiler,
-                                interactive,
-                                isolateProjects,
-                                graphBuildOptions,
-                                lowPriority,
-                                inputResultsCaches,
-                                outputResultsCache,
-                                commandLine
-                                ))
-                        {
-                            exitType = ExitType.BuildError;
-                        }
+                                    cpuCount,
+                                    enableNodeReuse,
+                                    preprocessWriter,
+                                    targetsWriter,
+                                    detailedSummary,
+                                    warningsAsErrors,
+                                    warningsNotAsErrors,
+                                    warningsAsMessages,
+                                    enableRestore,
+                                    profilerLogger,
+                                    enableProfiler,
+                                    interactive,
+                                    isolateProjects,
+                                    graphBuildOptions,
+                                    lowPriority,
+                                    inputResultsCaches,
+                                    outputResultsCache,
+                                    commandLine))
+                            {
+                                exitType = ExitType.BuildError;
+                            }
                     } // end of build
 
                     DateTime t2 = DateTime.Now;
@@ -864,7 +863,7 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
             // The OS takes a lock in
             // kernel32.dll!_SetConsoleCtrlHandler, so if a task
             // waits for that lock somehow before quitting, it would hang
-            // because we're in it here. One way a task can end up here is 
+            // because we're in it here. One way a task can end up here is
             // by calling Microsoft.Win32.SystemEvents.Initialize.
             // So do our work asynchronously so we can return immediately.
             // We're already on a threadpool thread anyway.
@@ -953,6 +952,7 @@ internal static bool BuildProject
             TextWriter targetsWriter,
             bool detailedSummary,
             ISet<string> warningsAsErrors,
+            ISet<string> warningsNotAsErrors,
             ISet<string> warningsAsMessages,
             bool enableRestore,
             ProfilerLogger profilerLogger,
@@ -1070,7 +1070,7 @@ string[] commandLine
                 }
 
 #if FEATURE_XML_SCHEMA_VALIDATION
-                // If the user has requested that the schema be validated, do that here. 
+                // If the user has requested that the schema be validated, do that here.
                 if (needToValidateProject && !FileUtilities.IsSolutionFilename(projectFile))
                 {
                     Microsoft.Build.Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
@@ -1084,7 +1084,7 @@ string[] commandLine
                     ProjectSchemaValidationHandler.VerifyProjectSchema(projectFile, schemaFile, toolset.ToolsPath);
 
                     // If there are schema validation errors, an InitializationException is thrown, so if we get here,
-                    // we can safely assume that the project successfully validated. 
+                    // we can safely assume that the project successfully validated.
                     projectCollection.UnloadProject(project);
                 }
 #endif
@@ -1129,6 +1129,7 @@ string[] commandLine
                     parameters.DetailedSummary = detailedSummary;
                     parameters.LogTaskInputs = logTaskInputs;
                     parameters.WarningsAsErrors = warningsAsErrors;
+                    parameters.WarningsNotAsErrors = warningsNotAsErrors;
                     parameters.WarningsAsMessages = warningsAsMessages;
                     parameters.Interactive = interactive;
                     parameters.IsolateProjects = isolateProjects;
@@ -1152,7 +1153,7 @@ string[] commandLine
                     {
                         parameters.MemoryUseLimit = Convert.ToInt32(memoryUseLimit, CultureInfo.InvariantCulture);
 
-                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a 
+                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a
                         // positive value - otherwise setting it too low will result in a zero, which will enable only the default cache behavior
                         // which is not what is intended by using this environment variable.
                         if (parameters.MemoryUseLimit < parameters.MaxNodeCount)
@@ -1168,7 +1169,7 @@ string[] commandLine
                     IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
                     if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
                     {
-                        var commandLineString = 
+                        var commandLineString =
 #if FEATURE_GET_COMMANDLINE
                             commandLine;
 #else
@@ -1266,7 +1267,7 @@ string[] commandLine
                             }
                             else
                             {
-                                // After throwing again below the stack will be reset. Make certain we log everything we 
+                                // After throwing again below the stack will be reset. Make certain we log everything we
                                 // can now
                                 Console.WriteLine(AssemblyResources.GetString("FatalError"));
 #if DEBUG
@@ -1323,7 +1324,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
 
         private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers(string commandLineString)
         {
-            return new[]
+            List<BuildManager.DeferredBuildMessage> messages = new()
             {
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
@@ -1349,8 +1350,20 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "MSBVersion",
                         ProjectCollection.DisplayVersion),
-                    MessageImportance.Low)
+                    MessageImportance.Low),
             };
+
+            if (Traits.Instance.DebugEngine)
+            {
+                messages.Add(
+                    new BuildManager.DeferredBuildMessage(
+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                        "MSBuildDebugPath",
+                        DebugUtils.DebugPath),
+                        MessageImportance.High));
+            }
+
+            return messages;
         }
 
         private static (BuildResultCode result, Exception exception) ExecuteBuild(BuildManager buildManager, BuildRequestData request)
@@ -1521,16 +1534,22 @@ private static void GatherAllSwitches(
             // discard the first piece, because that's the path to the executable -- the rest are args
             commandLineArgs.RemoveAt(0);
 
+#if FEATURE_GET_COMMANDLINE
+            string fullCommandLine = $"'{commandLine}'";
+#else
+            string fullCommandLine = $"'{string.Join(' ', commandLine)}'";
+#endif
+
             // parse the command line, and flag syntax errors and obvious switch errors
             switchesNotFromAutoResponseFile = new CommandLineSwitches();
-            GatherCommandLineSwitches(commandLineArgs, switchesNotFromAutoResponseFile);
+            GatherCommandLineSwitches(commandLineArgs, switchesNotFromAutoResponseFile, fullCommandLine);
 
             // parse the auto-response file (if "/noautoresponse" is not specified), and combine those switches with the
             // switches on the command line
             switchesFromAutoResponseFile = new CommandLineSwitches();
             if (!switchesNotFromAutoResponseFile[CommandLineSwitches.ParameterlessSwitch.NoAutoResponse])
             {
-                GatherAutoResponseFileSwitches(s_exePath, switchesFromAutoResponseFile);
+                GatherAutoResponseFileSwitches(s_exePath, switchesFromAutoResponseFile, fullCommandLine);
             }
         }
 
@@ -1541,7 +1560,7 @@ private static void GatherAllSwitches(
         /// <remarks>
         /// Internal for unit testing only.
         /// </remarks>
-        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches)
+        internal static void GatherCommandLineSwitches(List<string> commandLineArgs, CommandLineSwitches commandLineSwitches, string commandLine = "")
         {
             foreach (string commandLineArg in commandLineArgs)
             {
@@ -1552,7 +1571,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
                     // response file switch starts with @
                     if (unquotedCommandLineArg.StartsWith("@", StringComparison.Ordinal))
                     {
-                        GatherResponseFileSwitch(unquotedCommandLineArg, commandLineSwitches);
+                        GatherResponseFileSwitch(unquotedCommandLineArg, commandLineSwitches, commandLine);
                     }
                     else
                     {
@@ -1591,7 +1610,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
 
                         // Special case: for the switches "/m" (or "/maxCpuCount") and "/bl" (or "/binarylogger") we wish to pretend we saw a default argument
                         // This allows a subsequent /m:n on the command line to override it.
-                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case. 
+                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case.
                         // Note that if no "/m" or "/maxCpuCount" switch -- either with or without parameters -- is present, then we still default to 1 cpu
                         // for backwards compatibility.
                         if (string.IsNullOrEmpty(switchParameters))
@@ -1618,15 +1637,15 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
 
                         if (CommandLineSwitches.IsParameterlessSwitch(switchName, out var parameterlessSwitch, out var duplicateSwitchErrorMessage))
                         {
-                            GatherParameterlessCommandLineSwitch(commandLineSwitches, parameterlessSwitch, switchParameters, duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                            GatherParameterlessCommandLineSwitch(commandLineSwitches, parameterlessSwitch, switchParameters, duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                         }
                         else if (CommandLineSwitches.IsParameterizedSwitch(switchName, out var parameterizedSwitch, out duplicateSwitchErrorMessage, out var multipleParametersAllowed, out var missingParametersErrorMessage, out var unquoteParameters, out var allowEmptyParameters))
                         {
-                            GatherParameterizedCommandLineSwitch(commandLineSwitches, parameterizedSwitch, switchParameters, duplicateSwitchErrorMessage, multipleParametersAllowed, missingParametersErrorMessage, unquoteParameters, unquotedCommandLineArg, allowEmptyParameters);
+                            GatherParameterizedCommandLineSwitch(commandLineSwitches, parameterizedSwitch, switchParameters, duplicateSwitchErrorMessage, multipleParametersAllowed, missingParametersErrorMessage, unquoteParameters, unquotedCommandLineArg, allowEmptyParameters, commandLine);
                         }
                         else
                         {
-                            commandLineSwitches.SetUnknownSwitchError(unquotedCommandLineArg);
+                            commandLineSwitches.SetUnknownSwitchError(unquotedCommandLineArg, commandLine);
                         }
                     }
                 }
@@ -1714,7 +1733,7 @@ int switchIndicatorsLength
         /// </summary>
         /// <param name="unquotedCommandLineArg"></param>
         /// <param name="commandLineSwitches"></param>
-        private static void GatherResponseFileSwitch(string unquotedCommandLineArg, CommandLineSwitches commandLineSwitches)
+        private static void GatherResponseFileSwitch(string unquotedCommandLineArg, CommandLineSwitches commandLineSwitches, string commandLine)
         {
             try
             {
@@ -1722,11 +1741,11 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
 
                 if (responseFile.Length == 0)
                 {
-                    commandLineSwitches.SetSwitchError("MissingResponseFileError", unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError("MissingResponseFileError", unquotedCommandLineArg, commandLine);
                 }
                 else if (!FileSystems.Default.FileExists(responseFile))
                 {
-                    commandLineSwitches.SetParameterError("ResponseFileNotFoundError", unquotedCommandLineArg);
+                    commandLineSwitches.SetParameterError("ResponseFileNotFoundError", unquotedCommandLineArg, commandLine);
                 }
                 else
                 {
@@ -1740,7 +1759,7 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
                     {
                         if (string.Equals(responseFile, includedResponseFile, StringComparison.OrdinalIgnoreCase))
                         {
-                            commandLineSwitches.SetParameterError("RepeatedResponseFileError", unquotedCommandLineArg);
+                            commandLineSwitches.SetParameterError("RepeatedResponseFileError", unquotedCommandLineArg, commandLine);
                             isRepeatedResponseFile = true;
                             break;
                         }
@@ -1779,25 +1798,27 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm
                             }
                         }
 
-                        GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches);
+                        CommandLineSwitches.SwitchesFromResponseFiles.Add((responseFile, string.Join(" ", argsFromResponseFile)));
+
+                        GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches, commandLine);
                     }
                 }
             }
             catch (NotSupportedException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (SecurityException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (UnauthorizedAccessException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
             catch (IOException e)
             {
-                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e);
+                commandLineSwitches.SetParameterError("ReadResponseFileError", unquotedCommandLineArg, e, commandLine);
             }
         }
 
@@ -1815,7 +1836,8 @@ private static void GatherParameterlessCommandLineSwitch
             CommandLineSwitches.ParameterlessSwitch parameterlessSwitch,
             string switchParameters,
             string duplicateSwitchErrorMessage,
-            string unquotedCommandLineArg
+            string unquotedCommandLineArg,
+            string commandLine
         )
         {
             // switch should not have any parameters
@@ -1829,12 +1851,12 @@ string unquotedCommandLineArg
                 }
                 else
                 {
-                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                 }
             }
             else
             {
-                commandLineSwitches.SetUnexpectedParametersError(unquotedCommandLineArg);
+                commandLineSwitches.SetUnexpectedParametersError(unquotedCommandLineArg, commandLine);
             }
         }
 
@@ -1860,7 +1882,8 @@ private static void GatherParameterizedCommandLineSwitch
             string missingParametersErrorMessage,
             bool unquoteParameters,
             string unquotedCommandLineArg,
-            bool allowEmptyParameters
+            bool allowEmptyParameters,
+            string commandLine
         )
         {
             if (// switch must have parameters
@@ -1868,37 +1891,54 @@ bool allowEmptyParameters
                 // unless the parameters are optional
                 (missingParametersErrorMessage == null))
             {
+                // skip the parameter indicator (if any)
+                if (switchParameters.Length > 0)
+                {
+                    switchParameters = switchParameters.Substring(1);
+                }
+
+                if (parameterizedSwitch == CommandLineSwitches.ParameterizedSwitch.Project && IsEnvironmentVariable(switchParameters))
+                {
+                    commandLineSwitches.SetSwitchError("EnvironmentVariableAsSwitch", unquotedCommandLineArg, commandLine);
+                }
+
                 // check if switch is duplicated, and if that's allowed
                 if (!commandLineSwitches.IsParameterizedSwitchSet(parameterizedSwitch) ||
                     (duplicateSwitchErrorMessage == null))
                 {
-                    // skip the parameter indicator (if any)
-                    if (switchParameters.Length > 0)
-                    {
-                        switchParameters = switchParameters.Substring(1);
-                    }
-
                     // save the parameters after unquoting and splitting them if necessary
                     if (!commandLineSwitches.SetParameterizedSwitch(parameterizedSwitch, unquotedCommandLineArg, switchParameters, multipleParametersAllowed, unquoteParameters, allowEmptyParameters))
                     {
                         // if parsing revealed there were no real parameters, flag an error, unless the parameters are optional
                         if (missingParametersErrorMessage != null)
                         {
-                            commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg);
+                            commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg, commandLine);
                         }
                     }
                 }
                 else
                 {
-                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg);
+                    commandLineSwitches.SetSwitchError(duplicateSwitchErrorMessage, unquotedCommandLineArg, commandLine);
                 }
             }
             else
             {
-                commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg);
+                commandLineSwitches.SetSwitchError(missingParametersErrorMessage, unquotedCommandLineArg, commandLine);
             }
         }
 
+        /// <summary>
+        /// Checks whether envVar is an environment variable. MSBuild uses
+        /// Environment.ExpandEnvironmentVariables(string), which only
+        /// considers %-delimited variables.
+        /// </summary>
+        /// <param name="envVar">A possible environment variable</param>
+        /// <returns>Whether envVar is an environment variable</returns>
+        private static bool IsEnvironmentVariable(string envVar)
+        {
+            return envVar.StartsWith("%") && envVar.EndsWith("%") && envVar.Length > 1;
+        }
+
         /// <summary>
         /// The name of the auto-response file.
         /// </summary>
@@ -1924,13 +1964,13 @@ bool allowEmptyParameters
         /// switches from the auto-response file with the switches passed in.
         /// Returns true if the response file was found.
         /// </summary>
-        private static bool GatherAutoResponseFileSwitches(string path, CommandLineSwitches switchesFromAutoResponseFile)
+        private static bool GatherAutoResponseFileSwitches(string path, CommandLineSwitches switchesFromAutoResponseFile, string commandLine)
         {
             string autoResponseFile = Path.Combine(path, autoResponseFileName);
-            return GatherAutoResponseFileSwitchesFromFullPath(autoResponseFile, switchesFromAutoResponseFile);
+            return GatherAutoResponseFileSwitchesFromFullPath(autoResponseFile, switchesFromAutoResponseFile, commandLine);
         }
 
-        private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoResponseFile, CommandLineSwitches switchesFromAutoResponseFile)
+        private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoResponseFile, CommandLineSwitches switchesFromAutoResponseFile, string commandLine)
         {
             bool found = false;
 
@@ -1938,13 +1978,13 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon
             if (FileSystems.Default.FileExists(autoResponseFile))
             {
                 found = true;
-                GatherResponseFileSwitch($"@{autoResponseFile}", switchesFromAutoResponseFile);
+                GatherResponseFileSwitch($"@{autoResponseFile}", switchesFromAutoResponseFile, commandLine);
 
                 // if the "/noautoresponse" switch was set in the auto-response file, flag an error
                 if (switchesFromAutoResponseFile[CommandLineSwitches.ParameterlessSwitch.NoAutoResponse])
                 {
                     switchesFromAutoResponseFile.SetSwitchError("CannotAutoDisableAutoResponseFile",
-                        switchesFromAutoResponseFile.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoAutoResponse));
+                        switchesFromAutoResponseFile.GetParameterlessSwitchCommandLineArg(CommandLineSwitches.ParameterlessSwitch.NoAutoResponse), commandLine);
                 }
 
                 if (switchesFromAutoResponseFile.HaveAnySwitchesBeenSet())
@@ -1986,6 +2026,7 @@ private static bool ProcessCommandLineSwitches
             ref TextWriter targetsWriter,
             ref bool detailedSummary,
             ref ISet<string> warningsAsErrors,
+            ref ISet<string> warningsNotAsErrors,
             ref ISet<string> warningsAsMessages,
             ref bool enableRestore,
             ref bool interactive,
@@ -1997,7 +2038,8 @@ private static bool ProcessCommandLineSwitches
             ref string[] inputResultsCaches,
             ref string outputResultsCache,
             ref bool lowPriority,
-            bool recursing
+            bool recursing,
+            string commandLine
         )
         {
             bool invokeBuild = false;
@@ -2008,8 +2050,8 @@ bool recursing
             // (1) switches from the msbuild.rsp file/s, including recursively included response files
             // (2) switches from the command line, including recursively included response file switches inserted at the point they are declared with their "@" symbol
             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();
-            commandLineSwitches.Append(switchesFromAutoResponseFile);    // lowest precedence
-            commandLineSwitches.Append(switchesNotFromAutoResponseFile);
+            commandLineSwitches.Append(switchesFromAutoResponseFile, commandLine);    // lowest precedence
+            commandLineSwitches.Append(switchesNotFromAutoResponseFile, commandLine);
 
 #if DEBUG
             if (commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.WaitForDebugger])
@@ -2035,6 +2077,27 @@ bool recursing
                 DisplayCopyrightMessage();
             }
 
+
+            // Idle priority would prevent the build from proceeding as the user does normal actions.
+            // This switch is processed early to capture both the command line case (main node should
+            // also be low priority) and the Visual Studio case in which the main node starts and stays
+            // at normal priority (not through XMake.cs) but worker nodes still need to honor this switch.
+            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.LowPriority))
+            {
+                lowPriority = ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority], defaultValue: true, resourceName: "InvalidLowPriorityValue");
+            }
+            try
+            {
+                if (lowPriority && Process.GetCurrentProcess().PriorityClass != ProcessPriorityClass.Idle)
+                {
+                    Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.BelowNormal;
+                }
+            }
+            // We avoid increasing priority because that causes failures on mac/linux, but there is no good way to
+            // verify that a particular priority is lower than "BelowNormal." If the error appears, ignore it and
+            // leave priority where it was.
+            catch (Win32Exception) { }
+
             // if help switch is set (regardless of switch errors), show the help message and ignore the other switches
             if (commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.Help])
             {
@@ -2042,7 +2105,7 @@ bool recursing
             }
             else if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.NodeMode))
             {
-                StartLocalNode(commandLineSwitches);
+                StartLocalNode(commandLineSwitches, lowPriority);
             }
             else
             {
@@ -2067,13 +2130,13 @@ bool recursing
                         // gather any switches from the first Directory.Build.rsp found in the project directory or above
                         string directoryResponseFile = FileUtilities.GetPathOfFileAbove(directoryResponseFileName, projectDirectory);
 
-                        bool found = !string.IsNullOrWhiteSpace(directoryResponseFile) && GatherAutoResponseFileSwitchesFromFullPath(directoryResponseFile, switchesFromAutoResponseFile);
+                        bool found = !string.IsNullOrWhiteSpace(directoryResponseFile) && GatherAutoResponseFileSwitchesFromFullPath(directoryResponseFile, switchesFromAutoResponseFile, commandLine);
 
                         // Don't look for more response files if it's only in the same place we already looked (next to the exe)
                         if (!string.Equals(projectDirectory, s_exePath, StringComparison.OrdinalIgnoreCase))
                         {
                             // this combines any found, with higher precedence, with the switches from the original auto response file switches
-                            found |= GatherAutoResponseFileSwitches(projectDirectory, switchesFromAutoResponseFile);
+                            found |= GatherAutoResponseFileSwitches(projectDirectory, switchesFromAutoResponseFile, commandLine);
                         }
 
                         if (found)
@@ -2103,6 +2166,7 @@ bool recursing
                                                                ref targetsWriter,
                                                                ref detailedSummary,
                                                                ref warningsAsErrors,
+                                                               ref warningsNotAsErrors,
                                                                ref warningsAsMessages,
                                                                ref enableRestore,
                                                                ref interactive,
@@ -2114,7 +2178,8 @@ bool recursing
                                                                ref inputResultsCaches,
                                                                ref outputResultsCache,
                                                                ref lowPriority,
-                                                               recursing: true
+                                                               recursing: true,
+                                                               commandLine
                                                              );
                         }
                     }
@@ -2154,6 +2219,8 @@ bool recursing
 
                     warningsAsErrors = ProcessWarnAsErrorSwitch(commandLineSwitches);
 
+                    warningsNotAsErrors = ProcessWarnNotAsErrorSwitch(commandLineSwitches);
+
                     warningsAsMessages = ProcessWarnAsMessageSwitch(commandLineSwitches);
 
                     if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Restore))
@@ -2176,11 +2243,6 @@ bool recursing
                         graphBuild = ProcessGraphBuildSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.GraphBuild]);
                     }
 
-                    if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.LowPriority))
-                    {
-                        lowPriority = ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority], defaultValue: true, resourceName: "InvalidLowPriorityValue");
-                    }
-
                     inputResultsCaches = ProcessInputResultsCaches(commandLineSwitches);
 
                     outputResultsCache = ProcessOutputResultsCache(commandLineSwitches);
@@ -2237,6 +2299,15 @@ out enableProfiler
                     schemaFile = ProcessValidateSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Validate]);
 #endif
                     invokeBuild = true;
+
+                    if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors) &&
+                        !WarningsAsErrorsSwitchIsEmpty(commandLineSwitches)!)
+                    {
+                        commandLineSwitches.SetSwitchError("NotWarnAsErrorWithoutWarnAsError",
+                        commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors),
+                        commandLine);
+                        commandLineSwitches.ThrowErrors();
+                    }
                 }
             }
 
@@ -2245,6 +2316,18 @@ out enableProfiler
             return invokeBuild;
         }
 
+        private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLineSwitches)
+        {
+            string val = commandLineSwitches.GetParameterizedSwitchCommandLineArg(CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors);
+            if (val is null)
+            {
+                return false;
+            }
+
+            int indexOfColon = val.IndexOf(":");
+            return indexOfColon < 0 || indexOfColon == val.Length - 1;
+        }
+
         internal static GraphBuildOptions ProcessGraphBuildSwitch(string[] parameters)
         {
             var options = new GraphBuildOptions();
@@ -2376,18 +2459,16 @@ internal static TextWriter ProcessTargetsSwitch(string[] parameters)
             return writer;
         }
 
-        internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)
+        private static ISet<string> ProcessWarningRelatedSwitch(CommandLineSwitches commandLineSwitches, CommandLineSwitches.ParameterizedSwitch warningSwitch)
         {
-            // TODO: Parse an environment variable as well?
-
-            if (!commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors))
+            if (!commandLineSwitches.IsParameterizedSwitchSet(warningSwitch))
             {
                 return null;
             }
 
-            string[] parameters = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors];
+            string[] parameters = commandLineSwitches[warningSwitch];
 
-            ISet<string> warningsAsErrors = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+            ISet<string> warningSwitches = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
 
             foreach (string code in parameters
                 .SelectMany(parameter => parameter?.Split(s_commaSemicolon, StringSplitOptions.RemoveEmptyEntries) ?? new string[] { null }))
@@ -2396,37 +2477,30 @@ internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches comman
                 {
                     // An empty /warnaserror is added as "null".  In this case, the list is cleared
                     // so that all warnings are treated errors
-                    warningsAsErrors.Clear();
+                    warningSwitches.Clear();
                 }
                 else if (!string.IsNullOrWhiteSpace(code))
                 {
-                    warningsAsErrors.Add(code.Trim());
+                    warningSwitches.Add(code.Trim());
                 }
             }
 
-            return warningsAsErrors;
+            return warningSwitches;
         }
 
-        internal static ISet<string> ProcessWarnAsMessageSwitch(CommandLineSwitches commandLineSwitches)
+        internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)
         {
-            if (!commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages))
-            {
-                return null;
-            }
-
-            string[] parameters = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages];
-
-            ISet<string> warningsAsMessages = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsAsErrors);
+        }
 
-            foreach (string code in parameters
-                .SelectMany(parameter => parameter?.Split(s_commaSemicolon, StringSplitOptions.RemoveEmptyEntries))
-                .Where(i => !string.IsNullOrWhiteSpace(i))
-                .Select(i => i.Trim()))
-            {
-                warningsAsMessages.Add(code);
-            }
+        internal static ISet<string> ProcessWarnAsMessageSwitch(CommandLineSwitches commandLineSwitches)
+        {
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsAsMessages);
+        }
 
-            return warningsAsMessages;
+        internal static ISet<string> ProcessWarnNotAsErrorSwitch(CommandLineSwitches commandLineSwitches)
+        {
+            return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors);
         }
 
         internal static bool ProcessBooleanSwitch(string[] parameters, bool defaultValue, string resourceName)
@@ -2508,7 +2582,7 @@ internal static ProfilerLogger ProcessProfileEvaluationSwitch(string[] parameter
         /// Uses the input from thinNodeMode switch to start a local node server
         /// </summary>
         /// <param name="commandLineSwitches"></param>
-        private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
+        private static void StartLocalNode(CommandLineSwitches commandLineSwitches, bool lowpriority)
         {
             string[] input = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeMode];
             int nodeModeNumber = 0;
@@ -2536,22 +2610,22 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
             {
                 Exception nodeException = null;
                 NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;
+
                 // normal OOP node case
                 if (nodeModeNumber == 1)
                 {
-                    OutOfProcNode node = new OutOfProcNode();
-
                     // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False
                     bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);
-                    string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
-                    bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals("true");
-
+                    OutOfProcNode node = new OutOfProcNode();
                     shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
 
                     FileUtilities.ClearCacheDirectory();
                 }
                 else if (nodeModeNumber == 2)
                 {
+                    // TaskHost nodes don't need to worry about node reuse or low priority. Node reuse is always off, and TaskHosts
+                    // receive a connection immediately after being launched and shut down as soon as their work is over, so
+                    // whatever our priority is is correct.
                     OutOfProcTaskHostNode node = new OutOfProcTaskHostNode();
                     shutdownReason = node.Run(out nodeException);
                 }
@@ -2825,7 +2899,7 @@ private static string[] ProcessTargetSwitch(string[] parameters)
         private static readonly char[] s_propertyValueSeparator = MSBuildConstants.EqualsChar;
 
         /// <summary>
-        /// This is a set of wildcard chars which can cause a file extension to be invalid 
+        /// This is a set of wildcard chars which can cause a file extension to be invalid
         /// </summary>
         private static readonly char[] s_wildcards = MSBuildConstants.WildcardChars;
 
@@ -2839,7 +2913,7 @@ private static string ProcessToolsVersionSwitch(string[] parameters)
         {
             if (parameters.Length > 0)
             {
-                // We don't do any validation on the value of the ToolsVersion here, since we don't 
+                // We don't do any validation on the value of the ToolsVersion here, since we don't
                 // know what a valid value looks like.  The engine will take care of this later.
                 return parameters[parameters.Length - 1];
             }
@@ -2931,7 +3005,7 @@ out bool enableProfiler
         /// Parameters for a particular logger may be passed in fragments that we have to aggregate: for example,
         ///   /flp:foo=bar;baz=biz /flp:boz=bez becomes "foo=bar;baz=biz;boz=bez"
         /// We are going to aggregate the LoggerParameters into one LoggerParameters string
-        /// to do this we must first trim off the ; from the start and the end of the strings as 
+        /// to do this we must first trim off the ; from the start and the end of the strings as
         /// this would interfere with the use of string.Join by possibly having ;; at the beginning or end of a
         /// logger parameter
         /// </summary>
@@ -2963,7 +3037,7 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
 
                 string fileParameters = "SHOWPROJECTFILE=TRUE;";
                 // Use a default log file name of "msbuild.log", "msbuild1.log", "msbuild2.log", etc; put this first on the parameter
-                // list so that any supplied log file parameter will override it 
+                // list so that any supplied log file parameter will override it
                 if (i == 0)
                 {
                     fileParameters += "logfile=msbuild.log;";
@@ -3041,7 +3115,7 @@ List<ILogger> loggers
             // the console logger is always active, unless specifically disabled
             if (!noConsoleLogger)
             {
-                // A central logger will be created for single proc and multiproc 
+                // A central logger will be created for single proc and multiproc
                 ConsoleLogger logger = new ConsoleLogger(verbosity);
                 string consoleParameters = "SHOWPROJECTFILE=TRUE;";
 
@@ -3073,7 +3147,7 @@ List<ILogger> loggers
         }
 
         /// <summary>
-        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger. 
+        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger.
         /// Looks at the logger's parameters for any verbosity parameter in order to make sure it is setting up the ConfigurableForwardingLogger
         /// with the verbosity level that the logger will actually use.
         /// </summary>
@@ -3089,6 +3163,11 @@ private static DistributedLoggerRecord CreateForwardingLoggerRecord(ILogger logg
                 effectiveVerbosity = ProcessVerbositySwitch(verbosityValue);
             }
 
+            // Ensure that the forwarding logger is passed evaluation-finished
+            // and project-started events unless the user has specified individual
+            // events of interest.
+            loggerParameters += ";FORWARDPROJECTCONTEXTEVENTS";
+
             // Gets the currently loaded assembly in which the specified class is defined
             Assembly engineAssembly = typeof(ProjectCollection).GetTypeInfo().Assembly;
             string loggerClassName = "Microsoft.Build.Logging.ConfigurableForwardingLogger";
@@ -3213,7 +3292,7 @@ private static string ExtractAnyParameterValue(string parameter)
         /// </summary>
         /// <remarks>
         /// Internal for unit testing only
-        /// </remarks> 
+        /// </remarks>
         /// <param name="value"></param>
         /// <returns>The logger verbosity level.</returns>
         internal static LoggerVerbosity ProcessVerbositySwitch(string value)
@@ -3556,7 +3635,7 @@ private static string ProcessValidateSwitch(string[] parameters)
         }
 
         /// <summary>
-        /// Given an invalid ToolsVersion string and the collection of valid toolsets, 
+        /// Given an invalid ToolsVersion string and the collection of valid toolsets,
         /// throws an InitializationException with the appropriate message.
         /// </summary>
         private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<Toolset> toolsets, string toolsVersion)
@@ -3625,6 +3704,7 @@ private static void ShowHelpMessage()
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_11_LoggerSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_30_BinaryLoggerSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_28_WarnAsErrorSwitch"));
+            Console.WriteLine(AssemblyResources.GetString("HelpMessage_40_WarnNotAsErrorSwitch"));
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_29_WarnAsMessageSwitch"));
 #if FEATURE_XML_SCHEMA_VALIDATION
             Console.WriteLine(AssemblyResources.GetString("HelpMessage_15_ValidateSwitch"));
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index 517c74df63f..808d572d30a 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -26,10 +26,6 @@
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
           <codeBase version="15.1.0.0" href="..\Microsoft.Build.dll"/>
         </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.Conversion.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
-        </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Build.Tasks.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
@@ -51,60 +47,79 @@
           <codeBase version="15.1.0.0" href="..\Microsoft.Build.Conversion.Core.dll"/>
         </dependentAssembly>
 
+        <dependentAssembly>
+          <assemblyIdentity name="Microsoft.IO.Redist" culture="neutral" publicKeyToken="cc7b13ffcd2ddd51" />
+          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\Microsoft.IO.Redist.dll"/>
+        </dependentAssembly>
+        
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <codeBase version="1.0.0.0" href="..\Microsoft.NET.StringTools.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools.net35" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-1.0.0.0" newVersion="1.0.0.0" />
+          <codeBase version="1.0.0.0" href="..\Microsoft.NET.StringTools.net35.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
+          <codeBase version="4.0.3.0" href="..\System.Buffers.dll"/>
         </dependentAssembly>
 
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
+          <codeBase version="5.0.0.0" href="..\System.Collections.Immutable.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.1.1" newVersion="4.0.1.1" />
+          <codeBase version="4.0.1.1" href="..\System.Memory.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.1.4.0" newVersion="4.1.4.0" />
+          <codeBase version="4.1.4.0" href="..\System.Numerics.Vectors.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Resources.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.0.0" newVersion="4.0.0.0" />
+          <codeBase version="4.0.0.0" href="..\System.Resources.Extensions.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Runtime.CompilerServices.Unsafe.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Text.Encodings.Web.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Text.Json.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
+          <codeBase version="6.0.0.0" href="..\System.Threading.Tasks.Dataflow.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
+          <codeBase version="4.2.0.1" href="..\System.Threading.Tasks.Extensions.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
@@ -112,6 +127,7 @@
                to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file
                and makes that resolution faster. -->
           <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.0.0" />
+          <codeBase version="4.0.3.0" href="..\System.ValueTuple.dll"/>
         </dependentAssembly>
 
         <!-- Redirects for components dropped by Visual Studio -->
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index f22bacc449e..915c11c69f0 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -21,10 +21,6 @@
           <assemblyIdentity name="Microsoft.Build" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
         </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.Conversion.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
-        </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Build.Tasks.Core" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
diff --git a/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs b/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
index 588c67814f1..a27b5f6dbba 100644
--- a/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
+++ b/src/MSBuildTaskHost/Concurrent/ConcurrentDictionary.cs
@@ -269,14 +269,14 @@ private static void ThrowKeyNullException()
         /// if the key does not already exist.
         /// </summary>
         /// <param name="key">The key of the element to add.</param>
-        /// <param name="valueFactory">The function used to generate a value for the key</param>
-        /// <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference
+        /// <param name="valueFactory">The function used to generate a value for the key.</param>
+        /// <exception cref="ArgumentNullException"><paramref name="key"/> is a null reference
         /// (Nothing in Visual Basic).</exception>
-        /// <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference
+        /// <exception cref="ArgumentNullException"><paramref name="valueFactory"/> is a null reference
         /// (Nothing in Visual Basic).</exception>
-        /// <exception cref="T:System.OverflowException">The dictionary contains too many
+        /// <exception cref="OverflowException">The dictionary contains too many
         /// elements.</exception>
-        /// <returns>The value for the key.  This will be either the existing value for the key if the
+        /// <returns>The value for the key. This will be either the existing value for the key if the
         /// key is already in the dictionary, or the new value for the key as returned by valueFactory
         /// if the key was not in the dictionary.</returns>
         public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index f56435ec284..beca5404f56 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -142,6 +142,9 @@
     <Compile Include="..\Framework\StringBuilderCache.cs">
       <Link>StringBuilderCache.cs</Link>
     </Compile>
+    <Compile Include="..\Framework\SupportedOSPlatform.cs">
+      <Link>SupportedOSPlatform.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\TaskEngineAssemblyResolver.cs">
       <Link>TaskEngineAssemblyResolver.cs</Link>
     </Compile>
@@ -212,8 +215,4 @@
     <PackageReference Include="PdbGit" /> -->
     <PackageReference Include="LargeAddressAware" PrivateAssets="All" />
   </ItemGroup>
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
 </Project>
diff --git a/src/MSBuildTaskHost/OutOfProcTaskHost.cs b/src/MSBuildTaskHost/OutOfProcTaskHost.cs
index c7afd19c8db..4f4b2ab02da 100644
--- a/src/MSBuildTaskHost/OutOfProcTaskHost.cs
+++ b/src/MSBuildTaskHost/OutOfProcTaskHost.cs
@@ -68,7 +68,7 @@ internal enum ExitType
         [MTAThread]
         public static int Main()
         {
-            int exitCode = (Execute() == ExitType.Success ? 0 : 1);
+            int exitCode = Execute() == ExitType.Success ? 0 : 1;
             return exitCode;
         }
 
diff --git a/src/Package/GetBinPaths.targets b/src/Package/GetBinPaths.targets
index f3b734eceb9..b6254cc0d1c 100644
--- a/src/Package/GetBinPaths.targets
+++ b/src/Package/GetBinPaths.targets
@@ -37,6 +37,10 @@
                          OutputItemType="MSBuildTaskHostX64ResolvedProjectReferencePath"
                          GlobalPropertiesToRemove="TargetFramework" />
 
+    <Arm64ProjectReference Include="$(MSBuildThisFileDirectory)\..\MSBuild\MSBuild.csproj"
+                         SetPlatform="Platform=arm64"
+                         SetTargetFramework="TargetFramework=$(FullFrameworkTFM)"
+                         OutputItemType="MSBuildArm64ResolvedProjectReferencePath" />
   </ItemGroup>
 
   <Target Name="SetBinPaths" DependsOnTargets="ResolveProjectReferences">
@@ -48,13 +52,24 @@
 
       <Output TaskParameter="TargetOutputs" ItemName="%(X64ProjectReference.OutputItemType)" />
     </MSBuild>
+
+    <MSBuild
+        Projects="@(Arm64ProjectReference)"
+        BuildInParallel="$(BuildInParallel)"
+        Properties="Configuration=$(Configuration); %(Arm64ProjectReference.SetPlatform); %(Arm64ProjectReference.SetTargetFramework)"
+        RemoveProperties="%(Arm64ProjectReference.GlobalPropertiesToRemove)">
+
+      <Output TaskParameter="TargetOutputs" ItemName="%(Arm64ProjectReference.OutputItemType)" />
+    </MSBuild>
     
     <PropertyGroup>
       <X86BinPath>@(MSBuildResolvedProjectReferencePath->'%(RootDir)%(Directory)')</X86BinPath>
       <X64BinPath>@(MSBuildX64ResolvedProjectReferencePath->'%(RootDir)%(Directory)')</X64BinPath>
+      <Arm64BinPath>@(MSBuildArm64ResolvedProjectReferencePath->'%(RootDir)%(Directory)')</Arm64BinPath>
       <FrameworkBinPath>@(FrameworkResolvedProjectReferencePath->'%(RootDir)%(Directory)')</FrameworkBinPath>
       <MSBuildTaskHostBinPath>@(MSBuildTaskHostResolvedProjectReferencePath->'%(RootDir)%(Directory)')</MSBuildTaskHostBinPath>
       <MSBuildTaskHostX64BinPath>@(MSBuildTaskHostX64ResolvedProjectReferencePath->'%(RootDir)%(Directory)')</MSBuildTaskHostX64BinPath>
+      <MSBuildTaskHostArm64BinPath>@(MSBuildTaskHostArm64ResolvedProjectReferencePath->'%(RootDir)%(Directory)')</MSBuildTaskHostArm64BinPath>
       <MSBuildConversionBinPath>@(MSBuildConversionResolvedProjectReferencePath->'%(RootDir)%(Directory)')</MSBuildConversionBinPath>
     </PropertyGroup>
   </Target>
diff --git a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
index ed375f4b0e7..d28478dfa1b 100644
--- a/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
+++ b/src/Package/MSBuild.VSSetup/MSBuild.VSSetup.csproj
@@ -34,9 +34,11 @@
       <SwrProperty Include="Version=$(VsixVersion)" />
       <SwrProperty Include="X86BinPath=$(X86BinPath)" />
       <SwrProperty Include="X64BinPath=$(X64BinPath)" />
+      <SwrProperty Include="Arm64BinPath=$(Arm64BinPath)" />
       <SwrProperty Include="FrameworkBinPath=$(FrameworkBinPath)" />
       <SwrProperty Include="TaskHostBinPath=$(MSBuildTaskHostBinPath)" />
       <SwrProperty Include="TaskHostX64BinPath=$(MSBuildTaskHostX64BinPath)" />
+      <SwrProperty Include="TaskHostArm64BinPath=$(MSBuildTaskHostArm64BinPath)" />
       <SwrProperty Include="MSBuildConversionBinPath=$(MSBuildConversionBinPath)" />
     </ItemGroup>
   </Target>
diff --git a/src/Package/MSBuild.VSSetup/files.swr b/src/Package/MSBuild.VSSetup/files.swr
index 9c3da0b3224..31a40ba1869 100644
--- a/src/Package/MSBuild.VSSetup/files.swr
+++ b/src/Package/MSBuild.VSSetup/files.swr
@@ -18,6 +18,7 @@ vs.relatedProcessFiles
   vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\amd64\Microsoft.Build.Framework.dll"
   vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\amd64\Microsoft.Build.Tasks.Core.dll"
   vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\amd64\Microsoft.Build.Utilities.Core.dll"
+  vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\arm64\Microsoft.Build.Tasks.Core.dll"
 
 folder InstallDir:\MSBuild\Current
   file source=$(X86BinPath)Microsoft.Common.props
@@ -310,6 +311,70 @@ folder InstallDir:\MSBuild\Current\Bin\amd64\zh-Hant
   file source=$(X64BinPath)zh-Hant\MSBuild.resources.dll vs.file.ngenArchitecture=all
   file source=$(TaskHostX64BinPath)zh-Hant\MSBuildTaskHost.resources.dll vs.file.ngenArchitecture=all
 
+folder InstallDir:\MSBuild\Current\Bin\arm64
+  file source=$(Arm64BinPath)MSBuild.exe vs.file.ngenArchitecture=x64
+  file source=$(Arm64BinPath)MSBuild.exe.config
+
+  file source=$(X86BinPath)Microsoft.Build.Tasks.Core.dll vs.file.ngenArchitecture=all
+  file source=$(X86BinPath)Microsoft.Common.CurrentVersion.targets
+  file source=$(X86BinPath)Microsoft.Common.CrossTargeting.targets
+  file source=$(X86BinPath)Microsoft.Common.overridetasks
+  file source=$(X86BinPath)Microsoft.Common.targets
+  file source=$(X86BinPath)Microsoft.Common.tasks
+  file source=$(X86BinPath)Microsoft.Managed.targets
+  file source=$(X86BinPath)Microsoft.Managed.Before.targets
+  file source=$(X86BinPath)Microsoft.Managed.After.targets
+  file source=$(X86BinPath)Microsoft.CSharp.CurrentVersion.targets
+  file source=$(X86BinPath)Microsoft.CSharp.CrossTargeting.targets
+  file source=$(X86BinPath)Microsoft.CSharp.targets
+  file source=$(X86BinPath)Microsoft.Net.props
+  file source=$(X86BinPath)Microsoft.NetFramework.CurrentVersion.props
+  file source=$(X86BinPath)Microsoft.NetFramework.CurrentVersion.targets
+  file source=$(X86BinPath)Microsoft.NetFramework.props
+  file source=$(X86BinPath)Microsoft.NetFramework.targets
+  file source=$(X86BinPath)Microsoft.VisualBasic.CurrentVersion.targets
+  file source=$(X86BinPath)Microsoft.VisualBasic.CrossTargeting.targets
+  file source=$(X86BinPath)Microsoft.VisualBasic.targets
+  file source=$(X86BinPath)MSBuild.rsp
+  file source=$(X86BinPath)Workflow.targets
+  file source=$(X86BinPath)Workflow.VisualBasic.targets
+  file source=$(X86BinPath)Microsoft.Xaml.targets
+  file source=$(X86BinPath)Microsoft.Data.Entity.targets
+  file source=$(X86BinPath)Microsoft.ServiceModel.targets
+  file source=$(X86BinPath)Microsoft.WinFx.targets
+  file source=$(X86BinPath)Microsoft.WorkflowBuildExtensions.targets
+
+folder InstallDir:\MSBuild\Current\Bin\arm64\MSBuild
+  file source=$(X86BinPath)\MSBuild\Microsoft.Build.Core.xsd
+  file source=$(X86BinPath)\MSBuild\Microsoft.Build.CommonTypes.xsd
+
+folder InstallDir:\MSBuild\Current\Bin\arm64\cs
+  file source=$(Arm64BinPath)cs\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\de
+  file source=$(Arm64BinPath)de\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\es
+  file source=$(Arm64BinPath)es\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\fr
+  file source=$(Arm64BinPath)fr\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\it
+  file source=$(Arm64BinPath)it\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ja
+  file source=$(Arm64BinPath)ja\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ko
+  file source=$(Arm64BinPath)ko\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\pl
+  file source=$(Arm64BinPath)pl\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\pt-BR
+  file source=$(Arm64BinPath)pt-BR\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\ru
+  file source=$(Arm64BinPath)ru\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\tr
+  file source=$(Arm64BinPath)tr\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\zh-Hans
+  file source=$(Arm64BinPath)zh-Hans\MSBuild.resources.dll vs.file.ngenArchitecture=all
+folder InstallDir:\MSBuild\Current\Bin\arm64\zh-Hant
+  file source=$(Arm64BinPath)zh-Hant\MSBuild.resources.dll vs.file.ngenArchitecture=all
+
 folder InstallDir:\Common7\IDE\CommonExtensions\MSBuild
   file source=$(SourceDir)Package\MSBuild.VSSetup\MSBuild.clientenabledpkg
   file source=$(SourceDir)Framework\Microsoft.Build.Framework.pkgdef
diff --git a/src/Samples/PortableTask/PortableTask.csproj b/src/Samples/PortableTask/PortableTask.csproj
index 6a4541787a1..a497a305fb2 100644
--- a/src/Samples/PortableTask/PortableTask.csproj
+++ b/src/Samples/PortableTask/PortableTask.csproj
@@ -3,7 +3,7 @@
     <UseProductOutputPath>true</UseProductOutputPath>
     <CopyNuGetImplementations>false</CopyNuGetImplementations>
     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
-    <TargetFrameworks>netstandard2.0</TargetFrameworks>
+    <TargetFramework>netstandard2.0</TargetFramework>
   </PropertyGroup>
   <ItemGroup>
     <Content Include="portableTaskTest.proj">
diff --git a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
index 5bc6022778e..6df2b6a307f 100644
--- a/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
+++ b/src/Shared/AssemblyFolders/AssemblyFoldersEx.cs
@@ -1,11 +1,10 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using Microsoft.Build.Tasks;
+using System.Runtime.Versioning;
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using ProcessorArchitecture = System.Reflection.ProcessorArchitecture;
@@ -41,6 +40,7 @@ namespace Microsoft.Build.Shared
     ///     {AssemblyFoldersSuffix} = [ PocketPC | SmartPhone | WindowsCE]\AssemblyFoldersEx
     ///
     /// </summary>
+    [SupportedOSPlatform("windows")]
     internal class AssemblyFoldersEx : IEnumerable<AssemblyFoldersExInfo>
     {
         /// <summary>
@@ -498,4 +498,3 @@ internal IEnumerable<string> UniqueDirectoryPaths
         }
     }
 }
-#endif
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 9c5cf7136fb..90d1c081d5c 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -189,59 +189,22 @@ internal AssemblyNameExtension(ITranslator translator) : this()
         /// <returns></returns>
         internal static AssemblyNameExtension GetAssemblyNameEx(string path)
         {
-            AssemblyName assemblyName = null;
-#if !FEATURE_ASSEMBLYLOADCONTEXT
             try
             {
-                assemblyName = AssemblyName.GetAssemblyName(path);
+                return new AssemblyNameExtension(AssemblyName.GetAssemblyName(path));
             }
             catch (FileLoadException)
             {
                 // Its pretty hard to get here, you need an assembly that contains a valid reference
                 // to a dependent assembly that, in turn, throws a FileLoadException during GetAssemblyName.
                 // Still it happened once, with an older version of the CLR. 
-
-                // ...falling through and relying on the assemblyName == null behavior below...
             }
             catch (FileNotFoundException)
             {
                 // Its pretty hard to get here, also since we do a file existence check right before calling this method so it can only happen if the file got deleted between that check and this call.
             }
-#else
-            using (var stream = File.OpenRead(path))
-            using (var peFile = new PEReader(stream))
-            {
-                bool hasMetadata = false;
-                try
-                {
-                    // This can throw if the stream is too small, which means
-                    // the assembly doesn't have metadata.
-                    hasMetadata = peFile.HasMetadata;
-                }
-                finally
-                {
-                    // If the file does not contain PE metadata, throw BadImageFormatException to preserve
-                    // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.
-                    if (!hasMetadata)
-                    {
-                        throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,
-                            AssemblyResources.GetString("ResolveAssemblyReference.AssemblyDoesNotContainPEMetadata"),
-                            path));
-                    }
-                }
-
-                var metadataReader = peFile.GetMetadataReader();
-                var entry = metadataReader.GetAssemblyDefinition();
 
-                assemblyName = new AssemblyName();
-                assemblyName.Name = metadataReader.GetString(entry.Name);
-                assemblyName.Version = entry.Version;
-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);
-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));
-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;
-            }
-#endif
-            return assemblyName == null ? null : new AssemblyNameExtension(assemblyName);
+            return null;
         }
 
         /// <summary>
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index d0ad67ed140..0bf416196af 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -8,7 +8,9 @@
 using System.Collections.Generic;
 using System.Text.RegularExpressions;
 
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared.FileSystem;
+using System.Reflection;
 
 #nullable disable
 
@@ -319,9 +321,10 @@ private static BuildEnvironment TryFromStandaloneMSBuildExe(string msBuildExePat
 
         private static string GetVsRootFromMSBuildAssembly(string msBuildAssembly)
         {
+            string directory = Path.GetDirectoryName(msBuildAssembly);
             return FileUtilities.GetFolderAbove(msBuildAssembly,
-                Path.GetDirectoryName(msBuildAssembly)
-                  .EndsWith(@"\amd64", StringComparison.OrdinalIgnoreCase)
+                directory.EndsWith(@"\amd64", StringComparison.OrdinalIgnoreCase) ||
+                directory.EndsWith(@"\arm64", StringComparison.OrdinalIgnoreCase)
                     ? 5
                     : 4);
         }
@@ -333,7 +336,8 @@ private static string GetMSBuildExeFromVsRoot(string visualStudioRoot)
                 "MSBuild",
                 CurrentToolsVersion,
                 "Bin",
-                IntPtr.Size == 8 ? "amd64" : string.Empty,
+                NativeMethodsShared.ProcessorArchitecture == Framework.NativeMethods.ProcessorArchitectures.X64 ? "amd64" :
+                NativeMethodsShared.ProcessorArchitecture == Framework.NativeMethods.ProcessorArchitectures.ARM64 ? "arm64" : string.Empty,
                 "MSBuild.exe");
         }
 
@@ -528,34 +532,38 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
             if (mode == BuildEnvironmentMode.None || currentMSBuildExeFile == null || currentToolsDirectory == null)
                 return;
 
-            // Check to see if our current folder is 'amd64'
-            bool runningInAmd64 = string.Equals(currentToolsDirectory.Name, "amd64", StringComparison.OrdinalIgnoreCase);
-
             var msBuildExeName = currentMSBuildExeFile.Name;
-            var folderAbove = currentToolsDirectory.Parent?.FullName;
 
-            if (folderAbove != null)
+            if (mode == BuildEnvironmentMode.VisualStudio)
+            {
+                // In Visual Studio, the entry-point MSBuild.exe is often from an arch-specific subfolder
+                MSBuildToolsDirectoryRoot = NativeMethodsShared.ProcessorArchitecture switch
+                {
+                    NativeMethodsShared.ProcessorArchitectures.X86 => CurrentMSBuildToolsDirectory,
+                    NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorArchitectures.ARM64
+                        => currentToolsDirectory.Parent?.FullName,
+                    _ => throw new InternalErrorException("Unknown processor architecture " + NativeMethodsShared.ProcessorArchitecture),
+                };
+            }
+            else
+            {
+                // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.
+                MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;
+            }
+
+            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)
             {
                 // Calculate potential paths to other architecture MSBuild.exe
-                var potentialAmd64FromX86 = FileUtilities.CombinePaths(CurrentMSBuildToolsDirectory, "amd64", msBuildExeName);
-                var potentialX86FromAmd64 = Path.Combine(folderAbove, msBuildExeName);
+                var potentialAmd64FromX86 = FileUtilities.CombinePaths(MSBuildToolsDirectoryRoot, "amd64", msBuildExeName);
+                var potentialARM64FromX86 = FileUtilities.CombinePaths(MSBuildToolsDirectoryRoot, "arm64", msBuildExeName);
 
                 // Check for existence of an MSBuild file. Note this is not necessary in a VS installation where we always want to
                 // assume the correct layout.
                 var existsCheck = mode == BuildEnvironmentMode.VisualStudio ? new Func<string, bool>(_ => true) : File.Exists;
 
-                // Running in amd64 folder and the X86 path is valid
-                if (runningInAmd64 && existsCheck(potentialX86FromAmd64))
-                {
-                    MSBuildToolsDirectory32 = folderAbove;
-                    MSBuildToolsDirectory64 = CurrentMSBuildToolsDirectory;
-                }
-                // Not running in amd64 folder and the amd64 path is valid
-                else if (!runningInAmd64 && existsCheck(potentialAmd64FromX86))
-                {
-                    MSBuildToolsDirectory32 = CurrentMSBuildToolsDirectory;
-                    MSBuildToolsDirectory64 = Path.Combine(CurrentMSBuildToolsDirectory, "amd64");
-                }
+                MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;
+                MSBuildToolsDirectory64 = Path.Combine(MSBuildToolsDirectoryRoot, "amd64");
+                MSBuildToolsDirectoryArm64 = File.Exists(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, "arm64") : null;
             }
 
             MSBuildExtensionsPath = mode == BuildEnvironmentMode.VisualStudio
@@ -575,6 +583,11 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
         /// </summary>
         internal bool RunningInVisualStudio { get; }
 
+        /// <summary>
+        /// Path to the root of the MSBuild folder (in VS scenarios, <c>MSBuild\Current\bin</c>).
+        /// </summary>
+        internal string MSBuildToolsDirectoryRoot { get; }
+
         /// <summary>
         /// Path to the MSBuild 32-bit tools directory.
         /// </summary>
@@ -585,6 +598,12 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,
         /// </summary>
         internal string MSBuildToolsDirectory64 { get; }
 
+        /// <summary>
+        /// Path to the ARM64 tools directory.
+        /// <see langword="null" /> if ARM64 tools are not installed.
+        /// </summary>
+        internal string MSBuildToolsDirectoryArm64 { get; }
+
         /// <summary>
         /// Path to the Sdks folder for this MSBuild instance.
         /// </summary>
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 670ba076324..73dcf6f5a93 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -68,6 +68,11 @@ internal enum HandshakeOptions
         /// Using the .NET Core/.NET 5.0+ runtime
         /// </summary>
         NET = 64,
+
+        /// <summary>
+        /// ARM64 process
+        /// </summary>
+        Arm64 = 128,
     }
 
     internal readonly struct Handshake
@@ -82,13 +87,17 @@ internal readonly struct Handshake
 
         internal Handshake(HandshakeOptions nodeType)
         {
+            const int handshakeVersion = (int)CommunicationsUtilities.handshakeVersion;
+
             // We currently use 7 bits of this 32-bit integer. Very old builds will instantly reject any handshake that does not start with F5 or 06; slightly old builds always lead with 00.
             // This indicates in the first byte that we are a modern build.
-            options = (int)nodeType | (((int)CommunicationsUtilities.handshakeVersion) << 24);
+            options = (int)nodeType | (handshakeVersion << 24);
+            CommunicationsUtilities.Trace("Building handshake for node type {0}, (version {1}): options {2}.", nodeType, handshakeVersion, options);
+
             string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
             CommunicationsUtilities.Trace("Handshake salt is " + handshakeSalt);
-            string toolsDirectory = (nodeType & HandshakeOptions.X64) == HandshakeOptions.X64 ? BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64 : BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
-            CommunicationsUtilities.Trace("Tools directory is " + toolsDirectory);
+            string toolsDirectory = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
+            CommunicationsUtilities.Trace("Tools directory root is " + toolsDirectory);
             salt = CommunicationsUtilities.GetHashCode(handshakeSalt + toolsDirectory);
             Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
             fileVersionMajor = fileVersion.Major;
@@ -144,6 +153,11 @@ static internal class CommunicationsUtilities
         /// </summary>
         private static bool s_trace = Traits.Instance.DebugNodeCommunication;
 
+        /// <summary>
+        /// Lock trace to ensure we are logging in serial fashion.
+        /// </summary>
+        private static readonly object s_traceLock = new();
+
         /// <summary>
         /// Place to dump trace
         /// </summary>
@@ -479,22 +493,22 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte
         /// <summary>
         /// Given the appropriate information, return the equivalent HandshakeOptions.
         /// </summary>
-        internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit = false, bool nodeReuse = false, bool lowPriority = false, IDictionary<string, string> taskHostParameters = null)
+        internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string architectureFlagToSet = null, bool nodeReuse = false, bool lowPriority = false, IDictionary<string, string> taskHostParameters = null)
         {
             HandshakeOptions context = taskHost ? HandshakeOptions.TaskHost : HandshakeOptions.None;
 
             int clrVersion = 0;
 
-            // We don't know about the TaskHost. Figure it out.
+            // We don't know about the TaskHost.
             if (taskHost)
             {
-                // Take the current TaskHost context
+                // No parameters given, default to current
                 if (taskHostParameters == null)
                 {
                     clrVersion = typeof(bool).GetTypeInfo().Assembly.GetName().Version.Major;
-                    is64Bit = XMakeAttributes.GetCurrentMSBuildArchitecture().Equals(XMakeAttributes.MSBuildArchitectureValues.x64);
+                    architectureFlagToSet = XMakeAttributes.GetCurrentMSBuildArchitecture();
                 }
-                else
+                else // Figure out flags based on parameters given
                 {
                     ErrorUtilities.VerifyThrow(taskHostParameters.TryGetValue(XMakeAttributes.runtime, out string runtimeVersion), "Should always have an explicit runtime when we call this method.");
                     ErrorUtilities.VerifyThrow(taskHostParameters.TryGetValue(XMakeAttributes.architecture, out string architecture), "Should always have an explicit architecture when we call this method.");
@@ -502,7 +516,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit
                     if (runtimeVersion.Equals(XMakeAttributes.MSBuildRuntimeValues.clr2, StringComparison.OrdinalIgnoreCase))
                     {
                         clrVersion = 2;
-                    } 
+                    }
                     else if (runtimeVersion.Equals(XMakeAttributes.MSBuildRuntimeValues.clr4, StringComparison.OrdinalIgnoreCase))
                     {
                         clrVersion = 4;
@@ -516,13 +530,20 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, bool is64Bit
                         ErrorUtilities.ThrowInternalErrorUnreachable();
                     }
 
-                    is64Bit = architecture.Equals(XMakeAttributes.MSBuildArchitectureValues.x64);
+                    architectureFlagToSet = architecture;
                 }
             }
 
-            if (is64Bit)
+            if (!string.IsNullOrEmpty(architectureFlagToSet))
             {
-                context |= HandshakeOptions.X64;
+                if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.x64, StringComparison.OrdinalIgnoreCase))
+                {
+                    context |= HandshakeOptions.X64;
+                }
+                else if (architectureFlagToSet.Equals(XMakeAttributes.MSBuildArchitectureValues.arm64, StringComparison.OrdinalIgnoreCase))
+                {
+                    context |= HandshakeOptions.Arm64;
+                }
             }
 
             switch (clrVersion)
@@ -600,9 +621,11 @@ internal static void Trace(int nodeId, string format, params object[] args)
         {
             if (s_trace)
             {
-                if (s_debugDumpPath == null)
+                lock (s_traceLock)
                 {
-                    s_debugDumpPath =
+                    if (s_debugDumpPath == null)
+                    {
+                        s_debugDumpPath =
 #if CLR2COMPATIBILITY
                         Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #else
@@ -611,39 +634,43 @@ internal static void Trace(int nodeId, string format, params object[] args)
                             : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
 #endif
 
-                    if (String.IsNullOrEmpty(s_debugDumpPath))
-                    {
-                        s_debugDumpPath = Path.GetTempPath();
-                    }
-                    else
-                    {
-                        Directory.CreateDirectory(s_debugDumpPath);
+                        if (String.IsNullOrEmpty(s_debugDumpPath))
+                        {
+                            s_debugDumpPath = Path.GetTempPath();
+                        }
+                        else
+                        {
+                            Directory.CreateDirectory(s_debugDumpPath);
+                        }
                     }
-                }
 
-                try
-                {
-                    string fileName = @"MSBuild_CommTrace_PID_{0}";
-                    if (nodeId != -1)
+                    try
                     {
-                        fileName += "_node_" + nodeId;
-                    }
+                        string fileName = @"MSBuild_CommTrace_PID_{0}";
+                        if (nodeId != -1)
+                        {
+                            fileName += "_node_" + nodeId;
+                        }
 
-                    fileName += ".txt";
+                        fileName += ".txt";
 
-                    using (StreamWriter file = FileUtilities.OpenWrite(String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId), append: true))
+                        using (StreamWriter file =
+                               FileUtilities.OpenWrite(String.Format(CultureInfo.CurrentCulture, Path.Combine(s_debugDumpPath, fileName), Process.GetCurrentProcess().Id, nodeId),
+                                   append: true))
+                        {
+                            string message = String.Format(CultureInfo.CurrentCulture, format, args);
+                            long now = DateTime.UtcNow.Ticks;
+                            float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
+                            s_lastLoggedTicks = now;
+                            file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog,
+                                message);
+                        }
+                    }
+                    catch (IOException)
                     {
-                        string message = String.Format(CultureInfo.CurrentCulture, format, args);
-                        long now = DateTime.UtcNow.Ticks;
-                        float millisecondsSinceLastLog = (float)(now - s_lastLoggedTicks) / 10000L;
-                        s_lastLoggedTicks = now;
-                        file.WriteLine("{0} (TID {1}) {2,15} +{3,10}ms: {4}", Thread.CurrentThread.Name, Thread.CurrentThread.ManagedThreadId, now, millisecondsSinceLastLog, message);
+                        // Ignore
                     }
                 }
-                catch (IOException)
-                {
-                    // Ignore
-                }
             }
         }
 
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index 3f63bd381c6..4a59448c172 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -38,6 +38,11 @@ internal static class MSBuildConstants
         /// </summary>
         internal const string WarningsAsErrors = "MSBuildWarningsAsErrors";
 
+        /// <summary>
+        /// Name of the property that indicates a list of warnings to not treat as errors.
+        /// </summary>
+        internal const string WarningsNotAsErrors = "MSBuildWarningsNotAsErrors";
+
         /// <summary>
         /// Name of the property that indicates the list of warnings to treat as messages.
         /// </summary>
diff --git a/src/Shared/ConversionUtilities.cs b/src/Shared/ConversionUtilities.cs
index f043d4443be..4489d33a43b 100644
--- a/src/Shared/ConversionUtilities.cs
+++ b/src/Shared/ConversionUtilities.cs
@@ -94,7 +94,7 @@ internal static bool CanConvertStringToBool(string parameterValue)
         /// Returns true if the string represents a valid MSBuild boolean true value,
         /// such as "on", "!false", "yes"
         /// </summary>
-        private static bool ValidBooleanTrue(string parameterValue)
+        internal static bool ValidBooleanTrue(string parameterValue)
         {
             return String.Equals(parameterValue, "true", StringComparison.OrdinalIgnoreCase) ||
                    String.Equals(parameterValue, "on", StringComparison.OrdinalIgnoreCase) ||
diff --git a/src/Shared/CoreCLRAssemblyLoader.cs b/src/Shared/CoreCLRAssemblyLoader.cs
index 11b4e076212..71af8039f57 100644
--- a/src/Shared/CoreCLRAssemblyLoader.cs
+++ b/src/Shared/CoreCLRAssemblyLoader.cs
@@ -167,10 +167,12 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb
                     }
 
                     AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
-                    if (candidateAssemblyName.Version >= assemblyName.Version)
+                    if (candidateAssemblyName.Version != assemblyName.Version)
                     {
-                        return LoadAndCache(context, candidatePath);
+                        continue;
                     }
+
+                    return LoadAndCache(context, candidatePath);
                 }
             }
 
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index 0d4975586ab..74a3a7b9e79 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -5,6 +5,7 @@
 using System;
 using System.Diagnostics;
 using System.IO;
+using System.Security;
 using System.Text.RegularExpressions;
 
 #nullable disable
@@ -22,12 +23,23 @@ private enum NodeMode
 
         static DebugUtils()
         {
-            string environmentDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
-            var debugDirectory = environmentDebugPath;
+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH"));
+            string debugDirectory = environmentDebugPath;
 
             if (Traits.Instance.DebugEngine)
             {
-                debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs");
+                if (!string.IsNullOrWhiteSpace(debugDirectory) && FileUtilities.CanWriteToDirectory(debugDirectory))
+                {
+                    // Debug directory is writable; no need for fallbacks
+                }
+                else if (FileUtilities.CanWriteToDirectory(Directory.GetCurrentDirectory()))
+                {
+                    debugDirectory = Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs");
+                }
+                else
+                {
+                    debugDirectory = Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
+                }
 
                 // Out of proc nodes do not know the startup directory so set the environment variable for them.
                 if (string.IsNullOrWhiteSpace(environmentDebugPath))
diff --git a/src/Shared/EventArgsFormatting.cs b/src/Shared/EventArgsFormatting.cs
index 6fee2e7ba50..e3bcdf9fcba 100644
--- a/src/Shared/EventArgsFormatting.cs
+++ b/src/Shared/EventArgsFormatting.cs
@@ -310,15 +310,30 @@ string logOutputProperties
 
             // If the project file was specified, tack that onto the very end.
             // Check for additional properties that should be output with project file
-            if (projectFile != null && !String.Equals(projectFile, file))
+            if (projectFile != null)
             {
-                if (logOutputProperties?.Length > 0)
+                // If the project file was specified, tack that onto the very end.
+                if (!string.Equals(projectFile, file))
                 {
-                    format.Append(" [{10}::{11}]");
+                    // Check for additional properties that should be output with project file
+                    if (logOutputProperties?.Length > 0)
+                    {
+                        format.Append(" [{10}::{11}]");
+                    }
+                    else
+                    {
+                        format.Append(" [{10}]");
+                    }
                 }
                 else
                 {
-                    format.Append(" [{10}]");
+                    // If the file location of the error _was_ the project file, append only the
+                    // additional output properties
+
+                    if (logOutputProperties?.Length > 0)
+                    {
+                        format.Append(" [{11}]");
+                    }
                 }
             }
 
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 7af174db82b..1fb4dd23850 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -114,49 +114,28 @@ internal FileMatcher(IFileSystem fileSystem, GetFileSystemEntries getFileSystemE
                 ? getFileSystemEntries
                 : (type, path, pattern, directory, stripProjectDirectory) =>
                 {
-                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
+                    // Always hit the filesystem with "*" pattern, cache the results, and do the filtering here.
+                    string cacheKey = type switch
                     {
-                        // New behavior:
-                        // Always hit the filesystem with "*" pattern, cache the results, and do the filtering here.
-                        string cacheKey = type switch
-                        {
-                            FileSystemEntity.Files => "F",
-                            FileSystemEntity.Directories => "D",
-                            FileSystemEntity.FilesAndDirectories => "A",
-                            _ => throw new NotImplementedException()
-                        } + ";" + path;
-                        IReadOnlyList<string> allEntriesForPath = getFileSystemDirectoryEntriesCache.GetOrAdd(
-                                cacheKey,
-                                s => getFileSystemEntries(
-                                    type,
-                                    path,
-                                    "*",
-                                    directory,
-                                    false));
-                        IEnumerable<string> filteredEntriesForPath = (pattern != null && !IsAllFilesWildcard(pattern))
-                            ? allEntriesForPath.Where(o => IsFileNameMatch(o, pattern))
-                            : allEntriesForPath;
-                        return stripProjectDirectory
-                            ? RemoveProjectDirectory(filteredEntriesForPath, directory).ToArray()
-                            : filteredEntriesForPath.ToArray();
-                    }
-                    else
-                    {
-                        // Legacy behavior:
-                        // Cache only directories, for files we won't hit the cache because the file name patterns tend to be unique
-                        if (type == FileSystemEntity.Directories)
-                        {
-                            return getFileSystemDirectoryEntriesCache.GetOrAdd(
-                                $"D;{path};{pattern ?? "*"}",
-                                s => getFileSystemEntries(
-                                    type,
-                                    path,
-                                    pattern,
-                                    directory,
-                                    stripProjectDirectory).ToArray());
-                        }
-                    }
-                    return getFileSystemEntries(type, path, pattern, directory, stripProjectDirectory);
+                        FileSystemEntity.Files => "F",
+                        FileSystemEntity.Directories => "D",
+                        FileSystemEntity.FilesAndDirectories => "A",
+                        _ => throw new NotImplementedException()
+                    } + ";" + path;
+                    IReadOnlyList<string> allEntriesForPath = getFileSystemDirectoryEntriesCache.GetOrAdd(
+                            cacheKey,
+                            s => getFileSystemEntries(
+                                type,
+                                path,
+                                "*",
+                                directory,
+                                false));
+                    IEnumerable<string> filteredEntriesForPath = (pattern != null && !IsAllFilesWildcard(pattern))
+                        ? allEntriesForPath.Where(o => IsFileNameMatch(o, pattern))
+                        : allEntriesForPath;
+                    return stripProjectDirectory
+                        ? RemoveProjectDirectory(filteredEntriesForPath, directory).ToArray()
+                        : filteredEntriesForPath.ToArray();
                 };
         }
 
@@ -857,7 +836,7 @@ private void GetFilesRecursive(
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,
             TaskOptions taskOptions)
         {
-            ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec== null) || (recursionState.SearchData.RegexFileMatch == null),
+            ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec == null) || (recursionState.SearchData.RegexFileMatch == null),
                 "File-spec overrides the regular expression -- pass null for file-spec if you want to use the regular expression.");
 
             ErrorUtilities.VerifyThrow((recursionState.SearchData.Filespec != null) || (recursionState.SearchData.RegexFileMatch != null),
@@ -1034,7 +1013,7 @@ private void GetFilesRecursive(
             {
                 Parallel.ForEach(
                     _getFileSystemEntries(FileSystemEntity.Directories, recursionState.BaseDirectory, nextStep.DirectoryPattern, null, false),
-                    new ParallelOptions {MaxDegreeOfParallelism = dop},
+                    new ParallelOptions { MaxDegreeOfParallelism = dop },
                     processSubdirectory);
             }
             if (dop <= 0)
@@ -1941,8 +1920,8 @@ public TaskOptions(int maxTasks)
         /// <param name="projectDirectoryUnescaped">The project directory.</param>
         /// <param name="filespecUnescaped">Get files that match the given file spec.</param>
         /// <param name="excludeSpecsUnescaped">Exclude files that match this file spec.</param>
-        /// <returns>The array of files.</returns>
-        internal string[] GetFiles
+        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>
+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles
             (
             string projectDirectoryUnescaped,
             string filespecUnescaped,
@@ -1952,7 +1931,7 @@ internal string[] GetFiles
             // For performance. Short-circuit iff there is no wildcard.
             if (!HasWildcards(filespecUnescaped))
             {
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), SearchAction.None, string.Empty);
             }
 
             if (_cachedGlobExpansions == null)
@@ -1966,6 +1945,9 @@ internal string[] GetFiles
             var enumerationKey = ComputeFileEnumerationCacheKey(projectDirectoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);
 
             IReadOnlyList<string> files;
+            string[] fileList;
+            SearchAction action = SearchAction.None;
+            string excludeFileSpec = string.Empty;
             if (!_cachedGlobExpansions.TryGetValue(enumerationKey, out files))
             {
                 // avoid parallel evaluations of the same wildcard by using a unique lock for each wildcard
@@ -1974,14 +1956,17 @@ internal string[] GetFiles
                 {
                     if (!_cachedGlobExpansions.TryGetValue(enumerationKey, out files))
                     {
-                        files =
-                            _cachedGlobExpansions.GetOrAdd(
+                        files = _cachedGlobExpansions.GetOrAdd(
                                 enumerationKey,
                                 (_) =>
-                                    GetFilesImplementation(
+                                {
+                                    (fileList, action, excludeFileSpec) = GetFilesImplementation(
                                         projectDirectoryUnescaped,
                                         filespecUnescaped,
-                                        excludeSpecsUnescaped));
+                                        excludeSpecsUnescaped);
+
+                                    return fileList;
+                                });
                     }
                 }
             }
@@ -1989,7 +1974,7 @@ internal string[] GetFiles
             // Copy the file enumerations to prevent outside modifications of the cache (e.g. sorting, escaping) and to maintain the original method contract that a new array is created on each call.
             var filesToReturn = files.ToArray();
 
-            return filesToReturn;
+            return (filesToReturn, action, excludeFileSpec);
         }
 
         private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnescaped, string filespecUnescaped, List<string> excludes)
@@ -2067,11 +2052,14 @@ private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnes
             }
         }
 
-        enum SearchAction
+        public enum SearchAction
         {
+            None,
             RunSearch,
             ReturnFileSpec,
             ReturnEmptyList,
+            FailOnDriveEnumeratingWildcard,
+            LogDriveEnumeratingWildcard
         }
 
         private SearchAction GetFileSearchData(
@@ -2135,6 +2123,16 @@ out bool isLegalFileSpec
                 return SearchAction.ReturnEmptyList;
             }
 
+            /*
+             * If a drive enumerating wildcard pattern is detected with the fixed directory and wildcard parts, then
+             * this should either be logged or an exception should be thrown.
+             */
+            bool logDriveEnumeratingWildcard = IsDriveEnumeratingWildcardPattern(fixedDirectoryPart, wildcardDirectoryPart);
+            if (logDriveEnumeratingWildcard && Traits.Instance.ThrowOnDriveEnumeratingWildcard)
+            {
+                return SearchAction.FailOnDriveEnumeratingWildcard;
+            }
+
             string directoryPattern = null;
             if (wildcardDirectoryPart.Length > 0)
             {
@@ -2143,6 +2141,7 @@ out bool isLegalFileSpec
                 // "**/.*/**" for example, and is worth special-casing so it doesn't fall into the slow regex logic.
                 string wildcard = wildcardDirectoryPart.TrimTrailingSlashes();
                 int wildcardLength = wildcard.Length;
+
                 if (wildcardLength > 6 &&
                     wildcard[0] == '*' &&
                     wildcard[1] == '*' &&
@@ -2182,6 +2181,11 @@ out bool isLegalFileSpec
             result.BaseDirectory = Normalize(fixedDirectoryPart);
             result.RemainingWildcardDirectory = Normalize(wildcardDirectoryPart);
 
+            if (logDriveEnumeratingWildcard)
+            {
+                return SearchAction.LogDriveEnumeratingWildcard;
+            }
+
             return SearchAction.RunSearch;
         }
 
@@ -2258,6 +2262,76 @@ internal static string Normalize(string aString)
             return sb.ToString();
         }
 
+        /// <summary>
+        /// Returns true if drive enumerating wildcard patterns are detected using the directory and wildcard parts.
+        /// </summary>
+        /// <param name="directoryPart">Fixed directory string, portion of file spec info.</param>
+        /// <param name="wildcardPart">Wildcard string, portion of file spec info.</param>
+        internal static bool IsDriveEnumeratingWildcardPattern(string directoryPart, string wildcardPart)
+        {
+            int directoryPartLength = directoryPart.Length;
+            int wildcardPartLength = wildcardPart.Length;
+
+            // Handles detection of <drive letter>:<slashes>** pattern for Windows.
+            if (NativeMethodsShared.IsWindows &&
+                directoryPartLength >= 3 &&
+                wildcardPartLength >= 2 &&
+                IsDrivePatternWithoutSlash(directoryPart[0], directoryPart[1]))
+            {
+                return IsFullFileSystemScan(2, directoryPartLength, directoryPart, wildcardPart);
+            }
+
+            // Handles detection of <slashes>** pattern for any platform.
+            else if (directoryPartLength >= 1 &&
+                     wildcardPartLength >= 2)
+            {
+                return IsFullFileSystemScan(0, directoryPartLength, directoryPart, wildcardPart);
+            }
+
+            return false;
+        }
+
+        /// <summary>
+        /// Returns true if given characters follow a drive pattern without the slash (ex: C:).
+        /// </summary>
+        /// <param name="firstValue">First char from directory part of file spec string.</param>
+        /// <param name="secondValue">Second char from directory part of file spec string.</param>
+        private static bool IsDrivePatternWithoutSlash(char firstValue, char secondValue)
+        {
+            return IsValidDriveChar(firstValue) && (secondValue == ':');
+        }
+
+        /// <summary>
+        /// Returns true if selected characters from the fixed directory and wildcard pattern make up the "{any number of slashes}**" pattern.
+        /// </summary>
+        /// <param name="directoryPartIndex">Starting index to begin detecting slashes in directory part of file spec string.</param>
+        /// <param name="directoryPartLength">Length of directory part of file spec string.</param>
+        /// <param name="directoryPart">Fixed directory string, portion of file spec info.</param>
+        /// <param name="wildcardPart">Wildcard string, portion of file spec info.</param>
+        private static bool IsFullFileSystemScan(int directoryPartIndex, int directoryPartLength, string directoryPart, string wildcardPart)
+        {
+            for (int i = directoryPartIndex; i < directoryPartLength; i++)
+            {
+                if (!FileUtilities.IsAnySlash(directoryPart[i]))
+                {
+                    return false;
+                }
+            }
+
+            return (wildcardPart[0] == '*') && (wildcardPart[1] == '*');
+        }
+
+        /// <summary>
+        /// Returns true if the given character is a valid drive letter.
+        /// </summary>
+        /// <remarks>
+        /// Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/PathInternal.Windows.cs#L77-L83
+        /// </remarks>
+        private static bool IsValidDriveChar(char value)
+        {
+            return (value >= 'A' && value <= 'Z') || (value >= 'a' && value <= 'z');
+        }
+
         /// <summary>
         /// Skips slash characters in a string.
         /// </summary>
@@ -2276,15 +2350,6 @@ private static int SkipSlashes(string aString, int startingIndex)
             return index;
         }
 
-        // copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/PathInternal.Windows.cs#L77-L83
-        /// <summary>
-        /// Returns true if the given character is a valid drive letter
-        /// </summary>
-        private static bool IsValidDriveChar(char value)
-        {
-            return (value >= 'A' && value <= 'Z') || (value >= 'a' && value <= 'z');
-        }
-
         private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUnescaped, List<string> excludeSpecsUnescaped)
         {
             if (excludeSpecsUnescaped != null)
@@ -2317,8 +2382,8 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn
         /// <param name="projectDirectoryUnescaped">The project directory.</param>
         /// <param name="filespecUnescaped">Get files that match the given file spec.</param>
         /// <param name="excludeSpecsUnescaped">Exclude files that match this file spec.</param>
-        /// <returns>The array of files.</returns>
-        private string[] GetFilesImplementation(
+        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>
+        private (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFilesImplementation(
             string projectDirectoryUnescaped,
             string filespecUnescaped,
             List<string> excludeSpecsUnescaped)
@@ -2333,13 +2398,17 @@ private string[] GetFilesImplementation(
 
             if (action == SearchAction.ReturnEmptyList)
             {
-                return Array.Empty<string>();
+                return (Array.Empty<string>(), action, string.Empty);
             }
             else if (action == SearchAction.ReturnFileSpec)
             {
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), action, string.Empty);
             }
-            else if (action != SearchAction.RunSearch)
+            else if (action == SearchAction.FailOnDriveEnumeratingWildcard)
+            {
+                return (Array.Empty<string>(), action, string.Empty);
+            }
+            else if ((action != SearchAction.RunSearch) && (action != SearchAction.LogDriveEnumeratingWildcard))
             {
                 // This means the enum value wasn't valid (or a new one was added without updating code correctly)
                 throw new NotSupportedException(action.ToString());
@@ -2351,6 +2420,10 @@ private string[] GetFilesImplementation(
             //  The BaseDirectory of the exclude search is the key for this dictionary.
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs = null;
 
+            // Track the search action and exclude file spec for proper detection and logging of drive enumerating wildcards.
+            SearchAction trackSearchAction = action;
+            string trackExcludeFileSpec = string.Empty;
+
             HashSet<string> resultsToExclude = null;
             if (excludeSpecsUnescaped != null)
             {
@@ -2376,7 +2449,16 @@ private string[] GetFilesImplementation(
                         // Nothing to do
                         continue;
                     }
-                    else if (excludeAction != SearchAction.RunSearch)
+                    else if (excludeAction == SearchAction.FailOnDriveEnumeratingWildcard)
+                    {
+                        return (Array.Empty<string>(), excludeAction, excludeSpec);
+                    }
+                    else if (excludeAction == SearchAction.LogDriveEnumeratingWildcard)
+                    {
+                        trackSearchAction = excludeAction;
+                        trackExcludeFileSpec = excludeSpec;
+                    }
+                    else if ((excludeAction != SearchAction.RunSearch) && (excludeAction != SearchAction.LogDriveEnumeratingWildcard))
                     {
                         // This means the enum value wasn't valid (or a new one was added without updating code correctly)
                         throw new NotSupportedException(excludeAction.ToString());
@@ -2530,12 +2612,17 @@ private string[] GetFilesImplementation(
             // Catch exceptions that are thrown inside the Parallel.ForEach
             catch (AggregateException ex) when (InnerExceptionsAreAllIoRelated(ex))
             {
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                // Flatten to get exceptions than are thrown inside a nested Parallel.ForEach
+                if (ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException))
+                {
+                    return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);
+                }
+                throw;
             }
             catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))
             {
                 // Assume it's not meant to be a path
-                return CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped);
+                return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);
             }
 
             /*
@@ -2545,7 +2632,7 @@ private string[] GetFilesImplementation(
                 ? listOfFiles.SelectMany(list => list).Where(f => !resultsToExclude.Contains(f)).ToArray()
                 : listOfFiles.SelectMany(list => list).ToArray();
 
-            return files;
+            return (files, trackSearchAction, trackExcludeFileSpec);
         }
 
         private bool InnerExceptionsAreAllIoRelated(AggregateException ex)
diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index 4ae81fc5ada..894249cbd64 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -24,7 +24,7 @@ private static bool ShouldUseMicrosoftIO
             get
             {
 #if !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0);
+                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0) && NativeMethodsShared.IsWindows;
 #else
                 // We need to mock usage of ChangeWaves class,
                 // because Microsoft.Build.Engine.OM.UnitTests should not have access to internals of Microsoft.Build.Framework.
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 3d467547ad4..9628a41db61 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -165,6 +165,30 @@ internal static int GetPathsHash(IEnumerable<string> assemblyPaths)
             return builder.ToString().GetHashCode();
         }
 
+        /// <summary>
+        /// Returns whether MSBuild can write to the given directory. Throws for PathTooLongExceptions
+        /// but not other exceptions.
+        /// </summary>
+        internal static bool CanWriteToDirectory(string directory)
+        {
+            try
+            {
+                string testFilePath = Path.Combine(directory, $"MSBuild_{Guid.NewGuid().ToString("N")}_testFile.txt");
+                File.WriteAllText(testFilePath, $"MSBuild process {Process.GetCurrentProcess().Id} successfully wrote to file.");
+                File.Delete(testFilePath);
+                return true;
+            }
+            catch (PathTooLongException)
+            {
+                ErrorUtilities.ThrowArgument("DebugPathTooLong", directory);
+                return false; // Should never reach here.
+            }
+            catch (Exception)
+            {
+                return false;
+            }
+        }
+
         /// <summary>
         /// Clears the MSBuild runtime cache
         /// </summary>
@@ -243,6 +267,58 @@ internal static string EnsureNoTrailingSlash(string path)
             return path;
         }
 
+        /// <summary>
+        /// Ensures the path is enclosed within single quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureSingleQuotes(string path)
+        {
+            return EnsureQuotes(path);
+        }
+
+        /// <summary>
+        /// Ensures the path is enclosed within double quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureDoubleQuotes(string path)
+        {
+            return EnsureQuotes(path, isSingleQuote: false);
+        }
+
+        /// <summary>
+        /// Ensures the path is enclosed within quotes.
+        /// </summary>
+        /// <param name="path">The path to check.</param>
+        /// <param name="isSingleQuote">Indicates if single or double quotes should be used</param>
+        /// <returns>The path enclosed by quotes.</returns>
+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)
+        {
+            path = FixFilePath(path);
+
+            const char singleQuote = '\'';
+            const char doubleQuote = '\"';
+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;
+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;
+
+            if (!string.IsNullOrEmpty(path))
+            {
+                // Special case: convert the quotes.
+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)
+                {
+                    path = $"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}";
+                }
+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.
+                else if (path.Length == 1 || path[0] != targetQuote || path[path.Length - 1] != targetQuote)
+                {
+                    path = $"{targetQuote}{path}{targetQuote}";
+                }
+            }
+
+            return path;
+        }
+
         /// <summary>
         /// Indicates if the given file-spec ends with a slash.
         /// </summary>
@@ -270,6 +346,11 @@ internal static bool IsSlash(char c)
         /// </summary>
         internal static string TrimAndStripAnyQuotes(string path)
         {
+            if (path is null)
+            {
+                return path;
+            }
+
             // Trim returns the same string if trimming isn't needed
             path = path.Trim();
             path = path.Trim(new char[] { '"' });
diff --git a/src/Shared/MSBuildLoadContext.cs b/src/Shared/MSBuildLoadContext.cs
index 37bf6eebc35..fbe9d5e00fb 100644
--- a/src/Shared/MSBuildLoadContext.cs
+++ b/src/Shared/MSBuildLoadContext.cs
@@ -51,20 +51,22 @@ public MSBuildLoadContext(string assemblyPath)
                 // bare search directory if that fails.
                 : new[] { assemblyName.CultureName, string.Empty })
             {
-                var candidatePath = Path.Combine(_directory,
-                    cultureSubfolder,
-                    $"{assemblyName.Name}.dll");
+                    var candidatePath = Path.Combine(_directory,
+                        cultureSubfolder,
+                        $"{assemblyName.Name}.dll");
 
-                if (!FileSystems.Default.FileExists(candidatePath))
-                {
-                    continue;
-                }
+                    if (!FileSystems.Default.FileExists(candidatePath))
+                    {
+                        continue;
+                    }
+
+                    AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
+                    if (candidateAssemblyName.Version != assemblyName.Version)
+                    {
+                        continue;
+                    }
 
-                AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
-                if (candidateAssemblyName.Version >= assemblyName.Version)
-                {
                     return LoadFromAssemblyPath(candidatePath);
-                }
             }
 
             // If the Assembly is provided via a file path, the following rules are used to load the assembly:
diff --git a/src/Shared/RegistryDelegates.cs b/src/Shared/RegistryDelegates.cs
index 45f28819e26..4883342d33f 100644
--- a/src/Shared/RegistryDelegates.cs
+++ b/src/Shared/RegistryDelegates.cs
@@ -1,19 +1,12 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
-using System;
-using System.IO;
-using System.Diagnostics;
-using System.Globalization;
 using Microsoft.Win32;
-using System.Collections;
 using System.Collections.Generic;
 
-#nullable disable
-
 namespace Microsoft.Build.Shared
-{  /// <summary>
+{
+    /// <summary>
    /// Given a registry hive and a request view open the base key for that registry location.
    /// </summary>
     internal delegate RegistryKey OpenBaseKey(RegistryHive hive, RegistryView view);
@@ -36,4 +29,3 @@ namespace Microsoft.Build.Shared
     /// <returns>A string containing the default value.</returns>
     internal delegate string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string subKey);
 }
-#endif
diff --git a/src/Shared/RegistryHelper.cs b/src/Shared/RegistryHelper.cs
index 19cc6190041..fc26fd09f82 100644
--- a/src/Shared/RegistryHelper.cs
+++ b/src/Shared/RegistryHelper.cs
@@ -1,20 +1,16 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
 using System.Collections.Generic;
-
+using System.Runtime.Versioning;
 using Microsoft.Win32;
-// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-#nullable disable
 
 namespace Microsoft.Build.Shared
 {
     /// <summary>
     /// Helper methods that simplify registry access.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     internal static class RegistryHelper
     {
         /// <summary>
@@ -23,11 +19,11 @@ internal static class RegistryHelper
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subkey">The subkey</param>
         /// <returns>An enumeration of strings.</returns>        
-        internal static IEnumerable<string> GetSubKeyNames(RegistryKey baseKey, string subkey)
+        internal static IEnumerable<string>? GetSubKeyNames(RegistryKey baseKey, string subkey)
         {
-            IEnumerable<string> subKeys = null;
+            IEnumerable<string>? subKeys = null;
 
-            using (RegistryKey subKey = baseKey.OpenSubKey(subkey))
+            using (RegistryKey? subKey = baseKey.OpenSubKey(subkey))
             {
                 if (subKey != null)
                 {
@@ -44,15 +40,15 @@ internal static IEnumerable<string> GetSubKeyNames(RegistryKey baseKey, string s
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subkey">The subkey</param>
         /// <returns>A string containing the default value.</returns>
-        internal static string GetDefaultValue(RegistryKey baseKey, string subkey)
+        internal static string? GetDefaultValue(RegistryKey baseKey, string subkey)
         {
-            string value = null;
+            string? value = null;
 
-            using (RegistryKey key = baseKey.OpenSubKey(subkey))
+            using (RegistryKey? key = baseKey.OpenSubKey(subkey))
             {
                 if (key?.ValueCount > 0)
                 {
-                    value = (string)key.GetValue("");
+                    value = (string?)key.GetValue("");
                 }
             }
 
@@ -73,4 +69,3 @@ internal static RegistryKey OpenBaseKey(RegistryHive hive, RegistryView view)
         }
     }
 }
-#endif
\ No newline at end of file
diff --git a/src/Shared/Resources/Strings.shared.resx b/src/Shared/Resources/Strings.shared.resx
index 4a2ab0dd185..b1c884da6fd 100644
--- a/src/Shared/Resources/Strings.shared.resx
+++ b/src/Shared/Resources/Strings.shared.resx
@@ -278,10 +278,15 @@
     <value>MSB5028: Solution filter file at "{0}" includes project "{1}" that is not in the solution file at "{2}".</value>
     <comment>{StrBegin="MSB5028: "}UE: The project filename is provided separately to loggers.</comment>
   </data>
+  <data name="WildcardResultsInDriveEnumeration" xml:space="preserve">
+    <value>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>
+    <comment>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</comment>
+  </data>
   <!--
         The shared message bucket is: MSB5001 - MSB5999
 
-        Next message code should be MSB5029
+        Next message code should be MSB5030
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Shared/Resources/xlf/Strings.shared.cs.xlf b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
index 80de31cf354..28db153e941 100644
--- a/src/Shared/Resources/xlf/Strings.shared.cs.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.cs.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Parametr {0} s přiřazenou hodnotou {1} nesmí obsahovat neplatnou cestu nebo neplatné znaky souboru.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: Hodnota {0} atributu {1} v elementu &lt;{2}&gt; je zástupný znak, jehož výsledkem je výčet všech souborů na jednotce, což pravděpodobně nebylo zamýšleno. Zkontrolujte, jestli jsou odkazované vlastnosti vždy definovány.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.de.xlf b/src/Shared/Resources/xlf/Strings.shared.de.xlf
index 28e73b49c1a..e304bd152ac 100644
--- a/src/Shared/Resources/xlf/Strings.shared.de.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.de.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Der Parameter "{0}" mit dem zugewiesenen Wert "{1}" darf keinen ungültigen Pfad und keine ungültigen Dateizeichen haben.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: Der Wert „{0}“ des Attributs „{1}“ im Element &lt;{2}&gt; ist ein Platzhalter, der dazu führt, dass alle Dateien auf dem Laufwerk aufgezählt werden, was wahrscheinlich nicht beabsichtigt war. Überprüfen Sie, ob Eigenschaften, auf die verwiesen wird, immer definiert sind.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.es.xlf b/src/Shared/Resources/xlf/Strings.shared.es.xlf
index 332d51f7961..c6979fa1689 100644
--- a/src/Shared/Resources/xlf/Strings.shared.es.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.es.xlf
@@ -308,6 +308,12 @@
         <target state="translated">El parámetro "{0}" con el valor asignado "{1}" no puede tener una ruta de acceso no válida o caracteres de archivo no válidos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: El valor “{0}” del atributo “{1}” en el elemento &lt;{2}&gt; es un carácter comodín que da como resultado la enumeración de todos los archivos de la unidad, lo que probablemente no estaba previsto. Compruebe que siempre se definan las propiedades a las que se hace referencia.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.fr.xlf b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
index 98d0ecd2344..37399b16f44 100644
--- a/src/Shared/Resources/xlf/Strings.shared.fr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.fr.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Le paramètre "{0}" avec la valeur assignée "{1}" ne peut pas avoir un chemin non valide ou des caractères de fichier non valides.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: La valeur "{0}" de l'attribut "{1}" de l'élément &lt;{2}&gt; est un caractère générique qui entraîne l'énumération de tous les fichiers du lecteur, ce qui n'était probablement pas prévu. Vérifiez que les propriétés référencées sont toujours définies.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.it.xlf b/src/Shared/Resources/xlf/Strings.shared.it.xlf
index 31c10bd56ca..5bb8c7eebfb 100644
--- a/src/Shared/Resources/xlf/Strings.shared.it.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.it.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Il parametro "{0}" con valore assegnato "{1}" non può contenere un percorso non valido o caratteri di file non validi.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: il valore "{0}" dell'attributo "{1}" nell'elemento &lt;{2}&gt; è un carattere jolly che determina l'enumerazione di tutti i file nell'unità, che probabilmente non era previsto. Verificare che le proprietà di riferimento siano sempre definite.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ja.xlf b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
index 762d7780a9b..ca851b2b211 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ja.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ja.xlf
@@ -308,6 +308,12 @@
         <target state="translated">値 "{1}" が割り当てられたパラメーター "{0}" には、無効なパスまたは無効なファイル内の文字を指定することはできません。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: 要素 &lt;{2}&gt; の "{1}" 属性の値 "{0}" はワイルドカードであり、ドライブ上のすべてのファイルが列挙され、それは意図されていない模様です。参照されるプロパティが常に定義されていることを確認してください。</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ko.xlf b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
index 7cd5d631a66..2832de50cd7 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ko.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ko.xlf
@@ -308,6 +308,12 @@
         <target state="translated">"{1}" 값이 할당된 "{0}" 매개 변수는 유효하지 않은 경로 또는 파일 문자를 포함할 수 없습니다.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: &lt;{2}&gt; 요소의 "{1}" 특성의 값 "{0}"은(는) 의도하지 않은 드라이브의 모든 파일을 열거하는 와일드카드입니다. 참조된 속성이 항상 정의되어 있는지 확인하세요.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.pl.xlf b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
index 3755284c24a..c0cd32ad0a0 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pl.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pl.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Parametr „{0}” z przypisaną wartością „{1}” nie może mieć nieprawidłowej ścieżki ani zawierać nieprawidłowych znaków w pliku.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: Wartość „{0}” atrybutu „{1}” w elemencie &lt;{2}&gt; jest symbolem wieloznacznym, który powoduje wyliczenie wszystkich plików na dysku, co prawdopodobnie nie było zamierzone. Sprawdź, czy przywoływane właściwości są zawsze zdefiniowane.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
index 6fd1b77903b..ff7be552a3d 100644
--- a/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.pt-BR.xlf
@@ -308,6 +308,12 @@
         <target state="translated">O parâmetro "{0}" com o valor "{1}" atribuído não pode ter um caminho inválido ou caracteres de arquivo inválidos.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: O valor "{0}" do atributo "{1}" no elemento &lt;{2}&gt; é um curinga que resulta na enumeração de todos os arquivos na unidade, o que provavelmente não foi pretendido. Verifique se as propriedades referenciadas estão sempre definidas.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.ru.xlf b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
index 3570539b1f8..9d957db25d5 100644
--- a/src/Shared/Resources/xlf/Strings.shared.ru.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.ru.xlf
@@ -308,6 +308,12 @@
         <target state="translated">Параметр "{0}" с назначенным значением "{1}" не может иметь недопустимый путь или недопустимые символы файлов.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: значение "{0}" атрибута "{1}" в элементе &lt;{2}&gt; является подстановочным знаком, который приводит к перечислению всех файлов на диске, что, скорее всего, не предполагалось. Убедитесь, что свойства, на которые имеются ссылки, всегда определены.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.tr.xlf b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
index d6831788b90..ba298b18d89 100644
--- a/src/Shared/Resources/xlf/Strings.shared.tr.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.tr.xlf
@@ -308,6 +308,12 @@
         <target state="translated">"{1}" değeri atanan "{0}" parametresinde geçersiz yol veya geçersiz dosya karakterleri bulunamaz.</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: &lt;{2}&gt; öğesindeki "{1}" özniteliğinin "{0}" değeri, sürücüdeki tüm dosyaların numaralandırılmasıyla sonuçlanan (büyük olasılıkla bunun olması amaçlanmıyordu) bir joker karakterdir. Başvurulan özelliklerin her zaman tanımlı olduğundan emin olun.</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
index b5468e75bcb..fd15f148422 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hans.xlf
@@ -308,6 +308,12 @@
         <target state="translated">分配有值“{1}”的参数“{0}”不可具有无效路径或无效的文件字符。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: 元素 &lt;{2}&gt; 中“{1}”属性的值“{0}”是通配符，可导致枚举驱动器上的所有文件，这可能不是预期的行为。请检查是否始终定义了所引用的属性。</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
index 893e286184a..849ed85ed79 100644
--- a/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
+++ b/src/Shared/Resources/xlf/Strings.shared.zh-Hant.xlf
@@ -308,6 +308,12 @@
         <target state="translated">指派值為 "{1}" 的參數 "{0}" 不得具有無效的路徑或檔案字元。</target>
         <note />
       </trans-unit>
+      <trans-unit id="WildcardResultsInDriveEnumeration">
+        <source>MSB5029: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</source>
+        <target state="translated">MSB5029: 元素 &lt;{2}&gt; 中「{1}」屬性的值「{0}」是萬用字元，導致列舉磁碟機上的所有檔案，這很可能不是預期的結果。檢查是否一直定義參考屬性。</target>
+        <note>{StrBegin="MSB5029: "}UE: This is a generic message that is displayed when we find a project element that has a drive enumerating wildcard value for one of its
+      attributes e.g. &lt;Compile Include="$(NotAlwaysDefined)\**\*.cs"&gt; -- if the property is undefined, the value of Include should not result in enumerating all files on drive.</note>
+      </trans-unit>
     </body>
   </file>
 </xliff>
\ No newline at end of file
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 7b0c1f9dbef..7037787b2fe 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -93,6 +93,7 @@ internal class TaskHostConfiguration : INodePacket
         private Dictionary<string, string> _globalParameters;
 
         private ICollection<string> _warningsAsErrors;
+        private ICollection<string> _warningsNotAsErrors;
 
         private ICollection<string> _warningsAsMessages;
 
@@ -116,6 +117,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #else
         /// <summary>
@@ -136,6 +138,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
+        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration
@@ -158,6 +161,7 @@ public TaskHostConfiguration
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
                 ICollection<string> warningsAsErrors,
+                ICollection<string> warningsNotAsErrors,
                 ICollection<string> warningsAsMessages
             )
         {
@@ -190,6 +194,7 @@ ICollection<string> warningsAsMessages
             _taskLocation = taskLocation;
             _isTaskInputLoggingEnabled = isTaskInputLoggingEnabled;
             _warningsAsErrors = warningsAsErrors;
+            _warningsNotAsErrors = warningsNotAsErrors;
             _warningsAsMessages = warningsAsMessages;
 
             if (taskParameters != null)
@@ -384,6 +389,15 @@ public ICollection<string> WarningsAsErrors
             }
         }
 
+        public ICollection<string> WarningsNotAsErrors
+        {
+            [DebuggerStepThrough]
+            get
+            {
+                return _warningsNotAsErrors;
+            }
+        }
+
         public ICollection<string> WarningsAsMessages
         {
             [DebuggerStepThrough]
@@ -422,6 +436,13 @@ public void Translate(ITranslator translator)
                                  collectionFactory: count => new HashSet<string>(StringComparer.OrdinalIgnoreCase));
 #else
                                  collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
+#endif
+            translator.Translate(collection: ref _warningsNotAsErrors,
+                                 objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
+#if CLR2COMPATIBILITY
+                                 collectionFactory: count => new HashSet<string>(StringComparer.OrdinalIgnoreCase));
+#else
+                                 collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
 #endif
             translator.Translate(collection: ref _warningsAsMessages,
                                  objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index bca3773e17a..e83e0c56d1b 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -62,7 +62,7 @@ public void GetFilesPatternMatching(string pattern, int expectedMatchCount)
                 File.WriteAllBytes(Path.Combine(testFolder.Path, file), new byte[1]);
             }
 
-            string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, pattern);
+            string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, pattern).FileList;
 
             fileMatches.Length.ShouldBe(expectedMatchCount, $"Matches: '{String.Join("', '", fileMatches)}'");
         }
@@ -83,7 +83,7 @@ public void GetFilesComplexGlobbingMatching(GetFilesComplexGlobbingMatchingInfo
 
             void VerifyImpl(FileMatcher fileMatcher, string include, string[] excludes, bool shouldHaveNoMatches = false, string customMessage = null)
             {
-                string[] matchedFiles = fileMatcher.GetFiles(testFolder.Path, include, excludes?.ToList());
+                string[] matchedFiles = fileMatcher.GetFiles(testFolder.Path, include, excludes?.ToList()).FileList;
 
                 if (shouldHaveNoMatches)
                 {
@@ -1042,8 +1042,8 @@ public void DotDotForParentDirectory()
                 // On Linux *. * does not pick up files with no extension
                 ValidateFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine("..", "..", "File"), false);
             }
-            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new [] {"..", "..", "dir1", "dir2", "File.txt"}), false);
-            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new [] {"..", "..", "dir1", "dir2", "File"}), false);
+            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new[] { "..", "..", "dir1", "dir2", "File.txt" }), false);
+            ValidateNoFileMatch(Path.Combine("..", "..", "*.*"), Path.Combine(new[] { "..", "..", "dir1", "dir2", "File" }), false);
         }
 
         [Fact]
@@ -1256,7 +1256,7 @@ public void IllegalTooLongPathOptOutWave17_0()
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
                 string longString = new string('X', 500) + "*"; // need a wildcard to do anything
-                string[] result = FileMatcher.Default.GetFiles(@"c:\", longString);
+                string[] result = FileMatcher.Default.GetFiles(@"c:\", longString).FileList;
 
                 Assert.Equal(longString, result[0]); // Does not throw
                 ChangeWaves.ResetStateForTests();
@@ -1298,7 +1298,7 @@ public void Regress367780_CrashOnStarDotDot()
             Directory.CreateDirectory(workingPath);
             Directory.CreateDirectory(workingPathSubfolder);
 
-            files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
         }
 
         [Fact]
@@ -1310,7 +1310,7 @@ public void Regress141071_StarStarSlashStarStarIsLiteral()
 
             Directory.CreateDirectory(workingPath);
             File.WriteAllText(fileName, "Hello there.");
-            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
 
             string result = String.Join(", ", files);
             Console.WriteLine(result);
@@ -1330,7 +1330,7 @@ public void Regress14090_TrailingDotMatchesNoExtension()
             Directory.CreateDirectory(workingPath);
             Directory.CreateDirectory(workingPathSubdir);
             File.AppendAllText(workingPathSubdirBing, "y");
-            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern);
+            var files = FileMatcher.Default.GetFiles(workingPath, offendingPattern).FileList;
 
             string result = String.Join(", ", files);
             Console.WriteLine(result);
@@ -1353,19 +1353,19 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
                 {
                     env.SetEnvironmentVariable("MsBuildCacheFileEnumerations", "1");
 
-                    var testProject = env.CreateTestProjectWithFiles(string.Empty, new[] {"a.cs", "b.cs", "c.cs"});
+                    var testProject = env.CreateTestProjectWithFiles(string.Empty, new[] { "a.cs", "b.cs", "c.cs" });
 
-                    var files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs");
+                    var files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs").FileList;
                     Array.Sort(files);
-                    Assert.Equal(new []{"a.cs", "b.cs", "c.cs"}, files);
+                    Assert.Equal(new[] { "a.cs", "b.cs", "c.cs" }, files);
 
-                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> {"a.cs"});
+                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> { "a.cs" }).FileList;
                     Array.Sort(files);
-                    Assert.Equal(new[] {"b.cs", "c.cs" }, files);
+                    Assert.Equal(new[] { "b.cs", "c.cs" }, files);
 
-                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> {"a.cs", "c.cs"});
+                    files = FileMatcher.Default.GetFiles(testProject.TestRoot, "**/*.cs", new List<string> { "a.cs", "c.cs" }).FileList;
                     Array.Sort(files);
-                    Assert.Equal(new[] {"b.cs" }, files);
+                    Assert.Equal(new[] { "b.cs" }, files);
                 }
             }
             finally
@@ -1374,6 +1374,146 @@ public void FileEnumerationCacheTakesExcludesIntoAccount()
             }
         }
 
+        [PlatformSpecific(TestPlatforms.Any)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData(@"\\", "**")]
+        [InlineData(@"\\\\\\\\", "**")]
+        [InlineData("/", "**/*.cs")]
+        [InlineData("/", "**")]
+        [InlineData("//", "**")]
+        [InlineData("////////", "**")]
+        public void DriveEnumeratingWildcardIsObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
+            DriveEnumeratingWildcardIsObserved(directoryPart, wildcardPart);
+
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData(@"c:\", "**")]
+        [InlineData(@"c:\\", "**")]
+        [InlineData(@"c:\\\\\\\\", "**")]
+        [InlineData(@"c:\", @"**\*.cs")]
+        public void DriveEnumeratingWildcardIsObservedOnWindows(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardIsObserved(directoryPart, wildcardPart);
+            DriveEnumeratingWildcardFailsAndReturns(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardIsObserved(string directoryPart, string wildcardPart) =>
+            FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart).ShouldBeTrue();
+
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"\", "**")]
+        [InlineData("/", "**/*.cs")]
+        [InlineData("/", "**")]
+        [InlineData("//", "**")]
+        [InlineData("////////", "**")]
+        public void DriveEnumeratingWildcardFailsAndReturnsOnUnix(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardFailsAndReturns(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardFailsAndReturns(string directoryPart, string wildcardPart)
+        {
+            string driveEnumeratingWildcard = string.Concat(directoryPart, wildcardPart);
+
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Set env var to fail on drive enumerating wildcard detection
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+
+                    (string[] fileList, FileMatcher.SearchAction action, string excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        driveEnumeratingWildcard);
+
+                    action.ShouldBe(FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard);
+                    fileList.ShouldBeEmpty();
+                    excludeFileSpec.ShouldBe(string.Empty);
+
+                    // Handle failing with drive enumerating exclude
+                    (fileList, action, excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        @"/*/*.cs",
+                        new List<string> { driveEnumeratingWildcard });
+
+                    action.ShouldBe(FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard);
+                    fileList.ShouldBeEmpty();
+                    excludeFileSpec.ShouldBe(driveEnumeratingWildcard);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\\**")]
+        [InlineData(@"z:\\\\\\\\**")]
+        [InlineData(@"z:\**\*.cs")]
+        public void DriveEnumeratingWildcardIsLoggedOnWindows(string driveEnumeratingWildcard)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                try
+                {
+                    // Set env var to log on drive enumerating wildcard detection
+                    Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                    (_, FileMatcher.SearchAction action, string excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        driveEnumeratingWildcard);
+
+                    action.ShouldBe(FileMatcher.SearchAction.LogDriveEnumeratingWildcard);
+                    excludeFileSpec.ShouldBe(string.Empty);
+
+                    // Handle logging with drive enumerating exclude
+                    (_, action, excludeFileSpec) = FileMatcher.Default.GetFiles(
+                        string.Empty,
+                        @"/*/*.cs",
+                        new List<string> { driveEnumeratingWildcard });
+
+                    action.ShouldBe(FileMatcher.SearchAction.LogDriveEnumeratingWildcard);
+                    excludeFileSpec.ShouldBe(driveEnumeratingWildcard);
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        [PlatformSpecific(TestPlatforms.Any)]
+        [Theory]
+        [InlineData(@"\", @"*\*.cs")]
+        [InlineData(@"\\", @"*\*.cs")]
+        [InlineData(@"\", @"*\*.*")]
+        [InlineData(@"/", @"*/*.cs")]
+        [InlineData(@"//", @"*/*.cs")]
+        [InlineData(@"/", @"*/*.*")]
+        public void DriveEnumeratingWildcardIsNotObservedOnAnyPlatform(string directoryPart, string wildcardPart) =>
+            DriveEnumeratingWildcardIsNotObserved(directoryPart, wildcardPart);
+
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"c:\", "**")]
+        [InlineData(@"c:\\", "**")]
+        [InlineData(@"c:\\\\\\\\", "**")]
+        [InlineData(@"c:\", @"**\*.cs")]
+        public void DriveEnumeratingWildcardIsNotObservedOnUnix(string directoryPart, string wildcardPart)
+        {
+            DriveEnumeratingWildcardIsNotObserved(directoryPart, wildcardPart);
+        }
+
+        private void DriveEnumeratingWildcardIsNotObserved(string directoryPart, string wildcardPart) =>
+            FileMatcher.IsDriveEnumeratingWildcardPattern(directoryPart, wildcardPart).ShouldBeFalse();
+
         [Fact]
         public void RemoveProjectDirectory()
         {
@@ -2383,7 +2523,7 @@ private static void MatchDriver(string filespec, string[] excludeFilespecs, stri
                 String.Empty, /* we don't need project directory as we use mock filesystem */
                 filespec,
                 excludeFilespecs?.ToList()
-            );
+            ).FileList;
 
             Func<string[], string[]> normalizeAllFunc = (paths => normalizeAllPaths ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
             Func<string[], string[]> normalizeMatching = (paths => normalizeExpectedMatchingFiles ? paths.Select(MockFileSystem.Normalize).ToArray() : paths);
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index a2681f795f1..3f9c53f3a68 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -1089,5 +1089,45 @@ public static void TestTruncatePathToTrailingSegments(string path, int trailingS
 
             FileUtilities.TruncatePathToTrailingSegments(path, trailingSegments).ShouldBe(expectedTruncatedPath);
         }
+
+        /// <summary>
+        /// Exercises FileUtilities.EnsureSingleQuotes
+        /// </summary>
+        [Theory]
+        [InlineData(null, null)] // Null test
+        [InlineData("", "")] // Empty string test
+        [InlineData(@" ", @"' '")] // One character which is a space
+        [InlineData(@"'", @"'''")] // One character which is a single quote
+        [InlineData(@"""", @"'""'")] // One character which is a double quote
+        [InlineData(@"example", @"'example'")] // Unquoted string
+        [InlineData(@"'example'", @"'example'")] // Single quoted string
+        [InlineData(@"""example""", @"'example'")] // Double quoted string
+        [InlineData(@"'example""", @"''example""'")] // Mixed Quotes - Leading Single
+        [InlineData(@"""example'", @"'""example''")] // Mixed Quotes - Leading Double
+        [InlineData(@"ex""am'ple", @"'ex""am'ple'")] // Interior Quotes
+        public void EnsureSingleQuotesTest(string path, string expectedResult)
+        {
+            FileUtilities.EnsureSingleQuotes(path).ShouldBe(expectedResult);
+        }
+
+        /// <summary>
+        /// Exercises FileUtilities.EnsureDoubleQuotes
+        /// </summary>
+        [Theory]
+        [InlineData(null, null)] // Null test
+        [InlineData("", "")] // Empty string test
+        [InlineData(@" ", @""" """)] // One character which is a space
+        [InlineData(@"'", @"""'""")] // One character which is a single quote
+        [InlineData(@"""", @"""""""")] // One character which is a double quote
+        [InlineData(@"example", @"""example""")] // Unquoted string
+        [InlineData(@"'example'", @"""example""")] // Single quoted string
+        [InlineData(@"""example""", @"""example""")] // Double quoted string
+        [InlineData(@"'example""", @"""'example""""")] // Mixed Quotes - Leading Single
+        [InlineData(@"""example'", @"""""example'""")] // Mixed Quotes - Leading Double
+        [InlineData(@"ex""am'ple", @"""ex""am'ple""")] // Interior Quotes
+        public void EnsureDoubleQuotesTest(string path, string expectedResult)
+        {
+            FileUtilities.EnsureDoubleQuotes(path).ShouldBe(expectedResult);
+        }
     }
 }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index d6c10b453e0..d4d5b8e3d1e 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -13,7 +13,9 @@
 using System.Threading.Tasks;
 using System.Xml;
 
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileSystem;
@@ -1403,6 +1405,107 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
             }
         }
 
+        internal enum ExpectedBuildResult
+        {
+            // The build should fail with a logged error upon drive enumerationg wildcard detection and setting of environment variable.
+            FailWithError,
+            // The build should succeed with a logged warning upon drive enumerating wildcard detection (regardless of environment variable value).
+            SucceedWithWarning,
+            // The build should succeed with no logged warnings and errors, as there are no drive enumerating wildcards.
+            SucceedWithNoErrorsAndWarnings
+        }
+
+        /// <summary>
+        /// Verify that a drive enumerating wildcard warning is logged or exception is thrown. 
+        /// </summary>
+        internal static void CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(string content, string failOnDriveEnumerationEnvVar, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        {
+            using (var env = TestEnvironment.Create(testOutput))
+            {
+                // Clean file contents by replacing single quotes with double quotes, etc.
+                content = ObjectModelHelpers.CleanupFileContents(content);
+                var testProject = env.CreateTestProjectWithFiles(content.Cleanup());
+
+                // Reset state
+                ResetStateForDriveEnumeratingWildcardTests(env, failOnDriveEnumerationEnvVar);
+
+                // Setup and build test target
+                BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(env, testProject.ProjectFile, targetName, expectedBuildResult, testOutput);
+            }
+        }
+
+        internal static void ResetStateForDriveEnumeratingWildcardTests(TestEnvironment env, string setEnvVar)
+        {
+            ChangeWaves.ResetStateForTests();
+            env.SetEnvironmentVariable("MSBUILDFAILONDRIVEENUMERATINGWILDCARD", setEnvVar);
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+        }
+
+        internal static void BuildTargetWithDriveEnumeratingWildcardUsingBuildManager(TestEnvironment env, string testProjectFile, string targetName, ExpectedBuildResult expectedBuildResult, ITestOutputHelper testOutput = null)
+        {
+            try
+            {
+                // Setup build
+                MockLogger mockLogger = (testOutput == null) ? new MockLogger() : new MockLogger(testOutput);
+                var p = ProjectInstance.FromFile(testProjectFile, new ProjectOptions());
+                BuildManager buildManager = BuildManager.DefaultBuildManager;
+                BuildRequestData data = new BuildRequestData(p, new[] { targetName });
+                BuildParameters parameters = new BuildParameters()
+                {
+                    Loggers = new ILogger[] { mockLogger },
+                };
+
+                // Perform build using build manager
+                BuildResult buildResult = buildManager.Build(parameters, data);
+
+                // Verify result based on value of ExpectedBuildResult
+                if (expectedBuildResult == ExpectedBuildResult.FailWithError)
+                {
+                    VerifyErrorLoggedForDriveEnumeratingWildcard(buildResult, mockLogger, targetName);
+                }
+                else if (expectedBuildResult == ExpectedBuildResult.SucceedWithWarning)
+                {
+                    VerifyWarningLoggedForDriveEnumeratingWildcard(buildResult, mockLogger, targetName);
+                }
+                else if (expectedBuildResult == ExpectedBuildResult.SucceedWithNoErrorsAndWarnings)
+                {
+                    VerifyNoErrorsAndWarningsForDriveEnumeratingWildcard(buildResult, mockLogger, targetName);
+                }
+            }
+            finally
+            {
+                ChangeWaves.ResetStateForTests();
+            }
+        }
+
+        private static void VerifyErrorLoggedForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName)
+        {
+            buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult[targetName].ResultCode.ShouldBe(TargetResultCode.Failure);
+            mockLogger.ErrorCount.ShouldBe(1);
+            mockLogger.Errors[0].Code.ShouldBe("MSB5029");
+        }
+
+        private static void VerifyWarningLoggedForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName)
+        {
+            VerifySuccessOfBuildAndTargetResults(buildResult, targetName);
+            mockLogger.WarningCount.ShouldBe(1);
+            mockLogger.Warnings[0].Code.ShouldBe("MSB5029");
+        }
+
+        private static void VerifyNoErrorsAndWarningsForDriveEnumeratingWildcard(BuildResult buildResult, MockLogger mockLogger, string targetName)
+        {
+            VerifySuccessOfBuildAndTargetResults(buildResult, targetName);
+            mockLogger.WarningCount.ShouldBe(0);
+            mockLogger.ErrorCount.ShouldBe(0);
+        }
+
+        private static void VerifySuccessOfBuildAndTargetResults(BuildResult buildResult, string targetName)
+        {
+            buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            buildResult[targetName].ResultCode.ShouldBe(TargetResultCode.Success);
+        }
+
         /// <summary>
         /// Build a project with the provided content in memory.
         /// Assert that it fails, and return the mock logger with the output.
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 33ed94cc123..6ede3f2d7fb 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -179,7 +179,7 @@ public TransientTempPath CreateNewTempPath()
         public TransientTempPath CreateNewTempPathWithSubfolder(string subfolder)
         {
             var folder = CreateFolder(null, true, subfolder);
-            return SetTempPath(folder.Path, true);
+            return WithTransientTestState(SetTempPath(folder.Path, true));
         }
 
         /// <summary>
@@ -191,10 +191,7 @@ public TransientTempPath CreateNewTempPathWithSubfolder(string subfolder)
         /// </summary>
         public TransientTempPath SetTempPath(string tempPath, bool deleteTempDirectory = false)
         {
-            var transientTempPath = new TransientTempPath(tempPath, deleteTempDirectory);
-            _variants.Add(transientTempPath);
-
-            return transientTempPath;
+            return WithTransientTestState(new TransientTempPath(tempPath, deleteTempDirectory));
         }
 
         /// <summary>
diff --git a/src/Shared/XMakeAttributes.cs b/src/Shared/XMakeAttributes.cs
index ecedbe2329f..7a4d501e09c 100644
--- a/src/Shared/XMakeAttributes.cs
+++ b/src/Shared/XMakeAttributes.cs
@@ -3,6 +3,9 @@
 
 using System;
 using System.Collections.Generic;
+#if !CLR2COMPATIBILITY
+using System.Runtime.InteropServices;
+#endif
 using System.Runtime.CompilerServices;
 
 #nullable disable
@@ -31,6 +34,7 @@ internal static class XMakeAttributes
         internal const string update = "Update";
         internal const string matchOnMetadata = "MatchOnMetadata";
         internal const string matchOnMetadataOptions = "MatchOnMetadataOptions";
+        internal const string overrideUsingTask = "Override";
         internal const string keepMetadata = "KeepMetadata";
         internal const string removeMetadata = "RemoveMetadata";
         internal const string keepDuplicates = "KeepDuplicates";
@@ -87,6 +91,7 @@ internal struct MSBuildArchitectureValues
         {
             internal const string x86 = "x86";
             internal const string x64 = "x64";
+            internal const string arm64 = "arm64";
             internal const string currentArchitecture = "CurrentArchitecture";
             internal const string any = "*";
         }
@@ -105,7 +110,7 @@ internal struct MSBuildArchitectureValues
 
         private static readonly HashSet<string> ValidMSBuildRuntimeValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildRuntimeValues.clr2, MSBuildRuntimeValues.clr4, MSBuildRuntimeValues.currentRuntime, MSBuildRuntimeValues.net, MSBuildRuntimeValues.any };
 
-        private static readonly HashSet<string> ValidMSBuildArchitectureValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildArchitectureValues.x86, MSBuildArchitectureValues.x64, MSBuildArchitectureValues.currentArchitecture, MSBuildArchitectureValues.any };
+        private static readonly HashSet<string> ValidMSBuildArchitectureValues = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { MSBuildArchitectureValues.x86, MSBuildArchitectureValues.x64, MSBuildArchitectureValues.arm64, MSBuildArchitectureValues.currentArchitecture, MSBuildArchitectureValues.any };
 
         /// <summary>
         /// Returns true if and only if the specified attribute is one of the attributes that the engine specifically recognizes
@@ -428,7 +433,25 @@ internal static bool TryMergeArchitectureValues(string architectureA, string arc
         /// </comments>
         internal static string GetCurrentMSBuildArchitecture()
         {
+#if !CLR2COMPATIBILITY
+            string currentArchitecture = string.Empty;
+            switch (RuntimeInformation.ProcessArchitecture)
+            {
+                case Architecture.X86:
+                    currentArchitecture = MSBuildArchitectureValues.x86;
+                    break;
+                case Architecture.X64:
+                    currentArchitecture = MSBuildArchitectureValues.x64;
+                    break;
+                case Architecture.Arm64:
+                    currentArchitecture = MSBuildArchitectureValues.arm64;
+                    break;
+                default:
+                    throw new PlatformNotSupportedException(string.Format("{0} is not a supported architecture.", RuntimeInformation.ProcessArchitecture));
+            }
+#else
             string currentArchitecture = (IntPtr.Size == sizeof(Int64)) ? MSBuildArchitectureValues.x64 : MSBuildArchitectureValues.x86;
+#endif
             return currentArchitecture;
         }
 
diff --git a/src/StringTools.Benchmark/StringTools.Benchmark.csproj b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
index eb1bf1347f3..92f0e8e82eb 100644
--- a/src/StringTools.Benchmark/StringTools.Benchmark.csproj
+++ b/src/StringTools.Benchmark/StringTools.Benchmark.csproj
@@ -4,7 +4,7 @@
     <UseAppHost>false</UseAppHost>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
-    
+
     <IsPackable>false</IsPackable>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
 
@@ -14,6 +14,9 @@
 
   <ItemGroup>
     <PackageReference Include="BenchmarkDotNet" />
+    <!-- Bump these to the latest version despite transitive references to older -->
+    <PackageReference Include="System.Private.Uri" />
+    <PackageReference Include="System.Runtime" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index 302d50bfd6c..f04d2a9e931 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -96,7 +96,7 @@ public bool MoveNext()
         /// </summary>
         private readonly ReadOnlySpan<char> _inlineSpan;
 
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
         /// <summary>
         /// .NET Core does not keep a reference to the containing object in <see cref="ReadOnlySpan{T}"/>. In particular,
         /// it cannot recover the string if the span represents one. We have to hold the reference separately to be able to
@@ -122,7 +122,7 @@ internal InternableString(ReadOnlySpan<char> span)
             _inlineSpan = span;
             _spans = null;
             Length = span.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -141,7 +141,7 @@ internal InternableString(string str)
             _inlineSpan = str.AsSpan();
             _spans = null;
             Length = str.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = str;
 #endif
         }
@@ -154,7 +154,7 @@ internal InternableString(SpanBasedStringBuilder stringBuilder)
             _inlineSpan = default(ReadOnlySpan<char>);
             _spans = stringBuilder.Spans;
             Length = stringBuilder.Length;
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
             _inlineSpanString = null;
 #endif
         }
@@ -220,7 +220,7 @@ public unsafe string ExpensiveConvertToString()
             // Special case: if we hold just one string, we can directly return it.
             if (_inlineSpan.Length == Length)
             {
-#if NETSTANDARD
+#if FEATURE_FASTSPAN
                 if (_inlineSpanString != null)
                 {
                     return _inlineSpanString;
diff --git a/src/StringTools/WeakStringCache.Concurrent.cs b/src/StringTools/WeakStringCache.Concurrent.cs
index 6110475e946..3261141fcbf 100644
--- a/src/StringTools/WeakStringCache.Concurrent.cs
+++ b/src/StringTools/WeakStringCache.Concurrent.cs
@@ -32,7 +32,7 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
         {
             int hashCode = internable.GetHashCode();
 
-            StringWeakHandle handle;
+            StringWeakHandle? handle;
             string? result;
 
             // Get the existing handle from the cache and lock it while we're dereferencing it to prevent a race with the Scavenge
@@ -98,7 +98,7 @@ public void Scavenge()
             foreach (KeyValuePair<int, StringWeakHandle> entry in _stringsByHashCode)
             {
                 // We can safely dereference entry.Value as the caller guarantees that Scavenge runs only on one thread.
-                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle removedHandle))
+                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle? removedHandle))
                 {
                     lock (removedHandle)
                     {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 9fe18eaef93..beec4a1d226 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -14,7 +14,6 @@
 using SystemProcessorArchitecture = System.Reflection.ProcessorArchitecture;
 using Xunit.Abstractions;
 using Shouldly;
-using System.Text;
 
 #nullable disable
 
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index f7aef1ac162..2d572ebf1dc 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -15,6 +15,7 @@
 using Xunit.Abstractions;
 
 using NativeMethods = Microsoft.Build.Tasks.NativeMethods;
+using System.Runtime.Versioning;
 
 #nullable disable
 
@@ -2491,10 +2492,10 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             };
         }
 
-#pragma warning disable CA1416
         /// <summary>
         /// Registry access delegate. Given a hive and a view, return the registry base key.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
         {
             if (hive == RegistryHive.CurrentUser)
@@ -2516,6 +2517,7 @@ private static RegistryKey GetBaseKey(RegistryHive hive, RegistryView view)
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subKey">The subkey</param>
         /// <returns>An enumeration of strings.</returns>
+        [SupportedOSPlatform("windows")]
         private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, string subKey)
         {
             if (baseKey == Registry.CurrentUser)
@@ -2765,6 +2767,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
         /// <param name="baseKey">The base registry key.</param>
         /// <param name="subKey">The subkey</param>
         /// <returns>A string containing the default value.</returns>
+        [SupportedOSPlatform("windows")]
         private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string subKey)
         {
             if (baseKey == Registry.CurrentUser)
@@ -2900,7 +2903,6 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
             Assert.True(false, $"New GetRegistrySubKeyDefaultValue parameters encountered, need to add unittesting support for subKey={subKey}");
             return null;
         }
-#pragma warning restore CA1416
 
         /// <summary>
         /// Delegate for System.IO.File.GetLastWriteTime
diff --git a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
index 76ceb607817..ace9870ffe6 100644
--- a/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
+++ b/src/Tasks.UnitTests/AssignTargetPath_Tests.cs
@@ -107,40 +107,6 @@ public void TargetPathAlreadySet(string targetPath)
             t.AssignedFiles.Length.ShouldBe(1);
             t.AssignedFiles[0].GetMetadata("TargetPath").ShouldBe(targetPath);
         }
-
-        [Theory]
-        [InlineData("c:/fully/qualified/path.txt")]
-        [InlineData("test/output/file.txt")]
-        [InlineData(@"some\dir\to\file.txt")]
-        [InlineData("file.txt")]
-        [InlineData("file")]
-        public void TargetPathAlreadySet_DisabledUnderChangeWave16_10(string targetPath)
-        {
-            using TestEnvironment env = TestEnvironment.Create();
-            string link = "c:/some/path";
-
-            ChangeWaves.ResetStateForTests();
-            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-            AssignTargetPath t = new AssignTargetPath();
-            t.BuildEngine = new MockEngine();
-            Dictionary<string, string> metaData = new Dictionary<string, string>();
-            metaData.Add("TargetPath", targetPath);
-            metaData.Add("Link", link);
-            t.Files = new ITaskItem[]
-                          {
-                              new TaskItem(
-                                  itemSpec: NativeMethodsShared.IsWindows ? @"c:\f1\f2\file.txt" : "/f1/f2/file.txt",
-                                  itemMetadata: metaData)
-                          };
-            t.RootFolder = NativeMethodsShared.IsWindows ? @"c:\f1\f2" : "/f1/f2";
-
-            t.Execute().ShouldBeTrue();
-            t.AssignedFiles.Length.ShouldBe(1);
-            t.AssignedFiles[0].GetMetadata("TargetPath").ShouldBe(link);
-            ChangeWaves.ResetStateForTests();
-        }
     }
 }
 
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index a3d57998984..12705101c88 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -822,9 +822,11 @@ public void DoRetryWhenDestinationLocked()
                     engine.AssertLogContains("MSB3021"); // copy failed
                     engine.AssertLogContains("MSB3026"); // DID retry
 
-#if !RUNTIME_TYPE_NETCORE && !MONO
-                    engine.AssertLogContains(Process.GetCurrentProcess().Id.ToString()); // the file is locked by the current process
-#endif
+                    if (NativeMethodsShared.IsWindows)
+                    {
+                        engine.AssertLogContains(Process.GetCurrentProcess().Id.ToString()); // the file is locked by the current process
+                    }
+
                     Assert.Equal(2, engine.Errors); // retries failed and the actual failure
                     Assert.Equal(10, engine.Warnings);
                 }
@@ -2399,9 +2401,7 @@ public void CopyToDestinationFolderWithSymbolicLinkCheck()
 
             if (NativeMethodsShared.IsWindows)
             {
-#pragma warning disable CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))
-#pragma warning restore CA1416 // Suppress Warning saying that WindowsPrincipal might not be compatible on Windows (Which shouldn't be an issue...)
                 {
                     isPrivileged = false;
                     Assert.True(true, "It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges");
diff --git a/src/Tasks.UnitTests/CreateItem_Tests.cs b/src/Tasks.UnitTests/CreateItem_Tests.cs
index 0c422b67892..3092c041e8a 100644
--- a/src/Tasks.UnitTests/CreateItem_Tests.cs
+++ b/src/Tasks.UnitTests/CreateItem_Tests.cs
@@ -3,8 +3,11 @@
 
 using System.IO;
 using System.Collections.Generic;
+using Microsoft.Build.Definition;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 using Xunit;
@@ -17,6 +20,16 @@ namespace Microsoft.Build.UnitTests
 {
     sealed public class CreateItem_Tests
     {
+        internal const string CreateItemWithInclude = @"
+            <Project>
+                <Target Name='TestTarget' Returns='@(Text)'>
+                    <CreateItem Include='{0}'>
+                        <Output TaskParameter='Include' ItemName='Text'/>
+                    </CreateItem>
+                </Target>
+            </Project>
+            ";
+
         private readonly ITestOutputHelper _testOutput;
 
         public CreateItem_Tests(ITestOutputHelper output)
@@ -261,8 +274,173 @@ public void AdditionalMetaDataOverwriteExisting()
             Assert.True(success);
             Assert.Equal("SomeOverwriteValue", t.Include[0].GetMetadata("MyMetaData"));
         }
-    }
-}
 
+        /// <summary>
+        /// Logs error when encountering wildcard drive enumeration during task item creation.
+        /// </summary>
+        [Theory]
+        [InlineData(@"/**")]
+        [InlineData(@"/**/*.cs")]
+        [InlineData(@"/**/*/*.cs")]
+        public void WildcardDriveEnumerationTaskItemLogsError(string itemSpec)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "1");
+
+                try
+                {
+                    MockEngine engine = new MockEngine();
+                    CreateItem t = new CreateItem()
+                    {
+                        BuildEngine = engine,
+                        Include = new ITaskItem[] { new TaskItem(itemSpec) },
+                    };
+
+                    t.Execute().ShouldBeFalse();
+                    engine.Errors.ShouldBe(1);
+                    engine.AssertLogContains("MSB5029");
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during task item creation on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(@"z:\**")]
+        [InlineData(@"z:\**\*.log")]
+        [InlineData(@"z:\\\\**\*.log")]
+        public void LogWindowsWarningUponCreateItemExecution(string itemSpec)
+        {
+            VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(itemSpec);
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during task item creation on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(@"\**")]
+        [InlineData(@"\**\*.log")]
+        public void LogUnixWarningUponCreateItemExecution(string itemSpec)
+        {
+            VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(itemSpec);
+        }
+
+        private static void VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(string itemSpec)
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                Helpers.ResetStateForDriveEnumeratingWildcardTests(env, "0");
+
+                try
+                {
+                    MockEngine engine = new MockEngine();
+                    CreateItem t = new CreateItem()
+                    {
+                        BuildEngine = engine,
+                        Include = new ITaskItem[] { new TaskItem(itemSpec) },
+                    };
+
+                    t.Execute().ShouldBeTrue();
+                    engine.Warnings.ShouldBe(1);
+                    engine.AssertLogContains("MSB5029");
+                }
+                finally
+                {
+                    ChangeWaves.ResetStateForTests();
+                }
+            }
+        }
 
+        /// <summary>
+        /// Throws exception when encountering wildcard drive enumeration during CreateItem task execution.
+        /// </summary>
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"$(empty)\**\*.cs")]
+        public void ThrowExceptionUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "1",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.FailWithError,
+                _testOutput);
+        }
 
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Windows platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"z:$(empty)\**\*.cs")]
+        public void LogWindowsWarningUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                content,
+                "0",
+                "TestTarget",
+                Helpers.ExpectedBuildResult.SucceedWithWarning,
+                _testOutput);
+        }
+
+        /// <summary>
+        /// Logs warning when encountering wildcard drive enumeration during CreateItem task execution on Unix platform.
+        /// </summary>
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/7330")]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        [Theory]
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"\**\*.txt")]
+
+        [InlineData(
+            CreateItemWithInclude,
+            @"$(empty)\**\*.cs")]
+        public void LogUnixWarningUponItemCreationWithDriveEnumeration(string content, string include)
+        {
+            content = string.Format(content, include);
+            Helpers.CleanContentsAndBuildTargetWithDriveEnumeratingWildcard(
+                    content,
+                    "0",
+                    "TestTarget",
+                    Helpers.ExpectedBuildResult.SucceedWithWarning,
+                    _testOutput);
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 72fe8006abd..ae4f8f1a92b 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -69,31 +69,6 @@ public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile()
             }
         }
 
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        public void EscapeSpecifiedCharactersInPathToGeneratedBatchFile_DisabledUnderChangeWave16_10()
-        {
-            using (var testEnvironment = TestEnvironment.Create())
-            {
-                ChangeWaves.ResetStateForTests();
-                testEnvironment.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-                var newTempPath = testEnvironment.CreateNewTempPathWithSubfolder("hello()w]o(rld)").TempPath;
-
-                string tempPath = Path.GetTempPath();
-                Assert.StartsWith(newTempPath, tempPath);
-
-                // Now run the Exec task on a simple command.
-                Exec exec = PrepareExec("echo Hello World!");
-                exec.Execute().ShouldBeFalse();
-
-                ChangeWaves.ResetStateForTests();
-            }
-        }
-
         /// <summary>
         /// Ensures that calling the Exec task does not leave any extra TEMP files
         /// lying around.
@@ -1017,64 +992,6 @@ public void EndToEndMultilineExec_EscapeSpecialCharacters()
                 }
             }
         }
-
-        [Fact]
-        [Trait("Category", "mono-osx-failing")]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        public void EndToEndMultilineExec_EscapeSpecialCharacters_DisabledUnderChangeWave16_10()
-        {
-            using (var env = TestEnvironment.Create(_output))
-            {
-                ChangeWaves.ResetStateForTests();
-                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-
-                var testProject = env.CreateTestProjectWithFiles(@"<Project>
-<Target Name=""ExecCommand"">
-  <Exec Command=""echo Hello, World!"" />
-   </Target>
-</Project>");
-
-                // Ensure path has subfolders
-                var newTempPath = env.CreateNewTempPathWithSubfolder("hello()wo(rld)").TempPath;
-                string tempPath = Path.GetTempPath();
-                Assert.StartsWith(newTempPath, tempPath);
-
-                using (var buildManager = new BuildManager())
-                {
-                    MockLogger logger = new MockLogger(_output, profileEvaluation: false, printEventsToStdout: false);
-
-                    var parameters = new BuildParameters()
-                    {
-                        Loggers = new[] { logger },
-                    };
-
-                    var collection = new ProjectCollection(
-                        new Dictionary<string, string>(),
-                        new[] { logger },
-                        remoteLoggers: null,
-                        ToolsetDefinitionLocations.Default,
-                        maxNodeCount: 1,
-                        onlyLogCriticalEvents: false,
-                        loadProjectsReadOnly: true);
-
-                    var project = collection.LoadProject(testProject.ProjectFile).CreateProjectInstance();
-
-                    var request = new BuildRequestData(
-                        project,
-                        targetsToBuild: new[] { "ExecCommand" },
-                        hostServices: null);
-
-                    var result = buildManager.Build(parameters, request);
-
-                    logger.AssertLogContains("Hello, World!");
-
-                    result.OverallResult.ShouldBe(BuildResultCode.Failure);
-                }
-                ChangeWaves.ResetStateForTests();
-            }
-        }
     }
 
     internal class ExecWrapper : Exec
diff --git a/src/Tasks.UnitTests/FormatUrl_Tests.cs b/src/Tasks.UnitTests/FormatUrl_Tests.cs
new file mode 100644
index 00000000000..0a5b5ca0b96
--- /dev/null
+++ b/src/Tasks.UnitTests/FormatUrl_Tests.cs
@@ -0,0 +1,211 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.IO;
+using Microsoft.Build.Tasks;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+
+namespace Microsoft.Build.UnitTests
+{
+    sealed public class FormatUrl_Tests
+    {
+        private readonly ITestOutputHelper _out;
+
+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)
+        {
+            _out = testOutputHelper;
+        }
+
+        /// <summary>
+        /// The URL to format is null.
+        /// </summary>
+        [Fact]
+        public void NullTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = null;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(string.Empty);
+        }
+
+        /// <summary>
+        /// The URL to format is empty.
+        /// </summary>
+        [Fact]
+        public void EmptyTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = string.Empty;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(t.InputUrl);
+        }
+
+        /// <summary>
+        /// No InputUrl value is provided. InputUrl is not a required parameter for the task.
+        /// </summary>
+        [Fact]
+        public void NoInputTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(string.Empty);
+        }
+
+        /// <summary>
+        /// The URL to format is white space.
+        /// FormatUrl depends on Path.GetFullPath.
+        /// From the documentation, Path.GetFullPath(" ") should throw an ArgumentException, but it doesn't on macOS and Linux
+        /// where whitespace characters are valid characters for filenames.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        public void WhitespaceTestOnUnix()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = " ";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(Path.Combine(Environment.CurrentDirectory, t.InputUrl)).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is white space.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void WhitespaceTestOnWindows()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = " ";
+            Should.Throw<ArgumentException>(() => t.Execute());
+        }
+
+        /// <summary>
+        /// The URL to format is a UNC.
+        /// </summary>
+        [Fact]
+        public void UncPathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"\\server\filename.ext";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file://server/filename.ext");
+        }
+
+        /// <summary>
+        /// The URL to format is a local absolute file path.
+        /// This test uses Environment.CurrentDirectory to have a file path value appropriate to the current OS/filesystem. 
+        /// </summary>
+        [Fact]
+        public void LocalAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = Environment.CurrentDirectory;
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(t.InputUrl).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is a local relative file path.
+        /// This test uses Environment.CurrentDirectory to have a file path value appropriate to the current OS/filesystem. 
+        /// </summary>
+        [Fact]
+        public void LocalRelativePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @".";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(new Uri(Environment.CurrentDirectory).AbsoluteUri);
+        }
+
+        /// <summary>
+        /// The URL to format is a *nix-style (macOS, Linux) local absolute file path.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.AnyUnix)]
+        public void LocalUnixAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"/usr/local/share";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file:///usr/local/share");
+        }
+
+        /// <summary>
+        /// The URL to format is a Windows-style local absolute file path.
+        /// </summary>
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void LocalWindowsAbsolutePathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"c:\folder\filename.ext";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"file:///c:/folder/filename.ext");
+        }
+
+        /// <summary>
+        /// The URL to format is a URL using localhost.
+        /// </summary>
+        [Fact]
+        public void UrlLocalHostTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://localhost/Example/Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"https://" + Environment.MachineName.ToLowerInvariant() + "/Example/Path");
+        }
+
+        /// <summary>
+        /// The URL to format is a URL.
+        /// </summary>
+        [Fact]
+        public void UrlTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://example.com/Example/Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(t.InputUrl);
+        }
+
+        /// <summary>
+        /// The URL to format is a URL with a 'parent' element (..) in the path.
+        /// </summary>
+        [Fact]
+        public void UrlParentPathTest()
+        {
+            var t = new FormatUrl();
+            t.BuildEngine = new MockEngine(_out);
+
+            t.InputUrl = @"https://example.com/Example/../Path";
+            t.Execute().ShouldBeTrue();
+            t.OutputUrl.ShouldBe(@"https://example.com/Path");
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index 9d9813898bc..e0f20bd2eec 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -25,7 +25,8 @@
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" SetTargetFramework="TargetFramework=netstandard2.0" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" />
+    <ProjectReference Include="..\Samples\Dependency\Dependency.csproj" ReferenceOutputAssembly="false" Private="false" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
diff --git a/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
index b7c228a2109..ed712777dd1 100644
--- a/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/MSBuildResXReader_Tests.cs
@@ -37,6 +37,45 @@ public void ParsesSingleStringAsString()
             AssertSingleStringResource(resxWithSingleString, "StringResource", "StringValue");
         }
 
+        [Fact]
+        public void ParsesSingleStringWithoutPreserveAsString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"">
+    <value> StringValue </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", " StringValue ");
+        }
+
+        [Fact]
+        public void ParsesSingleWhitespaceStringAsString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"" xml:space=""preserve"">
+    <value> </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", " ");
+        }
+
+        [Fact]
+        public void ParsesSingleWhitespaceStringWithNoPreserveAsEmptyString()
+        {
+            var resxWithSingleString = MSBuildResXReader.GetResourcesFromString(
+                ResXHelper.SurroundWithBoilerplate(
+                    @"<data name=""StringResource"">
+    <value> </value>
+    <comment>Comment</comment>
+  </data>"));
+
+            AssertSingleStringResource(resxWithSingleString, "StringResource", "");
+        }
+
         [Fact]
         public void ParsesSingleStringWithPartialTypeName()
         {
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index a87f30daff6..7dbf9e846f2 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -4,10 +4,18 @@
 using System;
 using System.Collections.Generic;
 using System.Linq;
+using System.Reflection;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
+using Microsoft.Build.UnitTests.Shared;
 using Microsoft.Build.Utilities;
+#if NETFRAMEWORK
+using Microsoft.IO;
+#else
+using System.IO;
+#endif
 using Shouldly;
 using Xunit;
 
@@ -19,6 +27,108 @@ public class RoslynCodeTaskFactory_Tests
     {
         private const string TaskName = "MyInlineTask";
 
+        [Fact]
+        public void InlineTaskWithAssemblyPlatformAgnostic()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                string location = Assembly.GetExecutingAssembly().Location;
+                TransientTestFile inlineTask = env.CreateFile(folder, "5106.proj", @$"
+<Project>
+
+  <UsingTask TaskName=""MyInlineTask"" TaskFactory=""RoslynCodeTaskFactory"" AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"">
+    <Task>
+      <Reference Include=""" + Path.Combine(Path.GetDirectoryName(location), "..", "..", "..", "Samples", "Dependency",
+#if DEBUG
+      "Debug"
+#else
+      "Release"
+#endif
+      , "net472", "Dependency.dll") + @""" />
+      <Using Namespace=""Dependency"" />
+      <Code Type=""Fragment"" Language=""cs"" >
+<![CDATA[
+Log.LogError(Alpha.GetString());
+]]>
+      </Code>
+    </Task>
+  </UsingTask>
+
+<Target Name=""ToRun"">
+  <MyInlineTask/>
+</Target>
+
+</Project>
+");
+                string output = RunnerUtilities.ExecMSBuild(inlineTask.Path, out bool success);
+                success.ShouldBeTrue(output);
+                output.ShouldContain("Alpha.GetString");
+            }
+        }
+
+        [Fact]
+        [SkipOnPlatform(TestPlatforms.AnyUnix, ".NETFramework 4.0 isn't on unix machines.")]
+        public void InlineTaskWithAssembly()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                TransientTestFile assemblyProj = env.CreateFile(folder, "5106.csproj", @$"
+                    <Project DefaultTargets=""Build"">
+                        <PropertyGroup>
+                            <TargetFrameworkVersion>{MSBuildConstants.StandardTestTargetFrameworkVersion}</TargetFrameworkVersion>
+                            <OutputType>Library</OutputType>
+                        </PropertyGroup>
+                        <ItemGroup>
+                            <Reference Include=""System""/>
+                            <Compile Include=""Class1.cs""/>
+                        </ItemGroup>
+                        <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
+                    </Project>
+");
+                TransientTestFile csFile = env.CreateFile(folder, "Class1.cs", @"
+using System;
+
+namespace _5106 {
+    public class Class1 {
+        public static string ToPrint() {
+            return ""Hello!"";
+        }
+    }
+}
+");
+                string output = RunnerUtilities.ExecMSBuild(assemblyProj.Path + $" /p:OutDir={Path.Combine(folder.Path, "subFolder")} /restore", out bool success);
+                success.ShouldBeTrue(output);
+
+                TransientTestFile inlineTask = env.CreateFile(folder, "5106.proj", @$"
+<Project>
+
+  <UsingTask TaskName=""MyInlineTask"" TaskFactory=""RoslynCodeTaskFactory"" AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"">
+    <Task>
+      <Reference Include=""{Path.Combine(folder.Path, "subFolder", "5106.dll")}"" />
+      <Reference Include=""netstandard"" />
+      <Using Namespace=""_5106"" />
+      <Code Type=""Fragment"" Language=""cs"" >
+<![CDATA[
+Log.LogError(Class1.ToPrint());
+]]>
+      </Code>
+    </Task>
+  </UsingTask>
+
+<Target Name=""ToRun"">
+  <MyInlineTask/>
+</Target>
+
+</Project>
+");
+                output = RunnerUtilities.ExecMSBuild(inlineTask.Path, out success);
+                success.ShouldBeTrue();
+                output.ShouldContain("Hello!");
+            }
+        }
+
         [Fact]
         public void RoslynCodeTaskFactory_ReuseCompilation()
         {
@@ -96,8 +206,12 @@ public void VisualBasicFragment()
             const string fragment = "Dim x = 0";
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
-'     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
+'     This code was generated by a tool." +
+#if NETFRAMEWORK
+@"
+'     Runtime Version:4.0.30319.42000" +
+#endif
+@$"
 '
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
@@ -164,8 +278,12 @@ public void VisualBasicFragmentWithProperties()
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
 '     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
-'
+" +
+#if NETFRAMEWORK
+@"'     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"'
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
 ' </auto-generated>
@@ -281,8 +399,12 @@ Return True
             string expectedSourceCode = $@"'------------------------------------------------------------------------------
 ' <auto-generated>
 '     This code was generated by a tool.
-'     Runtime Version:4.0.30319.42000
-'
+" +
+#if NETFRAMEWORK
+@"'     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"'
 '     Changes to this file may cause incorrect behavior and will be lost if
 '     the code is regenerated.
 ' </auto-generated>
@@ -353,8 +475,12 @@ public void CSharpFragment()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+$@"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -411,8 +537,12 @@ public void CSharpFragmentWithProperties()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+$@"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -520,8 +650,12 @@ public void CSharpMethod()
             string expectedSourceCode = $@"//------------------------------------------------------------------------------
 // <auto-generated>
 //     This code was generated by a tool.
-//     Runtime Version:4.0.30319.42000
-//
+" +
+#if NETFRAMEWORK
+@"//     Runtime Version:4.0.30319.42000
+" +
+#endif
+@$"//
 //     Changes to this file may cause incorrect behavior and will be lost if
 //     the code is regenerated.
 // </auto-generated>
@@ -757,7 +891,6 @@ private void TryLoadTaskBodyAndExpectSuccess(
             IReadOnlyList<string> expectedWarningMessages = null)
         {
             MockEngine buildEngine = new MockEngine();
-            
 
             TaskLoggingHelper log = new TaskLoggingHelper(buildEngine, TaskName)
             {
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 574040bdeac..5e5f39a1656 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -569,30 +569,36 @@ internal static string GetRuntimeVersion(string path)
 #if FEATURE_MSCOREE
             if (NativeMethodsShared.IsWindows)
             {
-                StringBuilder runtimeVersion;
-                uint hresult;
 #if DEBUG
-                // Just to make sure and exercise the code that doubles the size
-                // every time GetRequestedRuntimeInfo fails due to insufficient buffer size.
+                // Just to make sure and exercise the code that uses dwLength to allocate the buffer
+                // when GetRequestedRuntimeInfo fails due to insufficient buffer size.
                 int bufferLength = 1;
 #else
                 int bufferLength = 11; // 11 is the length of a runtime version and null terminator v2.0.50727/0
 #endif
-                do
-                {
-                    runtimeVersion = new StringBuilder(bufferLength);
-                    hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out _);
-                    bufferLength *= 2;
-                } while (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
 
-                if (hresult == NativeMethodsShared.S_OK)
+                unsafe
                 {
-                    return runtimeVersion.ToString();
-                }
-                else
-                {
-                    return String.Empty;
-                }
+                    // Allocate an initial buffer 
+                    char* runtimeVersion = stackalloc char[bufferLength];
+
+                    // Run GetFileVersion, this should succeed using the initial buffer.
+                    // It also returns the dwLength which is used if there is insufficient buffer.
+                    uint hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out int dwLength);
+
+                    if (hresult == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER)
+                    {
+                        // Allocate new buffer based on the returned length.
+                        char* runtimeVersion2 = stackalloc char[dwLength];
+                        runtimeVersion = runtimeVersion2;
+
+                        // Get the RuntimeVersion in this second call.
+                        bufferLength = dwLength;
+                        hresult = NativeMethods.GetFileVersion(path, runtimeVersion, bufferLength, out dwLength);
+                    }
+
+                    return hresult == NativeMethodsShared.S_OK ? new string(runtimeVersion, 0, dwLength - 1) : string.Empty;
+                }                
             }
             else
             {
@@ -603,7 +609,6 @@ internal static string GetRuntimeVersion(string path)
 #endif
         }
 
-
         /// <summary>
         /// Import assembly dependencies.
         /// </summary>
@@ -790,7 +795,7 @@ private static AssemblyNameExtension ConstructAssemblyName(IntPtr asmMetaPtr, ch
             // Construct the assembly name. (Note asmNameLength should/must be > 0.)
             var assemblyName = new AssemblyName
             {
-                Name = new string(asmNameBuf, 0, (int) asmNameLength - 1),
+                Name = new string(asmNameBuf, 0, (int)asmNameLength - 1),
                 Version = new Version(
                     asmMeta.usMajorVersion,
                     asmMeta.usMinorVersion,
@@ -911,7 +916,7 @@ public static string GetRuntimeVersion(string path)
                     // Read the PE header signature
 
                     sr.BaseStream.Position = peHeaderOffset;
-                    if (!ReadBytes(sr, (byte) 'P', (byte) 'E', 0, 0))
+                    if (!ReadBytes(sr, (byte)'P', (byte)'E', 0, 0))
                     {
                         return string.Empty;
                     }
diff --git a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
index b7df962c76f..7611767ca12 100644
--- a/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
+++ b/src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs
@@ -31,6 +31,16 @@ internal static class GlobalAssemblyCache
         /// </summary>
         internal static readonly GetGacEnumerator gacEnumerator = GetGacNativeEnumerator;
 
+        /// <summary>
+        /// Lazy loaded cached root path of the GAC.
+        /// </summary>
+        private static readonly Lazy<string> _gacPath = new(() => GetGacPath());
+
+        /// <summary>
+        /// Gets the root path of the GAC.
+        /// </summary>
+        internal static string GacPath => _gacPath.Value;
+
         /// <summary>
         /// Given a strong name, find its path in the GAC.
         /// </summary>
@@ -367,16 +377,18 @@ bool specificVersion
         }
 
         /// <summary>
-        /// Return the root path of the GAC
+        /// Return the root path of the GAC.
         /// </summary>
         internal static string GetGacPath()
         {
             int gacPathLength = 0;
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
-            StringBuilder gacPath = new StringBuilder(gacPathLength);
-            NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
-
-            return gacPath.ToString();
+            unsafe
+            {
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, null, ref gacPathLength);
+                char* gacPath = stackalloc char[gacPathLength];
+                NativeMethods.GetCachePath(AssemblyCacheFlags.GAC, gacPath, ref gacPathLength);
+                return new string(gacPath, 0, gacPathLength - 1);
+            }
         }
     }
 }
diff --git a/src/Tasks/AssignTargetPath.cs b/src/Tasks/AssignTargetPath.cs
index 10ede5e6a1a..48079383cd6 100644
--- a/src/Tasks/AssignTargetPath.cs
+++ b/src/Tasks/AssignTargetPath.cs
@@ -77,7 +77,7 @@ public override bool Execute()
 
                     // If TargetPath is already set, it takes priority.
                     // https://github.com/dotnet/msbuild/issues/2795
-                    string targetPath =  ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) ? Files[i].GetMetadata(ItemMetadataNames.targetPath) : null;
+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);
 
                     // If TargetPath not already set, fall back to default behavior.
                     if (string.IsNullOrEmpty(targetPath))
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 39469981e66..b8960252b8a 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -17,6 +17,7 @@
 using System.Xml.XPath;
 using System.Xml.Xsl;
 using Microsoft.Build.Shared.FileSystem;
+using System.Runtime.Versioning;
 
 #nullable disable
 
@@ -28,6 +29,7 @@ namespace Microsoft.Build.Tasks.Deployment.Bootstrapper
     [ComVisible(true)]
     [Guid("1D9FE38A-0226-4b95-9C6B-6DFFA2236270")]
     [ClassInterface(ClassInterfaceType.None)]
+    [SupportedOSPlatform("windows")]
     public class BootstrapperBuilder : IBootstrapperBuilder
     {
         private static readonly bool s_logging = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("VSPLOG"));
@@ -1643,7 +1645,7 @@ private static string GetFileHash(string filePath)
             // the .NET Framework we are targeting.  In ideal situations, bootstrapper files will be
             // pre-signed anwyay; this is a fallback in case we ever encounter a bootstrapper that is
             // not signed.  
-            System.Security.Cryptography.SHA256CryptoServiceProvider sha = new System.Security.Cryptography.SHA256CryptoServiceProvider();
+            System.Security.Cryptography.SHA256 sha = System.Security.Cryptography.SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider");
 
             using (Stream s = fi.OpenRead())
             {
@@ -1906,7 +1908,7 @@ private static XmlElement CreateApplicationElement(XmlElement configElement, Bui
                     XmlElement filesNode = applicationElement.OwnerDocument.CreateElement("Files");
                     XmlElement fileNode = filesNode.OwnerDocument.CreateElement("File");
                     AddAttribute(fileNode, "Name", settings.ApplicationFile);
-                    AddAttribute(fileNode, URLNAME_ATTRIBUTE, Uri.EscapeUriString(settings.ApplicationFile));
+                    AddAttribute(fileNode, URLNAME_ATTRIBUTE, Uri.EscapeDataString(settings.ApplicationFile));
                     filesNode.AppendChild(fileNode);
                     applicationElement.AppendChild(filesNode);
                 }
diff --git a/src/Tasks/BootstrapperUtil/Util.cs b/src/Tasks/BootstrapperUtil/Util.cs
index 0ed5be1dea0..d62c8247070 100644
--- a/src/Tasks/BootstrapperUtil/Util.cs
+++ b/src/Tasks/BootstrapperUtil/Util.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
@@ -75,6 +76,7 @@ public static CultureInfo GetCultureInfoFromString(string cultureName)
 
         public static CultureInfo DefaultCultureInfo => System.Threading.Thread.CurrentThread.CurrentUICulture;
 
+        [SupportedOSPlatform("windows")]
         // This is the 4.0 property and will always point to the Dev10 registry key so that we don't break backwards compatibility.
         // Applications relying on 4.5 will need to use the new method that is introduced in 4.5.
         public static string DefaultPath
@@ -102,6 +104,7 @@ public static string DefaultPath
             }
         }
 
+        [SupportedOSPlatform("windows")]
         // A new method in 4.5 to get the default path for bootstrapper packages.
         // This method is not going to cache the path as it could be different depending on the Visual Studio version.
         public static string GetDefaultPath(string visualStudioVersion)
@@ -153,6 +156,7 @@ public static string GetDefaultPath(string visualStudioVersion)
             return Directory.GetCurrentDirectory();
         }
 
+        [SupportedOSPlatform("windows")]
         // Gets the list of additional paths to inspect for packages as defined in the registry
         public static List<string> AdditionalPackagePaths
         {
@@ -202,6 +206,7 @@ public static List<string> AdditionalPackagePaths
             }
         }
 
+        [SupportedOSPlatform("windows")]
         private static string ReadRegistryString(RegistryKey key, string path, string registryValue)
         {
             RegistryKey subKey = key.OpenSubKey(path, false);
diff --git a/src/Tasks/ComReference.cs b/src/Tasks/ComReference.cs
index cea831d5798..eaf732c4ec4 100644
--- a/src/Tasks/ComReference.cs
+++ b/src/Tasks/ComReference.cs
@@ -406,22 +406,33 @@ internal static string StripTypeLibNumberFromPath(string typeLibPath, FileExists
 
         private static string GetModuleFileName(IntPtr handle)
         {
-            bool success = false;
-            var buffer = new StringBuilder();
+            char[] buffer = null;
 
             // Try increased buffer sizes if on longpath-enabled Windows
-            for (int bufferSize = NativeMethodsShared.MAX_PATH; !success && bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
+            for (int bufferSize = NativeMethodsShared.MAX_PATH; bufferSize <= NativeMethodsShared.MaxPath; bufferSize *= 2)
             {
-                buffer.EnsureCapacity(bufferSize);
+                buffer = System.Buffers.ArrayPool<char>.Shared.Rent(bufferSize);
+                try
+                {
+                    var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
+                    int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, bufferSize);
 
-                var handleRef = new System.Runtime.InteropServices.HandleRef(buffer, handle);
-                int pathLength = NativeMethodsShared.GetModuleFileName(handleRef, buffer, buffer.Capacity);
+                    bool isBufferTooSmall = (uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER;
+                    if (pathLength != 0 && !isBufferTooSmall)
+                    {
+                        return new string(buffer, 0, pathLength);
+                    }
+                }
+                finally
+                {
+                    System.Buffers.ArrayPool<char>.Shared.Return(buffer);
+                }
 
-                bool isBufferTooSmall = ((uint)Marshal.GetLastWin32Error() == NativeMethodsShared.ERROR_INSUFFICIENT_BUFFER);
-                success = pathLength != 0 && !isBufferTooSmall;
+                // Double check that the buffer is not insanely big
+                ErrorUtilities.VerifyThrow(bufferSize <= int.MaxValue / 2, "Buffer size approaching int.MaxValue");
             }
 
-            return success ? buffer.ToString() : string.Empty;
+            return string.Empty;
         }
 
         /// <summary>
diff --git a/src/Tasks/CombineTargetFrameworkInfoProperties.cs b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
index 4108feb5246..2db3b55580b 100644
--- a/src/Tasks/CombineTargetFrameworkInfoProperties.cs
+++ b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
@@ -39,7 +39,8 @@ public override bool Execute()
         {
             if (PropertiesAndValues != null)
             {
-                XElement root = UseAttributeForTargetFrameworkInfoPropertyNames ?
+                // When removing the change wave, also remove UseAttributeForTargetFrameworkInfoPropertyNames.
+                XElement root = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) || UseAttributeForTargetFrameworkInfoPropertyNames ?
                     new("TargetFramework", new XAttribute("Name", EscapingUtilities.Escape(RootElementName))) :
                     new(RootElementName);
 
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index a7883735288..fff6c863cf8 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -1,4 +1,4 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -899,20 +899,22 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
         private static string GetLockedFileMessage(string file)
         {
             string message = string.Empty;
-#if !RUNTIME_TYPE_NETCORE && !MONO
 
             try
             {
-                var processes = LockCheck.GetProcessesLockingFile(file);
-                message = !string.IsNullOrEmpty(processes)
-                    ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
-                    : String.Empty;
+                if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
+                {
+                    var processes = LockCheck.GetProcessesLockingFile(file);
+                    message = !string.IsNullOrEmpty(processes)
+                        ? ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("Copy.FileLocked", processes)
+                        : String.Empty;
+                }
             }
             catch (Exception)
             {
                 // Never throw if we can't get the processes locking the file.
             }
-#endif
+
             return message;
         }
 
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index f386549f525..8f2ef0163ff 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -61,8 +61,14 @@ public override bool Execute()
             }
 
             // Expand wild cards.
-            Include = ExpandWildcards(Include);
-            Exclude = ExpandWildcards(Exclude);
+            (Include, bool expandedInclude) = TryExpandingWildcards(Include, XMakeAttributes.include);
+            (Exclude, bool expandedExclude) = TryExpandingWildcards(Exclude, XMakeAttributes.exclude);
+
+            // Execution stops if wildcard expansion fails due to drive enumeration and related env var is set.
+            if (!(expandedInclude && expandedExclude))
+            {
+                return false;
+            }
 
             // Simple case:  no additional attribute to add and no Exclude.  In this case the
             // ouptuts are simply the inputs.
@@ -128,14 +134,52 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab
             return outputItems;
         }
 
+        /// <summary>
+        /// Attempts to expand wildcards and logs warnings or errors for attempted drive enumeration.
+        /// </summary>
+        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandingWildcards(ITaskItem[] expand, string attributeType)
+        {
+            const string CreateItemTask = nameof(CreateItem);
+
+            string fileSpec;
+            FileMatcher.SearchAction searchAction;
+
+            (expand, searchAction, fileSpec) = ExpandWildcards(expand);
+
+            // Log potential drive enumeration glob anomalies when applicable.
+            if (searchAction == FileMatcher.SearchAction.LogDriveEnumeratingWildcard)
+            {
+                Log.LogWarningWithCodeFromResources(
+                    "WildcardResultsInDriveEnumeration",
+                    EscapingUtilities.UnescapeAll(fileSpec),
+                    attributeType,
+                    CreateItemTask);
+            }
+            else if (searchAction == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
+            {
+                Log.LogErrorWithCodeFromResources(
+                    "WildcardResultsInDriveEnumeration",
+                    EscapingUtilities.UnescapeAll(fileSpec),
+                    attributeType,
+                    CreateItemTask);
+            }
+
+            return (expand, !Log.HasLoggedErrors);
+        }
+
         /// <summary>
         /// Expand wildcards in the item list.
         /// </summary>
-        private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
+        private static (ITaskItem[] Element, FileMatcher.SearchAction Action, string FileSpec) ExpandWildcards(ITaskItem[] expand)
         {
+            // Used to detect and log drive enumerating wildcard patterns.
+            string[] files;
+            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;
+            string itemSpec = string.Empty;
+
             if (expand == null)
             {
-                return null;
+                return (null, action, itemSpec);
             }
             else
             {
@@ -144,7 +188,13 @@ private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                 {
                     if (FileMatcher.HasWildcards(i.ItemSpec))
                     {
-                        string[] files = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
+                        (files, action, _) = FileMatcher.Default.GetFiles(null /* use current directory */, i.ItemSpec);
+                        itemSpec = i.ItemSpec;
+                        if (action == FileMatcher.SearchAction.FailOnDriveEnumeratingWildcard)
+                        {
+                            return (expanded.ToArray(), action, itemSpec);
+                        }
+
                         foreach (string file in files)
                         {
                             TaskItem newItem = new TaskItem(i) { ItemSpec = file };
@@ -167,7 +217,7 @@ private static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                         expanded.Add(i);
                     }
                 }
-                return expanded.ToArray();
+                return (expanded.ToArray(), action, itemSpec);
             }
         }
 
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index c55eedb3974..c36685242c8 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -60,6 +60,11 @@ public sealed class DownloadFile : TaskExtension, ICancelableTask
         [Required]
         public string SourceUrl { get; set; }
 
+        /// <summary>
+        /// Gets or sets the number of milliseconds to wait before the request times out.
+        /// </summary>
+        public int Timeout { get; set; } = 100_000;
+
         /// <summary>
         /// Gets or sets a <see cref="HttpMessageHandler"/> to use.  This is used by unit tests to mock a connection to a remote server.
         /// </summary>
@@ -137,7 +142,7 @@ private async Task<bool> ExecuteAsync()
         private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
         {
             // The main reason to use HttpClient vs WebClient is because we can pass a message handler for unit tests to mock
-            using (var client = new HttpClient(HttpMessageHandler ?? new HttpClientHandler(), disposeHandler: true))
+            using (var client = new HttpClient(HttpMessageHandler ?? new HttpClientHandler(), disposeHandler: true) { Timeout = TimeSpan.FromMilliseconds(Timeout) })
             {
                 // Only get the response without downloading the file so we can determine if the file is already up-to-date
                 using (HttpResponseMessage response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false))
@@ -146,11 +151,17 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                     {
                         response.EnsureSuccessStatusCode();
                     }
+#if NET6_0_OR_GREATER
+                    catch (HttpRequestException)
+                    {
+                        throw;
+#else
                     catch (HttpRequestException e)
                     {
-                        // HttpRequestException does not have the status code so its wrapped and thrown here so that later on we can determine
-                        // if a retry is possible based on the status code
+                        // MSBuild History: CustomHttpRequestException was created as a wrapper over HttpRequestException
+                        // so it could include the StatusCode. As of net5.0, the statuscode is now in HttpRequestException.
                         throw new CustomHttpRequestException(e.Message, e.InnerException, response.StatusCode);
+#endif
                     }
 
                     if (!TryGetFileName(response, out string filename))
@@ -181,7 +192,11 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                         {
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
 
-                            using (Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
+                            using (Stream responseStream = await response.Content.ReadAsStreamAsync(
+#if NET6_0_OR_GREATER
+                            cancellationToken
+#endif
+                            ).ConfigureAwait(false))
                             {
                                 await responseStream.CopyToAsync(target, 1024, cancellationToken).ConfigureAwait(false);
                             }
@@ -220,20 +235,34 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
             }
 
             // Some HttpRequestException have an inner exception that has the real error
-            if (actualException is HttpRequestException httpRequestException && httpRequestException.InnerException != null)
+            if (actualException is HttpRequestException httpRequestException)
             {
-                actualException = httpRequestException.InnerException;
+                if (httpRequestException.InnerException != null)
+                {
+                    actualException = httpRequestException.InnerException;
+
+                    // An IOException inside of a HttpRequestException means that something went wrong while downloading
+                    if (actualException is IOException)
+                    {
+                        return true;
+                    }
+                }
 
-                // An IOException inside of a HttpRequestException means that something went wrong while downloading
-                if (actualException is IOException)
+#if NET6_0_OR_GREATER
+                // net5.0 included StatusCode in the HttpRequestException.
+                switch (httpRequestException.StatusCode)
                 {
-                    return true;
+                    case HttpStatusCode.InternalServerError:
+                    case HttpStatusCode.RequestTimeout:
+                        return true;
                 }
             }
+#else
+            }
 
+            // framework workaround for HttpRequestException not containing StatusCode
             if (actualException is CustomHttpRequestException customHttpRequestException)
             {
-                // A wrapped CustomHttpRequestException has the status code from the error
                 switch (customHttpRequestException.StatusCode)
                 {
                     case HttpStatusCode.InternalServerError:
@@ -241,6 +270,7 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
                         return true;
                 }
             }
+#endif
 
             if (actualException is WebException webException)
             {
@@ -287,8 +317,10 @@ private bool TryGetFileName(HttpResponseMessage response, out string filename)
             return !String.IsNullOrWhiteSpace(filename);
         }
 
+#if !NET6_0_OR_GREATER
         /// <summary>
         /// Represents a wrapper around the <see cref="HttpRequestException"/> that also contains the <see cref="HttpStatusCode"/>.
+        /// DEPRECATED as of net5.0, which included the StatusCode in the HttpRequestException class.
         /// </summary>
         private sealed class CustomHttpRequestException : HttpRequestException
         {
@@ -300,6 +332,7 @@ public CustomHttpRequestException(string message, Exception inner, HttpStatusCod
 
             public HttpStatusCode StatusCode { get; }
         }
+#endif
 
         private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)
         {
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index d4773311288..c05a3afb682 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -606,45 +606,31 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                     }
                     commandLine.AppendSwitch("/C"); // run then terminate
 
-                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10))
+                    StringBuilder fileName = null;
+
+                    // Escape special characters that need to be escaped.
+                    for (int i = 0; i < batchFileForCommandLine.Length; i++)
                     {
-                        StringBuilder fileName = null;
+                        char c = batchFileForCommandLine[i];
 
-                        // Escape special characters that need to be escaped.
-                        for (int i = 0; i < batchFileForCommandLine.Length; i++)
+                        if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
                         {
-                            char c = batchFileForCommandLine[i];
-
-                            if (ShouldEscapeCharacter(c) && (i == 0 || batchFileForCommandLine[i - 1] != '^'))
+                            // Avoid allocating a new string until we know we have something to escape.
+                            if (fileName == null)
                             {
-                                // Avoid allocating a new string until we know we have something to escape.
-                                if (fileName == null)
-                                {
-                                    fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
-                                    fileName.Append(batchFileForCommandLine, 0, i);
-                                }
-
-                                fileName.Append('^');
+                                fileName = StringBuilderCache.Acquire(batchFileForCommandLine.Length);
+                                fileName.Append(batchFileForCommandLine, 0, i);
                             }
 
-                            fileName?.Append(c);
+                            fileName.Append('^');
                         }
 
-                        if (fileName != null)
-                        {
-                            batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
-                        }
+                        fileName?.Append(c);
                     }
-                    else
+
+                    if (fileName != null)
                     {
-                        // If for some crazy reason the path has a & character and a space in it
-                        // then get the short path of the temp path, which should not have spaces in it
-                        // and then escape the &
-                        if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
-                        {
-                            batchFileForCommandLine = NativeMethodsShared.GetShortFilePath(batchFileForCommandLine);
-                            batchFileForCommandLine = batchFileForCommandLine.Replace("&", "^&");
-                        }
+                        batchFileForCommandLine = StringBuilderCache.GetStringAndRelease(fileName);
                     }
                 }
 
diff --git a/src/Tasks/FormatUrl.cs b/src/Tasks/FormatUrl.cs
index f742f4d238b..d6d344db19e 100644
--- a/src/Tasks/FormatUrl.cs
+++ b/src/Tasks/FormatUrl.cs
@@ -21,13 +21,8 @@ public sealed class FormatUrl : TaskExtension
 
         public override bool Execute()
         {
-#if RUNTIME_TYPE_NETCORE
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(FormatUrl));
-            return false;
-#else
             OutputUrl = InputUrl != null ? PathUtil.Format(InputUrl) : String.Empty;
             return true;
-#endif
         }
     }
 }
diff --git a/src/Tasks/GenerateApplicationManifest.cs b/src/Tasks/GenerateApplicationManifest.cs
index bece4016d94..a6361b25472 100644
--- a/src/Tasks/GenerateApplicationManifest.cs
+++ b/src/Tasks/GenerateApplicationManifest.cs
@@ -5,6 +5,7 @@
 using System.Diagnostics;
 using System.Globalization;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Xml;
 
 using Microsoft.Build.Framework;
@@ -17,6 +18,7 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Generates an application manifest for ClickOnce projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateApplicationManifest : GenerateManifestBase
     {
         private enum _ManifestType
@@ -108,6 +110,16 @@ public bool UseApplicationTrust
             set => _useApplicationTrust = value;
         }
 
+        public override bool Execute()
+        {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateApplicationManifest));
+                return false;
+            }
+            return base.Execute();
+        }
+
         protected override Type GetObjectType()
         {
             return typeof(ApplicationManifest);
diff --git a/src/Tasks/GenerateDeploymentManifest.cs b/src/Tasks/GenerateDeploymentManifest.cs
index d4ff40421a4..6867f27717b 100644
--- a/src/Tasks/GenerateDeploymentManifest.cs
+++ b/src/Tasks/GenerateDeploymentManifest.cs
@@ -5,6 +5,7 @@
 using System.Diagnostics;
 using System.IO;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
+using System.Runtime.Versioning;
 
 #nullable disable
 
@@ -13,6 +14,7 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Generates a deploy manifest for ClickOnce projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateDeploymentManifest : GenerateManifestBase
     {
         private bool? _createDesktopShortcut;
@@ -142,6 +144,7 @@ private bool BuildResolvedSettings(DeployManifest manifest)
             else if (String.IsNullOrEmpty(manifest.Publisher))
             {
                 string org = Util.GetRegisteredOrganization();
+
                 manifest.Publisher = !String.IsNullOrEmpty(org) ? org : manifest.Product;
             }
             Debug.Assert(!String.IsNullOrEmpty(manifest.Publisher));
@@ -149,6 +152,16 @@ private bool BuildResolvedSettings(DeployManifest manifest)
             return true;
         }
 
+        public override bool Execute()
+        {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateDeploymentManifest));
+                return false;
+            }
+            return base.Execute();
+        }
+
         protected override Type GetObjectType()
         {
             return typeof(DeployManifest);
diff --git a/src/Tasks/GenerateLauncher.cs b/src/Tasks/GenerateLauncher.cs
index 6bedd918410..683736168cc 100644
--- a/src/Tasks/GenerateLauncher.cs
+++ b/src/Tasks/GenerateLauncher.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.IO;
+using System.Runtime.Versioning;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
@@ -16,6 +17,7 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Generates a bootstrapper for ClickOnce deployment projects.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class GenerateLauncher : TaskExtension
     {
         private const string LAUNCHER_EXE = "Launcher.exe";
@@ -39,6 +41,12 @@ public sealed class GenerateLauncher : TaskExtension
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateLauncher));
+                return false;
+            }
+
             if (LauncherPath == null)
             {
                 // Launcher lives next to ClickOnce bootstrapper.
@@ -57,17 +65,17 @@ public override bool Execute()
 
             var launcherBuilder = new LauncherBuilder(LauncherPath);
             string entryPointFileName = Path.GetFileName(EntryPoint.ItemSpec);
-            //
+
             // If the EntryPoint specified is apphost.exe or singlefilehost.exe, we need to replace the EntryPoint
             // with the AssemblyName instead since apphost.exe/singlefilehost.exe is an intermediate file for
             // for final published {assemblyname}.exe.
-            //
             if ((entryPointFileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) || 
                 entryPointFileName.Equals(Constants.SingleFileHostExe, StringComparison.InvariantCultureIgnoreCase)) &&
-                !String.IsNullOrEmpty(AssemblyName))
+                !string.IsNullOrEmpty(AssemblyName))
             {
                 entryPointFileName = AssemblyName;
             }
+
             BuildResults results = launcherBuilder.Build(entryPointFileName, OutputPath);
 
             BuildMessage[] messages = results.Messages;
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index 65ea58c62b0..ef8aed08163 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -272,6 +272,12 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GenerateManifestBase));
+                return false;
+            }
+
             bool success = true;
 
             Type manifestType = GetObjectType();
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index 066c8c23d97..4e093b6e2b0 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -14,11 +14,8 @@ namespace Microsoft.Build.Tasks
     /// Generates a hash of a given ItemGroup items. Metadata is not considered in the hash.
     /// </summary>
     /// <remarks>
-    ///    <format type="text/markdown"><![CDATA[
-    /// ## Remarks
-    /// Currently uses SHA1. The implementation is subject to change between MSBuild versions.
-    /// This class is not intended as a cryptographic security measure, only for uniqueness between build executions.
-    /// ]]></format>
+    /// Currently uses SHA1. Implementation subject to change between MSBuild versions.
+    /// This class is not intended as a cryptographic security measure, only uniqueness between build executions.
     /// </remarks>
     public class Hash : TaskExtension
     {
diff --git a/src/Tasks/LC.cs b/src/Tasks/LC.cs
index c12aa042a2c..d219536f01d 100644
--- a/src/Tasks/LC.cs
+++ b/src/Tasks/LC.cs
@@ -101,7 +101,7 @@ public string SdkToolsPath
         /// </remarks>
         public override bool Execute()
         {
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(LC));
+            Log.LogErrorWithCodeFromResources("TaskRequiresFrameworkFailure", nameof(LC));
             return false;
         }
 #endif
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index fcd8a41a300..fd499d4bc93 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -1,19 +1,19 @@
 ﻿// Taken from https://github.com/cklutz/LockCheck, MIT license.
 // Copyright (C) Christian Klutz
 
-#if !RUNTIME_TYPE_NETCORE && !MONO
-
 using System;
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Linq;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 
 #nullable disable
 
 namespace Microsoft.Build.Tasks
 {
+    [SupportedOSPlatform("windows")]
     internal class LockCheck
     {
         [Flags]
@@ -55,10 +55,57 @@ private static extern int RmRegisterResources(uint pSessionHandle,
             uint nServices,
             string[] rgsServiceNames);
 
+        /// <summary>
+        /// Starts a new Restart Manager session.
+        /// A maximum of 64 Restart Manager sessions per user session
+        /// can be open on the system at the same time. When this
+        /// function starts a session, it returns a session handle
+        /// and session key that can be used in subsequent calls to
+        /// the Restart Manager API.
+        /// </summary>
+        /// <param name="pSessionHandle">
+        /// A pointer to the handle of a Restart Manager session.
+        /// The session handle can be passed in subsequent calls
+        /// to the Restart Manager API.
+        /// </param>
+        /// <param name="dwSessionFlags">
+        /// Reserved. This parameter should be 0.
+        /// </param>
+        /// <param name="strSessionKey">
+        /// A null-terminated string that contains the session key
+        /// to the new session. The string must be allocated before
+        /// calling the RmStartSession function.
+        /// </param>
+        /// <returns>System error codes that are defined in Winerror.h.</returns>
+        /// <remarks>
+        /// The Rm­­StartSession function doesn’t properly null-terminate
+        /// the session key, even though the function is documented as
+        /// returning a null-terminated string. To work around this bug,
+        /// we pre-fill the buffer with null characters so that whatever
+        /// ends gets written will have a null terminator (namely, one of
+        /// the null characters we placed ahead of time).
+        /// <para>
+        /// see <see href="http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx"/>.
+        /// </para>
+        /// </remarks>
         [DllImport(RestartManagerDll, CharSet = CharSet.Unicode)]
-        private static extern int RmStartSession(out uint pSessionHandle,
-            int dwSessionFlags, StringBuilder strSessionKey);
-
+        private static extern unsafe int RmStartSession(
+            out uint pSessionHandle,
+            int dwSessionFlags,
+            char* strSessionKey);
+
+        /// <summary>
+        /// Ends the Restart Manager session.
+        /// This function should be called by the primary installer that
+        /// has previously started the session by calling the <see cref="RmStartSession"/>
+        /// function. The RmEndSession function can be called by a secondary installer
+        /// that is joined to the session once no more resources need to be registered
+        /// by the secondary installer.
+        /// </summary>
+        /// <param name="pSessionHandle">A handle to an existing Restart Manager session.</param>
+        /// <returns>
+        /// The function can return one of the system error codes that are defined in Winerror.h.
+        /// </returns>
         [DllImport(RestartManagerDll)]
         private static extern int RmEndSession(uint pSessionHandle);
 
@@ -207,11 +254,16 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
             }
 
             const int maxRetries = 6;
+            uint handle;
+            int res;
 
-            // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
-            var key = new StringBuilder(new string('\0', CCH_RM_SESSION_KEY + 1));
+            unsafe
+            {
+                // See http://blogs.msdn.com/b/oldnewthing/archive/2012/02/17/10268840.aspx.
+                char* key = stackalloc char[CCH_RM_SESSION_KEY + 1];
+                res = RmStartSession(out handle, 0, key);
+            }
 
-            int res = RmStartSession(out uint handle, 0, key);
             if (res != 0)
             {
                 throw GetException(res, "RmStartSession", "Failed to begin restart manager session.");
@@ -303,5 +355,3 @@ private static Exception GetException(int res, string apiName, string message)
         }
     }
 }
-
-#endif
diff --git a/src/Tasks/ManifestUtil/ComImporter.cs b/src/Tasks/ManifestUtil/ComImporter.cs
index 86e28d204d0..96a941a43e0 100644
--- a/src/Tasks/ManifestUtil/ComImporter.cs
+++ b/src/Tasks/ManifestUtil/ComImporter.cs
@@ -10,11 +10,13 @@
 #if RUNTIME_TYPE_NETCORE
 using System.Runtime.InteropServices.ComTypes;
 #endif
+using System.Runtime.Versioning;
 
 #nullable disable
 
 namespace Microsoft.Build.Tasks.Deployment.ManifestUtilities
 {
+    [SupportedOSPlatform("windows")]
     internal class ComImporter
     {
         private readonly OutputMessageCollection _outputMessages;
diff --git a/src/Tasks/ManifestUtil/FileReference.cs b/src/Tasks/ManifestUtil/FileReference.cs
index e2e0f6b75d8..e13dad0af4f 100644
--- a/src/Tasks/ManifestUtil/FileReference.cs
+++ b/src/Tasks/ManifestUtil/FileReference.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 using System.Xml.Serialization;
 
@@ -44,6 +45,7 @@ public FileReference(string path) : base(path)
         [XmlIgnore]
         public ComClass[] ComClasses => _comClasses;
 
+        [SupportedOSPlatform("windows")]
         internal bool ImportComComponent(string path, OutputMessageCollection outputMessages, string outputDisplayName)
         {
             var importer = new ComImporter(path, outputMessages, outputDisplayName);
@@ -103,7 +105,7 @@ public bool IsDataFile
         [XmlIgnore]
         public TypeLib[] TypeLibs => _typeLibs;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -141,7 +143,7 @@ public string XmlWriteableType
             set => _writeableType = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -181,7 +183,7 @@ internal ComClass(Guid tlbId, Guid clsId, string progId, string threadingModel,
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -228,7 +230,7 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -293,7 +295,7 @@ private static string FlagsFromInt(int flags)
         [XmlIgnore]
         public string Version => _version;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -340,7 +342,7 @@ public string XmlVersion
             set => _version = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -380,7 +382,7 @@ public bool Versioned
             }
         }
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -400,7 +402,7 @@ public string XmlVersioned
             set => _versioned = value;
         }
 
-        #endregion
+#endregion
     }
 
     [ComVisible(false)]
@@ -427,7 +429,7 @@ public class ProxyStub
         [XmlIgnore]
         public string TlbId => _tlbid;
 
-        #region " XmlSerializer "
+#region " XmlSerializer "
 
         [Browsable(false)]
         [EditorBrowsable(EditorBrowsableState.Never)]
@@ -474,6 +476,6 @@ public string XmlTlbId
             set => _tlbid = value;
         }
 
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/ManifestUtil/PathUtil.cs b/src/Tasks/ManifestUtil/PathUtil.cs
index e87d1a84d0b..a9136b0f290 100644
--- a/src/Tasks/ManifestUtil/PathUtil.cs
+++ b/src/Tasks/ManifestUtil/PathUtil.cs
@@ -140,7 +140,7 @@ public static string Resolve(string path)
                 var u = new Uri(path);
                 if (String.Equals(u.Host, localHost, StringComparison.OrdinalIgnoreCase))
                 {
-                    // Unfortunatly Uri.Host is read-only, so we need to reconstruct it manually...
+                    // Unfortunately Uri.Host is read-only, so we need to reconstruct it manually...
                     int i = path.IndexOf(localHost, StringComparison.OrdinalIgnoreCase);
                     return i >= 0 ? path.Substring(0, i) + Environment.MachineName.ToLowerInvariant() + path.Substring(i + localHost.Length) : path;
                 }
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index c2469244409..986370caf84 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -1,9 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#if !RUNTIME_TYPE_NETCORE
 using Microsoft.Build.Framework;
-#endif
 using Microsoft.Build.Utilities;
 using Microsoft.Win32;
 using System;
@@ -22,6 +20,7 @@
 using System.Reflection;
 #endif
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Security;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
@@ -32,9 +31,6 @@
 using System.Text;
 using System.Xml;
 using Microsoft.Build.Shared.FileSystem;
-#if !RUNTIME_TYPE_NETCORE
-using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
-#endif
 
 #nullable disable
 
@@ -143,15 +139,15 @@ private static PermissionSet GetNamedPermissionSetFromZone(string targetZone, st
 
         private static PermissionSet GetNamedPermissionSet(string targetZone, string targetFrameworkMoniker)
         {
-            FrameworkNameVersioning fn;
+            FrameworkName fn;
 
             if (!string.IsNullOrEmpty(targetFrameworkMoniker))
             {
-                fn = new FrameworkNameVersioning(targetFrameworkMoniker);
+                fn = new FrameworkName(targetFrameworkMoniker);
             }
             else
             {
-                fn = new FrameworkNameVersioning(".NETFramework", s_dotNet40Version);
+                fn = new FrameworkName(".NETFramework", s_dotNet40Version);
             }
 
             int majorVersion = fn.Version.Major;
@@ -170,7 +166,7 @@ private static PermissionSet GetNamedPermissionSet(string targetZone, string tar
             }
         }
 
-        private static XmlElement GetXmlElement(string targetZone, FrameworkNameVersioning fn)
+        private static XmlElement GetXmlElement(string targetZone, FrameworkName fn)
         {
             IList<string> paths = ToolLocationHelper.GetPathToReferenceAssemblies(fn);
 
@@ -495,6 +491,7 @@ public static PermissionSet XmlToPermissionSet(XmlElement element)
         /// <param name="certThumbprint">Hexadecimal string that contains the SHA-1 hash of the certificate.</param>
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint, Uri timestampUrl, string path)
         {
             SignFile(certThumbprint, timestampUrl, path, null, null);
@@ -507,6 +504,7 @@ public static void SignFile(string certThumbprint, Uri timestampUrl, string path
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
@@ -523,11 +521,32 @@ public static void SignFile(string certThumbprint,
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
         /// <param name="targetFrameworkIdentifier">.NET Framework identifier for the target.</param>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certThumbprint,
                                     Uri timestampUrl,
                                     string path,
                                     string targetFrameworkVersion,
                                     string targetFrameworkIdentifier)
+        {
+            SignFile(certThumbprint, timestampUrl, path, targetFrameworkVersion, targetFrameworkIdentifier, false);
+        }
+
+        /// <summary>
+        /// Signs a ClickOnce manifest or PE file.
+        /// </summary>
+        /// <param name="certThumbprint">Hexadecimal string that contains the SHA-1 hash of the certificate.</param>
+        /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
+        /// <param name="path">Path of the file to sign with the certificate.</param>
+        /// <param name="targetFrameworkVersion">Version of the .NET Framework for the target.</param>
+        /// <param name="targetFrameworkIdentifier">.NET Framework identifier for the target.</param>
+        /// <param name="disallowMansignTimestampFallback">Disallow fallback to legacy timestamping when RFC3161 timestamping fails during manifest signing</param>
+        [SupportedOSPlatform("windows")]
+        public static void SignFile(string certThumbprint,
+                                    Uri timestampUrl,
+                                    string path,
+                                    string targetFrameworkVersion,
+                                    string targetFrameworkIdentifier,
+                                    bool disallowMansignTimestampFallback)
         {
             System.Resources.ResourceManager resources = new System.Resources.ResourceManager("Microsoft.Build.Tasks.Core.Strings.ManifestUtilities", typeof(SecurityUtilities).Module.Assembly);
 
@@ -563,7 +582,7 @@ public static void SignFile(string certThumbprint,
                     // Use SHA-256 digest for .NET Core apps
                     isTargetFrameworkSha256Supported = true;
                 }
-                SignFileInternal(cert, timestampUrl, path, isTargetFrameworkSha256Supported, resources);
+                SignFileInternal(cert, timestampUrl, path, isTargetFrameworkSha256Supported, resources, disallowMansignTimestampFallback);
             }
             else
             {
@@ -580,6 +599,7 @@ public static void SignFile(string certThumbprint,
         /// <param name="timestampUrl">URL that specifies an address of a time stamping server.</param>
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function is only for signing a manifest, not a PE file.</remarks>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(string certPath, SecureString certPassword, Uri timestampUrl, string path)
         {
             X509Certificate2 cert = new X509Certificate2(certPath, certPassword, X509KeyStorageFlags.PersistKeySet);
@@ -604,6 +624,7 @@ private static bool UseSha256Algorithm(X509Certificate2 cert)
         /// <param name="path">Path of the file to sign with the certificate.</param>
         /// <remarks>This function can only sign a PE file if the X509Certificate2 parameter represents a certificate in the
         /// current user's personal certificate store.</remarks>
+        [SupportedOSPlatform("windows")]
         public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path)
         {
             // setup resources
@@ -611,7 +632,13 @@ public static void SignFile(X509Certificate2 cert, Uri timestampUrl, string path
             SignFileInternal(cert, timestampUrl, path, true, resources);
         }
 
-        private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, string path, bool targetFrameworkSupportsSha256, System.Resources.ResourceManager resources)
+        [SupportedOSPlatform("windows")]
+        private static void SignFileInternal(X509Certificate2 cert,
+                                            Uri timestampUrl,
+                                            string path,
+                                            bool targetFrameworkSupportsSha256,
+                                            System.Resources.ResourceManager resources,
+                                            bool disallowMansignTimestampFallback = false)
         {
             if (cert == null)
             {
@@ -686,7 +713,7 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         if (timestampUrl == null)
                             manifest.Sign(signer);
                         else
-                            manifest.Sign(signer, timestampUrl.ToString());
+                            manifest.Sign(signer, timestampUrl.ToString(), disallowMansignTimestampFallback);
                         doc.Save(path);
                     }
                     catch (Exception ex)
@@ -790,9 +817,9 @@ internal static string GetCommandLineParameters(string certThumbprint, Uri times
             if (timestampUrl != null)
             {
                 commandLine.AppendFormat(CultureInfo.InvariantCulture,
-                                                "{0} {1} ",
-                                                useRFC3161Timestamp ? "/tr" : "/t",
-                                                timestampUrl.ToString());
+                                            "{0} {1} ",
+                                            useRFC3161Timestamp ? "/tr" : "/t",
+                                            timestampUrl.ToString());
             }
             commandLine.AppendFormat(CultureInfo.InvariantCulture, "\"{0}\"", path);
             return commandLine.ToString();
@@ -815,7 +842,7 @@ internal static string GetPathToTool(System.Resources.ResourceManager resources)
                     toolPath = Path.Combine(pathToDotNetFrameworkSdk, "bin", ToolName);
                 }
             }
-            if (toolPath == null || !FileSystems.Default.FileExists(toolPath))
+            if (NativeMethodsShared.IsWindows && (toolPath == null || !FileSystems.Default.FileExists(toolPath)))
             {
                 toolPath = GetVersionIndependentToolPath(ToolName);
             }
@@ -869,6 +896,7 @@ private static bool IsCertInStore(X509Certificate2 cert)
             return false;
         }
 
+        [SupportedOSPlatform("windows")]
         private static string GetVersionIndependentToolPath(string toolName)
         {
             const string versionIndependentToolKeyName = @"Software\Microsoft\ClickOnce\SignTool";
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index 4f098df2091..56ba265c495 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -13,6 +13,7 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.Versioning;
 using System.Security;
 using System.Security.Cryptography;
 using System.Text;
@@ -226,11 +227,11 @@ private static void GetFileInfoImpl(string path, string targetFrameWorkVersion,
 
                 if (string.IsNullOrEmpty(targetFrameWorkVersion) || CompareFrameworkVersions(targetFrameWorkVersion, Constants.TargetFrameworkVersion40) <= 0)
                 {
-                    hashAlg = new SHA1CryptoServiceProvider();
+                    hashAlg = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider");
                 }
                 else
                 {
-                    hashAlg = new SHA256CryptoServiceProvider();
+                    hashAlg = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider");
                 }
                 byte[] hashBytes = hashAlg.ComputeHash(s);
                 hash = Convert.ToBase64String(hashBytes);
@@ -250,6 +251,7 @@ private static string GetLogPath()
             return logPath;
         }
 
+        [SupportedOSPlatform("windows")]
         public static string GetRegisteredOrganization()
         {
             RegistryKey key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
@@ -515,7 +517,7 @@ public static string WriteTempFile(string s)
             return path;
         }
 
-        #region ItemComparer 
+#region ItemComparer 
         private static readonly ItemComparer s_itemComparer = new ItemComparer();
         private class ItemComparer : IComparer
         {
@@ -541,7 +543,7 @@ int IComparer.Compare(object obj1, object obj2)
                 return String.Compare(item1.ItemSpec, item2.ItemSpec, StringComparison.Ordinal);
             }
         }
-        #endregion
+#endregion
 
         public static Version ConvertFrameworkVersionToString(string version)
         {
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 0f70c92a0e2..8d0d9fbf267 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -12,6 +12,7 @@
 using System.Text;
 using System.Xml;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 
 using _FILETIME = System.Runtime.InteropServices.ComTypes.FILETIME;
 
@@ -273,7 +274,7 @@ private void init()
                                Sha256SignatureMethodUri);
 
 #if RUNTIME_TYPE_NETCORE
-            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),
+            CryptoConfig.AddAlgorithm(typeof(SHA256),
                                Sha256DigestMethod);
 #else
             CryptoConfig.AddAlgorithm(typeof(System.Security.Cryptography.SHA256Cng),
@@ -294,6 +295,7 @@ public override XmlElement GetIdElement(XmlDocument document, string idValue)
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class SignedCmiManifest2
     {
         private XmlDocument _manifestDom = null;
@@ -319,7 +321,7 @@ internal void Sign(CmiManifestSigner2 signer)
             Sign(signer, null);
         }
 
-        internal void Sign(CmiManifestSigner2 signer, string timeStampUrl)
+        internal void Sign(CmiManifestSigner2 signer, string timeStampUrl, bool disallowMansignTimestampFallback = false)
         {
             // Reset signer infos.
             _strongNameSignerInfo = null;
@@ -350,7 +352,7 @@ internal void Sign(CmiManifestSigner2 signer, string timeStampUrl)
 
                 // Now create the license DOM, and then sign it.
                 licenseDom = CreateLicenseDom(signer, ExtractPrincipalFromManifest(), ComputeHashFromManifest(_manifestDom, _useSha256));
-                AuthenticodeSignLicenseDom(licenseDom, signer, timeStampUrl, _useSha256);
+                AuthenticodeSignLicenseDom(licenseDom, signer, timeStampUrl, _useSha256, disallowMansignTimestampFallback);
             }
             StrongNameSignManifestDom(_manifestDom, licenseDom, signer, _useSha256);
         }
@@ -553,7 +555,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
-                    using (SHA256CryptoServiceProvider sha2 = new SHA256CryptoServiceProvider())
+                    using (SHA256 sha2 = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider"))
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -566,7 +568,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
-                    using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider())
+                    using (SHA1 sha1 = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider"))
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -601,7 +603,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
 
                 if (useSha256)
                 {
-                    using (SHA256CryptoServiceProvider sha2 = new SHA256CryptoServiceProvider())
+                    using (SHA256 sha2 = SHA256.Create("System.Security.Cryptography.SHA256CryptoServiceProvider"))
                     {
                         byte[] hash = sha2.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -614,7 +616,7 @@ private static byte[] ComputeHashFromManifest(XmlDocument manifestDom, bool oldF
                 }
                 else
                 {
-                    using (SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider())
+                    using (SHA1 sha1 = SHA1.Create("System.Security.Cryptography.SHA1CryptoServiceProvider"))
                     {
                         byte[] hash = sha1.ComputeHash(exc.GetOutput() as MemoryStream);
                         if (hash == null)
@@ -676,7 +678,7 @@ private static XmlDocument CreateLicenseDom(CmiManifestSigner2 signer, XmlElemen
             return licenseDom;
         }
 
-        private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManifestSigner2 signer, string timeStampUrl, bool useSha256)
+        private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManifestSigner2 signer, string timeStampUrl, bool useSha256, bool disallowMansignTimestampFallback)
         {
             // Make sure it is RSA, as this is the only one Fusion will support.
 #if RUNTIME_TYPE_NETCORE
@@ -747,7 +749,7 @@ private static void AuthenticodeSignLicenseDom(XmlDocument licenseDom, CmiManife
             // Time stamp it if requested.
             if (!string.IsNullOrEmpty(timeStampUrl))
             {
-                TimestampSignedLicenseDom(licenseDom, timeStampUrl, useSha256);
+                TimestampSignedLicenseDom(licenseDom, timeStampUrl, useSha256, disallowMansignTimestampFallback);
             }
 
             // Wrap it inside a RelData element.
@@ -831,7 +833,7 @@ private static string ObtainRFC3161Timestamp(string timeStampUrl, string signatu
             return timestamp;
         }
 
-        private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string timeStampUrl, bool useSha256)
+        private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string timeStampUrl, bool useSha256, bool disallowMansignTimestampFallback)
         {
             XmlNamespaceManager nsm = new XmlNamespaceManager(licenseDom.NameTable);
             nsm.AddNamespace("r", LicenseNamespaceUri);
@@ -850,31 +852,38 @@ private static void TimestampSignedLicenseDom(XmlDocument licenseDom, string tim
             // Catch CryptographicException to ensure fallback to old code (non-RFC3161)
             catch (CryptographicException)
             {
-                Win32.CRYPT_DATA_BLOB timestampBlob = new Win32.CRYPT_DATA_BLOB();
+                if (disallowMansignTimestampFallback)
+                {
+                    throw;
+                }
+                else
+                {
+                    Win32.CRYPT_DATA_BLOB timestampBlob = new Win32.CRYPT_DATA_BLOB();
 
-                byte[] licenseXml = Encoding.UTF8.GetBytes(licenseDom.OuterXml);
+                    byte[] licenseXml = Encoding.UTF8.GetBytes(licenseDom.OuterXml);
 
-                unsafe
-                {
-                    fixed (byte* pbLicense = licenseXml)
+                    unsafe
                     {
-                        Win32.CRYPT_DATA_BLOB licenseBlob = new Win32.CRYPT_DATA_BLOB();
-                        IntPtr pvLicense = new IntPtr(pbLicense);
-                        licenseBlob.cbData = (uint)licenseXml.Length;
-                        licenseBlob.pbData = pvLicense;
-
-                        int hr = Win32.CertTimestampAuthenticodeLicense(ref licenseBlob, timeStampUrl, ref timestampBlob);
-                        if (hr != Win32.S_OK)
+                        fixed (byte* pbLicense = licenseXml)
                         {
-                            throw new CryptographicException(hr);
+                            Win32.CRYPT_DATA_BLOB licenseBlob = new Win32.CRYPT_DATA_BLOB();
+                            IntPtr pvLicense = new IntPtr(pbLicense);
+                            licenseBlob.cbData = (uint)licenseXml.Length;
+                            licenseBlob.pbData = pvLicense;
+
+                            int hr = Win32.CertTimestampAuthenticodeLicense(ref licenseBlob, timeStampUrl, ref timestampBlob);
+                            if (hr != Win32.S_OK)
+                            {
+                                throw new CryptographicException(hr);
+                            }
                         }
                     }
-                }
 
-                byte[] timestampSignature = new byte[timestampBlob.cbData];
-                Marshal.Copy(timestampBlob.pbData, timestampSignature, 0, timestampSignature.Length);
-                Win32.HeapFree(Win32.GetProcessHeap(), 0, timestampBlob.pbData);
-                timestamp = Encoding.UTF8.GetString(timestampSignature);
+                    byte[] timestampSignature = new byte[timestampBlob.cbData];
+                    Marshal.Copy(timestampBlob.pbData, timestampSignature, 0, timestampSignature.Length);
+                    Win32.HeapFree(Win32.GetProcessHeap(), 0, timestampBlob.pbData);
+                    timestamp = Encoding.UTF8.GetString(timestampSignature);
+                }
             }
 
             XmlElement asTimestamp = licenseDom.CreateElement("as", "Timestamp", AuthenticodeNamespaceUri);
@@ -1199,6 +1208,7 @@ internal AsymmetricAlgorithm PublicKey
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class CmiAuthenticodeSignerInfo
     {
         private int _error = 0;
@@ -1325,6 +1335,7 @@ internal X509Chain SignerChain
         }
     }
 
+    [SupportedOSPlatform("windows")]
     internal class CmiAuthenticodeTimestamperInfo
     {
         private int _error = 0;
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 2db4195b003..e8e3b69f527 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -191,6 +191,12 @@
     <Compile Include="..\Shared\LanguageParser\VisualBasictokenizer.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="..\Shared\XMakeAttributes.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
+    <Compile Include="..\Shared\XMakeElements.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
     <Compile Include="AppConfig\*.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -941,11 +947,10 @@
   <!-- For perf, do not add more references (that will be loaded in common scenarios) without good reason -->
   <!-- ==========================================================================================-->
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
-    <PackageReference Include="System.Net.Http" />
-
     <Reference Include="System" />
     <Reference Include="System.Core" />
     <Reference Include="System.IO.Compression" />
+    <Reference Include="System.Net.Http" />
     <Reference Include="System.Reflection" />
     <Reference Include="System.Runtime.Serialization" />
     <!-- Needed by GenerateResource's ResXResourceReader: UNDONE: When CLR has moved this type to improve layering, remove this reference -->
@@ -957,8 +962,10 @@
     <Reference Include="System.Xaml" />
   </ItemGroup>
   <ItemGroup>
-    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
-    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj"/>
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj"/>
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
   </ItemGroup>
   <ItemGroup>
@@ -968,6 +975,15 @@
     <PackageReference Include="System.Resources.Extensions" />
   </ItemGroup>
 
+  <!-- Mimics AddRefAssemblies from MSBuild.csproj -->
+  <Target Name="AddRefAssemblies"
+          DependsOnTargets="ResolveAssemblyReferences"
+          BeforeTargets="AssignTargetPaths">
+    <ItemGroup>
+      <Content Include="@(NetstandardRefAssemblies)" CopyToOutputDirectory="PreserveNewest" Link="ref\%(Filename)%(Extension)"/>
+    </ItemGroup>
+  </Target>
+
   <!-- Tasks need to mimic redistributing the compilers, so add references to both full framework and .net core -->
   <ItemGroup>
     <!-- Reference this package to get binaries at runtime even when Arcade is not adding compiler references -->
@@ -983,6 +999,10 @@
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\net472\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
   </ItemGroup>
 
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
+    <PackageReference Include="Microsoft.Win32.Registry" />
+  </ItemGroup>
+
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <PackageReference Include="System.CodeDom" />
     <PackageReference Include="System.Reflection.Metadata" />
@@ -991,9 +1011,6 @@
     <PackageReference Include="System.Security.Permissions" />
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
 
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-
     <Content Include="$(NuGetPackageRoot)microsoft.net.compilers.toolset\$(MicrosoftNetCompilersToolsetVersion)\tasks\net6.0\**\*" CopyToOutputDirectory="PreserveNewest" LinkBase="Roslyn" />
   </ItemGroup>
 
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index f08909a20f7..9801bf9fa79 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -648,6 +648,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <PropertyGroup>
     <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)'==''">$(NoWarn)</MSBuildWarningsAsMessages>
     <MSBuildWarningsAsErrors Condition="'$(MSBuildWarningsAsErrors)'==''">$(WarningsAsErrors)</MSBuildWarningsAsErrors>
+    <MSBuildWarningsNotAsErrors Condition="'$(MSBuildWarningsNotAsErrors)'==''">$(WarningsNotAsErrors)</MSBuildWarningsNotAsErrors>
   </PropertyGroup>
 
   <!-- Common Project System support -->
@@ -1905,14 +1906,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       </_AdditionalTargetFrameworkInfoPropertyWithValue>
     </ItemGroup>
 
-    <PropertyGroup>
-      <_UseAttributeForTargetFrameworkInfoPropertyNames Condition="'$(_UseAttributeForTargetFrameworkInfoPropertyNames)' == ''">false</_UseAttributeForTargetFrameworkInfoPropertyNames>
-    </PropertyGroup>
-
     <CombineTargetFrameworkInfoProperties
         RootElementName="$(TargetFramework)"
-        PropertiesAndValues="@(_AdditionalTargetFrameworkInfoPropertyWithValue)"
-        UseAttributeForTargetFrameworkInfoPropertyNames="$(_UseAttributeForTargetFrameworkInfoPropertyNames)">
+        PropertiesAndValues="@(_AdditionalTargetFrameworkInfoPropertyWithValue)">
       <Output TaskParameter="Result"
               PropertyName="_AdditionalTargetFrameworkInfoProperties"/>
     </CombineTargetFrameworkInfoProperties>
@@ -5984,6 +5980,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         SigningTarget="$(_DeploymentApplicationDir)$(_DeploymentTargetApplicationManifestFileName)"
         TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
         TargetFrameworkVersion="$(TargetFrameworkVersion)"
+        DisallowMansignTimestampFallback="$(DisallowMansignTimestampFallback)"
         Condition="'$(_DeploymentSignClickOnceManifests)'=='true'" />
 
     <!-- Update entry point path in deploy manifest -->
@@ -6004,6 +6001,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         SigningTarget="$(PublishDir)$(TargetDeployManifestFileName)"
         TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
         TargetFrameworkVersion="$(TargetFrameworkVersion)"
+        DisallowMansignTimestampFallback="$(DisallowMansignTimestampFallback)"
         Condition="'$(_DeploymentSignClickOnceManifests)'=='true'" />
 
     <SignFile
@@ -6108,7 +6106,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <!-- This item represents the native manifest, example: WindowsApplication1.exe.manifest or Native.ClassLibrary1.manifest -->
     <ItemGroup>
-      <_BuiltProjectOutputGroupOutputIntermediate Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)" Condition="'@(NativeReference)'!='' or '@(_IsolatedComReference)'!=''">
+      <_BuiltProjectOutputGroupOutputIntermediate Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)" Condition="('@(NativeReference)'!='' or '@(_IsolatedComReference)'!='') And Exists('$(OutDir)$(_DeploymentTargetApplicationManifestFileName)')">
         <TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>
         <!-- For compatibility with 2.0 -->
         <OriginalItemSpec>$(OutDir)$(_DeploymentTargetApplicationManifestFileName)</OriginalItemSpec>
diff --git a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
index 2caf4326b7a..f08677fe9b8 100644
--- a/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
+++ b/src/Tasks/Microsoft.NETFramework.CurrentVersion.props
@@ -114,6 +114,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ImplicitlyExpandDesignTimeFacades Condition="'$(ImplicitlyExpandDesignTimeFacades)' == '' and ('$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(TargetingClr2Framework)' != 'true' and '$(TargetFrameworkVersion)' != 'v4.0')">true</ImplicitlyExpandDesignTimeFacades>
   </PropertyGroup>
 
+  <PropertyGroup>
+    <AvailablePlatforms Condition="!$(AvailablePlatforms.Contains('ARM64')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and $([MSBuild]::VersionGreaterThanOrEquals($(TargetFrameworkVersion), '4.0'))">$(AvailablePlatforms),ARM64</AvailablePlatforms>
+  </PropertyGroup>
+
   <!--Import props that are common for both full framework and core.
     And before the ImportAfter\* , so users can override it-->
   <Import Project="$(MSBuildToolsPath)\Microsoft.NET.props" />
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 45bc7d9faad..42368e48d88 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -3,9 +3,12 @@
 
 using System;
 using System.IO;
+using System.Runtime.InteropServices;
+using Microsoft.Build.Shared.FileSystem;
+
+#if FEATURE_COM_INTEROP
 using System.Text;
 using System.Reflection;
-using System.Runtime.InteropServices;
 using Microsoft.Build.Shared;
 using System.Collections.Generic;
 using System.Collections;
@@ -13,7 +16,7 @@
 using System.Linq;
 using System.Runtime.ExceptionServices;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Shared.FileSystem;
+#endif
 
 #nullable disable
 
@@ -522,7 +525,7 @@ internal enum SymbolicLink
     /// </summary>
     internal static class NativeMethods
     {
-        #region Constants
+#region Constants
 
         internal static readonly IntPtr NullPtr = IntPtr.Zero;
         internal static readonly IntPtr InvalidIntPtr = new IntPtr(-1);
@@ -627,9 +630,9 @@ internal enum MoveFileFlags
             MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x00000020
         }
 
-        #endregion
+#endregion
 
-        #region NT header stuff
+#region NT header stuff
 
         internal const uint IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b;
         internal const uint IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b;
@@ -780,9 +783,9 @@ internal struct CRYPTOAPI_BLOB
             internal IntPtr pbData;
         }
 
-        #endregion
+#endregion
 
-        #region PInvoke
+#region PInvoke
         private const string Crypt32DLL = "crypt32.dll";
         private const string Advapi32DLL = "advapi32.dll";
 #if !RUNTIME_TYPE_NETCORE
@@ -1053,13 +1056,15 @@ internal static extern int CreateAssemblyNameObject(
 
         /// <summary>
         /// GetCachePath from fusion.dll.
-        /// Using StringBuilder here is a way to pass a preallocated buffer of characters to (native) functions that require it.
         /// A common design pattern in unmanaged C++ is calling a function twice, once to determine the length of the string
-        /// and then again to pass the client-allocated character buffer. StringBuilder is the most straightforward way
-        /// to allocate a mutable buffer of characters and pass it around.
+        /// and then again to pass the client-allocated character buffer.
         /// </summary>
+        /// <param name="cacheFlags">Value that indicates the source of the cached assembly.</param>
+        /// <param name="cachePath">The returned pointer to the path.</param>
+        /// <param name="pcchPath">The requested maximum length of CachePath, and upon return, the actual length of CachePath.</param>
+        /// 
         [DllImport("fusion.dll", CharSet = CharSet.Unicode)]
-        internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, StringBuilder cachePath, ref int pcchPath);
+        internal static extern unsafe int GetCachePath(AssemblyCacheFlags cacheFlags, [Out] char* cachePath, ref int pcchPath);
 #endif
 
         //------------------------------------------------------------------------------
@@ -1125,15 +1130,15 @@ internal static extern int CreateAssemblyNameObject(
 
 #if FEATURE_MSCOREE
         /// <summary>
-        /// Get the runtime version for a given file
+        /// Get the runtime version for a given file.
         /// </summary>
-        /// <param name="szFullPath">The path of the file to be examined</param>
+        /// <param name="szFileName">The path of the file to be examined.</param>
         /// <param name="szBuffer">The buffer allocated for the version information that is returned.</param>
-        /// <param name="cchBuffer">The size, in wide characters, of szBuffer</param>
+        /// <param name="cchBuffer">The size, in wide characters, of szBuffer.</param>
         /// <param name="dwLength">The size, in bytes, of the returned szBuffer.</param>
-        /// <returns>HResult</returns>
+        /// <returns>HResult.</returns>
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
-        internal static extern uint GetFileVersion(String szFullPath, StringBuilder szBuffer, int cchBuffer, out uint dwLength);
+        internal static extern unsafe uint GetFileVersion([MarshalAs(UnmanagedType.LPWStr)] string szFileName, [Out] char* szBuffer, int cchBuffer, out int dwLength);
 #endif
 #endregion
 
diff --git a/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt b/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
index 85f6da6f74e..1cc4f59b5e8 100644
--- a/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt
@@ -884,6 +884,8 @@ Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.get -> bool
 Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.set -> void
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.get -> string
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.set -> void
+Microsoft.Build.Tasks.DownloadFile.Timeout.get -> int
+Microsoft.Build.Tasks.DownloadFile.Timeout.set -> void
 Microsoft.Build.Tasks.Error
 Microsoft.Build.Tasks.Error.Code.get -> string
 Microsoft.Build.Tasks.Error.Code.set -> void
@@ -1956,6 +1958,8 @@ Microsoft.Build.Tasks.SGen.UseProxyTypes.set -> void
 Microsoft.Build.Tasks.SignFile
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.get -> string
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.set -> void
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
 Microsoft.Build.Tasks.SignFile.SignFile() -> void
 Microsoft.Build.Tasks.SignFile.SigningTarget.get -> Microsoft.Build.Framework.ITaskItem
 Microsoft.Build.Tasks.SignFile.SigningTarget.set -> void
@@ -2313,8 +2317,10 @@ override Microsoft.Build.Tasks.FindInvalidProjectReferences.Execute() -> bool
 override Microsoft.Build.Tasks.FindUnderPath.Execute() -> bool
 override Microsoft.Build.Tasks.FormatUrl.Execute() -> bool
 override Microsoft.Build.Tasks.FormatVersion.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateApplicationManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBindingRedirects.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBootstrapper.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateDeploymentManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateLauncher.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateManifestBase.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateResource.Execute() -> bool
@@ -2409,6 +2415,7 @@ static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.Sign
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier) -> void
+static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.XmlToPermissionSet(System.Xml.XmlElement element) -> System.Security.PermissionSet
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 092772496e2..8f3cbf42ee6 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -783,6 +783,8 @@ Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.get -> bool
 Microsoft.Build.Tasks.DownloadFile.SkipUnchangedFiles.set -> void
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.get -> string
 Microsoft.Build.Tasks.DownloadFile.SourceUrl.set -> void
+Microsoft.Build.Tasks.DownloadFile.Timeout.get -> int
+Microsoft.Build.Tasks.DownloadFile.Timeout.set -> void
 Microsoft.Build.Tasks.Error
 Microsoft.Build.Tasks.Error.Code.get -> string
 Microsoft.Build.Tasks.Error.Code.set -> void
@@ -1642,6 +1644,8 @@ Microsoft.Build.Tasks.SGen.UseProxyTypes.set -> void
 Microsoft.Build.Tasks.SignFile
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.get -> string
 Microsoft.Build.Tasks.SignFile.CertificateThumbprint.set -> void
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
+Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
 Microsoft.Build.Tasks.SignFile.SignFile() -> void
 Microsoft.Build.Tasks.SignFile.SigningTarget.get -> Microsoft.Build.Framework.ITaskItem
 Microsoft.Build.Tasks.SignFile.SigningTarget.set -> void
@@ -1848,7 +1852,9 @@ override Microsoft.Build.Tasks.FindInvalidProjectReferences.Execute() -> bool
 override Microsoft.Build.Tasks.FindUnderPath.Execute() -> bool
 override Microsoft.Build.Tasks.FormatUrl.Execute() -> bool
 override Microsoft.Build.Tasks.FormatVersion.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateApplicationManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateBindingRedirects.Execute() -> bool
+override Microsoft.Build.Tasks.GenerateDeploymentManifest.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateLauncher.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateManifestBase.Execute() -> bool
 override Microsoft.Build.Tasks.GenerateResource.Execute() -> bool
@@ -1914,6 +1920,7 @@ static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.Sign
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier) -> void
+static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(System.Security.Cryptography.X509Certificates.X509Certificate2 cert, System.Uri timestampUrl, string path) -> void
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription
 System.Deployment.Internal.CodeSigning.RSAPKCS1SHA256SignatureDescription.RSAPKCS1SHA256SignatureDescription() -> void
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index afa2a75cb88..c39a2eb609b 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -187,7 +187,7 @@ public sealed partial class ResolveComReference : Microsoft.Build.Tasks.TaskExte
         /// <returns></returns>
         public override bool Execute()
         {
-            Log.LogErrorFromResources("TaskRequiresFrameworkFailure", nameof(ResolveComReference));
+            Log.LogErrorWithCodeFromResources("TaskRequiresFrameworkFailure", nameof(ResolveComReference));
             return false;
         }
 
@@ -432,7 +432,7 @@ public override bool Execute()
                     }
                 }
 
-                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GetGacPath());
+                SetCopyLocalToFalseOnGacOrNoPIAAssemblies(resolvedReferenceList, GlobalAssemblyCache.GacPath);
 
                 ResolvedModules = moduleList.ToArray();
                 ResolvedFiles = resolvedReferenceList.ToArray();
diff --git a/src/Tasks/ResourceHandling/MSBuildResXReader.cs b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
index 86dc5d50311..91786f0f529 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXReader.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
@@ -25,7 +25,7 @@ public static IReadOnlyList<IResource> ReadResources(Stream s, string filename,
             {
                 using (var xmlReader = new XmlTextReader(s))
                 {
-                    xmlReader.WhitespaceHandling = WhitespaceHandling.None;
+                    xmlReader.WhitespaceHandling = WhitespaceHandling.All;
 
                     XDocument doc = XDocument.Load(xmlReader, LoadOptions.PreserveWhitespace);
                     foreach (XElement elem in doc.Element("root").Elements())
@@ -105,6 +105,7 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,
         {
             string name = elem.Attribute("name").Value;
             string value;
+            bool preserve = elem.Attribute(XName.Get("space", "http://www.w3.org/XML/1998/namespace"))?.Value == "preserve";
 
             XElement valueElement = elem.Element("value");
             if (valueElement is null)
@@ -119,6 +120,10 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,
             else
             {
                 value = valueElement.Value;
+                if (!preserve && string.IsNullOrWhiteSpace(value))
+                {
+                    value = string.Empty;
+                }
             }
 
             string typename = elem.Attribute("type")?.Value;
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 07b5097294d..d0dd9311e15 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -571,6 +571,10 @@
     <value>MSB3094: "{2}" refers to {0} item(s), and "{3}" refers to {1} item(s). They must have the same number of items.</value>
     <comment>{StrBegin="MSB3094: "}</comment>
   </data>
+  <data name="General.TaskRequiresWindows">
+    <value>MSB3096: Task "{0}" is only supported when building on Windows.</value>
+    <comment>{StrBegin="MSB3096: "}</comment>
+  </data>
   <!--
         The GenerateBindingRedirects message bucket is: MSB3831 - MSB3840
 
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index 6d8a68b4bb2..67a661cae66 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: V {0} už nějaký soubor existuje. Pokud se pokoušíte vytvořit předvypočítanou mezipaměť, ujistěte se, že sestavujete jeden projekt, který závisí na sestaveních, nikoli sestavení samotná. Pokud spouštíte úlohu ResolveAssemblyReference běžným způsobem, nenastavujte v úloze ResolveAssemblyReference parametr AssemblyInformationCacheOutputPath.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: Úloha {0} se podporuje pouze při sestavování v systému Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Odstraňování vlastností:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index 2b9789a8096..85c2e0e3410 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: Unter "{0}" ist bereits eine Datei vorhanden. Wenn Sie einen vorab berechneten Cache erstellen möchten, stellen Sie sicher, dass Sie ein einzelnes Projekt erstellen, das von Ihren Assemblys abhängt, statt Ihre Assemblys selbst zu erstellen. Wenn Sie die Aufgabe "ResolveAssemblyReference" normal ausführen, legen Sie den Parameter "AssemblyInformationCacheOutputPath" der Aufgabe "ResolveAssemblyReference" nicht fest.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: Die Aufgabe „{0}“ wird nur beim Erstellen unter Windows unterstützt.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Eigenschaften werden entfernt:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 614f167e8d3..6edbd27b1be 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: Ya hay un archivo en "{0}". Si está intentando crear una memoria caché precalculada, asegúrese de estar compilando un solo proyecto que dependa de sus ensamblados, en lugar de compilar los ensamblados en sí. Si está ejecutando la tarea ResolveAssemblyReference normalmente, no establezca el parámetro "AssemblyInformationCacheOutputPath" de la tarea ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: La tarea “{0}” solo se admite cuando se compila en Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Quitando propiedades:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index fd0b120daf9..30e7409e31e 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: il existe déjà un fichier sur "{0}". Si vous essayez de créer un cache précalculé, vérifiez que vous générez un seul projet qui dépend de vos assemblys au lieu de générer les assemblys eux-mêmes. Si vous exécutez la tâche ResolveAssemblyReference normalement, ne définissez pas le paramètre "AssemblyInformationCacheOutputPath" de la tâche ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: La tâche "{0}" n’est prise en charge que lors de la génération sur Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Suppression des propriétés :</target>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index a1eecfebd2f..545b88ce4d0 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: alla posizione "{0}" esiste già un file. Se si prova a creare una cache precalcolata, assicurarsi di compilare un singolo progetto che dipende dagli assembly invece di compilare gli assembly stessi. Se si esegue normalmente l'attività ResolveAssemblyReference, non impostare il parametro "AssemblyInformationCacheOutputPath" dell'attività ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: l'attività "{0}" è supportata solo durante la compilazione in Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Rimozione proprietà:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index f8741ff1fec..e68abe95648 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" には既にファイルが存在します。事前計算済みキャッシュを作成しようとしている場合は、アセンブリ自体をビルドするのではなく、アセンブリに依存する単一のプロジェクトをビルドしてください。ResolveAssemblyReference タスクを正常に実行している場合は、ResolveAssemblyReference タスクの "AssemblyInformationCacheOutputPath" パラメーターを設定しないでください。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: タスク "{0}" は、Windows 上でビルドする場合にのみサポートされます。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">プロパティの削除:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index c8f09c65f9f..bc955da3f74 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}"에 파일이 이미 있습니다. 사전 계산 캐시를 만들려면 어셈블리 자체를 빌드하는 대신 어셈블리에 종속되는 단일 프로젝트를 빌드하고 있는지 확인하세요. ResolveAssemblyReference 작업을 정상적으로 실행 중인 경우 ResolveAssemblyReference 작업의 "AssemblyInformationCacheOutputPath" 매개 변수를 설정하지 마세요.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 작업 "{0}"은(는) Windows에서 빌드할 때만 지원됩니다.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">속성 제거:</target>
@@ -1141,7 +1146,7 @@
       </trans-unit>
       <trans-unit id="GenerateResource.InvalidHexEscapeValue">
         <source>MSB3569: Invalid hex value after '\u' in resource "{0}", value '{1}'.</source>
-        <target state="translated">MSB3569: "{0}" 리소스에서 '\u' 뒤의 16진수가 잘못되었습니다. '{1}' 값</target>
+        <target state="translated">MSB3569: 리소스 "{0}", 값 '{1}'에서 '\u' 뒤의 16진수 값이 잘못되었습니다.</target>
         <note>{StrBegin="MSB3569: "}</note>
       </trans-unit>
       <trans-unit id="GenerateResource.CannotWriteSTRFile">
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 01c5946d62b..4da67b53fb2 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: W lokalizacji „{0}” już istnieje plik. Jeśli próbujesz utworzyć wstępnie obliczoną pamięć podręczną, upewnij się, że kompilujesz pojedynczy projekt zależący od zestawów, a nie same zestawy. Jeśli uruchamiasz zadanie ResolveAssemblyReference w normalny sposób, nie ustawiaj parametru „AssemblyInformationCacheOutputPath” zadania ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: zadanie „{0}“ jest obsługiwane tylko podczas kompilowania w systemie Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Usuwanie właściwości:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index f2a99ffe115..a8b323131f8 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: já existe um arquivo em "{0}". Se você está tentando criar um cache pré-computado, crie um projeto que dependa dos assemblies em vez de criar seus assemblies sozinhos. Se você está executando a tarefa ResolveAssemblyReference normalmente, não defina o parâmetro "AssemblyInformationCacheOutputPath" da tarefa ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: A tarefa "{0}" só é suportada quando compilada no Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Removendo Propriedades:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index c8a5ab425e4..a4082b93a2b 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: в "{0}" уже существует файл. Если вы пытаетесь создать предварительно вычисляемый кэш, убедитесь, что выполняется сборка отдельного проекта, который зависит от ваших сборок, а не создание самих сборок. Если вы выполняете задачу ResolveAssemblyReference обычным образом, не устанавливайте параметр "AssemblyInformationCacheOutputPath" задачи ResolveAssemblyReference.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: задача "{0}" поддерживается только при сборке в Windows.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Удаление свойств:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 64ba0d8599b..4e6febbd0f6 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" konumunda zaten bir dosya var. Önceden hesaplanan bir önbellek oluşturmayı deniyorsanız bütünleştirilmiş kodlarınızı derlemek yerine bütünleştirilmiş kodlarınızı temel alan tek bir proje derlediğinizden emin olun. ResolveAssemblyReference görevini normal bir şekilde çalıştırıyorsanız ResolveAssemblyReference görevinin "AssemblyInformationCacheOutputPath" parametresini ayarlamayın.</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: "{0}" görevi yalnızca Windows üzerinde derlendiğinde desteklenir.</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">Özellikler kaldırılıyor:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index 4e9da2c3e45..f979f200cfb 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: “{0}”处已存在文件。若要尝试创建预计算缓存，请务必生成单个依赖于程序集的项目，而不是生成程序集本身。如果在正常运行 ResolveAssemblyReference 任务，请不要设置 ResolveAssemblyReference 任务的 "AssemblyInformationCacheOutputPath" 参数。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 仅在 Windows 上生成时才支持任务 "{0}"。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">移除属性:</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index 182b61ffc4c..659ab09c3bf 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -514,6 +514,11 @@
         <target state="translated">MSB3667: "{0}" 上已有檔案。若要嘗試建立預先計算的快取，請務必建立一個需要使用組件的專案，而非建立組件本身。若是正常執行 ResolveAssemblyReference 工作，請勿為 ResolveAssemblyReference 工作設定 "AssemblyInformationCacheOutputPath" 參數。</target>
         <note>{StrBegin="MSB3667: "}</note>
       </trans-unit>
+      <trans-unit id="General.TaskRequiresWindows">
+        <source>MSB3096: Task "{0}" is only supported when building on Windows.</source>
+        <target state="translated">MSB3096: 只有在 Windows 上建置時，才支援工作 "{0}"。</target>
+        <note>{StrBegin="MSB3096: "}</note>
+      </trans-unit>
       <trans-unit id="General.UndefineProperties">
         <source>Removing Properties:</source>
         <target state="translated">正在移除屬性:</target>
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 9fa199f380d..004d2f8067d 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -102,6 +102,11 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory
         /// </summary>
         private TaskLoggingHelper _log;
 
+        /// <summary>
+        /// Stores functions that were added to the current app domain. Should be removed once we're finished.
+        /// </summary>
+        private ResolveEventHandler handlerAddedToAppDomain = null;
+
         /// <summary>
         /// Stores the parameters parsed in the &lt;UsingTask /&gt;.
         /// </summary>
@@ -116,13 +121,17 @@ public sealed class RoslynCodeTaskFactory : ITaskFactory
         public string FactoryName => "Roslyn Code Task Factory";
 
         /// <summary>
-        /// Gets the <see cref="T:System.Type" /> of the compiled task.
+        /// Gets the <see cref="Type"/> of the compiled task.
         /// </summary>
         public Type TaskType { get; private set; }
 
         /// <inheritdoc cref="ITaskFactory.CleanupTask(ITask)"/>
         public void CleanupTask(ITask task)
         {
+            if (handlerAddedToAppDomain is not null)
+            {
+                AppDomain.CurrentDomain.AssemblyResolve -= handlerAddedToAppDomain;
+            }
         }
 
         /// <inheritdoc cref="ITaskFactory.CreateTask(IBuildEngine)"/>
@@ -515,7 +524,7 @@ internal static bool TryLoadTaskBody(TaskLoggingHelper log, string taskName, str
         /// Perhaps in the future this could be more powerful by using NuGet to resolve assemblies but we think
         /// that is too complicated for a simple in-line task.  If users have more complex requirements, they
         /// can compile their own task library.</remarks>
-        internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTaskFactoryTaskInfo taskInfo, out ITaskItem[] items)
+        internal bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTaskFactoryTaskInfo taskInfo, out ITaskItem[] items)
         {
             // Store the list of resolved assemblies because a user can specify a short name or a full path
             ISet<string> resolvedAssemblyReferences = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
@@ -532,6 +541,8 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
                 references = references.Union(DefaultReferences[taskInfo.CodeLanguage]);
             }
 
+            List<string> directoriesToAddToAppDomain = new();
+
             // Loop through the user specified references as well as the default references
             foreach (string reference in references)
             {
@@ -539,7 +550,9 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
                 if (FileSystems.Default.FileExists(reference))
                 {
                     // The path could be relative like ..\Assembly.dll so we need to get the full path
-                    resolvedAssemblyReferences.Add(Path.GetFullPath(reference));
+                    string fullPath = Path.GetFullPath(reference);
+                    directoriesToAddToAppDomain.Add(Path.GetDirectoryName(fullPath));
+                    resolvedAssemblyReferences.Add(fullPath);
                     continue;
                 }
 
@@ -572,7 +585,34 @@ internal static bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynC
             // Transform the list of resolved assemblies to TaskItems if they were all resolved
             items = hasInvalidReference ? null : resolvedAssemblyReferences.Select(i => (ITaskItem)new TaskItem(i)).ToArray();
 
+            handlerAddedToAppDomain = (_, eventArgs) => TryLoadAssembly(directoriesToAddToAppDomain, new AssemblyName(eventArgs.Name));
+            AppDomain.CurrentDomain.AssemblyResolve += handlerAddedToAppDomain;
+
             return !hasInvalidReference;
+
+            static Assembly TryLoadAssembly(List<string> directories, AssemblyName name)
+            {
+                foreach (string directory in directories)
+                {
+                    string path;
+                    if (!string.IsNullOrEmpty(name.CultureName))
+                    {
+                        path = Path.Combine(directory, name.CultureName, name.Name + ".dll");
+                        if (File.Exists(path))
+                        {
+                            return Assembly.LoadFrom(path);
+                        }
+                    }
+
+                    path = Path.Combine(directory, name.Name + ".dll");
+                    if (File.Exists(path))
+                    {
+                        return Assembly.LoadFrom(path);
+                    }
+                }
+
+                return null;
+            }
         }
 
         private static CodeMemberProperty CreateProperty(CodeTypeDeclaration codeTypeDeclaration, string name, Type type, object defaultValue = null)
diff --git a/src/Tasks/SignFile.cs b/src/Tasks/SignFile.cs
index e5d83dc48bc..379fe059587 100644
--- a/src/Tasks/SignFile.cs
+++ b/src/Tasks/SignFile.cs
@@ -4,6 +4,7 @@
 using System;
 using System.ComponentModel;
 using System.IO;
+using System.Runtime.Versioning;
 using System.Security.Cryptography;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -19,6 +20,7 @@ namespace Microsoft.Build.Tasks
     /// provided and optionally uses a timestamp if a URL is provided.
     /// It can sign ClickOnce manifests as well as exe's.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public sealed class SignFile : Task
     {
         public SignFile()
@@ -37,14 +39,24 @@ public SignFile()
         public String TargetFrameworkVersion { get; set; }
 
         public string TimestampUrl { get; set; }
+        public bool DisallowMansignTimestampFallback { get; set; } = false;
 
         public override bool Execute()
         {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(SignFile));
+                return false;
+            }
             try
             {
-                SecurityUtilities.SignFile(CertificateThumbprint,
-                TimestampUrl == null ? null : new Uri(TimestampUrl),
-                SigningTarget.ItemSpec, TargetFrameworkVersion, TargetFrameworkIdentifier);
+                SecurityUtilities.SignFile(
+                    CertificateThumbprint,
+                    TimestampUrl == null ? null : new Uri(TimestampUrl),
+                    SigningTarget.ItemSpec, 
+                    TargetFrameworkVersion, 
+                    TargetFrameworkIdentifier,
+                    DisallowMansignTimestampFallback);
                 return true;
             }
             catch (ArgumentException ex) when (ex.ParamName.Equals("certThumbprint"))
diff --git a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
index 9221c73a0e0..438cb91ff75 100644
--- a/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
+++ b/src/UnitTests.Shared/Microsoft.Build.UnitTests.Shared.csproj
@@ -25,10 +25,6 @@
     <Reference Include="System.Core" />
     <Reference Include="System.Xml" />
   </ItemGroup>
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
-    <PackageReference Include="Microsoft.Win32.Registry" />
-  </ItemGroup>
   <ItemGroup>
     <Compile Include="..\Shared\BuildEnvironmentHelper.cs">
       <Link>BuildEnvironmentHelper.cs</Link>
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 1a11cedfea0..7911ea669d6 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -31,7 +31,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             var pathToExecutable = pathToMsBuildExe;
 #else
             var pathToExecutable = ResolveRuntimeExecutableName();
-            msbuildParameters = "\"" + pathToMsBuildExe + "\"" + " " + msbuildParameters;
+            msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
             return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
diff --git a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
index 01cfda5a33f..a9b45f36e8b 100644
--- a/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
+++ b/src/Utilities.UnitTests/CommandLineBuilder_Tests.cs
@@ -2,7 +2,9 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Globalization;
 using System.IO;
+using System.Threading;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Shouldly;
@@ -54,6 +56,24 @@ public void AppendSwitchWithSpacesInParameter()
             c.ShouldBe("/animal:\"dog and pony\"");
         }
 
+        [Fact]
+        public void AppendSwitchWithIShouldNotNeedQuotingInTurkishLocale()
+        {
+            var currentCulture = Thread.CurrentThread.CurrentCulture;
+            try
+            {
+                Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR"); // Turkish
+
+                CommandLineBuilder c = new CommandLineBuilder();
+                c.AppendSwitchIfNotNull("/i:", "iI");
+                c.ShouldBe("/i:iI");
+            }
+            finally
+            {
+                Thread.CurrentThread.CurrentCulture = currentCulture;
+            }
+        }
+
         /// <summary>
         /// Test for AppendSwitchIfNotNull for the ITaskItem version
         /// </summary>
diff --git a/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs b/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
index beee420663d..ddf605b188b 100644
--- a/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
+++ b/src/Utilities/AssemblyFolders/AssemblyFoldersExInfo.cs
@@ -3,9 +3,9 @@
 //-----------------------------------------------------------------------
 // Contains information about entries in the AssemblyFoldersEx registry keys.
 //-----------------------------------------------------------------------
-#if FEATURE_WIN32_REGISTRY
 
 using System;
+using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
 
@@ -16,6 +16,7 @@ namespace Microsoft.Build.Utilities
     /// <summary>
     /// Contains information about entries in the AssemblyFoldersEx registry keys.
     /// </summary>
+    [SupportedOSPlatform("windows")]
     public class AssemblyFoldersExInfo
     {
         /// <summary>
@@ -60,4 +61,3 @@ public AssemblyFoldersExInfo(RegistryHive hive, RegistryView view, string regist
         public Version TargetFrameworkVersion { get; }
     }
 }
-#endif
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index 4f4cb1ab3bd..6baa7da046b 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -156,13 +156,13 @@ public CommandLineBuilder(bool quoteHyphensOnCommandLine, bool useNewLineSeparat
         /// Use a private property so that we can lazy initialize the regex
         /// </summary>
         private Regex DefinitelyNeedQuotes => _definitelyNeedQuotes
-            ?? (_definitelyNeedQuotes = new Regex(_quoteHyphens ? s_definitelyNeedQuotesRegexWithHyphen : s_definitelyNeedQuotesRegexNoHyphen, RegexOptions.None));
+            ?? (_definitelyNeedQuotes = new Regex(_quoteHyphens ? s_definitelyNeedQuotesRegexWithHyphen : s_definitelyNeedQuotesRegexNoHyphen, RegexOptions.CultureInvariant));
 
         /// <summary>
         /// Use a private getter property to we can lazy initialize the regex
         /// </summary>
         private Regex AllowedUnquoted => _allowedUnquoted
-            ?? (_allowedUnquoted = new Regex(_quoteHyphens ? s_allowedUnquotedRegexNoHyphen : s_allowedUnquotedRegexWithHyphen, RegexOptions.IgnoreCase));
+            ?? (_allowedUnquoted = new Regex(_quoteHyphens ? s_allowedUnquotedRegexNoHyphen : s_allowedUnquotedRegexWithHyphen, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant));
 
         /// <summary>
         /// Checks the given switch parameter to see if it must/can be quoted.
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index 5e5bcafb605..b5e520f25a3 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -35,11 +35,11 @@
     <PackageReference Include="System.Text.Encoding.CodePages" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
-    <!-- Need Win32 API on .NET Core to ping registry to determine long path support -->
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
+    <!-- Need Win32 API on .NET Standard to ping registry for some methods in ToolLocationHelper -->
     <PackageReference Include="Microsoft.Win32.Registry" />
   </ItemGroup>
-
+  
   <ItemGroup Label="Shared Code">
     <Compile Include="..\Shared\AssemblyFolders\AssemblyFoldersEx.cs">
       <Link>Shared\AssemblyFolders\AssemblyFoldersEx.cs</Link>
diff --git a/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt b/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
index e85d5954bfd..0c8ceeed580 100644
--- a/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Utilities/PublicAPI/net/PublicAPI.Shipped.txt
@@ -136,9 +136,11 @@ Microsoft.Build.Utilities.DotNetFrameworkArchitecture.Current = 0 -> Microsoft.B
 Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Managed32Bit = 3 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Managed64Bit = 4 -> Microsoft.Build.Utilities.ExecutableType
+Microsoft.Build.Utilities.ExecutableType.ManagedARM64 = 7 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.ManagedIL = 2 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Native32Bit = 0 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.Native64Bit = 1 -> Microsoft.Build.Utilities.ExecutableType
+Microsoft.Build.Utilities.ExecutableType.NativeARM64 = 6 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.ExecutableType.SameAsCurrentProcess = 5 -> Microsoft.Build.Utilities.ExecutableType
 Microsoft.Build.Utilities.FileTracker
 Microsoft.Build.Utilities.FlatTrackingData
diff --git a/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index e69de29bb2d..1e0e97b9131 100644
--- a/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Utilities/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -0,0 +1,8 @@
+Microsoft.Build.Utilities.AssemblyFoldersExInfo
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.AssemblyFoldersExInfo(Microsoft.Win32.RegistryHive hive, Microsoft.Win32.RegistryView view, string registryKey, string directoryPath, System.Version targetFrameworkVersion) -> void
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.DirectoryPath.get -> string
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.Hive.get -> Microsoft.Win32.RegistryHive
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.Key.get -> string
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.TargetFrameworkVersion.get -> System.Version
+Microsoft.Build.Utilities.AssemblyFoldersExInfo.View.get -> Microsoft.Win32.RegistryView
+static Microsoft.Build.Utilities.ToolLocationHelper.GetAssemblyFoldersExInfo(string registryRoot, string targetFrameworkVersion, string registryKeySuffix, string osVersion, string platform, System.Reflection.ProcessorArchitecture targetProcessorArchitecture) -> System.Collections.Generic.IList<Microsoft.Build.Utilities.AssemblyFoldersExInfo>
\ No newline at end of file
diff --git a/src/Utilities/README.md b/src/Utilities/README.md
index 16961c90367..a85d56e11cc 100644
--- a/src/Utilities/README.md
+++ b/src/Utilities/README.md
@@ -5,3 +5,8 @@ This package contains `Microsoft.Build.Utilities.Core.dll`, which defines helper
 * [`Task`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.task), a base class for custom tasks,
 * [`ToolTask`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.tooltask), a base class for tasks that run a command-line tool, and
 * [`Logger`](https://docs.microsoft.com/dotnet/api/microsoft.build.utilities.logger), a base class for custom logging functionality.
+
+### netstandard2.0 target
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net6.0` or `net472`. Please use the `net6.0`-targeted assemblies for .NET Core 6+ scenarios.
+
+For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Utilities/Resources/Strings.resx b/src/Utilities/Resources/Strings.resx
index 844caf29c0f..452897f1deb 100644
--- a/src/Utilities/Resources/Strings.resx
+++ b/src/Utilities/Resources/Strings.resx
@@ -287,11 +287,14 @@
   <data name="MuxLogger_BuildFinishedSuccess">
     <value xml:space="preserve">Build succeeded.</value>
   </data>
-
+  <data name="DebugPathTooLong" Visibility="Public">
+    <value>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</value>
+    <comment>{StrBegin="MSB6012: "}</comment>
+  </data>
   <!--
         The Utilities message bucket is: MSB6001 - MSB6200
 
-        Next message code should be MSB6012
+        Next message code should be MSB6013
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Utilities/Resources/xlf/Strings.cs.xlf b/src/Utilities/Resources/xlf/Strings.cs.xlf
index 360283f57db..a8bfb9f8d72 100644
--- a/src/Utilities/Resources/xlf/Strings.cs.xlf
+++ b/src/Utilities/Resources/xlf/Strings.cs.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="cs" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Cesta „{0}“ použitá pro protokoly ladění je příliš dlouhá. Nastavte ji na kratší hodnotu pomocí proměnné prostředí MSBUILDDEBUGPATH nebo změňte konfigurace vašeho systému, aby povolovala dlouhé cesty.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Přepínač příkazového řádku pro {0} je neplatný. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.de.xlf b/src/Utilities/Resources/xlf/Strings.de.xlf
index 41f19b468c6..df6e3dfda00 100644
--- a/src/Utilities/Resources/xlf/Strings.de.xlf
+++ b/src/Utilities/Resources/xlf/Strings.de.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="de" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Der für Debugprotokolle verwendete Pfad "{0}" ist zu lang. Legen Sie den Wert mithilfe der Umgebungsvariablen MSBUILDDEBUGPATH auf einen kürzeren Wert fest, oder ändern Sie die Systemkonfiguration so, dass lange Pfade zulässig sind.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Ungültige Befehlszeilenoption für "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.es.xlf b/src/Utilities/Resources/xlf/Strings.es.xlf
index 336a4bf92f9..71a0cc32f88 100644
--- a/src/Utilities/Resources/xlf/Strings.es.xlf
+++ b/src/Utilities/Resources/xlf/Strings.es.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="es" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: La ruta de acceso "{0}" usada para los registros de depuración es demasiado larga. Establézcalo en un valor más corto con la variable de entorno MSBUILDDEBUGPATH o cambie la configuración del sistema para permitir rutas de acceso largas.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Modificador de línea de comandos no válido para "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.fr.xlf b/src/Utilities/Resources/xlf/Strings.fr.xlf
index 28e1d87d3d2..2924d87cb1a 100644
--- a/src/Utilities/Resources/xlf/Strings.fr.xlf
+++ b/src/Utilities/Resources/xlf/Strings.fr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="fr" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Le chemin d’accès "{0}" utilisé pour les journaux de débogage est trop long. Définissez-la sur une valeur plus courte à l’aide de la variable d’environnement MSBUILDDEBUGPATH ou modifiez votre configuration système pour autoriser les chemins longs.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Commutateur de ligne de commande non valide pour "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.it.xlf b/src/Utilities/Resources/xlf/Strings.it.xlf
index e9a5e77d267..ea4e723c61a 100644
--- a/src/Utilities/Resources/xlf/Strings.it.xlf
+++ b/src/Utilities/Resources/xlf/Strings.it.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="it" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: il percorso "{0}" usato per i log di debug è troppo lungo. Impostarlo su un valore più breve usando la variabile dell'ambiente MSBUILDDEBUGPATH o modificare la configurazione del sistema per consentire percorsi lunghi.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: opzione della riga di comando non valida per "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ja.xlf b/src/Utilities/Resources/xlf/Strings.ja.xlf
index 2a40fcbc8a8..77b2163cf7a 100644
--- a/src/Utilities/Resources/xlf/Strings.ja.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ja.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ja" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: デバッグ ログに使用されるパス "{0}" が長すぎます。MSBUILDDEBUGPATH 環境変数を使用して短い値に設定するか、長いパスを許可するようにシステム構成を変更してください。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" のコマンド ライン スイッチが無効です。{1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ko.xlf b/src/Utilities/Resources/xlf/Strings.ko.xlf
index bf7f4d789a2..937d12bd39a 100644
--- a/src/Utilities/Resources/xlf/Strings.ko.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ko.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ko" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 디버그 로그에 사용된 경로 "{0}"이(가) 너무 깁니다. MSBUILDDEBUGPATH 환경 변수를 사용하여 값을 더 짧게 설정하거나 긴 경로를 허용하도록 시스템 구성을 변경합니다.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}"의 명령줄 스위치가 잘못되었습니다. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.pl.xlf b/src/Utilities/Resources/xlf/Strings.pl.xlf
index 2189f7d3a20..9cb15be1f03 100644
--- a/src/Utilities/Resources/xlf/Strings.pl.xlf
+++ b/src/Utilities/Resources/xlf/Strings.pl.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pl" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Ścieżka „{0}” używana w dziennikach debugowania jest za długa. Ustaw ją na krótszą wartość przy użyciu zmiennej środowiskowej MSBUILDEBUGPATH lub zmień konfigurację systemu, aby zezwolić na długie ścieżki.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Nieprawidłowy przełącznik wiersza polecenia dla „{0}”. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.pt-BR.xlf b/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
index b54d2b7acf6..19e23f9ecdd 100644
--- a/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Utilities/Resources/xlf/Strings.pt-BR.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pt-BR" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: O caminho "{0}" usado para logs de depuração é muito longo. Defina-o para um valor mais curto usando a variável de ambiente MSBUILDDEBUGPATH ou altere a configuração do sistema para permitir caminhos longos.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Opção de linha de comando inválida para "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.ru.xlf b/src/Utilities/Resources/xlf/Strings.ru.xlf
index 368b83f2540..c11d3a50afd 100644
--- a/src/Utilities/Resources/xlf/Strings.ru.xlf
+++ b/src/Utilities/Resources/xlf/Strings.ru.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ru" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: слишком длинный путь "{0}" для журналов отладки. Установите более короткое значение, используя переменную среду MSBUILDDEBUGPATH, или измените конфигурацию системы, чтобы разрешить длинные пути.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: Недопустимый переключатель командной строки для "{0}". {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.tr.xlf b/src/Utilities/Resources/xlf/Strings.tr.xlf
index 44ffff6ac3e..faf2fbb9512 100644
--- a/src/Utilities/Resources/xlf/Strings.tr.xlf
+++ b/src/Utilities/Resources/xlf/Strings.tr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="tr" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: Hata ayıklama günlükleri için kullanılan "{0}" yolu çok uzun. MSBUILDDEBUGPATH ortam değişkenini kullanarak yolu daha kısa bir değere ayarlayın veya sistem yapılandırmanızı uzun yollara izin verecek şekilde değiştirin.</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" için geçersiz komut satırı anahtarı. {1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf b/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
index b9816891b01..65e9de502ba 100644
--- a/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Utilities/Resources/xlf/Strings.zh-Hans.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hans" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 用于调试日志的路径"{0}"太长。使用 MSBUILDDEBUGPATH 环境变量将其设置为较短值，或更改系统配置以允许长路径。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: “{0}”的命令行开关无效。{1}</target>
diff --git a/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf b/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
index 3feb3149cf9..6d773c29ed9 100644
--- a/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Utilities/Resources/xlf/Strings.zh-Hant.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hant" original="../Strings.resx">
     <body>
+      <trans-unit id="DebugPathTooLong">
+        <source>MSB6012: The path "{0}" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</source>
+        <target state="translated">MSB6012: 用於偵錯記錄檔 "{0}" 的路徑太長。使用 MSBUILDDEBUGPATH 環境變數將它設定為較短的值，或變更您的系統設定以允許長路徑。</target>
+        <note>{StrBegin="MSB6012: "}</note>
+      </trans-unit>
       <trans-unit id="General.InvalidToolSwitch">
         <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
         <target state="translated">MSB6001: "{0}" 的命令列參數無效。{1}</target>
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index f4daea8da3a..baa7385f829 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -10,15 +10,15 @@
 using System.Xml;
 
 using Microsoft.Build.Shared;
-#if FEATURE_WIN32_REGISTRY
 using Microsoft.Win32;
-#endif
 
 using FrameworkNameVersioning = System.Runtime.Versioning.FrameworkName;
 using UtilitiesDotNetFrameworkArchitecture = Microsoft.Build.Utilities.DotNetFrameworkArchitecture;
 using SharedDotNetFrameworkArchitecture = Microsoft.Build.Shared.DotNetFrameworkArchitecture;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyFoldersFromConfig;
+using System.Runtime.Versioning;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
@@ -294,7 +294,6 @@ public static class ToolLocationHelper
         /// </summary>
         public static string CurrentToolsVersion => MSBuildConstants.CurrentToolsVersion;
 
-#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Get a sorted list of AssemblyFoldersExInfo which contain information about what directories the 3rd party assemblies are registered under for use during build and design time.
         ///
@@ -317,6 +316,7 @@ public static class ToolLocationHelper
         /// On a 32 bit machine we only add in the 32 bit hive.
         /// </param>
         /// <returns>List of AssemblyFoldersExInfo</returns>
+        [SupportedOSPlatform("windows")]
         public static IList<AssemblyFoldersExInfo> GetAssemblyFoldersExInfo(string registryRoot, string targetFrameworkVersion, string registryKeySuffix, string osVersion, string platform, System.Reflection.ProcessorArchitecture targetProcessorArchitecture)
         {
             ErrorUtilities.VerifyThrowArgumentLength(registryRoot, nameof(registryRoot));
@@ -329,7 +329,6 @@ public static IList<AssemblyFoldersExInfo> GetAssemblyFoldersExInfo(string regis
             assemblyFolders.AddRange(assemblyFoldersEx);
             return assemblyFolders;
         }
-#endif
 
         /// <summary>
         /// Get a sorted list of AssemblyFoldersFromConfigInfo which contain information about what directories the 3rd party assemblies are registered under for use during build and design time.
@@ -2470,12 +2469,10 @@ private static IEnumerable<TargetPlatformSDK> RetrieveTargetPlatformList(string[
                     var monikers = new Dictionary<TargetPlatformSDK, TargetPlatformSDK>();
                     GatherSDKListFromDirectory(sdkDiskRoots, monikers);
 
-#if FEATURE_REGISTRY_SDKS
-                    if (NativeMethodsShared.IsWindows)
+                    if (NativeMethodsShared.IsWindows && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                     {
                         GatherSDKListFromRegistry(registryRoot, monikers);
                     }
-#endif
 
                     collection = monikers.Keys.ToList();
                     s_cachedTargetPlatforms.Add(cachedTargetPlatformsKey, collection);
@@ -2672,10 +2669,10 @@ internal static void GatherSDKListFromDirectory(List<string> diskroots, Dictiona
             }
         }
 
-#if FEATURE_REGISTRY_SDKS
         /// <summary>
         /// Given a registry location enumerate the registry and find the installed SDKs.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         internal static void GatherSDKsFromRegistryImpl(Dictionary<TargetPlatformSDK, TargetPlatformSDK> platformMonikers, string registryKeyRoot, RegistryView registryView, RegistryHive registryHive, GetRegistrySubKeyNames getRegistrySubKeyNames, GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, OpenBaseKey openBaseKey, FileExists fileExists)
         {
             ErrorUtilities.VerifyThrowArgumentNull(platformMonikers, "PlatformMonikers");
@@ -2866,6 +2863,7 @@ internal static void GatherSDKsFromRegistryImpl(Dictionary<TargetPlatformSDK, Ta
         ///  Gather the list of SDKs installed on the machine from the registry.
         ///  Do not parallelize the getting of these entries, order is important, we want the first ones in to win.
         /// </summary>
+        [SupportedOSPlatform("windows")]
         private static void GatherSDKListFromRegistry(string registryRoot, Dictionary<TargetPlatformSDK, TargetPlatformSDK> platformMonikers)
         {
             // Setup some delegates because the methods we call use them during unit testing.
@@ -2891,7 +2889,6 @@ private static void GatherSDKListFromRegistry(string registryRoot, Dictionary<Ta
                 GatherSDKsFromRegistryImpl(platformMonikers, registryRoot, RegistryView.Default, RegistryHive.LocalMachine, getSubkeyNames, getRegistrySubKeyDefaultValue, openBaseKey, fileExists);
             }
         }
-#endif
 
         /// <summary>
         /// Get the disk locations to search for sdks under. This can be overridden by an environment variable
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index b3c775b9642..7eb6306f4a1 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -20,39 +20,49 @@
 namespace Microsoft.Build.Utilities
 {
     /// <summary>
-    /// Enumeration to express the type of executable being wrapped by Tracker.exe
+    /// Enumeration to express the type of executable being wrapped by Tracker.exe.
     /// </summary>
     public enum ExecutableType
     {
         /// <summary>
-        /// 32-bit native executable
+        /// 32-bit native executable.
         /// </summary>
         Native32Bit = 0,
 
         /// <summary>
-        /// 64-bit native executable 
+        /// 64-bit native executable.
         /// </summary>
         Native64Bit = 1,
 
         /// <summary>
-        /// A managed executable without a specified bitness
+        /// A managed executable without a specified bitness.
         /// </summary>
         ManagedIL = 2,
 
         /// <summary>
-        /// A managed executable specifically marked as 32-bit
+        /// A managed executable specifically marked as 32-bit.
         /// </summary>
         Managed32Bit = 3,
 
         /// <summary>
-        /// A managed executable specifically marked as 64-bit
+        /// A managed executable specifically marked as 64-bit.
         /// </summary>
         Managed64Bit = 4,
 
         /// <summary>
         /// Use the same bitness as the currently running executable. 
         /// </summary>
-        SameAsCurrentProcess = 5
+        SameAsCurrentProcess = 5,
+
+        /// <summary>
+        /// 64-bit native ARM64 executable.
+        /// </summary>
+        NativeARM64 = 6,
+
+        /// <summary>
+        /// 64-bit managed ARM64 executable.
+        /// </summary>
+        ManagedARM64 = 7
     }
 
     /// <summary>
diff --git a/src/Utilities/TrackedDependencies/TrackedDependencies.cs b/src/Utilities/TrackedDependencies/TrackedDependencies.cs
index de261ee538e..ccc53acd3ae 100644
--- a/src/Utilities/TrackedDependencies/TrackedDependencies.cs
+++ b/src/Utilities/TrackedDependencies/TrackedDependencies.cs
@@ -48,7 +48,7 @@ public static ITaskItem[] ExpandWildcards(ITaskItem[] expand)
                     }
                     else
                     {
-                        files = FileMatcher.Default.GetFiles(null, item.ItemSpec);
+                        files = FileMatcher.Default.GetFiles(null, item.ItemSpec).FileList;
                     }
 
                     foreach (string file in files)
