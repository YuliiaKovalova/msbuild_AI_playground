diff --git a/src/Build/BackEnd/Components/Caching/IConfigCache.cs b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
index 83b13f615fe..599a86d4c1d 100644
--- a/src/Build/BackEnd/Components/Caching/IConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
@@ -54,7 +54,7 @@ BuildRequestConfiguration this[int configId]
         BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata configMetadata);
 
         /// <summary>
-        /// Gets a matching configuration.  If no such configration exists, one is created and optionally loaded.
+        /// Gets a matching configuration. If no such configuration exists, one is created and optionally loaded.
         /// </summary>
         /// <param name="configMetadata">The configuration metadata to match.</param>
         /// <param name="callback">Callback to be invoked if the configuration does not exist.</param>
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index d9e2ef2ca3c..b37595cc580 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -67,7 +67,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
     {
         value = default;
 
-        if (config == null || !config.ContainsKey(key))
+        if (config == null || !config.TryGetValue(key, out string stringValue))
         {
             return false;
         }
@@ -76,7 +76,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
 
         if (typeof(T) == typeof(bool))
         {
-            if (bool.TryParse(config[key], out bool boolValue))
+            if (bool.TryParse(stringValue, out bool boolValue))
             {
                 value = (T)(object)boolValue;
                 isParsed = true;
@@ -84,8 +84,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string> co
         }
         else if(typeof(T).IsEnum)
         {
-            
-            isParsed = Enum.TryParse(config[key], true, out value);
+            isParsed = Enum.TryParse(stringValue, true, out value);
         }
 
         if (!isParsed)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index de862ad51ba..173a4cd2928 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -16,6 +16,7 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal sealed class BuildCheckCentralContext
 {
     private readonly ConfigurationProvider _configurationProvider;
+
     internal BuildCheckCentralContext(ConfigurationProvider configurationProvider)
     {
         _configurationProvider = configurationProvider;
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index a98d4e674ab..27cf2cc5a12 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -15,11 +15,10 @@
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
-
 // TODO: https://github.com/dotnet/msbuild/issues/9628
-internal class ConfigurationProvider
+internal sealed class ConfigurationProvider
 {
-    private EditorConfigParser s_editorConfigParser = new EditorConfigParser();
+    private readonly EditorConfigParser s_editorConfigParser = new EditorConfigParser();
 
     // TODO: This module should have a mechanism for removing unneeded configurations
     //  (disabled rules and analyzers that need to run in different node)
@@ -27,7 +26,7 @@ internal class ConfigurationProvider
 
     private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>();
 
-    private readonly List<string> _infrastructureConfigurationKeys = new List<string>() {
+    private readonly string[] _infrastructureConfigurationKeys = new string[] {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
         nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
         nameof(BuildAnalyzerConfiguration.Severity).ToLower()
@@ -53,12 +52,9 @@ public CustomConfigurationData GetCustomConfiguration(string projectFullPath, st
         }
 
         // remove the infrastructure owned key names
-        foreach(var infraConfigurationKey in _infrastructureConfigurationKeys)
+        foreach (var infraConfigurationKey in _infrastructureConfigurationKeys)
         {
-            if (configuration.ContainsKey(infraConfigurationKey))
-            {
-                configuration.Remove(infraConfigurationKey);
-            }
+            configuration.Remove(infraConfigurationKey);
         }
 
         var data = new CustomConfigurationData(ruleId, configuration);
@@ -82,10 +78,8 @@ internal void CheckCustomConfigurationDataValidity(string projectFullPath, strin
     {
         var configuration = GetCustomConfiguration(projectFullPath, ruleId);
 
-        if (_customConfigurationData.ContainsKey(ruleId))
+        if (_customConfigurationData.TryGetValue(ruleId, out var storedConfiguration))
         {
-            var storedConfiguration = _customConfigurationData[ruleId];
-
             if (!storedConfiguration.Equals(configuration))
             {
                 throw new BuildCheckConfigurationException("Custom configuration should be equal between projects");
@@ -138,7 +132,7 @@ private TConfig[] FillConfiguration<TConfig, TRule>(string projectFullPath, IRea
 
     internal Dictionary<string, string> GetConfiguration(string projectFullPath, string ruleId)
     {
-        var config = new Dictionary<string, string>();
+        Dictionary<string, string> config;
         try
         {
             config = s_editorConfigParser.Parse(projectFullPath);
@@ -148,14 +142,14 @@ internal Dictionary<string, string> GetConfiguration(string projectFullPath, str
             throw new BuildCheckConfigurationException($"Parsing editorConfig data failed", exception, BuildCheckConfigurationErrorScope.EditorConfigParser);
         }
 
-        var keyTosearch = $"build_check.{ruleId}.";
+        var keyToSearch = $"build_check.{ruleId}.";
         var dictionaryConfig = new Dictionary<string, string>();
 
         foreach (var kv in config)
         {
-            if (kv.Key.StartsWith(keyTosearch, StringComparison.OrdinalIgnoreCase))
+            if (kv.Key.StartsWith(keyToSearch, StringComparison.OrdinalIgnoreCase))
             {
-                var newKey = kv.Key.Replace(keyTosearch.ToLower(), "");
+                var newKey = kv.Key.Substring(keyToSearch.Length);
                 dictionaryConfig[newKey] = kv.Value;
             }
         }
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index 9470dc251e3..468aa459547 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -67,7 +67,7 @@ public override bool Equals(object? obj)
 
         var customConfigObj = (CustomConfigurationData) obj;
 
-        if(customConfigObj.RuleId != RuleId)
+        if (customConfigObj.RuleId != RuleId)
         {
             return false;
         }
@@ -88,7 +88,8 @@ public override bool Equals(object? obj)
                     return false;
                 }
             }
-        }else if (customConfigObj.ConfigurationData == null && ConfigurationData == null)
+        }
+        else if (customConfigObj.ConfigurationData == null && ConfigurationData == null)
         {
             return true;
         }
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md b/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
index a9ba94b53a2..14d1e75be59 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
@@ -6,7 +6,7 @@ To track the request on sharing the code: https://github.com/dotnet/roslyn/issue
 
 In current implementation the usage of the editorconfig is internal only and exposed via ConfigurationProvider functionality. 
 
-Configration divided into two categories: 
+Configuration divided into two categories: 
 - Infra related configuration. IsEnabled, Severity, EvaluationAnalysisScope
 - Custom configuration, any other config specified by user for this particular rule
 
@@ -24,7 +24,7 @@ For the file/folder structure:
 
 we want to fetch configuration for the project: /full/path/folder1/folder2/folder3/test.proj 
 
-Infra related and custom configration flows have one common logic: Fetching the configs from editorconfig
+Infra related and custom configuration flows have one common logic: Fetching the configs from editorconfig
 
 ```
 while(editorConfig is not root && parent directory exists){
@@ -41,12 +41,12 @@ Reverse the order and collect all matching section key-value pairs into new dict
 Remove non-msbuild-analyzer related key-values (keys not starting with msbuild_analyzer.RULEID)
 
 The implementation differs depending on category: 
- - Infra related config: Merges the configuration retrieved from configration module with default values (respecting the specified configs in editorconfig) 
+ - Infra related config: Merges the configuration retrieved from configuration module with default values (respecting the specified configs in editorconfig) 
  - Custom configuration: Remove all infra related keys from dictionary
 
 Two levels of cache introduced: 
 - When retrieving and parsing the editor config -> Parsed results are saved into dictionary: editorconfigPath = ParsedEditorConfig
-- When retrieving Infra related config: ruleId-projectPath = BuildconfigInstance
+- When retrieving Infra related config: ruleId-projectPath = BuildConfigInstance
 
 Usage examples (API)
 
