diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index fcadf214d9b..e25cc03cf81 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -903,9 +903,8 @@ public BuildParameters Clone()
 
         internal bool SkippedResultsDoNotCauseCacheMiss()
         {
-            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))
+            if (Traits.Instance.SkippedResultsDoNotCauseCacheMiss)
             {
-                // By default skipped results should not cause cache miss. See https://github.com/dotnet/msbuild/issues/11753
                 return true;
             }
 
diff --git a/src/Build/BackEnd/Components/Caching/IResultsCache.cs b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
index 34e55ea49bb..b1d70409322 100644
--- a/src/Build/BackEnd/Components/Caching/IResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IResultsCache.cs
@@ -51,7 +51,8 @@ internal interface IResultsCache : IBuildComponent, ITranslatable, IEnumerable<B
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method
-        /// will return "Satisfied". In most cases this should be true, since conditionally skipped target would not be executed a second time if the configuration remains unchanged.</param>
+        /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no
+        /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
         ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, bool skippedResultsDoNotCauseCacheMiss);
 
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index b9cd2b0d1c0..60b8a0dc12c 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -160,7 +160,8 @@ public BuildResult GetResultsForConfiguration(int configurationId)
         /// <param name="configDefaultTargets">The default targets for the request's configuration.</param>
         /// <param name="skippedResultsDoNotCauseCacheMiss">If false, a cached skipped target will cause this method to return "NotSatisfied".
         /// If true, then as long as there is a result in the cache (regardless of whether it was skipped or not), this method
-        /// will return "Satisfied". In most cases this should be true, since conditionally skipped target would not be executed a second time if the configuration remains unchanged.</param>
+        /// will return "Satisfied". In most cases this should be false, but it may be set to true in a situation where there is no
+        /// chance of re-execution (which is the usual response to missing / skipped targets), and the caller just needs the data.</param>
         /// <returns>A response indicating the results, if any, and the targets needing to be built, if any.</returns>
         public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> configInitialTargets, List<string> configDefaultTargets, bool skippedResultsDoNotCauseCacheMiss)
         {
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index e355761d9fd..a3b896a1a70 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -148,6 +148,8 @@ public Traits()
         public readonly bool TelemetryOptIn = IsEnvVarOneOrTrue("MSBUILD_TELEMETRY_OPTIN");
         public readonly bool SlnParsingWithSolutionPersistenceOptIn = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILD_PARSE_SLN_WITH_SOLUTIONPERSISTENCE"));
 
+        public readonly bool SkippedResultsDoNotCauseCacheMiss = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDSKIPPEDRESULTSDONOTCAUSECACHEMISS"));
+
         public static void UpdateFromEnvironment()
         {
             // Re-create Traits instance to update values in Traits according to current environment.
