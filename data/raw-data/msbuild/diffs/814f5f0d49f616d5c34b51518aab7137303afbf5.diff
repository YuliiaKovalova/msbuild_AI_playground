diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index a842843a021..791ec22459b 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -2279,14 +2279,12 @@ private static int ResolveAssemblyNameConflict(AssemblyNameReference assemblyRef
                 bool rightConflictLegacyUnified = !isNonUnified && assemblyReference1.reference.IsPrimary;
 
                 // This is ok here because even if the method says two versions are equivalent the algorithm below will still pick the highest version.
-                NativeMethods.CompareAssemblyIdentity
+                bool equivalent = NativeMethods.AreAssembliesEquivalent
                 (
                     leftConflictFusionName,
                     leftConflictLegacyUnified,
                     rightConflictFusionName,
-                    rightConflictLegacyUnified,
-                    out bool equivalent,
-                    out _
+                    rightConflictLegacyUnified
                 );
 
                 Version leftConflictVersion = assemblyReference0.assemblyName.Version;
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index a4e4fd164a2..55ecb95ecc6 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1108,18 +1108,16 @@ internal static extern int CompareAssemblyIdentityWindows
                 string pwzAssemblyIdentity2,
                 [MarshalAs(UnmanagedType.Bool)] bool fUnified2,
                 [MarshalAs(UnmanagedType.Bool)] out bool pfEquivalent,
-                out AssemblyComparisonResult pResult
+                out int pResult
             );
 
         // TODO: Verify correctness of this implementation and
         // extend to more cases.
-        internal static void CompareAssemblyIdentity(
+        internal static bool AreAssembliesEquivalent(
             string assemblyIdentity1,
             bool fUnified1,
             string assemblyIdentity2,
-            bool fUnified2,
-            out bool pfEquivalent,
-            out AssemblyComparisonResult pResult)
+            bool fUnified2)
         {
 #if FEATURE_FUSION_COMPAREASSEMBLYIDENTITY
             if (NativeMethodsShared.IsWindows)
@@ -1129,46 +1127,38 @@ internal static void CompareAssemblyIdentity(
                     fUnified1,
                     assemblyIdentity2,
                     fUnified2,
-                    out pfEquivalent,
-                    out pResult);
+                    out bool pfEquivalent,
+                    out _);
+                return pfEquivalent;
             }
 #endif
 
             AssemblyName an1 = new AssemblyName(assemblyIdentity1);
             AssemblyName an2 = new AssemblyName(assemblyIdentity2);
 
-            //pfEquivalent = AssemblyName.ReferenceMatchesDefinition(an1, an2);
-            pfEquivalent = RefMatchesDef(an1, an2);
-            if (pfEquivalent)
+            if (RefMatchesDef(an1, an2))
             {
-                pResult = AssemblyComparisonResult.ACR_EquivalentFullMatch;
-                return;
+                return true;
             }
 
             if (!an1.Name.Equals(an2.Name, StringComparison.OrdinalIgnoreCase))
             {
-                pResult = AssemblyComparisonResult.ACR_NonEquivalent;
-                pfEquivalent = false;
-                return;
+                return false;
             }
 
             var versionCompare = an1.Version.CompareTo(an2.Version);
 
             if ((versionCompare < 0 && fUnified2) || (versionCompare > 0 && fUnified1))
             {
-                pResult = AssemblyComparisonResult.ACR_NonEquivalentVersion;
-                pfEquivalent = true;
-                return;
+                return true;
             }
 
             if (versionCompare == 0)
             {
-                pResult = AssemblyComparisonResult.ACR_EquivalentFullMatch;
-                pfEquivalent = true;
-                return;
+                return true;
             }
 
-            pResult = pfEquivalent ? AssemblyComparisonResult.ACR_EquivalentFullMatch : AssemblyComparisonResult.ACR_NonEquivalent;
+            return false;
         }
 
         //  Based on coreclr baseassemblyspec.cpp (https://github.com/dotnet/coreclr/blob/4cf8a6b082d9bb1789facd996d8265d3908757b2/src/vm/baseassemblyspec.cpp#L330)
@@ -1229,23 +1219,6 @@ private static bool CompareRefToDef(AssemblyName @ref, AssemblyName def)
             return true;
         }
 
-        internal enum AssemblyComparisonResult
-        {
-            ACR_Unknown,                    // Unknown 
-            ACR_EquivalentFullMatch,        // all fields match
-            ACR_EquivalentWeakNamed,        // match based on weak-name, version numbers ignored
-            ACR_EquivalentFXUnified,        // match based on FX-unification of version numbers
-            ACR_EquivalentUnified,          // match based on legacy-unification of version numbers
-            ACR_NonEquivalentVersion,       // all fields match except version field
-            ACR_NonEquivalent,              // no match
-
-            ACR_EquivalentPartialMatch,
-            ACR_EquivalentPartialWeakNamed,
-            ACR_EquivalentPartialUnified,
-            ACR_EquivalentPartialFXUnified,
-            ACR_NonEquivalentPartialVersion
-        }
-
         //------------------------------------------------------------------------------
         // PFXImportCertStore
         //------------------------------------------------------------------------------
