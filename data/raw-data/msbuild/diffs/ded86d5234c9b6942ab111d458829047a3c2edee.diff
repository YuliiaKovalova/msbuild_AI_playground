diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index d58cb6e9ce7..ceb0ff367c3 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -15,10 +15,7 @@ class ResourceManagerService : IBuildComponent
 
         ILoggingService? _loggingService;
 
-#if DEBUG
         public int TotalNumberHeld = -1;
-        public string? SemaphoreName;
-#endif
 
         internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
@@ -29,26 +26,24 @@ internal static IBuildComponent CreateComponent(BuildComponentType type)
 
         public void InitializeComponent(IBuildComponentHost host)
         {
-            string semaphoreName = host.BuildParameters.ResourceManagerSemaphoreName;
+            if (NativeMethodsShared.IsWindows)
+            {
+                string semaphoreName = host.BuildParameters.ResourceManagerSemaphoreName;
 
-            int resourceCount = host.BuildParameters.MaxNodeCount; // TODO: tweakability
+                int resourceCount = host.BuildParameters.MaxNodeCount; // TODO: tweakability
 
-            _loggingService = host.LoggingService;
+                _loggingService = host.LoggingService;
 
-#if DEBUG
-            TotalNumberHeld = 0;
-            SemaphoreName = semaphoreName;
-#endif
+                TotalNumberHeld = 0;
 
-            if (NativeMethodsShared.IsWindows)
-            {
                 s = new Semaphore(resourceCount, resourceCount, semaphoreName); // TODO: SemaphoreSecurity?
             }
             else
             {
                 // UNDONE: just don't support gathering additional cores on non-Windows
-                s = new Semaphore(1, 1);
+                s = null;
             }
+
         }
 
         public void ShutdownComponent()
@@ -58,24 +53,14 @@ public void ShutdownComponent()
 
             _loggingService = null;
 
-#if DEBUG
             TotalNumberHeld = -2;
-#endif
         }
 
         public int? RequestCores(int requestedCores, TaskLoggingContext _taskLoggingContext)
         {
             if (s is null)
             {
-                if (!NativeMethodsShared.IsWindows)
-                {
-                    // Since the current implementation of the cross-process resource count uses
-                    // named semaphores, it's not usable on non-Windows, so just return the
-                    // guaranteed resource.
-                    return null;
-                }
-
-                throw new InternalErrorException($"{nameof(ResourceManagerService)} was called while uninitialized");
+                return null;
             }
 
             int i = 0;
@@ -103,14 +88,9 @@ public void ReleaseCores(int coresToRelease, TaskLoggingContext _taskLoggingCont
         {
             if (s is null)
             {
-                if (!NativeMethodsShared.IsWindows)
-                {
-                    // Since the current implementation of the cross-process resource count uses
-                    // named semaphores, it's not usable on non-Windows, so just continue.
-                    return;
-                }
-
-                throw new InternalErrorException($"{nameof(ResourceManagerService)} was called while uninitialized");
+                // Since the current implementation of the cross-process resource count uses
+                // named semaphores, it's not usable on non-Windows, so just continue.
+                return;
             }
 
             ErrorUtilities.VerifyThrow(coresToRelease > 0, "Tried to release {0} cores", coresToRelease);
