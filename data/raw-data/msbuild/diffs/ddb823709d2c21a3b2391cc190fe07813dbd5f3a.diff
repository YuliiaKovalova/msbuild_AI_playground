diff --git a/src/Deprecated/Conversion/OldVSProjectFileReader.cs b/src/Deprecated/Conversion/OldVSProjectFileReader.cs
index 459e71707d5..cbfce91cf0b 100644
--- a/src/Deprecated/Conversion/OldVSProjectFileReader.cs
+++ b/src/Deprecated/Conversion/OldVSProjectFileReader.cs
@@ -456,7 +456,7 @@ string xmlAttributeText
                     // should only get executed in fairly rare circumstances.  It's not very 
                     // common for people to have these embedded into their project files.
                     bool foundEntity = false;
-                    for (int i = 0; i < entities.Length; i++)
+                    for (int i = 0 ; i < entities.Length ; i++)
                     {
                         // Case-sensitive comparison to see if the entity name matches any of
                         // the well-known ones that were emitted by the XML writer in the VS.NET
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 671d88b0530..9ca7eca684f 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -138,8 +138,8 @@ internal bool IsShallowCopy
         }
 #endregion
 #region Pass-through Hashtable methods.
-        public bool Contains(Object key) {return ReadOperation.Contains(key); }
-        public void Add(Object key, Object value) {WriteOperation.Add(key, value); }
+        public bool Contains(Object key) {return ReadOperation.Contains(key);}
+        public void Add(Object key, Object value) {WriteOperation.Add(key, value);}
         public void Clear() 
         {
             lock (sharedLock)
@@ -152,17 +152,17 @@ public void Clear()
         }
 
         IEnumerator IEnumerable.GetEnumerator() { return ((IEnumerable)ReadOperation).GetEnumerator(); }
-        public IDictionaryEnumerator GetEnumerator() {return ReadOperation.GetEnumerator(); }
-        public void Remove(Object key) {WriteOperation.Remove(key); }        
+        public IDictionaryEnumerator GetEnumerator() {return ReadOperation.GetEnumerator();}
+        public void Remove(Object key) {WriteOperation.Remove(key);}        
         public bool IsFixedSize { get { return ReadOperation.IsFixedSize; }}
-        public bool IsReadOnly {get {return ReadOperation.IsFixedSize; }}
-        public ICollection Keys {get {return ReadOperation.Keys; }}
-        public ICollection Values {get {return ReadOperation.Values; }}
+        public bool IsReadOnly {get {return ReadOperation.IsFixedSize;}}
+        public ICollection Keys {get {return ReadOperation.Keys;}}
+        public ICollection Values {get {return ReadOperation.Values;}}
         public void CopyTo(Array array, int arrayIndex) { ReadOperation.CopyTo(array, arrayIndex); }
         public int Count{get { return ReadOperation.Count; }}
         public bool IsSynchronized {get { return ReadOperation.IsSynchronized; }}
         public Object SyncRoot {get { return ReadOperation.SyncRoot; }}
-        public bool ContainsKey(Object key)    {return ReadOperation.Contains(key); }
+        public bool ContainsKey(Object key)    {return ReadOperation.Contains(key);}
         
         public Object this[Object key] 
         {
diff --git a/src/Deprecated/Engine/Engine/NodeManager.cs b/src/Deprecated/Engine/Engine/NodeManager.cs
index b2f12b528f2..c963d35e73c 100644
--- a/src/Deprecated/Engine/Engine/NodeManager.cs
+++ b/src/Deprecated/Engine/Engine/NodeManager.cs
@@ -60,7 +60,7 @@ internal bool RegisterNodeProvider(INodeProvider nodeProviderToRegister)
             nodeProviderToRegister.AssignNodeIdentifiers(nodeIds);
 
             // Go through all of the nodes as described by nodeDescriptions and add them to out list of nodes
-            for(int i=0; i < nodeDescriptions.Length; i++)
+            for(int i=0; i < nodeDescriptions.Length;i++)
             {
                 ProvidersNodeInformation nodeToAddFromProvider = 
                     new ProvidersNodeInformation(i, nodeIds[i], nodeDescriptions[i], nodeProviderToRegister);
diff --git a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
index 51b8759b991..ab4840d7004 100644
--- a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
+++ b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.BuildEngine
     internal sealed class ProjectSchemaValidationHandler
     {
         // The parent Engine object for this project.
-        private EngineLoggingServices engineLoggingServices;
+        private EngineLoggingServices engineLoggingServices ;
 
         // the location of the MSBuild binaries
         private string binPath;
diff --git a/src/Deprecated/Engine/Engine/Utilities.cs b/src/Deprecated/Engine/Engine/Utilities.cs
index 80b8ad2c619..6f7cb535570 100644
--- a/src/Deprecated/Engine/Engine/Utilities.cs
+++ b/src/Deprecated/Engine/Engine/Utilities.cs
@@ -58,7 +58,7 @@ string rightValueExpanded               // The fully expanded value on the right
                 string[] leftValuePieces = leftValue.Split(new char[]{'|'});
 
                 // Loop through each of the pieces.
-                for (int i = 0; i < leftValuePieces.Length; i++)
+                for (int i = 0 ; i < leftValuePieces.Length ; i++)
                 {
                     Match singlePropertyMatch = singlePropertyRegex.Match(leftValuePieces[i]);
 
diff --git a/src/Deprecated/Engine/Shared/SolutionParser.cs b/src/Deprecated/Engine/Shared/SolutionParser.cs
index e681d5ec344..7790ff7d26e 100644
--- a/src/Deprecated/Engine/Shared/SolutionParser.cs
+++ b/src/Deprecated/Engine/Shared/SolutionParser.cs
@@ -425,7 +425,7 @@ private void ParseFileHeader()
             const string slnFileHeaderNoVersion = "Microsoft Visual Studio Solution File, Format Version ";
 
             // Read the file header.  This can be on either of the first two lines.
-            for (int i=1; i<=2; i++)
+            for (int i=1 ; i<=2 ; i++)
             {
                 string str = ReadLine();
                 if (str == null)
