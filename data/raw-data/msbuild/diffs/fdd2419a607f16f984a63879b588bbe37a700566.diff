diff --git a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
index 22c480d4b72..c4df0d08ef9 100644
--- a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
+++ b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
@@ -11,6 +11,8 @@ public class CustomLogAndReturnTask : Task
 
         public string ErrorCode { get; set; }
 
+        public bool ReturnHasLoggedErrors { get; set; }
+
         [Required]
         public bool Return { get; set; }
 
@@ -28,7 +30,7 @@ public override bool Execute()
             {
                 Log.LogError(null, ErrorCode, null, null, 0, 0, 0, 0, "Error Logged!", null);
             }
-            return Return;
+            return ReturnHasLoggedErrors ? !Log.HasLoggedErrors : Return;
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/LogWarningReturnHasLoggedError.cs b/src/Build.UnitTests/BackEnd/LogWarningReturnHasLoggedError.cs
deleted file mode 100644
index f2462d2901c..00000000000
--- a/src/Build.UnitTests/BackEnd/LogWarningReturnHasLoggedError.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using Microsoft.Build.Framework;
-using Microsoft.Build.Utilities;
-namespace Microsoft.Build.UnitTests
-{
-    /// <summary>
-    /// This task was created for https://github.com/microsoft/msbuild/issues/2036
-    /// </summary>
-    public class LogWarningReturnHasLoggedError : Task
-    {
-        [Required]
-        public string WarningCode { get; set; }
-
-        /// <summary>
-        /// Log a warning and return whether or not the TaskLoggingHelper knows it was turned into an error.
-        /// </summary>
-        /// <returns></returns>
-        public override bool Execute()
-        {
-            Log.LogWarning(null, WarningCode, null, null, 0, 0, 0, 0, "Warning Logged!", null);
-
-            // This is what tasks should return by default.
-            return !Log.HasLoggedErrors;
-        }
-    }
-}
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 7c2989b283f..a95b244f4ae 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -304,22 +304,20 @@ public void TaskLogsWarningAsError_BuildShouldFinishAndFail()
         /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging an error.
         /// </summary>
         [Fact]
-        public void TaskReturnsTrueButLogsError_BuildShouldFinishAndPass()
+        public void TaskReturnsTrueButLogsError_BuildShouldFinishAndFail()
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
             {
                 TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
                 <Project>
-                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
-                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
                     <Target Name='Build'>
                         <CustomLogAndReturnTask Return=""true"" ErrorCode=""MSB1235""/>
-                        <LogWarningReturnHasLoggedError WarningCode=""MSB1234""/>
+                        <CustomLogAndReturnTask Return=""true"" WarningCode=""MSB1234""/>
                     </Target>
                 </Project>");
 
-                MockLogger logger = proj.BuildProjectExpectSuccess();
+                MockLogger logger = proj.BuildProjectExpectFailure();
 
                 logger.WarningCount.ShouldBe(1);
                 logger.ErrorCount.ShouldBe(1);
