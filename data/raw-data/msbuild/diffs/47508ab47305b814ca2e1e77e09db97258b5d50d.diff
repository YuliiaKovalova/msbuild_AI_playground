diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index e93c77a204a..d904b008a11 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -503,7 +503,7 @@ public void ReusableStringBuilderFactoryStop(int hash, int returningCapacity, in
         }
 
         [Event(70, Keywords = Keywords.All)]
-        public void ReusableStringBuilderFactoryReplace(int oldHash, int newHash)
+        public void ReusableStringBuilderFactoryUnbalanced(int oldHash, int newHash)
         {
             WriteEvent(70, oldHash, newHash);
         }
diff --git a/src/Framework/ReuseableStringBuilder.cs b/src/Framework/ReuseableStringBuilder.cs
index e0f1bc969a4..5dcc137503c 100644
--- a/src/Framework/ReuseableStringBuilder.cs
+++ b/src/Framework/ReuseableStringBuilder.cs
@@ -329,7 +329,7 @@ internal static void Release(ReuseableStringBuilder returning)
                         // This can identify in-proper usage from multiple thread or bug in code - Get was reentered before Release.
                         // User of ReuseableStringBuilder has to make sure that calling method call stacks do not also use ReuseableStringBuilder.
                         // Look at stack traces of ETW events which contains reported string builder hashes.
-                        MSBuildEventSource.Log.ReusableStringBuilderFactoryReplace(oldHash: oldSharedBuilder.GetHashCode(), newHash: returningBuilder.GetHashCode());
+                        MSBuildEventSource.Log.ReusableStringBuilderFactoryUnbalanced(oldHash: oldSharedBuilder.GetHashCode(), newHash: returningBuilder.GetHashCode());
 #endif
                     }
 #if DEBUG
