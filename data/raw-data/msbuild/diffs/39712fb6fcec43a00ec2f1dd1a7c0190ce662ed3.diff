diff --git a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
index 817b23eeee6..b9074c2579c 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Perf.cs
@@ -3,6 +3,7 @@
 using System.Diagnostics;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks;
+using Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests.VersioningAndUnification.AutoUnify;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
@@ -14,21 +15,30 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
     /// </summary>
     public sealed class Perf : ResolveAssemblyReferenceTestFixture
     {
-        [Fact]
+        [Theory]
         [Trait("Category", "mono-osx-failing")]
         [Trait("Category", "mono-windows-failing")]
-        public void AutoUnifyUsesMinimumIO()
+        [InlineData(RARSimulationMode.LoadProject, 1)]
+        [InlineData(RARSimulationMode.BuildProject, 2)]
+        public void AutoUnifyUsesMinimumIO(RARSimulationMode rarSimulationMode, int ioThreshold)
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
             // times out the object used for remoting console writes.  Adding a write in the middle of
             // keeps remoting from timing out the object.
             Console.WriteLine("Performing Perf.AutoUnifyUsesMinimumIO() test");
 
-            // Manually instantiate a test fixture and run it.
-            VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify t = new VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify();
-            t.StartIOMonitoring();
-            t.Exists();
-            t.StopIOMonitoringAndAssert_Minimal_IOUse();
+            StronglyNamedDependencyAutoUnify t = new StronglyNamedDependencyAutoUnify();
+
+            try
+            {
+                // Manually instantiate a test fixture and run it.
+                t.StartIOMonitoring();
+                t.Exists(rarSimulationMode);
+            }
+            finally
+            {
+                t.StopIOMonitoringAndAssert_Minimal_IOUse(ioThreshold);
+            }
         }
 
         [Fact]
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index d2ae4e4c6b3..e66844d85d2 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -281,14 +281,15 @@ internal void StartIOMonitoring()
         /// <summary>
         /// Stop monitoring IO calls and assert if any unnecessary IO was used.
         /// </summary>
-        internal void StopIOMonitoringAndAssert_Minimal_IOUse()
+        /// <param name="ioThreshold">Maximum number of file existence checks per file</param>
+        internal void StopIOMonitoringAndAssert_Minimal_IOUse(int ioThreshold = 1)
         {
             // Check for minimal IO in File.Exists.
             foreach (var entry in uniqueFileExists)
             {
                 string path = (string)entry.Key;
                 int count = (int)entry.Value;
-                if (count > 1)
+                if (count > ioThreshold)
                 {
                     string message = String.Format("File.Exists() was called {0} times with path {1}.", count, path);
                     Assert.True(false, message);
@@ -2966,16 +2967,24 @@ protected static bool ContainsItem(ITaskItem[] items, string spec)
         /// <remarks>
         /// NOTE! This test is not in fact completely isolated from its environment: it is reading the real redist lists.
         /// </remarks>
-        protected static bool Execute(ResolveAssemblyReference t)
+        protected static bool Execute(ResolveAssemblyReference t, RARSimulationMode RARSimulationMode = RARSimulationMode.LoadAndBuildProject)
         {
-            return Execute(t, true);
+            return Execute(t, true, RARSimulationMode);
+        }
+
+        [Flags]
+        public enum RARSimulationMode
+        {
+            LoadProject = 1,
+            BuildProject = 2,
+            LoadAndBuildProject = LoadProject | BuildProject
         }
 
         /// <summary>
         /// Execute the task. Without confirming that the number of files resolved with and without find dependencies is identical.
         /// This is because profiles could cause the number of primary references to be different.
         /// </summary>
-        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck)
+        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck, RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject)
         {
             string tempPath = Path.GetTempPath();
             string redistListPath = Path.Combine(tempPath, Guid.NewGuid() + ".xml");
@@ -2994,107 +3003,114 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                 }
 
                 // First, run it in loading-a-project mode.
-                t.Silent = true;
-                t.FindDependencies = false;
-                t.FindSatellites = false;
-                t.FindSerializationAssemblies = false;
-                t.FindRelatedFiles = false;
-                t.StateFile = null;
-                t.Execute
-                (
-                    fileExists,
-                    directoryExists,
-                    getDirectories,
-                    getAssemblyName,
-                    getAssemblyMetadata,
-#if FEATURE_WIN32_REGISTRY
-                    getRegistrySubKeyNames,
-                    getRegistrySubKeyDefaultValue,
-#endif
-                    getLastWriteTime,
-                    getRuntimeVersion,
-#if FEATURE_WIN32_REGISTRY
-                    openBaseKey,
-#endif
-                    checkIfAssemblyIsInGac,
-                    isWinMDFile,
-                    readMachineTypeFromPEHeader
-                );
 
-                // A few checks. These should always be true or it may be a perf issue for project load.
-                ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
-                if (t.ResolvedFiles != null)
-                {
-                    loadModeResolvedFiles = (ITaskItem[])t.ResolvedFiles.Clone();
+                if (rarSimulationMode.HasFlag(RARSimulationMode.LoadProject))
+                {
+                    t.Silent = true;
+                    t.FindDependencies = false;
+                    t.FindSatellites = false;
+                    t.FindSerializationAssemblies = false;
+                    t.FindRelatedFiles = false;
+                    t.StateFile = null;
+	                t.Execute
+	                (
+	                    fileExists,
+	                    directoryExists,
+	                    getDirectories,
+	                    getAssemblyName,
+	                    getAssemblyMetadata,
+	#if FEATURE_WIN32_REGISTRY
+	                    getRegistrySubKeyNames,
+	                    getRegistrySubKeyDefaultValue,
+	#endif
+	                    getLastWriteTime,
+	                    getRuntimeVersion,
+	#if FEATURE_WIN32_REGISTRY
+	                    openBaseKey,
+	#endif
+	                    checkIfAssemblyIsInGac,
+	                    isWinMDFile,
+	                    readMachineTypeFromPEHeader
+	                );
+
+                    // A few checks. These should always be true or it may be a perf issue for project load.
+                    ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
+                    if (t.ResolvedFiles != null)
+                    {
+                        loadModeResolvedFiles = (ITaskItem[])t.ResolvedFiles.Clone();
+                    }
+                    Assert.Equal(0, t.ResolvedDependencyFiles.Length);
+                    Assert.Equal(0, t.SatelliteFiles.Length);
+                    Assert.Equal(0, t.RelatedFiles.Length);
+                    Assert.Equal(0, t.SuggestedRedirects.Length);
+                    Assert.Equal(0, t.FilesWritten.Length);
+
+                    if (buildConsistencyCheck)
+                    {
+                        // Some consistency checks between load mode and build mode.
+                        Assert.Equal(loadModeResolvedFiles.Length, t.ResolvedFiles.Length);
+                        for (int i = 0; i < loadModeResolvedFiles.Length; i++)
+                        {
+                            Assert.Equal(loadModeResolvedFiles[i].ItemSpec, t.ResolvedFiles[i].ItemSpec);
+                            Assert.Equal(loadModeResolvedFiles[i].GetMetadata("CopyLocal"), t.ResolvedFiles[i].GetMetadata("CopyLocal"));
+                            Assert.Equal(loadModeResolvedFiles[i].GetMetadata("ResolvedFrom"), t.ResolvedFiles[i].GetMetadata("ResolvedFrom"));
+                        }
+                    }
                 }
-                Assert.Equal(0, t.ResolvedDependencyFiles.Length);
-                Assert.Equal(0, t.SatelliteFiles.Length);
-                Assert.Equal(0, t.RelatedFiles.Length);
-                Assert.Equal(0, t.SuggestedRedirects.Length);
-                Assert.Equal(0, t.FilesWritten.Length);
 
                 // Now, run it in building-a-project mode.
-                MockEngine e = (MockEngine)t.BuildEngine;
-                e.Warnings = 0;
-                e.Errors = 0;
-                e.Log = "";
-                t.Silent = false;
-                t.FindDependencies = true;
-                t.FindSatellites = true;
-                t.FindSerializationAssemblies = true;
-                t.FindRelatedFiles = true;
-                string cache = rarCacheFile;
-                t.StateFile = cache;
-                File.Delete(t.StateFile);
-                succeeded =
-                    t.Execute
-                    (
-                        fileExists,
-                        directoryExists,
-                        getDirectories,
-                        getAssemblyName,
-                        getAssemblyMetadata,
-#if FEATURE_WIN32_REGISTRY
-                        getRegistrySubKeyNames,
-                        getRegistrySubKeyDefaultValue,
-#endif
-                        getLastWriteTime,
-                        getRuntimeVersion,
-#if FEATURE_WIN32_REGISTRY
-                        openBaseKey,
-#endif
-                        checkIfAssemblyIsInGac,
-                        isWinMDFile,
-                        readMachineTypeFromPEHeader
-                    );
-                if (FileUtilities.FileExistsNoThrow(t.StateFile))
-                {
-                    Assert.Equal(1, t.FilesWritten.Length);
-                    Assert.True(t.FilesWritten[0].ItemSpec.Equals(cache, StringComparison.OrdinalIgnoreCase));
-                }
+                if (rarSimulationMode.HasFlag(RARSimulationMode.BuildProject))
+                {
+                    MockEngine e = (MockEngine)t.BuildEngine;
+                    e.Warnings = 0;
+                    e.Errors = 0;
+                    e.Log = "";
+                    t.Silent = false;
+                    t.FindDependencies = true;
+                    t.FindSatellites = true;
+                    t.FindSerializationAssemblies = true;
+                    t.FindRelatedFiles = true;
+                    string cache = rarCacheFile;
+                    t.StateFile = cache;
+                    File.Delete(t.StateFile);
+	                succeeded =
+	                    t.Execute
+	                    (
+	                        fileExists,
+	                        directoryExists,
+	                        getDirectories,
+	                        getAssemblyName,
+	                        getAssemblyMetadata,
+	#if FEATURE_WIN32_REGISTRY
+	                        getRegistrySubKeyNames,
+	                        getRegistrySubKeyDefaultValue,
+	#endif
+	                        getLastWriteTime,
+	                        getRuntimeVersion,
+	#if FEATURE_WIN32_REGISTRY
+	                        openBaseKey,
+	#endif
+	                        checkIfAssemblyIsInGac,
+	                        isWinMDFile,
+	                        readMachineTypeFromPEHeader
+	                    );
+                    if (FileUtilities.FileExistsNoThrow(t.StateFile))
+                    {
+                        Assert.Equal(1, t.FilesWritten.Length);
+                        Assert.True(t.FilesWritten[0].ItemSpec.Equals(cache, StringComparison.OrdinalIgnoreCase));
+                    }
 
-                File.Delete(t.StateFile);
+                    File.Delete(t.StateFile);
 
-                if (buildConsistencyCheck)
-                {
-                    // Some consistency checks between load mode and build mode.
-                    Assert.Equal(loadModeResolvedFiles.Length, t.ResolvedFiles.Length);
-                    for (int i = 0; i < loadModeResolvedFiles.Length; i++)
+                    // Check attributes on resolve files.
+                    for (int i = 0; i < t.ResolvedFiles.Length; i++)
                     {
-                        Assert.Equal(loadModeResolvedFiles[i].ItemSpec, t.ResolvedFiles[i].ItemSpec);
-                        Assert.Equal(loadModeResolvedFiles[i].GetMetadata("CopyLocal"), t.ResolvedFiles[i].GetMetadata("CopyLocal"));
-                        Assert.Equal(loadModeResolvedFiles[i].GetMetadata("ResolvedFrom"), t.ResolvedFiles[i].GetMetadata("ResolvedFrom"));
+                        // OriginalItemSpec attribute on resolved items is to support VS in figuring out which
+                        // project file reference caused a particular resolved file.
+                        string originalItemSpec = t.ResolvedFiles[i].GetMetadata("OriginalItemSpec");
+                        Assert.True(ContainsItem(t.Assemblies, originalItemSpec) || ContainsItem(t.AssemblyFiles, originalItemSpec)); //                         "Expected to find OriginalItemSpec in Assemblies or AssemblyFiles task parameters"
                     }
                 }
-
-                // Check attributes on resolve files.
-                for (int i = 0; i < t.ResolvedFiles.Length; i++)
-                {
-                    // OriginalItemSpec attribute on resolved items is to support VS in figuring out which
-                    // project file reference caused a particular resolved file.
-                    string originalItemSpec = t.ResolvedFiles[i].GetMetadata("OriginalItemSpec");
-                    Assert.True(ContainsItem(t.Assemblies, originalItemSpec) || ContainsItem(t.AssemblyFiles, originalItemSpec)); //                         "Expected to find OriginalItemSpec in Assemblies or AssemblyFiles task parameters"
-                }
             }
             finally
             {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
index 73f1fe23351..3ea9a7e49f0 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/StronglyNamedDependencyAutoUnify.cs
@@ -34,8 +34,9 @@ public sealed class StronglyNamedDependencyAutoUnify : ResolveAssemblyReferenceT
         /// When AutoUnify is true, we need to resolve to the highest version of each particular assembly 
         /// dependency seen.
         /// </summary>
+        /// <param name="rarSimulationMode"></param>
         [Fact]
-        public void Exists()
+        public void Exists(RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject)
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
             // times out the object used for remoting console writes.  Adding a write in the middle of
@@ -59,21 +60,24 @@ public void Exists()
             t.SearchPaths = DefaultPaths;
             t.AutoUnify = true;
 
-            bool succeeded = Execute(t);
+            bool succeeded = Execute(t, rarSimulationMode);
 
-            Assert.True(succeeded);
-            AssertNoCase("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", t.ResolvedDependencyFiles[0].GetMetadata("FusionName"));
+            if (rarSimulationMode.HasFlag(RARSimulationMode.LoadAndBuildProject))
+            {
+                Assert.True(succeeded);
+                AssertNoCase("UnifyMe, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", t.ResolvedDependencyFiles[0].GetMetadata("FusionName"));
                 AssertNoCase(s_unifyMeDll_V20Path, t.ResolvedDependencyFiles[0].ItemSpec);
 
-            engine.AssertLogContains
+                engine.AssertLogContains
                 (
                     String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnifiedDependency"), "UniFYme, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
                 );
 
-            engine.AssertLogContains
+                engine.AssertLogContains
                 (
                     String.Format(AssemblyResources.GetString("ResolveAssemblyReference.UnificationByAutoUnify"), "1.0.0.0", Path.Combine(s_myApp_V10Path, "DependsOnUnified.dll"))
                 );
+            }
         }
 
         /// <summary>
@@ -502,4 +506,4 @@ public void LowVersionDoesntExist()
                 );
         }
     }
-}
\ No newline at end of file
+}
