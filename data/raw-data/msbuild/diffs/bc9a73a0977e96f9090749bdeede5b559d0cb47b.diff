diff --git a/src/Framework/ITaskItemExtensions.cs b/src/Framework/ITaskItemExtensions.cs
index 2c0bfa2abb8..7dc7dbdaf86 100644
--- a/src/Framework/ITaskItemExtensions.cs
+++ b/src/Framework/ITaskItemExtensions.cs
@@ -1,8 +1,10 @@
-// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Diagnostics;
 
 #nullable disable
 
@@ -37,9 +39,25 @@ public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this I
             var list = new KeyValuePair<string, string>[customMetadata.Count];
             int i = 0;
 
-            foreach (KeyValuePair<string, string> metadatum in customMetadata)
+            foreach (string metadataName in customMetadata.Keys)
             {
-                list[i++] = new KeyValuePair<string, string>(metadatum.Key, metadatum.Value);
+                string valueOrError;
+
+                try
+                {
+                    valueOrError = taskItem.GetMetadata(metadataName);
+                }
+                // Temporarily try catch all to mitigate frequent NullReferenceExceptions in
+                // the logging code until CopyOnWritePropertyDictionary is replaced with
+                // ImmutableDictionary. Calling into Debug.Fail to crash the process in case
+                // the exception occurres in Debug builds.
+                catch (Exception e)
+                {
+                    valueOrError = e.Message;
+                    Debug.Fail(e.ToString());
+                }
+
+                list[i++] = new KeyValuePair<string, string>(metadataName, valueOrError);
             }
 
             return list;
