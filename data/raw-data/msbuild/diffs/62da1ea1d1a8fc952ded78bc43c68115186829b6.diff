diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 03df3b4648f..0ad1c86ea1f 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -18,7 +18,7 @@ public class FancyLogger : ILogger
         public Dictionary<int, FancyLoggerBufferLine> taskConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
 
         private float existingTasks = 1;
-        private float completedTasks = 1;
+        private float completedTasks = 0;
 
         public string Parameters {  get; set; }
 
@@ -48,7 +48,7 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             {
                 FancyLoggerBuffer.Initialize();
-                FancyLoggerBufferLine rootLine = FancyLoggerBuffer.WriteNewLine($"This is root --> {ANSIBuilder.Formatting.Bold("Remove after testing")}");
+                FancyLoggerBufferLine rootLine = FancyLoggerBuffer.WriteNewLine("");
                 root.Line = rootLine;
             }
         }
@@ -135,7 +135,7 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             parentNode.Add(node);
             node.Write();
             // TODO: Remove
-            Thread.Sleep(500);
+            Thread.Sleep(400);
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
@@ -151,13 +151,24 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + ANSIBuilder.Formatting.Color(e.TaskName, ANSIBuilder.Formatting.ForegroundColor.Green)
             );
-            FancyLoggerBuffer.WriteFooter($"Build: {ANSIBuilder.Graphics.ProgressBar(completedTasks/existingTasks)}  {(completedTasks / existingTasks) * 100}");
+            FancyLoggerBuffer.WriteFooter($"Build: {ANSIBuilder.Graphics.ProgressBar(completedTasks/existingTasks)}  {(completedTasks / existingTasks) * 100} \t {completedTasks}/{existingTasks}");
             node.Collapse();
         }
 
         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         {
-            // Message raised
+            // Only output high importance messages
+            // if (e.Importance != MessageImportance.High) return;
+            /* if (e.BuildEventContext?.TaskId == null) return;
+            int id = e.BuildEventContext.GetHashCode();
+            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Message);
+            node.Line = new FancyLoggerBufferLine("--Message");
+
+            FancyLoggerNode? parentNode = root.Find($"task-{e.BuildEventContext.TaskId}");
+            if (parentNode == null) return;
+
+            parentNode.Add(node);
+            node.Write(); */
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
@@ -168,6 +179,7 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // TODO: Try to redirect to stderr
             // Console.WriteLine("Error raised");
+            FancyLoggerBuffer.WriteNewLine("Error");
         }
 
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 4d690ce928f..d22c6366740 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -111,21 +111,55 @@ public static void Terminate()
         #region Scrolling
         private static void ScrollToLine(int firstLineIndex)
         {
-            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
+            /* if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;
             CurrentTopLineIndex = firstLineIndex;
             int i = 0;
             while (i < Height - 4)
             {
                 int lineIndex = i + firstLineIndex;
-                // if (lineIndex < lines.Count && lines[lineIndex].IsHidden) continue;
+
+                if (lineIndex < lines.Count && lines[lineIndex].IsHidden)
+                {
+                    // Go to next line
+                    lineIndex++;
+                } else
+                {
+                    Console.Write(""
+                        + ANSIBuilder.Cursor.Position(i + 2, 0)
+                        + ANSIBuilder.Eraser.LineCursorToEnd()
+                        // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
+                        + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
+                    );
+                }
+                
+                i++;
+            }
+            */
+            if (firstLineIndex < 0)
+            {
+                ScrollToLine(0);
+                return;
+            }
+            if (firstLineIndex >= lines.Count)
+            {
+                ScrollToLine(lines.Count - 1);
+                return;
+            }
+            CurrentTopLineIndex = firstLineIndex;
+
+            int i = 0;
+            while (i < Height - 4)
+            {
+                int lineIndex = i + firstLineIndex;
                 Console.Write(""
                     + ANSIBuilder.Cursor.Position(i + 2, 0)
                     + ANSIBuilder.Eraser.LineCursorToEnd()
+                    // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
                     + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : "")
-                    + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? " Hidden" : "")
                 );
                 i++;
             }
+
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
         private static void ScrollToEnd()
@@ -247,7 +281,7 @@ public static void HideLine(int lineId)
             FancyLoggerBufferLine? line = GetLineById(lineId);
             if (line == null) return;
             line.Hide();
-            // ScrollToLine(CurrentTopLineIndex);
+            ScrollToLine(CurrentTopLineIndex);
         }
         public static void UnhideLine(int lineId)
         {
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 95e8b5b9438..0936140328f 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -3226,19 +3226,19 @@ out bool enableProfiler
             bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
                 ( RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") != "" ) && // Avoid when NOT using Windows Terminal
                 Environment.GetEnvironmentVariable("TERM") != "dumb"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities
-            if (!outputSupportsFancyLogger)
+            if (shouldUseFancyLogger && !outputSupportsFancyLogger)
             {
                 // Add to deferredbuildmessages
             }
-            if(shouldUseFancyLogger && outputSupportsFancyLogger )
+            else if (shouldUseFancyLogger && outputSupportsFancyLogger)
             {
                 ProcessFancyLogger(noConsoleLogger, loggers);
-            } else
+            }
+            else
             {
                 ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
             }
 
-
             ProcessDistributedFileLogger(distributedFileLogger, fileLoggerParameters, distributedLoggerRecords, loggers, cpuCount);
 
             ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
