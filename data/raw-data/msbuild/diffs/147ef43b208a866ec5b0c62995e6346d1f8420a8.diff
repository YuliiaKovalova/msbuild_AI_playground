diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 9a5eabd2cf9..cd7f3202b83 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -2763,10 +2763,16 @@ private ITaskItem SetItemMetadata(List<ITaskItem> relatedItems, List<ITaskItem>
                         relatedItems.Add(item);
 
                         referenceItem.SetMetadata(ItemMetadataNames.winmdImplmentationFile, Path.GetFileName(reference.ImplementationAssembly));
+                        // This may have been set previously (before it was removed so we could more efficiently set metadata on the various related files).
+                        // This version should take priority, so we remove it from nonForwardableMetadata if it's there to prevent the correct value from
+                        // being overwritten.
                         nonForwardableMetadata?.Remove(ItemMetadataNames.winmdImplmentationFile);
                     }
                 }
 
+                // This may have been set previously (before it was removed so we could more efficiently set metadata on the various related files).
+                // This version should take priority, so we remove it from nonForwardableMetadata if it's there to prevent the correct value from
+                // being overwritten.
                 nonForwardableMetadata?.Remove(ItemMetadataNames.winMDFileType);
                 if (reference.IsManagedWinMDFile)
                 {
@@ -2776,6 +2782,10 @@ private ITaskItem SetItemMetadata(List<ITaskItem> relatedItems, List<ITaskItem>
                 {
                     referenceItem.SetMetadata(ItemMetadataNames.winMDFileType, "Native");
                 }
+
+                // This may have been set previously (before it was removed so we could more efficiently set metadata on the various related files).
+                // This version should take priority, so we remove it from nonForwardableMetadata if it's there to prevent the correct value from
+                // being overwritten.
                 nonForwardableMetadata?.Remove(ItemMetadataNames.winMDFile);
                 referenceItem.SetMetadata(ItemMetadataNames.winMDFile, "true");
             }
@@ -2783,6 +2793,7 @@ private ITaskItem SetItemMetadata(List<ITaskItem> relatedItems, List<ITaskItem>
             // Set the FusionName metadata properly.
             referenceItem.SetMetadata(ItemMetadataNames.fusionName, fusionName);
 
+            // nonForwardableMetadata should be null here if relatedFileExtensions, satellites, serializationAssemblyFiles, and scatterFiles were all empty.
             if (nonForwardableMetadata != null)
             {
                 foreach (KeyValuePair<string, string> kvp in nonForwardableMetadata)
@@ -2926,35 +2937,35 @@ IMAGE_FILE_MACHINE_IA64	0x200	Intel Itanium processor family
         /// </summary>
         private static Dictionary<string, string> RemoveNonForwardableMetadata(ITaskItem item)
         {
-            Dictionary<string, string> metadata = new Dictionary<string, string>();
+            Dictionary<string, string> removedMetadata = new Dictionary<string, string>();
             string meta = item.GetMetadata(ItemMetadataNames.winmdImplmentationFile);
             if (!String.IsNullOrEmpty(meta))
             {
-                metadata.Add(ItemMetadataNames.winmdImplmentationFile, meta);
+                removedMetadata.Add(ItemMetadataNames.winmdImplmentationFile, meta);
             }
+            item.RemoveMetadata(ItemMetadataNames.winmdImplmentationFile);
             meta = item.GetMetadata(ItemMetadataNames.imageRuntime);
             if (!String.IsNullOrEmpty(meta))
             {
-                metadata.Add(ItemMetadataNames.imageRuntime, meta);
+                removedMetadata.Add(ItemMetadataNames.imageRuntime, meta);
             }
+            item.RemoveMetadata(ItemMetadataNames.imageRuntime);
             meta = item.GetMetadata(ItemMetadataNames.winMDFile);
             if (!String.IsNullOrEmpty(meta))
             {
-                metadata.Add(ItemMetadataNames.winMDFile, meta);
+                removedMetadata.Add(ItemMetadataNames.winMDFile, meta);
             }
+            item.RemoveMetadata(ItemMetadataNames.winMDFile);
             if (!Traits.Instance.EscapeHatches.TargetPathForRelatedFiles)
             {
                 meta = item.GetMetadata(ItemMetadataNames.targetPath);
                 if (!String.IsNullOrEmpty(meta))
                 {
-                    metadata.Add(ItemMetadataNames.targetPath, meta);
+                    removedMetadata.Add(ItemMetadataNames.targetPath, meta);
                 }
                 item.RemoveMetadata(ItemMetadataNames.targetPath);
             }
-            item.RemoveMetadata(ItemMetadataNames.winmdImplmentationFile);
-            item.RemoveMetadata(ItemMetadataNames.imageRuntime);
-            item.RemoveMetadata(ItemMetadataNames.winMDFile);
-            return metadata;
+            return removedMetadata;
         }
 
         /// <summary>
diff --git a/src/Utilities/TaskItem.cs b/src/Utilities/TaskItem.cs
index a27113c29e7..ff5ca50acc6 100644
--- a/src/Utilities/TaskItem.cs
+++ b/src/Utilities/TaskItem.cs
@@ -297,17 +297,18 @@ public void CopyMetadataTo(ITaskItem destinationItem)
 
             if (_metadata != null)
             {
-                // Avoid a copy if we can
                 if (destinationItem is TaskItem destinationAsTaskItem)
                 {
                     CopyOnWriteDictionary<string> copiedMetadata;
-                    if (destinationAsTaskItem.Metadata == null || destinationAsTaskItem.Metadata.Count < _metadata.Count)
+                    // Avoid a copy if we can, and if not, minimize the number of items we have to set.
+                    if (destinationAsTaskItem.Metadata == null)
                     {
                         copiedMetadata = _metadata.Clone(); // Copy on write!
-                        if (destinationAsTaskItem.Metadata != null)
-                        {
-                            copiedMetadata.SetItems(destinationAsTaskItem.Metadata);
-                        }
+                    }
+                    else if (destinationAsTaskItem.Metadata.Count < _metadata.Count)
+                    {
+                        copiedMetadata = _metadata.Clone(); // Copy on write!
+                        copiedMetadata.SetItems(destinationAsTaskItem.Metadata);
                     }
                     else
                     {
