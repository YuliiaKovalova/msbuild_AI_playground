diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index cbc0a2d02c3..2ab345be3a6 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
@@ -246,6 +247,8 @@ public MessageImportance MinimumRequiredMessageImportance
             get => MessageImportance.Low;
         }
 
+        public ConcurrentDictionary<int, string> ProjectFileMap => new ConcurrentDictionary<int, string>();
+
         public void AddWarningsAsMessages(BuildEventContext buildEventContext, ISet<string> codes)
         {
             throw new NotImplementedException();
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 04d97b96ffd..9d4b22c88f0 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -85,7 +85,10 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore {(analysisRequested ? "-analyze" : string.Empty)} -bl:{logFile}",
             out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
 
-        success.ShouldBeTrue();
+        if (BC0101Severity != "error")
+        {
+            success.ShouldBeTrue();
+        }
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
          $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic",
@@ -93,7 +96,10 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu
 
         _env.Output.WriteLine(output);
 
-        success.ShouldBeTrue();
+        if (BC0101Severity != "error")
+        {
+            success.ShouldBeTrue();
+        }
 
         // The conflicting outputs warning appears - but only if analysis was requested
         if (analysisRequested)
@@ -124,7 +130,10 @@ public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string
             $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze",
             out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
 
-        success.ShouldBeTrue();
+        if (BC0101Severity != "error")
+        {
+            success.ShouldBeTrue();
+        }
 
         if (!string.IsNullOrEmpty(expectedOutputValues))
         {
@@ -218,14 +227,17 @@ public void CustomAnalyzerTest_NoEditorConfig(string analysisCandidate, string[]
             string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                 $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore -analyze -verbosity:n",
                 out bool successBuild);
-            successBuild.ShouldBeTrue(projectAnalysisBuildLog);
 
             foreach (string registeredRule in expectedRegisteredRules)
             {
                 projectAnalysisBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("CustomAnalyzerSuccessfulAcquisition", registeredRule));
             }
 
-            if (expectedRejectedAnalyzers)
+            if (!expectedRejectedAnalyzers)
+            {
+                successBuild.ShouldBeTrue(projectAnalysisBuildLog);
+            }
+            else
             {
                 projectAnalysisBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
                     "CustomAnalyzerBaseTypeNotAssignable",
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
index 5cd1d3317c0..fb3a1c2e267 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer1.cs
@@ -32,6 +32,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
                 ElementLocation.EmptyLocation,
+                "Foo.csproj",
                 "Argument for the message format"));
         }
     }
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
index 714a82ae95a..74629fa9210 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/Analyzer2.cs
@@ -32,6 +32,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
                 ElementLocation.EmptyLocation,
+                "Foo1.csproj",
                 "Argument for the message format"));
         }
     }
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
index c0272937c87..242f47592ca 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/Analyzer3.cs
@@ -32,6 +32,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
                 ElementLocation.EmptyLocation,
+                "Foo1.csproj",
                 "Argument for the message format"));
         }
     }
