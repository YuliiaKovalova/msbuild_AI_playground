diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 72ae2c75ac2..6bcd2951e2d 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -164,6 +164,11 @@ public void Initialize(IEventSource eventSource)
             binaryWriter = new BinaryWriter(stream);
             eventArgsWriter = new BuildEventArgsWriter(binaryWriter);
 
+            if (projectImportsCollector != null)
+            {
+                eventArgsWriter.EmbedFile += EventArgsWriter_EmbedFile;
+            }
+
             binaryWriter.Write(FileFormatVersion);
 
             LogInitialInfo();
@@ -171,6 +176,14 @@ public void Initialize(IEventSource eventSource)
             eventSource.AnyEventRaised += EventSource_AnyEventRaised;
         }
 
+        private void EventArgsWriter_EmbedFile(string filePath)
+        {
+            if (projectImportsCollector != null)
+            {
+                projectImportsCollector.AddFile(filePath);
+            }
+        }
+
         private void LogInitialInfo()
         {
             LogMessage("BinLogFilePath=" + FilePath);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index b3fec8d101d..20cd4232cb2 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -105,6 +105,11 @@ internal class BuildEventArgsWriter
         /// </summary>
         private readonly List<KeyValuePair<int, int>> nameValueIndexListBuffer = new List<KeyValuePair<int, int>>(1024);
 
+        /// <summary>
+        /// Raised when an item is encountered with a hint to embed a file into the binlog.
+        /// </summary>
+        public event Action<string> EmbedFile;
+
         /// <summary>
         /// Initializes a new instance of BuildEventArgsWriter with a BinaryWriter
         /// </summary>
@@ -788,6 +793,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(itemType);
                     WriteTaskItemList(itemList);
+                    CheckForFilesToEmbed(itemType, itemList);
                 });
 
                 // signal the end
@@ -800,6 +806,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(itemType);
                     WriteTaskItemList(itemList);
+                    CheckForFilesToEmbed(itemType, itemList);
                 });
 
                 // signal the end
@@ -827,6 +834,7 @@ private void WriteProjectItems(IEnumerable items)
                     {
                         WriteDeduplicatedString(currentItemType);
                         WriteTaskItemList(reusableProjectItemList);
+                        CheckForFilesToEmbed(currentItemType, reusableProjectItemList);
                         reusableProjectItemList.Clear();
                     }
 
@@ -839,6 +847,7 @@ private void WriteProjectItems(IEnumerable items)
                 {
                     WriteDeduplicatedString(currentItemType);
                     WriteTaskItemList(reusableProjectItemList);
+                    CheckForFilesToEmbed(currentItemType, reusableProjectItemList);
                     reusableProjectItemList.Clear();
                 }
 
@@ -847,6 +856,28 @@ private void WriteProjectItems(IEnumerable items)
             }
         }
 
+        private void CheckForFilesToEmbed(string itemType, object itemList)
+        {
+            if (EmbedFile == null ||
+                !string.Equals(itemType, ItemTypeNames.EmbedInBinlog, StringComparison.OrdinalIgnoreCase) ||
+                itemList is not IEnumerable list)
+            {
+                return;
+            }
+
+            foreach (var item in list)
+            {
+                if (item is ITaskItem taskItem && !string.IsNullOrEmpty(taskItem.ItemSpec))
+                {
+                    EmbedFile.Invoke(taskItem.ItemSpec);
+                }
+                else if (item is string itemSpec && !string.IsNullOrEmpty(itemSpec))
+                {
+                    EmbedFile.Invoke(itemSpec);
+                }
+            }
+        }
+
         private void Write(ITaskItem item, bool writeMetadata = true)
         {
             WriteDeduplicatedString(item.ItemSpec);
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index eea2401dca9..e0c4da0540e 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -141,6 +141,11 @@ internal static class ItemTypeNames
         /// Declares a project cache plugin and its configuration.
         /// </summary>
         internal const string ProjectCachePlugin = nameof(ProjectCachePlugin);
+
+        /// <summary>
+        /// Embed specified files in the binary log
+        /// </summary>
+        internal const string EmbedInBinlog = nameof(EmbedInBinlog);
     }
 
     /// <summary>
