diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
index b09bc4f5496..89f00bd0a0d 100644
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ b/src/Tasks/SemaphoreCPUTask.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Utilities;
+using System;
+using System.Threading;
 
 namespace Microsoft.Build.Tasks
 {
@@ -9,23 +11,31 @@ class SemaphoreCPUTask : Task
     {
         public override bool Execute()
         {
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(3123890)} cores", Framework.MessageImportance.High);
-
-            BuildEngine7.ReleaseCores(50);
-            Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
-
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(10)} cores", Framework.MessageImportance.High);
-
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(30)} cores", Framework.MessageImportance.High);
-
-            BuildEngine7.ReleaseCores(2);
-            Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
-
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(12)} cores", Framework.MessageImportance.High);
+            int initial = BuildEngine7.RequestCores(3123890);
+            Log.LogMessageFromText($"Got {initial} cores from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+
+            if (initial > 0)
+            {
+                while (initial > 0)
+                {
+                    Thread.Sleep(TimeSpan.FromSeconds(1));
+                    BuildEngine7.ReleaseCores(1);
+                    initial--;
+                    Log.LogMessageFromText($"Released 1 core from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+                }
+
+                return !Log.HasLoggedErrors;
+            }
+
+            for (int i = 0; i < 20; i++)
+            {
+                int v = BuildEngine7.RequestCores(9999);
+                Log.LogMessageFromText($"Got {v} cores  from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+                BuildEngine7.ReleaseCores(v + 20);
+                Thread.Sleep(TimeSpan.FromSeconds(0.9));
+            }
 
             return !Log.HasLoggedErrors;
         }
-
-
     }
 }
diff --git a/test-project.proj b/test-project.proj
index 194b8744343..3f46eb56486 100644
--- a/test-project.proj
+++ b/test-project.proj
@@ -1,7 +1,14 @@
 <Project>
+  <ItemGroup>
+    <P Include="$(MSBuildThisFileFullPath)" AdditionalProperties="Foo=Bar" />
+    <P Include="$(MSBuildThisFileFullPath)" AdditionalProperties="Foo=Baz" />
+  </ItemGroup>
+  <Target Name="Y">
+    <MSBuild Projects="@(P)" BuildInParallel="true" Targets="X" />
+  </Target>
   <Target Name="X">
     <SemaphoreCPUTask />
     <Message Importance="High" Text="Middle" />
-    <SemaphoreCPUTask />
+    <!-- <SemaphoreCPUTask /> -->
   </Target>
 </Project>
\ No newline at end of file
