diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index be1bb7b8250..64e76436c3c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -34,6 +34,7 @@ internal class TaskHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
+        IBuildEngineInternal,
         IBuildEngine9
     {
         /// <summary>
@@ -872,6 +873,11 @@ internal void ReleaseAllCores()
             }
         }
 
+        /// <summary>
+        /// Returns the minimum message importance not guaranteed to be ignored by registered loggers.
+        /// </summary>
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
+
         #endregion
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactoryLoggingHost.cs b/src/Build/Instance/TaskFactoryLoggingHost.cs
index 945fe1a875f..039fe9bfeb5 100644
--- a/src/Build/Instance/TaskFactoryLoggingHost.cs
+++ b/src/Build/Instance/TaskFactoryLoggingHost.cs
@@ -22,7 +22,8 @@ internal class TaskFactoryLoggingHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IBuildEngine
+        IBuildEngine,
+        IBuildEngineInternal
     {
         /// <summary>
         /// Location of the task node in the original file
@@ -245,6 +246,12 @@ public bool BuildProjectFile(string projectFileName, string[] targetNames, Syste
 
         #endregion
 
+        #region IBuildEngineInternal Members
+
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
+
+        #endregion
+
 #if FEATURE_APPDOMAIN
         /// <summary>
         /// InitializeLifetimeService is called when the remote object is activated.
diff --git a/src/Framework/IBuildEngineInternal.cs b/src/Framework/IBuildEngineInternal.cs
new file mode 100644
index 00000000000..4e839d0eb73
--- /dev/null
+++ b/src/Framework/IBuildEngineInternal.cs
@@ -0,0 +1,20 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    ///
+    /// </summary>
+    internal interface IBuildEngineInternal
+    {
+        /// <summary>
+        /// Returns the minimum message importance not guaranteed to be ignored by registered loggers.
+        /// </summary>
+        /// <remarks>
+        /// Example: If we know that no logger is interested in MessageImportance.Low, this property returns
+        /// MessageImportance.Normal. If loggers may consume any messages, this property returns MessageImportance.Low.
+        /// </remarks>
+        MessageImportance MinimumRequiredMessageImportance { get; }
+    }
+}
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index c0ca960bb76..1a5d4d70a54 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -29,7 +29,7 @@ internal class OutOfProcTaskHostNode :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        INodePacketFactory, INodePacketHandler,
+        INodePacketFactory, INodePacketHandler, IBuildEngineInternal,
 #if CLR2COMPATIBILITY
         IBuildEngine3
 #else
@@ -494,6 +494,15 @@ public void ReleaseCores(int coresToRelease)
         #endregion
 #endif
 
+        #region IBuildEngineInternal Members
+
+        /// <summary>
+        /// No logging verbosity optimization in OOP nodes.
+        /// </summary>
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
+
+        #endregion
+
         #region INodePacketFactory Members
 
         /// <summary>
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 66f5bc78f00..55113e6ad31 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -48,6 +48,9 @@
     <Compile Include="..\Framework\IBuildEngine3.cs">
       <Link>IBuildEngine3.cs</Link>
     </Compile>
+    <Compile Include="..\Framework\IBuildEngineInternal.cs">
+      <Link>IBuildEngineInternal.cs</Link>
+    </Compile>
     <Compile Include="..\Framework\RunInSTAAttribute.cs">
       <Link>RunInSTAAtribute.cs</Link>
     </Compile>
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 431e8948cb0..c42fe36254b 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -30,7 +30,7 @@ namespace Microsoft.Build.UnitTests
      * is somewhat of a no-no for task assemblies.
      * 
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine7
+    internal sealed class MockEngine : IBuildEngine7, IBuildEngineInternal
     {
         private readonly object _lockObj = new object();  // Protects _log, _output
         private readonly ITestOutputHelper _output;
@@ -488,5 +488,7 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
             _objectCache.TryRemove(key, out object obj);
             return obj;
         }
+
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
     }
 }
diff --git a/src/Utilities.UnitTests/MockEngine.cs b/src/Utilities.UnitTests/MockEngine.cs
index 1538d27a0ae..89046cadfc8 100644
--- a/src/Utilities.UnitTests/MockEngine.cs
+++ b/src/Utilities.UnitTests/MockEngine.cs
@@ -25,7 +25,7 @@ namespace Microsoft.Build.UnitTests
      * is somewhat of a no-no for task assemblies.
      * 
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine3
+    internal sealed class MockEngine : IBuildEngine3, IBuildEngineInternal
     {
         private StringBuilder _log = new StringBuilder();
 
@@ -121,6 +121,8 @@ public void Reacquire()
         {
         }
 
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
+
         /// <summary>
         /// Assert that the log doesn't contain the given string.
         /// </summary>
diff --git a/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs b/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
index 801d669e44a..73570bc9992 100644
--- a/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
+++ b/src/Utilities.UnitTests/TrackedDependencies/MockEngine.cs
@@ -22,7 +22,7 @@ namespace Microsoft.Build.UnitTests.TrackedDependencies
      * is somewhat of a no-no for task assemblies.
      * 
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine2
+    internal sealed class MockEngine : IBuildEngine2, IBuildEngineInternal
     {
         private string _upperLog;
 
@@ -107,6 +107,8 @@ public bool BuildProjectFilesInParallel(
             bool useResultsCache,
             bool unloadProjectsOnCompletion) => false;
 
+        MessageImportance IBuildEngineInternal.MinimumRequiredMessageImportance => MessageImportance.Low;
+
         /// <summary>
         /// Assert that the log file contains the given string.
         /// Case insensitive.
