diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 008b026a03e..03270fbd576 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -837,15 +837,17 @@ private void GetFilesRecursive(
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,
             TaskOptions taskOptions)
         {
-#if NET6_0
+#if NET6_0_OR_GREATER
             // This is a pretty quick, simple check, but it misses some cases:
             // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A
-            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files
+            // If folder C contains file Foo.cs and folder D, and folder D contains a symlink pointing to folder C, calling GetFilesRecursive and
+            // passing in folder D would currently find Foo.cs, whereas this would make us miss it.
             // and most obviously, frameworks other than net6.0
             // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,
             // that we had not followed it previously. The third would require a more involved P/invoke-style fix.
-            DirectoryInfo baseDirectoryInfo = new(recursionState.BaseDirectory);
-            if (baseDirectoryInfo.LinkTarget is not null && baseDirectoryInfo.FullName.Contains(baseDirectoryInfo.LinkTarget))
+            // These issues should ideally be resolved as part of #703
+            FileSystemInfo linkTarget = Directory.ResolveLinkTarget(recursionState.BaseDirectory, returnFinalTarget: true);
+            if (linkTarget is not null && recursionState.BaseDirectory.Contains(linkTarget.FullName))
             {
                 return;
             }
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index e83e0c56d1b..d9068d6ad64 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -67,6 +67,30 @@ public void GetFilesPatternMatching(string pattern, int expectedMatchCount)
             fileMatches.Length.ShouldBe(expectedMatchCount, $"Matches: '{String.Join("', '", fileMatches)}'");
         }
 
+#if NET6_0_OR_GREATER
+        [Fact]
+        // Please provide a better name for this test.
+        public void DoNotFollowRecursiveSymlinks()
+        {
+            TransientTestFolder testFolder = _env.CreateFolder();
+            TransientTestFile file = _env.CreateFile(testFolder, "Foo.cs");
+            string symlinkPath = Path.Combine(testFolder.Path, "mySymlink");
+            try
+            {
+                File.CreateSymbolicLink(symlinkPath, testFolder.Path);
+                string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, "**").FileList;
+                fileMatches.Length.ShouldBe(1);
+            }
+            finally
+            {
+                if (File.Exists(symlinkPath))
+                {
+                    File.Delete(symlinkPath);
+                }
+            }
+        }
+#endif
+
         [Theory]
         [MemberData(nameof(GetFilesComplexGlobbingMatchingInfo.GetTestData), MemberType = typeof(GetFilesComplexGlobbingMatchingInfo))]
         public void GetFilesComplexGlobbingMatching(GetFilesComplexGlobbingMatchingInfo info)
@@ -2077,7 +2101,7 @@ out bool isLegalFileSpec
             isLegalFileSpec.ShouldBe(expectedIsLegalFileSpec);
         }
 
-        #region Support functions.
+#region Support functions.
 
         /// <summary>
         /// This support class simulates a file system.
@@ -2758,7 +2782,7 @@ bool shouldBeRecursive
             return match.isMatch;
         }
 
-        #endregion
+#endregion
 
         private class FileSystemAdapter : IFileSystem
         {
