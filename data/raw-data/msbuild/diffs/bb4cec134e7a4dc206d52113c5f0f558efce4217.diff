diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index d6c4a58df99..40402c16c48 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -29,9 +29,16 @@ public class ProjectGraphTests : IDisposable
                                                                         <InnerBuildProperty>{InnerBuildProperty}</InnerBuildProperty>
                                                                         <InnerBuildPropertyValues>InnerBuildProperties</InnerBuildPropertyValues>
                                                                         <InnerBuildProperties>a;b</InnerBuildProperties>
-                                                                     </PropertyGroup>
+                                                                     </PropertyGroup>";
+        private static readonly string ProjectReferenceTargetsWithCrosstargeting = @"<ItemGroup>
+                                                                                        <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
+                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
+                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
+                                                                                     </ItemGroup>";
+        private static string[] NonOuterBuildTargets = {"AHelperOuter", "AHelperInner", "A"};
+        private static string[] OuterBuildTargets = {"AHelperOuter"};
 
-";
+        private static readonly string OuterBuildSpecificationWithProjectReferenceTargets = OuterBuildSpecification + ProjectReferenceTargetsWithCrosstargeting;
 
         public ProjectGraphTests(ITestOutputHelper outputHelper)
         {
@@ -648,6 +655,208 @@ public void GetTargetsListsShouldApplyDefaultTargetsOnlyToGraphRoots()
             }
         }
 
+        [Fact]
+        public void GetTargetListsUsesAllTargetsForNonCrosstargetingNodes()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithCrosstargeting).Path;
+                CreateProjectFile(env, 2);
+                
+                var projectGraph = new ProjectGraph(root1);
+
+                var dot = projectGraph.ToDot();
+
+                projectGraph.ProjectNodes.Count.ShouldBe(2);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new[] { "A" });
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBe(NonOuterBuildTargets);
+            }
+        }
+
+        [Fact]
+        public void GetTargetsListInnerBuildToInnerBuild()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                string outerBuildSpec = OuterBuildSpecificationWithProjectReferenceTargets +
+                        $@"<PropertyGroup>
+                            <{InnerBuildProperty}>a</{InnerBuildProperty}>
+                          </PropertyGroup>";
+
+                var root1 =
+                    CreateProjectFile(
+                        env,
+                        1,
+                        new[] {2},
+                        null,
+                        null,
+                        outerBuildSpec)
+                        .Path;
+                CreateProjectFile(
+                    env,
+                    2,
+                    null,
+                    null,
+                    null,
+                    outerBuildSpec);
+                
+                
+                var projectGraph = new ProjectGraph(root1);
+
+                var dot = projectGraph.ToDot();
+
+                projectGraph.ProjectNodes.Count.ShouldBe(2);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new[] { "A" });
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBe(NonOuterBuildTargets);
+            }
+        }
+
+        [Fact]
+        public void GetTargetListsFiltersTargetsForOuterAndInnerBuilds()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var root1 = CreateProjectFile(env, 1, new[] {2}, null, null, ProjectReferenceTargetsWithCrosstargeting).Path;
+                CreateProjectFile(env, 2, null, null, null, OuterBuildSpecificationWithProjectReferenceTargets);
+                
+                var projectGraph = new ProjectGraph(root1);
+
+                var dot = projectGraph.ToDot();
+
+                projectGraph.ProjectNodes.Count.ShouldBe(4);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+                var root = GetFirstNodeWithProjectNumber(projectGraph, 1);
+
+                var outerBuild = GetNodesWithProjectNumber(projectGraph, 2).First(IsOuterBuild);
+                var innerBuilds = GetNodesWithProjectNumber(projectGraph, 2).Where(IsInnerBuild).ToArray();
+
+                targetLists[root].ShouldBe(new[] { "A" });
+                targetLists[outerBuild].ShouldBe(OuterBuildTargets);
+
+                foreach (var innerBuild in innerBuilds)
+                {
+                    targetLists[innerBuild].ShouldBe(NonOuterBuildTargets);
+                }
+            }
+        }
+
+        [Fact]
+        public void GetTargetListsForComplexCrosstargetingGraph()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var root1 = CreateProjectFile(
+                    env,
+                    1,
+                    null,
+                    null,
+                    null,
+                    OuterBuildSpecificationWithProjectReferenceTargets +
+                    $@"<ItemGroup>
+                            <ProjectReference Include=`3.proj` Condition=`'$({InnerBuildProperty})'=='a'`/>
+
+                            <ProjectReference Include=`4.proj` Condition=`'$({InnerBuildProperty})'=='b'`/>
+                            <ProjectReference Include=`5.proj` Condition=`'$({InnerBuildProperty})'=='b'`/>
+                            <ProjectReference Include=`6.proj` Condition=`'$({InnerBuildProperty})'=='b'` Properties=`{InnerBuildProperty}=a`/>
+                       </ItemGroup>".Cleanup())
+                    .Path;
+
+                var root2 = CreateProjectFile(
+                    env,
+                    2,
+                    null,
+                    null,
+                    null,
+                    ProjectReferenceTargetsWithCrosstargeting +
+                    $@"<ItemGroup>
+                            <ProjectReference Include=`1.proj` Properties=`{InnerBuildProperty}=b`/>
+                            <ProjectReference Include=`4.proj`/>
+                            <ProjectReference Include=`5.proj`/>
+                       </ItemGroup>".Cleanup())
+                    .Path;
+
+                CreateProjectFile(
+                    env,
+                    3,
+                    null,
+                    null,
+                    null,
+                    OuterBuildSpecificationWithProjectReferenceTargets);
+
+                CreateProjectFile(
+                    env,
+                    4,
+                    new []{6},
+                    null,
+                    null,
+                    ProjectReferenceTargetsWithCrosstargeting);
+
+                CreateProjectFile(
+                    env,
+                    5,
+                    null,
+                    null,
+                    null,
+                    OuterBuildSpecificationWithProjectReferenceTargets +
+                    $@"
+                       <PropertyGroup>
+                            <{InnerBuildProperty}>a</{InnerBuildProperty}>
+                       </PropertyGroup>
+
+                       <ItemGroup>
+                            <ProjectReference Include=`3.proj` Properties=`{InnerBuildProperty}=a`/>
+                            <ProjectReference Include=`6.proj`/>
+                       </ItemGroup>".Cleanup());
+
+                CreateProjectFile(
+                    env,
+                    6,
+                    null,
+                    null,
+                    null,
+                    OuterBuildSpecificationWithProjectReferenceTargets);
+                
+                var projectGraph = new ProjectGraph(new[] {root1, root2});
+
+                var dot = projectGraph.ToDot();
+
+                projectGraph.ProjectNodes.Count.ShouldBe(12);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(new List<string>{"A"});
+
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+
+                AssertCrossTargetingNode(1, projectGraph, targetLists, new []{"A"}, NonOuterBuildTargets);
+                AssertCrossTargetingNode(3, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
+                AssertCrossTargetingNode(6, projectGraph, targetLists, OuterBuildTargets, NonOuterBuildTargets);
+
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBe(new []{"A"});
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 4)].ShouldBe(NonOuterBuildTargets);
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 5)].ShouldBe(NonOuterBuildTargets);
+            }
+
+            void AssertCrossTargetingNode(int projectNumber, ProjectGraph projectGraph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists, string[] outerBuildTargets, string[] nonOuterBuildTargets)
+            {
+                targetLists[GetNodesWithProjectNumber(projectGraph, projectNumber).First(IsOuterBuild)].ShouldBe(outerBuildTargets);
+
+                foreach (var innerBuild in GetNodesWithProjectNumber(projectGraph, projectNumber).Where(IsInnerBuild))
+                {
+                    targetLists[innerBuild].ShouldBe(nonOuterBuildTargets);
+                }
+            }
+        }
+
         [Fact]
         public void GetTargetListsDefaultTargetsAreExpanded()
         {
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 007abda8be4..0e3f4ab9228 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -187,7 +187,7 @@ public ProjectGraph(
 
             projectInstanceFactory = projectInstanceFactory ?? DefaultProjectInstanceFactory;
 
-            var sdkInfo = ProjectInterpretation.Instance;
+            _projectInterpretation = ProjectInterpretation.Instance;
 
             var entryPointConfigurationMetadata = new List<ConfigurationMetadata>();
 
@@ -201,7 +201,7 @@ public ProjectGraph(
                 entryPointConfigurationMetadata.Add(configurationMetadata);
             }
 
-            var (entryPointNodes, rootNodes, allNodes) = LoadGraph(entryPointConfigurationMetadata, projectCollection, projectInstanceFactory, sdkInfo);
+            var (entryPointNodes, rootNodes, allNodes) = LoadGraph(entryPointConfigurationMetadata, projectCollection, projectInstanceFactory, _projectInterpretation);
 
             EntryPointNodes = entryPointNodes;
             GraphRoots = rootNodes;
@@ -418,6 +418,7 @@ internal string ToDot(Func<ProjectGraphNode, string> nodeIdProvider)
         }
 
         private readonly Lazy<IReadOnlyCollection<ProjectGraphNode>> _projectNodesTopologicallySorted;
+        private ProjectInterpretation _projectInterpretation;
 
         private static IReadOnlyCollection<ProjectGraphNode> TopologicalSort(IReadOnlyCollection<ProjectGraphNode> graphRoots, IReadOnlyCollection<ProjectGraphNode> graphNodes)
         {
@@ -506,14 +507,17 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                 }
 
                 // Based on the entry points of this project, determine which targets to propagate down to project references.
-                var targetsToPropagate = DetermineTargetsToPropagate(node, requestedTargets);
+                var targetsToPropagate = ProjectInterpretation.TargetsToPropagate.FromProjectAndEntryTargets(node.ProjectInstance, requestedTargets);
 
                 // Queue the project references for visitation, if the edge hasn't already been traversed.
                 foreach (var projectReference in node.ProjectReferences)
                 {
+                    var applicableTargets = targetsToPropagate.GetApplicableTargets(projectReference.ProjectInstance);
+
                     var projectReferenceEdge = new ProjectGraphBuildRequest(
                         projectReference,
-                        ExpandDefaultTargets(targetsToPropagate, projectReference.ProjectInstance.DefaultTargets));
+                        ExpandDefaultTargets(applicableTargets, projectReference.ProjectInstance.DefaultTargets));
+
                     if (encounteredEdges.Add(projectReferenceEdge))
                     {
                         edgesToVisit.Enqueue(projectReferenceEdge);
@@ -654,7 +658,7 @@ private bool FindGraphNodes(
             ProjectCollection projectCollection,
             ConcurrentDictionary<ConfigurationMetadata, object> tasksInProgress,
             ProjectInstanceFactoryFunc projectInstanceFactory,
-            ProjectInterpretation sdkInfo,
+            ProjectInterpretation projectInterpretation,
             ConcurrentDictionary<ConfigurationMetadata, ProjectGraphNode> allParsedProjects,
             out List<Exception> exceptions)
         {
@@ -671,7 +675,7 @@ private bool FindGraphNodes(
                     {
                         var parsedProject = CreateNewNode(projectToEvaluate, projectCollection, projectInstanceFactory, allParsedProjects);
 
-                        foreach (var referenceConfig in sdkInfo.GetReferences(parsedProject.ProjectInstance))
+                        foreach (var referenceConfig in projectInterpretation.GetReferences(parsedProject.ProjectInstance))
                         {
                              /*todo: fix the following double check-then-act concurrency bug: one thread can pass the two checks, loose context,
                              meanwhile another thread passes the same checks with the same data and inserts its reference. The initial thread regains context
@@ -750,25 +754,6 @@ internal static string FormatCircularDependencyError(List<string> projectsInCycl
             return errorMessage.ToString();
         }
 
-        private static ImmutableList<string> DetermineTargetsToPropagate(ProjectGraphNode node, ImmutableList<string> entryTargets)
-        {
-            var targetsToPropagate = ImmutableList<string>.Empty;
-            var projectReferenceTargets = node.ProjectInstance.GetItems(ItemTypeNames.ProjectReferenceTargets);
-            foreach (var entryTarget in entryTargets)
-            {
-                foreach (var projectReferenceTarget in projectReferenceTargets)
-                {
-                    if (projectReferenceTarget.EvaluatedInclude.Equals(entryTarget, StringComparison.OrdinalIgnoreCase))
-                    {
-                        var targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
-                        targetsToPropagate = targetsToPropagate.AddRange(ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue));
-                    }
-                }
-            }
-
-            return targetsToPropagate;
-        }
-
         private static PropertyDictionary<ProjectPropertyInstance> CreatePropertyDictionary(IDictionary<string, string> properties)
         {
             PropertyDictionary<ProjectPropertyInstance> propertyDictionary;
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 4737f98718a..ffe8c6942d2 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -24,6 +24,8 @@ internal sealed class ProjectInterpretation
         private const string SetPlatformMetadataName = "SetPlatform";
         private const string SetTargetFrameworkMetadataName = "SetTargetFramework";
         private const string GlobalPropertiesToRemoveMetadataName = "GlobalPropertiesToRemove";
+        private const string ProjectReferenceTargetIsOuterBuildMetadataName = "OuterBuild";
+
         private static readonly char[] PropertySeparator = MSBuildConstants.SemicolonChar;
 
         public static ProjectInterpretation Instance = new ProjectInterpretation();
@@ -39,12 +41,6 @@ internal enum ProjectType
             OuterBuild, InnerBuild, NonCrossTargeting
         }
 
-        /// <summary>
-        /// 
-        /// </summary>
-        /// <param name="requesterConfig"></param>
-        /// <param name="requesterInstance"></param>
-        /// <returns></returns>
         public IEnumerable<ConfigurationMetadata> GetReferences(ProjectInstance requesterInstance)
         {
             IEnumerable<ProjectItemInstance> references;
@@ -69,10 +65,10 @@ public IEnumerable<ConfigurationMetadata> GetReferences(ProjectInstance requeste
 
             foreach (var projectReference in references)
             {
-                if (!string.IsNullOrEmpty(projectReference.GetMetadataValue(ToolsVersionMetadataName)))
+                if (!String.IsNullOrEmpty(projectReference.GetMetadataValue(ToolsVersionMetadataName)))
                 {
                     throw new InvalidOperationException(
-                        string.Format(
+                        String.Format(
                             CultureInfo.InvariantCulture,
                             ResourceUtilities.GetResourceString(
                                 "ProjectGraphDoesNotSupportProjectReferenceWithToolset"),
@@ -107,8 +103,8 @@ private static string GetInnerBuildPropertyValues(ProjectInstance project)
 
         internal static ProjectType GetProjectType(ProjectInstance project)
         {
-            var isOuterBuild = string.IsNullOrWhiteSpace(GetInnerBuildPropertyValue(project)) && !string.IsNullOrWhiteSpace(GetInnerBuildPropertyValues(project));
-            var isInnerBuild = !string.IsNullOrWhiteSpace(GetInnerBuildPropertyValue(project));
+            var isOuterBuild = String.IsNullOrWhiteSpace(GetInnerBuildPropertyValue(project)) && !String.IsNullOrWhiteSpace(GetInnerBuildPropertyValues(project));
+            var isInnerBuild = !String.IsNullOrWhiteSpace(GetInnerBuildPropertyValue(project));
 
             ErrorUtilities.VerifyThrow(!(isOuterBuild && isInnerBuild), $"A project cannot be an outer and inner build at the same time: ${project.FullPath}");
 
@@ -145,8 +141,8 @@ private static IEnumerable<ProjectItemInstance> GetInnerBuildReferences(ProjectI
             var globalPropertyName = GetInnerBuildPropertyName(outerBuild);
             var globalPropertyValues = GetInnerBuildPropertyValues(outerBuild);
 
-            ErrorUtilities.VerifyThrow(!string.IsNullOrWhiteSpace(globalPropertyName), "Must have an inner build property");
-            ErrorUtilities.VerifyThrow(!string.IsNullOrWhiteSpace(globalPropertyValues), "Must have values for the inner build property");
+            ErrorUtilities.VerifyThrow(!String.IsNullOrWhiteSpace(globalPropertyName), "Must have an inner build property");
+            ErrorUtilities.VerifyThrow(!String.IsNullOrWhiteSpace(globalPropertyValues), "Must have values for the inner build property");
 
             foreach (var globalPropertyValue in ExpressionShredder.SplitSemiColonSeparatedList(globalPropertyValues))
             {
@@ -190,7 +186,7 @@ ProjectItemInstance projectReference
                 var setPlatformString = projectReference.GetMetadataValue(SetPlatformMetadataName);
                 var setTargetFrameworkString = projectReference.GetMetadataValue(SetTargetFrameworkMetadataName);
 
-                if (!string.IsNullOrEmpty(setConfigurationString) || !string.IsNullOrEmpty(setPlatformString) || !string.IsNullOrEmpty(setTargetFrameworkString))
+                if (!String.IsNullOrEmpty(setConfigurationString) || !String.IsNullOrEmpty(setPlatformString) || !String.IsNullOrEmpty(setTargetFrameworkString))
                 {
                     newProperties = SplitPropertyNameValuePairs(
                         ItemMetadataNames.PropertiesMetadataName,
@@ -235,12 +231,12 @@ public GlobalPropertyPartsForMSBuildTask AddPropertyToUndefine(string propertyTo
         /// </summary>
         /// <remarks>
         ///     The behavior of this method matches the hardcoded behaviour of the msbuild task
-        ///     and the <paramref name="globalPropertyModifier"/> parameter can contain other mutations done at build time in targets / tasks
+        ///     and the <paramref name="globalPropertyModifiers"/> parameter can contain other mutations done at build time in targets / tasks
         /// </remarks>
         private static PropertyDictionary<ProjectPropertyInstance> GetGlobalPropertiesForItem(
             ProjectItemInstance projectReference,
             PropertyDictionary<ProjectPropertyInstance> requesterGlobalProperties,
-            IEnumerable<GlobalPropertiesModifier> globalPropertyModifier = null)
+            IEnumerable<GlobalPropertiesModifier> globalPropertyModifiers = null)
         {
             ErrorUtilities.VerifyThrowInternalNull(projectReference, nameof(projectReference));
             ErrorUtilities.VerifyThrowArgumentNull(requesterGlobalProperties, nameof(requesterGlobalProperties));
@@ -251,7 +247,7 @@ private static PropertyDictionary<ProjectPropertyInstance> GetGlobalPropertiesFo
 
             var defaultParts = new GlobalPropertyPartsForMSBuildTask(properties.ToImmutableDictionary(), additionalProperties.ToImmutableDictionary(), undefineProperties.ToImmutableList());
 
-            var globalPropertyParts = globalPropertyModifier?.Aggregate(defaultParts, (currentProperties, modifier) => modifier(currentProperties, projectReference)) ?? defaultParts;
+            var globalPropertyParts = globalPropertyModifiers?.Aggregate(defaultParts, (currentProperties, modifier) => modifier(currentProperties, projectReference)) ?? defaultParts;
 
             if (globalPropertyParts.AllEmpty())
             {
@@ -281,7 +277,7 @@ private static void MergeIntoPropertyDictionary(
 
         private static IReadOnlyDictionary<string, string> SplitPropertyNameValuePairs(string syntaxName, string propertyNameAndValuesString)
         {
-            if (string.IsNullOrEmpty(propertyNameAndValuesString))
+            if (String.IsNullOrEmpty(propertyNameAndValuesString))
             {
                 return ImmutableDictionary<string, string>.Empty;
             }
@@ -297,7 +293,7 @@ private static IReadOnlyDictionary<string, string> SplitPropertyNameValuePairs(s
             }
 
             throw new InvalidProjectFileException(
-                string.Format(
+                String.Format(
                     CultureInfo.InvariantCulture,
                     ResourceUtilities.GetResourceString("General.InvalidPropertyError"),
                     syntaxName,
@@ -306,7 +302,7 @@ private static IReadOnlyDictionary<string, string> SplitPropertyNameValuePairs(s
 
         private static IReadOnlyCollection<string> SplitPropertyNames(string propertyNamesString)
         {
-            if (string.IsNullOrEmpty(propertyNamesString))
+            if (String.IsNullOrEmpty(propertyNamesString))
             {
                 return ImmutableArray<string>.Empty;
             }
@@ -323,5 +319,69 @@ private static void RemoveFromPropertyDictionary(
                 properties.Remove(propertyName);
             }
         }
+
+        public readonly struct TargetsToPropagate
+        {
+            private readonly ImmutableList<string> _outerBuildTargets;
+            private readonly ImmutableList<string> _allTargets;
+
+            private TargetsToPropagate(ImmutableList<string> outerBuildTargets, ImmutableList<string> nonOuterBuildTargets)
+            {
+                _outerBuildTargets = outerBuildTargets;
+
+                // Since non outer builds act both as outer and inner builds, they need to implement both sets of targets
+                // Outer build targets go first because at build time outer builds are built before inner builds
+                _allTargets = outerBuildTargets.AddRange(nonOuterBuildTargets);
+            }
+
+            public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance project, ImmutableList<string> entryTargets)
+            {
+                var targetsForOuterBuild = new List<string>();
+                var targetsForInnerBuild = new List<string>();
+
+                var projectReferenceTargets = project.GetItems(ItemTypeNames.ProjectReferenceTargets);
+
+                foreach (var entryTarget in entryTargets)
+                {
+                    foreach (var projectReferenceTarget in projectReferenceTargets)
+                    {
+                        if (projectReferenceTarget.EvaluatedInclude.Equals(entryTarget, StringComparison.OrdinalIgnoreCase))
+                        {
+                            var targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
+
+                            var targetsAreForOuterBuild = projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName).Equals("true", StringComparison.OrdinalIgnoreCase);
+
+                            var targets = ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue).ToArray();
+
+                            if (targetsAreForOuterBuild)
+                            {
+                                targetsForOuterBuild.AddRange(targets);
+                            }
+                            else
+                            {
+                                targetsForInnerBuild.AddRange(targets);
+                            }
+                        }
+                    }
+                }
+
+                return new TargetsToPropagate(targetsForOuterBuild.ToImmutableList(), targetsForInnerBuild.ToImmutableList());
+            }
+
+            public ImmutableList<string> GetApplicableTargets(ProjectInstance project)
+            {
+                switch (GetProjectType(project))
+                {
+                    case ProjectType.InnerBuild:
+                        return _allTargets;
+                    case ProjectType.OuterBuild:
+                        return _outerBuildTargets;
+                    case ProjectType.NonCrossTargeting:
+                        return _allTargets;
+                    default:
+                        throw new ArgumentOutOfRangeException();
+                }
+            }
+        }
     }
 }
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index b9ed91c926c..1a923c0f9ec 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -148,16 +148,6 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.VisualStudioVersion.v*.Common.props" Condition="'$(VisualStudioVersion)' == ''" />
 
-  <!--
-    Properties for extension of ProjectReferenceTargets.
-    Append any current value which may have been provided in a Directory.Build.props since the intent was likely to append, not prepend.
-  -->
-  <PropertyGroup>
-    <ProjectReferenceTargetsForBuild>GetTargetFrameworks;.default;GetNativeManifest;GetCopyToOutputDirectoryItems;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
-    <ProjectReferenceTargetsForClean>GetTargetFrameworks;Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
-    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>
-  </PropertyGroup>
-
   <!-- 
          Only import the extension targets if we're actually in a 12.0 project here (rather than one we're attempting 
          to treat as 4.0) OR if the Dev11 Microsoft.Common.props don't exist.  If it's a 12.0 project we're redirecting 
diff --git a/src/Tasks/Microsoft.ManagedLanguages.targets b/src/Tasks/Microsoft.ManagedLanguages.targets
index 337c402e480..a9bea355b82 100644
--- a/src/Tasks/Microsoft.ManagedLanguages.targets
+++ b/src/Tasks/Microsoft.ManagedLanguages.targets
@@ -35,10 +35,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <DisableTransitiveProjectReferences Condition="'$(BuildProjectReferences)' != 'false'">true</DisableTransitiveProjectReferences>
    </PropertyGroup>
 
+  <!--
+    Properties for extension of ProjectReferenceTargets.
+    Append any current value which may have been provided in a Directory.Build.props since the intent was likely to append, not prepend.
+  -->
+  <PropertyGroup>
+    <ProjectReferenceTargetsForBuildInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>
+    <ProjectReferenceTargetsForBuild>.default;GetNativeManifest;GetCopyToOutputDirectoryItems;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>
+
+    <ProjectReferenceTargetsForCleanInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>
+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>
+
+    <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>
+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>
+  </PropertyGroup>
+
   <ItemGroup>
+      <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' " OuterBuild="true"/>
       <ProjectReferenceTargets Include="Build" Targets="$(ProjectReferenceTargetsForBuild)" Condition=" '$(ProjectReferenceTargetsForBuild)' != '' " />
-      <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuild)" Condition=" '$(ProjectReferenceTargetsForRebuild)' != '' " />
+
+      <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForCleanInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' " OuterBuild="true"/>
       <ProjectReferenceTargets Include="Clean" Targets="$(ProjectReferenceTargetsForClean)" Condition=" '$(ProjectReferenceTargetsForClean)' != '' " />
+
+      <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuildInOuterBuild)" Condition=" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' " />
+      <ProjectReferenceTargets Include="Rebuild" Targets="$(ProjectReferenceTargetsForRebuild)" Condition=" '$(ProjectReferenceTargetsForRebuild)' != '' " />
   </ItemGroup>
 
 </Project>
