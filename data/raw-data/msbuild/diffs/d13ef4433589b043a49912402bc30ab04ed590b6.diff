diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index ae8dfac6675..b069a4988d3 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -98,20 +98,18 @@ string IProperty.EvaluatedValueEscaped
             [DebuggerStepThrough]
             get
             {
-                if (IsEnvironmentProperty && this is ProjectPropertyNotXmlBacked notXmlBacked && notXmlBacked.loggingContext?.IsValid == true && !_loggedEnvProperty)
+                if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext?.IsValid == true && !environmentProperty._loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
-                    args.BuildEventContext = notXmlBacked.loggingContext.BuildEventContext;
-                    notXmlBacked.loggingContext.LogBuildEvent(args);
-                    _loggedEnvProperty = true;
+                    args.BuildEventContext = environmentProperty.loggingContext.BuildEventContext;
+                    environmentProperty.loggingContext.LogBuildEvent(args);
+                    environmentProperty._loggedEnvProperty = true;
                 }
 
                 return EvaluatedValueEscapedInternal;
             }
         }
 
-        private bool _loggedEnvProperty = false;
-
         /// <summary>
         /// Gets or sets the unevaluated property value.
         /// Updates the evaluated value in the project, although this is not sure to be correct until re-evaluation.
@@ -254,7 +252,8 @@ bool IEquatable<ProjectProperty>.Equals(ProjectProperty other)
         /// </summary>
         internal static ProjectProperty Create(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext = null)
         {
-            return new ProjectPropertyNotXmlBacked(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext);
+            return !isGlobalProperty && !mayBeReserved ? new EnvironmentDerivedProjectProperty(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext) :
+                new ProjectPropertyNotXmlBacked(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved);
         }
 
         /// <summary>
@@ -509,7 +508,6 @@ private class ProjectPropertyNotXmlBacked : ProjectProperty
             /// Name of the property.
             /// </summary>
             private readonly string _name;
-            internal LoggingContext loggingContext;
 
             /// <summary>
             /// Creates a property without backing XML.
@@ -517,7 +515,7 @@ private class ProjectPropertyNotXmlBacked : ProjectProperty
             /// This is ONLY to be used by the Evaluator (and Project.SetGlobalProperty) and ONLY for Global, Environment, and Built-in properties.
             /// All other properties originate in XML, and should have a backing XML object.
             /// </summary>
-            internal ProjectPropertyNotXmlBacked(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext)
+            internal ProjectPropertyNotXmlBacked(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved)
                 : base(project, evaluatedValueEscaped)
             {
                 ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
@@ -526,7 +524,6 @@ internal ProjectPropertyNotXmlBacked(Project project, string name, string evalua
                 ErrorUtilities.VerifyThrowArgument(mayBeReserved || !ReservedPropertyNames.IsReservedProperty(name), "OM_ReservedName", name);
 
                 _name = name;
-                this.loggingContext = loggingContext;
             }
 
             /// <summary>
@@ -645,5 +642,16 @@ public override bool IsImported
                 get { return false; }
             }
         }
+
+        private class EnvironmentDerivedProjectProperty : ProjectPropertyNotXmlBacked
+        {
+            internal bool _loggedEnvProperty = false;
+            internal LoggingContext loggingContext;
+
+            internal EnvironmentDerivedProjectProperty(Project project, string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext) : base(project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved)
+            {
+                this.loggingContext = loggingContext;
+            }
+        }
     }
 }
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 859c280a704..a22fc191aca 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -43,8 +43,6 @@ private ProjectPropertyInstance(string name, string escapedValue)
             _escapedValue = escapedValue;
         }
 
-        internal LoggingContext loggingContext;
-
         /// <summary>
         /// Name of the property
         /// </summary>
@@ -83,10 +81,6 @@ public string EvaluatedValue
         /// </summary>
         public virtual bool IsImmutable => false;
 
-        private bool _loggedEnvProperty = false;
-
-        internal bool IsEnvironmentProperty { get; set; }
-
         /// <summary>
         /// Evaluated value of the property, escaped as necessary.
         /// Setter assumes caller has protected global properties, if necessary.
@@ -96,12 +90,12 @@ string IProperty.EvaluatedValueEscaped
         {
             get
             {
-                if (IsEnvironmentProperty && loggingContext?.IsValid == true && !_loggedEnvProperty)
+                if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
-                    args.BuildEventContext = loggingContext.BuildEventContext;
-                    loggingContext.LogBuildEvent(args);
-                    _loggedEnvProperty = true;
+                    args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
+                    envProperty.loggingContext.LogBuildEvent(args);
+                    envProperty._loggedEnvProperty = true;
                 }
 
                 return _escapedValue;
@@ -233,7 +227,7 @@ internal static ProjectPropertyInstance Create(string name, string escapedValue,
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable, that.IsEnvironmentProperty);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable, that is EnvironmentDerivedProjectPropertyInstance);
         }
 
         /// <summary>
@@ -242,7 +236,7 @@ internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that, bool isImmutable)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable, that.IsEnvironmentProperty);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable, that is EnvironmentDerivedProjectPropertyInstance);
         }
 
         /// <summary>
@@ -316,9 +310,9 @@ private static ProjectPropertyInstance Create(string name, string escapedValue,
                 XmlUtilities.VerifyThrowProjectValidElementName(name, location);
             }
 
-            ProjectPropertyInstance instance = isImmutable ? new ProjectPropertyInstanceImmutable(name, escapedValue) : new ProjectPropertyInstance(name, escapedValue);
-            instance.IsEnvironmentProperty = isEnvironmentProperty;
-            instance.loggingContext = loggingContext;
+            ProjectPropertyInstance instance = isEnvironmentProperty ? new EnvironmentDerivedProjectPropertyInstance(name, escapedValue, loggingContext) :
+                isImmutable ? new ProjectPropertyInstanceImmutable(name, escapedValue) :
+                new ProjectPropertyInstance(name, escapedValue);
             return instance;
         }
 
@@ -347,5 +341,27 @@ internal ProjectPropertyInstanceImmutable(string name, string escapedValue)
             /// </remarks>
             public override bool IsImmutable => true;
         }
+
+        private class EnvironmentDerivedProjectPropertyInstance : ProjectPropertyInstance
+        {
+            internal EnvironmentDerivedProjectPropertyInstance(string name, string escapedValue, LoggingContext loggingContext)
+                : base(name, escapedValue)
+            {
+                this.loggingContext = loggingContext;
+            }
+
+            /// <summary>
+            /// Whether this object can be changed. An immutable object cannot be made mutable.
+            /// </summary>
+            /// <remarks>
+            /// The environment is captured at the start of the build, so environment-derived
+            /// properties can't change.
+            /// </remarks>
+            public override bool IsImmutable => true;
+
+            internal bool _loggedEnvProperty = false;
+
+            internal LoggingContext loggingContext;
+        }
     }
 }
