diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 50945b66975..d290353be2c 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -4,6 +4,8 @@
 
 using System;
 
+// TODO: See https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#viewport-positioning
+
 namespace Microsoft.Build.Logging.FancyLogger
 {
     public enum ANSIForegroundColor
@@ -68,6 +70,10 @@ public static string Color(string text, ANSIForegroundColor color)
         }
         public static class Cursor
         {
+            public static string GoToHome()
+            {
+                return "\x1b[H";
+            }
             public static string GoToPosition(int row, int column)
             {
                 return String.Format("\x1b[{0};{1}H", row, column);
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 038dd65bbc8..cc9743f39ac 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -47,10 +47,13 @@ public static LogLine WriteNewLine(string text)
             LogLine line = new LogLine(text);
             LogLines.Add(line.Id, line);
             Console.Write(
-                "\n" +
-                ANSIBuilder.Cursor.GoToPosition(lineNumber, 0) +
-                line.Text +
-                ANSIBuilder.Cursor.GoToPosition(lineNumber+1, 0)
+                "\n"
+                + ANSIBuilder.Cursor.GoToPosition(lineNumber, 0)
+                + line.Text
+                + "\x1bS"
+                + "\x1bS"
+                + "\x1bS"
+                + "\x1bS"
             );
             // Return line
             return line;
@@ -65,10 +68,10 @@ public static void WriteInLine(string text, int lineId)
                 line.Text = text;
                 // Write it
                 Console.Write(
-                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber, 0) +
-                    ANSIBuilder.Eraser.EraseCurrentLine() +
-                    "\r" + text +
-                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber + 1, 0)
+                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber, 0)
+                    + ANSIBuilder.Eraser.EraseCurrentLine()
+                    + "\r"
+                    + text
                 );
             }
         }
@@ -158,7 +161,7 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
                 LogLine nextLine = Log.WriteNewLine(
                     ANSIBuilder.Formatting.Dim("\t~~~") 
                 );
-                Log.WriteNewLine("");
+                // Log.WriteNewLine("");
             }
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
@@ -173,9 +176,9 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
                         ANSIBuilder.Formatting.Color("âœ“ " + e.TargetName, ANSIForegroundColor.Green)
                     , targetLineId);
                 }
-                Log.WriteInLine(
+                /*Log.WriteInLine(
                     ANSIBuilder.Eraser.EraseCurrentLine(), targetLineId+1
-                );
+                );*/
             }
         }
 
