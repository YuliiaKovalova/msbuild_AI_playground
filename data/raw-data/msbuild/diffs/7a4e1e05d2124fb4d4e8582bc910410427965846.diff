diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index fcbfa21ce36..ff4dfe95674 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -690,13 +690,12 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         #region IBuildEngine8 Members
 
         int runningTotal = 0;
+        bool implicitCoreUsed = false;
 
         public int? RequestCores(int requestedCores)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
-            int coresAcquiredBeforeMoreCoresGetAcquired = runningTotal;
-
             var coresAcquired = rms.RequestCores(requestedCores, _taskLoggingContext);
 
             if (coresAcquired.HasValue)
@@ -704,6 +703,14 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
                 runningTotal += coresAcquired.Value;
             }
 
+            if (!implicitCoreUsed && coresAcquired == 0)
+            {
+                // If we got nothing back from the actual system, pad it with the one implicit core
+                // you get just for running--that way we never block and always return > 1
+                implicitCoreUsed = true;
+                coresAcquired = 1;
+            }
+
             return coresAcquired;
         }
 
@@ -711,8 +718,15 @@ public void ReleaseCores(int coresToRelease)
         {
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
+            if (implicitCoreUsed)
+            {
+                coresToRelease -= 1;
+                implicitCoreUsed = false;
+            }
+
             if (coresToRelease >= 1)
             {
+
                 rms.ReleaseCores(coresToRelease, _taskLoggingContext);
                 runningTotal -= coresToRelease;
             }
@@ -723,6 +737,7 @@ internal void ReleaseAllCores()
             ReleaseCores(runningTotal);
 
             runningTotal = 0;
+            implicitCoreUsed = false;
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index ceb0ff367c3..6d5f84820a5 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -16,6 +16,7 @@ class ResourceManagerService : IBuildComponent
         ILoggingService? _loggingService;
 
         public int TotalNumberHeld = -1;
+        public int Count = 0;
 
         internal static IBuildComponent CreateComponent(BuildComponentType type)
         {
@@ -32,6 +33,8 @@ public void InitializeComponent(IBuildComponentHost host)
 
                 int resourceCount = host.BuildParameters.MaxNodeCount; // TODO: tweakability
 
+                Count = resourceCount;
+
                 _loggingService = host.LoggingService;
 
                 TotalNumberHeld = 0;
@@ -63,13 +66,10 @@ public void ShutdownComponent()
                 return null;
             }
 
-            int i = 0;
-
-            // First core gets a blocking wait: the user task wants to do *something*
-            s.WaitOne();
+            int i;
 
             // Keep requesting cores until we can't anymore, or we've gotten the number of cores we wanted.
-            for (i = 1; i < requestedCores; i++)
+            for (i = 0; i < requestedCores; i++)
             {
                 if (!s.WaitOne(0))
                 {
