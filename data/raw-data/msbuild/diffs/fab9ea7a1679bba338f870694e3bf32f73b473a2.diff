diff --git a/src/Framework/BuildErrorWithContentEventArgs.cs b/src/Framework/BuildErrorWithContentEventArgs.cs
new file mode 100644
index 00000000000..92a4a603099
--- /dev/null
+++ b/src/Framework/BuildErrorWithContentEventArgs.cs
@@ -0,0 +1,83 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+using Microsoft.Build.Shared;
+
+#nullable disable
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Arguments for error events with additional content
+    /// </summary>
+    // WARNING: marking a type [Serializable] without implementing
+    // ISerializable imposes a serialization contract -- it is a
+    // promise to never change the type's fields i.e. the type is
+    // immutable; adding new fields in the next version of the type
+    // without following certain special FX guidelines, can break both
+    // forward and backward compatibility
+    [Serializable]
+    public class BuildErrorWithContentEventArgs : BuildErrorEventArgs
+    {
+        public string AdditionalContentType { get; protected set; }
+        public string AdditionalContentText { get; protected set; }
+        public string AdditionalContentSimpleText { get; protected set; }
+
+        public BuildErrorWithContentEventArgs(
+            string subcategory,
+            string code,
+            string file,
+            int lineNumber,
+            int columnNumber,
+            int endLineNumber,
+            int endColumnNumber,
+            string message,
+            string helpKeyword,
+            string senderName,
+            string helpLink,
+            DateTime eventTimestamp,
+            string additionalContentType,
+            string additionalContentText,
+            string additionalContentSimpleText,
+            params object[] messageArgs)
+            : base(
+                subcategory,
+                code,
+                file,
+                lineNumber,
+                columnNumber,
+                endLineNumber,
+                endColumnNumber,
+                message,
+                helpKeyword,
+                senderName,
+                helpLink,
+                eventTimestamp,
+                messageArgs)
+        {
+            AdditionalContentType = additionalContentType;
+            AdditionalContentText = additionalContentText;
+            AdditionalContentSimpleText = additionalContentSimpleText;
+        }
+
+        internal override void CreateFromStream(BinaryReader reader, int version)
+        {
+            base.CreateFromStream(reader, version);
+
+            AdditionalContentType = reader.ReadByte() == 0 ? null : reader.ReadString();
+            AdditionalContentText = reader.ReadByte() == 0 ? null : reader.ReadString();
+            AdditionalContentSimpleText = reader.ReadByte() == 0 ? null : reader.ReadString();
+        }
+
+        internal override void WriteToStream(BinaryWriter writer)
+        {
+            base.WriteToStream(writer);
+
+            writer.WriteOptionalString(AdditionalContentType);
+            writer.WriteOptionalString(AdditionalContentText);
+            writer.WriteOptionalString(AdditionalContentSimpleText);
+        }
+    }
+}
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index f1b77f60fe9..858b988c10f 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -672,7 +672,7 @@ public void LogError(
             string message,
             params object[] messageArgs)
         {
-            LogError(subcategory, errorCode, helpKeyword, null, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, messageArgs);
+            LogError(subcategory, errorCode, helpKeyword, null, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, null, null, null, messageArgs);
         }
 
         /// <summary>
@@ -703,6 +703,44 @@ public void LogError(
             int endColumnNumber,
             string message,
             params object[] messageArgs)
+        {
+            LogError(subcategory, errorCode, helpKeyword, helpLink, file, lineNumber, columnNumber, endLineNumber, endColumnNumber, message, null, null, null, messageArgs);
+        }
+
+        /// <summary>
+        /// Logs an error using the specified string and other error details.
+        /// Thread safe.
+        /// </summary>
+        /// <param name="subcategory">Description of the error type (can be null).</param>
+        /// <param name="errorCode">The error code (can be null).</param>
+        /// <param name="helpKeyword">The help keyword for the host IDE (can be null).</param>
+        /// <param name="file">The path to the file containing the error (can be null).</param>
+        /// <param name="lineNumber">The line in the file where the error occurs (set to zero if not available).</param>
+        /// <param name="columnNumber">The column in the file where the error occurs (set to zero if not available).</param>
+        /// <param name="endLineNumber">The last line of a range of lines in the file where the error occurs (set to zero if not available).</param>
+        /// <param name="endColumnNumber">The last column of a range of columns in the file where the error occurs (set to zero if not available).</param>
+        /// <param name="message">The message string.</param>
+        /// <param name="helpLink">A link pointing to more information about the error.</param>
+        /// <param name="additionalContentType">The type of the additional content.</param>
+        /// <param name="additionalContentText">The additional content.</param>
+        /// <param name="additionalContentSimpleText">The additional content simplified for a text logger.</param>
+        /// <param name="messageArgs">Optional arguments for formatting the message string.</param>
+        /// <exception cref="ArgumentNullException">Thrown when <c>message</c> is null.</exception>
+        public void LogError(
+            string subcategory,
+            string errorCode,
+            string helpKeyword,
+            string helpLink,
+            string file,
+            int lineNumber,
+            int columnNumber,
+            int endLineNumber,
+            int endColumnNumber,
+            string message,
+            string additionalContentType,
+            string additionalContentText,
+            string additionalContentSimpleText,
+            params object[] messageArgs)
         {
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
@@ -722,20 +760,46 @@ public void LogError(
             // that gives the user something.
             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));
 
-            var e = new BuildErrorEventArgs(
-                    subcategory,
-                    errorCode,
-                    fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
-                    fillInLocation ? BuildEngine.LineNumberOfTaskNode : lineNumber,
-                    fillInLocation ? BuildEngine.ColumnNumberOfTaskNode : columnNumber,
-                    endLineNumber,
-                    endColumnNumber,
-                    message,
-                    helpKeyword,
-                    TaskName,
-                    helpLink,
-                    DateTime.UtcNow,
-                    messageArgs);
+            BuildErrorEventArgs e;
+
+            if (!string.IsNullOrEmpty(additionalContentType) && !string.IsNullOrEmpty(additionalContentText))
+            {
+                e = new BuildErrorWithContentEventArgs(
+                        subcategory,
+                        errorCode,
+                        fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
+                        fillInLocation ? BuildEngine.LineNumberOfTaskNode : lineNumber,
+                        fillInLocation ? BuildEngine.ColumnNumberOfTaskNode : columnNumber,
+                        endLineNumber,
+                        endColumnNumber,
+                        message,
+                        helpKeyword,
+                        TaskName,
+                        helpLink,
+                        DateTime.UtcNow,
+                        additionalContentType,
+                        additionalContentText,
+                        additionalContentSimpleText,
+                        messageArgs);
+            }
+            else
+            {
+                e = new BuildErrorEventArgs(
+                        subcategory,
+                        errorCode,
+                        fillInLocation ? BuildEngine.ProjectFileOfTaskNode : file,
+                        fillInLocation ? BuildEngine.LineNumberOfTaskNode : lineNumber,
+                        fillInLocation ? BuildEngine.ColumnNumberOfTaskNode : columnNumber,
+                        endLineNumber,
+                        endColumnNumber,
+                        message,
+                        helpKeyword,
+                        TaskName,
+                        helpLink,
+                        DateTime.UtcNow,
+                        messageArgs);
+            }
+
             BuildEngine.LogErrorEvent(e);
 
             HasLoggedErrors = true;
