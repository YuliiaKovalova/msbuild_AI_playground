diff --git a/MSBuild.Dev.slnf b/MSBuild.Dev.slnf
index 39e25ebb5a8..79c1a4edfdf 100644
--- a/MSBuild.Dev.slnf
+++ b/MSBuild.Dev.slnf
@@ -9,13 +9,13 @@
       "src\\Framework\\Microsoft.Build.Framework.csproj",
       "src\\MSBuild.UnitTests\\Microsoft.Build.CommandLine.UnitTests.csproj",
       "src\\MSBuild\\MSBuild.csproj",
+      "src\\StringTools\\StringTools.csproj",
       "src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj",
       "src\\Tasks\\Microsoft.Build.Tasks.csproj",
+      "src\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj",
       "src\\Utilities.UnitTests\\Microsoft.Build.Utilities.UnitTests.csproj",
       "src\\Utilities\\Microsoft.Build.Utilities.csproj",
-      "src\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj",
-      "src\\StringTools\\StringTools.csproj",
-      "src\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj"
+      "src\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj"
     ]
   }
 }
\ No newline at end of file
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index f76be164ee9..08aebd65ce2 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -75,14 +75,7 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         {
             if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
             {
-                if (tracingEventArgs.isInfraTracing)
-                {
-                    _statsInfra.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
-                }
-                else
-                {
-                    _statsAnalyzers.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
-                }
+                _statsAnalyzers.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
             }
             else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)
             {
@@ -91,7 +84,6 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         }
     }
 
-    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();
     private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();
 
     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
@@ -106,19 +98,35 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         if (_areStatsEnabled)
         {
             _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);
-            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);
-
             LogAnalyzerStats(loggingContext);
         }
     }
     
     private void LogAnalyzerStats(LoggingContext loggingContext)
     {
+        string infraStatPrefix = "infrastructureStat_";
+
+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();
+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();
+
+        foreach (var stat in _statsAnalyzers)
+        {
+            if (stat.Key.StartsWith(infraStatPrefix))
+            {
+                string newKey = stat.Key.Replace(infraStatPrefix, string.Empty);
+                infraStats[newKey] = stat.Value;
+            }
+            else
+            {
+                analyzerStats[stat.Key] = stat.Value;
+            }
+        }
+
         loggingContext.LogCommentFromText(MessageImportance.High, $"BuildCheck run times{Environment.NewLine}");
-        string infraData = buildStatsTable("Infrastructure run times", _statsInfra);
+        string infraData = buildStatsTable("Infrastructure run times", infraStats);
         loggingContext.LogCommentFromText(MessageImportance.High, infraData);
 
-        string analyzerData = buildStatsTable("Analyzer run times", _statsAnalyzers);
+        string analyzerData = buildStatsTable("Analyzer run times", analyzerStats);
         loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 0d163503de8..3414ba0033e 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -303,17 +303,7 @@ public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
             return _tracingReporter.TracingStats;
         }
 
-        public Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats()
-        {
-            Dictionary<string, TimeSpan> infraTime = new Dictionary<string, TimeSpan>
-            {
-                { "analyzerAcquisitionTime", _tracingReporter.analyzerAcquisitionTime },
-                { "analyzerSetDataSourceTime", new TimeSpan(_tracingReporter.analyzerSetDataSourceTime) },
-                { "newProjectAnalyzersTime", new TimeSpan(_tracingReporter.newProjectAnalyzersTime) }
-            };
-
-            return infraTime;
-        }
+        
 
         public void FinalizeProcessing(LoggingContext loggingContext)
         {
@@ -322,14 +312,19 @@ public void FinalizeProcessing(LoggingContext loggingContext)
                 // We do not want to send tracing stats from in-proc node
                 return;
             }
+            string infraStatPrefix = "infrastructureStat_";
+
+            var analyzerEventStats = CreateAnalyzerTracingStats();
+            var infraStats = new Dictionary<string, TimeSpan>() {
+                { $"{infraStatPrefix}analyzerAcquisitionTime", _tracingReporter.analyzerAcquisitionTime },
+                { $"{infraStatPrefix}analyzerSetDataSourceTime", new TimeSpan(_tracingReporter.analyzerSetDataSourceTime) },
+                { $"{infraStatPrefix}newProjectAnalyzersTime", new TimeSpan(_tracingReporter.newProjectAnalyzersTime) }
+            };
+            analyzerEventStats.Merge(infraStats, (span1, span2) => span1 + span2);
 
             BuildCheckTracingEventArgs analyzerEventArg =
-                new(CreateAnalyzerTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
+                new(analyzerEventStats) { BuildEventContext = loggingContext.BuildEventContext };
             loggingContext.LogBuildEvent(analyzerEventArg);
-
-            BuildCheckTracingEventArgs infraEventStats =
-                new(CreateBuildCheckInfraTracingStats()) { BuildEventContext = loggingContext.BuildEventContext };
-            loggingContext.LogBuildEvent(infraEventStats);
         }
 
         public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext,
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 36d6ed04813..1aeac314922 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -36,7 +36,6 @@ void ProcessEvaluationFinishedEventArgs(
     void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
 
     Dictionary<string, TimeSpan> CreateAnalyzerTracingStats();
-    Dictionary<string, TimeSpan> CreateBuildCheckInfraTracingStats();
 
     void FinalizeProcessing(LoggingContext loggingContext);
 
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 81c8fa174ad..106754be327 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -20,8 +20,6 @@ public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> trac
     internal BuildCheckTracingEventArgs() : this(new Dictionary<string, TimeSpan>())
     { }
 
-    internal bool isInfraTracing = false;
-
     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;
 
     internal override void WriteToStream(BinaryWriter writer)
