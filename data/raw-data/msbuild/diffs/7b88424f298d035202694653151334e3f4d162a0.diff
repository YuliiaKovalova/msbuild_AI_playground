diff --git a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
index bb3545a838c..a4b348dfc79 100644
--- a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
@@ -19,12 +19,16 @@ public class OpenTelemetryManagerTests : IDisposable
         private readonly string? _originalMsBuildTelemetryOptOut;
         private readonly string? _originalSampleRateOverride;
 
+        private const string TelemetryFxOptoutEnvVarName = "MSBUILD_TELEMETRY_OPTOUT";
+        private const string DotnetOptOut = "DOTNET_CLI_TELEMETRY_OPTOUT";
+        private const string TelemetrySampleRateOverrideEnvVarName = "MSBUILD_TELEMETRY_SAMPLE_RATE";
+
         public OpenTelemetryManagerTests()
         {
             // Capture existing env vars
-            _originalDotnetOptOut = Environment.GetEnvironmentVariable(TelemetryConstants.DotnetOptOut);
-            _originalMsBuildTelemetryOptOut = Environment.GetEnvironmentVariable(TelemetryConstants.TelemetryFxOptoutEnvVarName);
-            _originalSampleRateOverride = Environment.GetEnvironmentVariable(TelemetryConstants.TelemetrySampleRateOverrideEnvVarName);
+            _originalDotnetOptOut = Environment.GetEnvironmentVariable(DotnetOptOut);
+            _originalMsBuildTelemetryOptOut = Environment.GetEnvironmentVariable(TelemetryFxOptoutEnvVarName);
+            _originalSampleRateOverride = Environment.GetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName);
 
             // Ensure a clean manager state before each test
             ResetManagerState();
@@ -33,19 +37,19 @@ public OpenTelemetryManagerTests()
         public void Dispose()
         {
             // Restore environment variables
-            Environment.SetEnvironmentVariable(TelemetryConstants.DotnetOptOut, _originalDotnetOptOut);
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetryFxOptoutEnvVarName, _originalMsBuildTelemetryOptOut);
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetrySampleRateOverrideEnvVarName, _originalSampleRateOverride);
+            Environment.SetEnvironmentVariable(DotnetOptOut, _originalDotnetOptOut);
+            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, _originalMsBuildTelemetryOptOut);
+            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, _originalSampleRateOverride);
 
             // Ensure manager is reset after each test
             ResetManagerState();
         }
 
         [Theory]
-        [InlineData(TelemetryConstants.DotnetOptOut, "true")]
-        [InlineData(TelemetryConstants.TelemetryFxOptoutEnvVarName, "true")]
-        [InlineData(TelemetryConstants.DotnetOptOut, "1")]
-        [InlineData(TelemetryConstants.TelemetryFxOptoutEnvVarName, "1")]
+        [InlineData(DotnetOptOut, "true")]
+        [InlineData(TelemetryFxOptoutEnvVarName, "true")]
+        [InlineData(DotnetOptOut, "1")]
+        [InlineData(TelemetryFxOptoutEnvVarName, "1")]
         public void Initialize_ShouldSetStateToOptOut_WhenOptOutEnvVarIsTrue(string optoutvar, string value)
         {
             // Arrange
@@ -65,11 +69,11 @@ public void Initialize_ShouldSetStateToUnsampled_WhenNoOverrideOnNetCore()
         {
 
             // Clear any override that might have existed
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetrySampleRateOverrideEnvVarName, null);
+            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, null);
 
             // Also ensure we are not opting out
-            Environment.SetEnvironmentVariable(TelemetryConstants.DotnetOptOut, "false");
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetryFxOptoutEnvVarName, "false");
+            Environment.SetEnvironmentVariable(DotnetOptOut, "false");
+            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, "false");
 
             OpenTelemetryManager.Instance.Initialize(isStandalone: false);
 
@@ -86,9 +90,9 @@ public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenR
         {
 
             // Arrange
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetryFxOptoutEnvVarName, "false");
-            Environment.SetEnvironmentVariable(TelemetryConstants.DotnetOptOut, "false");
-            Environment.SetEnvironmentVariable(TelemetryConstants.TelemetrySampleRateOverrideEnvVarName, "1.0");
+            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, "false");
+            Environment.SetEnvironmentVariable(DotnetOptOut, "false");
+            Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, "1.0");
 
             // Act
             OpenTelemetryManager.Instance.Initialize(isStandalone: standalone);
@@ -123,7 +127,7 @@ public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenR
         public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
         {
             // Arrange
-            Environment.SetEnvironmentVariable(TelemetryConstants.DotnetOptOut, "true");
+            Environment.SetEnvironmentVariable(DotnetOptOut, "true");
 
             // Act #1
             OpenTelemetryManager.Instance.Initialize(isStandalone: true);
@@ -131,7 +135,7 @@ public void Initialize_ShouldNoOp_WhenCalledMultipleTimes()
 
             // Act #2
             // Try to re-initialize with different env var settings
-            Environment.SetEnvironmentVariable(TelemetryConstants.DotnetOptOut, null);
+            Environment.SetEnvironmentVariable(DotnetOptOut, null);
             OpenTelemetryManager.Instance.Initialize(isStandalone: true);
             var secondState = GetTelemetryState(OpenTelemetryManager.Instance);
 
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index b31edfef74b..58a69256285 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -26,10 +26,7 @@
     
     <!-- Telemetry in Framework-->
     <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.Collector"/>
-    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions">
-      <!-- Give the client extensions package a custom alias to avoid VS Telemetry collisions. -->
-      <Aliases>clientext</Aliases>
-    </PackageReference>
+    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions"/>
     <PackageReference Include="OpenTelemetry" />
     <PackageReference Include="Microsoft.Extensions.Primitives" />
   </ItemGroup>
diff --git a/src/Framework/Telemetry/ActivityExtensions.cs b/src/Framework/Telemetry/ActivityExtensions.cs
index 27fdd080f8f..b2e0f34a9ca 100644
--- a/src/Framework/Telemetry/ActivityExtensions.cs
+++ b/src/Framework/Telemetry/ActivityExtensions.cs
@@ -1,12 +1,8 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-#if NETFRAMEWORK
-extern alias clientext;   // for Microsoft.VisualStudio.OpenTelemetry.ClientExtensions
-#else
 using System.Security.Cryptography;
 using System.Text;
-#endif
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -65,15 +61,10 @@ public static Activity WithStartTime(this Activity activity, DateTime? startTime
         /// </summary>
         private static object GetHashed(object value)
         {
-#if NETFRAMEWORK
-            return new clientext::Microsoft.VisualStudio.Telemetry.TelemetryHashedProperty(value);
-#else
             return Sha256Hasher.Hash(value.ToString() ?? "");
-#endif
         }
 
         // https://github.com/dotnet/sdk/blob/8bd19a2390a6bba4aa80d1ac3b6c5385527cc311/src/Cli/Microsoft.DotNet.Cli.Utils/Sha256Hasher.cs + workaround for netstandard2.0
-#if NET || NETSTANDARD2_0_OR_GREATER
         private static class Sha256Hasher
         {
             /// <summary>
@@ -113,6 +104,5 @@ public static string HashWithNormalizedCasing(string text)
                 return Hash(text.ToUpperInvariant());
             }
         }
-#endif
     }
 }
diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 5171ee40f79..bd55eff1883 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -1,10 +1,8 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 #if NETFRAMEWORK
-extern alias clientext;
-
-using clientext::Microsoft.VisualStudio.OpenTelemetry.ClientExtensions;
-using clientext::Microsoft.VisualStudio.OpenTelemetry.ClientExtensions.Exporters;
+using Microsoft.VisualStudio.OpenTelemetry.ClientExtensions;
+using Microsoft.VisualStudio.OpenTelemetry.ClientExtensions.Exporters;
 using Microsoft.VisualStudio.OpenTelemetry.Collector.Interfaces;
 using Microsoft.VisualStudio.OpenTelemetry.Collector.Settings;
 using OpenTelemetry;
@@ -194,16 +192,14 @@ public void Shutdown()
         /// <summary>
         /// Determines if the user has explicitly opted out of telemetry.
         /// </summary>
-        private bool IsOptOut() =>
-            IsEnvVarTrue(TelemetryConstants.TelemetryFxOptoutEnvVarName) ||
-            IsEnvVarTrue(TelemetryConstants.DotnetOptOut);
+        private bool IsOptOut() => Traits.Instance.FrameworkTelemetryOptOut || Traits.Instance.SdkTelemetryOptOut;
 
         /// <summary>
         /// Determines if telemetry should be initialized based on sampling and environment variable overrides.
         /// </summary>
         private bool IsSampled()
         {
-            double? overrideRate = ReadDoubleEnvVar(TelemetryConstants.TelemetrySampleRateOverrideEnvVarName);
+            double? overrideRate = Traits.Instance.TelemetrySampleRateOverride;
             if (overrideRate.HasValue)
             {
                 _sampleRate = overrideRate.Value;
@@ -216,30 +212,9 @@ private bool IsSampled()
 #endif
             }
 
-            // Simple random sampling, this method is called 
+            // Simple random sampling, this method is called once, no need to save the Random instance.
             Random random = new();
             return random.NextDouble() < _sampleRate;
         }
-
-        /// <summary>
-        /// Parses a double environment variable, if present.
-        /// </summary>
-        private double? ReadDoubleEnvVar(string name)
-        {
-            string? sampleRateString =
-                Environment.GetEnvironmentVariable(name);
-            return double.TryParse(sampleRateString, NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture.NumberFormat, out double result) ? result : null;
-        }
-
-        /// <summary>
-        /// Evaluates if an environment variable is set to "1" or "true".
-        /// </summary>
-        private bool IsEnvVarTrue(string name)
-        {
-            string? value = Environment.GetEnvironmentVariable(name);
-            return value != null &&
-                   (value.Equals("1", StringComparison.OrdinalIgnoreCase) ||
-                    value.Equals("true", StringComparison.OrdinalIgnoreCase));
-        }
     }
 }
diff --git a/src/Framework/Telemetry/TelemetryConstants.cs b/src/Framework/Telemetry/TelemetryConstants.cs
index 8c6cca93576..9880c6f919a 100644
--- a/src/Framework/Telemetry/TelemetryConstants.cs
+++ b/src/Framework/Telemetry/TelemetryConstants.cs
@@ -32,23 +32,6 @@ internal static class TelemetryConstants
     /// </summary>
     public const string VSMajorVersion = "17.0";
 
-    /// <summary>
-    /// Opt out by setting this environment variable to "1" or "true", mirroring
-    /// https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry
-    /// </summary>
-    public const string DotnetOptOut = "DOTNET_CLI_TELEMETRY_OPTOUT";
-
-    /// <summary>
-    /// Variable controlling opt out at the level of not initializing telemetry infrastructure. Set to "1" or "true" to opt out.
-    /// </summary>
-    public const string TelemetryFxOptoutEnvVarName = "MSBUILD_TELEMETRY_OPTOUT";
-
-    /// <summary>
-    /// Overrides sample rate for all namespaces. 
-    /// In core, OTel infrastructure is not initialized by default. Set to a nonzero value to opt in.
-    /// </summary>
-    public const string TelemetrySampleRateOverrideEnvVarName = "MSBUILD_TELEMETRY_SAMPLE_RATE";
-
     /// <summary>
     /// Sample rate for the default namespace.
     /// 1:25000 gives us sample size of sufficient confidence with the assumption we collect the order of 1e7 - 1e8 events per day.
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index 9180690cd73..f597c58e5b4 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -4,8 +4,6 @@
 using System;
 using System.Globalization;
 
-#nullable disable
-
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -36,7 +34,7 @@ public Traits()
 
         public EscapeHatches EscapeHatches { get; }
 
-        internal readonly string MSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION");
+        internal readonly string? MSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION");
 
         /// <summary>
         /// Do not expand wildcards that match a certain pattern
@@ -67,7 +65,7 @@ public Traits()
         /// <summary>
         /// Allow the user to specify that two processes should not be communicating via an environment variable.
         /// </summary>
-        public static readonly string MSBuildNodeHandshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
+        public static readonly string? MSBuildNodeHandshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
 
         /// <summary>
         /// Override property "MSBuildRuntimeType" to "Full", ignoring the actual runtime type of MSBuild.
@@ -134,6 +132,16 @@ public Traits()
 
         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
 
+
+        /// <summary>
+        /// Variables controlling opt out at the level of not initializing telemetry infrastructure. Set to "1" or "true" to opt out.
+        /// mirroring
+        /// https://learn.microsoft.com/en-us/dotnet/core/tools/telemetry
+        /// </summary>
+        public bool SdkTelemetryOptOut = IsEnvVarOneOrTrue("DOTNET_CLI_TELEMETRY_OPTOUT");
+        public bool FrameworkTelemetryOptOut = IsEnvVarOneOrTrue("MSBUILD_TELEMETRY_OPTOUT");
+        public double? TelemetrySampleRateOverride = ParseDoubleFromEnvironmentVariable("MSBUILD_TELEMETRY_SAMPLE_RATE");
+
         public static void UpdateFromEnvironment()
         {
             // Re-create Traits instance to update values in Traits according to current environment.
@@ -149,6 +157,21 @@ private static int ParseIntFromEnvironmentVariableOrDefault(string environmentVa
                 ? result
                 : defaultValue;
         }
+
+        private static double? ParseDoubleFromEnvironmentVariable(string environmentVariable)
+        {
+            return double.TryParse(Environment.GetEnvironmentVariable(environmentVariable), out double result)
+                ? result
+                : null;
+        }
+
+        private static bool IsEnvVarOneOrTrue(string name)
+        {
+            string? value = Environment.GetEnvironmentVariable(name);
+            return value != null &&
+                   (value.Equals("1", StringComparison.OrdinalIgnoreCase) ||
+                    value.Equals("true", StringComparison.OrdinalIgnoreCase));
+        }
     }
 
     internal class EscapeHatches
@@ -423,7 +446,6 @@ public bool UnquoteTargetSwitchParameters
             }
         }
 
-
         private static bool? ParseNullableBoolFromEnvironmentVariable(string environmentVariable)
         {
             var value = Environment.GetEnvironmentVariable(environmentVariable);
@@ -539,7 +561,7 @@ internal static void ThrowInternalError(string message)
         /// <remarks>
         /// Clone from ErrorUtilities which isn't available in Framework.
         /// </remarks>
-        internal static void ThrowInternalError(string message, params object[] args)
+        internal static void ThrowInternalError(string message, params object?[] args)
         {
             throw new InternalErrorException(FormatString(message, args));
         }
@@ -558,7 +580,7 @@ internal static void ThrowInternalError(string message, params object[] args)
         /// <remarks>
         /// Clone from ResourceUtilities which isn't available in Framework.
         /// </remarks>
-        internal static string FormatString(string unformatted, params object[] args)
+        internal static string FormatString(string unformatted, params object?[] args)
         {
             string formatted = unformatted;
 
@@ -568,7 +590,7 @@ internal static string FormatString(string unformatted, params object[] args)
 #if DEBUG
                 // If you accidentally pass some random type in that can't be converted to a string,
                 // FormatResourceString calls ToString() which returns the full name of the type!
-                foreach (object param in args)
+                foreach (object? param in args)
                 {
                     // Check it has a real implementation of ToString() and the type is not actually System.String
                     if (param != null)
