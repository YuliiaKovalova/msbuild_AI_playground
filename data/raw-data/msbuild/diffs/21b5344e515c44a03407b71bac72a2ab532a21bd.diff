diff --git a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
index 9ff46e0e5cb..35b693cc9ee 100644
--- a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
+++ b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
@@ -209,7 +209,23 @@ public byte[] ReadBytes(int count)
                 return Array.Empty<byte>();
             }
 
-            var result = new byte[count];
+            // Avoid an allocation if the current buffer is large enough.
+            byte[] result;
+            if (count < this.bufferCapacity)
+            {
+                if (this.bufferOffset > 0)
+                {
+                    // content to the start of the buffer.
+                    LoadBuffer();
+                }
+
+                result = this.buffer;
+            }
+            else
+            {
+                result = new byte[count];
+            }
+
             Array.Copy(buffer, bufferOffset, result, 0, count);
             bufferOffset += count;
             baseStreamPosition += count;
diff --git a/src/Shared/BinaryWriterExtensions.cs b/src/Shared/BinaryWriterExtensions.cs
index 8f954991cb8..449746a96b7 100644
--- a/src/Shared/BinaryWriterExtensions.cs
+++ b/src/Shared/BinaryWriterExtensions.cs
@@ -55,37 +55,38 @@ public static void WriteTimestamp(this BinaryWriter writer, DateTime timestamp)
 #if !TASKHOST
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
 #endif
-        public static void Write7BitEncodedInt(this BinaryWriter writer, int value, byte[]? buffer = null)
+        public static void Write7BitEncodedInt(this BinaryWriter writer, int value, byte[] buffer)
         {
-            if (buffer == null)
+            // Write out an int 7 bits at a time.  The high bit of the byte,
+            // when on, tells reader to continue reading more bytes.
+            int index = 0;
+            uint v = (uint)value;   // support negative numbers
+            while (v >= 0x80)
             {
-                // Write out an int 7 bits at a time.  The high bit of the byte,
-                // when on, tells reader to continue reading more bytes.
-                uint v = (uint)value;   // support negative numbers
-                while (v >= 0x80)
-                {
-                    writer.Write((byte)(v | 0x80));
-                    v >>= 7;
-                }
-
-                writer.Write((byte)v);
-                return;
+                buffer[index++] = (byte)(v | 0x80);
+                v >>= 7;
             }
-            else
-            {
-                // Write out an int 7 bits at a time.  The high bit of the byte,
-                // when on, tells reader to continue reading more bytes.
-                int index = 0;
-                uint v = (uint)value;   // support negative numbers
-                while (v >= 0x80)
-                {
-                    buffer[index++] = (byte)(v | 0x80);
-                    v >>= 7;
-                }
 
-                buffer[index++] = (byte)v;
-                writer.Write(buffer, 0, index);
+            buffer[index++] = (byte)v;
+            writer.Write(buffer, 0, index);
+        }
+
+#if !TASKHOST
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+#endif
+        public static void Write7BitEncodedInt(this BinaryWriter writer, int value)
+        {
+            // Write out an int 7 bits at a time.  The high bit of the byte,
+            // when on, tells reader to continue reading more bytes.
+            uint v = (uint)value;   // support negative numbers
+            while (v >= 0x80)
+            {
+                writer.Write((byte)(v | 0x80));
+                v >>= 7;
             }
+
+            writer.Write((byte)v);
+            return;
         }
 
 #if !TASKHOST
