diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 05652310c85..1cd14fdd449 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -7,8 +7,6 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -98,9 +96,9 @@ public override int GetHashCode()
         /// Override Equals so that identical
         /// fields imply equal objects.
         /// </summary>
-        public override bool Equals(object obj)
+        public override bool Equals(object? obj)
         {
-            IElementLocation that = obj as IElementLocation;
+            IElementLocation? that = obj as IElementLocation;
 
             if (that == null)
             {
@@ -151,7 +149,7 @@ void ITranslatable.Translate(ITranslator translator)
         /// </summary>
         internal static ElementLocation FactoryForDeserialization(ITranslator translator)
         {
-            string file = null;
+            string? file = null;
             int line = 0;
             int column = 0;
             translator.Translate(ref file);
@@ -180,7 +178,7 @@ internal static ElementLocation Create(string file)
         /// In AG there are 600 locations that have a file but zero line and column.
         /// In theory yet another derived class could be made for these to save 4 bytes each.
         /// </remarks>
-        internal static ElementLocation Create(string file, int line, int column)
+        internal static ElementLocation Create(string? file, int line, int column)
         {
             if (string.IsNullOrEmpty(file) && line == 0 && column == 0)
             {
@@ -247,7 +245,7 @@ private class RegularElementLocation : ElementLocation
             /// Numerical values must be 1-based, non-negative; 0 indicates unknown
             /// File may be null, indicating the file was not loaded from disk.
             /// </summary>
-            internal RegularElementLocation(string file, int line, int column)
+            internal RegularElementLocation(string? file, int line, int column)
             {
                 ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(file, nameof(file));
                 ErrorUtilities.VerifyThrow(line > -1 && column > -1, "Use zero for unknown");
@@ -323,7 +321,7 @@ private class SmallElementLocation : ElementLocation
             /// Numerical values must be 1-based, non-negative; 0 indicates unknown
             /// File may be null or empty, indicating the file was not loaded from disk.
             /// </summary>
-            internal SmallElementLocation(string file, int line, int column)
+            internal SmallElementLocation(string? file, int line, int column)
             {
                 ErrorUtilities.VerifyThrow(line > -1 && column > -1, "Use zero for unknown");
                 ErrorUtilities.VerifyThrow(line <= 65535 && column <= 65535, "Use ElementLocation instead");
diff --git a/src/Shared/ErrorUtilities.cs b/src/Shared/ErrorUtilities.cs
index 9bbd30e09c8..446e1918b25 100644
--- a/src/Shared/ErrorUtilities.cs
+++ b/src/Shared/ErrorUtilities.cs
@@ -537,17 +537,19 @@ internal static void VerifyThrowArgumentInvalidPath(string parameter, string par
             }
         }
 
+#nullable enable
         /// <summary>
         /// Throws an ArgumentException if the string has zero length, unless it is
         /// null, in which case no exception is thrown.
         /// </summary>
-        internal static void VerifyThrowArgumentLengthIfNotNull(string parameter, string parameterName)
+        internal static void VerifyThrowArgumentLengthIfNotNull(string? parameter, string parameterName)
         {
             if (parameter?.Length == 0)
             {
                 ThrowArgumentLength(parameterName);
             }
         }
+#nullable disable
 
         /// <summary>
         /// Throws an ArgumentNullException if the given parameter is null.
