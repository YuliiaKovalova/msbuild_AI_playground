diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
index a5d7ea5622c..94c1ee183ac 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTask.cs
@@ -6,7 +6,6 @@
 using System.Reflection;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 8e9ead325fd..cb14eb7df34 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1586,7 +1586,7 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
                             }
                         }
 
-                        PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, outputTargetName, outputString, parameterLocation, _projectInstance.GetProperty(outputTargetName)?.EvaluatedValue ?? null, _targetLoggingContext);
+                        PropertyTrackingUtils.LogPropertyAssignment(_propertyTrackingSettings, outputTargetName, outputString, parameterLocation, _projectInstance.GetProperty(outputTargetName)?.EvaluatedValue ?? null, _taskLoggingContext);
 
                         _batchBucket.Lookup.SetProperty(ProjectPropertyInstance.Create(outputTargetName, outputString, parameterLocation, _projectInstance.IsImmutable));
                     }
@@ -1594,52 +1594,6 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
             }
         }
 
-        /// <summary>
-        /// Logs property assignment information during task execution, based on configured property tracking settings.
-        /// </summary>
-        /// <param name="propertyName">The name of the property being assigned or reassigned.</param>
-        /// <param name="propertyValue">The new value being assigned to the property.</param>
-        /// <param name="location">The source location where the property assignment occurs.</param>
-        private void LogPropertyInTaskAssignment(string propertyName, string propertyValue, IElementLocation location)
-        {
-            if (_propertyTrackingSettings == PropertyTrackingSetting.None)
-            {
-                return;
-            }
-
-            var previousPropertyValue = _projectInstance.GetProperty(propertyName)?.EvaluatedValue;
-
-            if (previousPropertyValue == null && PropertyTrackingUtils.IsPropertyTrackingEnabled(_propertyTrackingSettings, PropertyTrackingSetting.PropertyInitialValueSet))
-            {
-                var args = new PropertyInitialValueSetEventArgs(
-                    propertyName,
-                    propertyValue,
-                    propertySource: string.Empty,
-                    location.File,
-                    location.Line,
-                    location.Column,
-                    message: null)
-                { BuildEventContext = _targetLoggingContext.BuildEventContext };
-
-                _targetLoggingContext.LogBuildEvent(args);
-            }
-            else if (PropertyTrackingUtils.IsPropertyTrackingEnabled(_propertyTrackingSettings, PropertyTrackingSetting.PropertyReassignment))
-            {
-                var args = new PropertyReassignmentEventArgs(
-                    propertyName,
-                    previousPropertyValue,
-                    propertyValue,
-                    location: null,
-                    location.File,
-                    location.Line,
-                    location.Column,
-                    message: null)
-                { BuildEventContext = _targetLoggingContext.BuildEventContext };
-
-                _targetLoggingContext.LogBuildEvent(args);
-            }
-        }
-
         /// <summary>
         /// Finds all the task properties that are required.
         /// Returns them as keys in a dictionary.
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index ed5a7130092..2b04ff1e3d4 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -3,7 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Runtime;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
@@ -452,35 +451,41 @@ internal static void LogPropertyAssignment(
                 return;
             }
 
-            if (previousPropertyValue == null && IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyInitialValueSet))
+            if (previousPropertyValue == null)
             {
-                var args = new PropertyInitialValueSetEventArgs(
-                    propertyName,
-                    propertyValue,
-                    propertySource: string.Empty,
-                    location.File,
-                    location.Line,
-                    location.Column,
-                    message: null)
-                { BuildEventContext = loggingContext.BuildEventContext };
-
-                loggingContext.LogBuildEvent(args);
+                if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyInitialValueSet))
+                {
+                    var args = new PropertyInitialValueSetEventArgs(
+                        propertyName,
+                        propertyValue,
+                        propertySource: string.Empty,
+                        location.File,
+                        location.Line,
+                        location.Column,
+                        message: null) { BuildEventContext = loggingContext.BuildEventContext };
+
+                    loggingContext.LogBuildEvent(args);
+                }
             }
-            else if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyReassignment)
-                || (settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
+            else
             {
-                var args = new PropertyReassignmentEventArgs(
-                    propertyName,
-                    previousPropertyValue,
-                    propertyValue,
-                    location: null,
-                    location.File,
-                    location.Line,
-                    location.Column,
-                    message: null)
-                { BuildEventContext = loggingContext.BuildEventContext, };
-
-                loggingContext.LogBuildEvent(args);
+                if (IsPropertyTrackingEnabled(settings, PropertyTrackingSetting.PropertyReassignment) || (settings == PropertyTrackingSetting.None && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
+                {
+                    if (propertyValue != previousPropertyValue)
+                    {
+                        var args = new PropertyReassignmentEventArgs(
+                            propertyName,
+                            previousPropertyValue,
+                            propertyValue,
+                            location: null,
+                            location.File,
+                            location.Line,
+                            location.Column,
+                            message: null) { BuildEventContext = loggingContext.BuildEventContext, };
+
+                        loggingContext.LogBuildEvent(args);
+                    }
+                }
             }
         }
     }
