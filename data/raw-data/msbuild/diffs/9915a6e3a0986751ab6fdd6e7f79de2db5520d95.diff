diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index ec86b218112..5edb37965b9 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -271,6 +271,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
 
         private bool _hasProjectCacheServiceInitializedVsScenario;
 
+        /// <summary>
+        /// Forwarding logging event args to BuildCheck analyzers
+        /// </summary>
+        private BuildCheckConnectorLogger _buildCheckConnectorLogger;
+
 #if DEBUG
         /// <summary>
         /// <code>true</code> to wait for a debugger to be attached, otherwise <code>false</code>.
@@ -1374,6 +1379,18 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
             }
         }
 
+        public bool ConfigureBuildCheck(bool isEnabled)
+        {
+            if (_buildCheckConnectorLogger == null)
+                return false;
+
+            bool previousState = _buildCheckConnectorLogger.Enabled;
+
+            _buildCheckConnectorLogger.Enabled = false;
+
+            return previousState;
+        }
+
         // Cache requests on configuration N do not block future build submissions depending on configuration N.
         // It is assumed that the higher level build orchestrator (static graph scheduler, VS, quickbuild) submits a
         // project build request only when its references have finished building.
@@ -2991,7 +3008,7 @@ private ILoggingService CreateLoggingService(
 
                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]
                 {
-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)
+                    _buildCheckConnectorLogger = new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)
                 });
             }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 1a4693ba685..5140596882b 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1104,9 +1104,12 @@ private async Task<BuildResult> BuildProject()
         {
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
 
-            // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
+            var buildCheckManager =
+                _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is not null ?
+                    new NullBuildCheckManager() :
+                    (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
 
-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
+            // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
             buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);
 
             // Make sure it is null before loading the configuration into the request, because if there is a problem
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 361c30c4200..cd16153da90 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -15,14 +15,15 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal sealed class BuildCheckConnectorLogger : ILogger
 {
     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
-    private readonly IBuildCheckManager _buildCheckManager;
+    private IBuildCheckManager _buildCheckManager;
+    private readonly IBuildCheckManager _buildCheckManagerForEnabledState;
     private readonly IBuildAnalysisLoggingContextFactory _loggingContextFactory;
 
     internal BuildCheckConnectorLogger(
         IBuildAnalysisLoggingContextFactory loggingContextFactory,
         IBuildCheckManager buildCheckManager)
     {
-        _buildCheckManager = buildCheckManager;
+        _buildCheckManager = _buildCheckManagerForEnabledState = buildCheckManager;
         _loggingContextFactory = loggingContextFactory;
         _eventHandlers = GetBuildEventHandlers();
     }
@@ -31,6 +32,13 @@ internal BuildCheckConnectorLogger(
 
     public string? Parameters { get; set; }
 
+    public bool Enabled
+    {
+        get => _buildCheckManager == _buildCheckManagerForEnabledState;
+
+        set => _buildCheckManager = value ? _buildCheckManagerForEnabledState : new NullBuildCheckManager();
+    }
+
     public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 9fa6956ae03..100abc3c662 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1834,10 +1834,22 @@ private static BuildResult ExecuteRestore(string projectFile, string toolsVersio
                 hostServices: null,
                 flags: flags);
 
-            return ExecuteBuild(buildManager, restoreRequest);
+            bool? wasBuildCheckEnabled = null;
+            try
+            {
+                wasBuildCheckEnabled = buildManager.ConfigureBuildCheck(false);
+                BuildResult restoreResult = ExecuteBuild(buildManager, restoreRequest);
+                return restoreResult;
+            }
+            finally
+            {
+                if (wasBuildCheckEnabled == true)
+                {
+                    buildManager.ConfigureBuildCheck(true);
+                }
+            }
         }
 
-
         /// <summary>
         /// Verifies that the code is running on a supported operating system.
         /// </summary>
