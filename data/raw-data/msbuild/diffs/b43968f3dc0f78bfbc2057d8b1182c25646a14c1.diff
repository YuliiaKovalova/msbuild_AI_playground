diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index c385e1ca06f..05853be0f8b 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -15,6 +15,10 @@
 using Microsoft.Build.Internal;
 using OutOfProcNode = Microsoft.Build.Execution.OutOfProcNode;
 
+#if DEBUG
+using System.Threading;
+#endif
+
 namespace Microsoft.Build.Evaluation
 {
     /// <summary>
@@ -84,6 +88,15 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// </remarks>
         private static bool s_—ÅheckFileContent;
 
+#if DEBUG
+        /// <summary>
+        /// Number of entries into Get function of the ProjectRootElementCache.
+        /// Shall be always 0 or 1. Reentrance to the Get function (value > 1) could lead to race condition.
+        /// </summary>
+        [ThreadStatic]
+        private static int s_getEntriesNumber = 0;
+#endif
+
         /// <summary>
         /// The map of weakly-held ProjectRootElement's
         /// </summary>
@@ -209,13 +222,22 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl
         /// If item is found, boosts it to the top of the strong cache.
         /// </remarks>
         /// <param name="projectFile">The project file which contains the ProjectRootElement.  Must be a full path.</param>
-        /// <param name="openProjectRootElement">The delegate to use to load if necessary. May be null. Must not update the cache.</param>
+        /// <param name="loadProjectRootElement">The delegate to use to load if necessary. May be null. Must not update the cache.</param>
         /// <param name="isExplicitlyLoaded"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>
         /// <param name="preserveFormatting"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>
         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>
-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,
+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,
             bool? preserveFormatting)
         {
+#if DEBUG
+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().
+            Interlocked.Increment(ref s_getEntriesNumber);
+            ErrorUtilities.VerifyThrow(
+                s_getEntriesNumber == 1,
+                "Reentrance to the ProjectRootElementCache.Get function detected."
+            );
+#endif
+
             // Should already have been canonicalized
             ErrorUtilities.VerifyThrowInternalRooted(projectFile);
 
@@ -253,15 +275,21 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
                 ForgetEntryIfExists(projectRootElement);
             }
 
-            if (openProjectRootElement == null)
+            if (loadProjectRootElement == null)
             {
                 if (projectRootElement == null || projectRootElementIsInvalid)
                 {
+#if DEBUG
+                    Interlocked.Decrement(ref s_getEntriesNumber);
+#endif
                     return null;
                 }
                 else
                 {
                     DebugTraceCache("Satisfied from XML cache: ", projectFile);
+#if DEBUG
+                    Interlocked.Decrement(ref s_getEntriesNumber);
+#endif
                     return projectRootElement;
                 }
             }
@@ -271,9 +299,9 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
             {
                 // We do not lock loading with common _locker of the cache, to avoid lock contention.
                 // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplication, as
-                // it is not likely that two threads would use Get function for the same project simulteniously and it is not a big deal if in some cases we load the same project twice.
+                // it is not likely that two threads would use Get function for the same project simultaneously and it is not a big deal if in some cases we load the same project twice.
 
-                projectRootElement = openProjectRootElement(projectFile, this);
+                projectRootElement = loadProjectRootElement(projectFile, this);
                 ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
                 ErrorUtilities.VerifyThrow(
                     projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase),
@@ -299,6 +327,9 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
                 DebugTraceCache("Satisfied from XML cache: ", projectFile);
             }
 
+#if DEBUG
+            Interlocked.Decrement(ref s_getEntriesNumber);
+#endif
             return projectRootElement;
         }
 
@@ -345,7 +376,7 @@ internal override ProjectRootElement TryGet(string projectFile, bool? preserveFo
         {
             ProjectRootElement result = Get(
                 projectFile,
-                openProjectRootElement: null, // no delegate to load it
+                loadProjectRootElement: null, // no delegate to load it
                 isExplicitlyLoaded: false, // Since we are not creating a PRE this can be true or false
                 preserveFormatting: preserveFormatting);
 
diff --git a/src/Build/Evaluation/ProjectRootElementCacheBase.cs b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
index 5ac30a2b20e..a41580af7c3 100644
--- a/src/Build/Evaluation/ProjectRootElementCacheBase.cs
+++ b/src/Build/Evaluation/ProjectRootElementCacheBase.cs
@@ -45,7 +45,7 @@ internal abstract class ProjectRootElementCacheBase
         /// </summary>
         internal event EventHandler<ProjectChangedEventArgs> ProjectDirtied;
 
-        internal abstract ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement,
+        internal abstract ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement,
             bool isExplicitlyLoaded,
             bool? preserveFormatting);
 
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index 117e07fc406..58f8ab8f5d7 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -33,16 +33,16 @@ internal SimpleProjectRootElementCache()
 
         internal override ProjectRootElement Get(
             string projectFile,
-            OpenProjectRootElement openProjectRootElement,
+            OpenProjectRootElement loadProjectRootElement,
             bool isExplicitlyLoaded,
             bool? preserveFormatting)
         {
             // Should already have been canonicalized
             ErrorUtilities.VerifyThrowInternalRooted(projectFile);
 
-            return openProjectRootElement == null
+            return loadProjectRootElement == null
                 ? GetFromCache(projectFile)
-                : GetFromOrAddToCache(projectFile, openProjectRootElement);
+                : GetFromOrAddToCache(projectFile, loadProjectRootElement);
         }
 
         private ProjectRootElement GetFromCache(string projectFile)
@@ -55,11 +55,11 @@ private ProjectRootElement GetFromCache(string projectFile)
             return null;
         }
 
-        private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRootElement openFunc)
+        private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRootElement loadFunc)
         {
             return _cache.GetOrAdd(projectFile, key =>
             {
-                ProjectRootElement rootElement = openFunc(key, this);
+                ProjectRootElement rootElement = loadFunc(key, this);
                 ErrorUtilities.VerifyThrowInternalNull(rootElement, "projectRootElement");
                 ErrorUtilities.VerifyThrow(
                     rootElement.FullPath.Equals(key, StringComparison.OrdinalIgnoreCase),
