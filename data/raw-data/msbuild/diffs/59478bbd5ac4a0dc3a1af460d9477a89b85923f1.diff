diff --git a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
new file mode 100644
index 00000000000..fc93e2a1ae1
--- /dev/null
+++ b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
@@ -0,0 +1,342 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+using static Microsoft.Build.Experimental.Graph.UnitTests.GraphTestingUtilities;
+using static Microsoft.Build.UnitTests.Helpers;
+
+namespace Microsoft.Build.Experimental.Graph.UnitTests
+{
+    public class GraphLoadedFromSolutionTests : IDisposable
+    {
+        private TestEnvironment _env;
+
+        public GraphLoadedFromSolutionTests(ITestOutputHelper output)
+        {
+            _env = TestEnvironment.Create(output);
+        }
+
+        [Theory]
+        [InlineData("1.sln", "2.sln")]
+        [InlineData("1.sln", "2.proj")]
+        public void ASolutionShouldBeTheSingleEntryPoint(params string[] files)
+        {
+            _env.DoNotLaunchDebugger();
+
+            for (var i = 0; i < files.Length; i++)
+            {
+                files[i] = _env.CreateFile(files[i], string.Empty).Path;
+            }
+
+            var exception = Should.Throw<ArgumentException>(
+                () =>
+                {
+                    new ProjectGraph(files);
+                });
+
+            exception.Message.ShouldContain("MSB4261");
+        }
+
+        [Fact]
+        public void GraphConstructionFailsOnNonExistentSolution()
+        {
+            _env.DoNotLaunchDebugger();
+
+            var exception = Should.Throw<InvalidProjectFileException>(
+                () =>
+                {
+                    new ProjectGraph("nonExistent.sln");
+                });
+
+            exception.Message.ShouldContain("The project file could not be loaded. Could not find file");
+        }
+
+        [Fact]
+        public void StaticGraphShouldNotSupportNestedSolutions()
+        {
+            var solutionFile = _env.CreateFile("solutionReference.sln", string.Empty).Path;
+
+            var referenceToSolution = $@"<ItemGroup>
+                                           <ProjectReference Include='{solutionFile}' />
+                                       </ItemGroup>".Cleanup();
+
+            var root = GraphTestingUtilities.CreateProjectFile(
+                env: _env,
+                projectNumber: 1,
+                projectReferences: null,
+                projectReferenceTargets: null,
+                defaultTargets: null,
+                extraContent: referenceToSolution);
+
+            _env.DoNotLaunchDebugger();
+
+            var exception = Should.Throw<InvalidOperationException>(
+                () =>
+                {
+                    new ProjectGraph(root.Path);
+                });
+
+            exception.Message.ShouldContain("MSB4264:");
+        }
+
+        public static IEnumerable<object[]> Graphs
+        {
+            get
+            {
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>()
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, null}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, null},
+                        {2, null}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{2}}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{2}},
+                        {2, new []{3}}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{2, 3}}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{3, 2}},
+                        {2, new []{3}}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{2, 3}},
+                        {2, new []{4}},
+                        {3, new []{4}}
+                    }
+                };
+
+                yield return new object[]
+                {
+                    new Dictionary<int, int[]>
+                    {
+                        {1, new []{2, 3}},
+                        {2, new []{4}},
+                        {3, new []{4}},
+                        {5, new []{3, 2}}
+                    }
+                };
+            }
+        }
+
+        public static IEnumerable<object[]> GraphsWithUniformSolutionConfigurations
+        {
+            get
+            {
+                foreach (var graph in Graphs)
+                {
+                    foreach (
+                        var currentSolutionConfigurationPlatform in SolutionFileBuilder.SolutionConfigurationPlatformsDefaults.Concat(new SolutionConfigurationInSolution[] {null}))
+                    {
+                        yield return new[]
+                        {
+                            graph.First(),
+                            currentSolutionConfigurationPlatform,
+                            SolutionFileBuilder.SolutionConfigurationPlatformsDefaults
+                        };
+                    }
+                }
+            }
+        }
+
+        [Theory]
+        [MemberData(nameof(GraphsWithUniformSolutionConfigurations))]
+        public void GraphConstructionCanLoadEntryPointsFromSolution(
+            Dictionary<int, int[]> edges,
+            SolutionConfigurationInSolution currentSolutionConfiguration,
+            IReadOnlyCollection<SolutionConfigurationInSolution> solutionConfigurations)
+        {
+            AssertSolutionBasedGraph(edges, currentSolutionConfiguration, solutionConfigurations);
+        }
+
+        [Theory]
+        [MemberData(nameof(GraphsWithUniformSolutionConfigurations))]
+        public void SolutionBasedGraphCanMatchProjectSpecificConfigurations(
+            Dictionary<int, int[]> edges,
+            SolutionConfigurationInSolution currentSolutionConfiguration,
+            IReadOnlyCollection<SolutionConfigurationInSolution> solutionConfigurations)
+        {
+            var graph = CreateProjectGraph(_env, edges);
+
+            var projectSpecificConfigurations = graph.ProjectNodes.ToDictionary(
+                node => GetProjectNumber(node).ToString(),
+                n => solutionConfigurations.ToDictionary(
+                    sc => sc,
+                    sc => new ProjectConfigurationInSolution(
+                        configurationName: $"{sc.ConfigurationName}_{GetProjectNumber(n)}",
+                        platformName: $"{sc.PlatformName}_{GetProjectNumber(n)}",
+                        includeInBuild: true)));
+
+            AssertSolutionBasedGraph(edges, currentSolutionConfiguration, solutionConfigurations, projectSpecificConfigurations);
+        }
+
+        [Fact]
+        public void SolutionParserIgnoresProjectConfigurationsThatDoNotFullyMatchAnySolutionConfiguration()
+        {
+            var solutionContents = new SolutionFileBuilder
+            {
+                Projects = new Dictionary<string, string>
+                {
+                    {"1", _env.CreateFile("1.csproj", string.Empty).Path}
+                },
+                SolutionConfigurationPlatforms = new[] {new SolutionConfigurationInSolution("Foo", "Bar")},
+                ProjectConfigurations = new Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>>
+                {
+                    {
+                        "1", new Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>
+                        {
+                            {
+                                new SolutionConfigurationInSolution("NonMatchingConfiguration", "NonMatchingPlatform"),
+                                new ProjectConfigurationInSolution("1a", "1b", true)
+                            },
+                            {
+                                new SolutionConfigurationInSolution("Foo", "NonMatchingPlatform"),
+                                new ProjectConfigurationInSolution("1c", "1d", true)
+                            }
+                        }
+                    }
+                }
+            }.BuildSolution();
+
+            var solutionFile = _env.CreateFile("solution.sln", solutionContents).Path;
+
+            var graph = new ProjectGraph(solutionFile);
+
+            graph.ProjectNodes.ShouldBeEmpty();
+        }
+
+        private void AssertSolutionBasedGraph(
+            Dictionary<int, int[]> edges,
+            SolutionConfigurationInSolution currentSolutionConfiguration,
+            IReadOnlyCollection<SolutionConfigurationInSolution> solutionConfigurations,
+            Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> projectConfigurations = null)
+        {
+            var graph = CreateProjectGraph(_env, edges);
+
+            var solutionFileBuilder = new SolutionFileBuilder
+            {
+                Projects = graph.ProjectNodes.ToDictionary(
+                    n => GetProjectNumber(n)
+                        .ToString(),
+                    n => n.ProjectInstance.FullPath),
+                ProjectConfigurations = projectConfigurations
+            };
+
+            var solutionContents = solutionFileBuilder.BuildSolution();
+
+            var solutionPath = _env.CreateFile("TheSolution.sln", solutionContents).Path;
+            var globalProperties = currentSolutionConfiguration != null
+                ? new Dictionary<string, string>
+                {
+                    ["Configuration"] = currentSolutionConfiguration.ConfigurationName,
+                    ["Platform"] = currentSolutionConfiguration.PlatformName
+                }
+                : new Dictionary<string, string>();
+
+            var graphFromSolution = new ProjectGraph(
+                new ProjectGraphEntryPoint(
+                    solutionPath,
+                    globalProperties),
+                _env.CreateProjectCollection().Collection);
+
+            // in the solution, all nodes are entry points
+            graphFromSolution.EntryPointNodes.Select(GetProjectPath)
+                .ShouldBeSetEquivalentTo(graph.ProjectNodes.Select(GetProjectPath));
+
+            if (projectConfigurations == null || graphFromSolution.ProjectNodes.All(n => n.ProjectReferences.Count == 0))
+            {
+                graphFromSolution.GraphRoots.Select(GetProjectPath)
+                    .ShouldBeEquivalentTo(graph.GraphRoots.Select(GetProjectPath));
+
+                graphFromSolution.ProjectNodes.Select(GetProjectPath)
+                    .ShouldBeEquivalentTo(graph.ProjectNodes.Select(GetProjectPath));
+            }
+
+            var expectedCurrentConfiguration = currentSolutionConfiguration ?? solutionConfigurations.First();
+            var actualProjectConfigurations = projectConfigurations ?? solutionFileBuilder.ProjectConfigurations;
+
+            foreach (var node in graphFromSolution.ProjectNodes)
+            {
+                // Project references get duplicated, once as entry points from the solution (handled in the if block) and once as nodes
+                // produced by ProjectReference items (handled in the else block).
+                if (node.ReferencingProjects.Count == 0)
+                {
+                    var expectedProjectConfiguration = actualProjectConfigurations[GetProjectNumber(node).ToString()][expectedCurrentConfiguration];
+                    GetConfiguration(node).ShouldBe(expectedProjectConfiguration.ConfigurationName);
+                    GetPlatform(node).ShouldBe(expectedProjectConfiguration.PlatformName);
+                }
+                else
+                {
+                    GetConfiguration(node).ShouldBe(GetConfiguration(node.ReferencingProjects.First()));
+                    GetPlatform(node).ShouldBe(GetPlatform(node.ReferencingProjects.First()));
+                }
+            }
+        }
+
+        private static string GetConfiguration(ProjectGraphNode node)
+        {
+            return node.ProjectInstance.GlobalProperties["Configuration"];
+        }
+
+        private static string GetPlatform(ProjectGraphNode node)
+        {
+            return node.ProjectInstance.GlobalProperties["Platform"];
+        }
+
+        public void Dispose()
+        {
+            _env.Dispose();
+        }
+    }
+}
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
new file mode 100644
index 00000000000..fcc6df14ddc
--- /dev/null
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -0,0 +1,167 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using Microsoft.Build.Construction;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+
+namespace Microsoft.Build.Experimental.Graph.UnitTests
+{
+    internal static class GraphTestingUtilities
+    {
+        internal static ProjectGraphNode GetFirstNodeWithProjectNumber(ProjectGraph graph, int projectNum)
+        {
+            return GetNodesWithProjectNumber(graph, projectNum).First();
+        }
+
+        internal static IEnumerable<ProjectGraphNode> GetNodesWithProjectNumber(ProjectGraph graph, int projectNum)
+        {
+            return graph.ProjectNodes.Where(node => node.ProjectInstance.FullPath.EndsWith(projectNum + ".proj"));
+        }
+
+        internal static string GetProjectFileName(ProjectGraphNode node)
+        {
+            node.ShouldNotBeNull();
+            return Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath);
+        }
+
+        internal static int GetProjectNumber(ProjectGraphNode node)
+        {
+            node.ShouldNotBeNull();
+            return int.Parse(GetProjectFileName(node));
+        }
+
+        internal static string GetProjectPath(ProjectGraphNode node)
+        {
+            node.ShouldNotBeNull();
+            return node.ProjectInstance.FullPath;
+        }
+
+        internal static TransientTestFile CreateProjectFile(
+            TestEnvironment env,
+            int projectNumber,
+            int[] projectReferences = null,
+            Dictionary<string, string[]> projectReferenceTargets = null,
+            string defaultTargets = null,
+            string extraContent = null
+            )
+        {
+            return Helpers.CreateProjectFile(
+                env,
+                projectNumber,
+                projectReferences,
+                projectReferenceTargets,
+                // Use "Build" when the default target is unspecified since in practice that is usually the default target.
+                defaultTargets ?? "Build",
+                extraContent);
+        }
+    }
+
+    internal class SolutionFileBuilder
+        {
+            public static readonly IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatformsDefaults = new[]
+            {
+                new SolutionConfigurationInSolution("Debug", "AnyCPU"),
+                new SolutionConfigurationInSolution("Release", "AnyCPU")
+            };
+
+            /// <summary>
+            /// projectName -> projectPath
+            /// </summary>
+            public IReadOnlyDictionary<string, string> Projects { get; set; }
+
+            public IReadOnlyCollection<SolutionConfigurationInSolution> SolutionConfigurationPlatforms { get; set; } = SolutionConfigurationPlatformsDefaults;
+            public Dictionary<string, Dictionary<SolutionConfigurationInSolution, ProjectConfigurationInSolution>> ProjectConfigurations { get; set; }
+
+            readonly struct ProjectInSolution
+            {
+                public string Name { get; }
+                public string Path { get; }
+                public string ProjectTypeGuid { get; }
+                public string Guid { get; }
+
+                public ProjectInSolution(string name, string path, string projectTypeGuid, string guid)
+                {
+                    Name = name;
+                    Path = path;
+                    ProjectTypeGuid = projectTypeGuid;
+                    Guid = guid;
+                }
+            }
+
+            public string BuildSolution()
+            {
+                var projectInfo = Projects.ToDictionary(
+                    kvp => kvp.Key,
+                    kvp => new ProjectInSolution(
+                        kvp.Key,
+                        kvp.Value,
+                        "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}",
+                        Guid.NewGuid()
+                            .ToString("B")));
+
+                ProjectConfigurations = ProjectConfigurations ?? projectInfo.ToDictionary(
+                        p => p.Key,
+                        p => SolutionConfigurationPlatforms.ToDictionary(
+                                sc => sc,
+                                sc => new ProjectConfigurationInSolution(
+                                    configurationName: sc.ConfigurationName,
+                                    platformName: sc.PlatformName,
+                                    includeInBuild: true)
+                            )
+                    );
+
+                var sb = new StringBuilder();
+
+                sb.AppendLine($@"
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version {VisualStudioVersion.VersionLatest}
+VisualStudioVersion = {VisualStudioVersion.VersionLatest}.0.0.0
+MinimumVisualStudioVersion = 10.0.40219.1");
+
+                foreach (var project in projectInfo.Values)
+                {
+                    sb.AppendLine($@"
+Project(""{project.ProjectTypeGuid}"") = ""{project.Name}"", ""{project.Path}"", ""{project.Guid}""
+EndProject
+");
+                }
+
+                sb.AppendLine("Global");
+
+                sb.AppendLine("\tGlobalSection(SolutionConfigurationPlatforms) = preSolution");
+
+                foreach (var solutionConfigurationPlatform in SolutionConfigurationPlatforms)
+                {
+                    sb.AppendLine($"\t\t{solutionConfigurationPlatform.FullName} = {solutionConfigurationPlatform.FullName}");
+                }
+
+                sb.AppendLine("\tEndGlobalSection");
+
+                sb.AppendLine("\tGlobalSection(ProjectConfigurationPlatforms) = postSolution");
+
+                foreach (var project in projectInfo)
+                {
+                    foreach (var configurationMapping in ProjectConfigurations[project.Key])
+                    {
+                        var solutionConfiguration = configurationMapping.Key;
+                        var projectConfiguration = configurationMapping.Value;
+                        sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.ActiveCfg = {projectConfiguration.FullName}");
+                        sb.AppendLine($"\t\t{project.Value.Guid}.{solutionConfiguration.FullName}.Build.0 = {projectConfiguration.FullName}");
+                    }
+                }
+
+                sb.AppendLine("\tEndGlobalSection");
+
+                sb.AppendLine("EndGlobal");
+
+                return sb.ToString();
+            }
+        }
+}
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 8a76182890f..a889274d80c 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -11,10 +11,9 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Internal;
+using static Microsoft.Build.Experimental.Graph.UnitTests.GraphTestingUtilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
-using Microsoft.CodeAnalysis.CSharp.Syntax;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -1467,21 +1466,6 @@ private static void AssertOuterBuildAsNonRoot(
             }
         }
 
-        private static bool IsOuterBuild(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.OuterBuild;
-        }
-
-        private static bool IsInnerBuild(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.InnerBuild;
-        }
-
-        private static bool IsNotMultitargeting(ProjectGraphNode project)
-        {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonMultitargeting;
-        }
-
         private static void AssertNonMultitargetingNode(ProjectGraphNode node, Dictionary<string, string> additionalGlobalProperties = null)
         {
             additionalGlobalProperties = additionalGlobalProperties ?? new Dictionary<string, string>();
@@ -1969,11 +1953,11 @@ public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyDa
 
         [Theory]
         [MemberData(nameof(AllNodesShouldHaveGraphBuildGlobalPropertyData))]
-        public void AllNodesShouldHaveGraphBuildGlobalProperty(Dictionary<int, int[]> edges, int[] roots, Dictionary<string, string> globalProperties)
+        public void AllNodesShouldHaveGraphBuildGlobalProperty(Dictionary<int, int[]> edges, int[] entryPoints, Dictionary<string, string> globalProperties)
         {
             using (var env = TestEnvironment.Create())
             {
-                var projectGraph = Helpers.CreateProjectGraph(env, edges, globalProperties, null, roots);
+                var projectGraph = Helpers.CreateProjectGraph(env, edges, globalProperties, null, entryPoints);
 
                 var dot = projectGraph.ToDot();
 
@@ -2001,12 +1985,27 @@ public void UserValuesForIsGraphBuildGlobalPropertyShouldBePreserved()
             }
         }
 
-        private static ProjectGraphNode GetOuterBuild(ProjectGraph graph, int projectNumber)
+        internal static bool IsOuterBuild(ProjectGraphNode project)
+        {
+            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.OuterBuild;
+        }
+
+        internal static bool IsInnerBuild(ProjectGraphNode project)
+        {
+            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.InnerBuild;
+        }
+
+        internal static bool IsNotMultitargeting(ProjectGraphNode project)
+        {
+            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonMultitargeting;
+        }
+
+        internal static ProjectGraphNode GetOuterBuild(ProjectGraph graph, int projectNumber)
         {
             return GetNodesWithProjectNumber(graph, projectNumber).FirstOrDefault(IsOuterBuild);
         }
 
-        private static IReadOnlyCollection<ProjectGraphNode> GetInnerBuilds(ProjectGraph graph, int projectNumber)
+        internal static IReadOnlyCollection<ProjectGraphNode> GetInnerBuilds(ProjectGraph graph, int projectNumber)
         {
             var outerBuild = GetOuterBuild(graph, projectNumber);
 
@@ -2026,36 +2025,6 @@ private static IReadOnlyCollection<ProjectGraphNode> GetInnerBuilds(ProjectGraph
             }
         }
 
-        private static ProjectGraphNode GetFirstNodeWithProjectNumber(ProjectGraph graph, int projectNum) => GetNodesWithProjectNumber(graph, projectNum).First();
-
-        private static IEnumerable<ProjectGraphNode> GetNodesWithProjectNumber(ProjectGraph graph, int projectNum)
-        {
-            return graph.ProjectNodes.Where(node => node.ProjectInstance.FullPath.EndsWith(projectNum + ".proj"));
-        }
-
-        private static string GetProjectFileName(ProjectGraphNode node) => Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath);
-
-        private static int GetProjectNumber(ProjectGraphNode node) => int.Parse(GetProjectFileName(node));
-
-        internal static TransientTestFile CreateProjectFile(
-            TestEnvironment env,
-            int projectNumber,
-            int[] projectReferences = null,
-            Dictionary<string, string[]> projectReferenceTargets = null,
-            string defaultTargets = null,
-            string extraContent = null
-            )
-        {
-            return Helpers.CreateProjectFile(
-                env,
-                projectNumber,
-                projectReferences,
-                projectReferenceTargets,
-                // Use "Build" when the default target is unspecified since in practice that is usually the default target.
-                defaultTargets ?? "Build",
-                extraContent);
-        }
-
         public void Dispose()
         {
             _env.Dispose();
diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index 7222a9970ee..21879264456 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -180,6 +180,7 @@ internal set
 
         /// <summary>
         /// Configurations for this project, keyed off the configuration's full name, e.g. "Debug|x86"
+        /// They contain only the project configurations from the solution file that fully matched (configuration and platform) against the solution configurations.
         /// </summary>
         public IReadOnlyDictionary<string, ProjectConfigurationInSolution> ProjectConfigurations =>
             new ReadOnlyDictionary<string, ProjectConfigurationInSolution>(_projectConfigurations);
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index e2329d23080..c1afcff7026 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -4,12 +4,15 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using System.Linq;
 using System.Text;
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
@@ -48,7 +51,8 @@ public GraphBuilder(
             int degreeOfParallelism,
             CancellationToken cancellationToken)
         {
-            _entryPointConfigurationMetadata = AddGraphBuildPropertyToEntryPoints(entryPoints);
+            _entryPointConfigurationMetadata = AddGraphBuildPropertyToEntryPoints(ExpandSolutionIfNecessary(entryPoints.ToImmutableArray()));
+            
             IEqualityComparer<ConfigurationMetadata> configComparer = EqualityComparer<ConfigurationMetadata>.Default;
 
             _graphWorkSet = new ParallelWorkSet<ConfigurationMetadata, ProjectGraphNode>(
@@ -93,6 +97,122 @@ IReadOnlyCollection<ProjectGraphNode> GetGraphRoots(IReadOnlyCollection<ProjectG
             }
         }
 
+        private IReadOnlyCollection<ProjectGraphEntryPoint> ExpandSolutionIfNecessary(IReadOnlyCollection<ProjectGraphEntryPoint> entryPoints)
+        {
+            if (entryPoints.Count == 0 || !entryPoints.Any(e => FileUtilities.IsSolutionFilename(e.ProjectFile)))
+            {
+                return entryPoints;
+            }
+
+            if (entryPoints.Count != 1)
+            {
+                throw new ArgumentException(
+                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                        "StaticGraphAcceptsSingleSolutionEntryPoint",
+                        string.Join(";", entryPoints.Select(e => e.ProjectFile))));
+            }
+
+            ErrorUtilities.VerifyThrowArgument(entryPoints.Count == 1, "StaticGraphAcceptsSingleSolutionEntryPoint");
+
+            var solutionEntryPoint = entryPoints.Single();
+            var solutionGlobalProperties = ImmutableDictionary.CreateRange(
+                keyComparer: StringComparer.OrdinalIgnoreCase,
+                valueComparer: StringComparer.OrdinalIgnoreCase,
+                items: solutionEntryPoint.GlobalProperties ?? ImmutableDictionary<string, string>.Empty);
+
+            var solution = SolutionFile.Parse(FileUtilities.NormalizePath(solutionEntryPoint.ProjectFile));
+
+            if (solution.SolutionParserWarnings.Count != 0 || solution.SolutionParserErrorCodes.Count != 0)
+            {
+                throw new InvalidProjectFileException(
+                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                        "StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors",
+                        solutionEntryPoint.ProjectFile,
+                        string.Join(";", solution.SolutionParserWarnings),
+                        string.Join(";", solution.SolutionParserErrorCodes)));
+            }
+
+            var projectsInSolution = GetBuildableProjects(solution);
+
+            var currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionGlobalProperties);
+
+            var newEntryPoints = new List<ProjectGraphEntryPoint>(projectsInSolution.Count);
+
+            foreach (var project in projectsInSolution)
+            {
+                if (project.ProjectConfigurations.Count == 0)
+                {
+                    continue;
+                }
+
+                var projectConfiguration = SelectProjectConfiguration(currentSolutionConfiguration, project.ProjectConfigurations);
+
+                if (projectConfiguration.IncludeInBuild)
+                {
+                    newEntryPoints.Add(
+                        new ProjectGraphEntryPoint(
+                            project.AbsolutePath,
+                            solutionGlobalProperties
+                                .SetItem("Configuration", projectConfiguration.ConfigurationName)
+                                .SetItem("Platform", projectConfiguration.PlatformName)
+                            ));
+                }
+            }
+
+            newEntryPoints.TrimExcess();
+
+            return newEntryPoints;
+
+            IReadOnlyCollection<ProjectInSolution> GetBuildableProjects(SolutionFile solutionFile)
+            {
+                var buildableProjects = solutionFile.ProjectsInOrder.Where(p => p.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat).ToImmutableArray();
+
+                var projectsWithSolutionDependencies = buildableProjects.Where(p => p.Dependencies.Count != 0);
+
+                if (projectsWithSolutionDependencies.Any())
+                {
+                    throw new ArgumentException(
+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                            "StaticGraphDoesNotHandleSolutionOnlyDependencies",
+                            solutionFile.FullPath,
+                            string.Join(";", projectsWithSolutionDependencies))
+                        );
+                }
+
+                return buildableProjects;
+            }
+
+            SolutionConfigurationInSolution SelectSolutionConfiguration(SolutionFile solutionFile, ImmutableDictionary<string, string> globalProperties)
+            {
+                var solutionConfiguration = globalProperties.ContainsKey("Configuration")
+                    ? globalProperties["Configuration"]
+                    : solutionFile.GetDefaultConfigurationName();
+
+                var solutionPlatform = globalProperties.ContainsKey("Platform")
+                    ? globalProperties["Platform"]
+                    : solutionFile.GetDefaultPlatformName();
+
+                return new SolutionConfigurationInSolution(solutionConfiguration, solutionPlatform);
+            }
+
+            ProjectConfigurationInSolution SelectProjectConfiguration(
+                SolutionConfigurationInSolution solutionConfig,
+                IReadOnlyDictionary<string, ProjectConfigurationInSolution> projectConfigs)
+            {
+                // implements the matching described in https://docs.microsoft.com/en-us/visualstudio/ide/understanding-build-configurations?view=vs-2019#how-visual-studio-assigns-project-configuration
+
+                var solutionConfigFullName = solutionConfig.FullName;
+
+                if (projectConfigs.ContainsKey(solutionConfigFullName))
+                {
+                    return projectConfigs[solutionConfigFullName];
+                }
+
+                var partiallyMarchedConfig = projectConfigs.FirstOrDefault(pc => pc.Value.ConfigurationName.Equals(solutionConfig.ConfigurationName, StringComparison.OrdinalIgnoreCase)).Value;
+                return partiallyMarchedConfig ?? projectConfigs.First().Value;
+            }
+        }
+
         private static List<ConfigurationMetadata> AddGraphBuildPropertyToEntryPoints(IEnumerable<ProjectGraphEntryPoint> entryPoints)
         {
             {
@@ -243,6 +363,10 @@ private Dictionary<ConfigurationMetadata, ProjectGraphNode> FindGraphNodes()
             foreach (ConfigurationMetadata projectToEvaluate in _entryPointConfigurationMetadata)
             {
                 ParseProject(projectToEvaluate);
+                                /*todo: fix the following double check-then-act concurrency bug: one thread can pass the two checks, loose context,
+                             meanwhile another thread passes the same checks with the same data and inserts its reference. The initial thread regains context
+                             and duplicates the information, leading to wasted work
+                             */
             }
 
             _graphWorkSet.WaitForAllWork();
@@ -261,6 +385,15 @@ private void ParseReferences(ProjectGraphNode parsedProject)
         {
             foreach ((ConfigurationMetadata referenceConfig, _) in _projectInterpretation.GetReferences(parsedProject.ProjectInstance))
             {
+                if (FileUtilities.IsSolutionFilename(referenceConfig.ProjectFullPath))
+                {
+                    throw new InvalidOperationException(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                        "StaticGraphDoesNotSupportSlnReferences",
+                        referenceConfig.ProjectFullPath,
+                        referenceConfig.ProjectFullPath
+                        ));
+                }
+                
                 ParseProject(referenceConfig);
             }
         }
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index c59c6abd2bc..66c683a38fa 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1769,13 +1769,42 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
       LOCALIZATION: {0} and {1} are file paths
     </comment>
   </data>
+  <data name="StaticGraphAcceptsSingleSolutionEntryPoint" UESanitized="false" Visibility="Public">
+    <value>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</value>
+    <comment>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </comment>
+  </data>
+  <data name="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors" UESanitized="false" Visibility="Public">
+    <value>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </value>
+    <comment>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
+    </comment>
+  </data>
+  <data name="StaticGraphDoesNotHandleSolutionOnlyDependencies" UESanitized="false" Visibility="Public">
+    <value>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </value>
+    <comment>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </comment>
+  </data>
+  <data name="StaticGraphDoesNotSupportSlnReferences" UESanitized="false" Visibility="Public">
+    <value>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </value>
+    <comment>
+      LOCALIZATION: {0} and {1} are file paths
+    </comment>
+  </data>
   <!--
         The engine message bucket is: MSB4001 - MSB4999
 
         MSB4128 is being used in FileLogger.cs (can't be added here yet as strings are currently frozen)
         MSB4129 is used by Shared\XmlUtilities.cs (can't be added here yet as strings are currently frozen)
 
-        Next message code should be MSB4260.
+        Next message code should be MSB4265.
 
         Some unused codes which can also be reused (because their messages were deleted, and UE hasn't indexed the codes yet):
             <none>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index b400c03c522..850d1ad5f6c 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 37ee3e67cad..d0bc9f00bad 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.en.xlf b/src/Build/Resources/xlf/Strings.en.xlf
index 39d40db568b..a62951862c4 100644
--- a/src/Build/Resources/xlf/Strings.en.xlf
+++ b/src/Build/Resources/xlf/Strings.en.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 19b77a4968f..b129220ba0d 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 58eb5295146..70d71e7e760 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 88c5e1011c6..46cdc685aa2 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index c784f9ace11..b3a1935e3bb 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 909ae66a68b..c016c050f86 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 82fc2d97655..e57fd5c6c67 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 4364eda669a..260702f0e9b 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -112,6 +112,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 46afc364767..24976dbde39 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 0c76850ee1f..af2103f7961 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index f2cb2ea0518..5b3a1412515 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 7283da23a78..9d27f0d9aa8 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -113,6 +113,44 @@
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
         <note>
       LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphAcceptsSingleSolutionEntryPoint">
+        <source>MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</source>
+        <target state="new">MSB4261: Static graph only accepts a solution as the only entry point. Multiple entry points detected: {0}</target>
+        <note>
+      LOCALIZATION: {0} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotHandleSolutionOnlyDependencies">
+        <source>MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </source>
+        <target state="new">MSB4263: Static graph does not support solutions containing solution only dependencies. Solution file "{0}" contains the following projects with solution only dependencies: {1}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file and {1} is a semicolon delimited list of files
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphDoesNotSupportSlnReferences">
+        <source>MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </source>
+        <target state="new">MSB4264: Project "{0}" has a reference to solution file "{1}". Referencing solutions is not supported in static graph.
+    </target>
+        <note>
+      LOCALIZATION: {0} and {1} are file paths
+    </note>
+      </trans-unit>
+      <trans-unit id="StaticGraphSolutionLoaderEncounteredSolutionWarningsAndErrors">
+        <source>MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </source>
+        <target state="new">MSB4262: Solution file "{0}" contains the following warnings and errors:
+           Warnings: {1}
+           Errors: {2}
+    </target>
+        <note>
+      LOCALIZATION: {0} is a file, {1} and {2} are semicolon delimited lists of messages
     </note>
       </trans-unit>
       <trans-unit id="UndeclaredMSBuildTasksNotAllowedInIsolatedGraphBuilds">
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 6e9d8d4fa9e..23d9872d51b 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -11,7 +11,6 @@
 using System.Xml;
 
 using Microsoft.Build.Construction;
-using Microsoft.Build.Definition;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -19,7 +18,6 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.UnitTests;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -1276,19 +1274,21 @@ internal static void AssertDictionariesEqual(IDictionary<string, string> x, IDic
                 });
         }
 
-        internal static void ShouldBeEquivalentTo<K, V>(this IReadOnlyDictionary<K, V> a, IReadOnlyDictionary<K, V> b)
+        internal static void ShouldBeEquivalentTo<K, V>(this IDictionary<K, V> a, IReadOnlyDictionary<K, V> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
+            a.Count.ShouldBe(b.Count);
         }
 
-        internal static void ShouldBeEquivalentTo<K, V>(this IDictionary<K, V> a, IReadOnlyDictionary<K, V> b)
+        internal static void ShouldBeEquivalentTo<K>(this IEnumerable<K> a, IEnumerable<K> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
+            a.Count().ShouldBe(b.Count());
         }
 
-        internal static void ShouldBeEquivalentTo<K>(this IReadOnlyCollection<K> a, IReadOnlyCollection<K> b)
+        internal static void ShouldBeSetEquivalentTo<K>(this IEnumerable<K> a, IEnumerable<K> b)
         {
             a.ShouldBeSubsetOf(b);
             b.ShouldBeSubsetOf(a);
@@ -1599,7 +1599,8 @@ internal static ProjectGraph CreateProjectGraph(
             IDictionary<int, int[]> dependencyEdges,
             IDictionary<string, string> globalProperties = null,
             CreateProjectFileDelegate createProjectFile = null,
-            IEnumerable<int> roots = null)
+            IEnumerable<int> entryPoints = null,
+            ProjectCollection projectCollection = null)
         {
             createProjectFile = createProjectFile ?? CreateProjectFile;
 
@@ -1635,13 +1636,16 @@ internal static ProjectGraph CreateProjectGraph(
                 }
             }
 
-            var entryProjects = roots ?? nodes.Where(nodeEntry => nodeEntry.Value.IsRoot).Select(n => n.Key);
-
-            var entryProjectFiles = nodes.Where(nodeEntry => nodeEntry.Value.IsRoot).Select(nodeEntry => nodeEntry.Value.ProjectPath);
+            var entryProjectFiles = entryPoints != null
+                            ? nodes.Where(n => entryPoints.Contains(n.Key)).Select(n => n.Value.ProjectPath)
+                            : nodes.Where(n => n.Value.IsRoot).Select(n => n.Value.ProjectPath);
 
             return new ProjectGraph(
                 entryProjectFiles,
-                globalProperties ?? new Dictionary<string, string>());
+                globalProperties ?? new Dictionary<string, string>(),
+                projectCollection ?? env.CreateProjectCollection()
+                    .Collection
+                );
 
             bool IsRoot(int node)
             {
