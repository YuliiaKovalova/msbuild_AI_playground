diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index e6334353a1c..bdac68568e3 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -971,6 +971,11 @@ internal static bool FileExistsNoThrow(string fullPath, IFileSystem fileSystem =
         /// </summary>
         internal static string[] DirectoryGetFiles(string path, string pattern = "*", IFileSystem fileSystem = null)
         {
+            if (path is null)
+                throw new ArgumentNullException(nameof(path));
+            if (path.Length == 0)
+                throw new ArgumentException("Unexpected empty string", nameof(path));
+
             path = AttemptToShortenPath(path);
             return (fileSystem ?? DefaultFileSystem).EnumerateFiles(path, pattern).ToArray();
         }
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 636c41df025..a893427c579 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -549,6 +549,7 @@ public void FileOrDirectoryExistsNoThrow()
 
             Assert.False(FileUtilities.FileOrDirectoryExistsNoThrow("||"));
             Assert.False(FileUtilities.FileOrDirectoryExistsNoThrow(isWindows ? @"c:\doesnot_exist" : "/doesnot_exist"));
+            Assert.False(FileUtilities.FileOrDirectoryExistsNoThrow(string.Empty));
             Assert.True(FileUtilities.FileOrDirectoryExistsNoThrow(isWindows ? @"c:\" : "/"));
             Assert.True(FileUtilities.FileOrDirectoryExistsNoThrow(Path.GetTempPath()));
 
@@ -666,6 +667,35 @@ public void DirectoryExistsNoThrowTooLongWithDotsRelative()
             }
         }
 
+        [Fact]
+        public void DirectoryGetFilesThrowsOnNull()
+        {
+            Assert.Throws<ArgumentNullException>(() => FileUtilities.DirectoryGetFiles(null));
+        }
+
+        [Fact]
+        public void DirectoryGetFilesThrowsOnEmpty()
+        {
+            Assert.Throws<ArgumentException>(() => FileUtilities.DirectoryGetFiles(string.Empty));
+        }
+
+        [ConditionalFact(nameof(RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241))]
+        public void DirectoryGetFilesTooLongWithDots()
+        {
+            Assert.Throws<ArgumentNullException>(() => FileUtilities.DirectoryGetFiles(null));
+
+            string systemDirectoryPath = Path.Combine(Environment.SystemDirectory) + Path.DirectorySeparatorChar;
+            string longPart = new string('x', NativeMethodsShared.MAX_PATH - systemDirectoryPath.Length); // We want the shortest that is > max path.
+
+            string inputPath = Path.Combine(new[] { Environment.SystemDirectory, longPart, "..", });
+
+            Console.WriteLine(inputPath.Length);
+
+            // "c:\windows\system32\<verylong>\.." > MAX_PATH
+            var files = FileUtilities.DirectoryGetFiles(inputPath);
+            Assert.NotEmpty(files);
+        }     
+
         public static bool RunTestsThatDependOnWindowsShortPathBehavior_Workaround4241()
         {
             // Run these tests only when we're not on Windows
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index a2bf8b2db67..a54532d9ea2 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -601,6 +601,12 @@ private string[] GetDirectories(string path, string pattern)
         /// <returns>true if file exists</returns>
         private bool FileExistsInDirectory(string path, string fileName)
         {
+            // to behave same as File.Exists(Path.Combine("","file.cs") we have to map empty string to current directory
+            if (path.Length == 0)
+            {
+                path = ".";
+            }
+
             instanceLocalDirectoryFiles.TryGetValue(path, out HashSet<string> cached);
             if (cached == null)
             {
