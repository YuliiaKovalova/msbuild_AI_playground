diff --git a/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs b/src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs
similarity index 94%
rename from src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
rename to src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs
index cb930a78195..2e42d445901 100644
--- a/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
+++ b/src/Tasks.UnitTests/GetComAssembliesMetadata_Tests.cs
@@ -17,7 +17,7 @@
 
 namespace Microsoft.Build.Tasks.UnitTests
 {
-    public class GetAssembliesMetadata_Tests
+    public class GetComAssembliesMetadata_Tests
     {
         private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, "TestResources", "Assemblies");
 
@@ -25,7 +25,7 @@ public class GetAssembliesMetadata_Tests
         public void CheckPresenceOfCustomCOMAssemblyAttributes()
         {
             string assemblyPath = Path.Combine(TestAssembliesPaths, "Custom_COM.dll");
-            GetAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+            GetComAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
 
             bool isSuccess = t.Execute();
 
@@ -55,7 +55,7 @@ public void CheckPresenceOfCOMAssemblyAttributes()
             string programFilesX86 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
             string programFilesRefAssemblyLocation = Path.Combine(programFilesX86, "Reference Assemblies\\Microsoft\\Framework");
             string assemblyPath = Path.Combine(programFilesRefAssemblyLocation, ".NETFramework", "v4.7.2", "mscorlib.dll");
-            GetAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+            GetComAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
 
             bool isSuccess = t.Execute();
 
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 41a8761c397..8638e73d1b0 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -270,6 +270,10 @@ internal static bool IsWinMDFile(
         }
 
 #if !FEATURE_ASSEMBLYLOADCONTEXT
+        /// <summary>
+        /// Collects the metadata and attributes for specilied assembly.
+        /// The requested properties are used by legacy project system.
+        /// </summary>
         internal AssemblyAttributes GetAssemblyMetadata()
         {
             IntPtr asmMetaPtr = IntPtr.Zero;
@@ -277,20 +281,18 @@ internal AssemblyAttributes GetAssemblyMetadata()
             {
                 IMetaDataImport2 import2 = (IMetaDataImport2)_assemblyImport;
                 _assemblyImport.GetAssemblyFromScope(out uint assemblyScope);
-                AssemblyAttributes assemblyAttributes = new()
-                {
-                    AssemblyFullPath = _sourceFile,
-                };
 
                 // get the assembly, if there is no assembly, it is a module reference
                 if (assemblyScope == 0)
                 {
                     return null;
                 }
-                else
+
+                AssemblyAttributes assemblyAttributes = new()
                 {
-                    assemblyAttributes.IsAssembly = true;
-                }
+                    AssemblyFullPath = _sourceFile,
+                    IsAssembly = true,
+                };
 
                 // will be populated with the assembly name
                 char[] defaultCharArray = new char[GENMAN_STRING_BUF_SIZE];
@@ -326,6 +328,7 @@ internal AssemblyAttributes GetAssemblyMetadata()
                 if (import2 != null)
                 {
                     assemblyAttributes.Description = GetStringCustomAttribute(import2, assemblyScope, "System.Reflection.AssemblyDescriptionAttribute");
+                    assemblyAttributes.TargetFrameworkMoniker = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.Versioning.TargetFrameworkAttribute");
                     assemblyAttributes.Guid = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.InteropServices.GuidAttribute");
                     if (!string.IsNullOrEmpty(assemblyAttributes.Guid))
                     {
@@ -340,11 +343,10 @@ internal AssemblyAttributes GetAssemblyMetadata()
                             assemblyAttributes.IsImportedFromTypeLib = !string.IsNullOrEmpty(primaryInteropAssemblyString);
                         }
                     }
-
-                    assemblyAttributes.TargetFrameworkMoniker = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.Versioning.TargetFrameworkAttribute");
                 }
 
                 assemblyAttributes.RuntimeVersion = GetRuntimeVersion(_sourceFile);
+
                 import2.GetPEKind(out uint peKind, out _);
                 assemblyAttributes.PeKind = peKind;
 
diff --git a/src/Tasks/GetAssembliesMetadata.cs b/src/Tasks/GetComAssembliesMetadata.cs
similarity index 88%
rename from src/Tasks/GetAssembliesMetadata.cs
rename to src/Tasks/GetComAssembliesMetadata.cs
index 03cd819f74d..303c8ff2019 100644
--- a/src/Tasks/GetAssembliesMetadata.cs
+++ b/src/Tasks/GetComAssembliesMetadata.cs
@@ -25,9 +25,9 @@
 namespace Microsoft.Build.Tasks
 {
     /// <summary>
-    /// Resolves metadata for the specified set of assemblies.
+    /// Resolves metadata for the specified set of COM assemblies.
     /// </summary>
-    public class GetAssembliesMetadata : TaskExtension
+    public class GetComAssembliesMetadata : TaskExtension
     {
         /// <summary>
         /// Assembly paths.
@@ -46,7 +46,7 @@ public override bool Execute()
         {
             if (!NativeMethodsShared.IsWindows)
             {
-                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GetAssembliesMetadata));
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GetComAssembliesMetadata));
                 return false;
             }
 
@@ -83,26 +83,26 @@ public string[] AssembyPaths
         }
 
         /// <summary>
-        /// This is a list of resolved assembly metadata.
+        /// Gets a list of resolved assembly metadata.
         /// </summary>
         [Output]
         public ITaskItem[] AssembliesMetadata => _assembliesMetadata;
 
         /// <summary>
-        /// Set metadata on the assembly path.
+        /// Sets metadata on the assembly path.
         /// </summary>
-        private ITaskItem SetItemMetadata(AssemblyAttributes attributes)
+        private TaskItem SetItemMetadata(AssemblyAttributes attributes)
         {
-            // Set up the main item.
-            TaskItem referenceItem = new TaskItem();
-            referenceItem.ItemSpec = attributes.AssemblyFullPath;
+            TaskItem referenceItem = new()
+            {
+                ItemSpec = attributes.AssemblyFullPath,
+            };
 
             IMetadataContainer referenceItemAsMetadataContainer = referenceItem;
             referenceItemAsMetadataContainer.ImportMetadata(EnumerateCommonMetadata());
 
             return referenceItem;
 
-            // Enumerate common metadata with an iterator to allow using a more efficient bulk-set operation.
             IEnumerable<KeyValuePair<string, string>> EnumerateCommonMetadata()
             {
                 yield return new KeyValuePair<string, string>(nameof(attributes.AssemblyName), attributes.AssemblyName);
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 5890870ac2b..99cb4e334d6 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -328,7 +328,7 @@
     </Compile>
     <Compile Include="ResourceHandling\*.cs" />
     <Compile Include="GetCompatiblePlatform.cs" />
-    <Compile Include="GetAssembliesMetadata.cs" />
+    <Compile Include="GetComAssembliesMetadata.cs" />
     <Compile Include="SetRidAgnosticValueForProjects.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index ebb62b24ded..b40a09df7b9 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1485,6 +1485,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       GenerateBindingRedirects;
       GenerateBindingRedirectsUpdateAppConfig;
       ResolveComReferences;
+      GetComAssembliesMetadata;
       AfterResolveReferences
     </ResolveReferencesDependsOn>
   </PropertyGroup>
@@ -3040,6 +3041,37 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <ReferenceComWrappersToCopyLocal Include="@(ComReferenceWrappers)" Condition="'%(ComReferenceWrappers.CopyLocal)'!='false'"/>
     </ItemGroup>
 
+  </Target>
+
+    <!--
+    ============================================================
+                                        GetComAssembliesMetadata
+
+    Resolve Assembly attributes for COM assemblies
+
+        [IN]
+        @(ReferencePath) - Paths to COM referenced wrappers.
+
+        [OUT]
+        @(AssembliesMetadata) - COM assemblies attributes.
+    ============================================================
+    -->
+
+  <Target
+      Name="GetComAssembliesMetadata"
+      Condition="'@(ReferencePath)'!=''"
+      Returns="@(AssembliesMetadata)"
+      DependsOnTargets="ResolveComReferences"
+        >
+
+    <GetComAssembliesMetadata
+          AssembyPaths="@(ReferencePath)"
+          ContinueOnError="$(ContinueOnError)">
+
+      <Output TaskParameter="AssembliesMetadata" ItemName="_AssembliesMetadata"/>
+
+    </GetComAssembliesMetadata>
+
   </Target>
 
   <Target
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index f8e09491af3..cdc122d3598 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -73,6 +73,7 @@
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveAssemblyReference"              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveCodeAnalysisRuleSet"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveComReference"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <UsingTask TaskName="Microsoft.Build.Tasks.GetComAssembliesMetadata"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveKeySource"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveManifestFiles"                  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
   <UsingTask TaskName="Microsoft.Build.Tasks.ResolveNativeReference"                AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
