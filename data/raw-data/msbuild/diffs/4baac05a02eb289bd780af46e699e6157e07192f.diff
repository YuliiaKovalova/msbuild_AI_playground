diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index 0b0ce00f9fc..38ac762ff9a 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -259,7 +259,7 @@ public void ImportWithRelativePath()
                 project.Save(projectfile);
 
                 using var stringReader2 = new StringReader(targetsfileContent);
-                using var xmlReader2 = XmlReader.Create(stringReader);
+                using var xmlReader2 = XmlReader.Create(stringReader2);
                 project = ProjectRootElement.Create(xmlReader2);
                 project.Save(targetsFile);
                 Project msbuildProject = new Project(projectfile);
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index cbcf5ea977f..11b8164e787 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -121,7 +121,7 @@ public void AddProjectOnSave_SpecifiedProjectCollection()
 
             try
             {
-                using ProjectCollection collection = new ProjectCollection();
+                ProjectCollection collection = new ProjectCollection();
                 Project project = new Project(collection);
 
                 path = FileUtilities.GetTemporaryFileName();
@@ -194,7 +194,7 @@ public void GlobalPropertyInheritLoadFromFile2()
             {
                 path = CreateProjectFile();
 
-                using ProjectCollection collection = new ProjectCollection();
+                ProjectCollection collection = new ProjectCollection();
                 collection.SetGlobalProperty("p", "v");
                 Project project = collection.LoadProject(path, "4.0");
 
@@ -225,7 +225,7 @@ public void GlobalPropertyInheritLoadFromFile3()
             {
                 path = CreateProjectFile();
 
-                using ProjectCollection collection = new ProjectCollection();
+                ProjectCollection collection = new ProjectCollection();
                 collection.SetGlobalProperty("p", "v");
                 Project project = collection.LoadProject(path, null, "4.0");
 
@@ -343,13 +343,13 @@ public void GetLoadedProjectRootElementWrongCollection()
                 path = FileUtilities.GetTemporaryFileName();
                 ProjectRootElement.Create(path).Save();
 
-                using ProjectCollection collection1 = new ProjectCollection();
+                ProjectCollection collection1 = new ProjectCollection();
                 Project project1 = collection1.LoadProject(path);
                 Project project1b = collection1.LoadProject(path);
 
                 Assert.True(ReferenceEquals(project1.Xml, project1b.Xml));
 
-                using ProjectCollection collection2 = new ProjectCollection();
+                ProjectCollection collection2 = new ProjectCollection();
                 Project project2 = collection2.LoadProject(path);
 
                 Assert.False(ReferenceEquals(project1.Xml, project2.Xml));
@@ -565,7 +565,7 @@ public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersi
         [Fact]
         public void ChangingGlobalPropertiesUpdatesCollection()
         {
-            using ProjectCollection collection = new ProjectCollection();
+            ProjectCollection collection = new ProjectCollection();
             var project = new Project(collection) { FullPath = "c:\\x" };
             project.SetGlobalProperty("p", "v1"); // should update collection
 
@@ -835,7 +835,7 @@ public void SaveToNewNameAndUnload()
                 Project project = new Project();
                 project.Save(file1);
 
-                using ProjectCollection collection = new ProjectCollection();
+                ProjectCollection collection = new ProjectCollection();
 
                 Project project2 = collection.LoadProject(file1);
                 project2.Save(file2);
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 2d25c39b64f..7123e4fb53a 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -157,6 +157,7 @@ public void GetMetadataObjectsFromDefinition()
                         </ItemGroup>
                     </Project>
                 ";
+
             using var stringReader = new StringReader(content);
             using var xmlReader = XmlReader.Create(stringReader);
             Project project = new Project(xmlReader);
@@ -3759,10 +3760,10 @@ public void FileNameMetadataEvaluationShouldNotDependsFromPlatformSpecificSlashe
 
     public class ProjectItemWithOptimizations_Tests : ProjectItem_Tests
     {
-       public ProjectItemWithOptimizations_Tests()
-       {
-           // Make sure we always use the dictionary-based Remove logic.
-           _env.SetEnvironmentVariable("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", "0");
-       }
+        public ProjectItemWithOptimizations_Tests()
+        {
+            // Make sure we always use the dictionary-based Remove logic.
+            _env.SetEnvironmentVariable("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", "0");
+        }
     }
 }
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index 011db584005..e5c1b56000d 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -22,9 +22,11 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -119,12 +121,12 @@ public static ProjectItem AssertSingleItem(Project p, string type, string itemIn
         public static void AssertItemEvaluationFromProject(string projectContents, string[] inputFiles, string[] expectedInclude, Dictionary<string, string>[] expectedMetadataPerItem = null, bool normalizeSlashes = false, bool makeExpectedIncludeAbsolute = false)
         {
             AssertItemEvaluationFromGenericItemEvaluator((p, c) =>
-                {
-                    return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
-                        .Items
-                        .Select(i => (ITestItem)new ProjectItemTestItemAdapter(i))
-                        .ToList();
-                },
+            {
+                return new Project(p, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, c)
+                    .Items
+                    .Select(i => (ITestItem)new ProjectItemTestItemAdapter(i))
+                    .ToList();
+            },
             projectContents,
             inputFiles,
             expectedInclude,
@@ -660,13 +662,9 @@ public static ProjectRootElement CreateInMemoryProjectRootElement(string project
         {
             var cleanedProject = CleanupFileContents(projectContents);
 
-            using var stringReader = new StringReader(cleanedProject);
-            using var xmlReader = XmlReader.Create(stringReader);
-            var projectCollection = new ProjectCollection();
-
             return ProjectRootElement.Create(
-                xmlReader,
-                collection ?? projectCollection,
+                XmlReader.Create(new StringReader(cleanedProject)),
+                collection ?? new ProjectCollection(),
                 preserveFormatting);
         }
 
@@ -688,8 +686,7 @@ public static Project CreateInMemoryProject(string xml)
         /// <returns>Returns created <see cref="Project"/>.</returns>
         public static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
         {
-            var projectCollection = new ProjectCollection();
-            return CreateInMemoryProject(projectCollection, xml, loggers);
+            return CreateInMemoryProject(new ProjectCollection(), xml, loggers);
         }
 
         /// <summary>
@@ -770,7 +767,7 @@ public static void BuildProjectExpectSuccess(
             string projectContents,
             params ILogger[] loggers)
         {
-            using ProjectCollection collection = new();
+            ProjectCollection collection = new();
             Project project = CreateInMemoryProject(collection, projectContents, loggers);
             project.Build().ShouldBeTrue();
         }
@@ -798,7 +795,7 @@ public static void BuildProjectExpectFailure(
             string projectContents,
             params ILogger[] loggers)
         {
-            using ProjectCollection collection = new();
+            ProjectCollection collection = new();
             Project project = CreateInMemoryProject(collection, projectContents, loggers);
             project.Build().ShouldBeFalse("Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\"");
         }
@@ -981,7 +978,7 @@ public static Project LoadProjectFileInTempProjectDirectory(string projectFileRe
         {
             string projectFileFullPath = Path.Combine(TempProjectDir, projectFileRelativePath);
 
-            using ProjectCollection projectCollection = new ProjectCollection();
+            ProjectCollection projectCollection = new ProjectCollection();
 
             Project project = new Project(projectFileFullPath, null, null, projectCollection);
 
@@ -1096,9 +1093,7 @@ public static IList<ProjectItem> GetItemsFromFragment(string fragment, bool allI
         /// </summary>
         public static IList<ProjectItem> GetItems(string content, bool allItems = false, bool ignoreCondition = false)
         {
-            using var stringReader = new StringReader(content);
-            using var xmlReader = XmlReader.Create(stringReader);
-            var projectXml = ProjectRootElement.Create(xmlReader);
+            var projectXml = ProjectRootElement.Create(XmlReader.Create(new StringReader(CleanupFileContents(content))));
             Project project = new Project(projectXml);
             IList<ProjectItem> item = Helpers.MakeList(
                 ignoreCondition ?
@@ -1356,9 +1351,7 @@ private static void BuildProjectWithNewOM(string content, ref MockLogger logger,
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
 
-            using var stringReader = new StringReader(content);
-            using var xmlReader = XmlReader.Create(stringReader);
-            Project project = new Project(xmlReader, globalProperties, toolsVersion: null);
+            Project project = new Project(XmlReader.Create(new StringReader(content)), globalProperties, toolsVersion: null);
             logger ??= new MockLogger
             {
                 AllowTaskCrashes = allowTaskCrash
@@ -1373,9 +1366,7 @@ public static void BuildProjectWithNewOMAndBinaryLogger(string content, BinaryLo
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
 
-            using var stringReader = new StringReader(content);
-            using var xmlReader = XmlReader.Create(stringReader);
-            Project project = new Project(xmlReader, null, toolsVersion: null);
+            Project project = new Project(XmlReader.Create(new StringReader(content)), null, toolsVersion: null);
 
             List<ILogger> loggers = new List<ILogger>() { binaryLogger };
 
@@ -1982,8 +1973,7 @@ public static void VerifyAssertLineByLine(string expected, string actual, bool i
         /// </summary>
         public static void ClearDirtyFlag(ProjectRootElement project)
         {
-            using var stringWriter = new StringWriter();
-            project.Save(stringWriter);
+            project.Save(new StringWriter());
             Assert.False(project.HasUnsavedChanges);
         }
 
