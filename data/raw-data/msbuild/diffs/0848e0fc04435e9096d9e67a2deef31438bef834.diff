diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index 929f6333d22..2b2f652188c 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -19,6 +19,13 @@ namespace Microsoft.Build.BuildEngine.Shared
     /// <owner>SumedhK</owner>
     static internal class FileUtilities
     {
+        internal static bool EnsurePathIsSingleQuoted(string path)
+        {
+            int endId = path.Length - 1;
+            char singleQuote = '\'';
+
+            return path[0] == singleQuote && path[endId] == singleQuote;
+        }
         #region Item-spec modifiers
 
         /// <summary>
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 707657933d1..4150337f5af 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -59,6 +59,8 @@ internal static void ClearCacheDirectoryPath()
         /// Determines whether the file system is case sensitive.
         /// Copied from https://github.com/dotnet/runtime/blob/73ba11f3015216b39cb866d9fb7d3d25e93489f2/src/libraries/Common/src/System/IO/PathInternal.CaseSensitivity.cs#L41-L59
         /// </summary>
+        ///
+
         public static bool GetIsFileSystemCaseSensitive()
         {
             try
@@ -133,7 +135,7 @@ internal static string GetHexHash(string stringToHash)
         {
             return stringToHash.GetHashCode().ToString("X", CultureInfo.InvariantCulture);
         }
-
+        
         /// <summary>
         /// Get the hash for the assemblyPaths
         /// </summary>
@@ -266,12 +268,26 @@ internal static bool IsSlash(char c)
         /// <summary>
         /// Trims the string and removes any double quotes around it.
         /// </summary>
-        internal static string TrimAndStripAnyQuotes(string path)
+        ///
+        public static bool EnsurePathIsSingleQuoted(string path)
         {
-            // Trim returns the same string if trimming isn't needed
-            path = path.Trim();
-            path = path.Trim(new char[] { '"' });
+            int endId = path.Length - 1;
+            char singleQuote = '\'';
 
+            return path[0] == singleQuote && path[endId] == singleQuote;
+        }
+        internal static string TrimAndStripAnyQuotes(string path)
+        {
+            
+            if (EnsurePathIsSingleQuoted(path))
+            {
+                // Trim returns the same string if trimming isn't needed
+                path = path.Trim(new char[] { '\'' });
+            }
+            else
+            {
+                path = path.Trim(new char[] { '"' });
+            }
             return path;
         }
 
@@ -538,16 +554,14 @@ private static Span<char> CollapseSlashes(Span<char> str)
 
             return str.Slice(0, sliceLength);
         }
-
+        
         private static Span<char> RemoveQuotes(Span<char> path)
         {
             int endId = path.Length - 1;
-            char singleQuote = '\'';
             char doubleQuote = '\"';
-
             bool hasQuotes = path.Length > 2
-                && ((path[0] == singleQuote && path[endId] == singleQuote)
-                || (path[0] == doubleQuote && path[endId] == doubleQuote));
+            && (EnsurePathIsSingleQuoted(path.ToString())
+            || (path[0] == doubleQuote && path[endId] == doubleQuote));
 
             return hasQuotes ? path.Slice(1, endId - 1) : path;
         }
@@ -1061,7 +1075,7 @@ internal static string MakeRelative(string basePath, string path)
             {
                 return ".";
             }
-            
+
             // If the paths have no component in common, the only valid relative path is the full path.
             if (index == 0)
             {
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 7080a2e7ccc..7bde81ba847 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -27,6 +27,37 @@ public void GetItemSpecModifier()
             TestGetItemSpecModifier(null);
         }
 
+        [Fact]
+        public void TestEnsurePathIsSingleQuoted()
+        {
+            string currentDirectory = "\'/file/path/hackathon\'";
+            bool isSingleQuoted = FileUtilities.EnsurePathIsSingleQuoted(currentDirectory);
+            Assert.True(isSingleQuoted);
+        }
+
+        [Fact]
+        public void TestEnsurePathIsNotSingleQuoted()
+        {
+            string currentDirectory = "\"/file/path/hackathon\"";
+            bool isSingleQuoted = FileUtilities.EnsurePathIsSingleQuoted(currentDirectory);
+            Assert.False(isSingleQuoted);
+        }
+
+        [Fact]
+        public void TestTrimAndStripAnyQuotes()
+        {
+            string currentDirectory = "\"/file/path/hackathon\"";
+            string isTrimmed = FileUtilities.TrimAndStripAnyQuotes(currentDirectory);
+            Assert.Equal("/file/path/hackathon", isTrimmed);
+        }
+        [Fact]
+        public void TestTrimAndStripSingleQuotes()
+        {
+            string currentDirectory = "\'/file/path/hackathon\'";
+            string isTrimmed = FileUtilities.TrimAndStripAnyQuotes(currentDirectory);
+            Assert.Equal("/file/path/hackathon", isTrimmed);
+        }
+
         private static void TestGetItemSpecModifier(string currentDirectory)
         {
             string cache = null;
