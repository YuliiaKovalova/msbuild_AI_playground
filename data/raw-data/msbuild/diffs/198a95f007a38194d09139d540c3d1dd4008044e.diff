diff --git a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
index 997f7dd24dc..14ef2b7a5b2 100644
--- a/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
+++ b/src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs
@@ -635,12 +635,12 @@ public void SolutionEdgesShouldNotOverwriteMultitargetingEdges()
             GetInnerBuilds(graph, 3).SelectMany(n => GetIncomingEdgeItemsToNode(n, edges)).ShouldAllBe(edgeItem => !IsSolutionItemReference(edgeItem));
             GetInnerBuilds(graph, 3).SelectMany(n => GetOutgoingEdgeItemsFromNode(n, edges)).ShouldAllBe(edgeItem => !IsSolutionItemReference(edgeItem));
 
-            IEnumerable<ProjectItemInstance> GetOutgoingEdgeItemsFromNode(ProjectGraphNode node, IReadOnlyDictionary<(ConfigurationMetadata, ConfigurationMetadata), ProjectItemInstance> edgeInfos)
+            IEnumerable<ProjectReferenceSnapshot> GetOutgoingEdgeItemsFromNode(ProjectGraphNode node, IReadOnlyDictionary<(ConfigurationMetadata, ConfigurationMetadata), ProjectReferenceSnapshot> edgeInfos)
             {
                 return edgeInfos.Where(e => e.Key.Item1.Equals(node.ToConfigurationMetadata())).Select(e => e.Value);
             }
 
-            IEnumerable<ProjectItemInstance> GetIncomingEdgeItemsToNode(ProjectGraphNode node, IReadOnlyDictionary<(ConfigurationMetadata, ConfigurationMetadata), ProjectItemInstance> edgeInfos)
+            IEnumerable<ProjectReferenceSnapshot> GetIncomingEdgeItemsToNode(ProjectGraphNode node, IReadOnlyDictionary<(ConfigurationMetadata, ConfigurationMetadata), ProjectReferenceSnapshot> edgeInfos)
             {
                 return edgeInfos.Where(e => e.Key.Item2.Equals(node.ToConfigurationMetadata())).Select(e => e.Value);
             }
@@ -668,7 +668,7 @@ public void GraphConstructionShouldThrowOnMissingSolutionDependencies()
             exception.Message.ShouldContain("but a project with this GUID was not found in the .SLN file");
         }
 
-        private static bool IsSolutionItemReference(ProjectItemInstance edgeItem)
+        private static bool IsSolutionItemReference(ProjectReferenceSnapshot edgeItem)
         {
             return edgeItem.ItemType == GraphBuilder.SolutionItemReference;
         }
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 6b415681733..cd56d549948 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -54,11 +54,11 @@ public static void AssertOuterBuild(
             {
                 AssertInnerBuildEvaluation(innerBuild, true, additionalGlobalProperties);
 
-                ProjectItemInstance edge = graph.TestOnly_Edges[(outerBuild, innerBuild)];
+                var edge = graph.TestOnly_Edges[(outerBuild, innerBuild)];
                 edge.DirectMetadataCount.ShouldBe(1);
 
                 string expectedPropertiesMetadata = $"{InnerBuildPropertyName}={innerBuild.ProjectInstance.GlobalProperties[InnerBuildPropertyName]}";
-                edge.GetMetadata("Properties").EvaluatedValue.ShouldBe(expectedPropertiesMetadata);
+                edge.GetMetadataValue("Properties").ShouldBe(expectedPropertiesMetadata);
             }
 
             // Ensure edges were added directly to the inner builds
@@ -79,8 +79,8 @@ public static void AssertOuterBuild(
 
                     graph.TestOnly_Edges.HasEdge((outerBuild, innerBuild)).ShouldBeTrue();
 
-                    ProjectItemInstance edgeToOuterBuild = graph.TestOnly_Edges[(outerBuildReferencer, outerBuild)];
-                    ProjectItemInstance edgeToInnerBuild = graph.TestOnly_Edges[(outerBuildReferencer, innerBuild)];
+                    var edgeToOuterBuild = graph.TestOnly_Edges[(outerBuildReferencer, outerBuild)];
+                    var edgeToInnerBuild = graph.TestOnly_Edges[(outerBuildReferencer, innerBuild)];
 
                     edgeToOuterBuild.ShouldBe(edgeToInnerBuild);
                 }
@@ -93,7 +93,7 @@ public static void AssertNonMultitargetingNode(ProjectGraphNode node, Dictionary
 
             IsNotMultitargeting(node).ShouldBeTrue();
             node.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
-            node.ProjectInstance.GetProperty(InnerBuildPropertyName).ShouldBeNull();
+            node.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNull();
         }
 
         public static void AssertOuterBuildEvaluation(ProjectGraphNode outerBuild, Dictionary<string, string> additionalGlobalProperties)
@@ -103,7 +103,7 @@ public static void AssertOuterBuildEvaluation(ProjectGraphNode outerBuild, Dicti
             IsOuterBuild(outerBuild).ShouldBeTrue();
             IsInnerBuild(outerBuild).ShouldBeFalse();
 
-            outerBuild.ProjectInstance.GetProperty(InnerBuildPropertyName).ShouldBeNull();
+            outerBuild.ProjectInstance.GetPropertyValue(InnerBuildPropertyName).ShouldBeNull();
             outerBuild.ProjectInstance.GlobalProperties.ShouldBeSameIgnoringOrder(EmptyGlobalProperties.AddRange(additionalGlobalProperties));
         }
 
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 932c3c8e439..e2c0da2d383 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -132,10 +132,10 @@ public void UpdatingReferencesIsBidirectional()
                 var projectInstance = new Project().CreateProjectInstance();
                 var node = new ProjectGraphNode(projectInstance);
                 var reference1 = new ProjectGraphNode(projectInstance);
-                var referenceItem1 = new ProjectItemInstance(projectInstance, "Ref1", "path1", "file1");
+                var referenceItem1 = new ProjectReferenceSnapshot(new ProjectItemInstance(projectInstance, "Ref1", "path1", "file1"));
 
                 var reference2 = new ProjectGraphNode(projectInstance);
-                var referenceItem2 = new ProjectItemInstance(projectInstance, "Ref2", "path2", "file2");
+                var referenceItem2 = new ProjectReferenceSnapshot(new ProjectItemInstance(projectInstance, "Ref2", "path2", "file2"));
 
                 var edges = new GraphBuilder.GraphEdges();
 
@@ -179,8 +179,8 @@ public void FirstEdgeWinsWhenMultipleEdgesPointToSameReference()
                 var projectInstance = new Project().CreateProjectInstance();
                 var node = new ProjectGraphNode(projectInstance);
                 var reference1 = new ProjectGraphNode(projectInstance);
-                var referenceItem1 = new ProjectItemInstance(projectInstance, "Ref1", "path1", "file1");
-                var referenceItem2 = new ProjectItemInstance(projectInstance, "Ref2", "path1", "file1");
+                var referenceItem1 = new ProjectReferenceSnapshot(new ProjectItemInstance(projectInstance, "Ref1", "path1", "file1"));
+                var referenceItem2 = new ProjectReferenceSnapshot(new ProjectItemInstance(projectInstance, "Ref2", "path1", "file1"));
 
                 var edges = new GraphBuilder.GraphEdges();
 
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 8cf4e781f30..15853068d7a 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -17,8 +17,8 @@ namespace Microsoft.Build.Graph
 {
     public class ProjectReferenceSnapshot
     {
-        public string EvaluatedInclude = "";
-        public string ItemType = "";
+        public string EvaluatedInclude = string.Empty;
+        public string ItemType = string.Empty;
 
         private Dictionary<string, string> Metadata;
 
@@ -59,10 +59,17 @@ public string GetMetadataValue(string metadataName)
             // throw new System.Exception($"Metadata Not Found {metadataName} in {ItemType}::{EvaluatedInclude} snapshot.");
         }
 
-        public void SetMetadata(string key, string value)
+        public void SetMetadata(string metadataName, string value)
         {
-            Metadata[key] = value;
+            Metadata[metadataName] = value;
         }
+
+        public bool HasMetadata(string metadataName)
+        {
+            return Metadata.TryGetValue(metadataName, out string _);
+        }
+
+        public int DirectMetadataCount => Metadata.Count;
     }
 
     public class ProjectInstanceSnapshot
@@ -145,7 +152,7 @@ public ProjectInstanceSnapshot(ProjectInstance instance)
         public List<string> Targets;
         internal ProjectType ProjectType;
         public List<string> DefaultTargets;
-        public Construction.ElementLocation ProjectFileLocation;
+        public ElementLocation ProjectFileLocation;
         internal Collections.PropertyDictionary<ProjectPropertyInstance> GlobalPropertiesDictionary;
         public IDictionary<string, string> GlobalProperties;
         public Dictionary<string, string> Properties;
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 762fae72ea7..239c6b534df 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -563,5 +563,7 @@ private static bool MSBuildStringIsTrue(string msbuildString) =>
             ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
 
         private static bool MSBuildStringIsFalse(string msbuildString) => !MSBuildStringIsTrue(msbuildString);
+
+        internal static ProjectType GetProjectType(ProjectInstanceSnapshot projectInstance) => projectInstance.ProjectType;
     }
 }
