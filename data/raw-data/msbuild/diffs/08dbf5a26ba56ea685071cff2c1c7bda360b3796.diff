diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index e655c52b8aa..83a841dbc71 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -531,6 +531,7 @@ private bool TryLaunchServer()
 
         private bool TrySendShutdownCommand()
         {
+            CommunicationsUtilities.Trace("Sending shutdown command to server.");
             _packetPump.ServerWillDisconnect();
             return TrySendPacket(() => new NodeBuildComplete(false /* no node reuse */));
         }
diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 786d1289acd..8951d5bcd31 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -11,6 +11,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
 #if NETFRAMEWORK
@@ -218,11 +219,11 @@ public void BuildsWhileBuildIsRunningOnServer()
         [InlineData(false)]
         public void CanShutdownServerProcess(bool byBuildManager)
         {
+            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+
             // this log seems to be flaky, lets enable better logging to investigate it next time
             // TODO: delete after investigated its flakiness
-            _env.SetEnvironmentVariable("MSBuildDebugEngine", "1");
-
-            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+            _env.WithTransientDebugEngineForNewProcesses(true);
 
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
 
@@ -243,9 +244,7 @@ public void CanShutdownServerProcess(bool byBuildManager)
             else
             {
                 bool serverIsDown = MSBuildClient.ShutdownServer(CancellationToken.None);
-                // serverIsDown.ShouldBeTrue();
-                // TODO: uncomment line above and delete line bellow, once tested if logging is sufficient
-                serverIsDown.ShouldBeFalse();
+                serverIsDown.ShouldBeTrue();
             }
 
             serverProcess.WaitForExit(10_000);
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 6e531508885..760258dbfe7 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -1,6 +1,10 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+
+
+#nullable disable
+
 using System;
 using System.Collections;
 using System.Collections.Generic;
@@ -9,6 +13,7 @@
 using System.IO.Compression;
 using System.Linq;
 using System.Text.RegularExpressions;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Shared.FileSystem;
@@ -18,9 +23,6 @@
 
 using TempPaths = System.Collections.Generic.Dictionary<string, string>;
 using CommonWriterType = System.Action<string, string, System.Collections.Generic.IEnumerable<string>>;
-
-#nullable disable
-
 namespace Microsoft.Build.UnitTests
 {
     public partial class TestEnvironment : IDisposable
@@ -331,6 +333,16 @@ public TransientTestProcess WithTransientProcess(int processId)
             return WithTransientTestState(transientTestProcess);
         }
 
+        /// <summary>
+        /// Register transient debug engine.
+        /// Usable for tests which investigating might need msbuild debug logs.
+        /// </summary>
+        public TransientDebugEngine WithTransientDebugEngineForNewProcesses(bool state)
+        {
+            TransientDebugEngine transient = new(state);
+            return WithTransientTestState(transient);
+        }
+
         #endregion
 
         private class DefaultOutput : ITestOutputHelper
@@ -430,16 +442,30 @@ void AssertDictionaryInclusion(IDictionary superset, IDictionary subset, string
 
     public class BuildFailureLogInvariant : TestInvariant
     {
+        private const string MSBuildLogFiles = "MSBuild_*.txt";
         private readonly string[] _originalFiles;
 
         public BuildFailureLogInvariant()
         {
-            _originalFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*.txt");
+            _originalFiles = GetMSBuildLogFiles();
+        }
+
+        private string[] GetMSBuildLogFiles()
+        {
+            List<string> files = new();
+            string debugPath = FileUtilities.TempFileDirectory;
+            if (debugPath != null)
+            {
+                files.AddRange(Directory.GetFiles(debugPath, MSBuildLogFiles));
+            }
+            files.AddRange(Directory.GetFiles(Path.GetTempPath(), MSBuildLogFiles));
+
+            return files.ToArray();
         }
 
         public override void AssertInvariant(ITestOutputHelper output)
         {
-            var newFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*.txt");
+            var newFiles = GetMSBuildLogFiles();
 
             int newFilesCount = newFiles.Length;
             if (newFilesCount > _originalFiles.Length)
@@ -588,6 +614,34 @@ public override void Revert()
         }
     }
 
+    public class TransientDebugEngine : TransientTestState
+    {
+        private readonly string _previousDebugEngineEnv;
+        private readonly string _previousDebugPath;
+
+        public TransientDebugEngine(bool state)
+        {
+            _previousDebugEngineEnv = Environment.GetEnvironmentVariable("MSBuildDebugEngine");
+            _previousDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+
+            if (state)
+            {
+                Environment.SetEnvironmentVariable("MSBuildDebugEngine", "1");
+                Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", FileUtilities.TempFileDirectory);
+            }
+            else
+            {
+                Environment.SetEnvironmentVariable("MSBuildDebugEngine", null);
+                Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", null);
+            }
+        }
+
+        public override void Revert()
+        {
+            Environment.SetEnvironmentVariable("MSBuildDebugEngine", _previousDebugEngineEnv);
+            Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", _previousDebugPath);
+        }
+    }
 
     public class TransientTestFile : TransientTestState
     {
