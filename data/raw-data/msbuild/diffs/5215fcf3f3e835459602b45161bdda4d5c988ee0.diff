diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 66960d35647..c7934aa75b3 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -6,8 +6,6 @@
 //-----------------------------------------------------------------------
 
 using System;
-using System.Collections;
-using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Diagnostics;
@@ -15,7 +13,6 @@
 using System.IO;
 using System.Linq;
 using System.Text;
-using System.Threading;
 using System.Xml;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
@@ -31,10 +28,14 @@
 using ProjectItemFactory = Microsoft.Build.Evaluation.ProjectItem.ProjectItemFactory;
 using System.Globalization;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Definition;
+using Microsoft.Build.Evaluation.Context;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Utilities;
 using EvaluationItemSpec = Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
 using EvaluationItemExpressionFragment = Microsoft.Build.Evaluation.ItemExpressionFragment<Microsoft.Build.Evaluation.ProjectProperty, Microsoft.Build.Evaluation.ProjectItem>;
+using EvaluationContext = Microsoft.Build.Framework.EvaluationContext.EvaluationContext;
+using EvaluationContextFactory = Microsoft.Build.Framework.EvaluationContext.EvaluationContextFactory;
 
 namespace Microsoft.Build.Evaluation
 {
@@ -122,6 +123,17 @@ public class Project
         /// </summary>
         private RenameHandlerDelegate _renameHandler;
 
+        /// <summary>
+        /// Needed because the Project may trigger reevalutions under the covers on some of its operations, which, ideally,
+        /// should use the same context as the initial evaluation.
+        /// 
+        /// Examples of operations which may trigger reevaluations:
+        /// - <see cref="CreateProjectInstance()"/>
+        /// - <see cref="GetAllGlobs()"/>
+        /// - <see cref="GetItemProvenance(string)"/>
+        /// </summary>
+        private EvaluationContextBase _lastEvaluationContext;
+
         /// <summary>
         /// Default project template options (include all features).
         /// </summary>
@@ -289,6 +301,11 @@ public Project(ProjectRootElement xml, IDictionary<string, string> globalPropert
         /// <param name="projectCollection">The <see cref="ProjectCollection"/> the project is added to.</param>
         /// <param name="loadSettings">The <see cref="ProjectLoadSettings"/> to use for evaluation.</param>
         public Project(ProjectRootElement xml, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)
+            : this(xml, globalProperties,toolsVersion, subToolsetVersion, projectCollection, loadSettings, null)
+        {
+        }
+
+        private Project(ProjectRootElement xml, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
         {
             ErrorUtilities.VerifyThrowArgumentNull(xml, "xml");
             ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(toolsVersion, "toolsVersion");
@@ -297,7 +314,7 @@ public Project(ProjectRootElement xml, IDictionary<string, string> globalPropert
             _xml = xml;
             _projectCollection = projectCollection;
 
-            Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings);
+            Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings, evaluationContext);
         }
 
         /// <summary>
@@ -375,6 +392,11 @@ public Project(XmlReader xmlReader, IDictionary<string, string> globalProperties
         /// <param name="projectCollection">The collection with which this project should be associated. May not be null.</param>
         /// <param name="loadSettings">The load settings for this project.</param>
         public Project(XmlReader xmlReader, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)
+            : this(xmlReader, globalProperties, toolsVersion, subToolsetVersion, projectCollection, loadSettings, null)
+        {
+        }
+
+        private Project(XmlReader xmlReader, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
         {
             ErrorUtilities.VerifyThrowArgumentNull(xmlReader, "xmlReader");
             ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(toolsVersion, "toolsVersion");
@@ -393,7 +415,7 @@ public Project(XmlReader xmlReader, IDictionary<string, string> globalProperties
                 throw;
             }
 
-            Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings);
+            Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings, evaluationContext);
         }
 
         /// <summary>
@@ -473,6 +495,11 @@ public Project(string projectFile, IDictionary<string, string> globalProperties,
         /// <param name="projectCollection">The collection with which this project should be associated. May not be null.</param>
         /// <param name="loadSettings">The load settings for this project.</param>
         public Project(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)
+            : this(projectFile, globalProperties, toolsVersion, subToolsetVersion, projectCollection, loadSettings, null)
+        {
+        }
+
+        private Project(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectFile, "projectFile");
             ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(toolsVersion, "toolsVersion");
@@ -486,7 +513,12 @@ public Project(string projectFile, IDictionary<string, string> globalProperties,
 
             try
             {
-                _xml = ProjectRootElement.OpenProjectOrSolution(projectFile, globalProperties, toolsVersion, projectCollection.ProjectRootElementCache, true /*Explicitly loaded*/);
+                _xml = ProjectRootElement.OpenProjectOrSolution(
+                    projectFile,
+                    globalProperties,
+                    toolsVersion,
+                    projectCollection.ProjectRootElementCache,
+                    true /*Explicitly loaded*/);
             }
             catch (InvalidProjectFileException ex)
             {
@@ -496,7 +528,7 @@ public Project(string projectFile, IDictionary<string, string> globalProperties,
 
             try
             {
-                Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings);
+                Initialize(globalProperties, toolsVersion, subToolsetVersion, loadSettings, evaluationContext);
             }
             catch (Exception ex)
             {
@@ -528,7 +560,8 @@ public static Project FromFile(string file, ProjectConstructionInfo info)
                 info.ToolsVersion,
                 info.SubToolsetVersion,
                 info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
-                info.LoadSettings);
+                info.LoadSettings,
+                info.EvaluationContext);
         }
 
         /// <summary>
@@ -545,7 +578,8 @@ public static Project FromProjectRootElement(ProjectRootElement rootElement, Pro
                 info.ToolsVersion,
                 info.SubToolsetVersion,
                 info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
-                info.LoadSettings);
+                info.LoadSettings,
+                info.EvaluationContext);
         }
 
         /// <summary>
@@ -562,7 +596,8 @@ public static Project FromXmlReader(XmlReader reader, ProjectConstructionInfo in
                 info.ToolsVersion,
                 info.SubToolsetVersion,
                 info.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
-                info.LoadSettings);
+                info.LoadSettings,
+                info.EvaluationContext);
         }
 
         /// <summary>
@@ -1129,6 +1164,8 @@ public static string GetEvaluatedItemIncludeEscaped(ProjectItemDefinition item)
             return ((IItem)item).EvaluatedIncludeEscaped;
         }
 
+        public static EvaluationContextFactory EvaluationContextFactory { get; } = new Context.EvaluationContextFactory();
+
         /// <summary>
         /// Finds all the globs specified in item includes.
         /// </summary>
@@ -2139,6 +2176,20 @@ public void ReevaluateIfNecessary()
             ReevaluateIfNecessary(LoggingService);
         }
 
+        /// <summary>
+        /// See <see cref="ReevaluateIfNecessary()"/>
+        /// </summary>
+        /// <param name="evaluationContext">The <see cref="EvaluationContext"/> to use. See <see cref="ProjectConstructionInfo.EvaluationContext"/></param>
+        public void ReevaluateIfNecessary(EvaluationContext evaluationContext)
+        {
+            var context = evaluationContext as EvaluationContextBase;
+
+            ErrorUtilities.VerifyThrow(context != null, "OM_IncorrectEvaluationContextType", evaluationContext.GetType().FullName, typeof(EvaluationContextFactory).FullName);
+
+            _lastEvaluationContext = context;
+            ReevaluateIfNecessary(LoggingService);
+        }
+
         /// <summary>
         /// Save the project to the file system, if dirty.
         /// Uses the default encoding.
@@ -2649,16 +2700,6 @@ private bool RemoveItemHelper(ProjectItem item)
             return result;
         }
 
-        /// <summary>
-        /// Creates a project instance based on this project using the specified logging service.
-        /// </summary>  
-        private ProjectInstance CreateProjectInstance(ILoggingService loggingServiceForEvaluation, ProjectInstanceSettings settings)
-        {
-            ReevaluateIfNecessary(loggingServiceForEvaluation);
-
-            return new ProjectInstance(_data, DirectoryPath, FullPath, ProjectCollection.HostServices, _projectCollection.EnvironmentProperties, settings);
-        }
-
         /// <summary>
         /// Re-evaluates the project using the specified logging service.
         /// </summary>
@@ -2688,9 +2729,33 @@ private void ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation,
             }
         }
 
+        /// <summary>
+        /// Creates a project instance based on this project using the specified logging service.
+        /// </summary>  
+        private ProjectInstance CreateProjectInstance(ILoggingService loggingServiceForEvaluation, ProjectInstanceSettings settings)
+        {
+            ReevaluateIfNecessary(loggingServiceForEvaluation);
+
+            return new ProjectInstance(_data, DirectoryPath, FullPath, ProjectCollection.HostServices, _projectCollection.EnvironmentProperties, settings);
+        }
+
         private void Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)
         {
-            Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.Evaluate(_data, _xml, loadSettings, ProjectCollection.MaxNodeCount, ProjectCollection.EnvironmentProperties, loggingServiceForEvaluation, new ProjectItemFactory(this), _projectCollection, _projectCollection.ProjectRootElementCache, s_buildEventContext, null /* no project instance for debugging */, SdkResolverService.Instance, BuildEventContext.InvalidSubmissionId);
+            Evaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.Evaluate(
+                _data,
+                _xml,
+                loadSettings,
+                ProjectCollection.MaxNodeCount,
+                ProjectCollection.EnvironmentProperties,
+                loggingServiceForEvaluation,
+                new ProjectItemFactory(this),
+                _projectCollection,
+                _projectCollection.ProjectRootElementCache,
+                s_buildEventContext,
+                null /* no project instance for debugging */,
+                SdkResolverService.Instance,
+                BuildEventContext.InvalidSubmissionId,
+                _lastEvaluationContext);
 
             ErrorUtilities.VerifyThrow(LastEvaluationId != BuildEventContext.InvalidEvaluationId, "Evaluation should produce an evaluation ID");
 
@@ -2721,10 +2786,12 @@ private void Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoad
         /// Global properties may be null.
         /// Tools version may be null.
         /// </summary>
-        private void Initialize(IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectLoadSettings loadSettings)
+        private void Initialize(IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
         {
             _xml.MarkAsExplicitlyLoaded();
 
+            evaluationContext = evaluationContext ?? EvaluationContextFactory.CreateNullContext();
+
             PropertyDictionary<ProjectPropertyInstance> globalPropertiesCollection = new PropertyDictionary<ProjectPropertyInstance>();
 
             foreach (ProjectPropertyInstance property in ProjectCollection.GlobalPropertiesCollection)
@@ -2760,7 +2827,7 @@ private void Initialize(IDictionary<string, string> globalProperties, string too
 
             ErrorUtilities.VerifyThrow(LastEvaluationId == BuildEventContext.InvalidEvaluationId, "This is the first evaluation therefore the last evaluation id is invalid");
 
-            ReevaluateIfNecessary();
+            ReevaluateIfNecessary(evaluationContext);
 
             ErrorUtilities.VerifyThrow(LastEvaluationId != BuildEventContext.InvalidEvaluationId, "Last evaluation ID must be valid after the first evaluation");
 
diff --git a/src/Build/Definition/ProjectConstructionInfo.cs b/src/Build/Definition/ProjectConstructionInfo.cs
index b8326f2e845..c5253c7123f 100644
--- a/src/Build/Definition/ProjectConstructionInfo.cs
+++ b/src/Build/Definition/ProjectConstructionInfo.cs
@@ -1,6 +1,8 @@
 ﻿using System.Collections.Generic;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework.EvaluationContext;
 
-namespace Microsoft.Build.Evaluation
+namespace Microsoft.Build.Definition
 {
     /// <summary>
     ///     Common <see cref="Project" /> constructor arguments.
@@ -31,5 +33,13 @@ public class ProjectConstructionInfo
         /// The <see cref="ProjectLoadSettings"/> to use for evaluation.
         /// </summary>
         public ProjectLoadSettings LoadSettings { get; set; } = ProjectLoadSettings.Default;
+
+        /// <summary>
+        /// The <see cref="EvaluationContext"/> to use for evaluation. Must be created via <see cref="Project.EvaluationContextFactory"/>.
+        /// The <see cref="Project"/> will keep the reference to the context because
+        /// some of its methods trigger hidden reevaluations, and those hidden reevaluations need the initial context.
+        /// The stored context can be overidden via <see cref="Project.ReevaluateIfNecessary(EvaluationContext)"/>
+        /// </summary>
+        public EvaluationContext EvaluationContext { get; set; }
     }
 }
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
new file mode 100644
index 00000000000..b43ff21dad7
--- /dev/null
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -0,0 +1,11 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+namespace Microsoft.Build.Evaluation.Context
+{
+    internal sealed class EvaluationContext : EvaluationContextBase
+    {
+    }
+}
diff --git a/src/Build/Evaluation/Context/EvaluationContextBase.cs b/src/Build/Evaluation/Context/EvaluationContextBase.cs
new file mode 100644
index 00000000000..42625ec0ad0
--- /dev/null
+++ b/src/Build/Evaluation/Context/EvaluationContextBase.cs
@@ -0,0 +1,13 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+using PublicEvaluationContext = Microsoft.Build.Framework.EvaluationContext.EvaluationContext;
+
+namespace Microsoft.Build.Evaluation.Context
+{
+    internal abstract class EvaluationContextBase : PublicEvaluationContext
+    {
+    }
+}
diff --git a/src/Build/Evaluation/Context/EvaluationContextFactory.cs b/src/Build/Evaluation/Context/EvaluationContextFactory.cs
new file mode 100644
index 00000000000..71fd6443397
--- /dev/null
+++ b/src/Build/Evaluation/Context/EvaluationContextFactory.cs
@@ -0,0 +1,22 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+using EvaluationContextFactoryBase = Microsoft.Build.Framework.EvaluationContext.EvaluationContextFactory;
+
+namespace Microsoft.Build.Evaluation.Context
+{
+    internal sealed class EvaluationContextFactory : EvaluationContextFactoryBase
+    {
+        public override Framework.EvaluationContext.EvaluationContext CreateContext()
+        {
+            return new EvaluationContext();
+        }
+
+        public override Framework.EvaluationContext.EvaluationContext CreateNullContext()
+        {
+            return new NullEvaluationContext();
+        }
+    }
+}
diff --git a/src/Build/Evaluation/Context/NullEvaluationContext.cs b/src/Build/Evaluation/Context/NullEvaluationContext.cs
new file mode 100644
index 00000000000..835eca97a00
--- /dev/null
+++ b/src/Build/Evaluation/Context/NullEvaluationContext.cs
@@ -0,0 +1,11 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+namespace Microsoft.Build.Evaluation.Context
+{
+    internal sealed class NullEvaluationContext : EvaluationContextBase
+    {
+    }
+}
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 477cb42aed0..2714c22ea3c 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1,4 +1,4 @@
-// Copyright (c) Microsoft. All rights reserved.
+﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 //-----------------------------------------------------------------------
 // </copyright>
@@ -23,6 +23,7 @@
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Evaluation.Context;
 #if MSBUILDENABLEVSPROFILING 
 using Microsoft.VisualStudio.Profiler;
 #endif
@@ -175,6 +176,8 @@ internal class Evaluator<P, I, M, D>
         /// The current build submission ID.
         /// </summary>
         private readonly int _submissionId;
+        
+        private readonly EvaluationContextBase _evaluationContext;
 
         /// <summary>
         /// The environment properties with which evaluation should take place.
@@ -203,7 +206,19 @@ internal class Evaluator<P, I, M, D>
         /// <summary>
         /// Private constructor called by the static Evaluate method.
         /// </summary>
-        private Evaluator(IEvaluatorData<P, I, M, D> data, ProjectRootElement projectRootElement, ProjectLoadSettings loadSettings, int maxNodeCount, PropertyDictionary<ProjectPropertyInstance> environmentProperties, IItemFactory<I, I> itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCache projectRootElementCache, ProjectInstance projectInstanceIfAnyForDebuggerOnly, ISdkResolverService sdkResolverService, int submissionId)
+        private Evaluator(
+            IEvaluatorData<P, I, M, D> data,
+            ProjectRootElement projectRootElement,
+            ProjectLoadSettings loadSettings,
+            int maxNodeCount,
+            PropertyDictionary<ProjectPropertyInstance> environmentProperties,
+            IItemFactory<I, I> itemFactory,
+            IToolsetProvider toolsetProvider,
+            ProjectRootElementCache projectRootElementCache,
+            ProjectInstance projectInstanceIfAnyForDebuggerOnly,
+            ISdkResolverService sdkResolverService,
+            int submissionId,
+            EvaluationContextBase evaluationContext)
         {
             ErrorUtilities.VerifyThrowInternalNull(data, "data");
             ErrorUtilities.VerifyThrowInternalNull(projectRootElementCache, "projectRootElementCache");
@@ -232,6 +247,7 @@ private Evaluator(IEvaluatorData<P, I, M, D> data, ProjectRootElement projectRoo
             _projectInstanceIfAnyForDebuggerOnly = projectInstanceIfAnyForDebuggerOnly;
             _sdkResolverService = sdkResolverService;
             _submissionId = submissionId;
+            _evaluationContext = evaluationContext;
             _evaluationProfiler = new EvaluationProfiler((loadSettings & ProjectLoadSettings.ProfileEvaluation) != 0);
         }
 
@@ -324,12 +340,21 @@ private enum LocalsTypes : int
         /// newing one up, yet the whole class need not be static.
         /// The optional ProjectInstance is only exposed when doing debugging. It is not used by the evaluator.
         /// </remarks>
-        internal static IDictionary<string, object> Evaluate(IEvaluatorData<P, I, M, D> data, ProjectRootElement root,
-            ProjectLoadSettings loadSettings, int maxNodeCount,
-            PropertyDictionary<ProjectPropertyInstance> environmentProperties, ILoggingService loggingService,
-            IItemFactory<I, I> itemFactory, IToolsetProvider toolsetProvider,
-            ProjectRootElementCache projectRootElementCache, BuildEventContext buildEventContext,
-            ProjectInstance projectInstanceIfAnyForDebuggerOnly, ISdkResolverService sdkResolverService, int submissionId)
+        internal static IDictionary<string, object> Evaluate(
+            IEvaluatorData<P, I, M, D> data,
+            ProjectRootElement root,
+            ProjectLoadSettings loadSettings,
+            int maxNodeCount,
+            PropertyDictionary<ProjectPropertyInstance> environmentProperties,
+            ILoggingService loggingService,
+            IItemFactory<I, I> itemFactory,
+            IToolsetProvider toolsetProvider,
+            ProjectRootElementCache projectRootElementCache,
+            BuildEventContext buildEventContext,
+            ProjectInstance projectInstanceIfAnyForDebuggerOnly,
+            ISdkResolverService sdkResolverService,
+            int submissionId,
+            EvaluationContextBase evaluationContext = null)
         {
 #if (!STANDALONEBUILD)
             using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectEvaluateBegin, CodeMarkerEvent.perfMSBuildProjectEvaluateEnd))
@@ -342,7 +367,20 @@ internal static IDictionary<string, object> Evaluate(IEvaluatorData<P, I, M, D>
                 string beginProjectEvaluate = String.Format(CultureInfo.CurrentCulture, "Evaluate Project {0} - Begin", projectFile);
                 DataCollection.CommentMarkProfile(8812, beginProjectEvaluate);
 #endif
-                Evaluator<P, I, M, D> evaluator = new Evaluator<P, I, M, D>(data, root, loadSettings, maxNodeCount, environmentProperties, itemFactory, toolsetProvider, projectRootElementCache, projectInstanceIfAnyForDebuggerOnly, sdkResolverService, submissionId);
+                var evaluator = new Evaluator<P, I, M, D>(
+                    data,
+                    root,
+                    loadSettings,
+                    maxNodeCount,
+                    environmentProperties,
+                    itemFactory,
+                    toolsetProvider,
+                    projectRootElementCache,
+                    projectInstanceIfAnyForDebuggerOnly,
+                    sdkResolverService,
+                    submissionId,
+                    evaluationContext);
+
                 return evaluator.Evaluate(loggingService, buildEventContext);
 #if MSBUILDENABLEVSPROFILING 
             }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 76da47024f1..56ff1c64c16 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -260,6 +260,10 @@
     <Compile Include="Definition\ProjectImportPathMatch.cs" />
     <Compile Include="Definition\ProjectLoadSettings.cs" />
     <Compile Include="Definition\ToolsetLocalReader.cs" />
+    <Compile Include="Evaluation\Context\EvaluationContextFactory.cs" />
+    <Compile Include="Evaluation\Context\NullEvaluationContext.cs" />
+    <Compile Include="Evaluation\Context\EvaluationContextBase.cs" />
+    <Compile Include="Evaluation\Context\EvaluationContext.cs" />
     <Compile Include="Evaluation\Profiler\EvaluationLocationMarkdownPrettyPrinter.cs" />
     <Compile Include="Evaluation\Profiler\EvaluationLocationPrettyPrinterBase.cs" />
     <Compile Include="Evaluation\Profiler\EvaluationLocationTabSeparatedPrettyPrinter.cs" />
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index be765b967b1..a5b4e073829 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1467,6 +1467,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <!-- #################################################################################################-->
   <!-- The OM_ prefix indicates at the point of use that there is no error code in the message;
        these should not be used in an InvalidProjectFileException -->
+  <data name="OM_IncorrectEvaluationContextType">
+    <value>The provided evaluation context of type {0} was not created using the API factory {1}.</value>
+  </data>
   <data name="OM_IncorrectObjectAssociation">
     <value>The "{0}" object specified does not belong to the correct "{1}" object.</value>
   </data>
diff --git a/src/Framework/EvaluationContext/EvaluationContext.cs b/src/Framework/EvaluationContext/EvaluationContext.cs
new file mode 100644
index 00000000000..2456177833c
--- /dev/null
+++ b/src/Framework/EvaluationContext/EvaluationContext.cs
@@ -0,0 +1,17 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+using System;
+
+namespace Microsoft.Build.Framework.EvaluationContext
+{
+    /// <summary>
+    /// An object used by the caller to extend the lifespan of evaluation caches (by passing the object on to other evaluations).
+    /// The caller should throw away the context when the environment changes (IO, environment variables, SDK resolution inputs, etc).
+    /// </summary>
+    public abstract class EvaluationContext
+    {
+    }
+}
diff --git a/src/Framework/EvaluationContext/EvaluationContextFactory.cs b/src/Framework/EvaluationContext/EvaluationContextFactory.cs
new file mode 100644
index 00000000000..3835070d1c1
--- /dev/null
+++ b/src/Framework/EvaluationContext/EvaluationContextFactory.cs
@@ -0,0 +1,17 @@
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+//-----------------------------------------------------------------------
+// </copyright>
+
+namespace Microsoft.Build.Framework.EvaluationContext
+{
+    /// <summary>
+    /// Factory for <see cref="EvaluationContext"/>
+    /// </summary>
+    public abstract class EvaluationContextFactory
+    {
+        public abstract EvaluationContext CreateContext();
+
+        public abstract EvaluationContext CreateNullContext();
+    }
+}
