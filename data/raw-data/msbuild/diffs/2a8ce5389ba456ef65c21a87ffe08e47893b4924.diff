diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index 4b67d4133cb..cc8bf13d120 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -77,8 +77,6 @@
   <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0' and '$(MSBuildProjectFile)' != 'PortableTask.csproj'">
     <ProduceOnlyReferenceAssembly>true</ProduceOnlyReferenceAssembly>
     <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
-    <RunAnalyzersDuringBuild>false</RunAnalyzersDuringBuild>
-    <RunAnalyzersDuringLiveAnalysis>false</RunAnalyzersDuringLiveAnalysis>
     <RunAnalyzers>false</RunAnalyzers>
   </PropertyGroup>
 </Project>
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 0f938f6958b..75c26d786e1 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -211,14 +211,7 @@
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
     <PackageReference Include="System.Configuration.ConfigurationManager" />
   </ItemGroup>
-  <!-- Because projects are no longer targeting netstandard2.0,
-       manually download this library for RoslynCodeTaskFactory.
-       See target AddRefAssemblies below. -->
-  <ItemGroup>
-    <PackageDownload Include="netstandard.library">
-      <Version>[2.0.3]</Version>
-    </PackageDownload>
-  </ItemGroup>
+
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <!-- File for Assemblies we depend on -->
     <Reference Include="System" />
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index 6aa90907dcd..537d6d7b56a 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -185,11 +185,11 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                         {
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
 
+                            using (Stream responseStream = await response.Content.ReadAsStreamAsync(
 #if RUNTIME_TYPE_NETCORE
-                            using (Stream responseStream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false))
-#else
-                            using (Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
+                            cancellationToken
 #endif
+                            ).ConfigureAwait(false))
                             {
                                 await responseStream.CopyToAsync(target, 1024, cancellationToken).ConfigureAwait(false);
                             }
