diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index ed2bd827dad..cfa9694fee3 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -17,7 +17,7 @@
 
 namespace Microsoft.Build.Graph.UnitTests
 {
-    public class IsolateProjectsTests : IDisposable
+    public class IsolateProjectsTests : IDisposable, IClassFixture<IsolateProjectsTests.IsolateProjectsClassFixture>
     {
         private readonly string _project = @"
                 <Project DefaultTargets='BuildSelf'>
@@ -131,17 +131,7 @@ public class IsolateProjectsTests : IDisposable
         public IsolateProjectsTests(ITestOutputHelper testOutput)
         {
             _testOutput = testOutput;
-            _env = TestEnvironment.Create(_testOutput, ignoreBuildErrorFiles: true);
-
-            if (NativeMethodsShared.IsOSX)
-            {
-                // OSX links /var into /private, which makes Path.GetTempPath() to return "/var..." but Directory.GetCurrentDirectory to return "/private/var..."
-                // this discrepancy fails the msbuild undeclared reference enforcements due to failed path equality checks
-                var tempFolder = _env.CreateFolder(Path.Combine(Directory.GetCurrentDirectory(), Guid.NewGuid().ToString("N")));
-                _env.SetTempPath(tempFolder.Path);
-            }
-
-            _env.WithInvariant(new BuildFailureLogInvariant());
+            _env = TestEnvironment.Create(_testOutput);
 
             // todo investigate why out of proc builds fail on macos https://github.com/dotnet/msbuild/issues/3915
             var disableInProcNode = !NativeMethodsShared.IsOSX;
@@ -159,8 +149,6 @@ public void Dispose()
             _env.Dispose();
         }
 
-        
-
         [Theory]
         [InlineData(BuildResultCode.Success, new string[] { })]
         [InlineData(BuildResultCode.Success, new[] {"BuildSelf"})]
@@ -494,5 +482,27 @@ public void SkippedTargetsShouldNotTriggerCacheMissEnforcement()
                 buildManagerSession.Logger.AssertMessageCount("Previously built successfully", 4);
             }
         }
+
+        internal class IsolateProjectsClassFixture : IDisposable
+        {
+            private readonly TestEnvironment _classFixtureEnv;
+
+            public IsolateProjectsClassFixture()
+            {
+                _classFixtureEnv = TestEnvironment.Create(output: null, ignoreBuildErrorFiles: true);
+                if (NativeMethodsShared.IsOSX)
+                {
+                    // OSX links /var into /private, which makes Path.GetTempPath() to return "/var..." but Directory.GetCurrentDirectory to return "/private/var..."
+                    // this discrepancy fails the msbuild undeclared reference enforcements due to failed path equality checks
+                    var tempFolder = _classFixtureEnv.CreateFolder(Path.Combine(Directory.GetCurrentDirectory(), Guid.NewGuid().ToString("N")));
+                    _classFixtureEnv.SetTempPath(tempFolder.Path);
+                }
+            }
+
+            public void Dispose()
+            {
+                _classFixtureEnv.Dispose();
+            }
+        }
     }
 }
diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index 0d5136b96bd..f31d853a031 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -64,10 +64,6 @@ private static string CreateFolderUnderTemp()
             else
             {
                 Directory.CreateDirectory(basePath);
-                DirectoryInfo dInfo = new DirectoryInfo(basePath);
-                DirectorySecurity dSecurity = dInfo.GetAccessControl();
-                dSecurity.AddAccessRule(new FileSystemAccessRule(new SecurityIdentifier(WellKnownSidType.WorldSid, null), FileSystemRights.FullControl, InheritanceFlags.ObjectInherit | InheritanceFlags.ContainerInherit, PropagationFlags.NoPropagateInherit, AccessControlType.Allow));
-                dInfo.SetAccessControl(dSecurity);
             }
 
             basePath = FileUtilities.EnsureTrailingSlash(basePath);
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 92eff281743..5105fc8de90 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -448,25 +448,15 @@ public BuildFailureLogInvariant()
 
         private string[] GetMSBuildLogFiles()
         {
-            try
+            List<string> files = new();
+            string debugPath = FileUtilities.TempFileDirectory;
+            if (debugPath != null)
             {
-                List<string> files = new();
-                string debugPath = FileUtilities.TempFileDirectory;
-                if (debugPath != null)
-                {
-                    files.AddRange(Directory.GetFiles(debugPath, MSBuildLogFiles));
-                }
-
-                files.AddRange(Directory.GetFiles(Path.GetTempPath(), MSBuildLogFiles));
-                return files.ToArray();
-            }
-            catch (Exception ex)
-            {
-                throw new AggregateException(
-                    ex,
-                    new InvalidOperationException($"Weird OSX error: debugPath: {FileUtilities.TempFileDirectory}, Path.GetTempPath(): {Path.GetTempPath()}, [TMP]: {Environment.GetEnvironmentVariable("TMP")}, [TMPDIR]: {Environment.GetEnvironmentVariable("TMPDIR")}")
-                );
+                files.AddRange(Directory.GetFiles(debugPath, MSBuildLogFiles));
             }
+
+            files.AddRange(Directory.GetFiles(Path.GetTempPath(), MSBuildLogFiles));
+            return files.ToArray();
         }
 
         public override void AssertInvariant(ITestOutputHelper output)
