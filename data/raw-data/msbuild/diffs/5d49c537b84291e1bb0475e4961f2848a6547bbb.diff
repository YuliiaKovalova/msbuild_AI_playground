diff --git a/src/Build/Evaluation/Conditionals/Parser.cs b/src/Build/Evaluation/Conditionals/Parser.cs
index 292226a5ed8..16915cbb3e7 100644
--- a/src/Build/Evaluation/Conditionals/Parser.cs
+++ b/src/Build/Evaluation/Conditionals/Parser.cs
@@ -301,7 +301,9 @@ private GenericExpressionNode Factor(string expression)
             {
                 GenericExpressionNode child = Expr(expression);
                 if (Same(expression, Token.TokenType.RightParenthesis))
+                {
                     return child;
+                }
                 else
                 {
                     errorPosition = _lexer.GetErrorPosition();
diff --git a/src/Deprecated/Engine/Choose/GroupingCollection.cs b/src/Deprecated/Engine/Choose/GroupingCollection.cs
index 89ebe3363b9..b743c0bc57f 100644
--- a/src/Deprecated/Engine/Choose/GroupingCollection.cs
+++ b/src/Deprecated/Engine/Choose/GroupingCollection.cs
@@ -448,7 +448,9 @@ IItemPropertyGrouping insertionPoint
                 ChangePropertyGroupCount(1);
             }
             else if (newGroup is Choose)
+            {
                 this.chooseCount++;
+            }
         }
 
         /// <summary>
@@ -478,7 +480,9 @@ IItemPropertyGrouping newGroup
                 ChangePropertyGroupCount(1);
             }
             else if (newGroup is Choose)
+            {
                 this.chooseCount++;
+            }
         }
 
         /// <summary>
diff --git a/src/Deprecated/Engine/Conditionals/Parser.cs b/src/Deprecated/Engine/Conditionals/Parser.cs
index e428728b559..77513933a76 100644
--- a/src/Deprecated/Engine/Conditionals/Parser.cs
+++ b/src/Deprecated/Engine/Conditionals/Parser.cs
@@ -302,7 +302,9 @@ private GenericExpressionNode Factor(string expression)
             {
                 GenericExpressionNode child = Expr(expression);
                 if (Same(expression, Token.TokenType.RightParenthesis))
+                {
                     return child;
+                }
                 else
                 {
                     errorPosition = lexer.GetErrorPosition();
@@ -393,7 +395,9 @@ private bool Same(string expression, Token.TokenType token)
                 return true;
             }
             else
+            {
                 return false;
+            }
         }
     }
 }
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 0120745f6e3..8ca7de6dc94 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -3594,7 +3594,9 @@ private void ReadTextResources(ReaderInfo reader, String fileName)
                     {
                         String skip = sr.ReadLine();
                         if (skip.Equals("strings]"))
+                        {
                             _logger.LogWarningWithCodeFromResources(null, fileName, sr.LineNumber - 1, 1, 0, 0, "GenerateResource.ObsoleteStringsTag");
+                        }
                         else
                         {
                             throw new TextFileException(_logger.FormatResourceString("GenerateResource.UnexpectedInfBracket", "[" + skip), fileName, sr.LineNumber - 1, 1);
@@ -3913,7 +3915,9 @@ public override int Read([In, Out] char[] chars, int index, int count)
                         _col = 0;
                     }
                     else
+                    {
                         _col++;
+                    }
                 }
                 return r;
             }
