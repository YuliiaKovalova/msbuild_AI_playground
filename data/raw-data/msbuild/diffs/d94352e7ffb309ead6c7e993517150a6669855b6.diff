diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 66259ca61f0..69f76885780 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -647,22 +647,7 @@ private void AddReferenceAssemblyToReferenceList(List<string> referenceAssemblyL
                         }
                         else
                         {
-                            try
-                            {
-                                Assembly candidateAssembly = Assembly.UnsafeLoadFrom(referenceAssembly);
-                                if (candidateAssembly != null)
-                                {
-                                    candidateAssemblyLocation = candidateAssembly.Location;
-                                    s_knownReferenceAssemblies[candidateAssembly.FullName] = candidateAssembly;
-                                }
-                            }
-                            catch (BadImageFormatException e)
-                            {
-                                Debug.Assert(e.Message.Contains("0x80131058"), "Expected Message to contain 0x80131058");
-                                AssemblyName.GetAssemblyName(referenceAssembly);
-                                candidateAssemblyLocation = referenceAssembly;
-                                _log.LogMessageFromResources(MessageImportance.Low, "CodeTaskFactory.HaveReflectionOnlyAssembly", referenceAssembly);
-                            }
+                            candidateAssemblyLocation = CacheAssemblyIdentityFromPath(referenceAssembly, candidateAssemblyLocation);
                         }
                     }
                     catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
@@ -712,6 +697,28 @@ static string GetPathFromPartialAssemblyName(string referenceAssembly, string ca
 #pragma warning restore 618, 612
                 return candidateAssemblyLocation;
             }
+
+            string CacheAssemblyIdentityFromPath(string referenceAssembly, string candidateAssemblyLocation)
+            {
+                try
+                {
+                    Assembly candidateAssembly = Assembly.UnsafeLoadFrom(referenceAssembly);
+                    if (candidateAssembly != null)
+                    {
+                        candidateAssemblyLocation = candidateAssembly.Location;
+                        s_knownReferenceAssemblies[candidateAssembly.FullName] = candidateAssembly;
+                    }
+                }
+                catch (BadImageFormatException e)
+                {
+                    Debug.Assert(e.Message.Contains("0x80131058"), "Expected Message to contain 0x80131058");
+                    AssemblyName.GetAssemblyName(referenceAssembly);
+                    candidateAssemblyLocation = referenceAssembly;
+                    _log.LogMessageFromResources(MessageImportance.Low, "CodeTaskFactory.HaveReflectionOnlyAssembly", referenceAssembly);
+                }
+
+                return candidateAssemblyLocation;
+            }
         }
 
         /// <summary>
