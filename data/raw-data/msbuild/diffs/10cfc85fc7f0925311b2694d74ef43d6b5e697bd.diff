diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 84b45f4cc7d..551abc15c0b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2486,9 +2486,11 @@ private bool ReuseOldCaches(string[] inputCacheFiles)
 
                 var cacheAggregation = cacheAggregator.Aggregate();
 
-                // using caches with override (override queried first before current cache) based on the assumption that during single project cached builds
-                // there's many old results, but just one single actively building project.
-
+                // In a build session with input caches, build results from cache files are separated from new build results executed in the current build session.
+                // This separation is done to differentiate between the two types, as the output caches that will be written by the current build session
+                // should contain only the results from new builds, and should not contain old results inherited from the cache files.
+                // The override cache will contain the old build results, and the current cache will contain new results.
+                // Upon reads, both caches are interrogated (override before current), but writes should only happen in the current cache.
                 _componentFactories.ReplaceFactory(BuildComponentType.ConfigCache, new ConfigCacheWithOverride(cacheAggregation.ConfigCache));
                 _componentFactories.ReplaceFactory(BuildComponentType.ResultsCache, new ResultsCacheWithOverride(cacheAggregation.ResultsCache));
 
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
index c6c91d88f77..30f31f25456 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
@@ -1,7 +1,6 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
@@ -9,6 +8,9 @@
 
 namespace Microsoft.Build.Execution
 {
+    // This class composes two caches, an override cache and a current cache.
+    // Reads are served from both caches (override first).
+    // Writes should only happen in the current cache.
     internal class ConfigCacheWithOverride : IConfigCache
     {
         private readonly IConfigCache _override;
@@ -32,6 +34,8 @@ public void ShutdownComponent()
 
         public IEnumerator<BuildRequestConfiguration> GetEnumerator()
         {
+            // Enumerators do not compose both caches to limit the influence of the override cache (reduce the number of possible states out there).
+            // So far all runtime examples do not need the two composed.
             return CurrentCache.GetEnumerator();
         }
 
@@ -109,7 +113,18 @@ public BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata
 
         public BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata configMetadata, ConfigCreateCallback callback, bool loadProject)
         {
-            return _override.GetMatchingConfiguration(configMetadata, callback, loadProject) ?? CurrentCache.GetMatchingConfiguration(configMetadata, callback, loadProject);
+            // Call a retrieval method without side effects to avoid creating new entries in the override cache. New entries should go into the current cache.
+            var overrideConfig = GetMatchingConfiguration(configMetadata);
+
+            if (overrideConfig != null)
+            {
+#if DEBUG
+                ErrorUtilities.VerifyThrow(CurrentCache.GetMatchingConfiguration(configMetadata) == null, "caches should not overlap");
+#endif
+                return overrideConfig;
+            }
+
+            return CurrentCache.GetMatchingConfiguration(configMetadata, callback, loadProject);
         }
 
         public bool HasConfiguration(int configId)
@@ -121,7 +136,7 @@ public bool HasConfiguration(int configId)
 #if DEBUG
                 ErrorUtilities.VerifyThrow(!CurrentCache.HasConfiguration(configId), "caches should not overlap");
 #endif
-                return overrideHasConfiguration;
+                return true;
             }
 
             return _override.HasConfiguration(configId) || CurrentCache.HasConfiguration(configId);
diff --git a/src/Build/BackEnd/Components/Caching/IConfigCache.cs b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
index 0bdc69b92a8..4a2464d181d 100644
--- a/src/Build/BackEnd/Components/Caching/IConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/IConfigCache.cs
@@ -54,7 +54,7 @@ BuildRequestConfiguration this[int configId]
         BuildRequestConfiguration GetMatchingConfiguration(ConfigurationMetadata configMetadata);
 
         /// <summary>
-        /// Gets a matching configuration.  If no such configration exists, one is created and optionally loaded.
+        /// Gets a matching configuration.  If no such configuration exists, one is created and optionally loaded.
         /// </summary>
         /// <param name="configMetadata">The configuration metadata to match.</param>
         /// <param name="callback">Callback to be invoked if the configuration does not exist.</param>
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
index 66b1e17ccca..a83ea4a0efe 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
@@ -8,6 +8,9 @@
 
 namespace Microsoft.Build.Execution
 {
+    // This class composes two caches, an override cache and a current cache.
+    // Reads are served from both caches (override first)
+    // Writes should only happen in the current cache.
     internal class ResultsCacheWithOverride : IResultsCache
     {
         private readonly IResultsCache _override;
@@ -119,6 +122,8 @@ public void WriteResultsToDisk()
 
         public IEnumerator<BuildResult> GetEnumerator()
         {
+            // Enumerators do not compose both caches to limit the influence of the override cache (reduce the number of possible states out there).
+            // So far all runtime examples do not need the two composed.
             return CurrentCache.GetEnumerator();
         }
 
