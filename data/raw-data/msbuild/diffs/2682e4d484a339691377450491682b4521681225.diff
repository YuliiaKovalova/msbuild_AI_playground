diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index d775a754597..f8c3ffd89aa 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -262,7 +262,7 @@ private class AssemblyInfoToLoadedTypes
             /// <summary>
             /// What is the type for the given type name, this may be null if the typeName does not map to a type.
             /// </summary>
-            private ConcurrentDictionary<string, Type> _typeNameToType;
+            private ConcurrentDictionary<string, TypeInformation> _typeNameToTypeInformation;
 
             /// <summary>
             /// List of public types in the assembly which match the type filter and their corresponding types
@@ -291,7 +291,7 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly
 
                 _isDesiredType = typeFilter;
                 _assemblyLoadInfo = loadInfo;
-                _typeNameToType = new ConcurrentDictionary<string, Type>(StringComparer.OrdinalIgnoreCase);
+                _typeNameToTypeInformation = new ConcurrentDictionary<string, TypeInformation>(StringComparer.OrdinalIgnoreCase);
                 _publicTypeNameToType = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);
             }
 
@@ -303,7 +303,7 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
                 // Only one thread should be doing operations on this instance of the object at a time.
-                Type type = _typeNameToType.GetOrAdd(typeName, (key) =>
+                TypeInformation typeInfo = _typeNameToTypeInformation.GetOrAdd(typeName, (key) =>
                 {
                     if ((_assemblyLoadInfo.AssemblyName != null) && (typeName.Length > 0))
                     {
@@ -313,7 +313,7 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                             Type t2 = Type.GetType(typeName + "," + _assemblyLoadInfo.AssemblyName, false /* don't throw on error */, true /* case-insensitive */);
                             if (t2 != null)
                             {
-                                return !_isDesiredType(t2, null) ? null : t2;
+                                return _isDesiredType(t2, null) ? new TypeInformation(new LoadedType(t2, _assemblyLoadInfo, _loadedAssembly)) : FindTypeInformationUsingSystemReflectionMetadata(typeName);
                             }
                         }
                         catch (ArgumentException)
@@ -343,159 +343,157 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                             // if type matches partially on its name
                             if (typeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(desiredTypeInAssembly.Key, typeName))
                             {
-                                return desiredTypeInAssembly.Value;
+                                return new TypeInformation(new LoadedType(desiredTypeInAssembly.Value, _assemblyLoadInfo, _loadedAssembly));
                             }
                         }
                     }
 
-                    return null;
+                    return FindTypeInformationUsingSystemReflectionMetadata(typeName);
                 });
 
-                if (type is null)
+                return typeInfo;
+            }
+
+            private TypeInformation FindTypeInformationUsingSystemReflectionMetadata(string typeName)
+            {
+                TypeInformation typeInformation = new();
+                if (_assemblyLoadInfo.AssemblyFile != null)
                 {
-                    TypeInformation typeInformation = new();
-                    if (_assemblyLoadInfo.AssemblyFile != null)
+                    using (FileStream stream = File.OpenRead(_assemblyLoadInfo.AssemblyFile))
+                    using (PEReader peFile = new(stream))
                     {
-                        using (FileStream stream = File.OpenRead(_assemblyLoadInfo.AssemblyFile))
-                        using (PEReader peFile = new(stream))
+                        MetadataReader metadataReader = peFile.GetMetadataReader();
+                        AssemblyDefinition assemblyDef = metadataReader.GetAssemblyDefinition();
+                        foreach (TypeDefinitionHandle typeDefHandle in metadataReader.TypeDefinitions)
                         {
-                            MetadataReader metadataReader = peFile.GetMetadataReader();
-                            AssemblyDefinition assemblyDef = metadataReader.GetAssemblyDefinition();
-                            foreach (TypeDefinitionHandle typeDefHandle in metadataReader.TypeDefinitions)
+                            TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
+                            if (!typeDef.Attributes.HasFlag(TypeAttributes.Public) || !typeDef.Attributes.HasFlag(TypeAttributes.Class))
                             {
-                                TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
-                                if (!typeDef.Attributes.HasFlag(TypeAttributes.Public) || !typeDef.Attributes.HasFlag(TypeAttributes.Class))
-                                {
-                                    continue;
-                                }
-                                else
+                                continue;
+                            }
+                            else
+                            {
+                                string currentTypeName = metadataReader.GetString(typeDef.Name);
+                                if (currentTypeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(currentTypeName, typeName))
                                 {
-                                    string currentTypeName = metadataReader.GetString(typeDef.Name);
-                                    if (currentTypeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(currentTypeName, typeName))
+                                    // We found the right type! Now get its information.
+                                    foreach (CustomAttributeHandle customAttrHandle in typeDef.GetCustomAttributes())
                                     {
-                                        // We found the right type! Now get its information.
-                                        foreach (CustomAttributeHandle customAttrHandle in typeDef.GetCustomAttributes())
+                                        CustomAttribute customAttribute = metadataReader.GetCustomAttribute(customAttrHandle);
+                                        MemberReference constructorReference = metadataReader.GetMemberReference((MemberReferenceHandle)customAttribute.Constructor);
+                                        if (constructorReference.Parent.Kind == HandleKind.TypeReference)
                                         {
-                                            CustomAttribute customAttribute = metadataReader.GetCustomAttribute(customAttrHandle);
-                                            MemberReference constructorReference = metadataReader.GetMemberReference((MemberReferenceHandle)customAttribute.Constructor);
-                                            if (constructorReference.Parent.Kind == HandleKind.TypeReference)
+                                            TypeReference typeReference = metadataReader.GetTypeReference((TypeReferenceHandle)constructorReference.Parent);
+                                            string customAttributeName = metadataReader.GetString(typeReference.Name);
+                                            switch (customAttributeName)
                                             {
-                                                TypeReference typeReference = metadataReader.GetTypeReference((TypeReferenceHandle)constructorReference.Parent);
-                                                string customAttributeName = metadataReader.GetString(typeReference.Name);
-                                                switch (customAttributeName)
-                                                {
-                                                    case "RunInSTAAttribute":
-                                                        typeInformation.HasSTAThreadAttribute = true;
-                                                        break;
-                                                    case "LoadInSeparateAppDomainAttribute":
-                                                        typeInformation.HasLoadInSeparateAppDomainAttribute = true;
-                                                        break;
-                                                }
+                                                case "RunInSTAAttribute":
+                                                    typeInformation.HasSTAThreadAttribute = true;
+                                                    break;
+                                                case "LoadInSeparateAppDomainAttribute":
+                                                    typeInformation.HasLoadInSeparateAppDomainAttribute = true;
+                                                    break;
                                             }
                                         }
+                                    }
 
-                                        IEnumerable<PropertyDefinition> propertyDefinitions = typeDef.GetProperties().Select(prop => metadataReader.GetPropertyDefinition(prop));
-                                        List<TypeInformationPropertyInfo> typePropertyInfos = new();
-                                        foreach (PropertyDefinition propertyDefinition in propertyDefinitions)
+                                    IEnumerable<PropertyDefinition> propertyDefinitions = typeDef.GetProperties().Select(prop => metadataReader.GetPropertyDefinition(prop));
+                                    List<TypeInformationPropertyInfo> typePropertyInfos = new();
+                                    foreach (PropertyDefinition propertyDefinition in propertyDefinitions)
+                                    {
+                                        TypeInformationPropertyInfo toAdd = new();
+                                        toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
+                                        foreach (CustomAttributeHandle attr in propertyDefinition.GetCustomAttributes())
                                         {
-                                            TypeInformationPropertyInfo toAdd = new();
-                                            toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
-                                            foreach (CustomAttributeHandle attr in propertyDefinition.GetCustomAttributes())
+                                            EntityHandle referenceHandle = metadataReader.GetMemberReference((MemberReferenceHandle)metadataReader.GetCustomAttribute(attr).Constructor).Parent;
+                                            if (referenceHandle.Kind == HandleKind.TypeReference)
                                             {
-                                                EntityHandle referenceHandle = metadataReader.GetMemberReference((MemberReferenceHandle)metadataReader.GetCustomAttribute(attr).Constructor).Parent;
-                                                if (referenceHandle.Kind == HandleKind.TypeReference)
+                                                string name = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)referenceHandle).Name);
+                                                if (name.Equals("OutputAttribute", StringComparison.OrdinalIgnoreCase))
+                                                {
+                                                    toAdd.OutputAttribute = true;
+                                                }
+                                                else if (name.Equals("RequiredAttribute", StringComparison.OrdinalIgnoreCase))
                                                 {
-                                                    string name = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)referenceHandle).Name);
-                                                    if (name.Equals("OutputAttribute", StringComparison.OrdinalIgnoreCase))
-                                                    {
-                                                        toAdd.OutputAttribute = true;
-                                                    }
-                                                    else if (name.Equals("RequiredAttribute", StringComparison.OrdinalIgnoreCase))
-                                                    {
-                                                        toAdd.RequiredAttribute = true;
-                                                    }
+                                                    toAdd.RequiredAttribute = true;
                                                 }
                                             }
-                                            typePropertyInfos.Add(toAdd);
                                         }
-                                        typeInformation.Properties = typePropertyInfos.ToArray();
+                                        typePropertyInfos.Add(toAdd);
+                                    }
+                                    typeInformation.Properties = typePropertyInfos.ToArray();
 
-                                        TypeDefinition parentTypeDefinition = typeDef;
-                                        while (true)
+                                    TypeDefinition parentTypeDefinition = typeDef;
+                                    while (true)
+                                    {
+                                        foreach (InterfaceImplementationHandle interfaceHandle in parentTypeDefinition.GetInterfaceImplementations())
                                         {
-                                            foreach (InterfaceImplementationHandle interfaceHandle in parentTypeDefinition.GetInterfaceImplementations())
+                                            if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
                                             {
-                                                if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
+                                                typeInformation.ImplementsIGeneratedTask = true;
+                                            }
+                                        }
+
+                                        if (parentTypeDefinition.BaseType.IsNil)
+                                        {
+                                            break;
+                                        }
+
+                                        // If the baseType is not a TypeDefinitionHandle, we won't be able to chase it without actually loading the assembly. We would need to find the assembly containing the base type
+                                        // and load it using System.Reflection.Metdata just as we're doing here, but we don't know its path without loading this assembly. Just assume it didn't implement IGeneratedTask.
+                                        bool shouldBreakLoop = false;
+                                        switch (parentTypeDefinition.BaseType.Kind)
+                                        {
+                                            case HandleKind.TypeDefinition:
+                                                parentTypeDefinition = metadataReader.GetTypeDefinition((TypeDefinitionHandle)parentTypeDefinition.BaseType);
+                                                break;
+                                            case HandleKind.TypeReference:
+                                                string parentName = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)parentTypeDefinition.BaseType).Name);
+                                                if (parentName.Equals("IGeneratedTask"))
                                                 {
                                                     typeInformation.ImplementsIGeneratedTask = true;
                                                 }
-                                            }
-
-                                            if (parentTypeDefinition.BaseType.IsNil)
-                                            {
+                                                else if (parentName.Equals("MarshalByRefObject"))
+                                                {
+                                                    typeInformation.IsMarshalByRef = true;
+                                                }
+                                                shouldBreakLoop = true;
                                                 break;
-                                            }
-
-                                            // If the baseType is not a TypeDefinitionHandle, we won't be able to chase it without actually loading the assembly. We would need to find the assembly containing the base type
-                                            // and load it using System.Reflection.Metdata just as we're doing here, but we don't know its path without loading this assembly. Just assume it didn't implement IGeneratedTask.
-                                            bool shouldBreakLoop = false;
-                                            switch (parentTypeDefinition.BaseType.Kind)
-                                            {
-                                                case HandleKind.TypeDefinition:
-                                                    parentTypeDefinition = metadataReader.GetTypeDefinition((TypeDefinitionHandle)parentTypeDefinition.BaseType);
-                                                    break;
-                                                case HandleKind.TypeReference:
-                                                    string parentName = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)parentTypeDefinition.BaseType).Name);
-                                                    if (parentName.Equals("IGeneratedTask"))
-                                                    {
-                                                        typeInformation.ImplementsIGeneratedTask = true;
-                                                    }
-                                                    else if (parentName.Equals("MarshalByRefObject"))
-                                                    {
-                                                        typeInformation.IsMarshalByRef = true;
-                                                    }
-                                                    shouldBreakLoop = true;
-                                                    break;
-                                                case HandleKind.TypeSpecification:
-                                                    shouldBreakLoop = true;
-                                                    break;
-                                            }
-
-                                            string typeDefinitionName = metadataReader.GetString(parentTypeDefinition.Name);
-                                            if (typeDefinitionName.Equals("MarshalByRefObject"))
-                                            {
-                                                typeInformation.IsMarshalByRef = true;
-                                            }
-                                            if (shouldBreakLoop || typeDefinitionName.Equals("object"))
-                                            {
+                                            case HandleKind.TypeSpecification:
+                                                shouldBreakLoop = true;
                                                 break;
-                                            }
                                         }
 
-                                        foreach (InterfaceImplementationHandle interfaceHandle in typeDef.GetInterfaceImplementations())
+                                        string typeDefinitionName = metadataReader.GetString(parentTypeDefinition.Name);
+                                        if (typeDefinitionName.Equals("MarshalByRefObject"))
                                         {
-                                            if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
-                                            {
-                                                typeInformation.ImplementsIGeneratedTask = true;
-                                            }
+                                            typeInformation.IsMarshalByRef = true;
+                                        }
+                                        if (shouldBreakLoop || typeDefinitionName.Equals("object"))
+                                        {
+                                            break;
                                         }
+                                    }
 
-                                        typeInformation.AssemblyName = _assemblyLoadInfo.AssemblyName is null ? new AssemblyName(Path.GetFileNameWithoutExtension(_assemblyLoadInfo.AssemblyFile)) : new AssemblyName(_assemblyLoadInfo.AssemblyName);
+                                    foreach (InterfaceImplementationHandle interfaceHandle in typeDef.GetInterfaceImplementations())
+                                    {
+                                        if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
+                                        {
+                                            typeInformation.ImplementsIGeneratedTask = true;
+                                        }
+                                    }
 
-                                        typeInformation.Namespace = metadataReader.GetString(metadataReader.GetNamespaceDefinition(metadataReader.GetNamespaceDefinitionRoot().NamespaceDefinitions.First()).Name);
+                                    typeInformation.AssemblyName = _assemblyLoadInfo.AssemblyName is null ? new AssemblyName(Path.GetFileNameWithoutExtension(_assemblyLoadInfo.AssemblyFile)) : new AssemblyName(_assemblyLoadInfo.AssemblyName);
 
-                                        break;
-                                    }
+                                    typeInformation.Namespace = metadataReader.GetString(metadataReader.GetNamespaceDefinition(metadataReader.GetNamespaceDefinitionRoot().NamespaceDefinitions.First()).Name);
+
+                                    break;
                                 }
                             }
                         }
                     }
-                    return typeInformation;
-                }
-                else
-                {
-                    return new TypeInformation(new LoadedType(type, _assemblyLoadInfo, _loadedAssembly));
                 }
+                return typeInformation;
             }
 
             /// <summary>
