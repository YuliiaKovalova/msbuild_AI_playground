diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 649fa056cbb..691916c7c90 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -205,8 +205,8 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
-        void ReleaseCores(Microsoft.Build.Framework.ITask task, int releasedCores);
-        int RequestCores(Microsoft.Build.Framework.ITask task, int requestedCores);
+        void ReleaseCores(int coresToRelease);
+        int RequestCores(int requestedCores);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 38e32b4eaa7..f06e6f1b929 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -205,8 +205,8 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     }
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
-        void ReleaseCores(Microsoft.Build.Framework.ITask task, int releasedCores);
-        int RequestCores(Microsoft.Build.Framework.ITask task, int requestedCores);
+        void ReleaseCores(int coresToRelease);
+        int RequestCores(int requestedCores);
     }
     public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 47626b64e6c..da942692a31 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -669,7 +669,7 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
         int runningTotal = 0;
         Semaphore cpuCount;
 
-        public int RequestCores(ITask task, int requestedCores)
+        public int RequestCores(int requestedCores)
         {
             int coresAcquiredBeforeMoreCoresGetAcquired = runningTotal;
 
@@ -691,7 +691,7 @@ public int RequestCores(ITask task, int requestedCores)
             return runningTotal - coresAcquiredBeforeMoreCoresGetAcquired;
         }
 
-        public void ReleaseCores(ITask task, int coresToRelease)
+        public void ReleaseCores(int coresToRelease)
         {
             cpuCount ??= Semaphore.OpenExisting("cpuCount");
 
diff --git a/src/Framework/IBuildEngine7.cs b/src/Framework/IBuildEngine7.cs
index 1bf8e0b07c8..0d826f2ca14 100644
--- a/src/Framework/IBuildEngine7.cs
+++ b/src/Framework/IBuildEngine7.cs
@@ -14,15 +14,15 @@ public interface IBuildEngine7 : IBuildEngine6
         /// <summary>
         /// If a task launches multiple parallel processes, it should ask how many cores it can use.
         /// </summary>
-        /// <param name="requestedCores">The number of cores a task can potentially use</param>
-        /// <returns>The number of cores a task is allowed to use</returns>
-        int RequestCores(ITask task, int requestedCores);
+        /// <param name="requestedCores">The number of cores a task can potentially use.</param>
+        /// <returns>The number of cores a task is allowed to use.</returns>
+        int RequestCores(int requestedCores);
 
         /// <summary>
         /// A task should notify the build manager when all or some of the requested cores are not used anymore.
         /// When task is finished, the cores it requested are automatically released.
         /// </summary>
-        /// <param name="releasedCores"></param>
-        void ReleaseCores(ITask task, int releasedCores);
+        /// <param name="coresToRelease">Number of cores no longer in use.</param>
+        void ReleaseCores(int coresToRelease);
     }
 }
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 07ccf2893f2..2cf1154d834 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -488,7 +488,7 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
 
         int runningTotal = 0;
         Semaphore cpuCount;
-        public int RequestCores(ITask task, int requestedCores)
+        public int RequestCores(int requestedCores)
         {
             cpuCount ??= Semaphore.OpenExisting("cpuCount");
 
@@ -509,7 +509,7 @@ public int RequestCores(ITask task, int requestedCores)
             return runningTotal - coresAcquiredBeforeMoreCoresGetAcquired;
         }
 
-        public void ReleaseCores(ITask task, int coresToRelease)
+        public void ReleaseCores(int coresToRelease)
         {
             cpuCount ??= Semaphore.OpenExisting("cpuCount");
 
diff --git a/src/Tasks.UnitTests/Semaphore_Tests.cs b/src/Tasks.UnitTests/Semaphore_Tests.cs
index 3b511003c17..7c0f858871a 100644
--- a/src/Tasks.UnitTests/Semaphore_Tests.cs
+++ b/src/Tasks.UnitTests/Semaphore_Tests.cs
@@ -26,24 +26,24 @@ public void TestRequestingInvalidNumCores()
             test.BuildEngine = mockEngine;
 
             // 40 - 80 = 0 cores left (claimed 40)
-            test.BuildEngine7.RequestCores(test, 12312).ShouldBe(40);
-            test.BuildEngine7.RequestCores(test, 10).ShouldBe(0);
+            test.BuildEngine7.RequestCores(12312).ShouldBe(40);
+            test.BuildEngine7.RequestCores(10).ShouldBe(0);
 
             // 0 + 39 = 39 cores left
-            test.BuildEngine7.ReleaseCores(test, 39);
+            test.BuildEngine7.ReleaseCores(39);
 
             // 39 - 100 = 0 cores left (claimed 39)
-            test.BuildEngine7.RequestCores(test, 100).ShouldBe(39);
+            test.BuildEngine7.RequestCores(100).ShouldBe(39);
 
             // 0 + 0 = 0 cores left
-            test.BuildEngine7.ReleaseCores(test, 0);
-            test.BuildEngine7.RequestCores(test, 2).ShouldBe(0);
+            test.BuildEngine7.ReleaseCores(0);
+            test.BuildEngine7.RequestCores(2).ShouldBe(0);
 
             //0 + 1 = 1 cores left
-            test.BuildEngine7.ReleaseCores(test, 1);
+            test.BuildEngine7.ReleaseCores(1);
 
             // 1 - 2 = 0 cores left (only claimed 1)
-            test.BuildEngine7.RequestCores(test, 2).ShouldBe(1);
+            test.BuildEngine7.RequestCores(2).ShouldBe(1);
         }
 
         [Fact]
@@ -57,14 +57,14 @@ public void TestReleasingInvalidNumCores()
             test.BuildEngine = mockEngine;
 
             // should still be 40 cores
-            test.BuildEngine7.ReleaseCores(test, -100);
-            test.BuildEngine7.RequestCores(test, 41).ShouldBe(40);
+            test.BuildEngine7.ReleaseCores(-100);
+            test.BuildEngine7.RequestCores(41).ShouldBe(40);
 
             // should be 40 cores to take
-            test.BuildEngine7.ReleaseCores(test, 50);
-            test.BuildEngine7.RequestCores(test, 39).ShouldBe(39);
+            test.BuildEngine7.ReleaseCores(50);
+            test.BuildEngine7.RequestCores(39).ShouldBe(39);
 
-            test.BuildEngine7.RequestCores(test, 2).ShouldBe(1);
+            test.BuildEngine7.RequestCores(2).ShouldBe(1);
         }
     }
 }
diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
index a11027402c1..b09bc4f5496 100644
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ b/src/Tasks/SemaphoreCPUTask.cs
@@ -9,19 +9,19 @@ class SemaphoreCPUTask : Task
     {
         public override bool Execute()
         {
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 3123890)} cores", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(3123890)} cores", Framework.MessageImportance.High);
 
-            BuildEngine7.ReleaseCores(this, 50);
+            BuildEngine7.ReleaseCores(50);
             Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
 
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 10)} cores", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(10)} cores", Framework.MessageImportance.High);
 
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 30)} cores", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(30)} cores", Framework.MessageImportance.High);
 
-            BuildEngine7.ReleaseCores(this, 2);
+            BuildEngine7.ReleaseCores(2);
             Log.LogMessageFromText("Released some number of cores", Framework.MessageImportance.High);
 
-            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(this, 12)} cores", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Got {BuildEngine7.RequestCores(12)} cores", Framework.MessageImportance.High);
 
             return !Log.HasLoggedErrors;
         }
