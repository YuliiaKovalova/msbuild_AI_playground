diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
new file mode 100644
index 00000000000..994e8e39c68
--- /dev/null
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -0,0 +1,69 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using Xunit;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    public class RARPrecomputedCache_Tests
+    {
+        [Fact]
+        public void TestPrecomputedCache()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ResolveAssemblyReference t = new ResolveAssemblyReference();
+                t._cache = new SystemState();
+                t._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {
+                    { "assembly1", new SystemState.FileState(DateTime.Now) },
+                    { "assembly2", new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
+                TransientTestFile standardCache = env.CreateFile(".cache");
+                t.StateFile = standardCache.Path;
+                t.WriteStateFile();
+                File.ReadAllText(standardCache.Path).Length.ShouldBeGreaterThan(0);
+
+                TransientTestFile precomputedCache = env.CreateFile(".cache");
+            }
+
+
+            t.Assemblies = new ITaskItem[]
+            {
+                new TaskItem("Regular"),
+            };
+
+            t.Assemblies[0].SetMetadata("HintPath", @"C:\SystemRuntime\Regular.dll");
+
+
+            // build mode
+            t.FindDependencies = true;
+            Assert.True(
+                t.Execute
+                (
+                    fileExists,
+                    directoryExists,
+                    getDirectories,
+                    getAssemblyName,
+                    getAssemblyMetadata,
+#if FEATURE_WIN32_REGISTRY
+                    getRegistrySubKeyNames,
+                    getRegistrySubKeyDefaultValue,
+#endif
+                    getLastWriteTime,
+                    getRuntimeVersion,
+#if FEATURE_WIN32_REGISTRY
+                    openBaseKey,
+#endif
+                    checkIfAssemblyIsInGac,
+                    isWinMDFile,
+                    readMachineTypeFromPEHeader
+                )
+            );
+        }
+    }
+}
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 11c776b4ae6..335fc98dfca 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -49,7 +49,7 @@ public class ResolveAssemblyReference : TaskExtension
         /// <summary>
         /// Cache of system state information, used to optimize performance.
         /// </summary>
-        private SystemState _cache = null;
+        internal SystemState _cache = null;
 
         /// <summary>
         /// Construct
@@ -1857,7 +1857,7 @@ private void LogConflict(Reference reference, string fusionName)
         /// <summary>
         /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.
         /// </summary>
-        private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
+        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
             _cache = StateFileBase.DeserializeCache<SystemState>(_stateFile, Log);
 
@@ -1875,7 +1875,7 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
         /// <summary>
         /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.
         /// </summary>
-        private void WriteStateFile()
+        internal void WriteStateFile()
         {
             if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index a1e735bf8e8..4968c9aa691 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -36,7 +36,7 @@ internal sealed class SystemState : StateFileBase, ISerializable
         /// <summary>
         /// Cache at the SystemState instance level. It is serialized and reused between instances.
         /// </summary>
-        private Dictionary<string, FileState> instanceLocalFileStateCache = new Dictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
+        internal Dictionary<string, FileState> instanceLocalFileStateCache = new Dictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// LastModified information is purely instance-local. It doesn't make sense to
@@ -113,7 +113,7 @@ internal sealed class SystemState : StateFileBase, ISerializable
         /// Class that holds the current file state.
         /// </summary>
         [Serializable]
-        private sealed class FileState : ISerializable
+        internal sealed class FileState : ISerializable
         {
             /// <summary>
             /// The last modified time for this file.
