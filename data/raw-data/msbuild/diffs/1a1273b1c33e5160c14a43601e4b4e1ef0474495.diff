diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index 13f5dc1828d..9858c1dd2b4 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -274,22 +274,27 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu
                                 NodePacketType packetType = (NodePacketType)headerByte[0];
 
                                 int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(headerByte, 1, 4));
+                                int packetBytesRead = 0;
 
                                 _readBufferMemoryStream.Position = 0;
                                 _readBufferMemoryStream.SetLength(packetLength);
                                 byte[] packetData = _readBufferMemoryStream.GetBuffer();
 
-#if FEATURE_APM
-                                IAsyncResult packetReadResult = localStream.BeginRead(packetData, 0, packetLength, null, null);
-                                int packetBytesRead = localStream.EndRead(packetReadResult);
+                                while (packetBytesRead < packetLength)
+                                {
+#if NET
+                                    ValueTask<int> bytesReadTask = localStream.ReadAsync(packetData.AsMemory(packetBytesRead, packetLength - packetBytesRead));
+                                    int bytesRead = readTask.IsCompleted ? readTask.Result : readTask.AsTask().Result;
 #else
-                                ValueTask<int> packetReadTask = CommunicationsUtilities.ReadAsync(localStream, packetData, packetLength);
-                                int packetBytesRead = packetReadTask.IsCompleted ? packetReadTask.Result : packetReadTask.AsTask().Result;
+                                    int bytesRead = localStream.Read(packetData, packetBytesRead, packetLength - packetBytesRead);
 #endif
-                                if (packetBytesRead < packetLength)
-                                {
-                                    // Incomplete read.  Abort.
-                                    ErrorUtilities.ThrowInternalError("Incomplete packet read. {0} of {1} bytes read", packetBytesRead, packetLength);
+                                    if (bytesRead == 0)
+                                    {
+                                        // Incomplete read.  Abort.
+                                        ErrorUtilities.ThrowInternalError("Incomplete packet read. {0} of {1} bytes read", packetBytesRead, packetLength);
+                                    }
+
+                                    packetBytesRead += bytesRead;
                                 }
 
                                 try
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 7d5f18b4233..01f5c3dbdd7 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -689,11 +689,10 @@ public async Task RunPacketReadLoopAsync()
                     {
 #if FEATURE_APM
                         MSBuildEventSource.Log.PacketReadSize(packetLength);
-                        IAsyncResult packetReadResult = _clientToServerStream.BeginRead(packetData, 0, packetLength, null, null);
                         int bytesRead;
                         try
                         {
-                            bytesRead = _clientToServerStream.EndRead(packetReadResult);
+                            bytesRead = _clientToServerStream.Read(packetData, 0, packetLength);
                         }
                         catch (ArgumentException)
                         {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 96cdb6b367a..3573b3a75da 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -627,8 +627,7 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 ValueTask<int> packetReadTask = CommunicationsUtilities.ReadAsync(localReadPipe, packetData, packetLength);
                                 int packetBytesRead = packetReadTask.IsCompleted ? packetReadTask.Result : packetReadTask.AsTask().Result;
 #else
-                                IAsyncResult packetReadResult = localReadPipe.BeginRead(packetData, 0, packetLength, null, null);
-                                int packetBytesRead = localReadPipe.EndRead(packetReadResult);
+                                int packetBytesRead = localReadPipe.Read(packetData, 0, packetLength);
 #endif
                                 _packetFactory.DeserializeAndRoutePacket(0, packetType, _readTranslator);
                             }
