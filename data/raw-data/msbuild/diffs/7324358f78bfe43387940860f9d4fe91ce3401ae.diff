diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 1c08e288d57..2b0a22e9c18 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2602,17 +2602,29 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        var newNodes = new List<NodeInfo>();
+                        var newNodes = new NodeInfo[response.NumberOfNodesToCreate];
+                        var nodeConfig = GetNodeConfiguration();
+
+                        // Parallelize node spawning if OOP and NodeReuse is not enabled.
+                        if (response.RequiredNodeType == NodeAffinity.OutOfProc && !_buildParameters.EnableNodeReuse)
+                        {
+                            Parallel.For(0, response.NumberOfNodesToCreate, (i) =>
+                            {
+                                newNodes[i] = _nodeManager.CreateNode(nodeConfig, response.RequiredNodeType);
+                            });
+                        }
 
                         for (int i = 0; i < response.NumberOfNodesToCreate; i++)
                         {
-                            NodeInfo createdNode = _nodeManager.CreateNode(GetNodeConfiguration(), response.RequiredNodeType);
+                            if (response.RequiredNodeType != NodeAffinity.OutOfProc || _buildParameters.EnableNodeReuse)
+                            {
+                                newNodes[i] = _nodeManager.CreateNode(nodeConfig, response.RequiredNodeType);
+                            }
 
-                            if (createdNode != null)
+                            if (newNodes[i] != null)
                             {
                                 _noNodesActiveEvent.Reset();
-                                _activeNodes.Add(createdNode.NodeId);
-                                newNodes.Add(createdNode);
+                                _activeNodes.Add(newNodes[i].NodeId);
                                 ErrorUtilities.VerifyThrow(_activeNodes.Count != 0, "Still 0 nodes after asking for a new node.  Build cannot proceed.");
                             }
                             else
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index bd6dd68088c..c8aee5e728e 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Execution;
+using System.Threading;
 
 #nullable disable
 
@@ -329,8 +330,7 @@ private int AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration node
             }
             else
             {
-                nodeId = _nextNodeId;
-                _nextNodeId++;
+                nodeId = Interlocked.Increment(ref _nextNodeId) - 1;
             }
 
             NodeConfiguration configToSend = nodeConfiguration.Clone();
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 07210e39621..406b922c4fa 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -275,7 +275,10 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
 
                 // Create the node process
                 Process msbuildProcess = LaunchNode(msbuildLocation, commandLineArgs);
-                _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id));
+                if (_componentHost.BuildParameters.EnableNodeReuse)
+                {
+                    _processesToIgnore.Add(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id));
+                }
 
                 // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
                 // gotten back from CreateProcess is that of the debugger, which causes this to try to connect
