diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 21f10f54028..f90fe26b655 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -26,7 +26,7 @@ public class BinaryTranslator_Tests
     {
         static BinaryTranslator_Tests()
         {
-            Microsoft.Build.CommandLine.SerializationContractInitializer.RegisterExcpetions();
+            SerializationContractInitializer.Initialize();
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index 600c739989a..f7493839380 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -125,9 +125,6 @@
     <Compile Include="..\UnitTests.Shared\RequiresSymbolicLinksFactAttribute.cs">
       <Link>RequiresSymbolicLinksFactAttribute.cs</Link>
     </Compile>
-    <Compile Include="..\MSBuild\SerializationContractInitializer.cs">
-      <Link>BackEnd\SerializationContractInitializer.cs</Link>
-    </Compile>
 
     <None Include="..\Shared\UnitTests\App.config">
       <Link>App.config</Link>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 9787ffe4a5c..74a8ad6e500 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -306,6 +306,7 @@ public BuildManager(string hostName)
             _nextUnnamedProjectId = 1;
             _componentFactories = new BuildComponentFactoryCollection(this);
             _componentFactories.RegisterDefaultFactories();
+            SerializationContractInitializer.Initialize();
             _projectStartedEvents = new Dictionary<int, BuildEventArgs>();
 
             _projectStartedEventHandler = OnProjectStarted;
diff --git a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
new file mode 100644
index 00000000000..d2a284f29fd
--- /dev/null
+++ b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
@@ -0,0 +1,42 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.BackEnd.SdkResolution;
+using Microsoft.Build.Exceptions;
+using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.ProjectCache;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Internal;
+
+namespace Microsoft.Build.BackEnd
+{
+    internal static class SerializationContractInitializer
+    {
+        public static void Initialize()
+        {
+            RegisterExceptions();
+            // reserved for future usage - BuildEventArgs, etc.
+        }
+
+        private static void RegisterExceptions()
+        {
+            // Any exception not contained int this list will be transferred as a GenericBuildTransferredException
+            BuildExceptionSerializationHelper.InitializeSerializationContract(
+                typeof(GenericBuildTransferredException),
+                typeof(SdkResolverException),
+                typeof(BuildAbortedException),
+                typeof(CircularDependencyException),
+                typeof(InternalLoggerException),
+                typeof(InvalidProjectFileException),
+                typeof(InvalidToolsetDefinitionException),
+                typeof(ProjectCacheException),
+                typeof(InternalErrorException),
+                typeof(LoggerException),
+                typeof(NodeFailedToLaunchException),
+                typeof(SchedulerCircularDependencyException),
+                typeof(RegistryException),
+                typeof(HostObjectException),
+                typeof(UnbuildableProjectTypeException));
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index c0c3531ff34..83a74bee7d6 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -144,6 +144,7 @@ public OutOfProcNode()
 
             _componentFactories = new BuildComponentFactoryCollection(this);
             _componentFactories.RegisterDefaultFactories();
+            SerializationContractInitializer.Initialize();
             _packetFactory = new NodePacketFactory();
 
             _buildRequestEngine = (this as IBuildComponentHost).GetComponent(BuildComponentType.RequestEngine) as IBuildRequestEngine;
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 0595ee91ac4..7234d024aae 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -151,6 +151,7 @@
     <Compile Include="BackEnd\Components\Caching\ResultsCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\ProjectCache\*.cs" />
     <Compile Include="BackEnd\Components\Communications\CurrentHost.cs" />
+    <Compile Include="BackEnd\Components\Communications\SerializationContractInitializer.cs" />
     <Compile Include="BackEnd\Components\Communications\ServerNodeEndpointOutOfProc.cs" />
     <Compile Include="BackEnd\Components\RequestBuilder\AssemblyLoadsTracker.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
diff --git a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
index b64d7b45b08..cbb2a075f80 100644
--- a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
+++ b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
@@ -106,6 +106,11 @@ internal static void InitializeSerializationContract(params Type[] exceptionType
 
         internal static void InitializeSerializationContract(IEnumerable<Type> exceptionTypesWhitelist)
         {
+            if (s_exceptionFactories != null)
+            {
+                return;
+            }
+
             var exceptionFactories = new Dictionary<string, BuildExceptionConstructionCallbacks>();
 
             foreach (Type exceptionType in exceptionTypesWhitelist)
diff --git a/src/MSBuild/CommandLineSwitchException.cs b/src/MSBuild/CommandLineSwitchException.cs
index b1f17f4cf16..50cca72257a 100644
--- a/src/MSBuild/CommandLineSwitchException.cs
+++ b/src/MSBuild/CommandLineSwitchException.cs
@@ -3,8 +3,6 @@
 
 using System;
 using System.Runtime.Serialization;
-using Microsoft.Build.BackEnd;
-using System.Collections.Generic;
 #if FEATURE_SECURITY_PERMISSIONS
 using System.Security.Permissions;
 #endif
@@ -19,7 +17,7 @@ namespace Microsoft.Build.CommandLine
     /// This exception is used to flag (syntax) errors in command line switches passed to the application.
     /// </summary>
     [Serializable]
-    internal sealed class CommandLineSwitchException : BuildExceptionBase
+    internal sealed class CommandLineSwitchException : Exception
     {
         /// <summary>
         /// This constructor initializes the exception message.
@@ -58,11 +56,6 @@ private CommandLineSwitchException(
             commandLineArg = info.GetString("commandLineArg");
         }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private CommandLineSwitchException(string message, Exception inner)
-            : base(message, inner)
-        { }
-
         /// <summary>
         /// Gets the error message and the invalid switch, or only the error message if no invalid switch is set.
         /// </summary>
@@ -109,19 +102,6 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("commandLineArg", commandLineArg, typeof(string));
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
-        {
-            return new Dictionary<string, string>()
-            {
-                { nameof(commandLineArg), commandLineArg }
-            };
-        }
-
-        protected override void InitializeCustomState(IDictionary<string, string> state)
-        {
-            commandLineArg = state[nameof(commandLineArg)];
-        }
-
         /// <summary>
         /// Throws the exception if the specified condition is not met.
         /// </summary>
diff --git a/src/MSBuild/InitializationException.cs b/src/MSBuild/InitializationException.cs
index 8370af2acd0..ff5a5e21ade 100644
--- a/src/MSBuild/InitializationException.cs
+++ b/src/MSBuild/InitializationException.cs
@@ -3,8 +3,6 @@
 
 using System;
 using System.Runtime.Serialization;
-using Microsoft.Build.BackEnd;
-using System.Collections.Generic;
 
 #if FEATURE_SECURITY_PERMISSIONS
 using System.Security.Permissions;
@@ -24,7 +22,7 @@ namespace Microsoft.Build.CommandLine
     /// Unlike the CommandLineSwitchException, this exception is NOT thrown for syntax errors in switches.
     /// </remarks>
     [Serializable]
-    internal sealed class InitializationException : BuildExceptionBase
+    internal sealed class InitializationException : Exception
     {
         /// <summary>
         /// This constructor initializes the exception message.
@@ -63,11 +61,6 @@ private InitializationException(
             invalidSwitch = info.GetString("invalidSwitch");
         }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private InitializationException(string message, Exception inner)
-            : base(message, inner)
-        { }
-
         /// <summary>
         /// Gets the error message and the invalid switch, or only the error message if no invalid switch is set.
         /// </summary>
@@ -102,20 +95,6 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont
             info.AddValue("invalidSwitch", invalidSwitch, typeof(string));
         }
 
-        protected override IDictionary<string, string> FlushCustomState()
-        {
-            return new Dictionary<string, string>()
-            {
-                { nameof(invalidSwitch), invalidSwitch }
-            };
-        }
-
-        protected override void InitializeCustomState(IDictionary<string, string> state)
-        {
-            invalidSwitch = state[nameof(invalidSwitch)];
-        }
-
-
         /// <summary>
         /// Throws the exception if the specified condition is not met.
         /// </summary>
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 1e9a19db615..358b60c5b8a 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -185,7 +185,6 @@
     <Compile Include="OutOfProcTaskAppDomainWrapperBase.cs" />
     <Compile Include="OutOfProcTaskAppDomainWrapper.cs" />
     <Compile Include="PerformanceLogEventListener.cs" />
-    <Compile Include="SerializationContractInitializer.cs" />
     <Compile Include="XMake.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/MSBuild/SerializationContractInitializer.cs b/src/MSBuild/SerializationContractInitializer.cs
deleted file mode 100644
index d7438ead097..00000000000
--- a/src/MSBuild/SerializationContractInitializer.cs
+++ /dev/null
@@ -1,39 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.Reflection;
-using Microsoft.Build.BackEnd;
-using Microsoft.Build.BackEnd.SdkResolution;
-using Microsoft.Build.Exceptions;
-using Microsoft.Build.Experimental.ProjectCache;
-using Microsoft.Build.Framework;
-
-namespace Microsoft.Build.CommandLine
-{
-    internal static class SerializationContractInitializer
-    {
-        internal static void RegisterExcpetions()
-        {
-            Assembly microsoftDotBuildAssembly = typeof(BuildAbortedException).Assembly;
-
-            typeof(InternalLoggerException).Assembly.GetType("Microsoft.Build.BackEnd.SdkResolution.SdkResolverException", throwOnError: true);
-
-            Microsoft.Build.BackEnd.BuildExceptionSerializationHelper.InitializeSerializationContract(
-                typeof(GenericBuildTransferredException),
-                typeof(SdkResolverException),
-                typeof(BuildAbortedException),
-                typeof(CircularDependencyException),
-                typeof(InternalLoggerException),
-                typeof(InvalidProjectFileException),
-                typeof(InvalidToolsetDefinitionException),
-                typeof(ProjectCacheException),
-                typeof(InternalErrorException),
-                typeof(LoggerException),
-                microsoftDotBuildAssembly.GetType("Microsoft.Build.BackEnd.NodeFailedToLaunchException", throwOnError: true)!,
-                microsoftDotBuildAssembly.GetType("Microsoft.Build.BackEnd.SchedulerCircularDependencyException", throwOnError: true)!,
-                microsoftDotBuildAssembly.GetType("Microsoft.Build.Exceptions.RegistryException", throwOnError: true)!,
-                microsoftDotBuildAssembly.GetType("Microsoft.Build.Execution.HostObjectException", throwOnError: true)!,
-                microsoftDotBuildAssembly.GetType("Microsoft.Build.Internal.UnbuildableProjectTypeException", throwOnError: true)!);
-        }
-    }
-}
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index df018cef861..06c53027f78 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -223,7 +223,7 @@ string[] args
             // Setup the console UI.
             using AutomaticEncodingRestorer _ = new();
             SetConsoleUI();
-            SerializationContractInitializer.RegisterExcpetions();
+
             DebuggerLaunchCheck();
 
             // Initialize new build telemetry and record start of this build.
