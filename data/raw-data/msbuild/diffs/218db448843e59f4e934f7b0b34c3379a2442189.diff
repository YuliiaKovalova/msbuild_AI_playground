diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 15617cb1f41..a95db23db31 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1364,7 +1364,7 @@ private void ConfigureKnownNuGetFolders()
             if (project != null)
             {
                 string nuGetFolders = project.GetPropertyValue("NuGetPackageFolders")?.Trim();
-                NativeMethodsShared.RegisterKnownNuGetFolders(nuGetFolders);
+                FileClassifier.Shared.RegisterNuGetPackageFolders(nuGetFolders);
             }
         }
 
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index ec525a5cd9c..f6b8a3a3eb9 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -35,6 +35,20 @@ internal sealed class FileClassifier
 
         private readonly ConcurrentDictionary<string, string> _knownImmutableDirectory = new(StringComparer.OrdinalIgnoreCase);
 
+        /// <summary>
+        ///     Creates default FileClassifier which following immutable folders:
+        ///     Classifications provided are:
+        ///     <list type="number">
+        ///         <item>Program Files</item>
+        ///         <item>Program Files (x86)</item>
+        ///         <item>Default .nuget cache location</item>
+        ///         <item>Visual Studio installation root</item>
+        ///     </list>
+        /// </summary>
+        /// <remarks>
+        ///     Individual projects NuGet folders are added during project build by calling
+        ///     <see cref="RegisterNuGetPackageFolders" />
+        /// </remarks>
         public FileClassifier()
         {
             RegisterImmutableDirectory(Environment.GetEnvironmentVariable("ProgramW6432"));
@@ -70,7 +84,7 @@ static string GetVSInstallationDirectory()
         public static FileClassifier Shared { get; } = new();
 
         /// <summary>
-        ///     Sets the paths found in the <c>NuGetPackageFolders</c> property value for this project.
+        ///     Try add paths found in the <c>NuGetPackageFolders</c> property value for a project into set of known immutable paths.
         ///     Project files under any of these folders are considered non-modifiable.
         /// </summary>
         /// <remarks>
@@ -123,6 +137,12 @@ private static string EnsureTrailingSlash(string fileSpec)
         public bool IsNonModifiable(string filePath) => _knownImmutableDirectory.Any(folder => filePath.StartsWith(folder.Key, PathComparison));
     }
 
+    /// <summary>
+    ///     Caching 'Last Write File Utc' times for Immutable files <see cref="FileClassifier" />.
+    ///     <remarks>
+    ///         Cache is add only. It does not updates already existing cached items.
+    ///     </remarks>
+    /// </summary>
     internal sealed class ImmutableFilesTimestampCache
     {
         private readonly ConcurrentDictionary<string, DateTime> _cache = new(StringComparer.OrdinalIgnoreCase);
@@ -132,8 +152,16 @@ internal sealed class ImmutableFilesTimestampCache
         /// </summary>
         public static ImmutableFilesTimestampCache Shared { get; } = new();
 
+
+        /// <summary>
+        ///     Try get 'Last Write File Utc' time of particular file.
+        /// </summary>
+        /// <returns><see langword="true" /> if record exists</returns>
         public bool TryGetValue(string fullPath, out DateTime lastModified) => _cache.TryGetValue(fullPath, out lastModified);
 
-        public bool TryAdd(string fullPath, DateTime lastModified) => _cache.TryAdd(fullPath, lastModified);
+        /// <summary>
+        ///     Try Add 'Last Write File Utc' time of particular file into cache.
+        /// </summary>
+        public void TryAdd(string fullPath, DateTime lastModified) => _cache.TryAdd(fullPath, lastModified);
     }
 }
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index cbeb1c21244..4dca13406d9 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -2,9 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-#if !CLR2COMPATIBILITY
-using System.Collections.Concurrent;
-#endif
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Diagnostics;
@@ -15,7 +12,7 @@
 using System.Threading;
 using System.Reflection;
 using Microsoft.Build.Framework;
-#if !CLR2COMPATIBILITY
+#if !CLR2COMPATIBILITY //TODO: delete afrer imutable op-to-date checks not user ETLs anymore
 using Microsoft.Build.Eventing;
 #endif
 using Microsoft.Win32;
@@ -1047,13 +1044,6 @@ internal static MemoryStatus GetMemoryStatus()
             return null;
         }
 
-        internal static void RegisterKnownNuGetFolders(string nuGetFolders)
-        {
-#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-            FileClassifier.Shared.RegisterNuGetPackageFolders(nuGetFolders);
-#endif
-        }
-
         /// <summary>
         /// Get the last write time of the fullpath to the file.
         /// </summary>
@@ -1067,12 +1057,12 @@ internal static void RegisterKnownNuGetFolders(string nuGetFolders)
         internal static DateTime GetLastWriteFileUtcTime(string fullPath)
         {
 #if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-            MSBuildEventSource.Log.GetLastWriteFileUtcTimeStart(fullPath);
+            MSBuildEventSource.Log.GetLastWriteFileUtcTimeStart(fullPath); //TODO: delete ETLs after measured and tested
             bool cacheHit = false;
             DateTime modifiedTime = DateTime.MinValue;
             try
             {
-                if (Environment.GetEnvironmentVariable("MSBUILDCACHEIMMUTABLEFILESLASTMODIFIED") != "1")
+                if (Traits.Instance.EscapeHatches.AlwaysDoImmutableFilesUpToDateCheck)
                 {
                     return LastWriteFileUtcTime(fullPath);
                 }
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index d1fc45ffe12..ec24d431622 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -145,6 +145,11 @@ internal class EscapeHatches
         /// </summary>
         public readonly bool AlwaysEvaluateDangerousGlobs = Environment.GetEnvironmentVariable("MSBuildAlwaysEvaluateDangerousGlobs") == "1";
 
+        /// <summary>
+        /// Disables skipping full drive/filesystem globs that are behind a false condition.
+        /// </summary>
+        public readonly bool AlwaysDoImmutableFilesUpToDateCheck = Environment.GetEnvironmentVariable("MSBuildAlwaysDoImmutableFilesUpToDateCheck") == "1";
+
         /// <summary>
         /// Emit events for project imports.
         /// </summary>
