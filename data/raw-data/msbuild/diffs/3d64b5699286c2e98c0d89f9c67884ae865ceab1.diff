diff --git a/azure-pipelines/vs-insertion-experimental.yml b/azure-pipelines/vs-insertion-experimental.yml
index d74aad34d5f..4d39eb27c24 100644
--- a/azure-pipelines/vs-insertion-experimental.yml
+++ b/azure-pipelines/vs-insertion-experimental.yml
@@ -1,13 +1,7 @@
+# Create an experimental VS insertion auto-triggered from exp/* branches to validate changes before merging to main
 trigger: none
-name: $(Date:yyyyMMdd).$(Rev:r) MSBuild Experimental VS Insertion
-variables:
-  InsertConfigValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion)
-  InsertCustomScriptExecutionCommand: $(Pipeline.Workspace)\xsd\Update-MSBuildXsds.ps1
-  InsertDescription: Insert MSBuild $(Build.BuildNumber) from the branch $(Build.SourceBranchName) at commit $(Build.SourceVersion). Corresponding package version is $(MSBuild_ExtApisPackageVersion)
-  InsertJsonValues: Microsoft.Build.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.vsman,Microsoft.Build.Arm64.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.Arm64.vsman,Microsoft.Build.UnGAC.vsman=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.Build.Number);Microsoft.Build.UnGAC.vsman
-  InsertPayloadName: MSBuild $(Build.SourceBranchName) $(Build.BuildNumber)
-  TeamName: msbuild
-  TeamEmail: msbuild@microsoft.com
+name: $(Date:yyyyMMdd).$(Rev:r)
+
 resources:
   pipelines:
   - pipeline: 'MSBuild'
@@ -22,31 +16,52 @@ resources:
     type: git
     name: 1ESPipelineTemplates/1ESPipelineTemplates
     ref: refs/tags/release
+
+variables:
+  - name: TeamName
+    value: msbuild
+  - name: TeamEmail
+    value: msbtm@microsoft.com
+  - name: MSBuild_CI_BuildNumber
+    value: $(resources.pipeline.MSBuild.runName)
+  - name: MSBuild_CI_SourceVersion
+    value: $(resources.pipeline.MSBuild.sourceCommit)
+  - name: ArtifactPackagesPath
+    value: $(Build.ArtifactStagingDirectory)/PackageArtifacts
+
+  - name: MSBuildPackagePattern 
+    value: '$(ArtifactPackagesPath)/Microsoft.Build.*.nupkg'
+  - name: StringToolsPackagePattern
+    value: '$(ArtifactPackagesPath)/Microsoft.NET.StringTools*.nupkg'
+  - name: ExternalAPIsPackagePattern
+    value: '$(ArtifactPackagesPath)/VS.ExternalAPIs.*.nupkg'
+
 extends:
   template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
   parameters:
     pool:
       name: VSEngSS-MicroBuild2022-1ES
-    customBuildTags:
-    - ES365AIMigrationTooling-Release
     stages:
-    - stage: Stage_1
-      displayName: Create VS PR
+    - stage: VSInsertion
+      displayName: VS insertion
+      variables:
+        VSDropPath: https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(SourceBranchName)/$(MSBuild_CI_BuildNumber)
+        VSManVersionSuffix: $(MSBuild_ExtApisPackageVersion)+$(MSBuild_CI_SourceVersion)
+        StandardVSManPath: Microsoft.Build.vsman{$(VSManVersionSuffix)}=$(VSDropPath);Microsoft.Build.vsman
+        Arm64VSManPath: Microsoft.Build.Arm64.vsman{$(VSManVersionSuffix)}=$(VSDropPath);Microsoft.Build.Arm64.vsman
+        UnGACVSManPath: Microsoft.Build.UnGAC.vsman=$(VSDropPath);Microsoft.Build.UnGAC.vsman
+        InsertJsonValues: $(StandardVSManPath),$(Arm64VSManPath),$(UnGACVSManPath)
+        InsertConfigValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion)
+        InsertCustomScriptExecutionCommand: $(Pipeline.Workspace)\xsd\Update-MSBuildXsds.ps1
+        InsertDescription: Insert MSBuild $(MSBuild_CI_BuildNumber) from the branch $(SourceBranchName) at commit $(MSBuild_CI_SourceVersion). Corresponding package version is $(MSBuild_ExtApisPackageVersion)
+        InsertPayloadName: '[Experimental] [Skip-SymbolCheck] MSBuild $(SourceBranchName) $(MSBuild_ExtApisPackageVersion)'
       jobs:
-      - job: Job_1
-        displayName: Run on agent
+      - job: PushPackagesAndInsert
+        displayName: Push Packages and Insert VS payload
         condition: succeeded()
         timeoutInMinutes: 0
         templateContext:
           inputs:
-          - input: pipelineArtifact
-            pipeline: 'MSBuild'
-            artifactName: 'BuildLogs_SourceBuild_Managed_Attempt1'
-            targetPath: '$(Pipeline.Workspace)/BuildLogs_SourceBuild_Managed_Attempt1'
-          - input: pipelineArtifact
-            pipeline: 'MSBuild'
-            artifactName: 'build_Windows_NT_SBOM'
-            targetPath: '$(Pipeline.Workspace)/build_Windows_NT_SBOM'
           - input: pipelineArtifact
             pipeline: 'MSBuild'
             artifactName: 'xsd'
@@ -55,9 +70,25 @@ extends:
             pipeline: 'MSBuild'
             artifactName: 'PackageArtifacts'
             targetPath: '$(Build.ArtifactStagingDirectory)/PackageArtifacts'
+            # the CI build creates a sourcebuild intermediate package that is not signed, remove it to avoid warning from Guardian
+            itemPattern: |
+              **
+              !**/Microsoft.SourceBuild.Intermediate*.nupkg
         steps:
         - task: Powershell@2
-          name: Powershell_1
+          name: SetSourceBranch
+          displayName: Set source branch name
+          inputs:
+            targetType: inline
+            script: |
+              # Extract the last section after the last '/'
+              $fullBranch = "$(resources.pipeline.MSBuild.sourceBranch)"
+              $branchSegments = $fullBranch -split '/'
+              $branch = $branchSegments[-1]
+              Write-Host "Setting drops branch to '$branch'"
+              Write-Host "##vso[task.setvariable variable=SourceBranchName]$branch"
+        - task: Powershell@2
+          name: PwshMungeExternalAPIsPkgVersion
           displayName: Munge ExternalAPIs package version
           inputs:
             targetType: inline
@@ -76,7 +107,7 @@ extends:
           displayName: 'Push MSBuild CoreXT packages'
           inputs:
             packageParentPath: '$(Build.ArtifactStagingDirectory)'
-            packagesToPush: $(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.Build.*.nupkg;$(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.NET.StringTools.*.nupkg;$(Build.ArtifactStagingDirectory)/PackageArtifacts/VS.ExternalAPIs.*.nupkg
+            packagesToPush: $(MSBuildPackagePattern);$(StringToolsPackagePattern);$(ExternalAPIsPackagePattern)
             nuGetFeedType: internal
             publishVstsFeed: VS
             allowPackageConflicts: true
@@ -84,11 +115,15 @@ extends:
           name: MicroBuildInsertVsPayload_4
           displayName: Insert VS Payload
           inputs:
-            PackagePropsValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
             LinkWorkItemsToPR: true
-            TeamEmail: $(TeamEmail)
             TeamName: $(TeamName)
-            InsertionReviewers: MSBuild
+            TeamEmail: $(TeamEmail)
             TargetBranch: main
-            InsertionPayloadName: '[Experimental] [Skip-SymbolCheck] $(InsertPayloadName)'
+            InsertionPayloadName: $(InsertPayloadName)
+            PackagePropsValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
+            InsertionDescription: $(InsertDescription)
+            ComponentJsonValues: $(InsertJsonValues)
+            DefaultConfigValues: $(InsertConfigValues)
+            InsertionReviewers: MSBuild
+            CustomScriptExecutionCommand: $(InsertCustomScriptExecutionCommand)
             InsertionBuildPolicy: Request Perf DDRITs
\ No newline at end of file
diff --git a/azure-pipelines/vs-insertion.yml b/azure-pipelines/vs-insertion.yml
index a7fafc8da41..7e1a27f3ed7 100644
--- a/azure-pipelines/vs-insertion.yml
+++ b/azure-pipelines/vs-insertion.yml
@@ -2,6 +2,17 @@
 trigger: none
 name: $(Date:yyyyMMdd).$(Rev:r)
 
+resources:
+  pipelines:
+  - pipeline: 'MSBuild'
+    project: 'DevDiv'
+    source: 'MSBuild'
+  repositories:
+  - repository: 1ESPipelineTemplates
+    type: git
+    name: 1ESPipelineTemplates/1ESPipelineTemplates
+    ref: refs/tags/release
+
 schedules:
   - cron: '0 3 * * *'   # Runs every day at 3AM UTC
     displayName: Daily VS insertion
@@ -27,6 +38,11 @@ parameters:
       - rel/d17.6
       - rel/d17.3
       - rel/d17.0
+  - name: DropRetentionDays
+    default: 183
+    type: number
+    displayName: 'Drop Retention Days (do not set to < 90)'
+
 variables:
   # `auto` should work every time and selecting a branch in parameters is likely to fail due to incompatible versions in MSBuild and VS
   - name: AutoInsertTargetBranch
@@ -55,27 +71,24 @@ variables:
       value: ${{ parameters.TargetBranch }}
     ${{ else }}:
       value: $(AutoInsertTargetBranch)
-  - name: InsertPropsValues
-    #  servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core
-    ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: 
-      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
-    ${{ else }}:
-      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
   - name:  TeamName
     value: msbuild
   - name: TeamEmail
-    value: msbuild@microsoft.com
+    value: msbtm@microsoft.com
+  - name: MSBuild_CI_BuildNumber
+    value: $(resources.pipeline.MSBuild.runName)
+  - name: MSBuild_CI_SourceVersion
+    value: $(resources.pipeline.MSBuild.sourceCommit)
+  - name: ArtifactPackagesPath
+    value: $(Build.ArtifactStagingDirectory)/PackageArtifacts
+  
+  - name: MSBuildPackagePattern 
+    value: '$(ArtifactPackagesPath)/Microsoft.Build.*.nupkg'
+  - name: StringToolsPackagePattern
+    value: '$(ArtifactPackagesPath)/Microsoft.NET.StringTools*.nupkg'
+  - name: ExternalAPIsPackagePattern
+    value: '$(ArtifactPackagesPath)/VS.ExternalAPIs.*.nupkg'
 
-resources:
-  pipelines:
-  - pipeline: 'MSBuild'
-    project: 'DevDiv'
-    source: 'MSBuild'
-  repositories:
-  - repository: 1ESPipelineTemplates
-    type: git
-    name: 1ESPipelineTemplates/1ESPipelineTemplates
-    ref: refs/tags/release
 extends:
   template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
   parameters:
@@ -102,45 +115,48 @@ extends:
                 Write-Error "InsertTargetBranch is not set, this means your're not inserting from main or a valid servicing branch."
                 exit 1
               }
+          # the insertion source branch corresponds to the branch on which the MSBuild pipeline ran
+        - task: PowerShell@2
+          name: SetSourceBranchName
+          inputs:
+            targetType: inline
+            script: |
+              # Extract the last section after the last '/'
+              $fullBranch = "$(resources.pipeline.MSBuild.sourceBranch)"
+              $branchSegments = $fullBranch -split '/'
+              $branch = $branchSegments[-1]
+              Write-Host "Setting source branch to '$branch'"
+              Write-Host "##vso[task.setvariable variable=SourceBranchName;isoutput=true]$branch"
         - task: MicroBuildRetainVstsDrops@1
           name: MicroBuildRetainVstsDrops_2
           displayName: Retain VSTS Drops
           inputs:
-            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber)
+            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(SetSourceBranchName.SourceBranchName)/$(MSBuild_CI_BuildNumber)
             AccessToken: $(System.AccessToken)
             DropServiceUri: https://devdiv.artifacts.visualstudio.com/DefaultCollection
-            # retain servicing indefinitely, main only for 183 days
-            ${{ if eq(variables['InsertTargetBranch'], 'main') }}:
-              DropRetentionDays: 183
+            DropRetentionDays: ${{ parameters.DropRetentionDays }}
     - stage: VSInsertion
       displayName: VS insertion
       dependsOn: RetainBuild
       variables:
-          InsertConfigValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion)
-          InsertCustomScriptExecutionCommand: $(Pipeline.Workspace)\xsd\Update-MSBuildXsds.ps1
-          InsertDescription: Insert MSBuild $(Build.BuildNumber) from the branch $(Build.SourceBranchName) at commit $(Build.SourceVersion). Corresponding package version is $(MSBuild_ExtApisPackageVersion)
-          InsertJsonValues: Microsoft.Build.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.vsman,Microsoft.Build.Arm64.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.Arm64.vsman,Microsoft.Build.UnGAC.vsman=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.UnGAC.vsman
-          InsertPayloadName: MSBuild $(Build.SourceBranchName) $(Build.BuildNumber)
-          SymbolsAgentPath: $(Pipeline.Workspace)\$(Build.DefinitionName)\Symbols
-          SymbolsEmailContacts: raines
-          SymbolsFeatureName: MSBuild
-          SymbolsSymwebProject: DDE
-          SymbolsUncPath: '\\cpvsbuild\drops\MSBuild\symbols\$(Build.DefinitionName)\$(Build.BuildNumber)\symbols.archive'
+        SourceBranchName: $[ stageDependencies.RetainBuild.Job_1.outputs['SetSourceBranchName.SourceBranchName'] ]
+        VSDropPath: https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(SourceBranchName)/$(MSBuild_CI_BuildNumber)
+        VSManVersionSuffix: $(MSBuild_ExtApisPackageVersion)+$(MSBuild_CI_SourceVersion)
+        StandardVSManPath: Microsoft.Build.vsman{$(VSManVersionSuffix)}=$(VSDropPath);Microsoft.Build.vsman
+        Arm64VSManPath: Microsoft.Build.Arm64.vsman{$(VSManVersionSuffix)}=$(VSDropPath);Microsoft.Build.Arm64.vsman
+        UnGACVSManPath: Microsoft.Build.UnGAC.vsman=$(VSDropPath);Microsoft.Build.UnGAC.vsman
+        InsertJsonValues: $(StandardVSManPath),$(Arm64VSManPath),$(UnGACVSManPath)
+        InsertConfigValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion)
+        InsertCustomScriptExecutionCommand: $(Pipeline.Workspace)\xsd\Update-MSBuildXsds.ps1
+        InsertDescription: Insert MSBuild $(MSBuild_CI_BuildNumber) from the branch $(SourceBranchName) at commit $(MSBuild_CI_SourceVersion). Corresponding package version is $(MSBuild_ExtApisPackageVersion)
+        InsertPayloadName: 'MSBuild $(SourceBranchName) $(MSBuild_ExtApisPackageVersion)'
       jobs:
-      - job: PushPackages
-        displayName: Push Packages
+      - job: PushPackagesAndInsert
+        displayName: Push Packages and Insert VS payload
         condition: succeeded()
         timeoutInMinutes: 0
         templateContext:
           inputs:
-          - input: pipelineArtifact
-            pipeline: 'MSBuild'
-            artifactName: 'BuildLogs_SourceBuild_Managed_Attempt1'
-            targetPath: '$(Pipeline.Workspace)/BuildLogs_SourceBuild_Managed_Attempt1'
-          - input: pipelineArtifact
-            pipeline: 'MSBuild'
-            artifactName: 'build_Windows_NT_SBOM'
-            targetPath: '$(Pipeline.Workspace)/build_Windows_NT_SBOM'
           - input: pipelineArtifact
             pipeline: 'MSBuild'
             artifactName: 'xsd'
@@ -149,6 +165,10 @@ extends:
             pipeline: 'MSBuild'
             artifactName: 'PackageArtifacts'
             targetPath: '$(Build.ArtifactStagingDirectory)/PackageArtifacts'
+            # the CI build creates a sourcebuild intermediate package that is not signed, remove it to avoid warning from Guardian
+            itemPattern: |
+              **
+              !**/Microsoft.SourceBuild.Intermediate*.nupkg
         steps:
         - task: Powershell@2
           name: PwshMungeExternalAPIsPkgVersion
@@ -170,7 +190,7 @@ extends:
           displayName: 'Push MSBuild CoreXT packages'
           inputs:
             packageParentPath: '$(Build.ArtifactStagingDirectory)'
-            packagesToPush: $(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.Build.*.nupkg;$(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.NET.StringTools.*.nupkg;$(Build.ArtifactStagingDirectory)/PackageArtifacts/VS.ExternalAPIs.*.nupkg
+            packagesToPush: $(MSBuildPackagePattern);$(StringToolsPackagePattern);$(ExternalAPIsPackagePattern)
             nuGetFeedType: internal
             publishVstsFeed: VS
             allowPackageConflicts: true
@@ -182,7 +202,7 @@ extends:
           displayName: 'Push MSBuild packages to VSSDK'
           inputs:
             packageParentPath: '$(Build.ArtifactStagingDirectory)'
-            packagesToPush: $(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.Build.*.nupkg;$(Build.ArtifactStagingDirectory)/PackageArtifacts/Microsoft.NET.StringTools*.nupkg
+            packagesToPush: $(MSBuildPackagePattern);$(StringToolsPackagePattern)
             nuGetFeedType: external
             publishFeedCredentials: azure-public/vssdk
             allowPackageConflicts: true
@@ -201,8 +221,14 @@ extends:
             TeamEmail: $(TeamEmail)
             TargetBranch: $(InsertTargetBranch)
             InsertionPayloadName: $(InsertPayloadName)
-            PackagePropsValues: $(InsertPropsValues)
+            # servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core
+            ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: 
+              PackagePropsValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
+            ${{ else }}:
+              PackagePropsValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)
             InsertionDescription: $(InsertDescription)
+            ComponentJsonValues: $(InsertJsonValues)
+            DefaultConfigValues: $(InsertConfigValues)
             InsertionReviewers: MSBuild,VS ProTools
             CustomScriptExecutionCommand: $(InsertCustomScriptExecutionCommand)
             AutoCompletePR: true
diff --git a/documentation/release-checklist.md b/documentation/release-checklist.md
index 1e5ab0b3f87..911c2c59a6e 100644
--- a/documentation/release-checklist.md
+++ b/documentation/release-checklist.md
@@ -13,10 +13,10 @@
 
 ## At release time
 Before starting the process:
-- [ ] If the release is being cut more than a few days before the VS-side snap, do these two steps. Otherwise check them off.
-  - [ ]  Modify the VS insertion so that it flows from MSBuild `vs{{THIS_RELEASE_VERSION}}` to VS `main` [in the MSBuild-release-branch release definition](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=1319&view=mine&_a=releases). Alternatively, if the release being cut no more than couple of weeks, disable the scheduled releases and create releases from `vs{{THIS_RELEASE_VERSION}}` manually until the VS-side snap: Edit -> Schedule set under Artifacts -> disable toggle
-AND
-  - [ ]  Disable automated run of [the MSBuild-main-branch release definition](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=2153&view=mine&_a=releases) (because our {{NEXT_VERSION}} builds don't have a place to go in VS yet)
+- [ ] If the release is being cut more than a few days before the VS-side snap, run insertions manually OR redirect MSBuild release branch 
+  - [ ]  Disabling automated run of [MSBuild VS Insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) (our {{NEXT_VERSION}} builds don't have a place to go in VS yet) is done by: Edit -> ... -> Triggers -> add a schedule on a dead branch (this overrides the YAML defined once-per-day schedule). Manual pipeline run: select as input resource the inserted "MSBuild" pipeline run on branch `vs{{THIS_RELEASE_VERSION}}` and VS TargetBranch `main`.
+OR
+  - [ ]  If the release is being cut more than couple of weeks modify [YAML](https://github.com/dotnet/msbuild/tree/main/azure-pipelines/vs-insertion.yml) (and merge to affected MSBuild branches) of the [VS insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) so that it flows from MSBuild `vs{{THIS_RELEASE_VERSION}}` to VS `main` [in the MSBuild VS Insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) and keep scheduled insertions to simplify your workflow.
 
 ### Branching from main
 - [ ]  If the new version's branch was created before the Visual Studio fork: fast-forward merge the correct commit (the one that is currently inserted to VS main) to the `vs{{THIS_RELEASE_VERSION}}` branch \
@@ -26,6 +26,8 @@ _(This is for the case where we create the branch too early and want it to be ba
 - [ ]  Create {{NEXT_VERSION}} branding PR (in main) including public API baseline package version change: {{URL_OF_NEXT_VERSION_BRANDING_PR}}. 
   - In the file `eng/Versions.props` Update the `VersionPrefix` to `{{NEXT_VERSION}}` and `PackageValidationBaselineVersion` set to a latest internally available {{THIS_RELEASE_VERSION}} preview version in the [internal dnceng dotnet-tools feed](https://dev.azure.com/dnceng/internal/_artifacts/feed/dotnet-tools-internal). It might be needed to update `CompatibilitySuppressions.xml` files. See [this documentation](https://learn.microsoft.com/en-us/dotnet/fundamentals/apicompat/overview) for more details. You can update `CompatibilitySuppressions.xml` files by running
 `dotnet pack MSBuild.Dev.slnf /p:ApiCompatGenerateSuppressionFile=true`. 
+  - [ ]  When VS main snaps to {{THIS_RELEASE_VERSION}} and updates its version to {{NEXT_VERSION}}, modify the [MSBuild VS Insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) YAML so that it flows from MSBuild main to VS main.
+    - [ ]  Update AutoTargetBranch selection in the [YAML](https://github.com/dotnet/msbuild/tree/main/azure-pipelines/vs-insertion.yml) (add to parameters and make new AutoTargetBranch rule by copying it from existing ones) of the [MSBuild VS Insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) to insert MSBuild `vs{{THIS_RELEASE_VERSION}}` to the corresponding VS branch `rel/d{{THIS_RELEASE_VERSION}}`.
 - [ ]  Merge {{NEXT_VERSION}} branding PR
 
 ### Adjust DARC channels and subscriptions
@@ -59,9 +61,7 @@ if it is not, `darc add-default-channel  --channel "VS {{THIS_RELEASE_VERSION}}"
   - [ ] Run the [official build](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=9434) for vs{{THIS_RELEASE_VERSION}} without OptProf (set `SkipApplyOptimizationData` variable in 'Advanced options' section of the 'Run pipeline' menu to `true`) or alternatively with the latest Opt-Prof collected for the main branch (set `Optional OptProfDrop Override` to the drop path of the collected data, which could be found in the logs of the pipeline: Windows_NT -> Build -> search for `OptimizationData`). 
   - [ ] Check that the [OptProf data collection](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=17389) pipeline run is triggered for vs{{THIS_RELEASE_VERSION}}. If not, run manually ('Run pipeline' in upper right)
   - [ ] Run the [official build](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=9434) for vs{{THIS_RELEASE_VERSION}} with no extra customization - OptProf should succeed now
-- [ ]  When VS main snaps to {{THIS_RELEASE_VERSION}} and updates its version to {{NEXT_VERSION}}, turn on / modify the VS insertion so that it flows from MSBuild main to VS main.
-  - [ ]  Update the [release-branch insertion release definition](https://dev.azure.com/devdiv/DevDiv/_releaseDefinition?definitionId=2153&_a=definition-variables) to have `InsertTargetBranch` `rel/d{{THIS_RELEASE_VERSION}}`.
-- [ ]  Turn [the release pipeline](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=2153&view=mine&_a=releases) back on.
+- [ ] Restore [MSBuild VS Insertion pipeline](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=24295) to the default [YAML](https://github.com/dotnet/msbuild/tree/main/azure-pipelines/vs-insertion.yml) defined schedule, by removing all triggers from Edit -> ... -> Triggers.
 
 ### Configure localization
 - [ ]  Create {{THIS_RELEASE_VERSION}} localization ticket: https://aka.ms/ceChangeLocConfig (requesting to switch localization from {{PREVIOUS_RELEASE_VERSION}} to {{THIS_RELEASE_VERSION}}): {{URL_OF_LOCALIZATION_TICKET}}
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 1c6b2480687..7acb497a028 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -2,9 +2,9 @@
 <Dependencies>
   <ProductDependencies>
     <!-- Intermediate is necessary for source build. -->
-    <Dependency Name="Microsoft.SourceBuild.Intermediate.source-build-reference-packages" Version="9.0.0-alpha.1.24517.1">
+    <Dependency Name="Microsoft.SourceBuild.Intermediate.source-build-reference-packages" Version="9.0.0-alpha.1.24568.3">
       <Uri>https://github.com/dotnet/source-build-reference-packages</Uri>
-      <Sha>a2ad736b86ce484df4d2dfc967bd29cd9d1b5de9</Sha>
+      <Sha>a3776f67d97bd5d9ada92122330454b284bfe915</Sha>
       <SourceBuild RepoName="source-build-reference-packages" ManagedOnly="true" />
     </Dependency>
     <!-- Necessary for source-build. This allows the live version of the package to be used by source-build. -->
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index b633836496a..61638aa7808 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -18,6 +18,9 @@ public sealed class BuildCheckResult : IBuildCheckResult
 {
     public static BuildCheckResult Create(CheckRule rule, IMSBuildElementLocation location, params string[] messageArgs) => new BuildCheckResult(rule, location, messageArgs);
 
+    internal static BuildCheckResult CreateBuiltIn(CheckRule rule, IMSBuildElementLocation location,
+        params string[] messageArgs) => new BuildCheckResult(rule, location, messageArgs) { _isBuiltIn = true };
+
     public BuildCheckResult(CheckRule checkConfig, IMSBuildElementLocation location, string[] messageArgs)
     {
         CheckRule = checkConfig;
@@ -49,9 +52,14 @@ internal BuildEventArgs ToEventArgs(CheckResultSeverity severity)
 
     public string MessageFormat => CheckRule.MessageFormat;
 
-    // Here we will provide different link for built-in rules and custom rules - once we have the base classes differentiated.
     public string FormatMessage() =>
-        _message ??= $"https://aka.ms/buildcheck/codes#{CheckRule.Id} - {string.Format(CheckRule.MessageFormat, MessageArgs)}";
+        _message ??= _isBuiltIn
+            // Builtin rules get unified helplink.
+            ? $"https://aka.ms/buildcheck/codes#{CheckRule.Id} - {string.Format(CheckRule.MessageFormat, MessageArgs)}"
+            // Custom rules can provide their own helplink.
+            : (!string.IsNullOrEmpty(CheckRule.HelpLinkUri) ? $"{CheckRule.HelpLinkUri} - " : null) +
+              string.Format(CheckRule.MessageFormat, MessageArgs);
 
     private string? _message;
+    private bool _isBuiltIn;
 }
diff --git a/src/Build/BuildCheck/API/CheckRule.cs b/src/Build/BuildCheck/API/CheckRule.cs
index 3fdf97bbc44..c37615ae9b5 100644
--- a/src/Build/BuildCheck/API/CheckRule.cs
+++ b/src/Build/BuildCheck/API/CheckRule.cs
@@ -10,6 +10,39 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public class CheckRule
 {
+    /// <summary>
+    /// Creates the descriptor of the BuildCheck rule
+    /// </summary>
+    /// <param name="id">The id of the rule - used to denote the violation in the outputs</param>
+    /// <param name="title">The title of the rule - currently unused</param>
+    /// <param name="description">The detailed description of the rule - currently unused</param>
+    /// <param name="messageFormat">The message format to be used during reporting the violation.</param>
+    /// <param name="defaultConfiguration">The default config of this rule - applicable if user doesn't specify custom values in .editorconfig.</param>
+    /// <param name="helpLinkUri">Optional link to more detailed help for the violation.</param>
+    public CheckRule(
+        string id,
+        string title,
+        string description,
+        string messageFormat,
+        CheckConfiguration defaultConfiguration,
+        string helpLinkUri)
+    {
+        Id = id;
+        Title = title;
+        Description = description;
+        MessageFormat = messageFormat;
+        DefaultConfiguration = defaultConfiguration;
+        HelpLinkUri = helpLinkUri;
+    }
+
+    /// <summary>
+    /// Creates the descriptor of the BuildCheck rule
+    /// </summary>
+    /// <param name="id">The id of the rule - used to denote the violation in the outputs</param>
+    /// <param name="title">The title of the rule - currently unused</param>
+    /// <param name="description">The detailed description of the rule - currently unused</param>
+    /// <param name="messageFormat">The message format to be used during reporting the violation.</param>
+    /// <param name="defaultConfiguration">The default config of this rule - applicable if user doesn't specify custom values in .editorconfig.</param>
     public CheckRule(
         string id,
         string title,
@@ -51,6 +84,8 @@ public CheckRule(
     /// </summary>
     public string MessageFormat { get; }
 
+    public string HelpLinkUri { get; } = string.Empty;
+
     /// <summary>
     /// The default configuration - overridable by the user via .editorconfig.
     /// If no user specified configuration is provided, this default will be used.
diff --git a/src/Build/BuildCheck/API/InternalCheck.cs b/src/Build/BuildCheck/API/WorkerNodeCheck.cs
similarity index 96%
rename from src/Build/BuildCheck/API/InternalCheck.cs
rename to src/Build/BuildCheck/API/WorkerNodeCheck.cs
index 242c513e655..c081af2d1e5 100644
--- a/src/Build/BuildCheck/API/InternalCheck.cs
+++ b/src/Build/BuildCheck/API/WorkerNodeCheck.cs
@@ -6,7 +6,7 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal abstract class InternalCheck : Check
+internal abstract class WorkerNodeCheck : Check
 {
     /// <summary>
     /// Used by the implementors to subscribe to data and events they are interested in.
diff --git a/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs b/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
index 25d99b2bb91..8a2c12e4316 100644
--- a/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
+++ b/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
@@ -114,7 +114,7 @@ private void CheckWrite(BuildCheckDataContext<TaskInvocationCheckData> context,
 
             if (_filesWritten.TryGetValue(fileBeingWritten, out (string projectFilePath, string taskName) existingEntry))
             {
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     SupportedRule,
                     context.Data.TaskInvocationLocation,
                     context.Data.TaskName,
diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index 30049c3f7ca..6e7c2bc3174 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -63,7 +63,7 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Environm
             }
             else if (CheckScopeClassifier.IsActionInObservedScope(_scope, context.Data.EnvironmentVariableLocation.File, context.Data.ProjectFilePath))
             {
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     SupportedRule,
                     context.Data.EnvironmentVariableLocation,
                     GetFormattedMessage(context.Data.EnvironmentVariableName, context.Data.EnvironmentVariableValue)));
@@ -88,7 +88,7 @@ private void HandleScopeReadiness()
                 continue;
             }
 
-            context.ReportResult(BuildCheckResult.Create(
+            context.ReportResult(BuildCheckResult.CreateBuiltIn(
                 SupportedRule,
                 context.Data.EnvironmentVariableLocation,
                 GetFormattedMessage(context.Data.EnvironmentVariableName, context.Data.EnvironmentVariableValue)));
diff --git a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
index e2e01caf5e7..3d015561fd6 100644
--- a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
+++ b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal class PropertiesUsageCheck : InternalCheck
+internal class PropertiesUsageCheck : WorkerNodeCheck
 {
     private static readonly CheckRule _usedBeforeInitializedRule = new CheckRule("BC0201", "PropertyUsedBeforeDeclared",
         ResourceUtilities.GetResourceString("BuildCheck_BC0201_Title")!,
@@ -148,7 +148,7 @@ private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> conte
             {
                 _uninitializedReadsInScope.Remove(writeData.PropertyName);
 
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     _initializedAfterUsedRule,
                     uninitInScopeReadLocation,
                     writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
@@ -160,7 +160,7 @@ private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> conte
             {
                 _uninitializedReadsOutOfScope.Remove(writeData.PropertyName);
 
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     _initializedAfterUsedRule,
                     uninitOutScopeReadLocation,
                     writeData.PropertyName, writeData.ElementLocation?.LocationString ?? string.Empty));
@@ -205,7 +205,7 @@ private void ProcessPropertyRead(BuildCheckDataContext<PropertyReadData> context
                          readData.ElementLocation, readData.ProjectFilePath))
             {
                 // report immediately
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     _usedBeforeInitializedRule,
                     readData.ElementLocation,
                     readData.PropertyName));
@@ -220,7 +220,7 @@ private void DoneWithProject(BuildCheckDataContext<ProjectRequestProcessingDoneD
         {
             if (propWithLocation.Value != null && !_readProperties.Contains(propWithLocation.Key))
             {
-                context.ReportResult(BuildCheckResult.Create(
+                context.ReportResult(BuildCheckResult.CreateBuiltIn(
                     _unusedPropertyRule,
                     propWithLocation.Value,
                     propWithLocation.Key));
@@ -231,7 +231,7 @@ private void DoneWithProject(BuildCheckDataContext<ProjectRequestProcessingDoneD
         //  uninitialized reads immediately (instead we wait if they are attempted to be initialized late).
         foreach (var uninitializedRead in _uninitializedReadsInScope)
         {
-            context.ReportResult(BuildCheckResult.Create(
+            context.ReportResult(BuildCheckResult.CreateBuiltIn(
                 _usedBeforeInitializedRule,
                 uninitializedRead.Value,
                 uninitializedRead.Key));
diff --git a/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs b/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
index e01f62ab787..52c328354c1 100644
--- a/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
+++ b/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
@@ -83,7 +83,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
 
         if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))
         {
-            context.ReportResult(BuildCheckResult.Create(
+            context.ReportResult(BuildCheckResult.CreateBuiltIn(
                 SupportedRule,
                 // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732
                 ElementLocation.EmptyLocation,
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 90c5eadb073..e095a804ea7 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -493,9 +493,9 @@ public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expec
         }
     }
 
-    [Theory(Skip = "https://github.com/dotnet/msbuild/issues/10702")]
-    [InlineData("CheckCandidate", "X01234", "error", "error X01234")]
-    [InlineData("CheckCandidateWithMultipleChecksInjected", "X01234", "warning", "warning X01234")]
+    [Theory]
+    [InlineData("CheckCandidate", "X01234", "error", "error X01234: http://samplelink.com/X01234")]
+    [InlineData("CheckCandidateWithMultipleChecksInjected", "X01234", "warning", "warning X01234: http://samplelink.com/X01234")]
     public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleId, string severity, string expectedMessage)
     {
         using (var env = TestEnvironment.Create())
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs b/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
index a02c34afc7c..c2673d5b508 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
@@ -14,7 +14,8 @@ public sealed class Check1 : Check
             "Title",
             "Description",
             "Message format: {0}",
-            new CheckConfiguration());
+            new CheckConfiguration(),
+            "http://samplelink.com/X01234");
 
         public override string FriendlyName => "CustomRule1";
 
diff --git a/src/Framework/EncodingUtilities.cs b/src/Framework/EncodingUtilities.cs
index 4ee4679dd3f..342e07d3d67 100644
--- a/src/Framework/EncodingUtilities.cs
+++ b/src/Framework/EncodingUtilities.cs
@@ -30,6 +30,7 @@ internal static class EncodingUtilities
         internal const string UseUtf8Never = "NEVER";
         internal const string UseUtf8Detect = "DETECT";
         internal const string UseUtf8System = "SYSTEM";
+        internal const string UseUtf8True = "TRUE";
 
         /// <summary>
         /// Get the current system locale code page, OEM version. OEM code pages are used for console-based input/output
@@ -241,6 +242,7 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
             switch (useUtf8.ToUpperInvariant())
             {
                 case EncodingUtilities.UseUtf8Always:
+                case EncodingUtilities.UseUtf8True:
                     return EncodingUtilities.Utf8WithoutBom;
                 case EncodingUtilities.UseUtf8Never:
                 case EncodingUtilities.UseUtf8System:
diff --git a/src/Utilities.UnitTests/EncodingUtilities_Tests.cs b/src/Utilities.UnitTests/EncodingUtilities_Tests.cs
index 11088b58948..a56ee25c4db 100644
--- a/src/Utilities.UnitTests/EncodingUtilities_Tests.cs
+++ b/src/Utilities.UnitTests/EncodingUtilities_Tests.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.UnitTests
     public sealed class EncodingUtilities_Tests
     {
         /// <summary>
-        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded 
+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded
         /// in the current system encoding.
         /// </summary>
         [WindowsOnlyFact]
@@ -53,5 +53,14 @@ public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOve
 
             EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding().ShouldBeEquivalentTo(new CultureInfo(expectedLanguage));
         }
+
+        [WindowsOnlyFact]
+        public void BatchFileEncoding_EncodingSpecificationTrueEqualsAlways()
+        {
+            const string content = @"example";
+
+            var alwaysEncoding = EncodingUtilities.BatchFileEncoding(content, EncodingUtilities.UseUtf8Always);
+            EncodingUtilities.BatchFileEncoding(content, EncodingUtilities.UseUtf8True).ShouldBe(alwaysEncoding);
+        }
     }
 }
diff --git a/template_feed/content/Microsoft.CheckTemplate/Check1.cs b/template_feed/content/Microsoft.CheckTemplate/Check1.cs
index d15d11436be..194e451d533 100644
--- a/template_feed/content/Microsoft.CheckTemplate/Check1.cs
+++ b/template_feed/content/Microsoft.CheckTemplate/Check1.cs
@@ -11,7 +11,8 @@ public sealed class Check1 : Check
             "Title",
             "Description",
             "Message format: {0}",
-            new CheckConfiguration());
+            new CheckConfiguration(),
+            "http://sampleHelpLink.com/X01234");
 
         public override string FriendlyName => "Company.Check1";
 
