diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index 5a1eb10715b..8448bce1cea 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -101,7 +101,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
                 throw new NotImplementedException();
             }
 
-            public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+            public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
             {
                 throw new NotImplementedException();
             }
diff --git a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
index 714da0533d9..77a9ca1196a 100644
--- a/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientPacketPump.cs
@@ -118,7 +118,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator to use as a source for packet data.</param>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             _packetFactory.DeserializeAndRoutePacket(nodeId, packetType, translator);
         }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
index d8e39c9351a..895d37c49f3 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestConfigurationResponse.cs
@@ -84,9 +84,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildRequestConfigurationResponse(translator);
+            return new BuildRequestConfigurationResponse((ITranslator)translator);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
index 1bcd3206909..15fad322d23 100644
--- a/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
+++ b/src/Build/BackEnd/Components/Communications/LogMessagePacket.cs
@@ -38,9 +38,9 @@ private LogMessagePacket(ITranslator translator)
         /// <summary>
         /// Factory for serialization
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new LogMessagePacket(translator);
+            return new LogMessagePacket((ITranslator)translator);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index b0031746031..79d75dd665a 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -245,7 +245,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator containing the data from which the packet should be reconstructed.</param>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             if (packetType == NodePacketType.NodeShutdown)
             {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 15c815fb9cf..67f7df8fd59 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -285,7 +285,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <summary>
         /// Deserializes and routes a packet.  Not used in the in-proc node.
         /// </summary>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             // Not used
             ErrorUtilities.ThrowInternalErrorUnreachable();
diff --git a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
index e7e66d6b886..fbc0e8b30b3 100644
--- a/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/TaskHostNodeManager.cs
@@ -144,7 +144,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator containing the data from which the packet should be reconstructed.</param>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             throw new NotSupportedException("not used");
         }
diff --git a/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs b/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
index 72ce0107921..ac9beb18705 100644
--- a/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
@@ -22,6 +22,6 @@ internal sealed class FileAccessReport : INodePacket
 
         internal FileAccessData FileAccessData => _fileAccessData;
 
-        internal static INodePacket FactoryForDeserialization(ITranslator translator) => new FileAccessReport(translator);
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator) => new FileAccessReport((ITranslator)translator);
     }
 }
diff --git a/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs b/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
index f8d891fe532..ba75be5c1f1 100644
--- a/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
@@ -19,7 +19,7 @@ internal sealed class ProcessReport : INodePacket
 
         internal ProcessData ProcessData => _processData;
 
-        internal static INodePacket FactoryForDeserialization(ITranslator translator) => new ProcessReport(translator);
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator) => new ProcessReport((ITranslator)translator);
 
         /// <inheritdoc/>
         public void Translate(ITranslator translator) => translator.Translate(ref _processData);
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
index 8d17baeba38..9d32adbe4cc 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverRequest.cs
@@ -73,9 +73,9 @@ public static SdkResolverRequest Create(int submissionId, SdkReference sdkRefere
             return new SdkResolverRequest(submissionId, sdkReference.Name, sdkReference.Version, sdkReference.MinimumVersion, buildEventContext, elementLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
         }
 
-        public static INodePacket FactoryForDeserialization(ITranslator translator)
+        public static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new SdkResolverRequest(translator);
+            return new SdkResolverRequest((ITranslator)translator);
         }
 
         public void Translate(ITranslator translator)
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
index d341db1add7..6cb05dfbaf5 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResult.cs
@@ -96,9 +96,9 @@ public void Translate(ITranslator translator)
 
         public NodePacketType Type => NodePacketType.ResolveSdkResponse;
 
-        public static INodePacket FactoryForDeserialization(ITranslator translator)
+        public static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new SdkResult(translator);
+            return new SdkResult((ITranslator)translator);
         }
 
         public override bool Equals(object obj)
diff --git a/src/Build/BackEnd/Node/InProcNode.cs b/src/Build/BackEnd/Node/InProcNode.cs
index 7b4049f8905..0a2668cbf48 100644
--- a/src/Build/BackEnd/Node/InProcNode.cs
+++ b/src/Build/BackEnd/Node/InProcNode.cs
@@ -216,7 +216,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <summary>
         /// Not necessary for in-proc node - we don't serialize.
         /// </summary>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             // The in-proc endpoint shouldn't be serializing, just routing.
             ErrorUtilities.ThrowInternalError("Unexpected call to DeserializeAndRoutePacket on the in-proc node.");
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index 99ab53e2e70..7f6b5c4eb2d 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -184,10 +184,10 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for deserialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             NodeConfiguration configuration = new NodeConfiguration();
-            configuration.Translate(translator);
+            configuration.Translate((ITranslator)translator);
 
             return configuration;
         }
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 6a28b5e6c38..879acd901a6 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -336,7 +336,7 @@ void INodePacketFactory.UnregisterPacketHandler(NodePacketType packetType)
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator to use as a source for packet data.</param>
-        void INodePacketFactory.DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        void INodePacketFactory.DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             _packetFactory.DeserializeAndRoutePacket(nodeId, packetType, translator);
         }
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index ab17e3b7ce1..453100947f1 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -207,7 +207,7 @@ void INodePacketFactory.UnregisterPacketHandler(NodePacketType packetType)
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator to use as a source for packet data.</param>
-        void INodePacketFactory.DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        void INodePacketFactory.DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             _packetFactory.DeserializeAndRoutePacket(nodeId, packetType, translator);
         }
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
index 37508396c35..22895a60771 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCancel.cs
@@ -11,7 +11,7 @@ public void Translate(ITranslator translator)
         {
         }
 
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             return new ServerNodeBuildCancel();
         }
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index fc5bca7e920..fa636dc0114 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -119,10 +119,10 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for deserialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             ServerNodeBuildCommand command = new();
-            command.Translate(translator);
+            command.Translate((ITranslator)translator);
 
             return command;
         }
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
index 16c10c7662c..1b7e6ce8bcd 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
@@ -38,10 +38,10 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for deserialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             ServerNodeBuildResult command = new();
-            command.Translate(translator);
+            command.Translate((ITranslator)translator);
 
             return command;
         }
diff --git a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
index 4198ce5b436..35d3dac239a 100644
--- a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
+++ b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
@@ -37,10 +37,10 @@ public void Translate(ITranslator translator)
             translator.TranslateEnum(ref _outputType, (int)_outputType);
         }
 
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             ServerNodeConsoleWrite command = new();
-            command.Translate(translator);
+            command.Translate((ITranslator)translator);
 
             return command;
         }
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index fa76ba4765c..86254bf1422 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -440,9 +440,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildRequest(translator);
+            return new BuildRequest((ITranslator)translator);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
index 70716800c48..2d414fb85e1 100644
--- a/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestBlocker.cs
@@ -241,9 +241,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildRequestBlocker(translator);
+            return new BuildRequestBlocker((ITranslator)translator);
         }
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index f90f99d14d3..fcfbf248ef3 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -957,9 +957,9 @@ internal void TranslateForFutureUse(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static BuildRequestConfiguration FactoryForDeserialization(ITranslator translator)
+        internal static BuildRequestConfiguration FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildRequestConfiguration(translator);
+            return new BuildRequestConfiguration((ITranslator)translator);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
index 8cb838276ba..4e5ddf35a94 100644
--- a/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestUnblocker.cs
@@ -117,9 +117,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildRequestUnblocker(translator);
+            return new BuildRequestUnblocker((ITranslator)translator);
         }
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index fd780f44a6d..8dddda2f9d8 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -684,9 +684,9 @@ void ITranslatable.Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization
         /// </summary>
-        internal static BuildResult FactoryForDeserialization(ITranslator translator)
+        internal static BuildResult FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new BuildResult(translator);
+            return new BuildResult((ITranslator)translator);
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Shared/ResourceRequest.cs b/src/Build/BackEnd/Shared/ResourceRequest.cs
index bcfd0ddf0e7..4d53e8a49fc 100644
--- a/src/Build/BackEnd/Shared/ResourceRequest.cs
+++ b/src/Build/BackEnd/Shared/ResourceRequest.cs
@@ -105,9 +105,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new ResourceRequest(translator);
+            return new ResourceRequest((ITranslator)translator);
         }
     }
 }
diff --git a/src/Build/BackEnd/Shared/ResourceResponse.cs b/src/Build/BackEnd/Shared/ResourceResponse.cs
index 9e001ca2dc7..cfdcd13b32c 100644
--- a/src/Build/BackEnd/Shared/ResourceResponse.cs
+++ b/src/Build/BackEnd/Shared/ResourceResponse.cs
@@ -68,9 +68,9 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for serialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
-            return new ResourceResponse(translator);
+            return new ResourceResponse((ITranslator)translator);
         }
     }
 }
diff --git a/src/Framework/IJsonTranslator.cs b/src/Framework/IJsonTranslator.cs
new file mode 100644
index 00000000000..172f840390c
--- /dev/null
+++ b/src/Framework/IJsonTranslator.cs
@@ -0,0 +1,37 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#if !TASKHOST && !NETSTANDARD
+using System;
+using System.Collections.Generic;
+using System.Globalization;
+using System.Text.Json;
+using Microsoft.Build.BackEnd;
+
+#nullable disable
+
+namespace Microsoft.Build.BackEnd
+{
+    internal interface IJsonTranslator : ITranslatorBase, IDisposable
+    {
+        /// <summary>
+        /// Returns the current serialization mode.
+        /// </summary>
+        TranslationDirection Mode { get; }
+
+        void TranslateToJson<T>(T model, JsonSerializerOptions jsonSerializerOptions = null);
+
+        T TranslateFromJson<T>(JsonSerializerOptions jsonSerializerOptions = null);
+
+        // Additional methods for specific type handling if needed
+        void TranslateCulture(string propertyName, ref CultureInfo culture);
+
+        void TranslateDictionary<TKey, TValue>(
+            JsonSerializerOptions jsonSerializerOptions,
+            string propertyName,
+            ref Dictionary<TKey, TValue> dictionary,
+            IEqualityComparer<TKey> comparer,
+            Func<TValue> valueFactory = null);
+    }
+}
+#endif
diff --git a/src/Framework/ITranslatable2.cs b/src/Framework/ITranslatable2.cs
new file mode 100644
index 00000000000..ae10ebaa9fa
--- /dev/null
+++ b/src/Framework/ITranslatable2.cs
@@ -0,0 +1,20 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+#if !TASKHOST && !NETSTANDARD
+
+#nullable disable
+
+namespace Microsoft.Build.BackEnd
+{
+    /// <summary>
+    /// An interface representing an object which may be serialized by the node packet serializer.
+    /// </summary>
+    internal interface ITranslatable2 : ITranslatable
+    {
+        /// <summary>
+        /// Reads or writes the packet to the json serializer.
+        /// </summary>
+        void Translate(IJsonTranslator translator);
+    }
+}
+#endif
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index 5f6655cef36..ca0233d9ba7 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -47,6 +47,17 @@ internal enum TranslationDirection
         ReadFromStream
     }
 
+    internal enum ProtocolType
+    {
+        Binary,
+        Json
+    }
+
+    internal interface ITranslatorBase
+    {
+        ProtocolType Protocol { get; }
+    }
+
     /// <summary>
     /// This interface represents an object which aids objects in serializing and
     /// deserializing INodePackets.
@@ -64,7 +75,7 @@ internal enum TranslationDirection
     ///    that by ensuring a single Translate method on a given object can handle both reads and
     ///    writes without referencing any field more than once.
     /// </remarks>
-    internal interface ITranslator : IDisposable
+    internal interface ITranslator : ITranslatorBase, IDisposable
     {
         /// <summary>
         /// Returns the current serialization mode.
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 42b6a8d6ab6..ce7b25b6f09 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -242,4 +242,11 @@ NodePacketType Type
         }
         #endregion
     }
+
+    internal interface INodePacket2 : INodePacket
+#if !TASKHOST
+       , ITranslatable2
+#endif
+    {
+    }
 }
diff --git a/src/Shared/INodePacketFactory.cs b/src/Shared/INodePacketFactory.cs
index c972e0408b5..448564c8427 100644
--- a/src/Shared/INodePacketFactory.cs
+++ b/src/Shared/INodePacketFactory.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     /// <param name="translator">The translator containing the packet data.</param>
     /// <returns>The packet reconstructed from the stream.</returns>
-    internal delegate INodePacket NodePacketFactoryMethod(ITranslator translator);
+    internal delegate INodePacket NodePacketFactoryMethod(ITranslatorBase translator);
 
     /// <summary>
     /// This interface represents an object which is used to reconstruct packet objects from
@@ -40,7 +40,7 @@ internal interface INodePacketFactory
         /// <param name="nodeId">The node from which the packet was received.</param>
         /// <param name="packetType">The packet type.</param>
         /// <param name="translator">The translator containing the data from which the packet should be reconstructed.</param>
-        void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator);
+        void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator);
 
         /// <summary>
         /// Routes the specified packet
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index 307cc68bdc9..d05b9886d3a 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -251,7 +251,7 @@ private static BinaryReader Create(Stream stream, BinaryReaderFactory sharedBuff
         }
 
         /// <summary>
-        /// Holds thepreallocated buffer.
+        /// Holds the pre allocated buffer.
         /// </summary>
         private class Buffer : BinaryReaderFactory
         {
diff --git a/src/Shared/NodePacketFactory.cs b/src/Shared/NodePacketFactory.cs
index 214ddfa20f9..4a3e0ac4b86 100644
--- a/src/Shared/NodePacketFactory.cs
+++ b/src/Shared/NodePacketFactory.cs
@@ -47,7 +47,7 @@ public void UnregisterPacketHandler(NodePacketType packetType)
         /// <summary>
         /// Creates and routes a packet with data from a binary stream.
         /// </summary>
-        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslator translator)
+        public void DeserializeAndRoutePacket(int nodeId, NodePacketType packetType, ITranslatorBase translator)
         {
             // PERF: Not using VerifyThrow to avoid boxing of packetType in the non-error case
             if (!_packetFactories.TryGetValue(packetType, out PacketFactoryRecord record))
@@ -96,7 +96,7 @@ public PacketFactoryRecord(INodePacketHandler handler, NodePacketFactoryMethod f
             /// <summary>
             /// Creates a packet from a binary stream and sends it to the registered handler.
             /// </summary>
-            public void DeserializeAndRoutePacket(int nodeId, ITranslator translator)
+            public void DeserializeAndRoutePacket(int nodeId, ITranslatorBase translator)
             {
                 INodePacket packet = _factoryMethod(translator);
                 RoutePacket(nodeId, packet);
diff --git a/src/Shared/NodeShutdown.cs b/src/Shared/NodeShutdown.cs
index 9ce9426799e..3e556e122e1 100644
--- a/src/Shared/NodeShutdown.cs
+++ b/src/Shared/NodeShutdown.cs
@@ -111,10 +111,10 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory method for deserialization
         /// </summary>
-        internal static NodeShutdown FactoryForDeserialization(ITranslator translator)
+        internal static NodeShutdown FactoryForDeserialization(ITranslatorBase translator)
         {
             NodeShutdown shutdown = new NodeShutdown();
-            shutdown.Translate(translator);
+            shutdown.Translate((ITranslator)translator);
             return shutdown;
         }
 
diff --git a/src/Shared/TaskHostTaskComplete.cs b/src/Shared/TaskHostTaskComplete.cs
index 862341eaa8f..05195d619f9 100644
--- a/src/Shared/TaskHostTaskComplete.cs
+++ b/src/Shared/TaskHostTaskComplete.cs
@@ -255,10 +255,10 @@ public void Translate(ITranslator translator)
         /// <summary>
         /// Factory for deserialization.
         /// </summary>
-        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        internal static INodePacket FactoryForDeserialization(ITranslatorBase translator)
         {
             TaskHostTaskComplete taskComplete = new TaskHostTaskComplete();
-            taskComplete.Translate(translator);
+            taskComplete.Translate((ITranslator)translator);
             return taskComplete;
         }
     }
