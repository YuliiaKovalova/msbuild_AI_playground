diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
new file mode 100644
index 00000000000..92f9b15f0be
--- /dev/null
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -0,0 +1,89 @@
+ï»¿using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+
+namespace Microsoft.Build.Tasks
+{
+    class GetCompatiblePlatform : TaskExtension
+    {
+        public ITaskItem[] AnnotatedProjects { get; set; }
+
+        public string ParentProjectPlatform { get; set; }
+
+        public string PlatformLookupTable { get; set; }
+
+        [Output]
+        public ITaskItem[] AssignedProjectsWithPlatform { get; set; }
+
+        public override bool Execute()
+        {
+            Dictionary<string, string> translationTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            if (!string.IsNullOrEmpty(PlatformLookupTable))
+            {
+                foreach (string s in PlatformLookupTable.Split(';'))
+                {
+                    // Minimum translation: a=b
+                    if (s.Length < 3)
+                    {
+                        continue;
+                    }
+                    string key = s.Split('=')[0];
+                    string val = s.Split('=')[1];
+                    translationTable[key] = val;
+                }
+                Log.LogMessage($"Translation Table: {translationTable.Aggregate(new StringBuilder(), (sb, kvp) => sb.Append(kvp.Key + "=" + kvp.Value + ";"), sb => sb.ToString())}");
+            }
+
+            AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
+            for (int i = 0; i < AnnotatedProjects.Length; i++)
+            {
+                AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
+
+                HashSet<string> childPlatforms = new HashSet<string>();
+                foreach (string s in AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions").Split(';'))
+                {
+                    if (!string.IsNullOrEmpty(s))
+                    {
+                        childPlatforms.Add(s);
+                    }
+                }
+
+                string buildChildProjectAs = "";
+
+                // Translation table takes priority
+                if (translationTable.ContainsKey(ParentProjectPlatform) &&
+                          childPlatforms.Contains(translationTable[ParentProjectPlatform]))
+                {
+                    buildChildProjectAs = translationTable[ParentProjectPlatform];
+                    Log.LogMessage($"Found {ParentProjectPlatform}={buildChildProjectAs} in the given translation table: {translationTable.ToString()}.");
+                }
+                // AnyCPU if possible
+                else if (childPlatforms.Contains("AnyCPU"))
+                {
+                    buildChildProjectAs = "AnyCPU";
+                    Log.LogMessage($"Defaulting to AnyCPU.");
+                }
+                // Try to prefer matching platforms
+                else if (childPlatforms.Contains(ParentProjectPlatform))
+                {
+                    buildChildProjectAs = ParentProjectPlatform;
+                    Log.LogMessage($"Child and parent have the same platform.");
+                }
+                else
+                {
+                    // Keep it empty, log a warning. Common.CurrentVersion.targets will undefine 
+                    // Platform/PlatformTarget when this is the case.
+                    Log.LogWarning("Could not determine what the child project should be built as.\nChild project will be built normally.");
+                }
+
+                AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildChildProjectAs);
+                Log.LogMessage($"Project {AssignedProjectsWithPlatform[i].GetMetadata("Identity")} would be built as: {buildChildProjectAs}");
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index f060dad8a13..e5418ee4bad 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -342,6 +342,7 @@
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
     <Compile Include="ResourceHandling\*.cs" />
+    <Compile Include="GetCompatiblePlatform.cs" />
     <Compile Include="ResolveComReference.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 315ff908df7..baae1da4487 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1603,92 +1603,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   </Target>
 
-  <UsingTask TaskName="GetNearestPlatformTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
-    <ParameterGroup>
-      <AnnotatedProjects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
-      <ParentProjectPlatform ParameterType="System.String" Required="true" />
-      <PlatformLookupTable ParameterType="System.String" Required="false" />
-      <AssignedProjectsWithPlatform ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
-    </ParameterGroup>
-    <Task>
-      <Using Namespace="System.Collections.Generic"/>
-      <Using Namespace="System.Linq"/>
-      <Code Type="Fragment" Language="cs">
-      <![CDATA[
-            Dictionary<string, string> translationTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-            if (PlatformLookupTable != null)
-            {
-              foreach (string s in PlatformLookupTable.Split(';'))
-              {
-                // Minimum translation: a=b
-                if (s.Length < 3) 
-                {
-                  continue;
-                }
-                string key = s.Split('=')[0];
-                string val = s.Split('=')[1]; 
-                translationTable[key]=val;
-              }
-              Log.LogMessage($"Translation Table: {translationTable.Aggregate(new StringBuilder(), (sb, kvp) => sb.Append(kvp.Key + "=" + kvp.Value + ";"), sb => sb.ToString())}");
-            }
-
-            AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
-            for (int i = 0; i < AnnotatedProjects.Length; i++)
-            {
-              AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
-
-              HashSet <string> childPlatforms = new HashSet<string>();
-              foreach (string s in AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions").Split(';'))
-              {
-                if (!string.IsNullOrEmpty(s))
-                {
-                  childPlatforms.Add(s);
-                }
-              }
-
-              string buildChildProjectAs = "";
-
-              // Translation table takes priority
-              if (translationTable.ContainsKey(ParentProjectPlatform) &&
-                        childPlatforms.Contains(translationTable[ParentProjectPlatform]))
-              {
-                buildChildProjectAs = translationTable[ParentProjectPlatform];
-                Log.LogMessage($"Found {ParentProjectPlatform}={buildChildProjectAs} in the given translation table: {translationTable.ToString()}.");
-              }
-              // AnyCPU if possible
-              else if (childPlatforms.Contains("AnyCPU"))
-              {
-                buildChildProjectAs = "AnyCPU";
-                Log.LogMessage($"Defaulting to AnyCPU.");
-              }
-              // Try to prefer matching platforms
-              else if (childPlatforms.Contains(ParentProjectPlatform))
-              {
-                buildChildProjectAs = ParentProjectPlatform;
-                Log.LogMessage($"Child and parent have the same platform.");
-              }
-              else
-              {
-                // Keep it empty, log a warning. Common.CurrentVersion.targets will undefine 
-                // Platform/PlatformTarget when this is the case.
-                Log.LogWarning("Could not determine what the child project should be built as.\nChild project will be built normally.");
-              }
-
-              AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildChildProjectAs);
-              Log.LogMessage($"Project {AssignedProjectsWithPlatform[i].GetMetadata("Identity")} would be built as: {buildChildProjectAs}");
-            }
-      ]]>
-      </Code>
-    </Task>
-  </UsingTask>
-
   <!--
     ====================================================================================
                                         _GetProjectReferencePlatformProperties
 
     If a project is opted in via $(EnableDynamicPlatformResolution), this target builds the GetPlatforms
     target of all existing references to get a list of all possible platforms of the referenced projects. 
-    Calls the GetNearestPlatform task to determine the most compatible platform for each project.
+    Calls the GetCompatiblePlatform task to determine the most compatible platform for each project.
     This prevents overbuilding a project when 'AnyCPU' is available, for example.
 
     ======================================================================================
@@ -1734,14 +1655,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <Warning Condition="'@(_ProjectReferencePlatformPossibilities.SkipGetPlatformProperties)' == '' and '%(_ProjectReferencePlatformPossibilities.PlatformOptions)' == ''" 
            Text="EnableDynamicPlatformResolution is enabled, but '%(_ProjectReferencePlatformPossibilities.Identity)' has no 'Platforms' set. It will be built without a specified platform."/>
 
-    <GetNearestPlatformTask AnnotatedProjects="@(_ProjectReferencePlatformPossibilities)"
+    <GetCompatiblePlatform AnnotatedProjects="@(_ProjectReferencePlatformPossibilities)"
                             ParentProjectPlatform="$(ParentPlatform)"
                             PlatformLookupTable="$(PlatformLookupTable);%(_ProjectReferencePlatformPossibilities.PlatformLookupTable)"
                             Condition="'@(_ProjectReferencePlatformPossibilities->Count())' != '0' and '%(_ProjectReferencePlatformPossibilities.PlatformOptions)' != ''">
       <Output ItemName="ProjectsWithPlatformAssignment" TaskParameter="AssignedProjectsWithPlatform" />
-    </GetNearestPlatformTask>
+    </GetCompatiblePlatform>
 
-    <!-- If GetNearestPlatformTask didn't run, @(ProjectsWithPlatformAssignment) will be empty.
+    <!-- If GetCompatiblePlatform didn't run, @(ProjectsWithPlatformAssignment) will be empty.
          Don't do anything in this case. Ex: A project references many projects
          that can't multiplatform.  -->
     <ItemGroup Condition="'@(ProjectsWithPlatformAssignment->Count())' != '0'">
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index 6cef8ef8661..f6b98da83af 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -127,6 +127,7 @@
 
     <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
+    <UsingTask TaskName="Microsoft.Build.Tasks.GetCompatiblePlatform"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFileHash"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkSdkPath"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
