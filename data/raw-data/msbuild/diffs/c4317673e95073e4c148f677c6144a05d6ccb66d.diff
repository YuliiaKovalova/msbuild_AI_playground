diff --git a/src/Build/BuildCheck/API/BuildExecutionCheckConfiguration.cs b/src/Build/BuildCheck/API/BuildExecutionCheckConfiguration.cs
index fde6fc400ba..1f3956dd4fd 100644
--- a/src/Build/BuildCheck/API/BuildExecutionCheckConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildExecutionCheckConfiguration.cs
@@ -90,7 +90,7 @@ public bool? IsEnabled {
             case "work_tree_imports":
                 return BuildCheck.EvaluationCheckScope.WorkTreeImports;
             case "all":
-                return BuildCheck.EvaluationCheckScope.ProjectWithAllImports;
+                return BuildCheck.EvaluationCheckScope.All;
             default:
                 ThrowIncorrectValueException(BuildCheckConstants.scopeConfigurationKey, stringValue);
                 break;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 05e32d9afcf..135ecf00c49 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -342,7 +342,7 @@ public void ProcessEvaluationFinishedEventArgs(
             }
 
             _buildEventsProcessor
-                .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs, propertiesLookup);
+                .ProcessEvaluationFinishedEventArgs(checkContext, evaluationFinishedEventArgs, propertiesLookup);
         }
 
         public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisScopeClassifier.cs b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
similarity index 86%
rename from src/Build/BuildCheck/Infrastructure/AnalysisScopeClassifier.cs
rename to src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
index 82d1e67b289..b8bb1c15d78 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisScopeClassifier.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckScopeClassifier.cs
@@ -7,7 +7,7 @@
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
-internal static class AnalysisScopeClassifier
+internal static class CheckScopeClassifier
 {
     /// <summary>
     /// Indicates whether given location is in the observed scope, based on currently built project path.
@@ -18,20 +18,20 @@ internal static class AnalysisScopeClassifier
     /// <returns></returns>
     /// <exception cref="ArgumentOutOfRangeException"></exception>
     internal static bool IsActionInObservedScope(
-        EvaluationAnalysisScope scope,
+        EvaluationCheckScope scope,
         IMsBuildElementLocation? location,
         string projectFileFullPath)
     {
         switch (scope)
         {
-            case EvaluationAnalysisScope.ProjectFileOnly:
+            case EvaluationCheckScope.ProjectFileOnly:
                 return location != null && location.File == projectFileFullPath;
-            case EvaluationAnalysisScope.WorkTreeImports:
+            case EvaluationCheckScope.WorkTreeImports:
                 return
                     location != null &&
                     !FileClassifier.Shared.IsNonModifiable(location.File) &&
                     !IsGeneratedNugetImport(location.File);
-            case EvaluationAnalysisScope.All:
+            case EvaluationCheckScope.All:
                 return true;
             default:
                 throw new ArgumentOutOfRangeException(nameof(scope), scope, null);
diff --git a/src/BuildCheck.UnitTests/BuildExecutionCheckConfigurationEffectiveTests.cs b/src/BuildCheck.UnitTests/BuildExecutionCheckConfigurationEffectiveTests.cs
index e5a07fedc0a..db3a28f597e 100644
--- a/src/BuildCheck.UnitTests/BuildExecutionCheckConfigurationEffectiveTests.cs
+++ b/src/BuildCheck.UnitTests/BuildExecutionCheckConfigurationEffectiveTests.cs
@@ -12,9 +12,9 @@ namespace Microsoft.Build.BuildCheck.UnitTests;
 public class BuildExecutionCheckConfigurationEffectiveTests
 {
     [Theory]
-    [InlineData("ruleId", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
-    [InlineData("ruleId2", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
-    [InlineData("ruleId", EvaluationCheckScope.ProjectOnly, BuildExecutionCheckResultSeverity.Error, false)]
+    [InlineData("ruleId", EvaluationCheckScope.ProjectFileOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
+    [InlineData("ruleId2", EvaluationCheckScope.ProjectFileOnly, BuildExecutionCheckResultSeverity.Warning,  true)]
+    [InlineData("ruleId", EvaluationCheckScope.ProjectFileOnly, BuildExecutionCheckResultSeverity.Error, false)]
     public void IsSameConfigurationAsTest(
         string secondRuleId,
         EvaluationCheckScope secondScope,
@@ -23,7 +23,7 @@ public void IsSameConfigurationAsTest(
     {
         BuildExecutionCheckConfigurationEffective configuration1 = new BuildExecutionCheckConfigurationEffective(
                        ruleId: "ruleId",
-                       evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
+                       evaluationCheckScope: EvaluationCheckScope.ProjectFileOnly,
                        severity: BuildExecutionCheckResultSeverity.Warning);
 
         BuildExecutionCheckConfigurationEffective configuration2 = new BuildExecutionCheckConfigurationEffective(
@@ -43,7 +43,7 @@ public void BuildExecutionCheckConfigurationInternal_Constructor_SeverityConfig(
     {
         BuildExecutionCheckConfigurationEffective configuration = new BuildExecutionCheckConfigurationEffective(
                        ruleId: "ruleId",
-                       evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
+                       evaluationCheckScope: EvaluationCheckScope.ProjectFileOnly,
                        severity: severity);
 
         configuration.IsEnabled.ShouldBe(isEnabledExpected);
@@ -56,7 +56,7 @@ public void BuildExecutionCheckConfigurationInternal_Constructor_SeverityConfig_
         {
             new BuildExecutionCheckConfigurationEffective(
                         ruleId: "ruleId",
-                        evaluationCheckScope: EvaluationCheckScope.ProjectOnly,
+                        evaluationCheckScope: EvaluationCheckScope.ProjectFileOnly,
                         severity: BuildExecutionCheckResultSeverity.Default);
         });
     }
diff --git a/src/BuildCheck.UnitTests/BuildExecutionCheckConfiguration_Test.cs b/src/BuildCheck.UnitTests/BuildExecutionCheckConfiguration_Test.cs
index 7ffd844aa95..2d01cdbc54e 100644
--- a/src/BuildCheck.UnitTests/BuildExecutionCheckConfiguration_Test.cs
+++ b/src/BuildCheck.UnitTests/BuildExecutionCheckConfiguration_Test.cs
@@ -75,14 +75,13 @@ public void CreateBuildExecutionCheckConfiguration_SeverityAndEnabledOrder(strin
     }
 
     [Theory]
-    [InlineData("project", EvaluationCheckScope.ProjectOnly)]
-    [InlineData("PROJECT", EvaluationCheckScope.ProjectOnly)]
-    [InlineData("current_imports", EvaluationCheckScope.ProjectWithImportsFromCurrentWorkTree)]
-    [InlineData("CURRENT_IMPORTS", EvaluationCheckScope.ProjectWithImportsFromCurrentWorkTree)]
-    [InlineData("without_sdks", EvaluationCheckScope.ProjectWithImportsWithoutSdks)]
-    [InlineData("WITHOUT_SDKS", EvaluationCheckScope.ProjectWithImportsWithoutSdks)]
-    [InlineData("all", EvaluationCheckScope.ProjectWithAllImports)]
-    [InlineData("ALL", EvaluationCheckScope.ProjectWithAllImports)]
+    [InlineData("project_file", EvaluationCheckScope.ProjectFileOnly)]
+    [InlineData("projectfile", EvaluationCheckScope.ProjectFileOnly)]
+    [InlineData("PROJECT_FILE", EvaluationCheckScope.ProjectFileOnly)]
+    [InlineData("work_tree_imports", EvaluationCheckScope.WorkTreeImports)]
+    [InlineData("WORK_TREE_IMPORTS", EvaluationCheckScope.WorkTreeImports)]
+    [InlineData("all", EvaluationCheckScope.All)]
+    [InlineData("ALL", EvaluationCheckScope.All)]
     public void CreateBuildExecutionCheckConfiguration_EvaluationCheckScope(string parameter, EvaluationCheckScope? expected)
     {
         var config = new Dictionary<string, string>()
