diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index f89e43229c3..c7885268eb0 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -237,16 +237,8 @@ ProjectItemInstance projectReference
                 // a traversal in which EnableDynamicPlatformResolution is turned on
                 if (ConversionUtilities.ValidBooleanTrue(projectReference.Project.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && String.IsNullOrEmpty(projectReference.GetMetadataValue(SetPlatformMetadataName)))
                 {
-
                     var referencedProject = new Project(projectReference.EvaluatedInclude);
-                    var projectReferencePlatformMetadata = referencedProject.GetPropertyValue(PlatformsMetadataName);
-                    var projectReferenceLookupTableMetadata = referencedProject.GetPropertyValue(PlatformLookupTableMetadataName);
-                    var currentProjectPlatformMetadata = projectReference.Project.GetPropertyValue(PlatformMetadataName);
-                    var currentPlatformLookupTableMetadata = projectReference.Project.GetPropertyValue(PlatformLookupTableMetadataName);
-                    var projectPath = projectReference.EvaluatedInclude;
-
-
-                    var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectReferencePlatformMetadata, projectReferenceLookupTableMetadata, currentProjectPlatformMetadata, currentPlatformLookupTableMetadata, projectPath);    
+                    var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(referencedProject.GetPropertyValue(PlatformsMetadataName), referencedProject.GetPropertyValue(PlatformLookupTableMetadataName), projectReference.Project.GetPropertyValue(PlatformMetadataName), projectReference.Project.GetPropertyValue(PlatformLookupTableMetadataName), projectReference.EvaluatedInclude);    
                     projectReference.SetMetadata("SetPlatform", $"Platform={SelectedPlatform}");
                 }
                 // TODO: Mimic AssignProjectConfiguration's behavior for determining the values for these.
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 6028e300cff..3a9632e61f7 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -56,13 +56,9 @@ public override bool Execute()
             for (int i = 0; i < AnnotatedProjects.Length; i++)
             {
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
-                
-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
-
-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable");
                 // Pull platformlookuptable metadata from the referenced project. This allows custom
                 // mappings on a per-ProjectReference basis.
-                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(projectReferencePlatformMetadata, projectReferenceLookupTableMetadata , CurrentProjectPlatform, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, Log);
+                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(AssignedProjectsWithPlatform[i].GetMetadata("Platforms"), AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"), CurrentProjectPlatform, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, Log);
                 
                 AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
                 Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.DisplayChosenPlatform", AssignedProjectsWithPlatform[i].ItemSpec, buildProjectReferenceAs);
