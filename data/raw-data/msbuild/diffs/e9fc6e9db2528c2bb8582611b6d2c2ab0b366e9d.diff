diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 42341719c1d..86e85d3cd51 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -264,6 +264,17 @@ public TransientTestFile ExpectFile(string extension = ".tmp")
             return WithTransientTestState(new TransientTestFile(extension, createFile: false, expectedAsOutput: true));
         }
 
+        /// <summary>
+        ///     Create a temp file name that is expected to exist under specified folder when the test completes.
+        /// </summary>
+        /// <param name="folderPath">Folder path of the file.</param>
+        /// <param name="extension">Extension of the file (defaults to '.tmp')</param>
+        /// <returns></returns>
+        public TransientTestFile ExpectFile(string folderPath, string extension = ".tmp")
+        {
+            return WithTransientTestState(new TransientTestFile(folderPath, extension, createFile: false, expectedAsOutput: true));
+        }
+
         /// <summary>
         ///     Creates a test variant used to add a unique temporary folder during a test. Will be deleted when the test
         ///     completes.
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index 780b68ac658..1c8dffcff37 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -143,23 +143,22 @@ public void FileWithPathAndDirectoryDoesNotExist()
         [Fact]
         public void FileNameNoDirectory()
         {
+            using TestEnvironment env = TestEnvironment.Create();
+            var file = env.ExpectFile(Directory.GetCurrentDirectory(), ".tmp");
             WriteCodeFragment task = new WriteCodeFragment();
             MockEngine engine = new MockEngine(true);
             task.BuildEngine = engine;
             task.Language = "c#";
             task.AssemblyAttributes = new TaskItem[] { new TaskItem("aa") };
 
-            string fileName = "file.tmp";
-            string file = Path.GetFullPath(fileName);
+            string fileName = Path.GetFileName(file.Path);
             task.OutputFile = new TaskItem(fileName);
             bool result = task.Execute();
 
             Assert.True(result);
 
-            Assert.Equal(file, task.OutputFile.ItemSpec);
-            Assert.True(File.Exists(file));
-
-            FileUtilities.DeleteNoThrow(file);
+            Assert.Equal(fileName, task.OutputFile.ItemSpec);
+            Assert.True(File.Exists(file.Path));
         }
 
         /// <summary>
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index eaa58637ae8..7855814e250 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -110,16 +110,12 @@ public override bool Execute()
                 {
                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));
                 }
-                else if (OutputFile != null && OutputDirectory == null && !Path.IsPathRooted(OutputFile.ItemSpec))
-                {
-                    // In case specified OutputFile path is a file name but OutputDirectory is not set, expand it to a fully qualified path based on current directory.
-                    // So that it has the directory given to ensuring directory exists.
-                    OutputFile.ItemSpec = Path.GetFullPath(OutputFile.ItemSpec);
-                }
 
                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));
 
-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));
+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set
+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata("FullPath");
+                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(fullPath));
 
                 File.WriteAllText(OutputFile.ItemSpec, code); // Overwrites file if it already exists (and can be overwritten)
             }
