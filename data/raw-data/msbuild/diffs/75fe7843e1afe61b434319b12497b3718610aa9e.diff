diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index af9437b5cf3..3689868f212 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -881,6 +881,7 @@ public void RoundTripPropertyReassignmentEventArgs()
                 propertyName: "a",
                 previousValue: "b",
                 newValue: "c",
+                location: null,
                 file: "file.cs",
                 line: 10,
                 column: 20,
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index ad4fae9c692..4a2e3f2078e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -141,7 +141,7 @@ private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInsta
                     property.Location.File,
                     property.Location.Line,
                     property.Location.Column,
-                    ResourceUtilities.GetResourceString("PropertyAssignment"))
+                    message: null)
                 { BuildEventContext = LoggingContext.BuildEventContext };
 
                 LoggingContext.LogBuildEvent(args);
@@ -152,10 +152,11 @@ private void LogPropertyInTargetAssignment(ProjectPropertyGroupTaskPropertyInsta
                     property.Name,
                     previousPropertyValue,
                     evaluatedValue,
+                    location: null,
                     property.Location.File,
                     property.Location.Line,
                     property.Location.Column,
-                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
+                    message: null)
                 { BuildEventContext = LoggingContext.BuildEventContext, };
 
                 LoggingContext.LogBuildEvent(args);
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 71def813d93..92e48b19885 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1617,7 +1617,7 @@ private void LogPropertyInTaskAssignment(string propertyName, string propertyVal
                     location.File,
                     location.Line,
                     location.Column,
-                    ResourceUtilities.GetResourceString("PropertyAssignment"))
+                    message: null)
                 { BuildEventContext = _targetLoggingContext.BuildEventContext };
 
                 _targetLoggingContext.LogBuildEvent(args);
@@ -1628,10 +1628,11 @@ private void LogPropertyInTaskAssignment(string propertyName, string propertyVal
                     propertyName,
                     previousPropertyValue,
                     propertyValue,
+                    location: null,
                     location.File,
                     location.Line,
                     location.Column,
-                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
+                    message: null)
                 { BuildEventContext = _targetLoggingContext.BuildEventContext };
 
                 _targetLoggingContext.LogBuildEvent(args);
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index a60e16e07e0..b9dee42bbc5 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -302,7 +302,7 @@ private void TrackPropertyInitialValueSet(P property, PropertySource source, IEl
                 location?.File,
                 location?.Line ?? 0,
                 location?.Column ?? 0,
-                ResourceUtilities.GetResourceString("PropertyAssignment"))
+                message: null)
             { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
             _evaluationLoggingContext.LogBuildEvent(args);
@@ -338,10 +338,11 @@ private void TrackPropertyReassignment(P? predecessor, P property, IElementLocat
                     property.Name,
                     oldValue,
                     newValue,
+                    location: null,
                     location?.File,
                     location?.Line ?? 0,
                     location?.Column ?? 0,
-                    message: ResourceUtilities.GetResourceString("PropertyReassignment"))
+                    message: null)
                 { BuildEventContext = _evaluationLoggingContext.BuildEventContext, };
 
                 _evaluationLoggingContext.LogBuildEvent(args);
@@ -394,11 +395,11 @@ private enum PropertySource
         private static string GetPropertySourceName(PropertySource source) => source switch
         {
             PropertySource.Xml => "XML",
-            PropertySource.BuiltIn => "Built-in",
+            PropertySource.BuiltIn => "BuiltIn",
             PropertySource.Global => "Global",
             PropertySource.Toolset => "Toolset",
-            PropertySource.EnvironmentVariable => "Environment Variable",
-            PropertySource.CommandLine => "Command Line",
+            PropertySource.EnvironmentVariable => "EnvironmentVariable",
+            PropertySource.CommandLine => "CommandLine",
             _ => throw new ArgumentOutOfRangeException(nameof(source), source, null)
         };
     }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 9f970137dbd..81ee91b3a14 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1176,6 +1176,7 @@ private BuildEventArgs ReadPropertyReassignmentEventArgs()
                 propertyName,
                 previousValue,
                 newValue,
+                location,
                 fields.File,
                 fields.LineNumber,
                 fields.ColumnNumber,
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index e6eeb51befd..e601be70919 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -567,7 +567,7 @@ private BinaryLogRecordKind Write(CriticalBuildMessageEventArgs e)
 
         private BinaryLogRecordKind Write(PropertyReassignmentEventArgs e)
         {
-            WriteMessageFields(e, writeMessage: true, writeImportance: true);
+            WriteMessageFields(e, writeMessage: false, writeImportance: true);
             WriteDeduplicatedString(e.PropertyName);
             WriteDeduplicatedString(e.PreviousValue);
             WriteDeduplicatedString(e.NewValue);
@@ -585,7 +585,7 @@ private BinaryLogRecordKind Write(UninitializedPropertyReadEventArgs e)
 
         private BinaryLogRecordKind Write(PropertyInitialValueSetEventArgs e)
         {
-            WriteMessageFields(e, writeImportance: true);
+            WriteMessageFields(e, writeMessage: false, writeImportance: true);
             WriteDeduplicatedString(e.PropertyName);
             WriteDeduplicatedString(e.PropertyValue);
             WriteDeduplicatedString(e.PropertySource);
diff --git a/src/Framework/PropertyInitialValueSetEventArgs.cs b/src/Framework/PropertyInitialValueSetEventArgs.cs
index ca9c20ef8da..fe1e52023b6 100644
--- a/src/Framework/PropertyInitialValueSetEventArgs.cs
+++ b/src/Framework/PropertyInitialValueSetEventArgs.cs
@@ -95,8 +95,13 @@ public override string Message
         {
             get
             {
-                var formattedSource = File != null ? $"{File} ({LineNumber},{ColumnNumber})" : PropertySource;
-                return string.Format(RawMessage, PropertyName, PropertyValue, formattedSource);
+                if (RawMessage == null)
+                {
+                    string formattedLocation = File == null ? PropertySource : $"{File} ({LineNumber},{ColumnNumber})";
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("PropertyAssignment", PropertyName, PropertyValue, formattedLocation);
+                }
+
+                return RawMessage;
             }
         }
 
diff --git a/src/Framework/PropertyReassignmentEventArgs.cs b/src/Framework/PropertyReassignmentEventArgs.cs
index 64d48ecf6a9..d7477ee8caa 100644
--- a/src/Framework/PropertyReassignmentEventArgs.cs
+++ b/src/Framework/PropertyReassignmentEventArgs.cs
@@ -56,6 +56,7 @@ public PropertyReassignmentEventArgs(
         /// <param name="propertyName">The name of the property whose value was reassigned.</param>
         /// <param name="previousValue">The previous value of the reassigned property.</param>
         /// <param name="newValue">The new value of the reassigned property.</param>
+        /// <param name="location">The property location (XML, command line, etc).</param>
         /// <param name="file">The file associated with the event.</param>
         /// <param name="line">The line number (0 if not applicable).</param>
         /// <param name="column">The column number (0 if not applicable).</param>
@@ -67,6 +68,7 @@ public PropertyReassignmentEventArgs(
             string propertyName,
             string previousValue,
             string newValue,
+            string location,
             string file,
             int line,
             int column,
@@ -79,6 +81,7 @@ public PropertyReassignmentEventArgs(
             PropertyName = propertyName;
             PreviousValue = previousValue;
             NewValue = newValue;
+            Location = location;
         }
 
         /// <summary>
@@ -105,8 +108,13 @@ public override string Message
         {
             get
             {
-                string formattedLocation = File != null ? $"{File} ({LineNumber},{ColumnNumber})" : Location;
-                return string.Format(RawMessage, PropertyName, NewValue, PreviousValue, formattedLocation);
+                if (RawMessage == null)
+                {
+                    string formattedLocation = File == null ? Location : $"{File} ({LineNumber},{ColumnNumber})";
+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword("PropertyReassignment", PropertyName, NewValue, PreviousValue, formattedLocation);
+                }
+
+                return RawMessage;
             }
         }
 
