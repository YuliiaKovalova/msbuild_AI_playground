diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index f7482c58fec..4d6392aa7a0 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1324,7 +1324,7 @@ string[] commandLine
 
                     BuildResultCode? result = null;
 
-                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
+                    // IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
                     if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
                     {
                         var commandLineString =
@@ -3222,19 +3222,21 @@ out bool enableProfiler
             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);
 
             // Choose default console logger
-            if(
-                shouldUseFancyLogger &&
-                !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
-                Environment.GetEnvironmentVariable("TERM") != "dumb" // TODO: Check for better ways of figuring out terminals' capabilities
-            )
+            bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
+                Environment.GetEnvironmentVariable("TERM") != "dumb"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities
+            if (!outputSupportsFancyLogger)
             {
-                ProcessFancyLogger(noConsoleLogger, loggers);
+                // Add to deferredbuildmessages
             }
-            else
+            if(shouldUseFancyLogger && outputSupportsFancyLogger )
+            {
+                ProcessFancyLogger(noConsoleLogger, loggers);
+            } else
             {
                 ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
             }
 
+
             ProcessDistributedFileLogger(distributedFileLogger, fileLoggerParameters, distributedLoggerRecords, loggers, cpuCount);
 
             ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
