diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 79f2560c088..8230defe4f0 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -22,11 +22,11 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 # Change Waves & Associated Features
 
 ## Current Rotation of Change Waves
-### 17.8
-- [[RAR] Don't do I/O on SDK-provided references](https://github.com/dotnet/msbuild/pull/8688)
 
 ### 17.8
+- [[RAR] Don't do I/O on SDK-provided references](https://github.com/dotnet/msbuild/pull/8688)
 - [Delete destination file before copy](https://github.com/dotnet/msbuild/pull/8685)
+- [Relay remoted exceptions over to single squashed exception type](https://github.com/dotnet/msbuild/pull/8779)
 
 ### 17.6
 - [Parse invalid property under target](https://github.com/dotnet/msbuild/pull/8190)
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index b1288952956..6c23f2c1044 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -201,6 +201,40 @@ public void TestSerializeDotNetNull()
             Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
         }
 
+        [Fact]
+        public void TestSerializeException()
+        {
+            Exception value = new ArgumentNullException("The argument was null");
+            TranslationHelpers.GetWriteTranslator().TranslateException(ref value);
+
+            Exception deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
+
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+        }
+
+        [Fact]
+        public void TestSerializeException_NestedWithStack()
+        {
+            Exception value = null;
+            try
+            {
+                // Intentionally throw a nested exception with a stack trace.
+                value = value.InnerException;
+            }
+            catch (Exception e)
+            {
+                value = new ArgumentNullException("The argument was null", e);
+            }
+
+            TranslationHelpers.GetWriteTranslator().TranslateException(ref value);
+
+            Exception deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().TranslateException(ref deserializedValue);
+
+            Assert.True(TranslationHelpers.CompareExceptions(value, deserializedValue));
+        }
+
         /// <summary>
         /// Tests serializing an object with a default constructor.
         /// </summary>
diff --git a/src/MSBuildTaskHost/ChangeWavesStub.cs b/src/MSBuildTaskHost/ChangeWavesStub.cs
new file mode 100644
index 00000000000..4908cb4dd90
--- /dev/null
+++ b/src/MSBuildTaskHost/ChangeWavesStub.cs
@@ -0,0 +1,18 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Shared
+{
+    /// <summary>
+    /// Stub implementation of ChangeWaves, that always returns true for AreFeaturesEnabled.
+    /// It is used to stub out the real ChangeWaves class, which is not available in the TaskHost.
+    /// </summary>
+    internal static class ChangeWaves
+    {
+        internal static readonly Version Wave17_8 = new Version(17, 8);
+
+        internal static bool AreFeaturesEnabled(Version wave) => true;
+    }
+}
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 1fc87a6a147..fe81c04952f 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -170,6 +170,7 @@
     </Compile>
     <Compile Include="AssemblyInfo.cs" />
     <Compile Include="AssemblyResources.cs" />
+    <Compile Include="ChangeWavesStub.cs" />
     <Compile Include="Concurrent\ConcurrentDictionary.cs" />
     <Compile Include="Concurrent\ConcurrentQueue.cs" />
     <Compile Include="Immutable\ImmutableDictionary.cs" />
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index cb1d36e8f8b..2c4f2f20b3d 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -477,6 +477,12 @@ public void TranslateDotNet<T>(ref T value)
 
             public void TranslateException(ref Exception value)
             {
+                if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8))
+                {
+                    TranslateDotNet<Exception>(ref value);
+                    return;
+                }
+
                 if (!TranslateNullable(value))
                 {
                     return;
@@ -1105,6 +1111,12 @@ public void TranslateDotNet<T>(ref T value)
 
             public void TranslateException(ref Exception value)
             {
+                if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8))
+                {
+                    TranslateDotNet<Exception>(ref value);
+                    return;
+                }
+
                 if (!TranslateNullable(value))
                 {
                     return;
diff --git a/src/Shared/BuildTransferredException.cs b/src/Shared/BuildTransferredException.cs
index cbd88c23b2f..92b7c7142f4 100644
--- a/src/Shared/BuildTransferredException.cs
+++ b/src/Shared/BuildTransferredException.cs
@@ -2,28 +2,29 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
 using System.IO;
 
 namespace Microsoft.Build.BackEnd
 {
     internal sealed class BuildTransferredException : Exception
     {
-        private readonly string? _typeName;
+        private readonly string _originalTypeName;
 
         public BuildTransferredException(
-            string? message,
+            string message,
             Exception? inner,
-            string? typeName,
-            string deserializedStackTrace)
+            string originalTypeName,
+            string? deserializedStackTrace)
             : base(message, inner)
         {
-            _typeName = typeName;
+            _originalTypeName = originalTypeName;
             StackTrace = deserializedStackTrace;
         }
 
         public override string? StackTrace { get; }
 
-        public override string ToString() => $"{_typeName ?? "Unknown"}->{base.ToString()}";
+        public override string ToString() => $"{_originalTypeName}->{base.ToString()}";
 
         internal static Exception ReadExceptionFromTranslator(ITranslator translator)
         {
@@ -34,14 +35,14 @@ internal static Exception ReadExceptionFromTranslator(ITranslator translator)
                 innerException = ReadExceptionFromTranslator(translator);
             }
 
-            string? message = ReadOptionalString(reader);
-            string? typeName = ReadOptionalString(reader);
-            string deserializedStackTrace = reader.ReadString();
+            string message = reader.ReadString();
+            string typeName = reader.ReadString();
+            string? deserializedStackTrace = ReadOptionalString(reader);
             BuildTransferredException exception = new(message, innerException, typeName, deserializedStackTrace)
             {
                 Source = ReadOptionalString(reader),
                 HelpLink = ReadOptionalString(reader),
-                // HResult = reader.ReadInt32(),
+                HResult = ReadOptionalInt32(reader),
             };
 
             return exception;
@@ -55,13 +56,21 @@ internal static void WriteExceptionToTranslator(ITranslator translator, Exceptio
             {
                 WriteExceptionToTranslator(translator, exception.InnerException);
             }
-            WriteOptionalString(writer, exception.Message);
-            WriteOptionalString(writer, exception.GetType().FullName);
-            writer.Write(exception.StackTrace ?? string.Empty);
+            writer.Write(exception.Message);
+            writer.Write(exception.GetType().FullName ?? exception.GetType().ToString());
+            WriteOptionalString(writer, exception.StackTrace);
             WriteOptionalString(writer, exception.Source);
             WriteOptionalString(writer, exception.HelpLink);
             // HResult is completely protected up till net4.5
-            // writer.Write(System.Runtime.InteropServices.Marshal.GetHRForException(exception));
+#if NET || NET45_OR_GREATER
+            writer.Write((byte)1);
+            writer.Write(exception.HResult);
+#else
+            writer.Write((byte)0);
+#endif
+
+            Debug.Assert((exception.Data?.Count ?? 0) == 0,
+                "Exception Data is not supported in BuildTransferredException");
         }
 
         private static string? ReadOptionalString(BinaryReader reader)
@@ -81,5 +90,10 @@ private static void WriteOptionalString(BinaryWriter writer, string? value)
                 writer.Write(value);
             }
         }
+
+        private static int ReadOptionalInt32(BinaryReader reader)
+        {
+            return reader.ReadByte() == 0 ? 0 : reader.ReadInt32();
+        }
     }
 }
