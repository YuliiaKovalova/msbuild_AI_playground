diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index c1feb9277f4..9945d0d4437 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -327,20 +327,20 @@ public async Task<bool> ExecuteInternal()
                 }
 
                 // Try to get the behavior from metadata if it is undefined.
-                var skipNonexistPropjects = _skipNonexistentProjects;
+                var skipNonexistProjects = _skipNonexistentProjects;
                 if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)
                 {
                     if (TryParseSkipNonexistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonexistentProjectsBehavior behavior))
                     {
-                        skipNonexistPropjects = behavior;
+                        skipNonexistProjects = behavior;
                     }
                     else
                     {
-                        skipNonexistPropjects = SkipNonexistentProjectsBehavior.Error;
+                        skipNonexistProjects = SkipNonexistentProjectsBehavior.Error;
                     }
                 }
 
-                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistPropjects == SkipNonexistentProjectsBehavior.Build))
+                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistProjects == SkipNonexistentProjectsBehavior.Build))
                 {
                     if (FileUtilities.IsVCProjFilename(projectPath))
                     {
@@ -381,13 +381,13 @@ public async Task<bool> ExecuteInternal()
                 }
                 else
                 {
-                    if (skipNonexistPropjects == SkipNonexistentProjectsBehavior.Skip)
+                    if (skipNonexistProjects == SkipNonexistentProjectsBehavior.Skip)
                     {
                         Log.LogMessageFromResources(MessageImportance.High, "MSBuild.ProjectFileNotFoundMessage", project.ItemSpec);
                     }
                     else
                     {
-                        ErrorUtilities.VerifyThrow(skipNonexistPropjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistPropjects);
+                        ErrorUtilities.VerifyThrow(skipNonexistProjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistProjects);
                         Log.LogErrorWithCodeFromResources("MSBuild.ProjectFileNotFound", project.ItemSpec);
                         success = false;
                     }
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 6cfa66bba0d..221c938e941 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -1387,6 +1387,10 @@ private static void AddProjectBuildTask(ProjectInstance traversalProject, Projec
             {
                 task.SetParameter("Properties", GetPropertiesAttributeForDirectMSBuildTask(projectConfiguration));
             }
+            else
+            {
+                task.SetParameter("Properties", SolutionProperties);
+            }
 
             if (!string.IsNullOrEmpty(outputItem))
             {
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index 1ffd94c2cf8..b0ae26d1680 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -293,20 +293,20 @@ public override bool Execute()
                 }
 
                 // Try to get the behavior from metadata if it is undefined.
-                var skipNonexistPropjects = _skipNonexistentProjects;
+                var skipNonexistProjects = _skipNonexistentProjects;
                 if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)
                 {
                     if (TryParseSkipNonexistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonexistentProjectsBehavior behavior))
                     {
-                        skipNonexistPropjects = behavior;
+                        skipNonexistProjects = behavior;
                     }
                     else
                     {
-                        skipNonexistPropjects = SkipNonexistentProjectsBehavior.Error;
+                        skipNonexistProjects = SkipNonexistentProjectsBehavior.Error;
                     }
                 }
 
-                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistPropjects == SkipNonexistentProjectsBehavior.Build))
+                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistProjects == SkipNonexistentProjectsBehavior.Build))
                 {
                     if (FileUtilities.IsVCProjFilename(projectPath))
                     {
@@ -347,13 +347,13 @@ public override bool Execute()
                 }
                 else
                 {
-                    if (skipNonexistPropjects == SkipNonexistentProjectsBehavior.Skip)
+                    if (skipNonexistProjects == SkipNonexistentProjectsBehavior.Skip)
                     {
                         Log.LogMessageFromResources(MessageImportance.High, "MSBuild.ProjectFileNotFoundMessage", project.ItemSpec);
                     }
                     else
                     {
-                        ErrorUtilities.VerifyThrow(skipNonexistPropjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistPropjects);
+                        ErrorUtilities.VerifyThrow(skipNonexistProjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistProjects);
                         Log.LogErrorWithCodeFromResources("MSBuild.ProjectFileNotFound", project.ItemSpec);
                         success = false;
                     }
