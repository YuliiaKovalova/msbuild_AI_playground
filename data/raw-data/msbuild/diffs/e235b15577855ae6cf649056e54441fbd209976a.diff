diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 94a37c525f4..7dcb253fd40 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -48,10 +48,12 @@ public enum SharingPolicy
         private IDirectoryCacheFactory _directoryCacheFactory;
         private ConditionalWeakTable<Project, IDirectoryCache> _directoryCachesPerProject;
 
+        private IDirectoryCache _defaultDirectoryCache;
+
         /// <summary>
         /// Key to file entry list. Example usages: cache glob expansion and intermediary directory expansions during glob expansion.
         /// </summary>
-        private ConcurrentDictionary<string, IReadOnlyList<string>> FileEntryExpansionCache { get; }
+        internal ConcurrentDictionary<string, IReadOnlyList<string>> FileEntryExpansionCache { get; }
 
         private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, IDirectoryCacheFactory directoryCacheFactory)
         {
@@ -157,12 +159,18 @@ internal IDirectoryCache GetDirectoryCacheForProject(Project project)
             IDirectoryCache directoryCache = _directoryCachesPerProject?.GetValue(
                 project,
                 project => _directoryCacheFactory.GetDirectoryCacheForProject(project));
+
+            // If we don't have a non-null directory cache factory or it returned null, lazily create a wrapper over IFileSystem.
             if (directoryCache == null)
             {
-                return directoryCache;
+                directoryCache = Volatile.Read(ref _defaultDirectoryCache);
+                if (directoryCache == null)
+                {
+                    directoryCache = new DirectoryCacheOverFileSystem(FileSystem);
+                    Volatile.Write(ref _defaultDirectoryCache, directoryCache);
+                }
             }
-            // TODO
-            return null;
+            return directoryCache;
         }
     }
 }
diff --git a/src/Build/FileSystem/DirectoryCacheOverFileSystem.cs b/src/Build/FileSystem/DirectoryCacheOverFileSystem.cs
new file mode 100644
index 00000000000..c6556409572
--- /dev/null
+++ b/src/Build/FileSystem/DirectoryCacheOverFileSystem.cs
@@ -0,0 +1,58 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.FileSystem
+{
+    /// <summary>
+    /// Implements <see cref="IDirectoryCache"/> on top of <see cref="IFileSystem"/>.
+    /// </summary>
+    internal sealed class DirectoryCacheOverFileSystem : IDirectoryCache
+    {
+        private IFileSystem _fileSystem;
+
+        public DirectoryCacheOverFileSystem(IFileSystem fileSystem)
+        {
+            _fileSystem = fileSystem;
+        }
+
+        public bool FileExists(string path)
+        {
+            return _fileSystem.FileExists(path);
+        }
+
+        public bool DirectoryExists(string path)
+        {
+            return _fileSystem.DirectoryExists(path);
+        }
+
+        public IEnumerable<TResult> EnumerateDirectories<TResult>(string path, FindPredicate predicate, FindTransform<TResult> transform)
+        {
+            return EnumerateAndTransformFullPaths(_fileSystem.EnumerateDirectories(path), predicate, transform);
+        }
+
+        public IEnumerable<TResult> EnumerateFiles<TResult>(string path, FindPredicate predicate, FindTransform<TResult> transform)
+        {
+            return EnumerateAndTransformFullPaths(_fileSystem.EnumerateFiles(path), predicate, transform);
+        }
+
+        private IEnumerable<TResult> EnumerateAndTransformFullPaths<TResult>(IEnumerable<string> fullPaths, FindPredicate predicate, FindTransform<TResult> transform)
+        {
+            foreach (string fullPath in fullPaths)
+            {
+                // TODO: Call Path.GetFileName() from Microsoft.IO.
+                int lastSlashPos = fullPath.LastIndexOfAny(FileUtilities.Slashes);
+                ReadOnlySpan<char> fileName = fullPath.AsSpan(lastSlashPos + 1, fullPath.Length - lastSlashPos - 1);
+
+                if (predicate(ref fileName))
+                {
+                    yield return transform(ref fileName);
+                }
+            }
+        }
+    }
+}
