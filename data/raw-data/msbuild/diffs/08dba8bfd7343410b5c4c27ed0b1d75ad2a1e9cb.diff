diff --git a/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs b/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
index 77232ca87cf..351680eb68e 100644
--- a/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs
@@ -49,6 +49,8 @@ public static IEnumerable<object[]> CacheData
                 var buildResult2 = new BuildResult(request2);
                 var buildResult3 = new BuildResult(request3);
 
+                buildResult1.DefaultTargets = new List<string> { "target1" };
+
                 buildResult1.AddResultsForTarget(
                     "target1",
                     new TargetResult(
@@ -141,5 +143,33 @@ public void OnlySerializeResultsForSpecifiedTargets(object configCache, object r
                 File.Delete(cacheFile);
             }
         }
+
+        [Theory]
+        [MemberData(nameof(CacheData))]
+        public void OnlySerializeResultsForDefaultTargets(object configCache, object resultsCache)
+        {
+            string cacheFile = null;
+            try
+            {
+                cacheFile = FileUtilities.GetTemporaryFile("MSBuildResultsCache");
+                Assert.Null(CacheSerialization.SerializeCaches(
+                    (ConfigCache)configCache,
+                    (ResultsCache)resultsCache,
+                    cacheFile,
+                    ProjectIsolationMode.MessageUponIsolationViolation,
+                    new HashSet<string>() { }));
+
+                var result = CacheSerialization.DeserializeCaches(cacheFile);
+                Assert.True(result.ConfigCache.HasConfiguration(1));
+                BuildResult buildResult = result.ResultsCache.GetResultsForConfiguration(1);
+                Assert.True(buildResult.HasResultsForTarget("target1"));
+                Assert.False(buildResult.HasResultsForTarget("target2"));
+                Assert.False(buildResult.HasResultsForTarget("target3"));
+            }
+            finally
+            {
+                File.Delete(cacheFile);
+            }
+        }
     }
 }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index f1a16afc526..dcabf73b758 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -481,11 +481,18 @@ public void AddResultsForTarget(string target, TargetResult result)
         }
 
         /// <summary>
-        /// Keep the results for specific targets only.
+        /// Keep the results only for <paramref name="targets"/>.
+        /// If <paramref name="targets"/> is empty, keep the results only for
+        /// <see cref="DefaultTargets"/>.
         /// </summary>
         /// <param name="targets">The targets whose results should be kept.</param>
-        public void KeepResultsForSpecificTargets(HashSet<string> targets)
+        internal void KeepResultsForSpecificTargets(ICollection<string> targets)
         {
+            if (targets.Count == 0)
+            {
+                targets = _defaultTargets;
+            }
+
             foreach (string target in _resultsByTarget.Keys)
             {
                 if (!targets.Contains(target))
