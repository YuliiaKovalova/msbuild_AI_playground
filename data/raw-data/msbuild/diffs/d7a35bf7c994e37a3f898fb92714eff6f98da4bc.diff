diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 7868a07761c..8c7ab120ec4 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -4919,6 +4919,57 @@ private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<Mo
             }
         }
 
+        /// <summary>
+        /// Log when a property is being assigned a new value.
+        /// </summary>
+        [Fact]
+        public void VerifyLogPropertyReassignment()
+        {
+            string testtargets = ObjectModelHelpers.CleanupFileContents(@"
+                                <Project xmlns='msbuildnamespace'>
+                                     <PropertyGroup>
+                                         <Prop>OldValue</Prop>
+                                         <Prop>NewValue</Prop>
+                                     </PropertyGroup>
+                                  <Target Name=""Test""/>
+                                </Project>");
+
+            string tempPath = Path.GetTempPath();
+            string targetDirectory = Path.Combine(tempPath, "LogPropertyAssignments");
+            string testTargetPath = Path.Combine(targetDirectory, "test.proj");
+
+            try
+            {
+                Directory.CreateDirectory(targetDirectory);
+                File.WriteAllText(testTargetPath, testtargets);
+
+                MockLogger logger = new()
+                {
+                    Verbosity = LoggerVerbosity.Diagnostic,
+                };
+                ProjectCollection pc = new();
+                pc.RegisterLogger(logger);
+                Project project = pc.LoadProject(testTargetPath);
+
+                bool result = project.Build();
+                result.ShouldBeTrue();
+                logger.BuildMessageEvents
+                      .OfType<PropertyReassignmentEventArgs>()
+                      .ShouldContain(r => r.PropertyName == "Prop"
+                      && r.PreviousValue == "OldValue"
+                      && r.NewValue == "NewValue"
+                      && r.Message.StartsWith("Property reassignment: $(Prop)=\"NewValue\" (previous value: \"OldValue\")"));
+                logger.BuildMessageEvents.ShouldBeOfTypes(new[] { typeof(PropertyReassignmentEventArgs) });
+            }
+            finally
+            {
+                if (Directory.Exists(targetDirectory))
+                {
+                    FileUtilities.DeleteWithoutTrailingBackslash(targetDirectory, true /* recursive delete */);
+                }
+            }
+        }
+
 #if FEATURE_HTTP_LISTENER
         /// <summary>
         /// HTTP server code running on a separate thread that expects a connection request
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 3609af082d5..02f8174b8b1 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1348,13 +1348,17 @@ private void LogPropertyReassignment(P predecessor, P property, string location)
 
             if (newValue != oldValue)
             {
-                _evaluationLoggingContext.LogComment(
-                    MessageImportance.Low,
-                    "PropertyReassignment",
+                var args = new PropertyReassignmentEventArgs(
                     property.Name,
-                    newValue,
                     oldValue,
-                    location);
+                    newValue,
+                    location,
+                    message: null)
+                {
+                    BuildEventContext = _evaluationLoggingContext.BuildEventContext,
+                };
+
+                _evaluationLoggingContext.LogBuildEvent(args);
             }
         }
 
