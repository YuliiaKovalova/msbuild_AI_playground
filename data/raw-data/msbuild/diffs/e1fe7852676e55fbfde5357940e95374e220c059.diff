diff --git a/src/Tasks/BuildUri.cs b/src/Tasks/BuildUri.cs
new file mode 100644
index 00000000000..ff2dbfac172
--- /dev/null
+++ b/src/Tasks/BuildUri.cs
@@ -0,0 +1,146 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+
+namespace Microsoft.Build.Tasks
+{
+    public sealed class BuildUri : TaskExtension
+    {
+        public ITaskItem[] InputUri { get; set; } = Array.Empty<ITaskItem>();
+
+        /// <summary>
+        /// Gets or sets the scheme name of the URI.
+        /// </summary>
+        public string UriScheme { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets the user name associated with the user that accesses the URI.
+        /// </summary>
+        public string UriUserName { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets the password associated with the user that accesses the URI.
+        /// </summary>
+        public string UriPassword { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets the Domain Name System (DNS) host name or IP address of a server.
+        /// </summary>
+        public string UriHost { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets the port number of the URI.
+        /// </summary>
+        public int UriPort { get; set; } = UseDefaultPortForScheme;
+
+        /// <summary>
+        /// Gets or sets the path to the resource referenced by the URI.
+        /// </summary>
+        public string UriPath { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets any query information included in the URI.
+        /// </summary>
+        public string UriQuery { get; set; } = string.Empty;
+
+        /// <summary>
+        /// Gets or sets the fragment portion of the URI.
+        /// </summary>
+        public string UriFragment { get; set; } = string.Empty;
+
+        [Output]
+        public ITaskItem[] OutputUri { get; private set; } = Array.Empty<ITaskItem>();
+
+        public override bool Execute()
+        {
+            if (InputUri.Length == 0)
+            {
+                // For an empty set of input uris, create a single item from the provided parameters.
+                OutputUri = new ITaskItem[] { CreateUriTaskItem(new TaskItem()) };
+            }
+            else
+            {
+                OutputUri = new ITaskItem[InputUri.Length];
+                for (int idx = 0; idx < InputUri.Length; ++idx)
+                {
+                    OutputUri[idx] = CreateUriTaskItem(InputUri[idx]);
+                }
+            }
+            return true;
+        }
+
+        private ITaskItem CreateUriTaskItem(ITaskItem item)
+        {
+            // Create a UriBuilder.
+            // UriBuilder ctor can throw ArgumentNullException and UriFormatException.
+            var builder = string.IsNullOrEmpty(item.ItemSpec) ? new UriBuilder() : new UriBuilder(item.ItemSpec);
+            // Scheme
+            if (!string.IsNullOrEmpty(UriScheme))
+            {
+                // The Scheme property setter throws an ArgumentException for an invalid scheme.
+                builder.Scheme = UriScheme;
+                // If a scheme has been provided and a port has not, use the default port for the scheme.
+                if (UriPort == UseDefaultPortForScheme)
+                {
+                    builder.Port = UseDefaultPortForScheme;
+                }
+            }
+            // UserName
+            if (!string.IsNullOrEmpty(UriUserName))
+            {
+                builder.UserName = UriUserName;
+            }
+            // Password
+            if (!string.IsNullOrEmpty(UriPassword))
+            {
+                builder.Password = UriPassword;
+            }
+            // Host
+            if (!string.IsNullOrEmpty(UriHost))
+            {
+                builder.Host = UriHost;
+            }
+            // Port
+            // If a scheme was provided and a port was not, then UriPort and builder.Port will both be -1.
+            if (UriPort != builder.Port)
+            {
+                // The Port property setter throws an ArgumentOutOfRangeException for a port number less than -1 or greater than 65,535.
+                builder.Port = UriPort;
+            }
+            // Path
+            if (!string.IsNullOrEmpty(UriPath))
+            {
+                builder.Path = UriPath;
+            }
+            // Query
+            if (!string.IsNullOrEmpty(UriQuery))
+            {
+                builder.Query = UriQuery;
+            }
+            // Fragment
+            if (!string.IsNullOrEmpty(UriFragment))
+            {
+                builder.Fragment = UriFragment;
+            }
+
+            // Create a TaskItem from the UriBuilder and set custom metadata.
+            var uri = new TaskItem(item) { ItemSpec = builder.Uri.AbsoluteUri };
+            uri.SetMetadata("UriScheme", builder.Scheme);
+            uri.SetMetadata("UriUserName", builder.UserName);
+            uri.SetMetadata("UriPassword", builder.Password);
+            uri.SetMetadata("UriHost", builder.Host);
+            uri.SetMetadata("UriHostNameType", Uri.CheckHostName(builder.Host).ToString());
+            uri.SetMetadata("UriPort", builder.Port.ToString());
+            uri.SetMetadata("UriPath", builder.Path);
+            uri.SetMetadata("UriQuery", builder.Query);
+            uri.SetMetadata("UriFragment", builder.Fragment);
+
+            return uri;
+        }
+
+        private const int UseDefaultPortForScheme = -1;
+    }
+}
\ No newline at end of file
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 29e5289bca5..a3cbef63f2d 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -535,6 +535,7 @@
     <Compile Include="SystemState.cs" />
     <Compile Include="DependencyFile.cs" />
     <Compile Include="ZipDirectory.cs" />
+    <Compile Include="BuildUri.cs" />
   </ItemGroup>
   <ItemGroup Condition="$(TargetFrameworkIdentifier) == '.NETFramework'">
     <Compile Include="Al.cs">
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index 050e1b7efa4..0b3b8155e01 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -13,6 +13,7 @@
     <UsingTask TaskName="Microsoft.Build.Tasks.AssignLinkMetadata"                    AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
     <UsingTask TaskName="Microsoft.Build.Tasks.AssignProjectConfiguration"            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
     <UsingTask TaskName="Microsoft.Build.Tasks.AssignTargetPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    <UsingTask TaskName="Microsoft.Build.Tasks.BuildUri"                              AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
     <UsingTask TaskName="Microsoft.Build.Tasks.CallTarget"                            AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
     <UsingTask TaskName="Microsoft.Build.Tasks.CombinePath"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
     <UsingTask TaskName="Microsoft.Build.Tasks.CombineTargetFrameworkInfoProperties"  AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
diff --git a/src/Tasks/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Tasks/PublicAPI/net/PublicAPI.Unshipped.txt
index 78e394ce7bc..59ce5951a70 100644
--- a/src/Tasks/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Tasks/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,3 +1,25 @@
+Microsoft.Build.Tasks.BuildUri
+Microsoft.Build.Tasks.BuildUri.BuildUri() -> void
+Microsoft.Build.Tasks.BuildUri.InputUri.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.BuildUri.InputUri.set -> void
+Microsoft.Build.Tasks.BuildUri.OutputUri.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.BuildUri.UriFragment.get -> string
+Microsoft.Build.Tasks.BuildUri.UriFragment.set -> void
+Microsoft.Build.Tasks.BuildUri.UriHost.get -> string
+Microsoft.Build.Tasks.BuildUri.UriHost.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPassword.get -> string
+Microsoft.Build.Tasks.BuildUri.UriPassword.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPath.get -> string
+Microsoft.Build.Tasks.BuildUri.UriPath.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPort.get -> int
+Microsoft.Build.Tasks.BuildUri.UriPort.set -> void
+Microsoft.Build.Tasks.BuildUri.UriQuery.get -> string
+Microsoft.Build.Tasks.BuildUri.UriQuery.set -> void
+Microsoft.Build.Tasks.BuildUri.UriScheme.get -> string
+Microsoft.Build.Tasks.BuildUri.UriScheme.set -> void
+Microsoft.Build.Tasks.BuildUri.UriUserName.get -> string
+Microsoft.Build.Tasks.BuildUri.UriUserName.set -> void
 Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
 Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
+override Microsoft.Build.Tasks.BuildUri.Execute() -> bool
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 78e394ce7bc..59ce5951a70 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,3 +1,25 @@
+Microsoft.Build.Tasks.BuildUri
+Microsoft.Build.Tasks.BuildUri.BuildUri() -> void
+Microsoft.Build.Tasks.BuildUri.InputUri.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.BuildUri.InputUri.set -> void
+Microsoft.Build.Tasks.BuildUri.OutputUri.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.BuildUri.UriFragment.get -> string
+Microsoft.Build.Tasks.BuildUri.UriFragment.set -> void
+Microsoft.Build.Tasks.BuildUri.UriHost.get -> string
+Microsoft.Build.Tasks.BuildUri.UriHost.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPassword.get -> string
+Microsoft.Build.Tasks.BuildUri.UriPassword.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPath.get -> string
+Microsoft.Build.Tasks.BuildUri.UriPath.set -> void
+Microsoft.Build.Tasks.BuildUri.UriPort.get -> int
+Microsoft.Build.Tasks.BuildUri.UriPort.set -> void
+Microsoft.Build.Tasks.BuildUri.UriQuery.get -> string
+Microsoft.Build.Tasks.BuildUri.UriQuery.set -> void
+Microsoft.Build.Tasks.BuildUri.UriScheme.get -> string
+Microsoft.Build.Tasks.BuildUri.UriScheme.set -> void
+Microsoft.Build.Tasks.BuildUri.UriUserName.get -> string
+Microsoft.Build.Tasks.BuildUri.UriUserName.set -> void
 Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.get -> bool
 Microsoft.Build.Tasks.SignFile.DisallowMansignTimestampFallback.set -> void
+override Microsoft.Build.Tasks.BuildUri.Execute() -> bool
 static Microsoft.Build.Tasks.Deployment.ManifestUtilities.SecurityUtilities.SignFile(string certThumbprint, System.Uri timestampUrl, string path, string targetFrameworkVersion, string targetFrameworkIdentifier, bool disallowMansignTimestampFallback) -> void
