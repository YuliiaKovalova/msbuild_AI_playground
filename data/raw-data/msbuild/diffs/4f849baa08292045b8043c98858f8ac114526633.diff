diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
new file mode 100644
index 00000000000..b74ef4730a2
--- /dev/null
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -0,0 +1,52 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Text;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+#nullable disable
+
+namespace Microsoft.Build.Logging.SimpleErrorLogger
+{
+    public class SimpleErrorLogger : INodeLogger
+    {
+        public StringBuilder errorList;
+
+        public SimpleErrorLogger()
+        {
+            errorList = new StringBuilder();
+        }
+
+        public LoggerVerbosity Verbosity
+        {
+            get => LoggerVerbosity.Minimal;
+            set { }
+        }
+
+        public string Parameters
+        {
+            get => string.Empty;
+            set { }
+        }
+
+        public void Initialize(IEventSource eventSource, int nodeCount)
+        {
+            eventSource.ErrorRaised += HandleErrorEvent;
+        }
+
+        private void HandleErrorEvent(object sender, BuildErrorEventArgs e)
+        {
+            errorList.AppendLine(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));
+        }
+
+        public void Initialize(IEventSource eventSource)
+        {
+            Initialize(eventSource, 1);
+        }
+
+        public void Shutdown()
+        {
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 6e6725c439d..2e786751cce 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -625,6 +625,7 @@
     <Compile Include="Logging\ParallelLogger\ParallelConsoleLogger.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="Logging\SimpleErrorLogger.cs" />
     <Compile Include="Logging\ParallelLogger\ConsoleOutputAligner.cs" />
     <Compile Include="Logging\FileLogger.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 75e817b7ab5..c549e9044ae 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -17,28 +17,27 @@
 using System.Text;
 using System.Text.RegularExpressions;
 using System.Threading;
-
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Graph;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Shared.FileSystem;
-
-using FileLogger = Microsoft.Build.Logging.FileLogger;
+using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 using ConsoleLogger = Microsoft.Build.Logging.ConsoleLogger;
-using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
+using FileLogger = Microsoft.Build.Logging.FileLogger;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
-using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 using LiveLogger = Microsoft.Build.Logging.LiveLogger.LiveLogger;
-using Microsoft.Build.Shared.Debugging;
-using Microsoft.Build.Experimental;
-using Microsoft.Build.Framework.Telemetry;
-using Microsoft.Build.Internal;
+using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
+using SimpleErrorLogger = Microsoft.Build.Logging.SimpleErrorLogger.SimpleErrorLogger;
 
 #nullable disable
 
@@ -880,7 +879,8 @@ public static ExitType Execute(
                         if (builtProject is null)
                         {
                             // Build failed; do not proceed
-                            Console.Error.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildFailedWithPropertiesItemsOrTargetResultsRequested", "insertErrorMessageHere"));
+                            string errorMessage = loggers.Length == 1 ? (loggers[0] as SimpleErrorLogger).errorList.ToString() : "internal error";
+                            Console.Error.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("BuildFailedWithPropertiesItemsOrTargetResultsRequested", errorMessage));
                         }
                         // Special case if the user requests exactly one property: skip the json formatting
                         else if (getProperty.Length == 1 && getItem.Length == 0 && getTargetResult.Length == 0)
@@ -2554,7 +2554,18 @@ internal static bool ProcessCommandLineSwitches(
                     // figure out which loggers are going to listen to build events
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
-                    loggers = ProcessLoggingSwitches(
+                    if (getProperty.Length + getItem.Length + getTargetResult.Length > 0)
+                    {
+                        loggers = new ILogger[] { new SimpleErrorLogger() };
+                        distributedLoggerRecords = new List<DistributedLoggerRecord>();
+                        verbosity = LoggerVerbosity.Quiet;
+                        originalVerbosity = LoggerVerbosity.Quiet;
+                        profilerLogger = null;
+                        enableProfiler = false;
+                    }
+                    else
+                    {
+                        loggers = ProcessLoggingSwitches(
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Logger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.DistributedLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Verbosity],
@@ -2573,6 +2584,7 @@ internal static bool ProcessCommandLineSwitches(
                         cpuCount,
                         out profilerLogger,
                         out enableProfiler);
+                    }
 
                     // We're finished with defining individual loggers' verbosity at this point, so we don't need to worry about messing them up.
                     if (Traits.Instance.DebugEngine)
