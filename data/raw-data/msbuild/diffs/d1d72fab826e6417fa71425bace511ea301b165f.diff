diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index dcf1f45727d..55a6d75f734 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -40,6 +40,7 @@ public void ConstructorWithNullName()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -75,6 +76,7 @@ public void ConstructorWithEmptyName()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -110,6 +112,7 @@ public void ConstructorWithNullLocation()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -147,6 +150,7 @@ public void ConstructorWithEmptyLocation()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -182,6 +186,7 @@ public void ConstructorWithEmptyLocation()
         public void TestValidConstructors()
         {
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -208,6 +213,7 @@ public void TestValidConstructors()
                 warningsAsMessages: null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -235,6 +241,7 @@ public void TestValidConstructors()
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             TaskHostConfiguration config3 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -267,6 +274,7 @@ public void TestValidConstructors()
             parameters2.Add("ItemArray", new ITaskItem[] { new TaskItem("DEF"), new TaskItem("GHI"), new TaskItem("JKL") });
 
             TaskHostConfiguration config4 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -299,6 +307,7 @@ public void TestValidConstructors()
             WarningsAsErrors.Add("MSB1237");
 
             TaskHostConfiguration config5 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -338,6 +347,7 @@ public void TestTranslationWithNullDictionary()
             };
 
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -389,6 +399,7 @@ public void TestTranslationWithAppDomainSetup(byte[] configBytes)
             AppDomainSetup setup = new AppDomainSetup();
 
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -435,6 +446,7 @@ public void TestTranslationWithAppDomainSetup(byte[] configBytes)
         public void TestTranslationWithEmptyDictionary()
         {
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -486,6 +498,7 @@ public void TestTranslationWithValueTypesInDictionary()
             parameters.Add("Text", "Foo");
             parameters.Add("BoolValue", false);
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -535,6 +548,7 @@ public void TestTranslationWithITaskItemInDictionary()
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             parameters.Add("TaskItemValue", new TaskItem("Foo"));
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -583,6 +597,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             parameters.Add("TaskItemArrayValue", new ITaskItem[] { new TaskItem("Foo"), new TaskItem("Baz") });
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -638,6 +653,7 @@ public void TestTranslationWithWarningsAsErrors()
             WarningsAsErrors.Add("MSB1236");
             WarningsAsErrors.Add("MSB1237");
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -688,6 +704,7 @@ public void TestTranslationWithWarningsAsMessages()
             WarningsAsMessages.Add("MSB1236");
             WarningsAsMessages.Add("MSB1237");
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 83df9cdc435..2538329b063 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -104,8 +104,9 @@ internal class TaskHostConfiguration : INodePacket
 
 #if FEATURE_APPDOMAIN
         /// <summary>
-        /// Constructor
+        /// Constructor.
         /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
         /// <param name="nodeId">The ID of the node being configured.</param>
         /// <param name="startupDirectory">The startup directory for the task being executed.</param>
         /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
@@ -126,8 +127,9 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #else
         /// <summary>
-        /// Constructor
+        /// Constructor.
         /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
         /// <param name="nodeId">The ID of the node being configured.</param>
         /// <param name="startupDirectory">The startup directory for the task being executed.</param>
         /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
@@ -147,6 +149,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration(
+                string runtime,
                 int nodeId,
                 string startupDirectory,
                 IDictionary<string, string> buildProcessEnvironment,
@@ -184,6 +187,7 @@ public TaskHostConfiguration(
                 }
             }
 
+            _runtime = runtime;
             _culture = culture;
             _uiCulture = uiCulture;
 #if FEATURE_APPDOMAIN
@@ -213,94 +217,6 @@ public TaskHostConfiguration(
             _globalParameters = globalParameters ?? new Dictionary<string, string>();
         }
 
-#if FEATURE_APPDOMAIN
-        /// <summary>
-        /// Constructor.
-        /// </summary>
-        /// <param name="runtime">Task host runtime.</param>
-        /// <param name="nodeId">The ID of the node being configured.</param>
-        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
-        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
-        /// <param name="culture">The culture of the thread that will execute the task.</param>
-        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
-        /// <param name="appDomainSetup">The AppDomainSetup that may be used to pass information to an AppDomainIsolated task.</param>
-        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
-        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
-        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
-        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
-        /// <param name="taskName">Name of the task.</param>
-        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
-        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
-        /// <param name="taskParameters">Parameters to apply to the task.</param>
-        /// <param name="globalParameters">global properties for the current project.</param>
-        /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
-        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
-        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
-#else
-        /// <summary>
-        /// Constructor.
-        /// </summary>
-        /// <param name="runtime">Task host runtime.</param>
-        /// <param name="nodeId">The ID of the node being configured.</param>
-        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
-        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
-        /// <param name="culture">The culture of the thread that will execute the task.</param>
-        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
-        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
-        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
-        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
-        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
-        /// <param name="taskName">Name of the task.</param>
-        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
-        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
-        /// <param name="taskParameters">Parameters to apply to the task.</param>
-        /// <param name="globalParameters">global properties for the current project.</param>
-        /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
-        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
-        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
-#endif
-        public TaskHostConfiguration(
-                string runtime,
-                int nodeId,
-                string startupDirectory,
-                IDictionary<string, string> buildProcessEnvironment,
-                CultureInfo culture,
-                CultureInfo uiCulture,
-#if FEATURE_APPDOMAIN
-                AppDomainSetup appDomainSetup,
-#endif
-                int lineNumberOfTask,
-                int columnNumberOfTask,
-                string projectFileOfTask,
-                bool continueOnError,
-                string taskName,
-                string taskLocation,
-                bool isTaskInputLoggingEnabled,
-                IDictionary<string, object> taskParameters,
-                Dictionary<string, string> globalParameters,
-                ICollection<string> warningsAsErrors,
-                ICollection<string> warningsNotAsErrors,
-                ICollection<string> warningsAsMessages)
-            : this(nodeId,
-                  startupDirectory,
-                  buildProcessEnvironment,
-                  culture,
-                  uiCulture,
-#if FEATURE_APPDOMAIN
-                appDomainSetup,
-#endif
-                  lineNumberOfTask,
-                  columnNumberOfTask,
-                  projectFileOfTask,
-                  continueOnError,
-                  taskName, taskLocation,
-                  isTaskInputLoggingEnabled,
-                  taskParameters,
-                  globalParameters,
-                  warningsAsErrors,
-                  warningsNotAsErrors,
-                  warningsAsMessages) => _runtime = runtime;
-
         /// <summary>
         /// Constructor for deserialization.
         /// </summary>
