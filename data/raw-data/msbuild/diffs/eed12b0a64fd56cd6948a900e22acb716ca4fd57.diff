diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 12786026132..090ecb1f2eb 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -30,7 +30,6 @@
 
 using Xunit;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Engine.UnitTests;
 using Microsoft.Build.Shared.FileSystem;
 using Shouldly;
 
@@ -1138,6 +1137,85 @@ public void HasMetadata()
             logger.AssertLogContains("[One|Three|Four]");
         }
 
+        [Fact]
+        public void DirectItemMetadataReferenceShouldBeCaseInsensitive()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
+                <Project>
+                  <ItemGroup>
+                    <Foo Include=`Foo`>
+                      <SENSITIVE>X</SENSITIVE>
+                    </Foo>
+                  </ItemGroup>
+                  <Target Name=`Build`>
+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
+                    
+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
+                  </Target>
+                </Project>
+                ");
+
+            logger.AssertLogContains("QualifiedNotMatchCase Foo=X");
+            logger.AssertLogContains("QualifiedMatchCase Foo=X");
+            logger.AssertLogContains("UnqualifiedNotMatchCase Foo=X");
+            logger.AssertLogContains("UnqualifiedMatchCase Foo=X");
+        }
+
+        [Fact]
+        public void ItemDefinitionGroupMetadataReferenceShouldBeCaseInsensitive()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
+                <Project>
+                  <ItemDefinitionGroup>
+                    <Foo>
+                        <SENSITIVE>X</SENSITIVE>
+                    </Foo>
+                  </ItemDefinitionGroup>
+                  <ItemGroup>
+                    <Foo Include=`Foo`/>
+                  </ItemGroup>
+                  <Target Name=`Build`>
+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>
+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>
+                    
+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>
+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>
+                  </Target>
+                </Project>
+                ");
+
+            logger.AssertLogContains("QualifiedNotMatchCase Foo=X");
+            logger.AssertLogContains("QualifiedMatchCase Foo=X");
+            logger.AssertLogContains("UnqualifiedNotMatchCase Foo=X");
+            logger.AssertLogContains("UnqualifiedMatchCase Foo=X");
+        }
+
+        [Fact]
+        public void WellKnownMetadataReferenceShouldBeCaseInsensitive()
+        {
+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@"
+                <Project>
+                  <ItemGroup>
+                    <Foo Include=`Foo`/>
+                  </ItemGroup>
+                  <Target Name=`Build`>
+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.Identity)=%(Foo.FILENAME)`/>
+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.Identity)=%(Foo.FileName)`/>
+                    
+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.Identity)=%(FILENAME)`/>
+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.Identity)=%(FileName)`/>
+                  </Target>
+                </Project>
+                ");
+
+            logger.AssertLogContains("QualifiedNotMatchCase Foo=Foo");
+            logger.AssertLogContains("QualifiedMatchCase Foo=Foo");
+            logger.AssertLogContains("UnqualifiedNotMatchCase Foo=Foo");
+            logger.AssertLogContains("UnqualifiedMatchCase Foo=Foo");
+        }
+
         /// <summary>
         /// Verify when there is an error due to an attempt to use a static method that we report the method name
         /// </summary>
diff --git a/src/Build/Collections/CopyOnWritePropertyDictionary.cs b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
index 240a71a41ac..b42d9044410 100644
--- a/src/Build/Collections/CopyOnWritePropertyDictionary.cs
+++ b/src/Build/Collections/CopyOnWritePropertyDictionary.cs
@@ -299,7 +299,7 @@ void IDictionary<string, T>.Add(string key, T value)
         /// </summary>
         bool IDictionary<string, T>.ContainsKey(string key)
         {
-            return PropertyNames.Contains(key);
+            return _properties.ContainsKey(key);
         }
 
         /// <summary>
