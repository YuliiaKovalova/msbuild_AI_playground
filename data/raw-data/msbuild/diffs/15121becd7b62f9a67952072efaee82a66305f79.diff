diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 4d94d6bd0f6..2d9b1f3a9e7 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -1420,7 +1420,7 @@ void IRequestBuilderCallback.ExitMSBuildCallbackState()
         /// <summary>
         /// Empty impl
         /// </summary>
-        int IRequestBuilderCallback.RequestCores(int requestedCores)
+        int IRequestBuilderCallback.RequestCores(int requestedCores, bool waitForCores)
         {
             return 0;
         }
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index d95ecd20798..6d73dcd4bed 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -981,7 +981,7 @@ void IRequestBuilderCallback.ExitMSBuildCallbackState()
         /// <summary>
         /// Empty impl
         /// </summary>
-        int IRequestBuilderCallback.RequestCores(int requestedCores)
+        int IRequestBuilderCallback.RequestCores(int requestedCores, bool waitForCores)
         {
             return 0;
         }
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index c9a5cc960ee..2bf9f56669f 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -758,7 +758,7 @@ void IRequestBuilderCallback.ExitMSBuildCallbackState()
         /// <summary>
         /// Empty impl
         /// </summary>
-        int IRequestBuilderCallback.RequestCores(int requestedCores)
+        int IRequestBuilderCallback.RequestCores(int requestedCores, bool waitForCores)
         {
             return 0;
         }
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index 1a9c112b44f..a4c790a2209 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -1302,7 +1302,7 @@ public void ExitMSBuildCallbackState()
             /// <summary>
             /// Mock
             /// </summary>
-            public int RequestCores(int requestedCores)
+            public int RequestCores(int requestedCores, bool waitForCores)
             {
                 return 0;
             }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index e9714427c50..5cb3b81dc0b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2178,7 +2178,7 @@ private void HandleResourceRequest(int node, ResourceRequest request)
         {
             if (request.IsAcquire)
             {
-                _scheduler.RequestCores(request.BlockedRequestId, request.NumCores).ContinueWith((Task<int> task) =>
+                _scheduler.RequestCores(request.BlockedRequestId, request.NumCores, request.IsBlocking).ContinueWith((Task<int> task) =>
                 {
                     var response = new ResourceResponse(request.BlockedRequestId, task.Result);
                     _nodeManager.SendData(node, response);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
index 2089685fce3..323f046e040 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IRequestBuilderCallback.cs
@@ -60,8 +60,10 @@ internal interface IRequestBuilderCallback
         /// Requests CPU resources from the scheduler.
         /// </summary>
         /// <param name="requestedCores">Number of logical cores being requested.</param>
-        /// <returns>Number of logical cores actually granted.</returns>
-        int RequestCores(int requestedCores);
+        /// <param name="waitForCores">True to make the request block and wait for at least one core.</param>
+        /// <returns>Number of logical cores actually granted. If <paramref name="waitForCores"/> is false, the call can return
+        /// zero. Otherwise the return value is always positive.</returns>
+        int RequestCores(int requestedCores, bool waitForCores);
 
         /// <summary>
         /// Returns CPU resources to the scheduler.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index bb53debf53e..e4f942f26fd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -491,10 +491,10 @@ public void ExitMSBuildCallbackState()
         /// <summary>
         /// Requests CPU resources from the scheduler.
         /// </summary>
-        public int RequestCores(int requestedCores)
+        public int RequestCores(int requestedCores, bool waitForCores)
         {
             VerifyIsNotZombie();
-            RaiseResourceRequest(new ResourceRequest(true, _requestEntry.Request.GlobalRequestId, requestedCores));
+            RaiseResourceRequest(new ResourceRequest(_requestEntry.Request.GlobalRequestId, requestedCores, waitForCores));
 
             WaitHandle[] handles = new WaitHandle[] { _terminateEvent, _continueWithResourcesEvent };
 
@@ -516,7 +516,7 @@ public int RequestCores(int requestedCores)
         public void ReleaseCores(int coresToRelease)
         {
             VerifyIsNotZombie();
-            RaiseResourceRequest(new ResourceRequest(false, _requestEntry.Request.GlobalRequestId, coresToRelease));
+            RaiseResourceRequest(new ResourceRequest(_requestEntry.Request.GlobalRequestId, coresToRelease));
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index dde2589ae00..6e63766bc8f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -366,9 +366,9 @@ void IRequestBuilderCallback.ExitMSBuildCallbackState()
         /// <summary>
         /// Requests CPU resources from the scheduler.
         /// </summary>
-        int IRequestBuilderCallback.RequestCores(int requestedCores)
+        int IRequestBuilderCallback.RequestCores(int requestedCores, bool waitForCores)
         {
-            return _requestBuilderCallback.RequestCores(requestedCores);
+            return _requestBuilderCallback.RequestCores(requestedCores, waitForCores);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 1fb9626d961..afa56e13052 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -688,19 +688,29 @@ public int RequestCores(int requestedCores)
         {
             lock (_callbackMonitor)
             {
-                IRequestBuilderCallback builderCallback = _requestEntry.Builder as IRequestBuilderCallback;
-                var coresAcquired = builderCallback.RequestCores(requestedCores);
+                int coresAcquired = 0;
 
+                IRequestBuilderCallback builderCallback = _requestEntry.Builder as IRequestBuilderCallback;
+                if (implicitCoreUsed)
+                {
+                    coresAcquired = builderCallback.RequestCores(requestedCores, waitForCores: true);
+                }
+                else if (requestedCores > 1)
+                {
+                    coresAcquired = builderCallback.RequestCores(requestedCores - 1, waitForCores: false);
+                }
                 runningTotal += coresAcquired;
 
-                if (!implicitCoreUsed && coresAcquired == 0)
+                if (!implicitCoreUsed)
                 {
                     // If we got nothing back from the actual system, pad it with the one implicit core
-                    // you get just for running--that way we never block and always return > 1
+                    // you get just for running--that way the first call never blocks and always returns >= 1
                     implicitCoreUsed = true;
-                    coresAcquired = 1;
+                    coresAcquired++;
                 }
 
+                Debug.Assert(coresAcquired >= 1);
+
                 return coresAcquired;
             }
         }
@@ -726,7 +736,7 @@ public void ReleaseCores(int coresToRelease)
 
         internal void ReleaseAllCores()
         {
-            ReleaseCores(runningTotal);
+            ReleaseCores(runningTotal + (implicitCoreUsed ? 1 : 0));
 
             runningTotal = 0;
             implicitCoreUsed = false;
diff --git a/src/Build/BackEnd/Components/Scheduler/IScheduler.cs b/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
index 0e8d516072e..de90369fabb 100644
--- a/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/IScheduler.cs
@@ -73,7 +73,7 @@ internal interface IScheduler : IBuildComponent
         /// <summary>
         /// Requests CPU resources.
         /// </summary>
-        Task<int> RequestCores(int requestId, int requestedCores);
+        Task<int> RequestCores(int requestId, int requestedCores, bool waitForCores);
 
         /// <summary>
         /// Returns CPU resources.
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 84c65c34eb6..c4169bf8724 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -541,7 +541,7 @@ public void WriteDetailedSummary(int submissionId)
         /// <summary>
         /// Requests CPU resources.
         /// </summary>
-        public Task<int> RequestCores(int requestId, int requestedCores)
+        public Task<int> RequestCores(int requestId, int requestedCores, bool waitForCores)
         {
             if (requestedCores == 0)
             {
@@ -560,7 +560,7 @@ public Task<int> RequestCores(int requestId, int requestedCores)
             };
 
             int grantedCores = grantCores(GetAvailableCoresForExplicitRequests());
-            if (grantedCores > 0)
+            if (grantedCores > 0 || !waitForCores)
             {
                 return Task.FromResult(grantedCores);
             }
diff --git a/src/Build/BackEnd/Shared/ResourceRequest.cs b/src/Build/BackEnd/Shared/ResourceRequest.cs
index b114bc7d546..01abe649217 100644
--- a/src/Build/BackEnd/Shared/ResourceRequest.cs
+++ b/src/Build/BackEnd/Shared/ResourceRequest.cs
@@ -16,6 +16,8 @@ internal class ResourceRequest : INodePacket
 
         private bool _isAcquire;
 
+        private bool _isBlocking;
+
         private int _numCores;
 
         /// <summary>
@@ -27,11 +29,22 @@ internal ResourceRequest(ITranslator translator)
         }
 
         /// <summary>
-        /// Constructor
+        /// Constructor for acquiring.
         /// </summary>
-        internal ResourceRequest(bool acquire, int blockedGlobalRequestId, int numCores)
+        internal ResourceRequest(int blockedGlobalRequestId, int numCores, bool isBlocking)
         {
-            _isAcquire = acquire;
+            _isAcquire = true;
+            _isBlocking = isBlocking;
+            _blockedGlobalRequestId = blockedGlobalRequestId;
+            _numCores = numCores;
+        }
+
+        /// <summary>
+        /// Constructor for releasing.
+        /// </summary>
+        internal ResourceRequest(int blockedGlobalRequestId, int numCores)
+        {
+            _isAcquire = false;
             _blockedGlobalRequestId = blockedGlobalRequestId;
             _numCores = numCores;
         }
@@ -69,6 +82,17 @@ public bool IsAcquire
             }
         }
 
+        /// <summary>
+        /// </summary>
+        public bool IsBlocking
+        {
+            [DebuggerStepThrough]
+            get
+            {
+                return _isBlocking;
+            }
+        }
+
         /// <summary>
         /// </summary>
         public int NumCores
@@ -89,6 +113,7 @@ public void Translate(ITranslator translator)
         {
             translator.Translate(ref _blockedGlobalRequestId);
             translator.Translate(ref _isAcquire);
+            translator.Translate(ref _isBlocking);
             translator.Translate(ref _numCores);
         }
 
