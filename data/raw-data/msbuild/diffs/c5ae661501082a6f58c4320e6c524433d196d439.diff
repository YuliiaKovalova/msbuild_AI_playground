diff --git a/src/StringTools/WeakStringCache.Concurrent.cs b/src/StringTools/WeakStringCache.Concurrent.cs
index 6110475e946..f99bbf26501 100644
--- a/src/StringTools/WeakStringCache.Concurrent.cs
+++ b/src/StringTools/WeakStringCache.Concurrent.cs
@@ -37,7 +37,7 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi
 
             // Get the existing handle from the cache and lock it while we're dereferencing it to prevent a race with the Scavenge
             // method running on another thread and freeing the handle from underneath us.
-            if (_stringsByHashCode.TryGetValue(hashCode, out handle))
+            if (_stringsByHashCode.TryGetValue(hashCode, out handle!))
             {
                 lock (handle)
                 {
@@ -98,7 +98,7 @@ public void Scavenge()
             foreach (KeyValuePair<int, StringWeakHandle> entry in _stringsByHashCode)
             {
                 // We can safely dereference entry.Value as the caller guarantees that Scavenge runs only on one thread.
-                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle removedHandle))
+                if (!entry.Value.IsUsed && _stringsByHashCode.TryRemove(entry.Key, out StringWeakHandle? removedHandle))
                 {
                     lock (removedHandle)
                     {
