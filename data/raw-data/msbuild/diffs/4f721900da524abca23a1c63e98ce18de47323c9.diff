diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 370c472c8eb..adb84a56c94 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Logging.FancyLogger
     public class FancyLogger : ILogger
     {
 
-        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
+        // public FancyLoggerNode root = new FancyLoggerNode("-1", FancyLoggerNodeType.None);
 
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
         public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
@@ -64,27 +64,21 @@ void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
             if (e.BuildEventContext?.ProjectInstanceId == null) return;
-            projectConsoleLines[e.BuildEventContext.ProjectInstanceId] = FancyLoggerBuffer.WriteNewLine(" "
+            int id = e.BuildEventContext.ProjectInstanceId;
+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(" "
                 + ANSIBuilder.Formatting.Dim("Project: ")
                 + e.ProjectFile
             );
-            // Node on tree
-            if (e.ParentProjectBuildEventContext?.ProjectInstanceId != null)
-            {
-                // Find node
-                FancyLoggerNode? node = root.Find(e.ParentProjectBuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
-                if (node == null) return;
-                node.Add(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
-            }
-            else
-            {
-                root.Add(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
-            }
+            projectConsoleLines[id] = line;
+            // Node
+            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Project);
+            node.Line = line;
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             if (e.BuildEventContext?.ProjectInstanceId == null) return;
             int lineId = projectConsoleLines[e.BuildEventContext.ProjectInstanceId].Id;
+            if(lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Project: ")
@@ -95,18 +89,17 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             if (e.BuildEventContext?.TargetId == null) return;
-            targetConsoleLines[e.BuildEventContext.TargetId] = FancyLoggerBuffer.WriteNewLine("\t  "
+            int id = e.BuildEventContext.TargetId;
+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine("\t  "
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + e.TargetName);
-            // Node on tree
-            FancyLoggerNode? node = root.Find(e.BuildEventContext.ProjectInstanceId, FancyLoggerNodeType.Project);
-            if (node == null) return;
-            node.Add(e.BuildEventContext.TargetId, FancyLoggerNodeType.Target);
+            targetConsoleLines[id] = line;
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             if (e.BuildEventContext?.TargetId == null) return;
             int lineId = targetConsoleLines[e.BuildEventContext.TargetId].Id;
+            if(lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, "\t"
                 + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Target: ")
@@ -119,15 +112,12 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             existingTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
-            taskConsoleLines[e.BuildEventContext.TaskId] = FancyLoggerBuffer.WriteNewLine("\t\t  "
+            int id = e.BuildEventContext.TaskId;
+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine("\t\t  "
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + e.TaskName
             );
-            FancyLoggerBuffer.WriteFooter($"Build: {(completedTasks / existingTasks) * 100}");
-            // Node on tree
-            FancyLoggerNode? node = root.Find(e.BuildEventContext.TargetId, FancyLoggerNodeType.Target);
-            if (node == null) return;
-            node.Add(e.BuildEventContext.TaskId, FancyLoggerNodeType.Task);
+            taskConsoleLines[id] = line;
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index d05da0c59f7..5d002e4ed7e 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -18,6 +18,7 @@ public class FancyLoggerBufferLine
         private static int counter = 0;
         public int Id;
         public string Text;
+        public bool IsHidden;
         public FancyLoggerBufferLine()
         {
             Id = counter++;
@@ -28,6 +29,18 @@ public FancyLoggerBufferLine(string text)
             Id = counter++;
             Text = text;
         }
+        public void Hide()
+        {
+            IsHidden = true;
+        }
+        public void Unhide()
+        {
+            IsHidden = false;
+        }
+        public int GetIndex()
+        {
+            return FancyLoggerBuffer.GetLineIndexById(Id);
+        }
     }
 
     /// <summary>
@@ -96,18 +109,22 @@ private static void ScrollToLine(int firstLineIndex)
             if (firstLineIndex < 0) return;
             if (firstLineIndex >= lines.Count) return;
             CurrentTopLineIndex = firstLineIndex;
-            for (int i = 0; i < Height - 4; i++)
+            int i = 0;
+            while (i < Height - 4)
             {
+                int lineIndex = i + firstLineIndex;
+                if ( lineIndex < lines.Count && lines[lineIndex].IsHidden) continue;
                 Console.Write(""
-                    + ANSIBuilder.Cursor.Position(i+2, 0)
+                    + ANSIBuilder.Cursor.Position(i + 2, 0)
                     + ANSIBuilder.Eraser.LineCursorToEnd()
-                    + ((i + firstLineIndex < lines.Count) ? lines[i + firstLineIndex].Text : "")
+                    + ((lineIndex < lines.Count) ? lines[lineIndex].Text : "")
                 );
+                i++;
             }
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
         private static void ScrollToEnd()
-        {
+        { 
             // If number of lines is smaller than height
             if (lines.Count < Height - 2)
             {
@@ -198,5 +215,20 @@ public static void DeleteLine(int lineId)
             return line;
         }
         #endregion
+
+        public static void HideLine(int lineId)
+        {
+            FancyLoggerBufferLine? line = GetLineById(lineId);
+            if (line == null) return;
+            line.Hide();
+            ScrollToLine(CurrentTopLineIndex);
+        }
+        public static void UnhideLine(int lineId)
+        {
+            FancyLoggerBufferLine? line = GetLineById(lineId);
+            if (line == null) return;
+            line.Unhide();
+            ScrollToLine(CurrentTopLineIndex);
+        }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index 09b534c075b..903b5857b59 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Logging.FancyLogger
     // TODO: Maybe remove
     public enum FancyLoggerNodeType
     {
-        None = 0,
+        None,
         Build,
         Project,
         Target,
@@ -23,42 +23,89 @@ public enum FancyLoggerNodeType
         Warning,
         Error
     }
+
     public class FancyLoggerNode
     {
-        public int Id;
-        public FancyLoggerNodeType Type; // TODO: Maybe remove
-        public BuildEventArgs? Args = null;
-        public Dictionary<int, FancyLoggerNode> Children = new();
-
-        public FancyLoggerNode(int id, FancyLoggerNodeType type)
+        public string Id;
+        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();
+        public FancyLoggerBufferLine? Line;
+        public int Depth = 0;
+        public FancyLoggerNode(string id)
         {
             Id = id;
-            Type = type;
         }
-        public FancyLoggerNode(int id, FancyLoggerNodeType type, BuildEventArgs? args) : this(id, type) { Args = args; }
+        public FancyLoggerNode(int id, FancyLoggerNodeType type)
+        {
+            switch (type)
+            {
+                case FancyLoggerNodeType.Build:
+                    Id = $"build-{id}";
+                    break;
+                case FancyLoggerNodeType.Project:
+                    Id = $"project-{id}";
+                    break;
+                case FancyLoggerNodeType.Target:
+                    Id = $"target-{id}";
+                    break;
+                case FancyLoggerNodeType.Task:
+                    Id = $"task-{id}";
+                    break;
+                case FancyLoggerNodeType.Message:
+                    Id = $"message-{id}";
+                    break;
+                case FancyLoggerNodeType.Warning:
+                    Id = $"warning-{id}";
+                    break;
+                case FancyLoggerNodeType.Error:
+                    Id = $"error-{id}";
+                    break;
+                default:
+                    Id = id.ToString(); break;
+            }
+        }
+
+
+        public void Collapse(bool isRoot)
+        {
+            // Children
+            foreach (var child in Children)
+            {
+                child.Value.Collapse(false);
+            }
+            // Self
+            if (!isRoot) Line?.Hide();
+        }
 
-        public void Add(FancyLoggerNode node)
+        public void Expand(bool isRoot)
         {
-            Children.Add(node.Id, node);
+            foreach (var child in Children)
+            {
+                child.Value.Expand(false);
+            }
+            // Self
+            if (!isRoot) Line?.Unhide();
         }
-        public void Add(int id, FancyLoggerNodeType type)
+        public int GetRootLineId()
         {
-            FancyLoggerNode node = new FancyLoggerNode(id, type);
-            Add(node);
+            if (Line == null) return -1;
+            return FancyLoggerBuffer.GetLineIndexById(Line.Id);
         }
-        public FancyLoggerNode? Find(int id, FancyLoggerNodeType type)
+        public int GetLastLineId()
         {
-            // If id is self
-            if (Id == id && Type == type) return this;
-            // If not self and no children
-            if (Children.Count == 0) return null;
-            // Find in all children
+            if (Line == null) return -1;
+            if (Children.Count == 0) return FancyLoggerBuffer.GetLineIndexById(Line.Id);
+            int lastLineId = -1;
+            int lastLineIndex = -1;
             foreach (var child in Children)
             {
-                FancyLoggerNode? node = child.Value.Find(id, type);
-                if (node != null) return node;
+                int lineIndex = child.Value.GetLastLineId();
+                if (lineIndex > lastLineIndex)
+                {
+                    lastLineIndex = lineIndex;
+                    lastLineId = Line.Id;
+                }
             }
-            return null;
+            return lastLineId;
         }
     }
 }
