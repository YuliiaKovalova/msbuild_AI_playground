diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 21f92e5d41c..abd90736495 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -808,6 +808,8 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension
         public RemoveDuplicates() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public bool HadAnyDuplicates { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 935f37fa2fd..74187975999 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -483,6 +483,8 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension
         public RemoveDuplicates() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public bool HadAnyDuplicates { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
diff --git a/src/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/Microsoft.Build.CommonTypes.xsd
index f360e5cbc6d..71902cfa551 100644
--- a/src/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -1,4 +1,4 @@
-ï»¿<?xml version="1.0" encoding="utf-8"?>
+<?xml version="1.0" encoding="utf-8"?>
 <xs:schema targetNamespace="http://schemas.microsoft.com/developer/msbuild/2003" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003"
 elementFormDefault="qualified">
 
@@ -2527,6 +2527,7 @@ elementFormDefault="qualified">
             <xs:complexContent>
                 <xs:extension base="msb:TaskType">
                     <xs:attribute name="Filtered" />
+                    <xs:attribute name="HadAnyDuplicates" type="msb:boolean" />
                     <xs:attribute name="Inputs" />
                 </xs:extension>
             </xs:complexContent>
diff --git a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
index a98185d33a7..31b629451a4 100644
--- a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
@@ -26,7 +26,9 @@ public void OneItemNop()
 
             bool success = t.Execute();
             Assert.True(success);
+            Assert.Equal(1, t.Filtered.Length);
             Assert.Equal("MyFile.txt", t.Filtered[0].ItemSpec);
+            Assert.False(t.HadAnyDuplicates);
         }
 
         /// <summary>
@@ -42,7 +44,9 @@ public void TwoItemsTheSame()
 
             bool success = t.Execute();
             Assert.True(success);
+            Assert.Equal(1, t.Filtered.Length);
             Assert.Equal("MyFile.txt", t.Filtered[0].ItemSpec);
+            Assert.True(t.HadAnyDuplicates);
         }
 
         /// <summary>
@@ -110,8 +114,10 @@ public void TwoItemsDifferent()
 
             bool success = t.Execute();
             Assert.True(success);
+            Assert.Equal(2, t.Filtered.Length);
             Assert.Equal("MyFile1.txt", t.Filtered[0].ItemSpec);
             Assert.Equal("MyFile2.txt", t.Filtered[1].ItemSpec);
+            Assert.False(t.HadAnyDuplicates);
         }
 
         /// <summary>
@@ -127,7 +133,9 @@ public void CaseInsensitive()
 
             bool success = t.Execute();
             Assert.True(success);
+            Assert.Equal(1, t.Filtered.Length);
             Assert.Equal("MyFile.txt", t.Filtered[0].ItemSpec);
+            Assert.True(t.HadAnyDuplicates);
         }
 
         /// <summary>
@@ -142,9 +150,7 @@ public void MissingInputs()
 
             Assert.True(success);
             Assert.Equal(0, t.Filtered.Length);
+            Assert.False(t.HadAnyDuplicates);
         }
     }
 }
-
-
-
diff --git a/src/Tasks/ListOperators/RemoveDuplicates.cs b/src/Tasks/ListOperators/RemoveDuplicates.cs
index 70a7544cad0..e0c3a26df02 100644
--- a/src/Tasks/ListOperators/RemoveDuplicates.cs
+++ b/src/Tasks/ListOperators/RemoveDuplicates.cs
@@ -17,6 +17,7 @@ public class RemoveDuplicates : TaskExtension
     {
         private ITaskItem[] _inputs = Array.Empty<TaskItem>();
         private ITaskItem[] _filtered = null;
+        private bool _hadAnyDuplicates = false;
 
         /// <summary>
         /// The left-hand set of items to be RemoveDuplicatesed from.
@@ -37,6 +38,16 @@ public ITaskItem[] Filtered
             set { _filtered = value; }
         }
 
+        /// <summary>
+        /// True if any duplicate items were found. False otherwise.
+        /// </summary>
+        [Output]
+        public bool HadAnyDuplicates
+        {
+            get { return _hadAnyDuplicates; }
+            set { _hadAnyDuplicates = value; }
+        }
+
         /// <summary>
         /// Execute the task.
         /// </summary>
@@ -55,6 +66,7 @@ public override bool Execute()
             }
 
             Filtered = (ITaskItem[])filteredList.ToArray(typeof(ITaskItem));
+            HadAnyDuplicates = Inputs.Length != Filtered.Length;
 
             return true;
         }
