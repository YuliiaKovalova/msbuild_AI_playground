diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
index 9945d0d4437..a4c0de12aca 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs
@@ -25,7 +25,7 @@ internal class MSBuild : ITask
         /// <summary>
         /// Enum describing the behavior when a project doesn't exist on disk.
         /// </summary>
-        private enum SkipNonexistentProjectsBehavior
+        private enum SkipNonExistentProjectsBehavior
         {
             /// <summary>
             /// Default when unset by user.
@@ -54,7 +54,7 @@ private enum SkipNonexistentProjectsBehavior
         private readonly List<ITaskItem> _targetOutputs = new List<ITaskItem>();
 
         // Whether to skip project files that don't exist on disk. By default we error for such projects.
-        private SkipNonexistentProjectsBehavior _skipNonexistentProjects = SkipNonexistentProjectsBehavior.Undefined;
+        private SkipNonExistentProjectsBehavior _skipNonExistentProjects = SkipNonExistentProjectsBehavior.Undefined;
 
         private TaskLoggingHelper _logHelper;
 
@@ -167,22 +167,22 @@ public string SkipNonexistentProjects
         {
             get
             {
-                switch (_skipNonexistentProjects)
+                switch (_skipNonExistentProjects)
                 {
-                    case SkipNonexistentProjectsBehavior.Undefined:
+                    case SkipNonExistentProjectsBehavior.Undefined:
                         return "Undefined";
 
-                    case SkipNonexistentProjectsBehavior.Build:
+                    case SkipNonExistentProjectsBehavior.Build:
                         return "Build";
 
-                    case SkipNonexistentProjectsBehavior.Error:
+                    case SkipNonExistentProjectsBehavior.Error:
                         return "False";
 
-                    case SkipNonexistentProjectsBehavior.Skip:
+                    case SkipNonExistentProjectsBehavior.Skip:
                         return "True";
 
                     default:
-                        ErrorUtilities.ThrowInternalError("Unexpected case {0}", _skipNonexistentProjects);
+                        ErrorUtilities.ThrowInternalError("Unexpected case {0}", _skipNonExistentProjects);
                         break;
                 }
 
@@ -192,9 +192,9 @@ public string SkipNonexistentProjects
 
             set
             {
-                if (TryParseSkipNonexistentProjects(value, out SkipNonexistentProjectsBehavior behavior))
+                if (TryParseSkipNonExistentProjects(value, out SkipNonExistentProjectsBehavior behavior))
                 {
-                    _skipNonexistentProjects = behavior;
+                    _skipNonExistentProjects = behavior;
                 }
             }
         }
@@ -327,20 +327,20 @@ public async Task<bool> ExecuteInternal()
                 }
 
                 // Try to get the behavior from metadata if it is undefined.
-                var skipNonexistProjects = _skipNonexistentProjects;
-                if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)
+                var skipNonExistProjects = _skipNonExistentProjects;
+                if (_skipNonExistentProjects == SkipNonExistentProjectsBehavior.Undefined)
                 {
-                    if (TryParseSkipNonexistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonexistentProjectsBehavior behavior))
+                    if (TryParseSkipNonExistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonExistentProjectsBehavior behavior))
                     {
-                        skipNonexistProjects = behavior;
+                        skipNonExistProjects = behavior;
                     }
                     else
                     {
-                        skipNonexistProjects = SkipNonexistentProjectsBehavior.Error;
+                        skipNonExistProjects = SkipNonExistentProjectsBehavior.Error;
                     }
                 }
 
-                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistProjects == SkipNonexistentProjectsBehavior.Build))
+                if (FileSystems.Default.FileExists(projectPath) || (skipNonExistProjects == SkipNonExistentProjectsBehavior.Build))
                 {
                     if (FileUtilities.IsVCProjFilename(projectPath))
                     {
@@ -381,13 +381,13 @@ public async Task<bool> ExecuteInternal()
                 }
                 else
                 {
-                    if (skipNonexistProjects == SkipNonexistentProjectsBehavior.Skip)
+                    if (skipNonExistProjects == SkipNonExistentProjectsBehavior.Skip)
                     {
                         Log.LogMessageFromResources(MessageImportance.High, "MSBuild.ProjectFileNotFoundMessage", project.ItemSpec);
                     }
                     else
                     {
-                        ErrorUtilities.VerifyThrow(skipNonexistProjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistProjects);
+                        ErrorUtilities.VerifyThrow(skipNonExistProjects == SkipNonExistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonExistProjects);
                         Log.LogErrorWithCodeFromResources("MSBuild.ProjectFileNotFound", project.ItemSpec);
                         success = false;
                     }
@@ -730,22 +730,22 @@ internal static async Task<bool> ExecuteTargets(
             return success;
         }
 
-        private bool TryParseSkipNonexistentProjects(string value, out SkipNonexistentProjectsBehavior behavior)
+        private bool TryParseSkipNonExistentProjects(string value, out SkipNonExistentProjectsBehavior behavior)
         {
             if (string.IsNullOrEmpty(value))
             {
-                behavior = SkipNonexistentProjectsBehavior.Error;
+                behavior = SkipNonExistentProjectsBehavior.Error;
                 return false;
             }
             else if (String.Equals("Build", value, StringComparison.OrdinalIgnoreCase))
             {
-                behavior = SkipNonexistentProjectsBehavior.Build;
+                behavior = SkipNonExistentProjectsBehavior.Build;
             }
             else
             {
                 ErrorUtilities.VerifyThrowArgument(ConversionUtilities.CanConvertStringToBool(value), "MSBuild.InvalidSkipNonexistentProjectValue");
                 bool originalSkipValue = ConversionUtilities.ConvertStringToBool(value);
-                behavior = originalSkipValue ? SkipNonexistentProjectsBehavior.Skip : SkipNonexistentProjectsBehavior.Error;
+                behavior = originalSkipValue ? SkipNonExistentProjectsBehavior.Skip : SkipNonExistentProjectsBehavior.Error;
             }
 
             return true;
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index b0ae26d1680..ea4213c9688 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -25,7 +25,7 @@ public class MSBuild : TaskExtension
         /// <summary>
         /// Enum describing the behavior when a project doesn't exist on disk.
         /// </summary>
-        private enum SkipNonexistentProjectsBehavior
+        private enum SkipNonExistentProjectsBehavior
         {
             /// <summary>
             /// Default when unset by user.
@@ -54,7 +54,7 @@ private enum SkipNonexistentProjectsBehavior
         private readonly List<ITaskItem> _targetOutputs = new List<ITaskItem>();
 
         // Whether to skip project files that don't exist on disk. By default we error for such projects.
-        private SkipNonexistentProjectsBehavior _skipNonexistentProjects = SkipNonexistentProjectsBehavior.Undefined;
+        private SkipNonExistentProjectsBehavior _skipNonExistentProjects = SkipNonExistentProjectsBehavior.Undefined;
 
         /// <summary>
         /// A list of property name/value pairs to apply as global properties to 
@@ -148,22 +148,22 @@ public string SkipNonexistentProjects
         {
             get
             {
-                switch (_skipNonexistentProjects)
+                switch (_skipNonExistentProjects)
                 {
-                    case SkipNonexistentProjectsBehavior.Undefined:
+                    case SkipNonExistentProjectsBehavior.Undefined:
                         return "Undefined";
 
-                    case SkipNonexistentProjectsBehavior.Build:
+                    case SkipNonExistentProjectsBehavior.Build:
                         return "Build";
 
-                    case SkipNonexistentProjectsBehavior.Error:
+                    case SkipNonExistentProjectsBehavior.Error:
                         return "False";
 
-                    case SkipNonexistentProjectsBehavior.Skip:
+                    case SkipNonExistentProjectsBehavior.Skip:
                         return "True";
 
                     default:
-                        ErrorUtilities.ThrowInternalError("Unexpected case {0}", _skipNonexistentProjects);
+                        ErrorUtilities.ThrowInternalError("Unexpected case {0}", _skipNonExistentProjects);
                         break;
                 }
 
@@ -173,9 +173,9 @@ public string SkipNonexistentProjects
 
             set
             {
-                if (TryParseSkipNonexistentProjects(value, out SkipNonexistentProjectsBehavior behavior))
+                if (TryParseSkipNonExistentProjects(value, out SkipNonExistentProjectsBehavior behavior))
                 {
-                    _skipNonexistentProjects = behavior;
+                    _skipNonExistentProjects = behavior;
                 }
             }
         }
@@ -293,20 +293,20 @@ public override bool Execute()
                 }
 
                 // Try to get the behavior from metadata if it is undefined.
-                var skipNonexistProjects = _skipNonexistentProjects;
-                if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)
+                var skipNonExistProjects = _skipNonExistentProjects;
+                if (_skipNonExistentProjects == SkipNonExistentProjectsBehavior.Undefined)
                 {
-                    if (TryParseSkipNonexistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonexistentProjectsBehavior behavior))
+                    if (TryParseSkipNonExistentProjects(project.GetMetadata("SkipNonexistentProjects"), out SkipNonExistentProjectsBehavior behavior))
                     {
-                        skipNonexistProjects = behavior;
+                        skipNonExistProjects = behavior;
                     }
                     else
                     {
-                        skipNonexistProjects = SkipNonexistentProjectsBehavior.Error;
+                        skipNonExistProjects = SkipNonExistentProjectsBehavior.Error;
                     }
                 }
 
-                if (FileSystems.Default.FileExists(projectPath) || (skipNonexistProjects == SkipNonexistentProjectsBehavior.Build))
+                if (FileSystems.Default.FileExists(projectPath) || (skipNonExistProjects == SkipNonExistentProjectsBehavior.Build))
                 {
                     if (FileUtilities.IsVCProjFilename(projectPath))
                     {
@@ -347,13 +347,13 @@ public override bool Execute()
                 }
                 else
                 {
-                    if (skipNonexistProjects == SkipNonexistentProjectsBehavior.Skip)
+                    if (skipNonExistProjects == SkipNonExistentProjectsBehavior.Skip)
                     {
                         Log.LogMessageFromResources(MessageImportance.High, "MSBuild.ProjectFileNotFoundMessage", project.ItemSpec);
                     }
                     else
                     {
-                        ErrorUtilities.VerifyThrow(skipNonexistProjects == SkipNonexistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonexistProjects);
+                        ErrorUtilities.VerifyThrow(skipNonExistProjects == SkipNonExistentProjectsBehavior.Error, "skipNonexistentProjects has unexpected value {0}", skipNonExistProjects);
                         Log.LogErrorWithCodeFromResources("MSBuild.ProjectFileNotFound", project.ItemSpec);
                         success = false;
                     }
@@ -683,22 +683,22 @@ string toolsVersion
             return success;
         }
 
-        private bool TryParseSkipNonexistentProjects(string value, out SkipNonexistentProjectsBehavior behavior)
+        private bool TryParseSkipNonExistentProjects(string value, out SkipNonExistentProjectsBehavior behavior)
         {
             if (string.IsNullOrEmpty(value))
             {
-                behavior = SkipNonexistentProjectsBehavior.Error;
+                behavior = SkipNonExistentProjectsBehavior.Error;
                 return false;
             }
             else if (String.Equals("Build", value, StringComparison.OrdinalIgnoreCase))
             {
-                behavior = SkipNonexistentProjectsBehavior.Build;
+                behavior = SkipNonExistentProjectsBehavior.Build;
             }
             else
             {
                 ErrorUtilities.VerifyThrowArgument(ConversionUtilities.CanConvertStringToBool(value), "MSBuild.InvalidSkipNonexistentProjectValue");
                 bool originalSkipValue = ConversionUtilities.ConvertStringToBool(value);
-                behavior = originalSkipValue ? SkipNonexistentProjectsBehavior.Skip : SkipNonexistentProjectsBehavior.Error;
+                behavior = originalSkipValue ? SkipNonExistentProjectsBehavior.Skip : SkipNonExistentProjectsBehavior.Error;
             }
 
             return true;
