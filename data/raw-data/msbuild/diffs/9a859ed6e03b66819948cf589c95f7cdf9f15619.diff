diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 47c1e94941b..3d1e1785aa8 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1843,15 +1843,10 @@ static string EvaluateProperty(string value, IElementLocation location,
                     }
                 }
 
-                IDisposable assemblyLoadTracker = null;
                 // Combine SDK path with the "project" relative path
                 try
                 {
-                    // Is the sdk resolver a custom type?
-                    if (_sdkResolverService.GetType().Assembly != Assembly.GetExecutingAssembly())
-                    {
-                        assemblyLoadTracker = AssemblyLoadsTracker.StartTracking(_evaluationLoggingContext, AssemblyLoadingContext.SdkResolution, _sdkResolverService.GetType());
-                    }
+                    using var assemblyLoadsTracker = AssemblyLoadsTracker.StartTracking(_evaluationLoggingContext, AssemblyLoadingContext.SdkResolution, _sdkResolverService.GetType());
 
                     sdkResult = _sdkResolverService.ResolveSdk(_submissionId, sdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive, _isRunningInVisualStudio,
                         failOnUnresolvedSdk: !_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) || _loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk));
@@ -1862,10 +1857,6 @@ static string EvaluateProperty(string value, IElementLocation location,
                     // https://github.com/dotnet/msbuild/pull/6763
                     ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, "SDKResolverCriticalFailure", e.Message);
                 }
-                finally
-                {
-                    assemblyLoadTracker?.Dispose();
-                }
 
                 if (!sdkResult.Success)
                 {
