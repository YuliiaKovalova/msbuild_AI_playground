diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..4c6bbeb7faf 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -82,7 +82,7 @@
     <Rule Id="CA1721" Action="None" />             <!-- Property names should not match get methods --> 
     <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
     <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
-    <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
+    <Rule Id="CA1802" Action="Warning" />          <!-- Use literals where appropriate --> 
     <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
     <Rule Id="CA1806" Action="None" />
     <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index afaf6ecf8ab..f2bfed5cc5f 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -71,7 +71,7 @@ public void Dispose()
             ProjectCollection.GlobalProjectCollection.GlobalProperties.ShouldBeEmpty();
         }
 
-        private static readonly string ProjectWithItemGroup =
+        private const string ProjectWithItemGroup =
 @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
                   <ItemGroup>
 {0}
diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index 4bb00a27384..42e475fc7c7 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -16,21 +16,21 @@ internal static class GraphTestingUtilities
     {
         public static readonly ImmutableDictionary<string, string> EmptyGlobalProperties = new Dictionary<string, string> {{PropertyNames.IsGraphBuild, "true"}}.ToImmutableDictionary();
 
-        public static readonly string InnerBuildPropertyName = "InnerBuild";
-        public static readonly string InnerBuildPropertiesName = "InnerBuildProperties";
+        public const string InnerBuildPropertyName = "InnerBuild";
+        public const string InnerBuildPropertiesName = "InnerBuildProperties";
 
-        public static readonly string MultitargetingSpecificationPropertyGroup = $@"<PropertyGroup>
+        public const string MultitargetingSpecificationPropertyGroup = $@"<PropertyGroup>
                                                                         <InnerBuildProperty>{InnerBuildPropertyName}</InnerBuildProperty>
                                                                         <InnerBuildPropertyValues>{InnerBuildPropertiesName}</InnerBuildPropertyValues>
                                                                         <{InnerBuildPropertiesName}>a;b</{InnerBuildPropertiesName}>
                                                                      </PropertyGroup>";
-        public static readonly string HardCodedInnerBuildWithMultitargetingSpecification = $@"<PropertyGroup>
+        public const string HardCodedInnerBuildWithMultitargetingSpecification = $@"<PropertyGroup>
                                                                         <InnerBuildProperty>{InnerBuildPropertyName}</InnerBuildProperty>
                                                                         <InnerBuildPropertyValues>{InnerBuildPropertiesName}</InnerBuildPropertyValues>
                                                                         <{InnerBuildPropertyName}>a</{InnerBuildPropertyName}>
                                                                      </PropertyGroup>";
 
-        public static readonly string EnableTransitiveProjectReferencesPropertyGroup = @"<PropertyGroup>
+        public const string EnableTransitiveProjectReferencesPropertyGroup = @"<PropertyGroup>
                                                                                             <AddTransitiveProjectReferencesInStaticGraph>true</AddTransitiveProjectReferencesInStaticGraph>
                                                                                          </PropertyGroup>";
 
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 97802055673..630e7a4d826 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -25,15 +25,15 @@ public class ProjectGraphTests : IDisposable
     {
         private TestEnvironment _env;
 
-        private static readonly string ProjectReferenceTargetsWithMultitargeting = @"<ItemGroup>
-                                                                                        <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
-                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
-                                                                                        <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
-                                                                                     </ItemGroup>";
+        private const string ProjectReferenceTargetsWithMultitargeting = @"<ItemGroup>
+                                                                               <!-- Item order is important to ensure outer build targets are put in front of inner build ones -->
+                                                                               <ProjectReferenceTargets Include='A' Targets='AHelperInner;A' />
+                                                                               <ProjectReferenceTargets Include='A' Targets='AHelperOuter' OuterBuild='true' />
+                                                                           </ItemGroup>";
         private static string[] NonOuterBuildTargets = {"AHelperOuter", "AHelperInner", "A"};
         private static string[] OuterBuildTargets = {"AHelperOuter"};
 
-        private static readonly string OuterBuildSpecificationWithProjectReferenceTargets = MultitargetingSpecificationPropertyGroup + ProjectReferenceTargetsWithMultitargeting;
+        private const string OuterBuildSpecificationWithProjectReferenceTargets = MultitargetingSpecificationPropertyGroup + ProjectReferenceTargetsWithMultitargeting;
 
         public ProjectGraphTests(ITestOutputHelper outputHelper)
         {
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index c994edab0ff..0781cc7e896 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -43,7 +43,7 @@ public void Dispose()
             _env.Dispose();
         }
 
-        private static readonly string AssemblyMockCache = nameof(AssemblyMockCache);
+        private const string AssemblyMockCache = nameof(AssemblyMockCache);
 
         private static readonly Lazy<string> SamplePluginAssemblyPath =
             new Lazy<string>(
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index ed90b1fb9cf..1e7b8a1be96 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -69,7 +69,9 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// If this number is increased much higher, the datastructure may
         /// need to be changed from a linked list, since it's currently O(n).
         /// </remarks>
+#pragma warning disable CA1802 // Use literals where appropriate
         private static readonly int s_maximumStrongCacheSize = 200;
+#pragma warning restore CA1802 // Use literals where appropriate
 
         /// <summary>
         /// Whether the cache should log activity to the Debug.Out stream
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index ce9499c546b..081698ea8c8 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -20,7 +20,7 @@ namespace Microsoft.Build.Graph
 {
     internal class GraphBuilder
     {
-        internal static readonly string SolutionItemReference = "_SolutionReference";
+        internal const string SolutionItemReference = "_SolutionReference";
         
         /// <summary>
         /// The thread calling BuildGraph() will act as an implicit worker
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index cd99bc84721..0bb3075d073 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -26,6 +26,46 @@
     <NoWarn>$(NoWarn);NU5104</NoWarn>
   </PropertyGroup>
 
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net472|AnyCPU'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net472|x64'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net472|AnyCPU'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net472|x64'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug-MONO|net472|AnyCPU'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug-MONO|net472|x64'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release-MONO|net472|AnyCPU'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release-MONO|net472|x64'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='MachineIndependent|net472|AnyCPU'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
+  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='MachineIndependent|net472|x64'">
+    <CodeAnalysisRuleSet />
+  </PropertyGroup>
+
   <ItemGroup>
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
diff --git a/src/Shared/FileUtilitiesRegex.cs b/src/Shared/FileUtilitiesRegex.cs
index d3e3b97af5f..0e606cd33b6 100644
--- a/src/Shared/FileUtilitiesRegex.cs
+++ b/src/Shared/FileUtilitiesRegex.cs
@@ -13,8 +13,8 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class FileUtilitiesRegex
     {
-        private static readonly char _backSlash = '\\';
-        private static readonly char _forwardSlash = '/';
+        private const char _backSlash = '\\';
+        private const char _forwardSlash = '/';
 
         /// <summary>
         /// Indicates whether the specified string follows the pattern drive pattern (for example "C:", "D:").
diff --git a/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs b/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
index f8acd297b4e..d0c3c8c7cc3 100644
--- a/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs
@@ -13,9 +13,9 @@ namespace Microsoft.Build.UnitTests
     public class TypeLoader_Dependencies_Tests
     {
         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "TaskWithDependency");
-        private static readonly string ProjectFileName = "TaskWithDependencyTest.proj";
-        private static readonly string TaskDllFileName = "TaskWithDependency.dll";
-        private static readonly string DependencyDllFileName = "Dependency.dll";
+        private const string ProjectFileName = "TaskWithDependencyTest.proj";
+        private const string TaskDllFileName = "TaskWithDependency.dll";
+        private const string DependencyDllFileName = "Dependency.dll";
 
         [Fact]
         public void LoadAssemblyAndDependency_InsideProjectFolder()
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index a572f51576a..5edf241553e 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -14,8 +14,8 @@ namespace Microsoft.Build.UnitTests
     public class TypeLoader_Tests
     {
         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "PortableTask");
-        private static readonly string ProjectFileName = "portableTaskTest.proj";
-        private static readonly string DLLFileName = "PortableTask.dll";
+        private const string ProjectFileName = "portableTaskTest.proj";
+        private const string DLLFileName = "PortableTask.dll";
 
         [Fact]
         public void Basic()
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index b389d8c784c..aec60bb94bb 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -482,8 +482,8 @@ public void MultilineAttributeCSharp()
             File.Delete(task.OutputFile.ItemSpec);
         }
 
-        private static readonly string VBCarriageReturn = "Global.Microsoft.VisualBasic.ChrW(13)";
-        private static readonly string VBLineFeed = "Global.Microsoft.VisualBasic.ChrW(10)";
+        private const string VBCarriageReturn = "Global.Microsoft.VisualBasic.ChrW(13)";
+        private const string VBLineFeed = "Global.Microsoft.VisualBasic.ChrW(10)";
 
         public static readonly string VBLineSeparator = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? $"{VBCarriageReturn}&{VBLineFeed}" : VBLineFeed;
 
