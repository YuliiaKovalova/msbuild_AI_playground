diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index ecbf7b8026b..93ac6d6d4b5 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Framework;
@@ -58,6 +59,11 @@ internal interface ILoggingService : IBuildComponent, IBuildEngineDataRouter
         /// </summary>
         IBuildEngineDataRouter BuildEngineDataRouter { get; }
 
+        /// <summary>
+        /// The mapping of build request configuration ids to project file names.
+        /// </summary>
+        ConcurrentDictionary<int, string> ProjectFileMap { get; }
+
         /// <summary>
         /// Provide the current state of the loggingService.
         /// Is it Inistantiated
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index f547084425d..16d55804c5d 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -62,7 +62,7 @@ internal enum LoggingServiceState
         ShuttingDown,
 
         /// <summary>
-        /// The logging service completly shutdown
+        /// The logging service completely shutdown.
         /// </summary>
         Shutdown
     }
@@ -102,11 +102,6 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler
 
         #region Data
 
-        /// <summary>
-        /// The mapping of build request configuration ids to project file names.
-        /// </summary>
-        private ConcurrentDictionary<int, string> _projectFileMap;
-
         /// <summary>
         /// The current state of the logging service
         /// </summary>
@@ -296,7 +291,7 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler
         /// <param name="nodeId">The node identifier.</param>
         protected LoggingService(LoggerMode loggerMode, int nodeId)
         {
-            _projectFileMap = new ConcurrentDictionary<int, string>();
+            ProjectFileMap = new ConcurrentDictionary<int, string>();
             _logMode = loggerMode;
             _loggers = new List<ILogger>();
             _loggerDescriptions = new List<LoggerDescription>();
@@ -362,6 +357,12 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
         /// </summary>
         public IBuildEngineDataRouter BuildEngineDataRouter => this;
 
+
+        /// <summary>
+        /// The mapping of build request configuration ids to project file names.
+        /// </summary>
+        public ConcurrentDictionary<int, string> ProjectFileMap { get; }
+
         /// <summary>
         /// Properties we need to serialize from the child node
         /// </summary>
@@ -1858,7 +1859,7 @@ private void TryRaiseProjectFinishedEvent(BuildEventArgs args)
         /// </summary>
         private string GetAndVerifyProjectFileFromContext(BuildEventContext context)
         {
-            _projectFileMap.TryGetValue(context.ProjectContextId, out string projectFile);
+            ProjectFileMap.TryGetValue(context.ProjectContextId, out string projectFile);
 
             // PERF: Not using VerifyThrow to avoid boxing an int in the non-error case.
             if (projectFile == null)
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index c7822f0c7aa..b64a420fe9e 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -134,7 +134,7 @@ public void LogErrorFromText(BuildEventContext buildEventContext, string subcate
 
             if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
             {
-                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ProjectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
                 ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
                 buildEvent.ProjectFile = projectFile;
             }
@@ -174,7 +174,7 @@ public void LogInvalidProjectFileError(BuildEventContext buildEventContext, Inva
                 buildEvent.BuildEventContext = buildEventContext;
                 if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
                 {
-                    _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                    ProjectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
                     ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
                     buildEvent.ProjectFile = projectFile;
                 }
@@ -326,7 +326,7 @@ public void LogWarningFromText(BuildEventContext buildEventContext, string subca
             buildEvent.BuildEventContext = buildEventContext;
             if (buildEvent.ProjectFile == null && buildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId)
             {
-                _projectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
+                ProjectFileMap.TryGetValue(buildEventContext.ProjectContextId, out string projectFile);
                 ErrorUtilities.VerifyThrow(projectFile != null, "ContextID {0} should have been in the ID-to-project file mapping but wasn't!", buildEventContext.ProjectContextId);
                 buildEvent.ProjectFile = projectFile;
             }
@@ -414,7 +414,7 @@ public BuildEventContext CreateProjectCacheBuildEventContext(
             int projectContextId = NextProjectId;
 
             // In the future if some LogProjectCacheStarted event is created, move this there to align with evaluation and build execution.
-            _projectFileMap[projectContextId] = projectFile;
+            ProjectFileMap[projectContextId] = projectFile;
 
             // Because the project cache runs in the BuildManager, it makes some sense to associate logging with the in-proc node.
             // If a invalid node id is used the messages become deferred in the console logger and spit out at the end.
@@ -505,17 +505,17 @@ public BuildEventContext LogProjectStarted(
                 projectContextId = NextProjectId;
 
                 // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-                if (_projectFileMap.ContainsKey(projectContextId))
+                if (ProjectFileMap.ContainsKey(projectContextId))
                 {
                     ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should not already be in the ID-to-file mapping!", projectContextId, projectFile);
                 }
 
-                _projectFileMap[projectContextId] = projectFile;
+                ProjectFileMap[projectContextId] = projectFile;
             }
             else
             {
                 // A projectContextId was provided, so use it with some sanity checks
-                if (_projectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
+                if (ProjectFileMap.TryGetValue(projectContextId, out string existingProjectFile))
                 {
                     if (!projectFile.Equals(existingProjectFile, StringComparison.OrdinalIgnoreCase))
                     {
@@ -532,7 +532,7 @@ public BuildEventContext LogProjectStarted(
                         ErrorUtilities.ThrowInternalError("ContextID {0} should have been in the ID-to-project file mapping but wasn't!", projectContextId);
                     }
 
-                    _projectFileMap[projectContextId] = projectFile;
+                    ProjectFileMap[projectContextId] = projectFile;
                 }
             }
 
@@ -585,7 +585,7 @@ public void LogProjectFinished(BuildEventContext projectBuildEventContext, strin
             ProcessLoggingEvent(buildEvent);
 
             // PERF: Not using VerifyThrow to avoid boxing of projectBuildEventContext.ProjectContextId in the non-error case.
-            if (!_projectFileMap.TryRemove(projectBuildEventContext.ProjectContextId, out _))
+            if (!ProjectFileMap.TryRemove(projectBuildEventContext.ProjectContextId, out _))
             {
                 ErrorUtilities.ThrowInternalError("ContextID {0} for project {1} should be in the ID-to-file mapping!", projectBuildEventContext.ProjectContextId, projectFile);
             }
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index 299d855123a..83cf231ebe8 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -16,15 +16,13 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public sealed class BuildCheckResult : IBuildCheckResult
 {
-    public static BuildCheckResult Create(BuildAnalyzerRule rule, ElementLocation location, params string[] messageArgs)
-    {
-        return new BuildCheckResult(rule, location, messageArgs);
-    }
+    public static BuildCheckResult Create(BuildAnalyzerRule rule, ElementLocation location, string projectFile, params string[] messageArgs) => new BuildCheckResult(rule, location, projectFile, messageArgs);
 
-    public BuildCheckResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation location, string[] messageArgs)
+    public BuildCheckResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation location, string projectFile, string[] messageArgs)
     {
         BuildAnalyzerRule = buildAnalyzerRule;
         Location = location;
+        ProjectFile = projectFile;
         MessageArgs = messageArgs;
     }
 
@@ -44,6 +42,11 @@ internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
     /// </summary>
     public ElementLocation Location { get; }
 
+    /// <summary>
+    /// Gets project file path where the finding was reported.
+    /// </summary>
+    public string ProjectFile { get; }
+
     public string LocationString => Location.LocationString;
 
     public string[] MessageArgs { get; }
diff --git a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
index 0804d6d76c3..237a13656ad 100644
--- a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
@@ -3,13 +3,8 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
-using System.Diagnostics;
 using System.IO;
 using System.Linq;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
 using static Microsoft.Build.Experimental.BuildCheck.TaskInvocationAnalysisData;
 
 #if FEATURE_MSIOREDIST
@@ -114,6 +109,7 @@ private void AnalyzeWrite(BuildCheckDataContext<TaskInvocationAnalysisData> cont
                 context.ReportResult(BuildCheckResult.Create(
                     SupportedRule,
                     context.Data.TaskInvocationLocation,
+                    context.Data.ProjectFilePath,
                     context.Data.TaskName,
                     existingEntry.taskName,
                     Path.GetFileName(context.Data.ProjectFilePath),
diff --git a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
index f12fdb063b7..b7161606cf0 100644
--- a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
@@ -56,6 +56,7 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Evaluate
                         context.ReportResult(BuildCheckResult.Create(
                             SupportedRule,
                             ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
+                            context.Data.ProjectFilePath,
                             $"'{envVariableData.Key}' with value: '{envVariableData.Value.EnvVarValue}'"));
                     }
                     else
@@ -63,6 +64,7 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Evaluate
                         context.ReportResult(BuildCheckResult.Create(
                             SupportedRule,
                             ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
+                            context.Data.ProjectFilePath,
                             $"'{envVariableData.Key}'"));
                     }
 
diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 4bcb8b1672d..ecbb9b1c713 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -85,6 +85,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
                 SupportedRule,
                 // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732
                 ElementLocation.EmptyLocation,
+                projectPath,
                 Path.GetFileName(projectPath),
                 Path.GetFileName(conflictingProject),
                 path!));
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
index 5df77259f6e..1fc55667570 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs
@@ -1,11 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -25,8 +20,15 @@ internal readonly struct AnalysisLoggingContext(ILoggingService loggingService,
     public BuildEventContext BuildEventContext => eventContext;
 
     public void DispatchBuildEvent(BuildEventArgs buildEvent)
-        => loggingService
-            .LogBuildEvent(buildEvent);
+    {
+        // When logging happens out of process, we need to map the project context id to the project file on the receiving side.
+        if (ShouldUpdateProjectFileMap(buildEvent))
+        {
+            UpdateProjectFileMap(buildEvent);
+        }
+
+        loggingService.LogBuildEvent(buildEvent);
+    }
 
     public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)
         => loggingService
@@ -39,4 +41,25 @@ public void DispatchAsCommentFromText(MessageImportance importance, string messa
     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
         => loggingService
             .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
+
+    private bool ShouldUpdateProjectFileMap(BuildEventArgs buildEvent) => buildEvent.BuildEventContext != null &&
+               buildEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId &&
+               !loggingService.ProjectFileMap.ContainsKey(buildEvent.BuildEventContext.ProjectContextId);
+
+    private void UpdateProjectFileMap(BuildEventArgs buildEvent)
+    {
+        string file = GetFileFromBuildEvent(buildEvent);
+        if (!string.IsNullOrEmpty(file))
+        {
+            loggingService.ProjectFileMap[buildEvent.BuildEventContext!.ProjectContextId] = file;
+        }
+    }
+
+    private string GetFileFromBuildEvent(BuildEventArgs buildEvent) => buildEvent switch
+    {
+        BuildWarningEventArgs we => we.File,
+        BuildErrorEventArgs ee => ee.File,
+        BuildMessageEventArgs me => me.File,
+        _ => string.Empty,
+    };
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 05134a3c8c1..67cae4ebd31 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -224,10 +224,7 @@ private static void ReportResult(
         }
 
         BuildEventArgs eventArgs = result.ToEventArgs(config.Severity);
-
-        // TODO: This is a workaround for https://github.com/dotnet/msbuild/issues/10176
-        // eventArgs.BuildEventContext = loggingContext.BuildEventContext;
-        eventArgs.BuildEventContext = BuildEventContext.Invalid;
+        eventArgs.BuildEventContext = analysisContext.BuildEventContext;
 
         analysisContext.DispatchBuildEvent(eventArgs);
     }
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 248a2d193fc..cf11ba902b6 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -113,10 +113,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 internal sealed class BuildCheckResultWarning : BuildWarningEventArgs
 {
     public BuildCheckResultWarning(IBuildCheckResult result, string code)
-        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
-    {
-        RawMessage = result.FormatMessage();
-    }
+        : base(subcategory: null, code: code, file: result.ProjectFile, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
+        => RawMessage = result.FormatMessage();
 
     internal BuildCheckResultWarning() { }
 
@@ -138,10 +136,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 internal sealed class BuildCheckResultError : BuildErrorEventArgs
 {
     public BuildCheckResultError(IBuildCheckResult result, string code)
-        : base(subcategory: null, code: code, file: null, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
-    {
-        RawMessage = result.FormatMessage();
-    }
+        : base(subcategory: null, code: code, file: result.ProjectFile, lineNumber: 0, columnNumber: 0, endLineNumber: 0, endColumnNumber: 0, message: result.FormatMessage(), helpKeyword: null, senderName: null)
+        => RawMessage = result.FormatMessage();
 
     internal BuildCheckResultError() { }
 
@@ -165,6 +161,7 @@ internal sealed class BuildCheckResultMessage : BuildMessageEventArgs
     public BuildCheckResultMessage(IBuildCheckResult result)
     {
         RawMessage = result.FormatMessage();
+        File = result.ProjectFile;
     }
 
     internal BuildCheckResultMessage() { }
@@ -174,6 +171,7 @@ internal override void WriteToStream(BinaryWriter writer)
         base.WriteToStream(writer);
 
         writer.Write(RawMessage!);
+        writer.Write(File);
     }
 
     internal override void CreateFromStream(BinaryReader reader, int version)
@@ -181,5 +179,6 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         base.CreateFromStream(reader, version);
 
         RawMessage = reader.ReadString();
+        File = reader.ReadString();
     }
 }
diff --git a/src/Framework/BuildCheck/IBuildCheckResult.cs b/src/Framework/BuildCheck/IBuildCheckResult.cs
index 1d471e6c9bc..6cf05cb7c6d 100644
--- a/src/Framework/BuildCheck/IBuildCheckResult.cs
+++ b/src/Framework/BuildCheck/IBuildCheckResult.cs
@@ -1,12 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 /// <summary>
@@ -18,7 +12,14 @@ internal interface IBuildCheckResult
     /// Optional location of the finding (in near future we might need to support multiple locations).
     /// </summary>
     string LocationString { get; }
+
+    /// <summary>
+    /// Gets project file path where the finding was reported.
+    /// </summary>
+    string ProjectFile { get; }
+
     string[] MessageArgs { get; }
+
     string MessageFormat { get; }
 
     string FormatMessage();
