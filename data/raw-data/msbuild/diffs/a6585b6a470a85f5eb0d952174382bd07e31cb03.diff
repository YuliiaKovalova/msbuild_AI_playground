diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 8ccd53c4edc..4d1ddbfc907 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -49,7 +49,7 @@ internal void DeregisterCheck(CheckWrapper check)
 
     // In a future we can have callbacks per project as well
     private readonly CallbackRegistry _globalCallbacks = new();
-    private Action<ICheckContext> _removeThrottledChecks;
+    private readonly Action<ICheckContext> _removeThrottledChecks;
 
     // This we can potentially use to subscribe for receiving evaluated props in the
     //  build event args. However - this needs to be done early on, when checks might not be known yet
diff --git a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
index 5bf47566449..0d02071aec7 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
@@ -31,7 +31,7 @@ internal sealed class CheckWrapper
     /// <summary>
     /// Flags that this check should no more used and be deregistered.
     /// </summary>
-    public bool IsThrottled = false;
+    public bool IsThrottled { get; private set; } = false;
 
     /// <summary>
     /// Whether to limit number of reports for the Check.
@@ -76,19 +76,21 @@ internal void StartNewProject(
 
     internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)
     {
-        if (_limitReportsNumber)
+        if (!IsThrottled)
         {
-            if (_reportsCount >= MaxReportsNumberPerRule)
+            _reportsCount++;
+            BuildEventArgs eventArgs = result.ToEventArgs(config.Severity);
+            eventArgs.BuildEventContext = checkContext.BuildEventContext;
+            checkContext.DispatchBuildEvent(eventArgs);
+
+            if (_limitReportsNumber)
             {
-                IsThrottled = true;
-                return;
+                if (_reportsCount >= MaxReportsNumberPerRule)
+                {
+                    IsThrottled = true;
+                }
             }
         }
-
-        _reportsCount++;
-        BuildEventArgs eventArgs = result.ToEventArgs(config.Severity);
-        eventArgs.BuildEventContext = checkContext.BuildEventContext;
-        checkContext.DispatchBuildEvent(eventArgs);
     }
 
     // to be used on eval node (BuildCheckDataSource.check)
