diff --git a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
new file mode 100644
index 00000000000..22c480d4b72
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
@@ -0,0 +1,34 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using Microsoft.Build.Utilities;
+namespace Microsoft.Build.UnitTests
+{
+    public class CustomLogAndReturnTask : Task
+    {
+        public string WarningCode { get; set; }
+
+        public string ErrorCode { get; set; }
+
+        [Required]
+        public bool Return { get; set; }
+
+        /// <summary>
+        /// This task returns and logs what you want based on the running test.
+        /// </summary>
+        public override bool Execute()
+        {
+            if(!string.IsNullOrEmpty(WarningCode))
+            {
+                Log.LogWarning(null, WarningCode, null, null, 0, 0, 0, 0, "Warning Logged!", null);
+            }
+
+            if(!string.IsNullOrEmpty(ErrorCode))
+            {
+                Log.LogError(null, ErrorCode, null, null, 0, 0, 0, 0, "Error Logged!", null);
+            }
+            return Return;
+        }
+    }
+}
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 5ae040eb353..dcd2f9f82a9 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -300,6 +300,35 @@ public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()
             }
         }
 
+        /// <summary>
+        /// MSBuild behavior as of 16.10: As long as a task returns true, the build will continue despite logging an error.
+        /// </summary>
+        [Fact]
+        public void TaskReturnsTrueButLogsError_BuildShouldContinue()
+        {
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
+                <Project>
+                    <UsingTask TaskName = ""ReturnFailureWithoutLoggingErrorTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""CustomLogAndReturnTask"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <UsingTask TaskName = ""LogWarningReturnHasLoggedError"" AssemblyName=""Microsoft.Build.Engine.UnitTests""/>
+                    <Target Name='Build'>
+                        <CustomLogAndReturnTask Return=""true"" ErrorCode=""MSB1235""/>
+                        <LogWarningReturnHasLoggedError WarningCode=""MSB1234""/>
+                    </Target>
+                </Project>");
+
+                MockLogger logger = proj.BuildProjectExpectSuccess();
+
+                logger.WarningCount.ShouldBe(1);
+                logger.ErrorCount.ShouldBe(1);
+
+                // The build should CONTINUE when a task returns true.
+                logger.AssertLogContains("MSB1234");
+            }
+        }
+
         [Fact]
         public void TaskReturnsFailureButDoesNotLogError_ShouldCauseBuildFailure()
         {
