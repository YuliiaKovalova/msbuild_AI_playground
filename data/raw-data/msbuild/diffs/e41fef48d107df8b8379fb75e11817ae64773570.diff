diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 56dcda004ed..bedccfe03cd 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -318,7 +318,7 @@ public IEnumerable<ScheduleResponse> ReportRequestBlocked(int nodeId, BuildReque
                 else if ((blocker.BlockingRequestId == blocker.BlockedRequestId) && blocker.BlockingRequestId != BuildRequest.InvalidGlobalRequestId)
                 {
                     ErrorUtilities.VerifyThrow(string.IsNullOrEmpty(blocker.BlockingTarget), "Blocking target should be null because this is not a request blocking on a target");
-                    // We are blocked waiting for a transfer of results.
+                    // We are blocked waiting for a transfer of results.                    
                     HandleRequestBlockedOnResultsTransfer(parentRequest, responses);
                 }
                 else if (blocker.BlockingRequestId != BuildRequest.InvalidGlobalRequestId)
@@ -349,7 +349,7 @@ public IEnumerable<ScheduleResponse> ReportRequestBlocked(int nodeId, BuildReque
                 responses.Add(ScheduleResponse.CreateCircularDependencyResponse(nodeId, parentRequest.BuildRequest, ex.Request));
             }
 
-            // Now see if we can schedule requests somewhere since we
+            // Now see if we can schedule requests somewhere since we 
             // a) have a new request; and
             // b) have a node which is now waiting and not doing anything.
             ScheduleUnassignedRequests(responses);
@@ -368,7 +368,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
             if (result.NodeRequestId == BuildRequest.ResultsTransferNodeRequestId)
             {
-                // We are transferring results.  The node to which they should be sent has already been recorded by the
+                // We are transferring results.  The node to which they should be sent has already been recorded by the 
                 // HandleRequestBlockedOnResultsTransfer method in the configuration.
                 BuildRequestConfiguration config = _configCache[result.ConfigurationId];
                 ScheduleResponse response = ScheduleResponse.CreateReportResultResponse(config.ResultsNodeId, result);
@@ -380,7 +380,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
                 SchedulableRequest request = _schedulingData.GetExecutingRequest(result.GlobalRequestId);
                 request.Complete(result);
 
-                // Report results to our parent, or report submission complete as necessary.
+                // Report results to our parent, or report submission complete as necessary.            
                 if (request.Parent != null)
                 {
                     // responses.Add(new ScheduleResponse(request.Parent.AssignedNode, new BuildRequestUnblocker(request.Parent.BuildRequest.GlobalRequestId, result)));
@@ -388,10 +388,10 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
                     // When adding the result to the cache we merge the result with what ever is already in the cache this may cause
                     // the result to have more target outputs in it than was was requested.  To fix this we can ask the cache itself for the result we just added.
-                    // When results are returned from the cache we filter them based on the targets we requested. This causes our result to only
+                    // When results are returned from the cache we filter them based on the targets we requested. This causes our result to only 
                     // include the targets we requested rather than the merged result.
 
-                    // Note: In this case we do not need to log that we got the results from the cache because we are only using the cache
+                    // Note: In this case we do not need to log that we got the results from the cache because we are only using the cache 
                     // for filtering the targets for the result instead rather than using the cache as the location where this result came from.
                     ScheduleResponse response = TrySatisfyRequestFromCache(request.Parent.AssignedNode, request.BuildRequest, skippedResultsDoNotCauseCacheMiss: _componentHost.BuildParameters.SkippedResultsDoNotCauseCacheMiss());
 
@@ -429,13 +429,13 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
                         int parentNode = (unscheduledRequest.Parent == null) ? InvalidNodeId : unscheduledRequest.Parent.AssignedNode;
 
                         // There are other requests which we can satisfy based on this result, lets pull the result out of the cache
-                        // and satisfy those requests.  Normally a skipped result would lead to the cache refusing to satisfy the
-                        // request, because the correct response in that case would be to attempt to rebuild the target in case there
+                        // and satisfy those requests.  Normally a skipped result would lead to the cache refusing to satisfy the 
+                        // request, because the correct response in that case would be to attempt to rebuild the target in case there 
                         // are state changes that would cause it to now excute.  At this point, however, we already know that the parent
-                        // request has completed, and we already know that this request has the same global request ID, which means that
-                        // its configuration and set of targets are identical -- from MSBuild's perspective, it's the same.  So since
-                        // we're not going to attempt to re-execute it, if there are skipped targets in the result, that's fine. We just
-                        // need to know what the target results are so that we can log them.
+                        // request has completed, and we already know that this request has the same global request ID, which means that 
+                        // its configuration and set of targets are identical -- from MSBuild's perspective, it's the same.  So since 
+                        // we're not going to attempt to re-execute it, if there are skipped targets in the result, that's fine. We just 
+                        // need to know what the target results are so that we can log them. 
                         ScheduleResponse response = TrySatisfyRequestFromCache(parentNode, unscheduledRequest.BuildRequest, skippedResultsDoNotCauseCacheMiss: true);
 
                         // If we have a response we need to tell the loggers that we satisified that request from the cache.
@@ -445,8 +445,8 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
                         }
                         else
                         {
-                            // Response may be null if the result was never added to the cache. This can happen if the result has
-                            // an exception in it. If that is the case, we should report the result directly so that the
+                            // Response may be null if the result was never added to the cache. This can happen if the result has 
+                            // an exception in it. If that is the case, we should report the result directly so that the 
                             // build manager knows that it needs to shut down logging manually.
                             response = GetResponseForResult(parentNode, unscheduledRequest.BuildRequest, newResult.Clone());
                         }
@@ -507,7 +507,7 @@ public void ReportBuildAborted(int nodeId)
         {
             _schedulingData.EventTime = DateTime.UtcNow;
 
-            // Get the list of build requests currently assigned to the node and report aborted results for them.
+            // Get the list of build requests currently assigned to the node and report aborted results for them.            
             TraceScheduler("Build aborted by node {0}", nodeId);
 
             foreach (SchedulableRequest request in _schedulingData.GetScheduledRequestsByNode(nodeId))
@@ -727,15 +727,15 @@ private void ScheduleUnassignedRequests(List<ScheduleResponse> responses)
                 }
                 else if (_schedulingData.BlockedRequestsCount != 0)
                 {
-                    // It is legitimate to have blocked requests with none executing if none of the requests can
-                    // be serviced by any currently existing node, or if they are blocked by requests, none of
-                    // which can be serviced by any currently existing node.  However, in that case, we had better
-                    // be requesting the creation of a node that can service them.
+                    // It is legitimate to have blocked requests with none executing if none of the requests can 
+                    // be serviced by any currently existing node, or if they are blocked by requests, none of 
+                    // which can be serviced by any currently existing node.  However, in that case, we had better 
+                    // be requesting the creation of a node that can service them.  
                     //
-                    // Note: This is O(# nodes * closure of requests blocking current set of blocked requests),
-                    // but all three numbers should usually be fairly small and, more importantly, this situation
-                    // should occur at most once per build, since it requires a situation where all blocked requests
-                    // are blocked on the creation of a node that can service them.
+                    // Note: This is O(# nodes * closure of requests blocking current set of blocked requests), 
+                    // but all three numbers should usually be fairly small and, more importantly, this situation 
+                    // should occur at most once per build, since it requires a situation where all blocked requests 
+                    // are blocked on the creation of a node that can service them. 
                     foreach (SchedulableRequest request in _schedulingData.BlockedRequests)
                     {
                         if (RequestOrAnyItIsBlockedByCanBeServiced(request))
@@ -843,7 +843,7 @@ private bool GetSchedulingPlanAndAlgorithm()
 
                 if (!String.IsNullOrEmpty(customScheduler))
                 {
-                    // Assign to the delegate
+                    // Assign to the delegate 
                     if (customScheduler.Equals("WithPlanByMostImmediateReferences", StringComparison.OrdinalIgnoreCase) && _schedulingPlan.IsPlanValid)
                     {
                         _customRequestSchedulingAlgorithm = AssignUnscheduledRequestsWithPlanByMostImmediateReferences;
@@ -886,7 +886,7 @@ private bool GetSchedulingPlanAndAlgorithm()
 
                         string multiplier = Environment.GetEnvironmentVariable("MSBUILDCUSTOMSCHEDULERFORSQLCONFIGURATIONLIMITMULTIPLIER");
                         double convertedMultiplier = 0;
-                        if (!Double.TryParse(multiplier, NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture.NumberFormat, out convertedMultiplier) || convertedMultiplier < 1)
+                        if (!Double.TryParse(multiplier, out convertedMultiplier) || convertedMultiplier < 1)
                         {
                             _customSchedulerForSQLConfigurationLimitMultiplier = DefaultCustomSchedulerForSQLConfigurationLimitMultiplier;
                         }
@@ -1142,7 +1142,7 @@ private void AssignUnscheduledRequestsWithMaxWaitingRequests(List<ScheduleRespon
                     BuildRequest currentRequest = currentSchedulableRequest.BuildRequest;
                     int requiredNodeId = _schedulingData.GetAssignedNodeForRequestConfiguration(currentRequest.ConfigurationId);
 
-                    // This performs the depth-first traversal, assuming that the unassigned build requests has been populated such that the
+                    // This performs the depth-first traversal, assuming that the unassigned build requests has been populated such that the 
                     // top-most requests are the ones most recently issued.  We schedule the first request which can be scheduled to this node.
                     if (requiredNodeId == InvalidNodeId || requiredNodeId == nodeId)
                     {
@@ -1276,7 +1276,7 @@ private void AssignUnscheduledRequestsUsingCustomSchedulerForSQL(List<ScheduleRe
 
             Dictionary<int, int> configurationCountsByNode = new Dictionary<int, int>(_availableNodes.Count);
 
-            // The configuration count limit will be the average configuration count * X (to allow for some wiggle room) where
+            // The configuration count limit will be the average configuration count * X (to allow for some wiggle room) where 
             // the default value of X is 1.1 (+ 10%)
             int configurationCountLimit = 0;
 
@@ -1315,8 +1315,8 @@ private void AssignUnscheduledRequestsUsingCustomSchedulerForSQL(List<ScheduleRe
                     {
                         int requiredNodeId = _schedulingData.GetAssignedNodeForRequestConfiguration(request.BuildRequest.ConfigurationId);
 
-                        // Only schedule an entirely new configuration (one not already tied to this node) to this node if we're
-                        // not already over the limit needed to keep a reasonable balance.
+                        // Only schedule an entirely new configuration (one not already tied to this node) to this node if we're 
+                        // not already over the limit needed to keep a reasonable balance. 
                         if (request.AssignedNode == nodeId || requiredNodeId == nodeId || configurationCountsByNode[nodeId] <= configurationCountLimit)
                         {
                             AssignUnscheduledRequestToNode(request, nodeId, responses);
@@ -1331,8 +1331,8 @@ private void AssignUnscheduledRequestsUsingCustomSchedulerForSQL(List<ScheduleRe
                 }
             }
 
-            // at this point, we may still have work left unassigned, but that's OK -- we're deliberately choosing to delay assigning all available
-            // requests in order to avoid overloading certain nodes with excess numbers of requests.
+            // at this point, we may still have work left unassigned, but that's OK -- we're deliberately choosing to delay assigning all available 
+            // requests in order to avoid overloading certain nodes with excess numbers of requests.  
         }
 
         /// <summary>
@@ -1409,7 +1409,7 @@ private bool AtSchedulingLimit()
                 return false;
             }
 
-            // We're at our limit of schedulable requests if:
+            // We're at our limit of schedulable requests if: 
             // (1) MaxNodeCount requests are currently executing
             if (_schedulingData.ExecutingRequestsCount >= _componentHost.BuildParameters.MaxNodeCount)
             {
@@ -1471,9 +1471,9 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
             {
                 int assignedNodeForConfiguration = _schedulingData.GetAssignedNodeForRequestConfiguration(request.BuildRequest.ConfigurationId);
 
-                // Although this request has not been scheduled, this configuration may previously have been
-                // scheduled to an existing node.  If so, we shouldn't count it in our checks for new node
-                // creation, because it'll only eventually get assigned to its existing node anyway.
+                // Although this request has not been scheduled, this configuration may previously have been 
+                // scheduled to an existing node.  If so, we shouldn't count it in our checks for new node 
+                // creation, because it'll only eventually get assigned to its existing node anyway.  
                 if (assignedNodeForConfiguration != Scheduler.InvalidNodeId)
                 {
                     continue;
@@ -1486,9 +1486,9 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
                     case NodeAffinity.InProc:
                         inProcNodesToCreate++;
 
-                        // If we've previously seen "Any"-affinitized requests, now that there are some
-                        // genuine inproc requests, they get to play with the inproc node first, so
-                        // push the "Any" requests to the out-of-proc nodes.
+                        // If we've previously seen "Any"-affinitized requests, now that there are some 
+                        // genuine inproc requests, they get to play with the inproc node first, so 
+                        // push the "Any" requests to the out-of-proc nodes.  
                         if (requestsWithAnyAffinityOnInProcNodes > 0)
                         {
                             requestsWithAnyAffinityOnInProcNodes--;
@@ -1525,7 +1525,7 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
                         break;
                 }
 
-                // We've already hit the limit of the number of nodes we'll be allowed to create, so just quit counting now.
+                // We've already hit the limit of the number of nodes we'll be allowed to create, so just quit counting now. 
                 if (inProcNodesToCreate >= availableNodesWithInProcAffinity && outOfProcNodesToCreate >= availableNodesWithOutOfProcAffinity)
                 {
                     break;
@@ -1535,7 +1535,7 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
             // If we think we want to create inproc nodes
             if (inProcNodesToCreate > 0)
             {
-                // In-proc node determination is simple: we want as many as are available.
+                // In-proc node determination is simple: we want as many as are available.  
                 inProcNodesToCreate = Math.Min(availableNodesWithInProcAffinity, inProcNodesToCreate);
 
                 // If we still want to create one, go ahead
@@ -1545,8 +1545,8 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
                     TraceScheduler("Requesting creation of new node satisfying affinity {0}", NodeAffinity.InProc);
                     responses.Add(ScheduleResponse.CreateNewNodeResponse(NodeAffinity.InProc, 1));
 
-                    // We only want to submit one node creation request at a time -- as part of node creation we recursively re-request the scheduler
-                    // to do more scheduling, so the other request will be dealt with soon enough.
+                    // We only want to submit one node creation request at a time -- as part of node creation we recursively re-request the scheduler 
+                    // to do more scheduling, so the other request will be dealt with soon enough.  
                     return true;
                 }
             }
@@ -1554,17 +1554,17 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
             // If we think we want to create out-of-proc nodes
             if (outOfProcNodesToCreate > 0)
             {
-                // Out-of-proc node determination is a bit more complicated.  If we have N out-of-proc requests, we want to
-                // fill up to N out-of-proc nodes.  However, if we have N "any" requests, we must assume that at least some of them
-                // will be fulfilled by the inproc node, in which case we only want to launch up to N-1 out-of-proc nodes, for a
-                // total of N nodes overall -- the scheduler will only schedule to N nodes at a time, so launching any more than that
-                // is ultimately pointless.
+                // Out-of-proc node determination is a bit more complicated.  If we have N out-of-proc requests, we want to 
+                // fill up to N out-of-proc nodes.  However, if we have N "any" requests, we must assume that at least some of them 
+                // will be fulfilled by the inproc node, in which case we only want to launch up to N-1 out-of-proc nodes, for a 
+                // total of N nodes overall -- the scheduler will only schedule to N nodes at a time, so launching any more than that 
+                // is ultimately pointless. 
                 int maxCreatableOutOfProcNodes = availableNodesWithOutOfProcAffinity;
 
                 if (requestsWithOutOfProcAffinity < availableNodesWithOutOfProcAffinity)
                 {
-                    // We don't have enough explicitly out-of-proc requests to justify creating every technically allowed
-                    // out-of-proc node, so our max is actually one less than the absolute max for the reasons explained above.
+                    // We don't have enough explicitly out-of-proc requests to justify creating every technically allowed 
+                    // out-of-proc node, so our max is actually one less than the absolute max for the reasons explained above. 
                     maxCreatableOutOfProcNodes--;
                 }
 
@@ -1577,12 +1577,12 @@ private bool CreateNewNodeIfPossible(List<ScheduleResponse> responses, IEnumerab
                     responses.Add(ScheduleResponse.CreateNewNodeResponse(NodeAffinity.OutOfProc, outOfProcNodesToCreate));
                 }
 
-                // We only want to submit one node creation request at a time -- as part of node creation we recursively re-request the scheduler
-                // to do more scheduling, so the other request will be dealt with soon enough.
+                // We only want to submit one node creation request at a time -- as part of node creation we recursively re-request the scheduler 
+                // to do more scheduling, so the other request will be dealt with soon enough.  
                 return true;
             }
 
-            // If we haven't returned before now, we haven't asked that any new nodes be created.
+            // If we haven't returned before now, we haven't asked that any new nodes be created.  
             return false;
         }
 
@@ -1647,14 +1647,14 @@ private void HandleRequestBlockedOnResultsTransfer(SchedulableRequest parentRequ
             // we will update the storage location in the configuration.  This is doing a bit of a run around the scheduler - we don't
             // create a new formal request, so we treat the blocked request as if it is still executing - this prevents any other requests
             // from getting onto that node and also means we don't have to do additional work to get the scheduler to understand the bizarre
-            // case of sending a request for results from a project's own configuration (which it believes reside on the very node which
+            // case of sending a request for results from a project's own configuration (which it believes reside on the very node which 
             // is actually requesting the results in the first place.)
             BuildRequestConfiguration configuration = _configCache[parentRequest.BuildRequest.ConfigurationId];
             responses.Add(ScheduleResponse.CreateScheduleResponse(configuration.ResultsNodeId, newRequest, false));
 
             TraceScheduler("Created request {0} (node request {1}) for transfer of configuration {2}'s results from node {3} to node {4}", newRequest.GlobalRequestId, newRequest.NodeRequestId, configuration.ConfigurationId, configuration.ResultsNodeId, parentRequest.AssignedNode);
 
-            // The configuration's results will now be homed at the new location (once they have come back from the
+            // The configuration's results will now be homed at the new location (once they have come back from the 
             // original node.)
             configuration.ResultsNodeId = parentRequest.AssignedNode;
         }
@@ -1856,7 +1856,7 @@ private void ResolveRequestFromCacheAndResumeIfPossible(SchedulableRequest reque
                         responses.Add(response);
                     }
 
-                    // Is the node we are reporting to idle? If so, does reporting this result allow it to proceed with work?
+                    // Is the node we are reporting to idle? If so, does reporting this result allow it to proceed with work? 
                     if (!_schedulingData.IsNodeWorking(response.NodeId))
                     {
                         ResumeReadyRequestIfAny(response.NodeId, responses);
@@ -2090,7 +2090,7 @@ internal void RecordResultToCurrentCacheIfConfigNotInOverrideCache(BuildResult r
         /// </summary>
         private ScheduleResponse GetResponseForResult(int parentRequestNode, BuildRequest requestWhichGeneratedResult, BuildResult result)
         {
-            // We have results, return them to the originating node, or if it is a root request, mark the submission complete.
+            // We have results, return them to the originating node, or if it is a root request, mark the submission complete.      
             if (requestWhichGeneratedResult.IsRootRequest)
             {
                 // return new ScheduleResponse(result);
@@ -2209,9 +2209,9 @@ private bool RequestOrAnyItIsBlockedByCanBeServiced(SchedulableRequest request)
                     }
                 }
 
-                // if none of the requests we are blocked by can be serviced, it doesn't matter
-                // whether we can be serviced or not -- the reason we're blocked is because none
-                // of the requests we are blocked by can be serviced.
+                // if none of the requests we are blocked by can be serviced, it doesn't matter 
+                // whether we can be serviced or not -- the reason we're blocked is because none 
+                // of the requests we are blocked by can be serviced. 
                 return false;
             }
             else
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 32eaa740a21..d0c6ea7f0fe 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -4526,7 +4526,7 @@ private static bool TryConvertToInt(object value, out int arg0)
                     case int i:
                         arg0 = i;
                         return true;
-                    case string s when int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out arg0):
+                    case string s when int.TryParse(s, out arg0):
                         return true;
                 }
 
@@ -4541,7 +4541,7 @@ private static bool TryConvertToDouble(object value, out double arg)
                     arg = unboxed;
                     return true;
                 }
-                else if (value is string str && double.TryParse(str, NumberStyles.Number | NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out arg))
+                else if (value is string str && double.TryParse(str, out arg))
                 {
                     return true;
                 }
diff --git a/src/Shared/Tracing.cs b/src/Shared/Tracing.cs
index 51013cb06f2..71b52e4d565 100644
--- a/src/Shared/Tracing.cs
+++ b/src/Shared/Tracing.cs
@@ -5,7 +5,6 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
-using System.Globalization;
 #if DEBUG
 using System.Reflection;
 #endif
@@ -19,7 +18,7 @@ namespace Microsoft.Build.Internal
     /// </summary>
     internal static class Tracing
     {
-        // Disabling warning about unused fields -- this is effectively a
+        // Disabling warning about unused fields -- this is effectively a 
         // debug-only class, so these fields cause a build break in RET
 #pragma warning disable 649
         /// <summary>
@@ -44,7 +43,7 @@ internal static class Tracing
 
         /// <summary>
         /// Short name of the current assembly - to distinguish statics when this type is shared into different assemblies
-        /// </summary>
+        /// </summary> 
         private static string s_currentAssemblyName;
 #pragma warning restore 649
 
@@ -59,7 +58,7 @@ static Tracing()
 
             string val = Environment.GetEnvironmentVariable("MSBUILDTRACEINTERVAL");
             double seconds;
-            if (!String.IsNullOrEmpty(val) && System.Double.TryParse(val, NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture.NumberFormat, out seconds))
+            if (!String.IsNullOrEmpty(val) && System.Double.TryParse(val, out seconds))
             {
                 s_interval = TimeSpan.FromSeconds(seconds);
             }
