diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 361c30c4200..8327d66695e 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -83,14 +83,7 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         _stats.Merge(_buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);
         string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + ": " + a.Value));
 
-        BuildEventContext buildEventContext = e.BuildEventContext
-            ?? new BuildEventContext(
-                BuildEventContext.InvalidNodeId,
-                BuildEventContext.InvalidTargetId,
-                BuildEventContext.InvalidProjectContextId,
-                BuildEventContext.InvalidTaskId);
-
-        LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(buildEventContext);
+        LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(GetBuildEventContext(e));
 
         // Tracing: https://github.com/dotnet/msbuild/issues/9629
         loggingContext.LogCommentFromText(MessageImportance.High, msg);
@@ -103,6 +96,13 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
         { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
         { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => _stats.Merge(((BuildCheckTracingEventArgs)e).TracingData, (span1, span2) => span1 + span2) },
-        { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => _buildCheckManager.ProcessAnalyzerAcquisition(((BuildCheckAcquisitionEventArgs)e).ToAnalyzerAcquisitionData(), e.BuildEventContext!) },
+        { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => _buildCheckManager.ProcessAnalyzerAcquisition(((BuildCheckAcquisitionEventArgs)e).ToAnalyzerAcquisitionData(), GetBuildEventContext(e)) },
     };
+
+    private BuildEventContext GetBuildEventContext(BuildEventArgs e) => e.BuildEventContext
+        ?? new BuildEventContext(
+                BuildEventContext.InvalidNodeId,
+                BuildEventContext.InvalidTargetId,
+                BuildEventContext.InvalidProjectContextId,
+                BuildEventContext.InvalidTaskId);
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index a4d10515418..e9e0a4ed4d2 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -4,7 +4,6 @@
 using System;
 using System.IO;
 using System.Text.RegularExpressions;
-using Microsoft.Build.Evaluation;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
 using Shouldly;
@@ -135,34 +134,37 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
     }
 
     [Theory]
-    [InlineData("CustomAnalyzer", "AnalysisCandidate", new[] { "CustomRule1" })]
-    public void CustomAnalyzerTest(string caName, string acName, string[] expectedRegistedRulesNames)
+    [InlineData("CustomAnalyzer", "AnalysisCandidate", "CustomRule1")]
+    public void CustomAnalyzerTest(string customAnalyzerName, string analysisCandidate, string expectedRegistredRule)
     {
         using (var env = TestEnvironment.Create())
         {
-            var caProjectPath = Path.Combine(TestAssetsRootPath, caName, $"{caName}.csproj");
-            string caBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                 $"{caProjectPath} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path}", out bool success);
+            var candidateAnalysisProjectPath = Path.Combine(TestAssetsRootPath, customAnalyzerName, $"{customAnalyzerName}.csproj");
+            string candidateAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                 $"{candidateAnalysisProjectPath} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path}", out bool success);
 
             if (success)
             {
-                var caNugetPackageFullPath = Regex.Match(caBuildLog, @"Successfully created package '(.*?)'").Groups[1].Value;
-                var analysisCandidateSolutionPath = Path.Combine(TestAssetsRootPath, acName);
-                AddCutomDataSourceToNugetConfig(analysisCandidateSolutionPath, Path.GetDirectoryName(caNugetPackageFullPath));
+                var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);
+                AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidateAnalysisBuildLog);
 
                 string acBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                 $"{Path.Combine(analysisCandidateSolutionPath, $"{acName}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -verbosity:d", out _);
+                    $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d",
+                    out bool _);
 
+                acBuildLog.ShouldContain($"Custom analyzer rule: {expectedRegistredRule} has been registered successfully.");
             }
         }
     }
 
-    private void AddCutomDataSourceToNugetConfig(string filePath, string pathToCustomDataSource)
+    private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath, string candidateAnalysisBuildLog)
     {
-        var nugetTemplatePath = Path.Combine(filePath, "nugetTemplate.config");
-        string existingContent = File.ReadAllText(nugetTemplatePath);
+        var candidatesNugetPackageFullPath = Regex.Match(candidateAnalysisBuildLog, @"Successfully created package '(.*?)'").Groups[1].Value;
+        string pathToCustomDataSource = Path.GetDirectoryName(candidatesNugetPackageFullPath) ?? string.Empty;
+        var nugetTemplatePath = Path.Combine(analysisCandidatePath, "nugetTemplate.config");
 
-        string modifiedContent = existingContent.Replace("LocalPackageSourcePlaceholder", pathToCustomDataSource);
-        File.WriteAllText(Path.Combine(filePath, "nuget.config"), modifiedContent);
+        File.WriteAllText(
+            Path.Combine(analysisCandidatePath, "nuget.config"),
+            File.ReadAllText(nugetTemplatePath).Replace("LocalPackageSourcePlaceholder", pathToCustomDataSource));
     }
 }
diff --git a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
index a507bf76f65..7bdf6513dbf 100644
--- a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
+++ b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
@@ -33,7 +33,7 @@
     <None Include="..\Shared\UnitTests\xunit.runner.json">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
-    <None Include="TestAssets\*">
+    <None Include="TestAssets\**\*">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
   </ItemGroup>
diff --git a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/AnalysisCandidate.csproj b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/AnalysisCandidate.csproj
index 52f65afffee..86c0710e572 100644
--- a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/AnalysisCandidate.csproj
+++ b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/AnalysisCandidate.csproj
@@ -6,7 +6,7 @@
   </PropertyGroup>
 
   <ItemGroup>
-    <PackageReference Include="CustomAnalyzer" Version="1.0.0"/>
+    <PackageReference Include="CustomAnalyzerPlaceholder" Version="1.0.0"/>
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/nugetTemplate.config b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/nugetTemplate.config
index 4b939f6afc2..d72fd466a47 100644
--- a/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/nugetTemplate.config
+++ b/src/BuildCheck.UnitTests/TestAssets/AnalysisCandidate/nugetTemplate.config
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <configuration>
    <packageSources>
-    <clear />
 
     <add key="LocalPackageSource" value="LocalPackageSourcePlaceholder" />
 
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer1.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer1.cs
deleted file mode 100644
index a77318023b1..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer1.cs
+++ /dev/null
@@ -1,38 +0,0 @@
-ï»¿using System.Collections.Generic;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
-
-namespace CustomRule
-{
-    public sealed class Analyzer1 : BuildAnalyzer
-    {
-        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
-            "X01234",
-            "Title",
-            "Description",
-            "Message format: {0}",
-            new BuildAnalyzerConfiguration());
-
-        public override string FriendlyName => "CustomRule1";
-
-        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = new List<BuildAnalyzerRule>() { SupportedRule };
-
-        public override void Initialize(ConfigurationContext configurationContext)
-        {
-            // configurationContext to be used only if analyzer needs external configuration data.
-        }
-
-        public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)
-        {
-            registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
-        }
-
-        private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)
-        {
-            context.ReportResult(BuildCheckResult.Create(
-                SupportedRule,
-                ElementLocation.EmptyLocation,
-                "Argument for the message format"));
-        }
-    }
-}
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer2.cs b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer2.cs
deleted file mode 100644
index 76de267fe4c..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/Analyzer2.cs
+++ /dev/null
@@ -1,38 +0,0 @@
-ï»¿using System.Collections.Generic;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
-
-namespace CustomRule
-{
-    public sealed class Analyzer2 : BuildAnalyzer
-    {
-        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(
-            "X01234",
-            "Title",
-            "Description",
-            "Message format: {0}",
-            new BuildAnalyzerConfiguration());
-
-        public override string FriendlyName => "CustomRule2";
-
-        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = new List<BuildAnalyzerRule>() { SupportedRule };
-
-        public override void Initialize(ConfigurationContext configurationContext)
-        {
-            // configurationContext to be used only if analyzer needs external configuration data.
-        }
-
-        public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)
-        {
-            registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
-        }
-
-        private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)
-        {
-            context.ReportResult(BuildCheckResult.Create(
-                SupportedRule,
-                ElementLocation.EmptyLocation,
-                "Argument for the message format"));
-        }
-    }
-}
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.csproj b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.csproj
deleted file mode 100644
index 2b348b402d0..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.csproj
+++ /dev/null
@@ -1,41 +0,0 @@
-<Project Sdk="Microsoft.NET.Sdk">
-
-  <PropertyGroup>
-    <TargetFramework>netstandard2.0</TargetFramework>
-    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
-    <!-- The output structure was modified for msbuild development needs.-->
-    <NoWarn>NU5101;NU5128</NoWarn>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <None Include="CustomAnalyzers.props" Pack="true" PackagePath="build\CustomAnalyzers.props" />
-  </ItemGroup>
-
-  <ItemGroup>
-    <PackageReference Include="Microsoft.Build" PrivateAssets="all" IncludeInPackage="true" Version="17.11.0-preview-24218-01" />
-  </ItemGroup>
-
-  <Target Name="AddNuGetDlls" BeforeTargets="_GetPackageFiles">
-    <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.
-       This produces a new list containing the DLL path and the "IncludeInPackage" metadata-->
-    <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">
-      <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />
-    </JoinItems>
-
-    <ItemGroup>
-      <!-- Remove NETStandard DLLs -->
-      <_PackagesToPack Remove="@(_PackagesToPack)" />
-    </ItemGroup>
-
-    <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />
-
-    <ItemGroup>
-      <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->
-      <None Include="@(_PackagesToPack)" Pack="true" PackagePath="lib" Visible="false" />
-
-      <!-- Add the DLL produced by the current project to the NuGet package -->
-      <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="lib" Visible="false" />
-    </ItemGroup>
-  </Target>
-
-</Project>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.props b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.props
deleted file mode 100644
index 0ce5884ec9f..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/CustomAnalyzers.props
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<Project>
-  <PropertyGroup>
-	  <MSBuildAnalyzer>$([MSBuild]::RegisterAnalyzer($(MSBuildThisFileDirectory)..\lib\CustomAnalyzers.dll))</MSBuildAnalyzer>
-  </PropertyGroup>
-</Project>
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/nuget.config b/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/nuget.config
deleted file mode 100644
index 27a07cc2040..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/CustomAnalyzers/nuget.config
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<configuration>
-   <packageSources>
-    <clear />
-
-    <add key="AzureFeed" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json" />
-
-  </packageSources>
-</configuration>
