diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 6034676c3cc..4bd20820b46 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -11,16 +11,24 @@ namespace Microsoft.Build.Logging.FancyLogger
     internal static class ANSIBuilder
     {
         public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~])";
+        // TODO: This should replace ANSIRegex once FancyLogger's API is internal
+        public static Regex ANSIRegexRegex = new Regex(ANSIRegex);
         public static string ANSIRemove(string text)
         {
-            return Regex.Replace(text, ANSIRegex, "");
+            return ANSIRegexRegex.Replace(text, "");
         }
 
+        // TODO: This should be an optional parameter for ANSIBreakpoint(string text, int positioon, int initialPosition = 0)
         public static int ANSIBreakpoint(string text, int position)
+        {
+            return ANSIBreakpoint(text, position, 0);
+        }
+        public static int ANSIBreakpoint(string text, int position, int initialPosition)
         {
             if (position >= text.Length) return text.Length;
             int nonAnsiIndex = 0;
-            Match nextMatch = Regex.Match(text, ANSIRegex);
+            // Match nextMatch = Regex.Match(text, ANSIRegex);
+            Match nextMatch = ANSIRegexRegex.Match(text, initialPosition);
             int i = 0;
             while (i < text.Length && nonAnsiIndex != position)
             {
@@ -39,15 +47,16 @@ public static int ANSIBreakpoint(string text, int position)
 
         public static List<string> ANSIWrap(string text, int position)
         {
+            ReadOnlySpan<char> textSpan = text.AsSpan();
             List<string> result = new();
             int breakpoint = ANSIBreakpoint(text, position);
-            while (text.Length > breakpoint)
+            while (textSpan.Length > breakpoint)
             {
-                result.Add(text.Substring(0, breakpoint));
-                text = text.Substring(breakpoint);
-                breakpoint = ANSIBreakpoint(text, position);
+                result.Add(textSpan.Slice(0, breakpoint).ToString());
+                textSpan = textSpan.Slice(breakpoint);
+                breakpoint = ANSIBreakpoint(text, position, breakpoint);
             }
-            result.Add(text);
+            result.Add(textSpan.ToString());
             return result;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 75168ae5f25..3c66ebddad7 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -48,11 +48,11 @@ public void Initialize(IEventSource eventSource)
             
             Task.Run(() =>
             {
-                task_Render();
+                Render();
             });
         }
 
-        void task_Render()
+        void Render()
         {
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
@@ -69,7 +69,7 @@ void task_Render()
                 Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
                     // Rerender projects only when needed
-                    foreach (var project in projects) project.Value.Render();
+                    foreach (var project in projects) project.Value.Log();
                     // Rerender buffer
                     FancyLoggerBuffer.Render();
                 });
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index d6713ecdb35..04923ba5461 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -121,7 +121,7 @@ public static void Render()
                 }
             }
             // Iterate for the rest of the screen
-            for (int i = lineIndex; i < ScrollableAreaHeight; i++)
+            for (int i = lineIndex + 1; i < ScrollableAreaHeight; i++)
             {
                 contents += ANSIBuilder.Cursor.Position(i + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd();
             }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index c843369bd65..f31f56d213c 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -70,7 +70,8 @@ public string ToANSIString()
             }
         }
 
-        public void Render()
+        // TODO: Rename to Log after FancyLogger's API becomes internal
+        public void Log()
         {
             if (Line == null) return;
             Line.Text = $"    └── {ToANSIString()}";
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 9741d461524..46553f529f2 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -56,7 +56,8 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
             }
         }
 
-        public void Render()
+        // TODO: Rename to Render() after FancyLogger's API becomes internal
+        public void Log()
         {
             if (!ShouldRerender) return;
             ShouldRerender = false;
@@ -98,7 +99,7 @@ public void Render()
             {
                 if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
                 if (node.Line is null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
-                node.Render();
+                node.Log();
             }
         }
 
