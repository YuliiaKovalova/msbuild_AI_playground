diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index a8a71807248..4aaf88527fa 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -579,7 +579,7 @@ public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string?
         }
     }
 
-    // [Fact]
+    [Fact(Skip = "To unblock: https://github.com/dotnet/msbuild/issues/11090")]
     public void CheckHasAccessToAllConfigs()
     {
         using (var env = TestEnvironment.Create())
@@ -757,9 +757,9 @@ public void NoEnvironmentVariableProperty_DeferredProcessing(bool warnAsError, b
         }
     }
 
-    // [Theory]
-    // [InlineData("CheckCandidate", new[] { "CustomRule1", "CustomRule2" })]
-    // [InlineData("CheckCandidateWithMultipleChecksInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" }, true)]
+    [Theory(Skip = "To unblock: https://github.com/dotnet/msbuild/issues/11090")]
+    [InlineData("CheckCandidate", new[] { "CustomRule1", "CustomRule2" })]
+    [InlineData("CheckCandidateWithMultipleChecksInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" }, true)]
     public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expectedRegisteredRules, bool expectedRejectedChecks = false)
     {
         using (var env = TestEnvironment.Create())
@@ -790,9 +790,9 @@ public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expec
         }
     }
 
-    // [Theory]
-    // [InlineData("CheckCandidate", "X01234", "error", "error X01234: http://samplelink.com/X01234")]
-    // [InlineData("CheckCandidateWithMultipleChecksInjected", "X01234", "warning", "warning X01234: http://samplelink.com/X01234")]
+    [Theory(Skip = "To unblock: https://github.com/dotnet/msbuild/issues/11090")]
+    [InlineData("CheckCandidate", "X01234", "error", "error X01234: http://samplelink.com/X01234")]
+    [InlineData("CheckCandidateWithMultipleChecksInjected", "X01234", "warning", "warning X01234: http://samplelink.com/X01234")]
     public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleId, string severity, string expectedMessage)
     {
         using (var env = TestEnvironment.Create())
@@ -817,10 +817,10 @@ public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleI
         }
     }
 
-    // [Theory]
-    // [InlineData("X01236", "ErrorOnInitializeCheck", "Something went wrong initializing")]
-    // [InlineData("X01237", "ErrorOnRegisteredAction", "something went wrong when executing registered action")]
-    // [InlineData("X01238", "ErrorWhenRegisteringActions", "something went wrong when registering actions")]
+    [Theory(Skip = "To unblock: https://github.com/dotnet/msbuild/issues/11090")]
+    [InlineData("X01236", "ErrorOnInitializeCheck", "Something went wrong initializing")]
+    [InlineData("X01237", "ErrorOnRegisteredAction", "something went wrong when executing registered action")]
+    [InlineData("X01238", "ErrorWhenRegisteringActions", "something went wrong when registering actions")]
     public void CustomChecksFailGracefully(string ruleId, string friendlyName, string expectedMessage)
     {
         using (var env = TestEnvironment.Create())
