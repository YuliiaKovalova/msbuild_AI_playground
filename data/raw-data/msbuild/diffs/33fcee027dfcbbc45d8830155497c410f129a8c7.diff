diff --git a/eng/Versions.props b/eng/Versions.props
index b9431b26635..b55eb5ad3e8 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -68,7 +68,7 @@
     <NuGetBuildTasksVersion>6.14.0-preview.1.53</NuGetBuildTasksVersion>
   </PropertyGroup>
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
-    <BootstrapSdkVersion>9.0.200-preview.0.24603.3</BootstrapSdkVersion>
+    <BootstrapSdkVersion>9.0.300-preview.0.25155.3</BootstrapSdkVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index dcf1f45727d..55a6d75f734 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -40,6 +40,7 @@ public void ConstructorWithNullName()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -75,6 +76,7 @@ public void ConstructorWithEmptyName()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -110,6 +112,7 @@ public void ConstructorWithNullLocation()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -147,6 +150,7 @@ public void ConstructorWithEmptyLocation()
             Assert.Throws<InternalErrorException>(() =>
             {
                 TaskHostConfiguration config = new TaskHostConfiguration(
+                    runtime: "TaskHost",
                     nodeId: 1,
                     startupDirectory: Directory.GetCurrentDirectory(),
                     buildProcessEnvironment: null,
@@ -182,6 +186,7 @@ public void ConstructorWithEmptyLocation()
         public void TestValidConstructors()
         {
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -208,6 +213,7 @@ public void TestValidConstructors()
                 warningsAsMessages: null);
 
             TaskHostConfiguration config2 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -235,6 +241,7 @@ public void TestValidConstructors()
 
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             TaskHostConfiguration config3 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -267,6 +274,7 @@ public void TestValidConstructors()
             parameters2.Add("ItemArray", new ITaskItem[] { new TaskItem("DEF"), new TaskItem("GHI"), new TaskItem("JKL") });
 
             TaskHostConfiguration config4 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -299,6 +307,7 @@ public void TestValidConstructors()
             WarningsAsErrors.Add("MSB1237");
 
             TaskHostConfiguration config5 = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -338,6 +347,7 @@ public void TestTranslationWithNullDictionary()
             };
 
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -389,6 +399,7 @@ public void TestTranslationWithAppDomainSetup(byte[] configBytes)
             AppDomainSetup setup = new AppDomainSetup();
 
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -435,6 +446,7 @@ public void TestTranslationWithAppDomainSetup(byte[] configBytes)
         public void TestTranslationWithEmptyDictionary()
         {
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -486,6 +498,7 @@ public void TestTranslationWithValueTypesInDictionary()
             parameters.Add("Text", "Foo");
             parameters.Add("BoolValue", false);
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -535,6 +548,7 @@ public void TestTranslationWithITaskItemInDictionary()
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             parameters.Add("TaskItemValue", new TaskItem("Foo"));
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -583,6 +597,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
             IDictionary<string, object> parameters = new Dictionary<string, object>();
             parameters.Add("TaskItemArrayValue", new ITaskItem[] { new TaskItem("Foo"), new TaskItem("Baz") });
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -638,6 +653,7 @@ public void TestTranslationWithWarningsAsErrors()
             WarningsAsErrors.Add("MSB1236");
             WarningsAsErrors.Add("MSB1237");
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
@@ -688,6 +704,7 @@ public void TestTranslationWithWarningsAsMessages()
             WarningsAsMessages.Add("MSB1236");
             WarningsAsMessages.Add("MSB1237");
             TaskHostConfiguration config = new TaskHostConfiguration(
+                runtime: "TaskHost",
                 nodeId: 1,
                 startupDirectory: Directory.GetCurrentDirectory(),
                 buildProcessEnvironment: null,
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 7181a21713c..fe321a68d25 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -406,7 +406,7 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
         /// executable (e.g. MSBuild, MSBuildTaskHost or dotnet) and path to MSBuild.dll if we want to use a custom one.
         /// null is returned if executable cannot be resolved.
         /// </summary>
-        internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
+        internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuildLocationFromHostContext(HandshakeOptions hostContext, IDictionary<string, string> taskHostParameters)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
             string toolPath = null;
@@ -465,8 +465,11 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
             }
             else if (IsHandshakeOptionEnabled(HandshakeOptions.NET))
             {
-                msbuildAssemblyPath = Path.Combine(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory, Constants.MSBuildAssemblyName);
-                toolPath = s_baseTaskHostPathNet;
+                msbuildAssemblyPath = taskHostParameters.TryGetValue(Constants.MSBuildAssemblyPath, out string resolvedAssemblyPath)
+                    ? Path.Combine(resolvedAssemblyPath, Constants.MSBuildAssemblyName)
+                    : Path.Combine(BuildEnvironmentHelper.Instance.MSBuildAssemblyDirectory, Constants.MSBuildAssemblyName);
+
+                toolPath = taskHostParameters.TryGetValue(Constants.DotnetHostPath, out string resolvedHostPath) ? resolvedHostPath : s_baseTaskHostPathNet;
             }
             else
             {
@@ -485,12 +488,17 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
         /// <summary>
         /// Make sure a node in the requested context exists.
         /// </summary>
-        internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
+        internal bool AcquireAndSetUpHost(
+            HandshakeOptions hostContext,
+            INodePacketFactory factory,
+            INodePacketHandler handler,
+            TaskHostConfiguration configuration,
+            IDictionary<string, string> taskHostParameters)
         {
             bool nodeCreationSucceeded;
             if (!_nodeContexts.ContainsKey(hostContext))
             {
-                nodeCreationSucceeded = CreateNode(hostContext, factory, handler, configuration);
+                nodeCreationSucceeded = CreateNode(hostContext, factory, taskHostParameters);
             }
             else
             {
@@ -526,7 +534,7 @@ internal void DisconnectFromHost(HandshakeOptions hostContext)
         /// <summary>
         /// Instantiates a new MSBuild or MSBuildTaskHost process acting as a child node.
         /// </summary>
-        internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
+        internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factory, IDictionary<string, string> taskHostParameters)
         {
             ErrorUtilities.VerifyThrowArgumentNull(factory);
             ErrorUtilities.VerifyThrow(!_nodeIdToPacketFactory.ContainsKey((int)hostContext), "We should not already have a factory for this context!  Did we forget to call DisconnectFromHost somewhere?");
@@ -537,7 +545,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
                 return false;
             }
 
-            (string msbuildExecutable, string msbuildAssemblyLocation) = GetMSBuildLocationFromHostContext(hostContext);
+            (string msbuildExecutable, string msbuildAssemblyLocation) = GetMSBuildLocationFromHostContext(hostContext, taskHostParameters);
 
             // we couldn't even figure out the location we're trying to launch ... just go ahead and fail.
             if (msbuildExecutable == null)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 02a8ffcf9d0..3f5ecb2026e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.IO;
 #if FEATURE_APARTMENT_STATE
 using System.Diagnostics.CodeAnalysis;
 #endif
@@ -21,6 +22,7 @@
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
@@ -529,26 +531,27 @@ private IDictionary<string, string> GatherTaskIdentityParameters(Expander<Projec
             string msbuildArchitecture = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildArchitecture ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildArchitectureLocation ?? ElementLocation.EmptyLocation);
             string msbuildRuntime = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildRuntime ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildRuntimeLocation ?? ElementLocation.EmptyLocation);
 
-            IDictionary<string, string> taskIdentityParameters = null;
+            IDictionary<string, string> taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+
 
             // only bother to create a task identity parameter set if we're putting anything in there -- otherwise,
             // a null set will be treated as equivalent to all parameters being "don't care".
             if (msbuildRuntime != String.Empty || msbuildArchitecture != String.Empty)
             {
-                taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-
                 msbuildArchitecture = msbuildArchitecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : msbuildArchitecture.Trim();
                 msbuildRuntime = msbuildRuntime == String.Empty ? XMakeAttributes.MSBuildRuntimeValues.any : msbuildRuntime.Trim();
 
                 taskIdentityParameters.Add(XMakeAttributes.runtime, msbuildRuntime);
                 taskIdentityParameters.Add(XMakeAttributes.architecture, msbuildArchitecture);
+            }
 
-                if (msbuildRuntime == XMakeAttributes.MSBuildRuntimeValues.net)
-                {
-                    taskIdentityParameters.Add("DotnetHostPath", lookup.GetProperty("DOTNET_EXPERIMENTAL_HOST_PATH")?.EvaluatedValue);
-                    taskIdentityParameters.Add("TaskHostRuntimeVersion", lookup.GetProperty("SdkResolverMSBuildTaskHostRuntimeVersion")?.EvaluatedValue);
-                }
-            }   
+            string hostPath = lookup.GetProperty("DOTNET_EXPERIMENTAL_HOST_PATH")?.EvaluatedValue;
+            string msBuildAssemblyPath = Path.GetDirectoryName(lookup.GetProperty("RuntimeIdentifierGraphPath")?.EvaluatedValue) ?? string.Empty;
+            if (!string.IsNullOrEmpty(hostPath) && !string.IsNullOrEmpty(msBuildAssemblyPath))
+            {
+                taskIdentityParameters.Add(Constants.DotnetHostPath, hostPath);
+                taskIdentityParameters.Add(Constants.MSBuildAssemblyPath, msBuildAssemblyPath);
+            }
 
             return taskIdentityParameters;
         }
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index f83d3ad17e6..4dfa601034f 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -510,7 +510,7 @@ internal static bool DoesTaskHostExist(string runtime, string architecture)
             parameters.Add(XMakeAttributes.architecture, architecture);
 
             HandshakeOptions desiredContext = CommunicationsUtilities.GetHandshakeOptions(taskHost: true, taskHostParameters: parameters);
-            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext).msbuildExcutable;
+            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext, parameters).msbuildExcutable;
 
             if (taskHostLocation != null && FileUtilities.FileExistsNoThrow(taskHostLocation))
             {
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index c2eb1aa642b..00158928c16 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -550,7 +550,9 @@ private static bool TaskIdentityParametersMatchFactory(IDictionary<string, strin
         /// Given a set of task parameters from the UsingTask and from the task invocation, generate a dictionary that combines the two, or throws if the merge
         /// is impossible (we shouldn't ever get to this point if it is ...)
         /// </summary>
-        private static IDictionary<string, string> MergeTaskFactoryParameterSets(IDictionary<string, string> factoryIdentityParameters, IDictionary<string, string> taskIdentityParameters)
+        private static IDictionary<string, string> MergeTaskFactoryParameterSets(
+            IDictionary<string, string> factoryIdentityParameters,
+            IDictionary<string, string> taskIdentityParameters)
         {
             IDictionary<string, string> mergedParameters = null;
             if (factoryIdentityParameters == null || factoryIdentityParameters.Count == 0)
@@ -601,6 +603,15 @@ private static IDictionary<string, string> MergeTaskFactoryParameterSets(IDictio
                 }
             }
 
+            // Add rest of the entries from taskIdentityParameters
+            foreach (KeyValuePair<string, string> kvp in taskIdentityParameters)
+            {
+                if (!mergedParameters.ContainsKey(kvp.Key))
+                {
+                    mergedParameters[kvp.Key] = kvp.Value;
+                }
+            }
+
             return mergedParameters;
         }
 
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 0226a287f1b..2cdccc5ace2 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -291,7 +291,7 @@ public bool Execute()
                 lock (_taskHostLock)
                 {
                     _requiredContext = CommunicationsUtilities.GetHandshakeOptions(taskHost: true, taskHostParameters: _taskHostParameters);
-                    _connectedToTaskHost = _taskHostProvider.AcquireAndSetUpHost(_requiredContext, this, this, hostConfiguration);
+                    _connectedToTaskHost = _taskHostProvider.AcquireAndSetUpHost(_requiredContext, this, this, hostConfiguration, _taskHostParameters);
                 }
 
                 if (_connectedToTaskHost)
@@ -570,7 +570,7 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
         /// </summary>
         private void LogErrorUnableToCreateTaskHost(HandshakeOptions requiredContext, string runtime, string architecture, NodeFailedToLaunchException e)
         {
-            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext).msbuildExcutable ??
+            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext, _taskHostParameters).msbuildExcutable ??
                 // We don't know the path -- probably we're trying to get a 64-bit assembly on a
                 // 32-bit machine.  At least give them the exe name to look for, though ...
                 ((requiredContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2 ? "MSBuildTaskHost.exe" : Constants.MSBuildExecutableName);
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index 40d0380b6e0..2e05f4a6d48 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -144,12 +144,22 @@ internal static class Constants
         /// <summary>
         /// MSBuild executable name.
         /// </summary>
-        internal static readonly string MSBuildExecutableName = "MSBuild.exe";
+        internal const string MSBuildExecutableName = "MSBuild.exe";
 
         /// <summary>
         /// MSBuild assembly name.
         /// </summary>
-        internal static readonly string MSBuildAssemblyName = "MSBuild.dll";
+        internal const string MSBuildAssemblyName = "MSBuild.dll";
+
+        /// <summary>
+        /// The constant for the storing full path to the resolved dotnet.
+        /// </summary>
+        internal const string DotnetHostPath = "DotnetHostPath";
+
+        /// <summary>
+        /// The constant for the storing the relative path to MSBuild assembly.
+        /// </summary>
+        internal const string MSBuildAssemblyPath = "MSBuildAssemblyPath";
 
         /// <summary>
         /// Current version of this MSBuild Engine assembly in the
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 83df9cdc435..348101fa765 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -5,7 +5,6 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 #nullable disable
@@ -106,6 +105,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <summary>
         /// Constructor
         /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
         /// <param name="nodeId">The ID of the node being configured.</param>
         /// <param name="startupDirectory">The startup directory for the task being executed.</param>
         /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
@@ -128,6 +128,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <summary>
         /// Constructor
         /// </summary>
+        /// <param name="runtime">Task host runtime.</param>
         /// <param name="nodeId">The ID of the node being configured.</param>
         /// <param name="startupDirectory">The startup directory for the task being executed.</param>
         /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
@@ -147,26 +148,27 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
 #endif
         public TaskHostConfiguration(
-                int nodeId,
-                string startupDirectory,
-                IDictionary<string, string> buildProcessEnvironment,
-                CultureInfo culture,
-                CultureInfo uiCulture,
+            string runtime,
+            int nodeId,
+            string startupDirectory,
+            IDictionary<string, string> buildProcessEnvironment,
+            CultureInfo culture,
+            CultureInfo uiCulture,
 #if FEATURE_APPDOMAIN
-                AppDomainSetup appDomainSetup,
+            AppDomainSetup appDomainSetup,
 #endif
-                int lineNumberOfTask,
-                int columnNumberOfTask,
-                string projectFileOfTask,
-                bool continueOnError,
-                string taskName,
-                string taskLocation,
-                bool isTaskInputLoggingEnabled,
-                IDictionary<string, object> taskParameters,
-                Dictionary<string, string> globalParameters,
-                ICollection<string> warningsAsErrors,
-                ICollection<string> warningsNotAsErrors,
-                ICollection<string> warningsAsMessages)
+            int lineNumberOfTask,
+            int columnNumberOfTask,
+            string projectFileOfTask,
+            bool continueOnError,
+            string taskName,
+            string taskLocation,
+            bool isTaskInputLoggingEnabled,
+            IDictionary<string, object> taskParameters,
+            Dictionary<string, string> globalParameters,
+            ICollection<string> warningsAsErrors,
+            ICollection<string> warningsNotAsErrors,
+            ICollection<string> warningsAsMessages)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalLength(taskLocation, nameof(taskLocation));
@@ -211,96 +213,9 @@ public TaskHostConfiguration(
             }
 
             _globalParameters = globalParameters ?? new Dictionary<string, string>();
+            _runtime = runtime;
         }
 
-#if FEATURE_APPDOMAIN
-        /// <summary>
-        /// Constructor.
-        /// </summary>
-        /// <param name="runtime">Task host runtime.</param>
-        /// <param name="nodeId">The ID of the node being configured.</param>
-        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
-        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
-        /// <param name="culture">The culture of the thread that will execute the task.</param>
-        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
-        /// <param name="appDomainSetup">The AppDomainSetup that may be used to pass information to an AppDomainIsolated task.</param>
-        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
-        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
-        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
-        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
-        /// <param name="taskName">Name of the task.</param>
-        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
-        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
-        /// <param name="taskParameters">Parameters to apply to the task.</param>
-        /// <param name="globalParameters">global properties for the current project.</param>
-        /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
-        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
-        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
-#else
-        /// <summary>
-        /// Constructor.
-        /// </summary>
-        /// <param name="runtime">Task host runtime.</param>
-        /// <param name="nodeId">The ID of the node being configured.</param>
-        /// <param name="startupDirectory">The startup directory for the task being executed.</param>
-        /// <param name="buildProcessEnvironment">The set of environment variables to apply to the task execution process.</param>
-        /// <param name="culture">The culture of the thread that will execute the task.</param>
-        /// <param name="uiCulture">The UI culture of the thread that will execute the task.</param>
-        /// <param name="lineNumberOfTask">The line number of the location from which this task was invoked.</param>
-        /// <param name="columnNumberOfTask">The column number of the location from which this task was invoked.</param>
-        /// <param name="projectFileOfTask">The project file from which this task was invoked.</param>
-        /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
-        /// <param name="taskName">Name of the task.</param>
-        /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
-        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
-        /// <param name="taskParameters">Parameters to apply to the task.</param>
-        /// <param name="globalParameters">global properties for the current project.</param>
-        /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
-        /// <param name="warningsNotAsErrors">Warning codes not to be treated as errors for the current project.</param>
-        /// <param name="warningsAsMessages">Warning codes to be treated as messages for the current project.</param>
-#endif
-        public TaskHostConfiguration(
-                string runtime,
-                int nodeId,
-                string startupDirectory,
-                IDictionary<string, string> buildProcessEnvironment,
-                CultureInfo culture,
-                CultureInfo uiCulture,
-#if FEATURE_APPDOMAIN
-                AppDomainSetup appDomainSetup,
-#endif
-                int lineNumberOfTask,
-                int columnNumberOfTask,
-                string projectFileOfTask,
-                bool continueOnError,
-                string taskName,
-                string taskLocation,
-                bool isTaskInputLoggingEnabled,
-                IDictionary<string, object> taskParameters,
-                Dictionary<string, string> globalParameters,
-                ICollection<string> warningsAsErrors,
-                ICollection<string> warningsNotAsErrors,
-                ICollection<string> warningsAsMessages)
-            : this(nodeId,
-                  startupDirectory,
-                  buildProcessEnvironment,
-                  culture,
-                  uiCulture,
-#if FEATURE_APPDOMAIN
-                appDomainSetup,
-#endif
-                  lineNumberOfTask,
-                  columnNumberOfTask,
-                  projectFileOfTask,
-                  continueOnError,
-                  taskName, taskLocation,
-                  isTaskInputLoggingEnabled,
-                  taskParameters,
-                  globalParameters,
-                  warningsAsErrors,
-                  warningsNotAsErrors,
-                  warningsAsMessages) => _runtime = runtime;
-
         /// <summary>
         /// Constructor for deserialization.
         /// </summary>
