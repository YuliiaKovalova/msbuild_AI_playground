diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index c8b3c4adc7f..8e0528c3e91 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -82,6 +82,28 @@ public sealed class MSBuildClient
         private int _numConsoleWritePackets;
         private long _sizeOfConsoleWritePackets;
 
+        /// <summary>
+        /// Width of the Console output device or -1 if unknown.
+        /// </summary>
+        private int _consoleBufferWidth;
+
+        /// <summary>
+        /// True if console output accept ANSI colors codes.
+        /// False if console does not support ANSI codes or output is redirected to non screen type such as file or nul.
+        /// </summary>
+        private bool _acceptAnsiColorCodes;
+
+        /// <summary>
+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        private bool _consoleIsScreen;
+
+        /// <summary>
+        /// Background color of client console, -1 if not detectable.
+        /// </summary>
+        private ConsoleColor _consoleBackgroundColor;
+
         /// <summary>
         /// Public constructor with parameters.
         /// </summary>
@@ -155,6 +177,8 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                 return _exitResult;
             }
 
+            ConfigureAndQueryConsoleProperties();
+
             // Send build command.
             // Let's send it outside the packet pump so that we easier and quicker deal with possible issues with connection to server.
             MSBuildEventSource.Log.MSBuildServerBuildStart(commandLine);
@@ -184,11 +208,6 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
                     packetPump.PacketReceivedEvent
                 };
 
-                if (NativeMethodsShared.IsWindows)
-                {
-                    SupportVT100();
-                }
-
                 while (!_buildFinished)
                 {
                     int index = WaitHandle.WaitAny(waitHandles);
@@ -228,13 +247,89 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can
             return _exitResult;
         }
 
-        private void SupportVT100()
+        private void ConfigureAndQueryConsoleProperties()
+        {
+            QueryIsScreenAndTryEnableAnsiColorCodes();
+            QueryConsoleBufferWidth();
+            QueryConsoleBackgroundColor();
+        }
+
+        private void QueryIsScreenAndTryEnableAnsiColorCodes()
+        {
+            if (NativeMethodsShared.IsWindows)
+            {
+                _acceptAnsiColorCodes = false;
+                _consoleIsScreen = false;
+                try
+                {
+                    IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+                    if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
+                    {
+                        bool success;
+                        if ((consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) == NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING &&
+                            (consoleMode & NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN) == NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN)
+                        {
+                            // Console is already in required state
+                            success = true;
+                        }
+                        else
+                        {
+                            consoleMode |= NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING | NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN;
+                            success = NativeMethodsShared.SetConsoleMode(stdOut, consoleMode);
+                        }
+
+                        if (success)
+                        {
+                            _acceptAnsiColorCodes = true;
+                        }
+
+                        uint fileType = NativeMethodsShared.GetFileType(stdOut);
+                        // The std out is a char type(LPT or Console)
+                        _consoleIsScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
+                        _acceptAnsiColorCodes &= _consoleIsScreen;
+                    }
+                }
+                catch (Exception ex)
+                {
+                    CommunicationsUtilities.Trace("MSBuild client warning: problem during enabling support for VT100: {0}.", ex);
+                }
+            }
+            else
+            {
+                // On posix OSes we expect console always supports VT100 coloring unless it is redirected
+                _acceptAnsiColorCodes = _consoleIsScreen = !Console.IsOutputRedirected;
+            }
+        }
+
+        private void QueryConsoleBufferWidth()
         {
-            IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
-            if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
+            _consoleBufferWidth = -1;
+            try
+            {
+                _consoleBufferWidth = Console.BufferWidth;
+            }
+            catch (Exception ex)
+            {
+                // on Win8 machines while in IDE Console.BufferWidth will throw (while it talks to native console it gets "operation aborted" native error)
+                // this is probably temporary workaround till we understand what is the reason for that exception
+                CommunicationsUtilities.Trace("MSBuild client warning: problem during querying console buffer width.", ex);
+            }
+        }
+
+        /// <summary>
+        /// Some platforms do not allow getting current background color. There
+        /// is not way to check, but not-supported exception is thrown. Assume
+        /// black, but don't crash.
+        /// </summary>
+        private void QueryConsoleBackgroundColor()
+        {
+            try
+            {
+                _consoleBackgroundColor = Console.BackgroundColor;
+            }
+            catch (PlatformNotSupportedException)
             {
-                consoleMode |= NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING | NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN;
-                NativeMethodsShared.SetConsoleMode(stdOut, consoleMode);
+                _consoleBackgroundColor = ConsoleColor.Black;
             }
         }
 
@@ -341,7 +436,11 @@ private ServerNodeBuildCommand GetServerNodeBuildCommand(string commandLine)
                         startupDirectory: Directory.GetCurrentDirectory(),
                         buildProcessEnvironment: envVars,
                         CultureInfo.CurrentCulture,
-                        CultureInfo.CurrentUICulture);
+                        CultureInfo.CurrentUICulture,
+                        _consoleBufferWidth,
+                        _acceptAnsiColorCodes,
+                        _consoleIsScreen,
+                        _consoleBackgroundColor);
         }
 
         private ServerNodeHandshake GetHandshake()
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index f795a3eceae..ee7d3072a14 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Internal;
 using System.Threading.Tasks;
+using Microsoft.Build.BackEnd.Logging;
 
 namespace Microsoft.Build.Execution
 {
@@ -320,13 +321,34 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
                 return;
             }
 
-            // set build process context
+            // Set build process context
             Directory.SetCurrentDirectory(command.StartupDirectory);
             CommunicationsUtilities.SetEnvironment(command.BuildProcessEnvironment);
             Thread.CurrentThread.CurrentCulture = command.Culture;
             Thread.CurrentThread.CurrentUICulture = command.UICulture;
 
-            // configure console output redirection
+            // Configure console configuration so Loggers can change their behavior based on Target (client) Console properties.
+            ConsoleConfiguration.Provider = new TargetConsoleConfiguration(command.ConsoleBufferWidth, command.AcceptAnsiColorCodes, command.ConsoleIsScreen, command.ConsoleBackgroundColor);
+
+            // Also try our best to increase chance custom Loggers which use Console static members will work as expected.
+            try
+            {
+                if (NativeMethodsShared.IsWindows && command.ConsoleBufferWidth > 0)
+                {
+                    Console.BufferWidth = command.ConsoleBufferWidth;
+                }
+
+                if ((int)command.ConsoleBackgroundColor != -1)
+                {
+                    Console.BackgroundColor = command.ConsoleBackgroundColor;
+                }
+            }
+            catch (Exception)
+            {
+                // Ignore exception, it is best effort only
+            }
+
+            // Configure console output redirection
             var oldOut = Console.Out;
             var oldErr = Console.Error;
             (int exitCode, string exitType) buildResult;
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index 48ab050cf1e..21945a1344d 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -1,6 +1,5 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using System;
 using System.Collections.Generic;
@@ -18,6 +17,10 @@ internal sealed class ServerNodeBuildCommand : INodePacket
         private Dictionary<string, string> _buildProcessEnvironment = default!;
         private CultureInfo _culture = default!;
         private CultureInfo _uiCulture = default!;
+        private int _consoleBufferWidth = default;
+        private bool _acceptAnsiColorCodes = default;
+        private ConsoleColor _consoleBackgroundColor = default;
+        private bool _consoleIsScreen = default;
 
         /// <summary>
         /// Retrieves the packet type.
@@ -49,6 +52,30 @@ internal sealed class ServerNodeBuildCommand : INodePacket
         /// </summary>
         public CultureInfo UICulture => _uiCulture;
 
+        /// <summary>
+        /// Buffer width of destination Console.
+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
+        /// -1 console buffer width can't be obtained.
+        /// </summary>
+        public int ConsoleBufferWidth => _consoleBufferWidth;
+
+        /// <summary>
+        /// True if console output accept ANSI colors codes.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;
+
+        /// <summary>
+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        public bool ConsoleIsScreen => _consoleIsScreen;
+
+        /// <summary>
+        /// Background color of client console, -1 if not detectable
+        /// </summary>
+        public ConsoleColor ConsoleBackgroundColor => _consoleBackgroundColor;
+
         /// <summary>
         /// Private constructor for deserialization
         /// </summary>
@@ -56,13 +83,19 @@ private ServerNodeBuildCommand()
         {
         }
 
-        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
+        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture,
+            int consoleBufferWidth, bool acceptAnsiColorCodes, bool consoleIsScreen, ConsoleColor consoleBackgroundColor)
         {
             _commandLine = commandLine;
             _startupDirectory = startupDirectory;
             _buildProcessEnvironment = buildProcessEnvironment;
             _culture = culture;
             _uiCulture = uiCulture;
+
+            _consoleBufferWidth = consoleBufferWidth;
+            _acceptAnsiColorCodes = acceptAnsiColorCodes;
+            _consoleIsScreen = consoleIsScreen;
+            _consoleBackgroundColor = consoleBackgroundColor;
         }
 
         /// <summary>
@@ -76,6 +109,10 @@ public void Translate(ITranslator translator)
             translator.TranslateDictionary(ref _buildProcessEnvironment, StringComparer.OrdinalIgnoreCase);
             translator.TranslateCulture(ref _culture);
             translator.TranslateCulture(ref _uiCulture);
+            translator.Translate(ref _consoleBufferWidth);
+            translator.Translate(ref _acceptAnsiColorCodes);
+            translator.Translate(ref _consoleIsScreen);
+            translator.TranslateEnum(ref _consoleBackgroundColor, (int)_consoleBackgroundColor);
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index ea87f587b70..b2580c7686b 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -28,38 +29,8 @@ namespace Microsoft.Build.BackEnd.Logging
 
     internal abstract class BaseConsoleLogger : INodeLogger
     {
-        /// <summary>
-        /// When set, we'll try reading background color.
-        /// </summary>
-        private static bool _supportReadingBackgroundColor = true;
-
         #region Properties
 
-        /// <summary>
-        /// Some platforms do not allow getting current background color. There
-        /// is not way to check, but not-supported exception is thrown. Assume
-        /// black, but don't crash.
-        /// </summary>
-        internal static ConsoleColor BackgroundColor
-        {
-            get
-            {
-                if (_supportReadingBackgroundColor)
-                {
-                    try
-                    {
-                        return Console.BackgroundColor;
-                    }
-                    catch (PlatformNotSupportedException)
-                    {
-                        _supportReadingBackgroundColor = false;
-                    }
-                }
-
-                return ConsoleColor.Black;
-            }
-        }
-
         /// <summary>
         /// Gets or sets the level of detail to show in the event log.
         /// </summary>
@@ -314,16 +285,7 @@ internal void IsRunningWithCharacterFileType()
 
             if (NativeMethodsShared.IsWindows)
             {
-                // Get the std out handle
-                IntPtr stdHandle = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
-
-                if (stdHandle != NativeMethods.InvalidHandle)
-                {
-                    uint fileType = NativeMethodsShared.GetFileType(stdHandle);
-
-                    // The std out is a char type(LPT or Console)
-                    runningWithCharacterFileType = (fileType == NativeMethodsShared.FILE_TYPE_CHAR);
-                }
+                runningWithCharacterFileType = ConsoleConfiguration.OutputIsScreen;
             }
         }
 
@@ -367,7 +329,7 @@ internal static void SetColor(ConsoleColor c)
         {
             try
             {
-                Console.ForegroundColor = TransformColor(c, BackgroundColor);
+                Console.ForegroundColor = TransformColor(c, ConsoleConfiguration.BackgroundColor);
             }
             catch (IOException)
             {
@@ -480,7 +442,7 @@ internal void InitializeConsoleMethods(LoggerVerbosity logverbosity, WriteHandle
 
             try
             {
-                ConsoleColor c = BackgroundColor;
+                ConsoleColor c = ConsoleConfiguration.BackgroundColor;
             }
             catch (IOException)
             {
@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)
 
         #endregion
     }
+
+    /// <summary>
+    /// Console configuration needed for proper Console logging.
+    /// </summary>
+    internal interface IConsoleConfiguration
+    {
+        /// <summary>
+        /// Buffer width of destination Console.
+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
+        /// -1 console buffer width can't be obtained.
+        /// </summary>
+        int BufferWidth { get; }
+
+        /// <summary>
+        /// True if console output accept ANSI colors codes.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        bool AcceptAnsiColorCodes { get; }
+
+        /// <summary>
+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        bool OutputIsScreen { get; }
+
+        /// <summary>
+        /// Background color of client console, -1 if not detectable
+        /// Some platforms do not allow getting current background color. There
+        /// is not way to check, but not-supported exception is thrown. Assume
+        /// black, but don't crash.
+        /// </summary>
+        ConsoleColor BackgroundColor { get; }
+    }
+
+    /// <summary>
+    /// Console configuration of target Console at which we will render output.
+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.
+    /// </summary>
+    internal class TargetConsoleConfiguration : IConsoleConfiguration
+    {
+        public TargetConsoleConfiguration(int bufferWidth, bool acceptAnsiColorCodes, bool outputIsScreen, ConsoleColor backgroundColor)
+        {
+            BufferWidth = bufferWidth;
+            AcceptAnsiColorCodes = acceptAnsiColorCodes;
+            OutputIsScreen = outputIsScreen;
+            BackgroundColor = backgroundColor;
+        }
+
+        public int BufferWidth { get; }
+        public bool AcceptAnsiColorCodes { get; }
+        public bool OutputIsScreen { get; }
+        public ConsoleColor BackgroundColor { get; }
+    }
+
+    /// <summary>
+    /// Console configuration of current process Console.
+    /// </summary>
+    internal class InProcessConsoleConfiguration : IConsoleConfiguration
+    {
+        /// <summary>
+        /// When set, we'll try reading background color.
+        /// </summary>
+        private static bool s_supportReadingBackgroundColor = true;
+
+        public int BufferWidth => Console.BufferWidth;
+
+        public bool AcceptAnsiColorCodes
+        {
+            get
+            {
+                bool acceptAnsiColorCodes = false;
+                if (NativeMethodsShared.IsWindows && !Console.IsOutputRedirected)
+                {
+                    try
+                    {
+                        IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+                        if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
+                        {
+                            acceptAnsiColorCodes = (consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) != 0;
+                        }
+                    }
+                    catch (Exception ex)
+                    {
+                        Debug.Assert(false, $"MSBuild client warning: problem during enabling support for VT100: {ex}.");
+                    }
+                }
+                else
+                {
+                    // On posix OSes we expect console always supports VT100 coloring unless it is redirected
+                    acceptAnsiColorCodes = !Console.IsOutputRedirected;
+                }
+
+                return acceptAnsiColorCodes;
+            }
+        }
+
+        public ConsoleColor BackgroundColor
+        {
+            get
+            {
+                if (s_supportReadingBackgroundColor)
+                {
+                    try
+                    {
+                        return Console.BackgroundColor;
+                    }
+                    catch (PlatformNotSupportedException)
+                    {
+                        s_supportReadingBackgroundColor = false;
+                    }
+                }
+
+                return ConsoleColor.Black;
+            }
+        }
+
+        public bool OutputIsScreen
+        {
+            get
+            {
+                bool isScreen = false;
+
+                if (NativeMethodsShared.IsWindows)
+                {
+                    // Get the std out handle
+                    IntPtr stdHandle = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+
+                    if (stdHandle != NativeMethods.InvalidHandle)
+                    {
+                        uint fileType = NativeMethodsShared.GetFileType(stdHandle);
+
+                        // The std out is a char type(LPT or Console)
+                        isScreen = fileType == NativeMethodsShared.FILE_TYPE_CHAR;
+                    }
+                }
+                else
+                {
+                    isScreen = !Console.IsOutputRedirected;
+                }
+
+                return isScreen;
+            }
+        }
+    }
+
+    /// <summary>
+    /// Target console configuration.
+    /// If console output is redirected to other process console, like for example MSBuild Server does,
+    ///    we need to know property of target/final console at which our output will be rendered.
+    /// If console is rendered at current process Console, we grab properties from Console and/or by WinAPI.
+    /// </summary>
+    internal static class ConsoleConfiguration
+    {
+        /// <summary>
+        /// Get or set current target console configuration provider.
+        /// </summary>
+        public static IConsoleConfiguration Provider
+        {
+            get { return Instance.s_instance; }
+            set { Instance.s_instance = value; }
+        }
+
+        private static class Instance
+        {
+            // Explicit static constructor to tell C# compiler
+            // not to mark type as beforefieldinit
+            static Instance()
+            {
+            }
+
+            internal static IConsoleConfiguration s_instance = new InProcessConsoleConfiguration();
+        }
+
+        /// <summary>
+        /// Buffer width of destination Console.
+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.
+        /// -1 console buffer width can't be obtained.
+        /// </summary>
+        public static int BufferWidth => Provider.BufferWidth;
+
+        /// <summary>
+        /// True if console output accept ANSI colors codes.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        public static bool AcceptAnsiColorCodes => Provider.AcceptAnsiColorCodes;
+
+        /// <summary>
+        /// Background color of client console, -1 if not detectable
+        /// Some platforms do not allow getting current background color. There
+        /// is not way to check, but not-supported exception is thrown. Assume
+        /// black, but don't crash.
+        /// </summary>
+        public static ConsoleColor BackgroundColor => Provider.BackgroundColor;
+
+        /// <summary>
+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.
+        /// False if output is redirected to non screen type such as file or nul.
+        /// </summary>
+        public static bool OutputIsScreen => Provider.OutputIsScreen;
+    }
 }
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 543667811bf..d4320ced186 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -3,6 +3,7 @@
 
 using System;
 
+using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -109,6 +110,7 @@ private void InitializeBaseConsoleLogger()
             bool useMPLogger = false;
             bool disableConsoleColor = false;
             bool forceConsoleColor = false;
+            bool preferConsoleColor = false;
             if (!string.IsNullOrEmpty(_parameters))
             {
                 string[] parameterComponents = _parameters.Split(BaseConsoleLogger.parameterDelimiters);
@@ -132,10 +134,15 @@ private void InitializeBaseConsoleLogger()
                     {
                         forceConsoleColor = true;
                     }
+                    if (string.Equals(param, "PREFERCONSOLECOLOR", StringComparison.OrdinalIgnoreCase))
+                    {
+                        // Use ansi color codes if current target console do support it
+                        preferConsoleColor = ConsoleConfiguration.AcceptAnsiColorCodes;
+                    }
                 }
             }
 
-            if (forceConsoleColor)
+            if (forceConsoleColor || (!disableConsoleColor && preferConsoleColor))
             {
                 _colorSet = BaseConsoleLogger.SetColorAnsi;
                 _colorReset = BaseConsoleLogger.ResetColorAnsi;
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index b0d0c7eb7b3..fe63ce04137 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -88,7 +88,7 @@ private void CheckIfOutputSupportsAlignment()
                     // Get the size of the console buffer so messages can be formatted to the console width
                     try
                     {
-                        _bufferWidth = Console.BufferWidth;
+                        _bufferWidth = ConsoleConfiguration.BufferWidth;
                         _alignMessages = true;
                     }
                     catch (Exception)
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 5b990331277..2f928186628 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -60,6 +60,7 @@ internal static class NativeMethods
     internal static HandleRef NullHandleRef = new HandleRef(null, IntPtr.Zero);
 
     internal static IntPtr NullIntPtr = new IntPtr(0);
+    internal static IntPtr InvalidHandle = new IntPtr(-1);
 
     // As defined in winnt.h:
     internal const ushort PROCESSOR_ARCHITECTURE_INTEL = 0;
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index b7d98c179d5..fb13a461da1 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -3202,7 +3202,7 @@ List<ILogger> loggers
                 // Always use ANSI escape codes when the build is initiated by server
                 if (s_isServerNode)
                 {
-                    consoleParameters = AggregateParameters(consoleParameters, new[] { "FORCECONSOLECOLOR" });
+                    consoleParameters = $"PREFERCONSOLECOLOR;{consoleParameters}";
                 }
 
                 // Check to see if there is a possibility we will be logging from an out-of-proc node.
