diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 962d58a3024..fa1cc09db2e 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -31,7 +31,7 @@ internal class FileMatcher
         private static readonly char[] s_wildcardCharacters = { '*', '?' };
         private static readonly char[] s_wildcardAndSemicolonCharacters = { '*', '?', ';' };
 
-        private static readonly string[] s_propertyReferences = { "$(", "@(" };
+        private static readonly string[] s_propertyAndItemReferences = { "$(", "@(" };
 
         // on OSX both System.IO.Path separators are '/', so we have to use the literals
         internal static readonly char[] directorySeparatorCharacters = { '/', '\\' };
@@ -195,16 +195,16 @@ internal static bool HasWildcardsSemicolonItemOrPropertyReferences(string filesp
             return
 
                 (-1 != filespec.IndexOfAny(s_wildcardAndSemicolonCharacters)) ||
-                HasPropertyReferences(filespec)
+                HasPropertyOrItemReferences(filespec)
                 ;
         }
 
         /// <summary>
         /// Determines whether the given path has any property references.
         /// </summary>
-        internal static bool HasPropertyReferences(string filespec)
+        internal static bool HasPropertyOrItemReferences(string filespec)
         {
-            return s_propertyReferences.Aggregate(false, (current, propertyReference) => current | filespec.Contains(propertyReference));
+            return s_propertyAndItemReferences.Aggregate(false, (current, propertyReference) => current | filespec.Contains(propertyReference));
         }
 
         /// <summary>
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index f44a332ff8f..1ac2687628b 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -289,7 +289,7 @@ private bool ParsePattern(string pattern, out string[] patterns)
             {
                 result = true;
             }
-            else if (FileMatcher.HasPropertyReferences(pattern))
+            else if (FileMatcher.HasPropertyOrItemReferences(pattern))
             {
                 // Supporting property references would require access to Expander which is unavailable in Microsoft.Build.Tasks
                 Log.LogErrorWithCodeFromResources("Unzip.ErrorParsingPatternPropertyReferences", pattern);
