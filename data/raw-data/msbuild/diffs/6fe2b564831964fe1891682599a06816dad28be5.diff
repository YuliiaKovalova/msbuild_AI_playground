diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index daf2112d3bf..d1fdcb2a0d9 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -1298,6 +1298,7 @@ public sealed partial class ZipDirectory : Microsoft.Build.Tasks.TaskExtension
         public ZipDirectory() { }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem DestinationFile { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool Overwrite { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem SourceDirectory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public override bool Execute() { throw null; }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index dc14a5dbaf8..8ab1a31d539 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -747,6 +747,7 @@ public sealed partial class ZipDirectory : Microsoft.Build.Tasks.TaskExtension
         public ZipDirectory() { }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem DestinationFile { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool Overwrite { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem SourceDirectory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public override bool Execute() { throw null; }
diff --git a/src/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/Microsoft.Build.CommonTypes.xsd
index 5b609e81317..febc2894d74 100644
--- a/src/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -5250,6 +5250,7 @@ elementFormDefault="qualified">
             <xs:complexContent>
                 <xs:extension base="msb:TaskType">
                     <xs:attribute name="DestinationFile" use="required" />
+                    <xs:attribute name="Overwrite" type="msb:boolean" />
                     <xs:attribute name="SourceDirectory" type="msb:boolean" />
                 </xs:extension>
             </xs:complexContent>
diff --git a/src/Tasks.UnitTests/ZipDirectory_Tests.cs b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
index a379588d1b3..205cc9b8d0d 100644
--- a/src/Tasks.UnitTests/ZipDirectory_Tests.cs
+++ b/src/Tasks.UnitTests/ZipDirectory_Tests.cs
@@ -58,6 +58,48 @@ public void CanZipDirectory()
             }
         }
 
+        [Fact]
+        public void CanOvewriteExistingFile()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder sourceFolder = testEnvironment.CreateFolder(createFolder: true);
+
+                testEnvironment.CreateFile(sourceFolder, "F1C22D660B0D4DAAA296C1B980320B03.txt", "F1C22D660B0D4DAAA296C1B980320B03");
+                testEnvironment.CreateFile(sourceFolder, "AA825D1CB154492BAA58E1002CE1DFEB.txt", "AA825D1CB154492BAA58E1002CE1DFEB");
+
+                TransientTestFile file = testEnvironment.CreateFile(testEnvironment.DefaultTestDirectory, "test.zip", contents: "test");
+
+                ZipDirectory zipDirectory = new ZipDirectory
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFile = new TaskItem(file.Path),
+                    Overwrite = true,
+                    SourceDirectory = new TaskItem(sourceFolder.FolderPath)
+                };
+
+                zipDirectory.Execute().ShouldBeTrue(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain(sourceFolder.FolderPath, () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(file.Path, () => _mockEngine.Log);
+
+                using (FileStream stream = new FileStream(file.Path, FileMode.Open, FileAccess.Read, FileShare.Read))
+                using (ZipArchive archive = new ZipArchive(stream, ZipArchiveMode.Read))
+                {
+                    archive.Entries
+                        .Select(i => i.FullName)
+                        .ToList()
+                        .ShouldBe(
+                            new List<string>
+                            {
+                                "F1C22D660B0D4DAAA296C1B980320B03.txt",
+                                "AA825D1CB154492BAA58E1002CE1DFEB.txt"
+                            },
+                            ignoreOrder: true);
+                }
+            }
+        }
+
         [Fact]
         public void LogsErrorIfDestinationExists()
         {
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index 882f7903df1..d7e6716457b 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -10,35 +10,55 @@ namespace Microsoft.Build.Tasks
 {
     public sealed class ZipDirectory : TaskExtension
     {
+        /// <summary>
+        /// Gets or sets a <see cref="ITaskItem"/> containing the full path to the destination file to create.
+        /// </summary>
         [Required]
         public ITaskItem DestinationFile { get; set; }
 
+        /// <summary>
+        /// Gets or sets a value indicating if the destination file should be overwritten.
+        /// </summary>
+        public bool Overwrite { get; set; }
+
+        /// <summary>
+        /// Gets or sets a <see cref="ITaskItem"/> containing the full path to the source directory to create a zip archive from.
+        /// </summary>
         [Required]
         public ITaskItem SourceDirectory { get; set; }
 
         public override bool Execute()
         {
-            if (!Directory.Exists(SourceDirectory.ItemSpec))
+            DirectoryInfo sourceDirectory = new DirectoryInfo(SourceDirectory.ItemSpec);
+
+            if (!sourceDirectory.Exists)
             {
-                Log.LogErrorFromResources("ZipDirectory.ErrorDirectoryDoesNotExist", SourceDirectory.ItemSpec);
+                Log.LogErrorFromResources("ZipDirectory.ErrorDirectoryDoesNotExist", sourceDirectory.FullName);
                 return false;
             }
 
-            if (File.Exists(DestinationFile.ItemSpec))
+            FileInfo destinationFile = new FileInfo(DestinationFile.ItemSpec);
+
+            if (destinationFile.Exists)
             {
-                Log.LogErrorFromResources("ZipDirectory.ErrorFileExists", DestinationFile.ItemSpec);
+                if(!Overwrite)
+                {
+                    Log.LogErrorFromResources("ZipDirectory.ErrorFileExists", destinationFile.FullName);
 
-                return false;
+                    return false;
+                }
+
+                File.Delete(destinationFile.FullName);
             }
 
             try
             {
-                Log.LogMessageFromResources(MessageImportance.High, "ZipDirectory.Comment", SourceDirectory.ItemSpec, DestinationFile.ItemSpec);
-                ZipFile.CreateFromDirectory(SourceDirectory.ItemSpec, DestinationFile.ItemSpec);
+                Log.LogMessageFromResources(MessageImportance.High, "ZipDirectory.Comment", sourceDirectory.FullName, destinationFile.FullName);
+                ZipFile.CreateFromDirectory(sourceDirectory.FullName, destinationFile.FullName);
             }
             catch (Exception e)
             {
-                Log.LogErrorFromResources("ZipDirectory.ErrorFailed", SourceDirectory.ItemSpec, DestinationFile.ItemSpec, e.Message);
+                Log.LogErrorFromResources("ZipDirectory.ErrorFailed", sourceDirectory.FullName, destinationFile.FullName, e.Message);
             }
 
             return !Log.HasLoggedErrors;
