diff --git a/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs b/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
index da7a6d85a62..ee844155e41 100644
--- a/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
+++ b/src/Shared/UnitTests/CustomXunitAttributesUtilities.cs
@@ -6,27 +6,16 @@ namespace Microsoft.Build.UnitTests
     internal static class CustomXunitAttributesUtilities
     {
 #if NETFRAMEWORK
-        public static bool IsRunningOnNet => false;
-
-        public static bool IsRunningOnNetStandard => false;
-
-        public static bool IsRunningOnNetFramework => true;
-#elif NETSTANDARD
-        public static bool IsRunningOnNet => false;
-
-        public static bool IsRunningOnNetFramework => false;
-
-        public static bool IsRunningOnNetStandard => true;
+        internal static bool IsBuiltAgainstDotNet => false;
 
+        internal static bool IsBuiltAgainstNetFramework => true;
 #elif NET
-        public static bool IsRunningOnNet => true;
-
-        public static bool IsRunningOnNetStandard => false;
+        internal static bool IsBuiltAgainstDotNet => true;
 
-        public static bool IsRunningOnNetFramework => false;
+        internal static bool IsBuiltAgainstNetFramework => false;
 #endif
 
-        public static string AppendAdditionalMessage(this string message, string? additionalMessage)
+        internal static string AppendAdditionalMessage(this string message, string? additionalMessage)
             => !string.IsNullOrWhiteSpace(additionalMessage) ? $"{message} {additionalMessage}" : message;
     }
 }
diff --git a/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs b/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
index 31e02d4efb3..670a26c791f 100644
--- a/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
+++ b/src/Shared/UnitTests/LongPathSupportDisabledFactAttribute.cs
@@ -25,7 +25,7 @@ public LongPathSupportDisabledFactAttribute(string? additionalMessage = null, bo
                 return;
             }
 
-            if (fullFrameworkOnly && !CustomXunitAttributesUtilities.IsRunningOnNetFramework)
+            if (fullFrameworkOnly && !CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
             {
                 this.Skip = "This test only runs on full .NET Framework and when long path support is disabled.".AppendAdditionalMessage(additionalMessage);
                 return;
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
index d17224b80aa..5c94b7d39c2 100644
--- a/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyFactAttribute.cs
@@ -16,7 +16,7 @@ public class DotNetOnlyFactAttribute : FactAttribute
         /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
         public DotNetOnlyFactAttribute(string? additionalMessage = null)
         {
-            if (!CustomXunitAttributesUtilities.IsRunningOnNet)
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstDotNet)
             {
                 this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
index b7fbc83d786..0bb3ce874a1 100644
--- a/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/DotNetOnlyTheoryAttribute.cs
@@ -16,7 +16,7 @@ public class DotNetOnlyTheoryAttribute : TheoryAttribute
         /// <param name="additionalMessage">The additional message that is appended to skip reason, when test is skipped.</param>
         public DotNetOnlyTheoryAttribute(string? additionalMessage = null)
         {
-            if (!CustomXunitAttributesUtilities.IsRunningOnNet)
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstDotNet)
             {
                 this.Skip = "This test only runs on .NET.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
index 3262a274921..9c7087ed941 100644
--- a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyFactAttribute.cs
@@ -22,7 +22,7 @@ public WindowsFullFrameworkOnlyFactAttribute(string? additionalMessage = null)
                 this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
                 return;
             }
-            if (!CustomXunitAttributesUtilities.IsRunningOnNetFramework)
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
             {
                 this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
             }
diff --git a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
index 02aab14ad65..b84641c85ac 100644
--- a/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
+++ b/src/Xunit.NetCore.Extensions/WindowsFullFrameworkOnlyTheoryAttribute.cs
@@ -23,7 +23,7 @@ public WindowsFullFrameworkOnlyTheoryAttribute(string? additionalMessage = null)
                 this.Skip = "This test only runs on Windows on full framework.".AppendAdditionalMessage(additionalMessage);
                 return;
             }
-            if (!CustomXunitAttributesUtilities.IsRunningOnNetFramework)
+            if (!CustomXunitAttributesUtilities.IsBuiltAgainstNetFramework)
             {
                 this.Skip = "This test only runs on full framework.".AppendAdditionalMessage(additionalMessage);
             }
