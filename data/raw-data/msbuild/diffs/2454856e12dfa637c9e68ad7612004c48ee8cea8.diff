diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 6ccd378e62f..7d554a67cb9 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -80,9 +80,6 @@
     <Compile Include="..\Shared\CanonicalError.cs">
       <Link>BackEnd\Components\RequestBuilder\IntrinsicTasks\CanonicalError.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs">
-      <Link>IConstrainedEqualityComparer.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\PropertyParser.cs">
       <Link>BackEnd\Components\RequestBuilder\IntrinsicTasks\PropertyParser.cs</Link>
     </Compile>
@@ -381,7 +378,6 @@
       <Link>Collections\CopyOnWriteDictionary.cs</Link>
     </Compile>
     <Compile Include="Collections\CopyOnWritePropertyDictionary.cs" />
-    <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs" />
     <Compile Include="Collections\HashTableUtility.cs" />
     <Compile Include="Collections\IConstrainableDictionary.cs" />
     <Compile Include="Collections\ICopyOnWritePropertyDictionary.cs" />
diff --git a/src/Framework/IConstrainedEqualityComparer.cs b/src/Framework/IConstrainedEqualityComparer.cs
new file mode 100644
index 00000000000..04ad75b4082
--- /dev/null
+++ b/src/Framework/IConstrainedEqualityComparer.cs
@@ -0,0 +1,30 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+
+#nullable disable
+
+namespace Microsoft.Build.Collections
+{
+    /// <summary>
+    ///     Defines methods to support the comparison of objects for
+    ///     equality over constrained inputs.
+    /// </summary>
+#if TASKHOST
+    internal interface IConstrainedEqualityComparer<T> : IEqualityComparer<T>
+#else
+    internal interface IConstrainedEqualityComparer<in T> : IEqualityComparer<T>
+#endif
+    {
+        /// <summary>
+        /// Determines whether the specified objects are equal, factoring in the specified bounds when comparing <paramref name="y"/>.
+        /// </summary>
+        bool Equals(T x, T y, int indexY, int length);
+
+        /// <summary>
+        /// Returns a hash code for the specified object factoring in the specified bounds.
+        /// </summary>
+        int GetHashCode(T obj, int index, int length);
+    }
+}
diff --git a/src/Framework/MSBuildNameIgnoreCaseComparer.cs b/src/Framework/MSBuildNameIgnoreCaseComparer.cs
new file mode 100644
index 00000000000..bb3f37887aa
--- /dev/null
+++ b/src/Framework/MSBuildNameIgnoreCaseComparer.cs
@@ -0,0 +1,195 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+#nullable disable
+
+namespace Microsoft.Build.Collections
+{
+    /// <summary>
+    /// This is a custom string comparer that has three advantages over the regular
+    /// string comparer:
+    /// 1) It can generate hash codes and perform equivalence operations on parts of a string rather than a whole
+    /// 2) It uses "unsafe" pointers to maximize performance of those operations
+    /// 3) It takes advantage of limitations on MSBuild Property/Item names to cheaply do case insensitive comparison.
+    /// </summary>
+    [Serializable]
+    internal class MSBuildNameIgnoreCaseComparer : IConstrainedEqualityComparer<string>, IEqualityComparer<string>
+    {
+        /// <summary>
+        /// The processor architecture on which we are running, but default it will be x86
+        /// </summary>
+        private static readonly NativeMethods.ProcessorArchitectures s_runningProcessorArchitecture = NativeMethods.ProcessorArchitecture;
+
+        /// <summary>
+        /// The default immutable comparer instance.
+        /// </summary>
+        internal static MSBuildNameIgnoreCaseComparer Default { get; } = new MSBuildNameIgnoreCaseComparer();
+
+        public bool Equals(string x, string y)
+        {
+            return Equals(x, y, 0, y?.Length ?? 0);
+        }
+
+        public int GetHashCode(string obj)
+        {
+            return GetHashCode(obj, 0, obj?.Length ?? 0);
+        }
+
+        /// <summary>
+        /// Performs the "Equals" operation on two MSBuild property, item or metadata names
+        /// </summary>
+        public bool Equals(string compareToString, string constrainedString, int start, int lengthToCompare)
+        {
+            if (lengthToCompare < 0)
+            {
+                EscapeHatches.ThrowInternalError("Invalid lengthToCompare '{0}' {1} {2}", constrainedString, start, lengthToCompare);
+            }
+
+            if (start < 0 || start > (constrainedString?.Length ?? 0) - lengthToCompare)
+            {
+                EscapeHatches.ThrowInternalError("Invalid start '{0}' {1} {2}", constrainedString, start, lengthToCompare);
+            }
+
+            if (ReferenceEquals(compareToString, constrainedString))
+            {
+                return true;
+            }
+
+            if (compareToString == null || constrainedString == null)
+            {
+                return false;
+            }
+
+#if NET
+            return compareToString.AsSpan().Equals(constrainedString.AsSpan(start, lengthToCompare), StringComparison.OrdinalIgnoreCase);
+#else
+            if (lengthToCompare != compareToString.Length)
+            {
+                return false;
+            }
+
+            if ((s_runningProcessorArchitecture != NativeMethods.ProcessorArchitectures.IA64)
+                && (s_runningProcessorArchitecture != NativeMethods.ProcessorArchitectures.ARM))
+            {
+                // The use of unsafe here is quite a bit faster than the regular
+                // mechanism in the BCL. This is because we can make assumptions
+                // about the characters that are within the strings being compared
+                // i.e. they are valid MSBuild property, item and metadata names
+                unsafe
+                {
+                    fixed (char* px = compareToString)
+                    {
+                        fixed (char* py = constrainedString)
+                        {
+                            for (int i = 0; i < compareToString.Length; i++)
+                            {
+                                int chx = px[i];
+                                int chy = py[i + start];
+                                chx &= 0x00DF; // Extract the uppercase character
+                                chy &= 0x00DF; // Extract the uppercase character
+
+                                if (chx != chy)
+                                {
+                                    return false;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+            else
+            {
+                return String.Compare(compareToString, 0, constrainedString, start, lengthToCompare, StringComparison.OrdinalIgnoreCase) == 0;
+            }
+
+            return true;
+#endif
+        }
+
+        /// <summary>
+        /// Getting a case insensitive hash code for the msbuild property, item or metadata name
+        /// </summary>
+        public int GetHashCode(string obj, int start, int length)
+        {
+            if (obj == null)
+            {
+                return 0; // per BCL convention
+            }
+
+            if ((s_runningProcessorArchitecture != NativeMethods.ProcessorArchitectures.IA64)
+                && (s_runningProcessorArchitecture != NativeMethods.ProcessorArchitectures.ARM))
+            {
+                unsafe
+                {
+                    // This algorithm is based on the 32bit version from the CLR's string::GetHashCode
+                    fixed (char* src = obj)
+                    {
+                        int hash1 = (5381 << 16) + 5381;
+
+                        int hash2 = hash1;
+
+                        char* src2 = src + start;
+                        var pint = (int*)src2;
+
+                        while (length > 0)
+                        {
+                            // We're only interested in uppercase ASCII characters
+                            int val = pint[0] & 0x00DF00DF;
+
+                            // When we reach the end of the string, we need to
+                            // stop short when gathering our data to compute the
+                            // hash code - we are only interested in the data within
+                            // the string, and not the null terminator etc.
+                            if (length == 1)
+                            {
+                                if (BitConverter.IsLittleEndian)
+                                {
+                                    val &= 0xFFFF;
+                                }
+                                else
+                                {
+                                    val &= unchecked((int)0xFFFF0000);
+                                }
+                            }
+
+                            hash1 = ((hash1 << 5) + hash1 + (hash1 >> 27)) ^ val;
+                            if (length <= 2)
+                            {
+                                break;
+                            }
+
+                            // Once again we're only interested in the uppercase ASCII characters
+                            val = pint[1] & 0x00DF00DF;
+                            if (length == 3)
+                            {
+                                if (BitConverter.IsLittleEndian)
+                                {
+                                    val &= 0xFFFF;
+                                }
+                                else
+                                {
+                                    val &= unchecked((int)0xFFFF0000);
+                                }
+                            }
+
+                            hash2 = ((hash2 << 5) + hash2 + (hash2 >> 27)) ^ val;
+                            pint += 2;
+                            length -= 4;
+                        }
+
+                        return hash1 + (hash2 * 1566083941);
+                    }
+                }
+            }
+            else
+            {
+                return StringComparer.OrdinalIgnoreCase.GetHashCode(obj.Substring(start, length));
+            }
+        }
+    }
+}
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index a7dc889b270..c2b8a85aedc 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -76,9 +76,6 @@
     <Compile Include="..\Shared\FileUtilitiesRegex.cs">
       <Link>FileUtilitiesRegex.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs">
-      <Link>IConstrainedEqualityComparer.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\QuotingUtilities.cs" />
     <Compile Include="..\Shared\RegisteredTaskObjectCacheBase.cs">
       <Link>RegisteredTaskObjectCacheBase.cs</Link>
@@ -90,7 +87,6 @@
     <Compile Include="..\Shared\XMakeElements.cs" />
     <Compile Include="..\Shared\CopyOnWriteDictionary.cs" />
     <Compile Include="..\Shared\IKeyed.cs" />
-    <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs" />
     <Compile Include="..\Shared\NamedPipeUtil.cs" />
     <Compile Include="..\Shared\ReadOnlyEmptyCollection.cs" />
     <Compile Include="..\Shared\ReadOnlyEmptyDictionary.cs" />
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index d0ad4122b8d..df23c76bb1f 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -228,6 +228,8 @@
     <Compile Include="..\Shared\TaskHostTaskCancelled.cs" />
     <Compile Include="..\Shared\TaskParameter.cs" />
     <Compile Include="..\Shared\AssemblyNameExtension.cs" />
+    <Compile Include="..\Framework\IConstrainedEqualityComparer.cs" />
+    <Compile Include="..\Framework\MSBuildNameIgnoreCaseComparer.cs" />
 
     <Compile Include="..\Shared\FileSystem\IFileSystem.cs" />
     <Compile Include="..\Shared\FileSystem\FileSystems.cs" />
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 3e436da8c38..c3738f570c9 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -8,6 +8,8 @@
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
+using Microsoft.Build.Collections;
+
 #if FEATURE_APPDOMAIN
 using System.Security;
 #endif
@@ -136,7 +138,7 @@ public TaskParameter(object wrappedParameter)
                     {
                         if (inputAsITaskItemArray[i] != null)
                         {
-                            taskItemArrayParameter[i] = CreateNewTaskItemFrom(inputAsITaskItemArray[i]);
+                            taskItemArrayParameter[i] = new TaskParameterTaskItem(inputAsITaskItemArray[i]);
                         }
                     }
 
@@ -175,7 +177,7 @@ public TaskParameter(object wrappedParameter)
                 else if (typeof(ITaskItem).IsAssignableFrom(wrappedParameterType))
                 {
                     _parameterType = TaskParameterType.ITaskItem;
-                    _wrappedParameter = CreateNewTaskItemFrom((ITaskItem)wrappedParameter);
+                    _wrappedParameter = new TaskParameterTaskItem((ITaskItem)wrappedParameter);
                 }
                 else if (wrappedParameterType.GetTypeInfo().IsValueType)
                 {
@@ -278,97 +280,29 @@ public override object InitializeLifetimeService()
         /// </summary>
         internal static TaskParameter FactoryForDeserialization(ITranslator translator)
         {
-            TaskParameter taskParameter = new TaskParameter();
+            TaskParameter taskParameter = new();
             taskParameter.Translate(translator);
             return taskParameter;
         }
 
-        /// <summary>
-        /// Creates a new ITaskItem with the contents of the old one.
-        /// </summary>
-        private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
-        {
-            ITaskItem2 copyFromAsITaskItem2 = copyFrom as ITaskItem2;
-            string escapedItemSpec;
-            string escapedDefiningProject;
-            Dictionary<string, string> escapedMetadata;
-            if (copyFromAsITaskItem2 != null)
-            {
-                escapedItemSpec = copyFromAsITaskItem2.EvaluatedIncludeEscaped;
-                escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
-                IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
-
-                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
-                if (escapedMetadata is null)
-                {
-                    escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-                    foreach (object key in nonGenericEscapedMetadata.Keys)
-                    {
-                        escapedMetadata[(string)key] = (string)nonGenericEscapedMetadata[key] ?? String.Empty;
-                    }
-                }
-            }
-            else
-            {
-                // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that
-                // CloneCustomMetadata, GetMetadata, & ItemSpec returns unescaped values, and
-                // TaskParameterTaskItem's constructor expects escaped values, so escaping them all
-                // is the closest approximation to correct we can get.
-                escapedItemSpec = EscapingUtilities.Escape(copyFrom.ItemSpec);
-
-                escapedDefiningProject = EscapingUtilities.EscapeWithCaching(copyFrom.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));
-
-                IDictionary customMetadata = copyFrom.CloneCustomMetadata();
-                escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-
-                if (customMetadata?.Count > 0)
-                {
-                    foreach (string key in customMetadata.Keys)
-                    {
-                        escapedMetadata.Add(key, EscapingUtilities.Escape((string)customMetadata[key] ?? String.Empty));
-                    }
-                }
-            }
-
-            TaskParameterTaskItem taskItem = new TaskParameterTaskItem(escapedItemSpec, escapedDefiningProject, escapedMetadata);
-            return taskItem;
-        }
-
         /// <summary>
         /// Serialize / deserialize this item.
         /// </summary>
         private void TranslateITaskItemArray(ITranslator translator)
         {
-            if (!TranslateNullable(translator, _wrappedParameter))
-            {
-                return;
-            }
+            ITaskItem[] wrappedItems = (ITaskItem[])_wrappedParameter;
+            int length = wrappedItems?.Length ?? 0;
+            translator.Translate(ref length);
+            wrappedItems ??= new ITaskItem[length];
 
-            if (translator.Mode == TranslationDirection.WriteToStream)
+            for (int i = 0; i < wrappedItems.Length; i++)
             {
-                ITaskItem[] wrappedItems = (ITaskItem[])_wrappedParameter;
-
-                int length = wrappedItems.Length;
-                translator.Translate(ref length);
-
-                foreach (ITaskItem wrappedItem in wrappedItems)
-                {
-                    WriteITaskItem(translator, wrappedItem);
-                }
+                TaskParameterTaskItem taskItem = (TaskParameterTaskItem)wrappedItems[i];
+                translator.Translate(ref taskItem, TaskParameterTaskItem.FactoryForDeserialization);
+                wrappedItems[i] = taskItem;
             }
-            else
-            {
-                int length = 0;
-                translator.Translate(ref length);
-                ITaskItem[] wrappedItems = new ITaskItem[length];
 
-                for (int i = 0; i < length; i++)
-                {
-                    ReadITaskItem(translator, ref wrappedItems[i]);
-                }
-
-                _wrappedParameter = wrappedItems;
-            }
+            _wrappedParameter = wrappedItems;
         }
 
         /// <summary>
@@ -376,127 +310,9 @@ private void TranslateITaskItemArray(ITranslator translator)
         /// </summary>
         private void TranslateITaskItem(ITranslator translator)
         {
-            if (translator.Mode == TranslationDirection.WriteToStream)
-            {
-                WriteITaskItem(translator, (ITaskItem)_wrappedParameter);
-            }
-            else // TranslationDirection.ReadFromStream
-            {
-                ITaskItem wrappedItem = null;
-                ReadITaskItem(translator, ref wrappedItem);
-                _wrappedParameter = wrappedItem;
-            }
-        }
-
-        /// <summary>
-        /// Write the given ITaskItem, using the given write translator
-        /// </summary>
-        private void WriteITaskItem(ITranslator translator, ITaskItem wrappedItem)
-        {
-            ErrorUtilities.VerifyThrow(translator.Mode == TranslationDirection.WriteToStream, "Cannot call this method when reading!");
-
-            if (!TranslateNullable(translator, wrappedItem))
-            {
-                return;
-            }
-
-            string escapedItemSpec;
-            string escapedDefiningProject;
-            IDictionary wrappedMetadata;
-            bool wrappedMetadataIsEscaped;
-
-            ITaskItem2 wrappedItemAsITaskItem2 = wrappedItem as ITaskItem2;
-
-            if (wrappedItemAsITaskItem2 != null)
-            {
-                escapedItemSpec = wrappedItemAsITaskItem2.EvaluatedIncludeEscaped;
-                escapedDefiningProject = wrappedItemAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
-                wrappedMetadata = wrappedItemAsITaskItem2.CloneCustomMetadataEscaped();
-                wrappedMetadataIsEscaped = true;
-            }
-            else
-            {
-                // We know that the ITaskItem constructor expects an escaped string, and that ITaskItem.ItemSpec
-                // is expected to be unescaped, so make sure we give the constructor what it wants.
-                escapedItemSpec = EscapingUtilities.Escape(wrappedItem.ItemSpec);
-                escapedDefiningProject = EscapingUtilities.EscapeWithCaching(wrappedItem.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));
-                wrappedMetadata = wrappedItem.CloneCustomMetadata();
-                wrappedMetadataIsEscaped = false;
-            }
-
-            Dictionary<string, string> escapedGenericWrappedMetadata = wrappedMetadata as Dictionary<string, string>;
-
-            if (escapedGenericWrappedMetadata == null)
-            {
-                escapedGenericWrappedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-
-                foreach (object key in wrappedMetadata.Keys)
-                {
-                    string value = (string)wrappedMetadata[key];
-
-                    if (!wrappedMetadataIsEscaped)
-                    {
-                        value = (value == null) ? value : EscapingUtilities.Escape(value);
-                    }
-
-                    escapedGenericWrappedMetadata.Add((string)key, value);
-                }
-            }
-            else if (!wrappedMetadataIsEscaped)
-            {
-                foreach (KeyValuePair<string, string> entry in escapedGenericWrappedMetadata)
-                {
-                    escapedGenericWrappedMetadata[entry.Key] = entry.Value == null ? entry.Value : EscapingUtilities.Escape(entry.Value);
-                }
-            }
-
-            translator.Translate(ref escapedItemSpec);
-            translator.Translate(ref escapedDefiningProject);
-            translator.TranslateDictionary(ref escapedGenericWrappedMetadata, StringComparer.OrdinalIgnoreCase);
-        }
-
-        /// <summary>
-        /// Read an ITaskItem into the given parameter, using the given read translator
-        /// </summary>
-        private void ReadITaskItem(ITranslator translator, ref ITaskItem wrappedItem)
-        {
-            ErrorUtilities.VerifyThrow(translator.Mode == TranslationDirection.ReadFromStream, "Cannot call this method when writing!");
-
-            if (!TranslateNullable(translator, wrappedItem))
-            {
-                return;
-            }
-
-            string escapedItemSpec = null;
-            string escapedDefiningProject = null;
-            Dictionary<string, string> escapedMetadata = null;
-
-            translator.Translate(ref escapedItemSpec);
-            translator.Translate(ref escapedDefiningProject);
-            translator.TranslateDictionary(ref escapedMetadata, StringComparer.OrdinalIgnoreCase);
-
-            wrappedItem = new TaskParameterTaskItem(escapedItemSpec, escapedDefiningProject, escapedMetadata);
-        }
-
-        /// <summary>
-        /// Writes out the boolean which says if this object is null or not.
-        /// </summary>
-        /// <typeparam name="T">The nullable type to translate.</typeparam>
-        private bool TranslateNullable<T>(ITranslator translator, T value)
-        {
-            bool haveRef = false;
-
-            if (translator.Mode == TranslationDirection.WriteToStream)
-            {
-                haveRef = (value != null);
-                translator.Translate(ref haveRef);
-            }
-            else // TranslationDirection.ReadFromStream
-            {
-                translator.Translate(ref haveRef);
-            }
-
-            return haveRef;
+            TaskParameterTaskItem taskItem = (TaskParameterTaskItem)_wrappedParameter;
+            translator.Translate(ref taskItem, TaskParameterTaskItem.FactoryForDeserialization);
+            _wrappedParameter = taskItem;
         }
 
         /// <summary>
@@ -724,7 +540,8 @@ private class TaskParameterTaskItem :
             MarshalByRefObject,
 #endif
             ITaskItem,
-            ITaskItem2
+            ITaskItem2,
+            ITranslatable
 #if !TASKHOST
             , IMetadataContainer
 #endif
@@ -752,13 +569,51 @@ private class TaskParameterTaskItem :
             /// <summary>
             /// Constructor for serialization
             /// </summary>
-            public TaskParameterTaskItem(string escapedItemSpec, string escapedDefiningProject, Dictionary<string, string> escapedMetadata)
+            internal TaskParameterTaskItem(ITaskItem copyFrom)
             {
-                ErrorUtilities.VerifyThrowInternalNull(escapedItemSpec);
+                if (copyFrom is ITaskItem2 copyFromAsITaskItem2)
+                {
+                    _escapedItemSpec = copyFromAsITaskItem2.EvaluatedIncludeEscaped;
+                    _escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
+                    IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
+
+                    _customEscapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
+                    if (_customEscapedMetadata is null)
+                    {
+                        _customEscapedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);
+                        foreach (DictionaryEntry entry in nonGenericEscapedMetadata)
+                        {
+                            _customEscapedMetadata[(string)entry.Key] = (string)nonGenericEscapedMetadata[entry.Value] ?? string.Empty;
+                        }
+                    }
+                }
+                else
+                {
+                    // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that
+                    // CloneCustomMetadata, GetMetadata, & ItemSpec returns unescaped values, and
+                    // TaskParameterTaskItem's constructor expects escaped values, so escaping them all
+                    // is the closest approximation to correct we can get.
+                    _escapedItemSpec = EscapingUtilities.Escape(copyFrom.ItemSpec);
+
+                    _escapedDefiningProject = EscapingUtilities.EscapeWithCaching(copyFrom.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));
+
+                    IDictionary customMetadata = copyFrom.CloneCustomMetadata();
+                    _customEscapedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);
 
-                _escapedItemSpec = escapedItemSpec;
-                _escapedDefiningProject = escapedDefiningProject;
-                _customEscapedMetadata = escapedMetadata;
+                    if (customMetadata?.Count > 0)
+                    {
+                        foreach (DictionaryEntry entry in customMetadata)
+                        {
+                            _customEscapedMetadata.Add((string)entry.Key, EscapingUtilities.Escape((string)entry.Value ?? string.Empty));
+                        }
+                    }
+                }
+
+                ErrorUtilities.VerifyThrowInternalNull(_escapedItemSpec);
+            }
+
+            private TaskParameterTaskItem()
+            {
             }
 
             /// <summary>
@@ -851,7 +706,7 @@ public void SetMetadata(string metadataName, string metadataValue)
                 // That's why this is IsItemSpecModifier and not IsDerivableItemSpecModifier.
                 ErrorUtilities.VerifyThrowArgument(!FileUtilities.ItemSpecModifiers.IsDerivableItemSpecModifier(metadataName), "Shared.CannotChangeItemSpecModifiers", metadataName);
 
-                _customEscapedMetadata ??= new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                _customEscapedMetadata ??= new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);
 
                 _customEscapedMetadata[metadataName] = metadataValue ?? String.Empty;
             }
@@ -921,7 +776,7 @@ public void CopyMetadataTo(ITaskItem destinationItem)
             /// <returns>Dictionary of cloned metadata</returns>
             public IDictionary CloneCustomMetadata()
             {
-                IDictionary<string, string> clonedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                IDictionary<string, string> clonedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);
 
                 if (_customEscapedMetadata != null)
                 {
@@ -1038,6 +893,23 @@ public void ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)
                     SetMetadata(kvp.Key, kvp.Value);
                 }
             }
+
+            public void Translate(ITranslator translator)
+            {
+                translator.Translate(ref _escapedItemSpec);
+                translator.Translate(ref _escapedDefiningProject);
+                translator.TranslateDictionary(ref _customEscapedMetadata, MSBuildNameIgnoreCaseComparer.Default);
+
+                ErrorUtilities.VerifyThrowInternalNull(_escapedItemSpec);
+                ErrorUtilities.VerifyThrowInternalNull(_customEscapedMetadata);
+            }
+
+            internal static TaskParameterTaskItem FactoryForDeserialization(ITranslator translator)
+            {
+                TaskParameterTaskItem taskItem = new();
+                taskItem.Translate(translator);
+                return taskItem;
+            }
         }
     }
 }
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 37d7cece260..c5530c52813 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -73,7 +73,6 @@
     <Compile Include="..\Shared\FileDelegates.cs">
       <Link>FileDelegates.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs" />
     <Compile Include="..\Shared\PropertyParser.cs">
       <Link>PropertyParser.cs</Link>
     </Compile>
@@ -118,7 +117,6 @@
     <Compile Include="..\Shared\Modifiers.cs">
       <Link>Modifiers.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs" />
     <Compile Include="..\Shared\ReadOnlyCollection.cs" />
     <Compile Include="..\Shared\ReadOnlyEmptyDictionary.cs" />
     <Compile Include="..\Shared\Tracing.cs" />
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index e5a0a89b595..22facb4a8d3 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -87,15 +87,9 @@
     <Compile Include="..\Shared\FrameworkLocationHelper.cs">
       <Link>Shared\FrameworkLocationHelper.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs">
-      <Link>Shared\IConstrainedEqualityComparer.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\IKeyed.cs">
       <Link>Shared\IKeyed.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs">
-      <Link>Shared\MSBuildNameIgnoreCaseComparer.cs</Link>
-    </Compile>
     <Compile Include="..\Shared\Modifiers.cs">
       <Link>Shared\Modifiers.cs</Link>
     </Compile>
