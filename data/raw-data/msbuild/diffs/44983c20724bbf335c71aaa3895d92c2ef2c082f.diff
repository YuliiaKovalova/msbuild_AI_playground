diff --git a/src/Analyzers.UnitTests/EndToEndTests.cs b/src/Analyzers.UnitTests/EndToEndTests.cs
index a09a9c83924..0a4e1b96438 100644
--- a/src/Analyzers.UnitTests/EndToEndTests.cs
+++ b/src/Analyzers.UnitTests/EndToEndTests.cs
@@ -90,11 +90,11 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode)
             root=true
 
             [*.csproj]
-            msbuild_analyzer.BC0101.IsEnabled=false
-            msbuild_analyzer.BC0101.severity=warning
+            msbuild_analyzer.BC0101.IsEnabled=true
+            msbuild_analyzer.BC0101.Severity=warning
 
             msbuild_analyzer.COND0543.IsEnabled=false
-            msbuild_analyzer.COND0543.severity=Error
+            msbuild_analyzer.COND0543.Severity=Error
             msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
             msbuild_analyzer.COND0543.CustomSwitch=QWERTY
 
diff --git a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
index e5927374c2f..9eb2ae16ad1 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerConfiguration.cs
@@ -46,13 +46,19 @@ public class BuildAnalyzerConfiguration
     /// </summary>
     public bool? IsEnabled { get; internal init; }
 
+    /// <summary>
+    /// Creates a <see cref="BuildAnalyzerConfiguration"/> object based on the provided configuration dictionary.
+    /// If key, equals to the name of the property in lowercase, exists in the dictionary => the value is parsed and assigned to the instance property value.
+    /// </summary>
+    /// <param name="configDictionary">The configuration dictionary containing the settings for the build analyzer.</param>
+    /// <returns>A new instance of <see cref="BuildAnalyzerConfiguration"/> with the specified settings.</returns>
     public static BuildAnalyzerConfiguration Create(Dictionary<string, string> configDictionary)
     {
         return new()
         {
-            EvaluationAnalysisScope = TryExtractValue("EvaluationAnalysisScope", configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
-            Severity = TryExtractValue("severity", configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
-            IsEnabled = TryExtractValue("IsEnabled", configDictionary, out bool test) ? test : null,
+            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope).ToLower(), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
+            Severity = TryExtractValue(nameof(Severity).ToLower(), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
+            IsEnabled = TryExtractValue(nameof(IsEnabled).ToLower(), configDictionary, out bool test) ? test : null,
         };
     }
 
