diff --git a/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs b/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
index 63edec11783..be1097e667f 100644
--- a/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs
@@ -25,7 +25,7 @@ internal BuildItemCacheEntry()
         /// Public constructor
         /// </summary>
         /// <param name="name"></param>
-        /// <param name="taskItems"></param>
+        /// <param name="buildItems"></param>
         internal BuildItemCacheEntry(string name, BuildItem[] buildItems)
             : base(name)
         {
diff --git a/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs b/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
index 268d491019f..23638b5bd82 100644
--- a/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
+++ b/src/Deprecated/Engine/Caching/BuildResultCacheEntry.cs
@@ -23,7 +23,7 @@ internal BuildResultCacheEntry()
         /// Public constructor
         /// </summary>
         /// <param name="name"></param>
-        /// <param name="taskItems"></param>
+        /// <param name="buildItems"></param>
         /// <param name="buildResult"></param>
         internal BuildResultCacheEntry(string name, BuildItem[] buildItems, bool buildResult)
             : base(name, buildItems)
diff --git a/src/Deprecated/Engine/Choose/When.cs b/src/Deprecated/Engine/Choose/When.cs
index 83f85fc5505..355f5d3f4ab 100644
--- a/src/Deprecated/Engine/Choose/When.cs
+++ b/src/Deprecated/Engine/Choose/When.cs
@@ -140,7 +140,6 @@ internal GroupingCollection PropertyAndItemLists
         /// <param name="parentNode"></param>
         /// <param name="parentProjectForChildren"></param>
         /// <param name="importedFromAnotherProject"></param>
-        /// <param name="options"></param>
         /// <param name="nestingDepth">Number of parent &lt;Choose&gt; elements this is nested inside</param>
         private void ProcessWhenChildren
             (
diff --git a/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs b/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
index d8fb84eae17..04992abfc3c 100644
--- a/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs
@@ -103,6 +103,7 @@ internal override bool BoolEvaluate(ConditionEvaluationState state)
         /// </summary>
         /// <param name="function">Function name for errors</param>
         /// <param name="argumentNode">Argument to be expanded</param>
+        /// <param name="state"></param>
         /// <returns>Scalar result</returns>
         /// <owner>danmose</owner>
         private string ExpandArgumentForScalarParameter(string function, GenericExpressionNode argumentNode, ConditionEvaluationState state)
@@ -137,6 +138,7 @@ private string ExpandArgumentForScalarParameter(string function, GenericExpressi
         /// Check that the number of function arguments is correct.
         /// </summary>
         /// <param name="expected"></param>
+        /// <param name="state"></param>
         private void VerifyArgumentCount(int expected, ConditionEvaluationState state)
         {
             ProjectErrorUtilities.VerifyThrowInvalidProject
diff --git a/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs b/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
index 9b54d6840f5..a50451ded5c 100644
--- a/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/LessThanExpressionNode.cs
@@ -4,7 +4,7 @@
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
-    /// Compares for left < right
+    /// Compares for left &lt; right
     /// </summary>
     internal sealed class LessThanExpressionNode : NumericComparisonExpressionNode
     {
diff --git a/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs b/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
index 90133e282c7..caa36204448 100644
--- a/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
+++ b/src/Deprecated/Engine/Conditionals/LessThanOrEqualExpressionNode.cs
@@ -4,7 +4,7 @@
 namespace Microsoft.Build.BuildEngine
 {
     /// <summary>
-    /// Compares for left <= right
+    /// Compares for left &lt;= right
     /// </summary>
     internal sealed class LessThanOrEqualExpressionNode : NumericComparisonExpressionNode
     {
diff --git a/src/Deprecated/Engine/Engine/CacheManager.cs b/src/Deprecated/Engine/Engine/CacheManager.cs
index 472b3125dbb..3172f2e8b8b 100644
--- a/src/Deprecated/Engine/Engine/CacheManager.cs
+++ b/src/Deprecated/Engine/Engine/CacheManager.cs
@@ -129,6 +129,8 @@ internal CacheScope GetCacheScope(string scopeName, BuildPropertyGroup scopeProp
         /// <param name="entries"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         internal void SetCacheEntries(CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
             // If the list exists search for matching scope properties otherwise create the list
@@ -144,6 +146,8 @@ internal void SetCacheEntries(CacheEntry[] entries, string scopeName, BuildPrope
         /// <param name="names"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         /// <returns></returns>
         internal CacheEntry[] GetCacheEntries(string[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
@@ -192,6 +196,7 @@ internal BuildResult GetCachedBuildResult(BuildRequest buildRequest, out ArrayLi
         /// <param name="projectName"></param>
         /// <param name="buildPropertyGroup"></param>
         /// <param name="toolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         internal void ClearCacheScope(string projectName, BuildPropertyGroup buildPropertyGroup, string toolsVersion, CacheContentType cacheContentType)
         {
             // Retrieve list of scopes by this name
diff --git a/src/Deprecated/Engine/Engine/Engine.cs b/src/Deprecated/Engine/Engine/Engine.cs
index 5339a6acfee..a0b0c799cba 100644
--- a/src/Deprecated/Engine/Engine/Engine.cs
+++ b/src/Deprecated/Engine/Engine/Engine.cs
@@ -2719,7 +2719,10 @@ BuildResult cachedResult
         /// <param name="existingProject"></param>
         /// <param name="projectFullPath"></param>
         /// <param name="globalPropertiesToUse"></param>
+        /// <param name="toolsVersion"></param>
+        /// <param name="targetNames"></param>
         /// <param name="buildEventContext"></param>
+        /// <param name="toolsVersionPeekedFromProjectFile"></param>
         internal Project GetMatchingProject
             (
             Project existingProject,
@@ -2858,16 +2861,17 @@ bool toolsVersionPeekedFromProjectFile
         /// currently loaded in the IDE, and the IDE controls what Configuration/Platform each
         /// project should be built with, so we have to honor that too.  So, the order in which
         /// we look at global properties are:
-        ///
+        /// 
         ///     1.  Whatever global properties the parent project was building with.  (The parent
         ///         project is the one that called the &lt;MSBuild&lt; task.
         ///     2.  If the child project was already previously loaded by the host, whatever global
         ///         properties were sent into the child project by the host (via Project.GlobalProperties).
         ///     3.  Whatever properties were passed into the "Properties" parameter of the &lt;MSBuild&lt;
         ///         task.
-        ///
+        /// 
         /// </summary>
         /// <param name="parentProjectGlobalProperties"></param>
+        /// <param name="postMergeProperties"></param>
         /// <param name="childProjectFile"></param>
         /// <param name="globalPropertiesPassedIntoTask"></param>
         /// <owner>RGoel</owner>
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
index c7648ee9523..5ead4ba869b 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
@@ -322,6 +322,7 @@ virtual internal void LogComment(BuildEventContext buildEventContext, string mes
         /// Logs a custom-priority comment with all registered loggers using the specified resource string.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="importance"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
@@ -371,6 +372,7 @@ virtual internal void LogCommentFromText(BuildEventContext buildEventContext,Mes
         /// Logs an error with all registered loggers using the specified resource string.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="location"></param>
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
@@ -383,6 +385,7 @@ virtual internal void LogError(BuildEventContext location, BuildEventFileInfo fi
         /// Logs an error with all registered loggers using the specified resource string.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="subcategoryResourceName">Can be null.</param>
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
@@ -402,6 +405,7 @@ virtual internal void LogError(BuildEventContext buildEventContext, string subca
         /// Logs an error with all registered loggers using the given text.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="subcategoryResourceName">Can be null.</param>
         /// <param name="errorCode">Can be null.</param>
         /// <param name="helpKeyword">Can be null.</param>
@@ -441,6 +445,7 @@ virtual internal void LogErrorFromText(BuildEventContext buildEventContext, stri
         /// Logs an error regarding an invalid project file with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="invalidProjectFileException"></param>
         virtual internal void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException)
         {
@@ -475,6 +480,7 @@ virtual internal void LogInvalidProjectFileError(BuildEventContext buildEventCon
         /// This will include a stack dump.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="exception"></param>
         /// <param name="file"></param>
         virtual internal void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file)
@@ -487,6 +493,7 @@ virtual internal void LogFatalBuildError(BuildEventContext buildEventContext, Ex
         /// This will include a stack dump.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="exception"></param>
         /// <param name="file"></param>
         /// <param name="taskName"></param>
@@ -502,6 +509,7 @@ virtual internal void LogFatalTaskError(BuildEventContext buildEventContext, Exc
         /// This will include a stack dump.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="exception"></param>
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
@@ -539,6 +547,7 @@ virtual internal void LogFatalError(BuildEventContext buildEventContext, Excepti
         /// This will include a stack dump.
         /// </summary>
         /// <owner>RGoel</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="exception"></param>
         /// <param name="file"></param>
         /// <param name="taskName"></param>
@@ -566,10 +575,11 @@ virtual internal void LogTaskWarningFromException(BuildEventContext buildEventCo
         /// Logs a warning with all registered loggers using the specified resource string.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
         /// <param name="messageArgs"></param>
-         virtual internal void LogWarning(BuildEventContext buildEventContext, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        virtual internal void LogWarning(BuildEventContext buildEventContext, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             LogWarning(buildEventContext,null, file, messageResourceName, messageArgs);
         }
@@ -578,6 +588,7 @@ virtual internal void LogWarning(BuildEventContext buildEventContext, BuildEvent
         /// Logs a warning with all registered loggers using the specified resource string.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="subcategoryResourceName">Can be null.</param>
         /// <param name="file"></param>
         /// <param name="messageResourceName"></param>
@@ -597,6 +608,7 @@ virtual internal void LogWarning(BuildEventContext buildEventContext, string sub
         /// Logs a warning with all registered loggers using the given text.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="subcategoryResourceName">Can be null.</param>
         /// <param name="warningCode">Can be null.</param>
         /// <param name="helpKeyword">Can be null.</param>
@@ -730,6 +742,9 @@ virtual internal void LogBuildFinished(bool success, int loggerId)
         /// Logs that a project build has started with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="projectId"></param>
+        /// <param name="parentBuildEventContext"></param>
+        /// <param name="projectBuildEventContext"></param>
         /// <param name="projectFile">project file</param>
         /// <param name="targetNames">target names</param>
         /// <param name="properties">properties list</param>
@@ -779,6 +794,7 @@ virtual internal void LogProjectStarted(int projectId, BuildEventContext parentB
         /// Logs that a project build has finished with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="projectFile"></param>
         /// <param name="success"></param>
         virtual internal void LogProjectFinished(BuildEventContext buildEventContext, string projectFile, bool success)
@@ -803,6 +819,7 @@ virtual internal void LogProjectFinished(BuildEventContext buildEventContext, st
         /// Logs that a target build has started with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="targetName">Name of target</param>
         /// <param name="projectFile">Main project file</param>
         /// <param name="projectFileOfTargetElement">Project file actually containing the target</param>
@@ -827,6 +844,7 @@ virtual internal void LogTargetStarted(BuildEventContext buildEventContext, stri
         /// Logs that a target build has finished with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="targetName"></param>
         /// <param name="projectFile">main project file</param>
         /// <param name="success"></param>
@@ -856,6 +874,7 @@ virtual internal void LogTargetFinished(BuildEventContext buildEventContext, str
         /// Logs that task execution has started with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="taskName"></param>
         /// <param name="projectFile"></param>
         /// <param name="projectFileOfTaskNode">project file actually containing the task</param>
@@ -880,6 +899,7 @@ virtual internal void LogTaskStarted(BuildEventContext buildEventContext, string
         /// Logs that a task has finished executing with all registered loggers.
         /// </summary>
         /// <owner>SumedhK</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="taskName"></param>
         /// <param name="projectFile"></param>
         /// <param name="success"></param>
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
index 75bf624038a..0d602da0e88 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServicesInProc.cs
@@ -31,6 +31,7 @@ private EngineLoggingServicesInProc()
         /// </summary>
         /// <param name="eventSource"></param>
         /// <param name="onlyLogCriticalEvents"></param>
+        /// <param name="flushRequestEvent"></param>
         internal EngineLoggingServicesInProc(EventSource eventSource, bool onlyLogCriticalEvents, ManualResetEvent flushRequestEvent)
         {
             this.onlyLogCriticalEvents = onlyLogCriticalEvents;
diff --git a/src/Deprecated/Engine/Engine/EngineProxy.cs b/src/Deprecated/Engine/Engine/EngineProxy.cs
index afc4259b5be..a662613147a 100644
--- a/src/Deprecated/Engine/Engine/EngineProxy.cs
+++ b/src/Deprecated/Engine/Engine/EngineProxy.cs
@@ -459,6 +459,7 @@ string toolsVersion
         /// <param name="globalProperties"></param>
         /// <param name="targetOutputsPerProject"></param>
         /// <param name="toolsVersions">Tools Version to overrides per project. May contain null values</param>
+        /// <param name="useResultsCache"></param>
         /// <param name="unloadProjectsOnCompletion"></param>
         /// <returns>result of call to engine</returns>
         public bool BuildProjectFilesInParallel
diff --git a/src/Deprecated/Engine/Engine/Expander.cs b/src/Deprecated/Engine/Engine/Expander.cs
index 2cd7ba7bcd4..2992ec5b5d8 100644
--- a/src/Deprecated/Engine/Engine/Expander.cs
+++ b/src/Deprecated/Engine/Engine/Expander.cs
@@ -411,20 +411,21 @@ XmlNode sourceNode
         /// This method takes a string which may contain any number of
         /// "$(propertyname)" tags in it.  It replaces all those tags with
         /// the actual property values, and returns a new string.  For example,
-        ///
+        /// 
         ///     string processedString =
         ///         propertyBag.ExpandProperties("Value of NoLogo is $(NoLogo).");
-        ///
+        /// 
         /// This code might produce:
-        ///
+        /// 
         ///     processedString = "Value of NoLogo is true."
-        ///
+        /// 
         /// If the sourceString contains an embedded property which doesn't
         /// have a value, then we replace that tag with an empty string.
-        ///
+        /// 
         /// This method leaves the expression escaped.  Callers may need to unescape on their own as appropriate.
         /// </summary>
         /// <param name="expression"></param>
+        /// <param name="expressionNode"></param>
         /// <returns></returns>
         /// <owner>RGoel, JomoF</owner>
         private object ExpandPropertiesLeaveTypedAndEscaped
@@ -865,7 +866,7 @@ private static bool IsValidPropertyName(string propertyName)
         /// "TaskLocation" is the name of the value.  The name of the value and the preceding "@" may be omitted if
         /// the default value is desired.
         /// </summary>
-        /// <param name="registryLocation">Expression to expand, eg "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation"</param>
+        /// <param name="registryExpression">Expression to expand, eg "Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation"</param>
         /// <param name="node">Location associated with the expression, for purposes of good error messages</param>
         /// <returns></returns>
         private string ExpandRegistryValue(string registryExpression, XmlNode node)
diff --git a/src/Deprecated/Engine/Engine/IEngineCallback.cs b/src/Deprecated/Engine/Engine/IEngineCallback.cs
index 7b538f15464..cc270767c28 100644
--- a/src/Deprecated/Engine/Engine/IEngineCallback.cs
+++ b/src/Deprecated/Engine/Engine/IEngineCallback.cs
@@ -37,6 +37,7 @@ internal interface IEngineCallback
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
         /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         Exception PostCacheEntriesToHost(int nodeId, CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
 
         /// <summary>
@@ -47,6 +48,7 @@ internal interface IEngineCallback
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
         /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         /// <returns></returns>
         CacheEntry[] GetCachedEntriesFromHost(int nodeId, string[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
 
diff --git a/src/Deprecated/Engine/Engine/INodeProvider.cs b/src/Deprecated/Engine/Engine/INodeProvider.cs
index ae288add6b7..3afd15632b6 100644
--- a/src/Deprecated/Engine/Engine/INodeProvider.cs
+++ b/src/Deprecated/Engine/Engine/INodeProvider.cs
@@ -64,7 +64,7 @@ void Initialize(string configuration, IEngineCallback engineCallback, BuildPrope
         /// node during intermediate evaluation
         /// </summary>
         /// <param name="nodeIndex"></param>
-        /// <param name="buildRequest"></param>
+        /// <param name="buildResult"></param>
         void PostBuildResultToNode(int nodeIndex, BuildResult buildResult);
 
         /// <summary>
diff --git a/src/Deprecated/Engine/Engine/Import.cs b/src/Deprecated/Engine/Engine/Import.cs
index ba22f096800..458d514c3a6 100644
--- a/src/Deprecated/Engine/Engine/Import.cs
+++ b/src/Deprecated/Engine/Engine/Import.cs
@@ -125,6 +125,7 @@ internal XmlAttribute ConditionAttribute
         /// Internal constructor
         /// </summary>
         /// <param name="importElement"></param>
+        /// <param name="parentProject"></param>
         /// <param name="isImported"></param>
         /// <owner>LukaszG</owner>
         internal Import(XmlElement importElement, Project parentProject, bool isImported)
diff --git a/src/Deprecated/Engine/Engine/ItemBucket.cs b/src/Deprecated/Engine/Engine/ItemBucket.cs
index 56faf58e576..534fd6ab5c4 100644
--- a/src/Deprecated/Engine/Engine/ItemBucket.cs
+++ b/src/Deprecated/Engine/Engine/ItemBucket.cs
@@ -56,6 +56,8 @@ private ItemBucket()
         /// </summary>
         /// <param name="itemNames">Item types being batched on: null indicates no batching is occurring</param>
         /// <param name="itemMetadata">Hashtable of item metadata values: null indicates no batching is occurring</param>
+        /// <param name="lookup"></param>
+        /// <param name="bucketSequenceNumber"></param>
         internal ItemBucket
         (
             ICollection itemNames,
diff --git a/src/Deprecated/Engine/Engine/Node.cs b/src/Deprecated/Engine/Engine/Node.cs
index da393b51c0c..9ae5ebaf47c 100644
--- a/src/Deprecated/Engine/Engine/Node.cs
+++ b/src/Deprecated/Engine/Engine/Node.cs
@@ -151,6 +151,8 @@ internal void PostBuildRequestToHost(BuildRequest currentRequest)
         /// <param name="entries"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         internal Exception PostCacheEntriesToHost(CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
             try
@@ -170,6 +172,8 @@ internal Exception PostCacheEntriesToHost(CacheEntry[] entries, string scopeName
         /// <param name="names"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         /// <returns></returns>
         internal CacheEntry[] GetCachedEntriesFromHost(string[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
diff --git a/src/Deprecated/Engine/Engine/NodeManager.cs b/src/Deprecated/Engine/Engine/NodeManager.cs
index c963d35e73c..ed17d921cbd 100644
--- a/src/Deprecated/Engine/Engine/NodeManager.cs
+++ b/src/Deprecated/Engine/Engine/NodeManager.cs
@@ -44,7 +44,7 @@ internal NodeManager(int cpuCount, bool childMode, Engine parentEngine)
         /// for a list of its node descriptions, and add these nodes to a master list of nodes which can be used
         /// by the scheduler. QUESTION: Do we allow duplicate Node Providers?
         /// </summary>
-        /// <param name="providerToRegister"></param>
+        /// <param name="nodeProviderToRegister"></param>
         /// <returns></returns>
         internal bool RegisterNodeProvider(INodeProvider nodeProviderToRegister)
         {
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index fa38a06859d..f7fd277e5e4 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -4426,7 +4426,7 @@ private void EvaluateAllUsingTasks()
         /// This is only for the purposes of adding statically-declared items in the logical
         /// project file, or items added to the project file by an IDE modifying the project contents.
         /// </summary>
-        /// <param name="itemToInclude">The specific item to add to the project</param>
+        /// <param name="item">The specific item to add to the project</param>
         internal void AddToItemListByNameIgnoringCondition(BuildItem item)
         {
             // Get a reference to the project-level hash table which is supposed to
@@ -4453,7 +4453,7 @@ internal void AddToItemListByNameIgnoringCondition(BuildItem item)
         /// This is only for the purposes of adding statically-declared items in the logical
         /// project file, or items added to the project file by an IDE modifying the project contents.
         /// </summary>
-        /// <param name="itemToInclude">The specific item to add to the project</param>
+        /// <param name="item">The specific item to add to the project</param>
         internal void AddToItemListByName(BuildItem item)
         {
             // Get a reference to the project-level hash table which is supposed to
diff --git a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
index ab4840d7004..74d4a4395ba 100644
--- a/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
+++ b/src/Deprecated/Engine/Engine/ProjectSchemaValidationHandler.cs
@@ -44,6 +44,7 @@ private ProjectSchemaValidationHandler()
         /// This constructor initializes all required data.
         /// </summary>
         /// <owner>JomoF</owner>
+        /// <param name="buildEventContext"></param>
         /// <param name="loggingServices"></param>
         /// <param name="binPath"></param>
         internal ProjectSchemaValidationHandler(BuildEventContext buildEventContext, EngineLoggingServices loggingServices, string binPath)
diff --git a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
index b0a635794c7..f5fdff474c6 100644
--- a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
+++ b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
@@ -30,6 +30,7 @@ internal class RegistryKeyWrapper
         /// Does not check for a null key.
         /// </summary>
         /// <param name="wrappedKey"></param>
+        /// <param name="registryHive"></param>
         protected RegistryKeyWrapper(RegistryKey wrappedKey, RegistryKey registryHive)
         {
             this.wrappedKey = wrappedKey;
@@ -41,7 +42,7 @@ protected RegistryKeyWrapper(RegistryKey wrappedKey, RegistryKey registryHive)
         /// and assumes the key is underneath HKLM
         /// Note that registryKeyPath should be relative to HKLM.
         /// </summary>
-        /// <param name="registryKey"></param>
+        /// <param name="registryKeyPath"></param>
         internal RegistryKeyWrapper(string registryKeyPath)
             : this(registryKeyPath, Registry.LocalMachine)
         {
@@ -50,7 +51,7 @@ internal RegistryKeyWrapper(string registryKeyPath)
         /// <summary>
         /// Initializes this RegistryKeyWrapper to wrap the key at the specified path
         /// </summary>
-        /// <param name="registryKey"></param>
+        /// <param name="registryKeyPath"></param>
         /// <param name="registryHive"></param>
         internal RegistryKeyWrapper(string registryKeyPath, RegistryKey registryHive)
         {
diff --git a/src/Deprecated/Engine/Engine/Scheduler.cs b/src/Deprecated/Engine/Engine/Scheduler.cs
index 110e2dbbf84..c40cc4a47e3 100644
--- a/src/Deprecated/Engine/Engine/Scheduler.cs
+++ b/src/Deprecated/Engine/Engine/Scheduler.cs
@@ -373,7 +373,7 @@ internal void NotifyOfUnblockedRequest(BuildRequest currentRequest)
         /// <summary>
         /// Called by the engine to indicate that a node has run out of work
         /// </summary>
-        /// <param name="nodeIndex"></param>
+        /// <param name="nodeId"></param>
         internal void NotifyOfBlockedNode(int nodeId)
         {
             if (Engine.debugMode)
diff --git a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
index 71fefcb6bb9..3aa0ca2d4a9 100644
--- a/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
+++ b/src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs
@@ -904,6 +904,8 @@ private static void DiffHashtables(Hashtable h1, Hashtable h2, out ArrayList com
         /// NOTE: Internal for unit test purposes only.
         /// </remarks>
         /// <owner>danmose</owner>
+        /// <param name="dependencyAnalysisDetailEntry"></param>
+        /// <param name="projectDirectory"></param>
         /// <param name="inputs"></param>
         /// <param name="outputs"></param>
         /// <returns>true, if any "input" is newer than any "output", or if any input or output does not exist.</returns>
diff --git a/src/Deprecated/Engine/Engine/TaskEngine.cs b/src/Deprecated/Engine/Engine/TaskEngine.cs
index 5f0e47a7c76..13acfc4d663 100644
--- a/src/Deprecated/Engine/Engine/TaskEngine.cs
+++ b/src/Deprecated/Engine/Engine/TaskEngine.cs
@@ -872,6 +872,7 @@ private bool GatherTaskOutputs(TaskExecutionMode howToExecuteTask, ITask task, I
         /// <remarks>
         /// This method is "internal" for unit-testing purposes only.
         /// </remarks>
+        /// <param name="lookup"></param>
         /// <param name="taskOutputSpecification"></param>
         /// <param name="taskParameterName"></param>
         /// <param name="itemName">can be null</param>
@@ -1081,6 +1082,7 @@ private void GatherTaskItemOutputs(Lookup lookup, TaskOutput taskOutputSpecifica
         /// <summary>
         /// Uses the given task output specification to (statically) infer the task's outputs.
         /// </summary>
+        /// <param name="lookup"></param>
         /// <param name="taskOutputSpecification"></param>
         /// <param name="taskParameterName"></param>
         /// <param name="itemName">can be null</param>
diff --git a/src/Deprecated/Engine/Engine/TaskExecutionState.cs b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
index 4ed1e6d3854..a7b0c65af2c 100644
--- a/src/Deprecated/Engine/Engine/TaskExecutionState.cs
+++ b/src/Deprecated/Engine/Engine/TaskExecutionState.cs
@@ -203,7 +203,7 @@ virtual internal void ExecuteTask()
         /// This method is called to adjust the execution time for the task by subtracting the time
         /// spent waiting for results
         /// </summary>
-        /// <param name="entryTime"></param>
+        /// <param name="waitStartTime"></param>
         internal void NotifyOfWait(long waitStartTime)
         {
             // Move the start time forward by the period of the wait
diff --git a/src/Deprecated/Engine/Engine/ToolsetCollection.cs b/src/Deprecated/Engine/Engine/ToolsetCollection.cs
index f269f8f34a0..6f18068edf8 100644
--- a/src/Deprecated/Engine/Engine/ToolsetCollection.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetCollection.cs
@@ -81,7 +81,7 @@ public Toolset this[string toolsVersion]
         /// Determines whether the collection contains a Toolset with matching
         /// tools version.
         /// </summary>
-        /// <param name="key"></param>
+        /// <param name="toolsVersion"></param>
         /// <returns></returns>
         public bool Contains(string toolsVersion)
         {
diff --git a/src/Deprecated/Engine/Engine/ToolsetReader.cs b/src/Deprecated/Engine/Engine/ToolsetReader.cs
index c952cf4bb5c..37e096c5811 100644
--- a/src/Deprecated/Engine/Engine/ToolsetReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetReader.cs
@@ -399,8 +399,8 @@ private Toolset ReadToolset(PropertyDefinition toolsVersion,
         /// Expands the given unexpanded property expression using the properties in the
         /// given BuildPropertyGroup.
         /// </summary>
-        /// <param name="unexpandedProperty"></param>
-        /// <param name="properties"></param>
+        /// <param name="property"></param>
+        /// <param name="expander"></param>
         /// <returns></returns>
         private string ExpandProperty(PropertyDefinition property, Expander expander)
         {
diff --git a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
index 4935eaea24e..486e5033bd9 100644
--- a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
@@ -136,11 +136,11 @@ protected override IEnumerable<PropertyDefinition> GetPropertyDefinitions(string
                 yield return new PropertyDefinition(propertyName, propertyValue, toolsVersionWrapper.Name + "@" + propertyName);
             }
         }
-        
+
         /// <summary>
         /// Reads a string value from the specified registry key
         /// </summary>
-        /// <param name="baseKeyWrapper">wrapper around key</param>
+        /// <param name="wrapper">wrapper around key</param>
         /// <param name="valueName">name of the value</param>
         /// <returns>string data in the value</returns>
         private static string GetValue(RegistryKeyWrapper wrapper, string valueName)
diff --git a/src/Deprecated/Engine/Engine/Utilities.cs b/src/Deprecated/Engine/Engine/Utilities.cs
index 6f7cb535570..62bb595d681 100644
--- a/src/Deprecated/Engine/Engine/Utilities.cs
+++ b/src/Deprecated/Engine/Engine/Utilities.cs
@@ -153,6 +153,7 @@ Hashtable       conditionedPropertiesTable  // Can be null
         /// <param name="conditionAttribute">XML attribute on which the condition is evaluated</param>
         /// <param name="expander">All the data available for expanding embedded properties, metadata, and items</param>
         /// <param name="itemListOptions"></param>
+        /// <param name="parentProject"></param>
         /// <returns>true, if the expression evaluates to true, otherwise false</returns>
         internal static bool EvaluateCondition
         (
@@ -183,7 +184,7 @@ Project parentProject
         /// <param name="expander">All the data available for expanding embedded properties, metadata, and items</param>
         /// <param name="itemListOptions"></param>
         /// <param name="loggingServices">Can be null</param>
-        /// <param name="eventContext"> contains contextual information for logging events</param>
+        /// <param name="buildEventContext"> contains contextual information for logging events</param>
         /// <returns>true, if the expression evaluates to true, otherwise false</returns>
         internal static bool EvaluateCondition
         (
diff --git a/src/Deprecated/Engine/Errors/InternalLoggerException.cs b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
index 3926d8504db..4563da5d89b 100644
--- a/src/Deprecated/Engine/Errors/InternalLoggerException.cs
+++ b/src/Deprecated/Engine/Errors/InternalLoggerException.cs
@@ -80,6 +80,7 @@ public InternalLoggerException(string message, Exception innerException)
         /// <param name="e">Can be null.</param>
         /// <param name="errorCode"></param>
         /// <param name="helpKeyword"></param>
+        /// <param name="initializationException"></param>
         internal InternalLoggerException
         (
             string message,
@@ -215,6 +216,7 @@ public bool InitializationException
         /// <param name="innerException"></param>
         /// <param name="e">Can be null.</param>
         /// <param name="messageResourceName"></param>
+        /// <param name="initializationException"></param>
         /// <param name="messageArgs"></param>
         internal static void Throw
         (
diff --git a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
index 4c458782833..d0fb292bc24 100644
--- a/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
+++ b/src/Deprecated/Engine/Errors/InvalidToolsetDefinitionException.cs
@@ -50,8 +50,8 @@ public InvalidToolsetDefinitionException(string message, Exception innerExceptio
         /// <summary>
         /// Basic constructor.
         /// </summary>
-        /// <param name="serializationInfo"></param>
-        /// <param name="streamingContext"></param>
+        /// <param name="info"></param>
+        /// <param name="context"></param>
         protected InvalidToolsetDefinitionException(SerializationInfo info, StreamingContext context)
             : base(info, context)
         {
@@ -139,6 +139,7 @@ params object[] args
         /// is expensive, because memory is allocated for the array of arguments -- do
         /// not call this method repeatedly in performance-critical scenarios
         /// </summary>
+        /// <param name="innerException"></param>
         /// <param name="resourceName"></param>
         /// <param name="args"></param>
         internal static void Throw
diff --git a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
index 114ac3532b9..5179e8f39e8 100644
--- a/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
+++ b/src/Deprecated/Engine/Introspector/TargetInProgressState.cs
@@ -109,6 +109,7 @@ internal List<BuildRequest> ParentBuildRequests
         /// <summary>
         /// Array of build requests that must complete before the current 
         /// target can make forward process
+        /// </summary>
         internal BuildRequest[] OutstandingBuildRequests
         {
             get
diff --git a/src/Deprecated/Engine/Items/BuildItem.cs b/src/Deprecated/Engine/Items/BuildItem.cs
index 00d9a385ae0..27715d3a166 100644
--- a/src/Deprecated/Engine/Items/BuildItem.cs
+++ b/src/Deprecated/Engine/Items/BuildItem.cs
@@ -384,6 +384,8 @@ internal void CreateFromStream(BinaryReader reader)
         /// </summary>
         /// <param name="ownerDocument">can be null</param>
         /// <param name="name">can be null</param>
+        /// <param name="include"></param>
+        /// <param name="itemDefinitionLibrary"></param>
         internal BuildItem(XmlDocument ownerDocument, string name, string include, ItemDefinitionLibrary itemDefinitionLibrary)
             : this(ownerDocument, name, include, true /* create custom metadata cache */, itemDefinitionLibrary)
         {
@@ -399,7 +401,10 @@ internal BuildItem(XmlDocument ownerDocument, string name, string include, ItemD
         /// when a build generates a large number of items.
         /// </remarks>
         /// <param name="ownerDocument">can be null</param>
-        /// <param name="name">can be null</param> 
+        /// <param name="name">can be null</param>
+        /// <param name="include"></param>
+        /// <param name="createCustomMetadataCache"></param>
+        /// <param name="itemDefinitionLibrary"></param> 
         private BuildItem(XmlDocument ownerDocument, string name, string include, bool createCustomMetadataCache, ItemDefinitionLibrary itemDefinitionLibrary)
         {
             BuildItemHelper(ownerDocument, name, include, createCustomMetadataCache, itemDefinitionLibrary);
@@ -408,8 +413,11 @@ private BuildItem(XmlDocument ownerDocument, string name, string include, bool c
         /// <summary>
         /// Common code for constructors. If an ownerDocument is passed in, it's a persisted element.
         /// </summary>
+        /// <param name="ownerDocument"></param>
         /// <param name="itemName">can be null</param>
-        /// <param name="itemDefinitionLibrary">can only be null if ownerDocument is null</param>
+        /// <param name="itemInclude"></param>
+        /// <param name="createCustomMetadataCache"></param>
+        /// <param name="itemDefinitionLibraryToUse">can only be null if ownerDocument is null</param>
         private void BuildItemHelper(XmlDocument ownerDocument, string itemName, string itemInclude, bool createCustomMetadataCache, ItemDefinitionLibrary itemDefinitionLibraryToUse)
         {
             // Only check for null. It's legal to make BuildItems with empty
@@ -612,6 +620,7 @@ internal ItemDefinitionLibrary ItemDefinitionLibrary
             set { itemDefinitionLibrary = value; }
         }
 
+        /// <summary>
         /// Accessor for the item's "include" string.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -965,7 +974,7 @@ private void InitializeCustomMetadataCache()
         /// Initializes a persisted item from an existing item element which exists either in the main project file or in one of
         /// the imported files.
         /// </summary>
-        /// <param name="itemElementToParse"></param>
+        /// <param name="element"></param>
         private void InitializeFromItemElement(XmlElement element)
         {
             this.xml = new BuildItemGroupChildXml(element, ChildType.BuildItemAdd);
diff --git a/src/Deprecated/Engine/Items/ItemExpander.cs b/src/Deprecated/Engine/Items/ItemExpander.cs
index dd60744cfc3..705b10e60cf 100644
--- a/src/Deprecated/Engine/Items/ItemExpander.cs
+++ b/src/Deprecated/Engine/Items/ItemExpander.cs
@@ -123,7 +123,7 @@ ReadOnlyLookup readOnlyLookup
         /// <owner>SumedhK</owner>
         /// <param name="s"></param>
         /// <param name="parentNode"></param>
-        /// <param name="itemsByType"></param>
+        /// <param name="readOnlyLookup"></param>
         /// <returns>Given string, with embedded item vectors expanded.</returns>
         internal static string ExpandEmbeddedItemVectors(string s, XmlNode parentNode, ReadOnlyLookup readOnlyLookup)
         {
@@ -149,7 +149,7 @@ internal static string ExpandEmbeddedItemVectors(string s, XmlNode parentNode, R
         /// <owner>SumedhK;RGoel</owner>
         /// <param name="itemVectorExpression"></param>
         /// <param name="parentNode"></param>
-        /// <param name="itemsByType"></param>
+        /// <param name="readOnlyLookup"></param>
         /// <returns>a virtual BuildItemGroup containing the items resulting from the expression, or null if the expression was invalid.</returns>
         internal static BuildItemGroup ItemizeItemVector
         (
@@ -337,7 +337,6 @@ private BuildItemGroup ItemizeItemVector(Match itemVector)
         /// </example>
         /// <owner>SumedhK</owner>
         /// <param name="itemVector"></param>
-        /// <param name="isUnknownItemType">(out) true if the referenced item does not exist</param>
         /// <returns>expanded item vector</returns>
         private string ExpandItemVector(Match itemVector)
         {
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
index 000446c6fc1..def8aa7cef1 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeCallback.cs
@@ -277,6 +277,8 @@ private object GetReplyForCallDescriptor(LocalCallDescriptor callDescriptor)
         /// <param name="names"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         /// <returns></returns>
         public CacheEntry[] GetCachedEntriesFromHost(int nodeId, string[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
@@ -293,6 +295,8 @@ public CacheEntry[] GetCachedEntriesFromHost(int nodeId, string[] names, string
         /// <param name="entries"></param>
         /// <param name="scopeName"></param>
         /// <param name="scopeProperties"></param>
+        /// <param name="scopeToolsVersion"></param>
+        /// <param name="cacheContentType"></param>
         public Exception PostCacheEntriesToHost(int nodeId, CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType)
         {
             LocalCallDescriptorForPostingCacheEntriesToHost callDescriptor =
diff --git a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
index bc9f6226b04..3e557c43428 100644
--- a/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/BaseConsoleLogger.cs
@@ -501,7 +501,7 @@ internal virtual void OutputProperties(ArrayList list)
         /// items, using the cached reference to the list from the 
         /// appropriate ProjectStarted event.
         /// </summary>
-        /// <param name="items">List of items</param>
+        /// <param name="itemTypes">List of items</param>
         internal void WriteItems(SortedList itemTypes)
         {
             if (Verbosity == LoggerVerbosity.Diagnostic && showItemAndPropertyList)
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index f9f56bff848..0a77aa61b8b 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -495,7 +495,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// <summary>
         /// A table indicating if a particular event type should be forwarded
         /// The value is type int rather than bool to avoid the problem of JITting generics.
-        /// Dictionary<string, int> is already compiled into mscorlib.
+        /// Dictionary{string, int} is already compiled into mscorlib.
         /// </summary>
         private Dictionary<string, int> forwardingTable;
 
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 180d133c560..30207068499 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -595,6 +595,7 @@ public override void ProjectFinishedHandler(object sender, ProjectFinishedEventA
         /// property values, using the cached reference to the list from the 
         /// appropriate ProjectStarted event.
         /// </summary>
+        /// <param name="e"></param>
         /// <param name="properties">List of properties</param>
         internal void WriteProperties(BuildEventArgs e, IEnumerable properties)
         {
@@ -627,12 +628,14 @@ internal override void OutputProperties(ArrayList list)
             }
             resetColor();
         }
+
         /// <summary>
         /// Writes out the list of item specs and their metadata.
         /// This could be done at any time during the build to show the latest
         /// items, using the cached reference to the list from the 
         /// appropriate ProjectStarted event.
         /// </summary>
+        /// <param name="e"></param>
         /// <param name="items">List of items</param>
         internal void WriteItems(BuildEventArgs e, IEnumerable items)
         {
@@ -1137,6 +1140,7 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten)
         /// </summary>
         /// <param name="message">Message to be formatted to fit on the console</param>
         /// <param name="prefixAlreadyWritten">Has the prefix(timestamp or key been written)</param>
+        /// <param name="prefixAdjustment"></param>
         private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int prefixAdjustment)
         {
             // This method may require the splitting of lines inorder to format them to the console, this must be an atomic operation
@@ -1189,6 +1193,7 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
         /// </summary>
         /// <param name="nonNullMessage"></param>
         /// <param name="prefixAlreadyWritten"></param>
+        /// <param name="adjustedPrefixWidth"></param>
         private void WriteBasedOnPrefix(string nonNullMessage, bool prefixAlreadyWritten, int adjustedPrefixWidth)
         {
             if (prefixAlreadyWritten)
diff --git a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
index 123a2e664f5..30f52e52fd3 100644
--- a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
+++ b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
@@ -13,7 +13,6 @@
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which contains the legacy compatibility shim for the MSBuild engine.  NOTE: This assembly is deprecated.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
-    <NoWarn>$(NoWarn);1570;1572;1573;1587</NoWarn>
     <Nullable>disable</Nullable>
   </PropertyGroup>
 
diff --git a/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs b/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
index 672eaee766f..b72439add8a 100644
--- a/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
+++ b/src/Deprecated/Engine/Properties/BuildPropertyGroup.cs
@@ -162,6 +162,7 @@ private BuildPropertyGroup(Project parentProject, int capacity)
         /// <summary>
         /// Constructor, from an existing &lt;PropertyGroup&gt; XML element.
         /// </summary>
+        /// <param name="parentProject"></param>
         /// <param name="importedFilename"></param>
         /// <param name="condition"></param>
         /// <owner>RGoel</owner>
@@ -281,6 +282,7 @@ internal BuildPropertyGroup(Project parentProject, XmlElement propertyGroupEleme
         /// Constructor which creates a new &lt;PropertyGroup&gt; in the XML document
         /// specified.
         /// </summary>
+        /// <param name="parentProject"></param>
         /// <param name="ownerDocument"></param>
         /// <param name="importedFromAnotherProject"></param>
         /// <owner>RGoel</owner>
@@ -1459,7 +1461,7 @@ private bool IsPersisted
         /// Verifies group is persisted.
         /// </summary>
         /// <param name="errorResourceName"></param>
-        /// <param name="args"></param>
+        /// <param name="arg"></param>
         /// <owner>JomoF</owner>
         private void MustBePersisted
         (
diff --git a/src/Deprecated/Engine/Shared/ErrorUtilities.cs b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
index 1af0f4ceb05..334799b070f 100644
--- a/src/Deprecated/Engine/Shared/ErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
@@ -369,7 +369,6 @@ object arg2
         /// This method is thread-safe.
         /// </remarks>
         /// <owner>RGoel, SumedhK</owner>
-        /// <param name="innerException">Can be null.</param>
         /// <param name="resourceName"></param>
         /// <param name="args"></param>
         internal static void ThrowArgument
@@ -593,6 +592,7 @@ internal static void VerifyThrowArgumentNull(object parameter, string parameterN
         /// <owner>SumedhK</owner>
         /// <param name="parameter"></param>
         /// <param name="parameterName"></param>
+        /// <param name="resourceName"></param>
         internal static void VerifyThrowArgumentNull(object parameter, string parameterName, string resourceName)
         {
             if (parameter == null)
diff --git a/src/Deprecated/Engine/Shared/EventArgsFormatting.cs b/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
index 5e4fa1fe365..e62628a9a47 100644
--- a/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
+++ b/src/Deprecated/Engine/Shared/EventArgsFormatting.cs
@@ -47,6 +47,7 @@ internal static string FormatEventMessage(BuildErrorEventArgs e)
         /// </summary>
         /// <owner>t-jeffv</owner>
         /// <param name="e">Error to format</param>
+        /// <param name="removeCarriageReturn"></param>
         /// <returns>The formatted message string.</returns>
         internal static string FormatEventMessage(BuildErrorEventArgs e, bool removeCarriageReturn)
         {
@@ -76,6 +77,7 @@ internal static string FormatEventMessage(BuildWarningEventArgs e)
         /// </summary>
         /// <owner>t-jeffv, sumedhk</owner>
         /// <param name="e">Warning to format</param>
+        /// <param name="removeCarriageReturn"></param>
         /// <returns>The formatted message string.</returns>
         internal static string FormatEventMessage(BuildWarningEventArgs e, bool removeCarriageReturn)
         {
diff --git a/src/Deprecated/Engine/Shared/FileMatcher.cs b/src/Deprecated/Engine/Shared/FileMatcher.cs
index 3292f664426..685fca06920 100644
--- a/src/Deprecated/Engine/Shared/FileMatcher.cs
+++ b/src/Deprecated/Engine/Shared/FileMatcher.cs
@@ -1109,6 +1109,7 @@ GetFileSystemEntries getFileSystemEntries
         /// <summary>
         /// Given a filespec, find the files that match. 
         /// </summary>
+        /// <param name="projectDirectory"></param>
         /// <param name="filespec">Get files that match the given file spec.</param>
         /// <returns>The array of files.</returns>
         internal static string[] GetFiles
@@ -1124,6 +1125,7 @@ string filespec
         /// <summary>
         /// Given a filespec, find the files that match. 
         /// </summary>
+        /// <param name="projectDirectory"></param>
         /// <param name="filespec">Get files that match the given file spec.</param>
         /// <param name="getFileSystemEntries">Get files that match the given file spec.</param>
         /// <param name="directoryExists">Determine whether a directory exists.</param>
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index a86d5e08b5a..67aa0944e61 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -720,7 +720,7 @@ internal static string CurrentExecutableConfigurationFilePath
         /// for directories) was called - but with the advantage that a FileInfo object is returned
         /// that can be queried (e.g., for LastWriteTime) without hitting the disk again.
         /// </summary>
-        /// <param name="path"></param>
+        /// <param name="filePath"></param>
         /// <returns>FileInfo around path if it is an existing /file/, else null</returns>
         internal static FileInfo GetFileInfoNoThrow(string filePath)
         {
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index 20c1c45cb27..30d24d26f0a 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -470,9 +470,7 @@ internal static bool CheckForFrameworkInstallation(string registryEntryToCheckIn
         /// <owner>JomoF</owner>
         /// <param name="currentRuntimePath">The path to the runtime that is currently executing.</param>
         /// <param name="prefix">Should be something like 'v1.2' that indicates the runtime version we want.</param>
-        /// <param name="frameworkVersion">Should be the full version number of the runtime version we want.</param>
         /// <param name="getDirectories">Delegate to method that can return filesystem entries.</param>
-        /// <param name="useHeuristic">Whether we should fall back to a search heuristic if other searches fail.</param>
         /// <returns>Will return 'null' if there is no target frameworks on this machine.</returns>
         internal static string FindDotNetFrameworkPath
         (
diff --git a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
index 6dc05efbbac..b5ade2dae17 100644
--- a/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/SolutionWrapperProject.cs
@@ -55,6 +55,7 @@ static public string Generate(string solutionPath, string toolsVersionOverride,
         /// <param name="msbuildProject"></param>
         /// <param name="toolsVersionOverride">Tools Version override (may be null).
         /// Any /tv:xxx switch would cause a value here.</param>
+        /// <param name="projectBuildEventContext"></param>
         /// <returns></returns>
         /// <owner>RGoel</owner>
         static internal void Generate(SolutionParser solution, Project msbuildProject, string toolsVersionOverride, BuildEventContext projectBuildEventContext)
@@ -469,7 +470,7 @@ internal static string DetermineWrapperProjectToolsVersion(string toolsVersionOv
         /// fall back on the tools version of the solution wrapper project.
         /// </summary>
         /// <param name="parentEngine"></param>
-        /// <param name="toolsVersionOverride"></param>
+        /// <param name="wrapperProjectToolsVersion"></param>
         /// <returns></returns>
         private static string DetermineChildProjectToolsVersion(Engine parentEngine, string wrapperProjectToolsVersion)
         {
@@ -497,6 +498,7 @@ private static string DetermineChildProjectToolsVersion(Engine parentEngine, str
         /// <param name="msbuildTargetName"></param>
         /// <param name="configurationName"></param>
         /// <param name="platformName"></param>
+        /// <param name="specifyProjectToolsVersion"></param>
         /// <returns></returns>
         /// <owner>RGoel, LukaszG</owner>
         static private BuildTask AddMSBuildTaskElement
@@ -679,6 +681,7 @@ string fullConfigurationName
         /// Adds MSBuild and ResolveVCProjectOutput tasks to a project target to pre-resolve its project references
         /// </summary>
         /// <param name="solution"></param>
+        /// <param name="msbuildProject"></param>
         /// <param name="target"></param>
         /// <param name="proj"></param>
         /// <param name="solutionConfiguration"></param>
@@ -797,6 +800,7 @@ out string addedReferenceGuids
         /// replaced with file references)
         /// </summary>
         /// <param name="solution"></param>
+        /// <param name="msbuildProject"></param>
         /// <param name="target"></param>
         /// <param name="proj"></param>
         /// <param name="solutionConfiguration"></param>
@@ -1513,6 +1517,7 @@ static internal BuildTask AddErrorWarningMessageElement(Target target, string el
         /// Emit warnings when the project type is unknown.
         /// </summary>
         /// <param name="msbuildProject">The project to add the target to</param>
+        /// <param name="solution"></param>
         /// <param name="proj">The project to add as a target.</param>
         /// <param name="subTargetName">The target to call within the project that's being added.</param>
         /// <param name="errorMessage">Optional detailed error message to print out in case we already tried accessing the
@@ -2164,6 +2169,7 @@ static private void AddDependencyByGuid(SolutionParser solution, ProjectInSoluti
         /// </summary>
         /// <param name="solution"></param>
         /// <param name="parentEngine"></param>
+        /// <param name="projectBuildEventContext"></param>
         /// <owner>LukaszG</owner>
         static internal void ConvertVcToVcDependenciesToReferences(SolutionParser solution, Engine parentEngine, BuildEventContext projectBuildEventContext)
         {
diff --git a/src/Deprecated/Engine/Solution/VCProjectParser.cs b/src/Deprecated/Engine/Solution/VCProjectParser.cs
index 725f09023a3..279275d6fcb 100644
--- a/src/Deprecated/Engine/Solution/VCProjectParser.cs
+++ b/src/Deprecated/Engine/Solution/VCProjectParser.cs
@@ -12,7 +12,7 @@ static internal class VCProjectParser
         /// <summary>
         /// For a given VC project, retrieves the projects it references 
         /// </summary>
-        /// <param name="projectPath"></param>
+        /// <param name="project"></param>
         /// <returns></returns>
         /// <owner>LukaszG</owner>
         static internal List<string> GetReferencedProjectGuids(XmlDocument project)
diff --git a/src/Deprecated/Engine/Solution/VCWrapperProject.cs b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
index e20945c6112..f7c695ee018 100644
--- a/src/Deprecated/Engine/Solution/VCWrapperProject.cs
+++ b/src/Deprecated/Engine/Solution/VCWrapperProject.cs
@@ -48,6 +48,7 @@ string subTargetName
         /// <summary>
         /// Adds a new VCBuild task element to the specified target
         /// </summary>
+        /// <param name="msbuildProject"></param>
         /// <param name="target">The target to add the VCBuild task to</param>
         /// <param name="solutionPath">Path to the solution if any</param>
         /// <param name="projectPath">Path to the solution if any</param>
@@ -291,9 +292,9 @@ private static string GenerateFullPathToTool(RegistryView registryView)
         /// <summary>
         /// Looks up a path from the registry if present, and checks whether VCBuild.exe is there.
         /// </summary>
-        /// <param name="subKey">Registry key to open</param>
+        /// <param name="root"></param>
+        /// <param name="subKeyName">Registry key to open</param>
         /// <param name="valueName">Value under that key to read</param>
-        /// <param name="messageToLogIfNotFound">Low-pri message to log if registry key isn't found</param>
         /// <param name="relativePathFromValueOnLayout">Relative path from the key value to vcbuild.exe for layout installs</param>
         /// <param name="relativePathFromValueOnBatch">Relative path from the key value to vcbuild.exe for batch installs</param>
         /// <returns>Path to vcbuild.exe, or null if it's not found</returns>
diff --git a/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs b/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
index 34b8a79a3bc..7b253fce799 100644
--- a/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
+++ b/src/Deprecated/Engine/Utilities/EngineFileUtilities.cs
@@ -15,6 +15,7 @@ internal class EngineFileUtilities
         /// assuming that it wasn't really intended to be a filename (as items are not required to necessarily represent files).
         /// </summary>
         /// <owner>RGoel</owner>
+        /// <param name="directory"></param>
         /// <param name="filespec">The filespec to evaluate.</param>
         /// <returns>Array of file paths.</returns>
         internal static string[] GetFileListEscaped
