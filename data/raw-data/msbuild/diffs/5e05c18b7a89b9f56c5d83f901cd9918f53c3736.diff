diff --git a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
index 15ae99e97f5..d6159906e8b 100644
--- a/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/PluginLoggerBase.cs
@@ -11,16 +11,6 @@ namespace Microsoft.Build.Experimental.ProjectCache
     /// </summary>
     public abstract class PluginLoggerBase
     {
-        protected PluginLoggerBase(LoggerVerbosity verbosity)
-        {
-            Verbosity = verbosity;
-        }
-
-        /// <summary>
-        ///     See <see cref="ILogger.Verbosity" />
-        /// </summary>
-        private LoggerVerbosity Verbosity { get; }
-
         public abstract bool HasLoggedErrors { get; protected set; }
 
         public abstract void LogMessage(string message, MessageImportance? messageImportance = null);
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 42e912b95ae..a80f22d6a6d 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -4,7 +4,6 @@
 #nullable enable
 using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Linq;
 using System.Reflection;
@@ -43,7 +42,7 @@ internal enum ProjectCacheServiceState
     internal class ProjectCacheService
     {
         private readonly BuildManager _buildManager;
-        private readonly Func<PluginLoggerBase> _loggerFactory;
+        private readonly ILoggingService _loggingService;
         private readonly ProjectCacheDescriptor _projectCacheDescriptor;
         private readonly CancellationToken _cancellationToken;
         private readonly ProjectCachePluginBase _projectCachePlugin;
@@ -65,14 +64,14 @@ private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
         private ProjectCacheService(
             ProjectCachePluginBase projectCachePlugin,
             BuildManager buildManager,
-            Func<PluginLoggerBase> loggerFactory,
+            ILoggingService loggingService,
             ProjectCacheDescriptor projectCacheDescriptor,
             CancellationToken cancellationToken
         )
         {
             _projectCachePlugin = projectCachePlugin;
             _buildManager = buildManager;
-            _loggerFactory = loggerFactory;
+            _loggingService = loggingService;
             _projectCacheDescriptor = projectCacheDescriptor;
             _cancellationToken = cancellationToken;
         }
@@ -86,11 +85,7 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
             var plugin = await Task.Run(() => GetPluginInstance(pluginDescriptor), cancellationToken)
                 .ConfigureAwait(false);
 
-            // TODO: Detect and use the highest verbosity from all the user defined loggers. That's tricky because right now we can't query loggers about
-            // their verbosity levels.
-            var loggerFactory = new Func<PluginLoggerBase>(() => new LoggingServiceToPluginLoggerAdapter(LoggerVerbosity.Normal, loggingService));
-
-            var service = new ProjectCacheService(plugin, buildManager, loggerFactory, pluginDescriptor, cancellationToken);
+            var service = new ProjectCacheService(plugin, buildManager, loggingService, pluginDescriptor, cancellationToken);
 
             // TODO: remove the if after we change VS to set the cache descriptor via build parameters and always call BeginBuildAsync in FromDescriptorAsync.
             // When running under VS we can't initialize the plugin until we evaluate a project (any project) and extract
@@ -106,7 +101,10 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.
         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)
         {
-            var logger = _loggerFactory();
+            var logger = new LoggingServiceToPluginLoggerAdapter(
+                _loggingService,
+                BuildEventContext.Invalid,
+                BuildEventFileInfo.Empty);
 
             try
             {
@@ -127,7 +125,6 @@ await _projectCachePlugin.BeginBuildAsync(
                         new DefaultMSBuildFileSystem(),
                         projectDescriptor.ProjectGraph,
                         projectDescriptor.EntryPoints),
-                    // TODO: Detect verbosity from logging service.
                     logger,
                     _cancellationToken);
 
@@ -470,7 +467,13 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
                                    $"\n\tTargets:[{string.Join(", ", buildRequest.TargetNames)}]" +
                                    $"\n\tGlobal Properties: {{{string.Join(",", buildRequest.GlobalProperties.Select(kvp => $"{kvp.Name}={kvp.EvaluatedValue}"))}}}";
 
-            var logger = _loggerFactory();
+            // TODO: Get a valid BuildEventContext to correcctly associate cache-related log events with the build
+            var buildEventContext = BuildEventContext.Invalid;
+            var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);
+            var logger = new LoggingServiceToPluginLoggerAdapter(
+                _loggingService,
+                buildEventContext,
+                buildEventFileInfo);
 
             logger.LogMessage(
                 "\n====== Querying project cache for project " + queryDescription,
@@ -517,7 +520,10 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
 
         public async Task ShutDown()
         {
-            var logger = _loggerFactory();
+            var logger = new LoggingServiceToPluginLoggerAdapter(
+                _loggingService,
+                BuildEventContext.Invalid,
+                BuildEventFileInfo.Empty);
 
             try
             {
@@ -609,19 +615,26 @@ private class LoggingServiceToPluginLoggerAdapter : PluginLoggerBase
         {
             private readonly ILoggingService _loggingService;
 
+            private readonly BuildEventContext _buildEventContext;
+
+            private readonly BuildEventFileInfo _buildEventFileInfo;
+
             public override bool HasLoggedErrors { get; protected set; }
 
             public LoggingServiceToPluginLoggerAdapter(
-                LoggerVerbosity verbosity,
-                ILoggingService loggingService) : base(verbosity)
+                ILoggingService loggingService,
+                BuildEventContext buildEventContext,
+                BuildEventFileInfo buildEventFileInfo)
             {
                 _loggingService = loggingService;
+                _buildEventContext = buildEventContext;
+                _buildEventFileInfo = buildEventFileInfo;
             }
 
             public override void LogMessage(string message, MessageImportance? messageImportance = null)
             {
                 _loggingService.LogCommentFromText(
-                    BuildEventContext.Invalid,
+                    _buildEventContext,
                     messageImportance ?? MessageImportance.Normal,
                     message);
             }
@@ -629,11 +642,11 @@ public override void LogMessage(string message, MessageImportance? messageImport
             public override void LogWarning(string warning)
             {
                 _loggingService.LogWarningFromText(
-                    BuildEventContext.Invalid,
+                    _buildEventContext,
                     null,
                     null,
                     null,
-                    BuildEventFileInfo.Empty,
+                    _buildEventFileInfo,
                     warning);
             }
 
@@ -642,7 +655,7 @@ public override void LogError(string error)
                 HasLoggedErrors = true;
 
                 _loggingService.LogErrorFromText(
-                    BuildEventContext.Invalid,
+                    _buildEventContext,
                     null,
                     null,
                     null,
diff --git a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
index 7b51af24c2f..027d79e6239 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
@@ -1320,7 +1320,6 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
@@ -1819,4 +1818,4 @@ virtual Microsoft.Build.Logging.ConfigurableForwardingLogger.Shutdown() -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Shutdown() -> void
-virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
\ No newline at end of file
+virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index c095b7f8e50..9281b0c3cf8 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,5 +1,6 @@
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.FileSystem.FindPredicate
 Microsoft.Build.FileSystem.FindTransform<TResult>
 Microsoft.Build.FileSystem.IDirectoryCache
@@ -9,4 +10,4 @@ Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path,
 Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
 Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
\ No newline at end of file
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
index eb03a4d60f0..b2b3f82f392 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -1317,7 +1317,6 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index c095b7f8e50..218e7d4593d 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,5 +1,6 @@
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.FileSystem.FindPredicate
 Microsoft.Build.FileSystem.FindTransform<TResult>
 Microsoft.Build.FileSystem.IDirectoryCache
