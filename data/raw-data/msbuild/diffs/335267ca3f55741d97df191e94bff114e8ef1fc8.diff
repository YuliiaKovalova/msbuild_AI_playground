diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 568ace67542..0903f737d2a 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -605,6 +605,28 @@ public void GetTargetListsNullEntryTargets()
             }
         }
 
+        [Fact]
+        public void GetTargetsListsShouldApplyDefaultTargetsOnlyToGraphRoots()
+        {
+            using (var env = TestEnvironment.Create())
+            {
+                var root1 = CreateProjectFile(env, 1, new[] {2}, new Dictionary<string, string[]> {{"A", new[] {"B"}}}, "A").Path;
+                var root2 = CreateProjectFile(env, 2, new[] {3}, new Dictionary<string, string[]> {{"B", new[] {"C"}}, {"X", new[] {"Y"}}}, "X").Path;
+                CreateProjectFile(env, 3);
+                
+
+                var projectGraph = new ProjectGraph(new []{root1, root2});
+                projectGraph.ProjectNodes.Count.ShouldBe(3);
+
+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = projectGraph.GetTargetLists(null);
+
+                targetLists.Count.ShouldBe(projectGraph.ProjectNodes.Count);
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 1)].ShouldBe(new[] { "A" });
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 2)].ShouldBe(new[] { "B" });
+                targetLists[GetFirstNodeWithProjectNumber(projectGraph, 3)].ShouldBe(new[] { "C" });
+            }
+        }
+
         [Fact]
         public void GetTargetListsDefaultTargetsAreExpanded()
         {
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 76783aa44b5..59e93108356 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -308,7 +308,9 @@ private static IReadOnlyCollection<ProjectGraphNode> TopologicalSort(IReadOnlyCo
         /// This method uses the ProjectReferenceTargets items to determine the targets to run per node. The results can then be used
         /// to start building each project individually, assuming a given project is built after its references.
         /// </remarks>
-        /// <param name="entryProjectTargets">The target list for the entry project. May be null or empty, in which case the entry projects' default targets will be used.</param>
+        /// <param name="entryProjectTargets">
+        /// The target list for the <see cref="GraphRoots"/>. May be null or empty, in which case the entry projects' default targets will be used.
+        /// </param>
         /// <returns>A dictionary containing the target list for each node.</returns>
         public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLists(ICollection<string> entryProjectTargets)
         {
@@ -318,8 +320,8 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
             var encounteredEdges = new HashSet<ProjectGraphBuildRequest>();
             var edgesToVisit = new Queue<ProjectGraphBuildRequest>();
 
-            // Initial state of the graph traversal.
-            foreach (var entryPointNode in EntryPointNodes)
+            // Initial state for the graph roots
+            foreach (var entryPointNode in GraphRoots)
             {
                 ImmutableList<string> entryTargets = entryProjectTargets == null || entryProjectTargets.Count == 0
                     ? ImmutableList.CreateRange(entryPointNode.ProjectInstance.DefaultTargets)
