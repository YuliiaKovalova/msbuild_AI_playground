diff --git a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
index 9fba141c3a3..7504cd8bb3d 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostTaskComplete_Tests.cs
@@ -5,7 +5,7 @@
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Xunit;
diff --git a/src/Build/BackEnd/Components/Communications/DetouredNodeLauncher.cs b/src/Build/BackEnd/Components/Communications/DetouredNodeLauncher.cs
index d34bf7c9eec..944334e0c9f 100644
--- a/src/Build/BackEnd/Components/Communications/DetouredNodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/DetouredNodeLauncher.cs
@@ -10,6 +10,7 @@
 using BuildXL.Processes;
 using BuildXL.Utilities.Core;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.FileAccesses;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -160,20 +161,20 @@ public override void HandleDebugMessage(DebugData debugData)
             }
 
             public override void HandleFileAccess(FileAccessData fileAccessData) => _fileAccessManager.ReportFileAccess(
-                new Framework.FileAccess.FileAccessData(
-                    (Framework.FileAccess.ReportedFileOperation)fileAccessData.Operation,
-                    (Framework.FileAccess.RequestedAccess)fileAccessData.RequestedAccess,
+                new Experimental.FileAccess.FileAccessData(
+                    (Experimental.FileAccess.ReportedFileOperation)fileAccessData.Operation,
+                    (Experimental.FileAccess.RequestedAccess)fileAccessData.RequestedAccess,
                     fileAccessData.ProcessId,
                     fileAccessData.Error,
-                    (Framework.FileAccess.DesiredAccess)fileAccessData.DesiredAccess,
-                    (Framework.FileAccess.FlagsAndAttributes)fileAccessData.FlagsAndAttributes,
+                    (Experimental.FileAccess.DesiredAccess)fileAccessData.DesiredAccess,
+                    (Experimental.FileAccess.FlagsAndAttributes)fileAccessData.FlagsAndAttributes,
                     fileAccessData.Path,
                     fileAccessData.ProcessArgs,
                     fileAccessData.IsAnAugmentedFileAccess),
                 _nodeId);
 
             public override void HandleProcessData(ProcessData processData) => _fileAccessManager.ReportProcess(
-                new Framework.FileAccess.ProcessData(
+                new Experimental.FileAccess.ProcessData(
                     processData.ProcessName,
                     processData.ProcessId,
                     processData.ParentProcessId,
diff --git a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
index efbe32a0f64..6943ff208e0 100644
--- a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
@@ -9,7 +9,7 @@
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.FileAccesses
diff --git a/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs b/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
index f69b6fd1580..72ce0107921 100644
--- a/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/FileAccessReport.cs
@@ -2,7 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 
 namespace Microsoft.Build.FileAccesses
 {
diff --git a/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
index 3dd724afef3..dd3b7685053 100644
--- a/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
@@ -5,7 +5,7 @@
 using System;
 using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 
 namespace Microsoft.Build.FileAccesses
 {
diff --git a/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
index 80255059350..e211f674789 100644
--- a/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
@@ -5,7 +5,7 @@
 using System;
 using System.Threading;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.FileAccesses
diff --git a/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs b/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
index 89bf533ed86..f8d891fe532 100644
--- a/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/ProcessReport.cs
@@ -2,7 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 
 namespace Microsoft.Build.FileAccesses
 {
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
index eb55d482ba0..6c999cfcf53 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
@@ -5,7 +5,7 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 0d67e69b661..569a498e1cd 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -19,7 +19,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.FileAccesses;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.Shared;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
@@ -939,17 +939,20 @@ public override bool LogsMessagesOfImportance(MessageImportance importance)
             /// <inheritdoc/>
             public override bool IsTaskInputLoggingEnabled => _taskHost._host.BuildParameters.LogTaskInputs;
 
-            /// <inheritdoc/>
-            public override void ReportFileAccess(FileAccessData fileAccessData)
-            {
 #if FEATURE_REPORTFILEACCESSES
+            /// <summary>
+            /// Reports a file access from a task.
+            /// </summary>
+            /// <param name="fileAccessData">The file access to report.</param>
+            public void ReportFileAccess(FileAccessData fileAccessData)
+            {
                 IBuildComponentHost buildComponentHost = _taskHost._host;
                 if (buildComponentHost.BuildParameters.ReportFileAccesses)
                 {
                     ((IFileAccessManager)buildComponentHost.GetComponent(BuildComponentType.FileAccessManager)).ReportFileAccess(fileAccessData, buildComponentHost.BuildParameters.NodeId);
                 }
-#endif
             }
+#endif
         }
 
         public EngineServices EngineServices { get; }
diff --git a/src/Framework/FileAccess/DesiredAccess.cs b/src/Build/FileAccess/DesiredAccess.cs
similarity index 98%
rename from src/Framework/FileAccess/DesiredAccess.cs
rename to src/Build/FileAccess/DesiredAccess.cs
index 056c74d6f19..b9bdea98c0f 100644
--- a/src/Framework/FileAccess/DesiredAccess.cs
+++ b/src/Build/FileAccess/DesiredAccess.cs
@@ -3,7 +3,7 @@
 
 using System;
 
-namespace Microsoft.Build.Framework.FileAccess
+namespace Microsoft.Build.Experimental.FileAccess
 {
     /*
      * Implementation note: This is a copy of BuildXL.Processes.DesiredAccess.
diff --git a/src/Build/FileAccess/FileAccessData.cs b/src/Build/FileAccess/FileAccessData.cs
new file mode 100644
index 00000000000..64cd45a92d4
--- /dev/null
+++ b/src/Build/FileAccess/FileAccessData.cs
@@ -0,0 +1,125 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+using Microsoft.Build.BackEnd;
+
+namespace Microsoft.Build.Experimental.FileAccess
+{
+    /// <summary>
+    /// File access data.
+    /// </summary>
+    [CLSCompliant(false)]
+    public struct FileAccessData
+        : ITranslatable
+    {
+        private ReportedFileOperation _operation;
+        private RequestedAccess _requestedAccess;
+        private uint _processId;
+        private uint _error;
+        private DesiredAccess _desiredAccess;
+        private FlagsAndAttributes _flagsAndAttributes;
+        private string _path;
+        private string? _processArgs;
+        private bool _isAnAugmentedFileAccess;
+
+        public FileAccessData(
+            ReportedFileOperation operation,
+            RequestedAccess requestedAccess,
+            uint processId,
+            uint error,
+            DesiredAccess desiredAccess,
+            FlagsAndAttributes flagsAndAttributes,
+            string path,
+            string? processArgs,
+            bool isAnAugmentedFileAccess)
+        {
+            _operation = operation;
+            _requestedAccess = requestedAccess;
+            _processId = processId;
+            _error = error;
+            _desiredAccess = desiredAccess;
+            _flagsAndAttributes = flagsAndAttributes;
+            _path = path;
+            _processArgs = processArgs;
+            _isAnAugmentedFileAccess = isAnAugmentedFileAccess;
+        }
+
+        /// <summary>The operation that performed the file access.</summary>
+        public ReportedFileOperation Operation
+        {
+            readonly get => _operation;
+            private set => _operation = value;
+        }
+
+        /// <summary>The requested access.</summary>
+        public RequestedAccess RequestedAccess
+        {
+            get => _requestedAccess;
+            private set => _requestedAccess = value;
+        }
+
+        /// <summary>The process id.</summary>
+        public uint ProcessId
+        {
+            readonly get => _processId;
+            private set => _processId = value;
+        }
+
+        /// <summary>The error code of the operation.</summary>
+        public uint Error
+        {
+            readonly get => _error;
+            private set => _error = value;
+        }
+
+        /// <summary>The desired access.</summary>
+        public DesiredAccess DesiredAccess
+        {
+            readonly get => _desiredAccess;
+            private set => _desiredAccess = value;
+        }
+
+        /// <summary>The file flags and attributes.</summary>
+        public FlagsAndAttributes FlagsAndAttributes
+        {
+            readonly get => _flagsAndAttributes;
+            private set => _flagsAndAttributes = value;
+        }
+
+        /// <summary>The path being accessed.</summary>
+        public string Path
+        {
+            readonly get => _path;
+            private set => _path = value;
+        }
+
+        /// <summary>The process arguments.</summary>
+        public string? ProcessArgs
+        {
+            readonly get => _processArgs;
+            private set => _processArgs = value;
+        }
+
+        /// <summary>Whether the file access is augmented.</summary>
+        public bool IsAnAugmentedFileAccess
+        {
+            readonly get => _isAnAugmentedFileAccess;
+            private set => _isAnAugmentedFileAccess = value;
+        }
+
+        void ITranslatable.Translate(ITranslator translator)
+        {
+            translator.TranslateEnum(ref _operation, (int)_operation);
+            translator.TranslateEnum(ref _requestedAccess, (int)_requestedAccess);
+            translator.Translate(ref _processId);
+            translator.Translate(ref _error);
+            translator.TranslateEnum(ref _desiredAccess, (int)_desiredAccess);
+            translator.TranslateEnum(ref _flagsAndAttributes, (int)_flagsAndAttributes);
+            translator.Translate(ref _path);
+            translator.Translate(ref _processArgs);
+            translator.Translate(ref _isAnAugmentedFileAccess);
+        }
+    }
+}
diff --git a/src/Framework/FileAccess/FlagsAndAttributes.cs b/src/Build/FileAccess/FlagsAndAttributes.cs
similarity index 99%
rename from src/Framework/FileAccess/FlagsAndAttributes.cs
rename to src/Build/FileAccess/FlagsAndAttributes.cs
index 8b01f48106f..c02ca45a969 100644
--- a/src/Framework/FileAccess/FlagsAndAttributes.cs
+++ b/src/Build/FileAccess/FlagsAndAttributes.cs
@@ -3,7 +3,7 @@
 
 using System;
 
-namespace Microsoft.Build.Framework.FileAccess
+namespace Microsoft.Build.Experimental.FileAccess
 {
     /*
      * Implementation note: This is a copy of BuildXL.Processes.FlagsAndAttributes.
diff --git a/src/Build/FileAccess/ProcessData.cs b/src/Build/FileAccess/ProcessData.cs
new file mode 100644
index 00000000000..aa274054545
--- /dev/null
+++ b/src/Build/FileAccess/ProcessData.cs
@@ -0,0 +1,85 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+using Microsoft.Build.BackEnd;
+
+namespace Microsoft.Build.Experimental.FileAccess
+{
+    /// <summary>
+    /// Process data.
+    /// </summary>
+    [CLSCompliant(false)]
+    public struct ProcessData : ITranslatable
+    {
+        private string _processName;
+        private uint _processId;
+        private uint _parentProcessId;
+        private DateTime _creationDateTime;
+        private DateTime _exitDateTime;
+        private uint _exitCode;
+
+        public ProcessData(string processName, uint processId, uint parentProcessId, DateTime creationDateTime, DateTime exitDateTime, uint exitCode)
+        {
+            _processName = processName;
+            _processId = processId;
+            _parentProcessId = parentProcessId;
+            _creationDateTime = creationDateTime;
+            _exitDateTime = exitDateTime;
+            _exitCode = exitCode;
+        }
+
+        /// <summary>The process name.</summary>
+        public string ProcessName
+        {
+            get => _processName;
+            private set => _processName = value;
+        }
+
+        /// <summary>The process id.</summary>
+        public uint ProcessId
+        {
+            get => _processId;
+            private set => _processId = value;
+        }
+
+        /// <summary>The parent process id.</summary>
+        public uint ParentProcessId
+        {
+            get => _parentProcessId;
+            private set => _parentProcessId = value;
+        }
+
+        /// <summary>The creation date time.</summary>
+        public DateTime CreationDateTime
+        {
+            get => _creationDateTime;
+            private set => _creationDateTime = value;
+        }
+
+        /// <summary>The exit date time.</summary>
+        public DateTime ExitDateTime
+        {
+            get => _exitDateTime;
+            private set => _exitDateTime = value;
+        }
+
+        /// <summary>The exit code.</summary>
+        public uint ExitCode
+        {
+            get => _exitCode;
+            private set => _exitCode = value;
+        }
+
+        void ITranslatable.Translate(ITranslator translator)
+        {
+            translator.Translate(ref _processName);
+            translator.Translate(ref _processId);
+            translator.Translate(ref _parentProcessId);
+            translator.Translate(ref _creationDateTime);
+            translator.Translate(ref _exitDateTime);
+            translator.Translate(ref _exitCode);
+        }
+    }
+}
diff --git a/src/Framework/FileAccess/ReportedFileOperation.cs b/src/Build/FileAccess/ReportedFileOperation.cs
similarity index 98%
rename from src/Framework/FileAccess/ReportedFileOperation.cs
rename to src/Build/FileAccess/ReportedFileOperation.cs
index 22e90c56cea..c3b846cedde 100644
--- a/src/Framework/FileAccess/ReportedFileOperation.cs
+++ b/src/Build/FileAccess/ReportedFileOperation.cs
@@ -1,7 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-namespace Microsoft.Build.Framework.FileAccess
+namespace Microsoft.Build.Experimental.FileAccess
 {
     /*
      * Implementation note: This is a copy of BuildXL.Processes.ReportedFileOperation.
@@ -186,7 +186,7 @@ public enum ReportedFileOperation : byte
 
         /// <summary>
         /// This is a quasi operation. The sandbox issues this only when FileAccessPolicy.OverrideAllowWriteForExistingFiles is set, representing
-        /// that an allow for write check was performed for a given path for the first time (in the scope of a process, another process in the same process 
+        /// that an allow for write check was performed for a given path for the first time (in the scope of a process, another process in the same process
         /// tree may also report this for the same path).
         /// </summary>
         FirstAllowWriteCheckInProcess,
diff --git a/src/Framework/FileAccess/RequestedAccess.cs b/src/Build/FileAccess/RequestedAccess.cs
similarity index 97%
rename from src/Framework/FileAccess/RequestedAccess.cs
rename to src/Build/FileAccess/RequestedAccess.cs
index b522571460f..e0e83f176ed 100644
--- a/src/Framework/FileAccess/RequestedAccess.cs
+++ b/src/Build/FileAccess/RequestedAccess.cs
@@ -3,7 +3,7 @@
 
 using System;
 
-namespace Microsoft.Build.Framework.FileAccess
+namespace Microsoft.Build.Experimental.FileAccess
 {
     /*
      * Implementation note: This is a copy of BuildXL.Processes.RequestedAccess.
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index a77509a9120..09bbe0eb985 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -11,7 +11,7 @@
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.FileAccesses;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 9a5b1175b0e..ec790f452ea 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -167,6 +167,12 @@
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
+    <Compile Include="FileAccess\DesiredAccess.cs" />
+    <Compile Include="FileAccess\FileAccessData.cs" />
+    <Compile Include="FileAccess\FlagsAndAttributes.cs" />
+    <Compile Include="FileAccess\ProcessData.cs" />
+    <Compile Include="FileAccess\ReportedFileOperation.cs" />
+    <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Logging\BinaryLogger\IBuildEventArgsReaderNotifications.cs" />
     <Compile Include="Logging\BinaryLogger\IBuildEventStringsReader.cs" />
     <Compile Include="Logging\BinaryLogger\StringReadEventArgs.cs" />
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index f5585995802..550f487f8ab 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -9,9 +9,6 @@
 using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.BuildException;
-#if !CLR2COMPATIBILITY
-using Microsoft.Build.Framework.FileAccess;
-#endif
 
 #nullable disable
 
@@ -426,82 +423,6 @@ public void Translate(ref BuildEventContext value)
                     _reader.ReadInt32(),
                     _reader.ReadInt32());
             }
-
-            /// <inheritdoc/>
-            public void Translate(ref FileAccessData fileAccessData)
-            {
-                ReportedFileOperation reportedFileOperation = default;
-                RequestedAccess requestedAccess = default;
-                uint processId = default;
-                uint error = default;
-                DesiredAccess desiredAccess = default;
-                FlagsAndAttributes flagsAndAttributes = default;
-                string path = default;
-                string processArgs = default;
-                bool isAnAugmentedFileAccess = default;
-                TranslateEnum(ref reportedFileOperation, (int)reportedFileOperation);
-                TranslateEnum(ref requestedAccess, (int)requestedAccess);
-                Translate(ref processId);
-                Translate(ref error);
-                TranslateEnum(ref desiredAccess, (int)desiredAccess);
-                TranslateEnum(ref flagsAndAttributes, (int)flagsAndAttributes);
-                Translate(ref path);
-                Translate(ref processArgs);
-                Translate(ref isAnAugmentedFileAccess);
-                fileAccessData = new FileAccessData(
-                    reportedFileOperation,
-                    requestedAccess,
-                    processId,
-                    error,
-                    desiredAccess,
-                    flagsAndAttributes,
-                    path,
-                    processArgs,
-                    isAnAugmentedFileAccess);
-            }
-
-            /// <inheritdoc/>
-            public void Translate(ref List<FileAccessData> fileAccessDataList)
-            {
-                if (!TranslateNullable(fileAccessDataList))
-                {
-                    return;
-                }
-
-                int count = default;
-                Translate(ref count);
-                fileAccessDataList = new List<FileAccessData>(count);
-                for (int i = 0; i < count; i++)
-                {
-                    FileAccessData fileAccessData = default;
-                    Translate(ref fileAccessData);
-                    fileAccessDataList.Add(fileAccessData);
-                }
-            }
-
-            /// <inheritdoc/>
-            public void Translate(ref ProcessData processData)
-            {
-                string processName = default;
-                uint processId = default;
-                uint parentProcessId = default;
-                DateTime creationDateTime = default;
-                DateTime exitDateTime = default;
-                uint exitCode = default;
-                Translate(ref processName);
-                Translate(ref processId);
-                Translate(ref parentProcessId);
-                Translate(ref creationDateTime);
-                Translate(ref exitDateTime);
-                Translate(ref exitCode);
-                processData = new ProcessData(
-                    processName,
-                    processId,
-                    parentProcessId,
-                    creationDateTime,
-                    exitDateTime,
-                    exitCode);
-            }
 #endif
 
             /// <summary>
@@ -1186,59 +1107,6 @@ public void Translate(ref BuildEventContext value)
                 _writer.Write(value.TargetId);
                 _writer.Write(value.TaskId);
             }
-
-            /// <inheritdoc/>
-            public void Translate(ref FileAccessData fileAccessData)
-            {
-                ReportedFileOperation reportedFileOperation = fileAccessData.Operation;
-                RequestedAccess requestedAccess = fileAccessData.RequestedAccess;
-                uint processId = fileAccessData.ProcessId;
-                uint error = fileAccessData.Error;
-                DesiredAccess desiredAccess = fileAccessData.DesiredAccess;
-                FlagsAndAttributes flagsAndAttributes = fileAccessData.FlagsAndAttributes;
-                string path = fileAccessData.Path;
-                string processArgs = fileAccessData.ProcessArgs;
-                bool isAnAugmentedFileAccess = fileAccessData.IsAnAugmentedFileAccess;
-                TranslateEnum(ref reportedFileOperation, (int)reportedFileOperation);
-                TranslateEnum(ref requestedAccess, (int)requestedAccess);
-                Translate(ref processId);
-                Translate(ref error);
-                TranslateEnum(ref desiredAccess, (int)desiredAccess);
-                TranslateEnum(ref flagsAndAttributes, (int)flagsAndAttributes);
-                Translate(ref path);
-                Translate(ref processArgs);
-                Translate(ref isAnAugmentedFileAccess);
-            }
-
-            /// <inheritdoc/>
-            public void Translate(ref List<FileAccessData> fileAccessDataList)
-            {
-                if (!TranslateNullable(fileAccessDataList))
-                {
-                    return;
-                }
-
-                int count = fileAccessDataList.Count;
-                Translate(ref count);
-                fileAccessDataList.ForEach(fileAccessData => Translate(ref fileAccessData));
-            }
-
-            /// <inheritdoc/>
-            public void Translate(ref ProcessData processData)
-            {
-                string processName = processData.ProcessName;
-                uint processId = processData.ProcessId;
-                uint parentProcessId = processData.ParentProcessId;
-                DateTime creationDateTime = processData.CreationDateTime;
-                DateTime exitDateTime = processData.ExitDateTime;
-                uint exitCode = processData.ExitCode;
-                Translate(ref processName);
-                Translate(ref processId);
-                Translate(ref parentProcessId);
-                Translate(ref creationDateTime);
-                Translate(ref exitDateTime);
-                Translate(ref exitCode);
-            }
 #endif 
 
             /// <summary>
diff --git a/src/Framework/EngineServices.cs b/src/Framework/EngineServices.cs
index 853663d4e5b..491604c7827 100644
--- a/src/Framework/EngineServices.cs
+++ b/src/Framework/EngineServices.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Framework.FileAccess;
 
 namespace Microsoft.Build.Framework
 {
@@ -21,11 +20,6 @@ public abstract class EngineServices
         /// </summary>
         public const int Version1 = 1;
 
-        /// <summary>
-        /// Includes <see cref="ReportFileAccess(FileAccessData)"/>.
-        /// </summary>
-        public const int Version2 = 2;
-
         /// <summary>
         /// Gets an explicit version of this class.
         /// </summary>
@@ -33,7 +27,7 @@ public abstract class EngineServices
         /// Must be incremented whenever new members are added. Derived classes should override
         /// the property to return the version actually being implemented.
         /// </remarks>
-        public virtual int Version => Version2;
+        public virtual int Version => Version1;
 
         /// <summary>
         /// Returns <see langword="true"/> if the given message importance is not guaranteed to be ignored by registered loggers.
@@ -54,12 +48,5 @@ public abstract class EngineServices
         /// This is a performance optimization allowing tasks to skip expensive double-logging.
         /// </remarks>
         public virtual bool IsTaskInputLoggingEnabled => throw new NotImplementedException();
-
-        /// <summary>
-        /// Reports a file access from a task.
-        /// </summary>
-        /// <param name="fileAccessData">The file access to report.</param>
-        [CLSCompliant(false)]
-        public virtual void ReportFileAccess(FileAccessData fileAccessData) => throw new NotImplementedException();
     }
 }
diff --git a/src/Framework/FileAccess/FileAccessData.cs b/src/Framework/FileAccess/FileAccessData.cs
deleted file mode 100644
index 2f95ce9d471..00000000000
--- a/src/Framework/FileAccess/FileAccessData.cs
+++ /dev/null
@@ -1,31 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Framework.FileAccess
-{
-    /// <summary>
-    /// File access data.
-    /// </summary>
-    /// <param name="Operation">The operation that performed the file access.</param>
-    /// <param name="RequestedAccess">The requested access.</param>
-    /// <param name="ProcessId">The process id.</param>
-    /// <param name="Error">The error code of the operation.</param>
-    /// <param name="DesiredAccess">The desired access.</param>
-    /// <param name="FlagsAndAttributes">The file flags and attributes.</param>
-    /// <param name="Path">The path being accessed.</param>
-    /// <param name="ProcessArgs">The process arguments.</param>
-    /// <param name="IsAnAugmentedFileAccess">Whether the file access is augmented.</param>
-    [CLSCompliant(false)]
-    public readonly record struct FileAccessData(
-        ReportedFileOperation Operation,
-        RequestedAccess RequestedAccess,
-        uint ProcessId,
-        uint Error,
-        DesiredAccess DesiredAccess,
-        FlagsAndAttributes FlagsAndAttributes,
-        string Path,
-        string? ProcessArgs,
-        bool IsAnAugmentedFileAccess);
-}
diff --git a/src/Framework/FileAccess/ProcessData.cs b/src/Framework/FileAccess/ProcessData.cs
deleted file mode 100644
index aa4c8ab873c..00000000000
--- a/src/Framework/FileAccess/ProcessData.cs
+++ /dev/null
@@ -1,25 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Framework.FileAccess
-{
-    /// <summary>
-    /// Process data.
-    /// </summary>
-    /// <param name="ProcessName">The process name.</param>
-    /// <param name="ProcessId">The process id.</param>
-    /// <param name="ParentProcessId">The parent process id.</param>
-    /// <param name="CreationDateTime">The creation date time.</param>
-    /// <param name="ExitDateTime">The exit date time.</param>
-    /// <param name="ExitCode">The exit code.</param>
-    [CLSCompliant(false)]
-    public readonly record struct ProcessData(
-        string ProcessName,
-        uint ProcessId,
-        uint ParentProcessId,
-        DateTime CreationDateTime,
-        DateTime ExitDateTime,
-        uint ExitCode);
-}
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index 77f1c76f647..8d267351591 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -6,9 +6,6 @@
 using System.Globalization;
 using System.IO;
 using Microsoft.Build.Framework;
-#if !CLR2COMPATIBILITY
-using Microsoft.Build.Framework.FileAccess;
-#endif
 
 #nullable disable
 
@@ -242,25 +239,7 @@ BinaryWriter Writer
         /// </remarks>
         /// <param name="value">The context to be translated.</param>
         void Translate(ref BuildEventContext value);
-
-        /// <summary>
-        /// Translates <paramref name="fileAccessData"/>.
-        /// </summary>
-        /// <param name="fileAccessData">The <see cref="FileAccessData"/> to translate.</param>
-        void Translate(ref FileAccessData fileAccessData);
-
-        /// <summary>
-        /// Translates <paramref name="fileAccessDataList"/>.
-        /// </summary>
-        /// <param name="fileAccessDataList">The file accesses to translate.</param>
-        void Translate(ref List<FileAccessData> fileAccessDataList);
-
-        /// <summary>
-        /// Translates <paramref name="processData"/>.
-        /// </summary>
-        /// <param name="processData">The <see cref="ProcessData"/> to translate.</param>
-        void Translate(ref ProcessData processData);
-#endif 
+#endif
 
         /// <summary>
         /// Translates an enumeration.
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 64ab30c8d6d..dc6cfcdf7e6 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -13,7 +13,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 #if !CLR2COMPATIBILITY
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 #endif
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -541,13 +541,16 @@ public override bool IsTaskInputLoggingEnabled
                 }
             }
 
-            /// <inheritdoc/>
-            public override void ReportFileAccess(FileAccessData fileAccessData)
-            {
 #if FEATURE_REPORTFILEACCESSES
+            /// <summary>
+            /// Reports a file access from a task.
+            /// </summary>
+            /// <param name="fileAccessData">The file access to report.</param>
+            public void ReportFileAccess(FileAccessData fileAccessData)
+            {
                 _taskHost._fileAccessData.Add(fileAccessData);
-#endif
             }
+#endif
         }
 
         public EngineServices EngineServices { get; }
diff --git a/src/Shared/TaskHostTaskComplete.cs b/src/Shared/TaskHostTaskComplete.cs
index f493f43175f..6e5a9029b6e 100644
--- a/src/Shared/TaskHostTaskComplete.cs
+++ b/src/Shared/TaskHostTaskComplete.cs
@@ -5,7 +5,7 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 #if !CLR2COMPATIBILITY
-using Microsoft.Build.Framework.FileAccess;
+using Microsoft.Build.Experimental.FileAccess;
 #endif
 using Microsoft.Build.Shared;
 
@@ -244,7 +244,8 @@ public void Translate(ITranslator translator)
             translator.TranslateDictionary(ref _taskOutputParameters, StringComparer.OrdinalIgnoreCase, TaskParameter.FactoryForDeserialization);
             translator.TranslateDictionary(ref _buildProcessEnvironment, StringComparer.OrdinalIgnoreCase);
 #if FEATURE_REPORTFILEACCESSES
-            translator.Translate(ref _fileAccessData);
+            translator.Translate(ref _fileAccessData,
+                (ITranslator translator, ref FileAccessData data) => ((ITranslatable)data).Translate(translator));
 #else
             bool hasFileAccessData = false;
             translator.Translate(ref hasFileAccessData);
