diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index 196f206e3b7..b6041600983 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -20,7 +20,7 @@ private ProjectCacheException()
         private ProjectCacheException(
             string message,
             Exception innerException,
-            bool hasBeenLogged,
+            bool hasBeenLoggedByProjectCache,
             string errorCode
         )
             : base(message, innerException)
@@ -28,7 +28,7 @@ string errorCode
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(message), "Need error message.");
             ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(errorCode), "Must specify the error message code.");
 
-            HasBeenLogged = hasBeenLogged;
+            HasBeenLoggedByProjectCache = hasBeenLoggedByProjectCache;
             ErrorCode = errorCode;
         }
 
@@ -36,7 +36,7 @@ string errorCode
         /// The project cache has already logged this as an error.
         /// Should not get logged again.
         /// </summary>
-        public bool HasBeenLogged { get; }
+        public bool HasBeenLoggedByProjectCache { get; }
 
         /// <summary>
         /// Gets the error code associated with this exception's message (not the inner exception).
@@ -55,7 +55,7 @@ params string[] messageArgs
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
 
-            throw new ProjectCacheException(message, innerException, hasBeenLogged: false, errorCode);
+            throw new ProjectCacheException(message, innerException, hasBeenLoggedByProjectCache: false, errorCode);
         }
 
         internal static void ThrowForLoggedError
@@ -68,7 +68,7 @@ params string[] messageArgs
 
             string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out var errorCode, out _, messageResourceName, messageArgs);
 
-            throw new ProjectCacheException(message: message, innerException: null, hasBeenLogged: true, errorCode: errorCode);
+            throw new ProjectCacheException(message: message, innerException: null, hasBeenLoggedByProjectCache: true, errorCode: errorCode);
         }
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 88377c009a2..f1f9c632b9f 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -791,12 +791,15 @@ string [] commandLine
                     exitType = ExitType.InitializationError;
                 }
             }
-            catch (ProjectCacheException e) when (!e.HasBeenLogged)
+            catch (ProjectCacheException e)
             {
                 Console.WriteLine($"MSBUILD : error {e.ErrorCode}: {e.Message}");
 
 #if DEBUG
-                Console.WriteLine("This is an unhandled exception from a project cache -- PLEASE OPEN A BUG AGAINST THE PROJECT CACHE OWNER.");
+                if (!e.HasBeenLoggedByProjectCache)
+                {
+                    Console.WriteLine("This is an unhandled exception from a project cache -- PLEASE OPEN A BUG AGAINST THE PROJECT CACHE OWNER.");
+                }
 #endif
 
                 if (e.InnerException is not null)
