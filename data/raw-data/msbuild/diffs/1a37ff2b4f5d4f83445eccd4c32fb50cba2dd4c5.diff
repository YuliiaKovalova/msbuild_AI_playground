diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index 7a12229975b..9ba49ffccdf 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -39,27 +39,39 @@ public byte[] ReadFileAllBytes(string path)
             return File.ReadAllBytes(path);
         }
 
-        public virtual IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption)
-        {
 #if FEATURE_MSIOREDIST
+        private IEnumerable<string> HandleFileLoadException(
+            Func<string, string, Microsoft.IO.SearchOption, IEnumerable<string>> enumerateFunctionDelegate,
+            string path,
+            string searchPattern,
+            Microsoft.IO.SearchOption searchOption
+        )
+        {
             try
             {
-                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
-                        ? Microsoft.IO.Directory.EnumerateFiles(path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
-                        : Directory.EnumerateFiles(path, searchPattern, searchOption);
+                return enumerateFunctionDelegate(path, searchPattern, searchOption);
             }
-            // Microsoft.IO.Redist has a dependency on System.Buffers and if it is not found these lines throw an exception.
-            // However, FileMatcher class that calls it do not allow to fail on IO exceptions.
+            // Microsoft.IO.Redist has a dependency on System.Buffers and if System.Buffers assembly is not found the line above throws an exception.
+            // However, FileMatcher class (that in most cases calls the enumeration) does not allow to fail on a IO-related exception. Such behavior hides the actual exception and makes it obscure.
             // We rethrow it to make it fail with a proper error message and call stack.
             catch (FileLoadException ex)
             {
                 throw new InvalidOperationException("Could not load file or assembly.", ex);
             }
-            // Sometimes FileNotFoundException is thrown when there is an assembly load failure. In this case it has FusionLog.
+            // Sometimes FileNotFoundException is thrown when there is an assembly load failure. In this case it should have FusionLog.
             catch (FileNotFoundException ex) when (ex.FusionLog != null)
             {
                 throw new InvalidOperationException("Could not load file or assembly.", ex);
             }
+        }
+#endif
+
+        public virtual IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption)
+        {
+#if FEATURE_MSIOREDIST
+            return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                    ? HandleFileLoadException(Microsoft.IO.Directory.EnumerateFiles, path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
+                    : Directory.EnumerateFiles(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateFiles(path, searchPattern, searchOption);
 #endif
@@ -68,24 +80,9 @@ public virtual IEnumerable<string> EnumerateFiles(string path, string searchPatt
         public virtual IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption)
         {
 #if FEATURE_MSIOREDIST
-            try
-            {
-                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
-                    ? Microsoft.IO.Directory.EnumerateDirectories(path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
-                    : Directory.EnumerateDirectories(path, searchPattern, searchOption);
-            }
-            // Microsoft.IO.Redist has a dependency on System.Buffers and if it is not found these lines throw an exception.
-            // However, FileMatcher class that calls it do not allow to fail on IO exceptions.
-            // We rethrow it to make it fail with a proper error message and call stack.
-            catch (FileLoadException ex)
-            {
-                throw new InvalidOperationException("Could not load file or assembly.", ex);
-            }
-            // Sometimes FileNotFoundException is thrown when there is an assembly load failure. In this case it has FusionLog.
-            catch (FileNotFoundException ex) when (ex.FusionLog != null)
-            {
-                throw new InvalidOperationException("Could not load file or assembly.", ex);
-            }
+            return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? HandleFileLoadException(Microsoft.IO.Directory.EnumerateDirectories, path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
+                : Directory.EnumerateDirectories(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateDirectories(path, searchPattern, searchOption);
 #endif
@@ -94,24 +91,9 @@ public virtual IEnumerable<string> EnumerateDirectories(string path, string sear
         public virtual IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption)
         {
 #if FEATURE_MSIOREDIST
-            try
-            {
-                return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
-                    ? Microsoft.IO.Directory.EnumerateFileSystemEntries(path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
-                    : Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
-            }
-            // Microsoft.IO.Redist has a dependency on System.Buffers and if it is not found these lines throw an exception.
-            // However, FileMatcher class that calls it do not allow to fail on IO exceptions.
-            // We rethrow it to make it fail with a proper error message and call stack.
-            catch (FileLoadException ex)
-            {
-                throw new InvalidOperationException("Could not load file or assembly.", ex);
-            }
-            // Sometimes FileNotFoundException is thrown when there is an assembly load failure. In this case it has FusionLog.
-            catch (FileNotFoundException ex) when (ex.FusionLog != null)
-            {
-                throw new InvalidOperationException("Could not load file or assembly.", ex);
-            }
+            return ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? HandleFileLoadException(Microsoft.IO.Directory.EnumerateFileSystemEntries, path, searchPattern, (Microsoft.IO.SearchOption)searchOption)
+                : Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 #else
             return Directory.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 #endif
