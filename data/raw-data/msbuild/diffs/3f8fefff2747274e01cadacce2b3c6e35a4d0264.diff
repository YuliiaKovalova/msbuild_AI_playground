diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index dd5d0c8a1fc..6b61971098a 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -29,7 +29,8 @@ public BuildEventArgsSerializationTests()
         [InlineData(false)]
         public void RoundtripBuildStartedEventArgs(bool serializeAllEnvironmentVariables)
         {
-            Traits.LogAllEnvironmentVariables = serializeAllEnvironmentVariables;
+            using TestEnvironment env = TestEnvironment.Create();
+            env.SetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES", "1");
             var args = new BuildStartedEventArgs(
                 "Message",
                 "HelpKeyword",
@@ -51,8 +52,6 @@ public void RoundtripBuildStartedEventArgs(bool serializeAllEnvironmentVariables
                 e => e.HelpKeyword,
                 e => e.ThreadId.ToString(),
                 e => e.SenderName);
-
-            Traits.LogAllEnvironmentVariables = false;
         }
 
         [Fact]
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 5604021e28a..43b280394e5 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -20,7 +20,7 @@ internal sealed class EventSourceSink :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IEventSource4, IBuildEventSink
+        IEventSource4, IBuildEventSink, IInternalEventSource
     {
         #region Events
 
@@ -168,6 +168,14 @@ public bool IncludeEvaluationPropertiesAndItems
             private set;
         }
 
+        public bool? ShouldLogAllEnvironmentVariables
+        {
+            get => _shouldLogAllEnvironmentVariables ??= !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4);
+            set => _shouldLogAllEnvironmentVariables = value;
+        }
+
+        private bool? _shouldLogAllEnvironmentVariables = null;
+
         #endregion
 
         #region Methods
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index c261563d0e7..702280c0d81 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -65,6 +65,12 @@ LoggingServiceState ServiceState
             get;
         }
 
+        bool ShouldLogAllEnvironmentVariables
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// Returns the synchronous/asynchronous mode for the logging service.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index a81fd673b27..07676d26569 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -32,6 +32,12 @@ internal class LoggingContext
 
         protected bool _hasLoggedErrors;
 
+        internal bool ShouldLogAllEnvironmentVariables
+        {
+            get => _loggingService.ShouldLogAllEnvironmentVariables;
+            set => _loggingService.ShouldLogAllEnvironmentVariables = value;
+        }
+
         /// <summary>
         /// Constructs the logging context from a logging service and an event context.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 6cf71eac4e9..39f26d9cd65 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -562,6 +562,12 @@ public bool IncludeEvaluationPropertiesAndItems
             set => _includeEvaluationPropertiesAndItems = value;
         }
 
+        public bool ShouldLogAllEnvironmentVariables
+        {
+            get => _filterEventSource.ShouldLogAllEnvironmentVariables;
+            set => _filterEventSource.ShouldLogAllEnvironmentVariables = value;
+        }
+
         /// <summary>
         /// Determines if the specified submission has logged an errors.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 90048fd6f85..34519c09118 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -116,7 +116,7 @@ private ProjectLoggingContext(
                 {
                     properties = Enumerable.Empty<DictionaryEntry>();
                 }
-                else if (Traits.LogAllEnvironmentVariables)
+                else if (ShouldLogAllEnvironmentVariables)
                 {
                     properties = projectProperties.GetCopyOnReadEnumerable(property => new DictionaryEntry(property.Name, property.EvaluatedValue));
                 }
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 32f9b37fe68..567f2e755f5 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1829,7 +1829,7 @@ public ProjectAddedToProjectCollectionEventArgs(ProjectRootElement element)
         /// The ReusableLogger wraps a logger and allows it to be used for both design-time and build-time.  It internally swaps
         /// between the design-time and build-time event sources in response to Initialize and Shutdown events.
         /// </summary>
-        internal class ReusableLogger : INodeLogger, IEventSource4
+        internal class ReusableLogger : INodeLogger, IEventSource4, IInternalEventSource
         {
             /// <summary>
             /// The logger we are wrapping.
@@ -1934,6 +1934,8 @@ internal class ReusableLogger : INodeLogger, IEventSource4
 
             private bool _includeEvaluationPropertiesAndItems;
 
+            private bool? _shouldLogAllEnvironmentVariables = null;
+
             /// <summary>
             /// Constructor.
             /// </summary>
@@ -2111,6 +2113,11 @@ public string Parameters
 
                 set => _originalLogger.Parameters = value;
             }
+            public bool? ShouldLogAllEnvironmentVariables
+            {
+                get => _shouldLogAllEnvironmentVariables ??= !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4);
+                set => _shouldLogAllEnvironmentVariables = value;
+            }
 
             /// <summary>
             /// If we haven't yet been initialized, we register for design time events and initialize the logger we are holding.
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index e131536a326..ebb63d52028 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -812,7 +812,7 @@ private void Evaluate()
             if (this._evaluationLoggingContext.LoggingService.IncludeEvaluationPropertiesAndItems)
             {
                 globalProperties = _data.GlobalPropertiesDictionary;
-                properties = Traits.LogAllEnvironmentVariables ? _data.Properties : FilterOutEnvironmentDerivedProperties(_data.Properties);
+                properties = _evaluationLoggingContext.ShouldLogAllEnvironmentVariables ? _data.Properties : FilterOutEnvironmentDerivedProperties(_data.Properties);
                 items = _data.Items;
             }
 
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 5098cd3fef2..f8442116097 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -33,6 +33,8 @@ internal abstract class BaseConsoleLogger : INodeLogger
         /// </summary>
         private static bool _supportReadingBackgroundColor = true;
 
+        protected internal IEventSource _eventSource;
+
         #region Properties
 
         /// <summary>
@@ -940,7 +942,10 @@ public int Compare(object o1, object o2)
 
         public virtual void Shutdown()
         {
-            Traits.LogAllEnvironmentVariables = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES")) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4);
+            if (_eventSource is IInternalEventSource internalEventSource)
+            {
+                internalEventSource.ShouldLogAllEnvironmentVariables = null;
+            }
         }
 
         internal abstract void ResetConsoleLoggerState();
@@ -957,6 +962,8 @@ public virtual void Initialize(IEventSource eventSource, int nodeCount)
         /// <param name="eventSource">Available events.</param>
         public virtual void Initialize(IEventSource eventSource)
         {
+            _eventSource = eventSource;
+
             // Always show perf summary for diagnostic verbosity.
             if (IsVerbosityAtLeast(LoggerVerbosity.Diagnostic))
             {
@@ -1050,7 +1057,11 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue
                     return true;
                 case "SHOWENVIRONMENT":
                     showEnvironment = true;
-                    Traits.LogAllEnvironmentVariables = true;
+                    if (_eventSource is IInternalEventSource internalEventSource)
+                    {
+                        internalEventSource.ShouldLogAllEnvironmentVariables = true;
+                    }
+
                     return true;
                 case "SHOWPROJECTFILE":
                     if (parameterValue == null)
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 9f6a5ae8eff..28e07b3a7ec 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -231,7 +231,7 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
                 WriteLinePrettyFromResource("BuildStartedWithTime", e.Timestamp);
             }
 
-            if (Traits.LogAllEnvironmentVariables)
+            if (_eventSource is IInternalEventSource internalES && internalES.ShouldLogAllEnvironmentVariables == true)
             {
                 WriteEnvironment(e.BuildEnvironment);
             }
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index bbfc1978a44..a1843eb790e 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -108,7 +108,7 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
                 WriteLinePrettyFromResource("BuildStartedWithTime", e.Timestamp);
             }
 
-            if (Traits.LogAllEnvironmentVariables)
+            if (_eventSource is IInternalEventSource internalES && internalES.ShouldLogAllEnvironmentVariables == true)
             {
                 WriteEnvironment(e.BuildEnvironment);
             }
diff --git a/src/Framework/IInternalEventSource.cs b/src/Framework/IInternalEventSource.cs
new file mode 100644
index 00000000000..03bb51282dd
--- /dev/null
+++ b/src/Framework/IInternalEventSource.cs
@@ -0,0 +1,10 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Framework
+{
+    internal interface IInternalEventSource
+    {
+        public bool? ShouldLogAllEnvironmentVariables { get; set; }
+    }
+}
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index cfb5e198aa2..9957d33cf38 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -91,14 +91,6 @@ public Traits()
         /// </summary>
         public readonly bool LogPropertyFunctionsRequiringReflection = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildLogPropertyFunctionsRequiringReflection"));
 
-        /// <summary>
-        /// Log all environment variables whether or not they are used in a build in the binary log.
-        /// </summary>
-        public static bool LogAllEnvironmentVariables = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDLOGALLENVIRONMENTVARIABLES")) &&
-#if !TASKHOST
-            ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4)
-#endif
-            ;
         /// <summary>
         /// Log property tracking information.
         /// </summary>
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index b58f7f10881..53b6a653d9a 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -138,6 +138,19 @@ public MuxLogger()
         /// </summary>
         public bool IncludeEvaluationPropertiesAndItems { get; set; }
 
+        private IEventSource _eventSource;
+        private bool? ShouldLogAllEnvironmentVariables
+        {
+            get => _eventSource is IInternalEventSource internalES ? internalES.ShouldLogAllEnvironmentVariables : false;
+            set
+            {
+                if (_eventSource is IInternalEventSource internalES)
+                {
+                    internalES.ShouldLogAllEnvironmentVariables = value;
+                }
+            }
+        }
+
         /// <summary>
         /// Initialize the logger.
         /// </summary>
@@ -862,7 +875,7 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                         _firstProjectStartedEventContext = buildEvent.BuildEventContext;
 
                         // We've never seen a project started event, so raise the build started event and save this project started event.
-                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, Traits.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : null);
+                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, this. ? _buildStartedEvent.BuildEnvironment : null);
                         RaiseBuildStartedEvent(sender, startedEvent);
                     }
 
