diff --git a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
index 3ed3e05caf1..5cb65f898d3 100644
--- a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
@@ -11,14 +11,8 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal sealed class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
     {
-        #region Private Data
-
         private readonly IHandshake _handshake;
 
-        #endregion
-
-        #region Constructors and Factories
-
         /// <summary>
         /// Instantiates an endpoint to act as a client
         /// </summary>
@@ -33,8 +27,6 @@ internal ServerNodeEndpointOutOfProc(
             InternalConstruct(pipeName);
         }
 
-        #endregion
-
         /// <summary>
         /// Returns the host handshake for this node endpoint
         /// </summary>
diff --git a/src/Build/BackEnd/Node/ConsoleOutput.cs b/src/Build/BackEnd/Node/ConsoleOutput.cs
new file mode 100644
index 00000000000..8cf4092bc84
--- /dev/null
+++ b/src/Build/BackEnd/Node/ConsoleOutput.cs
@@ -0,0 +1,12 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+namespace Microsoft.Build.BackEnd
+{
+    internal enum ConsoleOutput
+    {
+        Standard = 1,
+        Error
+    }
+}
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 13b10953b98..5ec25163a82 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -322,8 +322,8 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             (int exitCode, string exitType) buildResult;
 
             // Dispose must be called before the server sends response packet
-            using (var outWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, 1))))
-            using (var errWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, 2))))
+            using (var outWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Standard))))
+            using (var errWriter = RedirectConsoleWriter.Create(text => SendPacket(new ServerNodeConsoleWrite(text, ConsoleOutput.Error))))
             {
                 Console.SetOut(outWriter);
                 Console.SetError(errWriter);
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index ded716cdd68..48ab050cf1e 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -19,31 +19,11 @@ internal sealed class ServerNodeBuildCommand : INodePacket
         private CultureInfo _culture = default!;
         private CultureInfo _uiCulture = default!;
 
-        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
-        {
-            _commandLine = commandLine;
-            _startupDirectory = startupDirectory;
-            _buildProcessEnvironment = buildProcessEnvironment;
-            _culture = culture;
-            _uiCulture = uiCulture;
-        }
-
-        /// <summary>
-        /// Private constructor for deserialization
-        /// </summary>
-        private ServerNodeBuildCommand()
-        {
-        }
-
-        #region INodePacket Members
-
         /// <summary>
         /// Retrieves the packet type.
         /// </summary>
         public NodePacketType Type => NodePacketType.ServerNodeBuildCommand;
 
-        #endregion
-
         /// <summary>
         /// The startup directory
         /// </summary>
@@ -69,7 +49,21 @@ private ServerNodeBuildCommand()
         /// </summary>
         public CultureInfo UICulture => _uiCulture;
 
-        #region INodePacketTranslatable Members
+        /// <summary>
+        /// Private constructor for deserialization
+        /// </summary>
+        private ServerNodeBuildCommand()
+        {
+        }
+
+        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
+        {
+            _commandLine = commandLine;
+            _startupDirectory = startupDirectory;
+            _buildProcessEnvironment = buildProcessEnvironment;
+            _culture = culture;
+            _uiCulture = uiCulture;
+        }
 
         /// <summary>
         /// Translates the packet to/from binary form.
@@ -94,6 +88,5 @@ internal static INodePacket FactoryForDeserialization(ITranslator translator)
 
             return command;
         }
-        #endregion
     }
 }
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
index c28a77d704d..b7b9b3e7a2c 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
@@ -9,6 +9,16 @@ internal sealed class ServerNodeBuildResult : INodePacket
         private int _exitCode = default!;
         private string _exitType = default!;
 
+        /// <summary>
+        /// Packet type.
+        /// This has to be in sync with <see cref="NodePacketType.ServerNodeBuildResult" />
+        /// </summary>
+        public NodePacketType Type => NodePacketType.ServerNodeBuildResult;
+
+        public int ExitCode => _exitCode;
+
+        public string ExitType => _exitType;
+
         /// <summary>
         /// Private constructor for deserialization
         /// </summary>
@@ -20,20 +30,6 @@ public ServerNodeBuildResult(int exitCode, string exitType)
             _exitType = exitType;
         }
 
-        #region INodePacket Members
-
-        /// <summary>
-        /// Packet type.
-        /// This has to be in sync with Microsoft.Build.BackEnd.NodePacketType.ServerNodeBuildCommand
-        /// </summary>
-        public NodePacketType Type => NodePacketType.ServerNodeBuildResult;
-
-        #endregion
-
-        public int ExitCode => _exitCode;
-
-        public string ExitType => _exitType;
-
         public void Translate(ITranslator translator)
         {
             translator.Translate(ref _exitCode);
diff --git a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
index 81e783e42c6..da3f8473905 100644
--- a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
+++ b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
@@ -6,39 +6,35 @@ namespace Microsoft.Build.BackEnd
     internal sealed class ServerNodeConsoleWrite : INodePacket
     {
         private string _text = default!;
-        private byte _outputType = default!;
+        private ConsoleOutput _outputType = default!;
+
+        /// <summary>
+        /// Packet type.
+        /// </summary>
+        public NodePacketType Type => NodePacketType.ServerNodeConsoleWrite;
 
         public string Text => _text;
 
         /// <summary>
-        /// 1 = stdout, 2 = stderr
+        /// Console output for the message
         /// </summary>
-        public byte OutputType => _outputType;
+        public ConsoleOutput OutputType => _outputType;
 
         /// <summary>
         /// Private constructor for deserialization
         /// </summary>
         private ServerNodeConsoleWrite() { }
 
-        public ServerNodeConsoleWrite(string text, byte outputType)
+        public ServerNodeConsoleWrite(string text, ConsoleOutput outputType)
         {
             _text = text;
             _outputType = outputType;
         }
 
-        #region INodePacket Members
-
-        /// <summary>
-        /// Packet type.
-        /// </summary>
-        public NodePacketType Type => NodePacketType.ServerNodeConsole;
-
-        #endregion
-
         public void Translate(ITranslator translator)
         {
             translator.Translate(ref _text);
-            translator.Translate(ref _outputType);
+            translator.TranslateEnum(ref _outputType, (int)_outputType);
         }
 
         internal static INodePacket FactoryForDeserialization(ITranslator translator)
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 099f8330d6e..c47eaaa70a8 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -151,6 +151,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index b1540445884..1a999ac682d 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -435,6 +435,7 @@ private static bool TryLoadCulture(string cultureName, out CultureInfo cultureIn
             /// Finally, converting the enum to an int assumes that we always want to transport enums as ints.  This
             /// works in all of our current cases, but certainly isn't perfectly generic.</remarks>
             public void TranslateEnum<T>(ref T value, int numericValue)
+                where T : struct, Enum
             {
                 numericValue = _reader.ReadInt32();
                 Type enumType = value.GetType();
@@ -1039,10 +1040,8 @@ public void TranslateCulture(ref CultureInfo value)
             /// Finally, converting the enum to an int assumes that we always want to transport enums as ints.  This
             /// works in all of our current cases, but certainly isn't perfectly generic.</remarks>
             public void TranslateEnum<T>(ref T value, int numericValue)
+                where T : struct, Enum
             {
-                Type enumType = value.GetType();
-                ErrorUtilities.VerifyThrow(enumType.GetTypeInfo().IsEnum, "Must pass an enum type.");
-
                 _writer.Write(numericValue);
             }
 
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 4ae56476b38..b0ec1f1f6c5 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -206,7 +206,7 @@ internal enum NodePacketType : byte
         /// Info about server console activity. 
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        ServerNodeConsole = 0xF2,
+        ServerNodeConsoleWrite = 0xF2,
     }
     #endregion
 
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index 61dc02cc3a0..56f47d0c5f4 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -235,7 +235,8 @@ BinaryWriter Writer
         /// can you simply pass as ref Enum, because an enum instance doesn't match that function signature.
         /// Finally, converting the enum to an int assumes that we always want to transport enums as ints.  This
         /// works in all of our current cases, but certainly isn't perfectly generic.</remarks>
-        void TranslateEnum<T>(ref T value, int numericValue);
+        void TranslateEnum<T>(ref T value, int numericValue)
+            where T : struct, Enum;
 
         /// <summary>
         /// Translates a value using the .Net binary formatter.
