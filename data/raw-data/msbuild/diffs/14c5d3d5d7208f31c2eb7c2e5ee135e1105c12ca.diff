diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index e4f942f26fd..3ac8c38a1c0 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -242,7 +242,7 @@ public void ContinueRequestWithResources(ResourceResponse response)
             ErrorUtilities.VerifyThrow(HasActiveBuildRequest, "Request not building");
             ErrorUtilities.VerifyThrow(!_terminateEvent.WaitOne(0), "Request already terminated");
             ErrorUtilities.VerifyThrow(!_continueWithResourcesEvent.WaitOne(0), "Request already continued");
-            VerifyEntryInActiveState();
+            VerifyEntryInActiveOrWaitingState();
 
             _continueResources = response;
             _continueWithResourcesEvent.Set();
@@ -506,7 +506,7 @@ public int RequestCores(int requestedCores, bool waitForCores)
                 throw new BuildAbortedException();
             }
 
-            VerifyEntryInActiveState();
+            VerifyEntryInActiveOrWaitingState();
             return _continueResources.NumCores;
         }
 
@@ -735,6 +735,15 @@ private void VerifyEntryInActiveState()
             ErrorUtilities.VerifyThrow(_requestEntry.State == BuildRequestEntryState.Active, "Entry is not in the Active state, it is in the {0} state.", _requestEntry.State);
         }
 
+        /// <summary>
+        /// Asserts that the entry is in the active or waiting state.
+        /// </summary>
+        private void VerifyEntryInActiveOrWaitingState()
+        {
+            ErrorUtilities.VerifyThrow(_requestEntry.State == BuildRequestEntryState.Active || _requestEntry.State == BuildRequestEntryState.Waiting,
+                "Entry is not in the Active state, it is in the {0} state.", _requestEntry.State);
+        }
+
         /// <summary>
         /// The entry point for the request builder thread.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 54069122a58..c5a60da817b 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -590,7 +590,7 @@ public Task<int> RequestCores(int requestId, int requestedCores, bool waitForCor
         /// </summary>
         public List<ScheduleResponse> ReleaseCores(int requestId, int coresToRelease)
         {
-            SchedulableRequest request = _schedulingData.GetExecutingRequest(requestId);
+            SchedulableRequest request = _schedulingData.GetScheduledRequest(requestId);
             request.RemoveRequestedCores(coresToRelease);
 
             // Releasing cores means that we may be able to schedule more work.
